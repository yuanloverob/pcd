{
  "cve_id": "CVE-2011-2505",
  "cve_desc": "libraries/auth/swekey/swekey.auth.lib.php in the Swekey authentication feature in phpMyAdmin 3.x before 3.3.10.2 and 3.4.x before 3.4.3.1 assigns values to arbitrary parameters referenced in the query string, which allows remote attackers to modify the SESSION superglobal array via a crafted request, related to a \"remote variable manipulation vulnerability.\"",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "7ebd958b2bf59f96fecd5b3322bdbd0b244a7967",
  "patch_info": {
    "commit_hash": "7ebd958b2bf59f96fecd5b3322bdbd0b244a7967",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/7ebd958b2bf59f96fecd5b3322bdbd0b244a7967",
    "files": [
      "ChangeLog",
      "libraries/auth/swekey/swekey.auth.lib.php"
    ],
    "message": "Fixed possible session manipulation in swekey authentication, see PMASA-2011-5",
    "before_after_code_files": [
      "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php"
    ]
  },
  "patch_diff": {
    "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php": [
      "File: libraries/auth/swekey/swekey.auth.lib.php -> libraries/auth/swekey/swekey.auth.lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "263:  }",
      "264: }",
      "267: {",
      "269:  session_write_close();",
      "271:  session_start();",
      "272:  $_SESSION = array();",
      "273:  session_write_close();",
      "",
      "[Removed Lines]",
      "266: if (strstr($_SERVER['QUERY_STRING'],'session_to_unset') != false)",
      "268:     parse_str($_SERVER['QUERY_STRING']);",
      "270:  session_id($session_to_unset);",
      "",
      "[Added Lines]",
      "266: if (!empty($_GET['session_to_unset']))",
      "269:  session_id($_GET['session_to_unset']);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94c6836f8b16129a64383ac03beb4a9639ba9559",
      "candidate_info": {
        "commit_hash": "94c6836f8b16129a64383ac03beb4a9639ba9559",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/94c6836f8b16129a64383ac03beb4a9639ba9559",
        "files": [
          "db_datadict.php",
          "db_operations.php",
          "db_printview.php",
          "db_search.php",
          "export.php",
          "libraries/auth/swekey/swekey.auth.lib.php",
          "libraries/common.inc.php",
          "libraries/database_interface.lib.php",
          "libraries/db_links.inc.php",
          "tbl_chart.php",
          "tbl_export.php",
          "tbl_relation.php",
          "tbl_replace.php",
          "tbl_select.php",
          "tbl_structure.php",
          "tbl_tracking.php",
          "test/classes/PMA_Config_test.php",
          "test/libraries/common/PMA_quoting_slashing_test.php",
          "test/libraries/core/PMA_getLinks_test.php",
          "test/libraries/core/PMA_headerLocation_test_disabled.php",
          "test/selenium/PmaSeleniumLoginTest.php"
        ],
        "message": "fix coding style : control structures",
        "before_after_code_files": [
          "db_datadict.php||db_datadict.php",
          "db_operations.php||db_operations.php",
          "db_printview.php||db_printview.php",
          "db_search.php||db_search.php",
          "export.php||export.php",
          "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php",
          "libraries/common.inc.php||libraries/common.inc.php",
          "libraries/database_interface.lib.php||libraries/database_interface.lib.php",
          "libraries/db_links.inc.php||libraries/db_links.inc.php",
          "tbl_chart.php||tbl_chart.php",
          "tbl_export.php||tbl_export.php",
          "tbl_relation.php||tbl_relation.php",
          "tbl_replace.php||tbl_replace.php",
          "tbl_select.php||tbl_select.php",
          "tbl_structure.php||tbl_structure.php",
          "tbl_tracking.php||tbl_tracking.php",
          "test/classes/PMA_Config_test.php||test/classes/PMA_Config_test.php",
          "test/libraries/common/PMA_quoting_slashing_test.php||test/libraries/common/PMA_quoting_slashing_test.php",
          "test/libraries/core/PMA_getLinks_test.php||test/libraries/core/PMA_getLinks_test.php",
          "test/libraries/core/PMA_headerLocation_test_disabled.php||test/libraries/core/PMA_headerLocation_test_disabled.php",
          "test/selenium/PmaSeleniumLoginTest.php||test/selenium/PmaSeleniumLoginTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php"
          ],
          "candidate": [
            "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php"
          ]
        }
      },
      "candidate_diff": {
        "db_datadict.php||db_datadict.php": [
          "File: db_datadict.php -> db_datadict.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: $tables = PMA_DBI_get_tables($db);",
          "61: $count  = 0;",
          "63:     $comments = PMA_getComments($db, $table);",
          "65:     echo '<div>' . \"\\n\";",
          "",
          "[Removed Lines]",
          "62: foreach($tables as $table) {",
          "",
          "[Added Lines]",
          "62: foreach ($tables as $table) {",
          "",
          "---------------"
        ],
        "db_operations.php||db_operations.php": [
          "File: db_operations.php -> db_operations.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:                 $triggers = PMA_DBI_get_triggers($db, $each_table, '');",
          "167:                     $_error = true;",
          "169:                     $sql_query = $back . $sql_query;",
          "",
          "[Removed Lines]",
          "164:                 if (! PMA_Table::moveCopy($db, $each_table, $newname, $each_table,",
          "165:                     isset($this_what) ? $this_what : 'data', $move, 'db_copy'))",
          "166:                 {",
          "",
          "[Added Lines]",
          "164:                 if (! PMA_Table::moveCopy(",
          "165:                     $db, $each_table, $newname, $each_table,",
          "166:                     isset($this_what) ? $this_what : 'data', $move, 'db_copy')",
          "167:                 ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:             $message = PMA_Message::success(__('Database %s has been renamed to %s'));",
          "274:             $message->addParam($db);",
          "275:             $message->addParam($newname);",
          "277:             $message = PMA_Message::success(__('Database %s has been copied to %s'));",
          "278:             $message->addParam($db);",
          "279:             $message->addParam($newname);",
          "",
          "[Removed Lines]",
          "276:         } elseif (! $_error)  {",
          "",
          "[Added Lines]",
          "277:         } elseif (! $_error) {",
          "",
          "---------------"
        ],
        "db_printview.php||db_printview.php": [
          "File: db_printview.php -> db_printview.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: if ($num_tables == 0) {",
          "94:     echo __('No tables found in database.');",
          "98:     ?>",
          "99: <table>",
          "100: <thead>",
          "",
          "[Removed Lines]",
          "95: }",
          "97: else {",
          "",
          "[Added Lines]",
          "95: } else {",
          "",
          "---------------"
        ],
        "db_search.php||db_search.php": [
          "File: db_search.php -> db_search.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: if ($GLOBALS['is_ajax_request'] == true) {",
          "260:     exit;",
          "263:     echo '</div>';//end searchresults div",
          "264: }",
          "",
          "[Removed Lines]",
          "261: }",
          "262: else {",
          "",
          "[Added Lines]",
          "261: } else {",
          "",
          "---------------"
        ],
        "export.php||export.php": [
          "File: export.php -> export.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                 if ($GLOBALS['compression'] == 'bzip'  && @function_exists('bzcompress')) {",
          "157:                     $dump_buffer = bzcompress($dump_buffer);",
          "162:                     $dump_buffer = gzencode($dump_buffer);",
          "163:                 }",
          "",
          "[Removed Lines]",
          "158:                 }",
          "160:                 elseif ($GLOBALS['compression'] == 'gzip' && @function_exists('gzencode')) {",
          "",
          "[Added Lines]",
          "158:                 } elseif ($GLOBALS['compression'] == 'gzip' && @function_exists('gzencode')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:             $zipfile -> addFile($dump_buffer, substr($filename, 0, -4));",
          "633:             $dump_buffer = $zipfile -> file();",
          "634:         }",
          "638:         if (@function_exists('bzcompress')) {",
          "639:             $dump_buffer = bzcompress($dump_buffer);",
          "640:         }",
          "644:         if (@function_exists('gzencode') && !@ini_get('zlib.output_compression')) {",
          "646:             $dump_buffer = gzencode($dump_buffer);",
          "",
          "[Removed Lines]",
          "635:     }",
          "637:     elseif ($compression == 'bzip') {",
          "641:     }",
          "643:     elseif ($compression == 'gzip') {",
          "",
          "[Added Lines]",
          "634:     } elseif ($compression == 'bzip') {",
          "639:     } elseif ($compression == 'gzip') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "672:     } else {",
          "673:         echo $dump_buffer;",
          "674:     }",
          "683:     echo '</textarea>' . \"\\n\"",
          "684:        . '    </form>' . \"\\n\";",
          "",
          "[Removed Lines]",
          "675: }",
          "679: else {",
          "",
          "[Added Lines]",
          "672: } else {",
          "",
          "---------------"
        ],
        "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php": [
          "File: libraries/auth/swekey/swekey.auth.lib.php -> libraries/auth/swekey/swekey.auth.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:         $_SESSION['SWEKEY']['VALID_SWEKEYS'] = array();",
          "24:         $valid_swekeys = explode(\"\\n\", @file_get_contents($confFile));",
          "25:         foreach ($valid_swekeys as $line) {",
          "28:                 $items = explode(\":\", $line);",
          "29:                 if (count($items) == 2)",
          "30:                     $_SESSION['SWEKEY']['VALID_SWEKEYS'][$items[0]] = trim($items[1]);",
          "33:                 $items = explode(\"=\", $line);",
          "34:                 $_SESSION['SWEKEY']['CONF_'.trim($items[0])] = trim($items[1]);",
          "35:             }",
          "",
          "[Removed Lines]",
          "26:             if (preg_match(\"/^[0-9A-F]{32}:.+$/\", $line) != false)",
          "27:             {",
          "31:             }",
          "32:             else if (preg_match(\"/^[A-Z_]+=.*$/\", $line) != false) {",
          "",
          "[Added Lines]",
          "26:             if (preg_match(\"/^[0-9A-F]{32}:.+$/\", $line) != false) {",
          "30:             } elseif (preg_match(\"/^[A-Z_]+=.*$/\", $line) != false) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     Swekey_EnableTokenCache($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']);",
          "127:     $caFile = $_SESSION['SWEKEY']['CONF_CA_FILE'];",
          "130:         $caFile = __FILE__;",
          "131:         $pos = strrpos($caFile, '/');",
          "132:         if ($pos === false)",
          "",
          "[Removed Lines]",
          "128:     if (empty($caFile))",
          "129:     {",
          "",
          "[Added Lines]",
          "126:     if (empty($caFile)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     }",
          "141:         Swekey_SetCAFile($caFile);",
          "143:         return \"Internal Error: CA File $caFile not found\";",
          "145:     $result = null;",
          "146:     $swekey_id = $_GET['swekey_id'];",
          "",
          "[Removed Lines]",
          "140:     if (file_exists($caFile))",
          "142:     else if (! empty($caFile) && (substr($_SESSION['SWEKEY']['CONF_SERVER_CHECK'], 0, 8) == \"https://\"))",
          "",
          "[Added Lines]",
          "137:     if (file_exists($caFile)) {",
          "139:     } elseif (! empty($caFile) && (substr($_SESSION['SWEKEY']['CONF_SERVER_CHECK'], 0, 8) == \"https://\")) {",
          "141:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         unset($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']);",
          "151:         if (! isset($_SESSION['SWEKEY']['RND_TOKEN'])) {",
          "152:             unset($swekey_id);",
          "155:             if (strlen($swekey_id) == 32) {",
          "156:                 $res = Swekey_CheckOtp($swekey_id, $_SESSION['SWEKEY']['RND_TOKEN'], $swekey_otp);",
          "157:                 unset($_SESSION['SWEKEY']['RND_TOKEN']);",
          "158:                 if (! $res) {",
          "159:                     $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';",
          "162:                     $_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY'] = $swekey_id;",
          "163:                     $_SESSION['SWEKEY']['FORCE_USER'] = $_SESSION['SWEKEY']['VALID_SWEKEYS'][$swekey_id];",
          "164:                     return null;",
          "165:                 }",
          "168:                 $result = __('No valid authentication key plugged');",
          "169:                 if ($_SESSION['SWEKEY']['CONF_DEBUG'])",
          "170:                 {",
          "",
          "[Removed Lines]",
          "153:         }",
          "154:         else {",
          "160:                 }",
          "161:                 else {",
          "166:             }",
          "167:             else {",
          "",
          "[Added Lines]",
          "151:         } else {",
          "157:                 } else {",
          "162:             } else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:                 unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file",
          "174:              }",
          "175:         }",
          "178:         unset($_SESSION['SWEKEY']);",
          "180:     $_SESSION['SWEKEY']['RND_TOKEN'] = Swekey_GetFastRndToken();",
          "181:     if (strlen($_SESSION['SWEKEY']['RND_TOKEN']) != 64) {",
          "",
          "[Removed Lines]",
          "176:     }",
          "177:     else",
          "",
          "[Added Lines]",
          "171:     } else {",
          "173:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:     if (! isset($swekey_id)) {",
          "187:         ?>",
          "188:         <script>",
          "191:         window.location.search=\"?swekey_id=\" + key + \"&token=<?php echo $_SESSION[' PMA_token ']; ?>\";",
          "195:         var url = \"\" + window.location;",
          "196:         if (url.indexOf(\"?\") > 0)",
          "197:             url = url.substr(0, url.indexOf(\"?\"));",
          "",
          "[Removed Lines]",
          "189:     if (key.length != 32)",
          "190:     {",
          "192:     }",
          "193:     else",
          "194:     {",
          "",
          "[Added Lines]",
          "184:     if (key.length != 32) {",
          "186:     } else {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:     if (isset($_SESSION['SWEKEY']) && $_SESSION['SWEKEY']['ENABLED']) {",
          "227:         echo '<script type=\"text/javascript\">';",
          "229:             echo 'var user = null;';",
          "231:            echo 'var user = \"'.$_SESSION['SWEKEY']['FORCE_USER'].'\";';",
          "233:         ?>",
          "234:             function open_swekey_site()",
          "",
          "[Removed Lines]",
          "228:         if (empty($_SESSION['SWEKEY']['FORCE_USER']))",
          "230:         else",
          "",
          "[Added Lines]",
          "220:         if (empty($_SESSION['SWEKEY']['FORCE_USER'])) {",
          "222:         } else {",
          "224:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "265:     }",
          "266: }",
          "270:     session_write_close();",
          "271:     session_id($_GET['session_to_unset']);",
          "272:     session_start();",
          "",
          "[Removed Lines]",
          "268: if (!empty($_GET['session_to_unset']))",
          "269: {",
          "",
          "[Added Lines]",
          "261: if (!empty($_GET['session_to_unset'])) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "276:     exit;",
          "277: }",
          "281:     unset($_SESSION['SWEKEY']);",
          "282: }",
          "",
          "[Removed Lines]",
          "279: if (isset($_GET['swekey_reset']))",
          "280: {",
          "",
          "[Added Lines]",
          "271: if (isset($_GET['swekey_reset'])) {",
          "",
          "---------------"
        ],
        "libraries/common.inc.php||libraries/common.inc.php": [
          "File: libraries/common.inc.php -> libraries/common.inc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1033: if (isset($_REQUEST['grid_edit']) && $_REQUEST['grid_edit'] == true) {",
          "1034:     $GLOBALS['grid_edit'] = true;",
          "1037:     $GLOBALS['grid_edit'] = false;",
          "1038: }",
          "",
          "[Removed Lines]",
          "1035: }",
          "1036: else {",
          "",
          "[Added Lines]",
          "1035: } else {",
          "",
          "---------------"
        ],
        "libraries/database_interface.lib.php||libraries/database_interface.lib.php": [
          "File: libraries/database_interface.lib.php -> libraries/database_interface.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:             foreach ($each_tables as $table_name => $each_table) {",
          "501:                 if ('comment' === $tbl_is_group",
          "505:                     unset($each_tables[$table_name]);",
          "506:                     continue;",
          "",
          "[Removed Lines]",
          "502:                   && 0 === strpos($each_table['Comment'], $table))",
          "503:                 {",
          "",
          "[Added Lines]",
          "502:                   && 0 === strpos($each_table['Comment'], $table)",
          "503:                 ) {",
          "",
          "---------------"
        ],
        "libraries/db_links.inc.php||libraries/db_links.inc.php": [
          "File: libraries/db_links.inc.php -> libraries/db_links.inc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: $tab_search['icon']     = 'ic_b_search';",
          "62: $tab_search['link']     = 'db_search.php';",
          "66:     $tab_tracking['text'] = __('Tracking');",
          "67:     $tab_tracking['icon'] = 'ic_eye';",
          "68:     $tab_tracking['link'] = 'db_tracking.php';",
          "",
          "[Removed Lines]",
          "64: if (PMA_Tracker::isActive())",
          "65: {",
          "",
          "[Added Lines]",
          "64: if (PMA_Tracker::isActive()) {",
          "",
          "---------------"
        ],
        "tbl_chart.php||tbl_chart.php": [
          "File: tbl_chart.php -> tbl_chart.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: $GLOBALS['js_include'][] = 'highcharts/exporting.js';",
          "28:     $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';",
          "29: }",
          "30: $GLOBALS['js_include'][] = 'canvg/canvg.js';",
          "",
          "[Removed Lines]",
          "27: if(PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {",
          "",
          "[Added Lines]",
          "27: if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {",
          "",
          "---------------"
        ],
        "tbl_export.php||tbl_export.php": [
          "File: tbl_export.php -> tbl_export.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:             $wheres[] = '(' . implode(') OR (',$where_clause) . ')';",
          "55:         }",
          "58:             $wheres[] = $analyzed_sql[0]['where_clause'];",
          "59:         }",
          "",
          "[Removed Lines]",
          "57:         if (!empty($analyzed_sql[0]['where_clause']))  {",
          "",
          "[Added Lines]",
          "57:         if (!empty($analyzed_sql[0]['where_clause'])) {",
          "",
          "---------------"
        ],
        "tbl_relation.php||tbl_relation.php": [
          "File: tbl_relation.php -> tbl_relation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "387: $columns = PMA_DBI_get_columns($db, $table);",
          "389: if (count($columns) > 0) {",
          "391:         $save_row[] = $row;",
          "392:     }",
          "393:     $saved_row_cnt  = count($save_row);",
          "",
          "[Removed Lines]",
          "390:     foreach($columns as $row) {",
          "",
          "[Added Lines]",
          "390:     foreach ($columns as $row) {",
          "",
          "---------------"
        ],
        "tbl_replace.php||tbl_replace.php": [
          "File: tbl_replace.php -> tbl_replace.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:         $edited_values = array();",
          "521:         parse_str($_REQUEST['transform_fields_list'], $edited_values);",
          "524:             $include_file = PMA_securePath($transformation['transformation']);",
          "525:             $column_name = $transformation['column_name'];",
          "",
          "[Removed Lines]",
          "523:         foreach($mime_map as $transformation) {",
          "",
          "[Added Lines]",
          "523:         foreach ($mime_map as $transformation) {",
          "",
          "---------------"
        ],
        "tbl_select.php||tbl_select.php": [
          "File: tbl_select.php -> tbl_select.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "252: </fieldset>",
          "254: <?php",
          "265:     $sql_query = 'SELECT ' . (isset($distinct) ? 'DISTINCT ' : '');",
          "",
          "[Removed Lines]",
          "255: }",
          "262: else {",
          "",
          "[Added Lines]",
          "255: } else {",
          "",
          "---------------"
        ],
        "tbl_structure.php||tbl_structure.php": [
          "File: tbl_structure.php -> tbl_structure.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:         } else {",
          "353:             echo $row['Default'];",
          "354:         }",
          "357:         echo '<i>' . _pgettext('None for default','None') . '</i>';",
          "358:     } ?></td>",
          "359:     <td nowrap=\"nowrap\"><?php echo strtoupper($row['Extra']); ?></td>",
          "",
          "[Removed Lines]",
          "355:     }",
          "356:     else {",
          "",
          "[Added Lines]",
          "355:     } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "631:         echo PMA_showMySQLDocu('Extending_MySQL', 'procedure_analyse') . \"\\n\";",
          "632:     }",
          "636:         echo '<a href=\"tbl_tracking.php?' . $url_query . '\">';",
          "637:         echo PMA_getIcon('eye.png', __('Track table'));",
          "638:         echo '</a>';",
          "",
          "[Removed Lines]",
          "634:     if (PMA_Tracker::isActive())",
          "635:     {",
          "",
          "[Added Lines]",
          "633:     if (PMA_Tracker::isActive()) {",
          "",
          "---------------"
        ],
        "tbl_tracking.php||tbl_tracking.php": [
          "File: tbl_tracking.php -> tbl_tracking.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:     <?php",
          "644:     $style = 'odd';",
          "645:     PMA_DBI_data_seek($sql_result, 0);",
          "647:         if ($version['tracking_active'] == 1) {",
          "648:             $version_status = __('active');",
          "649:         } else {",
          "",
          "[Removed Lines]",
          "646:     while($version = PMA_DBI_fetch_array($sql_result)) {",
          "",
          "[Added Lines]",
          "646:     while ($version = PMA_DBI_fetch_array($sql_result)) {",
          "",
          "---------------"
        ],
        "test/classes/PMA_Config_test.php||test/classes/PMA_Config_test.php": [
          "File: test/classes/PMA_Config_test.php -> test/classes/PMA_Config_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:         $this->object->set('GD2Available',$prevIsGb2Val);",
          "135:             $this->object->checkGd2();",
          "136:             $this->assertEquals(0, $this->object->get('PMA_IS_GD2'), 'Function imagecreatetruecolor does not exist, PMA_IS_GD2 should be 0');",
          "137:         }",
          "",
          "[Removed Lines]",
          "133:         if (!@function_exists('imagecreatetruecolor'))",
          "134:         {",
          "",
          "[Added Lines]",
          "133:         if (!@function_exists('imagecreatetruecolor')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     {",
          "179:         $this->object->checkWebServerOs();",
          "194:             }",
          "198:             $this->assertEquals(0, $this->object->get('PMA_IS_WINDOWS'), 'PMA_IS_WINDOWS Default to Unix or Equiv');",
          "200:             define('PHP_OS','Windows');",
          "",
          "[Removed Lines]",
          "181:         if (defined('PHP_OS'))",
          "182:         {",
          "183:             switch (PHP_OS)",
          "184:             {",
          "185:                 case stristr(PHP_OS,'win'):",
          "186:                     $this->assertEquals(1, $this->object->get('PMA_IS_WINDOWS'), 'PHP_OS equals: ' . PHP_OS . ' PMA_IS_WINDOWS should be 1');",
          "187:                     break;",
          "188:                 case stristr(PHP_OS, 'OS/2'):",
          "189:                     $this->assertEquals(1, $this->object->get('PMA_IS_WINDOWS'), 'PHP_OS is OS/2 PMA_IS_WINDOWS should be 1 (No file permissions like Windows)');",
          "190:                     break;",
          "191:                 case stristr(PHP_OS, 'Linux'):",
          "192:                     $this->assertEquals(0, $this->object->get('PMA_IS_WINDOWS'));",
          "193:                     break;",
          "195:         }",
          "196:         else",
          "197:         {",
          "",
          "[Added Lines]",
          "180:         if (defined('PHP_OS')) {",
          "181:             switch (PHP_OS) {",
          "182:             case stristr(PHP_OS,'win'):",
          "183:                 $this->assertEquals(1, $this->object->get('PMA_IS_WINDOWS'), 'PHP_OS equals: ' . PHP_OS . ' PMA_IS_WINDOWS should be 1');",
          "184:                 break;",
          "185:             case stristr(PHP_OS, 'OS/2'):",
          "186:                 $this->assertEquals(1, $this->object->get('PMA_IS_WINDOWS'), 'PHP_OS is OS/2 PMA_IS_WINDOWS should be 1 (No file permissions like Windows)');",
          "187:                 break;",
          "188:             case stristr(PHP_OS, 'Linux'):",
          "189:                 $this->assertEquals(0, $this->object->get('PMA_IS_WINDOWS'));",
          "190:                 break;",
          "192:         } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432:             'PMA_USR_BROWSER_AGENT'",
          "433:             );",
          "437:             $this->assertTrue(defined($define));",
          "438:             $this->assertEquals(constant($define), $this->object->get($define));",
          "439:         }",
          "",
          "[Removed Lines]",
          "435:         foreach ($defines as $define)",
          "436:         {",
          "",
          "[Added Lines]",
          "430:         foreach ($defines as $define) {",
          "",
          "---------------"
        ],
        "test/libraries/common/PMA_quoting_slashing_test.php||test/libraries/common/PMA_quoting_slashing_test.php": [
          "File: test/libraries/common/PMA_quoting_slashing_test.php -> test/libraries/common/PMA_quoting_slashing_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     public function testBackquoteForbidenWords() {",
          "107:         global $PMA_SQPdata_forbidden_word;",
          "110:             $this->assertEquals(\"`\" . $forbidden . \"`\", PMA_backquote($forbidden, false));",
          "111:         }",
          "112:     }",
          "",
          "[Removed Lines]",
          "109:         foreach ($PMA_SQPdata_forbidden_word as $forbidden){",
          "",
          "[Added Lines]",
          "109:         foreach ($PMA_SQPdata_forbidden_word as $forbidden) {",
          "",
          "---------------"
        ],
        "test/libraries/core/PMA_getLinks_test.php||test/libraries/core/PMA_getLinks_test.php": [
          "File: test/libraries/core/PMA_getLinks_test.php -> test/libraries/core/PMA_getLinks_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         if (file_exists('./js/'.$filename)) {",
          "54:             $mod = filemtime('./js/'.$filename);",
          "57:             $this->fail(\"JS file doesn't exists.\");",
          "58:         }",
          "59:         $this->assertEquals(PMA_includeJS($filename), '<script src=\"./js/'.$filename.'?ts='.$mod.'\" type=\"text/javascript\"></script>'. \"\\n\");",
          "",
          "[Removed Lines]",
          "55:         }",
          "56:         else{",
          "",
          "[Added Lines]",
          "55:         } else {",
          "",
          "---------------"
        ],
        "test/libraries/core/PMA_headerLocation_test_disabled.php||test/libraries/core/PMA_headerLocation_test_disabled.php": [
          "File: test/libraries/core/PMA_headerLocation_test_disabled.php -> test/libraries/core/PMA_headerLocation_test_disabled.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:             if (defined('PMA_IS_IIS')) {",
          "106:                 $this->oldIISvalue = PMA_IS_IIS;",
          "107:                 runkit_constant_redefine('PMA_IS_IIS', NULL);",
          "110:                 runkit_constant_add('PMA_IS_IIS', NULL);",
          "111:             }",
          "",
          "[Removed Lines]",
          "108:             }",
          "109:             else {",
          "",
          "[Added Lines]",
          "108:             } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:             if (defined('SID')) {",
          "117:                 $this->oldSIDvalue = SID;",
          "118:                 runkit_constant_redefine('SID', NULL);",
          "121:                 runkit_constant_add('SID', NULL);",
          "122:             }",
          "",
          "[Removed Lines]",
          "119:             }",
          "120:             else {",
          "",
          "[Added Lines]",
          "118:             } else {",
          "",
          "---------------"
        ],
        "test/selenium/PmaSeleniumLoginTest.php||test/selenium/PmaSeleniumLoginTest.php": [
          "File: test/selenium/PmaSeleniumLoginTest.php -> test/selenium/PmaSeleniumLoginTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:         $this->doLogin();",
          "25:             $this->fail($this->getText(\"//html/body/div/div[@class='error']\"));",
          "26:         }",
          "",
          "[Removed Lines]",
          "24:         if ($this->isElementPresent(\"//html/body/div/div[@class='error']\")){",
          "",
          "[Added Lines]",
          "24:         if ($this->isElementPresent(\"//html/body/div/div[@class='error']\")) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f8badd37f3e7ea78a718660e615ecf1c856e2f0",
      "candidate_info": {
        "commit_hash": "3f8badd37f3e7ea78a718660e615ecf1c856e2f0",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/3f8badd37f3e7ea78a718660e615ecf1c856e2f0",
        "files": [
          "db_structure.php",
          "docs.css",
          "js/functions.js",
          "js/navigation.js",
          "libraries/auth/swekey/swekey.auth.lib.php",
          "libraries/auth/swekey/swekey.php",
          "libraries/import.lib.php",
          "libraries/rte/rte_words.lib.php",
          "pmd/styles/default/style1.css",
          "pmd_general.php",
          "server_synchronize.php",
          "setup/config.php"
        ],
        "message": "Replace tabs with spaces, cleanup identation",
        "before_after_code_files": [
          "db_structure.php||db_structure.php",
          "docs.css||docs.css",
          "js/functions.js||js/functions.js",
          "js/navigation.js||js/navigation.js",
          "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php",
          "libraries/auth/swekey/swekey.php||libraries/auth/swekey/swekey.php",
          "libraries/import.lib.php||libraries/import.lib.php",
          "libraries/rte/rte_words.lib.php||libraries/rte/rte_words.lib.php",
          "pmd/styles/default/style1.css||pmd/styles/default/style1.css",
          "pmd_general.php||pmd_general.php",
          "server_synchronize.php||server_synchronize.php",
          "setup/config.php||setup/config.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php"
          ],
          "candidate": [
            "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php"
          ]
        }
      },
      "candidate_diff": {
        "db_structure.php||db_structure.php": [
          "File: db_structure.php -> db_structure.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: if ($num_tables == 0) {",
          "72: }",
          "",
          "[Removed Lines]",
          "61:  echo '<p>' . __('No tables found in database') . '</p>' . \"\\n\";",
          "63:  if (empty($db_is_information_schema)) {",
          "64:   require './libraries/display_create_table.lib.php';",
          "65:  } // end if (Create Table dialog)",
          "70:  require_once './libraries/footer.inc.php';",
          "71:  exit;",
          "",
          "[Added Lines]",
          "61:     echo '<p>' . __('No tables found in database') . '</p>' . \"\\n\";",
          "63:     if (empty($db_is_information_schema)) {",
          "64:         require './libraries/display_create_table.lib.php';",
          "65:     } // end if (Create Table dialog)",
          "70:     require_once './libraries/footer.inc.php';",
          "71:     exit;",
          "",
          "---------------"
        ],
        "docs.css||docs.css": [
          "File: docs.css -> docs.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #header {",
          "19:     margin: 0px;",
          "20:     padding: 1em 0.5em 0.5em 1em;",
          "23:     border-bottom: 1px solid black;",
          "24: }",
          "",
          "[Removed Lines]",
          "21:  background: #036;",
          "22:  border: 0px;",
          "",
          "[Added Lines]",
          "21:     background: #036;",
          "22:     border: 0px;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: }",
          "33: #header h1 a {",
          "35: }",
          "37: #header h1 a .myadmin {",
          "39: }",
          "41: #body {",
          "44:     padding-right: 13em;",
          "45: }",
          "",
          "[Removed Lines]",
          "34:  color: #7584b3;",
          "38:  color: #ffad17;",
          "42:  margin: 2em 1em 1em 1em;",
          "43:  padding: 0px;",
          "",
          "[Added Lines]",
          "34:     color: #7584b3;",
          "38:     color: #ffad17;",
          "42:     margin: 2em 1em 1em 1em;",
          "43:     padding: 0px;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:     font-size: smaller;",
          "55:     list-style: none;",
          "56:     float: left;",
          "58:     color: gray;",
          "59:     border: none;",
          "60: }",
          "62: #footer a {",
          "64: }",
          "66: abbr, acronym {",
          "",
          "[Removed Lines]",
          "57:  padding: 1em;",
          "63:  color: #c19e66;",
          "",
          "[Added Lines]",
          "57:     padding: 1em;",
          "63:     color: #c19e66;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74: a {",
          "75:     text-decoration: none;",
          "77: }",
          "79: a:hover {",
          "82: }",
          "84: sup {",
          "",
          "[Removed Lines]",
          "76:  color: #c17d11;",
          "80:  text-decoration: underline;",
          "81:  color: #8f5902;",
          "",
          "[Added Lines]",
          "76:     color: #c17d11;",
          "80:     text-decoration: underline;",
          "81:     color: #8f5902;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128: }",
          "130: h2 {",
          "132:     max-width: 70em;",
          "133: }",
          "135: h3 {",
          "137:     max-width: 70em;",
          "138: }",
          "140: h4, h5 {",
          "142:     max-width: 70em;",
          "143: }",
          "145: h4 a {",
          "147: }",
          "149: p {",
          "",
          "[Removed Lines]",
          "131:  color: #727e0a;",
          "136:  color: #727e0a;",
          "141:  color: #727e0a;",
          "146:  color: #727e0a;",
          "",
          "[Added Lines]",
          "131:     color: #727e0a;",
          "136:     color: #727e0a;",
          "141:     color: #727e0a;",
          "146:     color: #727e0a;",
          "",
          "---------------"
        ],
        "js/functions.js||js/functions.js": [
          "File: js/functions.js -> js/functions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     if ($this_element.is('.datetimefield')) {",
          "141:         showTimeOption = true;",
          "142:     }",
          "145:         showOn: 'button',",
          "146:         buttonImage: themeCalendarImage, // defined in js/messages.php",
          "147:         buttonImageOnly: true,",
          "",
          "[Removed Lines]",
          "144:  var defaultOptions = {",
          "",
          "[Added Lines]",
          "144:     var defaultOptions = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:             setTimeout(function() {",
          "163:             },0);",
          "164:         },",
          "165:         constrainInput: false",
          "168:     $this_element.datepicker($.extend(defaultOptions, options));",
          "169: }",
          "",
          "[Removed Lines]",
          "162:                 $('#ui-timepicker-div').css('z-index',$('#ui-datepicker-div').css('z-index'))",
          "166:  };",
          "",
          "[Added Lines]",
          "162:                 $('#ui-timepicker-div').css('z-index',$('#ui-datepicker-div').css('z-index'))",
          "166:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1475:                     var lastValue = null, curValue = null;",
          "1476:                     var numLoadedPoints = 0, otherSum = 0;",
          "1477:                     var diff;",
          "1483:                         ! thisChart.options.realtime.callback ||",
          "1484:                         ! server_time_diff) return;",
          "1486:                     thisChart.options.realtime.timeoutCallBack = function() {",
          "1487:                         thisChart.options.realtime.postRequest = $.post(",
          "1488:                             thisChart.options.realtime.url,",
          "1489:                             thisChart.options.realtime.postData,",
          "1490:                             function(data) {",
          "1491:                                 curValue = jQuery.parseJSON(data);",
          "1493:                                 if(lastValue==null) diff = curValue.x - thisChart.xAxis[0].getExtremes().max;",
          "1494:                                 else diff = parseInt(curValue.x - lastValue.x);",
          "1496:                                 thisChart.xAxis[0].setExtremes(",
          "1499:                                     false",
          "1500:                                 );",
          "1502:                                 thisChart.options.realtime.callback(thisChart,curValue,lastValue,numLoadedPoints);",
          "1504:                                 lastValue = curValue;",
          "1505:                                 numLoadedPoints++;",
          "1508:                                 if(chart_activeTimeouts[container] == null) return;",
          "1510:                                 chart_activeTimeouts[container] = setTimeout(",
          "1512:                                     thisChart.options.realtime.refreshRate",
          "1514:                         });",
          "1515:                     }",
          "1517:                     chart_activeTimeouts[container] = setTimeout(thisChart.options.realtime.timeoutCallBack, 5);",
          "1518:                 }",
          "1519:             }",
          "",
          "[Removed Lines]",
          "1481:                     if(thisChart.options.chart.forExport == true ||",
          "1482:                         ! thisChart.options.realtime ||",
          "1497:                                     thisChart.xAxis[0].getExtremes().min+diff,",
          "1498:                                     thisChart.xAxis[0].getExtremes().max+diff,",
          "1511:                                     thisChart.options.realtime.timeoutCallBack,",
          "1513:                                 );",
          "",
          "[Added Lines]",
          "1481:                     if(thisChart.options.chart.forExport == true ||",
          "1482:                         ! thisChart.options.realtime ||",
          "1497:                                     thisChart.xAxis[0].getExtremes().min+diff,",
          "1498:                                     thisChart.xAxis[0].getExtremes().max+diff,",
          "1511:                                     thisChart.options.realtime.timeoutCallBack,",
          "1513:                                 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1545:         tooltip: {",
          "1546:             formatter: function() {",
          "1547:                     return '<b>' + this.series.name +'</b><br/>' +",
          "1549:                     Highcharts.numberFormat(this.y, 2);",
          "1550:             }",
          "1551:         },",
          "",
          "[Removed Lines]",
          "1548:                     Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +",
          "",
          "[Added Lines]",
          "1548:                     Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1554:         },",
          "1555:         series: []",
          "1556:     }",
          "1561:             passedSettings.realtime.refreshRate = 5000;",
          "1564:             passedSettings.realtime.numMaxPoints = 30;",
          "1567:         passedSettings.realtime.postData = $.extend(false,{ ajax_request: true, chart_data: 1, type: passedSettings.realtime.type },passedSettings.realtime.postData);",
          "1569:         if(server_time_diff) {",
          "1570:             settings.xAxis.min = new Date().getTime() - server_time_diff - passedSettings.realtime.numMaxPoints * passedSettings.realtime.refreshRate;",
          "1571:             settings.xAxis.max = new Date().getTime() - server_time_diff + passedSettings.realtime.refreshRate;",
          "",
          "[Removed Lines]",
          "1559:     if(passedSettings.realtime) {",
          "1560:         if(!passedSettings.realtime.refreshRate)",
          "1563:         if(!passedSettings.realtime.numMaxPoints)",
          "",
          "[Added Lines]",
          "1559:     if(passedSettings.realtime) {",
          "1560:         if(!passedSettings.realtime.refreshRate)",
          "1563:         if(!passedSettings.realtime.numMaxPoints)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2485:     } else {",
          "2486:         var right = 'left';",
          "2487:     }",
          "2539:         if (right == 'right') {",
          "2541:         } else {",
          "2543:         }",
          "2547:         if ($(this).hasClass('isActive')) {",
          "2548:             return false;",
          "2549:         } else {",
          "",
          "[Removed Lines]",
          "2492:  var h = $obj.height();",
          "2493:  $('img', $obj).height(h);",
          "2494:  $('table', $obj).css('bottom', h-1);",
          "2499:  var on  = $('.toggleOn', $obj).width();",
          "2500:  var off = $('.toggleOff', $obj).width();",
          "2502:  $('.toggleOn > div', $obj).width(Math.max(on, off));",
          "2503:  $('.toggleOff > div', $obj).width(Math.max(on, off));",
          "2507:  var w = parseInt(($('img', $obj).height() / 16) * 22, 10);",
          "2510:  $('table td:nth-child(2) > div', $obj).width(w);",
          "2517:  var imgw = $('img', $obj).width();",
          "2518:  var tblw = $('table', $obj).width();",
          "2519:  var offset = parseInt(((imgw - tblw) / 2), 10);",
          "2521:  $obj.find('img').css(right, offset);",
          "2526:  var offw = $('.toggleOff', $obj).outerWidth();",
          "2527:  var btnw = $('table td:nth-child(2)', $obj).outerWidth();",
          "2530:  $obj.width(offw + btnw + 2);",
          "2535:  var move = $('.toggleOff', $obj).outerWidth();",
          "2538:  if ($('.container', $obj).hasClass('off')) {",
          "2540:       $('table, img', $obj).animate({'left': '-=' + move + 'px'}, 0);",
          "2542:       $('table, img', $obj).animate({'left': '+=' + move + 'px'}, 0);",
          "2544:  }",
          "2546:  $('.container', $obj).click(function () {",
          "",
          "[Added Lines]",
          "2492:     var h = $obj.height();",
          "2493:     $('img', $obj).height(h);",
          "2494:     $('table', $obj).css('bottom', h-1);",
          "2499:     var on  = $('.toggleOn', $obj).width();",
          "2500:     var off = $('.toggleOff', $obj).width();",
          "2502:     $('.toggleOn > div', $obj).width(Math.max(on, off));",
          "2503:     $('.toggleOff > div', $obj).width(Math.max(on, off));",
          "2507:     var w = parseInt(($('img', $obj).height() / 16) * 22, 10);",
          "2510:     $('table td:nth-child(2) > div', $obj).width(w);",
          "2517:     var imgw = $('img', $obj).width();",
          "2518:     var tblw = $('table', $obj).width();",
          "2519:     var offset = parseInt(((imgw - tblw) / 2), 10);",
          "2521:     $obj.find('img').css(right, offset);",
          "2526:     var offw = $('.toggleOff', $obj).outerWidth();",
          "2527:     var btnw = $('table td:nth-child(2)', $obj).outerWidth();",
          "2530:     $obj.width(offw + btnw + 2);",
          "2535:     var move = $('.toggleOff', $obj).outerWidth();",
          "2538:     if ($('.container', $obj).hasClass('off')) {",
          "2540:             $('table, img', $obj).animate({'left': '-=' + move + 'px'}, 0);",
          "2542:             $('table, img', $obj).animate({'left': '+=' + move + 'px'}, 0);",
          "2544:     }",
          "2546:     $('.container', $obj).click(function () {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2552:         var $msg = PMA_ajaxShowMessage(PMA_messages['strLoading']);",
          "2553:         var $container = $(this);",
          "2554:         var callback = $('.callback', this).text();",
          "2557:             if (right == 'right') {",
          "2558:                 var operator = '-=';",
          "2559:             } else {",
          "",
          "[Removed Lines]",
          "2556:   if ($(this).hasClass('on')) {",
          "",
          "[Added Lines]",
          "2556:         if ($(this).hasClass('on')) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2562:             var url = $(this).find('.toggleOff > span').text();",
          "2563:             var removeClass = 'on';",
          "2564:             var addClass = 'off';",
          "2566:             if (right == 'right') {",
          "2567:                 var operator = '+=';",
          "2568:             } else {",
          "",
          "[Removed Lines]",
          "2565:   } else {",
          "",
          "[Added Lines]",
          "2565:         } else {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2575:         $.post(url, {'ajax_request': true}, function(data) {",
          "2576:             if(data.success == true) {",
          "2577:                 PMA_ajaxRemoveMessage($msg);",
          "2582:                     $container.removeClass('isActive');",
          "2583:                 });",
          "2584:                 eval(callback);",
          "",
          "[Removed Lines]",
          "2578:           $container",
          "2579:           .removeClass(removeClass)",
          "2580:           .addClass(addClass)",
          "2581:           .animate({'left': operator + move + 'px'}, function () {",
          "",
          "[Added Lines]",
          "2578:                 $container",
          "2579:                 .removeClass(removeClass)",
          "2580:                 .addClass(addClass)",
          "2581:                 .animate({'left': operator + move + 'px'}, function () {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2587:                 $container.removeClass('isActive');",
          "2588:             }",
          "2589:         });",
          "2591: };",
          "",
          "[Removed Lines]",
          "2590:  });",
          "",
          "[Added Lines]",
          "2590:     });",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2598:         $(this)",
          "2599:         .show()",
          "2600:         .find('.toggleButton')",
          "2603: });",
          "",
          "[Removed Lines]",
          "2601:   toggleButton($(this));",
          "2602:  });",
          "",
          "[Added Lines]",
          "2601:         toggleButton($(this));",
          "2602:     });",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2641:                 $checkbox.attr('checked', checked);",
          "2642:             }",
          "2645:                 $('.vmarker').filter('.row_' + row_num).addClass('marked');",
          "2646:             } else {",
          "2647:                 $('.vmarker').filter('.row_' + row_num).removeClass('marked');",
          "",
          "[Removed Lines]",
          "2644:             if (checked) {",
          "",
          "[Added Lines]",
          "2644:             if (checked) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2905:                 else $(this).removeAttr('unselectable', 'on');",
          "2906:             });",
          "2907:         }",
          "2909: })(jQuery);",
          "",
          "[Removed Lines]",
          "2908:     }; //end noSelect",
          "",
          "[Added Lines]",
          "2908:     }; //end noSelect",
          "",
          "---------------"
        ],
        "js/navigation.js||js/navigation.js": [
          "File: js/navigation.js -> js/navigation.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     if (parent.text_dir == 'ltr') {",
          "59:         pma_navi_width = parseInt(parent.document.getElementById('mainFrameset').cols)",
          "60:     } else {",
          "62:     }",
          "63:     if ((pma_navi_width > 0) && (pma_navi_width != PMA_getCookie('pma_navi_width'))) {",
          "64:         PMA_setCookie('pma_navi_width', pma_navi_width, expires);",
          "",
          "[Removed Lines]",
          "61:         pma_navi_width = parent.document.getElementById('mainFrameset').cols.match(/\\d+$/)",
          "",
          "[Added Lines]",
          "61:         pma_navi_width = parent.document.getElementById('mainFrameset').cols.match(/\\d+$/)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:     $('#newtable a.ajax').click(function(event){",
          "211:         event.preventDefault();",
          "213:         var url = $('#newtable a').attr(\"href\");",
          "214:         if (url.substring(0, 15) == \"tbl_create.php?\") {",
          "215:              url = url.substring(15);",
          "216:         }",
          "224:     });//end of create new table",
          "225: });//end of document get ready",
          "",
          "[Removed Lines]",
          "217:         url = url +\"&num_fields=&ajax_request=true\";",
          "219:         var div = parent.frame_content.$('<div id=\"create_table_dialog\"></div>');",
          "220:         var target = \"tbl_create.php\";",
          "223:         PMA_createTableDialog(div , url , target);",
          "",
          "[Added Lines]",
          "217:         url = url +\"&num_fields=&ajax_request=true\";",
          "219:         var div = parent.frame_content.$('<div id=\"create_table_dialog\"></div>');",
          "220:         var target = \"tbl_create.php\";",
          "223:         PMA_createTableDialog(div , url , target);",
          "",
          "---------------"
        ],
        "libraries/auth/swekey/swekey.auth.lib.php||libraries/auth/swekey/swekey.auth.lib.php": [
          "File: libraries/auth/swekey/swekey.auth.lib.php -> libraries/auth/swekey/swekey.auth.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     global $cfg;",
          "12:     $confFile = $cfg['Server']['auth_swekey_config'];",
          "15:         $_SESSION['SWEKEY'] = array();",
          "16:     }",
          "18:     $_SESSION['SWEKEY']['ENABLED'] = (! empty($confFile) && file_exists($confFile));",
          "22:         $_SESSION['SWEKEY']['CONF_LOADED'] = true;",
          "23:         $_SESSION['SWEKEY']['VALID_SWEKEYS'] = array();",
          "24:         $valid_swekeys = explode(\"\\n\", @file_get_contents($confFile));",
          "25:         foreach ($valid_swekeys as $line) {",
          "26:             if (preg_match(\"/^[0-9A-F]{32}:.+$/\", $line) != false)",
          "30:                     $_SESSION['SWEKEY']['VALID_SWEKEYS'][$items[0]] = trim($items[1]);",
          "32:             else if (preg_match(\"/^[A-Z_]+=.*$/\", $line) != false) {",
          "33:                 $items = explode(\"=\", $line);",
          "34:                 $_SESSION['SWEKEY']['CONF_'.trim($items[0])] = trim($items[1]);",
          "",
          "[Removed Lines]",
          "14:  if (! isset($_SESSION['SWEKEY'])) {",
          "21:  if ($_SESSION['SWEKEY']['ENABLED'] && empty($_SESSION['SWEKEY']['CONF_LOADED'])) {",
          "27:    {",
          "28:     $items = explode(\":\", $line);",
          "29:     if (count($items) == 2)",
          "31:    }",
          "",
          "[Added Lines]",
          "14:     if (! isset($_SESSION['SWEKEY'])) {",
          "21:     if ($_SESSION['SWEKEY']['ENABLED'] && empty($_SESSION['SWEKEY']['CONF_LOADED'])) {",
          "27:             {",
          "28:                 $items = explode(\":\", $line);",
          "29:                 if (count($items) == 2)",
          "31:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         }",
          "51:      }",
          "54:     if ($_SESSION['SWEKEY']['ENABLED']) {",
          "55:         if (empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))",
          "56:            return false;",
          "60: }",
          "",
          "[Removed Lines]",
          "39:      if (! isset($_SESSION['SWEKEY']['CONF_SERVER_CHECK']))",
          "40:          $_SESSION['SWEKEY']['CONF_SERVER_CHECK'] = \"\";",
          "41:      if (! isset($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']))",
          "42:          $_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN'] = \"\";",
          "43:      if (! isset($_SESSION['SWEKEY']['CONF_SERVER_STATUS']))",
          "44:           $_SESSION['SWEKEY']['CONF_SERVER_STATUS'] = \"\";",
          "45:      if (! isset($_SESSION['SWEKEY']['CONF_CA_FILE']))",
          "46:          $_SESSION['SWEKEY']['CONF_CA_FILE'] = \"\";",
          "47:      if (! isset($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']))",
          "48:          $_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE'] = true;",
          "49:      if (! isset($_SESSION['SWEKEY']['CONF_DEBUG']))",
          "50:             $_SESSION['SWEKEY']['CONF_DEBUG'] = false;",
          "57:  }",
          "59:  return true;",
          "",
          "[Added Lines]",
          "39:         if (! isset($_SESSION['SWEKEY']['CONF_SERVER_CHECK']))",
          "40:             $_SESSION['SWEKEY']['CONF_SERVER_CHECK'] = \"\";",
          "41:         if (! isset($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']))",
          "42:             $_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN'] = \"\";",
          "43:         if (! isset($_SESSION['SWEKEY']['CONF_SERVER_STATUS']))",
          "44:              $_SESSION['SWEKEY']['CONF_SERVER_STATUS'] = \"\";",
          "45:         if (! isset($_SESSION['SWEKEY']['CONF_CA_FILE']))",
          "46:             $_SESSION['SWEKEY']['CONF_CA_FILE'] = \"\";",
          "47:         if (! isset($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']))",
          "48:             $_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE'] = true;",
          "49:         if (! isset($_SESSION['SWEKEY']['CONF_DEBUG']))",
          "50:                $_SESSION['SWEKEY']['CONF_DEBUG'] = false;",
          "57:     }",
          "59:     return true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     if (! isset($_SESSION['SWEKEY']))",
          "69:         return null;",
          "72:         return null;",
          "76:     ?>",
          "77:     <script>",
          "78:     function Swekey_GetValidKey()",
          "91:         if (connected_keys.length > 0)",
          "98:     var key = Swekey_GetValidKey();",
          "",
          "[Removed Lines]",
          "71:  if (! $_SESSION['SWEKEY']['ENABLED'])",
          "74:  require_once './libraries/auth/swekey/authentication.inc.php';",
          "79:  {",
          "80:      var valids = \"<?php",
          "81:       foreach ($_SESSION['SWEKEY']['VALID_SWEKEYS'] as $key => $value)",
          "82:        echo $key.',';",
          "83:   ?>\";",
          "84:      var connected_keys = Swekey_ListKeyIds().split(\",\");",
          "85:       for (i in connected_keys)",
          "86:             if (connected_keys[i] != null && connected_keys[i].length == 32)",
          "87:              if (valids.indexOf(connected_keys[i]) >= 0)",
          "88:                 return connected_keys[i];",
          "92:          if (connected_keys[0].length == 32)",
          "93:             return \"unknown_key_\" + connected_keys[0];",
          "95:   return \"none\";",
          "96:  }",
          "",
          "[Added Lines]",
          "71:     if (! $_SESSION['SWEKEY']['ENABLED'])",
          "74:     require_once './libraries/auth/swekey/authentication.inc.php';",
          "79:     {",
          "80:         var valids = \"<?php",
          "81:             foreach ($_SESSION['SWEKEY']['VALID_SWEKEYS'] as $key => $value)",
          "82:                 echo $key.',';",
          "83:         ?>\";",
          "84:         var connected_keys = Swekey_ListKeyIds().split(\",\");",
          "85:          for (i in connected_keys)",
          "86:                if (connected_keys[i] != null && connected_keys[i].length == 32)",
          "87:                 if (valids.indexOf(connected_keys[i]) >= 0)",
          "88:                    return connected_keys[i];",
          "92:                if (connected_keys[0].length == 32)",
          "93:                   return \"unknown_key_\" + connected_keys[0];",
          "95:         return \"none\";",
          "96:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:         {",
          "104:             window.location.search = \"?swekey_reset\";",
          "105:         }",
          "108:     }",
          "111:     </script>",
          "117:     if (count($_SESSION['SWEKEY']['VALID_SWEKEYS']) == 0)",
          "118:         return sprintf(__('File %s does not contain any key id'), $GLOBALS['cfg']['Server']['auth_swekey_config']);",
          "",
          "[Removed Lines]",
          "106:   else",
          "107:          setTimeout(\"timedCheck()\",1000);",
          "110:  setTimeout(\"timedCheck()\",1000);",
          "112:   <?php",
          "114:  if (! empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))",
          "115:   return null;",
          "",
          "[Added Lines]",
          "106:         else",
          "107:             setTimeout(\"timedCheck()\",1000);",
          "110:     setTimeout(\"timedCheck()\",1000);",
          "112:      <?php",
          "114:     if (! empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))",
          "115:         return null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:                 }",
          "159:                 else {",
          "160:                     $_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY'] = $swekey_id;",
          "162:                     return null;",
          "163:                 }",
          "164:             }",
          "",
          "[Removed Lines]",
          "161:               $_SESSION['SWEKEY']['FORCE_USER'] = $_SESSION['SWEKEY']['VALID_SWEKEYS'][$swekey_id];",
          "",
          "[Added Lines]",
          "161:                     $_SESSION['SWEKEY']['FORCE_USER'] = $_SESSION['SWEKEY']['VALID_SWEKEYS'][$swekey_id];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:     if (! isset($swekey_id)) {",
          "185:         ?>",
          "186:         <script>",
          "200:         </script>",
          "201:         <?php",
          "202:         return __('Authenticating...');",
          "",
          "[Removed Lines]",
          "187:      if (key.length != 32)",
          "188:      {",
          "189:          window.location.search=\"?swekey_id=\" + key;",
          "190:      }",
          "191:      else",
          "192:      {",
          "193:          var url = \"\" + window.location;",
          "194:          if (url.indexOf(\"?\") > 0)",
          "195:              url = url.substr(0, url.indexOf(\"?\"));",
          "196:          Swekey_SetUnplugUrl(key, \"pma_login\", url + \"?session_to_unset=<?php echo session_id();?>\");",
          "197:        var otp = Swekey_GetOtp(key, <?php echo '\"'.$_SESSION['SWEKEY']['RND_TOKEN'].'\"';?>);",
          "198:          window.location.search=\"?swekey_id=\" + key + \"&swekey_otp=\" + otp;",
          "199:      }",
          "",
          "[Added Lines]",
          "187:         if (key.length != 32)",
          "188:         {",
          "189:             window.location.search=\"?swekey_id=\" + key;",
          "190:         }",
          "191:         else",
          "192:         {",
          "193:             var url = \"\" + window.location;",
          "194:             if (url.indexOf(\"?\") > 0)",
          "195:                 url = url.substr(0, url.indexOf(\"?\"));",
          "196:             Swekey_SetUnplugUrl(key, \"pma_login\", url + \"?session_to_unset=<?php echo session_id();?>\");",
          "197:              var otp = Swekey_GetOtp(key, <?php echo '\"'.$_SESSION['SWEKEY']['RND_TOKEN'].'\"';?>);",
          "198:             window.location.search=\"?swekey_id=\" + key + \"&swekey_otp=\" + otp;",
          "199:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "225:         echo '<script type=\"text/javascript\">';",
          "226:         if (empty($_SESSION['SWEKEY']['FORCE_USER']))",
          "227:             echo 'var user = null;';",
          "229:            echo 'var user = \"'.$_SESSION['SWEKEY']['FORCE_USER'].'\";';",
          "231:         ?>",
          "",
          "[Removed Lines]",
          "228:      else",
          "",
          "[Added Lines]",
          "228:         else",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "237:             var input_username = document.getElementById(\"<?php echo $input_name; ?>\");",
          "238:             var input_go = document.getElementById(\"<?php echo $input_go; ?>\");",
          "242:             if (user == null)",
          "262:         echo '</script>';",
          "264: }",
          "266: if (!empty($_GET['session_to_unset']))",
          "267: {",
          "275: }",
          "277: if (isset($_GET['swekey_reset']))",
          "278: {",
          "280: }",
          "282: ?>",
          "",
          "[Removed Lines]",
          "239:          var swekey_status = document.createElement('img');",
          "240:          swekey_status.setAttribute('onClick', 'open_swekey_site()');",
          "241:          swekey_status.setAttribute('style', 'width:8px; height:16px; border:0px; vspace:0px; hspace:0px; frameborder:no');",
          "243:    {",
          "244:     swekey_status.setAttribute('src', 'http://artwork.swekey.com/unplugged-8x16.png');",
          "246:     input_go.disabled = true;",
          "247:    }",
          "248:    else",
          "249:    {",
          "250:     swekey_status.setAttribute('src', 'http://artwork.swekey.com/plugged-8x16.png');",
          "252:     input_username.value = user;",
          "253:    }",
          "254:     input_username.readOnly = true;",
          "256:          if (input_username.nextSibling == null)",
          "257:           input_username.parentNode.appendChild(swekey_status);",
          "258:          else",
          "259:           input_username.parentNode.insertBefore(swekey_status, input_username.nextSibling);",
          "261:      <?php",
          "263:  }",
          "268:  session_write_close();",
          "269:  session_id($_GET['session_to_unset']);",
          "270:  session_start();",
          "271:  $_SESSION = array();",
          "272:  session_write_close();",
          "273:  session_destroy();",
          "274:  exit;",
          "279:  unset($_SESSION['SWEKEY']);",
          "",
          "[Added Lines]",
          "239:             var swekey_status = document.createElement('img');",
          "240:             swekey_status.setAttribute('onClick', 'open_swekey_site()');",
          "241:             swekey_status.setAttribute('style', 'width:8px; height:16px; border:0px; vspace:0px; hspace:0px; frameborder:no');",
          "243:             {",
          "244:                 swekey_status.setAttribute('src', 'http://artwork.swekey.com/unplugged-8x16.png');",
          "246:                 input_go.disabled = true;",
          "247:             }",
          "248:             else",
          "249:             {",
          "250:                 swekey_status.setAttribute('src', 'http://artwork.swekey.com/plugged-8x16.png');",
          "252:                 input_username.value = user;",
          "253:             }",
          "254:              input_username.readOnly = true;",
          "256:             if (input_username.nextSibling == null)",
          "257:                 input_username.parentNode.appendChild(swekey_status);",
          "258:             else",
          "259:                 input_username.parentNode.insertBefore(swekey_status, input_username.nextSibling);",
          "261:         <?php",
          "263:     }",
          "268:     session_write_close();",
          "269:     session_id($_GET['session_to_unset']);",
          "270:     session_start();",
          "271:     $_SESSION = array();",
          "272:     session_write_close();",
          "273:     session_destroy();",
          "274:     exit;",
          "279:     unset($_SESSION['SWEKEY']);",
          "",
          "---------------"
        ],
        "libraries/auth/swekey/swekey.php||libraries/auth/swekey/swekey.php": [
          "File: libraries/auth/swekey/swekey.php -> libraries/auth/swekey/swekey.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: function Swekey_SetCAFile($cafile)",
          "129: {",
          "130:     global $gSwekeyCA;",
          "132: }",
          "",
          "[Removed Lines]",
          "131:     $gSwekeyCA = $cafile;",
          "",
          "[Added Lines]",
          "131:        $gSwekeyCA = $cafile;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: function Swekey_EnableTokenCache($enable)",
          "143: {",
          "144:     global $gSwekeyTokenCacheEnabled;",
          "146: }",
          "",
          "[Removed Lines]",
          "145:  $gSwekeyTokenCacheEnabled = ! empty($enable);",
          "",
          "[Added Lines]",
          "145:     $gSwekeyTokenCacheEnabled = ! empty($enable);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     global $gSwekeyLastResult;",
          "187:     $gSwekeyLastResult = \"<not set>\";",
          "234:         {",
          "235:             $gSwekeyLastError = $response_code;",
          "236:             error_log(\"SWEKEY_ERROR:Error $gSwekeyLastError ($curlerr) getting $url\");",
          "",
          "[Removed Lines]",
          "190:  if (function_exists('curl_init'))",
          "191:  {",
          "192:   $sess = curl_init($url);",
          "193:   if (substr($url, 0, 8) == \"https://\")",
          "194:   {",
          "195:    global $gSwekeyCA;",
          "197:    if (! empty($gSwekeyCA))",
          "198:    {",
          "199:     if (file_exists($gSwekeyCA))",
          "200:     {",
          "201:      if (! curl_setopt($sess, CURLOPT_CAINFO, $gSwekeyCA))",
          "202:       error_log(\"SWEKEY_ERROR:Could not set CA file : \".curl_error($sess));",
          "203:      else",
          "204:       $caFileOk = true;",
          "205:     }",
          "206:     else",
          "207:      error_log(\"SWEKEY_ERROR:Could not find CA file $gSwekeyCA getting $url\");",
          "208:    }",
          "210:    curl_setopt($sess, CURLOPT_SSL_VERIFYHOST, '2');",
          "211:    curl_setopt($sess, CURLOPT_SSL_VERIFYPEER, '2');",
          "212:    curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '20');",
          "213:    curl_setopt($sess, CURLOPT_TIMEOUT, '20');",
          "214:   }",
          "215:   else",
          "216:   {",
          "217:    curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '3');",
          "218:    curl_setopt($sess, CURLOPT_TIMEOUT, '5');",
          "219:   }",
          "221:   curl_setopt($sess, CURLOPT_RETURNTRANSFER, '1');",
          "222:   $res=curl_exec($sess);",
          "223:   $response_code = curl_getinfo($sess, CURLINFO_HTTP_CODE);",
          "224:   $curlerr = curl_error($sess);",
          "225:   curl_close($sess);",
          "227:   if ($response_code == 200)",
          "228:   {",
          "229:          $gSwekeyLastResult = $res;",
          "230:          return $res;",
          "231:   }",
          "233:   if (! empty($response_code))",
          "",
          "[Added Lines]",
          "190:     if (function_exists('curl_init'))",
          "191:     {",
          "192:         $sess = curl_init($url);",
          "193:         if (substr($url, 0, 8) == \"https://\")",
          "194:         {",
          "195:             global $gSwekeyCA;",
          "197:             if (! empty($gSwekeyCA))",
          "198:             {",
          "199:                 if (file_exists($gSwekeyCA))",
          "200:                 {",
          "201:                     if (! curl_setopt($sess, CURLOPT_CAINFO, $gSwekeyCA))",
          "202:                         error_log(\"SWEKEY_ERROR:Could not set CA file : \".curl_error($sess));",
          "203:                     else",
          "204:                         $caFileOk = true;",
          "205:                 }",
          "206:                 else",
          "207:                     error_log(\"SWEKEY_ERROR:Could not find CA file $gSwekeyCA getting $url\");",
          "208:             }",
          "210:             curl_setopt($sess, CURLOPT_SSL_VERIFYHOST, '2');",
          "211:             curl_setopt($sess, CURLOPT_SSL_VERIFYPEER, '2');",
          "212:             curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '20');",
          "213:             curl_setopt($sess, CURLOPT_TIMEOUT, '20');",
          "214:         }",
          "215:         else",
          "216:         {",
          "217:             curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '3');",
          "218:             curl_setopt($sess, CURLOPT_TIMEOUT, '5');",
          "219:         }",
          "221:         curl_setopt($sess, CURLOPT_RETURNTRANSFER, '1');",
          "222:         $res=curl_exec($sess);",
          "223:         $response_code = curl_getinfo($sess, CURLINFO_HTTP_CODE);",
          "224:         $curlerr = curl_error($sess);",
          "225:         curl_close($sess);",
          "227:         if ($response_code == 200)",
          "228:         {",
          "229:             $gSwekeyLastResult = $res;",
          "230:             return $res;",
          "231:         }",
          "233:         if (! empty($response_code))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:         $gSwekeyLastError = $response_code;",
          "242:         error_log(\"SWEKEY_ERROR:Error $curlerr getting $url\");",
          "243:         return \"\";",
          "247:     if (class_exists('HttpRequest'))",
          "248:     {",
          "",
          "[Removed Lines]",
          "244:  }",
          "",
          "[Added Lines]",
          "244:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:             {",
          "277:                $reply = $r->send();",
          "278:                $res = $reply->getBody();",
          "283:                     $gSwekeyLastError = $response_code;",
          "284:                     error_log(\"SWEKEY_ERROR:Error \".$gSwekeyLastError.\" getting \".$url);",
          "285:                     return \"\";",
          "286:                }",
          "291:             }",
          "",
          "[Removed Lines]",
          "279:             $info = $r->getResponseInfo();",
          "280:             $response_code = $info['response_code'];",
          "281:             if ($response_code != 200)",
          "282:             {",
          "289:             $gSwekeyLastResult = $res;",
          "290:             return $res;",
          "",
          "[Added Lines]",
          "279:                $info = $r->getResponseInfo();",
          "280:                $response_code = $info['response_code'];",
          "281:                if ($response_code != 200)",
          "282:                {",
          "289:                $gSwekeyLastResult = $res;",
          "290:                return $res;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "301:         return \"\";",
          "302:     }",
          "313:     $gSwekeyLastError = $response_code;",
          "314:     error_log(\"SWEKEY_ERROR:Error \".$response_code.\" getting \".$url);",
          "",
          "[Removed Lines]",
          "304:     global $http_response_header;",
          "305:  $res = @file_get_contents($url);",
          "306:  $response_code = substr($http_response_header[0], 9, 3); //HTTP/1.0",
          "307:  if ($response_code == 200)",
          "308:  {",
          "309:     $gSwekeyLastResult = $res;",
          "310:     return $res;",
          "311:  }",
          "",
          "[Added Lines]",
          "304:        global $http_response_header;",
          "305:     $res = @file_get_contents($url);",
          "306:     $response_code = substr($http_response_header[0], 9, 3); //HTTP/1.0",
          "307:     if ($response_code == 200)",
          "308:     {",
          "309:        $gSwekeyLastResult = $res;",
          "310:        return $res;",
          "311:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "336: function Swekey_GetHalfRndToken()",
          "337: {",
          "338:     global $gSwekeyRndTokenServer;",
          "340: }",
          "",
          "[Removed Lines]",
          "339:  return Swekey_HttpGet($gSwekeyRndTokenServer.'/HALF-RND-TOKEN', $response_code);",
          "",
          "[Added Lines]",
          "339:     return Swekey_HttpGet($gSwekeyRndTokenServer.'/HALF-RND-TOKEN', $response_code);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "358:     if (isset($_SESSION['rnd-token-date']))",
          "359:        if (time() - $_SESSION['rnd-token-date'] < 30)",
          "363:    if (strlen($res) != 32 && $gSwekeyTokenCacheEnabled)",
          "",
          "[Removed Lines]",
          "360:        $res = $_SESSION['rnd-token'];",
          "",
          "[Added Lines]",
          "360:              $res = $_SESSION['rnd-token'];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "367:             $tempdir = sys_get_temp_dir();",
          "368:             $cachefile = $tempdir.\"/swekey-rnd-token-\".get_current_user();",
          "369:             $modif = filemtime($cachefile);",
          "371:                 if (time() - $modif < 30)",
          "382:         }",
          "383:    }",
          "",
          "[Removed Lines]",
          "370:    if ($modif != false)",
          "372:              {",
          "373:                  $res = @file_get_contents($cachefile);",
          "374:                  if (strlen($res) != 32)",
          "375:                      $res = \"\";",
          "376:                  else",
          "377:                  {",
          "378:                    $_SESSION['rnd-token'] = $res;",
          "379:                    $_SESSION['rnd-token-date'] = $modif;",
          "380:       }",
          "381:              }",
          "",
          "[Added Lines]",
          "370:             if ($modif != false)",
          "372:                 {",
          "373:                     $res = @file_get_contents($cachefile);",
          "374:                     if (strlen($res) != 32)",
          "375:                         $res = \"\";",
          "376:                        else",
          "377:                        {",
          "378:                             $_SESSION['rnd-token'] = $res;",
          "379:                             $_SESSION['rnd-token-date'] = $modif;",
          "380:                      }",
          "381:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "390:         $_SESSION['rnd-token-date'] = time();",
          "391:         if (! empty($cachefile))",
          "392:         {",
          "401:         }",
          "402:    }",
          "",
          "[Removed Lines]",
          "394:          unlink($cachefile);",
          "395:       $file = fopen($cachefile , \"x\");",
          "396:       if ($file != false)",
          "397:       {",
          "398:           @fwrite($file, $res);",
          "399:        @fclose($file);",
          "400:       }",
          "",
          "[Added Lines]",
          "394:             unlink($cachefile);",
          "395:                $file = fopen($cachefile , \"x\");",
          "396:                if ($file != false)",
          "397:                {",
          "398:                    @fwrite($file, $res);",
          "399:                 @fclose($file);",
          "400:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "434: function Swekey_CheckOtp($id, $rt, $otp)",
          "435: {",
          "436:     global $gSwekeyCheckServer;",
          "439: }",
          "",
          "[Removed Lines]",
          "437:  $res = Swekey_HttpGet($gSwekeyCheckServer.'/CHECK-OTP/'.$id.'/'.$rt.'/'.$otp, $response_code);",
          "438:  return $response_code == 200 && $res == \"OK\";",
          "",
          "[Added Lines]",
          "437:     $res = Swekey_HttpGet($gSwekeyCheckServer.'/CHECK-OTP/'.$id.'/'.$rt.'/'.$otp, $response_code);",
          "438:     return $response_code == 200 && $res == \"OK\";",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "445: define (\"SWEKEY_STATUS_OK\",0);",
          "446: define (\"SWEKEY_STATUS_NOT_FOUND\",1);  // The key does not exist in the db",
          "447: define (\"SWEKEY_STATUS_INACTIVE\",2);   // The key has never been activated",
          "451: define (\"SWEKEY_STATUS_OBSOLETE\",6);   // The hardware is no longer supported",
          "452: define (\"SWEKEY_STATUS_UNKOWN\",201);   // We could not connect to the authentication server",
          "",
          "[Removed Lines]",
          "448: define (\"SWEKEY_STATUS_LOST\",3);    // The user has lost his key",
          "449: define (\"SWEKEY_STATUS_STOLEN\",4);    // The key was stolen",
          "450: define (\"SWEKEY_STATUS_FEE_DUE\",5);    // The annual fee was not paid",
          "",
          "[Added Lines]",
          "448: define (\"SWEKEY_STATUS_LOST\",3);       // The user has lost his key",
          "449: define (\"SWEKEY_STATUS_STOLEN\",4);       // The key was stolen",
          "450: define (\"SWEKEY_STATUS_FEE_DUE\",5);       // The annual fee was not paid",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "459: define (\"SWEKEY_STATUS_BACKUP_KEY\",101); // This key is a backup key that is not activated yet",
          "460: define (\"SWEKEY_STATUS_NOTPLUGGED\",200); // This key is not plugged in the computer",
          "",
          "[Removed Lines]",
          "458: define (\"SWEKEY_STATUS_REPLACED\",100);  // This key has been replaced by a backup key",
          "",
          "[Added Lines]",
          "458: define (\"SWEKEY_STATUS_REPLACED\",100);     // This key has been replaced by a backup key",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "470: function Swekey_GetStatusStr($status)",
          "471: {",
          "482:        case SWEKEY_STATUS_BACKUP_KEY    : return 'This key is a backup key that is not activated yet';",
          "483:        case SWEKEY_STATUS_NOTPLUGGED    : return 'This key is not plugged in the computer';",
          "487: }",
          "",
          "[Removed Lines]",
          "472:  switch($status)",
          "473:  {",
          "474:        case SWEKEY_STATUS_OK   : return 'OK';",
          "475:        case SWEKEY_STATUS_NOT_FOUND     : return 'Key does not exist in the db';",
          "476:        case SWEKEY_STATUS_INACTIVE  : return 'Key not activated';",
          "477:        case SWEKEY_STATUS_LOST   : return 'Key was lost';",
          "478:        case SWEKEY_STATUS_STOLEN  : return 'Key was stolen';",
          "479:        case SWEKEY_STATUS_FEE_DUE  : return 'The annual fee was not paid';",
          "480:        case SWEKEY_STATUS_OBSOLETE  : return 'Key no longer supported';",
          "481:        case SWEKEY_STATUS_REPLACED     : return 'This key has been replaced by a backup key';",
          "484:        case SWEKEY_STATUS_UNKOWN     : return 'Unknow Status, could not connect to the authentication server';",
          "485:  }",
          "486:  return 'unknown status '.$status;",
          "",
          "[Added Lines]",
          "472:     switch($status)",
          "473:     {",
          "474:        case SWEKEY_STATUS_OK            : return 'OK';",
          "475:        case SWEKEY_STATUS_NOT_FOUND        : return 'Key does not exist in the db';",
          "476:        case SWEKEY_STATUS_INACTIVE        : return 'Key not activated';",
          "477:        case SWEKEY_STATUS_LOST            : return 'Key was lost';",
          "478:        case SWEKEY_STATUS_STOLEN        : return 'Key was stolen';",
          "479:        case SWEKEY_STATUS_FEE_DUE        : return 'The annual fee was not paid';",
          "480:        case SWEKEY_STATUS_OBSOLETE        : return 'Key no longer supported';",
          "481:        case SWEKEY_STATUS_REPLACED        : return 'This key has been replaced by a backup key';",
          "484:        case SWEKEY_STATUS_UNKOWN        : return 'Unknow Status, could not connect to the authentication server';",
          "485:     }",
          "486:     return 'unknown status '.$status;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "497: function Swekey_GetStatus($id)",
          "498: {",
          "499:     global $gSwekeyStatusServer;",
          "501:     if ($response_code == 200)",
          "502:         return intval($res);",
          "",
          "[Removed Lines]",
          "500:  $res = Swekey_HttpGet($gSwekeyStatusServer.'/GET-STATUS/'.$id, $response_code);",
          "",
          "[Added Lines]",
          "500:     $res = Swekey_HttpGet($gSwekeyStatusServer.'/GET-STATUS/'.$id, $response_code);",
          "",
          "---------------"
        ],
        "libraries/import.lib.php||libraries/import.lib.php": [
          "File: libraries/import.lib.php -> libraries/import.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "337: function PMA_getColumnAlphaName($num)",
          "338: {",
          "368: }",
          "",
          "[Removed Lines]",
          "339:  $A = 65; // ASCII value for capital \"A\"",
          "340:  $col_name = \"\";",
          "342:  if ($num > 26) {",
          "343:   $div = (int)($num / 26);",
          "344:   $remain = (int)($num % 26);",
          "348:   if ($remain == 0) {",
          "349:    $div--;",
          "350:   }",
          "353:   $col_name = PMA_getColumnAlphaName($div);",
          "355:   $num = $remain;",
          "356:  }",
          "358:  if ($num == 0) {",
          "361:   $col_name .= chr(($A + 26) - 1);",
          "362:  } else {",
          "364:   $col_name .= chr(($A + $num) - 1);",
          "365:  }",
          "367:  return $col_name;",
          "",
          "[Added Lines]",
          "339:     $A = 65; // ASCII value for capital \"A\"",
          "340:     $col_name = \"\";",
          "342:     if ($num > 26) {",
          "343:         $div = (int)($num / 26);",
          "344:         $remain = (int)($num % 26);",
          "348:         if ($remain == 0) {",
          "349:             $div--;",
          "350:         }",
          "353:         $col_name = PMA_getColumnAlphaName($div);",
          "355:         $num = $remain;",
          "356:     }",
          "358:     if ($num == 0) {",
          "361:         $col_name .= chr(($A + 26) - 1);",
          "362:     } else {",
          "364:         $col_name .= chr(($A + $num) - 1);",
          "365:     }",
          "367:     return $col_name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:         $num_chars = strlen($name);",
          "388:         $column_number = 0;",
          "389:         for ($i = 0; $i < $num_chars; ++$i) {",
          "403:         }",
          "404:         return $column_number;",
          "405:     } else {",
          "",
          "[Removed Lines]",
          "391:   $char_pos = ($num_chars - 1) - $i;",
          "397:   $number = (ord($name[$char_pos]) - 64);",
          "402:   $column_number += $number * pow(26,$i);",
          "",
          "[Added Lines]",
          "391:         $char_pos = ($num_chars - 1) - $i;",
          "397:         $number = (ord($name[$char_pos]) - 64);",
          "402:         $column_number += $number * pow(26,$i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455: function PMA_getD($last_cumulative_size) {",
          "457: }",
          "",
          "[Removed Lines]",
          "456:  return (int)substr($last_cumulative_size, (strpos($last_cumulative_size, \",\") + 1), (strlen($last_cumulative_size) - strpos($last_cumulative_size, \",\")));",
          "",
          "[Added Lines]",
          "456:     return (int)substr($last_cumulative_size, (strpos($last_cumulative_size, \",\") + 1), (strlen($last_cumulative_size) - strpos($last_cumulative_size, \",\")));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "491: function PMA_detectSize($last_cumulative_size, $last_cumulative_type, $curr_type, &$cell) {",
          "",
          "[Removed Lines]",
          "492:  $curr_size = strlen((string)$cell);",
          "",
          "[Added Lines]",
          "492:     $curr_size = strlen((string)$cell);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:             } else {",
          "512:             }",
          "",
          "[Removed Lines]",
          "503:  elseif ($curr_type == VARCHAR) {",
          "507:   if ($last_cumulative_type == VARCHAR) {",
          "508:    if ($curr_size >= $last_cumulative_size) {",
          "509:     return $curr_size;",
          "511:     return $last_cumulative_size;",
          "513:   }",
          "",
          "[Added Lines]",
          "503:     elseif ($curr_type == VARCHAR) {",
          "507:         if ($last_cumulative_type == VARCHAR) {",
          "508:             if ($curr_size >= $last_cumulative_size) {",
          "509:                 return $curr_size;",
          "511:                 return $last_cumulative_size;",
          "513:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "522:             } else {",
          "523:                 return $oldM;",
          "524:             }",
          "",
          "[Removed Lines]",
          "525:   }",
          "",
          "[Added Lines]",
          "525:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "532:             } else {",
          "533:                 return $last_cumulative_size;",
          "534:             }",
          "",
          "[Removed Lines]",
          "535:   }",
          "",
          "[Added Lines]",
          "535:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "550:             return -1;",
          "551:         }",
          "",
          "[Removed Lines]",
          "552:  }",
          "",
          "[Added Lines]",
          "552:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "566:             } else {",
          "568:             }",
          "573:         elseif ($last_cumulative_type == DECIMAL) {",
          "583:             } else {",
          "585:             }",
          "590:         elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {",
          "596:             } else {",
          "598:             }",
          "603:         elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {",
          "617:             return -1;",
          "618:         }",
          "",
          "[Removed Lines]",
          "560:   if ($last_cumulative_type == VARCHAR) {",
          "562:       $size = PMA_getDecimalSize($cell);",
          "564:       if ($size[M] >= $last_cumulative_size) {",
          "565:           return $size[M];",
          "567:              return $last_cumulative_size;",
          "569:   }",
          "574:       $size = PMA_getDecimalSize($cell);",
          "576:       $oldM = PMA_getM($last_cumulative_size);",
          "577:       $oldD = PMA_getD($last_cumulative_size);",
          "580:       if ($size[M] > $oldM || $size[D] > $oldD) {",
          "582:        return (string)((($size[M] > $oldM) ? $size[M] : $oldM) . \",\" . (($size[D] > $oldD) ? $size[D] : $oldD));",
          "584:        return $last_cumulative_size;",
          "586:   }",
          "592:       $size = PMA_getDecimalSize($cell);",
          "594:       if ($size[M] >= $last_cumulative_size) {",
          "595:           return $size[FULL];",
          "597:              return ($last_cumulative_size.\",\".$size[D]);",
          "599:   }",
          "605:       $size = PMA_getDecimalSize($cell);",
          "607:       return $size[FULL];",
          "608:   }",
          "612:   else {",
          "619:  }",
          "",
          "[Added Lines]",
          "560:         if ($last_cumulative_type == VARCHAR) {",
          "562:             $size = PMA_getDecimalSize($cell);",
          "564:             if ($size[M] >= $last_cumulative_size) {",
          "565:                 return $size[M];",
          "567:                 return $last_cumulative_size;",
          "569:         }",
          "574:             $size = PMA_getDecimalSize($cell);",
          "576:             $oldM = PMA_getM($last_cumulative_size);",
          "577:             $oldD = PMA_getD($last_cumulative_size);",
          "580:             if ($size[M] > $oldM || $size[D] > $oldD) {",
          "582:                 return (string)((($size[M] > $oldM) ? $size[M] : $oldM) . \",\" . (($size[D] > $oldD) ? $size[D] : $oldD));",
          "584:                 return $last_cumulative_size;",
          "586:         }",
          "592:             $size = PMA_getDecimalSize($cell);",
          "594:             if ($size[M] >= $last_cumulative_size) {",
          "595:                 return $size[FULL];",
          "597:                 return ($last_cumulative_size.\",\".$size[D]);",
          "599:         }",
          "605:             $size = PMA_getDecimalSize($cell);",
          "607:             return $size[FULL];",
          "608:         }",
          "612:         else {",
          "619:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "630:             } else {",
          "632:             }",
          "637:         elseif ($last_cumulative_type == DECIMAL) {",
          "638:             $oldM = PMA_getM($last_cumulative_size);",
          "647:             } else {",
          "650:             }",
          "655:         elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {",
          "658:             } else {",
          "660:             }",
          "",
          "[Removed Lines]",
          "627:   if ($last_cumulative_type == VARCHAR) {",
          "628:       if ($curr_size >= $last_cumulative_size) {",
          "629:           return $curr_size;",
          "631:              return $last_cumulative_size;",
          "633:   }",
          "639:       $oldD = PMA_getD($last_cumulative_size);",
          "640:       $oldInt = $oldM - $oldD;",
          "641:       $newInt = strlen((string)$cell);",
          "644:       if ($oldInt >= $newInt) {",
          "646:        return $last_cumulative_size;",
          "649:        return (($newInt + $oldD) . \",\" . $oldD);",
          "651:      }",
          "656:       if ($curr_size >= $last_cumulative_size) {",
          "657:           return $curr_size;",
          "659:              return $last_cumulative_size;",
          "661:   }",
          "",
          "[Added Lines]",
          "627:         if ($last_cumulative_type == VARCHAR) {",
          "628:             if ($curr_size >= $last_cumulative_size) {",
          "629:                 return $curr_size;",
          "631:                 return $last_cumulative_size;",
          "633:         }",
          "639:             $oldD = PMA_getD($last_cumulative_size);",
          "640:             $oldInt = $oldM - $oldD;",
          "641:             $newInt = strlen((string)$cell);",
          "644:             if ($oldInt >= $newInt) {",
          "646:                 return $last_cumulative_size;",
          "649:                 return (($newInt + $oldD) . \",\" . $oldD);",
          "651:         }",
          "656:             if ($curr_size >= $last_cumulative_size) {",
          "657:                 return $curr_size;",
          "659:                 return $last_cumulative_size;",
          "661:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "676:             return -1;",
          "677:         }",
          "",
          "[Removed Lines]",
          "671:   else {",
          "678:  }",
          "682:  else {",
          "",
          "[Added Lines]",
          "671:         else {",
          "678:     }",
          "682:     else {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "713:         if ($cell == (string)(float)$cell && strpos($cell, \".\") !== false && substr_count($cell, \".\") == 1) {",
          "714:             return DECIMAL;",
          "715:         } else {",
          "721:         }",
          "722:     } else {",
          "723:         return VARCHAR;",
          "",
          "[Removed Lines]",
          "716:   if (abs($cell) > 2147483647) {",
          "717:    return BIGINT;",
          "718:   } else {",
          "719:    return INT;",
          "720:   }",
          "",
          "[Added Lines]",
          "716:         if (abs($cell) > 2147483647) {",
          "717:             return BIGINT;",
          "718:         } else {",
          "719:             return INT;",
          "720:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "739: function PMA_analyzeTable(&$table) {",
          "754:     for ($i = 0; $i < $numCols; ++$i) {",
          "755:         $types[$i] = NONE;",
          "756:     }",
          "798:         $len = count($types);",
          "",
          "[Removed Lines]",
          "741:  $numRows = count($table[ROWS]);",
          "743:  $numCols = count($table[COL_NAMES]);",
          "745:  $types = array();",
          "746:  $sizes = array();",
          "749:  for ($i = 0; $i < $numCols; ++$i) {",
          "750:   $sizes[$i] = 0;",
          "751:  }",
          "759:  $curr_type = NONE;",
          "760:  $curr_size = 0;",
          "763:  if (is_array($table) && ! is_array($table[TBL_NAME]) && is_array($table[COL_NAMES]) && is_array($table[ROWS])) {",
          "765:   for ($i = 0; $i < $numCols; ++$i) {",
          "767:    for ($j = 0; $j < $numRows; ++$j) {",
          "769:     $curr_type = PMA_detectType($types[$i], $table[ROWS][$j][$i]);",
          "771:     $sizes[$i] = PMA_detectSize($sizes[$i], $types[$i], $curr_type, $table[ROWS][$j][$i]);",
          "777:     if ($curr_type != NONE) {",
          "778:      if ($curr_type == VARCHAR) {",
          "779:       $types[$i] = VARCHAR;",
          "780:      } else if ($curr_type == DECIMAL) {",
          "781:       if ($types[$i] != VARCHAR) {",
          "782:        $types[$i] = DECIMAL;",
          "783:       }",
          "784:      } else if ($curr_type == BIGINT) {",
          "785:       if ($types[$i] != VARCHAR && $types[$i] != DECIMAL) {",
          "786:        $types[$i] = BIGINT;",
          "787:       }",
          "788:      } else if ($curr_type == INT) {",
          "789:       if ($types[$i] != VARCHAR && $types[$i] != DECIMAL && $types[$i] != BIGINT) {",
          "790:        $types[$i] = INT;",
          "791:       }",
          "792:      }",
          "793:     }",
          "794:    }",
          "795:   }",
          "",
          "[Added Lines]",
          "741:     $numRows = count($table[ROWS]);",
          "743:     $numCols = count($table[COL_NAMES]);",
          "745:     $types = array();",
          "746:     $sizes = array();",
          "749:     for ($i = 0; $i < $numCols; ++$i) {",
          "750:         $sizes[$i] = 0;",
          "751:     }",
          "759:     $curr_type = NONE;",
          "760:     $curr_size = 0;",
          "763:     if (is_array($table) && ! is_array($table[TBL_NAME]) && is_array($table[COL_NAMES]) && is_array($table[ROWS])) {",
          "765:         for ($i = 0; $i < $numCols; ++$i) {",
          "767:             for ($j = 0; $j < $numRows; ++$j) {",
          "769:                 $curr_type = PMA_detectType($types[$i], $table[ROWS][$j][$i]);",
          "771:                 $sizes[$i] = PMA_detectSize($sizes[$i], $types[$i], $curr_type, $table[ROWS][$j][$i]);",
          "777:                 if ($curr_type != NONE) {",
          "778:                     if ($curr_type == VARCHAR) {",
          "779:                         $types[$i] = VARCHAR;",
          "780:                     } else if ($curr_type == DECIMAL) {",
          "781:                         if ($types[$i] != VARCHAR) {",
          "782:                             $types[$i] = DECIMAL;",
          "783:                         }",
          "784:                     } else if ($curr_type == BIGINT) {",
          "785:                         if ($types[$i] != VARCHAR && $types[$i] != DECIMAL) {",
          "786:                             $types[$i] = BIGINT;",
          "787:                         }",
          "788:                     } else if ($curr_type == INT) {",
          "789:                         if ($types[$i] != VARCHAR && $types[$i] != DECIMAL && $types[$i] != BIGINT) {",
          "790:                             $types[$i] = INT;",
          "791:                         }",
          "792:                     }",
          "793:                 }",
          "794:             }",
          "795:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "803:             }",
          "804:         }",
          "816: }",
          "",
          "[Removed Lines]",
          "806:   return array($types, $sizes);",
          "807:  }",
          "808:  else",
          "809:  {",
          "814:   return false;",
          "815:  }",
          "",
          "[Added Lines]",
          "806:         return array($types, $sizes);",
          "807:     }",
          "808:     else",
          "809:     {",
          "814:         return false;",
          "815:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "949:     $num_tables = count($tables);",
          "951:         $num_cols = count($tables[$i][COL_NAMES]);",
          "952:         $num_rows = count($tables[$i][ROWS]);",
          "",
          "[Removed Lines]",
          "947:  $tempSQLStr = \"\";",
          "948:  $col_count = 0;",
          "950:  for ($i = 0; $i < $num_tables; ++$i) {",
          "",
          "[Added Lines]",
          "947:     $tempSQLStr = \"\";",
          "948:     $col_count = 0;",
          "950:     for ($i = 0; $i < $num_tables; ++$i) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "964:         $tempSQLStr .= \") VALUES \";",
          "967:             $tempSQLStr .= \"(\";",
          "970:                 if ($analyses != null) {",
          "971:                     $is_varchar = ($analyses[$i][TYPES][$col_count] === VARCHAR);",
          "972:                 } else {",
          "",
          "[Removed Lines]",
          "966:   for ($j = 0; $j < $num_rows; ++$j) {",
          "969:    for ($k = 0; $k < $num_cols; ++$k) {",
          "",
          "[Added Lines]",
          "966:         for ($j = 0; $j < $num_rows; ++$j) {",
          "969:             for ($k = 0; $k < $num_cols; ++$k) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "979:                 }",
          "981:                 $tempSQLStr .= (($is_varchar) ? \"'\" : \"\");",
          "987:                 }",
          "993:                 }",
          "996:                 unset($tables[$i][ROWS][$j][$k]);",
          "999:             $tempSQLStr .= \")\";",
          "",
          "[Removed Lines]",
          "982:     $tempSQLStr .= PMA_sqlAddSlashes((string)$tables[$i][ROWS][$j][$k]);",
          "983:     $tempSQLStr .= (($is_varchar) ? \"'\" : \"\");",
          "985:     if ($k != ($num_cols - 1)) {",
          "986:      $tempSQLStr .= \", \";",
          "989:     if ($col_count == ($num_cols - 1)) {",
          "990:      $col_count = 0;",
          "991:     } else {",
          "992:      $col_count++;",
          "997:    }",
          "",
          "[Added Lines]",
          "982:                 $tempSQLStr .= PMA_sqlAddSlashes((string)$tables[$i][ROWS][$j][$k]);",
          "983:                 $tempSQLStr .= (($is_varchar) ? \"'\" : \"\");",
          "985:                 if ($k != ($num_cols - 1)) {",
          "986:                     $tempSQLStr .= \", \";",
          "989:                 if ($col_count == ($num_cols - 1)) {",
          "990:                     $col_count = 0;",
          "991:                 } else {",
          "992:                     $col_count++;",
          "997:             }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1002:                 $tempSQLStr .= \",\\n \";",
          "1003:             }",
          "1007:             unset($tables[$i][ROWS][$j]);",
          "1010:         $tempSQLStr .= \";\";",
          "",
          "[Removed Lines]",
          "1005:    $col_count = 0;",
          "1008:   }",
          "",
          "[Added Lines]",
          "1005:             $col_count = 0;",
          "1008:         }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1017:         PMA_importRunQuery($tempSQLStr, $tempSQLStr);",
          "1021:     unset($tempSQLStr);",
          "",
          "[Removed Lines]",
          "1018:  }",
          "",
          "[Added Lines]",
          "1018:     }",
          "",
          "---------------"
        ],
        "libraries/rte/rte_words.lib.php||libraries/rte/rte_words.lib.php": [
          "File: libraries/rte/rte_words.lib.php -> libraries/rte/rte_words.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: function PMA_RTE_getWord($index)",
          "12: {",
          "57:     return isset($words[$index]) ? $words[$index] : '';",
          "58: } // end PMA_RTE_getWord()",
          "",
          "[Removed Lines]",
          "13:  global $_PMA_RTE;",
          "15:  switch ($_PMA_RTE) {",
          "16:  case 'RTN':",
          "17:   $words = array(",
          "18:       'add'       => __('Add routine'),",
          "19:       'docu'      => 'STORED_ROUTINES',",
          "20:       'export'    => __('Export of routine %s'),",
          "21:       'human'     => __('routine'),",
          "22:       'no_create' => __('You do not have the necessary privileges to create a routine'),",
          "23:       'not_found' => __('No routine with name %1$s found in database %2$s'),",
          "24:       'nothing'   => __('There are no routines to display.'),",
          "25:       'title'     => __('Routines'),",
          "26:   );",
          "27:   break;",
          "28:  case 'TRI':",
          "29:   $words = array(",
          "30:       'add'       => __('Add trigger'),",
          "31:       'docu'      => 'TRIGGERS',",
          "32:       'export'    => __('Export of trigger %s'),",
          "33:       'human'     => __('trigger'),",
          "34:       'no_create' => __('You do not have the necessary privileges to create a trigger'),",
          "35:       'not_found' => __('No trigger with name %1$s found in database %2$s'),",
          "36:       'nothing'   => __('There are no triggers to display.'),",
          "37:       'title'     => __('Triggers'),",
          "38:   );",
          "39:   break;",
          "40:  case 'EVN':",
          "41:   $words = array(",
          "42:       'add'       => __('Add event'),",
          "43:       'docu'      => 'EVENTS',",
          "44:       'export'    => __('Export of event %s'),",
          "45:       'human'     => __('event'),",
          "46:       'no_create' => __('You do not have the necessary privileges to create an event'),",
          "47:       'not_found' => __('No event with name %1$s found in database %2$s'),",
          "48:       'nothing'   => __('There are no events to display.'),",
          "49:       'title'     => __('Events'),",
          "50:   );",
          "51:   break;",
          "52:  default:",
          "53:   $words = array();",
          "54:   break;",
          "55:  }",
          "",
          "[Added Lines]",
          "13:     global $_PMA_RTE;",
          "15:     switch ($_PMA_RTE) {",
          "16:     case 'RTN':",
          "17:         $words = array(",
          "18:             'add'       => __('Add routine'),",
          "19:             'docu'      => 'STORED_ROUTINES',",
          "20:             'export'    => __('Export of routine %s'),",
          "21:             'human'     => __('routine'),",
          "22:             'no_create' => __('You do not have the necessary privileges to create a routine'),",
          "23:             'not_found' => __('No routine with name %1$s found in database %2$s'),",
          "24:             'nothing'   => __('There are no routines to display.'),",
          "25:             'title'     => __('Routines'),",
          "26:         );",
          "27:         break;",
          "28:     case 'TRI':",
          "29:         $words = array(",
          "30:             'add'       => __('Add trigger'),",
          "31:             'docu'      => 'TRIGGERS',",
          "32:             'export'    => __('Export of trigger %s'),",
          "33:             'human'     => __('trigger'),",
          "34:             'no_create' => __('You do not have the necessary privileges to create a trigger'),",
          "35:             'not_found' => __('No trigger with name %1$s found in database %2$s'),",
          "36:             'nothing'   => __('There are no triggers to display.'),",
          "37:             'title'     => __('Triggers'),",
          "38:         );",
          "39:         break;",
          "40:     case 'EVN':",
          "41:         $words = array(",
          "42:             'add'       => __('Add event'),",
          "43:             'docu'      => 'EVENTS',",
          "44:             'export'    => __('Export of event %s'),",
          "45:             'human'     => __('event'),",
          "46:             'no_create' => __('You do not have the necessary privileges to create an event'),",
          "47:             'not_found' => __('No event with name %1$s found in database %2$s'),",
          "48:             'nothing'   => __('There are no events to display.'),",
          "49:             'title'     => __('Events'),",
          "50:         );",
          "51:         break;",
          "52:     default:",
          "53:         $words = array();",
          "54:         break;",
          "55:     }",
          "",
          "---------------"
        ],
        "pmd/styles/default/style1.css||pmd/styles/default/style1.css": [
          "File: pmd/styles/default/style1.css -> pmd/styles/default/style1.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: }",
          "149: .option_tab {",
          "153: }",
          "155: .select_all {",
          "163:     background-repeat: repeat-x;",
          "164: }",
          "",
          "[Removed Lines]",
          "150:  padding-left: 2px;",
          "151:  padding-right: 2px;",
          "152:  width: 5px;",
          "156:  vertical-align: top;",
          "157:  padding-left: 2px;",
          "158:  padding-right: 2px;",
          "159:  cursor: default;",
          "160:  width: 1px;",
          "161:  color: #000000;",
          "162:  background-image: url(images/Header.png);",
          "",
          "[Added Lines]",
          "150:     padding-left: 2px;",
          "151:     padding-right: 2px;",
          "152:     width: 5px;",
          "156:     vertical-align: top;",
          "157:     padding-left: 2px;",
          "158:     padding-right: 2px;",
          "159:     cursor: default;",
          "160:     width: 1px;",
          "161:     color: #000000;",
          "162:     background-image: url(images/Header.png);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456: }",
          "458: h2.tiger{",
          "460:     padding: 1px;",
          "461:     font-weight: bold;",
          "469: }",
          "471: h2.tiger a {",
          "477: }",
          "479: h2.tiger a:hover {",
          "482: }",
          "484: h2.active {",
          "486:     background-repeat: repeat-x;",
          "487:     padding: 1px;",
          "489: }",
          "491: .toggle_container {",
          "500: }",
          "502: .toggle_container .block {",
          "507: }",
          "509: .history_table {",
          "512: }",
          "514: .history_table2 {",
          "517: }",
          "519: #filter {",
          "530: }",
          "532: #box {",
          "545: }",
          "547: #boxtitle {",
          "566: }",
          "568: #tblfooter {",
          "574: }",
          "576: input.btn {",
          "580: }",
          "",
          "[Removed Lines]",
          "459:  background-repeat: repeat-x;",
          "462:  font-size:14px;",
          "463:  padding: 50 20 50 20px;",
          "464:  margin: 0 0 5px 0;",
          "465:  width: 250px;",
          "466:  float: left;",
          "467:  color : #333;",
          "468:  text-align: center;",
          "472:  background-image: url(images/Header.png);",
          "473:  text-align: center;",
          "474:  text-decoration: none;",
          "475:  color : #333;",
          "476:  display: block;",
          "480:  color: #000;",
          "481:  background-image: url(images/Header_Linked.png);",
          "485:  background-image: url(images/Header.png);",
          "488:  background-position: left bottom;",
          "492:  margin: 0 0 5px;",
          "493:  padding: 0;",
          "494:  border-top: 1px solid #d6d6d6;",
          "495:  background: #FFF ;",
          "496:  width: 250px;",
          "497:  overflow: hidden;",
          "498:  font-size: 1.2em;",
          "499:  clear: both;",
          "503:  background-color: #DBE4E8;",
          "505:  border:1px solid #999;",
          "506:  color:#000;",
          "510:  text-align: center;",
          "511:  background-color: #9999CC;",
          "515:  text-align: center;",
          "516:  background-color: #DBE4E8;",
          "520:  display: none;",
          "521:  position: absolute;",
          "522:  top: 0%;",
          "523:  left: 0%;",
          "524:  width: 100%;",
          "525:  height: 100%;",
          "526:  background-color: #CCA;",
          "527:  z-index:10;",
          "528:  opacity:0.5;",
          "529:  filter: alpha(opacity=50);",
          "533:  display: none;",
          "534:  position: absolute;",
          "535:  top: 20%;",
          "536:  left: 30%;",
          "537:  width: 500px;",
          "538:  height: 220px;",
          "539:  padding: 48px;",
          "540:  margin:0;",
          "541:  border: 1px solid black;",
          "542:  background-color: white;",
          "543:  z-index:101;",
          "544:  overflow: visible;",
          "548:  position:absolute;",
          "549:  float:center;",
          "550:  top:0;",
          "551:  left:0;",
          "552:  width:593px;",
          "553:  height:20px;",
          "554:  padding:0;",
          "555:  padding-top:4px;",
          "556:  left-padding:8px;",
          "557:  margin:0;",
          "558:  border-bottom:4px solid #3CF;",
          "559:  background-color: #D0DCE0; //#09c;",
          "560:  color:black;",
          "561:  font-weight:bold;",
          "562:  padding-left: 2px;",
          "563:  font-family:\"Times New Roman\", Times, serif;",
          "564:  font-size:16px;",
          "565:  text-align:left;",
          "569:  background-color: D3DCE3;",
          "570:  float: right;",
          "571:  padding-top:10px;",
          "572:  color: black;",
          "573:  font-weight: normal;",
          "577:  color:#333;",
          "578:  font: bold 84%'trebuchet ms',helvetica,sans-serif;",
          "579:  background-color: #D0DCE0;",
          "",
          "[Added Lines]",
          "459:     background-repeat: repeat-x;",
          "462:     font-size:14px;",
          "463:     padding: 50 20 50 20px;",
          "464:     margin: 0 0 5px 0;",
          "465:     width: 250px;",
          "466:     float: left;",
          "467:     color : #333;",
          "468:     text-align: center;",
          "472:     background-image: url(images/Header.png);",
          "473:     text-align: center;",
          "474:     text-decoration: none;",
          "475:     color : #333;",
          "476:     display: block;",
          "480:     color: #000;",
          "481:     background-image: url(images/Header_Linked.png);",
          "485:     background-image: url(images/Header.png);",
          "488:     background-position: left bottom;",
          "492:     margin: 0 0 5px;",
          "493:     padding: 0;",
          "494:     border-top: 1px solid #d6d6d6;",
          "495:     background: #FFF ;",
          "496:     width: 250px;",
          "497:     overflow: hidden;",
          "498:     font-size: 1.2em;",
          "499:     clear: both;",
          "503:     background-color: #DBE4E8;",
          "505:     border:1px solid #999;",
          "506:     color:#000;",
          "510:     text-align: center;",
          "511:     background-color: #9999CC;",
          "515:     text-align: center;",
          "516:     background-color: #DBE4E8;",
          "520:     display: none;",
          "521:     position: absolute;",
          "522:     top: 0%;",
          "523:     left: 0%;",
          "524:     width: 100%;",
          "525:     height: 100%;",
          "526:     background-color: #CCA;",
          "527:     z-index:10;",
          "528:     opacity:0.5;",
          "529:     filter: alpha(opacity=50);",
          "533:     display: none;",
          "534:     position: absolute;",
          "535:     top: 20%;",
          "536:     left: 30%;",
          "537:     width: 500px;",
          "538:     height: 220px;",
          "539:     padding: 48px;",
          "540:     margin:0;",
          "541:     border: 1px solid black;",
          "542:     background-color: white;",
          "543:     z-index:101;",
          "544:     overflow: visible;",
          "548:     position:absolute;",
          "549:     float:center;",
          "550:     top:0;",
          "551:     left:0;",
          "552:     width:593px;",
          "553:     height:20px;",
          "554:     padding:0;",
          "555:     padding-top:4px;",
          "556:     left-padding:8px;",
          "557:     margin:0;",
          "558:     border-bottom:4px solid #3CF;",
          "559:     background-color: #D0DCE0; //#09c;",
          "560:     color:black;",
          "561:     font-weight:bold;",
          "562:     padding-left: 2px;",
          "563:     font-family:\"Times New Roman\", Times, serif;",
          "564:     font-size:16px;",
          "565:     text-align:left;",
          "569:     background-color: D3DCE3;",
          "570:     float: right;",
          "571:     padding-top:10px;",
          "572:     color: black;",
          "573:     font-weight: normal;",
          "577:     color:#333;",
          "578:     font: bold 84%'trebuchet ms',helvetica,sans-serif;",
          "579:     background-color: #D0DCE0;",
          "",
          "---------------"
        ],
        "pmd_general.php||pmd_general.php": [
          "File: pmd_general.php -> pmd_general.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     var server = \"' . PMA_escapeJsString($server) . '\";",
          "42:     var db = \"' . PMA_escapeJsString($db) . '\";",
          "43:     var token = \"' . PMA_escapeJsString($token) . '\";';",
          "55: ?>",
          "57:     </script>",
          "58:     <script src=\"pmd/scripts/ajax.js\" type=\"text/javascript\"></script>",
          "59:     <script src=\"pmd/scripts/history.js\" type=\"text/javascript\"></script>",
          "61:     <!--[if IE]>",
          "62:     <script src=\"pmd/scripts/iecanvas.js\" type=\"text/javascript\"></script>",
          "63:     <![endif]-->",
          "",
          "[Removed Lines]",
          "44:  echo \"\\n\";",
          "45:  if ($_REQUEST['query']) {",
          "46:  echo '",
          "47:   $(document).ready(function() {",
          "48:   $(\".trigger\").click(function() {",
          "49:   $(\".panel\").toggle(\"fast\");",
          "50:   $(this).toggleClass(\"active\");",
          "51:   return false;",
          "52:   });",
          "53:  });';",
          "54:  }",
          "60:  <script src=\"pmd/scripts/move.js\" type=\"text/javascript\"></script>",
          "",
          "[Added Lines]",
          "44:     echo \"\\n\";",
          "45:     if ($_REQUEST['query']) {",
          "46:     echo '",
          "47:      $(document).ready(function() {",
          "48:         $(\".trigger\").click(function() {",
          "49:         $(\".panel\").toggle(\"fast\");",
          "50:         $(this).toggleClass(\"active\");",
          "51:         return false;",
          "52:         });",
          "53:     });';",
          "54:     }",
          "60:     <script src=\"pmd/scripts/move.js\" type=\"text/javascript\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205: <thead>",
          "206: <tr>",
          "207:     <?php",
          "211:         echo 'id=\"select_all_'.htmlspecialchars($t_n_url).'\" title=\"select all\" ';",
          "212:         echo 'onclick=\"Select_all(\\''. htmlspecialchars($t_n_url) .'\\',\\''.htmlspecialchars($GLOBALS['PMD_OUT'][\"OWNER\"][$i]).'\\')\"></td>';",
          "214:     <td class=\"small_tab\" onmouseover=\"this.className='small_tab2';\"",
          "215:         onmouseout=\"this.className='small_tab';\"",
          "216:         id=\"id_hide_tbody_<?php echo $t_n_url ?>\"",
          "",
          "[Removed Lines]",
          "208:  if (isset($_REQUEST['query'])) {",
          "209:   echo '<td class=\"select_all\">';",
          "210:      echo '<input type=\"checkbox\" value=\"select_all_'.htmlspecialchars($t_n_url).'\" style=\"margin: 0px;\" ';",
          "213:  }?>",
          "",
          "[Added Lines]",
          "208:     if (isset($_REQUEST['query'])) {",
          "209:         echo '<td class=\"select_all\">';",
          "210:         echo '<input type=\"checkbox\" value=\"select_all_'.htmlspecialchars($t_n_url).'\" style=\"margin: 0px;\" ';",
          "213:     }?>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:         echo $GLOBALS['PMD_OUT'][\"TABLE_NAME_SMALL\"][$i];",
          "239:         ?></td>",
          "240:     <?php",
          "243:         echo 'onmousedown=\"cur_click=document.getElementById(\\''.htmlspecialchars($t_n_url).'\\');\"';",
          "244:         echo 'onmouseout=\"Table_onover(\\''.htmlspecialchars($t_n_url).'\\',1,1)\">';",
          "246: </tr>",
          "247: </thead>",
          "248: <tbody id=\"id_tbody_<?php echo $t_n_url ?>\"",
          "",
          "[Removed Lines]",
          "241:  if (isset($_REQUEST['query'])) {",
          "242:   echo '<td class=\"tab_zag\"  onmouseover=\"Table_onover(\\''.htmlspecialchars($t_n_url).'\\',0,1)\"  id=\"id_zag_'.htmlspecialchars($t_n_url).'_2\"';",
          "245:  }?>",
          "",
          "[Added Lines]",
          "241:     if (isset($_REQUEST['query'])) {",
          "242:         echo '<td class=\"tab_zag\"  onmouseover=\"Table_onover(\\''.htmlspecialchars($t_n_url).'\\',0,1)\"  id=\"id_zag_'.htmlspecialchars($t_n_url).'_2\"';",
          "245:     }?>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:         }",
          "275:         ?>)\">",
          "276:     <?php",
          "280:         echo 'type=\"checkbox\" id=\"select_'.htmlspecialchars($t_n_url).'._'.urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\" ';",
          "284:     <td width=\"10px\" colspan=\"3\"",
          "285:         id=\"<?php echo $t_n_url.\".\".urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]) ?>\">",
          "286:         <div style=\"white-space:nowrap\">",
          "",
          "[Removed Lines]",
          "277:  if (isset($_REQUEST['query'])) {",
          "278:      echo '<td class=\"select_all\">';",
          "279:      echo '<input value=\"'.htmlspecialchars($t_n_url).urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\"';",
          "281:    echo 'style=\"margin: 0px;\" title=\"select_'.urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\" ';",
          "282:   echo 'onclick=\"store_column(\\''.urlencode($GLOBALS['PMD_OUT'][\"TABLE_NAME_SMALL\"][$i]).'\\',\\''.htmlspecialchars($GLOBALS['PMD_OUT'][\"OWNER\"][$i]).'\\',\\''.urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\\')\"></td>';",
          "283:  }?>",
          "",
          "[Added Lines]",
          "277:     if (isset($_REQUEST['query'])) {",
          "278:         echo '<td class=\"select_all\">';",
          "279:         echo '<input value=\"'.htmlspecialchars($t_n_url).urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\"';",
          "281:         echo 'style=\"margin: 0px;\" title=\"select_'.urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\" ';",
          "282:         echo 'onclick=\"store_column(\\''.urlencode($GLOBALS['PMD_OUT'][\"TABLE_NAME_SMALL\"][$i]).'\\',\\''.htmlspecialchars($GLOBALS['PMD_OUT'][\"OWNER\"][$i]).'\\',\\''.urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\\')\"></td>';",
          "283:     }?>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:    </td>",
          "317:    <?php",
          "318:    if (isset($_REQUEST['query'])) {",
          "325: </tr>",
          "326:         <?php",
          "327:     }",
          "",
          "[Removed Lines]",
          "320:     echo '<td class=\"small_tab_pref\" onmouseover=\"this.className=\\'small_tab_pref2\\';\"';",
          "321:     echo 'onmouseout=\"this.className=\\'small_tab_pref\\';\"';",
          "322:     echo 'onclick=\"Click_option(\\'pmd_optionse\\',\\''.urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\\',\\''.$GLOBALS['PMD_OUT'][\"TABLE_NAME_SMALL\"][$i].'\\')\" >';",
          "323:     echo  '<img src=\"pmd/images/exec_small.png\" title=\"options\" alt=\"\" /></td> ';",
          "324:  } ?>",
          "",
          "[Added Lines]",
          "320:        echo '<td class=\"small_tab_pref\" onmouseover=\"this.className=\\'small_tab_pref2\\';\"';",
          "321:        echo 'onmouseout=\"this.className=\\'small_tab_pref\\';\"';",
          "322:        echo 'onclick=\"Click_option(\\'pmd_optionse\\',\\''.urlencode($tab_column[$t_n][\"COLUMN_NAME\"][$j]).'\\',\\''.$GLOBALS['PMD_OUT'][\"TABLE_NAME_SMALL\"][$i].'\\')\" >';",
          "323:        echo  '<img src=\"pmd/images/exec_small.png\" title=\"options\" alt=\"\" /></td> ';",
          "324:     } ?>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "451:         <table width=\"168\" border=\"0\" align=\"center\" cellpadding=\"2\" cellspacing=\"0\">",
          "452:        <thead>",
          "453:         <tr>",
          "455:         </tr>",
          "456:         </thead>",
          "457:         <tbody id=\"where\">",
          "",
          "[Removed Lines]",
          "454:          <td colspan=\"2\" rowspan=\"2\" id=\"option_col_name\" nowrap=\"nowrap\" align=\"center\"></td>",
          "",
          "[Added Lines]",
          "454:             <td colspan=\"2\" rowspan=\"2\" id=\"option_col_name\" nowrap=\"nowrap\" align=\"center\"></td>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "480:         <tr><td align=\"center\" nowrap=\"nowrap\"><b><?php echo __('Rename to'); ?></b></td></tr>",
          "481:         <tr>",
          "482:         <td width=\"58\" nowrap=\"nowrap\"><?php echo __('New name'); ?></td>",
          "484:         </tr>",
          "485:         <tr><td align=\"center\" nowrap=\"nowrap\"><b><?php echo __('Aggregate'); ?></b></td></tr>",
          "486:          <tr>",
          "",
          "[Removed Lines]",
          "483:          <td width=\"102\"><input type=\"text\" value=\"\" id=\"new_name\"/></td>",
          "",
          "[Added Lines]",
          "483:             <td width=\"102\"><input type=\"text\" value=\"\" id=\"new_name\"/></td>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "495:                     </select>",
          "496:            </td></tr>",
          "497:            <tr>",
          "499:                 <td><input type=\"checkbox\" value=\"groupby\" id=\"groupby\"/></td>",
          "500:            </tr>",
          "501:            <tr>",
          "503:                 <td><input type=\"checkbox\" value=\"orderby\" id=\"orderby\"/></td>",
          "504:            </tr>",
          "505:           <tr><td align=\"center\" nowrap=\"nowrap\"><b>HAVING</b></td></tr>",
          "",
          "[Removed Lines]",
          "498:     <td nowrap=\"nowrap\" width=\"58\" align=\"center\"><b>GROUP BY</b></td>",
          "502:     <td nowrap=\"nowrap\" width=\"58\" align=\"center\"><b>ORDER BY</b></td>",
          "",
          "[Added Lines]",
          "498:                 <td nowrap=\"nowrap\" width=\"58\" align=\"center\"><b>GROUP BY</b></td>",
          "502:                 <td nowrap=\"nowrap\" width=\"58\" align=\"center\"><b>ORDER BY</b></td>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "514:                     <option value=\"avg\"> AVG </option>",
          "515:                     <option value=\"count\"> COUNT </option>",
          "516:                     </select>",
          "518:             <tr>",
          "519:             <td width=\"58\" nowrap=\"nowrap\"><?php echo __('Relation operator'); ?></td>",
          "520:             <td width=\"102\"><select name=\"h_rel_opt\" id=\"h_rel_opt\">",
          "",
          "[Removed Lines]",
          "517:             </td></tr>",
          "",
          "[Added Lines]",
          "517:                </td></tr>",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "530:                     <option value=\"NOT IN\"> NOT IN </option>",
          "531:                 </select>",
          "532:             </td>",
          "534:             <tr>",
          "535:             <td width=\"58\" nowrap=\"nowrap\"><?php echo __('Value'); ?>/<br/><?php echo __('subquery'); ?></td>",
          "538:         </tbody>",
          "539:         <tbody>",
          "540:         <tr>",
          "",
          "[Removed Lines]",
          "533:          </tr>",
          "536:           <td width=\"102\"><textarea id=\"having\" value=\"\" cols=\"18\"></textarea></td>",
          "537:          </tr>",
          "",
          "[Added Lines]",
          "533:             </tr>",
          "536:                 <td width=\"102\"><textarea id=\"having\" value=\"\" cols=\"18\"></textarea></td>",
          "537:             </tr>",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "580:         <tr>",
          "581:         <td width=\"58\" nowrap=\"nowrap\"><?php echo __('New name'); ?></td>",
          "582:             <td width=\"102\">",
          "584:             </td>",
          "585:         </tr>",
          "586:         </tbody>",
          "",
          "[Removed Lines]",
          "583:              <input type=\"text\" value=\"\" id=\"e_rename\"/>",
          "",
          "[Added Lines]",
          "583:                 <input type=\"text\" value=\"\" id=\"e_rename\"/>",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "610: <table id=\"query_having\" style=\"visibility:<?php echo $hidden ?>;\"",
          "611:     width=\"5%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">",
          "612: <tbody>",
          "618: <tr>",
          "619:     <td class=\"frams8\"></td>",
          "620:     <td class=\"input_tab\">",
          "",
          "[Removed Lines]",
          "613:  <tr>",
          "614:      <td class=\"frams1\" width=\"10px\"></td>",
          "615:      <td class=\"frams5\" width=\"99%\" ></td>",
          "616:      <td class=\"frams2\" width=\"10px\"><div class=\"bor\"></div></td>",
          "617:  </tr>",
          "",
          "[Added Lines]",
          "613:     <tr>",
          "614:         <td class=\"frams1\" width=\"10px\"></td>",
          "615:         <td class=\"frams5\" width=\"99%\" ></td>",
          "616:         <td class=\"frams2\" width=\"10px\"><div class=\"bor\"></div></td>",
          "617:     </tr>",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "641:         <tr>",
          "642:         <td width=\"58\" nowrap=\"nowrap\"><?php echo __('Operator'); ?></td>",
          "643:             <td width=\"102\"><select name=\"hrel_opt\" id=\"hrel_opt\">",
          "645:                     <option value=\"=\" > = </option>",
          "646:                     <option value=\">\"> > </option>",
          "647:                     <option value=\"<\"> < </option>",
          "",
          "[Removed Lines]",
          "644:              <option value=\"--\" selected=\"selected\"> -- </option>",
          "",
          "[Added Lines]",
          "644:                 <option value=\"--\" selected=\"selected\"> -- </option>",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "658:         <td nowrap=\"nowrap\"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>",
          "659:             <td><textarea id=\"hQuery\" value=\"\" cols=\"18\"></textarea>",
          "660:             </td>",
          "662:          </tbody>",
          "663:         <tbody>",
          "664:         <tr>",
          "",
          "[Removed Lines]",
          "661:          </tr>",
          "",
          "[Added Lines]",
          "661:             </tr>",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "704:         <tr>",
          "705:         <td width=\"58\" nowrap=\"nowrap\"><?php echo __('Operator'); ?></td>",
          "706:             <td width=\"102\">",
          "714:                 </select>",
          "715:            </td></tr>",
          "716:         </tbody>",
          "",
          "[Removed Lines]",
          "707:              <select name=\"operator\" id=\"e_operator\">",
          "708:                  <option value=\"---\" selected=\"selected\">---</option>",
          "709:                  <option value=\"sum\" > SUM </option>",
          "710:                  <option value=\"min\"> MIN </option>",
          "711:                  <option value=\"max\"> MAX </option>",
          "712:                  <option value=\"avg\"> AVG </option>",
          "713:                  <option value=\"avg\"> COUNT </option>",
          "",
          "[Added Lines]",
          "707:                 <select name=\"operator\" id=\"e_operator\">",
          "708:                     <option value=\"---\" selected=\"selected\">---</option>",
          "709:                     <option value=\"sum\" > SUM </option>",
          "710:                     <option value=\"min\"> MIN </option>",
          "711:                     <option value=\"max\"> MAX </option>",
          "712:                        <option value=\"avg\"> AVG </option>",
          "713:                     <option value=\"avg\"> COUNT </option>",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "740: <table id=\"query_where\" style=\"visibility:<?php echo $hidden ?>;\"",
          "741:     width=\"5%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">",
          "742: <tbody>",
          "748: <tr>",
          "749:     <td class=\"frams8\"></td>",
          "750:     <td class=\"input_tab\">",
          "",
          "[Removed Lines]",
          "743:  <tr>",
          "744:      <td class=\"frams1\" width=\"10px\"></td>",
          "745:      <td class=\"frams5\" width=\"99%\" ></td>",
          "746:      <td class=\"frams2\" width=\"10px\"><div class=\"bor\"></div></td>",
          "747:  </tr>",
          "",
          "[Added Lines]",
          "743:     <tr>",
          "744:         <td class=\"frams1\" width=\"10px\"></td>",
          "745:         <td class=\"frams5\" width=\"99%\" ></td>",
          "746:         <td class=\"frams2\" width=\"10px\"><div class=\"bor\"></div></td>",
          "747:     </tr>",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "758:         <tr>",
          "759:         <td width=\"58\" nowrap=\"nowrap\"><?php echo __('Operator'); ?></td>",
          "760:             <td width=\"102\"><select name=\"erel_opt\" id=\"erel_opt\">",
          "762:                     <option value=\"=\" > = </option>",
          "763:                     <option value=\">\"> > </option>",
          "764:                     <option value=\"<\"> < </option>",
          "",
          "[Removed Lines]",
          "761:              <option value=\"--\" selected=\"selected\"> -- </option>",
          "",
          "[Added Lines]",
          "761:                 <option value=\"--\" selected=\"selected\"> -- </option>",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "775:         <td nowrap=\"nowrap\"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>",
          "776:             <td><textarea id=\"eQuery\" value=\"\" cols=\"18\"></textarea>",
          "777:             </td>",
          "779:          </tbody>",
          "780:         <tbody>",
          "781:         <tr>",
          "",
          "[Removed Lines]",
          "778:          </tr>",
          "",
          "[Added Lines]",
          "778:             </tr>",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "803: <?php",
          "804: if ($_REQUEST['query']) {",
          "815:     echo '<textarea cols=\"80\" name=\"sql_query\" id=\"textSqlquery\" rows=\"15\"></textarea><div id=\"tblfooter\">';",
          "816:     echo '  <input type=\"submit\" name=\"submit_sql\" class=\"btn\">';",
          "817:     echo '  <input type=\"button\" name=\"cancel\" value=\"Cancel\" onClick=\"closebox()\" class=\"btn\">';",
          "",
          "[Removed Lines]",
          "805:  echo '<div class=\"panel\">';",
          "806:    echo '<div style=\"clear:both;\"></div>';",
          "807:     echo '<div id=\"ab\"></div>';",
          "808:   echo '<div style=\"clear:both;\"></div>';",
          "809:    echo '</div>';",
          "810:  echo '<a class=\"trigger\" href=\"#\">' . __('Active options') . '</a>';",
          "811:  echo '<div id=\"filter\"></div>';",
          "812:  echo '<div id=\"box\">';",
          "813:    echo '<span id=\"boxtitle\"></span>';",
          "814:    echo '<form method=\"post\" action=\"db_qbe.php\" >';",
          "",
          "[Added Lines]",
          "805:     echo '<div class=\"panel\">';",
          "806:     echo '<div style=\"clear:both;\"></div>';",
          "807:     echo '<div id=\"ab\"></div>';",
          "808:     echo '<div style=\"clear:both;\"></div>';",
          "809:     echo '</div>';",
          "810:     echo '<a class=\"trigger\" href=\"#\">' . __('Active options') . '</a>';",
          "811:     echo '<div id=\"filter\"></div>';",
          "812:     echo '<div id=\"box\">';",
          "813:     echo '<span id=\"boxtitle\"></span>';",
          "814:     echo '<form method=\"post\" action=\"db_qbe.php\" >';",
          "",
          "---------------"
        ],
        "server_synchronize.php||server_synchronize.php": [
          "File: server_synchronize.php -> server_synchronize.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         ${\"{$con}_port\"}     = $_REQUEST[$con . '_port'];",
          "61:         ${\"{$con}_socket\"}   = $_REQUEST[$con . '_socket'];",
          "62:         ${\"{$con}_db\"}       = $_REQUEST[$con . '_db'];",
          "65:         if (${\"{$con}_type\"} == 'cur') {",
          "70:         }",
          "72:         if (isset(${\"{$con}_socket\"}) && ! empty(${\"{$con}_socket\"})) {",
          "74:         } else {",
          "79:         }",
          "81:         ${\"{$con}_connection\"} = PMA_DBI_connect(${\"{$con}_username\"}, ${\"{$con}_password\"}, $is_controluser = false, ${\"{$con}_server\"}, $auxiliary_connection = true);",
          "",
          "[Removed Lines]",
          "63:         ${\"{$con}_type\"}  = $_REQUEST[$con . '_type'];",
          "66:          ${\"{$con}_connection\"} = null;",
          "67:          ${\"{$con}_server\"} = null;",
          "68:          ${\"{$con}_db\"}       = $_REQUEST[$con . '_db_sel'];",
          "69:          continue;",
          "73:          ${\"{$con}_server\"}['socket'] = ${\"{$con}_socket\"};",
          "75:          ${\"{$con}_server\"}['host'] = ${\"{$con}_host\"};",
          "76:          if (isset(${\"{$con}_port\"}) && ! empty(${\"{$con}_port\"}) && ((int)${\"{$con}_port\"} * 1) > 0) {",
          "77:              ${\"{$con}_server\"}['port'] = (int)${\"{$con}_port\"};",
          "78:          }",
          "",
          "[Added Lines]",
          "63:         ${\"{$con}_type\"}     = $_REQUEST[$con . '_type'];",
          "66:             ${\"{$con}_connection\"} = null;",
          "67:             ${\"{$con}_server\"} = null;",
          "68:             ${\"{$con}_db\"}       = $_REQUEST[$con . '_db_sel'];",
          "69:             continue;",
          "73:             ${\"{$con}_server\"}['socket'] = ${\"{$con}_socket\"};",
          "75:             ${\"{$con}_server\"}['host'] = ${\"{$con}_host\"};",
          "76:             if (isset(${\"{$con}_port\"}) && ! empty(${\"{$con}_port\"}) && ((int)${\"{$con}_port\"} * 1) > 0) {",
          "77:                 ${\"{$con}_server\"}['port'] = (int)${\"{$con}_port\"};",
          "78:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:                 ${\"{$con}_link\"} = null;",
          "110:             }",
          "114:         if (($src_db_selected != 1) || ($trg_db_selected != 1)) {",
          "",
          "[Removed Lines]",
          "105:      foreach ($cons as $con) {",
          "106:          if (${\"{$con}_connection\"} != null) {",
          "107:              ${\"{$con}_link\"} = PMA_DBI_connect(${\"{$con}_username\"}, ${\"{$con}_password\"}, $is_controluser = false, ${\"{$con}_server\"});",
          "108:          } else {",
          "111:          ${\"{$con}_db_selected\"} = PMA_DBI_select_db(${\"{$con}_db\"}, ${\"{$con}_link\"});",
          "112:      } // end foreach ($cons as $con)",
          "",
          "[Added Lines]",
          "105:         foreach ($cons as $con) {",
          "106:             if (${\"{$con}_connection\"} != null) {",
          "107:                 ${\"{$con}_link\"} = PMA_DBI_connect(${\"{$con}_username\"}, ${\"{$con}_password\"}, $is_controluser = false, ${\"{$con}_server\"});",
          "108:             } else {",
          "111:             ${\"{$con}_db_selected\"} = PMA_DBI_select_db(${\"{$con}_db\"}, ${\"{$con}_link\"});",
          "112:         } // end foreach ($cons as $con)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:             $_SESSION['src_password'] = $src_password;",
          "226:             $_SESSION['trg_password'] = $trg_password;",
          "227:             $_SESSION['trg_password'] = $trg_password;",
          "232:             $_SESSION['matching_tables_keys'] = $matching_tables_keys;",
          "233:             $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;",
          "234:             $_SESSION['uncommon_tables_row_count'] = $row_count;",
          "",
          "[Removed Lines]",
          "228:          $_SESSION['src_server']   = $src_server;",
          "229:          $_SESSION['trg_server']   = $trg_server;",
          "230:          $_SESSION['src_type']     = $src_type;",
          "231:          $_SESSION['trg_type']     = $trg_type;",
          "",
          "[Added Lines]",
          "228:             $_SESSION['src_server']   = $src_server;",
          "229:             $_SESSION['trg_server']   = $trg_server;",
          "230:             $_SESSION['src_type']     = $src_type;",
          "231:             $_SESSION['trg_type']     = $trg_type;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:         if (($num_alter_cols > 0) || ($num_insert_cols > 0) || ($num_remove_cols > 0) || ($num_add_index > 0) || ($num_remove_index > 0)) {",
          "733:             echo '<img class=\"icon struct_img\" src=\"' . $pmaThemeImage .  'new_struct.jpg\" width=\"29\"  height=\"29\"",
          "735:             onclick=\"showDetails(' . \"'MS\" . $i . \"','\" . $num_alter_cols . \"','\" . $num_insert_cols . \"','\" . $num_remove_cols . \"','\" . $num_add_index . \"','\" . $num_remove_index . \"'\" .',",
          "736:             this ,' . \"'\" . htmlspecialchars($matching_tables[$i]) . \"'\" . ')\"/>';",
          "737:         }",
          "",
          "[Removed Lines]",
          "734:             alt=\"' . __('Click to select') . '\"",
          "",
          "[Added Lines]",
          "734:             alt=\"' . __('Click to select') . '\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "799:         if (!(in_array($j, $uncommon_table_data_diff))) {",
          "800:             if (isset($row_count[$j]) && ($row_count > 0)) {",
          "801:                 echo '<img class=\"icon data_img\" src=\"' . $pmaThemeImage . 'new_data.jpg\" width=\"29\" height=\"29\"",
          "803:                 onclick=\"showDetails(' . \"'UD\" . $j . \"','\" . null .\"','\" . $row_count[$j] .\"','\"",
          "804:                 . null . \"','\" . null . \"','\" . null . \"'\" . ', this ,' . \"'\". htmlspecialchars($source_tables_uncommon[$j]) . \"'\" . ')\" />';",
          "805:             }",
          "",
          "[Removed Lines]",
          "802:                 alt=\"' . __('Click to select') . '\"",
          "",
          "[Added Lines]",
          "802:                 alt=\"' . __('Click to select') . '\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1117:       <table id=\"serverconnection_<?php echo $type; ?>_remote\" class=\"data\">",
          "1118:       <caption class=\"tblHeaders\"><?php echo $database_header; ?></caption>",
          "1119:       <tr class=\"odd\">",
          "1122: <?php",
          "1123:         if ($GLOBALS['cfg']['AllowArbitraryServer']) {",
          "1124:             $preselected_option = 'rmt';",
          "",
          "[Removed Lines]",
          "1120:    <td colspan=\"2\" style=\"text-align: center\">",
          "1121:       <select name=\"<?php echo $type; ?>_type\" id=\"<?php echo $type; ?>_type\" class=\"server_selector\">",
          "",
          "[Added Lines]",
          "1120:       <td colspan=\"2\" style=\"text-align: center\">",
          "1121:          <select name=\"<?php echo $type; ?>_type\" id=\"<?php echo $type; ?>_type\" class=\"server_selector\">",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1162:                 . htmlspecialchars(sprintf(__('Configuration: %s'), $label)) . '</option>';",
          "1163:         } // end foreach",
          "1164: ?>",
          "1167:       </tr>",
          "1170:         <td><input type=\"text\" name=\"<?php echo $type; ?>_host\" class=\"server-host\" <?php echo $possibly_readonly; ?>/></td>",
          "1174:         <td><input type=\"text\" name=\"<?php echo $type; ?>_port\" class=\"server-port\" <?php echo $possibly_readonly; ?> value=\"3306\" maxlength=\"5\" size=\"5\" /></td>",
          "1178:         <td><input type=\"text\" name=\"<?php echo $type; ?>_socket\" class=\"server-socket\" <?php echo $possibly_readonly; ?>/></td>",
          "1182:         <td><input type=\"text\" name=\"<?php echo $type; ?>_username\" class=\"server-user\" /></td>",
          "1186:         <td><input type=\"password\" name=\"<?php echo $type; ?>_pass\" class=\"server-pass\" /> </td>",
          "1190:         <td><input type=\"text\" name=\"<?php echo $type; ?>_db\" class=\"server-db\" /></td>",
          "1195: <?php",
          "1197:     unset($databases['mysql']);",
          "1198:     unset($databases['information_schema']);",
          "1209:         echo '</select>';",
          "1212:       </table>';",
          "1213:    }",
          "1214:    unset ($types, $type);",
          "",
          "[Removed Lines]",
          "1165:       </select>",
          "1166:    </td>",
          "1168:  <tr class=\"even toggler remote-server\">",
          "1169:      <td><?php echo __('Server'); ?></td>",
          "1171:  </tr>",
          "1172:  <tr class=\"odd toggler remote-server\">",
          "1173:      <td><?php echo __('Port'); ?></td>",
          "1175:  </tr>",
          "1176:  <tr class=\"even toggler remote-server\">",
          "1177:      <td><?php echo __('Socket'); ?></td>",
          "1179:  </tr>",
          "1180:  <tr class=\"odd toggler remote-server\">",
          "1181:      <td><?php echo __('User name'); ?></td>",
          "1183:  </tr>",
          "1184:  <tr class=\"even toggler remote-server\">",
          "1185:      <td><?php echo __('Password'); ?></td>",
          "1187:  </tr>",
          "1188:  <tr class=\"odd toggler remote-server\">",
          "1189:      <td><?php echo __('Database'); ?></td>",
          "1191:  </tr>",
          "1192:  <tr class=\"even toggler current-server\" style=\"display: none;\">",
          "1193:      <td><?php echo __('Database'); ?></td>",
          "1194:      <td>",
          "1200:  if (count($databases) == 0) {",
          "1201:   echo __('No databases');",
          "1202:  } else {",
          "1203:   echo '",
          "1204:         <select name=\"' . $type . '_db_sel\">",
          "1205:   ';",
          "1206:   foreach ($databases as $db) {",
          "1207:             echo '  <option>' . htmlspecialchars($db['SCHEMA_NAME']) . '</option>';",
          "1208:   }",
          "1210:  }",
          "1211:  echo '</td> </tr>",
          "",
          "[Added Lines]",
          "1165:          </select>",
          "1166:       </td>",
          "1168:     <tr class=\"even toggler remote-server\">",
          "1169:         <td><?php echo __('Server'); ?></td>",
          "1171:     </tr>",
          "1172:     <tr class=\"odd toggler remote-server\">",
          "1173:         <td><?php echo __('Port'); ?></td>",
          "1175:     </tr>",
          "1176:     <tr class=\"even toggler remote-server\">",
          "1177:         <td><?php echo __('Socket'); ?></td>",
          "1179:     </tr>",
          "1180:     <tr class=\"odd toggler remote-server\">",
          "1181:         <td><?php echo __('User name'); ?></td>",
          "1183:     </tr>",
          "1184:     <tr class=\"even toggler remote-server\">",
          "1185:         <td><?php echo __('Password'); ?></td>",
          "1187:     </tr>",
          "1188:     <tr class=\"odd toggler remote-server\">",
          "1189:         <td><?php echo __('Database'); ?></td>",
          "1191:     </tr>",
          "1192:     <tr class=\"even toggler current-server\" style=\"display: none;\">",
          "1193:         <td><?php echo __('Database'); ?></td>",
          "1194:         <td>",
          "1200:     if (count($databases) == 0) {",
          "1201:         echo __('No databases');",
          "1202:     } else {",
          "1203:         echo '",
          "1204:               <select name=\"' . $type . '_db_sel\">",
          "1205:         ';",
          "1206:         foreach ($databases as $db) {",
          "1207:             echo '        <option>' . htmlspecialchars($db['SCHEMA_NAME']) . '</option>';",
          "1208:         }",
          "1210:     }",
          "1211:     echo '</td> </tr>",
          "",
          "---------------"
        ],
        "setup/config.php||setup/config.php": [
          "File: setup/config.php -> setup/config.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: }",
          "28: if (PMA_ifSetOr($_POST['submit_clear'], '')) {",
          "34:     header('HTTP/1.1 303 See Other');",
          "35:     header('Location: index.php');",
          "36:     exit;",
          "37: } elseif (PMA_ifSetOr($_POST['submit_download'], '')) {",
          "41:     header('Content-Type: text/plain');",
          "42:     header('Content-Disposition: attachment; filename=\"config.inc.php\"');",
          "43:     echo ConfigGenerator::getConfigFile();",
          "44:     exit;",
          "45: } elseif (PMA_ifSetOr($_POST['submit_save'], '')) {",
          "49:     file_put_contents($config_file_path, ConfigGenerator::getConfigFile());",
          "50:     header('HTTP/1.1 303 See Other');",
          "51:     header('Location: index.php?action_done=config_saved');",
          "52:     exit;",
          "53: } elseif (PMA_ifSetOr($_POST['submit_load'], '')) {",
          "57:     $cfg = array();",
          "58:     require_once $config_file_path;",
          "59:     ConfigFile::getInstance()->setConfigData($cfg);",
          "",
          "[Removed Lines]",
          "32:  ConfigFile::getInstance()->resetConfigData();",
          "",
          "[Added Lines]",
          "32:     ConfigFile::getInstance()->resetConfigData();",
          "",
          "---------------"
        ]
      }
    }
  ]
}