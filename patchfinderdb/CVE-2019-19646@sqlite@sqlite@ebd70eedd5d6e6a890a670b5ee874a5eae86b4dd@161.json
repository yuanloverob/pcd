{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4a9f379c9c1e5053d6550c27a1a3289cf1a6544c",
      "candidate_info": {
        "commit_hash": "4a9f379c9c1e5053d6550c27a1a3289cf1a6544c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a9f379c9c1e5053d6550c27a1a3289cf1a6544c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: 344d9cb0c726078af6deb4a26bed3aded5b26914bb286d3446d3a4e9150840b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aa57d7abac0bb92d4d5fd4e093a11cf8efc04e4eed748b2a400d01f137250649",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7694a6d1d9c0c3f6b5a0bcfb8ba07d999b9992f",
      "candidate_info": {
        "commit_hash": "c7694a6d1d9c0c3f6b5a0bcfb8ba07d999b9992f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c7694a6d1d9c0c3f6b5a0bcfb8ba07d999b9992f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Remove assert() statements based on the counter-factual proposition that 0 is not a valid cursor number.\n\nFossilOrigin-Name: c7b336181aac6785a515f275c0f50ad4bf2dee20abde959b56d968a7fdce3e5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec7e224f50271a69a28074270b01328ec0ee38751fcb93b2c598d8be2b77a95d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1262:     else if( p->zName==nth_valueName || p->zName==first_valueName ){",
          "1266:       pWin->regApp = pParse->nMem+1;",
          "1267:       pWin->csrApp = pParse->nTab++;",
          "1268:       pParse->nMem += 2;",
          "1269:       sqlite3VdbeAddOp2(v, OP_OpenDup, pWin->csrApp, pMWin->iEphCsr);",
          "1270:     }",
          "1271:     else if( p->zName==leadName || p->zName==lagName ){",
          "1273:       pWin->csrApp = pParse->nTab++;",
          "1274:       sqlite3VdbeAddOp2(v, OP_OpenDup, pWin->csrApp, pMWin->iEphCsr);",
          "1275:     }",
          "",
          "[Removed Lines]",
          "1265:       assert( pMWin->iEphCsr );",
          "1272:       assert( pMWin->iEphCsr );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1027:   FROM t5",
          "1028: } 3",
          "1030: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030: do_execsql_test 24.1 {",
          "1031:   SELECT sum(44) OVER ()",
          "1032: } {44}",
          "1034: do_execsql_test 24.2 {",
          "1035:   SELECT lead(44) OVER ()",
          "1036: } {{}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7476735c9b9e377958ab404f0130f3f43a219dc",
      "candidate_info": {
        "commit_hash": "c7476735c9b9e377958ab404f0130f3f43a219dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c7476735c9b9e377958ab404f0130f3f43a219dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/sqliteInt.h",
          "src/wherecode.c"
        ],
        "message": "Fix handling of covering indexes that use virtual columns.\n\nFossilOrigin-Name: e0f7e321eca91c49102649f70728de69347cbd7b16599b854203c24cfdc348e6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 42fc08bc1528a34a603c2c085b515766a8d33ae7ea0350a52b0ca24b94ebcbc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929: static void recomputeColumnsNotIndexed(Index *pIdx){",
          "1930:   Bitmask m = 0;",
          "1931:   int j;",
          "1932:   for(j=pIdx->nColumn-1; j>=0; j--){",
          "1933:     int x = pIdx->aiColumn[j];",
          "1935:       testcase( x==BMS-1 );",
          "1936:       testcase( x==BMS-2 );",
          "1937:       if( x<BMS-1 ) m |= MASKBIT(x);",
          "",
          "[Removed Lines]",
          "1934:     if( x>=0 ){",
          "",
          "[Added Lines]",
          "1940:   Table *pTab = pIdx->pTable;",
          "1943:     if( x>=0 && (pTab->aCol[x].colFlags & COLFLAG_VIRTUAL)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3617:       assert( j<=0x7fff );",
          "3618:       if( j<0 ){",
          "3619:         j = pTab->iPKey;",
          "3622:       }",
          "3623:       pIndex->aiColumn[i] = (i16)j;",
          "3624:     }",
          "",
          "[Removed Lines]",
          "3620:       }else if( pTab->aCol[j].notNull==0 ){",
          "3621:         pIndex->uniqNotNull = 0;",
          "",
          "[Added Lines]",
          "3629:       }else{",
          "3630:         if( pTab->aCol[j].notNull==0 ){",
          "3631:           pIndex->uniqNotNull = 0;",
          "3632:         }",
          "3633:         if( pTab->aCol[j].colFlags & COLFLAG_VIRTUAL ){",
          "3634:           pIndex->bHasVCol = 1;",
          "3635:         }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1128:   }",
          "1129: }",
          "1136: static void whereIndexExprTrans(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1132: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1136: static int whereIndexExprTransColumn(Walker *p, Expr *pExpr){",
          "1137:   if( pExpr->op==TK_COLUMN ){",
          "1138:     IdxExprTrans *pX = p->u.pIdxTrans;",
          "1139:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
          "1140:       pExpr->iTable = pX->iIdxCur;",
          "1141:       pExpr->iColumn = pX->iIdxCol;",
          "1142:     }",
          "1143:   }",
          "1144:   return WRC_Continue;",
          "1145: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1141: ){",
          "1144:   Walker w;",
          "1145:   IdxExprTrans x;",
          "1146:   aColExpr = pIdx->aColExpr;",
          "1148:   memset(&w, 0, sizeof(w));",
          "1150:   w.u.pIdxTrans = &x;",
          "1151:   x.iTabCur = iTabCur;",
          "1152:   x.iIdxCur = iIdxCur;",
          "1156:     x.iIdxCol = iIdxCol;",
          "1158:     sqlite3WalkExpr(&w, pWInfo->pWhere);",
          "1159:     sqlite3WalkExprList(&w, pWInfo->pOrderBy);",
          "1160:     sqlite3WalkExprList(&w, pWInfo->pResultSet);",
          "",
          "[Removed Lines]",
          "1149:   w.xExprCallback = whereIndexExprTransNode;",
          "1153:   for(iIdxCol=0; iIdxCol<aColExpr->nExpr; iIdxCol++){",
          "1154:     if( pIdx->aiColumn[iIdxCol]!=XN_EXPR ) continue;",
          "1155:     assert( aColExpr->a[iIdxCol].pExpr!=0 );",
          "1157:     x.pIdxExpr = aColExpr->a[iIdxCol].pExpr;",
          "",
          "[Added Lines]",
          "1165:   Table *pTab;",
          "1169:   if( aColExpr==0 && !pIdx->bHasVCol ){",
          "1172:     return;",
          "1173:   }",
          "1174:   pTab = pIdx->pTable;",
          "1179:   for(iIdxCol=0; iIdxCol<pIdx->nColumn; iIdxCol++){",
          "1180:     i16 iRef = pIdx->aiColumn[iIdxCol];",
          "1181:     if( iRef==XN_EXPR ){",
          "1182:       assert( aColExpr->a[iIdxCol].pExpr!=0 );",
          "1183:       x.pIdxExpr = aColExpr->a[iIdxCol].pExpr;",
          "1184:       w.xExprCallback = whereIndexExprTransNode;",
          "1185: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1186:     }else if( iRef>=0 && (pTab->aCol[iRef].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "1187:       x.iTabCol = iRef;",
          "1188:       w.xExprCallback = whereIndexExprTransColumn;",
          "1190:     }else{",
          "1191:       continue;",
          "1192:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2f142d079110237e8c0a02c701b3d387526fbfa",
      "candidate_info": {
        "commit_hash": "a2f142d079110237e8c0a02c701b3d387526fbfa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2f142d079110237e8c0a02c701b3d387526fbfa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Abort the window function tree rewrite early following an OOM.\n\nFossilOrigin-Name: d66f95a51530259ab48f78c9f91acc38055caf338b6fee846b99a8c077466e95",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 57070c68bbe15fc1d19a765182432e844c082909bdbc63b58fd86b96e2c521dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "813:         pExpr->iTable = p->pWin->iEphCsr;",
          "814:         pExpr->y.pTab = p->pTab;",
          "815:       }",
          "817:       break;",
          "818:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "816:       if( pParse->db->mallocFailed ) return WRC_Abort;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "1276:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1277:   if( p1->eStart!=p2->eStart ) return 1;",
          "1278:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1276:   if( NEVER(p1==0) || NEVER(p2==0) ) return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90c21df2338651335ad7a922dd573f50c5f161ab",
      "candidate_info": {
        "commit_hash": "90c21df2338651335ad7a922dd573f50c5f161ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/90c21df2338651335ad7a922dd573f50c5f161ab",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New dbsqlfuzz find added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 42af7c819bc52ccb6953a58b1c05d3bd47cc438c5119a9555b1b796764eb9f20",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1660d7733eb443ab085ddef7666b998a1c75ac81cc54a9620960a8d3b377e28e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}