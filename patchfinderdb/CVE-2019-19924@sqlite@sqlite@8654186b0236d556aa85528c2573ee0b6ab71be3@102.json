{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
      "candidate_info": {
        "commit_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Always use the symbolic name SQLITE_IDXTYPE_PRIMARYKEY rather than a hard-coded magic number 2.\n\nFossilOrigin-Name: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a6509ca3dc2602c7d0376230ee63c1bb4c4066f007e77e9ac20d8eee966e5e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "1670:     VdbeComment((v, \"for %s\", pIdx->zName));",
          "1671: #ifdef SQLITE_ENABLE_NULL_TRIM",
          "1673: #endif",
          "",
          "[Removed Lines]",
          "1672:     if( pIdx->idxType==2 ) sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "",
          "[Added Lines]",
          "1672:     if( pIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "1673:       sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "1674:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2410:         sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2411:       }",
          "2412:     }",
          "2414:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2415:     }",
          "2416:     sqlite3VdbeAddOp2(v, OP_IdxInsert, iDest, regData);",
          "",
          "[Removed Lines]",
          "2413:     if( !HasRowid(pSrc) && pDestIdx->idxType==2 ){",
          "",
          "[Added Lines]",
          "2415:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
      "candidate_info": {
        "commit_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a left-shift of a negative value (undefined behaviour) when dealing with a corrupt database in fts3.\n\nFossilOrigin-Name: b851d12474035328df8354c7da8d81bc78833c8c704153f9f573c19b47a8487e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: }",
          "340: #define GETVARINT_STEP(v, ptr, shift, mask1, mask2, var, ret) \\",
          "342:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "343: #define GETVARINT_INIT(v, ptr, shift, mask1, mask2, var, ret) \\",
          "344:   v = (*ptr++);                                               \\",
          "",
          "[Removed Lines]",
          "341:   v = (v & mask1) | ( (*ptr++) << shift );                    \\",
          "",
          "[Added Lines]",
          "341:   v = (v & mask1) | ( (*(ptr++)) << shift );  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378: int sqlite3Fts3GetVarint32(const char *p, int *pi){",
          "379:   u32 a;",
          "381: #ifndef fts3GetVarint32",
          "383: #else",
          "385:   assert( a & 0x80 );",
          "386: #endif",
          "391:   a = (a & 0x0FFFFFFF );",
          "393:   assert( 0==(a & 0x80000000) );",
          "394:   assert( *pi>=0 );",
          "395:   return 5;",
          "",
          "[Removed Lines]",
          "382:   GETVARINT_INIT(a, p, 0,  0x00,     0x80, *pi, 1);",
          "384:   a = (*p++);",
          "388:   GETVARINT_STEP(a, p, 7,  0x7F,     0x4000, *pi, 2);",
          "389:   GETVARINT_STEP(a, p, 14, 0x3FFF,   0x200000, *pi, 3);",
          "390:   GETVARINT_STEP(a, p, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "[Added Lines]",
          "379:   const unsigned char *ptr = (const unsigned char*)p;",
          "383:   GETVARINT_INIT(a, ptr, 0,  0x00,     0x80, *pi, 1);",
          "385:   a = (*ptr++);",
          "389:   GETVARINT_STEP(a, ptr, 7,  0x7F,     0x4000, *pi, 2);",
          "390:   GETVARINT_STEP(a, ptr, 14, 0x3FFF,   0x200000, *pi, 3);",
          "391:   GETVARINT_STEP(a, ptr, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cad5da1bf5f65ad87d97b72e9a84081fde455ba4085e79943fdf6c0144b1ef83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
      "candidate_info": {
        "commit_hash": "e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/sqliteInt.h",
          "test/altertab3.test"
        ],
        "message": "Fix a problem in ALTER TABLE that could occur if an index, view or trigger in the schema features an expression of the form ((SELECT ...) IN ()) where the SELECT statement uses a CTE.\n\nFossilOrigin-Name: 7e5ad8e0ab7ee91a5ccb19a9654d6a036233f74d2fdc45f7315feb3d9d035fd4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d43e0efb9642037dd751cfed13438e71cfceb50e14a0ec603880c6c3be2e93b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "697:   RenameToken *pNew;",
          "698:   assert( pPtr || pParse->db->mallocFailed );",
          "699:   renameTokenCheckAll(pParse, pPtr);",
          "706:   }",
          "708:   return pPtr;",
          "",
          "[Removed Lines]",
          "700:   pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "701:   if( pNew ){",
          "702:     pNew->p = pPtr;",
          "703:     pNew->t = *pToken;",
          "704:     pNew->pNext = pParse->pRename;",
          "705:     pParse->pRename = pNew;",
          "",
          "[Added Lines]",
          "700:   if( pParse->eParseMode!=PARSE_MODE_UNMAP ){",
          "701:     pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "702:     if( pNew ){",
          "703:       pNew->p = pPtr;",
          "704:       pNew->t = *pToken;",
          "705:       pNew->pNext = pParse->pRename;",
          "706:       pParse->pRename = pNew;",
          "707:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783: void sqlite3RenameExprUnmap(Parse *pParse, Expr *pExpr){",
          "784:   Walker sWalker;",
          "785:   memset(&sWalker, 0, sizeof(Walker));",
          "786:   sWalker.pParse = pParse;",
          "787:   sWalker.xExprCallback = renameUnmapExprCb;",
          "788:   sWalker.xSelectCallback = renameUnmapSelectCb;",
          "789:   sqlite3WalkExpr(&sWalker, pExpr);",
          "790: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:   u8 eMode = pParse->eParseMode;",
          "792:   pParse->eParseMode = PARSE_MODE_UNMAP;",
          "794:   pParse->eParseMode = eMode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "992:   memset(p, 0, sizeof(Parse));",
          "994:   p->db = db;",
          "995:   p->nQueryLoop = 1;",
          "996:   rc = sqlite3RunParser(p, zSql, &zErr);",
          "",
          "[Removed Lines]",
          "993:   p->eParseMode = (bTable ? PARSE_MODE_RENAME_TABLE : PARSE_MODE_RENAME_COLUMN);",
          "",
          "[Added Lines]",
          "998:   p->eParseMode = PARSE_MODE_RENAME;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3236: #define PARSE_MODE_NORMAL        0",
          "3237: #define PARSE_MODE_DECLARE_VTAB  1",
          "",
          "[Removed Lines]",
          "3238: #define PARSE_MODE_RENAME_COLUMN 2",
          "3239: #define PARSE_MODE_RENAME_TABLE  3",
          "",
          "[Added Lines]",
          "3238: #define PARSE_MODE_RENAME        2",
          "3239: #define PARSE_MODE_UNMAP         3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3258: #if defined(SQLITE_OMIT_ALTERTABLE)",
          "3259:   #define IN_RENAME_OBJECT 0",
          "3260: #else",
          "3262: #endif",
          "3264: #if defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_OMIT_ALTERTABLE)",
          "",
          "[Removed Lines]",
          "3261:   #define IN_RENAME_OBJECT (pParse->eParseMode>=PARSE_MODE_RENAME_COLUMN)",
          "",
          "[Added Lines]",
          "3261:   #define IN_RENAME_OBJECT (pParse->eParseMode>=PARSE_MODE_RENAME)",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:   ALTER TABLE s RENAME a TO a2;",
          "476: } {1 {error in index k: no tables specified}}",
          "478: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478: #------------------------------------------------------------------------",
          "479: #",
          "480: reset_db",
          "481: do_execsql_test 21.1 {",
          "482:   CREATE TABLE s(col);",
          "483:   CREATE VIEW v AS SELECT (",
          "484:     WITH x(a) AS(SELECT * FROM s) VALUES(RIGHT)",
          "485:   ) IN() ;",
          "486:   CREATE TABLE a(a);",
          "487:   ALTER TABLE a RENAME a TO b;",
          "488: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1dd3db537e98720fc840422f066e6a121983565",
      "candidate_info": {
        "commit_hash": "b1dd3db537e98720fc840422f066e6a121983565",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1dd3db537e98720fc840422f066e6a121983565",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/cg_anno.tcl"
        ],
        "message": "Tweak the tool/cg_anno.tcl script so that it can run on systems without /usr/bin/tclsh.\n\nFossilOrigin-Name: a026189aa46114d2de4f1da5882aeef9cf446a5aa6ea068d51c27df0d7302ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/cg_anno.tcl||tool/cg_anno.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbb7e60272cda518fa1bd8d3e3cd02e031b657fef92a9d4d7ed8c2bfb97be7c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/cg_anno.tcl||tool/cg_anno.tcl": [
          "File: tool/cg_anno.tcl -> tool/cg_anno.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # A wrapper around cg_annotate that sets appropriate command-line options",
          "4: # and rearranges the output so that annotated files occur in a consistent",
          "",
          "[Removed Lines]",
          "1: #!/usr/bin/tclsh",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "2: # \\",
          "3: exec tclsh \"$0\" ${1+\"$@\"}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb8ac325d769248e45eaa056adf4da9960bdd9c3",
      "candidate_info": {
        "commit_hash": "fb8ac325d769248e45eaa056adf4da9960bdd9c3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb8ac325d769248e45eaa056adf4da9960bdd9c3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/altertab2.test"
        ],
        "message": "Avoid a dangling pointer comparison when renaming a table that has a trigger that itself contains a window function with an (illegal) column reference in a FOLLOWING expression.\n\nFossilOrigin-Name: d45bee36f2c1091a2d32c16ca8921bf4e7c9e40c46d0a36fbcb179ecfafcfbf0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65cebb06a0afcbcb4157c3d518a62ed188b1e90d9e9b69d88fece484bcb6e380",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882: static Expr *sqlite3WindowOffsetExpr(Parse *pParse, Expr *pExpr){",
          "883:   if( 0==sqlite3ExprIsConstant(pExpr) ){",
          "884:     sqlite3ExprDelete(pParse->db, pExpr);",
          "885:     pExpr = sqlite3ExprAlloc(pParse->db, TK_NULL, 0, 0);",
          "886:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884:     if( IN_RENAME_OBJECT ) sqlite3RenameExprUnmap(pParse, pExpr);",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   END}",
          "179: }",
          "181: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #-------------------------------------------------------------------------",
          "182: do_execsql_test 5.0 {",
          "183:   CREATE TABLE t2(a);",
          "184:   CREATE TRIGGER r2 AFTER INSERT ON t2 WHEN new.a NOT NULL BEGIN",
          "185:     SELECT a, rank() OVER w1 FROM t2",
          "186:       WINDOW w1 AS (",
          "187:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "188:       ),",
          "189:       w2 AS (",
          "190:         PARTITION BY b",
          "191:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "192:       );",
          "193:   END;",
          "194: } {}",
          "196: do_catchsql_test 5.0.1 {",
          "197:   INSERT INTO t2 VALUES(1);",
          "198: } {1 {no such column: b}}",
          "200: do_execsql_test 5.1 {",
          "201:   ALTER TABLE t2 RENAME TO t2x;",
          "202:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "203: } {",
          "204:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.a NOT NULL BEGIN",
          "205:     SELECT a, rank() OVER w1 FROM \"t2x\"",
          "206:       WINDOW w1 AS (",
          "207:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "208:       ),",
          "209:       w2 AS (",
          "210:         PARTITION BY b",
          "211:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "212:       );",
          "213:   END}",
          "214: }",
          "216: do_execsql_test 5.2 {",
          "217:   ALTER TABLE t2x RENAME a TO aaaa;",
          "218:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "219: } {",
          "220:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.aaaa NOT NULL BEGIN",
          "221:     SELECT aaaa, rank() OVER w1 FROM \"t2x\"",
          "222:       WINDOW w1 AS (",
          "223:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "224:       ),",
          "225:       w2 AS (",
          "226:         PARTITION BY b",
          "227:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "228:       );",
          "229:   END}",
          "230: }",
          "232: do_catchsql_test 5.3 {",
          "233:   INSERT INTO t2x VALUES(1);",
          "234: } {1 {no such column: b}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}