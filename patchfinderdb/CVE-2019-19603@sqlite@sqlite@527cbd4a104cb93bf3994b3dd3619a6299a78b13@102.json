{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dee9be9b3b3b2ff760b6b9df20034fc1052e4c79",
      "candidate_info": {
        "commit_hash": "dee9be9b3b3b2ff760b6b9df20034fc1052e4c79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dee9be9b3b3b2ff760b6b9df20034fc1052e4c79",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/tester.tcl"
        ],
        "message": "Update the tester.tcl --malloctrace option so that it uses eu-addr2line instead of addr2line.\n\nFossilOrigin-Name: 79c073878d56fc638b751b0e61295df182f7ee6f8ebd7319c1eeac1608abbac8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d840e9bb023a1e84a7739d764a0f6cf608fc3183ff8c366fcdb486ebd932f0c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2054:   set tbl2 \"CREATE TABLE ${database}.frame(frame INTEGER PRIMARY KEY, line);\\n\"",
          "2055:   set tbl3 \"CREATE TABLE ${database}.file(name PRIMARY KEY, content);\\n\"",
          "2057:   foreach f [array names frames] {",
          "2058:     set addr [format %x $f]",
          "2060:     set line [eval exec $cmd]",
          "2061:     append sql \"INSERT INTO ${database}.frame VALUES($f, '$line');\\n\"",
          "",
          "[Removed Lines]",
          "2059:     set cmd \"addr2line -e [info nameofexec] $addr\"",
          "",
          "[Added Lines]",
          "2057:   set pid [pid]",
          "2061:     set cmd \"eu-addr2line --pid=$pid $addr\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f939e86df7a40fb212f61b1b7ca6db43427f0b5",
      "candidate_info": {
        "commit_hash": "4f939e86df7a40fb212f61b1b7ca6db43427f0b5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4f939e86df7a40fb212f61b1b7ca6db43427f0b5",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.26.0\n\nFossilOrigin-Name: bf8c1b2b7a5960c282e543b9c293686dccff272512d08865f4600fb58238b4f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23684cb841ac2cb0d69e5470253bd96feb733762a7553b952a08470834fe85fa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "108e6b2c875cd723626a5960cce4d492d6c59813",
      "candidate_info": {
        "commit_hash": "108e6b2c875cd723626a5960cce4d492d6c59813",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/108e6b2c875cd723626a5960cce4d492d6c59813",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/permutations.test",
          "test/window4.test",
          "test/windowfault.test"
        ],
        "message": "Always evaluate window functions using the alternative path usually only used by EXCLUDE frames if the SQLITE_QueryFlattener test flag is set.\n\nFossilOrigin-Name: 2879a691aca9304aea5acb46bab8e82bb2e08eb54201f3679d60bfc0e8383845",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/permutations.test||test/permutations.test",
          "test/window4.test||test/window4.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 723c84be3ec5ae941b7abd2442cdb76ca3bd76a5ce2d830b0e648c6e1424885a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6540:   assert( (pMem->flags & ~(MEM_Null|MEM_Agg))==0 );",
          "6541: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6542:   if( pOp->p3 ){",
          "6543:     rc = sqlite3VdbeMemAggValue(pMem, &aMem[pOp->p3], pOp->p4.pFunc);",
          "6544:     pMem = &aMem[pOp->p3];",
          "6545:   }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6543:     memAboutToChange(p, &aMem[pOp->p3]);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   struct NthValueCtx *p;",
          "216:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "217:   if( p ){",
          "219:     p->nStep++;",
          "220:     if( iVal==p->nStep ){",
          "221:       p->pValue = sqlite3_value_dup(apArg[0]);",
          "222:     }",
          "223:   }",
          "224:   UNUSED_PARAMETER(nArg);",
          "225:   UNUSED_PARAMETER(apArg);",
          "226: }",
          "227: static void nth_valueValueFunc(sqlite3_context *pCtx){",
          "228:   struct NthValueCtx *p;",
          "",
          "[Removed Lines]",
          "218:     i64 iVal = sqlite3_value_int64(apArg[1]);",
          "",
          "[Added Lines]",
          "218:     i64 iVal;",
          "219:     switch( sqlite3_value_numeric_type(apArg[1]) ){",
          "220:       case SQLITE_INTEGER:",
          "221:         iVal = sqlite3_value_int64(apArg[1]);",
          "222:         break;",
          "223:       case SQLITE_FLOAT: {",
          "224:         double fVal = sqlite3_value_double(apArg[1]);",
          "225:         if( ((i64)fVal)!=fVal ) goto error_out;",
          "226:         iVal = (i64)fVal;",
          "227:         break;",
          "228:       }",
          "229:       default:",
          "230:         goto error_out;",
          "231:     }",
          "232:     if( iVal<=0 ) goto error_out;",
          "237:       if( !p->pValue ){",
          "238:         sqlite3_result_error_nomem(pCtx);",
          "239:       }",
          "244:   return;",
          "246:  error_out:",
          "247:   sqlite3_result_error(",
          "248:       pCtx, \"second argument to nth_value must be a positive integer\", -1",
          "249:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "252:   if( p && p->pValue==0 ){",
          "253:     p->pValue = sqlite3_value_dup(apArg[0]);",
          "254:   }",
          "255:   UNUSED_PARAMETER(nArg);",
          "256:   UNUSED_PARAMETER(apArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     if( !p->pValue ){",
          "279:       sqlite3_result_error_nomem(pCtx);",
          "280:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1072:   pWin->eType = eType;",
          "1073:   pWin->eStart = eStart;",
          "1074:   pWin->eEnd = eEnd;",
          "1075:   pWin->eExclude = eExclude;",
          "1076:   pWin->bImplicitFrame = bImplicitFrame;",
          "1077:   pWin->pEnd = sqlite3WindowOffsetExpr(pParse, pEnd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1102:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "1103:     eExclude = TK_NO;",
          "1104:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1536:   addrNext = sqlite3VdbeCurrentAddr(v);",
          "1537:   sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1538:   sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lblBrk, regRowid);",
          "1539:   if( pMWin->eExclude==TK_CURRENT ){",
          "1540:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1541:   }else if( pMWin->eExclude!=TK_NO ){",
          "1542:     int addr;",
          "1545:     if( pMWin->eExclude==TK_TIES ){",
          "1546:       addrEq = sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1547:     }",
          "",
          "[Removed Lines]",
          "1543:     int addrEq = 0;;",
          "1544:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pMWin->pOrderBy,0,0);",
          "",
          "[Added Lines]",
          "1574:     int addrEq = 0;",
          "1575:     KeyInfo *pKeyInfo;",
          "1577:     pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pMWin->pOrderBy, 0, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1668:     FuncDef *pFunc = pWin->pFunc;",
          "1669:     sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1670:     nArg = MAX(nArg, windowArgCount(pWin));",
          "1672:       if( pFunc->zName==nth_valueName || pFunc->zName==first_valueName ){",
          "1673:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1674:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "",
          "[Removed Lines]",
          "1671:     if( pWin->eExclude==0 ){",
          "",
          "[Added Lines]",
          "1704:     if( pMWin->regStartRowid==0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1764:   int reg2 = sqlite3GetTempReg(pParse);",
          "1765:   int arith = OP_Add;",
          "1766:   int addrGe;",
          "1769:   int regString = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1767:   int addrNotNull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2337:   assert( pMWin->eEnd==TK_FOLLOWING || pMWin->eEnd==TK_CURRENT",
          "2338:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "2339:   );",
          "2341:   lblWhereEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2372:   assert( pMWin->eExclude==0 || pMWin->eExclude==TK_CURRENT",
          "2373:        || pMWin->eExclude==TK_GROUP || pMWin->eExclude==TK_TIES",
          "2374:        || pMWin->eExclude==TK_NO",
          "2375:   );",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032: test_suite \"no_optimization\" -description {",
          "1033:   Run test scripts with optimizations disabled using the",
          "1034:   sqlite3_test_control(SQLITE_TESTCTRL_OPTIMIZATIONS) interface.",
          "1042:   optimization_control $::dbhandle all 0",
          "1043: }",
          "",
          "[Removed Lines]",
          "1035: } -files {",
          "1036:   where.test where2.test where3.test where4.test where5.test",
          "1037:   where6.test where7.test where8.test where9.test",
          "1038:   whereA.test whereB.test wherelimit.test",
          "1039:   select1.test select2.test select3.test select4.test select5.test",
          "1040:   select7.test select8.test selectA.test selectC.test",
          "1041: } -dbconfig {",
          "",
          "[Added Lines]",
          "1035: } -files [",
          "1036:   test_set \\",
          "1037:     [glob -nocomplain $::testdir/window*.test]                       \\",
          "1038:     where.test where2.test where3.test where4.test where5.test       \\",
          "1039:     where6.test where7.test where8.test where9.test                  \\",
          "1040:     whereA.test whereB.test wherelimit.test                          \\",
          "1041:     select1.test select2.test select3.test select4.test select5.test \\",
          "1042:     select7.test select8.test selectA.test selectC.test",
          "1043: ] -dbconfig {",
          "",
          "---------------"
        ],
        "test/window4.test||test/window4.test": [
          "File: test/window4.test -> test/window4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   SELECT group_concat(b, '.') OVER (",
          "151:     ORDER BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "152:   ) FROM t4",
          "155: do_execsql_test 3.0 {",
          "156:   DROP TABLE IF EXISTS t5;",
          "",
          "[Removed Lines]",
          "153: } {A.B.C.D.E.F.G.H.I.J   B.C.D.E.F.G.H.I.J   C.D.E.F.G.H.I.J   D.E.F.G.H.I.J   E.F.G.H.I.J   F.G.H.I.J   G.H.I.J   H.I.J   I.J   J}",
          "",
          "[Added Lines]",
          "153: } {A.B.C.D.E.F.G.H.I.J   B.C.D.E.F.G.H.I.J   C.D.E.F.G.H.I.J   D.E.F.G.H.I.J",
          "154:   E.F.G.H.I.J   F.G.H.I.J   G.H.I.J   H.I.J   I.J   J}",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: }",
          "29: faultsim_save_and_close",
          "32:   faultsim_restore_and_reopen",
          "33: } -body {",
          "34:   execsql {",
          "",
          "[Removed Lines]",
          "31: do_faultsim_test 1 -start 1 -faults oom-* -prep {",
          "",
          "[Added Lines]",
          "31: do_faultsim_test 1 -start 1 -faults oom-t* -prep {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
      "candidate_info": {
        "commit_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd9cb85a414998d27bc7904842c69c76da240794",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Add the SQLITE_SUBTYPE flag, which may be passed to sqlite3_create_window_function() to indicate that the window function uses sqlite3_value_subtype() to check the sub-type of its arguments.\n\nFossilOrigin-Name: ba2ebc3a348decc5cedaf14960e30e7ae26a26824cfa198727f2499162142ef3",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658a42d3633b31fda260f2c5a1a2c7dd8eb4eb0114d322369017c56faf5ecd42",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1721:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1723:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1725: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "[Added Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|SQLITE_SUBTYPE);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4991: #define SQLITE_DETERMINISTIC    0x000000800",
          "4992: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5001: #define SQLITE_SUBTYPE          0x000100000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   int regStartRowid;",
          "3613:   int regEndRowid;",
          "3614: };",
          "3616: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "970:       if( pWin->pFilter ){",
          "971:         Expr *pFilter = sqlite3ExprDup(db, pWin->pFilter, 0);",
          "972:         pSublist = sqlite3ExprListAppend(pParse, pSublist, pFilter);",
          "",
          "[Removed Lines]",
          "968:       pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "969:       pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList, 0);",
          "",
          "[Added Lines]",
          "968:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "970:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "971:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "972:         pWin->bExprArgs = 1;",
          "973:       }else{",
          "974:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "975:         pSublist = exprListAppendList(pParse, pSublist, pArgs, 0);",
          "976:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1432:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1433:     FuncDef *pFunc = pWin->pFunc;",
          "1434:     int regArg;",
          "1436:     int i;",
          "1438:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "",
          "[Removed Lines]",
          "1435:     int nArg = windowArgCount(pWin);",
          "",
          "[Added Lines]",
          "1442:     int nArg = pWin->bExprArgs ? 0 : windowArgCount(pWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1482:         VdbeCoverage(v);",
          "1483:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1484:       }",
          "1485:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "1486:         CollSeq *pColl;",
          "1487:         assert( nArg>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         nArg = pWin->pOwner->x.pList->nExpr;",
          "1494:         regArg = sqlite3GetTempRange(pParse, nArg);",
          "1495:         sqlite3ExprCodeExprList(pParse, pWin->pOwner->x.pList, regArg, 0, 0);",
          "1496:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1492:                         bInverse, regArg, pWin->regAccum);",
          "1493:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "1494:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1495:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1496:     }",
          "1497:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507:       if( pWin->bExprArgs ){",
          "1508:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1509:       }",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowB",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   INSERT INTO t1 VALUES(NULL, 1);",
          "26:   INSERT INTO t1 VALUES(NULL, 2);",
          "27:   INSERT INTO t1 VALUES(NULL, 3);",
          "28: } {}",
          "30: foreach {tn win} {",
          "31:   1 { ORDER BY a RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "32:   2 { ORDER BY a NULLS LAST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "33:   3 { ORDER BY a DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "34:   4 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "36:   5 { ORDER BY a      NULLS LAST  RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "37:   6 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "39:   7 { ORDER BY a      NULLS LAST  RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "40:   8 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "41: } {",
          "42:   do_execsql_test 1.$tn \"",
          "43:     SELECT sum(b) OVER win FROM t1",
          "44:     WINDOW win AS ( $win )",
          "45:   \" {6 6 6}",
          "46: }",
          "48: do_execsql_test 1.2 {",
          "49:   SELECT sum(b) OVER win FROM t1",
          "50:   WINDOW win AS (",
          "51:     ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "52:   )",
          "53: } {6 6 6}",
          "55: #-------------------------------------------------------------------------",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   CREATE TABLE t1(a, b);",
          "59:   INSERT INTO t1 VALUES(1, NULL);",
          "60:   INSERT INTO t1 VALUES(2, 45);",
          "61:   INSERT INTO t1 VALUES(3, 66.2);",
          "62:   INSERT INTO t1 VALUES(4, 'hello world');",
          "63:   INSERT INTO t1 VALUES(5, 'hello world');",
          "64:   INSERT INTO t1 VALUES(6, X'1234');",
          "65:   INSERT INTO t1 VALUES(7, X'1234');",
          "66:   INSERT INTO t1 VALUES(8, NULL);",
          "67: }",
          "69: foreach {tn win} {",
          "70:   1 \"ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "71:   2 \"ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "72:   3 \"ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "73:   4 \"ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "74: } {",
          "75:   do_execsql_test 2.1.$tn \"",
          "76:     SELECT a, sum(a) OVER win FROM t1",
          "77:     WINDOW win AS ( $win )",
          "78:     ORDER BY 1",
          "79:   \" {1 9   2 {}  3 {}  4 9  5 9  6 13  7 13  8 9}",
          "80: }",
          "82: #-------------------------------------------------------------------------",
          "83: reset_db",
          "84: do_execsql_test 3.0 {",
          "85:   CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "86:   INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "90: do_execsql_test 3.1 {",
          "91:   SELECT json_group_array(json(j)) FROM testjson;",
          "92: } {",
          "93:   {[{\"a\":1},{\"b\":2}]}",
          "94: }",
          "96: breakpoint",
          "97: do_execsql_test 3.2 {",
          "98:   SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99: } {",
          "100:   {[{\"a\":1}]}",
          "101:   {[{\"a\":1},{\"b\":2}]}",
          "102: }",
          "105: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26b7ec8b244cf937cdca47b45f57121f27367a54",
      "candidate_info": {
        "commit_hash": "26b7ec8b244cf937cdca47b45f57121f27367a54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26b7ec8b244cf937cdca47b45f57121f27367a54",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improve the strict enforcement of cell sizes in balancing from check-in [12713f320b2c1def] so that it also works with table-btrees in addition to index-btrees.\n\nFossilOrigin-Name: ef27e7a08728aa7447ae19812803ac5c4a9d80c97541014bd292485792005a3e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55f06aa3f890dc1dc5c2ed0e6777e46d609a6f9d223d1d4b5813097ce4f4e797",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7660:   usableSpace = pBt->usableSize - 12 + leafCorrection;",
          "7662:     MemPage *p = apOld[i];",
          "7667:     szNew[i] = usableSpace - p->nFree;",
          "7668:     for(j=0; j<p->nOverflow; j++){",
          "7669:       szNew[i] += 2 + p->xCellSize(p, p->apOvfl[j]);",
          "",
          "[Removed Lines]",
          "7661:   for(i=0; i<nOld; i++){",
          "7663:     b.apEnd[i*2] = p->aDataEnd;",
          "7664:     b.apEnd[i*2+1] = pParent->aDataEnd;",
          "7665:     b.ixNx[i*2] = cntOld[i];",
          "7666:     b.ixNx[i*2+1] = cntOld[i]+1;",
          "",
          "[Added Lines]",
          "7672:   for(i=k=0; i<nOld; i++, k++){",
          "7674:     b.apEnd[k] = p->aDataEnd;",
          "7675:     b.ixNx[k] = cntOld[i];",
          "7676:     if( !leafData ){",
          "7677:       k++;",
          "7678:       b.apEnd[k] = pParent->aDataEnd;",
          "7679:       b.ixNx[k] = cntOld[i]+1;",
          "7680:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}