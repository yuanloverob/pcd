{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
      "candidate_info": {
        "commit_hash": "86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Do not place arbitrary restrictions on the length of the failure message for a uniqueness constraint.\n\nFossilOrigin-Name: 037da798fa5510ba7c776831ebcd683a85dca28e25bc657ff17bb2b08c3d406e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c77fbbe5d54248821161d708d0631fab65659bef31f95a61af681d4639f5918",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4398:   StrAccum errMsg;",
          "4399:   Table *pTab = pIdx->pTable;",
          "4402:   if( pIdx->aColExpr ){",
          "4403:     sqlite3_str_appendf(&errMsg, \"index '%q'\", pIdx->zName);",
          "4404:   }else{",
          "",
          "[Removed Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0, 200);",
          "",
          "[Added Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0,",
          "4402:                       pParse->db->aLimit[SQLITE_LIMIT_LENGTH]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bf022d57cd13c02976ce64d546cc2f12d0a0496",
      "candidate_info": {
        "commit_hash": "9bf022d57cd13c02976ce64d546cc2f12d0a0496",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9bf022d57cd13c02976ce64d546cc2f12d0a0496",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming a table when the schema contains an invocation of a window function that is not currently registered.\n\nFossilOrigin-Name: ff290feb97f689cf6ce4162d6aa36f9f9dcf1bff3096847d53a85f39f728d2de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 348e7f193a963390a0595183d603541f85c5d1a911c98ed2e06599691ffe98f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "891: #endif",
          "892:         }",
          "893:       }",
          "894:       sqlite3WalkExprList(pWalker, pList);",
          "895:       if( is_agg ){",
          "896: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "895:       else if( pWin ){",
          "896:         is_agg = 1;",
          "897:       }",
          "898: #endif",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:   ALTER TABLE t1 RENAME TO t1x;",
          "319: }",
          "321: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321: #-------------------------------------------------------------------------",
          "322: reset_db",
          "323: do_execsql_test 13.1 {",
          "324:   CREATE TABLE t1(a);",
          "325:   CREATE TRIGGER r1 INSERT ON t1 BEGIN",
          "326:     SELECT a(*) OVER (ORDER BY (SELECT 1)) FROM t1;",
          "327:   END;",
          "328: }",
          "330: do_execsql_test 13.2 {",
          "331:   ALTER TABLE t1 RENAME TO t1x;",
          "332: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee6c5e5ae7193241a55dd83c8f434a5d7c5abf11",
      "candidate_info": {
        "commit_hash": "ee6c5e5ae7193241a55dd83c8f434a5d7c5abf11",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee6c5e5ae7193241a55dd83c8f434a5d7c5abf11",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Move some things in parse.y so that TK_COLUMN and TK_AGG_COLUMN are assigned the same values as they are on trunk for a very small speedup.\n\nFossilOrigin-Name: d26fdfa3bc5f8d9c4a6000462080b0dd508e5cae9a83e0d126be48195224da8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bfe793780fa6fc7a1e7d0ee60606dda272985de9573887dca118e9510fc609f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y"
        ]
      }
    },
    {
      "candidate_hash": "677525756b729e1afc7de103bc586226db19b841",
      "candidate_info": {
        "commit_hash": "677525756b729e1afc7de103bc586226db19b841",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/677525756b729e1afc7de103bc586226db19b841",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c"
        ],
        "message": "Simplification of the recent VACUUM changes that make the code more like what it was before the change.  Also, make the VACUUM command a no-inline procedure to work around a performance regression.\n\nFossilOrigin-Name: 9cac5ac145d62117c918539baaa8a3c124230e031842e35fa1ba59f658c99518",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d293fb43f2eb64026ac1e0422f54d4839b101898cc9913fc7746760c08ed41f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "142: int sqlite3RunVacuum(",
          "",
          "[Added Lines]",
          "142: SQLITE_NOINLINE int sqlite3RunVacuum(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     return SQLITE_ERROR;",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "174:   if( pOut ){",
          "175:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "176:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "",
          "[Removed Lines]",
          "173:   saved_mDbFlags = db->mDbFlags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:     zOut = (const char*)sqlite3_value_text(pOut);",
          "180:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "181:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "183:   }else{",
          "184:     zOut = \"\";",
          "186:   }",
          "191:   saved_flags = db->flags;",
          "192:   saved_nChange = db->nChange;",
          "193:   saved_nTotalChange = db->nTotalChange;",
          "194:   saved_mTrace = db->mTrace;",
          "195:   db->flags |= SQLITE_WriteSchema | SQLITE_IgnoreChecks;",
          "196:   db->flags &= ~(u64)(SQLITE_ForeignKeys | SQLITE_ReverseOrder",
          "197:                    | SQLITE_Defensive | SQLITE_CountRows);",
          "198:   db->mTrace = 0;",
          "",
          "[Removed Lines]",
          "182:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum | DBFLAG_VacuumInto;",
          "185:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "189:   saved_mDbFlags = db->mDbFlags;",
          "194:   db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "232:       goto end_of_vacuum;",
          "233:     }",
          "234:   }",
          "235:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     db->mDbFlags |= DBFLAG_VacuumInto;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "308:       zDbMain",
          "309:   );",
          "310:   assert( (db->mDbFlags & DBFLAG_Vacuum)!=0 );",
          "312:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "311:   db->mDbFlags &= ~(DBFLAG_Vacuum|DBFLAG_VacuumInto);",
          "",
          "[Added Lines]",
          "311:   db->mDbFlags &= ~DBFLAG_Vacuum;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5776ee5cf5773f4e4580db3860fe7d9194c75151",
      "candidate_info": {
        "commit_hash": "5776ee5cf5773f4e4580db3860fe7d9194c75151",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5776ee5cf5773f4e4580db3860fe7d9194c75151",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/global.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Omit the sqlite3IntTokens array constant for a code simplification.\n\nFossilOrigin-Name: f907395ef5a2dc1d084b6a286af00de4c742cf12d4f347c21e1b757786508f57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/global.c||src/global.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 82e5dcf5c1d500ed82f398b38fdae0f30033804e897fbab3c10f1e15e2abedef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "906:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "907:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "909:   }else{",
          "910:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "911:   }",
          "",
          "[Removed Lines]",
          "908:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Added Lines]",
          "908:     return sqlite3Expr(db, TK_INTEGER, \"0\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2965:     sqlite3 *db = pParse->db;",
          "2967:     if( pLimit ){",
          "2968:       pLimit->affExpr = SQLITE_AFF_NUMERIC;",
          "2969:       pLimit = sqlite3PExpr(pParse, TK_NE,",
          "",
          "[Removed Lines]",
          "2966:     pLimit = sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Added Lines]",
          "2966:     pLimit = sqlite3Expr(db, TK_INTEGER, \"0\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2973:     pSel->pLimit->pLeft = pLimit;",
          "2974:   }else{",
          "2977:     pSel->pLimit = sqlite3PExpr(pParse, TK_LIMIT, pLimit, 0);",
          "2978:   }",
          "2979:   pSel->iLimit = 0;",
          "",
          "[Removed Lines]",
          "2976:     pLimit = sqlite3ExprAlloc(pParse->db, TK_INTEGER, &sqlite3IntTokens[1], 0);",
          "",
          "[Added Lines]",
          "2976:     pLimit = sqlite3Expr(pParse->db, TK_INTEGER, \"1\");",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: FuncDefHash sqlite3BuiltinFunctions;",
          "282: #ifdef VDBE_PROFILE",
          "",
          "[Removed Lines]",
          "277: const Token sqlite3IntTokens[] = {",
          "278:    { \"0\", 1 },",
          "279:    { \"1\", 1 }",
          "280: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1185:     }else{",
          "1186:       A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "1187:       if( A ){",
          "",
          "[Removed Lines]",
          "1184:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "[Added Lines]",
          "1184:       A = sqlite3Expr(pParse->db, TK_INTEGER, N ? \"1\" : \"0\");",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5465:     Select *pS = pWalker->u.pSelect;",
          "5466:     if( sqlite3ExprIsConstantOrGroupBy(pWalker->pParse, pExpr, pS->pGroupBy) ){",
          "5467:       sqlite3 *db = pWalker->pParse->db;",
          "5469:       if( pNew ){",
          "5470:         Expr *pWhere = pS->pWhere;",
          "5471:         SWAP(Expr, *pNew, *pExpr);",
          "",
          "[Removed Lines]",
          "5468:       Expr *pNew = sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[1], 0);",
          "",
          "[Added Lines]",
          "5468:       Expr *pNew = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4318: extern const char sqlite3StrBINARY[];",
          "4319: extern const unsigned char sqlite3UpperToLower[];",
          "4320: extern const unsigned char sqlite3CtypeMap[];",
          "4322: extern SQLITE_WSD struct Sqlite3Config sqlite3Config;",
          "4323: extern FuncDefHash sqlite3BuiltinFunctions;",
          "4324: #ifndef SQLITE_OMIT_WSD",
          "",
          "[Removed Lines]",
          "4321: extern const Token sqlite3IntTokens[];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:     if( pSublist==0 ){",
          "993:       pSublist = sqlite3ExprListAppend(pParse, 0,",
          "995:       );",
          "996:     }",
          "",
          "[Removed Lines]",
          "994:           sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0)",
          "",
          "[Added Lines]",
          "994:         sqlite3Expr(db, TK_INTEGER, \"0\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}