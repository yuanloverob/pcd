{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "60747ea22f8b25b2a7e54e7fe4ad47dfe8f93383",
      "candidate_info": {
        "commit_hash": "60747ea22f8b25b2a7e54e7fe4ad47dfe8f93383",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/60747ea22f8b25b2a7e54e7fe4ad47dfe8f93383",
        "files": [
          "ssl/record/ssl3_record.c"
        ],
        "message": "Remove an OPENSSL_assert() and replace with a soft assert and check\n\nFollowing on from CVE-2017-3733, this removes the OPENSSL_assert() check\nthat failed and replaces it with a soft assert, and an explicit check of\nvalue with an error return if it fails.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"../ssl_locl.h\"",
          "11: #include \"internal/constant_time_locl.h\"",
          "12: #include <openssl/rand.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:     unsigned char md[EVP_MAX_MD_SIZE];",
          "134:     short version;",
          "135:     unsigned mac_size;",
          "136:     unsigned int num_recs = 0;",
          "137:     unsigned int max_recs;",
          "138:     unsigned int j;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     int imac_size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
          "350:         unsigned char *mac;",
          "353:         for (j = 0; j < num_recs; j++) {",
          "354:             if (rr[j].length < mac_size) {",
          "355:                 al = SSL_AD_DECODE_ERROR;",
          "",
          "[Removed Lines]",
          "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
          "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
          "",
          "[Added Lines]",
          "354:         imac_size = EVP_MD_CTX_size(s->read_hash);",
          "355:         assert(imac_size >= 0 && imac_size <= EVP_MAX_MD_SIZE);",
          "356:         if (imac_size < 0 || imac_size > EVP_MAX_MD_SIZE) {",
          "357:                 al = SSL_AD_INTERNAL_ERROR;",
          "358:                 SSLerr(SSL_F_SSL3_GET_RECORD, ERR_LIB_EVP);",
          "359:                 goto f_err;",
          "360:         }",
          "361:         mac_size = (unsigned)imac_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a72eafbeaef9df212675f4e0e169ce560b21f41",
      "candidate_info": {
        "commit_hash": "8a72eafbeaef9df212675f4e0e169ce560b21f41",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8a72eafbeaef9df212675f4e0e169ce560b21f41",
        "files": [
          "ssl/statem/statem.c"
        ],
        "message": "Stop client from sending Certificate message when not requested\n\nIn a non client-auth renegotiation where the original handshake *was*\nclient auth, then the client will send a Certificate message anyway\nresulting in a connection failure.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "ssl/statem/statem.c||ssl/statem/statem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem.c||ssl/statem/statem.c": [
          "File: ssl/statem/statem.c -> ssl/statem/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:             s->hit = 0;",
          "371:             s->s3->tmp.cert_request = 0;",
          "373:             if (SSL_IS_DTLS(s)) {",
          "374:                 st->use_timer = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:             s->s3->tmp.cert_req = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72ea4b8de29bd29dcc44b3d3a73660fe4d1bba40",
      "candidate_info": {
        "commit_hash": "72ea4b8de29bd29dcc44b3d3a73660fe4d1bba40",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/72ea4b8de29bd29dcc44b3d3a73660fe4d1bba40",
        "files": [
          "crypto/x509/x509_vfy.c"
        ],
        "message": "Restore last-resort expired untrusted intermediate issuers\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308: static X509 *find_issuer(X509_STORE_CTX *ctx, STACK_OF(X509) *sk, X509 *x)",
          "309: {",
          "310:     int i;",
          "312:     for (i = 0; i < sk_X509_num(sk); i++) {",
          "319:     }",
          "321: }",
          "",
          "[Removed Lines]",
          "313:         X509 *issuer = sk_X509_value(sk, i);",
          "315:         if (!ctx->check_issued(ctx, x, issuer))",
          "316:             continue;",
          "317:         if (x509_check_cert_time(ctx, issuer, -1))",
          "318:             return issuer;",
          "320:     return NULL;",
          "",
          "[Added Lines]",
          "311:     X509 *issuer, *rv = NULL;",
          "314:         issuer = sk_X509_value(sk, i);",
          "315:         if (ctx->check_issued(ctx, x, issuer)) {",
          "316:             rv = issuer;",
          "317:             if (x509_check_cert_time(ctx, rv, -1))",
          "318:                 break;",
          "319:         }",
          "321:     return rv;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ece9c1fc6c5d998dc2abe03f2caf278ec05d9d0",
      "candidate_info": {
        "commit_hash": "2ece9c1fc6c5d998dc2abe03f2caf278ec05d9d0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2ece9c1fc6c5d998dc2abe03f2caf278ec05d9d0",
        "files": [
          "crypto/perlasm/x86_64-xlate.pl"
        ],
        "message": "perlasm/x86_64-xlate.pl: refine sign extension in ea package.\n\n$1<<32>>32 worked fine with either 32- or 64-bit perl for a good while,\nrelying on quirk that [pure] 32-bit perl performed it as $1<<0>>0. But\nthis apparently changed in some version past minimally required 5.10,\nand operation result became 0. Yet, it went unnoticed for another while,\nbecause most perl package providers configure their packages with\n-Duse64bitint option.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 82e089308bd9a7794a45f0fa3973d7659420fbd8)",
        "before_after_code_files": [
          "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl": [
          "File: crypto/perlasm/x86_64-xlate.pl -> crypto/perlasm/x86_64-xlate.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:  $self->{index} =~ s/^[er](.?[0-9xpi])[d]?$/r\\1/;",
          "263:  $self->{base}  =~ s/^[er](.?[0-9xpi])[d]?$/r\\1/;",
          "266:  # in $self->{label}, new gas requires sign extension...",
          "267:  use integer;",
          "268:  $self->{label} =~ s/(?<![\\w\\$\\.])(0x?[0-9a-f]+)/oct($1)/egi;",
          "270:  $self->{label} =~ s/\\b([0-9]+)\\b/$1<<32>>32/eg;",
          "272:  if (!$self->{label} && $self->{index} && $self->{scale}==1 &&",
          "",
          "[Removed Lines]",
          "265:  # Solaris /usr/ccs/bin/as can't handle multiplications",
          "269:  $self->{label} =~ s/\\b([0-9]+\\s*[\\*\\/\\%]\\s*[0-9]+)\\b/eval($1)/eg;",
          "",
          "[Added Lines]",
          "265:  # Solaris /usr/ccs/bin/as can't handle multiplications",
          "271:  # Some assemblers insist on signed presentation of 32-bit",
          "272:  # offsets, but sign extension is a tricky business in perl...",
          "273:  if ((1<<31)<<1) {",
          "274:      $self->{label} =~ s/\\b([0-9]+)\\b/$1<<32>>32/eg;",
          "275:  } else {",
          "276:      $self->{label} =~ s/\\b([0-9]+)\\b/$1>>0/eg;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddc311f1d345d07d8657b4538ca32cba864e7461",
      "candidate_info": {
        "commit_hash": "ddc311f1d345d07d8657b4538ca32cba864e7461",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ddc311f1d345d07d8657b4538ca32cba864e7461",
        "files": [
          "apps/req.c"
        ],
        "message": "Change req_check_len error message\n\nit also accepts 20 bytes, but states 'less than' in the error message\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2648)\n(cherry picked from commit 0cb8c9d85e9d5690670d6f1f02e8ccc756520210)",
        "before_after_code_files": [
          "apps/req.c||apps/req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/req.c||apps/req.c": [
          "File: apps/req.c -> apps/req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1273:     }",
          "1274:     if ((n_max >= 0) && (len > n_max)) {",
          "1275:         BIO_printf(bio_err,",
          "1277:                    n_max);",
          "1278:         return (0);",
          "1279:     }",
          "",
          "[Removed Lines]",
          "1276:                    \"string is too long, it needs to be less than  %d bytes long\\n\",",
          "",
          "[Added Lines]",
          "1276:                    \"string is too long, it needs to be no more than %d bytes long\\n\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}