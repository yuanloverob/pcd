{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fde259250327c28c75e201406f1b85f6f1ef7670",
      "candidate_info": {
        "commit_hash": "fde259250327c28c75e201406f1b85f6f1ef7670",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fde259250327c28c75e201406f1b85f6f1ef7670",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "The only known path to a corruption detection branch was cut off by the previous commit implementing earlier index corruption.  So make the branch NEVER.  Maybe a fuzzer will find a new path.\n\nFossilOrigin-Name: 9a84d8eb44b12ddea921baa73ac3bffa8c8d23a852605dc1dbde37907360bd79",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f339f31f9e9a856b576f99c5230fdf6d60fdc2873e48cb5aa0a4ab1d04e3c930",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7155:   assert( nCell>=0 );",
          "7156:   if( iOld<iNew ){",
          "7157:     int nShift = pageFreeArray(pPg, iOld, iNew-iOld, pCArray);",
          "7159:     memmove(pPg->aCellIdx, &pPg->aCellIdx[nShift*2], nCell*2);",
          "7160:     nCell -= nShift;",
          "7161:   }",
          "",
          "[Removed Lines]",
          "7158:     if( nShift>nCell ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "7158:     if( NEVER(nShift>nCell) ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "995e1af9faabffcfbdf0e4702be8ef75f7fef9e9",
      "candidate_info": {
        "commit_hash": "995e1af9faabffcfbdf0e4702be8ef75f7fef9e9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/995e1af9faabffcfbdf0e4702be8ef75f7fef9e9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Ensure that the master-journal name is in a form suitable to be passed into sqlite3_uri_parameter().\n\nFossilOrigin-Name: d1ba026d882f070b351280028e2fa88a3cca59b46d4683302e24c6677e0951b9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: efdecb13091316aeac2722f58577cb0314e008e857f2816a2a222bac0a83e9e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2753:     nMainFile = sqlite3Strlen30(zMainFile);",
          "2755:     if( zMaster==0 ) return SQLITE_NOMEM_BKPT;",
          "2756:     do {",
          "2757:       u32 iRandom;",
          "2758:       if( retryCount ){",
          "",
          "[Removed Lines]",
          "2754:     zMaster = sqlite3MPrintf(db, \"%s-mjXXXXXX9XXz%c%c\", zMainFile, 0, 0);",
          "",
          "[Added Lines]",
          "2754:     zMaster = sqlite3MPrintf(db, \"%.4c%s%.16c\", 0,zMainFile,0);",
          "2756:     zMaster += 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2782:       );",
          "2783:     }",
          "2784:     if( rc!=SQLITE_OK ){",
          "2786:       return rc;",
          "2787:     }",
          "",
          "[Removed Lines]",
          "2785:       sqlite3DbFree(db, zMaster);",
          "",
          "[Added Lines]",
          "2786:       sqlite3DbFree(db, zMaster-4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2805:         if( rc!=SQLITE_OK ){",
          "2806:           sqlite3OsCloseFree(pMaster);",
          "2807:           sqlite3OsDelete(pVfs, zMaster, 0);",
          "2809:           return rc;",
          "2810:         }",
          "2811:       }",
          "",
          "[Removed Lines]",
          "2808:           sqlite3DbFree(db, zMaster);",
          "",
          "[Added Lines]",
          "2809:           sqlite3DbFree(db, zMaster-4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2819:     ){",
          "2820:       sqlite3OsCloseFree(pMaster);",
          "2821:       sqlite3OsDelete(pVfs, zMaster, 0);",
          "2823:       return rc;",
          "2824:     }",
          "",
          "[Removed Lines]",
          "2822:       sqlite3DbFree(db, zMaster);",
          "",
          "[Added Lines]",
          "2823:       sqlite3DbFree(db, zMaster-4);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2842:     sqlite3OsCloseFree(pMaster);",
          "2843:     assert( rc!=SQLITE_BUSY );",
          "2844:     if( rc!=SQLITE_OK ){",
          "2846:       return rc;",
          "2847:     }",
          "",
          "[Removed Lines]",
          "2845:       sqlite3DbFree(db, zMaster);",
          "",
          "[Added Lines]",
          "2846:       sqlite3DbFree(db, zMaster-4);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2853:     rc = sqlite3OsDelete(pVfs, zMaster, 1);",
          "2855:     zMaster = 0;",
          "2856:     if( rc ){",
          "2857:       return rc;",
          "",
          "[Removed Lines]",
          "2854:     sqlite3DbFree(db, zMaster);",
          "",
          "[Added Lines]",
          "2855:     sqlite3DbFree(db, zMaster-4);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e9297fb795584f53c31f04f6b702962a10cb5b7",
      "candidate_info": {
        "commit_hash": "8e9297fb795584f53c31f04f6b702962a10cb5b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e9297fb795584f53c31f04f6b702962a10cb5b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/shell1.test"
        ],
        "message": "Enhance the \".dump\" command in the CLI so that it accepts multiple LIKE pattern arguments and shows the union of all matching tables.\n\nFossilOrigin-Name: 45fba3d7055f90f67005ca740687f060a2311db40c8f6a161bfea0424e6ebf6d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d14a1c4f2fc17de98ad685ad1422cdfda89dfccb00afcaf32ee416b6f84f525",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2376:   rc = sqlite3_step(pSelect);",
          "2377:   nResult = sqlite3_column_count(pSelect);",
          "2378:   while( rc==SQLITE_ROW ){",
          "2383:     z = (const char*)sqlite3_column_text(pSelect, 0);",
          "2384:     utf8_printf(p->out, \"%s\", z);",
          "2385:     for(i=1; i<nResult; i++){",
          "",
          "[Removed Lines]",
          "2379:     if( zFirstRow ){",
          "2380:       utf8_printf(p->out, \"%s\", zFirstRow);",
          "2381:       zFirstRow = 0;",
          "2382:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3552:   \".databases               List names and files of attached databases\",",
          "3553:   \".dbconfig ?op? ?val?     List or change sqlite3_db_config() options\",",
          "3554:   \".dbinfo ?DB?             Show status information about the database\",",
          "3556:   \"   Options:\",",
          "3557:   \"     --preserve-rowids      Include ROWID values in the output\",",
          "3558:   \"     --newlines             Allow unescaped newline characters in output\",",
          "3559:   \"   TABLE is a LIKE pattern for the tables to dump\",",
          "3560:   \".echo on|off             Turn command echo on or off\",",
          "3561:   \".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\",",
          "3562:   \"   Other Modes:\",",
          "",
          "[Removed Lines]",
          "3555:   \".dump ?TABLE? ...        Render all database content as SQL\",",
          "",
          "[Added Lines]",
          "3550:   \".dump ?TABLE?            Render database content as SQL\",",
          "3555:   \"   Additional LIKE patterns can be given in subsequent arguments\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7280:   if( c=='d' && strncmp(azArg[0], \"dump\", n)==0 ){",
          "7282:     int i;",
          "7283:     int savedShowHeader = p->showHeader;",
          "7284:     int savedShellFlags = p->shellFlgs;",
          "",
          "[Removed Lines]",
          "7281:     const char *zLike = 0;",
          "",
          "[Added Lines]",
          "7277:     char *zLike = 0;",
          "7278:     char *zSql;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7306:           goto meta_command_exit;",
          "7307:         }",
          "7308:       }else if( zLike ){",
          "7313:       }else{",
          "7315:       }",
          "7316:     }",
          "",
          "[Removed Lines]",
          "7309:         raw_printf(stderr, \"Usage: .dump ?--preserve-rowids? \"",
          "7310:                            \"?--newlines? ?LIKE-PATTERN?\\n\");",
          "7311:         rc = 1;",
          "7312:         goto meta_command_exit;",
          "7314:         zLike = azArg[i];",
          "",
          "[Added Lines]",
          "7306:         zLike = sqlite3_mprintf(\"%z OR name LIKE %Q\", zLike, azArg[i]);",
          "7308:         zLike = sqlite3_mprintf(\"name LIKE %Q\", azArg[i]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7330:     sqlite3_exec(p->db, \"SAVEPOINT dump; PRAGMA writable_schema=ON\", 0, 0, 0);",
          "7331:     p->nErr = 0;",
          "7361:     if( p->writableSchema ){",
          "7362:       raw_printf(p->out, \"PRAGMA writable_schema=OFF;\\n\");",
          "7363:       p->writableSchema = 0;",
          "",
          "[Removed Lines]",
          "7332:     if( zLike==0 ){",
          "7333:       run_schema_dump_query(p,",
          "7334:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7335:         \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "7336:       );",
          "7337:       run_schema_dump_query(p,",
          "7338:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7339:         \"WHERE name=='sqlite_sequence'\"",
          "7340:       );",
          "7341:       run_table_dump_query(p,",
          "7342:         \"SELECT sql FROM sqlite_master \"",
          "7343:         \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "7344:       );",
          "7345:     }else{",
          "7346:       char *zSql;",
          "7347:       zSql = sqlite3_mprintf(",
          "7348:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7349:         \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "7350:         \"  AND sql NOT NULL\", zLike);",
          "7351:       run_schema_dump_query(p,zSql);",
          "7352:       sqlite3_free(zSql);",
          "7353:       zSql = sqlite3_mprintf(",
          "7354:         \"SELECT sql FROM sqlite_master \"",
          "7355:         \"WHERE sql NOT NULL\"",
          "7356:         \"  AND type IN ('index','trigger','view')\"",
          "7357:         \"  AND tbl_name LIKE %Q\", zLike);",
          "7358:       run_table_dump_query(p, zSql, 0);",
          "7359:       sqlite3_free(zSql);",
          "7360:     }",
          "",
          "[Added Lines]",
          "7326:     if( zLike==0 ) zLike = sqlite3_mprintf(\"true\");",
          "7327:     zSql = sqlite3_mprintf(",
          "7328:       \"SELECT name, type, sql FROM sqlite_master \"",
          "7329:       \"WHERE (%s) AND type=='table'\"",
          "7330:       \"  AND sql NOT NULL\"",
          "7331:       \" ORDER BY tbl_name='sqlite_sequence', rowid\",",
          "7332:       zLike",
          "7333:     );",
          "7334:     run_schema_dump_query(p,zSql);",
          "7335:     sqlite3_free(zSql);",
          "7336:     zSql = sqlite3_mprintf(",
          "7337:       \"SELECT sql FROM sqlite_master \"",
          "7338:       \"WHERE (%s) AND sql NOT NULL\"",
          "7339:       \"  AND type IN ('index','trigger','view')\",",
          "7340:       zLike",
          "7341:     );",
          "7342:     run_table_dump_query(p, zSql);",
          "7343:     sqlite3_free(zSql);",
          "7344:     sqlite3_free(zLike);",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   list [regexp {BEGIN TRANSACTION;} $res] \\",
          "298:        [regexp {COMMIT;} $res]",
          "299: } {1 1}",
          "305: # .echo ON|OFF           Turn command echo on or off",
          "306: do_test shell1-3.5.1 {",
          "",
          "[Removed Lines]",
          "300: do_test shell1-3.4.3 {",
          "301:   # too many arguments",
          "302:   catchcmd \"test.db\" \".dump FOO BAD\"",
          "303: } {1 {Usage: .dump ?--preserve-rowids? ?--newlines? ?LIKE-PATTERN?}}",
          "",
          "[Added Lines]",
          "300: # The .dump command now accepts multiple arguments",
          "301: #do_test shell1-3.4.3 {",
          "302: #  # too many arguments",
          "303: #  catchcmd \"test.db\" \".dump FOO BAD\"",
          "304: #} {1 {Usage: .dump ?--preserve-rowids? ?--newlines? ?LIKE-PATTERN?}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6ea97ea3d278c212ef366e255051e52ca352332",
      "candidate_info": {
        "commit_hash": "f6ea97ea3d278c212ef366e255051e52ca352332",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6ea97ea3d278c212ef366e255051e52ca352332",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/trigger1.test"
        ],
        "message": "Fix a false-positive in the register validity tracking logic by moving the temporary register release call before the jump that uses that temporary register.\n\nFossilOrigin-Name: 9da48a5ca66dc67c8f7fb2d2471dac7ea696e35ecba5ddf65747d08d452436c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 139aefe60097e06b43df35652e6b2183b7a4b03341d1bde23deada3fa3358fee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3209:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3210:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3211:       }",
          "3212:       if( ii<pList->nExpr-1 || destIfNull!=destIfFalse ){",
          "3213:         int op = rLhs!=r2 ? OP_Eq : OP_NotNull;",
          "3214:         sqlite3VdbeAddOp4(v, op, rLhs, labelOk, r2,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3212:       sqlite3ReleaseTempReg(pParse, regToFree);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3227:         VdbeCoverageIf(v, op==OP_IsNull);",
          "3228:         sqlite3VdbeChangeP5(v, zAff[0] | SQLITE_JUMPIFNULL);",
          "3229:       }",
          "3231:     }",
          "3232:     if( regCkNull ){",
          "3233:       sqlite3VdbeAddOp2(v, OP_IsNull, regCkNull, destIfNull); VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3230:       sqlite3ReleaseTempReg(pParse, regToFree);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:   SELECT * FROM t0;",
          "799: } {2 0 9}",
          "801: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801: # 2020-01-04 From Yongheng",
          "802: # The test case below caused problems for the register validity",
          "803: # tracking logic.  There was no bug in the release build.  The",
          "804: # only problem was a false-positive in the register validity",
          "805: # tracking.",
          "806: #",
          "807: reset_db",
          "808: do_execsql_test trigger1-22.10 {",
          "809:   CREATE TABLE t1(",
          "810:     a INTEGER PRIMARY KEY,",
          "811:     b DOUBLE",
          "812:   );",
          "813:   CREATE TRIGGER x AFTER UPDATE ON t1 BEGIN",
          "814:    SELECT sum(b)OVER(ORDER BY (SELECT b FROM t1 AS x",
          "815:                                WHERE b IN (t1.a,127,t1.b)",
          "816:                                GROUP BY b))",
          "817:      FROM t1",
          "818:      GROUP BY a;",
          "819:   END;",
          "820:   CREATE TEMP TRIGGER x BEFORE INSERT ON t1 BEGIN",
          "821:     UPDATE t1",
          "822:        SET b=randomblob(10)",
          "823:      WHERE b >= 'E'",
          "824:        AND a < (SELECT a FROM t1 WHERE a<22 GROUP BY b);",
          "825:   END;",
          "826:   INSERT INTO t1(b) VALUES('Y'),('X'),('Z');",
          "827:   SELECT a, CASE WHEN typeof(b)='text' THEN quote(b) ELSE '<blob>' END, '|' FROM t1;",
          "828: } {1 <blob> | 2 'X' | 3 'Z' |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a194d3152c9d78090524290aef5a014b66abb7b4",
      "candidate_info": {
        "commit_hash": "a194d3152c9d78090524290aef5a014b66abb7b4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a194d3152c9d78090524290aef5a014b66abb7b4",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Make the zipfile() extension function more robust against zero-length filenames.\n\nFossilOrigin-Name: b9c2005f0291d58d7f3bfd4a2286eb6563e9c9433519c3329035f325fc723445",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2027:   if( bIsDir==0 ){",
          "2029:       zErr = sqlite3_mprintf(\"non-directory name must not end with /\");",
          "2030:       rc = SQLITE_ERROR;",
          "2031:       goto zipfile_step_out;",
          "2032:     }",
          "2033:   }else{",
          "2035:       zName = zFree = sqlite3_mprintf(\"%s/\", zName);",
          "2036:       if( zName==0 ){",
          "2037:         rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "2028:     if( zName[nName-1]=='/' ){",
          "2034:     if( zName[nName-1]!='/' ){",
          "",
          "[Added Lines]",
          "2028:     if( nName>0 && zName[nName-1]=='/' ){",
          "2034:     if( nName==0 || zName[nName-1]!='/' ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1c0a05b09a97e6e2e9b11c31ed6ec7e6484686614b587ebfd0cfe27d973ba461",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}