{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c1da4397d6920ebdefbf4eeaf35c780f5478c6fb",
      "candidate_info": {
        "commit_hash": "c1da4397d6920ebdefbf4eeaf35c780f5478c6fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c1da4397d6920ebdefbf4eeaf35c780f5478c6fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Move the sqlite3VdbeSerialType() routine in-line in the OP_MakeRecord opcode. Optimizing compilers were doing this already.  By doing it manually, we can omit some redundant tests and make the whole thing run a million cycles faster and use about 80 bytes less code space.\n\nFossilOrigin-Name: d837ab0da52632699abc09320980606aef020df5020c253f99c97e24bf3c6d00",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc82b73eaac8b36950e527f12c4b5dc1e147e6f4ad2217ae43ad82882a88bfa6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2932:   pRec = pLast;",
          "2933:   do{",
          "2934:     assert( memIsValid(pRec) );",
          "",
          "[Removed Lines]",
          "2935:     serial_type = sqlite3VdbeSerialType(pRec, file_format, &len);",
          "2936:     if( pRec->flags & MEM_Zero ){",
          "2937:       if( serial_type==0 ){",
          "",
          "[Added Lines]",
          "2935:     if( pRec->flags & MEM_Null ){",
          "2936:       if( pRec->flags & MEM_Zero ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2944:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "2948:       }else{",
          "2951:       }",
          "2952:     }",
          "2958:     if( pRec==pData0 ) break;",
          "2959:     pRec--;",
          "2960:   }while(1);",
          "",
          "[Removed Lines]",
          "2945:         serial_type = 10;",
          "2946:       }else if( nData ){",
          "2947:         if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "2949:         nZero += pRec->u.nZero;",
          "2950:         len -= pRec->u.nZero;",
          "2953:     nData += len;",
          "2954:     testcase( serial_type==127 );",
          "2955:     testcase( serial_type==128 );",
          "2956:     nHdr += serial_type<=127 ? 1 : sqlite3VarintLen(serial_type);",
          "2957:     pRec->uTemp = serial_type;",
          "",
          "[Added Lines]",
          "2944:         pRec->uTemp = 10;",
          "2948:       nHdr++;",
          "2949:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "2951:       i64 i = pRec->u.i;",
          "2952:       u64 u;",
          "2953:       testcase( pRec->flags & MEM_Int );",
          "2954:       testcase( pRec->flags & MEM_IntReal );",
          "2955:       if( i<0 ){",
          "2956:         u = ~i;",
          "2957:       }else{",
          "2958:         u = i;",
          "2959:       }",
          "2960:       nHdr++;",
          "2961:       if( u<=127 ){",
          "2962:         if( (i&1)==i && file_format>=4 ){",
          "2963:           pRec->uTemp = 8+(u32)u;",
          "2964:         }else{",
          "2965:           nData++;",
          "2966:           pRec->uTemp = 1;",
          "2967:         }",
          "2968:       }else if( u<=32767 ){",
          "2969:         nData += 2;",
          "2970:         pRec->uTemp = 2;",
          "2971:       }else if( u<=8388607 ){",
          "2972:         nData += 3;",
          "2973:         pRec->uTemp = 3;",
          "2974:       }else if( u<=2147483647 ){",
          "2975:         nData += 4;",
          "2976:         pRec->uTemp = 4;",
          "2977:       }else if( u<=140737488355327LL ){",
          "2978:         nData += 6;",
          "2979:         pRec->uTemp = 5;",
          "2980:       }else{",
          "2981:         nData += 8;",
          "2982:         if( pRec->flags & MEM_IntReal ){",
          "2986:           pRec->u.r = (double)pRec->u.i;",
          "2987:           pRec->flags &= ~MEM_IntReal;",
          "2988:           pRec->flags |= MEM_Real;",
          "2989:           pRec->uTemp = 7;",
          "2990:         }else{",
          "2991:           pRec->uTemp = 6;",
          "2992:         }",
          "2993:       }",
          "2994:     }else if( pRec->flags & MEM_Real ){",
          "2995:       nHdr++;",
          "2996:       nData += 8;",
          "2997:       pRec->uTemp = 7;",
          "2998:     }else{",
          "2999:       assert( db->mallocFailed || pRec->flags&(MEM_Str|MEM_Blob) );",
          "3000:       assert( pRec->n>=0 );",
          "3001:       len = (u32)pRec->n;",
          "3002:       serial_type = (len*2) + 12 + ((pRec->flags & MEM_Str)!=0);",
          "3003:       if( pRec->flags & MEM_Zero ){",
          "3004:         serial_type += pRec->u.nZero*2;",
          "3005:         if( nData ){",
          "3006:           if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "3007:           len += pRec->u.nZero;",
          "3008:         }else{",
          "3009:           nZero += pRec->u.nZero;",
          "3010:         }",
          "3011:       }",
          "3012:       nData += len;",
          "3013:       nHdr += sqlite3VarintLen(serial_type);",
          "3014:       pRec->uTemp = serial_type;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: int sqlite3VdbeCursorRestore(VdbeCursor*);",
          "487: u32 sqlite3VdbeSerialTypeLen(u32);",
          "488: u8 sqlite3VdbeOneByteSerialTypeLen(u8);",
          "489: u32 sqlite3VdbeSerialType(Mem*, int, u32*);",
          "490: u32 sqlite3VdbeSerialPut(unsigned char*, Mem*, u32);",
          "491: u32 sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);",
          "492: void sqlite3VdbeDeleteAuxData(sqlite3*, AuxData**, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "491: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3438: u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){",
          "3439:   int flags = pMem->flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3433: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bd207ff6d3a1c83f133293a96ea691a0adb318c",
      "candidate_info": {
        "commit_hash": "2bd207ff6d3a1c83f133293a96ea691a0adb318c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2bd207ff6d3a1c83f133293a96ea691a0adb318c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Omit errors about missing SAVEPOINTs when aborting the .archive command in the CLI.\n\nFossilOrigin-Name: 2a47387ba6aa3c294607b7641aa1c4cf70a7b27a861e1098c2f79a38e5b7036a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa47f4c6589c431cf678560ac33dea6b695052012bea2096b2c92869ed51c688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5749:   }",
          "5750: end_ar_transaction:",
          "5751:   if( rc!=SQLITE_OK ){",
          "5753:   }else{",
          "5754:     rc = arExecSql(pAr, \"RELEASE ar;\");",
          "5755:     if( pAr->bZip && pAr->zFile ){",
          "",
          "[Removed Lines]",
          "5752:     arExecSql(pAr, \"ROLLBACK TO ar; RELEASE ar;\");",
          "",
          "[Added Lines]",
          "5752:     sqlite3_exec(pAr->db, \"ROLLBACK TO ar; RELEASE ar;\", 0, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6991796b4b6f1a9c591349dd6d6ac4438f1db79",
      "candidate_info": {
        "commit_hash": "b6991796b4b6f1a9c591349dd6d6ac4438f1db79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6991796b4b6f1a9c591349dd6d6ac4438f1db79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Move the nOpAlloc field from Parse into Vdbe to avoid an extra pointer deference on the fast path in sqlite3VdbeAddOp3().\n\nFossilOrigin-Name: 8f10efc29dea7b816b1ba401726c268950d6671d890f686911269082a241d8d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4d44542d259bbec11aea60ae94fcb4acd53e97e125723cae078cf0f8873f8ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   pParse->pVdbe = p;",
          "37:   assert( pParse->aLabel==0 );",
          "38:   assert( pParse->nLabel==0 );",
          "40:   assert( pParse->szOpAlloc==0 );",
          "41:   sqlite3VdbeAddOp2(p, OP_Init, 0, 1);",
          "42:   return p;",
          "",
          "[Removed Lines]",
          "39:   assert( pParse->nOpAlloc==0 );",
          "",
          "[Added Lines]",
          "39:   assert( p->nOpAlloc==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (p->nOpAlloc>=512 ? p->nOpAlloc*2 : p->nOpAlloc+nOp);",
          "160:   int nNew = (p->nOpAlloc ? p->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:   }",
          "170:   assert( nOp<=(1024/sizeof(Op)) );",
          "172:   pNew = sqlite3DbRealloc(p->db, v->aOp, nNew*sizeof(Op));",
          "173:   if( pNew ){",
          "174:     p->szOpAlloc = sqlite3DbMallocSize(p->db, pNew);",
          "176:     v->aOp = pNew;",
          "177:   }",
          "178:   return (pNew ? SQLITE_OK : SQLITE_NOMEM_BKPT);",
          "",
          "[Removed Lines]",
          "171:   assert( nNew>=(p->nOpAlloc+nOp) );",
          "175:     p->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "[Added Lines]",
          "171:   assert( nNew>=(v->nOpAlloc+nOp) );",
          "175:     v->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208: static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "210:   if( growOpArray(p, 1) ) return 1;",
          "212:   return sqlite3VdbeAddOp3(p, op, p1, p2, p3);",
          "213: }",
          "214: int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "",
          "[Removed Lines]",
          "209:   assert( p->pParse->nOpAlloc<=p->nOp );",
          "211:   assert( p->pParse->nOpAlloc>p->nOp );",
          "",
          "[Added Lines]",
          "209:   assert( p->nOpAlloc<=p->nOp );",
          "211:   assert( p->nOpAlloc>p->nOp );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:   i = p->nOp;",
          "219:   assert( p->magic==VDBE_MAGIC_INIT );",
          "220:   assert( op>=0 && op<0xff );",
          "222:     return growOp3(p, op, p1, p2, p3);",
          "223:   }",
          "224:   p->nOp++;",
          "",
          "[Removed Lines]",
          "221:   if( p->pParse->nOpAlloc<=i ){",
          "",
          "[Added Lines]",
          "221:   if( p->nOpAlloc<=i ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "794: #if defined(SQLITE_DEBUG) && !defined(SQLITE_TEST_REALLOC_STRESS)",
          "795: void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){",
          "797: }",
          "798: #endif",
          "",
          "[Removed Lines]",
          "796:   assert( p->nOp + N <= p->pParse->nOpAlloc );",
          "",
          "[Added Lines]",
          "796:   assert( p->nOp + N <= p->nOpAlloc );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "865:   VdbeOp *pOut, *pFirst;",
          "866:   assert( nOp>0 );",
          "867:   assert( p->magic==VDBE_MAGIC_INIT );",
          "869:     return 0;",
          "870:   }",
          "871:   pFirst = pOut = &p->aOp[p->nOp];",
          "",
          "[Removed Lines]",
          "868:   if( p->nOp + nOp > p->pParse->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "[Added Lines]",
          "868:   if( p->nOp + nOp > p->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99490934aeac3111eb3043865d986d90d560ac71",
      "candidate_info": {
        "commit_hash": "99490934aeac3111eb3043865d986d90d560ac71",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99490934aeac3111eb3043865d986d90d560ac71",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Move variable declaration to address compilation issue (C89).\n\nFossilOrigin-Name: d64f248da3ce7762fe2c17fbc83f7bea9ffca73723bb3ad0982a85320839da90",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4002790d9418289f3e090c694f651a89d8f523119c8ce2f396999b0387148241",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3905: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3906:     else",
          "3907:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){",
          "3908:       int nData = 0;",
          "3909:       unsigned char *aData;",
          "3910:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3908:       int rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3916:           return;",
          "3917:         }",
          "3918:       }",
          "3920:                    SQLITE_DESERIALIZE_RESIZEABLE |",
          "3921:                    SQLITE_DESERIALIZE_FREEONCLOSE);",
          "3922:       if( rc ){",
          "",
          "[Removed Lines]",
          "3919:       int rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "",
          "[Added Lines]",
          "3920:       rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afdc9e23fcacb2df2f80915730e34b3935fd2156",
      "candidate_info": {
        "commit_hash": "afdc9e23fcacb2df2f80915730e34b3935fd2156",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/afdc9e23fcacb2df2f80915730e34b3935fd2156",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3fuzz001.test"
        ],
        "message": "In FTS3, avoid calling memcpy() with a NULL source pointer, even if the transfer amount is zero bytes.\n\nFossilOrigin-Name: 1abb83d29a06308c96bea379311b390240347c5f81824749348d18ad75840c96",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1611:   if( iStartLeaf==0 ){",
          "1612:     nExtra = nRoot + FTS3_NODE_PADDING;",
          "1613:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1611:   assert( zRoot!=0 || nRoot==0 );",
          "1612: #ifdef CORRUPT_DB",
          "1613:   assert( zRoot!=0 || CORRUPT_DB );",
          "1614: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1628:     pReader->aNode = (char *)&pReader[1];",
          "1629:     pReader->rootOnly = 1;",
          "1630:     pReader->nNode = nRoot;",
          "1632:     memset(&pReader->aNode[nRoot], 0, FTS3_NODE_PADDING);",
          "1633:   }else{",
          "1634:     pReader->iCurrentBlock = iStartLeaf-1;",
          "",
          "[Removed Lines]",
          "1631:     memcpy(pReader->aNode, zRoot, nRoot);",
          "",
          "[Added Lines]",
          "1636:     if( nRoot ) memcpy(pReader->aNode, zRoot, nRoot);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dee3ae900129d39d69aff3ec6187376be100803ee6170bbf39529f37b4253260",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2012-12-21",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for corrupt database files.",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !deserialize||!fts3 {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "21: database_may_be_corrupt",
          "23: do_test fts3fuzz001-100 {",
          "24:   sqlite3 db {}",
          "25:   db deserialize [decode_hexdb {",
          "26: | size 24576 pagesize 4096 filename c6.db",
          "27: | page 1 offset 0",
          "28: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "29: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 06   .....@  ........",
          "30: |     32: 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 04   ................",
          "31: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "32: |     96: 00 00 00 00 0d 0e f9 00 06 0d ec 00 0f cd 0f 69   ...............i",
          "33: |    112: 0f 01 0e 10 0e c6 0d ec 00 00 00 00 00 00 00 00   ................",
          "34: |   3552: 00 00 00 00 00 00 00 00 00 00 00 00 22 06 06 17   ............\"...",
          "35: |   3568: 11 11 01 31 74 61 62 6c 65 74 32 74 32 06 43 52   ...1tablet2t2.CR",
          "36: |   3584: 45 41 54 45 20 54 41 42 4c 45 20 74 32 28 78 29   EATE TABLE t2(x)",
          "37: |   3600: 81 33 04 07 17 1f 1f 01 82 35 74 61 62 6c 65 74   .3.......5tablet",
          "38: |   3616: 31 5f 73 65 67 64 69 72 74 31 5f 73 65 67 64 69   1_segdirt1_segdi",
          "39: |   3632: 72 04 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   r.CREATE TABLE '",
          "40: |   3648: 74 31 5f 73 65 67 64 69 72 27 28 6c 65 76 65 6c   t1_segdir'(level",
          "41: |   3664: 20 49 4e 54 45 47 45 52 2c 69 64 78 20 49 4e 54    INTEGER,idx INT",
          "42: |   3680: 45 47 45 52 2c 73 74 61 72 74 5f 62 6c 6f 63 6b   EGER,start_block",
          "43: |   3696: 20 49 4e 54 45 47 45 52 2c 6c 65 61 76 65 73 5f    INTEGER,leaves_",
          "44: |   3712: 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45   end_block INTEGE",
          "45: |   3728: 52 2c 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45   R,end_block INTE",
          "46: |   3744: 47 45 52 2c 72 6f 6f 74 20 42 4c 4f 42 2c 50 52   GER,root BLOB,PR",
          "47: |   3760: 49 4d 41 52 59 20 4b 45 59 28 6c 65 76 65 6c 2c   IMARY KEY(level,",
          "48: |   3776: 20 69 64 78 29 29 31 05 06 17 45 1f 01 00 69 6e    idx))1...E...in",
          "49: |   3792: 64 65 78 73 71 6c 69 74 65 5f 61 75 74 6f 69 6e   dexsqlite_autoin",
          "50: |   3808: 64 65 78 5f 74 15 f7 36 56 76 46 97 25 f3 17 43   dex_t..6VvF.%..C",
          "51: |   3824: 15 5f 73 65 67 64 69 72 05 00 00 00 08 00 00 00   ._segdir........",
          "52: |   3840: 00 66 03 07 17 23 23 01 81 13 74 61 62 6c 65 74   .f...##...tablet",
          "53: |   3856: 31 5f 73 65 67 6d 65 6e 74 73 74 31 5f 73 65 67   1_segmentst1_seg",
          "54: |   3872: 6d 65 6e 74 73 03 43 52 45 41 54 45 20 54 41 42   ments.CREATE TAB",
          "55: |   3888: 4c 45 20 27 74 31 5f 73 65 67 6d 65 6e 74 73 27   LE 't1_segments'",
          "56: |   3904: 28 62 6c 6f 63 6b 69 64 20 49 4e 54 45 47 45 52   (blockid INTEGER",
          "57: |   3920: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62 6c    PRIMARY KEY, bl",
          "58: |   3936: 6f 63 6b 20 42 4c 4f 42 29 62 02 07 17 21 21 01   ock BLOB)b...!!.",
          "59: |   3952: 81 0f 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65 6e   ..tablet1_conten",
          "60: |   3968: 74 74 31 5f 63 6f 6e 74 65 6e 74 02 43 52 45 41   tt1_content.CREA",
          "61: |   3984: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "62: |   4000: 74 65 6e 74 27 28 64 6f 63 69 64 20 49 4e 54 45   tent'(docid INTE",
          "63: |   4016: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "64: |   4032: 20 27 63 30 63 6f 6e 74 65 6e 74 27 29 31 01 06    'c0content')1..",
          "65: |   4048: 17 11 11 08 51 74 61 62 6c 65 74 31 74 31 43 52   ....Qtablet1t1CR",
          "66: |   4064: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "67: |   4080: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 33   LE t1 USING fts3",
          "68: | page 2 offset 4096",
          "69: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "70: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "71: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "72: | page 3 offset 8192",
          "73: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "74: | page 4 offset 12288",
          "75: |      0: 0d 00 00 00 01 0f d6 00 0f 00 00 00 00 00 00 00   ................",
          "76: |   4048: 00 00 00 00 00 00 28 01 07 08 08 08 08 15 46 30   ......(.......F0",
          "77: |   4064: 20 32 39 00 05 61 62 61 63 6b 03 01 02 00 03 02    29..aback......",
          "78: |   4080: 66 74 03 02 02 00 03 04 6e 64 6f 6e 03 03 02 00   ft......ndon....",
          "79: | page 5 offset 16384",
          "80: |      0: 0a 00 00 00 01 0f fb 00 0f fb 00 00 00 00 00 00   ................",
          "81: |   4080: 00 00 00 00 00 00 00 00 00 00 00 04 04 08 08 09   ................",
          "82: | page 6 offset 20480",
          "83: |      0: 0d 00 00 00 05 0f b8 00 0f f4 0f e9 0f d6 0f c7   ................",
          "84: |     16: 0f b8 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "85: |   4016: 00 00 00 00 00 00 00 00 0d 05 02 23 61 75 74 6f   ...........#auto",
          "86: |   4032: 6d 65 72 67 65 3d 35 0d 04 02 23 6d 65 72 67 65   merge=5...#merge",
          "87: |   4048: 3d 31 30 30 2c 38 11 03 02 2b 69 6e 74 65 67 72   =100,8...+integr",
          "88: |   4064: 69 74 79 3d 63 68 65 63 6b 09 02 02 1b 72 65 62   ity=check....reb",
          "89: |   4080: 75 69 6c 64 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   uild....optimize",
          "90: | end c6.db",
          "91:   }]",
          "92:   catchsql {",
          "93:     INSERT INTO t1(t1) SELECT x FROM t2;",
          "94:   }",
          "95: } {1 {database disk image is malformed}}",
          "96: do_test fts3fuzz001-110 {",
          "97:   catchsql {",
          "98:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "99:   }",
          "100: } {1 {database disk image is malformed}}",
          "101: do_test fts3fuzz001-120 {",
          "102:   catchsql {",
          "103:     INSERT INTO t1(t1) VALUES('optimize');",
          "104:   }",
          "105: } {0 {}}",
          "106: do_test fts3fuzz001-121 {",
          "107:   catchsql {",
          "108:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "109:   }",
          "110: } {1 {database disk image is malformed}}",
          "113: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}