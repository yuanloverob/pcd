{
  "cve_id": "CVE-2015-1870",
  "cve_desc": "The event scripts in Automatic Bug Reporting Tool (ABRT) uses world-readable permission on a copy of sosreport file in problem directories, which allows local users to obtain sensitive information from /var/log/messages via unspecified vectors.",
  "repo": "abrt/abrt",
  "patch_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
  "patch_info": {
    "commit_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/8939398b82006ba1fec4ed491339fc075f43fc7c",
    "files": [
      "src/daemon/abrt-server.c",
      "src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h",
      "src/lib/abrt_conf.c",
      "src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c"
    ],
    "message": "make the dump directories owned by root by default\n\nIt was discovered that the abrt event scripts create a user-readable\ncopy of a sosreport file in abrt problem directories, and include\nexcerpts of /var/log/messages selected by the user-controlled process\nname, leading to an information disclosure.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1212868\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
      "src/daemon/abrt.conf||src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h||src/include/libabrt.h",
      "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
      "src/lib/hooklib.c||src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c"
    ]
  },
  "patch_diff": {
    "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
      "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   with this program; if not, write to the Free Software Foundation, Inc.,",
      "16:   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
      "18: #include \"libabrt.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include \"problem_api.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dirname, g_settings_dump_location);",
      "155:     }",
      "157:     {",
      "158:         if (errno == ENOTDIR)",
      "159:         {",
      "",
      "[Removed Lines]",
      "156:     if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "[Added Lines]",
      "157:     if (g_settings_privatereports)",
      "158:     {",
      "159:         struct stat statbuf;",
      "160:         if (lstat(dirname, &statbuf) != 0 || !S_ISDIR(statbuf.st_mode))",
      "161:         {",
      "162:             error_msg(\"Path '%s' isn't directory\", dirname);",
      "164:         }",
      "166:         struct group *gr = getgrnam(\"abrt\");",
      "167:         if (!gr)",
      "168:         {",
      "169:             error_msg(\"Group 'abrt' does not exist\");",
      "170:             return 500;",
      "171:         }",
      "172:         if (statbuf.st_uid != 0 || !(statbuf.st_gid == 0 || statbuf.st_gid == gr->gr_gid) || statbuf.st_mode & 07)",
      "173:         {",
      "174:             error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dirname);",
      "175:             return 403;",
      "176:         }",
      "177:         struct dump_dir *dd = dd_opendir(dirname, DD_OPEN_READONLY);",
      "178:         const bool complete = dd && problem_dump_dir_is_complete(dd);",
      "179:         dd_close(dd);",
      "180:         if (complete)",
      "181:         {",
      "182:             error_msg(\"Problem directory '%s' has already been processed\", dirname);",
      "183:             return 403;",
      "184:         }",
      "185:     }",
      "186:     else if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "381:     if (!dd)",
      "382:     {",
      "383:         error_msg_and_die(\"Error creating problem directory '%s'\", path);",
      "",
      "[Removed Lines]",
      "380:     struct dump_dir *dd = dd_create(path, client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "[Added Lines]",
      "410:     struct dump_dir *dd = dd_create(path, g_settings_privatereports ? 0 : client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "---------------"
    ],
    "src/daemon/abrt.conf||src/daemon/abrt.conf": [
      "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: #                session; otherwise No.",
      "44: #",
      "45: # ShortenedReporting = yes",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: # Disable this if you want to regular users to own the problem data colleted by",
      "48: # abrt.",
      "49: #",
      "50: PrivateReports = yes",
      "",
      "---------------"
    ],
    "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
      "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "682:         }",
      "683:     }",
      "686:     if (setting_MakeCompatCore && ulimit_c != 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "686:     const uid_t dduid = g_settings_privatereports ? 0 : fsuid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "773:         goto create_user_core;",
      "774:     }",
      "784:     if (dd)",
      "785:     {",
      "786:         char *rootdir = get_rootdir(pid);",
      "788:         dd_create_basic_files(dd, fsuid, NULL);",
      "790:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
      "",
      "[Removed Lines]",
      "783:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "[Added Lines]",
      "786:     dd = dd_create_skeleton(path, dduid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "---------------"
    ],
    "src/include/libabrt.h||src/include/libabrt.h": [
      "File: src/include/libabrt.h -> src/include/libabrt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: extern char *        g_settings_autoreporting_event;",
      "63: #define g_settings_shortenedreporting abrt_g_settings_shortenedreporting",
      "64: extern bool          g_settings_shortenedreporting;",
      "67: #define load_abrt_conf abrt_load_abrt_conf",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: #define g_settings_privatereports abrt_g_settings_privatereports",
      "66: extern bool          g_settings_privatereports;",
      "",
      "---------------"
    ],
    "src/lib/abrt_conf.c||src/lib/abrt_conf.c": [
      "File: src/lib/abrt_conf.c -> src/lib/abrt_conf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: bool          g_settings_autoreporting = 0;",
      "28: char *        g_settings_autoreporting_event = NULL;",
      "29: bool          g_settings_shortenedreporting = 0;",
      "31: void free_abrt_conf_data()",
      "32: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: bool          g_settings_privatereports = true;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     else",
      "103:         g_settings_shortenedreporting = 0;",
      "105:     GHashTableIter iter;",
      "106:     const char *name;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:     value = get_map_string_item_or_NULL(settings, \"PrivateReports\");",
      "107:     if (value)",
      "108:     {",
      "109:         g_settings_privatereports = string_to_bool(value);",
      "110:         remove_map_string_item(settings, \"PrivateReports\");",
      "111:     }",
      "",
      "---------------"
    ],
    "src/lib/hooklib.c||src/lib/hooklib.c": [
      "File: src/lib/hooklib.c -> src/lib/hooklib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "410: {",
      "411:     load_abrt_conf();",
      "415:     char *problem_id = NULL;",
      "416:     if (dd)",
      "",
      "[Removed Lines]",
      "413:     struct dump_dir *dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "[Added Lines]",
      "413:     struct dump_dir *dd = NULL;",
      "415:     if (g_settings_privatereports)",
      "416:         dd = create_dump_dir_from_problem_data_ext(pd, g_settings_dump_location, 0);",
      "417:     else",
      "418:         dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c": [
      "File: src/plugins/abrt-dump-oops.c -> src/plugins/abrt-dump-oops.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:         mode = DEFAULT_DUMP_DIR_MODE;",
      "190:         my_euid = geteuid();",
      "191:     }",
      "193:     pid_t my_pid = getpid();",
      "194:     unsigned idx = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     if (g_settings_privatereports)",
      "193:     {",
      "194:         if (world_readable_dump)",
      "195:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "197:         mode = DEFAULT_DUMP_DIR_MODE;",
      "198:         my_euid = 0;",
      "199:     }",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c": [
      "File: src/plugins/abrt-dump-xorg.c -> src/plugins/abrt-dump-xorg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:         mode = DEFAULT_DUMP_DIR_MODE;",
      "83:         my_euid = geteuid();",
      "84:     }",
      "86:     pid_t my_pid = getpid();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:     if (g_settings_privatereports)",
      "86:     {",
      "87:         if ((g_opts & OPT_x))",
      "88:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "90:         mode = DEFAULT_DUMP_DIR_MODE;",
      "91:         my_euid = 0;",
      "92:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f948bdc09aa346616852a421ce1af2e03b39997",
      "candidate_info": {
        "commit_hash": "2f948bdc09aa346616852a421ce1af2e03b39997",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/2f948bdc09aa346616852a421ce1af2e03b39997",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: create dump directory without parents\n\nThis patch makes the code more robust.\nThis patch ensures that abrt-hook-ccpp never creates the dump location.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:     if (dd)",
          "682:     {",
          "683:         char *rootdir = get_rootdir(pid);",
          "",
          "[Removed Lines]",
          "680:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "[Added Lines]",
          "680:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e811d78e2719988ae291181f5b133af32ce62d8",
      "candidate_info": {
        "commit_hash": "6e811d78e2719988ae291181f5b133af32ce62d8",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/6e811d78e2719988ae291181f5b133af32ce62d8",
        "files": [
          "src/dbus/abrt-dbus.c"
        ],
        "message": "dbus: process only valid sub-directories of the dump location\n\nMust have correct rights and must be a direct sub-directory of the dump\nlocation.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1214451\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c": [
          "File: src/dbus/abrt-dbus.c -> src/dbus/abrt-dbus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     return caller_uid;",
          "133: }",
          "136: {",
          "138: #if 0",
          "147:         return false;",
          "148:     }",
          "149: #endif",
          "",
          "[Removed Lines]",
          "135: static bool allowed_problem_dir(const char *dir_name)",
          "139:     unsigned len = strlen(g_settings_dump_location);",
          "142:     if (strncmp(dir_name, g_settings_dump_location, len) != 0",
          "143:      || (dir_name[len] != '/' && dir_name[len] != '\\0')",
          "145:      || strstr(dir_name + len, \"/.\")",
          "146:     ) {",
          "",
          "[Added Lines]",
          "135: bool allowed_problem_dir(const char *dir_name)",
          "137:     if (!dir_is_in_dump_location(dir_name))",
          "138:     {",
          "139:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dir_name, g_settings_dump_location);",
          "140:         return false;",
          "141:     }",
          "160:     if (!dir_has_correct_permissions(dir_name))",
          "161:     {",
          "162:         error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dir_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b72616471ec52a009904689592f4f69e730a6f56",
      "candidate_info": {
        "commit_hash": "b72616471ec52a009904689592f4f69e730a6f56",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/b72616471ec52a009904689592f4f69e730a6f56",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: harden dealing with UID/GID\n\n* Don't fall back to UID 0.\n* Use fsgid.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:     return malloc_readlink(buf);",
          "219: }",
          "222: {",
          "228:     for (;;)",
          "229:     {",
          "231:         {",
          "233:             if (n != 4)",
          "234:             {",
          "236:             }",
          "238:         }",
          "239:         line = strchr(line, '\\n');",
          "240:         if (!line)",
          "",
          "[Removed Lines]",
          "221: static int get_fsuid(void)",
          "223:     int real, euid, saved;",
          "225:     int fs_uid = 0;",
          "230:         if (strncmp(line, \"Uid\", 3) == 0)",
          "232:             int n = sscanf(line, \"Uid:\\t%d\\t%d\\t%d\\t%d\\n\", &real, &euid, &saved, &fs_uid);",
          "235:                 perror_msg_and_die(\"Can't parse Uid: line\");",
          "237:             break;",
          "",
          "[Added Lines]",
          "221: static int get_proc_fs_id(char type)",
          "223:     const char *scanf_format = \"%*cid:\\t%d\\t%d\\t%d\\t%d\\n\";",
          "224:     char id_type[] = \"_id\";",
          "225:     id_type[0] = type;",
          "227:     int real, e_id, saved;",
          "228:     int fs_id = 0;",
          "233:         if (strncmp(line, id_type, 3) == 0)",
          "235:             int n = sscanf(line, scanf_format, &real, &e_id, &saved, &fs_id);",
          "238:                 perror_msg_and_die(\"Can't parse %cid: line\", type);",
          "241:             return fs_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:         line++;",
          "243:     }",
          "246: }",
          "248: static int dump_suid_policy()",
          "",
          "[Removed Lines]",
          "245:     return fs_uid;",
          "",
          "[Added Lines]",
          "249:     perror_msg_and_die(\"Failed to get file system %cID of the crashed process\", type);",
          "250: }",
          "252: static int get_fsuid(void)",
          "253: {",
          "254:     return get_proc_fs_id(/*UID*/'U');",
          "255: }",
          "257: static int get_fsgid(void)",
          "258: {",
          "259:     return get_proc_fs_id(/*GID*/'G');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     if (proc_cwd == NULL)",
          "279:         return -1;",
          "285:     xseteuid(fsuid);",
          "287:     if (strcmp(core_basename, \"core\") == 0)",
          "",
          "[Removed Lines]",
          "281:     struct passwd* pw = getpwuid(uid);",
          "282:     gid_t gid = pw ? pw->pw_gid : uid;",
          "284:     xsetegid(gid);",
          "",
          "[Added Lines]",
          "295:     errno = 0;",
          "297:     xsetegid(get_fsgid());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f0a18b499b9b0e1afbdab8a8bb31d38f2acc6d8",
      "candidate_info": {
        "commit_hash": "2f0a18b499b9b0e1afbdab8a8bb31d38f2acc6d8",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/2f0a18b499b9b0e1afbdab8a8bb31d38f2acc6d8",
        "files": [
          "configure.ac",
          "src/hooks/Makefile.am",
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: emulate selinux for creation of compat cores\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nhttp://article.gmane.org/gmane.comp.security.selinux/21842\n\nv2: use the _raw interface and do the preparation steps as root\nv3: don't fail if SELinux is disabled\n    https://github.com/abrt/abrt/commit/c4f06d4198658c82550e93bb2617b96022c06cf4#commitcomment-11021276\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/hooks/Makefile.am||src/hooks/Makefile.am",
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: PKG_CHECK_MODULES([POLKIT], [polkit-gobject-1])",
          "107: PKG_CHECK_MODULES([GIO], [gio-2.0])",
          "108: PKG_CHECK_MODULES([SATYR], [satyr])",
          "110: PKG_PROG_PKG_CONFIG",
          "111: AC_ARG_WITH([systemdsystemunitdir],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: PKG_CHECK_MODULES([LIBSELINUX], [libselinux])",
          "",
          "---------------"
        ],
        "src/hooks/Makefile.am||src/hooks/Makefile.am": [
          "File: src/hooks/Makefile.am -> src/hooks/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     -DDEFAULT_DUMP_DIR_MODE=$(DEFAULT_DUMP_DIR_MODE) \\",
          "34:     $(GLIB_CFLAGS) \\",
          "35:     $(LIBREPORT_CFLAGS) \\",
          "36:     -D_GNU_SOURCE",
          "37: abrt_hook_ccpp_LDADD = \\",
          "38:     ../lib/libabrt.la \\",
          "41: # abrt-merge-pstoreoops",
          "42: abrt_merge_pstoreoops_SOURCES = \\",
          "",
          "[Removed Lines]",
          "39:     $(LIBREPORT_LIBS)",
          "",
          "[Added Lines]",
          "36:     $(LIBSELINUX_CFLAGS) \\",
          "40:     $(LIBREPORT_LIBS) \\",
          "41:     $(LIBSELINUX_LIBS)",
          "",
          "---------------"
        ],
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <sys/utsname.h>",
          "22: #include \"libabrt.h\"",
          "24: #define  DUMP_SUID_UNSAFE 1",
          "25: #define  DUMP_SUID_SAFE 2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <selinux/selinux.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:     return suid_dump_policy;",
          "287: }",
          "289: static int open_user_core(uid_t uid, uid_t fsuid, pid_t pid, char **percent_values)",
          "290: {",
          "291:     proc_cwd = open_cwd(pid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: static int compute_selinux_con_for_new_file(pid_t pid, int dir_fd, security_context_t *newcon)",
          "298: {",
          "299:     security_context_t srccon;",
          "300:     security_context_t dstcon;",
          "302:     const int r = is_selinux_enabled();",
          "303:     if (r == 0)",
          "304:     {",
          "306:         return 1;",
          "307:     }",
          "308:     else if (r == -1)",
          "309:     {",
          "310:         perror_msg(\"Couldn't get state of SELinux\");",
          "311:         return -1;",
          "312:     }",
          "313:     else if (r != 1)",
          "314:         error_msg_and_die(\"Unexpected SELinux return value: %d\", r);",
          "317:     if (getpidcon_raw(pid, &srccon) < 0)",
          "318:     {",
          "319:         perror_msg(\"getpidcon_raw(%d)\", pid);",
          "320:         return -1;",
          "321:     }",
          "323:     if (fgetfilecon_raw(dir_fd, &dstcon) < 0)",
          "324:     {",
          "325:         perror_msg(\"getfilecon_raw(%s)\", user_pwd);",
          "326:         return -1;",
          "327:     }",
          "329:     if (security_compute_create_raw(srccon, dstcon, string_to_security_class(\"file\"), newcon) < 0)",
          "330:     {",
          "331:         perror_msg(\"security_compute_create_raw(%s, %s, 'file')\", srccon, dstcon);",
          "332:         return -1;",
          "333:     }",
          "335:     return 0;",
          "336: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:     errno = 0;",
          "297:     xsetegid(get_fsgid());",
          "298:     xseteuid(fsuid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:     security_context_t newcon;",
          "348:     if (compute_selinux_con_for_new_file(pid, dirfd(proc_cwd), &newcon) < 0)",
          "349:     {",
          "350:         log_notice(\"Not going to create a user core due to SELinux errors\");",
          "351:         return -1;",
          "352:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:     struct stat sb;",
          "392:     errno = 0;",
          "395:     xsetegid(0);",
          "396:     xseteuid(0);",
          "397:     if (user_core_fd < 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:     if (newcon != NULL && setfscreatecon_raw(newcon) < 0)",
          "451:     {",
          "452:         perror_msg(\"setfscreatecon_raw(%s)\", newcon);",
          "453:         return -1;",
          "454:     }",
          "461:     if (newcon != NULL && setfscreatecon_raw(NULL) < 0)",
          "462:     {",
          "463:         error_msg(\"setfscreatecon_raw(NULL)\");",
          "464:         goto user_core_fail;",
          "465:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "404:             perror_msg(\"Can't open '%s' at '%s'\", core_basename, user_pwd);",
          "405:         else",
          "406:             perror_msg(\"'%s' at '%s' is not a regular file with link count 1 owned by UID(%d)\", core_basename, user_pwd, fsuid);",
          "408:     }",
          "409:     if (ftruncate(user_core_fd, 0) != 0) {",
          "411:         perror_msg(\"Can't truncate '%s' at '%s' to size 0\", core_basename, user_pwd);",
          "414:     }",
          "416:     return user_core_fd;",
          "417: }",
          "419: static bool dump_fd_info(const char *dest_filename, char *source_filename, int source_base_ofs, uid_t uid, gid_t gid)",
          "",
          "[Removed Lines]",
          "407:         return -1;",
          "412:         unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "413:         return -1;",
          "",
          "[Added Lines]",
          "479:         goto user_core_fail;",
          "484:         goto user_core_fail;",
          "489: user_core_fail:",
          "490:     if (user_core_fd >= 0)",
          "491:     {",
          "492:         close(user_core_fd);",
          "493:         unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);",
          "494:     }",
          "495:     return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d023c32a565e83306cddf34c894477b7aaf33d1",
      "candidate_info": {
        "commit_hash": "7d023c32a565e83306cddf34c894477b7aaf33d1",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/7d023c32a565e83306cddf34c894477b7aaf33d1",
        "files": [
          "configure.ac",
          "src/daemon/abrt.conf"
        ],
        "message": "configure: move the default dump location to /var/spool\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/daemon/abrt.conf||src/daemon/abrt.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/daemon/abrt.conf||src/daemon/abrt.conf"
          ],
          "candidate": [
            "src/daemon/abrt.conf||src/daemon/abrt.conf"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: AC_ARG_WITH([defaultdumplocation],",
          "148:             AS_HELP_STRING([--with-defaultdumplocation=DIR],",
          "151: AC_SUBST([DEFAULT_DUMP_LOCATION], [$with_defaultdumplocation])",
          "153: AC_ARG_WITH(augeaslenslibdir,",
          "",
          "[Removed Lines]",
          "149:                            [Default dump location ('LOCALSTATEDIR/tmp/abrt')]),",
          "150:             [], [with_defaultdumplocation=${localstatedir}/tmp/abrt])",
          "",
          "[Added Lines]",
          "149:                            [Default dump location ('LOCALSTATEDIR/spool/abrt')]),",
          "150:             [], [with_defaultdumplocation=${localstatedir}/spool/abrt])",
          "",
          "---------------"
        ],
        "src/daemon/abrt.conf||src/daemon/abrt.conf": [
          "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: MaxCrashReportsSize = 1000",
          "12: # Specify where you want to store coredumps and all files which are needed for",
          "14: #",
          "15: # Changing dump location could cause problems with SELinux. See man abrt_selinux(8).",
          "16: #",
          "19: # If you want to automatically clean the upload directory you have to tweak the",
          "20: # selinux policy.",
          "",
          "[Removed Lines]",
          "13: # reporting. (default:/var/tmp/abrt)",
          "17: #DumpLocation = /var/tmp/abrt",
          "",
          "[Added Lines]",
          "13: # reporting. (default:/var/spool/abrt)",
          "17: #DumpLocation = /var/spool/abrt",
          "",
          "---------------"
        ]
      }
    }
  ]
}