{
  "cve_id": "CVE-2020-7044",
  "cve_desc": "In Wireshark 3.2.x before 3.2.1, the WASSP dissector could crash. This was addressed in epan/dissectors/packet-wassp.c by using >= and <= to resolve off-by-one errors.",
  "repo": "wireshark/wireshark",
  "patch_hash": "71b59b18e4bb61d0e6da8bb2b26c87750570ae40",
  "patch_info": {
    "commit_hash": "71b59b18e4bb61d0e6da8bb2b26c87750570ae40",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/71b59b18e4bb61d0e6da8bb2b26c87750570ae40",
    "files": [
      "epan/dissectors/packet-wassp.c"
    ],
    "message": "WASSP: Fix a couple of off-by-one errors.\n\nFix a couple of array length comparisons.\n\nBug: 16324\nChange-Id: Ifd2238371167261f435b947fdc3fb11bf6408d2e\nReviewed-on: https://code.wireshark.org/review/35735\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c": [
      "File: epan/dissectors/packet-wassp.c -> epan/dissectors/packet-wassp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4370:  reassembly_table_init(&wassp_reassembled_table, &addresses_reassembly_table_functions);",
      "4371: }",
      "4374: {",
      "4375:  if (in_ptr == NULL)",
      "4376:  {",
      "4377:   return NULL;",
      "4378:  }",
      "4380:  {",
      "4381:   return NULL;",
      "4382:  }",
      "",
      "[Removed Lines]",
      "4373: static const char* wassp_match_strval(WASSP_SUBTLV_DECODER_INFO_t *in_ptr, int in_type)",
      "4379:  if (in_ptr->max_entry < in_type)",
      "",
      "[Added Lines]",
      "4373: static const char* wassp_match_strval(const WASSP_SUBTLV_DECODER_INFO_t *in_ptr, int in_type)",
      "4379:  if (in_ptr->max_entry <= in_type)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4742:  proto_item *tlvi;",
      "4743:  proto_item *ti;",
      "4744:  proto_tree *tmp_tree;",
      "4746:  guint32 value;",
      "4747:  guint16 tlv_type = EID_PARSE_ERROR;",
      "4748:  guint16 length = 0, org_offset = offset;",
      "4750:  guint32 i, tableNo;",
      "4751:  int suboffset;",
      "",
      "[Removed Lines]",
      "4745:  char *label;",
      "4749:  WASSP_SUBTLV_DECODER_INFO_t *tmp_decr = NULL;",
      "",
      "[Added Lines]",
      "4745:  const char *label;",
      "4749:  const WASSP_SUBTLV_DECODER_INFO_t *tmp_decr = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4755:   return offset;",
      "4756:  }",
      "4760:  if (tvb_reported_length_remaining(tvb, offset) > 0)",
      "4761:  {",
      "",
      "[Removed Lines]",
      "4758:  tmp_decr = (WASSP_SUBTLV_DECODER_INFO_t*)&wassp_decr_info[which_tab];",
      "",
      "[Added Lines]",
      "4758:  tmp_decr = &wassp_decr_info[which_tab];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4767:   {",
      "4768:    tlv_type = tvb_get_ntohs(tvb, offset + TLV_TYPE);",
      "4769:    length = tvb_get_ntohs(tvb, offset + TLV_LENGTH);",
      "4771:    {",
      "4772:     proto_tree_add_uint_format_value(tmp_tree, hf_wassp_tlv_unknown, tvb, offset, 4, tlv_type, \"Unknow Wassp TLV (%d)\", tlv_type);",
      "4773:     proto_tree_add_item(tmp_tree, hf_wassp_tlv_length, tvb, offset + TLV_LENGTH, 2, ENC_BIG_ENDIAN);",
      "",
      "[Removed Lines]",
      "4770:    if (tlv_type > WASSP_SUBTLV_GET_MAXENTRY(tmp_decr))",
      "",
      "[Added Lines]",
      "4770:    if (tlv_type >= WASSP_SUBTLV_GET_MAXENTRY(tmp_decr))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4776:     continue;",
      "4777:    }",
      "4780:    label = (label == NULL) ? \"Unknown Type\" : label;",
      "4782:    if (length > value)",
      "",
      "[Removed Lines]",
      "4779:    label = (char*)wassp_match_strval(tmp_decr, tlv_type);",
      "",
      "[Added Lines]",
      "4779:    label = wassp_match_strval(tmp_decr, tlv_type);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4944:  guint32 value;",
      "4945:  int suboffset;",
      "4946:  wassp_ru_msg_t ru_msg_type = rumsg_type;",
      "",
      "[Removed Lines]",
      "4947:  char *label;",
      "",
      "[Added Lines]",
      "4947:  const char *label;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4953:  {",
      "4954:   tlv_type = tvb_get_ntohs(tvb, offset + TLV_TYPE);",
      "4955:   length = tvb_get_ntohs(tvb, offset + TLV_LENGTH);",
      "4957:   label = (label == NULL) ? \"Unknown Type\" : label;",
      "4959:   if (length > value)",
      "",
      "[Removed Lines]",
      "4956:   label = (char*)try_val_to_str(tlv_type, wassp_tlv_types);",
      "",
      "[Added Lines]",
      "4956:   label = try_val_to_str(tlv_type, wassp_tlv_types);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f90a3720b73ca140403315126e2a478c4f70ca03",
      "candidate_info": {
        "commit_hash": "f90a3720b73ca140403315126e2a478c4f70ca03",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f90a3720b73ca140403315126e2a478c4f70ca03",
        "files": [
          "epan/dissectors/packet-wassp.c"
        ],
        "message": "WASSP: Fix a couple of off-by-one errors.\n\nFix a couple of array length comparisons.\n\nBug: 16324\nChange-Id: Ifd2238371167261f435b947fdc3fb11bf6408d2e\nReviewed-on: https://code.wireshark.org/review/35735\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 71b59b18e4bb61d0e6da8bb2b26c87750570ae40)\nReviewed-on: https://code.wireshark.org/review/35766",
        "before_after_code_files": [
          "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c": [
          "File: epan/dissectors/packet-wassp.c -> epan/dissectors/packet-wassp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4370:  reassembly_table_init(&wassp_reassembled_table, &addresses_reassembly_table_functions);",
          "4371: }",
          "4374: {",
          "4375:  if (in_ptr == NULL)",
          "4376:  {",
          "4377:   return NULL;",
          "4378:  }",
          "4380:  {",
          "4381:   return NULL;",
          "4382:  }",
          "",
          "[Removed Lines]",
          "4373: static const char* wassp_match_strval(WASSP_SUBTLV_DECODER_INFO_t *in_ptr, int in_type)",
          "4379:  if (in_ptr->max_entry < in_type)",
          "",
          "[Added Lines]",
          "4373: static const char* wassp_match_strval(const WASSP_SUBTLV_DECODER_INFO_t *in_ptr, int in_type)",
          "4379:  if (in_ptr->max_entry <= in_type)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4742:  proto_item *tlvi;",
          "4743:  proto_item *ti;",
          "4744:  proto_tree *tmp_tree;",
          "4746:  guint32 value;",
          "4747:  guint16 tlv_type = EID_PARSE_ERROR;",
          "4748:  guint16 length = 0, org_offset = offset;",
          "4750:  guint32 i, tableNo;",
          "4751:  int suboffset;",
          "",
          "[Removed Lines]",
          "4745:  char *label;",
          "4749:  WASSP_SUBTLV_DECODER_INFO_t *tmp_decr = NULL;",
          "",
          "[Added Lines]",
          "4745:  const char *label;",
          "4749:  const WASSP_SUBTLV_DECODER_INFO_t *tmp_decr = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4755:   return offset;",
          "4756:  }",
          "4760:  if (tvb_reported_length_remaining(tvb, offset) > 0)",
          "4761:  {",
          "",
          "[Removed Lines]",
          "4758:  tmp_decr = (WASSP_SUBTLV_DECODER_INFO_t*)&wassp_decr_info[which_tab];",
          "",
          "[Added Lines]",
          "4758:  tmp_decr = &wassp_decr_info[which_tab];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4767:   {",
          "4768:    tlv_type = tvb_get_ntohs(tvb, offset + TLV_TYPE);",
          "4769:    length = tvb_get_ntohs(tvb, offset + TLV_LENGTH);",
          "4771:    {",
          "4772:     proto_tree_add_uint_format_value(tmp_tree, hf_wassp_tlv_unknown, tvb, offset, 4, tlv_type, \"Unknow Wassp TLV (%d)\", tlv_type);",
          "4773:     proto_tree_add_item(tmp_tree, hf_wassp_tlv_length, tvb, offset + TLV_LENGTH, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "4770:    if (tlv_type > WASSP_SUBTLV_GET_MAXENTRY(tmp_decr))",
          "",
          "[Added Lines]",
          "4770:    if (tlv_type >= WASSP_SUBTLV_GET_MAXENTRY(tmp_decr))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4776:     continue;",
          "4777:    }",
          "4780:    label = (label == NULL) ? \"Unknown Type\" : label;",
          "4782:    if (length > value)",
          "",
          "[Removed Lines]",
          "4779:    label = (char*)wassp_match_strval(tmp_decr, tlv_type);",
          "",
          "[Added Lines]",
          "4779:    label = wassp_match_strval(tmp_decr, tlv_type);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4944:  guint32 value;",
          "4945:  int suboffset;",
          "4946:  wassp_ru_msg_t ru_msg_type = rumsg_type;",
          "",
          "[Removed Lines]",
          "4947:  char *label;",
          "",
          "[Added Lines]",
          "4947:  const char *label;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4953:  {",
          "4954:   tlv_type = tvb_get_ntohs(tvb, offset + TLV_TYPE);",
          "4955:   length = tvb_get_ntohs(tvb, offset + TLV_LENGTH);",
          "4957:   label = (label == NULL) ? \"Unknown Type\" : label;",
          "4959:   if (length > value)",
          "",
          "[Removed Lines]",
          "4956:   label = (char*)try_val_to_str(tlv_type, wassp_tlv_types);",
          "",
          "[Added Lines]",
          "4956:   label = try_val_to_str(tlv_type, wassp_tlv_types);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7854720c805ad3b96c1ceecff3be547f5748830",
      "candidate_info": {
        "commit_hash": "c7854720c805ad3b96c1ceecff3be547f5748830",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c7854720c805ad3b96c1ceecff3be547f5748830",
        "files": [
          "epan/dissectors/packet-wassp.c"
        ],
        "message": "update Extreme Networks WASSP decoder\n\nuploaded 2 test files for testing\n\nBug: 15787\nChange-Id: I6b90cb90f35c1073a1ff501e0a323ce60a8dbf46\nReviewed-on: https://code.wireshark.org/review/33194\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wassp.c||epan/dissectors/packet-wassp.c": [
          "File: epan/dissectors/packet-wassp.c -> epan/dissectors/packet-wassp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   looks very similar (but not always identical).",
          "18:   AC: Access Controller",
          "21:   MU: Mobile Unit (Wireless client)",
          "22:   RU: Radio Unit (Access point)",
          "31: #include \"config.h\"",
          "33: #include <epan/packet.h>",
          "34: #include <epan/exceptions.h>",
          "35: #include <epan/show_exception.h>",
          "36: #include <epan/expert.h>",
          "332: #define PROTO_SHORT_NAME \"WASSP\"",
          "333: #define PROTO_LONG_NAME \"Wireless Access Station Session Protocol\"",
          "475: };",
          "546: };",
          "762: {",
          "787: {",
          "873: {",
          "991: {",
          "1000: {",
          "2076:  };",
          "2078:   &ett_wassp,",
          "2085:  };",
          "2088:  proto_register_field_array(proto_wassp, hf, array_length(hf));",
          "2089:  proto_register_subtree_array(ett, array_length(ett));",
          "2092: }",
          "2094: void",
          "2095: proto_reg_handoff_wassp(void)",
          "2096: {",
          "2097:  dissector_handle_t wassp_handle;",
          "2100:  wassp_handle = create_dissector_handle(dissect_wassp_static, proto_wassp);",
          "2101:  dissector_add_uint_range_with_preference(\"udp.port\", PORT_WASSP_RANGE, wassp_handle);",
          "2104:  heur_dissector_add(\"udp\", dissect_wassp_heur, \"WASSP over UDP\", \"wassp_udp\", proto_wassp, HEURISTIC_DISABLE);",
          "2106:  snmp_handle = find_dissector_add_dependency(\"snmp\", proto_wassp);",
          "2107:  ieee80211_handle = find_dissector_add_dependency(\"wlan_withoutfcs\", proto_wassp);",
          "2108: }",
          "",
          "[Removed Lines]",
          "19:   BM (old):",
          "20:   BP (old):",
          "24:   TODO:",
          "25:   - Improve heuristics!!!",
          "26:   - Verify TLV descriptions/types",
          "27:   - Add TLV descriptions",
          "28:   - Fix 802.11 frame dissection",
          "38: void proto_register_wassp(void);",
          "39: void proto_reg_handoff_wassp(void);",
          "42: static int proto_wassp = -1;",
          "44: static dissector_handle_t snmp_handle;",
          "45: static dissector_handle_t ieee80211_handle;",
          "48: static int ett_wassp = -1;",
          "49: static int ett_wassp_tlv_header = -1;",
          "53: static int hf_wassp_tlv_type = -1;",
          "54: static int hf_wassp_tlv_length = -1;",
          "55: static int hf_wassp_tlv_data = -1;",
          "57: static int hf_wassp_version = -1;",
          "58: static int hf_wassp_type = -1;",
          "59: static int hf_wassp_seqno = -1;",
          "60: static int hf_wassp_flags = -1;",
          "61: static int hf_wassp_sessionid = -1;",
          "62: static int hf_wassp_length = -1;",
          "66: static int hf_status = -1;",
          "67: static int hf_ru_soft_version = -1;",
          "68: static int hf_ru_serial_number = -1;",
          "69: static int hf_ru_challenge = -1;",
          "70: static int hf_ru_response = -1;",
          "71: static int hf_ac_ipaddr = -1;",
          "72: static int hf_ru_vns_id = -1;",
          "73: static int hf_tftp_server = -1;",
          "74: static int hf_image_path = -1;",
          "75: static int hf_ru_config = -1;",
          "76: static int hf_ru_state = -1;",
          "77: static int hf_ru_session_key = -1;",
          "78: static int hf_message_type = -1;",
          "79: static int hf_random_number = -1;",
          "80: static int hf_standby_timeout = -1;",
          "81: static int hf_ru_challenge_id = -1;",
          "82: static int hf_ru_model = -1;",
          "83: static int hf_ru_scan_mode = -1;",
          "84: static int hf_ru_scan_type = -1;",
          "85: static int hf_ru_scan_interval = -1;",
          "86: static int hf_ru_radio_type = -1;",
          "87: static int hf_ru_channel_dwell_time = -1;",
          "88: static int hf_ru_channel_list = -1;",
          "89: static int hf_ru_trap = -1;",
          "90: static int hf_ru_scan_times = -1;",
          "91: static int hf_ru_scan_delay = -1;",
          "92: static int hf_ru_scan_req_id = -1;",
          "93: static int hf_static_config = -1;",
          "94: static int hf_local_bridging = -1;",
          "95: static int hf_static_bp_ipaddr = -1;",
          "96: static int hf_static_bp_netmask = -1;",
          "97: static int hf_static_bp_gateway = -1;",
          "98: static int hf_static_bm_ipaddr = -1;",
          "99: static int hf_ru_alarm = -1;",
          "100: static int hf_bp_request_id = -1;",
          "101: static int hf_snmp_error_status = -1;",
          "102: static int hf_snmp_error_index = -1;",
          "103: static int hf_ap_img_to_ram = -1;",
          "104: static int hf_ap_img_role = -1;",
          "105: static int hf_ap_stats_block = -1;",
          "106: static int hf_ap_stats_block_ether = -1;",
          "107: static int hf_ap_stats_block_radio_a = -1;",
          "108: static int hf_ap_stats_block_radio_b_g = -1;",
          "109: static int hf_mu_stats_block = -1;",
          "110: static int hf_mu_stats_block_65 = -1;",
          "111: static int hf_dot1x_stats_block = -1;",
          "112: static int hf_block_config = -1;",
          "113: static int hf_config_radio = -1;",
          "114: static int hf_config_vns = -1;",
          "115: static int hf_wassp_vlan_tag = -1;",
          "116: static int hf_wassp_tunnel_type = -1;",
          "117: static int hf_ap_dhcp_mode = -1;",
          "118: static int hf_ap_ipaddr = -1;",
          "119: static int hf_ap_netmask = -1;",
          "120: static int hf_ap_gateway = -1;",
          "121: static int hf_preauth_resp = -1;",
          "122: static int hf_bp_pmk = -1;",
          "123: static int hf_ac_reg_challenge = -1;",
          "124: static int hf_ac_reg_response = -1;",
          "125: static int hf_stats = -1;",
          "126: static int hf_certificate = -1;",
          "127: static int hf_radio_id = -1;",
          "128: static int hf_network_id = -1;",
          "129: static int hf_mu_mac = -1;",
          "130: static int hf_time = -1;",
          "131: static int hf_num_radios = -1;",
          "132: static int hf_radio_info = -1;",
          "133: static int hf_network_info = -1;",
          "134: static int hf_vendor_id = -1;",
          "135: static int hf_product_id = -1;",
          "136: static int hf_radio_info_ack = -1;",
          "137: static int hf_mu_rf_stats_block = -1;",
          "138: static int hf_stats_request_type = -1;",
          "139: static int hf_stats_last = -1;",
          "140: static int hf_mu_pmkid_list = -1;",
          "141: static int hf_mu_pmk_bp = -1;",
          "142: static int hf_mu_pmkid_bp = -1;",
          "143: static int hf_countdown_time = -1;",
          "145: static int hf_wassp_discover1 = -1;",
          "147: static int hf_wassp_discover2 = -1;",
          "148: static int hf_wassp_subtype = -1;",
          "149: static int hf_wassp_ether = -1;",
          "150: static int hf_wassp_discover3 = -1;",
          "155: static int hf_stats_dot11_ackfailurecount = -1;",
          "156: static int hf_stats_dot11_fcserrorcount = -1;",
          "157: static int hf_stats_dot11_failedcount = -1;",
          "158: static int hf_stats_dot11_frameduplicatecount = -1;",
          "159: static int hf_stats_dot11_multicastreceivedframecount = -1;",
          "160: static int hf_stats_dot11_multicasttransmittedframecount = -1;",
          "161: static int hf_stats_dot11_multipleretrycount = -1;",
          "162: static int hf_stats_dot11_rtsfailurecount = -1;",
          "163: static int hf_stats_dot11_rtssuccesscount = -1;",
          "164: static int hf_stats_dot11_receivedfragementcount = -1;",
          "165: static int hf_stats_dot11_retrycount = -1;",
          "166: static int hf_stats_dot11_transmittedfragmentcount = -1;",
          "167: static int hf_stats_dot11_transmittedframecount = -1;",
          "168: static int hf_stats_dot11_webundecryptablecount = -1;",
          "169: static int hf_stats_dot11_wepexcludedcount = -1;",
          "170: static int hf_stats_dot11_wepicverrorcount = -1;",
          "171: static int hf_stats_drm_allocfailures = -1;",
          "172: static int hf_stats_drm_currentchannel = -1;",
          "173: static int hf_stats_drm_currentpower = -1;",
          "174: static int hf_stats_drm_datatxfailures = -1;",
          "175: static int hf_stats_drm_devicetype = -1;",
          "176: static int hf_stats_drm_indatapackets = -1;",
          "177: static int hf_stats_drm_inmgmtpackets = -1;",
          "178: static int hf_stats_drm_loadfactor = -1;",
          "179: static int hf_stats_drm_mgmttxfailures = -1;",
          "180: static int hf_stats_drm_msgqfailures = -1;",
          "181: static int hf_stats_drm_nodrmcurrentchannel = -1;",
          "182: static int hf_stats_drm_outdatapackets = -1;",
          "183: static int hf_stats_drm_outmgmtpackets = -1;",
          "184: static int hf_stats_if_inbcastpackets = -1;",
          "185: static int hf_stats_if_indiscards = -1;",
          "186: static int hf_stats_if_inerrors = -1;",
          "187: static int hf_stats_if_inmcastpackets = -1;",
          "188: static int hf_stats_if_inoctets = -1;",
          "189: static int hf_stats_if_inucastpackets = -1;",
          "190: static int hf_stats_if_mtu = -1;",
          "191: static int hf_stats_if_outbcastpackets = -1;",
          "192: static int hf_stats_if_outdiscards = -1;",
          "193: static int hf_stats_if_outerrors = -1;",
          "194: static int hf_stats_if_outoctets = -1;",
          "195: static int hf_stats_if_outucastpackets = -1;",
          "196: static int hf_stats_if_outmcastpackets = -1;",
          "197: static int hf_stats_mu_address = -1;",
          "198: static int hf_stats_mu_associationcount = -1;",
          "199: static int hf_stats_mu_authenticationcount = -1;",
          "200: static int hf_stats_mu_deassociationcount = -1;",
          "201: static int hf_stats_mu_deauthenticationcount = -1;",
          "202: static int hf_stats_mu_ifindex = -1;",
          "203: static int hf_stats_mu_reassociationcount = -1;",
          "204: static int hf_stats_mu_receivedbytes = -1;",
          "205: static int hf_stats_mu_receivederrors = -1;",
          "206: static int hf_stats_mu_receivedframecount = -1;",
          "207: static int hf_stats_mu_receivedrssi = -1;",
          "208: static int hf_stats_mu_receivedrate = -1;",
          "209: static int hf_stats_mu_transmittedbytes = -1;",
          "210: static int hf_stats_mu_transmittederrors = -1;",
          "211: static int hf_stats_mu_transmittedframecount = -1;",
          "212: static int hf_stats_mu_transmittedrssi = -1;",
          "213: static int hf_stats_mu_transmittedrate = -1;",
          "214: static int hf_stats_mu_rf_stats_end = -1;",
          "215: static int hf_stats_rfc_1213_sysuptime = -1;",
          "216: static int hf_dot1x_stats_credent = -1;",
          "217: static int hf_dot1x_stats_end_date = -1;",
          "218: static int hf_stats_tlv_max = -1;",
          "220: static int hf_config_trace_status_debug = -1;",
          "221: static int hf_config_trace_status_config = -1;",
          "222: static int hf_config_use_bcast_for_disassc = -1;",
          "223: static int hf_config_bandwidth_voice_assc = -1;",
          "224: static int hf_config_bandwidth_voice_reassc = -1;",
          "225: static int hf_config_bandwidth_video_assc = -1;",
          "226: static int hf_config_bandwidth_video_reassc = -1;",
          "227: static int hf_config_bandwidth_video_reserve = -1;",
          "228: static int hf_config_bandwidth_adm_ctrl_reserve = -1;",
          "229: static int hf_config_vlan_tag = -1;",
          "230: static int hf_config_country_code = -1;",
          "231: static int hf_config_poll_duration = -1;",
          "232: static int hf_config_poll_interval = -1;",
          "233: static int hf_config_poll_maintain_client_session = -1;",
          "234: static int hf_config_telnet_enable = -1;",
          "235: static int hf_config_telnet_password = -1;",
          "236: static int hf_config_telnet_password_entry_mode = -1;",
          "237: static int hf_config_outdoor_enable_environment = -1;",
          "238: static int hf_config_slp_retry_count = -1;",
          "239: static int hf_config_slp_retry_delay = -1;",
          "240: static int hf_config_dns_retry_count = -1;",
          "241: static int hf_config_dns_retry_delay = -1;",
          "242: static int hf_config_mcast_slp_retry_count = -1;",
          "243: static int hf_config_mcast_slp_retry_delay = -1;",
          "244: static int hf_config_disc_retry_count = -1;",
          "245: static int hf_config_disc_retry_delay = -1;",
          "246: static int hf_config_logging_alarm_sev = -1;",
          "247: static int hf_config_blacklist_blacklist_add = -1;",
          "248: static int hf_config_failover_ac_ip_addr = -1;",
          "249: static int hf_config_static_ac_ip_addr = -1;",
          "250: static int hf_config_dhcp_assignment = -1;",
          "251: static int hf_config_static_ap_ip_addr = -1;",
          "252: static int hf_config_static_ap_ip_netmask = -1;",
          "253: static int hf_config_static_ap_default_gw = -1;",
          "254: static int hf_config_blacklist_del = -1;",
          "255: static int hf_config_macaddr_req = -1;",
          "256: static int hf_config_availability_mode = -1;",
          "258: static int hf_config_vns_radio_id = -1;",
          "259: static int hf_config_vns_vns_id = -1;",
          "260: static int hf_config_vns_turbo_voice = -1;",
          "261: static int hf_config_vns_prop_ie = -1;",
          "262: static int hf_config_vns_enable_802_11_h = -1;",
          "263: static int hf_config_vns_power_backoff = -1;",
          "264: static int hf_config_vns_bridge_mode = -1;",
          "265: static int hf_config_vns_vlan_tag = -1;",
          "266: static int hf_config_vns_process_ie_req = -1;",
          "267: static int hf_config_vns_enable_u_apsd = -1;",
          "268: static int hf_config_vns_adm_ctrl_voice = -1;",
          "269: static int hf_config_vns_adm_ctrl_video = -1;",
          "270: static int hf_config_vns_qos_up_value = -1;",
          "271: static int hf_config_vns_priority_override = -1;",
          "272: static int hf_config_vns_dscp_override_value = -1;",
          "273: static int hf_config_vns_enable_802_11_e = -1;",
          "274: static int hf_config_vns_enable_wmm = -1;",
          "275: static int hf_config_vns_legacy_client_priority = -1;",
          "276: static int hf_config_vns_ssid_id = -1;",
          "277: static int hf_config_vns_ssid_bcast_string = -1;",
          "278: static int hf_config_vns_ssid_suppress = -1;",
          "279: static int hf_config_vns_802_1_x_enable = -1;",
          "280: static int hf_config_vns_802_1_x_dyn_rekey = -1;",
          "281: static int hf_config_vns_wpa_enable = -1;",
          "282: static int hf_config_vns_wpa_v2_enable = -1;",
          "283: static int hf_config_vns_wpa_passphrase = -1;",
          "284: static int hf_config_vns_wpa_cipher_type = -1;",
          "285: static int hf_config_vns_wpa_v2_cipher_type = -1;",
          "286: static int hf_config_vns_wep_key_index = -1;",
          "287: static int hf_config_vns_wep_default_key_value = -1;",
          "288: static int hf_config_vns_channel_report = -1;",
          "289: static int hf_config_vns_wds_service = -1;",
          "290: static int hf_config_vns_wds_pref_parent = -1;",
          "291: static int hf_config_vns_wds_bridge = -1;",
          "292: static int hf_config_vns_okc_enabled = -1;",
          "293: static int hf_config_vns_mu_assoc_retries = -1;",
          "294: static int hf_config_vns_mu_assoc_timeout = -1;",
          "295: static int hf_config_vns_wds_parent = -1;",
          "296: static int hf_config_vns_wds_back_parent = -1;",
          "297: static int hf_config_vns_wds_name = -1;",
          "299: static int hf_config_radio_radio_id = -1;",
          "300: static int hf_config_radio_enable_radio = -1;",
          "301: static int hf_config_radio_channel = -1;",
          "302: static int hf_config_radio_op_rate_set = -1;",
          "303: static int hf_config_radio_op_rate_max = -1;",
          "304: static int hf_config_radio_beacon_period = -1;",
          "305: static int hf_config_radio_dtim_period = -1;",
          "306: static int hf_config_radio_rts_threshold = -1;",
          "307: static int hf_config_radio_fragment_threshold = -1;",
          "308: static int hf_config_radio_power_level = -1;",
          "309: static int hf_config_radio_diversity_rx = -1;",
          "310: static int hf_config_radio_diversity_tx = -1;",
          "311: static int hf_config_radio_short_preamble = -1;",
          "312: static int hf_config_radio_basic_rate_max = -1;",
          "313: static int hf_config_radio_basic_rate_min = -1;",
          "314: static int hf_config_radio_hw_retries = -1;",
          "315: static int hf_config_radio_tx_power_min = -1;",
          "316: static int hf_config_radio_tx_power_max = -1;",
          "317: static int hf_config_radio_domain_id = -1;",
          "318: static int hf_config_radio_b_enable = -1;",
          "319: static int hf_config_radio_b_basic_rates = -1;",
          "320: static int hf_config_radio_g_enable = -1;",
          "321: static int hf_config_radio_g_protect_mode = -1;",
          "322: static int hf_config_radio_g_protect_type = -1;",
          "323: static int hf_config_radio_g_protect_rate = -1;",
          "324: static int hf_config_radio_g_basic_rate = -1;",
          "325: static int hf_config_radio_a_support_802_11_j = -1;",
          "326: static int hf_config_radio_atpc_en_interval = -1;",
          "327: static int hf_config_radio_acs_ch_list = -1;",
          "328: static int hf_config_radio_tx_power_adj = -1;",
          "330: static expert_field ei_wassp_length_too_short = EI_INIT;",
          "339: typedef struct _ext_value_string {",
          "340:  guint32      value;",
          "341:  const gchar *strptr;",
          "342:  int         *hf_element;",
          "343:  int (*specialfunction)(tvbuff_t *, packet_info *, proto_tree *, guint32,",
          "344:           guint32, const struct _ext_value_string *);",
          "345:  const struct _ext_value_string *evs;",
          "346: } ext_value_string;",
          "349: static const gchar *",
          "350: match_strextval_idx(guint32 val, const ext_value_string *vs, gint *idx) {",
          "351:  gint i = 0;",
          "353:  if(vs) {",
          "354:   while (vs[i].strptr) {",
          "355:    if (vs[i].value == val) {",
          "356:     if (idx)",
          "358:     return(vs[i].strptr);",
          "359:    }",
          "360:    i++;",
          "361:   }",
          "362:  }",
          "364:  if (idx)",
          "366:  return NULL;",
          "367: }",
          "369: static const gchar*",
          "370: extval_to_str_idx(guint32 val, const ext_value_string *vs, gint *idx, const char *fmt) {",
          "371:  const gchar *ret;",
          "373:  if (!fmt)",
          "374:   fmt=\"Unknown\";",
          "376:  ret = match_strextval_idx(val, vs, idx);",
          "377:  if (ret != NULL)",
          "378:   return ret;",
          "380:  return wmem_strdup_printf(wmem_packet_scope(), fmt, val);",
          "381: }",
          "385: static int dissect_snmp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *wassp_tree,",
          "386:  volatile guint32 offset, guint32 length, const ext_value_string *value_array);",
          "387: static int dissect_ieee80211(tvbuff_t *tvb, packet_info *pinfo, proto_tree *wassp_tree,",
          "388:  volatile guint32 offset, guint32 length, const ext_value_string *value_array);",
          "389: static int dissect_tlv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *wassp_tree,",
          "390:  guint32 offset, guint32 length, const ext_value_string *value_array);",
          "392: static const ext_value_string wassp_tunnel_tlv_config_vns_tlv_vals[] = {",
          "393:  { 1, \"V_RADIO_ID\", &hf_config_vns_radio_id, NULL, NULL },",
          "394:  { 2, \"V_VNS_ID\", &hf_config_vns_vns_id, NULL, NULL },",
          "395:  { 3, \"V_TURBO_VOICE\", &hf_config_vns_turbo_voice, NULL, NULL },",
          "396:  { 4, \"V_PROP_IE\", &hf_config_vns_prop_ie, NULL, NULL },",
          "397:  { 5, \"V_ENABLE_802_11_H\", &hf_config_vns_enable_802_11_h, NULL, NULL },",
          "398:  { 6, \"V_POWER_BACKOFF\", &hf_config_vns_power_backoff, NULL, NULL },",
          "399:  { 7, \"V_BRIDGE_MODE\", &hf_config_vns_bridge_mode, NULL, NULL },",
          "400:  { 8, \"V_VLAN_TAG\", &hf_config_vns_vlan_tag, NULL, NULL },",
          "401:  { 9, \"V_PROCESS_IE_REQ\", &hf_config_vns_process_ie_req, NULL, NULL },",
          "402:  { 10, \"V_ENABLE_U_APSD\", &hf_config_vns_enable_u_apsd, NULL, NULL },",
          "403:  { 11, \"V_ADM_CTRL_VOICE\", &hf_config_vns_adm_ctrl_voice, NULL, NULL },",
          "404:  { 12, \"V_ADM_CTRL_VIDEO\", &hf_config_vns_adm_ctrl_video, NULL, NULL },",
          "405:  { 13, \"V_QOS_UP_VALUE\", &hf_config_vns_qos_up_value, NULL, NULL },",
          "406:  { 14, \"V_PRIORITY_OVERRIDE\", &hf_config_vns_priority_override, NULL, NULL },",
          "407:  { 15, \"V_DSCP_OVERRIDE_VALUE\", &hf_config_vns_dscp_override_value, NULL, NULL },",
          "408:  { 16, \"V_ENABLE_802_11_E\", &hf_config_vns_enable_802_11_e, NULL, NULL },",
          "409:  { 17, \"V_ENABLE_WMM\", &hf_config_vns_enable_wmm, NULL, NULL },",
          "410:  { 18, \"V_LEGACY_CLIENT_PRIORITY\", &hf_config_vns_legacy_client_priority, NULL, NULL },",
          "411:  { 19, \"V_SSID_ID\", &hf_config_vns_ssid_id, NULL, NULL },",
          "412:  { 20, \"V_SSID_BCAST_STRING\", &hf_config_vns_ssid_bcast_string, NULL, NULL },",
          "413:  { 21, \"V_SSID_SUPPRESS\", &hf_config_vns_ssid_suppress, NULL, NULL },",
          "414:  { 22, \"V_802_1_X_ENABLE\", &hf_config_vns_802_1_x_enable, NULL, NULL },",
          "415:  { 23, \"V_802_1_X_DYN_REKEY\", &hf_config_vns_802_1_x_dyn_rekey, NULL, NULL },",
          "416:  { 24, \"V_WPA_ENABLE\", &hf_config_vns_wpa_enable, NULL, NULL },",
          "417:  { 25, \"V_WPA_V2_ENABLE\", &hf_config_vns_wpa_v2_enable, NULL, NULL },",
          "418:  { 26, \"V_WPA_PASSPHRASE\", &hf_config_vns_wpa_passphrase, NULL, NULL },",
          "419:  { 27, \"V_WPA_CIPHER_TYPE\", &hf_config_vns_wpa_cipher_type, NULL, NULL },",
          "420:  { 28, \"V_WPA_V2_CIPHER_TYPE\", &hf_config_vns_wpa_v2_cipher_type, NULL, NULL },",
          "421:  { 29, \"V_WEP_KEY_INDEX\", &hf_config_vns_wep_key_index, NULL, NULL },",
          "422:  { 30, \"V_WEP_DEFAULT_KEY_VALUE\", &hf_config_vns_wep_default_key_value, NULL, NULL },",
          "423:  { 31, \"V_CHANNEL_REPORT\", &hf_config_vns_channel_report, NULL, NULL },",
          "424:  { 32, \"V_WDS_SERVICE\", &hf_config_vns_wds_service, NULL, NULL },",
          "425:  { 33, \"V_WDS_PREF_PARENT\", &hf_config_vns_wds_pref_parent, NULL, NULL },",
          "426:  { 34, \"V_WDS_BRIDGE\", &hf_config_vns_wds_bridge, NULL, NULL },",
          "427:  { 35, \"V_OKC_ENABLED\", &hf_config_vns_okc_enabled, NULL, NULL },",
          "428:  { 36, \"V_MU_ASSOC_RETRIES\", &hf_config_vns_mu_assoc_retries, NULL, NULL },",
          "429:  { 37, \"V_MU_ASSOC_TIMEOUT\", &hf_config_vns_mu_assoc_timeout, NULL, NULL },",
          "430:  { 38, \"V_WDS_PARENT\", &hf_config_vns_wds_parent, NULL, NULL },",
          "431:  { 39, \"V_WDS_BACK_PARENT\", &hf_config_vns_wds_back_parent, NULL, NULL },",
          "432:  { 40, \"V_WDS_NAME\", &hf_config_vns_wds_name, NULL, NULL },",
          "434:  { 0, NULL, NULL, NULL, NULL }",
          "435: };",
          "437: static const ext_value_string wassp_tunnel_tlv_config_radio_tlv_vals[] = {",
          "438:  { 1, \"R_RADIO_ID\", &hf_config_radio_radio_id, NULL, NULL },",
          "439:  { 2, \"R_ENABLE_RADIO\", &hf_config_radio_enable_radio, NULL, NULL },",
          "440:  { 3, \"R_CHANNEL\", &hf_config_radio_channel, NULL, NULL },",
          "441:  { 4, \"R_OP_RATE_SET\", &hf_config_radio_op_rate_set, NULL, NULL },",
          "442:  { 5, \"R_OP_RATE_MAX\", &hf_config_radio_op_rate_max, NULL, NULL },",
          "443:  { 6, \"R_BEACON_PERIOD\", &hf_config_radio_beacon_period, NULL, NULL },",
          "444:  { 7, \"R_DTIM_PERIOD\", &hf_config_radio_dtim_period, NULL, NULL },",
          "445:  { 8, \"R_RTS_THRESHOLD\", &hf_config_radio_rts_threshold, NULL, NULL },",
          "446:  { 9, \"R_RETRY_LIMIT_SHORT\", /* hf_, */ NULL, NULL, NULL },",
          "447:  { 10, \"R_RETRY_LIMIT_LONG\", /* hf_, */ NULL, NULL, NULL },",
          "448:  { 11, \"R_FRAGMENT_THRESHOLD\", &hf_config_radio_fragment_threshold, NULL, NULL },",
          "449:  { 12, \"R_POWER_LEVEL\", &hf_config_radio_power_level, NULL, NULL },",
          "450:  { 13, \"R_DIVERSITY_LEFT\", /* hf_, */ NULL, NULL, NULL },",
          "451:  { 14, \"R_DIVERSITY_RIGHT\", /* hf_, */ NULL, NULL, NULL },",
          "452:  { 15, \"R_DIVERSITY_RX\", &hf_config_radio_diversity_rx, NULL, NULL },",
          "453:  { 16, \"R_DIVERSITY_TX\", &hf_config_radio_diversity_tx, NULL, NULL },",
          "454:  { 17, \"R_SHORT_PREAMBLE\", &hf_config_radio_short_preamble, NULL, NULL },",
          "455:  { 18, \"R_BASIC_RATE_MAX\", &hf_config_radio_basic_rate_max, NULL, NULL },",
          "456:  { 19, \"R_BASIC_RATE_MIN\", &hf_config_radio_basic_rate_min, NULL, NULL },",
          "457:  { 20, \"R_HW_RETRIES\", &hf_config_radio_hw_retries, NULL, NULL },",
          "458:  { 21, \"R_DRM_TX_POWER_MIN\", &hf_config_radio_tx_power_min, NULL, NULL },",
          "459:  { 22, \"R_DRM_TX_POWER_MAX\", &hf_config_radio_tx_power_max, NULL, NULL },",
          "460:  { 23, \"R_DRM_AVOID_WLAN\", /* hf_, */ NULL, NULL, NULL },",
          "461:  { 24, \"R_DRM_DOMAIN_ID\", &hf_config_radio_domain_id, NULL, NULL },",
          "462:  { 25, \"R_B_ENABLE\", &hf_config_radio_b_enable, NULL, NULL },",
          "463:  { 26, \"R_B_BASIC_RATES\", &hf_config_radio_b_basic_rates, NULL, NULL },",
          "464:  { 27, \"R_G_ENABLE\", &hf_config_radio_g_enable, NULL, NULL },",
          "465:  { 28, \"R_G_PROTECT_MODE\", &hf_config_radio_g_protect_mode, NULL, NULL },",
          "466:  { 29, \"R_G_PROTECT_TYPE\", &hf_config_radio_g_protect_type, NULL, NULL },",
          "467:  { 30, \"R_G_PROTECT_RATE\", &hf_config_radio_g_protect_rate, NULL, NULL },",
          "468:  { 31, \"R_G_BASIC_RATE\", &hf_config_radio_g_basic_rate, NULL, NULL },",
          "469:  { 32, \"R_A_SUPPORT_802_11_J\", &hf_config_radio_a_support_802_11_j, NULL, NULL },",
          "470:  { 33, \"R_ATPC_EN_INTERVAL\", &hf_config_radio_atpc_en_interval, NULL, NULL },",
          "471:  { 34, \"R_ACS_CH_LIST\", &hf_config_radio_acs_ch_list, NULL, NULL },",
          "472:  { 35, \"R_TX_POWER_ADJ\", &hf_config_radio_tx_power_adj, NULL, NULL },",
          "474:  { 0, NULL, NULL, NULL, NULL }",
          "477: static const ext_value_string wassp_tunnel_tlv_config_tlv_vals[] = {",
          "478:  { 1, \"RADIO_CONFIG_BLOCK\", &hf_config_radio, dissect_tlv, wassp_tunnel_tlv_config_radio_tlv_vals },",
          "479:  { 2, \"VNS_CONFIG_BLOCK\", &hf_config_vns, dissect_tlv, wassp_tunnel_tlv_config_vns_tlv_vals },",
          "480:  { 3, \"DIVERSITY_LEFT\", /* hf_, */ NULL, NULL, NULL },",
          "481:  { 4, \"DIVERSITY_RIGHT\", /* hf_, */ NULL, NULL, NULL },",
          "482:  { 5, \"TRACE_STATUS_DEBUG\", &hf_config_trace_status_debug, NULL, NULL },",
          "483:  { 6, \"TRACE_STATUS_CONFIG\", &hf_config_trace_status_config, NULL, NULL },",
          "484:  { 7, \"BRIDGE_AT_AP\", /* hf_, */ NULL, NULL, NULL },",
          "485:  { 8, \"USE_BCAST_FOR_DISASSC\", &hf_config_use_bcast_for_disassc, NULL, NULL },",
          "486:  { 9, \"BANDWIDTH_VOICE_ASSC\", &hf_config_bandwidth_voice_assc, NULL, NULL },",
          "487:  { 10, \"BANDWIDTH_VOICE_REASSC\", &hf_config_bandwidth_voice_reassc, NULL, NULL },",
          "488:  { 11, \"BANDWIDTH_VIDEO_ASSC\", &hf_config_bandwidth_video_assc, NULL, NULL },",
          "489:  { 12, \"BANDWIDTH_VIDEO_REASSC\", &hf_config_bandwidth_video_reassc, NULL, NULL },",
          "490:  { 13, \"BANDWIDTH_VIDEO_RESERVE\", &hf_config_bandwidth_video_reserve, NULL, NULL },",
          "491:  { 14, \"BANDWIDTH_ADM_CTRL_RESERVE\", &hf_config_bandwidth_adm_ctrl_reserve, NULL, NULL },",
          "492:  { 15, \"VLAN_TAG\", &hf_config_vlan_tag, NULL, NULL },",
          "493:  { 16, \"COUNTRY_CODE\", &hf_config_country_code, NULL, NULL },",
          "494:  { 17, \"POLL_DURATION\", &hf_config_poll_duration, NULL, NULL },",
          "495:  { 18, \"POLL_INTERVAL\", &hf_config_poll_interval, NULL, NULL },",
          "496:  { 19, \"POLL_REBOOT_ON_FAIL\", /* hf_, */ NULL, NULL, NULL },",
          "497:  { 20, \"POLL_MAINTAIN_CLIENT_SESSION\", &hf_config_poll_maintain_client_session, NULL, NULL },",
          "498:  { 21, \"TELNET_ENABLE\", &hf_config_telnet_enable, NULL, NULL },",
          "499:  { 22, \"TELNET_PASSWORD\", &hf_config_telnet_password, NULL, NULL },",
          "500:  { 23, \"TELNET_PASSWORD_ENTRY_MODE\", &hf_config_telnet_password_entry_mode, NULL, NULL },",
          "501:  { 24, \"OUTDOOR_ENABLE-ENVIRONMENT\", &hf_config_outdoor_enable_environment, NULL, NULL },",
          "502:  { 25, \"BSS_COUNT\", /* hf_, */ NULL, NULL, NULL },",
          "503:  { 26, \"DRM_ENABLE\", /* hf_, */ NULL, NULL, NULL },",
          "504:  { 27, \"DRM_ENABLE_SHAPE_COV\", /* hf_, */ NULL, NULL, NULL },",
          "505:  { 28, \"SLP_RETRY_COUNT\", &hf_config_slp_retry_count, NULL, NULL },",
          "506:  { 29, \"SLP_RETRY_DELAY\", &hf_config_slp_retry_delay, NULL, NULL },",
          "507:  { 30, \"DNS_RETRY_COUNT\", &hf_config_dns_retry_count, NULL, NULL },",
          "508:  { 31, \"DNS_RETRY_DELAY\", &hf_config_dns_retry_delay, NULL, NULL },",
          "509:  { 32, \"MCAST_SLP_RETRY_COUNT\", &hf_config_mcast_slp_retry_count, NULL, NULL },",
          "510:  { 33, \"MCAST_SLP_RETRY_DELAY\", &hf_config_mcast_slp_retry_delay, NULL, NULL },",
          "511:  { 34, \"DISC_RETRY_COUNT\", &hf_config_disc_retry_count, NULL, NULL },",
          "512:  { 35, \"DISC_RETRY_DELAY\", &hf_config_disc_retry_delay, NULL, NULL },",
          "513:  { 36, \"LOGGING_ALARM_SEV\", &hf_config_logging_alarm_sev, NULL, NULL },",
          "514:  { 37, \"BLACKLIST-BLACKLIST_ADD\", &hf_config_blacklist_blacklist_add, NULL, NULL },",
          "515:  { 38, \"FAILOVER_AC_IP_ADDR\", &hf_config_failover_ac_ip_addr, NULL, NULL },",
          "516:  { 39, \"STATIC_AC_IP_ADDR\", &hf_config_static_ac_ip_addr, NULL, NULL },",
          "517:  { 40, \"DHCP_ASSIGNMENT\", &hf_config_dhcp_assignment, NULL, NULL },",
          "518:  { 41, \"STATIC_AP_IP_ADDR\", &hf_config_static_ap_ip_addr, NULL, NULL },",
          "519:  { 42, \"STATIC_AP_IP_NETMASK\", &hf_config_static_ap_ip_netmask, NULL, NULL },",
          "520:  { 43, \"STATIC_AP_DEFAULT_GW\", &hf_config_static_ap_default_gw, NULL, NULL },",
          "521:  { 44, \"BLACKLIST_DEL\", &hf_config_blacklist_del, NULL, NULL },",
          "522:  { 45, \"MACADDR_REQ\", &hf_config_macaddr_req, NULL, NULL },",
          "523:  { 46, \"AVAILABILITY_MODE\", &hf_config_availability_mode, NULL, NULL },",
          "524:  { 47, \"AP_PERSISTENCE\", /* hf_, */ NULL, NULL, NULL },",
          "525:  { 48, \"FOREIGN_AP\", /* hf_, */ NULL, NULL, NULL },",
          "526:  { 49, \"SUPP1X_CREDENTIAL_REMOVE\", /* hf_, */ NULL, NULL, NULL },",
          "527:  { 50, \"SUPP1X_CERT_TFTP_IP\", /* hf_, */ NULL, NULL, NULL },",
          "528:  { 51, \"SUPP1X_CERT_TFTP_PATH\", /* hf_, */ NULL, NULL, NULL },",
          "529:  { 52, \"SUPP1X_PRIVATE\", /* hf_, */ NULL, NULL, NULL },",
          "530:  { 53, \"SUPP1X_DOMAIN\", /* hf_, */ NULL, NULL, NULL },",
          "531:  { 54, \"SUPP1X_USERID\", /* hf_, */ NULL, NULL, NULL },",
          "532:  { 55, \"SUPP1X_PASSWORD\", /* hf_, */ NULL, NULL, NULL },",
          "533:  { 56, \"SUPP1X_CREDENT\", /* hf_, */ NULL, NULL, NULL },",
          "534:  { 57, \"SUPP1X_SERIAL\", /* hf_, */ NULL, NULL, NULL },",
          "535:  { 58, \"SUPP1X_START_DATE\", /* hf_, */ NULL, NULL, NULL },",
          "536:  { 59, \"SUPP1X_END_DATE\", /* hf_, */ NULL, NULL, NULL },",
          "537:  { 60, \"SUPP1X_ISSUED_BY\", /* hf_, */ NULL, NULL, NULL },",
          "538:  { 61, \"SUPP1X_ISSUED_TO\", /* hf_, */ NULL, NULL, NULL },",
          "540:  { 0, NULL, NULL, NULL, NULL }",
          "541: };",
          "543: static const ext_value_string wassp_tunnel_mu_stats_block_65_tlv_vals[] = {",
          "545:  { 0, NULL, NULL, NULL, NULL }",
          "548: static const ext_value_string wassp_tunnel_mu_stats_block_tlv_vals[] = {",
          "549:  { 65, \"MU_STATS_BLOCK_65\", &hf_mu_stats_block_65, dissect_tlv, wassp_tunnel_mu_stats_block_65_tlv_vals },",
          "551:  { 0, NULL, NULL, NULL, NULL }",
          "552: };",
          "554: static const ext_value_string wassp_tunnel_ap_stats_block_tlv_vals[] = {",
          "555:  { 1, \"DOT11_ACKFailureCount\", &hf_stats_dot11_ackfailurecount, NULL, NULL },",
          "556:  { 2, \"DOT11_FCSErrorCount\", &hf_stats_dot11_fcserrorcount, NULL, NULL },",
          "557:  { 3, \"DOT11_FailedCount\", &hf_stats_dot11_failedcount, NULL, NULL },",
          "558:  { 4, \"DOT11_FrameDuplicateCount\", &hf_stats_dot11_frameduplicatecount, NULL, NULL },",
          "559:  { 5, \"DOT11_MulticastReceivedFrameCount\", &hf_stats_dot11_multicastreceivedframecount, NULL, NULL },",
          "560:  { 6, \"DOT11_MulticastTransmittedFrameCount\", &hf_stats_dot11_multicasttransmittedframecount, NULL, NULL },",
          "561:  { 7, \"DOT11_MultipleRetryCount\", &hf_stats_dot11_multipleretrycount, NULL, NULL },",
          "562:  { 8, \"DOT11_RTSFailureCount\", &hf_stats_dot11_rtsfailurecount, NULL, NULL },",
          "563:  { 9, \"DOT11_RTSSuccessCount\", &hf_stats_dot11_rtssuccesscount, NULL, NULL },",
          "564:  { 10, \"DOT11_ReceivedFragementCount\", &hf_stats_dot11_receivedfragementcount, NULL, NULL },",
          "565:  { 11, \"DOT11_RetryCount\", &hf_stats_dot11_retrycount, NULL, NULL },",
          "566:  { 12, \"DOT11_TransmittedFragmentCount\", &hf_stats_dot11_transmittedfragmentcount, NULL, NULL },",
          "567:  { 13, \"DOT11_TransmittedFrameCount\", &hf_stats_dot11_transmittedframecount, NULL, NULL },",
          "568:  { 14, \"DOT11_WEBUndecryptableCount\", &hf_stats_dot11_webundecryptablecount, NULL, NULL },",
          "569:  { 15, \"DOT11_WEPExcludedCount\", &hf_stats_dot11_wepexcludedcount, NULL, NULL },",
          "570:  { 16, \"DOT11_WEPICVErrorCount\", &hf_stats_dot11_wepicverrorcount, NULL, NULL },",
          "571:  { 17, \"DRM_AllocFailures\", &hf_stats_drm_allocfailures, NULL, NULL },",
          "572:  { 18, \"DRM_CurrentChannel\", &hf_stats_drm_currentchannel, NULL, NULL },",
          "573:  { 19, \"DRM_CurrentPower\", &hf_stats_drm_currentpower, NULL, NULL },",
          "574:  { 20, \"DRM_DataTxFailures\", &hf_stats_drm_datatxfailures, NULL, NULL },",
          "575:  { 21, \"DRM_DeviceType\", &hf_stats_drm_devicetype, NULL, NULL },",
          "576:  { 22, \"DRM_InDataPackets\", &hf_stats_drm_indatapackets, NULL, NULL },",
          "577:  { 23, \"DRM_InMgmtPackets\", &hf_stats_drm_inmgmtpackets, NULL, NULL },",
          "578:  { 24, \"DRM_LoadFactor\", &hf_stats_drm_loadfactor, NULL, NULL },",
          "579:  { 25, \"DRM_MgmtTxFailures\", &hf_stats_drm_mgmttxfailures, NULL, NULL },",
          "580:  { 26, \"DRM_MsgQFailures\", &hf_stats_drm_msgqfailures, NULL, NULL },",
          "581:  { 27, \"DRM_NoDRMCurrentChannel\", &hf_stats_drm_nodrmcurrentchannel, NULL, NULL },",
          "582:  { 28, \"DRM_OutDataPackets\", &hf_stats_drm_outdatapackets, NULL, NULL },",
          "583:  { 29, \"DRM_OutMgmtPackets\", &hf_stats_drm_outmgmtpackets, NULL, NULL },",
          "584:  { 30, \"IF_InBcastPackets\", &hf_stats_if_inbcastpackets, NULL, NULL },",
          "585:  { 31, \"IF_InDiscards\", &hf_stats_if_indiscards, NULL, NULL },",
          "586:  { 32, \"IF_InErrors\", &hf_stats_if_inerrors, NULL, NULL },",
          "587:  { 33, \"IF_InMcastPackets\", &hf_stats_if_inmcastpackets, NULL, NULL },",
          "588:  { 34, \"IF_InOctets\", &hf_stats_if_inoctets, NULL, NULL },",
          "589:  { 35, \"IF_InUcastPackets\", &hf_stats_if_inucastpackets, NULL, NULL },",
          "590:  { 36, \"IF_MTU\", &hf_stats_if_mtu, NULL, NULL },",
          "591:  { 37, \"IF_OutBcastPackets\", &hf_stats_if_outbcastpackets, NULL, NULL },",
          "592:  { 38, \"IF_OutDiscards\", &hf_stats_if_outdiscards, NULL, NULL },",
          "593:  { 39, \"IF_OutErrors\", &hf_stats_if_outerrors, NULL, NULL },",
          "594:  { 40, \"IF_OutOctets\", &hf_stats_if_outoctets, NULL, NULL },",
          "595:  { 41, \"IF_OutUcastPackets\", &hf_stats_if_outucastpackets, NULL, NULL },",
          "596:  { 42, \"IF_OutMCastPackets\", &hf_stats_if_outmcastpackets, NULL, NULL },",
          "597:  { 43, \"MU_Address\", &hf_stats_mu_address, NULL, NULL },",
          "598:  { 44, \"MU_AssociationCount\", &hf_stats_mu_associationcount, NULL, NULL },",
          "599:  { 45, \"MU_AuthenticationCount\", &hf_stats_mu_authenticationcount, NULL, NULL },",
          "600:  { 46, \"MU_DeAssociationCount\", &hf_stats_mu_deassociationcount, NULL, NULL },",
          "601:  { 47, \"MU_DeAuthenticationCount\", &hf_stats_mu_deauthenticationcount, NULL, NULL },",
          "602:  { 48, \"MU_IfIndex\", &hf_stats_mu_ifindex, NULL, NULL },",
          "603:  { 49, \"MU_ReAssociationCount\", &hf_stats_mu_reassociationcount, NULL, NULL },",
          "604:  { 50, \"MU_ReceivedBytes\", &hf_stats_mu_receivedbytes, NULL, NULL },",
          "605:  { 51, \"MU_ReceivedErrors\", &hf_stats_mu_receivederrors, NULL, NULL },",
          "606:  { 52, \"MU_ReceivedFrameCount\", &hf_stats_mu_receivedframecount, NULL, NULL },",
          "607:  { 53, \"MU_ReceivedRSSI\", &hf_stats_mu_receivedrssi, NULL, NULL },",
          "608:  { 54, \"MU_ReceivedRate\", &hf_stats_mu_receivedrate, NULL, NULL },",
          "609:  { 55, \"MU_TransmittedBytes\", &hf_stats_mu_transmittedbytes, NULL, NULL },",
          "610:  { 56, \"MU_TransmittedErrors\", &hf_stats_mu_transmittederrors, NULL, NULL },",
          "611:  { 57, \"MU_TransmittedFrameCount\", &hf_stats_mu_transmittedframecount, NULL, NULL },",
          "612:  { 58, \"MU_TransmittedRSSI\", &hf_stats_mu_transmittedrssi, NULL, NULL },",
          "613:  { 59, \"MU_TransmittedRate\", &hf_stats_mu_transmittedrate, NULL, NULL },",
          "614:  { 60, \"MU_RF_STATS_END\", &hf_stats_mu_rf_stats_end, NULL, NULL },",
          "615:  { 61, \"RFC_1213_SYSUPTIME\", &hf_stats_rfc_1213_sysuptime, NULL, NULL },",
          "616:  { 62, \"STATS_ETHER_BLOCK\", &hf_ap_stats_block_ether, dissect_tlv, wassp_tunnel_ap_stats_block_tlv_vals },",
          "617:  { 63, \"STATS_RADIO_A_BLOCK\", &hf_ap_stats_block_radio_a, dissect_tlv, wassp_tunnel_ap_stats_block_tlv_vals },",
          "618:  { 64, \"STATS_RADIO_B_G_BLOCK\", &hf_ap_stats_block_radio_b_g, dissect_tlv, wassp_tunnel_ap_stats_block_tlv_vals },",
          "619:  { 65, \"MU_STATS_BLOCK\", &hf_mu_stats_block, dissect_tlv, wassp_tunnel_ap_stats_block_tlv_vals },",
          "620:  { 66, \"WDS_BLOCK\", /* hf_, */ NULL, NULL, NULL },",
          "621:  { 67, \"WDS_Role\", /* hf_, */ NULL, NULL, NULL },",
          "622:  { 68, \"WDS_PARENT_MAC\", /* hf_, */ NULL, NULL, NULL },",
          "623:  { 69, \"WDS_BSSID\", /* hf_, */ NULL, NULL, NULL },",
          "624:  { 70, \"DOT1x_STATS_BLOCK\", &hf_dot1x_stats_block, dissect_tlv, wassp_tunnel_ap_stats_block_tlv_vals },",
          "625:  { 71, \"DOT1x_CREDENT\", &hf_dot1x_stats_credent, NULL, NULL },",
          "626:  { 72, \"DOT1x_END_DATE\", &hf_dot1x_stats_end_date, NULL, NULL },",
          "627:  { 73, \"TLV_MAX\", &hf_stats_tlv_max, NULL, NULL },",
          "629:  { 0, NULL, NULL, NULL, NULL }",
          "630: };",
          "632: static const ext_value_string wassp_tunnel_tlv_vals[] = {",
          "633:  { 1, \"STATUS\", &hf_status, NULL, NULL },",
          "634:  { 2, \"RU-SOFT-VERSION\", &hf_ru_soft_version, NULL, NULL },",
          "635:  { 3, \"RU-SERIAL-NUMBER\", &hf_ru_serial_number, NULL, NULL },",
          "636:  { 4, \"RU-REG-CHALLENGE\", &hf_ru_challenge, NULL, NULL },",
          "637:  { 5, \"RU-REG-RESPONSE\", &hf_ru_response, NULL, NULL },",
          "638:  { 6, \"AC-IPADDR\", &hf_ac_ipaddr, NULL, NULL },",
          "639:  { 7, \"RU-VNS-ID\", &hf_ru_vns_id, NULL, NULL },",
          "640:  { 8, \"TFTP-SERVER\", &hf_tftp_server, NULL, NULL },",
          "641:  { 9, \"IMAGE-PATH\", &hf_image_path, NULL, NULL },",
          "642:  { 10, \"RU-CONFIG\", &hf_ru_config, dissect_snmp, NULL },",
          "643:  { 11, \"RU-STATE\", &hf_ru_state, NULL, NULL },",
          "644:  { 12, \"RU-SESSION-KEY\", &hf_ru_session_key, NULL, NULL },",
          "645:  { 13, \"MESSAGE-TYPE\", &hf_message_type, NULL, NULL },",
          "646:  { 14, \"RANDOM-NUMBER\", &hf_random_number, NULL, NULL },",
          "647:  { 15, \"STANDBY-TIMEOUT\", &hf_standby_timeout, NULL, NULL },",
          "648:  { 16, \"RU-CHALLENGE-ID\", &hf_ru_challenge_id, NULL, NULL },",
          "649:  { 17, \"RU-MODEL\", &hf_ru_model, NULL, NULL },",
          "650:  { 18, \"RU-SCAN-MODE\", &hf_ru_scan_mode, NULL, NULL },",
          "651:  { 19, \"RU-SCAN-TYPE\", &hf_ru_scan_type, NULL, NULL },",
          "652:  { 20, \"RU-SCAN-INTERVAL\", &hf_ru_scan_interval, NULL, NULL },",
          "653:  { 21, \"RU-RADIO-TYPE\", &hf_ru_radio_type, NULL, NULL },",
          "654:  { 22, \"RU-CHANNEL-DWELL-TIME\", &hf_ru_channel_dwell_time, NULL, NULL },",
          "655:  { 23, \"RU-CHANNEL-LIST\", &hf_ru_channel_list, NULL, NULL },",
          "656:  { 24, \"RU-TRAP\", &hf_ru_trap, NULL, NULL },",
          "657:  { 25, \"RU-SCAN-TIMES\", &hf_ru_scan_times, NULL, NULL },",
          "658:  { 26, \"RU-SCAN-DELAY\", &hf_ru_scan_delay, NULL, NULL },",
          "659:  { 27, \"RU-SCAN-REQ-ID\", &hf_ru_scan_req_id, NULL, NULL },",
          "660:  { 28, \"STATIC-CONFIG\", &hf_static_config, NULL, NULL },",
          "661:  { 29, \"LOCAL-BRIDGING\", &hf_local_bridging, NULL, NULL },",
          "662:  { 30, \"STATIC-BP-IPADDR\", &hf_static_bp_ipaddr, NULL, NULL },",
          "663:  { 31, \"STATIC-BP-NETMASK\", &hf_static_bp_netmask, NULL, NULL },",
          "664:  { 32, \"STATIC-BP-GATEWAY\", &hf_static_bp_gateway, NULL, NULL },",
          "665:  { 33, \"STATIC-BM-IPADDR\", &hf_static_bm_ipaddr, NULL, NULL },",
          "666:  { 34, \"TUNNEL_PROTOCOL/BSSID\", /* &hf_, */ NULL, NULL, NULL },",
          "667:  { 35, \"BP_WIRED_MACADDR\", /* &hf_, */ NULL, NULL, NULL },",
          "668:  { 36, \"RU_CAPABILITY\", /* &hf_, */ NULL, NULL, NULL },",
          "669:  { 37, \"RU_SSID_NAME\", /* hf_, */ NULL, NULL, NULL },",
          "670:  { 38, \"RU_ALARM\", &hf_ru_alarm, dissect_snmp, NULL },",
          "671:  { 39, \"PREAUTH_RESP\", &hf_preauth_resp, NULL, NULL },",
          "672:  { 40, \"BP_PMK\", &hf_bp_pmk, NULL, NULL },",
          "673:  { 41, \"AC_REG_CHALLENGE\", &hf_ac_reg_challenge, NULL, NULL },",
          "674:  { 42, \"AC_REG_RESPONSE\", &hf_ac_reg_response, NULL, NULL },",
          "675:  { 43, \"STATS\", &hf_stats, NULL, NULL },",
          "676:  { 44, \"CERTIFICATE\", &hf_certificate, NULL, NULL },",
          "677:  { 45, \"RADIO_ID\", &hf_radio_id, NULL, NULL },",
          "678:  { 46, \"BP-REQUEST-ID\", &hf_bp_request_id, NULL, NULL },",
          "679:  { 47, \"NETWORK_ID\", &hf_network_id, NULL, NULL },",
          "680:  { 48, \"MU_MAC\", &hf_mu_mac, NULL, NULL },",
          "681:  { 49, \"TIME\", &hf_time, NULL, NULL },",
          "682:  { 50, \"NUM_RADIOS\", &hf_num_radios, NULL, NULL },",
          "683:  { 51, \"RADIO_INFO\", &hf_radio_info, NULL, NULL },",
          "684:  { 52, \"NETWORK_INFO\", &hf_network_info, NULL, NULL },",
          "685:  { 53, \"VENDOR_ID\", &hf_vendor_id, NULL, NULL },",
          "686:  { 54, \"PRODUCT_ID\", &hf_product_id, NULL, NULL },",
          "687:  { 55, \"RADIO_INFO_ACK\", &hf_radio_info_ack, NULL, NULL },",
          "688:  { 60, \"SNMP-ERROR-STATUS\", &hf_snmp_error_status, NULL, NULL },",
          "689:  { 61, \"SNMP-ERROR-INDEX\", &hf_snmp_error_index, NULL, NULL },",
          "690:  { 62, \"ALTERNATE_AC_IPADDR\", /* &hf_, */ NULL, NULL, NULL },",
          "691:  { 63, \"AP-IMG-TO-RAM\", &hf_ap_img_to_ram, NULL, NULL },",
          "692:  { 64, \"AP-IMG-ROLE\", &hf_ap_img_role, NULL, NULL },",
          "693:  { 65, \"AP_STATS_BLOCK\", &hf_ap_stats_block, dissect_tlv, wassp_tunnel_ap_stats_block_tlv_vals },",
          "694:  { 66, \"MU_RF_STATS_BLOCK\", &hf_mu_rf_stats_block, dissect_tlv, wassp_tunnel_mu_stats_block_tlv_vals },",
          "695:  { 67, \"STATS_REQUEST_TYPE\", &hf_stats_request_type, NULL, NULL },",
          "696:  { 68, \"STATS_LAST\", &hf_stats_last, NULL, NULL },",
          "697:  { 69, \"TLV_CONFIG\", &hf_block_config, dissect_tlv, wassp_tunnel_tlv_config_tlv_vals },",
          "698:  { 70, \"CONFIG_ERROR_BLOCK\", /* &hf_, */ NULL, NULL, NULL },",
          "699:  { 71, \"CONFIG_MODIFIED_BLOCK\", /* &hf_, */ NULL, NULL, NULL },",
          "700:  { 72, \"MU_PMKID_LIST\", &hf_mu_pmkid_list, NULL, NULL },",
          "701:  { 73, \"MU_PMK_BP\", &hf_mu_pmk_bp, NULL, NULL },",
          "702:  { 74, \"MU_PMKID_BP\", &hf_mu_pmkid_bp, NULL, NULL },",
          "703:  { 75, \"COUNTDOWN_TIME\", &hf_countdown_time, NULL, NULL },",
          "704:  { 76, \"WASSP-VLAN-TAG\", &hf_wassp_vlan_tag, NULL, NULL },",
          "705:  { 81, \"WASSP-TUNNEL-TYPE\", &hf_wassp_tunnel_type, NULL, NULL },",
          "706:  { 88, \"AP-DHCP-MODE\", &hf_ap_dhcp_mode, NULL, NULL },",
          "707:  { 89, \"AP-IPADDR\", &hf_ap_ipaddr, NULL, NULL },",
          "708:  { 90, \"AP-NETMASK\", &hf_ap_netmask, NULL, NULL },",
          "709:  { 91, \"AP-GATEWAY\", &hf_ap_gateway, NULL, NULL },",
          "711:  { 0, NULL, NULL, NULL, NULL }",
          "712: };",
          "714: static const value_string wassp_tunnel_pdu_type[] = {",
          "715:  { 1, \"?Discover?\" },",
          "716:  { 2, \"RU Registration Request\" },",
          "717:  { 3, \"RU Registration Response\" },",
          "718:  { 4, \"RU Authentication Request\" },",
          "719:  { 5, \"RU Authentication Response\" },",
          "720:  { 6, \"RU Software Version Validate Request\" },",
          "721:  { 7, \"RU Software Version Validate Response\" },",
          "722:  { 8, \"RU Configuration Request\" },",
          "723:  { 9, \"RU Configuration Response\" },",
          "724:  { 10, \"RU Acknowledge\" },",
          "725:  { 11, \"RU Configuration Status Notify\" },",
          "726:  { 12, \"RU Set State Request\" },",
          "727:  { 13, \"RU Set State Response\" },",
          "728:  { 14, \"RU Statistics Notify\" },",
          "729:  { 15, \"Data\" },",
          "730:  { 16, \"Poll\" },",
          "731:  { 17, \"SNMP Request\" },",
          "732:  { 18, \"SNMP Response\" },",
          "733:  { 19, \"BP Trap Notify\" },",
          "734:  { 20, \"BP Scan Request\" },",
          "735:  { 21, \"RFM Notify\" },",
          "736:  { 22, \"RU SNMP Alarm Notify\" },",
          "737:  { 23, \"RU SNMP Set Alarm\" },",
          "738:  { 24, \"RU SNMP Set Log Status\" },",
          "739:  { 25, \"RU SNMP Get Log Request\" },",
          "740:  { 26, \"RU SNMP Get Log Response\" },",
          "741:  { 27, \"SEC Update Notify\" },",
          "742:  { 28, \"RU Stats Req\" },",
          "743:  { 29, \"RU Stats Resp\" },",
          "744:  { 30, \"MU Stats Req\" },",
          "745:  { 31, \"MU Stats Response\" },",
          "747:  { 0, NULL }",
          "748: };",
          "750: #if 0",
          "751: static const value_string wassp_setresult_vals[] = {",
          "752:  { 0, \"Success\" },",
          "753:  { 1, \"Failauth\" },",
          "755:  { 0, NULL }",
          "756: };",
          "757: #endif",
          "759: static int",
          "760: dissect_snmp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *wassp_tree,",
          "761:  volatile guint32 offset, guint32 length, const ext_value_string *value_array _U_)",
          "763:  tvbuff_t *snmp_tvb;",
          "766:  col_set_writable(pinfo->cinfo, COL_INFO, FALSE);",
          "768:  snmp_tvb = tvb_new_subset_length(tvb, offset, length);",
          "771:  TRY {",
          "772:   call_dissector(snmp_handle, snmp_tvb, pinfo, wassp_tree);",
          "773:  } CATCH_NONFATAL_ERRORS {",
          "774:   show_exception(snmp_tvb, pinfo, wassp_tree, EXCEPT_CODE, GET_MESSAGE);",
          "775:  } ENDTRY;",
          "777:  col_set_writable(pinfo->cinfo, COL_INFO, TRUE);",
          "779:  offset += length;",
          "781:  return offset;",
          "782: }",
          "784: static int",
          "785: dissect_ieee80211(tvbuff_t *tvb, packet_info *pinfo, proto_tree *wassp_tree,",
          "786:  volatile guint32 offset, guint32 length, const ext_value_string *value_array _U_)",
          "788:  tvbuff_t *ieee80211_tvb;",
          "791:  col_set_writable(pinfo->cinfo, COL_INFO, FALSE);",
          "793:  ieee80211_tvb = tvb_new_subset_length(tvb, offset, length);",
          "796:  TRY {",
          "797:   call_dissector(ieee80211_handle, ieee80211_tvb, pinfo, wassp_tree);",
          "798:  } CATCH_NONFATAL_ERRORS {",
          "799:   show_exception(ieee80211_tvb, pinfo, wassp_tree, EXCEPT_CODE, GET_MESSAGE);",
          "800:  } ENDTRY;",
          "802:  col_set_writable(pinfo->cinfo, COL_INFO, TRUE);",
          "804:  offset += length;",
          "806:  return offset;",
          "807: }",
          "809: static int",
          "810: dissect_tlv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *wassp_tree,",
          "811:  guint32 offset, guint32 length _U_, const ext_value_string *value_array)",
          "812: {",
          "813:  guint32 tlv_type;",
          "814:  gint tlv_length;",
          "815:  proto_item *tlv_tree;",
          "816:  proto_item *item;",
          "817:  int type_index;",
          "818:  guint32 tlv_end;",
          "820:  tlv_type = tvb_get_ntohs(tvb, offset);",
          "821:  tlv_length = tvb_get_ntohs(tvb, offset + 2);",
          "822:  tlv_tree = proto_tree_add_subtree_format(wassp_tree, tvb,",
          "823:   offset, tlv_length, ett_wassp_tlv_header, NULL,",
          "824:   \"T %d, L %d: %s\",",
          "825:   tlv_type,",
          "826:   tlv_length,",
          "827:   extval_to_str_idx(tlv_type, value_array, NULL, \"Unknown\"));",
          "828:  item = proto_tree_add_item(tlv_tree, hf_wassp_tlv_type,",
          "829:   tvb, offset, 2, ENC_BIG_ENDIAN);",
          "830:  proto_item_append_text(item, \" = %s\",",
          "831:   extval_to_str_idx(tlv_type, value_array,",
          "832:    &type_index, \"Unknown\"));",
          "833:  offset += 2;",
          "834:  item = proto_tree_add_item(tlv_tree, hf_wassp_tlv_length,",
          "835:   tvb, offset, 2, ENC_BIG_ENDIAN);",
          "836:  offset += 2;",
          "838:  tlv_length -= 4;",
          "840:  if (tlv_length < 0) {",
          "841:   expert_add_info(pinfo, item, &ei_wassp_length_too_short);",
          "842:   return offset;",
          "843:  } else if (tlv_length == 0)",
          "844:   return offset;",
          "846:  tlv_end = offset + tlv_length;",
          "849:  if ( type_index != -1 && value_array[type_index].hf_element) {",
          "850:   proto_tree_add_item(tlv_tree,",
          "852:    tvb, offset, tlv_length, ENC_BIG_ENDIAN);",
          "853:  } else {",
          "854:   proto_tree_add_item(tlv_tree, hf_wassp_tlv_data,",
          "855:    tvb, offset, tlv_length, ENC_NA);",
          "856:  }",
          "857:  if ( type_index != -1 && value_array[type_index].specialfunction ) {",
          "858:   guint32 newoffset;",
          "860:   while (offset < tlv_end) {",
          "861:    newoffset = value_array[type_index].specialfunction (",
          "862:     tvb, pinfo, tlv_tree, offset, tlv_length,",
          "863:     value_array[type_index].evs);",
          "864:    DISSECTOR_ASSERT(newoffset > offset);",
          "865:    offset = newoffset;",
          "866:   }",
          "867:  }",
          "868:  return tlv_end;",
          "869: }",
          "871: static int",
          "872: dissect_wassp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "874:  proto_item *ti;",
          "875:  proto_tree *wassp_tree = NULL;",
          "876:  guint32 offset = 0;",
          "877:  guint32 packet_length;",
          "878:  guint8 packet_type;",
          "879:  guint32 subtype;",
          "881:  packet_type = tvb_get_guint8(tvb, 1);",
          "882:  col_set_str(pinfo->cinfo, COL_PROTOCOL, PROTO_SHORT_NAME);",
          "883:  col_add_str(pinfo->cinfo, COL_INFO, val_to_str(packet_type,",
          "884:    wassp_tunnel_pdu_type, \"Type 0x%02x\"));",
          "886:  if (tree) {",
          "888:   ti = proto_tree_add_item(tree, proto_wassp, tvb, offset, -1,",
          "889:       ENC_NA);",
          "890:   wassp_tree = proto_item_add_subtree(ti, ett_wassp);",
          "892:   proto_tree_add_item(wassp_tree, hf_wassp_version, tvb, offset, 1,",
          "893:    ENC_BIG_ENDIAN);",
          "894:   offset += 1;",
          "896:   proto_tree_add_item(wassp_tree, hf_wassp_type, tvb, offset, 1,",
          "897:    ENC_BIG_ENDIAN);",
          "898:   offset += 1;",
          "900:   switch (packet_type) {",
          "902:    proto_tree_add_item(wassp_tree, hf_wassp_discover1, tvb, offset, 2,",
          "903:     ENC_BIG_ENDIAN);",
          "904:    offset += 2;",
          "905:    packet_length = tvb_get_ntohs(tvb, offset);",
          "906:    proto_tree_add_item(wassp_tree, hf_wassp_length, tvb, offset, 2,",
          "907:     ENC_BIG_ENDIAN);",
          "908:    offset += 2;",
          "909:    proto_tree_add_item(wassp_tree, hf_wassp_discover2, tvb, offset, 2,",
          "910:     ENC_BIG_ENDIAN);",
          "911:    offset += 2;",
          "912:    subtype = tvb_get_ntohs(tvb, offset);",
          "913:    proto_tree_add_item(wassp_tree, hf_wassp_subtype, tvb, offset, 2,",
          "914:     ENC_BIG_ENDIAN);",
          "915:    offset += 2;",
          "916:    switch (subtype) {",
          "917:    case 1:",
          "918:     proto_tree_add_item(wassp_tree, hf_wassp_ether, tvb, offset, 6,",
          "919:      ENC_NA);",
          "920:     offset += 6;",
          "921:     break;",
          "922:    case 2:",
          "923:     proto_tree_add_item(wassp_tree, hf_wassp_discover3, tvb, offset, 2,",
          "924:      ENC_BIG_ENDIAN);",
          "925:     offset += 2;",
          "926:     break;",
          "927:    }",
          "928:    break;",
          "929:   default:",
          "930:    proto_tree_add_item(wassp_tree, hf_wassp_seqno, tvb, offset, 1,",
          "931:     ENC_BIG_ENDIAN);",
          "932:    offset += 1;",
          "934:    proto_tree_add_item(wassp_tree, hf_wassp_flags, tvb, offset, 1,",
          "935:     ENC_BIG_ENDIAN);",
          "936:    offset += 1;",
          "938:    proto_tree_add_item(wassp_tree, hf_wassp_sessionid, tvb, offset, 2,",
          "939:     ENC_BIG_ENDIAN);",
          "940:    offset += 2;",
          "942:    packet_length = tvb_get_ntohs(tvb, offset);",
          "943:    proto_tree_add_item(wassp_tree, hf_wassp_length, tvb, offset, 2,",
          "944:     ENC_BIG_ENDIAN);",
          "945:    offset += 2;",
          "947:    break;",
          "948:   }",
          "950:   switch (packet_type) {",
          "952:     offset = dissect_ieee80211(tvb, pinfo, wassp_tree,",
          "953:      offset, packet_length - offset, NULL);",
          "954:    break;",
          "955:   default:",
          "956:    while (offset < packet_length)",
          "957:     offset = dissect_tlv(tvb, pinfo, wassp_tree,",
          "958:      offset, 0, wassp_tunnel_tlv_vals);",
          "959:    break;",
          "960:   }",
          "961:  }",
          "962:  return offset;",
          "963: }",
          "965: static gboolean",
          "966: test_wassp(tvbuff_t *tvb)",
          "967: {",
          "969:  if ( tvb_captured_length(tvb) < 8",
          "970:       || tvb_get_guint8(tvb, 0) != 3",
          "973:  ) {",
          "974:   return FALSE;",
          "975:  }",
          "976:  return TRUE;",
          "977: }",
          "979: static gboolean",
          "980: dissect_wassp_heur(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "981: {",
          "982:  if ( !test_wassp(tvb) ) {",
          "983:   return FALSE;",
          "984:  }",
          "985:  dissect_wassp(tvb, pinfo, tree);",
          "986:  return TRUE;",
          "987: }",
          "989: static int",
          "990: dissect_wassp_static(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "992:  if ( !test_wassp(tvb) ) {",
          "993:   return 0;",
          "994:  }",
          "995:  return dissect_wassp(tvb, pinfo, tree);",
          "996: }",
          "998: void",
          "999: proto_register_wassp(void)",
          "1001:  expert_module_t* expert_wassp;",
          "1003:  static hf_register_info hf[] = {",
          "1006:   { &hf_wassp_tlv_type,",
          "1007:   { \"TlvType\", \"wassp.tlv.type\", FT_UINT8, BASE_DEC, NULL,",
          "1008:    0x0, NULL, HFILL }},",
          "1010:   { &hf_wassp_tlv_length,",
          "1011:   { \"TlvLength\", \"wassp.tlv.length\", FT_UINT8, BASE_DEC, NULL,",
          "1012:    0x0, NULL, HFILL }},",
          "1014:   { &hf_wassp_tlv_data,",
          "1015:   { \"TlvData\",   \"wassp.tlv.data\", FT_BYTES, BASE_NONE, NULL,",
          "1016:    0x0, NULL, HFILL }},",
          "1019:   { &hf_wassp_version,",
          "1020:   { \"Protocol Version\", \"wassp.version\", FT_UINT8, BASE_DEC, NULL,",
          "1021:    0x0, NULL, HFILL }},",
          "1023:   { &hf_wassp_type,",
          "1024:   { \"PDU Type\", \"wassp.type\", FT_UINT8, BASE_DEC, VALS(wassp_tunnel_pdu_type),",
          "1025:    0x0, NULL, HFILL }},",
          "1027:   { &hf_wassp_seqno,",
          "1028:   { \"Sequence No\", \"wassp.seqno\", FT_UINT8, BASE_DEC, NULL,",
          "1029:    0x0, NULL, HFILL }},",
          "1031:   { &hf_wassp_flags,",
          "1032:   { \"Flags\", \"wassp.flags\", FT_UINT8, BASE_HEX, NULL,",
          "1033:    0x0, NULL, HFILL }},",
          "1035:   { &hf_wassp_sessionid,",
          "1036:   { \"Session ID\", \"wassp.sessionid\", FT_UINT8, BASE_DEC, NULL,",
          "1037:    0x0, NULL, HFILL }},",
          "1039:   { &hf_wassp_length,",
          "1040:   { \"PDU Length\", \"wassp.length\", FT_UINT8, BASE_HEX, NULL,",
          "1041:    0x0, NULL, HFILL }},",
          "1044: #if 0",
          "1045:   { &hf_data,",
          "1046:   { \"DATA\", \"wassp.data\", FT_NONE, BASE_NONE, NULL,",
          "1047:     0x0, NULL, HFILL }},",
          "1048: #endif",
          "1051:   { &hf_status,",
          "1052:   { \"STATUS\", \"wassp.status\", FT_UINT32, BASE_DEC, NULL,",
          "1053:     0x0, NULL, HFILL }},",
          "1055:   { &hf_ru_soft_version,",
          "1056:   { \"RU-SOFT-VERSION\", \"wassp.ru.soft.version\", FT_STRING, BASE_NONE, NULL,",
          "1057:     0x0, NULL, HFILL }},",
          "1059:   { &hf_ru_serial_number,",
          "1060:   { \"RU-SERIAL-NUMBER\", \"wassp.ru.serial.number\", FT_STRING, BASE_NONE, NULL,",
          "1061:     0x0, NULL, HFILL }},",
          "1063:   { &hf_ru_challenge,",
          "1064:   { \"RU-CHALLENGE\", \"wassp.ru.challenge\", FT_BYTES, BASE_NONE, NULL,",
          "1065:     0x0, NULL, HFILL }},",
          "1067:   { &hf_ru_response,",
          "1068:   { \"RU-RESPONSE\", \"wassp.ru.response\", FT_BYTES, BASE_NONE, NULL,",
          "1069:     0x0, NULL, HFILL }},",
          "1071:   { &hf_ac_ipaddr,",
          "1072:   { \"AC-IPADDR\", \"wassp.ac.ipaddr\", FT_IPv4, BASE_NONE, NULL,",
          "1073:     0x0, NULL, HFILL }},",
          "1075:   { &hf_ru_vns_id,",
          "1076:   { \"RU-VNS-ID\", \"wassp.ru.vns.id\", FT_UINT32, BASE_DEC, NULL,",
          "1077:     0x0, NULL, HFILL }},",
          "1079:   { &hf_tftp_server,",
          "1080:   { \"TFTP-SERVER\", \"wassp.tftp.server\", FT_IPv4, BASE_NONE, NULL,",
          "1081:     0x0, NULL, HFILL }},",
          "1083:   { &hf_image_path,",
          "1084:   { \"IMAGE-PATH\", \"wassp.image.path\", FT_STRING, BASE_NONE, NULL,",
          "1085:     0x0, NULL, HFILL }},",
          "1087:   { &hf_ru_config,",
          "1088:   { \"RU-CONFIG\", \"wassp.ru.config\", FT_NONE, BASE_NONE, NULL,",
          "1089:     0x0, NULL, HFILL }},",
          "1091:   { &hf_ru_state,",
          "1092:   { \"RU-STATE\", \"wassp.ru.state\", FT_UINT32, BASE_DEC, NULL,",
          "1093:     0x0, NULL, HFILL }},",
          "1095:   { &hf_ru_session_key,",
          "1096:   { \"RU-SESSION-KEY\", \"wassp.ru.session.key\", FT_STRING, BASE_NONE, NULL,",
          "1097:     0x0, NULL, HFILL }},",
          "1099:   { &hf_message_type,",
          "1100:   { \"MESSAGE-TYPE\", \"wassp.message.type\", FT_UINT32, BASE_DEC, NULL,",
          "1101:     0x0, NULL, HFILL }},",
          "1103:   { &hf_random_number,",
          "1104:   { \"RANDOM-NUMBER\", \"wassp.random.number\", FT_BYTES, BASE_NONE, NULL,",
          "1105:     0x0, NULL, HFILL }},",
          "1107:   { &hf_standby_timeout,",
          "1108:   { \"STANDBY-TIMEOUT\", \"wassp.standby.timeout\", FT_UINT32, BASE_DEC, NULL,",
          "1109:     0x0, NULL, HFILL }},",
          "1111:   { &hf_ru_challenge_id,",
          "1112:   { \"RU-CHALLENGE-ID\", \"wassp.ru.challenge.id\", FT_UINT32, BASE_DEC, NULL,",
          "1113:     0x0, NULL, HFILL }},",
          "1115:   { &hf_ru_model,",
          "1116:   { \"RU-MODEL\", \"wassp.ru.model\", FT_STRING, BASE_NONE, NULL,",
          "1117:     0x0, NULL, HFILL }},",
          "1119:   { &hf_ru_scan_mode,",
          "1120:   { \"RU-SCAN-MODE\", \"wassp.ru.scan.mode\", FT_UINT32, BASE_DEC, NULL,",
          "1121:     0x0, NULL, HFILL }},",
          "1123:   { &hf_ru_scan_type,",
          "1124:   { \"RU-SCAN-TYPE\", \"wassp.ru.scan.type\", FT_UINT32, BASE_DEC, NULL,",
          "1125:     0x0, NULL, HFILL }},",
          "1127:   { &hf_ru_scan_interval,",
          "1128:   { \"RU-SCAN-INTERVAL\", \"wassp.ru.scan.interval\", FT_UINT32, BASE_DEC, NULL,",
          "1129:     0x0, NULL, HFILL }},",
          "1131:   { &hf_ru_radio_type,",
          "1132:   { \"RU-RADIO-TYPE\", \"wassp.ru.radio.type\", FT_UINT32, BASE_DEC, NULL,",
          "1133:     0x0, NULL, HFILL }},",
          "1135:   { &hf_ru_channel_dwell_time,",
          "1136:   { \"RU-CHANNEL-DWELL-TIME\", \"wassp.ru.channel.dwell.time\", FT_UINT32, BASE_DEC, NULL,",
          "1137:     0x0, NULL, HFILL }},",
          "1139:   { &hf_ru_channel_list,",
          "1140:   { \"RU-CHANNEL-LIST\", \"wassp.ru.channel.list\", FT_UINT32, BASE_DEC, NULL,",
          "1141:     0x0, NULL, HFILL }},",
          "1143:   { &hf_ru_trap,",
          "1144:   { \"RU-TRAP\", \"wassp.ru.trap\", FT_STRING, BASE_NONE, NULL,",
          "1145:     0x0, NULL, HFILL }},",
          "1147:   { &hf_ru_scan_times,",
          "1148:   { \"RU-SCAN-TIMES\", \"wassp.ru.scan.times\", FT_UINT32, BASE_DEC, NULL,",
          "1149:     0x0, NULL, HFILL }},",
          "1151:   { &hf_ru_scan_delay,",
          "1152:   { \"RU-SCAN-DELAY\", \"wassp.ru.scan.delay\", FT_UINT32, BASE_DEC, NULL,",
          "1153:     0x0, NULL, HFILL }},",
          "1155:   { &hf_ru_scan_req_id,",
          "1156:   { \"RU-SCAN-REQ-ID\", \"wassp.ru.scan.req.id\", FT_UINT32, BASE_DEC, NULL,",
          "1157:     0x0, NULL, HFILL }},",
          "1159:   { &hf_static_config,",
          "1160:   { \"STATIC-CONFIG\", \"wassp.static.config\", FT_UINT32, BASE_DEC, NULL,",
          "1161:     0x0, NULL, HFILL }},",
          "1163:   { &hf_local_bridging,",
          "1164:   { \"LOCAL-BRIDGING\", \"wassp.local.bridging\", FT_UINT32, BASE_DEC, NULL,",
          "1165:     0x0, NULL, HFILL }},",
          "1167:   { &hf_static_bp_ipaddr,",
          "1168:   { \"STATIC-BP-IPADDR\", \"wassp.static.bp.ipaddr\", FT_IPv4, BASE_NONE, NULL,",
          "1169:     0x0, NULL, HFILL }},",
          "1171:   { &hf_static_bp_netmask,",
          "1172:   { \"STATIC-BP-NETMASK\", \"wassp.static.bp.netmask\", FT_IPv4, BASE_NETMASK, NULL,",
          "1173:     0x0, NULL, HFILL }},",
          "1175:   { &hf_static_bp_gateway,",
          "1176:   { \"STATIC-BP-GATEWAY\", \"wassp.static.bp.gateway\", FT_IPv4, BASE_NONE, NULL,",
          "1177:     0x0, NULL, HFILL }},",
          "1179:   { &hf_static_bm_ipaddr,",
          "1180:   { \"STATIC-BM-IPADDR\", \"wassp.static.bm.ipaddr\", FT_IPv4, BASE_NONE, NULL,",
          "1181:     0x0, NULL, HFILL }},",
          "1183:   { &hf_ru_alarm,",
          "1184:   { \"RU-ALARM\", \"wassp.ru.alarm\", FT_NONE, BASE_NONE, NULL,",
          "1185:     0x0, NULL, HFILL }},",
          "1187:   { &hf_bp_request_id,",
          "1188:   { \"BP-REQUEST-ID\", \"wassp.bp.request.id\", FT_UINT32, BASE_DEC, NULL,",
          "1189:     0x0, NULL, HFILL }},",
          "1191:   { &hf_snmp_error_status,",
          "1192:   { \"SNMP-ERROR-STATUS\", \"wassp.snmp.error.status\", FT_UINT32, BASE_DEC, NULL,",
          "1193:     0x0, NULL, HFILL }},",
          "1195:   { &hf_snmp_error_index,",
          "1196:   { \"SNMP-ERROR-INDEX\", \"wassp.snmp.error.index\", FT_UINT32, BASE_DEC, NULL,",
          "1197:     0x0, NULL, HFILL }},",
          "1199:   { &hf_ap_img_to_ram,",
          "1200:   { \"AP-IMG-TO-RAM\", \"wassp.ap.img.to.ram\", FT_UINT32, BASE_DEC, NULL,",
          "1201:     0x0, NULL, HFILL }},",
          "1203:   { &hf_ap_img_role,",
          "1204:   { \"AP-IMG-ROLE\", \"wassp.ap.img.role\", FT_UINT32, BASE_DEC, NULL,",
          "1205:     0x0, NULL, HFILL }},",
          "1207:   { &hf_ap_stats_block,",
          "1208:   { \"AP Stats Block\", \"wassp.ap_stats_block\", FT_NONE, BASE_NONE, NULL,",
          "1209:     0x0, NULL, HFILL }},",
          "1211:   { &hf_block_config,",
          "1212:   { \"Config\", \"wassp.tlv_config\", FT_NONE, BASE_NONE, NULL,",
          "1213:     0x0, NULL, HFILL }},",
          "1215:   { &hf_wassp_vlan_tag,",
          "1216:   { \"WASSP-VLAN-TAG\", \"wassp.vlan.tag\", FT_INT32, BASE_DEC, NULL,",
          "1217:     0x0, NULL, HFILL }},",
          "1219:   { &hf_wassp_tunnel_type,",
          "1220:   { \"WASSP-TUNNEL-TYPE\", \"wassp.tunnel.type\", FT_UINT32, BASE_DEC, NULL,",
          "1221:     0x0, NULL, HFILL }},",
          "1223:   { &hf_ap_dhcp_mode,",
          "1224:   { \"AP-DHCP-MODE\", \"wassp.ap.dhcp.mode\", FT_UINT32, BASE_DEC, NULL,",
          "1225:     0x0, NULL, HFILL }},",
          "1227:   { &hf_ap_ipaddr,",
          "1228:   { \"AP-IPADDR\", \"wassp.ap.ipaddr\", FT_IPv4, BASE_NONE, NULL,",
          "1229:     0x0, NULL, HFILL }},",
          "1231:   { &hf_ap_netmask,",
          "1232:   { \"AP-NETMASK\", \"wassp.ap.netmask\", FT_IPv4, BASE_NETMASK, NULL,",
          "1233:     0x0, NULL, HFILL }},",
          "1235:   { &hf_ap_gateway,",
          "1236:   { \"AP-GATEWAY\", \"wassp.ap.gateway\", FT_IPv4, BASE_NONE, NULL,",
          "1237:     0x0, NULL, HFILL }},",
          "1239:   { &hf_preauth_resp,",
          "1240:   { \"PREAUTH_RESP\", \"wassp.preauth.resp\", FT_INT32, BASE_DEC, NULL,",
          "1241:    0x0, NULL, HFILL }},",
          "1243:   { &hf_bp_pmk,",
          "1244:   { \"BP_PMK\", \"wassp.bp.pmk\", FT_INT32, BASE_DEC, NULL,",
          "1245:    0x0, NULL, HFILL }},",
          "1247:   { &hf_ac_reg_challenge,",
          "1248:   { \"AC_REG_CHALLENGE\", \"wassp.ac.reg.challenge\", FT_INT32, BASE_DEC, NULL,",
          "1249:    0x0, NULL, HFILL }},",
          "1251:   { &hf_ac_reg_response,",
          "1252:   { \"AC_REG_RESPONSE\", \"wassp.ac.reg.response\", FT_INT32, BASE_DEC, NULL,",
          "1253:    0x0, NULL, HFILL }},",
          "1255:   { &hf_stats,",
          "1256:   { \"STATS\", \"wassp.stats\", FT_INT32, BASE_DEC, NULL,",
          "1257:    0x0, NULL, HFILL }},",
          "1259:   { &hf_certificate,",
          "1260:   { \"CERTIFICATE\", \"wassp.certificate\", FT_INT32, BASE_DEC, NULL,",
          "1261:    0x0, NULL, HFILL }},",
          "1263:   { &hf_radio_id,",
          "1264:   { \"RADIO_ID\", \"wassp.radio.id\", FT_INT32, BASE_DEC, NULL,",
          "1265:    0x0, NULL, HFILL }},",
          "1267:   { &hf_network_id,",
          "1268:   { \"NETWORK_ID\", \"wassp.network.id\", FT_INT32, BASE_DEC, NULL,",
          "1269:    0x0, NULL, HFILL }},",
          "1271:   { &hf_mu_mac,",
          "1272:   { \"MU_MAC\", \"wassp.mu.mac\", FT_INT32, BASE_DEC, NULL,",
          "1273:    0x0, NULL, HFILL }},",
          "1275:   { &hf_time,",
          "1276:   { \"TIME\", \"wassp.time\", FT_INT32, BASE_DEC, NULL,",
          "1277:    0x0, NULL, HFILL }},",
          "1279:   { &hf_num_radios,",
          "1280:   { \"NUM_RADIOS\", \"wassp.num.radios\", FT_INT32, BASE_DEC, NULL,",
          "1281:    0x0, NULL, HFILL }},",
          "1283:   { &hf_radio_info,",
          "1284:   { \"RADIO_INFO\", \"wassp.radio.info\", FT_INT32, BASE_DEC, NULL,",
          "1285:    0x0, NULL, HFILL }},",
          "1287:   { &hf_network_info,",
          "1288:   { \"NETWORK_INFO\", \"wassp.network.info\", FT_INT32, BASE_DEC, NULL,",
          "1289:    0x0, NULL, HFILL }},",
          "1291:   { &hf_vendor_id,",
          "1292:   { \"VENDOR_ID\", \"wassp.vendor.id\", FT_INT32, BASE_DEC, NULL,",
          "1293:    0x0, NULL, HFILL }},",
          "1295:   { &hf_product_id,",
          "1296:   { \"PRODUCT_ID\", \"wassp.product.id\", FT_INT32, BASE_DEC, NULL,",
          "1297:    0x0, NULL, HFILL }},",
          "1299:   { &hf_radio_info_ack,",
          "1300:   { \"RADIO_INFO_ACK\", \"wassp.radio.info.ack\", FT_INT32, BASE_DEC, NULL,",
          "1301:    0x0, NULL, HFILL }},",
          "1303:   { &hf_mu_rf_stats_block,",
          "1304:   { \"MU_RF_STATS_BLOCK\", \"wassp.mu.rf.stats.block\", FT_NONE, BASE_NONE, NULL,",
          "1305:    0x0, NULL, HFILL }},",
          "1307:   { &hf_stats_request_type,",
          "1308:   { \"STATS_REQUEST_TYPE\", \"wassp.stats.request.type\", FT_INT32, BASE_DEC, NULL,",
          "1309:    0x0, NULL, HFILL }},",
          "1311:   { &hf_stats_last,",
          "1312:   { \"STATS_LAST\", \"wassp.stats.last\", FT_INT32, BASE_DEC, NULL,",
          "1313:    0x0, NULL, HFILL }},",
          "1315:   { &hf_mu_pmkid_list,",
          "1316:   { \"MU_PMKID_LIST\", \"wassp.mu.pmkid.list\", FT_INT32, BASE_DEC, NULL,",
          "1317:    0x0, NULL, HFILL }},",
          "1319:   { &hf_mu_pmk_bp,",
          "1320:   { \"MU_PMK_BP\", \"wassp.mu.pmk.bp\", FT_INT32, BASE_DEC, NULL,",
          "1321:    0x0, NULL, HFILL }},",
          "1323:   { &hf_mu_pmkid_bp,",
          "1324:   { \"MU_PMKID_BP\", \"wassp.mu.pmkid.bp\", FT_INT32, BASE_DEC, NULL,",
          "1325:    0x0, NULL, HFILL }},",
          "1327:   { &hf_countdown_time,",
          "1328:   { \"COUNTDOWN_TIME\", \"wassp.countdown.time\", FT_INT32, BASE_DEC, NULL,",
          "1329:    0x0, NULL, HFILL }},",
          "1332:   { &hf_ap_stats_block_ether,",
          "1333:   { \"Ether Stats\", \"wassp.ap_stats_block.ether\", FT_NONE, BASE_NONE, NULL,",
          "1334:     0x0, NULL, HFILL }},",
          "1336:   { &hf_ap_stats_block_radio_a,",
          "1337:   { \"Radio-A Stats\", \"wassp.ap_stats_block.radioa\", FT_NONE, BASE_NONE, NULL,",
          "1338:     0x0, NULL, HFILL }},",
          "1340:   { &hf_ap_stats_block_radio_b_g,",
          "1341:   { \"Radio-B/G Stats\", \"wassp.ap_stats_block.radiobg\", FT_NONE, BASE_NONE, NULL,",
          "1342:     0x0, NULL, HFILL }},",
          "1344:   { &hf_mu_stats_block,",
          "1345:   { \"Mobile User Stats\", \"wassp.mustats\", FT_NONE, BASE_NONE, NULL,",
          "1346:     0x0, NULL, HFILL }},",
          "1348:   { &hf_mu_stats_block_65,",
          "1349:   { \"MU Stats Unknown 65\", \"wassp.mustats.65\", FT_NONE, BASE_NONE, NULL,",
          "1350:     0x0, NULL, HFILL }},",
          "1352:   { &hf_dot1x_stats_block,",
          "1353:   { \"DOT1x_STATS_BLOCK\", \"wassp.ap_stats_block.dot1x\", FT_NONE, BASE_NONE, NULL,",
          "1354:     0x0, NULL, HFILL }},",
          "1357:   { &hf_stats_dot11_ackfailurecount,",
          "1358:   { \"DOT11_ACKFailureCount\", \"wassp.stats.dot11.ackfailurecount\", FT_INT32, BASE_DEC, NULL,",
          "1359:    0x0, NULL, HFILL }},",
          "1361:   { &hf_stats_dot11_fcserrorcount,",
          "1362:   { \"DOT11_FCSErrorCount\", \"wassp.stats.dot11.fcserrorcount\", FT_INT32, BASE_DEC, NULL,",
          "1363:    0x0, NULL, HFILL }},",
          "1365:   { &hf_stats_dot11_failedcount,",
          "1366:   { \"DOT11_FailedCount\", \"wassp.stats.dot11.failedcount\", FT_INT32, BASE_DEC, NULL,",
          "1367:    0x0, NULL, HFILL }},",
          "1369:   { &hf_stats_dot11_frameduplicatecount,",
          "1370:   { \"DOT11_FrameDuplicateCount\", \"wassp.stats.dot11.frameduplicatecount\", FT_INT32, BASE_DEC, NULL,",
          "1371:    0x0, NULL, HFILL }},",
          "1373:   { &hf_stats_dot11_multicastreceivedframecount,",
          "1374:   { \"DOT11_MulticastReceivedFrameCount\", \"wassp.stats.dot11.multicastreceivedframecount\", FT_INT32, BASE_DEC, NULL,",
          "1375:    0x0, NULL, HFILL }},",
          "1377:   { &hf_stats_dot11_multicasttransmittedframecount,",
          "1378:   { \"DOT11_MulticastTransmittedFrameCount\", \"wassp.stats.dot11.multicasttransmittedframecount\", FT_INT32, BASE_DEC, NULL,",
          "1379:    0x0, NULL, HFILL }},",
          "1381:   { &hf_stats_dot11_multipleretrycount,",
          "1382:   { \"DOT11_MultipleRetryCount\", \"wassp.stats.dot11.multipleretrycount\", FT_INT32, BASE_DEC, NULL,",
          "1383:    0x0, NULL, HFILL }},",
          "1385:   { &hf_stats_dot11_rtsfailurecount,",
          "1386:   { \"DOT11_RTSFailureCount\", \"wassp.stats.dot11.rtsfailurecount\", FT_INT32, BASE_DEC, NULL,",
          "1387:    0x0, NULL, HFILL }},",
          "1389:   { &hf_stats_dot11_rtssuccesscount,",
          "1390:   { \"DOT11_RTSSuccessCount\", \"wassp.stats.dot11.rtssuccesscount\", FT_INT32, BASE_DEC, NULL,",
          "1391:    0x0, NULL, HFILL }},",
          "1393:   { &hf_stats_dot11_receivedfragementcount,",
          "1394:   { \"DOT11_ReceivedFragementCount\", \"wassp.stats.dot11.receivedfragementcount\", FT_INT32, BASE_DEC, NULL,",
          "1395:    0x0, NULL, HFILL }},",
          "1397:   { &hf_stats_dot11_retrycount,",
          "1398:   { \"DOT11_RetryCount\", \"wassp.stats.dot11.retrycount\", FT_INT32, BASE_DEC, NULL,",
          "1399:    0x0, NULL, HFILL }},",
          "1401:   { &hf_stats_dot11_transmittedfragmentcount,",
          "1402:   { \"DOT11_TransmittedFragmentCount\", \"wassp.stats.dot11.transmittedfragmentcount\", FT_INT32, BASE_DEC, NULL,",
          "1403:    0x0, NULL, HFILL }},",
          "1405:   { &hf_stats_dot11_transmittedframecount,",
          "1406:   { \"DOT11_TransmittedFrameCount\", \"wassp.stats.dot11.transmittedframecount\", FT_INT32, BASE_DEC, NULL,",
          "1407:    0x0, NULL, HFILL }},",
          "1409:   { &hf_stats_dot11_webundecryptablecount,",
          "1410:   { \"DOT11_WEBUndecryptableCount\", \"wassp.stats.dot11.webundecryptablecount\", FT_INT32, BASE_DEC, NULL,",
          "1411:    0x0, NULL, HFILL }},",
          "1413:   { &hf_stats_dot11_wepexcludedcount,",
          "1414:   { \"DOT11_WEPExcludedCount\", \"wassp.stats.dot11.wepexcludedcount\", FT_INT32, BASE_DEC, NULL,",
          "1415:    0x0, NULL, HFILL }},",
          "1417:   { &hf_stats_dot11_wepicverrorcount,",
          "1418:   { \"DOT11_WEPICVErrorCount\", \"wassp.stats.dot11.wepicverrorcount\", FT_INT32, BASE_DEC, NULL,",
          "1419:    0x0, NULL, HFILL }},",
          "1421:   { &hf_stats_drm_allocfailures,",
          "1422:   { \"DRM_AllocFailures\", \"wassp.stats.drm.allocfailures\", FT_INT32, BASE_DEC, NULL,",
          "1423:    0x0, NULL, HFILL }},",
          "1425:   { &hf_stats_drm_currentchannel,",
          "1426:   { \"DRM_CurrentChannel\", \"wassp.stats.drm.currentchannel\", FT_INT32, BASE_DEC, NULL,",
          "1427:    0x0, NULL, HFILL }},",
          "1429:   { &hf_stats_drm_currentpower,",
          "1430:   { \"DRM_CurrentPower\", \"wassp.stats.drm.currentpower\", FT_INT32, BASE_DEC, NULL,",
          "1431:    0x0, NULL, HFILL }},",
          "1433:   { &hf_stats_drm_datatxfailures,",
          "1434:   { \"DRM_DataTxFailures\", \"wassp.stats.drm.datatxfailures\", FT_INT32, BASE_DEC, NULL,",
          "1435:    0x0, NULL, HFILL }},",
          "1437:   { &hf_stats_drm_devicetype,",
          "1438:   { \"DRM_DeviceType\", \"wassp.stats.drm.devicetype\", FT_INT32, BASE_DEC, NULL,",
          "1439:    0x0, NULL, HFILL }},",
          "1441:   { &hf_stats_drm_indatapackets,",
          "1442:   { \"DRM_InDataPackets\", \"wassp.stats.drm.indatapackets\", FT_INT32, BASE_DEC, NULL,",
          "1443:    0x0, NULL, HFILL }},",
          "1445:   { &hf_stats_drm_inmgmtpackets,",
          "1446:   { \"DRM_InMgmtPackets\", \"wassp.stats.drm.inmgmtpackets\", FT_INT32, BASE_DEC, NULL,",
          "1447:    0x0, NULL, HFILL }},",
          "1449:   { &hf_stats_drm_loadfactor,",
          "1450:   { \"DRM_LoadFactor\", \"wassp.stats.drm.loadfactor\", FT_INT32, BASE_DEC, NULL,",
          "1451:    0x0, NULL, HFILL }},",
          "1453:   { &hf_stats_drm_mgmttxfailures,",
          "1454:   { \"DRM_MgmtTxFailures\", \"wassp.stats.drm.mgmttxfailures\", FT_INT32, BASE_DEC, NULL,",
          "1455:    0x0, NULL, HFILL }},",
          "1457:   { &hf_stats_drm_msgqfailures,",
          "1458:   { \"DRM_MsgQFailures\", \"wassp.stats.drm.msgqfailures\", FT_INT32, BASE_DEC, NULL,",
          "1459:    0x0, NULL, HFILL }},",
          "1461:   { &hf_stats_drm_nodrmcurrentchannel,",
          "1462:   { \"DRM_NoDRMCurrentChannel\", \"wassp.stats.drm.nodrmcurrentchannel\", FT_INT32, BASE_DEC, NULL,",
          "1463:    0x0, NULL, HFILL }},",
          "1465:   { &hf_stats_drm_outdatapackets,",
          "1466:   { \"DRM_OutDataPackets\", \"wassp.stats.drm.outdatapackets\", FT_INT32, BASE_DEC, NULL,",
          "1467:    0x0, NULL, HFILL }},",
          "1469:   { &hf_stats_drm_outmgmtpackets,",
          "1470:   { \"DRM_OutMgmtPackets\", \"wassp.stats.drm.outmgmtpackets\", FT_INT32, BASE_DEC, NULL,",
          "1471:    0x0, NULL, HFILL }},",
          "1473:   { &hf_stats_if_inbcastpackets,",
          "1474:   { \"IF_InBcastPackets\", \"wassp.stats.if.inbcastpackets\", FT_INT32, BASE_DEC, NULL,",
          "1475:    0x0, NULL, HFILL }},",
          "1477:   { &hf_stats_if_indiscards,",
          "1478:   { \"IF_InDiscards\", \"wassp.stats.if.indiscards\", FT_INT32, BASE_DEC, NULL,",
          "1479:    0x0, NULL, HFILL }},",
          "1481:   { &hf_stats_if_inerrors,",
          "1482:   { \"IF_InErrors\", \"wassp.stats.if.inerrors\", FT_INT32, BASE_DEC, NULL,",
          "1483:    0x0, NULL, HFILL }},",
          "1485:   { &hf_stats_if_inmcastpackets,",
          "1486:   { \"IF_InMcastPackets\", \"wassp.stats.if.inmcastpackets\", FT_INT32, BASE_DEC, NULL,",
          "1487:    0x0, NULL, HFILL }},",
          "1489:   { &hf_stats_if_inoctets,",
          "1490:   { \"IF_InOctets\", \"wassp.stats.if.inoctets\", FT_INT32, BASE_DEC, NULL,",
          "1491:    0x0, NULL, HFILL }},",
          "1493:   { &hf_stats_if_inucastpackets,",
          "1494:   { \"IF_InUcastPackets\", \"wassp.stats.if.inucastpackets\", FT_INT32, BASE_DEC, NULL,",
          "1495:    0x0, NULL, HFILL }},",
          "1497:   { &hf_stats_if_mtu,",
          "1498:   { \"IF_MTU\", \"wassp.stats.if.mtu\", FT_INT32, BASE_DEC, NULL,",
          "1499:    0x0, NULL, HFILL }},",
          "1501:   { &hf_stats_if_outbcastpackets,",
          "1502:   { \"IF_OutBcastPackets\", \"wassp.stats.if.outbcastpackets\", FT_INT32, BASE_DEC, NULL,",
          "1503:    0x0, NULL, HFILL }},",
          "1505:   { &hf_stats_if_outdiscards,",
          "1506:   { \"IF_OutDiscards\", \"wassp.stats.if.outdiscards\", FT_INT32, BASE_DEC, NULL,",
          "1507:    0x0, NULL, HFILL }},",
          "1509:   { &hf_stats_if_outerrors,",
          "1510:   { \"IF_OutErrors\", \"wassp.stats.if.outerrors\", FT_INT32, BASE_DEC, NULL,",
          "1511:    0x0, NULL, HFILL }},",
          "1513:   { &hf_stats_if_outoctets,",
          "1514:   { \"IF_OutOctets\", \"wassp.stats.if.outoctets\", FT_INT32, BASE_DEC, NULL,",
          "1515:    0x0, NULL, HFILL }},",
          "1517:   { &hf_stats_if_outucastpackets,",
          "1518:   { \"IF_OutUcastPackets\", \"wassp.stats.if.outucastpackets\", FT_INT32, BASE_DEC, NULL,",
          "1519:    0x0, NULL, HFILL }},",
          "1521:   { &hf_stats_if_outmcastpackets,",
          "1522:   { \"IF_OutMCastPackets\", \"wassp.stats.if.outmcastpackets\", FT_INT32, BASE_DEC, NULL,",
          "1523:    0x0, NULL, HFILL }},",
          "1525:   { &hf_stats_mu_address,",
          "1526:   { \"MU_Address\", \"wassp.stats.mu.address\", FT_INT32, BASE_DEC, NULL,",
          "1527:    0x0, NULL, HFILL }},",
          "1529:   { &hf_stats_mu_associationcount,",
          "1530:   { \"MU_AssociationCount\", \"wassp.stats.mu.associationcount\", FT_INT32, BASE_DEC, NULL,",
          "1531:    0x0, NULL, HFILL }},",
          "1533:   { &hf_stats_mu_authenticationcount,",
          "1534:   { \"MU_AuthenticationCount\", \"wassp.stats.mu.authenticationcount\", FT_INT32, BASE_DEC, NULL,",
          "1535:    0x0, NULL, HFILL }},",
          "1537:   { &hf_stats_mu_deassociationcount,",
          "1538:   { \"MU_DeAssociationCount\", \"wassp.stats.mu.deassociationcount\", FT_INT32, BASE_DEC, NULL,",
          "1539:    0x0, NULL, HFILL }},",
          "1541:   { &hf_stats_mu_deauthenticationcount,",
          "1542:   { \"MU_DeAuthenticationCount\", \"wassp.stats.mu.deauthenticationcount\", FT_INT32, BASE_DEC, NULL,",
          "1543:    0x0, NULL, HFILL }},",
          "1545:   { &hf_stats_mu_ifindex,",
          "1546:   { \"MU_IfIndex\", \"wassp.stats.mu.ifindex\", FT_INT32, BASE_DEC, NULL,",
          "1547:    0x0, NULL, HFILL }},",
          "1549:   { &hf_stats_mu_reassociationcount,",
          "1550:   { \"MU_ReAssociationCount\", \"wassp.stats.mu.reassociationcount\", FT_INT32, BASE_DEC, NULL,",
          "1551:    0x0, NULL, HFILL }},",
          "1553:   { &hf_stats_mu_receivedbytes,",
          "1554:   { \"MU_ReceivedBytes\", \"wassp.stats.mu.receivedbytes\", FT_INT32, BASE_DEC, NULL,",
          "1555:    0x0, NULL, HFILL }},",
          "1557:   { &hf_stats_mu_receivederrors,",
          "1558:   { \"MU_ReceivedErrors\", \"wassp.stats.mu.receivederrors\", FT_INT32, BASE_DEC, NULL,",
          "1559:    0x0, NULL, HFILL }},",
          "1561:   { &hf_stats_mu_receivedframecount,",
          "1562:   { \"MU_ReceivedFrameCount\", \"wassp.stats.mu.receivedframecount\", FT_INT32, BASE_DEC, NULL,",
          "1563:    0x0, NULL, HFILL }},",
          "1565:   { &hf_stats_mu_receivedrssi,",
          "1566:   { \"MU_ReceivedRSSI\", \"wassp.stats.mu.receivedrssi\", FT_INT32, BASE_DEC, NULL,",
          "1567:    0x0, NULL, HFILL }},",
          "1569:   { &hf_stats_mu_receivedrate,",
          "1570:   { \"MU_ReceivedRate\", \"wassp.stats.mu.receivedrate\", FT_INT32, BASE_DEC, NULL,",
          "1571:    0x0, NULL, HFILL }},",
          "1573:   { &hf_stats_mu_transmittedbytes,",
          "1574:   { \"MU_TransmittedBytes\", \"wassp.stats.mu.transmittedbytes\", FT_INT32, BASE_DEC, NULL,",
          "1575:    0x0, NULL, HFILL }},",
          "1577:   { &hf_stats_mu_transmittederrors,",
          "1578:   { \"MU_TransmittedErrors\", \"wassp.stats.mu.transmittederrors\", FT_INT32, BASE_DEC, NULL,",
          "1579:    0x0, NULL, HFILL }},",
          "1581:   { &hf_stats_mu_transmittedframecount,",
          "1582:   { \"MU_TransmittedFrameCount\", \"wassp.stats.mu.transmittedframecount\", FT_INT32, BASE_DEC, NULL,",
          "1583:    0x0, NULL, HFILL }},",
          "1585:   { &hf_stats_mu_transmittedrssi,",
          "1586:   { \"MU_TransmittedRSSI\", \"wassp.stats.mu.transmittedrssi\", FT_INT32, BASE_DEC, NULL,",
          "1587:    0x0, NULL, HFILL }},",
          "1589:   { &hf_stats_mu_transmittedrate,",
          "1590:   { \"MU_TransmittedRate\", \"wassp.stats.mu.transmittedrate\", FT_INT32, BASE_DEC, NULL,",
          "1591:    0x0, NULL, HFILL }},",
          "1593:   { &hf_stats_mu_rf_stats_end,",
          "1594:   { \"MU_RF_STATS_END\", \"wassp.stats.mu.rf.stats.end\", FT_INT32, BASE_DEC, NULL,",
          "1595:    0x0, NULL, HFILL }},",
          "1597:   { &hf_stats_rfc_1213_sysuptime,",
          "1598:   { \"RFC_1213_SYSUPTIME\", \"wassp.stats.rfc.1213.sysuptime\", FT_INT32, BASE_DEC, NULL,",
          "1599:    0x0, NULL, HFILL }},",
          "1601:   { &hf_dot1x_stats_credent,",
          "1602:   { \"DOT1x_CREDENT\", \"wassp.stats.dot1x.credent\", FT_INT32, BASE_DEC, NULL,",
          "1603:    0x0, NULL, HFILL }},",
          "1605:   { &hf_dot1x_stats_end_date,",
          "1606:   { \"DOT1x_END_DATE\", \"wassp.stats.dot1x.enddate\", FT_INT32, BASE_DEC, NULL,",
          "1607:    0x0, NULL, HFILL }},",
          "1609:   { &hf_stats_tlv_max,",
          "1610:   { \"TLV_MAX\", \"wassp.stats.tlvmax\", FT_INT32, BASE_DEC, NULL,",
          "1611:    0x0, NULL, HFILL }},",
          "1614:   { &hf_config_radio,",
          "1615:   { \"Config Radio\", \"wassp.tlv_config.radio\", FT_NONE, BASE_NONE, NULL,",
          "1616:     0x0, NULL, HFILL }},",
          "1618:   { &hf_config_vns,",
          "1619:   { \"Config VNS\", \"wassp.tlv_config.vns\", FT_NONE, BASE_NONE, NULL,",
          "1620:     0x0, NULL, HFILL }},",
          "1623:   { &hf_config_trace_status_debug,",
          "1624:   { \"TRACE_STATUS_DEBUG\", \"wassp.config.trace.status.debug\", FT_INT32, BASE_DEC, NULL,",
          "1625:    0x0, NULL, HFILL }},",
          "1627:   { &hf_config_trace_status_config,",
          "1628:   { \"TRACE_STATUS_CONFIG\", \"wassp.config.trace.status.config\", FT_INT32, BASE_DEC, NULL,",
          "1629:    0x0, NULL, HFILL }},",
          "1631:   { &hf_config_use_bcast_for_disassc,",
          "1632:   { \"USE_BCAST_FOR_DISASSC\", \"wassp.config.use.bcast.for.disassc\", FT_INT32, BASE_DEC, NULL,",
          "1633:    0x0, NULL, HFILL }},",
          "1635:   { &hf_config_bandwidth_voice_assc,",
          "1636:   { \"BANDWIDTH_VOICE_ASSC\", \"wassp.config.bandwidth.voice.assc\", FT_INT32, BASE_DEC, NULL,",
          "1637:    0x0, NULL, HFILL }},",
          "1639:   { &hf_config_bandwidth_voice_reassc,",
          "1640:   { \"BANDWIDTH_VOICE_REASSC\", \"wassp.config.bandwidth.voice.reassc\", FT_INT32, BASE_DEC, NULL,",
          "1641:    0x0, NULL, HFILL }},",
          "1643:   { &hf_config_bandwidth_video_assc,",
          "1644:   { \"BANDWIDTH_VIDEO_ASSC\", \"wassp.config.bandwidth.video.assc\", FT_INT32, BASE_DEC, NULL,",
          "1645:    0x0, NULL, HFILL }},",
          "1647:   { &hf_config_bandwidth_video_reassc,",
          "1648:   { \"BANDWIDTH_VIDEO_REASSC\", \"wassp.config.bandwidth.video.reassc\", FT_INT32, BASE_DEC, NULL,",
          "1649:    0x0, NULL, HFILL }},",
          "1651:   { &hf_config_bandwidth_video_reserve,",
          "1652:   { \"BANDWIDTH_VIDEO_RESERVE\", \"wassp.config.bandwidth.video.reserve\", FT_INT32, BASE_DEC, NULL,",
          "1653:    0x0, NULL, HFILL }},",
          "1655:   { &hf_config_bandwidth_adm_ctrl_reserve,",
          "1656:   { \"BANDWIDTH_ADM_CTRL_RESERVE\", \"wassp.config.bandwidth.adm.ctrl.reserve\", FT_INT32, BASE_DEC, NULL,",
          "1657:    0x0, NULL, HFILL }},",
          "1659:   { &hf_config_vlan_tag,",
          "1660:   { \"VLAN_TAG\", \"wassp.config.vlan.tag\", FT_INT32, BASE_DEC, NULL,",
          "1661:    0x0, NULL, HFILL }},",
          "1663:   { &hf_config_country_code,",
          "1664:   { \"COUNTRY_CODE\", \"wassp.config.country.code\", FT_INT32, BASE_DEC, NULL,",
          "1665:    0x0, NULL, HFILL }},",
          "1667:   { &hf_config_poll_duration,",
          "1668:   { \"POLL_DURATION\", \"wassp.config.poll.duration\", FT_INT32, BASE_DEC, NULL,",
          "1669:    0x0, NULL, HFILL }},",
          "1671:   { &hf_config_poll_interval,",
          "1672:   { \"POLL_INTERVAL\", \"wassp.config.poll.interval\", FT_INT32, BASE_DEC, NULL,",
          "1673:    0x0, NULL, HFILL }},",
          "1675:   { &hf_config_poll_maintain_client_session,",
          "1676:   { \"POLL_MAINTAIN_CLIENT_SESSION\", \"wassp.config.poll.maintain.client.session\", FT_INT32, BASE_DEC, NULL,",
          "1677:    0x0, NULL, HFILL }},",
          "1679:   { &hf_config_telnet_enable,",
          "1680:   { \"TELNET_ENABLE\", \"wassp.config.telnet.enable\", FT_INT32, BASE_DEC, NULL,",
          "1681:    0x0, NULL, HFILL }},",
          "1683:   { &hf_config_telnet_password,",
          "1684:   { \"TELNET_PASSWORD\", \"wassp.config.telnet.password\", FT_STRING, BASE_NONE, NULL,",
          "1685:    0x0, NULL, HFILL }},",
          "1687:   { &hf_config_telnet_password_entry_mode,",
          "1688:   { \"TELNET_PASSWORD_ENTRY_MODE\", \"wassp.config.telnet.password.entry.mode\", FT_INT32, BASE_DEC, NULL,",
          "1689:    0x0, NULL, HFILL }},",
          "1691:   { &hf_config_outdoor_enable_environment,",
          "1692:   { \"OUTDOOR_ENABLE_ENVIRONMENT\", \"wassp.config.outdoor.enable.environment\", FT_INT32, BASE_DEC, NULL,",
          "1693:    0x0, NULL, HFILL }},",
          "1695:   { &hf_config_slp_retry_count,",
          "1696:   { \"SLP_RETRY_COUNT\", \"wassp.config.slp.retry.count\", FT_INT32, BASE_DEC, NULL,",
          "1697:    0x0, NULL, HFILL }},",
          "1699:   { &hf_config_slp_retry_delay,",
          "1700:   { \"SLP_RETRY_DELAY\", \"wassp.config.slp.retry.delay\", FT_INT32, BASE_DEC, NULL,",
          "1701:    0x0, NULL, HFILL }},",
          "1703:   { &hf_config_dns_retry_count,",
          "1704:   { \"DNS_RETRY_COUNT\", \"wassp.config.dns.retry.count\", FT_INT32, BASE_DEC, NULL,",
          "1705:    0x0, NULL, HFILL }},",
          "1707:   { &hf_config_dns_retry_delay,",
          "1708:   { \"DNS_RETRY_DELAY\", \"wassp.config.dns.retry.delay\", FT_INT32, BASE_DEC, NULL,",
          "1709:    0x0, NULL, HFILL }},",
          "1711:   { &hf_config_mcast_slp_retry_count,",
          "1712:   { \"MCAST_SLP_RETRY_COUNT\", \"wassp.config.mcast.slp.retry.count\", FT_INT32, BASE_DEC, NULL,",
          "1713:    0x0, NULL, HFILL }},",
          "1715:   { &hf_config_mcast_slp_retry_delay,",
          "1716:   { \"MCAST_SLP_RETRY_DELAY\", \"wassp.config.mcast.slp.retry.delay\", FT_INT32, BASE_DEC, NULL,",
          "1717:    0x0, NULL, HFILL }},",
          "1719:   { &hf_config_disc_retry_count,",
          "1720:   { \"DISC_RETRY_COUNT\", \"wassp.config.disc.retry.count\", FT_INT32, BASE_DEC, NULL,",
          "1721:    0x0, NULL, HFILL }},",
          "1723:   { &hf_config_disc_retry_delay,",
          "1724:   { \"DISC_RETRY_DELAY\", \"wassp.config.disc.retry.delay\", FT_BYTES, BASE_NONE, NULL,",
          "1725:    0x0, NULL, HFILL }},",
          "1727:   { &hf_config_logging_alarm_sev,",
          "1728:   { \"LOGGING_ALARM_SEV\", \"wassp.config.logging.alarm.sev\", FT_INT32, BASE_DEC, NULL,",
          "1729:    0x0, NULL, HFILL }},",
          "1731:   { &hf_config_blacklist_blacklist_add,",
          "1732:   { \"BLACKLIST_BLACKLIST_ADD\", \"wassp.config.blacklist.blacklist.add\", FT_INT32, BASE_DEC, NULL,",
          "1733:    0x0, NULL, HFILL }},",
          "1735:   { &hf_config_failover_ac_ip_addr,",
          "1736:   { \"FAILOVER_AC_IP_ADDR\", \"wassp.config.failover.ac.ip.addr\", FT_INT32, BASE_DEC, NULL,",
          "1737:    0x0, NULL, HFILL }},",
          "1739:   { &hf_config_static_ac_ip_addr,",
          "1740:   { \"STATIC_AC_IP_ADDR\", \"wassp.config.static.ac.ip.addr\", FT_INT32, BASE_DEC, NULL,",
          "1741:    0x0, NULL, HFILL }},",
          "1743:   { &hf_config_dhcp_assignment,",
          "1744:   { \"DHCP_ASSIGNMENT\", \"wassp.config.dhcp.assignment\", FT_INT32, BASE_DEC, NULL,",
          "1745:    0x0, NULL, HFILL }},",
          "1747:   { &hf_config_static_ap_ip_addr,",
          "1748:   { \"STATIC_AP_IP_ADDR\", \"wassp.config.static.ap.ip.addr\", FT_INT32, BASE_DEC, NULL,",
          "1749:    0x0, NULL, HFILL }},",
          "1751:   { &hf_config_static_ap_ip_netmask,",
          "1752:   { \"STATIC_AP_IP_NETMASK\", \"wassp.config.static.ap.ip.netmask\", FT_INT32, BASE_DEC, NULL,",
          "1753:    0x0, NULL, HFILL }},",
          "1755:   { &hf_config_static_ap_default_gw,",
          "1756:   { \"STATIC_AP_DEFAULT_GW\", \"wassp.config.static.ap.default.gw\", FT_INT32, BASE_DEC, NULL,",
          "1757:    0x0, NULL, HFILL }},",
          "1759:   { &hf_config_blacklist_del,",
          "1760:   { \"BLACKLIST_DEL\", \"wassp.config.blacklist.del\", FT_INT32, BASE_DEC, NULL,",
          "1761:    0x0, NULL, HFILL }},",
          "1763:   { &hf_config_macaddr_req,",
          "1764:   { \"MACADDR_REQ\", \"wassp.config.macaddr.req\", FT_INT32, BASE_DEC, NULL,",
          "1765:    0x0, NULL, HFILL }},",
          "1767:   { &hf_config_availability_mode,",
          "1768:   { \"AVAILABILITY_MODE\", \"wassp.config.availability.mode\", FT_INT32, BASE_DEC, NULL,",
          "1769:    0x0, NULL, HFILL }},",
          "1772:   { &hf_config_vns_radio_id,",
          "1773:   { \"V_RADIO_ID\", \"wassp.config.vns.radio.id\", FT_INT32, BASE_DEC, NULL,",
          "1774:    0x0, NULL, HFILL }},",
          "1776:   { &hf_config_vns_vns_id,",
          "1777:   { \"V_VNS_ID\", \"wassp.config.vns.vns.id\", FT_INT32, BASE_DEC, NULL,",
          "1778:    0x0, NULL, HFILL }},",
          "1780:   { &hf_config_vns_turbo_voice,",
          "1781:   { \"V_TURBO_VOICE\", \"wassp.config.vns.turbo.voice\", FT_INT32, BASE_DEC, NULL,",
          "1782:    0x0, NULL, HFILL }},",
          "1784:   { &hf_config_vns_prop_ie,",
          "1785:   { \"V_PROP_IE\", \"wassp.config.vns.prop.ie\", FT_INT32, BASE_DEC, NULL,",
          "1786:    0x0, NULL, HFILL }},",
          "1788:   { &hf_config_vns_enable_802_11_h,",
          "1789:   { \"V_ENABLE_802_11_H\", \"wassp.config.vns.enable.802.11.h\", FT_INT32, BASE_DEC, NULL,",
          "1790:    0x0, NULL, HFILL }},",
          "1792:   { &hf_config_vns_power_backoff,",
          "1793:   { \"V_POWER_BACKOFF\", \"wassp.config.vns.power.backoff\", FT_INT32, BASE_DEC, NULL,",
          "1794:    0x0, NULL, HFILL }},",
          "1796:   { &hf_config_vns_bridge_mode,",
          "1797:   { \"V_BRIDGE_MODE\", \"wassp.config.vns.bridge.mode\", FT_INT32, BASE_DEC, NULL,",
          "1798:    0x0, NULL, HFILL }},",
          "1800:   { &hf_config_vns_vlan_tag,",
          "1801:   { \"V_VLAN_TAG\", \"wassp.config.vns.vlan.tag\", FT_INT32, BASE_DEC, NULL,",
          "1802:    0x0, NULL, HFILL }},",
          "1804:   { &hf_config_vns_process_ie_req,",
          "1805:   { \"V_PROCESS_IE_REQ\", \"wassp.config.vns.process.ie.req\", FT_INT32, BASE_DEC, NULL,",
          "1806:    0x0, NULL, HFILL }},",
          "1808:   { &hf_config_vns_enable_u_apsd,",
          "1809:   { \"V_ENABLE_U_APSD\", \"wassp.config.vns.enable.u.apsd\", FT_INT32, BASE_DEC, NULL,",
          "1810:    0x0, NULL, HFILL }},",
          "1812:   { &hf_config_vns_adm_ctrl_voice,",
          "1813:   { \"V_ADM_CTRL_VOICE\", \"wassp.config.vns.adm.ctrl.voice\", FT_INT32, BASE_DEC, NULL,",
          "1814:    0x0, NULL, HFILL }},",
          "1816:   { &hf_config_vns_adm_ctrl_video,",
          "1817:   { \"V_ADM_CTRL_VIDEO\", \"wassp.config.vns.adm.ctrl.video\", FT_INT32, BASE_DEC, NULL,",
          "1818:    0x0, NULL, HFILL }},",
          "1820:   { &hf_config_vns_qos_up_value,",
          "1821:   { \"V_QOS_UP_VALUE\", \"wassp.config.vns.qos.up.value\", FT_BYTES, BASE_NONE, NULL,",
          "1822:    0x0, NULL, HFILL }},",
          "1824:   { &hf_config_vns_priority_override,",
          "1825:   { \"V_PRIORITY_OVERRIDE\", \"wassp.config.vns.priority.override\", FT_INT32, BASE_DEC, NULL,",
          "1826:    0x0, NULL, HFILL }},",
          "1828:   { &hf_config_vns_dscp_override_value,",
          "1829:   { \"V_DSCP_OVERRIDE_VALUE\", \"wassp.config.vns.dscp.override.value\", FT_INT32, BASE_DEC, NULL,",
          "1830:    0x0, NULL, HFILL }},",
          "1832:   { &hf_config_vns_enable_802_11_e,",
          "1833:   { \"V_ENABLE_802_11_E\", \"wassp.config.vns.enable.802.11.e\", FT_INT32, BASE_DEC, NULL,",
          "1834:    0x0, NULL, HFILL }},",
          "1836:   { &hf_config_vns_enable_wmm,",
          "1837:   { \"V_ENABLE_WMM\", \"wassp.config.vns.enable.wmm\", FT_INT32, BASE_DEC, NULL,",
          "1838:    0x0, NULL, HFILL }},",
          "1840:   { &hf_config_vns_legacy_client_priority,",
          "1841:   { \"V_LEGACY_CLIENT_PRIORITY\", \"wassp.config.vns.legacy.client.priority\", FT_INT32, BASE_DEC, NULL,",
          "1842:    0x0, NULL, HFILL }},",
          "1844:   { &hf_config_vns_ssid_id,",
          "1845:   { \"V_SSID_ID\", \"wassp.config.vns.ssid.id\", FT_INT32, BASE_DEC, NULL,",
          "1846:    0x0, NULL, HFILL }},",
          "1848:   { &hf_config_vns_ssid_bcast_string,",
          "1849:   { \"V_SSID_BCAST_STRING\", \"wassp.config.vns.ssid.bcast.string\", FT_STRING, BASE_NONE, NULL,",
          "1850:    0x0, NULL, HFILL }},",
          "1852:   { &hf_config_vns_ssid_suppress,",
          "1853:   { \"V_SSID_SUPPRESS\", \"wassp.config.vns.ssid.suppress\", FT_INT32, BASE_DEC, NULL,",
          "1854:    0x0, NULL, HFILL }},",
          "1856:   { &hf_config_vns_802_1_x_enable,",
          "1857:   { \"V_802_1_X_ENABLE\", \"wassp.config.vns.802.1.x.enable\", FT_INT32, BASE_DEC, NULL,",
          "1858:    0x0, NULL, HFILL }},",
          "1860:   { &hf_config_vns_802_1_x_dyn_rekey,",
          "1861:   { \"V_802_1_X_DYN_REKEY\", \"wassp.config.vns.802.1.x.dyn.rekey\", FT_INT32, BASE_DEC, NULL,",
          "1862:    0x0, NULL, HFILL }},",
          "1864:   { &hf_config_vns_wpa_enable,",
          "1865:   { \"V_WPA_ENABLE\", \"wassp.config.vns.wpa.enable\", FT_INT32, BASE_DEC, NULL,",
          "1866:    0x0, NULL, HFILL }},",
          "1868:   { &hf_config_vns_wpa_v2_enable,",
          "1869:   { \"V_WPA_V2_ENABLE\", \"wassp.config.vns.wpa.v2.enable\", FT_INT32, BASE_DEC, NULL,",
          "1870:    0x0, NULL, HFILL }},",
          "1872:   { &hf_config_vns_wpa_passphrase,",
          "1873:   { \"V_WPA_PASSPHRASE\", \"wassp.config.vns.wpa.passphrase\", FT_STRING, BASE_NONE, NULL,",
          "1874:    0x0, NULL, HFILL }},",
          "1876:   { &hf_config_vns_wpa_cipher_type,",
          "1877:   { \"V_WPA_CIPHER_TYPE\", \"wassp.config.vns.wpa.cipher.type\", FT_INT32, BASE_DEC, NULL,",
          "1878:    0x0, NULL, HFILL }},",
          "1880:   { &hf_config_vns_wpa_v2_cipher_type,",
          "1881:   { \"V_WPA_V2_CIPHER_TYPE\", \"wassp.config.vns.wpa.v2.cipher.type\", FT_INT32, BASE_DEC, NULL,",
          "1882:    0x0, NULL, HFILL }},",
          "1884:   { &hf_config_vns_wep_key_index,",
          "1885:   { \"V_WEP_KEY_INDEX\", \"wassp.config.vns.wep.key.index\", FT_INT32, BASE_DEC, NULL,",
          "1886:    0x0, NULL, HFILL }},",
          "1888:   { &hf_config_vns_wep_default_key_value,",
          "1889:   { \"V_WEP_DEFAULT_KEY_VALUE\", \"wassp.config.vns.wep.default.key.value\", FT_INT32, BASE_DEC, NULL,",
          "1890:    0x0, NULL, HFILL }},",
          "1892:   { &hf_config_vns_channel_report,",
          "1893:   { \"V_CHANNEL_REPORT\", \"wassp.config.vns.channel.report\", FT_INT32, BASE_DEC, NULL,",
          "1894:    0x0, NULL, HFILL }},",
          "1896:   { &hf_config_vns_wds_service,",
          "1897:   { \"V_WDS_SERVICE\", \"wassp.config.vns.wds.service\", FT_INT32, BASE_DEC, NULL,",
          "1898:    0x0, NULL, HFILL }},",
          "1900:   { &hf_config_vns_wds_pref_parent,",
          "1901:   { \"V_WDS_PREF_PARENT\", \"wassp.config.vns.wds.pref.parent\", FT_INT32, BASE_DEC, NULL,",
          "1902:    0x0, NULL, HFILL }},",
          "1904:   { &hf_config_vns_wds_bridge,",
          "1905:   { \"V_WDS_BRIDGE\", \"wassp.config.vns.wds.bridge\", FT_INT32, BASE_DEC, NULL,",
          "1906:    0x0, NULL, HFILL }},",
          "1908:   { &hf_config_vns_okc_enabled,",
          "1909:   { \"V_OKC_ENABLED\", \"wassp.config.vns.okc.enabled\", FT_INT32, BASE_DEC, NULL,",
          "1910:    0x0, NULL, HFILL }},",
          "1912:   { &hf_config_vns_mu_assoc_retries,",
          "1913:   { \"V_MU_ASSOC_RETRIES\", \"wassp.config.vns.mu.assoc.retries\", FT_INT32, BASE_DEC, NULL,",
          "1914:    0x0, NULL, HFILL }},",
          "1916:   { &hf_config_vns_mu_assoc_timeout,",
          "1917:   { \"V_MU_ASSOC_TIMEOUT\", \"wassp.config.vns.mu.assoc.timeout\", FT_INT32, BASE_DEC, NULL,",
          "1918:    0x0, NULL, HFILL }},",
          "1920:   { &hf_config_vns_wds_parent,",
          "1921:   { \"V_WDS_PARENT\", \"wassp.config.vns.wds.parent\", FT_INT32, BASE_DEC, NULL,",
          "1922:    0x0, NULL, HFILL }},",
          "1924:   { &hf_config_vns_wds_back_parent,",
          "1925:   { \"V_WDS_BACK_PARENT\", \"wassp.config.vns.wds.back.parent\", FT_INT32, BASE_DEC, NULL,",
          "1926:    0x0, NULL, HFILL }},",
          "1928:   { &hf_config_vns_wds_name,",
          "1929:   { \"V_WDS_NAME\", \"wassp.config.vns.wds.name\", FT_STRING, BASE_NONE, NULL,",
          "1930:    0x0, NULL, HFILL }},",
          "1933:   { &hf_config_radio_radio_id,",
          "1934:   { \"R_RADIO_ID\", \"wassp.config.radio.radio.id\", FT_INT32, BASE_DEC, NULL,",
          "1935:    0x0, NULL, HFILL }},",
          "1937:   { &hf_config_radio_enable_radio,",
          "1938:   { \"R_ENABLE_RADIO\", \"wassp.config.radio.enable.radio\", FT_INT32, BASE_DEC, NULL,",
          "1939:    0x0, NULL, HFILL }},",
          "1941:   { &hf_config_radio_channel,",
          "1942:   { \"R_CHANNEL\", \"wassp.config.radio.channel\", FT_INT32, BASE_DEC, NULL,",
          "1943:    0x0, NULL, HFILL }},",
          "1945:   { &hf_config_radio_op_rate_set,",
          "1946:   { \"R_OP_RATE_SET\", \"wassp.config.radio.op.rate.set\", FT_INT32, BASE_DEC, NULL,",
          "1947:    0x0, NULL, HFILL }},",
          "1949:   { &hf_config_radio_op_rate_max,",
          "1950:   { \"R_OP_RATE_MAX\", \"wassp.config.radio.op.rate.max\", FT_INT32, BASE_DEC, NULL,",
          "1951:    0x0, NULL, HFILL }},",
          "1953:   { &hf_config_radio_beacon_period,",
          "1954:   { \"R_BEACON_PERIOD\", \"wassp.config.radio.beacon.period\", FT_INT32, BASE_DEC, NULL,",
          "1955:    0x0, NULL, HFILL }},",
          "1957:   { &hf_config_radio_dtim_period,",
          "1958:   { \"R_DTIM_PERIOD\", \"wassp.config.radio.dtim.period\", FT_INT32, BASE_DEC, NULL,",
          "1959:    0x0, NULL, HFILL }},",
          "1961:   { &hf_config_radio_rts_threshold,",
          "1962:   { \"R_RTS_THRESHOLD\", \"wassp.config.radio.rts.threshold\", FT_INT32, BASE_DEC, NULL,",
          "1963:    0x0, NULL, HFILL }},",
          "1965:   { &hf_config_radio_fragment_threshold,",
          "1966:   { \"R_FRAGMENT_THRESHOLD\", \"wassp.config.radio.fragment.threshold\", FT_INT32, BASE_DEC, NULL,",
          "1967:    0x0, NULL, HFILL }},",
          "1969:   { &hf_config_radio_power_level,",
          "1970:   { \"R_POWER_LEVEL\", \"wassp.config.radio.power.level\", FT_INT32, BASE_DEC, NULL,",
          "1971:    0x0, NULL, HFILL }},",
          "1973:   { &hf_config_radio_diversity_rx,",
          "1974:   { \"R_DIVERSITY_RX\", \"wassp.config.radio.diversity.rx\", FT_INT32, BASE_DEC, NULL,",
          "1975:    0x0, NULL, HFILL }},",
          "1977:   { &hf_config_radio_diversity_tx,",
          "1978:   { \"R_DIVERSITY_TX\", \"wassp.config.radio.diversity.tx\", FT_INT32, BASE_DEC, NULL,",
          "1979:    0x0, NULL, HFILL }},",
          "1981:   { &hf_config_radio_short_preamble,",
          "1982:   { \"R_SHORT_PREAMBLE\", \"wassp.config.radio.short.preamble\", FT_INT32, BASE_DEC, NULL,",
          "1983:    0x0, NULL, HFILL }},",
          "1985:   { &hf_config_radio_basic_rate_max,",
          "1986:   { \"R_BASIC_RATE_MAX\", \"wassp.config.radio.basic.rate.max\", FT_INT32, BASE_DEC, NULL,",
          "1987:    0x0, NULL, HFILL }},",
          "1989:   { &hf_config_radio_basic_rate_min,",
          "1990:   { \"R_BASIC_RATE_MIN\", \"wassp.config.radio.basic.rate.min\", FT_INT32, BASE_DEC, NULL,",
          "1991:    0x0, NULL, HFILL }},",
          "1993:   { &hf_config_radio_hw_retries,",
          "1994:   { \"R_HW_RETRIES\", \"wassp.config.radio.hw.retries\", FT_STRING, BASE_NONE, NULL,",
          "1995:    0x0, NULL, HFILL }},",
          "1997:   { &hf_config_radio_tx_power_min,",
          "1998:   { \"R_TX_POWER_MIN\", \"wassp.config.radio.tx.power.min\", FT_INT32, BASE_DEC, NULL,",
          "1999:    0x0, NULL, HFILL }},",
          "2001:   { &hf_config_radio_tx_power_max,",
          "2002:   { \"R_TX_POWER_MAX\", \"wassp.config.radio.tx.power.max\", FT_INT32, BASE_DEC, NULL,",
          "2003:    0x0, NULL, HFILL }},",
          "2005:   { &hf_config_radio_domain_id,",
          "2006:   { \"R_DOMAIN_ID\", \"wassp.config.radio.domain.id\", FT_STRING, BASE_NONE, NULL,",
          "2007:    0x0, NULL, HFILL }},",
          "2009:   { &hf_config_radio_b_enable,",
          "2010:   { \"R_B_ENABLE\", \"wassp.config.radio.b.enable\", FT_INT32, BASE_DEC, NULL,",
          "2011:    0x0, NULL, HFILL }},",
          "2013:   { &hf_config_radio_b_basic_rates,",
          "2014:   { \"R_B_BASIC_RATES\", \"wassp.config.radio.b.basic.rates\", FT_INT32, BASE_DEC, NULL,",
          "2015:    0x0, NULL, HFILL }},",
          "2017:   { &hf_config_radio_g_enable,",
          "2018:   { \"R_G_ENABLE\", \"wassp.config.radio.g.enable\", FT_INT32, BASE_DEC, NULL,",
          "2019:    0x0, NULL, HFILL }},",
          "2021:   { &hf_config_radio_g_protect_mode,",
          "2022:   { \"R_G_PROTECT_MODE\", \"wassp.config.radio.g.protect.mode\", FT_INT32, BASE_DEC, NULL,",
          "2023:    0x0, NULL, HFILL }},",
          "2025:   { &hf_config_radio_g_protect_type,",
          "2026:   { \"R_G_PROTECT_TYPE\", \"wassp.config.radio.g.protect.type\", FT_INT32, BASE_DEC, NULL,",
          "2027:    0x0, NULL, HFILL }},",
          "2029:   { &hf_config_radio_g_protect_rate,",
          "2030:   { \"R_G_PROTECT_RATE\", \"wassp.config.radio.g.protect.rate\", FT_INT32, BASE_DEC, NULL,",
          "2031:    0x0, NULL, HFILL }},",
          "2033:   { &hf_config_radio_g_basic_rate,",
          "2034:   { \"R_G_BASIC_RATE\", \"wassp.config.radio.g.basic.rate\", FT_INT32, BASE_DEC, NULL,",
          "2035:    0x0, NULL, HFILL }},",
          "2037:   { &hf_config_radio_a_support_802_11_j,",
          "2038:   { \"R_A_SUPPORT_802_11_J\", \"wassp.config.radio.a.support.802.11.j\", FT_INT32, BASE_DEC, NULL,",
          "2039:    0x0, NULL, HFILL }},",
          "2041:   { &hf_config_radio_atpc_en_interval,",
          "2042:   { \"R_ATPC_EN_INTERVAL\", \"wassp.config.radio.atpc.en.interval\", FT_INT32, BASE_DEC, NULL,",
          "2043:    0x0, NULL, HFILL }},",
          "2045:   { &hf_config_radio_acs_ch_list,",
          "2046:   { \"R_ACS_CH_LIST\", \"wassp.config.radio.acs.ch.list\", FT_BYTES, BASE_NONE, NULL,",
          "2047:    0x0, NULL, HFILL }},",
          "2049:   { &hf_config_radio_tx_power_adj,",
          "2050:   { \"R_TX_POWER_ADJ\", \"wassp.config.radio.tx.power.adj\", FT_INT32, BASE_DEC, NULL,",
          "2051:    0x0, NULL, HFILL }},",
          "2054:   { &hf_wassp_discover1,",
          "2055:   { \"Discover Header1\", \"wassp.discover1\", FT_UINT8, BASE_HEX, NULL,",
          "2056:    0x0, NULL, HFILL }},",
          "2060:   { &hf_wassp_discover2,",
          "2061:   { \"Discover Header2\", \"wassp.discover2\", FT_UINT8, BASE_HEX, NULL,",
          "2062:    0x0, NULL, HFILL }},",
          "2064:   { &hf_wassp_subtype,",
          "2065:   { \"Discover Subtype\", \"wassp.subtype\", FT_UINT8, BASE_DEC, NULL,",
          "2066:    0x0, NULL, HFILL }},",
          "2068:   { &hf_wassp_ether,",
          "2069:   { \"Discover Ether\", \"wassp.ether\", FT_ETHER, BASE_NONE, NULL,",
          "2070:    0x0, NULL, HFILL }},",
          "2072:   { &hf_wassp_discover3,",
          "2073:   { \"Discover Header3\", \"wassp.discover3\", FT_UINT8, BASE_HEX, NULL,",
          "2074:    0x0, NULL, HFILL }},",
          "2077:  static gint *ett[] = {",
          "2079:   &ett_wassp_tlv_header,",
          "2080:  };",
          "2081:  static ei_register_info ei[] = {",
          "2082:   { &ei_wassp_length_too_short,",
          "2083:     { \"wassp.length_too_short\", PI_MALFORMED, PI_ERROR,",
          "2084:       \"Length is too short (< 4)\", EXPFILL }}",
          "2087:  proto_wassp = proto_register_protocol(PROTO_LONG_NAME, PROTO_SHORT_NAME, \"wassp\");",
          "2090:  expert_wassp = expert_register_protocol(proto_wassp);",
          "2091:  expert_register_field_array(expert_wassp, ei, array_length(ei));",
          "",
          "[Added Lines]",
          "26: #include <epan/reassemble.h>",
          "27: #include <epan/conversation.h>",
          "32: #define LBS_HDR_MAGIC 0x7c83",
          "33: #define MU_NETFLOW_RECORD_SIZE 46",
          "34: #define WASSP_SNMP 161",
          "37: #define TLV_TYPE 0",
          "38: #define TLV_LENGTH 2",
          "39: #define TLV_VALUE 4",
          "42: #define WASSP_HDR_LEN 8",
          "43: #define RU_HEADER_WITH_MAC_LEN 16",
          "44: #define RU_HEADER_WITHOUT_MAC_LEN 12",
          "45: #define WASSP_MU_HDR_LEN 14",
          "48: #define WASSP_HDR_VERSION 0",
          "49: #define WASSP_HDR_TYPE 1",
          "50: #define WASSP_HDR_SEQ_NUM 2",
          "51: #define WASSP_HDR_FLAGS 3",
          "52: #define WASSP_HDR_SESSIONID 4",
          "53: #define WASSP_HDR_PLENGTH 6",
          "57: #define RU_HDR_VERSION 0",
          "58: #define RU_HDR_TYPE 1",
          "59: #define RU_HDR_RAD_NUM 2",
          "60: #define RU_HDR_LENGTH 4",
          "61: #define RU_HDR_CHECKSUM 6",
          "62: #define RU_HDR_AC_OP 8",
          "63: #define RU_HDR_MAC  10",
          "64: #define RU_HDR_AC_MODE  10",
          "67: #define RU_HDR_CONTAIN_MAC 1",
          "69: #define MU_NETFLOW_HDR_VERSION 0",
          "70: #define MU_NETFLOW_HDR_LENGTH 2",
          "71: #define MU_NETFLOW_HDR_FLAG 4",
          "72: #define MU_NETFLOW_HDR_UPTIME 6",
          "74: #define MU_NETFLOW_HEADER_TOTAL_LENGTH 10",
          "78: #define WASSP_MU_HDR_TYPE 0",
          "79: #define WASSP_MU_HDR_QOS 1",
          "80: #define WASSP_MU_HDR_ACTION_SSID 2",
          "81: #define WASSP_MU_HDR_MAC 4",
          "82: #define WASSP_MU_HDR_RESV_0 10",
          "83: #define WASSP_MU_HDR_RESV_1 12",
          "84: #define WASSP_MU_HDR_WITH_ASSO_STATUS_LEN 15",
          "85: #define WASSP_MU_HDR_WITHOUT_ASSO_STATUS_LEN 14",
          "87: #define RU_WASSP_FLAGS_MORE_FRAGMENTS_FOLLOWING 0x01",
          "88: #define RU_WASSP_FLAGS_NOT_FIRST_FRAGMENT       0x04",
          "89: #define RU_WASSP_FLAGS_USE_FRAGMENTATION        0x08",
          "90: #define RU_WASSP_FLAGS                          0x3f",
          "92: #define RU_DISCOVER_OP_MODE 1",
          "93: #define WASSP_MOBILITY 0x10",
          "94: #define WASSP_DATA_FRAGMENT 0x2",
          "97: #define UDP_PORT_WASSP 13910",
          "98: #define PORT_WASSP_DISCOVER 13907",
          "101: #define WASSP_DATA_FRAGMENT_BIT 0x2",
          "105: typedef struct   tlv_mac_add",
          "106: {",
          "107:  guint16 tlvType ;",
          "108:  guint16 tlvLen;",
          "109:  guint8    tlvMac[6/* MAC_ADDR_SIZE */];",
          "110: }  TLV_MAC_ADD;",
          "111: #define TLV_MAC_ADD_SIZE sizeof (TLV_MAC_ADD)",
          "116: typedef struct",
          "117: {",
          "118:  guint16      tlvType;",
          "119:  guint16      tlvLen;",
          "120:  TLV_MAC_ADD  tlvMacAddress;",
          "121:  guint32      radioId;",
          "122: } TLV_RADIO_BLOCK;",
          "125: typedef struct tlvVnsBlock",
          "126: {",
          "127:  guint16      tlvType;",
          "128:  guint16      tlvLen;",
          "129:  guint32      radioId;",
          "130:  guint32      bssidId;",
          "131:  guint32      ssidId;",
          "132: } TLV_VNS_BLOCK;",
          "135: typedef struct",
          "136: {",
          "137:  TLV_MAC_ADD           tlvMacAddress;",
          "138:  TLV_RADIO_BLOCK       tlvRadioB[2];",
          "139:  TLV_VNS_BLOCK         tlvVnsB[16];",
          "140: } tlvSsiddBssidMap;",
          "146: typedef struct",
          "147: {",
          "148:  guint16    tlvId;",
          "149:  char     *name;",
          "150:  guint16    type;",
          "151:  guint16    length;",
          "152: #define WASSP_TAB_IDX length",
          "153:  guint32    (*parseFunc)(void);",
          "154:  guint32    (*setFunc)(void);",
          "155:  guint32    offset;",
          "156:  guint8     flags;",
          "157:  guint32    minValue;",
          "158:  guint32    maxValue;",
          "159:  guint32    (*customCheckFunc)(void);",
          "160: } TLV_PARSER_ENTRY;",
          "163: #define TLV_TYPE_UNKNOWN         0",
          "164: #define TLV_TYPE_STRING          1  //- PW_TYPE_STRING",
          "165: #define TLV_TYPE_INT             2  //- PW_TYPE_INTEGER",
          "166: #define TLV_TYPE_UINT            3  //- PW_TYPE_INTEGER",
          "167: #define TLV_TYPE_BOOL            4  //- PW_TYPE_INTEGER",
          "168: #define TLV_TYPE_OCTETS          5  //- PW_TYPE_OCTETS",
          "169: #define TLV_TYPE_MACADD          6  //- PW_TYPE_MACADD",
          "170: #define TLV_TYPE_BLOCK_TLV       7",
          "171: #define TLV_TYPE_INDEX           8  //- PW_TYPE_INTEGER",
          "172: #define TLV_TYPE_IP_ADDR         9  //- PW_TYPE_INTEGER",
          "174: typedef enum",
          "175: {",
          "176:  CONFIG_GLOBAL_BLOCK,",
          "177:  CONFIG_ERROR_BLOCK,",
          "178:  TAB_CONFIG_MODIFIED,",
          "179:  RADIO_CONFIG_BLOCK,",
          "180:  VNS_CONFIG_BLOCK,",
          "181:  MU_RF_STATS_BLOCK,",
          "182:  AP_STATS_BLOCK,",
          "183:  STATS_MU_BLOCK,",
          "184:  TAB_STATS_RADIO,",
          "185:  TAB_STATS_ETH,",
          "186:  TAB_STATS_WDS,",
          "187:  TAB_STATS_DOT1x,",
          "188:  TAB_CONFIG_FILTER,",
          "189:  TAB_STATS_VNS,",
          "190:  TAB_CONFIG_RADIUS_SERVER,",
          "191:  TAB_CONFIG_SITE,",
          "192:  TAB_CONFIG_POLICY,",
          "193:  TAB_CONFIG_COS,",
          "194:  TAB_CONFIG_LOC_BASE_LP,",
          "195:  TAB_CONFIG_RADIUS,",
          "196:  EVENT_BLOCK,",
          "197:  TAB_SSS_MU_BLOCK,",
          "198:  TAB_EID_MU_BLOCK,",
          "199:  BULK_MU_BLOCK,",
          "200:  MU_BLOCK,",
          "201:  BULK_VNS_BLOCK,",
          "202:  VNS_BLOCK,",
          "203:  TAB_SIAPP_PMK_BLOCK,",
          "204:  TAB_SIAPP_RADIO_CONFIG_BLOCK,",
          "205:  TAB_SIAPP_MU_STATS_BLOCK,",
          "206:  TAB_SIAPP_THIN_BLOCK,",
          "207:  TAB_SIAPP_BLOCK,",
          "208:  TAB_ASSOC_SSID_ARRAY,",
          "209:  TAB_ASSOC_SSID_BLOCK,",
          "210:  TAB_AP_LIST_BLOCK,",
          "211:  TAB_AP_LIST_ARRAY,",
          "212:  TAB_SCAN_PROFILE_BLOCK,",
          "213:  TAB_THREAT_DEF_ARRAY,",
          "214:  TAB_THREAT_DEF_BLOCK,",
          "215:  TAB_THREAT_PATTERN_ARRAY,",
          "216:  TAB_THREAT_PATTERN_BLOCK,",
          "217:  TAB_SURVEILLANCE_DATA_ARRAY,",
          "218:  TAB_SURVEILLANCE_DATA_BLOCK,",
          "219:  TAB_THREAT_DATA_ARRAY,",
          "220:  TAB_THREAT_DATA_BLOCK,",
          "221:  TAB_THREAT_CLASSIFY_ARRAY,",
          "222:  TAB_THREAT_CLASSIFY_BLOCK,",
          "223:  TAB_USER_CLASSIFY_ARRAY,",
          "224:  TAB_USER_CLASSIFY_BLOCK,",
          "225:  TAB_MU_EVENT_ARRAY,",
          "226:  TAB_MU_EVENT_BLOCK,",
          "227:  TAB_COUNTRY_ARRAY,",
          "228:  TAB_COUNTRY_BLOCK,",
          "229:  TAB_LOCATOR_LOC_BLOCK,",
          "230:  TAB_LOCATOR_LOC_ARRAY,",
          "231:  TAB_RSS_DATA_ARRAY,",
          "232:  TAB_RSS_DATA_BLOCK,",
          "233:  TAB_MCAST_FILTER_BLOCK,",
          "234:  TAB_MCAST_FILTER_BLOCK_ENTRY,",
          "235:  TAB_MU_SESSION_ARRAY,",
          "236:  TAB_MU_SESSION_BLOCK,",
          "237:  TAB_DETECTED_ROGUE_ARRAY,",
          "238:  TAB_DETECTED_ROGUE_BLOCK,",
          "239:  TAB_FILTER_RULES_EXT_BLOCK,",
          "240:  TAB_APP_POLICY_FIXED_BLOCK,",
          "241:  TAB_V_FILTER_RULES_EXT_BLOCK,",
          "242:  TAB_V_SITE_FILTER_RULES_EXT_BLOCK,",
          "243:  TAB_APP_POLICY_ENTRY_BLOCK,",
          "244:  TAB_11U_ANQP_BLOCK,",
          "245:  TAB_HS2_BLOCK,",
          "246:  TAB_RU_ACK_RADIO_CONFIG,",
          "247:  TAB_MU_APPL_STATS_BLOCK,",
          "248:  TAB_EXTAPP_CONF_BLOCK,",
          "249:  TAB_V_CP_CONFIG_BLOCK,",
          "250:  TAB_TOPOLOGY_ARRAY_BLOCK,",
          "251:  TAB_TOPOLOGY_STRUCT_BLOCK,",
          "252:  TAB_FILTER_CONFIG_STRUCT_BLOCK,",
          "253:  TAB_S_TOPOLOGY_ARRAY_BLOCK,",
          "254:  TAB_S_TOPOLOGY_STRUCT_BLOCK,",
          "255:  TAB_S_TOPO_MCAST_FILTER_CONFIG_BLOCK,",
          "256:  TAB_S_TOPO_MCAST_FILTER_RULES_EXT_BLOCK,",
          "257:  TAB_NAC_SERVER_CONFIG_ARRAY,",
          "258:  TAB_NAC_SERVER_CONFIG_BLOCK,",
          "259:  TAB_NAC_WEB_AUTH_USER_GROUP_ARRAY,",
          "260:  TAB_NAC_WEB_AUTH_USER_GROUP_BLOCK,",
          "262:  TAB_MAX",
          "263: } WASSP_SUBTLV_TAB_e;",
          "267: typedef enum",
          "268: {",
          "269:  WASSP_RU_UNUSED_0 = 0,",
          "270:  WASSP_RU_Discov,                           // 1",
          "271:  WASSP_RU_Register_Req,                     // 2",
          "272:  WASSP_RU_Register_Rsp,                     // 3",
          "273:  WASSP_RU_Authentication_Req,               // 4",
          "274:  WASSP_RU_Authentication_Rsp,               // 5",
          "275:  WASSP_RU_SW_Version_Validate_Req,          // 6",
          "276:  WASSP_RU_SW_Version_Validate_Rsp,          // 7",
          "277:  WASSP_RU_Config_Req,                       // 8",
          "278:  WASSP_RU_Config_Rsp,                       // 9",
          "279:  WASSP_RU_Ack,                              // 10",
          "280:  WASSP_RU_Config_Status_Notify,             // 11",
          "281:  WASSP_RU_Set_State_Req,                    // 12",
          "282:  WASSP_RU_Set_State_Rsp,                    // 13",
          "283:  WASSP_RU_Stats_Notify,                     // 14",
          "284:  WASSP_Data,                                // 15",
          "285:  WASSP_RU_Poll,                             // 16",
          "286:  WASSP_RU_SNMP_Req,                         // 17",
          "287:  WASSP_RU_SNMP_Rsp,                         // 18",
          "288:  WASSP_BP_Trap_Notify,                      // 19",
          "289:  WASSP_BP_Scan_Req,                         // 20",
          "290:  WASSP_RFM_Notify,                          // 21",
          "291:  WASSP_RU_SNMP_Alarm_Notify,                // 22",
          "292:  WASSP_RU_SNMP_Set_Alarm_Clear,             // 23",
          "293:  WASSP_RU_SNMP_Set_Log_Status,              // 24",
          "294:  WASSP_RU_SNMP_Get_Log_Req,                 // 25",
          "295:  WASSP_RU_SNMP_Get_Log_Resp,                // 26",
          "296:  WASSP_SEC_Update_Notify,                   // 27",
          "297:  WASSP_RU_STATS_Req,                        // 28",
          "298:  WASSP_RU_STATS_Rsp,                        // 29",
          "299:  WASSP_RU_UNUSED_30,                        // 30",
          "300:  WASSP_RU_UNUSED_31,                        // 31",
          "301:  WASSP_RU_Get_Req,                          // 32",
          "302:  WASSP_RU_Get_Rsp,                          // 33",
          "303:  WASSP_RU_Alarm_Notify,                     // 34",
          "304:  WASSP_RU_Set_Alarm_Clear,                  // 35",
          "305:  WASSP_RU_Get_Log_Req,                      // 36",
          "306:  WASSP_RU_Get_Log_Rsp,                      // 37",
          "307:  WASSP_RU_UNUSED_38,                        // 38",
          "308:  WASSP_RU_UNUSED_39,                        // 39",
          "309:  WASSP_P_PEER_DOWN_NOTIFY,                  // 40",
          "310:  WASSP_P_LINK_STATE_CHANGE_REQ,             // 41",
          "311:  WASSP_P_LINK_STATE_CHANGE_RSP,             // 42",
          "312:  WASSP_RU_AC_Poll,                          // 43",
          "313:  WASSP_RU_GetIP_Req,                        // 44",
          "314:  WASSP_RU_GetIP_Rsp,                        // 45",
          "315:  WASSP_RU_LAMG_Update_Req,                  // 46",
          "316:  WASSP_RU_LAMG_Update_Rsp,                  // 47",
          "317:  WASSP_RU_Event_Req,                        // 48",
          "318:  WASSP_RU_Event_Rsp,                        // 49",
          "319:  WASSP_RU_BULK_MU_UPDATE_REQ,               // 50",
          "320:  WASSP_RU_BULK_MU_UPDATE_RSP,               // 51",
          "321:  WASSP_ROAMED_MU_FILTER_STATS_REQ,          // 52",
          "322:  WASSP_ROAMED_MU_FILTER_STATS_RESP,         // 53",
          "323:  WASSP_RU_UNUSED_54,                        // 54",
          "324:  WASSP_LBS_TAG_REPORT,                      // 55",
          "325:  WASSP_RU_AC_Event_Req,                     // 56",
          "326:  WASSP_RU_AC_Event_Rsp,                     // 57",
          "327:  WASSP_RU_Event_Notify,                     // 58",
          "328:  WASSP_RU_AC_EVENT,                         // 59",
          "329:  WASSP_WIDS_WIPS_Config_Req,                // 60",
          "330:  WASSP_WIDS_WIPS_Config_Rsp,                // 61",
          "331:  WASSP_Scan_Data_Notify,                    // 62",
          "332:  WASSP_Scan_Data_Notify_Ack,                // 63",
          "333:  WASSP_Loc_Data_Notify,                     // 64",
          "334:  WASSP_Loc_Data_Notify_Ack,                 // 65",
          "335:  WASSP_RU_SW_Version_Validate_Ack,          // 66",
          "336:  WASSP_NEIGHBOUR_STATS_Rsp,                 // 67",
          "337:  WASSP_APPL_STATS_RESP,                     // 68",
          "338:  WASSP_RU_Capture_Req,                      // 69",
          "339:  WASSP_RU_Capture_Rsp,                      // 70",
          "341:  WASSP_AC_Register_Req = 101,               // 101",
          "342:  WASSP_AC_Register_Rsp,                     // 102",
          "343:  WASSP_AC_Deregister_Req,                   // 103",
          "344:  WASSP_AC_Deregister_Rsp,                   // 104",
          "346:  WASSP_P_MAX",
          "348: } wassp_ru_msg_t;",
          "355: static const value_string wassp_header_types[] =",
          "356: {",
          "357:  { WASSP_RU_UNUSED_0, \"WASSP Reserved 0\"},",
          "358:  { WASSP_RU_Discov, \"WASSP RU Discover\"},",
          "359:  { WASSP_RU_Register_Req, \"RU Registration Request\"},",
          "360:  { WASSP_RU_Register_Rsp, \"RU Registration Response\"},",
          "361:  { WASSP_RU_Authentication_Req, \"RU Authentication Request\"},",
          "362:  { WASSP_RU_Authentication_Rsp, \"RU Authentication Response\"},",
          "363:  { WASSP_RU_SW_Version_Validate_Req, \"RU Software Version Report\"},",
          "364:  { WASSP_RU_SW_Version_Validate_Rsp, \"RU Software Version Command\"},",
          "365:  { WASSP_RU_Config_Req, \"RU Configuration Request\"},",
          "366:  { WASSP_RU_Config_Rsp, \"RU Configuration Response\"},",
          "367:  { WASSP_RU_Ack, \"RU Acknowledge\"},",
          "368:  { WASSP_RU_Config_Status_Notify, \"RU Configuration Status Notify\"},",
          "369:  { WASSP_RU_Set_State_Req, \"RU Set State Request\"},",
          "370:  { WASSP_RU_Set_State_Rsp, \"RU Set State Response\"},",
          "371:  { WASSP_RU_Stats_Notify, \"RU Statistics Notify\"},",
          "372:  { WASSP_Data, \"WASSP Data\"},",
          "373:  { WASSP_RU_Poll, \"RU Poll\"},",
          "374:  { WASSP_RU_SNMP_Req, \"SNMP Request\"},",
          "375:  { WASSP_RU_SNMP_Rsp, \"SNMP Response\"},",
          "376:  { WASSP_BP_Trap_Notify, \"BP Trap Notify\"},",
          "377:  { WASSP_BP_Scan_Req, \"BP Trap Notify\"},",
          "378:  { WASSP_RFM_Notify, \"RFM Notify\"},",
          "379:  { WASSP_RU_SNMP_Alarm_Notify, \"RU SNMP Alarm Notify\"},",
          "380:  { WASSP_RU_SNMP_Set_Alarm_Clear, \"RU SNMP Set Alarm\"},",
          "381:  { WASSP_RU_SNMP_Set_Log_Status, \"RU SNMP Set Log Status\"},",
          "382:  { WASSP_RU_SNMP_Get_Log_Req, \"RU SNMP Get Log Request\"},",
          "383:  { WASSP_RU_SNMP_Get_Log_Resp, \"RU SNMP Get Log Response\"},",
          "384:  { WASSP_SEC_Update_Notify, \"SEC Update Notify\"},",
          "385:  { WASSP_RU_STATS_Req, \"RU Statistics Request\"},",
          "386:  { WASSP_RU_STATS_Rsp, \"RU Statistics Response\"},",
          "387:  { WASSP_RU_UNUSED_30, \"WASSP MU Statistics Request\" },",
          "388:  { WASSP_RU_UNUSED_31, \"WASSP MU Statistics Response\" },",
          "389:  { WASSP_RU_Get_Req, \"Dot1x Get Request\"},",
          "390:  { WASSP_RU_Get_Rsp, \"Dot1x Get Response\"},",
          "391:  { WASSP_RU_Alarm_Notify, \"RU Alarm Notify\"},",
          "392:  { WASSP_RU_Set_Alarm_Clear, \"RU Set Alarm Clear\"},",
          "393:  { WASSP_RU_Get_Log_Req, \"RU Get Log Request\"},",
          "394:  { WASSP_RU_Get_Log_Rsp, \"RU Get Log Response\"},",
          "395:  { WASSP_RU_UNUSED_38, \"WASSP UNUSED 38\"},",
          "396:  { WASSP_RU_UNUSED_39, \"WASSP UNUSED 39\"},",
          "397:  { WASSP_P_PEER_DOWN_NOTIFY, \"Availability Peer Controller down Notify\"},",
          "398:  { WASSP_P_LINK_STATE_CHANGE_REQ, \"Availability Peer Controller Link State Change Request\"},",
          "399:  { WASSP_P_LINK_STATE_CHANGE_RSP, \"Availability Peer Controller Link State Change Response\"},",
          "400:  { WASSP_RU_AC_Poll, \"RU Poll Controller\"},",
          "401:  { WASSP_RU_GetIP_Req, \"RU Get IP Request\"},",
          "402:  { WASSP_RU_GetIP_Rsp, \"RU Get IP Response\"},",
          "403:  { WASSP_RU_LAMG_Update_Req, \"WASSP reserved\"},",
          "404:  { WASSP_RU_LAMG_Update_Rsp, \"WASSP reserved\"},",
          "405:  { WASSP_RU_Event_Req, \"RU Event Request\"},",
          "406:  { WASSP_RU_Event_Rsp, \"RU Event Response\"},",
          "407:  { WASSP_RU_BULK_MU_UPDATE_REQ, \"RU Bulk MUs Update Request\"},",
          "408:  { WASSP_RU_BULK_MU_UPDATE_RSP, \"RU Bulk MUs Update Response\"},",
          "409:  { WASSP_ROAMED_MU_FILTER_STATS_REQ, \"Roamed MU Filter Statistics Request\"},",
          "410:  { WASSP_ROAMED_MU_FILTER_STATS_RESP, \"Roamed MU Filter Statistics Response\"},",
          "411:  { WASSP_RU_UNUSED_54, \"WASSP reserved\"},",
          "412:  { WASSP_LBS_TAG_REPORT, \"Location Base Service Tag Report\"},",
          "413:  { WASSP_RU_AC_Event_Req, \"RU Alarm Clear Event Request\"},",
          "414:  { WASSP_RU_AC_Event_Rsp, \"RU Alarm Clear Event Response\"},",
          "415:  { WASSP_RU_Event_Notify, \"RU Event Notify\"},",
          "416:  { WASSP_RU_AC_EVENT, \"RU Alarm Clear Event\"},",
          "417:  { WASSP_WIDS_WIPS_Config_Req, \"WIDS WIPS Configuration Request\"},",
          "418:  { WASSP_WIDS_WIPS_Config_Rsp, \"WIDS WIPS Configuration Response\"},",
          "419:  { WASSP_Scan_Data_Notify, \"Scan Data Notify\"},",
          "420:  { WASSP_Scan_Data_Notify_Ack, \"Scan Data Notify Acknowledge\"},",
          "421:  { WASSP_Loc_Data_Notify, \"Location Data Notify\"},",
          "422:  { WASSP_Loc_Data_Notify_Ack, \"Location Data Notify Acknowledge\"},",
          "423:  { WASSP_RU_SW_Version_Validate_Ack, \"RU Software Version Validate Acknowledge\"},",
          "424:  { WASSP_NEIGHBOUR_STATS_Rsp, \"Neighbor Statistics Response\"},",
          "425:  { WASSP_APPL_STATS_RESP, \"Application Statistics Response\"},",
          "426:  { WASSP_RU_Capture_Req, \"RU Capture Request\"},",
          "427:  { WASSP_RU_Capture_Rsp, \"RU Capture Response\"},",
          "429:  { WASSP_AC_Register_Req, \"Tunnel Register Request\"},",
          "430:  { WASSP_AC_Register_Rsp, \"Tunnel Register Response\"},",
          "431:  { WASSP_AC_Deregister_Req, \"Tunnel Deregister Request\"},",
          "432:  { WASSP_AC_Deregister_Rsp, \"Tunnel deregister Response\"},",
          "433:  { 0, NULL }",
          "439: typedef enum",
          "440: {",
          "441:  WASSP_MU_UNUSED_0 = 0,",
          "442:  WASSP_MU_Associate_Req,           //  1",
          "443:  WASSP_MU_Associate_Rsp,           //  2",
          "444:  WASSP_MU_Data,                    //  3",
          "445:  WASSP_MU_Disconnect_Req,          //  4",
          "446:  WASSP_MU_Disconnect_Rsp,          //  5",
          "447:  WASSP_MU_Roam_Notify,             //  6",
          "448:  WASSP_MU_Disconnect_Notify,       //  7",
          "449:  WASSP_MU_INVALID_PMK_REQ,         //  8",
          "450:  WASSP_MU_Update_Req,              //  9",
          "451:  WASSP_MU_Update_Rsp,              //  10",
          "452:  WASSP_MU_MIRRORN,                 //  11",
          "453:  WASSP_MU_NETFLOW,                 //  12",
          "454:  WASSP_MU_Radius_Update,           //  13",
          "455:  WASSP_AP2AC_MU_Inform_Req,        //  14",
          "456:  WASSP_AP2AC_MU_Inform_Rsp,        //  15",
          "457:  WASSP_MU_Eap_Last,                //  16",
          "458:  WASSP_MU_PMIRROR,                 //  17",
          "459:  WASSP_MU_UNUSED_18,               //  18",
          "460:  WASSP_MU_UNUSED_19,               //  19",
          "461:  WASSP_MU_UNUSED_20,               //  20",
          "462:  WASSP_MU_UNUSED_21,               //  21",
          "463:  WASSP_MU_UNUSED_22,               //  22",
          "464:  WASSP_MU_UNUSED_23,               //  23",
          "465:  WASSP_MU_UNUSED_24,               //  24",
          "466:  WASSP_MU_UNUSED_25,               //  25",
          "467:  WASSP_MU_UNUSED_26,               //  26",
          "468:  WASSP_MU_UNUSED_27,               //  27",
          "469:  WASSP_MU_UNUSED_28,               //  28",
          "470:  WASSP_MU_UNUSED_29,               //  29",
          "471:  WASSP_MU_STATS_Req,               //  30",
          "472:  WASSP_MU_STATS_Rsp,               //  31",
          "473:  WASSP_MU_UNUSED_32,               //  32",
          "474:  WASSP_MU_UNUSED_33,               //  33",
          "475:  WASSP_MU_UNUSED_34,               //  34",
          "476:  WASSP_MU_UNUSED_35,               //  35",
          "477:  WASSP_MU_UNUSED_36,               //  36",
          "478:  WASSP_MU_UNUSED_37,               //  37",
          "479:  WASSP_MU_BULK_Associate_Req,      //  38",
          "480:  WASSP_MU_BULK_Associate_Rsp       //  39",
          "483: } wassp_mu_msg_t;",
          "486: static const value_string wassp_mu_header_types[] =",
          "487: {",
          "488:  { WASSP_MU_UNUSED_0, \"MU Unused 0\"},",
          "489:  { WASSP_MU_Associate_Req, \"MU Association Request\"},",
          "490:  { WASSP_MU_Associate_Rsp, \"MU Association Response\"},",
          "491:  { WASSP_MU_Data, \"MU Data\"},",
          "492:  { WASSP_MU_Disconnect_Req, \"MU Disconnect Request\"},",
          "493:  { WASSP_MU_Disconnect_Rsp, \"MU Disconnect Response\"},",
          "494:  { WASSP_MU_Roam_Notify, \"MU Roam Notify\"},",
          "495:  { WASSP_MU_Disconnect_Notify, \"MU Disconnect Notify\"},",
          "496:  { WASSP_MU_INVALID_PMK_REQ, \"MU Invalid PMK Request\"},",
          "497:  { WASSP_MU_Update_Req, \"MU Update Request\"},",
          "498:  { WASSP_MU_Update_Rsp, \"MU Update Response\"},",
          "499:  { WASSP_MU_MIRRORN, \"MU Mirror N\"},",
          "500:  { WASSP_MU_NETFLOW, \"MU Netflow\"},",
          "501:  { WASSP_MU_Radius_Update, \"MU Radius Update\"},",
          "502:  { WASSP_AP2AC_MU_Inform_Req, \"AccessPiont To Controller MU Info Request\"},",
          "503:  { WASSP_AP2AC_MU_Inform_Rsp, \"AccessPiont To Controller MU Info Response\"},",
          "504:  { WASSP_MU_Eap_Last, \"MU Extensible Authentication Protocol Last\"},",
          "505:  { WASSP_MU_PMIRROR, \"MU P Mirror\"},",
          "506:  { WASSP_MU_UNUSED_18, \"MU Unused 18\"},",
          "507:  { WASSP_MU_UNUSED_19, \"MU Unused 19\"},",
          "508:  { WASSP_MU_UNUSED_20, \"MU Unused 20\"},",
          "509:  { WASSP_MU_UNUSED_21, \"MU Unused 21\"},",
          "510:  { WASSP_MU_UNUSED_22, \"MU Unused 22\"},",
          "511:  { WASSP_MU_UNUSED_23, \"MU Unused 23\"},",
          "512:  { WASSP_MU_UNUSED_24, \"MU Unused 24\"},",
          "513:  { WASSP_MU_UNUSED_25, \"MU Unused 25\"},",
          "514:  { WASSP_MU_UNUSED_26, \"MU Unused 26\"},",
          "515:  { WASSP_MU_UNUSED_27, \"MU Unused 27\"},",
          "516:  { WASSP_MU_UNUSED_28, \"MU Unused 28\"},",
          "517:  { WASSP_MU_UNUSED_29, \"MU Unused 29\"},",
          "518:  { WASSP_MU_STATS_Req, \"MU Statistics Request\"},",
          "519:  { WASSP_MU_STATS_Rsp, \"MU Statistics Response\"},",
          "520:  { WASSP_MU_UNUSED_32, \"MU Unused 32\"},",
          "521:  { WASSP_MU_UNUSED_33, \"MU Unused 33\"},",
          "522:  { WASSP_MU_UNUSED_34, \"MU Unused 34\"},",
          "523:  { WASSP_MU_UNUSED_35, \"MU Unused 35\"},",
          "524:  { WASSP_MU_UNUSED_36, \"MU Unused 36\"},",
          "525:  { WASSP_MU_UNUSED_37, \"MU Unused 37\"},",
          "526:  { WASSP_MU_BULK_Associate_Req, \"MU Bulk Associate Request\"},",
          "527:  { WASSP_MU_BULK_Associate_Rsp, \"MU Bulk Associate Response\"},",
          "528:  { 0, NULL }",
          "542: typedef enum",
          "544:  EID_UNUSED_0 = 0,          //  0",
          "545:  EID_STATUS,                //  1",
          "546:  EID_RU_SW_VERSION,         //  2",
          "547:  EID_RU_SERIAL_NUMBER,      //  3",
          "548:  EID_RU_REG_CHALLENGE,      //  4",
          "549:  EID_RU_REG_RESPONSE,       //  5",
          "550:  EID_AC_IPADDR,             //  6",
          "551:  EID_RU_VNSID,              //  7",
          "552:  EID_TFTP_SERVER,           //  8",
          "553:  EID_IMAGE_PATH,            //  9",
          "554:  EID_CONFIG,                //  10",
          "555:  EID_RU_STATE,              //  11",
          "556:  EID_SESSION_KEY,           //  12",
          "557:  EID_RU_PROTOCOL,           //  13",
          "558:  EID_RANDOM_NUMBER,         //  14",
          "559:  EID_STANDBY_TIMEOUT,       //  15",
          "560:  EID_RU_CHALLENGE_ID,       //  16",
          "561:  EID_RU_MODEL,              //  17",
          "562:  EID_RU_SCAN_MODE,          //  18",
          "563:  EID_RU_SCAN_TYPE,          //  19",
          "564:  EID_RU_SCAN_INTERVAL,      //  20",
          "565:  EID_RU_RADIO_TYPE,         //  21",
          "566:  EID_RU_CHANNEL_DWELL_TIME, //  22",
          "567:  EID_RU_CHANNEL_LIST,       //  23",
          "568:  EID_RU_TRAP,               //  24",
          "569:  EID_RU_SCAN_TIMES,         //  25",
          "570:  EID_RU_SCAN_DELAY,         //  26",
          "571:  EID_RU_SCAN_REQ_ID,        //  27",
          "572:  EID_STATIC_CONFIG,         //  28",
          "573:  EID_LOCAL_BRIDGING,        //  29",
          "574:  EID_STATIC_BP_IPADDR,      //  30",
          "575:  EID_STATIC_BP_NETMASK,     //  31",
          "576:  EID_STATIC_BP_GATEWAY,     //  32",
          "577:  EID_STATIC_BM_IPADDR,      //  33",
          "578:  EID_BP_BPSSID,             //  34",
          "579:  EID_BP_WIRED_MACADDR,      //  35",
          "580:  EID_RU_CAPABILITY,         //  36",
          "581:  EID_RU_SSID_NAME,          //  37",
          "582:  EID_ALARM,                 //  38",
          "583:  EID_RU_PREAUTH,            //  39",
          "584:  EID_RU_PMK,                //  40",
          "585:  EID_AC_REG_CHALLENGE,      //  41",
          "586:  EID_AC_REG_RESPONSE,       //  42",
          "587:  EID_STATS,                 //  43",
          "588:  EID_CERTIFICATE,           //  44",
          "589:  EID_RADIO_ID,              //  45",
          "590:  EID_REQ_ID,                //  46",
          "591:  EID_NETWORK_ID,            //  47",
          "592:  EID_MU_MAC,                //  48",
          "593:  EID_TIME,                  //  49",
          "594:  EID_NUM_RADIOS,            //  50",
          "595:  EID_RADIO_INFO,            //  51",
          "596:  EID_NETWORK_INFO,          //  52",
          "597:  EID_VENDOR_ID,             //  53",
          "598:  EID_PRODUCT_ID,            //  54",
          "599:  EID_RADIO_INFO_ACK,        //  55",
          "600:  EID_SECURE_TUNNEL,         //  56",
          "601:  EID_MU_TOPOLOGY_ID,        //  57",
          "602:  EID_SSID,                  //  58",
          "603:  EID_EVENT_BLOCK,           //  59",
          "604:  EID_SNMP_ERROR_STATUS,     //  60",
          "605:  EID_SNMP_ERROR_INDEX,      //  61",
          "606:  EID_RU_REAUTH_TIMER,       //  62",
          "607:  EID_AP_IMG_TO_RAM,         //  63",
          "608:  EID_AP_IMG_ROLE,           //  64",
          "609:  EID_AP_STATS_BLOCK,        //  65",
          "610:  EID_MU_RF_STATS_BLOCK,     //  66",
          "611:  EID_STATS_REQUEST_TYPE,    //  67",
          "612:  EID_STATS_LAST,            //  68",
          "613:  EID_TLV_CONFIG,            //  69",
          "614:  EID_CONFIG_ERROR_BLOCK,    //  70",
          "615:  EID_CONFIG_MODIFIED_BLOCK, //  71",
          "616:  EID_MU_PMKID_LIST,         //  72",
          "617:  EID_MU_PMK_BP,             //  73",
          "618:  EID_MU_PMKID_BP,           //  74",
          "619:  EID_COUNTDOWN_TIME,        //  75",
          "620:  EID_WASSP_VLAN_TAG,        //  76",
          "621:  EID_SSID_ID,               //  77",
          "622:  EID_BULK_MU_BLOCK,         //  78",
          "623:  EID_MU_BLOCK,              //  79",
          "624:  EID_PORT_OPEN_FLAG,        //  80",
          "625:  EID_WASSP_TUNNEL_TYPE,     //  81",
          "626:  EID_LOG_TYPE,              //  82",
          "627:  EID_LOG_FILE,              //  83",
          "628:  EID_ALARM_SEVERITY,        //  84",
          "629:  EID_ALARM_DESCRIPTION,     //  85",
          "630:  EID_BULK_VNS_BLOCK,        //  86",
          "631:  EID_VNS_BLOCK,             //  87",
          "632:  EID_AP_DHCP_MODE,          //  88",
          "633:  EID_AP_IPADDR,             //  89",
          "634:  EID_AP_NETMASK,            //  90",
          "635:  EID_AP_GATEWAY,            //  91",
          "636:  EID_BSSID2IP_BLOCK,        //  92",
          "637:  EID_RU_BACKUP_VERSION,     //  93",
          "638:  EID_AC_SW_VERSION,         //  94",
          "639:  EID_MCAST_LAMG_LIST,       //  95",
          "640:  EID_FILTER_NAME,           //  96",
          "641:  EID_FILTER_RULES,          //  97",
          "642:  EID_AUTH_STATE,            //  98",
          "643:  EID_MU_DISC_AFTER_AUTH,    //  99",
          "644:  EID_MU_MAC_LIST,           // 100",
          "645:  EID_TRANS_ID,              // 101",
          "646:  EID_TIMEZONE_OFFSET,       // 102",
          "647:  EID_SENSOR_FORCE_DOWNLOAD, // 103",
          "648:  EID_SENSOR_IMG_VERSION,    // 104",
          "649:  EID_BRIDGE_MODE,           // 105",
          "650:  EID_MU_VLAN_TAG,           // 106",
          "651:  EID_RATECTRL_CIR_UL,       // 107",
          "652:  EID_RATECTRL_CIR_DL,       // 108",
          "653:  EID_RATECTRL_CBS_UL,       // 109",
          "654:  EID_RATECTRL_CBS_DL,       // 110",
          "655:  EID_RATECTRL_NAME_UL,      // 111",
          "656:  EID_RATECTRL_NAME_DL,      // 112",
          "657:  EID_POLICY_NAME,           // 113",
          "658:  EID_SIAPP_PMK_BLOCK,                       //  114",
          "659:  EID_SIAPP_PMKID,                           //  115",
          "660:  EID_SIAPP_PMK_REAUTH,                      //  116",
          "661:  EID_SIAPP_PMK_LIFETIME,                    //  117",
          "662:  EID_SIAPP_PMKID_FLAG,                      //  118",
          "663:  EID_SIAPP_MU_PMK,                          //  119",
          "664:  EID_SIAPP_AP_NAME,                         //  120",
          "665:  EID_SIAPP_RADIO_CONFIG_BLOCK,              //  121",
          "666:  EID_SIAPP_CLUSTER_ACS_REQ,                 //  122",
          "667:  EID_SIAPP_SIAPP_MU_STATS_BLOCK,            //  123",
          "668:  EID_SIAPP_PACKET_RETRIES,                  //  124",
          "669:  EID_SIAPP_ASSOC_IN_WLAN,                   //  125",
          "670:  EID_SIAPP_ASSOC_IN_CLUSTER,                //  126",
          "671:  EID_SIAPP_REASSOC_IN_CLUSTER,              //  127",
          "672:  EID_SIAPP_THIN_BLOCK,                      //  128",
          "673:  EID_SIAPP_NEWAP_BSSID,                     //  129",
          "674:  EID_SIAPP_OLDAP_BSSID,                     //  130",
          "675:  EID_SIAPP_RAD_CACS_REQ,                    //  131",
          "676:  EID_SIAPP_RADIOBLOCK,                      //  132",
          "677:  EID_SIAPP_CLIENT_COUNT,                    //  133",
          "678:  EID_SIAPP_BLOCK,                           //  134",
          "679:  EID_SIAPP_MU_TransmittedFrameCount,        //  135",
          "680:  EID_SIAPP_MU_ReceivedFrameCount,           //  136",
          "681:  EID_SIAPP_MU_TransmittedBytes,             //  137",
          "682:  EID_SIAPP_MU_ReceivedBytes,                //  138",
          "683:  EID_SIAPP_MU_UL_DroppedRateControlPackets, //  139",
          "684:  EID_SIAPP_MU_DL_DroppedRateControlPackets, //  140",
          "685:  EID_SIAPP_MU_DL_DroppedBufferFullPackets,  //  141",
          "686:  EID_SIAPP_MU_DL_LostRetriesPackets,        //  142",
          "687:  EID_SIAPP_MU_UL_DroppedRateControlBytes,   //  143",
          "688:  EID_SIAPP_MU_DL_DroppedRateControlBytes,   //  144",
          "689:  EID_SIAPP_MU_DL_DroppedBufferFullBytes,    //  145",
          "690:  EID_SIAPP_MU_DL_LostRetriesBytes,          //  146",
          "691:  EID_SIAPP_BP_BSSID,                        //  147",
          "692:  EID_SIAPP_RADIO_ID,                        //  148",
          "693:  EID_SIAPP_MACADDR,                         //  149",
          "694:  EID_SIAPP_PREAUTH_REQ,                     //  150",
          "695:  EID_SIAPP_USER_IDENTITY,                   //  151",
          "696:  EID_SIAPP_LOADBAL_BLOCK,                   //  152",
          "697:  EID_SIAPP_LOADBAL_PKT_TYPE,                //  153",
          "698:  EID_SIAPP_LOADBAL_LOADGROUP_ID,            //  154",
          "699:  EID_SIAPP_LOADBAL_LOAD_VALUE,              //  155",
          "700:  EID_SIAPP_AC_MGMT_MAC,                     //  156",
          "701:  EID_SIAPP_FILTER_COS,                      //  157",
          "702:  EID_COS,                                   //  158",
          "703:  EID_RATE_LIMIT_RESOURCE_TBL,               //  159",
          "704:  EID_UCAST_FILTER_DISABLE,                  //  160",
          "705:  EID_MU_INFORM_REASON,                      //  161",
          "706:  EID_MU_FILTER_POLICY_NAME,                 //  162",
          "707:  EID_MU_TOPOLOGY_POLICY_NAME,               //  163",
          "708:  EID_MU_COS_POLICY_NAME,                    //  164",
          "709:  EID_MU_FILTER_KEY,                         //  165",
          "710:  EID_MU_TOPOLOGY_KEY,                       //  166",
          "711:  EID_MU_COS_KEY,                            //  167",
          "712:  EID_MU_SESSION_TIMEOUT,                    //  168",
          "713:  EID_MU_ACCOUNTING_CLASS,                   //  169",
          "714:  EID_MU_LOGIN_LAT_PORT,                     //  170",
          "715:  EID_MU_IDLE_TIMEOUT,                       //  171",
          "716:  EID_MU_ACCT_INTERIM_INTERVAL,              //  172",
          "717:  EID_MU_IP_ADDR,                            //  173",
          "718:  EID_MU_TERMINATE_ACTION,                   //  174",
          "719:  EID_SITE_NAME,                             //  175",
          "720:  EID_PEER_SITE_IP,                          //  176",
          "721:  EID_INTERFERENCE_EVENTS_ENABLE,            //  177",
          "722:  EID_EVENT_TYPE,                            //  178",
          "723:  EID_EVENT_CHANNEL,                         //  179",
          "724:  EID_EVENT_VALUE,                           //  180",
          "725:  EID_SSS_MU_BLOCK,                          //  181",
          "726:  EID_SSS_MU_ASSOC_TIME,                     //  182",
          "727:  EID_SSS_TS64_MU_UPDATE,                    //  183",
          "728:  EID_SSS_TS64_AP_CURRENT,                   //  184",
          "729:  EID_SSS_MU_AUTH_STATE,                     //  185",
          "730:  EID_SSS_AP_HOMEHASH,                       //  186",
          "731:  EID_TIME_FIRST_DETECTED,                   //  187",
          "732:  EID_TIME_LAST_REPORTED,                    //  188",
          "733:  EID_EVENT_ARRAY,                           //  189",
          "734:  EID_SSS_DEFAULT_SESSION_TIMEOUT,           //  190",
          "735:  EID_SSS_SSID,                              //  191",
          "736:  EID_SSS_PRIVACY_TYPE,                      //  192",
          "737:  EID_POLICY_ZONE_NAME,                      //  193",
          "738:  EID_RU_AC_EVENT_COMPONENT_ID,              //  194",
          "739:  EID_MU_AUTH_STATE,                         //  195",
          "740:  EID_MU_USER_NAME,                          //  196",
          "741:  EID_BULK_TYPE,                             //  197",
          "742:  EID_SENT_TIME,                             //  198",
          "743:  EID_INFORM_MU_PMK,                         //  199",
          "744:  EID_COLLECTOR_IP_ADDR,                     //  200",
          "745:  EID_ARP_PROXY,                             //  201",
          "746:  EID_MCAST_FILTER_RULES,                    //  202",
          "747:  EID_AP_PARAMS,                             //  203",
          "748:  EID_ASSOC_SSID_ARRAY,                      //  204",
          "749:  EID_ASSOC_SSID_BLOCK,                      //  205",
          "750:  EID_AP_LIST_BLOCK,                         //  206",
          "751:  EID_AP_LIST_ARRAY,                         //  207",
          "752:  EID_MAC_ADDR,                              //  208",
          "753:  EID_SCAN_PROFILE_ID,                       //  209",
          "754:  EID_ACTION_REQ,                            //  210",
          "755:  EID_CHANNEL_LIST,                          //  211",
          "756:  EID_COUNTERMEASURES_MAX_CH,                //  212",
          "757:  EID_COUNTERMEASURES_SET,                   //  213",
          "758:  EID_SCAN_PROFILE_BLOCK,                    //  214",
          "759:  EID_SEQ_NUM,                               //  215",
          "760:  EID_THREAT_DEF_ARRAY,                      //  216",
          "761:  EID_THREAT_DEF_BLOCK,                      //  217",
          "762:  EID_THREAT_TYPE,                           //  218",
          "763:  EID_THREAT_ID,                             //  219",
          "764:  EID_THREAT_STATS_F,                        //  220",
          "765:  EID_THREAT_FR_SFR,                         //  221",
          "766:  EID_THREAT_PATTERN_ARRAY,                  //  222",
          "767:  EID_THREAT_PATTERN_BLOCK,                  //  223",
          "768:  EID_THREAT_PATTERN,                        //  224",
          "769:  EID_THREAT_ALERT_TH_DUR,                   //  225",
          "770:  EID_THREAT_CLEAR_TH_DUR,                   //  226",
          "771:  EID_THREAT_PRIORITY,                       //  227",
          "772:  EID_THREAT_MITIGATION_LIST,                //  228",
          "773:  EID_SSS_MU_IS_PORT_CLOSED,                 //  229",
          "774:  EID_FULL_UPDATE,                           //  230",
          "775:  EID_REASON,                                //  231",
          "776:  EID_SURVEILLANCE_DATA_ARRAY,               //  232",
          "777:  EID_SURVEILLANCE_DATA_BLOCK,               //  233",
          "778:  EID_SCAN_BSSID,                            //  234",
          "779:  EID_PARAMS,                                //  235",
          "780:  EID_SCAN_RSS_RSSI,                         //  236",
          "781:  EID_SCAN_SSID,                             //  237",
          "782:  EID_SCAN_CAP,                              //  238",
          "783:  EID_THREAT_CLASSIFICATION,                 //  239",
          "784:  EID_THREAT_DATA_ARRAY,                     //  240",
          "785:  EID_THREAT_DATA_BLOCK,                     //  241",
          "786:  EID_STATE,                                 //  242",
          "787:  EID_DROP_FR_CNT,                           //  243",
          "788:  EID_STOP_ROAM_CNT,                         //  244",
          "789:  EID_SPOOF_CNT,                             //  245",
          "790:  EID_THREAT_CLASSIFY_ARRAY,                 //  246",
          "791:  EID_THREAT_CLASSIFY_BLOCK,                 //  247",
          "792:  EID_THREAT_NAME,                           //  248",
          "793:  EID_LOCATION,                              //  249",
          "794:  EID_ENCRYPTION_TYPE,                       //  250",
          "795:  EID_MU_EVENT_ARRAY,                        //  251",
          "796:  EID_MU_EVENT_BLOCK,                        //  252",
          "797:  EID_COMPONENT_ID,                          //  253",
          "798:  EID_MU_EVENT_STRING,                       //  254",
          "799:  EID_BYPASS_BMCAST,                         //  255",
          "800:  EID_GETTIMEOFDAY,                          //  256",
          "801:  EID_COUNTRY_ID,                            //  257",
          "802:  EID_COUNTRY_ARRAY,                         //  258",
          "803:  EID_COUNTRY_BLOCK,                         //  259",
          "804:  EID_MU_EVENT_TYPE,                         //  260",
          "805:  EID_LOCATOR_FLOOR_ID,                      //  261",
          "806:  EID_LOCATOR_LOC_TYPE,                      //  262",
          "807:  EID_LOCATOR_LOC_BLOCK,                     //  263",
          "808:  EID_LOCATOR_LOC_ARRAY,                     //  264",
          "809:  EID_LOCATOR_LOC_POINT,                     //  265",
          "810:  EID_MU_EVENT_DETAILS,                      //  266",
          "811:  EID_MU_EVENT_FROM_AP,                      //  267",
          "812:  EID_MU_EVENT_LOC_BLOCK,                     //  268",
          "813:  EID_LOCATOR_LOC_AP_DISTANCE,               //  269",
          "814:  EID_LOCATOR_LOC_PRECISION,                 //  270",
          "815:  EID_RSS_DATA_ARRAY,                        //  271",
          "816:  EID_RSS_DATA_BLOCK,                        //  272",
          "817:  EID_LOCATOR_MU_ACTION,                     //  273",
          "818:  EID_EFFECTIVE_EGRESS_VLAN,                 //  274",
          "819:  EID_REBOOT_ACK,                            //  275",
          "820:  EID_MU_BSSID,                              //  276",
          "821:  EID_AUTH_FLAG,                             //  277",
          "822:  EID_ROAMED_FLAG,                           //  278",
          "823:  EID_MU_RSS,                                //  279",
          "824:  EID_FILTER_RULES_VER,                      //  280",
          "825:  EID_FILTER_TYPE,                           //  281",
          "826:  EID_MCAST_FILTER_BLOCK,                    //  282",
          "827:  EID_MCAST_FILTER_BLOCK_ENTRY,              //  283",
          "828:  EID_DEFAULT_ACTION_TYPE,                   //  284",
          "829:  EID_DEFAULT_CONTAIN_TO_VLAN,               //  285",
          "830:  EID_DEFAULT_BRIDGE_MODE,                   //  286",
          "831:  EID_INVALID_POLICY,                        //  287",
          "832:  EID_LOCATOR_FLOOR_NAME,                    //  288",
          "833:  EID_AP_FLAGS,                              //  289",
          "834:  EID_AP_PVID,                               //  290",
          "835:  EID_AP_REDIRECT,                           //  291",
          "836:  EID_MU_CVLAN_BAP,                          //  292",
          "837:  EID_MU_SESSION_ARRAY,                      //  293",
          "838:  EID_MU_SESSION_BLOCK,                      //  294",
          "839:  EID_MU_SESSION_ID,                         //  295",
          "840:  EID_MU_RFS_NAME,                           //  296",
          "841:  EID_MU_FLAGS,                              //  297",
          "842:  EID_MU_ASSOC_TIME,                         //  298",
          "843:  EID_MU_ACTIVE_TIME,                        //  299",
          "844:  EID_REPORT_REQ,                            //  300",
          "845:  EID_MU_URL,                                //  301",
          "846:  EID_MU_SESSION_LIFETIME,                   //  302",
          "847:  EID_MU_REAUTH_TIMER,                       //  303",
          "848:  EID_MU_ACCT_SESSION_ID_STRING,             //  304",
          "849:  EID_MU_ACCT_POLICY_NAME,                   //  305",
          "850:  EID_MU_ACCT_START_TIME,                    //  306",
          "851:  EID_MU_ACCT_CLASS,                         //  307",
          "852:  EID_MU_LOGIN_LAT_GROUP,                    //  308",
          "853:  EID_MU_TUNNEL_PRIVATE_GROUP_ID_STRING,     //  309",
          "854:  EID_MU_USER_ID_STRING,                     //  310",
          "855:  EID_MU_DEFENDED_STATE,                     //  311",
          "856:  EID_MU_MOD_MASK,                           //  312",
          "857:  EID_LOCATOR_TRACKED,                       //  313",
          "858:  EID_PORT,                                  //  314",
          "859:  EID_RETRIES_COUNT,                         //  315",
          "860:  EID_MODULATION_TYPE,                       //  316",
          "861:  EID_DETECTED_ROGUE_ARRAY,                  //  317",
          "862:  EID_DETECTED_ROGUE_BLOCK,                  //  318",
          "863:  EID_ROGUE_DETECTION,                       //  319",
          "864:  EID_MAC_ADDR_TX,                           //  320",
          "865:  EID_MAC_ADDR_RX,                           //  321",
          "866:  EID_IP_ADDR_TX,                            //  322",
          "867:  EID_IP_ADDR_RX,                            //  323",
          "868:  EID_TTL,                                   //  324",
          "869:  EID_GW_IP_ADDR,                            //  325",
          "870:  EID_LOCATOR_STATE_DATA,                    //  326",
          "871:  EID_LOCATOR_POINT_SET,                     //  327",
          "872:  EID_FILTER_RULE_FIXED_APP_ID,              //  328",
          "873:  EID_FILTER_RULES_EXT_BLOCK,                //  329",
          "874:  EID_MU_AREA_BLOCK,                         //  330",
          "875:  EID_MU_LOCATION,                           //  331",
          "876:  EID_MU_LOCATION_TS,                        //  332",
          "877:  EID_DNS_IP_ADDR,                           //  333",
          "878:  EID_IN_SERVICE_AP_LIST,                    //  334",
          "879:  EID_OUT_SERVICE_AP_LIST,                   //  335",
          "880:  EID_LAST_RD_AP,                            //  336",
          "881:  EID_ROGUE_INFO,                            //  337",
          "882:  EID_MU_IS_FT,                              //  338",
          "883:  EID_MU_PMK_R1,                             //  339",
          "884:  EID_SIAPP_R0KHID,                          //  340",
          "885:  EID_SIAPP_R1KHID,                          //  341",
          "886:  EID_SIAPP_FT_NONCE,                        //  342",
          "887:  EID_SIAPP_FT_PMKR0NAME,                    //  343",
          "888:  EID_SIAPP_FT_R1KHID,                       //  344",
          "889:  EID_SIAPP_FT_S1KHID,                       //  345",
          "890:  EID_SIAPP_FT_PMKR1,                        //  346",
          "891:  EID_SIAPP_FT_PMKR1NAME,                    //  347",
          "892:  EID_SIAPP_FT_PAIRWISE,                     //  348",
          "893:  EID_SIAPP_FT_LIFETIME,                     //  349",
          "894:  EID_MU_POWER_CAP,                          //  350",
          "895:  EID_AREA_NAME,                             //  351",
          "896:  EID_PERIODIC_NEIGHBOUR_REPORT,             //  352",
          "897:  EID_TIMESTAMP,                             //  353",
          "898:  EID_NEIGHBOUR_ENTRY,                       //  354",
          "899:  EID_MU_REQ,                                //  355",
          "900:  EID_RU_REQ,                                //  356",
          "901:  EID_NEIGHBOUR_REQ,                         //  357",
          "902:  EID_SSS_FT_ASSOC,                          //  358",
          "903:  EID_DEFAULT_MIRRORN,                       //  359",
          "904:  EID_FILTER_RULE_EXT_ACT_FLAGS,             //  360",
          "905:  EID_TOPO_GROUP_MAPPING,                    //  361",
          "906:  EID_MU_PMK_R0NAME,                         //  362",
          "907:  EID_CUI,                                   //  363",
          "908:  EID_SSS_CAPINFO,                           //  364",
          "909:  EID_SSS_CAPPOWER,                          //  365",
          "910:  EID_WFA_VSA,                               //  366",
          "911:  EID_WFA_HS20_REMED_METHOD,                 //  367",
          "912:  EID_WFA_HS20_URL,                          //  368",
          "913:  EID_WFA_HS20_DEAUTH_CODE,                  //  369",
          "914:  EID_WFA_HS20_REAUTH_DELAY,                 //  370",
          "915:  EID_WFA_HS20_SWT,                          //  371",
          "916:  EID_POWER_STATUS,                          //  372",
          "917:  EID_IPV6_ADDR,                             //  373",
          "918:  EID_FILTER_RULES_APP_SIG_GROUP_ID,         //  374",
          "919:  EID_FILTER_RULES_APP_SIG_DISP_ID,          //  375",
          "920:  EID_MU_DEV_IDENTITY,                       //  376",
          "921:  EID_APPL_STATS_REQ,                        //  377",
          "922:  EID_MU_APPL_STATS_BLOCK,                   //  378",
          "923:  EID_TOPOLOGY_ARRAY,                        //  379",
          "924:  EID_TOPOLOGY_STRUCT,                       //  380",
          "925:  EID_FILTER_CONFIG_STRUCT,                  //  381",
          "926:  EID_DHCP_HOST_NAME,                        //  382",
          "927:  EID_NEIGHBOUR_ENTRY_2,                     //  383",
          "928:  EID_CHANNEL_ENTRY,                         //  384",
          "929:  EID_MU_ECP_PW,                             //  385",
          "930:  EID_MU_ECP_TOKEN,                          //  386",
          "931:  EID_STATIC_VSA_IPADDR,                     //  387",
          "932:  EID_STATIC_VSA_NETMASK,                    //  388",
          "933:  EID_PKT_CAPTURE_STATUS,                    //  389",
          "934:  EID_PKT_CAPTURE_FILTERS,                   //  390",
          "935:  EID_PKT_F_WIRELESS,                        //  391",
          "936:  EID_PKT_F_WIREDCLIENT,                     //  392",
          "937:  EID_PKT_F_DIRECTION,                       //  393",
          "938:  EID_PKT_F_RADIO,                           //  394",
          "939:  EID_PKT_F_FLAGS,                           //  395",
          "940:  EID_PKT_F_IP_ARRAY,                        //  396",
          "941:  EID_PKT_F_MAC,                             //  397",
          "942:  EID_PKT_F_PROTOCOL,                        //  398",
          "943:  EID_PKT_F_PORT,                            //  399",
          "944:  EID_VSA_SSID_ID,                           //  400",
          "945:  EID_MU_AUTH_TYPE,                          //  401",
          "946:  EID_PKT_F_MAX_PKT_COUNT,                   //  402",
          "947:  EID_PKT_F_FLAG_2,                          //  403",
          "948:  EID_IMAGE_PORT,                            //  404",
          "949:  EID_FILTER_ROLE_ID,                        //  405",
          "950:  EID_FILTER_ROLE_TIMESTAMP,                 //  406",
          "951:  EID_MAX",
          "952: } wassp_tlv_type_t;",
          "955: static const value_string wassp_tlv_types[] =",
          "956: {",
          "957:  { EID_STATUS, \"Status/Action\"},",
          "958:  { EID_RU_SW_VERSION, \"Software Version\"},",
          "959:  { EID_RU_SERIAL_NUMBER, \"Serial Number\"},",
          "960:  { EID_RU_REG_CHALLENGE, \"Registration Challenge\"},",
          "961:  { EID_RU_REG_RESPONSE, \"Challenge Response\"},",
          "962:  { EID_AC_IPADDR, \"Controller IP Address\"},",
          "963:  { EID_RU_VNSID, \"AccessPoint VNS ID\"},",
          "964:  { EID_TFTP_SERVER, \"TFTP Server Address\"},",
          "965:  { EID_IMAGE_PATH, \"Path/Filename of Upgrade Image\"},",
          "966:  { EID_CONFIG, \"SNMP Encoded Configuration\"},",
          "967:  { EID_RU_STATE, \"AccessPoint State\"},",
          "968:  { EID_SESSION_KEY, \"Binding Key\"},",
          "969:  { EID_RU_PROTOCOL, \"Message Type\"},",
          "970:  { EID_RANDOM_NUMBER, \"Random Number\"},",
          "971:  { EID_STANDBY_TIMEOUT, \"Standby Timeout\"},",
          "972:  { EID_RU_CHALLENGE_ID, \"AccessPoint Challenge ID\"},",
          "973:  { EID_RU_MODEL, \"AccessPoint Model\"},",
          "974:  { EID_RU_SCAN_MODE, \"AccessPoint Scan Mode\"},",
          "975:  { EID_RU_SCAN_TYPE, \"AccessPoint Scan Type\"},",
          "976:  { EID_RU_SCAN_INTERVAL, \"AccessPoint Scan Interval\"},",
          "977:  { EID_RU_RADIO_TYPE, \"AccessPoint Radio Type\"},",
          "978:  { EID_RU_CHANNEL_DWELL_TIME, \"AccessPoint Channel Dwell Time\"},",
          "979:  { EID_RU_CHANNEL_LIST, \"AccessPoint Channel List\"},",
          "980:  { EID_RU_TRAP, \"AccessPoint Trap\"},",
          "981:  { EID_RU_SCAN_TIMES, \"AccessPoint Scan Times\"},",
          "982:  { EID_RU_SCAN_DELAY, \"AccessPoint Scan Delay\"},",
          "983:  { EID_RU_SCAN_REQ_ID, \"AccessPoint Scan Request ID\"},",
          "984:  { EID_STATIC_CONFIG, \"Static Configuation\"},",
          "985:  { EID_LOCAL_BRIDGING, \"Local Bridging\"},",
          "986:  { EID_STATIC_BP_IPADDR, \"Static AccessPoint IP Address\"},",
          "987:  { EID_STATIC_BP_NETMASK, \"Static AccessPoint NetMask\"},",
          "988:  { EID_STATIC_BP_GATEWAY, \"Static AccessPoint Gateway\"},",
          "989:  { EID_STATIC_BM_IPADDR, \"Static Controller IP Address\"},",
          "990:  { EID_BP_BPSSID, \"AccessPoint BSSID\"},",
          "991:  { EID_BP_WIRED_MACADDR, \"AccessPoint Wired MAC\"},",
          "992:  { EID_RU_CAPABILITY, \"AccessPoint Capability\"},",
          "993:  { EID_RU_SSID_NAME, \"AccessPoint SSID Name\"},",
          "994:  { EID_ALARM, \"Alarm\"},",
          "995:  { EID_RU_PREAUTH, \"AccessPoint Preauthorization\"},",
          "996:  { EID_RU_PMK, \"AccessPoint Pairwise Master Key\"},",
          "997:  { EID_AC_REG_CHALLENGE, \"Controller Register Challenge\"},",
          "998:  { EID_AC_REG_RESPONSE, \"Controller Register Response\"},",
          "999:  { EID_STATS, \"Stats\"},",
          "1000:  { EID_CERTIFICATE, \"Certificate\"},",
          "1001:  { EID_RADIO_ID, \"Radio ID\"},",
          "1002:  { EID_REQ_ID, \"Request ID\"},",
          "1003:  { EID_NETWORK_ID, \"Network ID\"},",
          "1004:  { EID_MU_MAC, \"MU MAC Address\"},",
          "1005:  { EID_TIME, \"Time\"},",
          "1006:  { EID_NUM_RADIOS, \"Number of Radios\"},",
          "1007:  { EID_RADIO_INFO, \"Radio Info\"},",
          "1008:  { EID_NETWORK_INFO, \"Network Info\"},",
          "1009:  { EID_VENDOR_ID, \"Vendor ID\"},",
          "1010:  { EID_PRODUCT_ID, \"Product ID\"},",
          "1011:  { EID_RADIO_INFO_ACK, \"Radio Info Acknowledge\"},",
          "1012:  { EID_SECURE_TUNNEL, \"Secure Tunnel\"},",
          "1013:  { EID_MU_TOPOLOGY_ID, \"MU Topology ID\"},",
          "1014:  { EID_SSID, \"SSID\"},",
          "1015:  { EID_EVENT_BLOCK, \"Event Block\"},",
          "1016:  { EID_SNMP_ERROR_STATUS, \"SNMP Error Status\"},",
          "1017:  { EID_SNMP_ERROR_INDEX, \"SNMP Error Index\"},",
          "1018:  { EID_RU_REAUTH_TIMER, \"AccessPoint ReAuthentication Timer\"},",
          "1019:  { EID_AP_IMG_TO_RAM, \"AccessPoint Image Store to RAM\"},",
          "1020:  { EID_AP_IMG_ROLE, \"AccessPoint Image Type\"},",
          "1021:  { EID_AP_STATS_BLOCK, \"AccessPoint Statistics Block\"},",
          "1022:  { EID_MU_RF_STATS_BLOCK, \"AccessPoint RF Statistics Block\"},",
          "1023:  { EID_STATS_REQUEST_TYPE, \"AccessPoint Statistics Request Type\"},",
          "1024:  { EID_STATS_LAST, \"AccessPoint Statistics Last Flag\"},",
          "1025:  { EID_TLV_CONFIG, \"TLV Configuration\"},",
          "1026:  { EID_CONFIG_ERROR_BLOCK, \"AccessPoint Configuration Error Block\"},",
          "1027:  { EID_CONFIG_MODIFIED_BLOCK, \"AccessPoint Configuration Modified Block\"},",
          "1028:  { EID_MU_PMKID_LIST, \"MU Pairwise Master Key List\"},",
          "1029:  { EID_MU_PMK_BP, \"MU and AccessPoint Pairwise Master Key\"},",
          "1030:  { EID_MU_PMKID_BP, \"MU and AccessPoint Pairwise Master Key ID\"},",
          "1031:  { EID_COUNTDOWN_TIME, \"CountDown Time\"},",
          "1032:  { EID_WASSP_VLAN_TAG, \"VLAN Tag\"},",
          "1033:  { EID_SSID_ID, \"SSID(Service Set Identifier)\"},",
          "1034:  { EID_BULK_MU_BLOCK, \"Bulk MU Block\"},",
          "1035:  { EID_MU_BLOCK, \"MU Block\" },",
          "1036:  { EID_PORT_OPEN_FLAG, \"Port Open Flag\"},",
          "1037:  { EID_WASSP_TUNNEL_TYPE, \"Tunnel Type\"},",
          "1038:  { EID_LOG_TYPE, \"Log type\"},",
          "1039:  { EID_LOG_FILE, \"Log File\"},",
          "1040:  { EID_ALARM_SEVERITY, \"Alarm Severity\"},",
          "1041:  { EID_ALARM_DESCRIPTION, \"Alarm Information\"},",
          "1042:  { EID_BULK_VNS_BLOCK, \"Bulk VNS Block\"},",
          "1043:  { EID_VNS_BLOCK, \"VNS Block\"},",
          "1044:  { EID_AP_DHCP_MODE, \"AccessPoint DHCP Mode\"},",
          "1045:  { EID_AP_IPADDR, \"AccessPoint IP Address\"},",
          "1046:  { EID_AP_NETMASK, \"AccessPoint IP Netmask\"},",
          "1047:  { EID_AP_GATEWAY, \"AccessPoint IP Gateway\"},",
          "1048:  { EID_BSSID2IP_BLOCK, \"BSSID to IP Address Mapping Block\"},",
          "1049:  { EID_RU_BACKUP_VERSION, \"AccessPoint Upgrade: Software Version of The Backup Image\"},",
          "1050:  { EID_AC_SW_VERSION, \"AccessPoint Upgrade: Software Version\"},",
          "1051:  { EID_MCAST_LAMG_LIST, \"Multicast Optimization\"},",
          "1052:  { EID_FILTER_NAME, \"Filter Rule Name\"},",
          "1053:  { EID_FILTER_RULES, \"Array of Filter Rules\"},",
          "1054:  { EID_AUTH_STATE, \"Authentication State( MU Not Authenticate = 0, ANON_AUTHENTICATED=0, MU Authenticated = 1\"},",
          "1055:  { EID_MU_DISC_AFTER_AUTH, \"After Authenticated MU State( Disconnected = 0, Connected = 1\"},",
          "1056:  { EID_MU_MAC_LIST, \"Array of MAC Addresses\"},",
          "1057:  { EID_TRANS_ID, \"Transaction ID of The Message Determined At The Home Controller\"},",
          "1058:  { EID_TIMEZONE_OFFSET, \"Timezone Offset\"},",
          "1059:  { EID_SENSOR_FORCE_DOWNLOAD, \"Force Download of Sensor Image\"},",
          "1060:  { EID_SENSOR_IMG_VERSION, \"Sensor Image Version\"},",
          "1061:  { EID_BRIDGE_MODE, \"Bridge Mode\"},",
          "1062:  { EID_MU_VLAN_TAG, \"MU VLAN Tag\"},",
          "1063:  { EID_RATECTRL_CIR_UL, \"Up Link Bandwidth Control: Committed Information Rate (CIR)\"},",
          "1064:  { EID_RATECTRL_CIR_DL, \"Down Link Bandwidth Control: Committed Information Rate (CIR)\"},",
          "1065:  { EID_RATECTRL_CBS_UL, \"Up Link Bandwidth Control: Committed Burst Size (CBS)\"},",
          "1066:  { EID_RATECTRL_CBS_DL, \"Down Link Bandwidth Control: Committed Burst Size (CBS)\"},",
          "1067:  { EID_RATECTRL_NAME_UL, \"Up Link Bandwidth Control Profile Name\"},",
          "1068:  { EID_RATECTRL_NAME_DL, \"Down Link Bandwidth Control Profile Name\"},",
          "1069:  { EID_POLICY_NAME, \"Policy Profile Name\"},",
          "1070:  { EID_SIAPP_PMK_BLOCK, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key Block\"},",
          "1071:  { EID_SIAPP_PMKID, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key ID\"},",
          "1072:  { EID_SIAPP_PMK_REAUTH, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key ReAuthenticate\"},",
          "1073:  { EID_SIAPP_PMK_LIFETIME, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key Life Time\"},",
          "1074:  { EID_SIAPP_PMKID_FLAG, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key ID Flag\"},",
          "1075:  { EID_SIAPP_MU_PMK, \"MU Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key\"},",
          "1076:  { EID_SIAPP_AP_NAME, \"SIAPP AP Name\"},",
          "1077:  { EID_SIAPP_RADIO_CONFIG_BLOCK, \"SIAPP Radio Configuration Block\"},",
          "1078:  { EID_SIAPP_CLUSTER_ACS_REQ, \"SIAPP Cluster ACS Request\"},",
          "1079:  { EID_SIAPP_SIAPP_MU_STATS_BLOCK, \"SIAPP MU Statistics Block\"},",
          "1080:  { EID_SIAPP_PACKET_RETRIES, \"SIAPP Packet Retries\"},",
          "1081:  { EID_SIAPP_ASSOC_IN_WLAN, \"SIAPP MU Association With In Same WLAN\"},",
          "1082:  { EID_SIAPP_ASSOC_IN_CLUSTER, \"SIAPP MU Association With In Same Cluster\"},",
          "1083:  { EID_SIAPP_REASSOC_IN_CLUSTER, \"SIAPP MU Ressociation With In Same Cluster\"},",
          "1084:  { EID_SIAPP_THIN_BLOCK, \"SIAPP Thin Access Points Block\"},",
          "1085:  { EID_SIAPP_NEWAP_BSSID, \"SIAPP New Access Points BSSID\"},",
          "1086:  { EID_SIAPP_OLDAP_BSSID, \"SIAPP Old Access Points BSSID\"},",
          "1087:  { EID_SIAPP_RAD_CACS_REQ, \"SIAPP Radio CACS Request\"},",
          "1088:  { EID_SIAPP_RADIOBLOCK, \"SIAPP Radio Block\"},",
          "1089:  { EID_SIAPP_CLIENT_COUNT, \"SIAPP Client Count\"},",
          "1090:  { EID_SIAPP_BLOCK, \"SIAPP Block\"},",
          "1091:  { EID_SIAPP_MU_TransmittedFrameCount, \"SIAPP MU _Transmitted Frame Count\"},",
          "1092:  { EID_SIAPP_MU_ReceivedFrameCount, \"SIAPP MU Received Frame Count\"},",
          "1093:  { EID_SIAPP_MU_TransmittedBytes, \"SIAPP MU Transmitted Bytes\"},",
          "1094:  { EID_SIAPP_MU_ReceivedBytes, \"SIAPP MU Received Bytes\"},",
          "1095:  { EID_SIAPP_MU_UL_DroppedRateControlPackets, \"SIAPP MU Up Link Dropped Rate Control Packets\"},",
          "1096:  { EID_SIAPP_MU_DL_DroppedRateControlPackets, \"SIAPP MU Down Link Dropped Rate Control Packets\"},",
          "1097:  { EID_SIAPP_MU_DL_DroppedBufferFullPackets, \"SIAPP MU Down Link Dropped Buffer Full Packets\"},",
          "1098:  { EID_SIAPP_MU_DL_LostRetriesPackets, \"SIAPP MU Down Link Lost Retries Packets\"},",
          "1099:  { EID_SIAPP_MU_UL_DroppedRateControlBytes, \"SIAPP MU Up Link Dropped Rate Control Bytes\"},",
          "1100:  { EID_SIAPP_MU_DL_DroppedRateControlBytes, \"SIAPP MU Down Link Dropped Rate Control Bytes\"},",
          "1101:  { EID_SIAPP_MU_DL_DroppedBufferFullBytes, \"SIAPP MU Down Link Dropped Buffer Full Bytes\"},",
          "1102:  { EID_SIAPP_MU_DL_LostRetriesBytes, \"SIAPP MU Down Link Lost Retries Bytes\"},",
          "1103:  { EID_SIAPP_BP_BSSID, \"SIAPP  Access Points BSSID\"},",
          "1104:  { EID_SIAPP_RADIO_ID, \"SIAPP Radio ID\"},",
          "1105:  { EID_SIAPP_MACADDR, \"SIAPP Mac Address\"},",
          "1106:  { EID_SIAPP_PREAUTH_REQ, \"SIAPP Preauthentication Request\"},",
          "1107:  { EID_SIAPP_USER_IDENTITY, \"SIAPP Client IDY\"},",
          "1108:  { EID_SIAPP_LOADBAL_BLOCK, \"SIAPP Load Balance block\"},",
          "1109:  { EID_SIAPP_LOADBAL_PKT_TYPE, \"SIAPP Load Balance PKT Type\"},",
          "1110:  { EID_SIAPP_LOADBAL_LOADGROUP_ID, \"SIAPP Load Balance Load Group ID\"},",
          "1111:  { EID_SIAPP_LOADBAL_LOAD_VALUE, \"SIAPP Load Balance Load Value\"},",
          "1112:  { EID_SIAPP_AC_MGMT_MAC, \"SIAPP Controller Management Mac Address\"},",
          "1113:  { EID_SIAPP_FILTER_COS, \"SIAPP Filter Rule COS\"},",
          "1114:  { EID_COS, \"Classes of Service(COS)\"},",
          "1115:  { EID_RATE_LIMIT_RESOURCE_TBL, \"Bandwidth Control Rate Limit Resource Table\"},",
          "1116:  { EID_UCAST_FILTER_DISABLE, \"Unicast Filter Disable Flag\"},",
          "1117:  { EID_MU_INFORM_REASON, \"MU Information\"},",
          "1118:  { EID_MU_FILTER_POLICY_NAME, \"MU Filter Rule Name\"},",
          "1119:  { EID_MU_TOPOLOGY_POLICY_NAME, \"MU Topology Name\"},",
          "1120:  { EID_MU_COS_POLICY_NAME, \"MU COS Name\"},",
          "1121:  { EID_MU_FILTER_KEY, \"MU Filter Rule ID\"},",
          "1122:  { EID_MU_TOPOLOGY_KEY, \"MU Topology ID\"},",
          "1123:  { EID_MU_COS_KEY, \"MU COS ID\"},",
          "1124:  { EID_MU_SESSION_TIMEOUT, \"MU Session Life Time\"},",
          "1125:  { EID_MU_ACCOUNTING_CLASS, \"MU Accounting Class\"},",
          "1126:  { EID_MU_LOGIN_LAT_PORT, \"MU Login authentication state(0 = Non-auth, 1 = Auth)\"},",
          "1127:  { EID_MU_IDLE_TIMEOUT, \"MU Session Idle Timeout\"},",
          "1128:  { EID_MU_ACCT_INTERIM_INTERVAL, \"Client Acct-Interim-Interval(RADIUS)\"},",
          "1129:  { EID_MU_IP_ADDR, \"MU IP Addresss\"},",
          "1130:  { EID_MU_TERMINATE_ACTION, \"MU Terminate Action\"},",
          "1131:  { EID_SITE_NAME, \"Site Name\"},",
          "1132:  { EID_PEER_SITE_IP, \"Peer Site IP Address\"},",
          "1133:  { EID_INTERFERENCE_EVENTS_ENABLE, \"Interference Events Enable Flag\"},",
          "1134:  { EID_EVENT_TYPE, \"Event Type\"},",
          "1135:  { EID_EVENT_CHANNEL, \"Event Channel\"},",
          "1136:  { EID_EVENT_VALUE, \"Event Value\"},",
          "1137:  { EID_SSS_MU_BLOCK, \"Site Section MU Block\"},",
          "1138:  { EID_SSS_MU_ASSOC_TIME, \"Site Section MU Association Time\"},",
          "1139:  { EID_SSS_TS64_MU_UPDATE, \"Site Section MU Update Time Stamp\"},",
          "1140:  { EID_SSS_TS64_AP_CURRENT, \"Site Section AccessPoint Current Time\"},",
          "1141:  { EID_SSS_MU_AUTH_STATE, \"Site Section MU Authentication State\"},",
          "1142:  { EID_SSS_AP_HOMEHASH, \"Site Section AccessPoint Home Hashed Value\"},",
          "1143:  { EID_TIME_FIRST_DETECTED, \"First Detected Time\"},",
          "1144:  { EID_TIME_LAST_REPORTED, \"Last Reported Time\"},",
          "1145:  { EID_EVENT_ARRAY, \"Array Of Events\"},",
          "1146:  { EID_SSS_DEFAULT_SESSION_TIMEOUT, \"Site Section Default Timeout Time\"},",
          "1147:  { EID_SSS_SSID, \"Site Section SSID\"},",
          "1148:  { EID_SSS_PRIVACY_TYPE, \"Site Section Privacy Type\"},",
          "1149:  { EID_POLICY_ZONE_NAME, \"Policy Zone Name\"},",
          "1150:  { EID_RU_AC_EVENT_COMPONENT_ID, \"Event Component ID\"},",
          "1151:  { EID_MU_AUTH_STATE, \"MU Authentication State\"},",
          "1152:  { EID_MU_USER_NAME, \"MU User Name\"},",
          "1153:  { EID_BULK_TYPE, \"Bulk Type\"},",
          "1154:  { EID_SENT_TIME, \"Sent Time\"},",
          "1155:  { EID_INFORM_MU_PMK, \"Pairwise Master Key Informed From AP\"},",
          "1156:  { EID_COLLECTOR_IP_ADDR, \"Collector IP Address\"},",
          "1157:  { EID_ARP_PROXY, \"Enable/Disable Proxying of ARP Per Topology\"},",
          "1158:  { EID_MCAST_FILTER_RULES, \"Multicast Filter Rules Per Topology\"},",
          "1159:  { EID_AP_PARAMS, \"AP Parameters\"},",
          "1160:  { EID_ASSOC_SSID_ARRAY, \"Array of Associated SSID\"},",
          "1161:  { EID_ASSOC_SSID_BLOCK, \"Block of Associated SSID\"},",
          "1162:  { EID_AP_LIST_BLOCK, \"Bloc of AP List\"},",
          "1163:  { EID_AP_LIST_ARRAY, \"Array of AP List\"},",
          "1164:  { EID_MAC_ADDR, \"MAC Address\"},",
          "1165:  { EID_SCAN_PROFILE_ID, \"Scan Profile ID\"},",
          "1166:  { EID_ACTION_REQ, \"Action Request\"},",
          "1167:  { EID_CHANNEL_LIST, \"Channel List\"},",
          "1168:  { EID_COUNTERMEASURES_MAX_CH, \"CounterMeasures Max Channel\"},",
          "1169:  { EID_COUNTERMEASURES_SET, \"Enable/disable CounterMeasures\"},",
          "1170:  { EID_SCAN_PROFILE_BLOCK, \"Scan Profile Block\"},",
          "1171:  { EID_SEQ_NUM, \"Sequence Number\"},",
          "1172:  { EID_THREAT_DEF_ARRAY, \"Array Of Threat Definition\"},",
          "1173:  { EID_THREAT_DEF_BLOCK, \"Block Of Threat Definition\"},",
          "1174:  { EID_THREAT_TYPE, \"Threat Type\"},",
          "1175:  { EID_THREAT_ID, \"Threat ID\"},",
          "1176:  { EID_THREAT_STATS_F, \"Threat State\"},",
          "1177:  { EID_THREAT_FR_SFR, \"Threat FR SFR\"},",
          "1178:  { EID_THREAT_PATTERN_ARRAY, \"Array Of Threat Pattern\"},",
          "1179:  { EID_THREAT_PATTERN_BLOCK, \"Block Of Threat Pattern\"},",
          "1180:  { EID_THREAT_PATTERN, \"Threat Pattern\"},",
          "1181:  { EID_THREAT_ALERT_TH_DUR, \"Threat Alert\"},",
          "1182:  { EID_THREAT_CLEAR_TH_DUR, \"Threat Clear\"},",
          "1183:  { EID_THREAT_PRIORITY, \"Threat Priority\"},",
          "1184:  { EID_THREAT_MITIGATION_LIST, \"Threat Mitigation List\"},",
          "1185:  { EID_SSS_MU_IS_PORT_CLOSED, \"Enable/Disable Site Section MU Port\"},",
          "1186:  { EID_FULL_UPDATE, \"Full Update\"},",
          "1187:  { EID_REASON, \"Reason\"},",
          "1188:  { EID_SURVEILLANCE_DATA_ARRAY, \"Array of Surveillance Data\"},",
          "1189:  { EID_SURVEILLANCE_DATA_BLOCK, \"Block of Surveillance Data\"},",
          "1190:  { EID_SCAN_BSSID, \"Scan BSSID\"},",
          "1191:  { EID_PARAMS, \"Parameters\"},",
          "1192:  { EID_SCAN_RSS_RSSI, \"Scan RSS and RSSI\"},",
          "1193:  { EID_SCAN_SSID, \"Scan SSID\"},",
          "1194:  { EID_SCAN_CAP, \"Scan Capability\"},",
          "1195:  { EID_THREAT_CLASSIFICATION, \"Threat Classification\"},",
          "1196:  { EID_THREAT_DATA_ARRAY, \"Array Of Threat Data\"},",
          "1197:  { EID_THREAT_DATA_BLOCK, \"Block Of Threat Data\"},",
          "1198:  { EID_STATE, \"State\"},",
          "1199:  { EID_DROP_FR_CNT, \"Drop FR Count\"},",
          "1200:  { EID_STOP_ROAM_CNT, \"Stop ROAM Count\"},",
          "1201:  { EID_SPOOF_CNT, \"Spoof Count\"},",
          "1202:  { EID_THREAT_CLASSIFY_ARRAY, \"Array Of Classify Threat\"},",
          "1203:  { EID_THREAT_CLASSIFY_BLOCK, \"Block Of Classify Threat\"},",
          "1204:  { EID_THREAT_NAME, \"Threat Name\"},",
          "1205:  { EID_LOCATION, \"Location\"},",
          "1206:  { EID_ENCRYPTION_TYPE, \"Encryption Type\"},",
          "1207:  { EID_MU_EVENT_ARRAY, \"Array Of MU Events\"},",
          "1208:  { EID_MU_EVENT_BLOCK, \"Block Of MU Events\"},",
          "1209:  { EID_COMPONENT_ID, \"Component ID\"},",
          "1210:  { EID_MU_EVENT_STRING, \"MU Event String\"},",
          "1211:  { EID_BYPASS_BMCAST, \"Bypass Broadcast and Multicast\"},",
          "1212:  { EID_GETTIMEOFDAY, \"Get Time of Day\"},",
          "1214:  { EID_COUNTRY_ID, \"Country ID\"},",
          "1215:  { EID_COUNTRY_ARRAY, \"Array of Country\"},",
          "1216:  { EID_COUNTRY_BLOCK, \"Country Block\"},",
          "1218:  { EID_MU_EVENT_TYPE, \"MU Event Type\"},",
          "1219:  { EID_LOCATOR_FLOOR_ID, \"Floor ID\"},",
          "1220:  { EID_LOCATOR_LOC_TYPE, \"Location Type\"},",
          "1221:  { EID_LOCATOR_LOC_BLOCK, \"Block of Location Data\"},",
          "1222:  { EID_LOCATOR_LOC_ARRAY, \"Array of Location Data\"},",
          "1223:  { EID_LOCATOR_LOC_POINT, \"Location Point\"},",
          "1224:  { EID_MU_EVENT_DETAILS, \"MU Event Details\"},",
          "1225:  { EID_MU_EVENT_FROM_AP, \"MU Event From AP\"},",
          "1226:  { EID_MU_EVENT_LOC_BLOCK, \"Block of MU Location Event\"},",
          "1227:  { EID_LOCATOR_LOC_AP_DISTANCE, \"AP Location Distance\"},",
          "1228:  { EID_LOCATOR_LOC_PRECISION, \"Location Precision\"},",
          "1229:  { EID_RSS_DATA_ARRAY, \"Array of RSS Data\"},",
          "1230:  { EID_RSS_DATA_BLOCK, \"Block  of RSS Data\"},",
          "1231:  { EID_LOCATOR_MU_ACTION, \"Location MU Action\"},",
          "1232:  { EID_EFFECTIVE_EGRESS_VLAN, \"Effective Egress Vlan\"},",
          "1233:  { EID_REBOOT_ACK, \"Reboot Acknowledgement\"},",
          "1234:  { EID_MU_BSSID, \"MU BSSID\"},",
          "1235:  { EID_AUTH_FLAG, \"Authentication Flag\"},",
          "1236:  { EID_ROAMED_FLAG, \"ROAMED Flag\"},",
          "1237:  { EID_MU_RSS, \"MU RSS\"},",
          "1238:  { EID_FILTER_RULES_VER, \"Filter Rule Struct Version\"},",
          "1239:  { EID_FILTER_TYPE, \"Filter Rule Type\"},",
          "1240:  { EID_MCAST_FILTER_BLOCK, \"Multicast Filter Rule Block\"},",
          "1241:  { EID_MCAST_FILTER_BLOCK_ENTRY, \"Multicast Filter Rule Block Entry\"},",
          "1242:  { EID_DEFAULT_ACTION_TYPE, \"Default Action Type\"},",
          "1243:  { EID_DEFAULT_CONTAIN_TO_VLAN, \"Default Contain to Vlan Flag\"},",
          "1244:  { EID_DEFAULT_BRIDGE_MODE, \"Default Bridge Mode Flag\"},",
          "1245:  { EID_INVALID_POLICY, \"Invalid Policy Flag\"},",
          "1246:  { EID_LOCATOR_FLOOR_NAME, \"Floor Name\"},",
          "1247:  { EID_AP_FLAGS, \"AP Flags\"},",
          "1248:  { EID_AP_PVID, \"AP PVID\"},",
          "1249:  { EID_AP_REDIRECT, \"AP Redirect Flag\"},",
          "1250:  { EID_MU_CVLAN_BAP, \"AP Contain to Vlan Has Bridge At AP Topology Flag\"},",
          "1251:  { EID_MU_SESSION_ARRAY, \"Array Of MU Session\"},",
          "1252:  { EID_MU_SESSION_BLOCK, \"MU Session Block\"},",
          "1253:  { EID_MU_SESSION_ID, \"MU Session ID\"},",
          "1254:  { EID_MU_RFS_NAME, \"MU RFS Name\"},",
          "1255:  { EID_MU_FLAGS, \"MU Flags\"},",
          "1256:  { EID_MU_ASSOC_TIME, \"MU Associated Time\"},",
          "1257:  { EID_MU_ACTIVE_TIME, \"MU Actived Time\"},",
          "1258:  { EID_REPORT_REQ, \"Report Request\"},",
          "1259:  { EID_MU_URL, \"MU Capive Portal Url\"},",
          "1260:  { EID_MU_SESSION_LIFETIME, \"MU Session Life Time\"},",
          "1261:  { EID_MU_REAUTH_TIMER, \"MU Re-Authentication Timer\"},",
          "1262:  { EID_MU_ACCT_SESSION_ID_STRING, \"MU Acct Session ID String\"},",
          "1263:  { EID_MU_ACCT_POLICY_NAME, \"MU Acct Policy Name\"},",
          "1264:  { EID_MU_ACCT_START_TIME, \"MU Acct Start Time\"},",
          "1265:  { EID_MU_ACCT_CLASS, \"MU Acct Class\"},",
          "1266:  { EID_MU_LOGIN_LAT_GROUP, \"MU Login Group\"},",
          "1267:  { EID_MU_TUNNEL_PRIVATE_GROUP_ID_STRING, \"MU Tunnel Private Group ID String\"},",
          "1268:  { EID_MU_USER_ID_STRING, \"MU User ID String\"},",
          "1269:  { EID_MU_DEFENDED_STATE, \"MU Defended State\"},",
          "1270:  { EID_MU_MOD_MASK, \"MU Modulation Maske\"},",
          "1271:  { EID_LOCATOR_TRACKED, \"Locator Tracked\"},",
          "1272:  { EID_PORT, \"Port\"},",
          "1273:  { EID_RETRIES_COUNT, \"Retries Count\"},",
          "1274:  { EID_MODULATION_TYPE, \"Modulation Type\"},",
          "1275:  { EID_DETECTED_ROGUE_ARRAY, \"Array Of Detected Rogue\"},",
          "1276:  { EID_DETECTED_ROGUE_BLOCK, \"Detected Rogue Block\"},",
          "1277:  { EID_ROGUE_DETECTION, \"Rogue Detection\"},",
          "1278:  { EID_MAC_ADDR_TX, \"Tx Mac Address\"},",
          "1279:  { EID_MAC_ADDR_RX, \"Rx Mac Address\"},",
          "1280:  { EID_IP_ADDR_TX, \"Tx IP Address\"},",
          "1281:  { EID_IP_ADDR_RX, \"Rx IP Address\"},",
          "1282:  { EID_TTL, \"TTL\"},",
          "1283:  { EID_GW_IP_ADDR, \"Gateway IP Address\"},",
          "1284:  { EID_LOCATOR_STATE_DATA, \"Location State Data\"},",
          "1285:  { EID_LOCATOR_POINT_SET, \"Location Point Set\"},",
          "1286:  { EID_FILTER_RULE_FIXED_APP_ID, \"Filter Rule Fixed Application ID\"},",
          "1287:  { EID_FILTER_RULES_EXT_BLOCK, \"Filter Rule Extented Block\"},",
          "1288:  { EID_MU_AREA_BLOCK, \"MU Area Block\"},",
          "1289:  { EID_MU_LOCATION, \"MU Location\"},",
          "1290:  { EID_MU_LOCATION_TS, \"MU Location Time Stamp\"},",
          "1291:  { EID_DNS_IP_ADDR, \"DNS IP Address\"},",
          "1292:  { EID_IN_SERVICE_AP_LIST, \"In-Service AP List\"},",
          "1293:  { EID_OUT_SERVICE_AP_LIST, \"Out of Service AP List\"},",
          "1294:  { EID_LAST_RD_AP, \"Last RD AP\"},",
          "1295:  { EID_ROGUE_INFO, \"Rogue Info\"},",
          "1296:  { EID_MU_IS_FT, \"Enable/Disable MU Fast Transition\"},",
          "1297:  { EID_MU_PMK_R1, \"MU Fast Transition Roaming\"},",
          "1298:  { EID_SIAPP_R0KHID, \"SIAPP R0KH ID\"},",
          "1299:  { EID_SIAPP_R1KHID, \"SIAPP R1KH ID\"},",
          "1300:  { EID_SIAPP_FT_NONCE, \"SIAPP Fast Transition Nonce\"},",
          "1301:  { EID_SIAPP_FT_PMKR0NAME, \"SIAPP Fast Transition PMKR0 Name\"},",
          "1302:  { EID_SIAPP_FT_R1KHID, \"SIAPP Fast Transition R1KH ID\"},",
          "1303:  { EID_SIAPP_FT_S1KHID, \"SIAPP Fast Transition S1KH ID\"},",
          "1304:  { EID_SIAPP_FT_PMKR1, \"SIAPP Fast Transition PMKR1\"},",
          "1305:  { EID_SIAPP_FT_PMKR1NAME, \"SIAPP Fast Transition PMKR1 Name\"},",
          "1306:  { EID_SIAPP_FT_PAIRWISE, \"SIAPP Fast Transition Pairwise\"},",
          "1307:  { EID_SIAPP_FT_LIFETIME, \"SIAPP Fast Transition Life Time\"},",
          "1308:  { EID_MU_POWER_CAP, \"MU Power Capable\"},",
          "1309:  { EID_AREA_NAME, \"Area Name\"},",
          "1310:  { EID_PERIODIC_NEIGHBOUR_REPORT, \"Periodic Neighbour Report\"},",
          "1311:  { EID_TIMESTAMP, \"Time Stamp\"},",
          "1312:  { EID_NEIGHBOUR_ENTRY, \"Neighbour Entry\"},",
          "1313:  { EID_MU_REQ, \"MU Request\"},",
          "1314:  { EID_RU_REQ, \"RU Request\"},",
          "1315:  { EID_NEIGHBOUR_REQ, \"Neighbour Request\"},",
          "1316:  { EID_SSS_FT_ASSOC, \"Site Section Fast Transition Association\"},",
          "1317:  { EID_DEFAULT_MIRRORN, \"Enables the First N Packets of a Flow to The Controller\"},",
          "1318:  { EID_FILTER_RULE_EXT_ACT_FLAGS, \"Extension to Filter Rule Definition. Specifies Additional Actions Per Filter Rule\"},",
          "1319:  { EID_TOPO_GROUP_MAPPING, \"Topology Group Mapping\"},",
          "1320:  { EID_MU_PMK_R0NAME, \"MU Pairwise Master Key R0 Name\"},",
          "1321:  { EID_CUI, \"CUI\"},",
          "1322:  { EID_SSS_CAPINFO, \"Site Section CAP Info\"},",
          "1323:  { EID_SSS_CAPPOWER, \"Site Section CAP Power\"},",
          "1324:  { EID_WFA_VSA, \"WFA Vendor Specific Hotspot\"},",
          "1325:  { EID_WFA_HS20_REMED_METHOD, \"Online Signup Method for HS2.0 Remediation\"},",
          "1326:  { EID_WFA_HS20_URL, \"Remediation Server Url for Online Signup In HS2.0\"},",
          "1327:  { EID_WFA_HS20_DEAUTH_CODE, \"WFA HS20 De-Authentication Code\"},",
          "1328:  { EID_WFA_HS20_REAUTH_DELAY, \"WFA HS20 Re-Authentication Delay\"},",
          "1329:  { EID_WFA_HS20_SWT, \"WFA HS20 SWT\"},",
          "1330:  { EID_POWER_STATUS, \"Power Status\"},",
          "1331:  { EID_IPV6_ADDR, \"IPV6 Address\"},",
          "1332:  { EID_FILTER_RULES_APP_SIG_GROUP_ID, \"Filter Rule Application Signature Group ID\"},",
          "1333:  { EID_FILTER_RULES_APP_SIG_DISP_ID, \"Filter Rule Application Signature Display ID\"},",
          "1334:  { EID_MU_DEV_IDENTITY, \"MU Device ID\"},",
          "1335:  { EID_APPL_STATS_REQ, \"Application Rule Stats Request\"},",
          "1336:  { EID_MU_APPL_STATS_BLOCK, \"MU Application Rule Stats Block\"},",
          "1337:  { EID_TOPOLOGY_ARRAY, \"Array of Topologies\"},",
          "1338:  { EID_TOPOLOGY_STRUCT, \"Topology Struct\"},",
          "1339:  { EID_FILTER_CONFIG_STRUCT, \"Filter Rule Configuration Struct\"},",
          "1340:  { EID_DHCP_HOST_NAME, \"DHCP Host Name\"},",
          "1341:  { EID_NEIGHBOUR_ENTRY_2, \"Neighbour Entry 2\"},",
          "1342:  { EID_CHANNEL_ENTRY, \"Channel Entry\"},",
          "1343:  { EID_MU_ECP_PW, \"MU External Captive Portal Password\"},",
          "1344:  { EID_MU_ECP_TOKEN, \"MU External Captive Portal Token\"},",
          "1345:  { EID_STATIC_VSA_IPADDR, \"AP Endpoint on Overlay Network IP Address\"},",
          "1346:  { EID_STATIC_VSA_NETMASK, \"AP Endpoint on Overlay Network IP Mask\"},",
          "1347:  { EID_PKT_CAPTURE_STATUS, \"Packet Capture Status\"},",
          "1348:  { EID_PKT_CAPTURE_FILTERS, \"Packet Capture Filters\"},",
          "1349:  { EID_PKT_F_WIRELESS, \"Enable Packet Capture On Wireless\"},",
          "1350:  { EID_PKT_F_WIREDCLIENT, \"Enable Packet Capture on Wired Client\"},",
          "1351:  { EID_PKT_F_DIRECTION, \"Packet Capture Direction\"},",
          "1352:  { EID_PKT_F_RADIO, \"Packet Capture on Radio\"},",
          "1353:  { EID_PKT_F_FLAGS, \"Packet Capture Flag\"},",
          "1354:  { EID_PKT_F_IP_ARRAY, \"Array of Packet Capture IP Addresses\"},",
          "1355:  { EID_PKT_F_MAC, \"Array of Packet Capture Mac Addresses\"},",
          "1356:  { EID_PKT_F_PROTOCOL, \"Packet Capture On Protocol\"},",
          "1357:  { EID_PKT_F_PORT, \"Packet Capture On Port\"},",
          "1358:  { EID_VSA_SSID_ID, \"VSA SSID ID\"},",
          "1359:  { EID_MU_AUTH_TYPE, \"MU Authentication Type\"},",
          "1360:  { EID_PKT_F_MAX_PKT_COUNT, \"Max Captured Packet Count\"},",
          "1361:  { EID_PKT_F_FLAG_2, \"Packet Capture Flag 2\"},",
          "1362:  { EID_IMAGE_PORT, \"Image Port\"},",
          "1363:  { EID_FILTER_ROLE_ID, \"Filter Rule ID\"},",
          "1364:  { EID_FILTER_ROLE_TIMESTAMP, \"Time Stamp of When Role Was Last Changed\"},",
          "1365:  { 0, NULL }",
          "1366: };",
          "1369: const TLV_PARSER_ENTRY tlvMainTable[]  =",
          "1370: {",
          "1371:  { EID_UNUSED_0, \"Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1372:  { EID_STATUS, \"Status/Action\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1373:  { EID_RU_SW_VERSION, \"Software Version\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1374:  { EID_RU_SERIAL_NUMBER, \"Serial Number\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1375:  { EID_RU_REG_CHALLENGE, \"Registration Challenge\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1376:  { EID_RU_REG_RESPONSE, \"Challenge Response\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1377:  { EID_AC_IPADDR, \"Controller IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1378:  { EID_RU_VNSID, \"AccessPoint VNS ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1379:  { EID_TFTP_SERVER, \"TFTP Server Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1380:  { EID_IMAGE_PATH, \"Path/Filename of Upgrade Image\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1381:  { EID_CONFIG, \"SNMP Encoded Configuration\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1382:  { EID_RU_STATE, \"AccessPoint State\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1383:  { EID_SESSION_KEY, \"Binding Key\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1384:  { EID_RU_PROTOCOL, \"Message Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1385:  { EID_RANDOM_NUMBER, \"Random Number\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1386:  { EID_STANDBY_TIMEOUT, \"Standby Timeout\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1387:  { EID_RU_CHALLENGE_ID, \"AccessPoint Challenge ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1388:  { EID_RU_MODEL, \"AccessPoint Model\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1389:  { EID_RU_SCAN_MODE, \"AccessPoint Scan Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1390:  { EID_RU_SCAN_TYPE, \"AccessPoint Scan Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1391:  { EID_RU_SCAN_INTERVAL, \"AccessPoint Scan Interval\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1392:  { EID_RU_RADIO_TYPE, \"AccessPoint Radio Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1393:  { EID_RU_CHANNEL_DWELL_TIME, \"AccessPoint Channel Dwell Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1394:  { EID_RU_CHANNEL_LIST, \"AccessPoint Channel List\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1395:  { EID_RU_TRAP, \"AccessPoint Trap\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1396:  { EID_RU_SCAN_TIMES, \"AccessPoint Scan Times\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1397:  { EID_RU_SCAN_DELAY, \"AccessPoint Scan Delay\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1398:  { EID_RU_SCAN_REQ_ID, \"AccessPoint Scan Request ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1399:  { EID_STATIC_CONFIG, \"Static Configuation\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1400:  { EID_LOCAL_BRIDGING, \"Local Bridging\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1401:  { EID_STATIC_BP_IPADDR, \"Static AccessPoint IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1402:  { EID_STATIC_BP_NETMASK, \"Static AccessPoint NetMask\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1403:  { EID_STATIC_BP_GATEWAY, \"Static AccessPoint Gateway\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1404:  { EID_STATIC_BM_IPADDR, \"Static Controller IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1405:  { EID_BP_BPSSID, \"AccessPoint BSSID\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1406:  { EID_BP_WIRED_MACADDR, \"AccessPoint Wired MAC\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1407:  { EID_RU_CAPABILITY, \"AccessPoint Capability\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1408:  { EID_RU_SSID_NAME, \"AccessPoint SSID Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1409:  { EID_ALARM, \"Alarm\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1410:  { EID_RU_PREAUTH, \"AccessPoint Preauthorization\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1411:  { EID_RU_PMK, \"AccessPoint Pairwise Master Key\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1412:  { EID_AC_REG_CHALLENGE, \"Controller Register Challenge\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1413:  { EID_AC_REG_RESPONSE, \"Controller Register Response\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1414:  { EID_STATS, \"Stats\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1415:  { EID_CERTIFICATE, \"Certificate\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1416:  { EID_RADIO_ID, \"Radio ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1417:  { EID_REQ_ID, \"Request ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1418:  { EID_NETWORK_ID, \"Network ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1419:  { EID_MU_MAC, \"MU MAC Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1420:  { EID_TIME, \"Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1421:  { EID_NUM_RADIOS, \"Number of Radios\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1422:  { EID_RADIO_INFO, \"Radio Info\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1423:  { EID_NETWORK_INFO, \"Network Info\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1424:  { EID_VENDOR_ID, \"Vendor ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1425:  { EID_PRODUCT_ID, \"Product ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1426:  { EID_RADIO_INFO_ACK, \"Radio Info Acknowledge\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1427:  { EID_SECURE_TUNNEL, \" secure tunnel\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1428:  { EID_MU_TOPOLOGY_ID, \"MU topology ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1429:  { EID_SSID, \"SSID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1430:  { EID_EVENT_BLOCK, \"Event Block\", TLV_TYPE_BLOCK_TLV, EVENT_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1431:  { EID_SNMP_ERROR_STATUS, \"SNMP Error Status\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1432:  { EID_SNMP_ERROR_INDEX, \"SNMP Error Index\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1433:  { EID_RU_REAUTH_TIMER, \"AccessPoint ReAuthentication Timer\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1434:  { EID_AP_IMG_TO_RAM, \"AccessPoint Image Store to RAM\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1435:  { EID_AP_IMG_ROLE, \"AccessPoint Image Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1436:  { EID_AP_STATS_BLOCK, \"AccessPoint Statistics Block\", TLV_TYPE_BLOCK_TLV, AP_STATS_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1437:  { EID_MU_RF_STATS_BLOCK, \"AccessPoint RF Statistics Block\", TLV_TYPE_BLOCK_TLV, MU_RF_STATS_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1438:  { EID_STATS_REQUEST_TYPE, \"AccessPoint Statistics Request Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1439:  { EID_STATS_LAST, \"AccessPoint Statistics Last Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1440:  { EID_TLV_CONFIG, \"TLV Configuration\", TLV_TYPE_BLOCK_TLV, CONFIG_GLOBAL_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1441:  { EID_CONFIG_ERROR_BLOCK, \"AccessPoint Configuration Error Block\", TLV_TYPE_BLOCK_TLV, CONFIG_ERROR_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1442:  { EID_CONFIG_MODIFIED_BLOCK, \"AccessPoint Configuration Modified Block\", TLV_TYPE_BLOCK_TLV, CONFIG_ERROR_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1443:  { EID_MU_PMKID_LIST, \"MU Pairwise Master Key List\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1444:  { EID_MU_PMK_BP, \"MU and AccessPoint Pairwise Master Key\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1445:  { EID_MU_PMKID_BP, \"MU and AccessPoint Pairwise Master Key ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1446:  { EID_COUNTDOWN_TIME, \"CountDown Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1447:  { EID_WASSP_VLAN_TAG, \"VLAN Tag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1448:  { EID_SSID_ID, \"SSID(Service Set Identifier)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1449:  { EID_BULK_MU_BLOCK, \"Bulk MU Block\", TLV_TYPE_BLOCK_TLV, BULK_MU_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1450:  { EID_MU_BLOCK, \"MU Block\", TLV_TYPE_BLOCK_TLV, MU_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1451:  { EID_PORT_OPEN_FLAG, \"Port Open Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1452:  { EID_WASSP_TUNNEL_TYPE, \"Tunnel Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1453:  { EID_LOG_TYPE, \"Log type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1454:  { EID_LOG_FILE, \"Log File\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1455:  { EID_ALARM_SEVERITY, \"Alarm Severity\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1456:  { EID_ALARM_DESCRIPTION, \"Alarm Information\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1457:  { EID_BULK_VNS_BLOCK, \"Bulk VNS Block\", TLV_TYPE_BLOCK_TLV, BULK_VNS_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1458:  { EID_VNS_BLOCK, \"VNS Block\", TLV_TYPE_BLOCK_TLV, VNS_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1459:  { EID_AP_DHCP_MODE, \"AccessPoint DHCP Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1460:  { EID_AP_IPADDR, \"AccessPoint IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1461:  { EID_AP_NETMASK, \"AccessPoint IP Netmask\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1462:  { EID_AP_GATEWAY, \"AccessPoint IP Gateway\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1463:  { EID_BSSID2IP_BLOCK, \"BSSID to IP Address Mapping Block\", TLV_TYPE_BLOCK_TLV, CONFIG_ERROR_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1464:  { EID_RU_BACKUP_VERSION, \"AccessPoint Upgrade: Software Version of The Backup Image\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1465:  { EID_AC_SW_VERSION, \"AccessPoint Upgrade: Software Version\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1466:  { EID_MCAST_LAMG_LIST, \" Multicast Optimization\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1467:  { EID_FILTER_NAME, \"Filter Rule Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1468:  { EID_FILTER_RULES, \"Array of Filter Rules\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1469:  { EID_AUTH_STATE, \"Authentication State( MU Not Authenticate = 0, ANON_AUTHENTICATED=0, MU Authenticated = 1\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1470:  { EID_MU_DISC_AFTER_AUTH, \"After Authenticated MU State( Disconnected = 0, Connected = 1\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1471:  { EID_MU_MAC_LIST, \"Array of MAC Addresses\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1472:  { EID_TRANS_ID, \"Transaction ID of The Message Determined At The Home Controller\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1473:  { EID_TIMEZONE_OFFSET, \"Timezone Offset\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1474:  { EID_SENSOR_FORCE_DOWNLOAD, \" Force Download of Sensor Image\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1475:  { EID_SENSOR_IMG_VERSION, \" Sensor Image Version\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1476:  { EID_BRIDGE_MODE, \"Bridge Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1477:  { EID_MU_VLAN_TAG, \"MU VLAN Tag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1478:  { EID_RATECTRL_CIR_UL, \"Up Link Bandwidth Control: Committed Information Rate (CIR)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1479:  { EID_RATECTRL_CIR_DL, \"Down Link Bandwidth Control: Committed Information Rate (CIR)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1480:  { EID_RATECTRL_CBS_UL, \"Up Link Bandwidth Control: Committed Burst Size (CBS)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1481:  { EID_RATECTRL_CBS_DL, \"Down Link Bandwidth Control: Committed Burst Size (CBS)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1482:  { EID_RATECTRL_NAME_UL, \"Up Link Bandwidth Control Profile Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1483:  { EID_RATECTRL_NAME_DL, \"Down Link Bandwidth Control Profile Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1484:  { EID_POLICY_NAME, \"Policy Profile Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1485:  { EID_SIAPP_PMK_BLOCK, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key Block\", TLV_TYPE_BLOCK_TLV, TAB_SIAPP_PMK_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1486:  { EID_SIAPP_PMKID, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1487:  { EID_SIAPP_PMK_REAUTH, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key ReAuthenticate\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1488:  { EID_SIAPP_PMK_LIFETIME, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key Life Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1489:  { EID_SIAPP_PMKID_FLAG, \"Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key ID Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1490:  { EID_SIAPP_MU_PMK, \"MU Secure Inter-Access Point Protocol(SIAPP) Pairwise Master Key\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1491:  { EID_SIAPP_AP_NAME, \"SIAPP AP Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1492:  { EID_SIAPP_RADIO_CONFIG_BLOCK, \"SIAPP Radio Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_SIAPP_RADIO_CONFIG_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1493:  { EID_SIAPP_CLUSTER_ACS_REQ, \"SIAPP Cluster ACS Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1494:  { EID_SIAPP_SIAPP_MU_STATS_BLOCK, \"SIAPP MU Statistics Block\", TLV_TYPE_BLOCK_TLV, TAB_SIAPP_MU_STATS_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1495:  { EID_SIAPP_PACKET_RETRIES, \"SIAPP Packet Retries\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1496:  { EID_SIAPP_ASSOC_IN_WLAN, \"SIAPP MU Association With In Same WLAN\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1497:  { EID_SIAPP_ASSOC_IN_CLUSTER, \"SIAPP MU Association With In Same Cluster\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1498:  { EID_SIAPP_REASSOC_IN_CLUSTER, \"SIAPP MU Ressociation With In Same Cluster\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1499:  { EID_SIAPP_THIN_BLOCK, \"SIAPP Thin Access Points Block\", TLV_TYPE_BLOCK_TLV, TAB_SIAPP_THIN_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1500:  { EID_SIAPP_NEWAP_BSSID, \"SIAPP New Access Points BSSID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1501:  { EID_SIAPP_OLDAP_BSSID, \"SIAPP Old Access Points BSSID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1502:  { EID_SIAPP_RAD_CACS_REQ, \"SIAPP Radio CACS Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1503:  { EID_SIAPP_RADIOBLOCK, \"SIAPP Radio Block\", TLV_TYPE_BLOCK_TLV, TAB_SIAPP_MU_STATS_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1504:  { EID_SIAPP_CLIENT_COUNT, \"SIAPP Client Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1505:  { EID_SIAPP_BLOCK, \"SIAPP Block\", TLV_TYPE_BLOCK_TLV, TAB_SIAPP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1506:  { EID_SIAPP_MU_TransmittedFrameCount, \"SIAPP MU Transmitted Frame Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1507:  { EID_SIAPP_MU_ReceivedFrameCount, \"SIAPP MU Received Frame Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1508:  { EID_SIAPP_MU_TransmittedBytes, \"SIAPP MU Transmitted Bytes\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1509:  { EID_SIAPP_MU_ReceivedBytes, \"SIAPP MU Received Bytes\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1510:  { EID_SIAPP_MU_UL_DroppedRateControlPackets, \"SIAPP MU Up Link Dropped Rate Control Packets\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1511:  { EID_SIAPP_MU_DL_DroppedRateControlPackets, \"SIAPP MU Down Link Dropped Rate Control Packets\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1512:  { EID_SIAPP_MU_DL_DroppedBufferFullPackets, \"SIAPP MU Down Link Dropped Buffer Full Packets\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1513:  { EID_SIAPP_MU_DL_LostRetriesPackets, \"SIAPP MU Down Link Lost Retries Packets\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1514:  { EID_SIAPP_MU_UL_DroppedRateControlBytes, \"SIAPP MU Up Link Dropped Rate Control Bytes\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1515:  { EID_SIAPP_MU_DL_DroppedRateControlBytes, \"SIAPP MU Down Link Dropped Rate Control Bytes\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1516:  { EID_SIAPP_MU_DL_DroppedBufferFullBytes, \"SIAPP MU Down Link Dropped Buffer Full Bytes\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1517:  { EID_SIAPP_MU_DL_LostRetriesBytes, \"SIAPP MU Down Link Lost Retries Bytes\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1518:  { EID_SIAPP_BP_BSSID, \"SIAPP  Access Points BSSID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1519:  { EID_SIAPP_RADIO_ID, \"SIAPP Radio ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1520:  { EID_SIAPP_MACADDR, \"SIAPP Mac Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1521:  { EID_SIAPP_PREAUTH_REQ, \"SIAPP Preauthentication Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1522:  { EID_SIAPP_USER_IDENTITY, \"SIAPP Client ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1523:  { EID_SIAPP_LOADBAL_BLOCK, \"SIAPP Load Balance Block\", TLV_TYPE_BLOCK_TLV, CONFIG_ERROR_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1524:  { EID_SIAPP_LOADBAL_PKT_TYPE, \"SIAPP Load Balance PKT Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1525:  { EID_SIAPP_LOADBAL_LOADGROUP_ID, \"SIAPP Load Balance Load Group ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1526:  { EID_SIAPP_LOADBAL_LOAD_VALUE, \"SIAPP Load Balance Load Value\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1527:  { EID_SIAPP_AC_MGMT_MAC, \"SIAPP Controller Management Mac Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1528:  { EID_SIAPP_FILTER_COS, \"SIAPP Filter Rule COS\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1529:  { EID_COS, \"Classes of Service(COS)\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1530:  { EID_RATE_LIMIT_RESOURCE_TBL, \"Bandwidth Control Rate Limit Resource Table\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1531:  { EID_UCAST_FILTER_DISABLE, \"Unicast Filter Disable Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1532:  { EID_MU_INFORM_REASON, \"MU Information\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1533:  { EID_MU_FILTER_POLICY_NAME, \"MU Filter Rule Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1534:  { EID_MU_TOPOLOGY_POLICY_NAME, \"MU Topology Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1535:  { EID_MU_COS_POLICY_NAME, \"MU COS Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1536:  { EID_MU_FILTER_KEY, \"MU Filter Rule ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1537:  { EID_MU_TOPOLOGY_KEY, \"MU Topology ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1538:  { EID_MU_COS_KEY, \"MU COS ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1539:  { EID_MU_SESSION_TIMEOUT, \"MU Session Life Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1540:  { EID_MU_ACCOUNTING_CLASS, \"MU Accounting Class\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1541:  { EID_MU_LOGIN_LAT_PORT, \"MU Login authentication state(0 = Non-auth, 1 = Auth)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1542:  { EID_MU_IDLE_TIMEOUT, \"MU Session Idle Timeout\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1543:  { EID_MU_ACCT_INTERIM_INTERVAL, \"Client Acct-Interim-Interval(RADIUS)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1544:  { EID_MU_IP_ADDR, \"MU IP Addresss\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1545:  { EID_MU_TERMINATE_ACTION, \"MU Terminate Action\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1546:  { EID_SITE_NAME, \"Site Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1547:  { EID_PEER_SITE_IP, \"Peer Site IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1548:  { EID_INTERFERENCE_EVENTS_ENABLE, \"Interference Events Enable Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1549:  { EID_EVENT_TYPE, \"Event Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1550:  { EID_EVENT_CHANNEL, \" Event Channel\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1551:  { EID_EVENT_VALUE, \"Event Value\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1552:  { EID_SSS_MU_BLOCK, \"Site Section MU Block\", TLV_TYPE_BLOCK_TLV, TAB_SSS_MU_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1553:  { EID_SSS_MU_ASSOC_TIME, \"Site Section MU Association Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1554:  { EID_SSS_TS64_MU_UPDATE, \"Site Section MU Update Time Stamp\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1555:  { EID_SSS_TS64_AP_CURRENT, \"Site Section AccessPoint Current Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1556:  { EID_SSS_MU_AUTH_STATE, \"Site Section MU Authentication State\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1557:  { EID_SSS_AP_HOMEHASH, \"Site Section AccessPoint Home Hashed Value\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1558:  { EID_TIME_FIRST_DETECTED, \"First Detected Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1559:  { EID_TIME_LAST_REPORTED, \"Last Reported Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1560:  { EID_EVENT_ARRAY, \"Array Of Events\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1561:  { EID_SSS_DEFAULT_SESSION_TIMEOUT, \"Site Section Default Timeout Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1562:  { EID_SSS_SSID, \"Site Section SSID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1563:  { EID_SSS_PRIVACY_TYPE, \"Site Section Privacy Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1564:  { EID_POLICY_ZONE_NAME, \"Policy Zone Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1565:  { EID_RU_AC_EVENT_COMPONENT_ID, \"Event Component ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1566:  { EID_MU_AUTH_STATE, \"MU Authentication State\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1567:  { EID_MU_USER_NAME, \"MU User Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1568:  { EID_BULK_TYPE, \"Bulk Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1569:  { EID_SENT_TIME, \"Sent Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1570:  { EID_INFORM_MU_PMK, \"Pairwise Master Key Informed From AP\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1571:  { EID_COLLECTOR_IP_ADDR, \"Collector IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0 },",
          "1572:  { EID_ARP_PROXY, \"Enable/Disable Proxying of ARP Per Topology\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1573:  { EID_MCAST_FILTER_RULES, \"Multicast Filter Rules Per Topology\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1574:  { EID_AP_PARAMS, \"AP Parameters\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1575:  { EID_ASSOC_SSID_ARRAY, \"Array of Associated SSID\", TLV_TYPE_BLOCK_TLV, TAB_ASSOC_SSID_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1576:  { EID_ASSOC_SSID_BLOCK, \"Block of Associated SSID\", TLV_TYPE_BLOCK_TLV, TAB_ASSOC_SSID_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1577:  { EID_AP_LIST_BLOCK, \"Bloc of AP List\", TLV_TYPE_BLOCK_TLV, TAB_AP_LIST_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1578:  { EID_AP_LIST_ARRAY, \" Array of AP List\", TLV_TYPE_BLOCK_TLV, TAB_AP_LIST_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1579:  { EID_MAC_ADDR, \"MAC Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1580:  { EID_SCAN_PROFILE_ID, \"Scan Profile ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1581:  { EID_ACTION_REQ, \"Action Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1582:  { EID_CHANNEL_LIST, \"Channel List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1583:  { EID_COUNTERMEASURES_MAX_CH, \"CounterMeasures Max Channel\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1584:  { EID_COUNTERMEASURES_SET, \"Enable/disable CounterMeasures\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1585:  { EID_SCAN_PROFILE_BLOCK, \"Scan Profile Block\", TLV_TYPE_BLOCK_TLV, TAB_SCAN_PROFILE_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1586:  { EID_SEQ_NUM, \"Sequence Number\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1587:  { EID_THREAT_DEF_ARRAY, \"Array Of Threat Definition\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_DEF_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1588:  { EID_THREAT_DEF_BLOCK, \"Block Of Threat Definition\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_DEF_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1589:  { EID_THREAT_TYPE, \"Threat Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1590:  { EID_THREAT_ID, \"Threat ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1591:  { EID_THREAT_STATS_F, \"Threat State\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1592:  { EID_THREAT_FR_SFR, \"Threat FR SFR\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1593:  { EID_THREAT_PATTERN_ARRAY, \"Array Of Threat Pattern\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_PATTERN_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1594:  { EID_THREAT_PATTERN_BLOCK, \"Block Of Threat Pattern\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_PATTERN_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1595:  { EID_THREAT_PATTERN, \"Threat Pattern\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1596:  { EID_THREAT_ALERT_TH_DUR, \"Threat Alert\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1597:  { EID_THREAT_CLEAR_TH_DUR, \"Threat Clear\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1598:  { EID_THREAT_PRIORITY, \"Threat Priority\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1599:  { EID_THREAT_MITIGATION_LIST, \"Threat Mitigation List\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1600:  { EID_SSS_MU_IS_PORT_CLOSED, \"Enable/Disable Site Section MU Port\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1601:  { EID_FULL_UPDATE, \"Full Update\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1602:  { EID_REASON, \"Reason\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1603:  { EID_SURVEILLANCE_DATA_ARRAY, \"Array of Surveillance Data\", TLV_TYPE_BLOCK_TLV, TAB_SURVEILLANCE_DATA_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1604:  { EID_SURVEILLANCE_DATA_BLOCK, \"Block of Surveillance Data\", TLV_TYPE_BLOCK_TLV, TAB_SURVEILLANCE_DATA_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1605:  { EID_SCAN_BSSID, \"Scan BSSID\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1606:  { EID_PARAMS, \"Parameters\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1607:  { EID_SCAN_RSS_RSSI, \"Scan RSS and RSSI\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1608:  { EID_SCAN_SSID, \"Scan SSID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1609:  { EID_SCAN_CAP, \"Scan Capability\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1610:  { EID_THREAT_CLASSIFICATION, \"Threat Classification\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1611:  { EID_THREAT_DATA_ARRAY, \"Array Of Threat Data\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_DATA_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1612:  { EID_THREAT_DATA_BLOCK, \"Block Of Threat Data\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_DATA_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1613:  { EID_STATE, \"State\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1614:  { EID_DROP_FR_CNT, \"Drop FR Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1615:  { EID_STOP_ROAM_CNT, \"Stop ROAM Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1616:  { EID_SPOOF_CNT, \"Spoof Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1617:  { EID_THREAT_CLASSIFY_ARRAY, \"Array Of Classify Threat\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_CLASSIFY_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1618:  { EID_THREAT_CLASSIFY_BLOCK, \"Block Of Classify Threat\", TLV_TYPE_BLOCK_TLV, TAB_THREAT_CLASSIFY_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1619:  { EID_THREAT_NAME, \"Threat Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1620:  { EID_LOCATION, \"Location\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1621:  { EID_ENCRYPTION_TYPE, \"Encryption Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1622:  { EID_MU_EVENT_ARRAY, \"Array Of MU Events\", TLV_TYPE_BLOCK_TLV, TAB_MU_EVENT_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1623:  { EID_MU_EVENT_BLOCK, \"Block Of MU Events\", TLV_TYPE_BLOCK_TLV, TAB_MU_EVENT_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1624:  { EID_COMPONENT_ID, \"Component ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1625:  { EID_MU_EVENT_STRING, \"MU Event String\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1626:  { EID_BYPASS_BMCAST, \"Bypass Broadcast and Multicast\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1627:  { EID_GETTIMEOFDAY, \"Get Time of Day\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1628:  { EID_COUNTRY_ID, \"Country ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1629:  { EID_COUNTRY_ARRAY, \"Array of Country\", TLV_TYPE_BLOCK_TLV, TAB_COUNTRY_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1630:  { EID_COUNTRY_BLOCK, \"Country Block\", TLV_TYPE_BLOCK_TLV, TAB_COUNTRY_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1631:  { EID_MU_EVENT_TYPE, \"MU Event Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1632:  { EID_LOCATOR_FLOOR_ID, \"Floor ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1633:  { EID_LOCATOR_LOC_TYPE, \"Location Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1634:  { EID_LOCATOR_LOC_BLOCK, \"Block of Location Data\", TLV_TYPE_BLOCK_TLV, TAB_LOCATOR_LOC_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1635:  { EID_LOCATOR_LOC_ARRAY, \"Array of Location Data\", TLV_TYPE_BLOCK_TLV, TAB_LOCATOR_LOC_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1636:  { EID_LOCATOR_LOC_POINT, \"Location Point\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1637:  { EID_MU_EVENT_DETAILS, \"MU Event Details\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1638:  { EID_MU_EVENT_FROM_AP, \"MU Event From AP\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1639:  { EID_MU_EVENT_LOC_BLOCK, \"Block of MU Location Event\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1640:  { EID_LOCATOR_LOC_AP_DISTANCE, \"AP Location Distance\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1641:  { EID_LOCATOR_LOC_PRECISION, \"Location Precision\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1642:  { EID_RSS_DATA_ARRAY, \"Array of RSS Data\", TLV_TYPE_BLOCK_TLV, TAB_RSS_DATA_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1643:  { EID_RSS_DATA_BLOCK, \"Block  of RSS Data\", TLV_TYPE_BLOCK_TLV, TAB_RSS_DATA_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1644:  { EID_LOCATOR_MU_ACTION, \"Location MU Action\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1645:  { EID_EFFECTIVE_EGRESS_VLAN, \"Effective Egress Vlan\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1646:  { EID_REBOOT_ACK, \"Reboot Acknowledgement\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1647:  { EID_MU_BSSID, \"MU BSSID\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1648:  { EID_AUTH_FLAG, \"Authentication Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1649:  { EID_ROAMED_FLAG, \"ROAMED Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1650:  { EID_MU_RSS, \"MU RSS\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1651:  { EID_FILTER_RULES_VER, \"Filter Rule Struct Version\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1652:  { EID_FILTER_TYPE, \"Filter Rule Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1653:  { EID_MCAST_FILTER_BLOCK, \"Multicast Filter Rule Block\", TLV_TYPE_BLOCK_TLV, TAB_MCAST_FILTER_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1654:  { EID_MCAST_FILTER_BLOCK_ENTRY, \"Multicast Filter Rule Block Entry\", TLV_TYPE_BLOCK_TLV, TAB_MCAST_FILTER_BLOCK_ENTRY, 0, 0, 0, 0, 0, 0, 0},",
          "1655:  { EID_DEFAULT_ACTION_TYPE, \"Default Action Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1656:  { EID_DEFAULT_CONTAIN_TO_VLAN, \"Default Contain to Vlan Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1657:  { EID_DEFAULT_BRIDGE_MODE, \"Default Bridge Mode Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1658:  { EID_INVALID_POLICY, \"Invalid Policy Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1659:  { EID_LOCATOR_FLOOR_NAME, \"Floor Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1660:  { EID_AP_FLAGS, \"AP Flags\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1661:  { EID_AP_PVID, \"AP PVID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1662:  { EID_AP_REDIRECT, \"AP Redirect Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1663:  { EID_MU_CVLAN_BAP, \"AP Contain to Vlan Has Bridge At AP Topology Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1664:  { EID_MU_SESSION_ARRAY, \"Array Of MU Session\", TLV_TYPE_BLOCK_TLV, TAB_MU_SESSION_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1665:  { EID_MU_SESSION_BLOCK, \"MU Session Block\", TLV_TYPE_BLOCK_TLV, TAB_MU_SESSION_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1666:  { EID_MU_SESSION_ID, \"MU Session ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1667:  { EID_MU_RFS_NAME, \"MU RFS Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1668:  { EID_MU_FLAGS, \"MU Flags\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1669:  { EID_MU_ASSOC_TIME, \"MU Associated Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1670:  { EID_MU_ACTIVE_TIME, \"MU Actived Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1671:  { EID_REPORT_REQ, \"Report Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1672:  { EID_MU_URL, \"MU Capive Portal Url\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1673:  { EID_MU_SESSION_LIFETIME, \"MU Session Life Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1674:  { EID_MU_REAUTH_TIMER, \"MU Re-Authentication Timer\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1675:  { EID_MU_ACCT_SESSION_ID_STRING, \"MU Acct Session ID String\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1676:  { EID_MU_ACCT_POLICY_NAME, \"MU Acct Policy Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1677:  { EID_MU_ACCT_START_TIME, \"MU Acct Start Time\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1678:  { EID_MU_ACCT_CLASS, \"MU Acct Class\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1679:  { EID_MU_LOGIN_LAT_GROUP, \"MU Login Group\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1680:  { EID_MU_TUNNEL_PRIVATE_GROUP_ID_STRING, \"MU Tunnel Private Group ID String\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1681:  { EID_MU_USER_ID_STRING, \"MU User ID String\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1682:  { EID_MU_DEFENDED_STATE, \"MU Defended State\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1683:  { EID_MU_MOD_MASK, \"MU Modulation Maske\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1684:  { EID_LOCATOR_TRACKED, \"Locator Tracked\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1685:  { EID_PORT, \"Port\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1686:  { EID_RETRIES_COUNT, \"Retries Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1687:  { EID_MODULATION_TYPE, \"Modulation Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1688:  { EID_DETECTED_ROGUE_ARRAY, \"Array Of Detected Rogue\", TLV_TYPE_BLOCK_TLV, TAB_DETECTED_ROGUE_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "1689:  { EID_DETECTED_ROGUE_BLOCK, \"Detected Rogue Block\", TLV_TYPE_BLOCK_TLV, TAB_DETECTED_ROGUE_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1690:  { EID_ROGUE_DETECTION, \"Rogue Detection\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1691:  { EID_MAC_ADDR_TX, \"Tx Mac Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1692:  { EID_MAC_ADDR_RX, \"Rx Mac Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1693:  { EID_IP_ADDR_TX, \"Tx IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1694:  { EID_IP_ADDR_RX, \"Rx IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1695:  { EID_TTL, \"TTL\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1696:  { EID_GW_IP_ADDR, \"Gateway IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1697:  { EID_LOCATOR_STATE_DATA, \"Location State Data\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1698:  { EID_LOCATOR_POINT_SET, \"Location Point Set\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1699:  { EID_FILTER_RULE_FIXED_APP_ID, \"Filter Rule Fixed Application ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1700:  { EID_FILTER_RULES_EXT_BLOCK, \"Filter Rule Extented Block\", TLV_TYPE_BLOCK_TLV, TAB_FILTER_RULES_EXT_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1701:  { EID_MU_AREA_BLOCK, \"MU Area Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1702:  { EID_MU_LOCATION, \"MU Location\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1703:  { EID_MU_LOCATION_TS, \"MU Location Time Stamp\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1704:  { EID_DNS_IP_ADDR, \"DNS IP Address\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1705:  { EID_IN_SERVICE_AP_LIST, \"In-Service AP List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1706:  { EID_OUT_SERVICE_AP_LIST, \"Out of Service AP List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1707:  { EID_LAST_RD_AP, \"Last RD AP\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1708:  { EID_ROGUE_INFO, \"Rogue Info\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1709:  { EID_MU_IS_FT, \"Enable/Disable MU Fast Transition\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1710:  { EID_MU_PMK_R1, \"MU Fast Transition Roaming\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1711:  { EID_SIAPP_R0KHID, \"SIAPP R0KH ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1712:  { EID_SIAPP_R1KHID, \"SIAPP R1KH ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1713:  { EID_SIAPP_FT_NONCE, \"SIAPP Fast Transition Nonce\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1714:  { EID_SIAPP_FT_PMKR0NAME, \"SIAPP Fast Transition PMKR0 Name\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1715:  { EID_SIAPP_FT_R1KHID, \"SIAPP Fast Transition R1KH ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1716:  { EID_SIAPP_FT_S1KHID, \"SIAPP Fast Transition S1KH ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1717:  { EID_SIAPP_FT_PMKR1, \"SIAPP Fast Transition PMKR1\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1718:  { EID_SIAPP_FT_PMKR1NAME, \"SIAPP Fast Transition PMKR1 Name\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1719:  { EID_SIAPP_FT_PAIRWISE, \"SIAPP Fast Transition Pairwise\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1720:  { EID_SIAPP_FT_LIFETIME, \"SIAPP Fast Transition Life Time\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1721:  { EID_MU_POWER_CAP, \"MU Power Capable\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1722:  { EID_AREA_NAME, \"Area Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1723:  { EID_PERIODIC_NEIGHBOUR_REPORT, \"Periodic Neighbour Report\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1724:  { EID_TIMESTAMP, \"Time Stamp\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1725:  { EID_NEIGHBOUR_ENTRY, \"Neighbour Entry\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1726:  { EID_MU_REQ, \"MU Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1727:  { EID_RU_REQ, \"RU Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1728:  { EID_NEIGHBOUR_REQ, \"Neighbour Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1729:  { EID_SSS_FT_ASSOC, \"Site Section Fast Transition Association\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1730:  { EID_DEFAULT_MIRRORN, \"Enables the First N Packets of a Flow to The Controller\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1731:  { EID_FILTER_RULE_EXT_ACT_FLAGS, \"Extension to Filter Rule Definition. Specifies Additional Actions Per Filter Rule\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1732:  { EID_TOPO_GROUP_MAPPING, \"Topology Group Mapping\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1733:  { EID_MU_PMK_R0NAME, \"MU Pairwise Master Key R0 Name\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1734:  { EID_CUI, \"CUI\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1735:  { EID_SSS_CAPINFO, \"Site Section CAP Info\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1736:  { EID_SSS_CAPPOWER, \"Site Section CAP Power\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1737:  { EID_WFA_VSA, \"WFA Vendor Specific Hotspot\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1738:  { EID_WFA_HS20_REMED_METHOD, \"Online Signup Method for HS2.0 Remediation\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1739:  { EID_WFA_HS20_URL, \"Remediation Server Url for Online Signup In HS2.0\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1740:  { EID_WFA_HS20_DEAUTH_CODE, \"WFA HS20 De-Authentication Code\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1741:  { EID_WFA_HS20_REAUTH_DELAY, \"WFA HS20 Re-Authentication Delay\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1742:  { EID_WFA_HS20_SWT, \"WFA HS20 SWT\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1743:  { EID_POWER_STATUS, \"Power Status\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1744:  { EID_IPV6_ADDR, \"IPV6 Address\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1745:  { EID_FILTER_RULES_APP_SIG_GROUP_ID, \"Filter Rule Application Signature Group ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1746:  { EID_FILTER_RULES_APP_SIG_DISP_ID, \"Filter Rule Application Signature Display ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1747:  { EID_MU_DEV_IDENTITY, \"MU Device ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1748:  { EID_APPL_STATS_REQ, \"Application Rule Stats Request\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1749:  { EID_MU_APPL_STATS_BLOCK, \"MU Application Rule Stats Block\", TLV_TYPE_BLOCK_TLV, TAB_MU_APPL_STATS_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1750:  { EID_TOPOLOGY_ARRAY, \"Array of Topologies\", TLV_TYPE_BLOCK_TLV, TAB_TOPOLOGY_ARRAY_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1751:  { EID_TOPOLOGY_STRUCT, \"Topology Struct\", TLV_TYPE_BLOCK_TLV, TAB_TOPOLOGY_STRUCT_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1752:  { EID_FILTER_CONFIG_STRUCT, \"Filter Rule Configuration Struct\", TLV_TYPE_BLOCK_TLV, TAB_FILTER_CONFIG_STRUCT_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1753:  { EID_DHCP_HOST_NAME, \"DHCP Host Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1754:  { EID_NEIGHBOUR_ENTRY_2, \"Neighbour Entry 2\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1755:  { EID_CHANNEL_ENTRY, \"Channel Entry\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1756:  { EID_MU_ECP_PW, \"MU External Captive Portal Password\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1757:  { EID_MU_ECP_TOKEN, \"MU External Captive Portal Token\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1758:  { EID_STATIC_VSA_IPADDR, \"AP Endpoint on Overlay Network IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1759:  { EID_STATIC_VSA_NETMASK, \"AP Endpoint on Overlay Network IP Mask\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1760:  { EID_PKT_CAPTURE_STATUS, \"Packet Capture Status\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1761:  { EID_PKT_CAPTURE_FILTERS, \"Packet Capture Filters\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1762:  { EID_PKT_F_WIRELESS, \"Enable Packet Capture On Wireless\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1763:  { EID_PKT_F_WIREDCLIENT, \"Enable Packet Capture on Wired Client\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1764:  { EID_PKT_F_DIRECTION, \"Packet Capture Direction\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1765:  { EID_PKT_F_RADIO, \"Packet Capture on Radio\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1766:  { EID_PKT_F_FLAGS, \"Packet Capture Flag\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1767:  { EID_PKT_F_IP_ARRAY, \"Array of Packet Capture IP Addresses\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1768:  { EID_PKT_F_MAC, \"Array of Packet Capture Mac Addresses\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1769:  { EID_PKT_F_PROTOCOL, \"Packet Capture On Protocol\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1770:  { EID_PKT_F_PORT, \"Packet Capture On Port\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1771:  { EID_VSA_SSID_ID, \"VSA SSID ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1772:  { EID_MU_AUTH_TYPE, \"MU Authentication Type\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1773:  { EID_PKT_F_MAX_PKT_COUNT, \"Max Captured Packet Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1774:  { EID_PKT_F_FLAG_2, \"Packet Capture Flag 2\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1775:  { EID_IMAGE_PORT, \"Image Port\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1776:  { EID_FILTER_ROLE_ID, \" Filter Rule ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1777:  { EID_FILTER_ROLE_TIMESTAMP, \" Time Stamp of When Role Was Last Changed\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1778:  { EID_MAX, \"EID_MAX\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0}",
          "1779: };",
          "1785: typedef enum",
          "1787:  EID_CONFIG_UNUSED_0 = 0,",
          "1788:  EID_RADIO_CONFIG_BLOCK,",
          "1789:  EID_VNS_CONFIG_BLOCK,",
          "1790:  EID_AP_ROLE,",
          "1791:  EID_LOC_ACTION_REQ,",
          "1792:  EID_TRACE_STATUS_DEBUG,",
          "1793:  EID_TRACE_STATUS_CONFIG,",
          "1794:  EID_MIC_ERR,",
          "1795:  EID_USE_BCAST_FOR_DISASSC,",
          "1796:  EID_BANDWIDTH_VOICE_ASSC,",
          "1797:  EID_BANDWIDTH_VOICE_REASSC,",
          "1798:  EID_BANDWIDTH_VIDEO_ASSC,",
          "1799:  EID_BANDWIDTH_VIDEO_REASSC,",
          "1800:  EID_BANDWIDTH_VIDEO_RESERVE,",
          "1801:  EID_BANDWIDTH_ADM_CTRL_RESERVE,",
          "1802:  EID_VLAN_TAG,",
          "1803:  EID_COUNTRY_CODE,",
          "1804:  EID_POLL_DURATION,",
          "1805:  EID_POLL_INTERVAL,",
          "1806:  EID_LOC_AUTO_COLLECT_ENABLE,",
          "1807:  EID_POLL_MAINTAIN_CLIENT_SESSION,",
          "1808:  EID_TELNET_ENABLE,",
          "1809:  EID_TELNET_PASSWORD,",
          "1810:  EID_TELNET_PASSWORD_ENTRY_MODE,",
          "1811:  EID_OUTDOOR_ENABLE,",
          "1812:  EID_ON_DEMAND_ARRAY,",
          "1813:  EID_LAG_ENABLED,",
          "1814:  EID_APP_POLICY_FIXED_BLOCK,",
          "1815:  EID_SLP_RETRY_COUNT,",
          "1816:  EID_SLP_RETRY_DELAY,",
          "1817:  EID_DNS_RETRY_COUNT,",
          "1818:  EID_DNS_RETRY_DELAY,",
          "1819:  EID_MCAST_SLP_RETRY_COUNT,",
          "1820:  EID_MCAST_SLP_RETRY_DELAY,",
          "1821:  EID_DISC_RETRY_COUNT,",
          "1822:  EID_DISC_RETRY_DELAY,",
          "1823:  EID_LOGGING_ALARM_SEV,",
          "1824:  EID_BLACKLIST_ADD,",
          "1825:  EID_FAILOVER_AC_IP_ADDR,",
          "1826:  EID_STATIC_AC_IP_ADDR,",
          "1827:  EID_DHCP_ASSIGNMENT,",
          "1828:  EID_STATIC_AP_IP_ADDR,",
          "1829:  EID_STATIC_AP_IP_NETMASK,",
          "1830:  EID_STATIC_AP_DEFAULT_GW,",
          "1831:  EID_BLACKLIST_DEL,",
          "1832:  EID_MACADDR_REQ,",
          "1833:  EID_AVAILABILITY_MODE,",
          "1834:  EID_AP_PERSISTENCE,",
          "1835:  EID_FOREIGN_AP,",
          "1836:  EID_SUPP1X_CREDENTIAL_REMOVE,",
          "1837:  EID_SUPP1X_CERT_TFTP_IP,",
          "1838:  EID_SUPP1X_CERT_TFTP_PATH,",
          "1839:  EID_SUPP1X_PRIVATE,",
          "1840:  EID_SUPP1X_DOMAIN,",
          "1841:  EID_SUPP1X_USERID,",
          "1842:  EID_SUPP1X_PASSWORD,",
          "1843:  EID_SUPP1X_CREDENT,",
          "1844:  EID_SUPP1X_SERIAL,",
          "1845:  EID_SUPP1X_START_DATE,",
          "1846:  EID_SUPP1X_END_DATE,",
          "1847:  EID_SUPP1X_ISSUED_BY,",
          "1848:  EID_SUPP1X_ISSUED_TO,",
          "1849:  EID_SUPP1X_SUBJALTNAME,",
          "1850:  EID_NOT_USED_CONFIG_TLV_63,",
          "1851:  EID_FAILOVER_AC_HOME_IP_ADDR,",
          "1852:  EID_FAILOVER_AC_FOREIGN_IP_ADDR,",
          "1853:  EID_AP_HOSTNAME,",
          "1854:  EID_LLDP_ENABLED,",
          "1855:  EID_LLDP_TTL,",
          "1856:  EID_LLDP_ANNOUNCEMENT_INT,",
          "1857:  EID_LLDP_ANNOUNCEMENT_DELAY,",
          "1858:  EID_VOWIFI_EXPIRATION_TIME,",
          "1859:  EID_MOBILITY_SHARED_KEY,",
          "1860:  EID_CHANNEL_REPORT_2_4G,",
          "1861:  EID_CHANNEL_REPORT_5G,",
          "1862:  EID_RATE_CONTROL_BLOCK,",
          "1863:  EID_AP_DNS,",
          "1864:  EID_STATIC_MTU,",
          "1865:  EID_MACFILTER_MODE,",
          "1866:  EID_SITE_CONFIG_BLOCK,",
          "1867:  EID_TOPOLOGY_BLOCK,",
          "1868:  EID_AP_NAME,",
          "1869:  EID_ANTENNA_MODELS,",
          "1870:  EID_AIRTIME_FAIRNESS_LEVEL,",
          "1871:  EID_VLAN_DEFAULT,",
          "1872:  EID_CLUSTER_PASSWORD,",
          "1873:  EID_SIAPP_PRIVACY,",
          "1874:  EID_LED_STATUS,",
          "1875:  EID_LBS_SRC_IP,",
          "1876:  EID_LBS_SRC_PORT,",
          "1877:  EID_LBS_DST_IP,",
          "1878:  EID_LBS_DST_PORT,",
          "1879:  EID_LBS_MCAST,",
          "1880:  EID_LBS_TAG_MODE,",
          "1881:  EID_ETH_PORT_MODE,",
          "1882:  EID_INTER_AP_ROAM,",
          "1883:  EID_MGMT_MAC,",
          "1884:  EID_REAL_CAPTURE_TIMEOUT,",
          "1885:  EID_POLICY_BLOCK,",
          "1886:  EID_FILTER_CONFIG_BLOCK,",
          "1887:  EID_COS_CONFIG_BLOCK,",
          "1888:  EID_LOCATION_BASED_LOOKUP_BLOCK,",
          "1889:  EID_RADIUS_SERVER_BLOCK,",
          "1890:  EID_DISC_RETRY_DELAY_WOUI_ADD,",
          "1891:  EID_DISC_RETRY_DELAY_WOUI_DEL,",
          "1892:  EID_SNIFFER_RADIO_BITMAP,",
          "1893:  EID_MCAST_ASSEMB,",
          "1894:  EID_JUMBO_FRAME,",
          "1895:  EID_DYN_ON_DEMAND_ARRAY,",
          "1896:  EID_BANDWIDTH_BE_ASSC,",
          "1897:  EID_BANDWIDTH_BE_REASSC,",
          "1898:  EID_BANDWIDTH_BK_ASSC,",
          "1899:  EID_BANDWIDTH_BK_REASSC,",
          "1900:  EID_NETFLOW_EXPORT_INTERVAL,",
          "1901:  EID_MIRRORN_PACKETS,",
          "1902:  EID_ICON_NAME,",
          "1903:  EID_ICON_FILE,",
          "1904:  EID_ICON_BLOCK,",
          "1905:  EID_BOARD_STATUS,",
          "1906:  EID_CP_MU_AUTO_LOGIN,",
          "1907:  EID_EXTAPP_CONF_BLOCK,",
          "1908:  EID_RB_REDIRECT,",
          "1909:  EID_RB_REDIRECT_PORTS,",
          "1910:  EID_S_TOPOLOGY_ARRAY,",
          "1911:  EID_S_TOPOLOGY_STRUCT,",
          "1912:  EID_S_TOPOLOGY_KEY,",
          "1913:  EID_S_TOPOLOGY_VLAN_TAG,",
          "1914:  EID_S_TOPOLOGY_ARP_PROXY,",
          "1915:  EID_S_TOPO_MCAST_FILTER_CONFIG_BLOCK,",
          "1916:  EID_MCAST_PRIORITIZED_VOICE,",
          "1917:  EID_IOT_CONTROL,",
          "1918:  EID_IOT_APPLICATION_ID,",
          "1919:  EID_AP_LOCATION,",
          "1920:  EID_IOT_ADMIN,",
          "1921:  EID_IOT_IMAGE,",
          "1922:  EID_IOT_BLE_ADVERTISE_INTERVAL,",
          "1923:  EID_IOT_BLE_ADVERTISE_POWER,",
          "1924:  EID_IOT_IBEACON_MAJOR,",
          "1925:  EID_IOT_IBEACON_MINOR,",
          "1926:  EID_IOT_IBEACON_UUID,",
          "1927:  EID_STATIC_ADSP_IP_ADDR,",
          "1928:  EID_OBSS_CHAN_ADJ_ACTIVE,",
          "1929:  EID_IOT_BLE_SCAN_SRC_IP,",
          "1930:  EID_IOT_BLE_SCAN_SRC_PORT,",
          "1931:  EID_IOT_BLE_SCAN_DST_IP,",
          "1932:  EID_IOT_BLE_SCAN_DST_PORT,",
          "1933:  EID_IOT_BLE_SCAN_INTERVAL,",
          "1934:  EID_IOT_BLE_SCAN_WINDOW,",
          "1935:  EID_IOT_BLE_SCAN_MIN_RSSI,",
          "1936:  EID_LSENSE_SERVER,",
          "1937:  EID_LSENSE_MIN_RSSI,",
          "1938:  EID_LSENSE_REP_FREQ,",
          "1939:  EID_DPI_SIG_HASH,",
          "1940:  EID_ANT_MODELS_IOT,",
          "1941:  EID_FABRICATTACH_ARRAY,",
          "1942:  EID_IOT_THREAD_CHANNEL,",
          "1943:  EID_IOT_THREAD_FACTORY_RESET,",
          "1944:  EID_IOT_THREAD_SHORT_PAN_ID,",
          "1945:  EID_IOT_THREAD_SHORT_EUI,",
          "1946:  EID_IOT_THREAD_PSKD,",
          "1947:  EID_IOT_THREAD_MASTER_KEY,",
          "1948:  EID_IOT_THREAD_NWK_NAME,",
          "1949:  EID_IOT_THREAD_COMM_CREDENTIAL,",
          "1950:  EID_IOT_THREAD_LONG_EUI,",
          "1951:  EID_IOT_THREAD_EXTENDED_PAN_ID,",
          "1952:  EID_AP_VSA_SSID_ID,",
          "1953:  EID_AP_STATIC_VSA_IPADDR,",
          "1954:  EID_AP_STATIC_VSA_NETMASK,",
          "1955:  EID_IOT_BLE_URL,",
          "1956:  EID_AP_PERSONALITY,",
          "1957:  EID_ADSP_RADIO_SHARE,",
          "1958:  EID_LOCATION_TENANT_ID,",
          "1959:  EID_IOT_BLE_BEACON_MEASURED_RSSI,",
          "1960:  EID_MU_NUM_RADAR_BACK",
          "1961: } wassp_subtlv_config_type_t;",
          "1964:   get define from packet-wassp.h 's   wassp_subtlv_config_type_t  struct",
          "1969: const TLV_PARSER_ENTRY tlvGlobalConfigTable[]  =",
          "1970: {",
          "1971:  { EID_CONFIG_UNUSED_0, \"Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1972:  { EID_RADIO_CONFIG_BLOCK, \"Radio Configuration Block\", TLV_TYPE_BLOCK_TLV, RADIO_CONFIG_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1973:  { EID_VNS_CONFIG_BLOCK, \"VNS Configuration Block\", TLV_TYPE_BLOCK_TLV, VNS_CONFIG_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1974:  { EID_AP_ROLE, \"AccessPoint Role(0 - Traffic Forwarder, 1 - Dedicated Scanner, 2 - ADSP Sensor)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1975:  { EID_LOC_ACTION_REQ, \"Enable RSS Collection for Positioning Engine Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1976:  { EID_TRACE_STATUS_DEBUG, \"Enable Trace Debug\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1977:  { EID_TRACE_STATUS_CONFIG, \"Enable Trace Configuration\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1978:  { EID_MIC_ERR, \"Message Integrity Check on AP26xx\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1979:  { EID_USE_BCAST_FOR_DISASSC, \"Use Broadcast for Client Disassociation\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1980:  { EID_BANDWIDTH_VOICE_ASSC, \"Admission Control: Maximum Bandwidth for Voice Clients\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1981:  { EID_BANDWIDTH_VOICE_REASSC, \"Admission Control: Maximum Bandwidth for Reassociation of Voice Clients\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1982:  { EID_BANDWIDTH_VIDEO_ASSC, \"Admission Control: Maximum Bandwidth for Video Clients\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1983:  { EID_BANDWIDTH_VIDEO_REASSC, \"Admission Control: Maximum Bandwidth for Reassociation of Video Clients\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1984:  { EID_BANDWIDTH_VIDEO_RESERVE, \"Admission Control: Maximum Bandwidth for Reserve of Video Clients\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1985:  { EID_BANDWIDTH_ADM_CTRL_RESERVE, \"Admission Control: Maximum Bandwidth for Reserve of Admin\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1986:  { EID_VLAN_TAG, \"VLAN Tag of AP Uplink\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1987:  { EID_COUNTRY_CODE, \"Country Code\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1988:  { EID_POLL_DURATION, \"Poll Timeout in Seconds\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1989:  { EID_POLL_INTERVAL, \"Poll Interval in Seconds\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1990:  { EID_LOC_AUTO_COLLECT_ENABLE, \"Enable Auto Collection of RSS for Positioning Engine\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1991:  { EID_POLL_MAINTAIN_CLIENT_SESSION, \"Enable Maintaining of Client Session When Poll to Controller Times Out\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1992:  { EID_TELNET_ENABLE, \"Enable SSH Access to AP\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1993:  { EID_TELNET_PASSWORD, \"Hash SSH Password\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1994:  { EID_TELNET_PASSWORD_ENTRY_MODE, \"Telnet Password Entry Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1995:  { EID_OUTDOOR_ENABLE, \"AP Environment (1 - Indoor, 2 - Outdoor)\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1996:  { EID_ON_DEMAND_ARRAY, \"Array of MAC Addresses to Collect RSS for Positioning Engine (each element is 6 bytes)\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1997:  { EID_LAG_ENABLED, \"Enable Link Aggregation on Uplink Ethernet Ports\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "1998:  { EID_APP_POLICY_FIXED_BLOCK, \"Application Definition for Layer 4 Filters \", TLV_TYPE_BLOCK_TLV, TAB_APP_POLICY_FIXED_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "1999:  { EID_SLP_RETRY_COUNT, \"Retry Count for SLP Discovery\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2000:  { EID_SLP_RETRY_DELAY, \"Delay Between SLP Retries\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2001:  { EID_DNS_RETRY_COUNT, \"Retry Count for DNS Discovery\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2002:  { EID_DNS_RETRY_DELAY, \"Delay Between DNS Retries\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2003:  { EID_MCAST_SLP_RETRY_COUNT, \"Retry Count for Multicast SLP Discovery\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2004:  { EID_MCAST_SLP_RETRY_DELAY, \"Delay Between Multicast SLP Retries\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2005:  { EID_DISC_RETRY_COUNT, \"Retry Count for Discovery\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2006:  { EID_DISC_RETRY_DELAY, \"Delay Between Discovery Retries\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2007:  { EID_LOGGING_ALARM_SEV, \"Miminum Severity of Event to Report\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2008:  { EID_BLACKLIST_ADD, \"Add Clients to MAC Access List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2009:  { EID_FAILOVER_AC_IP_ADDR, \"Array of Controllers IP Addresses for Legacy Failover\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2010:  { EID_STATIC_AC_IP_ADDR, \"Array of Static Controller IP Addresses\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2011:  { EID_DHCP_ASSIGNMENT, \"Uplink IP Address Assignment (0 - Static, 1 - DHCP)\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2012:  { EID_STATIC_AP_IP_ADDR, \"Uplink Static IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2013:  { EID_STATIC_AP_IP_NETMASK, \"Uplink Netmask\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2014:  { EID_STATIC_AP_DEFAULT_GW, \"Uplink Default Gateway\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2015:  { EID_BLACKLIST_DEL, \"Remove Clients from MAC Access List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2016:  { EID_MACADDR_REQ, \"Request to Send Radio BSSIDs in Config Acknowle\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2017:  { EID_AVAILABILITY_MODE, \"Availability Mode\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2018:  { EID_AP_PERSISTENCE, \"Keep Client Sessions When Connection to Controller Times Out\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2019:  { EID_FOREIGN_AP, \"Home AP = 0, Foreign AP = 1\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2020:  { EID_SUPP1X_CREDENTIAL_REMOVE, \"Remove Credential from AP,type: bitmask (1 - EAP-TLS, 2 - PEAP)\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2021:  { EID_SUPP1X_CERT_TFTP_IP, \"TFTP Server IP Address for EAP-TLS Credential\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2022:  { EID_SUPP1X_CERT_TFTP_PATH, \"TFTP Path for EAP-TLS Credential\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2023:  { EID_SUPP1X_PRIVATE, \"EAP-TLS Private Key, Blowfish Encrypted\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2024:  { EID_SUPP1X_DOMAIN, \"Community Domain\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2025:  { EID_SUPP1X_USERID, \"PEAP User Id\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2026:  { EID_SUPP1X_PASSWORD, \"PEAP Password, Blowfish Encrypted\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2027:  { EID_SUPP1X_CREDENT, \"Credential Configuration of AP\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2028:  { EID_SUPP1X_SERIAL, \"Certificate Serial\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2029:  { EID_SUPP1X_START_DATE, \"Certificate Start Date\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2030:  { EID_SUPP1X_END_DATE, \"Certificate Expiry Date\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2031:  { EID_SUPP1X_ISSUED_BY, \"Certificate Issuer Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2032:  { EID_SUPP1X_ISSUED_TO, \"Certificate Issued to Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2033:  { EID_SUPP1X_SUBJALTNAME, \"Certificate Subject Alternative Name (Required From Microsoft)\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2034:  { EID_NOT_USED_CONFIG_TLV_63, \"Not Used\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2035:  { EID_FAILOVER_AC_HOME_IP_ADDR, \"Array of Home Controller IP Addresses\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2036:  { EID_FAILOVER_AC_FOREIGN_IP_ADDR, \"Array of Foreign Controller IP Addresses\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2037:  { EID_AP_HOSTNAME, \"AP Hostname\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2038:  { EID_LLDP_ENABLED, \"Enable LLDP\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2039:  { EID_LLDP_TTL, \"LLDP Time To Live\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2040:  { EID_LLDP_ANNOUNCEMENT_INT, \"LLDP Announcement Interval\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2041:  { EID_LLDP_ANNOUNCEMENT_DELAY, \"LLDP Announcement Delay\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2042:  { EID_VOWIFI_EXPIRATION_TIME, \"Voice Over WiFi Expiration Time\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2043:  { EID_MOBILITY_SHARED_KEY, \"Encrypted With Blowfish Using AP Serial Number As Seed\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2044:  { EID_CHANNEL_REPORT_2_4G, \"Channel Report Based On 2.4GHz\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2045:  { EID_CHANNEL_REPORT_5G, \"Channel Report Based On 5GHz\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2046:  { EID_RATE_CONTROL_BLOCK, \"Rate Control Block For Site\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2047:  { EID_AP_DNS, \"AP DNS\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2048:  { EID_STATIC_MTU, \"Uplink Static MTU\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2049:  { EID_MACFILTER_MODE, \"MAC Access List Mode (1 - Blacklist, 2 - Whitelist)\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2050:  { EID_SITE_CONFIG_BLOCK, \"Configuration Block for Site\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "2051:  { EID_TOPOLOGY_BLOCK, \"Topology Configuration Block for Site\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2052:  { EID_AP_NAME, \"AP Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2053:  { EID_ANTENNA_MODELS, \"Array of Antenna Model IDs\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2054:  { EID_AIRTIME_FAIRNESS_LEVEL, \"Airtime Fairness Level: 0-4\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2055:  { EID_VLAN_DEFAULT, \"Thick AP Default Vlan (Untagged: -1,  Vlan: 0~4094)\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2056:  { EID_CLUSTER_PASSWORD, \"SIAPP Cluster Password\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2057:  { EID_SIAPP_PRIVACY, \"Enable SIAPP Encryption\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2058:  { EID_LED_STATUS, \"LED Status (0 - Off, 1 - WDS Signal Strength, 2 - Locate, 3 - Normal)\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2059:  { EID_LBS_SRC_IP, \"Location Base Service Source IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2060:  { EID_LBS_SRC_PORT, \"Location Base Service Source Port\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2061:  { EID_LBS_DST_IP, \"Location Base Service Destination IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2062:  { EID_LBS_DST_PORT, \"Location Base Service Destination Port\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2063:  { EID_LBS_MCAST, \"Location Base Service Multicast\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2064:  { EID_LBS_TAG_MODE, \"Location Base Service Tag Mode\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2065:  { EID_ETH_PORT_MODE, \"Ethernet Port Mode\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2066:  { EID_INTER_AP_ROAM, \"Inter AP Roam\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2067:  { EID_MGMT_MAC, \"Management Mac Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2068:  { EID_REAL_CAPTURE_TIMEOUT, \"Real Capture Time Out\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2069:  { EID_POLICY_BLOCK, \"Policy Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_POLICY, 0, 0, 0, 0, 0, 0, 0},",
          "2070:  { EID_FILTER_CONFIG_BLOCK, \"Filter Rule Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_FILTER, 0, 0, 0, 0, 0, 0, 0},",
          "2071:  { EID_COS_CONFIG_BLOCK, \"COS Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_COS, 0, 0, 0, 0, 0, 0, 0},",
          "2072:  { EID_LOCATION_BASED_LOOKUP_BLOCK, \"Location Based Lookup Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_LOC_BASE_LP, 0, 0, 0, 0, 0, 0, 0},",
          "2073:  { EID_RADIUS_SERVER_BLOCK, \"RADIUS Server Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_RADIUS_SERVER, 0, 0, 0, 0, 0, 0, 0},",
          "2074:  { EID_DISC_RETRY_DELAY_WOUI_ADD, \"Blacklist WOUI Add\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2075:  { EID_DISC_RETRY_DELAY_WOUI_DEL, \"Blacklist WOUI Delete\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2076:  { EID_SNIFFER_RADIO_BITMAP, \"Sniffer Radio Bit Map\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2077:  { EID_MCAST_ASSEMB, \"Multicast Assemble\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2078:  { EID_JUMBO_FRAME, \"Jumbo Frame\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2079:  { EID_DYN_ON_DEMAND_ARRAY, \"Location Dynamic On-demand MAC List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2080:  { EID_BANDWIDTH_BE_ASSC, \"Best Effort Bandwidth for Association\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2081:  { EID_BANDWIDTH_BE_REASSC, \"Best Effort Bandwidth for Reassociation\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2082:  { EID_BANDWIDTH_BK_ASSC, \"Background Bandwidth for Association\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2083:  { EID_BANDWIDTH_BK_REASSC, \"Background Bandwidth for Reassociation\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2084:  { EID_NETFLOW_EXPORT_INTERVAL, \"Netflow Export Interval\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2085:  { EID_MIRRORN_PACKETS, \"MirrorN Packets\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2086:  { EID_ICON_NAME, \"Hotspot 2.0 ICON Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2087:  { EID_ICON_FILE, \"Hotspot 2.0 ICON File\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2088:  { EID_ICON_BLOCK, \"Hotspot 2.0 ICON Block\", TLV_TYPE_BLOCK_TLV, VNS_CONFIG_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2089:  { EID_BOARD_STATUS, \"Board Status\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2090:  { EID_CP_MU_AUTO_LOGIN, \"Client Auto Login Handling: 0 : Hide Auto Login, 1 : Redirect Auto Login, 2 : Drop Auto Login\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2091:  { EID_EXTAPP_CONF_BLOCK, \"Application Control Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_EXTAPP_CONF_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2092:  { EID_RB_REDIRECT, \"Role Based Redirection\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2093:  { EID_RB_REDIRECT_PORTS, \"Role Based Redirection Ports\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2094:  { EID_S_TOPOLOGY_ARRAY, \"Array of Site Topologies\", TLV_TYPE_BLOCK_TLV, TAB_S_TOPOLOGY_ARRAY_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2095:  { EID_S_TOPOLOGY_STRUCT, \"Site Topology Struct\", TLV_TYPE_BLOCK_TLV, TAB_S_TOPOLOGY_STRUCT_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2096:  { EID_S_TOPOLOGY_KEY, \"Site Topology Key\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2097:  { EID_S_TOPOLOGY_VLAN_TAG, \"Site Topology Vlan Tag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2098:  { EID_S_TOPOLOGY_ARP_PROXY, \"Site Topology Arp Proxy\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2099:  { EID_S_TOPO_MCAST_FILTER_CONFIG_BLOCK, \"Site Topology  Multicast Filter Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_S_TOPO_MCAST_FILTER_CONFIG_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2100:  { EID_MCAST_PRIORITIZED_VOICE, \"Multicast Prioritized Voice\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2101:  { EID_IOT_CONTROL, \"IOT Control\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2102:  { EID_IOT_APPLICATION_ID, \"IOT Application ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2103:  { EID_AP_LOCATION, \"AP Location\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2104:  { EID_IOT_ADMIN, \"Enable/Disable IOT Admin\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2105:  { EID_IOT_IMAGE, \"Enable IoT-KW41Z Image Upgrade\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2106:  { EID_IOT_BLE_ADVERTISE_INTERVAL, \"IOT BLE Advertise Interval\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2107:  { EID_IOT_BLE_ADVERTISE_POWER, \"IOT BLE Advertise Power\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2108:  { EID_IOT_IBEACON_MAJOR, \"IOT Ibeacon Major\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2109:  { EID_IOT_IBEACON_MINOR, \"IOT Ibeacon Minor\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2110:  { EID_IOT_IBEACON_UUID, \"IOT Ibeacon  UUID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2111:  { EID_STATIC_ADSP_IP_ADDR, \"Set ADSP Url\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2112:  { EID_OBSS_CHAN_ADJ_ACTIVE, \"Set Auto Channel Width\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2113:  { EID_IOT_BLE_SCAN_SRC_IP, \"IOT BLE Scan Source IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2114:  { EID_IOT_BLE_SCAN_SRC_PORT, \"IOT BLE Scan Source Port\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2115:  { EID_IOT_BLE_SCAN_DST_IP, \"IOT BLE Scan Destination IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2116:  { EID_IOT_BLE_SCAN_DST_PORT, \"IOT BLE Scan Destination Port\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2117:  { EID_IOT_BLE_SCAN_INTERVAL, \"IOT BLE Scan Interval In Milliseconds\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2118:  { EID_IOT_BLE_SCAN_WINDOW, \"IOT BLE Scan Window In Milliseconds\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2119:  { EID_IOT_BLE_SCAN_MIN_RSSI, \"IOT BLE Scan Min RSSI\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2120:  { EID_LSENSE_SERVER, \"Lsense Server\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2121:  { EID_LSENSE_MIN_RSSI, \"Lsense Min RSSI\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2122:  { EID_LSENSE_REP_FREQ, \"Lsense Report Frequency\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2123:  { EID_DPI_SIG_HASH, \"Deep Packet Inspection Signature Hash\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2124:  { EID_ANT_MODELS_IOT, \"Antanna Type for IOT Radio\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2125:  { EID_FABRICATTACH_ARRAY, \"Array Of FabricAttach ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2126:  { EID_IOT_THREAD_CHANNEL, \"IoT-Thread Network Parameter 802.15.4 Channel\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2127:  { EID_IOT_THREAD_FACTORY_RESET, \"IoT-Thread Network Factory Reset\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2128:  { EID_IOT_THREAD_SHORT_PAN_ID, \"IoT-Thread Network Parameter PAN ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2129:  { EID_IOT_THREAD_SHORT_EUI, \"IoT-Thread network Parameter EUI\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2130:  { EID_IOT_THREAD_PSKD, \"IoT-Thread network Parameter PSKd - Pre-Shared Key for the Device\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2131:  { EID_IOT_THREAD_MASTER_KEY, \"IoT-Thread Network Parameter: Master Key\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2132:  { EID_IOT_THREAD_NWK_NAME, \"IoT-Thread Network Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2133:  { EID_IOT_THREAD_COMM_CREDENTIAL, \"IoT-Thread Commissioner Credential\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2134:  { EID_IOT_THREAD_LONG_EUI, \"IoT-Thread Network Parameter EUI\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2135:  { EID_IOT_THREAD_EXTENDED_PAN_ID, \"IoT-Thread Network Parameter PAN ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2136:  { EID_AP_VSA_SSID_ID, \"Configure VSA Interface\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2137:  { EID_AP_STATIC_VSA_IPADDR, \"Configure VSA IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2138:  { EID_AP_STATIC_VSA_NETMASK, \"Configure VSA Network Mask\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2139:  { EID_IOT_BLE_URL, \"IoT-Eddystone URL Parameter\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2140:  { EID_AP_PERSONALITY, \"WING Or Identifi AP 1: WING AP, 0 : Identifi AP\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2141:  { EID_ADSP_RADIO_SHARE, \"ADSP Radio Share Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2142:  { EID_LOCATION_TENANT_ID, \"Location Tenant ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0}",
          "2143: };",
          "2148: typedef enum",
          "2149: {",
          "2150:  EID_S_TOPO_MCAST_FILTER_NAME  = 1,",
          "2151:  EID_S_TOPO_MCAST_FILTER_RULES,",
          "2152:  EID_S_TOPO_MCAST_FILTER_RULES_EXT_BLOCK",
          "2153: } wassp_tlv_S_topo_mcast_type_t;",
          "2157: const TLV_PARSER_ENTRY  tlvSTopoMcastFilterBlock[] =",
          "2158: {",
          "2159:  { EID_S_TOPO_MCAST_FILTER_NAME, \"Site Topology  Multicast Filter Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2160:  { EID_S_TOPO_MCAST_FILTER_RULES, \"Site Topology  Multicast Filter Rules\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2161:  { EID_S_TOPO_MCAST_FILTER_RULES_EXT_BLOCK, \"Site Topology  Multicast Filter Rules Block\", TLV_TYPE_BLOCK_TLV, TAB_S_TOPO_MCAST_FILTER_RULES_EXT_BLOCK, 0, 0, 0, 0, 0, 0, 0}",
          "2163: };",
          "2168: typedef enum",
          "2170:  EID_S_TOPO_MCAST_FILTER_RULE_EXT_ACT_FLAGS  = 1,",
          "2171:  EID_S_TOPO_MCAST_FILTER_RULES_IPV6",
          "2173: } wassp_tlv_S_topo_mcast_rule_type_t;",
          "2175: const TLV_PARSER_ENTRY  tlvSTopoMcastFilterRuleBlock[] =",
          "2176: {",
          "2177:  { EID_S_TOPO_MCAST_FILTER_RULE_EXT_ACT_FLAGS, \"Site Topology  Multicast Filter Rule Action Flags\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2178:  { EID_S_TOPO_MCAST_FILTER_RULES_IPV6, \"Site Topology  Multicast Filter Rule IPv6 Addresses\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0}",
          "2179: };",
          "2186: typedef enum",
          "2188:  EID_DOT11_NOT_USED = 0,                             // 0",
          "2189:  EID_DOT11_ACKFailureCount,                          // 1",
          "2190:  EID_DOT11_FCSErrorCount,                            // 2",
          "2191:  EID_DOT11_FailedCount,                              // 3",
          "2192:  EID_DOT11_FrameDuplicateCount,                      // 4",
          "2193:  EID_DOT11_MulticastReceivedFrameCount,              // 5",
          "2194:  EID_DOT11_MulticastTransmittedFrameCount,           // 6",
          "2195:  EID_DOT11_MultipleRetryCount,                       // 7",
          "2196:  EID_DOT11_RTSFailureCount,                          // 8",
          "2197:  EID_DOT11_RTSSuccessCount,                          // 9",
          "2198:  EID_DOT11_ReceivedFragementCount,                   // 10",
          "2199:  EID_DOT11_RetryCount,                               // 11",
          "2200:  EID_DOT11_TransmittedFragmentCount,                 // 12",
          "2201:  EID_DOT11_TransmittedFrameCount,                    // 13",
          "2202:  EID_DOT11_WEBUndecryptableCount,                    // 14",
          "2203:  EID_DOT11_WEPExcludedCount,                         // 15",
          "2204:  EID_DOT11_WEPICVErrorCount,                         // 16",
          "2205:  EID_DRM_AllocFailures,                              // 17",
          "2206:  EID_DRM_CurrentChannel,                             // 18",
          "2207:  EID_DRM_CurrentPower,                               // 19",
          "2208:  EID_DRM_DataTxFailures,                             // 20",
          "2209:  EID_DRM_DeviceType,                                 // 21",
          "2210:  EID_DRM_InDataPackets,                              // 22",
          "2211:  EID_DRM_InMgmtPackets,                              // 23",
          "2212:  EID_DRM_LoadFactor,                                 // 24",
          "2213:  EID_DRM_MgmtTxFailures,                             // 25",
          "2214:  EID_DRM_MsgQFailures,                               // 26",
          "2215:  EID_DRM_NoDRMCurrentChannel,                        // 27",
          "2216:  EID_DRM_OutDataPackets,                             // 28",
          "2217:  EID_DRM_OutMgmtPackets,                             // 29",
          "2218:  EID_IF_InBcastPackets,                              // 30",
          "2219:  EID_IF_InDiscards,                                  // 31",
          "2220:  EID_IF_InErrors,                                    // 32",
          "2221:  EID_IF_InMcastPackets,                              // 33",
          "2222:  EID_IF_InOctets,                                    // 34",
          "2223:  EID_IF_InUcastPackets,                              // 35",
          "2224:  EID_IF_MTU,                                         // 36",
          "2225:  EID_IF_OutBcastPackets,                             // 37",
          "2226:  EID_IF_OutDiscards,                                 // 38",
          "2227:  EID_IF_OutErrors,                                   // 39",
          "2228:  EID_IF_OutOctets,                                   // 40",
          "2229:  EID_IF_OutUcastPackets,                             // 41",
          "2230:  EID_IF_OutMCastPackets,                             // 42",
          "2231:  EID_MU_Address,                                     // 43",
          "2232:  EID_MU_AssociationCount,                            // 44",
          "2233:  EID_MU_AuthenticationCount,                         // 45",
          "2234:  EID_MU_DeAssociationCount,                          // 46",
          "2235:  EID_MU_DeAuthenticationCount,                       // 47",
          "2236:  EID_MU_IfIndex,                                     // 48",
          "2237:  EID_MU_ReAssociationCount,                          // 49",
          "2238:  EID_MU_ReceivedBytes,                               // 50",
          "2239:  EID_MU_ReceivedErrors,                              // 51",
          "2240:  EID_MU_ReceivedFrameCount,                          // 52",
          "2241:  EID_MU_ReceivedRSSI,                                // 53",
          "2242:  EID_MU_ReceivedRate,                                // 54",
          "2243:  EID_MU_TransmittedBytes,                            // 55",
          "2244:  EID_MU_TransmittedErrors,                           // 56",
          "2245:  EID_MU_TransmittedFrameCount,                       // 57",
          "2246:  EID_MU_TransmittedRSSI,                             // 58",
          "2247:  EID_MU_TransmittedRate,                             // 59",
          "2248:  EID_MU_RF_STATS_END,                                // 60",
          "2249:  EID_RFC_1213_SYSUPTIME,                             // 61",
          "2250:  EID_STATS_ETHER_BLOCK,                              // 62",
          "2251:  EID_STATS_RADIO_A_BLOCK,                            // 63",
          "2252:  EID_STATS_RADIO_B_G_BLOCK,                          // 64",
          "2253:  EID_MU_STATS_BLOCK,                                 // 65",
          "2254:  EID_STATS_WDS_BLOCK,                                // 66",
          "2255:  EID_WDS_ROLE,                                       // 67",
          "2256:  EID_WDS_PARENTMAC,                                  // 68",
          "2257:  EID_WDS_SSID,                                       // 69",
          "2258:  EID_STATS_SUPP1x_BLOCK,                             // 70",
          "2259:  EID_STATS_SUPP1X_CREDENT,                           // 71",
          "2260:  EID_STATS_SUPP1X_END_DATE,                          // 72",
          "2261:  EID_DOT11_ProtectionMode,                           // 73",
          "2262:  EID_MU_TSPEC_Stats_Block,                           // 74",
          "2263:  EID_DOT11_ChannelBonding,                           // 75",
          "2264:  EID_DCS_STAS_NF,                                    // 76",
          "2265:  EID_DCS_STAS_CHANN_OCCUPANCY,                       // 77",
          "2266:  EID_DCS_STAS_TX_OCCUPANCY,                          // 78",
          "2267:  EID_DCS_STAS_RX_OCCUPANCY,                          // 79",
          "2268:  EID_CAC_DEAUTH,                                     // 80",
          "2269:  EID_MU_IP,                                          // 81",
          "2270:  EID_STATS_CHECK,                                    // 82",
          "2271:  EID_WDS_BONDING,                                    // 83",
          "2272:  EID_MU_ReceivedRSS,                                 // 84",
          "2273:  EID_MU_RadioIndex,                                  // 85",
          "2274:  EID_MU_FltPktAllowed,                               // 86",
          "2275:  EID_MU_FltPktDenied,                                // 87",
          "2276:  EID_MU_FltName,                                     // 88",
          "2277:  EID_MU_FltReset,                                    // 89",
          "2278:  EID_MU_DL_DroppedRateControlPackets,                // 90",
          "2279:  EID_MU_DL_DroppedRateControlBytes,                  // 91",
          "2280:  EID_MU_DL_DroppedBufferFullPackets,                 // 92",
          "2281:  EID_MU_DL_DroppedBufferFullBytes,                   // 93",
          "2282:  EID_MU_DL_LostRetriesPackets,                       // 94",
          "2283:  EID_MU_DL_LostRetriesBytes,                         // 95",
          "2284:  EID_MU_UL_DroppedRateControlPackets,                // 96",
          "2285:  EID_MU_UL_DroppedRateControlBytes,                  // 97",
          "2286:  EID_SiappClusterName,                               // 98",
          "2287:  EID_LB_LoadGroupID,                                 // 99",
          "2288:  EID_LB_LoadValue,                                   // 100",
          "2289:  EID_LB_MemberCount,                                 // 101",
          "2290:  EID_LB_ClientCount,                                 // 102",
          "2291:  EID_LB_LoadState,                                   // 103",
          "2292:  EID_LB_ProbeReqsDeclined,                           // 104",
          "2293:  EID_LB_AuthReqsDeclined,                            // 105",
          "2294:  EID_LB_RebalanceEvents,                             // 106",
          "2295:  EID_MU_DOT11_CAPABILITY,                            // 107",
          "2296:  EID_BAND_PREFERENCE_STATS,                          // 108",
          "2297:  EID_R_LC_STATUS,                                    // 109",
          "2298:  EID_WDS_ROAM_COUNT,                                 // 110",
          "2299:  EID_WDS_TX_RETRIES,                                 // 111",
          "2300:  EID_RealCaptureTimeout,                             // 112",
          "2301:  EID_MU_11N_ADVANCED,                                // 113",
          "2302:  EID_MU_Count,                                       // 114",
          "2303:  EID_R_Clear_channel,                                // 115",
          "2304:  EID_R_RX_Occupancy,                                 // 116",
          "2305:  EID_STATS_VNS_BLOCK,                                // 117",
          "2306:  EID_STATS_VNS_ENTRY,                                // 118",
          "2307:  EID_ETH_STATUS,                                     // 119",
          "2308:  EID_LAG_ACT_AGGREGATE_STATUS,                       // 120",
          "2309:  EID_PERFORMANCE_STATS,                              // 121",
          "2310:  EID_APPL_STATS,                                     // 122",
          "2311:  EID_APPL_COUNT,                                     // 123",
          "2312:  EID_APPL_MAC,                                       // 124",
          "2313:  EID_APPL_DISPLAY_ID,                                // 125",
          "2314:  EID_APPL_TX_BYTES,                                  // 126",
          "2315:  EID_APPL_RX_BYTES,                                  // 127",
          "2316:  EID_MU_TRANSMITTED_MCS,                             // 128",
          "2317:  EID_MU_TOTAL_LOST_FRAMES,                           // 129",
          "2318:  EID_MU_DL_AGGR_SIZE,                                // 130",
          "2319:  EID_RX_PHYS_ERRORS,                                 // 131",
          "2320:  EID_RADIO_HARDWARE_RESET,                           // 132",
          "2321:  EID_TOTAL_PACKET_ERROR_RATE,                        // 133",
          "2322:  EID_STATS_PORT_BLOCK,                               // 134",
          "2323:  EID_PORT_ID,                                        // 135",
          "2324:  EID_MU_RADIO_ID,                                    // 136",
          "2325:  EID_IF_LinkSpeed,                                   // 137",
          "2326:  EID_MU_DL_RETRY_ATTEMPTS,                           // 138",
          "2327:  EID_FILTER_STATS_BLOCK,                             // 139",
          "2328:  EID_FILTER_STATS_RULES_BLOCK,                       // 140",
          "2329:  EID_ROLE_ID,                                        // 141",
          "2330:  EID_ROLE_TIMESTAMP,                                 // 142",
          "2331:  EID_DEFAULT_HIT_COUNT_IN,                           // 143",
          "2332:  EID_DEFAULT_HIT_COUNT_OUT,                          // 144",
          "2333:  EID_RULE_HIT_COUNT_IN,                              // 145",
          "2334:  EID_RULE_HIT_COUNT_OUT,                             // 146",
          "2335:  EID_STATS_RADIO_ID,                          // 147",
          "2336:  EID_STATS_RADIO_BLOCK,                       // 148",
          "2337:  EID_MU_RFQI,                                 // 149",
          "2338:  EID_RADIO_RFQI,                              // 150",
          "2339:  EID_IF_InBcastPackets_D,                     // 151",
          "2340:  EID_IF_InDiscards_D,                         // 152",
          "2341:  EID_IF_InErrors_D,                           // 153",
          "2342:  EID_IF_InMcastPackets_D,                     // 154",
          "2343:  EID_IF_InOctets_D,                           // 155",
          "2344:  EID_IF_InUcastPackets_D,                     // 156",
          "2345:  EID_IF_OutBcastPackets_D,                    // 157",
          "2346:  EID_IF_OutDiscards_D,                        // 158",
          "2347:  EID_IF_OutErrors_D,                          // 159",
          "2348:  EID_IF_OutOctets_D,                          // 160",
          "2349:  EID_IF_OutUcastPackets_D,                    // 161",
          "2350:  EID_IF_OutMCastPackets_D,                    // 162",
          "2351:  EID_MU_ReceivedFrameCount_D,                 // 163",
          "2352:  EID_MU_TransmittedFrameCount_D,              // 164",
          "2353:  EID_MU_ReceivedErrors_D,                     // 165",
          "2354:  EID_MU_TransmittedErrors_D,                  // 166",
          "2355:  EID_MU_ReceivedBytes_D,                      // 167",
          "2356:  EID_MU_TransmittedBytes_D,                   // 168",
          "2357:  EID_MU_rc_ul_dropped_pkts_D,                 // 169",
          "2358:  EID_MU_rc_ul_dropped_bytes_D,                // 170",
          "2359:  EID_MU_rc_dl_dropped_pkts_D,                 // 171",
          "2360:  EID_MU_rc_dl_dropped_bytes_D,                // 172",
          "2361:  EID_STATS_TLV_MAX                            //  Make shure this is the MAX",
          "2362: } wassp_tlv_stats_1_type_t;",
          "2367: const TLV_PARSER_ENTRY tlvBeastConfigTable[] =",
          "2369:  { EID_DOT11_NOT_USED, \"DOT11Unused 0\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2370:  { EID_DOT11_ACKFailureCount, \"802.11 Ack Failure Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2371:  { EID_DOT11_FCSErrorCount, \"802.11 FCS Error Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2372:  { EID_DOT11_FailedCount, \"802.11 Failed Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2373:  { EID_DOT11_FrameDuplicateCount, \"802.11 Frame Duplicated Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2374:  { EID_DOT11_MulticastReceivedFrameCount, \"802.11 Multicast Received Frame Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2375:  { EID_DOT11_MulticastTransmittedFrameCount, \"802.11 Multicast Transmitted Frame Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2376:  { EID_DOT11_MultipleRetryCount, \"802.11 Multiple Retry Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2377:  { EID_DOT11_RTSFailureCount, \"802.11 RTS Failure Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2378:  { EID_DOT11_RTSSuccessCount, \"802.11 RTS Success Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2379:  { EID_DOT11_ReceivedFragementCount, \"802.11 Received Fragement Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2380:  { EID_DOT11_RetryCount, \"802.11 Retry Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2381:  { EID_DOT11_TransmittedFragmentCount, \"802.11 Transmitted Fragment Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2382:  { EID_DOT11_TransmittedFrameCount, \"802.11 Transmitted Frame Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2383:  { EID_DOT11_WEBUndecryptableCount, \"802.11 WEP Undecryptable Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2384:  { EID_DOT11_WEPExcludedCount, \"802.11 WEP Excluded Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2385:  { EID_DOT11_WEPICVErrorCount, \"802.11 WEP ICV Error Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2386:  { EID_DRM_AllocFailures, \"802.11 DRM Allocated Failures\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2387:  { EID_DRM_CurrentChannel, \"802.11 DRM Current Channel\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2388:  { EID_DRM_CurrentPower, \"802.11 DRM Current Power\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2389:  { EID_DRM_DataTxFailures, \"802.11 DRM Data Tx Failures\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2390:  { EID_DRM_DeviceType, \"802.11 DRM Device Type\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2391:  { EID_DRM_InDataPackets, \"802.11 DRM In Data Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2392:  { EID_DRM_InMgmtPackets, \"802.11 DRM In Management Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2393:  { EID_DRM_LoadFactor, \"802.11 DRM Load Factor\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2394:  { EID_DRM_MgmtTxFailures, \"802.11 DRM Management Tx Failures\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2395:  { EID_DRM_MsgQFailures, \"802.11 DRM Message Q Failures\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2396:  { EID_DRM_NoDRMCurrentChannel, \"802.11 No DRM Current Channel\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2397:  { EID_DRM_OutDataPackets, \"802.11 DRM Out Data Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2398:  { EID_DRM_OutMgmtPackets, \"802.11 DRM Out Management Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2399:  { EID_IF_InBcastPackets, \"Interface In Bcast Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2400:  { EID_IF_InDiscards, \"Interface In Discards\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2401:  { EID_IF_InErrors, \"Interface In Errors\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2402:  { EID_IF_InMcastPackets, \"Interface In Mcast Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2403:  { EID_IF_InOctets, \"Interface In Octets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2404:  { EID_IF_InUcastPackets, \"Interface In Ucast Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2405:  { EID_IF_MTU, \"Interface MTU\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2406:  { EID_IF_OutBcastPackets, \"Interface Out Bcast Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2407:  { EID_IF_OutDiscards, \"Interface Out Discards\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2408:  { EID_IF_OutErrors, \"Interface Out Errors\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2409:  { EID_IF_OutOctets, \"Interface Out Octets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2410:  { EID_IF_OutUcastPackets, \"Interface Out Ucast Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2411:  { EID_IF_OutMCastPackets, \"Interface Out MCast Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2412:  { EID_MU_Address, \"MU Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2413:  { EID_MU_AssociationCount, \"MU Association Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2414:  { EID_MU_AuthenticationCount, \"MU Authentication Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2415:  { EID_MU_DeAssociationCount, \"MU DeAssociation Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2416:  { EID_MU_DeAuthenticationCount, \"MU DeAuthentication Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2417:  { EID_MU_IfIndex, \"MU Interface Index\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2418:  { EID_MU_ReAssociationCount, \"MU ReAssociation Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2419:  { EID_MU_ReceivedBytes, \"MU Received Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2420:  { EID_MU_ReceivedErrors, \"MU Received Errors\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2421:  { EID_MU_ReceivedFrameCount, \"MU Received Frame Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2422:  { EID_MU_ReceivedRSSI, \"MU Received RSSI\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2423:  { EID_MU_ReceivedRate, \"MU Received Rate\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2424:  { EID_MU_TransmittedBytes, \"MU Transmitted Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2425:  { EID_MU_TransmittedErrors, \"MU Transmitted Errors\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2426:  { EID_MU_TransmittedFrameCount, \"MU Transmitted Frame Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2427:  { EID_MU_TransmittedRSSI, \"MU Transmitted RSSI\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2428:  { EID_MU_TransmittedRate, \"MU Transmitted Rate\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2429:  { EID_MU_RF_STATS_END, \"MU RF Stats End\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2430:  { EID_RFC_1213_SYSUPTIME, \"RFC1213 System Up Time\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2431:  { EID_STATS_ETHER_BLOCK, \"Stats Ethernet Block\", TLV_TYPE_BLOCK_TLV, TAB_STATS_ETH, 0, 0, 0, 0, 0, 0, 0},",
          "2432:  { EID_STATS_RADIO_A_BLOCK, \"Stats Radio A Block\", TLV_TYPE_BLOCK_TLV, TAB_STATS_RADIO, 0, 0, 0, 0, 0, 0, 0},",
          "2433:  { EID_STATS_RADIO_B_G_BLOCK, \"Stats Radio BG Block\", TLV_TYPE_BLOCK_TLV, TAB_STATS_RADIO, 0, 0, 0, 0, 0, 0, 0},",
          "2434:  { EID_MU_STATS_BLOCK, \"MU Stats Block\", TLV_TYPE_BLOCK_TLV, STATS_MU_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2435:  { EID_STATS_WDS_BLOCK, \"Stats WDS Block\", TLV_TYPE_BLOCK_TLV, TAB_STATS_WDS, 0, 0, 0, 0, 0, 0, 0},",
          "2436:  { EID_WDS_ROLE, \"WDS Role\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2437:  { EID_WDS_PARENTMAC, \"WDS Parent Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2438:  { EID_WDS_SSID, \"WDS SSID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2439:  { EID_STATS_SUPP1x_BLOCK, \"802.11X Stats Block\", TLV_TYPE_BLOCK_TLV, TAB_STATS_WDS, 0, 0, 0, 0, 0, 0, 0},",
          "2440:  { EID_STATS_SUPP1X_CREDENT, \"802.11X Credent\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2441:  { EID_STATS_SUPP1X_END_DATE, \"802.11X Expiry Date\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2442:  { EID_DOT11_ProtectionMode, \"802.11 Protection Mode\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2443:  { EID_MU_TSPEC_Stats_Block, \"MU TSPEC Stats Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2444:  { EID_DOT11_ChannelBonding, \"802.11 Channel Bonding\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2445:  { EID_DCS_STAS_NF, \"DCS STAS NF\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2446:  { EID_DCS_STAS_CHANN_OCCUPANCY, \"DCS Stats Channel Occupancy\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2447:  { EID_DCS_STAS_TX_OCCUPANCY, \"DCS Stats Tx Occupancy\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2448:  { EID_DCS_STAS_RX_OCCUPANCY, \"DCS Stats Rx Occupancy\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2449:  { EID_CAC_DEAUTH, \"CAC DeAuthentication\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2450:  { EID_MU_IP, \"MU IP\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2451:  { EID_STATS_CHECK, \"Stats Check\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2452:  { EID_WDS_BONDING, \"WDS Bonding\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2453:  { EID_MU_ReceivedRSS, \"MU Received RSS\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2454:  { EID_MU_RadioIndex, \"MU Radio Index\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2455:  { EID_MU_FltPktAllowed, \"MU Allowed Packet\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2456:  { EID_MU_FltPktDenied, \"MU Denied Packet\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2457:  { EID_MU_FltName, \"MU Filter Rule Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2458:  { EID_MU_FltReset, \"MU Filter Reset\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2459:  { EID_MU_DL_DroppedRateControlPackets, \"MU Down Link Dropped Rate Control Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2460:  { EID_MU_DL_DroppedRateControlBytes, \"MU Down Link Dropped Rate Control Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2461:  { EID_MU_DL_DroppedBufferFullPackets, \"MU Down Link Dropped Buffer Full Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2462:  { EID_MU_DL_DroppedBufferFullBytes, \"MU Down Link Dropped Buffer Full Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2463:  { EID_MU_DL_LostRetriesPackets, \"MU Down Link Lost Retries Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2464:  { EID_MU_DL_LostRetriesBytes, \"MU Down Link Lost Retries Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2465:  { EID_MU_UL_DroppedRateControlPackets, \"MU Up Link Dropped Rate Control Packets\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2466:  { EID_MU_UL_DroppedRateControlBytes, \"MU Up Link Dropped Rate Control Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2467:  { EID_SiappClusterName, \"Siapp Cluster Mac address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2468:  { EID_LB_LoadGroupID, \"Load Balance Load Group ID\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2469:  { EID_LB_LoadValue, \"Load Balance Load value\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2470:  { EID_LB_MemberCount, \"Load Balance Member Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2471:  { EID_LB_ClientCount, \"Load Balance Client Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2472:  { EID_LB_LoadState, \"Load Balance Load State\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2473:  { EID_LB_ProbeReqsDeclined, \"Load Balance Probe Request Declined\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2474:  { EID_LB_AuthReqsDeclined, \"Load Balance Authentication request Declined\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2475:  { EID_LB_RebalanceEvents, \"Load Balance Rebalance Events\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2476:  { EID_MU_DOT11_CAPABILITY, \"MU 802.11 Capability\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2477:  { EID_BAND_PREFERENCE_STATS, \"Band Preference Stats\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2478:  { EID_R_LC_STATUS, \"Radio Load Control Stats\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2479:  { EID_WDS_ROAM_COUNT, \"WDS Roam Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2480:  { EID_WDS_TX_RETRIES, \"WDS Tx Retries\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2481:  { EID_RealCaptureTimeout, \"Real Capture Timeout\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2482:  { EID_MU_11N_ADVANCED, \"MU 802.11N Advanced\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2483:  { EID_MU_Count, \"MU Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2484:  { EID_R_Clear_channel, \"Radio Clear Channel\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2485:  { EID_R_RX_Occupancy, \"Radio Rx Occupancy\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2486:  { EID_STATS_VNS_BLOCK, \"VNS Stats Block\", TLV_TYPE_BLOCK_TLV, TAB_STATS_VNS, 0, 0, 0, 0, 0, 0, 0},",
          "2487:  { EID_STATS_VNS_ENTRY, \"VNS Stats Entry\", TLV_TYPE_BLOCK_TLV, TAB_STATS_VNS, 0, 0, 0, 0, 0, 0, 0},",
          "2488:  { EID_ETH_STATUS, \"Ethernet Stats\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2489:  { EID_LAG_ACT_AGGREGATE_STATUS, \"LAG Aggregate Stats\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2490:  { EID_PERFORMANCE_STATS, \"Performance Stats\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2491:  { EID_APPL_STATS, \"Application Stats\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2492:  { EID_APPL_COUNT, \"Application Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2493:  { EID_APPL_MAC, \"Application Mac Address\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2494:  { EID_APPL_DISPLAY_ID, \"Application Display ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2495:  { EID_APPL_TX_BYTES, \"Application Tx Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2496:  { EID_APPL_RX_BYTES, \"Application Rx Bytes\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2497:  { EID_MU_TRANSMITTED_MCS, \"MU Transmitted MCS\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2498:  { EID_MU_TOTAL_LOST_FRAMES, \"MU Total Lost Frames\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2499:  { EID_MU_DL_AGGR_SIZE, \"MU Down Link Aggregate Size\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2500:  { EID_RX_PHYS_ERRORS, \"Rx Phys Errors\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2501:  { EID_RADIO_HARDWARE_RESET, \"Radio hardware Reset\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2502:  { EID_TOTAL_PACKET_ERROR_RATE, \"total Packet Error Rate\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2503:  { EID_STATS_PORT_BLOCK, \"ports Stats Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2504:  { EID_PORT_ID, \"Port ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2505:  { EID_MU_RADIO_ID, \"MU Radio ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2506:  { EID_IF_LinkSpeed, \"Interface Link Speed\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2507:  { EID_MU_DL_RETRY_ATTEMPTS, \"MU Down Link Retry Attempts\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2508:  { EID_FILTER_STATS_BLOCK, \"Filter Stats Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2509:  { EID_FILTER_STATS_RULES_BLOCK, \"Filter Stats Rules Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2510:  { EID_ROLE_ID, \"Role ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2511:  { EID_ROLE_TIMESTAMP, \"Role Timestamp\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2512:  { EID_DEFAULT_HIT_COUNT_IN, \"Default In Direction Hit Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2513:  { EID_DEFAULT_HIT_COUNT_OUT, \"Default Out Direction Hit Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2514:  { EID_RULE_HIT_COUNT_IN, \"Role In Direction Hit Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2515:  { EID_RULE_HIT_COUNT_OUT, \"Role Out Direction Hit Count\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2516:  { EID_STATS_RADIO_ID, \"Stats Radio ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2517:  { EID_STATS_RADIO_BLOCK, \"Stats Radio ID Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2518:  { EID_MU_RFQI, \"MU RFQI\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2519:  { EID_RADIO_RFQI, \"Radio RFQI\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2520:  { EID_IF_InBcastPackets_D, \"Interface In Bcast Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2521:  { EID_IF_InDiscards_D, \"Interface In Discards Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2522:  { EID_IF_InErrors_D, \"Interface In Error Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2523:  { EID_IF_InMcastPackets_D, \"Interface In Mcast Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2524:  { EID_IF_InOctets_D, \"Interface In Octets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2525:  { EID_IF_InUcastPackets_D, \"Interface In Ucast Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2526:  { EID_IF_OutBcastPackets_D, \"Interface Out Bcast Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2527:  { EID_IF_OutDiscards_D, \"Interface Out Discards Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2528:  { EID_IF_OutErrors_D, \"Interface Out Error Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2529:  { EID_IF_OutOctets_D, \"Interface Out Octets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2530:  { EID_IF_OutUcastPackets_D, \"Interface Out Ucast Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2531:  { EID_IF_OutMCastPackets_D, \"Interface Out Mcast Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2532:  { EID_MU_ReceivedFrameCount_D, \"MU Received Fram Count Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2533:  { EID_MU_TransmittedFrameCount_D, \"MU Transmitted Fram Count Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2534:  { EID_MU_ReceivedErrors_D, \"MU Received Error Count Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2535:  { EID_MU_TransmittedErrors_D, \"MU Transmitted Error Count Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2536:  { EID_MU_ReceivedBytes_D, \"MU Received Bytes Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2537:  { EID_MU_TransmittedBytes_D, \"MU Transmitted Bytes Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2538:  { EID_MU_rc_ul_dropped_pkts_D, \"MU Received Up Link Dropped Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2539:  { EID_MU_rc_ul_dropped_bytes_D, \"MU Received Up Link Dropped Bytes Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2540:  { EID_MU_rc_dl_dropped_pkts_D, \"MU Received Down Link Dropped Packets Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2541:  { EID_MU_rc_dl_dropped_bytes_D, \"MU Received Down Link Dropped Bytes Delta Value Since Last Message\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2542:  { EID_STATS_TLV_MAX, \"Last Stats TLV\",0, 0, 0, 0, 0, 0, 0, 0, 0}",
          "2544: };",
          "2548: #define WASSP_MAX_DECR_INFO_NUM 18",
          "2549: #define WASSP_MAX_SUBTREE_LEN 50",
          "2550: #define EID_PARSE_ERROR (EID_MAX+1)",
          "2552: #define SET_WASSP_TLV_VERSION(val) (g_wassp_ver = (val))",
          "2553: #define GET_WASSP_TLV_VERSION()    (g_wassp_ver)",
          "2556: #define WASSP_PRINT",
          "2558: #define WASSP_SUBTLV_GET_NAME(in_ptr) ((in_ptr)->name)",
          "2559: #define WASSP_SUBTLV_GET_TYPE(in_ptr) ((in_ptr)->type)",
          "2563: typedef enum",
          "2564: {",
          "2565:  EID_R_UNUSED_0 = 0,",
          "2566:  EID_R_RADIO_ID,",
          "2567:  EID_R_ENABLE_RADIO,",
          "2568:  EID_R_CHANNEL,",
          "2569:  EID_R_OP_RATE_SET,",
          "2570:  EID_R_OP_RATE_MAX,",
          "2571:  EID_R_BEACON_PERIOD,",
          "2572:  EID_R_DTIM_PERIOD,",
          "2573:  EID_R_RTS_THRESHOLD,",
          "2574:  EID_R_ANTENNA_TYPE,",
          "2575:  EID_R_A_CHAN_PLAN_TYPE,",
          "2576:  EID_R_FRAGMENT_THRESHOLD,",
          "2577:  EID_R_POWER_LEVEL,",
          "2578:  EID_R_LC_ASSOC_TRY_MAX,",
          "2579:  EID_R_LC_STRICT_CLIENT_COUNT_LIMIT,",
          "2580:  EID_R_DIVERSITY_RX,",
          "2581:  EID_R_DIVERSITY_TX,",
          "2582:  EID_R_SHORT_PREAMBLE,",
          "2583:  EID_R_BASIC_RATE_MAX,",
          "2584:  EID_R_BASIC_RATE_MIN,",
          "2585:  EID_R_HW_RETRIES,",
          "2586:  EID_R_TX_POWER_MIN,",
          "2587:  EID_R_TX_POWER_MAX,",
          "2588:  EID_R_INTERFERENCE_EVENT_TYPE,",
          "2589:  EID_R_DOMAIN_ID,",
          "2590:  EID_R_B_ENABLE,",
          "2591:  EID_R_B_BASIC_RATES,",
          "2592:  EID_R_G_ENABLE,",
          "2593:  EID_R_G_PROTECT_MODE,",
          "2594:  EID_R_G_PROTECT_TYPE,",
          "2595:  EID_R_G_PROTECT_RATE,",
          "2596:  EID_R_G_BASIC_RATE,",
          "2597:  EID_R_A_SUPPORT_802_11_J,",
          "2598:  EID_R_ATPC_EN_INTERVAL,",
          "2599:  EID_R_ACS_CH_LIST,",
          "2600:  EID_R_TX_POWER_ADJ,",
          "2601:  EID_R_WIRELESS_MODE,",
          "2602:  EID_R_N_CHANNEL_BONDING,",
          "2603:  EID_R_N_CHANNEL_WIDTH,",
          "2604:  EID_R_N_GUARD_INTERVAL,",
          "2605:  EID_R_N_PROTECT_ENABLE,",
          "2606:  EID_R_N_PROTECT_TYPE,",
          "2607:  EID_R_N_PROTECT_OFFSET,",
          "2608:  EID_R_N_PROTECT_BUSY_THRESHOLD,",
          "2609:  EID_R_AGGREGATE_MSDU,",
          "2610:  EID_R_AGGREGATE_MSDU_MAX_LEN,",
          "2611:  EID_R_AGGREGATE_MPDU,",
          "2612:  EID_R_AGGREGATE_MPDU_MAX_LEN,",
          "2613:  EID_R_AGGREGATE_MPDU_SUBFRAMES,",
          "2614:  EID_R_ADDBA_SUPPORT,",
          "2615:  EID_R_DCS_MODE,",
          "2616:  EID_R_DCS_NOISE_THRESHOLD,",
          "2617:  EID_R_DCS_CHL_OCCUPANCY_THRESHOLD,",
          "2618:  EID_R_DCS_UPDATE_PERIOD,",
          "2619:  EID_R_ANTENNA_SELECTION,",
          "2620:  EID_R_BKGND_SCAN_ENABLE,",
          "2621:  EID_R_BKGND_SCAN_INTERVAL,",
          "2622:  EID_R_BCMCRATECTRL_AIRTIME,",
          "2623:  EID_R_CACS,",
          "2624:  EID_R_MAX_DISTANCE,",
          "2625:  EID_R_LOADGROUP_ID,",
          "2626:  EID_R_GROUP_BALANCING,",
          "2627:  EID_R_LC_CLIENT_COUNT_LIMIT,",
          "2628:  EID_R_ENABLE_LDPC,",
          "2629:  EID_R_ENABLE_TXSTBC,",
          "2630:  EID_R_ENABLE_RXSTBC,",
          "2631:  EID_R_ENABLE_TXBF,",
          "2632:  EID_R_TXBF_CLIENT_LIMIT,",
          "2633:  EID_R_INTERFERENCE_WAIT_TIME,",
          "2634:  EID_R_LC_ASSOC_TRY_TIMEOUT,",
          "2635:  EID_R_OPT_MCAST_PS,",
          "2636:  EID_R_MCAST_TO_UCAST_DELIVERY,",
          "2637:  EID_R_ADAPTABLE_RATE_FOR_MCAST,",
          "2638:  EID_R_ANTENNA_PORT_ATT,",
          "2639:  EID_R_PROBE_SUP_ENABLE,",
          "2640:  EID_R_PROBE_SUP_CAP,",
          "2641:  EID_R_PROBE_SUP_THRESH,",
          "2642:  EID_R_MU_NUM_RADAR_BACK,",
          "2643:  EID_R_ADSP_RADIO_SHARE,",
          "2644:  EID_R_OCS_CHANNEL_ENABLE,",
          "2645:  EID_R_OCS_CHANNEL_LIST,",
          "2646:  EID_R_OCS_SCAN_INTERVAL,",
          "2647:  EID_R_SENSOR_SCAN_MODE,",
          "2648:  EID_R_SENSOR_SCAN_LIST",
          "2651: } wassp_subtlv_radio_block_type_t;",
          "2654: const TLV_PARSER_ENTRY tlvRadioConfigTable[]  =",
          "2655: {",
          "2656:  { EID_R_UNUSED_0, \"Radio Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2657:  { EID_R_RADIO_ID, \"Radio ID\", TLV_TYPE_INDEX, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2658:  { EID_R_ENABLE_RADIO, \"Enable/Disable Radio\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2659:  { EID_R_CHANNEL, \"Radio Frequency In MHz\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2660:  { EID_R_OP_RATE_SET, \"Operation Rate\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2661:  { EID_R_OP_RATE_MAX, \"Max Operation Rate\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2662:  { EID_R_BEACON_PERIOD, \"Beacon Interval\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2663:  { EID_R_DTIM_PERIOD, \"DTIM Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2664:  { EID_R_RTS_THRESHOLD, \"RTS/CTS Threshold\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2665:  { EID_R_ANTENNA_TYPE, \"Radio Antenna Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2666:  { EID_R_A_CHAN_PLAN_TYPE, \"Radio Channel Plan Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2667:  { EID_R_FRAGMENT_THRESHOLD, \"Fragment Threshold\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2668:  { EID_R_POWER_LEVEL, \"Power Level\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2669:  { EID_R_LC_ASSOC_TRY_MAX, \"LC Association Max Try\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2670:  { EID_R_LC_STRICT_CLIENT_COUNT_LIMIT, \"LC Strict Client Count Limit\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2671:  { EID_R_DIVERSITY_RX, \"Rx Diversity\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2672:  { EID_R_DIVERSITY_TX, \"Tx Diversity\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2673:  { EID_R_SHORT_PREAMBLE, \"Radio Short Preamble\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2674:  { EID_R_BASIC_RATE_MAX, \"Max Basic Rate\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2675:  { EID_R_BASIC_RATE_MIN, \"Min Basic Rate\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2676:  { EID_R_HW_RETRIES, \"Hardware Retries\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2677:  { EID_R_TX_POWER_MIN, \"Min Tx Power\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2678:  { EID_R_TX_POWER_MAX, \"Max Tx Power\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2679:  { EID_R_INTERFERENCE_EVENT_TYPE, \"Interference Event Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2680:  { EID_R_DOMAIN_ID, \"Domain ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2681:  { EID_R_B_ENABLE, \"Enable Radio B\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2682:  { EID_R_B_BASIC_RATES, \"Radio B Basic Rates\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2683:  { EID_R_G_ENABLE, \"Enable Radio G\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2684:  { EID_R_G_PROTECT_MODE, \"Radio G Protect Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2685:  { EID_R_G_PROTECT_TYPE, \"Radio G Protect Type\", TLV_TYPE_INDEX, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2686:  { EID_R_G_PROTECT_RATE, \"Radio G Protect Rate\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2687:  { EID_R_G_BASIC_RATE, \"Radio G Basic Rate\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2688:  { EID_R_A_SUPPORT_802_11_J, \"Radio A Support 802.11J\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2689:  { EID_R_ATPC_EN_INTERVAL, \"Automatic Transmit Power Control Interval\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2690:  { EID_R_ACS_CH_LIST, \"Radio ACS Channel List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2691:  { EID_R_TX_POWER_ADJ, \"Radio Tx Power Adjustment\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2692:  { EID_R_WIRELESS_MODE, \"Wireless Radio Mode\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2693:  { EID_R_N_CHANNEL_BONDING, \"802.11n Channel Bonding: 0=No Bonding, 1=Bond-Up, 2=Bond-Down\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2694:  { EID_R_N_CHANNEL_WIDTH, \"802.11n Channel Width: 1=20Mhz, 2=40Mhz, 3=both\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2695:  { EID_R_N_GUARD_INTERVAL, \"802.11n Guard Interval: 1=short, 2=long\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2696:  { EID_R_N_PROTECT_ENABLE, \"802.11n Channel Protection Mode: 0=disabled, 1=enabled\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2697:  { EID_R_N_PROTECT_TYPE, \"802.11n 40Mhz Channel Protection: 0=None, 1=CTS only, 2=RTS/CTS\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2698:  { EID_R_N_PROTECT_OFFSET, \"802.11n Channel Protection Offset: 1=20Mhz, 2=25MHz\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2699:  { EID_R_N_PROTECT_BUSY_THRESHOLD, \"802.11n 40Mhz Channel Busy Threshold: 0...100\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2700:  { EID_R_AGGREGATE_MSDU, \"Aggregate MSDUs: 0=disabled, 1=enabled\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2701:  { EID_R_AGGREGATE_MSDU_MAX_LEN, \"Aggregate MSDU Max Length: 2290...4096\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2702:  { EID_R_AGGREGATE_MPDU, \"Aggregate MPDUs: 0=disabled, 1=enabled\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2703:  { EID_R_AGGREGATE_MPDU_MAX_LEN, \"Aggregate MPDU Max Length: 1024...65535\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2704:  { EID_R_AGGREGATE_MPDU_SUBFRAMES, \"Aggregate MPDU Max # of Sub-frames: 2...64\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2705:  { EID_R_ADDBA_SUPPORT, \"ADDBA Support: 0=disabled, 1=enabled\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2706:  { EID_R_DCS_MODE, \"Dynamic channel Selection Mode: 0=off, 1=monitor, 2=active\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2707:  { EID_R_DCS_NOISE_THRESHOLD, \"Dynamic channel Selection Noise Threshold\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2708:  { EID_R_DCS_CHL_OCCUPANCY_THRESHOLD, \"Dynamic channel Selection Channel Occupancy\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2709:  { EID_R_DCS_UPDATE_PERIOD, \"Dynamic channel Selection Update Period\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2710:  { EID_R_ANTENNA_SELECTION, \"Antenna selection. LSB 0 - Left, bit 1 - Middle, bit 2 - Right\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2711:  { EID_R_BKGND_SCAN_ENABLE, \"Voice Over WIFI:  0=off, 1=on \", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2712:  { EID_R_BKGND_SCAN_INTERVAL, \"Voice Over WIFI Interval\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2713:  { EID_R_BCMCRATECTRL_AIRTIME, \"Broadcast/Multicast Rate Control: The Percentage of Airtime Allowed for Broadcast/Multicast Traffic\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2714:  { EID_R_CACS, \"Thick/Thin AP: Cluster ACS\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2715:  { EID_R_MAX_DISTANCE, \"Radio Max Distance (used for WDS)\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2716:  { EID_R_LOADGROUP_ID, \"Radio Load Group or Balance Group ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2717:  { EID_R_GROUP_BALANCING, \"Group Balancing Mode\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2718:  { EID_R_LC_CLIENT_COUNT_LIMIT, \"Radio Client Count Limit\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2719:  { EID_R_ENABLE_LDPC, \"Enable/Disable LDPC Coding: 0 = Disable, 1 = Enable\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2720:  { EID_R_ENABLE_TXSTBC, \"Enable/Disable Radio TxSTBC: 0 = Disable, 1 = Enable\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2721:  { EID_R_ENABLE_RXSTBC, \"Enable/Disable Radio RxSTBC: 0 = Disable, 1 = Enable\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2722:  { EID_R_ENABLE_TXBF, \"Set TxBF Mode\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2723:  { EID_R_TXBF_CLIENT_LIMIT, \"TxBF Client Limit\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2724:  { EID_R_INTERFERENCE_WAIT_TIME, \"Interference Wait Time\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2725:  { EID_R_LC_ASSOC_TRY_TIMEOUT, \"LC Association Try Time Out\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2726:  { EID_R_OPT_MCAST_PS, \"Enable/Disable Optimized Multicast Power Save: 0 = Disable, 1 = Enable\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2727:  { EID_R_MCAST_TO_UCAST_DELIVERY, \"Multicast to Unicast Delivery: 0 = Disable, 1 = Auto\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2728:  { EID_R_ADAPTABLE_RATE_FOR_MCAST, \"Enable/Disable Adaptable Rate for Multicast: 0 = Disable, 1 = Enable\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2729:  { EID_R_ANTENNA_PORT_ATT, \"Antenna Port ATT\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2730:  { EID_R_PROBE_SUP_ENABLE, \"Enable/Disable Probe Suppression: 0 = Disable, 1 = Enable\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2731:  { EID_R_PROBE_SUP_CAP, \"Probe Suppression Capacity\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2732:  { EID_R_PROBE_SUP_THRESH, \"Probe Suppression Threshold\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2733:  { EID_R_MU_NUM_RADAR_BACK, \"DFS Max Number of Clients Allow Return to Original Channel After DFS\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2734:  { EID_R_ADSP_RADIO_SHARE, \"ADSP Radio Share\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2735:  { EID_R_OCS_CHANNEL_ENABLE, \"Enable/Disable OCS\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2736:  { EID_R_OCS_CHANNEL_LIST, \"List Of OCS Channel\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2737:  { EID_R_OCS_SCAN_INTERVAL, \"OCS Scan Interval\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2738:  { EID_R_SENSOR_SCAN_MODE, \"Sensor Scan Mode\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2739:  { EID_R_SENSOR_SCAN_LIST, \"Sensor Scan List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0}",
          "2741: };",
          "2747: typedef enum",
          "2748: {",
          "2749:  EID_V_UNUSED = 0,",
          "2750:  EID_V_RADIO_ID,",
          "2751:  EID_V_VNS_ID,",
          "2752:  EID_V_TURBO_VOICE,",
          "2753:  EID_V_PROP_IE,",
          "2754:  EID_V_ENABLE_802_11_H,",
          "2755:  EID_V_POWER_BACKOFF,",
          "2756:  EID_V_BRIDGE_MODE,",
          "2757:  EID_V_VLAN_TAG,",
          "2758:  EID_V_PROCESS_IE_REQ,",
          "2759:  EID_V_ENABLE_U_APSD,",
          "2760:  EID_V_ADM_CTRL_VOICE,",
          "2761:  EID_V_ADM_CTRL_VIDEO,",
          "2762:  EID_V_QOS_UP_VALUE,",
          "2763:  EID_V_PRIORITY_OVERRIDE,",
          "2764:  EID_V_DSCP_OVERRIDE_VALUE,",
          "2765:  EID_V_ENABLE_802_11_E,",
          "2766:  EID_V_ENABLE_WMM,",
          "2767:  EID_V_LEGACY_CLIENT_PRIORITY,",
          "2768:  EID_V_SSID_ID,",
          "2769:  EID_V_SSID_BCAST_STRING,",
          "2770:  EID_V_SSID_SUPPRESS,",
          "2771:  EID_V_802_1_X_ENABLE,",
          "2772:  EID_V_802_1_X_DYN_REKEY,",
          "2773:  EID_V_WPA_ENABLE,",
          "2774:  EID_V_WPA_V2_ENABLE,",
          "2775:  EID_V_WPA_PASSPHRASE,",
          "2776:  EID_V_WPA_CIPHER_TYPE,",
          "2777:  EID_V_WPA_V2_CIPHER_TYPE,",
          "2778:  EID_V_WEP_KEY_INDEX,",
          "2779:  EID_V_WEP_DEFAULT_KEY_VALUE,",
          "2780:  EID_V_CHANNEL_REPORT,",
          "2781:  EID_V_WDS_SERVICE,",
          "2782:  EID_V_WDS_BSSID_PARENT,",
          "2783:  EID_V_WDS_BRIDGE,",
          "2784:  EID_V_OKC_ENABLED,",
          "2785:  EID_V_MU_ASSOC_RETRIES,",
          "2786:  EID_V_MU_ASSOC_TIMEOUT,",
          "2787:  EID_V_WDS_PARENT,",
          "2788:  EID_V_WDS_BACK_PARENT,",
          "2789:  EID_V_WDS_NAME,",
          "2790:  EID_V_SESSION_AVAIL,",
          "2791:  EID_V_UL_POLICER_ACTION,",
          "2792:  EID_V_DL_POLICER_ACTION,",
          "2793:  EID_V_ENABLE_802_11_K,",
          "2794:  EID_V_ENABLE_802_11_H_BG,",
          "2795:  EID_V_SITE_EGRESS_FILTER_MODE,",
          "2796:  EID_V_DEFAULT_IDLE_PRE_TIMEOUT,",
          "2797:  EID_V_DEFAULT_IDLE_POST_TIMEOUT,",
          "2798:  EID_V_IGNORE_COS,",
          "2799:  EID_V_RADIUS_SERVER_INDEX2,",
          "2800:  EID_V_MCAST_OPTIMIZATION,",
          "2801:  EID_V_MCAST_IGMP_TIMEOUT,",
          "2802:  EID_V_MCAST_FILTER_ENABLE,",
          "2803:  EID_V_FILTER_CONFIG_BLOCK,",
          "2804:  EID_V_DATA_REASSEMBLY_ENABLE,",
          "2805:  EID_V_UCAST_FILTER_ENABLE,",
          "2806:  EID_V_RATECTRL_CIR_UL,",
          "2807:  EID_V_RATECTRL_CIR_DL,",
          "2808:  EID_V_RATECTRL_CBS_UL,",
          "2809:  EID_V_RATECTRL_CBS_DL,",
          "2810:  EID_V_AIRTIME_FAIRNESS_ENABLE,",
          "2811:  EID_V_POWERSAVE_ENABLE,",
          "2812:  EID_V_GROUP_KP_SAVE_RETRY,",
          "2813:  EID_V_BALANCE_GROUP,",
          "2814:  EID_V_MESH_TYPE,",
          "2815:  EID_V_MESH_ROAMING_THRESHOLD,",
          "2816:  EID_V_COS,",
          "2817:  EID_V_RATE_LIMIT_RESOURCE_TBL,",
          "2818:  EID_V_AP_AUTH_CLIENT_MODES,",
          "2819:  EID_V_DEFAULT_POLICY_INDEX,",
          "2820:  EID_V_AUTH_POLICY_INDEX,",
          "2821:  EID_V_NONAUTH_POLICY_INDEX,",
          "2822:  EID_V_RADIUS_SERVER_INDEX,",
          "2823:  EID_V_NAS_IP,",
          "2824:  EID_V_NAS_ID,",
          "2825:  EID_V_VSA_SELMASK,",
          "2826:  EID_V_MBA_OPTIONS_MASK,",
          "2827:  EID_V_MBA_TIMEOUT_POLICY_KEY,",
          "2828:  EID_V_WLAN_SERVICE_NAME,",
          "2829:  EID_V_DEFAULT_SESSION_TIMEOUT,",
          "2830:  EID_V_RADIUS_CALLED_STATION_ID,",
          "2831:  EID_V_CAPTIVE_PORTAL,",
          "2832:  EID_V_COS_CONFIG_BLOCK,",
          "2833:  EID_V_TOPOLOGY_KEY,",
          "2834:  EID_V_MU_INIT_PERIOD_BEHAVIOUR,",
          "2835:  EID_V_DYNAMIC_EGRESS_VLANS,",
          "2836:  EID_V_STATIC_EGRESS_VLANS,",
          "2837:  EID_V_FLAGS,",
          "2838:  EID_V_DEFAULT_ACTION,",
          "2839:  EID_V_CONTAIN_TO_VLAN,",
          "2840:  EID_V_PVID_TOPOLOGY_KEY,",
          "2841:  EID_V_AP_REDIRECT,",
          "2842:  EID_V_ADM_CTRL_BE,",
          "2843:  EID_V_ADM_CTRL_BK,",
          "2844:  EID_V_11K_ENABLE,",
          "2845:  EID_V_11K_RM_CAP,",
          "2846:  EID_V_11R_ENABLE,",
          "2847:  EID_V_11R_R0KH_ID,",
          "2848:  EID_V_11R_MD_ID,",
          "2849:  EID_V_MGMT_FRAME_PROTECTION,",
          "2850:  EID_V_NETFLOW,",
          "2851:  EID_V_WLAN_DEFAULT_MIRRORN,",
          "2852:  EID_V_DEFAULT_MIRRORN,",
          "2853:  EID_V_11U_ANQP_BLOCK,",
          "2854:  EID_V_HS2_BLOCK,",
          "2855:  EID_V_APP_IDENTIFICATION_ENABLED,",
          "2856:  EID_V_PRIVACY,",
          "2857:  EID_V_11U_OSEN,",
          "2858:  EID_V_QOS_IN_USE,",
          "2859:  EID_V_CP_CONFIG_BLOCK,",
          "2860:  EID_V_CP_IDENTITY,",
          "2861:  EID_V_CP_PASSPHRASE,",
          "2862:  EID_V_CP_REDIRECT_URL,",
          "2863:  EID_V_CP_USE_HTTPS,",
          "2864:  EID_V_CP_AUTH_URL,",
          "2865:  EID_V_CP_FLAGS,",
          "2866:  EID_V_CP_AP_FQDN,",
          "2867:  EID_V_VNS_NAME,",
          "2868:  EID_V_LDAP_SERVER_INDEX,",
          "2869:  EID_V_AIRTIME_RESERVATION,",
          "2870:  EID_V_MU_DISCON_REQ_ENABLE",
          "2872: } wassp_subtlv_vns_config_type_t;",
          "2875: const TLV_PARSER_ENTRY tlvVnsConfigTable[]  =",
          "2876: {",
          "2877:  { EID_V_UNUSED, \"Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2878:  { EID_V_RADIO_ID, \"Radio ID\", TLV_TYPE_INDEX, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2879:  { EID_V_VNS_ID, \"VNS ID\", TLV_TYPE_INDEX, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2880:  { EID_V_TURBO_VOICE, \"Enable Turbo Voice\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2881:  { EID_V_PROP_IE, \"Process IE\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2882:  { EID_V_ENABLE_802_11_H, \"Enable 802.11H\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2883:  { EID_V_POWER_BACKOFF, \"Enable 802.11H Power Back Off\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2884:  { EID_V_BRIDGE_MODE, \"VNS Bridge Mode: 0 = Tunnel, 1 = Bridge, 3 = WDS, 10 = Any \", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2885:  { EID_V_VLAN_TAG, \"Vlan Tag: -1 = Untagged, -2 = Tunnel, 0 = WDS, 1-4094 = Tagged\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2886:  { EID_V_PROCESS_IE_REQ, \"Process IE Request\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2887:  { EID_V_ENABLE_U_APSD, \"Enable UAPSD Mode\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2888:  { EID_V_ADM_CTRL_VOICE, \"Enable Admission Control for Voice\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2889:  { EID_V_ADM_CTRL_VIDEO, \"Enable Admission Control for Video\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2890:  { EID_V_QOS_UP_VALUE, \"DSCP to UP Mapping\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2891:  { EID_V_PRIORITY_OVERRIDE, \"Enable DSCP to UP Override\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2892:  { EID_V_DSCP_OVERRIDE_VALUE, \"DSCP to UP Override value\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2893:  { EID_V_ENABLE_802_11_E, \"Enable 802.11E\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2894:  { EID_V_ENABLE_WMM, \"Enable WMM Mode\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2895:  { EID_V_LEGACY_CLIENT_PRIORITY, \"Enable Legacy Value\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2896:  { EID_V_SSID_ID, \"Internal VID Number Assigned by Controller\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2897:  { EID_V_SSID_BCAST_STRING, \"SSID String\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2898:  { EID_V_SSID_SUPPRESS, \"Enable Suppress SSID\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2899:  { EID_V_802_1_X_ENABLE, \"Enable 802.11X\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2900:  { EID_V_802_1_X_DYN_REKEY, \"VAP Group Key Update Interval\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2901:  { EID_V_WPA_ENABLE, \"Enable WPA\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2902:  { EID_V_WPA_V2_ENABLE, \"Enable WPA V2\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2903:  { EID_V_WPA_PASSPHRASE, \"WPA-PSK Passphrase\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2904:  { EID_V_WPA_CIPHER_TYPE, \"WPA Cipher Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2905:  { EID_V_WPA_V2_CIPHER_TYPE, \"WPA V2 Cipher Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2906:  { EID_V_WEP_KEY_INDEX, \"WEP Key Index\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2907:  { EID_V_WEP_DEFAULT_KEY_VALUE, \"WEP Default Key\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2908:  { EID_V_CHANNEL_REPORT, \"Channel Report\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2909:  { EID_V_WDS_SERVICE, \"WDS Service Type: 0 = None, 1 = Child, 2 = Parent, 3 = Both\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2910:  { EID_V_WDS_BSSID_PARENT, \"WDS Parent BSSID\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2911:  { EID_V_WDS_BRIDGE, \"Enable WDS Bridge: 0 = Unkown, 1 = Enable, 2 = Disable\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2912:  { EID_V_OKC_ENABLED, \"OKC/Preauthentication\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2913:  { EID_V_MU_ASSOC_RETRIES, \"MU Association Retries\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2914:  { EID_V_MU_ASSOC_TIMEOUT, \"MU Association Request Time Out\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2915:  { EID_V_WDS_PARENT, \"WDS Parent AP\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2916:  { EID_V_WDS_BACK_PARENT, \"WDS Backup Parent AP\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2917:  { EID_V_WDS_NAME, \"WDS AP Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2918:  { EID_V_SESSION_AVAIL, \"Enable Session Availability\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2919:  { EID_V_UL_POLICER_ACTION, \"Up Link Policer Action: Bit0 Set = Downgrade, Bit1 Set = Drop, Bit2 Set = Delete TSPEC\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2920:  { EID_V_DL_POLICER_ACTION, \"Down Link Policer Action: Bit0 Set = Downgrade, Bit1 Set = Drop, Bit2 Set = Delete TSPEC\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2921:  { EID_V_ENABLE_802_11_K, \"Enable 802.11K\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2922:  { EID_V_ENABLE_802_11_H_BG, \"Enable 802.11H For BG Radio\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2923:  { EID_V_SITE_EGRESS_FILTER_MODE, \"Site Egress Filter Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2924:  { EID_V_DEFAULT_IDLE_PRE_TIMEOUT, \"Default Idle Pre Timeout\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2925:  { EID_V_DEFAULT_IDLE_POST_TIMEOUT, \"Default Idle Post Timeout\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2926:  { EID_V_IGNORE_COS, \"Ignore CoS In This VNS\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2927:  { EID_V_RADIUS_SERVER_INDEX2, \"Secondary Radius Server Index\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2928:  { EID_V_MCAST_OPTIMIZATION, \"Multicast: IGMP Snooping Enable/Disable Per VNS\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2929:  { EID_V_MCAST_IGMP_TIMEOUT, \"Multicast: IGMP Snooping LDMG Entry Expire Timer In Minutes\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2930:  { EID_V_MCAST_FILTER_ENABLE, \"Enable Multicast Filtering at AP\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2931:  { EID_V_FILTER_CONFIG_BLOCK, \"Filter Config Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_FILTER, 0, 0, 0, 0, 0, 0, 0},",
          "2932:  { EID_V_DATA_REASSEMBLY_ENABLE, \"Enable Fragmentation\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2933:  { EID_V_UCAST_FILTER_ENABLE, \"Enable Unicast Filter\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2934:  { EID_V_RATECTRL_CIR_UL, \"Uplink CIR\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2935:  { EID_V_RATECTRL_CIR_DL, \"Downlink CIR\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2936:  { EID_V_RATECTRL_CBS_UL, \"Uplink CBS\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2937:  { EID_V_RATECTRL_CBS_DL, \"Downlink CBS\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2938:  { EID_V_AIRTIME_FAIRNESS_ENABLE, \"Enable Airtime Fairness\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2939:  { EID_V_POWERSAVE_ENABLE, \"Enable Power Save\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2940:  { EID_V_GROUP_KP_SAVE_RETRY, \"Group Power Save Retry\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2941:  { EID_V_BALANCE_GROUP, \"Enable Vlan Membership to The Radio Balance\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2942:  { EID_V_MESH_TYPE, \"Mesh Type: 0 = Static WDS, 1 = Dynamic WDS\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2943:  { EID_V_MESH_ROAMING_THRESHOLD, \"Mesh Roaming Threshold\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2944:  { EID_V_COS, \"AP COS\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2945:  { EID_V_RATE_LIMIT_RESOURCE_TBL, \"Rate Limit Resource List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2946:  { EID_V_AP_AUTH_CLIENT_MODES, \"Client Authentication Mode: Bit0 Set = MBA, Bit1 SET = Dot1x, Bit2 Set = CP\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2947:  { EID_V_DEFAULT_POLICY_INDEX, \"Default Policy Index\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2948:  { EID_V_AUTH_POLICY_INDEX, \"Authentication Policy Index\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2949:  { EID_V_NONAUTH_POLICY_INDEX, \"Non Authentication Policy Index\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2950:  { EID_V_RADIUS_SERVER_INDEX, \"Primary Radius Server\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2951:  { EID_V_NAS_IP, \"NAS IP\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2952:  { EID_V_NAS_ID, \"NAS Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2953:  { EID_V_VSA_SELMASK, \"VSA Mask\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2954:  { EID_V_MBA_OPTIONS_MASK, \"MBA Options  Mask\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2955:  { EID_V_MBA_TIMEOUT_POLICY_KEY, \"MBA Timeout Policy Key\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2956:  { EID_V_WLAN_SERVICE_NAME, \"WLAN Service Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2957:  { EID_V_DEFAULT_SESSION_TIMEOUT, \"Default Session Timeout\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2958:  { EID_V_RADIUS_CALLED_STATION_ID, \"Radius Called Station ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2959:  { EID_V_CAPTIVE_PORTAL, \"Enable Captive Portal\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2960:  { EID_V_COS_CONFIG_BLOCK, \"COS Configuration Block Index\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2961:  { EID_V_TOPOLOGY_KEY, \"Topology Key\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2962:  { EID_V_MU_INIT_PERIOD_BEHAVIOUR, \"MU Init Behaviour: 0 = Discard Non Auth Traffic, 1 = Default Policy\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2963:  { EID_V_DYNAMIC_EGRESS_VLANS, \"Dynamic Egress Vlan list\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2964:  { EID_V_STATIC_EGRESS_VLANS, \"Static Egress Vlan list\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2965:  { EID_V_FLAGS, \"Policy Flags Based on Analyzing The Rules Inside The Policy\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2966:  { EID_V_DEFAULT_ACTION, \"Default Action\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2967:  { EID_V_CONTAIN_TO_VLAN, \"Default Contain Vlan\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2968:  { EID_V_PVID_TOPOLOGY_KEY, \"PVID Topology Key\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2969:  { EID_V_AP_REDIRECT, \"AP Redirect Mode: -1 = Invalid, 0 = Disable, 1 = At Controller, 2 = At AP\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2970:  { EID_V_ADM_CTRL_BE, \"Enable Admission Control For Best Effort\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2971:  { EID_V_ADM_CTRL_BK, \"Enable Admission Control For Background\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2972:  { EID_V_11K_ENABLE, \"Enable 802.11K\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2973:  { EID_V_11K_RM_CAP, \"802.11K RM Capacity\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2974:  { EID_V_11R_ENABLE, \"Enable 802.11R\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2975:  { EID_V_11R_R0KH_ID, \"802.11R R0 Key Holder ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2976:  { EID_V_11R_MD_ID, \"802.11R Mobility Domain ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2977:  { EID_V_MGMT_FRAME_PROTECTION, \"Protected Mangement Frames: 0 = Enable, 1 = Disable, 2 = Require\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2978:  { EID_V_NETFLOW, \"Control for NetFlow: 1 = Enable, 2 = Disable\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2979:  { EID_V_WLAN_DEFAULT_MIRRORN, \"V_WLAN_DEFAULT_MIRRORN\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2980:  { EID_V_DEFAULT_MIRRORN, \"WLAN Default MirrorN: 0 = None, 1 = Prohibited, 2 = Enable, 3 = Enable TCP and UDP Both Direction, 4 = Enable TCP and UDP In Direction \", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2981:  { EID_V_11U_ANQP_BLOCK, \"802.11U ANQP Config Block\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2982:  { EID_V_HS2_BLOCK, \"HS2 Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2983:  { EID_V_APP_IDENTIFICATION_ENABLED, \"Enable/Disable Application Identification\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2984:  { EID_V_PRIVACY, \"Privacy\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2985:  { EID_V_11U_OSEN, \"Enable OSU Server-Only Authenticated L2 Encryption Network\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2986:  { EID_V_QOS_IN_USE, \"Bitmask Used to Select DHCP Values for QoS Maping\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2987:  { EID_V_CP_CONFIG_BLOCK, \"CP Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_V_CP_CONFIG_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "2988:  { EID_V_CP_IDENTITY, \"User Identity\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2989:  { EID_V_CP_PASSPHRASE, \"Shared Secret in Encryption Form\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2990:  { EID_V_CP_REDIRECT_URL, \"Redirection Url for Non-auth Policy\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2991:  { EID_V_CP_USE_HTTPS, \"Enable HTTPS\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2992:  { EID_V_CP_AUTH_URL, \"Where to Redirect MU After Successful Authentication\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2993:  { EID_V_CP_FLAGS, \"Bitmap for Captive Portal Flags\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2994:  { EID_V_CP_AP_FQDN, \"AP FQDN Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2995:  { EID_V_VNS_NAME, \"VNS Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2996:  { EID_V_LDAP_SERVER_INDEX, \"LDAP Server for CP Authentication\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "2997:  { EID_V_AIRTIME_RESERVATION, \"Assign Airtime to VNS  In Percentage In Steps of 10%\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0}",
          "2999: };",
          "3006: typedef enum",
          "3007: {",
          "3008:  EID_V_STATS_UNUSED0,",
          "3009:  EID_V_STATS_VNSID,",
          "3010:  EID_V_STATS_RADCL_REQS,",
          "3011:  EID_V_STATS_RADCL_FAILED,",
          "3012:  EID_V_STATS_RADCL_REJECTS,",
          "3013:  EID_V_STATS_VNS_ENTRY = 118",
          "3014: } wassp_subtlv_vns_status_type_t;",
          "3017: const TLV_PARSER_ENTRY tlvVnsStatusTable[]  =",
          "3018: {",
          "3019:  { EID_V_STATS_UNUSED0, \"VNS Stats Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3020:  { EID_V_STATS_VNSID, \"VNS ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3021:  { EID_V_STATS_RADCL_REQS, \"VNS Radius Stats Request\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3022:  { EID_V_STATS_RADCL_FAILED, \"VNS Radius Stats Failed\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3023:  { EID_V_STATS_RADCL_REJECTS, \"VNS Radius Stats Reject\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3024:  { EID_V_STATS_VNS_ENTRY, \"VNS Stats Entry\", TLV_TYPE_BLOCK_TLV, TAB_STATS_VNS, 0, 0, 0, 0, 0, 0, 0}",
          "3026: };",
          "3034: typedef enum",
          "3035: {",
          "3036:  EID_RADIUS_ID = 0,",
          "3037:  EID_RADIUS_IP_NAME,",
          "3038:  EID_RADIUS_SHAREDSECRET,",
          "3039:  EID_RADIUS_PROTOCOL,",
          "3040:  EID_RADIUS_PORT,",
          "3041:  EID_RADIUS_TIMEOUT,",
          "3042:  EID_RADIUS_RETRY,",
          "3043:  EID_RADIUS_MBA_MAC_FORMAT,",
          "3044:  EID_RADIUS_MBA_PASSWORD",
          "3046: } wassp_subtlv_radius_config_type_t;",
          "3048: const TLV_PARSER_ENTRY tlvRadiusConfigTable[]  =",
          "3049: {",
          "3050:  { EID_RADIUS_ID, \"Radius ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3051:  { EID_RADIUS_IP_NAME, \"Radius Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3052:  { EID_RADIUS_SHAREDSECRET, \"Radius Shared Secret\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3053:  { EID_RADIUS_PROTOCOL, \"Radius Protocol: 0 = PAP, 1 = CHAP, 2 = MS CHAP, 3 = MS CHAP2\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3054:  { EID_RADIUS_PORT, \"Radius Port\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3055:  { EID_RADIUS_TIMEOUT, \"Radius Timeout\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3056:  { EID_RADIUS_RETRY, \"Radius Retry Count\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3057:  { EID_RADIUS_MBA_MAC_FORMAT, \"Radius MBA MAC Format\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3058:  { EID_RADIUS_MBA_PASSWORD, \"Radius MBA Password\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3060: };",
          "3065: typedef enum",
          "3066: {",
          "3067:  EID_V_UNUSED0,",
          "3068:  EID_V_RADSRV_SRV_ID,",
          "3069:  EID_V_RADSRV_SRV_TYPE,",
          "3070:  EID_V_RADSRV_SRV_PORT,",
          "3071:  EID_V_RADSRV_SRV_RETRY,",
          "3072:  EID_V_RADSRV_SRV_TIMEOUT,",
          "3073:  EID_V_RADSRV_AUTH_TYPE,",
          "3074:  EID_V_RADSRV_PASSWORD,",
          "3075:  EID_V_RADSRV_NAS_IP,",
          "3076:  EID_V_RADSRV_NAS_ID",
          "3078: } wassp_subtlv_radius_server_config_type_t;",
          "3080: const TLV_PARSER_ENTRY tlvRadiusServerConfigTable[]  =",
          "3081: {",
          "3082:  { EID_V_UNUSED0, \"V_UNUSED0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3083:  { EID_V_RADSRV_SRV_ID, \"Radius Server ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3084:  { EID_V_RADSRV_SRV_TYPE, \"Radius Server Type\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3085:  { EID_V_RADSRV_SRV_PORT, \"Radius Server Port\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3086:  { EID_V_RADSRV_SRV_RETRY, \"Radius Server Retry\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3087:  { EID_V_RADSRV_SRV_TIMEOUT, \"Radius Server Timeout\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3088:  { EID_V_RADSRV_AUTH_TYPE, \"Radius Server Authentication Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3089:  { EID_V_RADSRV_PASSWORD, \"Radius Server Password\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3090:  { EID_V_RADSRV_NAS_IP, \"Radius Server NAS IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3091:  { EID_V_RADSRV_NAS_ID, \"Radius Server NAS ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3092: };",
          "3095: typedef enum",
          "3096: {",
          "3097:  EID_V_FILTER_UNUSED_0,",
          "3098:  EID_V_FILTER_NAME,",
          "3099:  EID_V_FILTER_RULES,",
          "3100:  EID_V_FILTER_TYPE,",
          "3101:  EID_V_FILTER_KEY,",
          "3102:  EID_V_SITE_FILTER_RULES,",
          "3103:  EID_V_FILTER_BYPASS_BMCAST,",
          "3104:  EID_V_FILTER_RULES_EXT_BLOCK,",
          "3105:  EID_V_SITE_FILTER_RULES_EXT_BLOCK",
          "3108: } wassp_subtlv_filter_block_type_t;",
          "3111: const TLV_PARSER_ENTRY tlvFilterConfigTable[]  =",
          "3112: {",
          "3113:  { EID_V_FILTER_UNUSED_0, \"Filter Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3114:  { EID_V_FILTER_NAME, \"Filter Rule Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3115:  { EID_V_FILTER_RULES, \"Filter Rule Bit Mask\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3116:  { EID_V_FILTER_TYPE, \"Filter Rule Type\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3117:  { EID_V_FILTER_KEY, \"Filter Rule Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3118:  { EID_V_SITE_FILTER_RULES, \"Site Filter Rules\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3119:  { EID_V_FILTER_BYPASS_BMCAST, \"Bypass Broadcast and Multicast\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3120:  { EID_V_FILTER_RULES_EXT_BLOCK, \"Filter Rule Extended Block\", TLV_TYPE_BLOCK_TLV, TAB_V_FILTER_RULES_EXT_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3121:  { EID_V_SITE_FILTER_RULES_EXT_BLOCK, \"Site Filter Rule Extended Block\", TLV_TYPE_BLOCK_TLV, TAB_V_SITE_FILTER_RULES_EXT_BLOCK, 0, 0, 0, 0, 0, 0, 0}",
          "3122: };",
          "3126: typedef enum",
          "3127: {",
          "3128:  EID_V_FILTER_UNUSED0,",
          "3129:  EID_V_FILTER_RULE_FIXED_APP_ID,",
          "3130:  EID_V_FILTER_RULE_EXT_ACT_FLAGS,",
          "3131:  EID_V_FILTER_RULES_APP_SIG_GROUP_ID,",
          "3132:  EID_V_FILTER_RULES_APP_SIG_DISP_ID,",
          "3133:  EID_V_FILTER_RULES_IPV6_ADDR",
          "3135: } wassp_subtlv_filter_rule_ext_block_type_t;",
          "3139: const TLV_PARSER_ENTRY tlvFilterRuleExtConfigTable[]  =",
          "3140: {",
          "3141:  { EID_V_FILTER_UNUSED0, \"Filter Rule Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3142:  { EID_V_FILTER_RULE_FIXED_APP_ID, \"Fixed Application Rule ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3143:  { EID_V_FILTER_RULE_EXT_ACT_FLAGS, \"Filter Rule Ext Act Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3144:  { EID_V_FILTER_RULES_APP_SIG_GROUP_ID, \"Application Signature group ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3145:  { EID_V_FILTER_RULES_APP_SIG_DISP_ID, \"Application Signature Display ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3146:  { EID_V_FILTER_RULES_IPV6_ADDR, \"Filter Rule IPV6 List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3148: };",
          "3151: typedef enum",
          "3152: {",
          "3153:  EID_V_SITE_FILTER_UNUSED0,",
          "3154:  EID_V_SITE_FILTER_RULE_FIXED_APP_ID,",
          "3155:  EID_V_SITE_FILTER_RULE_EXT_ACT_FLAGS,",
          "3156:  EID_V_SITE_FILTER_RULES_APP_SIG_GROUP_ID,",
          "3157:  EID_V_SITE_FILTER_RULES_APP_SIG_DISP_ID,",
          "3158:  EID_V_SITE_FILTER_RULES_IPV6_ADDR",
          "3160: } wassp_subtlv_site_filter_rule_ext_block_type_t;",
          "3164: const TLV_PARSER_ENTRY tlvSiteFilterRuleExtConfigTable[]  =",
          "3165: {",
          "3166:  { EID_V_SITE_FILTER_UNUSED0, \"Site Filter Rule Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3167:  { EID_V_SITE_FILTER_RULE_FIXED_APP_ID, \"Site Fixed Application Rule ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3168:  { EID_V_SITE_FILTER_RULE_EXT_ACT_FLAGS, \"Site Filter Rule Ext Act Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3169:  { EID_V_SITE_FILTER_RULES_APP_SIG_GROUP_ID, \"Site Application Signature group ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3170:  { EID_V_SITE_FILTER_RULES_APP_SIG_DISP_ID, \"Site Application Signature Display ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3171:  { EID_V_SITE_FILTER_RULES_IPV6_ADDR, \"Site Filter Rule IPV6 List\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3172: };",
          "3178: typedef enum",
          "3179: {",
          "3180:  EID_BSSID2IP_UNUSED0,",
          "3181:  EID_BSSID2IP_BSSID,",
          "3182:  EID_BSSID2IP_IP",
          "3184: } wassp_subtlv_bssid2ip_block_type_t;",
          "3187: const TLV_PARSER_ENTRY tlvBssid2ipConfigTable[]  =",
          "3188: {",
          "3189:  { EID_BSSID2IP_UNUSED0, \"BSSID2IP Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3190:  { EID_BSSID2IP_BSSID, \"BSSID2IP BSSID\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3191:  { EID_BSSID2IP_IP, \"BSSID2IP IP Address\", TLV_TYPE_IP_ADDR, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3193: };",
          "3196: typedef enum",
          "3197: {",
          "3198:  EID_G_SITE_ENABLE = 4,",
          "3199:  EID_G_SITE_NAME,",
          "3200:  EID_G_RADIUS_CLIENT_AT_AP,",
          "3201:  EID_G_HYBRID_POLICY_MODE,",
          "3202:  EID_G_LOCATION,",
          "3203:  EID_G_INVALID_POLICY,",
          "3204:  EID_NAC_MBA_LOCAL_AUTH,",
          "3205:  EID_NAC_RULE_ARRAY,",
          "3206:  EID_NAC_RULE_BLOCK,",
          "3207:  EID_NAC_RULE_FLAGS,",
          "3208:  EID_NAC_RULE_AUTH_TYPE,",
          "3209:  EID_NAC_RULE_USER_USERNAME_GROUP_KEY,",
          "3210:  EID_NAC_RULE_USER_LDAPUSER_GROUP_KEY,",
          "3211:  EID_NAC_RULE_ENDSYS_HOSTNAME_GROUP_KEY,",
          "3212:  EID_NAC_RULE_ENDSYS_LDAPHOST_GROUP_KEY,",
          "3213:  EID_NAC_RULE_ENDSYS_IPv4_GROUP_KEY,",
          "3214:  EID_NAC_RULE_ENDSYS_MAC_GROUP_KEY,",
          "3215:  EID_NAC_RULE_DEV_TYPE_GROUP_KEY,",
          "3216:  EID_NAC_RULE_LOCATION_GROUP_KEY,",
          "3217:  EID_NAC_RULE_TIME_GROUP_KEY,",
          "3218:  EID_NAC_RULE_POLICY_KEY,",
          "3219:  EID_NAC_LDAP_USER_GROUP_ARRAY,",
          "3220:  EID_NAC_LDAP_USER_GROUP_BLOCK,",
          "3221:  EID_NAC_LDAP_USER_GROUP_KEY,",
          "3222:  EID_NAC_LDAP_USER_GROUP_MATCH_MODE,",
          "3223:  EID_NAC_LDAP_USER_ATTR_ARRAY,",
          "3224:  EID_NAC_LDAP_USER_ATTR_BLOCK,",
          "3225:  EID_NAC_LDAP_USER_ATTR_KEY,",
          "3226:  EID_NAC_LDAP_USER_ATTR_VAL,",
          "3227:  EID_NAC_USERNAME_GROUP_ARRAY,",
          "3228:  EID_NAC_USERNAME_GROUP_BLOCK,",
          "3229:  EID_NAC_USERNAME_GROUP_KEY,",
          "3230:  EID_NAC_USERNAME_ARRAY,",
          "3231:  EID_NAC_USERNAME,",
          "3232:  EID_NAC_HOSTNAME_GROUP_ARRAY,",
          "3233:  EID_NAC_HOSTNAME_GROUP_BLOCK,",
          "3234:  EID_NAC_HOSTNAME_GROUP_KEY,",
          "3235:  EID_NAC_HOSTNAME_ARRAY,",
          "3236:  EID_NAC_HOSTNAME,",
          "3237:  EID_NAC_HOST_IPv4_GROUP_ARRAY,",
          "3238:  EID_NAC_HOST_IPv4_GROUP_BLOCK,",
          "3239:  EID_NAC_HOST_IPv4_GROUP_KEY,",
          "3240:  EID_NAC_HOST_IPv4_ARRAY,",
          "3241:  EID_NAC_HOST_IPv4_ADDRESS,",
          "3242:  EID_NAC_LDAP_HOST_GROUP_ARRAY,",
          "3243:  EID_NAC_LDAP_HOST_GROUP_BLOCK,",
          "3244:  EID_NAC_LDAP_HOST_GROUP_KEY,",
          "3245:  EID_NAC_LDAP_HOST_GROUP_MATCH_MODE,",
          "3246:  EID_NAC_LDAP_HOST_ATTR_ARRAY,",
          "3247:  EID_NAC_LDAP_HOST_ATTR_BLOCK,",
          "3248:  EID_NAC_LDAP_HOST_ATTR_KEY,",
          "3249:  EID_NAC_LDAP_HOST_ATTR_VAL,",
          "3250:  EID_NAC_HOST_MAC_GROUP_ARRAY,",
          "3251:  EID_NAC_HOST_MAC_GROUP_BLOCK,",
          "3252:  EID_NAC_HOST_MAC_GROUP_KEY,",
          "3253:  EID_NAC_HOST_MAC_ARRAY,",
          "3254:  EID_NAC_HOST_MAC,",
          "3255:  EID_NAC_DEV_TYPE_GROUP_ARRAY,",
          "3256:  EID_NAC_DEV_TYPE_GROUP_BLOCK,",
          "3257:  EID_NAC_DEV_TYPE_GROUP_KEY,",
          "3258:  EID_NAC_DEV_TYPE_ARRAY,",
          "3259:  EID_NAC_DEV_TYPE_ATTRIBUTE,",
          "3260:  EID_NAC_TIME_GROUP_ARRAY,",
          "3261:  EID_NAC_TIME_GROUP_BLOCK,",
          "3262:  EID_NAC_TIME_RANGE_GROUP_KEY,",
          "3263:  EID_NAC_TIME_RANGE_ARRAY,",
          "3264:  EID_NAC_TIME_RANGE,",
          "3265:  EID_NAC_LOC_GROUP_ARRAY,",
          "3266:  EID_NAC_LOC_GROUP_BLOCK,",
          "3267:  EID_NAC_LOC_GROUP_KEY,",
          "3268:  EID_NAC_LOC_ATTR_ARRAY,",
          "3269:  EID_SITE_RATE_CONTROL_BLOCK,",
          "3270:  EID_NAC_LOC_ATTR_BLOCK,",
          "3271:  EID_NAC_LOC_SSID,",
          "3272:  EID_NAC_LOC_APID,",
          "3273:  EID_NAC_LDAP_SRV_ARRAY,",
          "3274:  EID_SITE_TOPOLOGY_BLOCK,",
          "3275:  EID_NAC_LDAP_SRV_BLOCK,",
          "3276:  EID_NAC_LDAP_SRV_KEY,",
          "3277:  EID_NAC_LDAP_SRV_URL,",
          "3278:  EID_NAC_LDAP_SRV_TIMEOUT,",
          "3279:  EID_NAC_LDAP_USER_SRCH_ROOT,",
          "3280:  EID_NAC_LDAP_HOST_SRCH_ROOT,",
          "3281:  EID_NAC_LDAP_OU_SRCH_ROOT,",
          "3282:  EID_NAC_LDAP_USER_OBJ_CLASS,",
          "3283:  EID_NAC_LDAP_USER_SRCH_ATTR,",
          "3284:  EID_NAC_LDAP_HOST_OBJ_CLASS,",
          "3285:  EID_NAC_LDAP_HOST_SRCH_ATTR,",
          "3286:  EID_NAC_LDAP_FLAGS,",
          "3287:  EID_NAC_LDAP_USER_AUTH_TYPE,",
          "3288:  EID_NAC_LDAP_OU_OBJ_CLASS_ARRAY,",
          "3289:  EID_NAC_LDAP_OU_OBJ_CLASS,",
          "3290:  EID_NAC_KRB_REALM_ARRAY,",
          "3291:  EID_NAC_KRB_REALM_BLOCK,",
          "3292:  EID_SITE_POLICY_BLOCK,",
          "3293:  EID_SITE_FILTER_CONFIG_BLOCK,",
          "3294:  EID_SITE_COS_CONFIG_BLOCK,",
          "3295:  EID_SITE_LOCATION_BASED_LOOKUP_BLOCK,",
          "3296:  EID_SITE_RADIUS_SERVER_BLOCK,",
          "3297:  EID_NAC_KRB_KDCS,",
          "3298:  EID_NAC_LDAP_SERVER_INDEX,",
          "3299:  EID_NAC_SERVER_CONFIG_ARRAY,",
          "3300:  EID_NAC_SERVER_CONFIG_BLOCK,",
          "3301:  EID_NAC_SERVER_FQDN,",
          "3302:  EID_NAC_SERVER_IPV4_ADDR,",
          "3303:  EID_NAC_SERVER_DOMAIN,",
          "3304:  EID_NAC_SERVER_ADMIN_ID,",
          "3305:  EID_NAC_SERVER_ADMIN_PWD,",
          "3306:  EID_NAC_SERVER_WORKGROUP,",
          "3307:  EID_NAC_RULE_ENDSYS_WEB_AUTH_USER_GROUP_KEY,",
          "3308:  EID_NAC_WEB_AUTH_USER_GROUP_ARRAY,",
          "3309:  EID_NAC_WEB_AUTH_USER_GROUP_BLOCK,",
          "3310:  EID_NAC_WEB_AUTH_USER_GROUP_KEY,",
          "3311:  EID_NAC_WEB_AUTH_USER_ARRAY,",
          "3312:  EID_G_SITE_MAX",
          "3314: } wassp_subtlv_site_config_type_t;",
          "3316: const TLV_PARSER_ENTRY tlvSiteConfigTable[]  =",
          "3317: {",
          "3318:  { EID_G_SITE_ENABLE, \"Enable Site\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3319:  { EID_G_SITE_NAME, \"Site Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3320:  { EID_G_RADIUS_CLIENT_AT_AP, \"Enables Radius Client At AP\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3321:  { EID_G_HYBRID_POLICY_MODE, \"Hybrid Policy Mode\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3322:  { EID_G_LOCATION, \"Location\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3323:  { EID_G_INVALID_POLICY, \"Invalid Policy Action\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3324:  { EID_NAC_MBA_LOCAL_AUTH, \"NAC MBA Authentication Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3325:  { EID_NAC_RULE_ARRAY, \"Array of NAC Rule Structures\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3326:  { EID_NAC_RULE_BLOCK, \"NAC Rule Configuration Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3327:  { EID_NAC_RULE_FLAGS, \"Negate Flags For Different Groups\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3328:  { EID_NAC_RULE_AUTH_TYPE, \"Authentication Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3329:  { EID_NAC_RULE_USER_USERNAME_GROUP_KEY, \"Key Identifier of User Name Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3330:  { EID_NAC_RULE_USER_LDAPUSER_GROUP_KEY, \"Key identifier of LDAP User Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3331:  { EID_NAC_RULE_ENDSYS_HOSTNAME_GROUP_KEY, \"Key Identifier of End System Host Name Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3332:  { EID_NAC_RULE_ENDSYS_LDAPHOST_GROUP_KEY, \"Key Identifier of End System LDAP Host Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3333:  { EID_NAC_RULE_ENDSYS_IPv4_GROUP_KEY, \"Key Identifier of End System IPv4 Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3334:  { EID_NAC_RULE_ENDSYS_MAC_GROUP_KEY, \"Key Identifier of End System Mac Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3335:  { EID_NAC_RULE_DEV_TYPE_GROUP_KEY, \"Key Identifier of Device\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3336:  { EID_NAC_RULE_LOCATION_GROUP_KEY, \"Key Identifier of Location Group\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3337:  { EID_NAC_RULE_TIME_GROUP_KEY, \"Key Identifier of Time Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3338:  { EID_NAC_RULE_POLICY_KEY, \"Policy ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3339:  { EID_NAC_LDAP_USER_GROUP_ARRAY, \"NAC LDAP User Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3340:  { EID_NAC_LDAP_USER_GROUP_BLOCK, \"NAC LDAP User Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3341:  { EID_NAC_LDAP_USER_GROUP_KEY, \"Key Identifier of Specific LDAP User Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3342:  { EID_NAC_LDAP_USER_GROUP_MATCH_MODE, \"Match Mode of LDAP User Group\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3343:  { EID_NAC_LDAP_USER_ATTR_ARRAY, \"NAC LDAP User Attribute Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3344:  { EID_NAC_LDAP_USER_ATTR_BLOCK, \"NAC LDAP User Attribute Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3345:  { EID_NAC_LDAP_USER_ATTR_KEY, \"LDAP User Attribute Key\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3346:  { EID_NAC_LDAP_USER_ATTR_VAL, \"LDAP User Attribute Value\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3347:  { EID_NAC_USERNAME_GROUP_ARRAY, \"NAC Username Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3348:  { EID_NAC_USERNAME_GROUP_BLOCK, \"NAC Username Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3349:  { EID_NAC_USERNAME_GROUP_KEY, \"Key Identifier of Specific Username Group\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3350:  { EID_NAC_USERNAME_ARRAY, \"NAC Username Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3351:  { EID_NAC_USERNAME, \"NAC Username\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3352:  { EID_NAC_HOSTNAME_GROUP_ARRAY, \"NAC Host Name Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3353:  { EID_NAC_HOSTNAME_GROUP_BLOCK, \"NAC Host Name Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3354:  { EID_NAC_HOSTNAME_GROUP_KEY, \"NAC Host Name Group Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3355:  { EID_NAC_HOSTNAME_ARRAY, \"NAC Host Name Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3356:  { EID_NAC_HOSTNAME, \"NAC Host Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3357:  { EID_NAC_HOST_IPv4_GROUP_ARRAY, \"Array of Host By IPv4 Groups\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3358:  { EID_NAC_HOST_IPv4_GROUP_BLOCK, \"NAC Host IPv4 Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3359:  { EID_NAC_HOST_IPv4_GROUP_KEY, \"NAC Host IPv4 Group key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3360:  { EID_NAC_HOST_IPv4_ARRAY, \"NAC Host IPv4 Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3361:  { EID_NAC_HOST_IPv4_ADDRESS, \"NAC Host IPv4 Address\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3362:  { EID_NAC_LDAP_HOST_GROUP_ARRAY, \"NAC LDAP Host Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3363:  { EID_NAC_LDAP_HOST_GROUP_BLOCK, \"NAC LDAP Host Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3364:  { EID_NAC_LDAP_HOST_GROUP_KEY, \"NAC LDAP Host Group Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3365:  { EID_NAC_LDAP_HOST_GROUP_MATCH_MODE, \"Match Mode of Specific LDAP Host Group\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3366:  { EID_NAC_LDAP_HOST_ATTR_ARRAY, \"NAC LDAP Host Attribute Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3367:  { EID_NAC_LDAP_HOST_ATTR_BLOCK, \"NAC LDAP Host Attribute Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3368:  { EID_NAC_LDAP_HOST_ATTR_KEY, \"NAC LDAP Host Attribute Key\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3369:  { EID_NAC_LDAP_HOST_ATTR_VAL, \"NAC LDAP Host Attribute value\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3370:  { EID_NAC_HOST_MAC_GROUP_ARRAY, \"NAC Host Mac Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3371:  { EID_NAC_HOST_MAC_GROUP_BLOCK, \"NAC Host Mac Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3372:  { EID_NAC_HOST_MAC_GROUP_KEY, \"NAC Host Mac Group Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3373:  { EID_NAC_HOST_MAC_ARRAY, \"NAC Host Mac Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3374:  { EID_NAC_HOST_MAC, \"NAC Host Mac\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3375:  { EID_NAC_DEV_TYPE_GROUP_ARRAY, \"NAC Device Type Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3376:  { EID_NAC_DEV_TYPE_GROUP_BLOCK, \"NAC Device Type Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3377:  { EID_NAC_DEV_TYPE_GROUP_KEY, \"NAC Device Type Group Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3378:  { EID_NAC_DEV_TYPE_ARRAY, \"NAC Device Type Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3379:  { EID_NAC_DEV_TYPE_ATTRIBUTE, \"NAC Device Type Attribute\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3380:  { EID_NAC_TIME_GROUP_ARRAY, \"NAC Time Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3381:  { EID_NAC_TIME_GROUP_BLOCK, \"NAC Time Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3382:  { EID_NAC_TIME_RANGE_GROUP_KEY, \"NAC Time Group Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3383:  { EID_NAC_TIME_RANGE_ARRAY, \"NAC Time Range Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3384:  { EID_NAC_TIME_RANGE, \"NAC Time Range\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3385:  { EID_NAC_LOC_GROUP_ARRAY, \"NAC Location Group Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3386:  { EID_NAC_LOC_GROUP_BLOCK, \"NAC Location Group Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3387:  { EID_NAC_LOC_GROUP_KEY, \"NAC Location Group Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3388:  { EID_NAC_LOC_ATTR_ARRAY, \"NAC Location Attribute Array\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3389:  { EID_SITE_RATE_CONTROL_BLOCK, \"Site Rate Control Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3390:  { EID_NAC_LOC_ATTR_BLOCK, \"NAC Location Attribute Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3391:  { EID_NAC_LOC_SSID, \"NAC Location SSID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3392:  { EID_NAC_LOC_APID, \"NAC Location AP ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3393:  { EID_NAC_LDAP_SRV_ARRAY, \"NAC Array of LDAP Servers\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3394:  { EID_SITE_TOPOLOGY_BLOCK, \"Site Topology Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3395:  { EID_NAC_LDAP_SRV_BLOCK, \"NAC LDAP Server Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3396:  { EID_NAC_LDAP_SRV_KEY, \"NAC LDAP Server Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3397:  { EID_NAC_LDAP_SRV_URL, \"NAC LDAP Server Url\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3398:  { EID_NAC_LDAP_SRV_TIMEOUT, \"Timeout for Response From LDAP Server\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3399:  { EID_NAC_LDAP_USER_SRCH_ROOT, \"LDAP Server User Search Root\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3400:  { EID_NAC_LDAP_HOST_SRCH_ROOT, \"LDAP Server Hostname Search Root\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3401:  { EID_NAC_LDAP_OU_SRCH_ROOT, \"LDAP Server OU Search Root\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3402:  { EID_NAC_LDAP_USER_OBJ_CLASS, \"LDAP Server User Object Class\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3403:  { EID_NAC_LDAP_USER_SRCH_ATTR, \"LDAP Server User Search Attribute\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3404:  { EID_NAC_LDAP_HOST_OBJ_CLASS, \"LDAP Server Host object Class\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3405:  { EID_NAC_LDAP_HOST_SRCH_ATTR, \"LDAP Server Host Search Attribute\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3406:  { EID_NAC_LDAP_FLAGS, \"LDAP Server Flag\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3407:  { EID_NAC_LDAP_USER_AUTH_TYPE, \"User Authentication Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3408:  { EID_NAC_LDAP_OU_OBJ_CLASS_ARRAY, \"Array of NAC LDAP Organizational Units (OU) Object Classes\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3409:  { EID_NAC_LDAP_OU_OBJ_CLASS, \"NAC LDAP Organizational Units (OU) Object Class\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3410:  { EID_NAC_KRB_REALM_ARRAY, \"Array of NAC Kerberos Realms\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3411:  { EID_NAC_KRB_REALM_BLOCK, \"NAC Kerberos Realm Block\", TLV_TYPE_BLOCK_TLV, TAB_CONFIG_SITE, 0, 0, 0, 0, 0, 0, 0},",
          "3412:  { EID_SITE_POLICY_BLOCK, \"Policy Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3413:  { EID_SITE_FILTER_CONFIG_BLOCK, \"Filter Configuration Block\",TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3414:  { EID_SITE_COS_CONFIG_BLOCK, \"COS Configuration Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3415:  { EID_SITE_LOCATION_BASED_LOOKUP_BLOCK, \"Location Based Lookup Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3416:  { EID_SITE_RADIUS_SERVER_BLOCK, \"Radius Server Block\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3417:  { EID_NAC_KRB_KDCS, \"List of Kerberos KDC FQDN\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3418:  { EID_NAC_LDAP_SERVER_INDEX, \"LDAP Server for MU Autherization\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3419:  { EID_NAC_SERVER_CONFIG_ARRAY, \"Array of NAC Authentication Server Configurations\", TLV_TYPE_BLOCK_TLV, TAB_NAC_SERVER_CONFIG_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "3420:  { EID_NAC_SERVER_CONFIG_BLOCK, \"NAC Authentication Server Block\", TLV_TYPE_BLOCK_TLV, TAB_NAC_SERVER_CONFIG_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3421:  { EID_NAC_SERVER_FQDN, \"Authentication Server FQDN\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3422:  { EID_NAC_SERVER_IPV4_ADDR, \"Authentication Server IPv4 address\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3423:  { EID_NAC_SERVER_DOMAIN, \"Authentication Server Domain\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3424:  { EID_NAC_SERVER_ADMIN_ID, \"NAC Authentication Server Admin ID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3425:  { EID_NAC_SERVER_ADMIN_PWD, \"NAC Authentication Server Admin Password\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3426:  { EID_NAC_SERVER_WORKGROUP, \"NAC Authentication Server Workgroup\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3427:  { EID_NAC_RULE_ENDSYS_WEB_AUTH_USER_GROUP_KEY, \"NAC Rule End System WEB Authentication User Group Key\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3428:  { EID_NAC_WEB_AUTH_USER_GROUP_ARRAY, \"NAC WEB Authentication User Group Array\", TLV_TYPE_BLOCK_TLV, TAB_NAC_WEB_AUTH_USER_GROUP_ARRAY, 0, 0, 0, 0, 0, 0, 0},",
          "3429:  { EID_NAC_WEB_AUTH_USER_GROUP_BLOCK, \"NAC WEB Authentication User Group Block\", TLV_TYPE_BLOCK_TLV, TAB_NAC_WEB_AUTH_USER_GROUP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3430:  { EID_NAC_WEB_AUTH_USER_GROUP_KEY, \"NAC WEB Authentication User Group key\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3431:  { EID_NAC_WEB_AUTH_USER_ARRAY, \"NAC WEB Authentication User\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3432:  { EID_G_SITE_MAX, \"G_SITE_MAX\",0, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3433: };",
          "3441: typedef enum",
          "3442: {",
          "3443:  EID_POLICY_UNUSED0,",
          "3444:  EID_POLICY_ENTRY_NAME,",
          "3445:  EID_POLICY_ENTRY_KEY,",
          "3446:  EID_POLICY_TOPOLOGY_KEY,",
          "3447:  EID_POLICY_TOPOLOGY_VLAN_ID,",
          "3448:  EID_POLICY_TOPOLOGY_TYPE,",
          "3449:  EID_POLICY_FILTER_KEY,",
          "3450:  EID_POLICY_COS_KEY,",
          "3451:  EID_POLICY_IGNORE_COS,",
          "3452:  EID_POLICY_DYNAMIC_EGRESS_VLANS,",
          "3453:  EID_POLICY_STATIC_EGRESS_VLANS,",
          "3454:  EID_POLICY_DEFAULT_ACTION,",
          "3455:  EID_POLICY_FLAGS,",
          "3456:  EID_POLICY_DEFAULT_MIRRORN,",
          "3457:  EID_POLICY_RB_REDIRECT_URL",
          "3460: } wassp_subtlv_policy_config_type_t;",
          "3462: const TLV_PARSER_ENTRY tlvPolicyConfigTable[]  =",
          "3463: {",
          "3464:  { EID_POLICY_UNUSED0, \"Policy Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3465:  { EID_POLICY_ENTRY_NAME, \"Policy Entry name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3466:  { EID_POLICY_ENTRY_KEY, \"Policy Entry Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3467:  { EID_POLICY_TOPOLOGY_KEY, \"Policy Topology Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3468:  { EID_POLICY_TOPOLOGY_VLAN_ID, \"Topology Vlan ID\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3469:  { EID_POLICY_TOPOLOGY_TYPE, \"Policy Topology Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3470:  { EID_POLICY_FILTER_KEY, \"Policy Filter Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3471:  { EID_POLICY_COS_KEY, \"Policy COS Key\", TLV_TYPE_INT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3472:  { EID_POLICY_IGNORE_COS, \"Policy Ignore COS\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3473:  { EID_POLICY_DYNAMIC_EGRESS_VLANS, \"list of Dynamic Egress VLAN IDs\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3474:  { EID_POLICY_STATIC_EGRESS_VLANS, \"list of static egress VLAN IDs\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3475:  { EID_POLICY_DEFAULT_ACTION, \"Default Action for Policy\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3476:  { EID_POLICY_FLAGS, \"Policy Flags\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3477:  { EID_POLICY_DEFAULT_MIRRORN, \"Set Default MirrorN\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3478:  { EID_POLICY_RB_REDIRECT_URL, \"Policy Redirect Url\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3480: };",
          "3485: typedef enum",
          "3486: {",
          "3487:  EID_COS_UNUSED0,",
          "3488:  EID_COS_KEY,",
          "3489:  EID_COS_DEFINITION,",
          "3490:  EID_COS_IN_RATE_LIMIT,",
          "3491:  EID_COS_OUT_RATE_LIMIT",
          "3492: } wassp_subtlv_cos_config_type_t;",
          "3494: const TLV_PARSER_ENTRY tlvCosConfigTable[]  =",
          "3495: {",
          "3496:  { EID_COS_UNUSED0, \"COS Unsed 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3497:  { EID_COS_KEY, \"COS Key\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3498:  { EID_COS_DEFINITION, \"Binary Encoded COS Definition\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3499:  { EID_COS_IN_RATE_LIMIT, \"Intput Rate Limit in Kbps\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3500:  { EID_COS_OUT_RATE_LIMIT, \"Output Rate Limit in Kbps\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3502: };",
          "3505: typedef enum",
          "3506: {",
          "3507:  EID_11U_UNUSED0,",
          "3508:  EID_11U_3GPP_CELL_NETWORK_ARRAY,",
          "3509:  EID_11U_3GPP_CELL_NETWORK_STRUCT,",
          "3510:  EID_11U_3GPP_CELL_NETWORK_MCC,",
          "3511:  EID_11U_3GPP_CELL_NETWORK_MNC,",
          "3512:  EID_11U_ACCESS_NETWORK_TYPE,",
          "3513:  EID_11U_ASRA,",
          "3514:  EID_11U_DOMAIN_NAME,",
          "3515:  EID_11U_EAP_AUTH_PARAM,",
          "3516:  EID_11U_EAP_AUTH_PARAM_ARRAY,",
          "3517:  EID_11U_EAP_AUTH_PARAM_STRUCT,",
          "3518:  EID_11U_EAP_AUTH_TYPE,",
          "3519:  EID_11U_EAP_METHOD,",
          "3520:  EID_11U_EAP_METHODS_ARRAY,",
          "3521:  EID_11U_EAP_METHODS_STRUCT,",
          "3522:  EID_11U_HESSID,",
          "3523:  EID_11U_INTERNET_AVAILABLE,",
          "3524:  EID_11U_IPV4_ADDR_TYPE_AVAIL,",
          "3525:  EID_11U_IPV6_ADDR_TYPE_AVAIL,",
          "3526:  EID_11U_NAI_REALM,",
          "3527:  EID_11U_NAI_REALM_ARRAY,",
          "3528:  EID_11U_NAI_REALM_STRUCT,",
          "3529:  EID_11U_NETWORK_AUTH_TYPE,",
          "3530:  EID_11U_ROAMING_CONSORTIUM,",
          "3531:  EID_11U_ROAMING_CONSORTIUM_ARRAY,",
          "3532:  EID_11U_VENUE_INFO_GROUP_CODE,",
          "3533:  EID_11U_VENUE_INFO_TYPE_ASSIGNMENTS,",
          "3534:  EID_11U_VENUE_NAME_ARRAY,",
          "3535:  EID_11U_VENUE_NAME,",
          "3536:  EID_11U_NETWORK_AUTH_TYPE_URL",
          "3537: } wassp_subtlv_11u_anqp_config_type_t;",
          "3540: const TLV_PARSER_ENTRY tlv11U_ANQP_blockTable[]  =",
          "3541: {",
          "3543:  { EID_11U_UNUSED0, \"11U Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3544:  { EID_11U_3GPP_CELL_NETWORK_ARRAY, \"11U 3GPP Cell Network Array\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3545:  { EID_11U_3GPP_CELL_NETWORK_STRUCT, \"11U 3GPP Cell Network Struct\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3546:  { EID_11U_3GPP_CELL_NETWORK_MCC, \"11U 3GPP Cell Network MCC\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3547:  { EID_11U_3GPP_CELL_NETWORK_MNC, \"11U 3GPP Cell Network MNC\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3548:  { EID_11U_ACCESS_NETWORK_TYPE, \"11U Access network Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3549:  { EID_11U_ASRA, \"11U ASRA\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3550:  { EID_11U_DOMAIN_NAME, \"11U Domain Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3551:  { EID_11U_EAP_AUTH_PARAM, \"11U EAP Authentication Parameter\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3552:  { EID_11U_EAP_AUTH_PARAM_ARRAY, \"11U EAP Authentication Parameter Array\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3553:  { EID_11U_EAP_AUTH_PARAM_STRUCT, \"11U EAP Authentication Parameter Strcut\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3554:  { EID_11U_EAP_AUTH_TYPE, \"11U EAP Authentication Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3555:  { EID_11U_EAP_METHOD, \"11U EAP Authentication Method\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3556:  { EID_11U_EAP_METHODS_ARRAY, \"11U EAP Authentication Methods Array\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3557:  { EID_11U_EAP_METHODS_STRUCT, \"11U EAP Authentication Method Struct\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3558:  { EID_11U_HESSID, \"11U HESSID\", TLV_TYPE_MACADD, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3559:  { EID_11U_INTERNET_AVAILABLE, \"11U Internet Available\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3560:  { EID_11U_IPV4_ADDR_TYPE_AVAIL, \"11U IPv4 Address Type Availability\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3561:  { EID_11U_IPV6_ADDR_TYPE_AVAIL, \"11U IPv6 Address Type Availability\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3562:  { EID_11U_NAI_REALM, \"11U NAI Realm\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3563:  { EID_11U_NAI_REALM_ARRAY, \"11U NAI Realm Array\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3564:  { EID_11U_NAI_REALM_STRUCT, \"11U NAI Realm Struct\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3565:  { EID_11U_NETWORK_AUTH_TYPE, \"11U Network Authentication Type\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3566:  { EID_11U_ROAMING_CONSORTIUM, \"11U Roaming Consortium\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3567:  { EID_11U_ROAMING_CONSORTIUM_ARRAY, \"11U Roaming Consortium Array\", TLV_TYPE_BLOCK_TLV, TAB_11U_ANQP_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3568:  { EID_11U_VENUE_INFO_GROUP_CODE, \"11U Venue Info Group Code\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3569:  { EID_11U_VENUE_INFO_TYPE_ASSIGNMENTS, \"11U Venue Info Type Assignments\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3570:  { EID_11U_VENUE_NAME_ARRAY, \"1U Venue Name Array\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3571:  { EID_11U_VENUE_NAME, \"1U Venue Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3572:  { EID_11U_NETWORK_AUTH_TYPE_URL, \"11U Network Authentication Type Url\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3576: };",
          "3580: typedef enum",
          "3581: {",
          "3582:  EID_EXTAPP_UNUSED0,",
          "3583:  EID_EXTAPP_DISP_NAME,",
          "3584:  EID_EXTAPP_DISP_ID,",
          "3585:  EID_EXTAPP_MATCH_STR,",
          "3586:  EID_EXTAPP_APP_ID,",
          "3587:  EID_EXTAPP_GROUP_ID",
          "3588: } wassp_subtlv_extapp_conf_block_type_t;",
          "3590: const TLV_PARSER_ENTRY tlvExtapp_conf_blockTable[]  =",
          "3591: {",
          "3592:  { EID_EXTAPP_UNUSED0, \"EXTAPP Unused 0\", TLV_TYPE_UNKNOWN, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3593:  { EID_EXTAPP_DISP_NAME, \"EXTAPP Display Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3594:  { EID_EXTAPP_DISP_ID, \"EXTAPP Display ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3595:  { EID_EXTAPP_MATCH_STR, \"EXTAPP Match String\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3596:  { EID_EXTAPP_APP_ID, \"EXTAPP Application ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3597:  { EID_EXTAPP_GROUP_ID, \"EXTAPP Application Group ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3599: };",
          "3603: typedef enum",
          "3604: {",
          "3605:  EID_HS2_UNUSED0,",
          "3606:  EID_HS2_ANQP_DOMAIN_ID,",
          "3607:  EID_HS2_CONNECTION_CAP,",
          "3608:  EID_HS2_CONNECTION_CAP_ARRAY,",
          "3609:  EID_HS2_DGAF,",
          "3610:  EID_HS2_ICON_NAME,",
          "3611:  EID_HS2_OPERATING_CLASS,",
          "3612:  EID_HS2_OP_FRIENDLY_NAME_ARRAY,",
          "3613:  EID_HS2_OP_FRIENDLY_NAME,",
          "3614:  EID_HS2_OSU_STRUCT,",
          "3615:  EID_HS2_OSU_SP_ARRAY,",
          "3616:  EID_HS2_OSU_SP_STRUCT,",
          "3617:  EID_HS2_OSU_SP_DESC_ARRAY,",
          "3618:  EID_HS2_OSU_SP_DESC,",
          "3619:  EID_HS2_OSU_SP_FRIENDLY_NAME_ARRAY,",
          "3620:  EID_HS2_OSU_SP_FRIENDLY_NAME,",
          "3621:  EID_HS2_OSU_SP_ICON_ARRAY,",
          "3622:  EID_HS2_OSU_SP_ICON_STRUCT,",
          "3623:  EID_HS2_OSU_SP_METHOD_LIST,",
          "3624:  EID_HS2_OSU_SP_NAI,",
          "3625:  EID_HS2_OSU_SP_SERVER_URI,",
          "3626:  EID_HS2_OSU_SSID,",
          "3627:  EID_HS2_RELEASE,",
          "3628:  EID_HS2_WAN_METRICS_STRUCT,",
          "3629:  EID_HS2_UPLINK_LOAD,",
          "3630:  EID_HS2_UPLINK_SPEED,",
          "3631:  EID_HS2_WIDTH,",
          "3632:  EID_HS2_DOWLINK_LOAD,",
          "3633:  EID_HS2_DOWLINK_SPEED,",
          "3634:  EID_HS2_HIGHT",
          "3635: } wassp_subtlv_hs2_block_type_t;",
          "3637: const TLV_PARSER_ENTRY tlvHS2_blockTable[]  =",
          "3638: {",
          "3639:  { EID_HS2_UNUSED0, \"HS2 Unused 0\", TLV_TYPE_UNKNOWN, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3640:  { EID_HS2_ANQP_DOMAIN_ID, \"HS2 ANQP Domain ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3641:  { EID_HS2_CONNECTION_CAP, \"HS2 Connection Capacity\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3642:  { EID_HS2_CONNECTION_CAP_ARRAY, \"HS2 Connection Capacity Array\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3643:  { EID_HS2_DGAF, \"Enable HS2 DGAF\", TLV_TYPE_BOOL, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3644:  { EID_HS2_ICON_NAME, \"HS2 Icon Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3645:  { EID_HS2_OPERATING_CLASS, \"HS2 Operating Class\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3646:  { EID_HS2_OP_FRIENDLY_NAME_ARRAY, \"HS2 Operation Friendly Name Array\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3647:  { EID_HS2_OP_FRIENDLY_NAME, \"HS2 Operation Friendly Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3648:  { EID_HS2_OSU_STRUCT, \"HS2 OSU Struct\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3649:  { EID_HS2_OSU_SP_ARRAY, \"HS2 OSU SP Array\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3650:  { EID_HS2_OSU_SP_STRUCT, \"HS2 OSU SP Struct\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3651:  { EID_HS2_OSU_SP_DESC_ARRAY, \"HS2 OSU SP Description Array\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3652:  { EID_HS2_OSU_SP_DESC, \"HS2 OSU SP Description\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3653:  { EID_HS2_OSU_SP_FRIENDLY_NAME_ARRAY, \"HS2 OSU SP Friendly Name Array\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3654:  { EID_HS2_OSU_SP_FRIENDLY_NAME, \"HS2 OSU SP Friendly Name\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3655:  { EID_HS2_OSU_SP_ICON_ARRAY, \"HS2 OSU SP Icon Array\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3656:  { EID_HS2_OSU_SP_ICON_STRUCT, \"HS2 OSU SP Icon Struct\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3657:  { EID_HS2_OSU_SP_METHOD_LIST, \"HS2 OSU SP Method List\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3658:  { EID_HS2_OSU_SP_NAI, \"HS2 OSU SP NAI\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3659:  { EID_HS2_OSU_SP_SERVER_URI, \"HS2 OSU SP Server Uri\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3660:  { EID_HS2_OSU_SSID, \"HS2 OSU SSID\", TLV_TYPE_STRING, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3661:  { EID_HS2_RELEASE, \"HS2 Relase\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3662:  { EID_HS2_WAN_METRICS_STRUCT, \"HS2 WAN meathod Struct\", TLV_TYPE_BLOCK_TLV, TAB_HS2_BLOCK, 0, 0, 0, 0, 0, 0, 0},",
          "3663:  { EID_HS2_UPLINK_LOAD, \"HS2 Uplink Load\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3664:  { EID_HS2_UPLINK_SPEED, \"HS2 Uplink Speed\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3665:  { EID_HS2_WIDTH, \"HS2 Width\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3666:  { EID_HS2_DOWLINK_LOAD, \"HS2 Downlink Load\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3667:  { EID_HS2_DOWLINK_SPEED, \"HS2 Downlink Speed\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3668:  { EID_HS2_HIGHT, \"HS2 Hight\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3671: };",
          "3674: typedef enum",
          "3675: {",
          "3676:  EID_LOC_UNUSED0,",
          "3677:  EID_LOC_VLAN_ID_KEY,           //    1",
          "3678:  EID_LOC_POLICY_TOPOLOGY_KEY    //    2",
          "3679: } wassp_subtlv_locationbased_lookup_type_t;",
          "3682: const TLV_PARSER_ENTRY tlvLocationBaseLookUpTable[]  =",
          "3683: {",
          "3684:  { EID_LOC_UNUSED0, \"Location Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3685:  { EID_LOC_VLAN_ID_KEY, \"Location Vlan ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3686:  { EID_LOC_POLICY_TOPOLOGY_KEY, \"Location Topology ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3689: };",
          "3693: typedef enum",
          "3694: {",
          "3695:  EID_APP_POLICY_UNUSED0,",
          "3696:  EID_APP_POLICY_ENTRY_BLOCK     //    1",
          "3697: } wassp_subtlv_app_policy_fixed_type_t;",
          "3699: const TLV_PARSER_ENTRY tlvAppPolicyFixedTable[]  =",
          "3700: {",
          "3701:  { EID_APP_POLICY_UNUSED0, \"Application Policy Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3702:  { EID_APP_POLICY_ENTRY_BLOCK, \"Application Policy Entry Block\", TLV_TYPE_BLOCK_TLV, TAB_APP_POLICY_ENTRY_BLOCK, 0, 0, 0, 0, 0, 0, 0}",
          "3705: };",
          "3711: typedef enum",
          "3712: {",
          "3713:  EID_APP_POLICY_ENTRY_UNUSED0,",
          "3714:  EID_APP_POLICY_APP_ID,             //   1",
          "3715:  EID_APP_POLICY_OFFSET_LW,          //   2",
          "3716:  EID_APP_POLICY_MASK,               //   3",
          "3717:  EID_APP_POLICY_VALUE               //   4",
          "3718: } wassp_subtlv_app_policy_entry_type_t;",
          "3721: const TLV_PARSER_ENTRY tlvAppPolicyEntryTable[]  =",
          "3722: {",
          "3723:  { EID_APP_POLICY_ENTRY_UNUSED0, \"Application Policy Entry Unused 0\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3724:  { EID_APP_POLICY_APP_ID, \"Application Policy ID\", TLV_TYPE_UINT, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3725:  { EID_APP_POLICY_OFFSET_LW, \"Application Policy Offset\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3726:  { EID_APP_POLICY_MASK, \"Application Policy Masks\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0},",
          "3727:  { EID_APP_POLICY_VALUE, \"Application Policy Values\", TLV_TYPE_OCTETS, 0, 0, 0, 0, 0, 0, 0, 0}",
          "3730: };",
          "3737: typedef struct",
          "3738: {",
          "3739:  char subtree_name[WASSP_MAX_SUBTREE_LEN];",
          "3740:  int*  ett_num;",
          "3741:  int  max_entry;",
          "3742:  const TLV_PARSER_ENTRY *entry;",
          "3743: } WASSP_SUBTLV_DECODER_INFO_t;",
          "3772: typedef enum",
          "3773: {",
          "3774:  EID_STATUS_UNDEFINED = 0,",
          "3775:  EID_STATUS_SUCCESS,",
          "3776:  EID_STATUS_FAILURE,",
          "3777:  EID_STATUS_INPROGRESS,",
          "3778:  EID_STATUS_DOWNLOAD_FAIL,",
          "3779:  EID_STATUS_WRITE_FAIL,",
          "3780:  EID_STATUS_CORRUPTED_FILE,",
          "3781:  EID_STATUS_REBOOTING,",
          "3782:  EID_STATUS_INVALID_FILE,",
          "3783:  EID_STATUS_VERSION_MISMATCH",
          "3784: } wassp_eid_status_t;",
          "3787: typedef enum",
          "3788: {",
          "3789:  EID_ACTION_REPORT = 0,",
          "3790:  EID_ACTION_NOCHANGE,",
          "3791:  EID_ACTION_LEGACY,",
          "3792:  EID_ACTION_BACKGROUND,",
          "3793:  EID_ACTION_SAVE_BACKUP,",
          "3794:  EID_ACTION_SWITCH_VERSION,",
          "3795:  EID_ACTION_ABORT,",
          "3796:  EID_ACTION_STOP_SERVICE,",
          "3797:  EID_ACTION_HOLD,",
          "3798:  EID_ACTION_REBOOT",
          "3799: } wassp_eid_action_t;",
          "3807: static const value_string wassp_eid_status_types[] =",
          "3808: {",
          "3809:  { UPGRADE_STATUS_NONE, \"Unused\" },",
          "3810:  { UPGRADE_STATUS_SUCCESS, \"success\" },",
          "3811:  { UPGRADE_STATUS_FAIL, \"failure\" },",
          "3812:  { UPGRADE_STATUS_INPROGRESS, \"download in progress\" },",
          "3813:  { UPGRADE_STATUS_DOWNLOAD_FAIL, \"image download failed\" },",
          "3814:  { UPGRADE_STATUS_WRITE_FAIL, \"writing image to falsh failed\" },",
          "3815:  { UPGRADE_STATUS_CORRUPTED_FILE, \"main image file is corrupted/unusable\" },",
          "3816:  { UPGRADE_STATUS_REBOOTING, \"AP is rebooting\" },",
          "3817:  { UPGRADE_STATUS_INVALID_FILE, \"bad header in downloaded image\" },",
          "3818:  { UPGRADE_STATUS_VERSION_MISMATCH, \"image version requested does not exist\" },",
          "3819:  { 0, NULL }",
          "3820: };",
          "3823: static const value_string wassp_eid_action_types[] =",
          "3824: {",
          "3825:  { UPGRADE_ACTION_REPORT, \"request status report\" },",
          "3826:  { UPGRADE_ACTION_NO_CHANGE, \"no change required\" },",
          "3827:  { UPGRADE_ACTION_LEGACY, \"legacy AP upgrade -no service\" },",
          "3828:  { UPGRADE_ACTION_BACKGROUND, \"upgrade AP while providing service\" },",
          "3829:  { UPGRADE_ACTION_SAVE_BACKUP, \"download and save to backup image\" },",
          "3830:  { UPGRADE_ACTION_SWITCH_VERSION, \"switch to a given version\" },",
          "3831:  { UPGRADE_ACTION_ABORT, \"abort current download\" },",
          "3832:  { UPGRADE_ACTION_STOP_SERVICE, \"put AP on hold,stop wireless service\" },",
          "3833:  { UPGRADE_ACTION_HOLD, \"put AP on hold,keep wireless service\" },",
          "3834:  { UPGRADE_ACTION_REBOOT, \"reboot AP\" },",
          "3835:  { 0, NULL }",
          "3836: };",
          "3838: static const value_string mu_resv0_strings[] =",
          "3839: {",
          "3840:  { 0x0000, \"UnUsed\" },",
          "3841:  { 0x4000, \"Netflow\" },",
          "3842:  { 0x8000, \"Mirrorn & Netflow\" },",
          "3843:  { 0xc000, \"Mirrorn\" },",
          "3844:  { 0, NULL }",
          "3845: };",
          "3847: static const value_string mu_action_field_strings[] =",
          "3848: {",
          "3849:  { 0x0000, \"SSID\" },",
          "3850:  { 0x2000, \"Redirect With Vlan ID\" },",
          "3851:  { 0x3000, \"Vlan ID\" },",
          "3852:  { 0, NULL }",
          "3853: };",
          "3855: static const value_string threat_state_strings[] =",
          "3856: {",
          "3857:  { 0x0, \"NA\" },",
          "3858:  { 0x1, \"Active\" },",
          "3859:  { 0x2, \"Inactive\" },",
          "3860:  { 0, NULL }",
          "3861: };",
          "3863: static const value_string radio_params_strings[] =",
          "3864: {",
          "3865:  { 0x0, \"NONE\" },",
          "3866:  { 0x1, \"WMM\" },",
          "3867:  { 0x2, \"80211E\" },",
          "3868:  { 0x3, \"WMM & 80211E\" },",
          "3869:  { 0x4, \"NA\" },",
          "3870:  { 0, NULL }",
          "3871: };",
          "3874: static const true_false_string wassp_eid_rustate_types =",
          "3875: {",
          "3876:  \"Standby\",",
          "3877:  \"Active\",",
          "3878: };",
          "3881: #define WASSP_SUBTLV_GET_SUBTREE(in_ptr) ((in_ptr)->subtree_name)",
          "3882: #define WASSP_SUBTLV_GET_ETTNUM(in_ptr) ((in_ptr)->ett_num)",
          "3883: #define WASSP_SUBTLV_GET_MAXENTRY(in_ptr) ((in_ptr)->max_entry)",
          "3884: #define WASSP_SUBTLV_GET_ENTRY(in_ptr) ((in_ptr)->entry)",
          "3885: #define WASSP_SUBTLV_GET_ENTRY_IDX(in_ptr, idx) ((in_ptr)->entry[(idx)])",
          "3886: #define WASSP_SUBTLV_GET_ENTRY_IDX_TYPE(in_ptr, idx) (((in_ptr)->entry[(idx)]).type)",
          "3887: #define WASSP_SUBTLV_GET_ENTRY_IDX_NAME(in_ptr, idx) (((in_ptr)->entry[(idx)]).name)",
          "3888: #define WASSP_SUBTLV_GET_ENTRY_IDX_TABIDX(in_ptr, idx) (((in_ptr)->entry[(idx)]).length)",
          "3893: static int proto_wassp = -1;",
          "3894: static int hf_wassp_version = -1;",
          "3895: static int hf_wassp_type = -1;",
          "3896: static int hf_ru_rad_num = -1;",
          "3897: static int hf_ru_checksum = -1;",
          "3898: static int hf_ru_ac_op = -1;",
          "3899: static int hf_ru_mac = -1;",
          "3900: static int hf_ru_ac_mode = -1;",
          "3901: static int hf_wassp_seq_num_flag = -1;",
          "3902: static int hf_seq_num = -1;",
          "3903: static int hf_wassp_use_frag = -1;",
          "3904: static int hf_wassp_data_frag = -1;",
          "3905: static int hf_wassp_more_frag = -1;",
          "3906: static int hf_wassp_first_frag = -1;",
          "3907: static int hf_wassp_sessionid = -1;",
          "3908: static int hf_wassp_length = -1;",
          "3909: static int hf_wassp_header = -1;",
          "3910: static int hf_ru_discover_header =-1;",
          "3913: static int hf_wassp_mu_type = -1;",
          "3914: static int hf_wassp_mu_qos = -1;",
          "3915: static int hf_wassp_mu_action_ssid = -1;",
          "3916: static int hf_wassp_mu_mac = -1;",
          "3917: static int hf_wassp_mu_data_tree = -1;",
          "3918: static int hf_wassp_mu_resv0 = -1;",
          "3919: static int hf_wassp_mu_resv1 = -1;",
          "3920: static int hf_wassp_mu_assoc_status = -1;",
          "3921: static int hf_wassp_mu_data_header =-1;",
          "3922: static int hf_wassp_mu_action =-1;",
          "3923: static int hf_wassp_mu_action_field_value =-1;",
          "3928: static int  hf_wassp_mu_netflow_version = -1;",
          "3929: static int  hf_wassp_mu_netflow_length = -1;",
          "3930: static int  hf_wassp_mu_netflow_flags  = -1;",
          "3931: static int  hf_wassp_mu_netflow_uptime = -1;",
          "3932: static int  hf_wassp_mu_netflow_record = -1;",
          "3933: static int  hf_wassp_mu_netflow_in_bytes = -1;",
          "3934: static int  hf_wassp_mu_netflow_in_packets = -1;",
          "3935: static int  hf_wassp_mu_netflow_ip_protocol_number = -1;",
          "3936: static int  hf_wassp_mu_netflow_source_tos = -1;",
          "3937: static int  hf_wassp_mu_netflow_source_port = -1;",
          "3938: static int  hf_wassp_mu_netflow_source_ip = -1;",
          "3939: static int  hf_wassp_mu_netflow_input_snmp = -1;",
          "3940: static int  hf_wassp_mu_netflow_dest_port = -1;",
          "3941: static int  hf_wassp_mu_netflow_dest_ip = -1;",
          "3942: static int  hf_wassp_mu_netflow_output_snmp = -1;",
          "3943: static int  hf_wassp_mu_netflow_last_time = -1;",
          "3944: static int  hf_wassp_mu_netflow_first_time = -1;",
          "3945: static int  hf_wassp_mu_netflow_in_source_mac = -1;",
          "3946: static int  hf_wassp_mu_netflow_in_dest_mac = -1;",
          "3947: static int  hf_wassp_mu_netflow_tree = -1;",
          "3948: static int  hf_wassp_mu_netflow_header = -1;",
          "3953: static int hf_wassp_tlv_value = -1;",
          "3954: static int hf_wassp_tlv_type_main = -1;",
          "3955: static int hf_wassp_tlv_type_sub = -1;",
          "3956: static int hf_wassp_tlv_length = -1;",
          "3957: static int hf_wassp_tlv_value_octext = -1;    // PW_TYPE_OCTETS",
          "3958: static int hf_wassp_tlv_value_string = -1;",
          "3959: static int hf_wassp_tlv_value_ip = -1;",
          "3960: static int hf_wassp_tlv_value_int = -1;",
          "3961: static int hf_wassp_tlv_eid_status = -1;",
          "3962: static int hf_wassp_tlv_eid_action = -1;",
          "3963: static int hf_wassp_tlv_eid_rustate = -1;",
          "3964: static int hf_wassp_tlv_unknown = -1;",
          "3965: static int hf_wassp_tlv_invalid = -1;",
          "3967: static int hf_wassp_ipaddress = -1;",
          "3968: static int hf_wassp_sub_tree = -1;",
          "3969: static int hf_wassp_topologykey = -1;",
          "3970: static int hf_wassp_vlanid = -1;",
          "3971: static int hf_wassp_topology_mode = -1;",
          "3972: static int hf_wassp_in_cir = -1;",
          "3973: static int hf_wassp_out_cir = -1;",
          "3975: static int hf_wassp_flag_1b = -1;",
          "3976: static int hf_wassp_tos = -1;",
          "3977: static int hf_cos_tos = -1;",
          "3978: static int hf_cos_tos_mask = -1;",
          "3979: static int hf_cos_priority_txq = -1;",
          "3981: static int hf_wassp_tos_mask = -1;",
          "3982: static int hf_filter_tos_maskbit_priority = -1;",
          "3983: static int hf_wassp_priority = -1;",
          "3984: static int hf_cos_rateid = -1;",
          "3985: static int hf_wassp_filter_rule = -1;",
          "3986: static int hf_wassp_filter_flag = -1;",
          "3987: static int hf_filter_rule_port_range = -1;",
          "3988: static int hf_wassp_ipprotocol = -1;",
          "3989: static int hf_wassp_netmasklength = -1;",
          "3990: static int hf_wassp_macaddr = -1;",
          "3991: static int hf_wassp_macaddr_mask = -1;",
          "3992: static int hf_wassp_ethernet_type = -1;",
          "3993: static int hf_wassp_reserve = -1;",
          "3994: static int hf_wassp_freq = -1;",
          "3995: static int hf_wassp_rss = -1;",
          "3996: static int hf_wassp_rssi = -1;",
          "3997: static int hf_wassp_threatstate = -1;",
          "3998: static int hf_wassp_radioparams = -1;",
          "3999: static int hf_wassp_channelfreq = -1;",
          "4000: static int hf_wassp_mu = -1;",
          "4001: static int hf_wassp_apprules = -1;",
          "4002: static int hf_wassp_displayid = -1;",
          "4003: static int hf_wassp_txbytes = -1;",
          "4004: static int hf_wassp_rxbytes = -1;",
          "4011: static int hf_wassp_fragments = -1;",
          "4012: static int hf_wassp_fragment = -1;",
          "4013: static int hf_wassp_fragment_overlap = -1;",
          "4014: static int hf_wassp_fragment_overlap_conflict = -1;",
          "4015: static int hf_wassp_fragment_multiple_tails = -1;",
          "4016: static int hf_wassp_fragment_too_long_fragment = -1;",
          "4017: static int hf_wassp_fragment_error = -1;",
          "4018: static int hf_wassp_fragment_count = -1;",
          "4019: static int hf_wassp_reassembled_in = -1;",
          "4020: static int hf_wassp_reassembled_length = -1;",
          "4021: static gint ett_wassp_fragment = -1;",
          "4022: static gint ett_wassp_fragments = -1;",
          "4025: static const fragment_items wassp_frag_items =",
          "4026: {",
          "4028:  &ett_wassp_fragment,",
          "4029:  &ett_wassp_fragments,",
          "4031:  &hf_wassp_fragments,",
          "4032:  &hf_wassp_fragment,",
          "4033:  &hf_wassp_fragment_overlap,",
          "4034:  &hf_wassp_fragment_overlap_conflict,",
          "4035:  &hf_wassp_fragment_multiple_tails,",
          "4036:  &hf_wassp_fragment_too_long_fragment,",
          "4037:  &hf_wassp_fragment_error,",
          "4038:  &hf_wassp_fragment_count,",
          "4039:  &hf_wassp_reassembled_in,",
          "4040:  &hf_wassp_reassembled_length,",
          "4041:  NULL,",
          "4042:  \"fragments\"",
          "4043: };",
          "4049: static gint ett_wassp = -1;",
          "4050: static gint ett_seq_flags = -1;",
          "4051: static gint ett_wassp_header = -1;",
          "4052: static gint ett_mu_data_header = -1;",
          "4053: static gint ett_mu_action_field =-1;",
          "4055: static gint ett_ru_discover_header = -1;",
          "4056: static gint ett_wassp_tlv = -1;",
          "4057: static gint ett_wassp_filter_rule = -1;",
          "4058: static gint ett_lbs_header = -1;",
          "4060: static gint ett_wassp_mu_appl_stats = -1;",
          "4061: static gint ett_wassp_data = -1;",
          "4062: static gint ett_wassp_mu_data_netflow = -1;",
          "4063: static gint ett_wassp_mu_data_netflow_header = -1;",
          "4064: static gint ett_wassp_tlv_missing = -1;",
          "4065: static gint ett_wassp_ap_stats_block = -1;",
          "4066: static gint ett_wassp_mu_rf_stats_block = -1;",
          "4067: static gint ett_wassp_config_error_block = -1;",
          "4068: static gint ett_wassp_config_modified_block = -1;",
          "4069: static gint ett_wassp_global_config_block = -1;",
          "4070: static gint ett_wassp_radio_config_block = -1;",
          "4071: static gint ett_wassp_vns_config_block = -1;",
          "4072: static gint ett_wassp_mu_stats_block = -1;",
          "4073: static gint ett_wassp_radio_stats_block = -1;",
          "4074: static gint ett_wassp_ether_stats_block = -1;",
          "4075: static gint ett_wassp_wds_stats_block = -1;",
          "4076: static gint ett_wassp_dot1x_stats_block = -1;",
          "4077: static gint ett_wassp_filter_config_block = -1;",
          "4078: static gint ett_wassp_site_filter_config_block = -1;",
          "4079: static gint ett_wassp_filter_ext_config_block = -1;",
          "4080: static gint ett_wassp_vns_stats_block = -1;",
          "4081: static gint ett_wassp_radius_config_block = -1;",
          "4082: static gint ett_wassp_eid_main_tlv_block = -1;",
          "4083: static gint ett_wassp_radius_server_config_block = -1;",
          "4084: static gint ett_wassp_site_config_block = -1;",
          "4085: static gint ett_wassp_policy_config_block = -1;",
          "4086: static gint ett_wassp_cos_config_block = -1;",
          "4087: static gint ett_wassp_localbase_lookup_block = -1;",
          "4088: static gint ett_wassp_app_policy_fixed_block = -1;",
          "4089: static gint ett_wassp_app_policy_entry_block = -1;",
          "4090: static gint ett_wassp_s_topo_m_filter_entry_block = -1;",
          "4091: static gint ett_wassp_s_topo_m_filter_ext_entry_block = -1;",
          "4092: static gint ett_wassp_11u_config_entry_block = -1;",
          "4093: static gint ett_wassp_hs2_config_entry_block = -1;",
          "4094: static gint ett_wassp_extapp_config_entry_block = -1;",
          "4098: static int hf_aeroscout_header = -1;",
          "4099: static int hf_aeroscout_header_magic_number = -1;  // 2 bytes",
          "4100: static int hf_aeroscout_request_id = -1;           // 2 bytes",
          "4101: static int hf_aeroscout_code = -1;                 // 1 byte",
          "4102: static int hf_aeroscout_sub_code = -1;             // 1 byte",
          "4103: static int hf_aeroscout_datalength = -1;           // 2 bytes",
          "4104: static int hf_lbs_vendor_id = -1;                  // 2 byte",
          "4105: static int hf_lbs_rsvd1 = -1;                      // 2 bytes",
          "4106: static int hf_lbs_ap_bssid = -1;                   // 6 bytes",
          "4107: static int hf_lbs_rsvd2 = -1;                      // 1",
          "4108: static int hf_lbs_rxchan = -1;                     // 1",
          "4109: static int hf_lsb_tstamp = -1;                     // 4 bytes",
          "4110: static int hf_hf_lsb_rsvd3 = -1;                   // 2 bytes",
          "4111: static int hf_lsb_rssi = -1;                       // 1",
          "4112: static int hf_lsb_rsvd = -1;                       // 1",
          "4113: static int hf_lsb_noise_floor = -1;                // 1",
          "4114: static int hf_lsb_rsvd4 = -1;                      // 3 bytes",
          "4115: static int hf_lsb_chan_rate = -1;                  // 1",
          "4116: static int hf_lsb_rsvd5 = -1;                      // 1",
          "4117: static int hf_lsb_wh_addr2 = -1;                   // 6 bytes",
          "4118: static int hf_lsb_wh_fc = -1;                      // 2 bytes",
          "4119: static int hf_lsb_wh_seq = -1;                     // 2 bytes",
          "4120: static int hf_lsb_rsvd6 = -1;                      // 2 bytes",
          "4121: static int hf_lsb_wh_addr3 = -1;                   // 6 bytes",
          "4122: static int hf_lsb_wh_addr4 = -1;                   // 6 bytes",
          "4127: static dissector_handle_t data_handle;",
          "4128: static dissector_handle_t eth_handle;",
          "4129: static dissector_handle_t ip_handle;",
          "4130: static dissector_handle_t ieee80211_handle;",
          "4131: static dissector_handle_t snmp_handle;",
          "4134: static const WASSP_SUBTLV_DECODER_INFO_t wassp_decr_info[TAB_MAX] =",
          "4135: {",
          "4137:  {\"WASSP Global Config\", &ett_wassp_global_config_block, sizeof(tlvGlobalConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvGlobalConfigTable},",
          "4139:  {\"WASSP Config Error\", &ett_wassp_config_error_block, sizeof(tlvGlobalConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvGlobalConfigTable},",
          "4141:  {\"WASSP Config Modified\", &ett_wassp_config_modified_block, sizeof(tlvGlobalConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvGlobalConfigTable},",
          "4143:  {\"WASSP Radio Configure\", &ett_wassp_radio_config_block, sizeof(tlvRadioConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvRadioConfigTable},",
          "4145:  {\"WASSP VNS Configure\", &ett_wassp_vns_config_block, sizeof(tlvVnsConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvVnsConfigTable},",
          "4147:  {\"WASSP MU RF Stats\", &ett_wassp_mu_rf_stats_block, sizeof(tlvBeastConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvBeastConfigTable},",
          "4149:  {\"WASSP RU RF Stats\", &ett_wassp_ap_stats_block, sizeof(tlvBeastConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvBeastConfigTable},",
          "4151:  {\"WASSP MU Stats\", &ett_wassp_mu_stats_block, sizeof(tlvBeastConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvBeastConfigTable},",
          "4153:  {\"WASSP Radio Stats\", &ett_wassp_radio_stats_block, sizeof(tlvBeastConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvBeastConfigTable},",
          "4155:  {\"WASSP Ethernet Stats\", &ett_wassp_ether_stats_block, sizeof(tlvBeastConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvBeastConfigTable},",
          "4157:  {\"WASSP Wds Stats\", &ett_wassp_wds_stats_block, sizeof(tlvBeastConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvBeastConfigTable},",
          "4159:  {\"WASSP Dot1x Stats\", &ett_wassp_dot1x_stats_block, sizeof(tlvBeastConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvBeastConfigTable},",
          "4161:  {\"WASSP Filter Config\", &ett_wassp_filter_config_block, sizeof(tlvFilterConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvFilterConfigTable},",
          "4163:  {\"WASSP VNS Status\", &ett_wassp_vns_stats_block, sizeof(tlvVnsStatusTable) / sizeof(TLV_PARSER_ENTRY), tlvVnsStatusTable},",
          "4165:  {\"WASSP Radius Server Config\", &ett_wassp_radius_server_config_block, sizeof(tlvRadiusServerConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvRadiusServerConfigTable},",
          "4167:  {\"WASSP Site Config\", &ett_wassp_site_config_block, sizeof(tlvSiteConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteConfigTable},",
          "4169:  {\"WASSP Policy Config\", &ett_wassp_policy_config_block, sizeof(tlvPolicyConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvPolicyConfigTable},",
          "4171:  {\"WASSP Class of Service Configuration\", &ett_wassp_cos_config_block, sizeof(tlvCosConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvCosConfigTable},",
          "4173:  {\"WASSP LocalBase Lookup\", &ett_wassp_localbase_lookup_block, sizeof(tlvLocationBaseLookUpTable) / sizeof(TLV_PARSER_ENTRY), tlvLocationBaseLookUpTable},",
          "4175:  {\"WASSP Radius Config\", &ett_wassp_radius_config_block, sizeof(tlvRadiusConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvRadiusConfigTable},",
          "4177:  {\"WASSP Event Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4179:  {\"WASSP SSS MU Block\",  &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4181:  {\"WASSP EID MU Block\",  &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4183:  {\"WASSP BULK MU Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4185:  {\"WASSP MU Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4187:  {\"WASSP BULK VNS Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4189:  {\"WASSP VNS Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4191:  {\"SIAPP PMK Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4193:  {\"SIAPP Radio Config Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4195:  {\"SIAPP MU STATS Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4197:  {\"SIAPP THIN Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4199:  {\"SIAPP  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4201:  {\"Assoc SSID array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4203:  {\"Assoc SSID  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4205:  {\"AP list  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4207:  {\"AP list array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4209:  {\"Scan profile  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4211:  {\"Threat def array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4213:  {\"Thread def  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4215:  {\"Thread pattern array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4217:  {\"Thread pattern  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4219:  {\"Surveillance Data Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4221:  {\"Surveillance Data  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4223:  {\"Thread Data Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4225:  {\"Thread Data  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4227:  {\"Thread Classify Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4229:  {\"Thread Classify  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4231:  {\"User Classify Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4233:  {\"User Classify  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4235:  {\"MU Event Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4237:  {\"MU Event  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4239:  {\"Country Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4241:  {\"Country  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4243:  {\"Locator LOC  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4245:  {\"Locator LOC Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4247:  {\"RSS Data  Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4249:  {\"RSS Data  Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4251:  {\"MCAST Filter Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4253:  {\"MCAST Filter Block Entry\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4255:  {\"MU Session Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4257:  {\"MU Session Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4259:  {\"Detected Rogue Array\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4261:  {\"Detected Rogue Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4263:  {\"Filter Rule Ext Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4265:  {\"App Policy Fixed Block\", &ett_wassp_app_policy_fixed_block, sizeof(tlvAppPolicyFixedTable) / sizeof(TLV_PARSER_ENTRY), tlvAppPolicyFixedTable},",
          "4267:  {\"FilterRules Ext Block\", &ett_wassp_filter_ext_config_block, sizeof(tlvFilterRuleExtConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvFilterRuleExtConfigTable},",
          "4269:  {\"Site FilterRules Ext Block\", &ett_wassp_site_filter_config_block, sizeof(tlvSiteFilterRuleExtConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteFilterRuleExtConfigTable},",
          "4271:  {\"App Policy Entry Block\", &ett_wassp_app_policy_entry_block, sizeof(tlvAppPolicyEntryTable) / sizeof(TLV_PARSER_ENTRY), tlvAppPolicyEntryTable},",
          "4273:  {\"11u Config Block\", &ett_wassp_11u_config_entry_block, sizeof(tlv11U_ANQP_blockTable) / sizeof(TLV_PARSER_ENTRY), tlv11U_ANQP_blockTable},",
          "4275:  {\"HS2 config Block\", &ett_wassp_hs2_config_entry_block, sizeof(tlvHS2_blockTable) / sizeof(TLV_PARSER_ENTRY), tlvHS2_blockTable},",
          "4277:  {\"WASSP RU Ack Radio Configure\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4279:  {\"MU Appl Stats Block\", &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4281:  {\"Extend AppControl Config Block\", &ett_wassp_extapp_config_entry_block, sizeof(tlvExtapp_conf_blockTable) / sizeof(TLV_PARSER_ENTRY), tlvExtapp_conf_blockTable},",
          "4283:  {\"CP Config Block\", &ett_wassp_vns_config_block, sizeof(tlvVnsConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvVnsConfigTable},",
          "4285:  {\"Topology Array Block\",  &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4287:  {\"Topology Struct Block\",   &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4289:  {\"Filter Config Struct Block\",   &ett_wassp_eid_main_tlv_block, sizeof(tlvMainTable) / sizeof(TLV_PARSER_ENTRY), tlvMainTable},",
          "4291:  {\"Site Topology Array Block\",  &ett_wassp_site_config_block, sizeof(tlvSiteConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteConfigTable},",
          "4293:  {\"Site Topology Struct Block\",  &ett_wassp_site_config_block, sizeof(tlvSiteConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteConfigTable},",
          "4295:  {\"Site Topology Mcast Filter Config Struct Block\",  &ett_wassp_s_topo_m_filter_entry_block, sizeof(tlvSTopoMcastFilterBlock) / sizeof(TLV_PARSER_ENTRY), tlvSTopoMcastFilterBlock},",
          "4297:  {\"Site Topology Mcast Filter Rule Ext Block\",  &ett_wassp_s_topo_m_filter_ext_entry_block, sizeof(tlvSTopoMcastFilterRuleBlock) / sizeof(TLV_PARSER_ENTRY), tlvSTopoMcastFilterRuleBlock},",
          "4299:  {\"NAC service config array\",  &ett_wassp_site_config_block, sizeof(tlvSiteConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteConfigTable},",
          "4301:  {\"NAC service config Block\",  &ett_wassp_site_config_block, sizeof(tlvSiteConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteConfigTable},",
          "4303:  {\"NAC WEB auth user group config array\",  &ett_wassp_site_config_block, sizeof(tlvSiteConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteConfigTable},",
          "4305:  {\"NAC WEB auth user group  Block\",  &ett_wassp_site_config_block, sizeof(tlvSiteConfigTable) / sizeof(TLV_PARSER_ENTRY), tlvSiteConfigTable},",
          "4306: };",
          "4315: static int wassp_type_converter(int in_tlv_type)",
          "4316: {",
          "4317:  int rtn_val = hf_wassp_tlv_value_octext;",
          "4319:  switch (in_tlv_type)",
          "4320:  {",
          "4321:  case 1:",
          "4322:   rtn_val = hf_wassp_tlv_value_string;",
          "4323:   break;",
          "4324:  case 2:",
          "4325:  case 3:",
          "4326:  case 4:",
          "4327:  case 7:",
          "4328:  case 8:",
          "4329:   rtn_val = hf_wassp_tlv_value_int;",
          "4330:   break;",
          "4331:  case 5:",
          "4332:   rtn_val = hf_wassp_tlv_value_octext;",
          "4333:   break;",
          "4334:  case 6:",
          "4335:   rtn_val = hf_wassp_mu_mac;",
          "4336:   break;",
          "4337:  case 9:",
          "4338:   rtn_val = hf_wassp_tlv_value_ip;",
          "4339:   break;",
          "4341:  default:",
          "4342:   break;",
          "4343:  }",
          "4344:  return rtn_val;",
          "4345: }",
          "4350: int dissect_wassp_sub_tlv(proto_tree *wassp_tree, tvbuff_t *tvb, packet_info *pinfo, int offset, int in_len, int which_tab, int ru_msg_type);",
          "4351: int dissect_wassp_tlv(proto_tree *wassp_tree, tvbuff_t *tvb, packet_info *pinfo, int offset, wassp_ru_msg_t rumsg_type);",
          "4356: static dissector_table_t wassp_dissector_table;",
          "4359: static int dissect_wassp_mu(proto_tree *, tvbuff_t *, packet_info *, int, int);",
          "4360: static int  dissect_wassp(tvbuff_t *, packet_info *, proto_tree *);",
          "4363: void proto_register_wassp(void);",
          "4364: void proto_reg_handoff_wassp(void);",
          "4366: static int g_wassp_ver = 0;",
          "4367: static reassembly_table  wassp_reassembled_table;",
          "4368: static void wassp_defragment_init(void)",
          "4369: {",
          "4370:  reassembly_table_init(&wassp_reassembled_table, &addresses_reassembly_table_functions);",
          "4371: }",
          "4373: static const char* wassp_match_strval(WASSP_SUBTLV_DECODER_INFO_t *in_ptr, int in_type)",
          "4374: {",
          "4375:  if (in_ptr == NULL)",
          "4376:  {",
          "4377:   return NULL;",
          "4378:  }",
          "4379:  if (in_ptr->max_entry < in_type)",
          "4380:  {",
          "4381:   return NULL;",
          "4382:  }",
          "4384:  return in_ptr->entry[in_type].name;",
          "4385: }",
          "4387: static void",
          "4388: port_range_print(char *buf, guint32 temp)",
          "4389: {",
          "4390:  g_snprintf(buf, ITEM_LABEL_LENGTH, \" %d - %d\", (temp & 0xffff), (temp >> 16));",
          "4391: }",
          "4396: static void topology_moder_print(char *buf, guint16 temp)",
          "4397: {",
          "4398:  guint16 temp3 = temp & 0xc000;",
          "4399:  guint16 temp4 = temp & 0x0fff;",
          "4400:  switch (temp3)",
          "4401:  {",
          "4402:  case 0xc000:",
          "4403:   if (temp4)",
          "4404:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Routed At Controller  with vlanId = %d  (0x%x)\", temp4, temp);",
          "4405:   else",
          "4406:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Routed At Controller,  Untagged (0x%x)\", temp);",
          "4407:   break;",
          "4408:  case 0x4000:",
          "4409:   if (temp4)",
          "4410:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Bridge At AP with vlanId = %d  (0x%x)\", temp4, temp);",
          "4411:   else",
          "4412:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Bridge At AP,  Untagged  (0x%x) \", temp);",
          "4413:   break;",
          "4414:  case 0x8000:",
          "4415:   if (temp4)",
          "4416:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Bridge At Controller with vlanId = %d  (0x%x)  \", temp4, temp);",
          "4417:   else",
          "4418:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Bridge At Controller,  Untagged  (0x%x) \", temp);",
          "4419:   break;",
          "4420:  default:",
          "4421:   if (temp4)",
          "4422:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Unknown mode with vlanId = %d (0x%x)\", temp4, temp);",
          "4423:   else",
          "4424:    g_snprintf(buf, ITEM_LABEL_LENGTH, \" Unknown mode,  Untagged (0x%x) \", temp);",
          "4425:   break;",
          "4426:  }",
          "4427: }",
          "4431: static void",
          "4432: maskbit_priority_print(char *buf, guint8 temp)",
          "4433: {",
          "4434:  g_snprintf(buf, ITEM_LABEL_LENGTH, \" Type of Service Mask bits  : %d     Priority TxQ : %d\", (temp >> 4) & 0xf, temp & 0xf);",
          "4435: }",
          "4437: static void",
          "4438: cos_priority_txq_print(char *buf, guint8 temp)",
          "4439: {",
          "4440:  g_snprintf(buf, ITEM_LABEL_LENGTH, \" Class of Service priority bits  : %d     Class of Service Transmit Queue : %d\", (temp >> 4) & 0xf, temp & 0xf);",
          "4441: }",
          "4443: static void",
          "4444: cos_rate_id_print(char *buf, guint8 temp)",
          "4445: {",
          "4446:  g_snprintf(buf, ITEM_LABEL_LENGTH, \" Class of Service Inbound Rate Limit ID  : %d    Class of Service Outbound Rate Limit ID : %d\", (temp >> 4) & 0xf, temp & 0xf);",
          "4447: }",
          "4451: #define V831_FILTER_RULE_FORMAT 4",
          "4452: #define BEFORE_V831_FILTER_RULE_FORMAT 2",
          "4453: #define AFTER_V831_FILTER_RULE_FORMAT 1",
          "4454: #define V831_FILTER_RULE_STRUCT_SIZE 36",
          "4455: #define BEFORE_V831_FILTER_RULE_STRUCT_SIZE 16",
          "4456: #define AFTER_V831_FILTER_RULE_STRUCT_SIZE 20",
          "4457: static void decode_filter_rule_octext_string(proto_tree *tree, tvbuff_t *tvb, int offset, int length )",
          "4458: {",
          "4459:  int flag = 0, index, count, i;",
          "4460:  proto_tree *filter_rule_tree = proto_item_add_subtree(tree, ett_wassp_filter_rule);",
          "4462:     before V8.31 -- 16 bytes",
          "4463:     V83.1 -- 36 bytes",
          "4464:     after V8.31 -- 20 bytes",
          "4467:  if (((length - 4) % V831_FILTER_RULE_STRUCT_SIZE) == 0)  // might be V8.31 filter struct",
          "4468:   flag |= V831_FILTER_RULE_FORMAT;",
          "4470:  if (((length - 4) % AFTER_V831_FILTER_RULE_STRUCT_SIZE) == 0)  // might be new filter struct",
          "4471:   flag |= AFTER_V831_FILTER_RULE_FORMAT;",
          "4473:  if (((length - 4) % BEFORE_V831_FILTER_RULE_STRUCT_SIZE) == 0)  // might be old filter struct",
          "4474:   flag |= BEFORE_V831_FILTER_RULE_FORMAT;",
          "4478:  if (flag & V831_FILTER_RULE_FORMAT) // display as V8.31 filter struct",
          "4479:  {",
          "4480:   index = offset + 4;",
          "4482:   count = (length - 4) / V831_FILTER_RULE_STRUCT_SIZE;",
          "4483:   for (i = 0; i < count; i++)",
          "4484:   {",
          "4486:    proto_tree_add_item(filter_rule_tree, hf_wassp_filter_rule, tvb, index, V831_FILTER_RULE_STRUCT_SIZE, ENC_NA);",
          "4487:    proto_tree_add_item(filter_rule_tree, hf_wassp_filter_flag, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4488:    index += 4;",
          "4489:    proto_tree_add_item(filter_rule_tree, hf_wassp_ipaddress, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4490:    index += 4;",
          "4491:    proto_tree_add_item(filter_rule_tree, hf_filter_rule_port_range, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4492:    index += 4;",
          "4493:    proto_tree_add_item(filter_rule_tree, hf_wassp_ipprotocol, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4494:    index += 1;",
          "4495:    proto_tree_add_item(filter_rule_tree, hf_wassp_netmasklength, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4496:    index += 1;",
          "4497:    proto_tree_add_item(filter_rule_tree, hf_wassp_tos, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4498:    index += 1;",
          "4499:    proto_tree_add_item(filter_rule_tree, hf_filter_tos_maskbit_priority, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4500:    index += 1;",
          "4501:    proto_tree_add_item(filter_rule_tree, hf_cos_tos, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4502:    index += 1;",
          "4503:    proto_tree_add_item(filter_rule_tree, hf_cos_tos_mask, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4504:    index += 1;",
          "4505:    proto_tree_add_item(filter_rule_tree, hf_cos_priority_txq, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4506:    index += 1;",
          "4507:    proto_tree_add_item(filter_rule_tree, hf_cos_rateid, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4508:    index += 1;",
          "4509:    proto_tree_add_item(filter_rule_tree, hf_wassp_macaddr, tvb, index, 6, ENC_NA);",
          "4510:    index += 6;",
          "4511:    proto_tree_add_item(filter_rule_tree, hf_wassp_macaddr_mask, tvb, index, 6, ENC_NA);",
          "4512:    index += 6;",
          "4513:    proto_tree_add_item(filter_rule_tree, hf_wassp_vlanid, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4514:    index += 2;",
          "4515:    proto_tree_add_item(filter_rule_tree, hf_wassp_ethernet_type, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4516:    index += 2;",
          "4517:   }",
          "4518:  }",
          "4520:  if (flag & AFTER_V831_FILTER_RULE_FORMAT) // display as new filter struct",
          "4521:  {",
          "4522:   index = offset + 4;",
          "4524:   count = (length - 4) / AFTER_V831_FILTER_RULE_STRUCT_SIZE;",
          "4525:   for (i = 0; i < count; i++)",
          "4526:   {",
          "4528:    proto_tree_add_item(filter_rule_tree, hf_wassp_filter_rule, tvb, index, AFTER_V831_FILTER_RULE_STRUCT_SIZE, ENC_NA);",
          "4529:    proto_tree_add_item(filter_rule_tree, hf_wassp_filter_flag, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4530:    index += 4;",
          "4531:    proto_tree_add_item(filter_rule_tree, hf_wassp_ipaddress, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4532:    index += 4;",
          "4533:    proto_tree_add_item(filter_rule_tree, hf_filter_rule_port_range, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4534:    index += 4;",
          "4535:    proto_tree_add_item(filter_rule_tree, hf_wassp_ipprotocol, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4536:    index += 1;",
          "4537:    proto_tree_add_item(filter_rule_tree, hf_wassp_netmasklength, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4538:    index += 1;",
          "4539:    proto_tree_add_item(filter_rule_tree, hf_wassp_tos, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4540:    index += 1;",
          "4541:    proto_tree_add_item(filter_rule_tree, hf_filter_tos_maskbit_priority, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4542:    index += 1;",
          "4543:    proto_tree_add_item(filter_rule_tree, hf_cos_tos, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4544:    index += 1;",
          "4545:    proto_tree_add_item(filter_rule_tree, hf_cos_tos_mask, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4546:    index += 1;",
          "4547:    proto_tree_add_item(filter_rule_tree, hf_cos_priority_txq, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4548:    index += 1;",
          "4549:    proto_tree_add_item(filter_rule_tree, hf_cos_rateid, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4550:    index += 1;",
          "4551:   }",
          "4552:  }",
          "4554:  if (flag & BEFORE_V831_FILTER_RULE_FORMAT)",
          "4555:  {",
          "4556:   index = offset + 4;",
          "4558:   count = (length - 4) / BEFORE_V831_FILTER_RULE_STRUCT_SIZE;",
          "4559:   for (i = 0; i < count; i++)",
          "4560:   {",
          "4562:    proto_tree_add_item(filter_rule_tree, hf_wassp_filter_rule, tvb, index, BEFORE_V831_FILTER_RULE_STRUCT_SIZE, ENC_NA);",
          "4563:    proto_tree_add_item(filter_rule_tree, hf_wassp_filter_flag, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4564:    index += 4;",
          "4565:    proto_tree_add_item(filter_rule_tree, hf_wassp_ipaddress, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4566:    index += 4;",
          "4567:    proto_tree_add_item(filter_rule_tree, hf_filter_rule_port_range, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4568:    index += 4;",
          "4569:    proto_tree_add_item(filter_rule_tree, hf_wassp_ipprotocol, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4570:    index += 1;",
          "4571:    proto_tree_add_item(filter_rule_tree, hf_wassp_netmasklength, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4572:    index += 1;",
          "4573:    proto_tree_add_item(filter_rule_tree, hf_wassp_reserve, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4574:    index += 2;",
          "4575:   }",
          "4576:  }",
          "4577: }",
          "4580: static void decode_mu_appl_stats_block(proto_tree *tree, tvbuff_t *tvb, int offset )",
          "4581: {",
          "4582:  int index, count, i;",
          "4583:  proto_tree *tlv_tree = proto_item_add_subtree(tree, ett_wassp_mu_appl_stats);",
          "4585:  index = offset;",
          "4586:  count = tvb_get_ntohl(tvb, index);",
          "4587:  proto_tree_add_item(tlv_tree, hf_wassp_mu, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4588:  index += 4;",
          "4589:  for (i = 1; i <= count; i++)",
          "4590:  {",
          "4592:   proto_tree_add_item(tlv_tree, hf_wassp_macaddr, tvb, index, 6, ENC_NA);",
          "4593:   index += 6;",
          "4594:   proto_tree_add_item(tlv_tree, hf_wassp_apprules, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4595:   index += 2;",
          "4596:   proto_tree_add_item(tlv_tree, hf_wassp_displayid, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4597:   index += 2;",
          "4598:   proto_tree_add_item(tlv_tree, hf_wassp_txbytes, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4599:   index += 4;",
          "4600:   proto_tree_add_item(tlv_tree, hf_wassp_rxbytes, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4601:   index += 4;",
          "4602:  }",
          "4604: }",
          "4608: static void decode_cos_struct(proto_tree *tree, tvbuff_t *tvb, int offset )",
          "4609: {",
          "4610:  int index = offset;",
          "4611:  proto_tree_add_item(tree, hf_wassp_flag_1b, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4612:  index += 1;",
          "4613:  proto_tree_add_item(tree, hf_wassp_tos, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4614:  index += 1;",
          "4615:  proto_tree_add_item(tree, hf_wassp_tos_mask, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4616:  index += 1;",
          "4617:  proto_tree_add_item(tree, hf_wassp_priority, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4618:  index += 1;",
          "4619:  proto_tree_add_item(tree, hf_cos_rateid, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4621: }",
          "4623: static void decode_rate_limit_struct(proto_tree *tree, tvbuff_t *tvb, int offset, int length )",
          "4624: {",
          "4625:  int index = offset, count = length / 4, i;",
          "4627:  for (i = 0; i < count; i++)",
          "4628:  {",
          "4629:   proto_tree_add_item(tree, hf_wassp_in_cir, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4630:   index += 2;",
          "4631:   proto_tree_add_item(tree, hf_wassp_out_cir, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4632:   index += 2;",
          "4633:  }",
          "4635: }",
          "4637: static void decode_mac_list_struct(proto_tree *tree, tvbuff_t *tvb, int offset, int length )",
          "4638: {",
          "4639:  int index = offset, count = length / 6, i;",
          "4641:  for (i = 0; i < count; i++)",
          "4642:  {",
          "4643:   proto_tree_add_item(tree, hf_wassp_macaddr, tvb, index, 6, ENC_NA);",
          "4644:   index += 6;",
          "4645:  }",
          "4646: }",
          "4649: static void decode_ipv4_list_struct(proto_tree *tree, tvbuff_t *tvb, int offset, int length )",
          "4650: {",
          "4651:  int index = offset, count = length / 4, i;",
          "4653:  for (i = 0; i < count; i++)",
          "4654:  {",
          "4655:   proto_tree_add_item(tree, hf_wassp_ipaddress, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4656:   index += 4;",
          "4657:  }",
          "4658: }",
          "4660: static void decode_Channel_list(proto_tree *tree, tvbuff_t *tvb, int offset, int length )",
          "4661: {",
          "4662:  int index = offset, count = length / 2, i;",
          "4664:  for (i = 0; i < count; i++)",
          "4665:  {",
          "4666:   proto_tree_add_item(tree, hf_wassp_freq, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4667:   index += 2;",
          "4668:  }",
          "4669: }",
          "4673: static int decode_lbs_tag_header(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "4674: {",
          "4675:  int index = offset;",
          "4676:  proto_item *temp;",
          "4677:  proto_tree *lbs_header_tree;",
          "4679:  temp = proto_tree_add_item(tree, hf_aeroscout_header, tvb, index, 64, ENC_NA);",
          "4680:  lbs_header_tree = proto_item_add_subtree(temp, ett_wassp_header);",
          "4681:  proto_tree_add_item(lbs_header_tree, hf_aeroscout_header_magic_number, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4682:  index += 2;",
          "4683:  proto_tree_add_item(lbs_header_tree, hf_aeroscout_request_id, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4684:  index += 2;",
          "4685:  proto_tree_add_item(lbs_header_tree, hf_aeroscout_code, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4686:  index += 1;",
          "4687:  proto_tree_add_item(lbs_header_tree, hf_aeroscout_sub_code, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4688:  index += 1;",
          "4689:  proto_tree_add_item(lbs_header_tree, hf_aeroscout_datalength, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4690:  index += 2;",
          "4691:  proto_tree_add_item(lbs_header_tree, hf_wassp_mu_mac, tvb, index, 6, ENC_NA);",
          "4692:  index += 6;",
          "4693:  proto_tree_add_item(lbs_header_tree, hf_lbs_vendor_id, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4694:  index += 2;",
          "4695:  proto_tree_add_item(lbs_header_tree, hf_lbs_rsvd1, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4696:  index += 2;",
          "4697:  proto_tree_add_item(lbs_header_tree, hf_lbs_ap_bssid, tvb, index, 6, ENC_NA);",
          "4698:  index += 6;",
          "4699:  proto_tree_add_item(lbs_header_tree, hf_lbs_rsvd2, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4700:  index += 1;",
          "4701:  proto_tree_add_item(lbs_header_tree, hf_lbs_rxchan, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4702:  index += 1;",
          "4703:  proto_tree_add_item(lbs_header_tree, hf_lsb_tstamp, tvb, index, 4, ENC_BIG_ENDIAN);",
          "4704:  index += 4;",
          "4705:  proto_tree_add_item(lbs_header_tree, hf_hf_lsb_rsvd3, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4706:  index += 2;",
          "4707:  proto_tree_add_item(lbs_header_tree, hf_lsb_rssi, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4708:  index += 1;",
          "4709:  proto_tree_add_item(lbs_header_tree, hf_lsb_rsvd, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4710:  index += 1;",
          "4711:  proto_tree_add_item(lbs_header_tree, hf_lsb_noise_floor, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4712:  index += 1;",
          "4713:  proto_tree_add_item(lbs_header_tree, hf_lsb_rsvd4, tvb, index, 3, ENC_BIG_ENDIAN);",
          "4714:  index += 3;",
          "4715:  proto_tree_add_item(lbs_header_tree, hf_lsb_chan_rate, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4716:  index += 1;",
          "4717:  proto_tree_add_item(lbs_header_tree, hf_lsb_rsvd5, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4718:  index += 1;",
          "4719:  proto_tree_add_item(lbs_header_tree, hf_lsb_wh_addr2, tvb, index, 6, ENC_NA);",
          "4720:  index += 6;",
          "4721:  proto_tree_add_item(lbs_header_tree, hf_lsb_wh_fc, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4722:  index += 2;",
          "4723:  proto_tree_add_item(lbs_header_tree, hf_lsb_wh_seq, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4724:  index += 2;",
          "4725:  proto_tree_add_item(lbs_header_tree, hf_lsb_rsvd6, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4726:  index += 2;",
          "4727:  proto_tree_add_item(lbs_header_tree, hf_lsb_wh_addr3, tvb, index, 6, ENC_NA);",
          "4728:  index += 6;",
          "4729:  proto_tree_add_item(lbs_header_tree, hf_lsb_wh_addr4, tvb, index, 6, ENC_NA);",
          "4730:  index += 6;",
          "4731:  return index;",
          "4732: }",
          "4740: int dissect_wassp_sub_tlv(proto_tree *wassp_tree, tvbuff_t *tvb, packet_info *pinfo, int offset, int in_len, int which_tab, int ru_msg_type)",
          "4741: {",
          "4742:  proto_item *tlvi;",
          "4743:  proto_item *ti;",
          "4744:  proto_tree *tmp_tree;",
          "4745:  char *label;",
          "4746:  guint32 value;",
          "4747:  guint16 tlv_type = EID_PARSE_ERROR;",
          "4748:  guint16 length = 0, org_offset = offset;",
          "4749:  WASSP_SUBTLV_DECODER_INFO_t *tmp_decr = NULL;",
          "4750:  guint32 i, tableNo;",
          "4751:  int index;",
          "4753:  if (which_tab >= TAB_MAX)",
          "4754:  {",
          "4755:   return offset;",
          "4756:  }",
          "4758:  tmp_decr = (WASSP_SUBTLV_DECODER_INFO_t*)&wassp_decr_info[which_tab];",
          "4760:  if (tvb_reported_length_remaining(tvb, offset) > 0)",
          "4761:  {",
          "4762:   ti = proto_tree_add_item(wassp_tree, hf_wassp_sub_tree, tvb, offset, in_len, ENC_NA);",
          "4763:   proto_item_append_text(ti, \" : %s\", tmp_decr->subtree_name);",
          "4764:   tmp_tree = proto_item_add_subtree(ti, *((int*)(WASSP_SUBTLV_GET_ETTNUM(tmp_decr))));",
          "4766:   while (((value = tvb_reported_length_remaining(tvb, offset)) >= 4) && (offset - org_offset < in_len))",
          "4767:   {",
          "4768:    tlv_type = tvb_get_ntohs(tvb, offset + TLV_TYPE);",
          "4769:    length = tvb_get_ntohs(tvb, offset + TLV_LENGTH);",
          "4770:    if (tlv_type > WASSP_SUBTLV_GET_MAXENTRY(tmp_decr))",
          "4771:    {",
          "4772:     proto_tree_add_uint_format_value(tmp_tree, hf_wassp_tlv_unknown, tvb, offset, 4, tlv_type, \"Unknow Wassp TLV (%d)\", tlv_type);",
          "4773:     proto_tree_add_item(tmp_tree, hf_wassp_tlv_length, tvb, offset + TLV_LENGTH, 2, ENC_BIG_ENDIAN);",
          "4774:     proto_tree_add_item(tmp_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "4775:     offset += length;",
          "4776:     continue;",
          "4777:    }",
          "4779:    label = (char*)wassp_match_strval(tmp_decr, tlv_type);",
          "4780:    label = (label == NULL) ? \"Unknown Type\" : label;",
          "4782:    if (length > value)",
          "4783:    {",
          "4784:     proto_tree_add_item(tmp_tree, hf_wassp_tlv_invalid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4785:     tlv_type = EID_PARSE_ERROR;",
          "4786:    }",
          "4787:    else if (length < 4)",
          "4788:    {",
          "4789:     proto_tree_add_item(tmp_tree, hf_wassp_tlv_invalid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4790:     tlv_type = EID_PARSE_ERROR;",
          "4791:    }",
          "4792:    else if (length == 4)",
          "4793:    {",
          "4794:     if ((which_tab == TAB_RSS_DATA_ARRAY) && (tlv_type == EID_RSS_DATA_BLOCK))",
          "4795:     {",
          "4796:      proto_tree_add_item(tmp_tree, hf_wassp_tlv_value_octext, tvb, offset, length, ENC_NA);",
          "4797:     }",
          "4798:     else",
          "4799:     {",
          "4800:      tlvi = proto_tree_add_item(tmp_tree, hf_wassp_tlv_value, tvb, offset, length, ENC_NA);",
          "4801:      proto_item_append_text(tlvi, \" : %s (%d)\", label, tlv_type);",
          "4802:     }",
          "4803:     offset += length;",
          "4804:     continue;",
          "4805:    }",
          "4806:    else",
          "4807:    {",
          "4808:     if ((which_tab == TAB_RSS_DATA_ARRAY) && (tlv_type == EID_RSS_DATA_BLOCK))",
          "4809:     {",
          "4810:      proto_tree_add_item(tmp_tree, hf_wassp_tlv_value_octext, tvb, offset, length, ENC_NA);",
          "4811:     }",
          "4812:     else",
          "4813:     {",
          "4814:      tlvi = proto_tree_add_item(tmp_tree, hf_wassp_tlv_value, tvb, offset, length, ENC_NA);",
          "4815:      proto_item_append_text(tlvi, \" : %s (%d)\", label, tlv_type);",
          "4816:     }",
          "4817:    }",
          "4819:    tlvi =   proto_tree_add_item(tmp_tree, hf_wassp_tlv_type_sub, tvb, offset + TLV_TYPE, 2, ENC_NA);",
          "4820:    proto_item_append_text(tlvi, \" : %s (%d)\", label, tlv_type);",
          "4821:    proto_tree_add_item(tmp_tree, hf_wassp_tlv_length, tvb, offset + TLV_LENGTH, 2, ENC_BIG_ENDIAN);",
          "4823:    if (tlv_type == EID_PARSE_ERROR)",
          "4824:    {",
          "4825:     proto_tree_add_item(wassp_tree, hf_wassp_tlv_invalid, tvb, offset, value, ENC_BIG_ENDIAN);",
          "4826:     offset += length;",
          "4827:     break;",
          "4828:    }",
          "4829:    else",
          "4830:    {",
          "4831:     if (WASSP_SUBTLV_GET_ENTRY_IDX_TYPE(tmp_decr, tlv_type) != TLV_TYPE_BLOCK_TLV)",
          "4832:     {",
          "4833:      proto_tree_add_item(tmp_tree, wassp_type_converter(WASSP_SUBTLV_GET_ENTRY_IDX_TYPE(tmp_decr, tlv_type)), tvb, offset + TLV_VALUE, length - 4, FALSE);",
          "4834:      if ((which_tab == TAB_CONFIG_SITE) && (tlv_type == EID_SITE_TOPOLOGY_BLOCK))",
          "4835:      {",
          "4836:       index = offset + 4;",
          "4837:       for (i = 0; i < (guint32)(length / 4 - 1); i++)",
          "4838:       {",
          "4839:        proto_tree_add_item(tmp_tree, hf_wassp_topologykey, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4840:        index += 2;",
          "4841:        proto_tree_add_item(tmp_tree, hf_wassp_topology_mode, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4842:        index += 2;",
          "4843:       }",
          "4844:      }",
          "4846:      if (which_tab == VNS_CONFIG_BLOCK)",
          "4847:      {",
          "4848:       if (tlv_type == EID_V_COS)",
          "4849:       {",
          "4850:        decode_cos_struct(tmp_tree, tvb, offset + 4 );",
          "4851:       }",
          "4852:       else if (tlv_type == EID_V_RATE_LIMIT_RESOURCE_TBL)",
          "4853:       {",
          "4854:        decode_rate_limit_struct(tmp_tree,tvb,  offset + 4,length-4 );",
          "4855:       }",
          "4856:      }",
          "4858:      if (which_tab == TAB_CONFIG_FILTER || which_tab == TAB_FILTER_CONFIG_STRUCT_BLOCK)",
          "4859:      {",
          "4860:       if (tlv_type == EID_V_FILTER_RULES || tlv_type == EID_FILTER_RULES || tlv_type == EID_V_SITE_FILTER_RULES )",
          "4861:       {",
          "4862:        if (length < 20)",
          "4863:         break;",
          "4864:        decode_filter_rule_octext_string(tmp_tree, tvb, offset + 4, length );",
          "4866:       }",
          "4867:      }",
          "4870:      if (which_tab == TAB_SCAN_PROFILE_BLOCK)",
          "4871:      {",
          "4872:       if (tlv_type == EID_CHANNEL_LIST)",
          "4873:       {",
          "4874:        decode_Channel_list(tmp_tree, tvb, offset + 4,  length -4 );",
          "4875:       }",
          "4876:      }",
          "4878:      if (which_tab == TAB_SURVEILLANCE_DATA_BLOCK)",
          "4879:      {",
          "4880:       if (tlv_type == EID_SCAN_RSS_RSSI)",
          "4881:       {",
          "4882:        index = offset + 4;",
          "4883:        proto_tree_add_item(tmp_tree, hf_wassp_rss, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4884:        index += 2;",
          "4885:        proto_tree_add_item(tmp_tree, hf_wassp_rssi, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4886:       }",
          "4888:       if (tlv_type == EID_PARAMS)",
          "4889:       {",
          "4890:        index = offset + 4;",
          "4891:        proto_tree_add_item(tmp_tree, hf_wassp_threatstate, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4892:        index += 1;",
          "4893:        proto_tree_add_item(tmp_tree, hf_wassp_radioparams, tvb, index, 1, ENC_BIG_ENDIAN);",
          "4894:        index += 1;",
          "4895:        proto_tree_add_item(tmp_tree, hf_wassp_channelfreq, tvb, index, 2, ENC_BIG_ENDIAN);",
          "4896:       }",
          "4898:      }",
          "4901:      if (which_tab == CONFIG_GLOBAL_BLOCK)",
          "4902:      {",
          "4903:       if (tlv_type == EID_ON_DEMAND_ARRAY || tlv_type == EID_DYN_ON_DEMAND_ARRAY)",
          "4904:       {",
          "4905:        decode_mac_list_struct(tmp_tree, tvb, offset + 4,  length -4 );",
          "4906:       }",
          "4907:      }",
          "4909:      if (which_tab == TAB_DETECTED_ROGUE_BLOCK)",
          "4910:      {",
          "4911:       if (tlv_type == EID_DNS_IP_ADDR)",
          "4912:       {",
          "4913:        decode_ipv4_list_struct(tmp_tree, tvb, offset + 4,  length -4 );",
          "4914:       }",
          "4915:      }",
          "4917:      offset += length;",
          "4918:     }",
          "4919:     else",
          "4920:     {",
          "4922:      tableNo = WASSP_SUBTLV_GET_ENTRY_IDX_TABIDX(tmp_decr, tlv_type);",
          "4923:      if ((tableNo == RADIO_CONFIG_BLOCK) && (ru_msg_type == WASSP_RU_Ack))",
          "4924:      {",
          "4925:       offset = dissect_wassp_sub_tlv(tmp_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_RU_ACK_RADIO_CONFIG, ru_msg_type);",
          "4926:      }",
          "4927:      else",
          "4928:       offset = dissect_wassp_sub_tlv(tmp_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, tableNo, ru_msg_type);",
          "4929:     }",
          "4931:    }",
          "4932:   }",
          "4933:  }",
          "4934:  return offset;",
          "4935: }",
          "4938: int dissect_wassp_tlv(proto_tree *wassp_tree, tvbuff_t *tvb, packet_info *pinfo, int offset, wassp_ru_msg_t rumsg_type)",
          "4939: {",
          "4940:  proto_item *tlvi = NULL;",
          "4941:  proto_tree *tlv_tree;",
          "4942:  guint16 tlv_type = WASSP_RU_UNUSED_0;",
          "4943:  guint16 length;",
          "4944:  guint32 value;",
          "4945:  int index;",
          "4946:  wassp_ru_msg_t ru_msg_type = rumsg_type;",
          "4947:  char *label;",
          "4951:  SET_WASSP_TLV_VERSION(0);",
          "4952:  while ((value = tvb_reported_length_remaining(tvb, offset)) >= 4)",
          "4953:  {",
          "4954:   tlv_type = tvb_get_ntohs(tvb, offset + TLV_TYPE);",
          "4955:   length = tvb_get_ntohs(tvb, offset + TLV_LENGTH);",
          "4956:   label = (char*)try_val_to_str(tlv_type, wassp_tlv_types);",
          "4957:   label = (label == NULL) ? \"Unknown Type\" : label;",
          "4959:   if (length > value)",
          "4960:   {",
          "4961:    tlvi = proto_tree_add_item(wassp_tree, hf_wassp_tlv_invalid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4962:    tlv_type = EID_UNUSED_0;",
          "4963:   }",
          "4964:   else if (length < 4)",
          "4965:   {",
          "4966:    tlvi = proto_tree_add_item(wassp_tree, hf_wassp_tlv_invalid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4967:    tlv_type = EID_UNUSED_0;",
          "4968:   }",
          "4969:   else",
          "4970:   {",
          "4971:    tlvi = proto_tree_add_item(wassp_tree, hf_wassp_tlv_value, tvb, offset, length, ENC_NA);",
          "4972:    proto_item_append_text(tlvi, \" : %s (%d)\", label, tlv_type);",
          "4974:   }",
          "4976:   tlv_tree = proto_item_add_subtree(tlvi, ett_wassp_tlv);",
          "4977:   proto_tree_add_item(tlv_tree, hf_wassp_tlv_type_main, tvb, offset + TLV_TYPE, 2, ENC_BIG_ENDIAN);",
          "4978:   proto_tree_add_item(tlv_tree, hf_wassp_tlv_length, tvb, offset + TLV_LENGTH, 2, ENC_BIG_ENDIAN);",
          "4980:   switch (tlv_type)",
          "4981:   {",
          "4982:   case EID_UNUSED_0:                  // 0",
          "4983:    offset += 4;",
          "4984:    break;",
          "4986:   case EID_STATUS:                    // 1",
          "4987:    ru_msg_type = (wassp_ru_msg_t) tvb_get_guint8(tvb, WASSP_HDR_TYPE);",
          "4990:    if (WASSP_RU_SW_Version_Validate_Rsp == ru_msg_type)",
          "4991:    {",
          "4992:     proto_item_append_text(tlvi, \" (upgrade action)\");",
          "4993:     proto_tree_add_item(tlv_tree, hf_wassp_tlv_eid_action, tvb, offset + TLV_VALUE, length - 4, ENC_BIG_ENDIAN);",
          "4994:    }",
          "4996:    {",
          "4997:     proto_item_append_text(tlvi, \" (status)\");",
          "4998:     proto_tree_add_item(tlv_tree, hf_wassp_tlv_eid_status, tvb, offset + TLV_VALUE, length - 4, ENC_BIG_ENDIAN);",
          "4999:    }",
          "5000:    offset += length;",
          "5001:    break;",
          "5004:   case EID_RU_SW_VERSION:                       // 2",
          "5005:   case EID_RU_SERIAL_NUMBER:                    // 3",
          "5006:   case EID_IMAGE_PATH:                          // 9",
          "5007:   case EID_RANDOM_NUMBER:                       // 14",
          "5008:   case EID_RU_MODEL:                            // 17",
          "5009:   case EID_RU_TRAP:                             // 24",
          "5010:   case EID_RU_SSID_NAME:                        // 37",
          "5011:   case EID_AC_REG_CHALLENGE:                    // 41",
          "5012:   case EID_AC_REG_RESPONSE:                     // 42",
          "5013:   case EID_STATS:                               // 43",
          "5014:   case EID_CERTIFICATE:                         // 44",
          "5015:   case EID_RADIO_INFO:                          // 51",
          "5016:   case EID_NETWORK_INFO:                        // 52",
          "5017:   case EID_PRODUCT_ID:                          // 54",
          "5018:   case EID_RADIO_INFO_ACK:                      // 55",
          "5019:   case EID_SSID:                                // 58",
          "5020:   case EID_MU_PMKID_LIST:                       // 72",
          "5021:   case EID_MU_PMK_BP:                           // 73",
          "5022:   case EID_MU_PMKID_BP:                         // 74",
          "5023:   case EID_LOG_FILE:                            // 83",
          "5024:   case EID_ALARM_DESCRIPTION:                   // 85",
          "5025:   case EID_RU_BACKUP_VERSION:                   // 93",
          "5026:   case EID_AC_SW_VERSION:                       // 94",
          "5027:   case EID_MCAST_LAMG_LIST:                     // 95",
          "5028:   case EID_FILTER_NAME:                         // 96",
          "5029:   case EID_SENSOR_IMG_VERSION:                  // 104",
          "5030:   case EID_RATECTRL_NAME_UL:                    // 111",
          "5031:   case EID_RATECTRL_NAME_DL:                    // 112",
          "5032:   case EID_POLICY_NAME:                         // 113",
          "5033:   case EID_SIAPP_AP_NAME:                       // 120",
          "5034:   case EID_SIAPP_USER_IDENTITY:                 // 151",
          "5035:   case EID_MU_FILTER_POLICY_NAME:               // 162",
          "5036:   case EID_MU_TOPOLOGY_POLICY_NAME:             // 163",
          "5037:   case EID_MU_COS_POLICY_NAME:                  // 164",
          "5038:   case EID_SITE_NAME:                           // 175",
          "5039:   case EID_SSS_SSID:                            // 191",
          "5040:   case EID_POLICY_ZONE_NAME:                    // 193",
          "5041:   case EID_MU_USER_NAME:                        // 196",
          "5042:   case EID_SCAN_SSID:                           // 237",
          "5043:   case EID_THREAT_NAME:                         // 248",
          "5044:   case EID_LOCATION:                            // 249",
          "5045:   case EID_MU_EVENT_STRING:                     // 254",
          "5046:   case EID_LOCATOR_FLOOR_NAME:                  // 288",
          "5047:   case EID_MU_RFS_NAME:                         // 296",
          "5048:   case EID_MU_URL:                              // 301",
          "5049:   case EID_MU_ACCT_SESSION_ID_STRING:           // 304",
          "5050:   case EID_MU_ACCT_POLICY_NAME:                 // 305",
          "5051:   case EID_MU_TUNNEL_PRIVATE_GROUP_ID_STRING:   // 309",
          "5052:   case EID_MU_USER_ID_STRING:                   // 310",
          "5053:   case EID_MU_LOCATION:                         // 331",
          "5054:   case EID_AREA_NAME:                           // 335",
          "5055:   case EID_CUI:                                 // 363",
          "5056:   case EID_WFA_HS20_URL:                        // 368",
          "5057:   case EID_DHCP_HOST_NAME:                      // 382",
          "5058:   case EID_MU_ECP_PW:                           // 385",
          "5059:   case EID_MU_ECP_TOKEN:                        // 386",
          "5060:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_string, tvb, offset + TLV_VALUE, length - 4, ENC_ASCII|ENC_NA);",
          "5061:    offset += length;",
          "5062:    break;",
          "5065:   case EID_RU_REG_CHALLENGE:                      // 4",
          "5066:   case EID_RU_REG_RESPONSE:                       // 5",
          "5067:   case EID_RU_VNSID:                              // 7",
          "5068:   case EID_SESSION_KEY:                           // 12",
          "5069:   case EID_RU_PREAUTH:                            // 39",
          "5070:   case EID_RU_PMK:                                // 40",
          "5071:   case EID_SIAPP_PMKID:                           // 115",
          "5072:   case EID_SIAPP_PMK_REAUTH:                      // 116",
          "5073:   case EID_SIAPP_PMK_LIFETIME:                    // 117",
          "5074:   case EID_SIAPP_PMKID_FLAG:                      // 118",
          "5075:   case EID_SIAPP_MU_PMK:                          // 119",
          "5076:   case EID_SIAPP_CLUSTER_ACS_REQ:                 // 122",
          "5077:   case EID_SIAPP_PACKET_RETRIES:                  // 124",
          "5078:   case EID_SIAPP_ASSOC_IN_WLAN:                   // 125",
          "5079:   case EID_SIAPP_ASSOC_IN_CLUSTER:                // 126",
          "5080:   case EID_SIAPP_REASSOC_IN_CLUSTER:              // 127",
          "5081:   case EID_SIAPP_NEWAP_BSSID:                     // 129",
          "5082:   case EID_SIAPP_OLDAP_BSSID:                     // 130",
          "5083:   case EID_SIAPP_RAD_CACS_REQ:                    // 131",
          "5084:   case EID_SIAPP_CLIENT_COUNT:                    // 133",
          "5085:   case EID_SIAPP_MU_TransmittedFrameCount:        // 135",
          "5086:   case EID_SIAPP_MU_ReceivedFrameCount:           // 136",
          "5087:   case EID_SIAPP_MU_TransmittedBytes:             // 137",
          "5088:   case EID_SIAPP_MU_ReceivedBytes:                // 138",
          "5089:   case EID_SIAPP_MU_UL_DroppedRateControlPackets: // 139",
          "5090:   case EID_SIAPP_MU_DL_DroppedRateControlPackets: // 140",
          "5091:   case EID_SIAPP_MU_DL_DroppedBufferFullPackets:  // 141",
          "5092:   case EID_SIAPP_MU_DL_LostRetriesPackets:        // 142",
          "5093:   case EID_SIAPP_MU_UL_DroppedRateControlBytes:   // 143",
          "5094:   case EID_SIAPP_MU_DL_DroppedRateControlBytes:   // 144",
          "5095:   case EID_SIAPP_MU_DL_DroppedBufferFullBytes:    // 145",
          "5096:   case EID_SIAPP_MU_DL_LostRetriesBytes:          // 146",
          "5097:   case EID_SIAPP_BP_BSSID:                        // 147",
          "5098:   case EID_SIAPP_RADIO_ID:                        // 148",
          "5099:   case EID_SIAPP_PREAUTH_REQ:                     // 150",
          "5100:   case EID_SIAPP_LOADBAL_LOADGROUP_ID:            // 154",
          "5101:   case EID_MU_ACCOUNTING_CLASS:                   // 169",
          "5102:   case EID_SSS_TS64_MU_UPDATE:                    // 183",
          "5103:   case EID_SSS_TS64_AP_CURRENT:                   // 184",
          "5104:   case EID_SSS_AP_HOMEHASH:                       // 186",
          "5105:   case EID_EVENT_ARRAY:                           // 189",
          "5106:   case EID_INFORM_MU_PMK:                         // 199",
          "5107:   case EID_ARP_PROXY:                             // 201",
          "5108:   case EID_MCAST_FILTER_RULES:                    // 202",
          "5109:   case EID_AP_PARAMS:                             // 203",
          "5110:   case EID_THREAT_STATS_F:                        // 220",
          "5111:   case EID_THREAT_PATTERN:                        // 224",
          "5112:   case EID_LOCATOR_LOC_POINT:                     // 265",
          "5113:   case EID_MU_EVENT_DETAILS:                      // 266",
          "5114:   case EID_MU_EVENT_LOC_BLOCK:                    // 268",
          "5115:   case EID_AP_REDIRECT:                           // 291",
          "5116:   case EID_MU_CVLAN_BAP:                          // 292",
          "5117:   case EID_MU_SESSION_ID:                         // 295",
          "5118:   case EID_MU_FLAGS:                              // 297",
          "5119:   case EID_MU_ASSOC_TIME:                         // 298",
          "5120:   case EID_MU_ACTIVE_TIME:                        // 299",
          "5121:   case EID_REPORT_REQ:                            // 300",
          "5122:   case EID_MU_SESSION_LIFETIME:                   // 302",
          "5123:   case EID_MU_REAUTH_TIMER:                       // 303",
          "5124:   case EID_MU_ACCT_START_TIME:                    // 306",
          "5125:   case EID_MU_ACCT_CLASS:                         // 307",
          "5126:   case EID_MU_LOGIN_LAT_GROUP:                    // 308",
          "5127:   case EID_MU_DEFENDED_STATE:                     // 311",
          "5128:   case EID_MU_MOD_MASK:                           // 312",
          "5129:   case EID_LOCATOR_TRACKED:                       // 313",
          "5130:   case EID_PORT:                                  // 314",
          "5131:   case EID_RETRIES_COUNT:                         // 315",
          "5132:   case EID_MODULATION_TYPE:                       // 316",
          "5133:   case EID_ROGUE_DETECTION:                       // 319",
          "5134:   case EID_TTL:                                   // 324",
          "5135:   case EID_LOCATOR_STATE_DATA:                    // 326",
          "5136:   case EID_LOCATOR_POINT_SET:                     // 327",
          "5137:   case EID_FILTER_RULE_FIXED_APP_ID:              // 328",
          "5138:   case EID_MU_AREA_BLOCK:                         // 330",
          "5139:   case EID_IN_SERVICE_AP_LIST:                    // 334",
          "5140:   case EID_OUT_SERVICE_AP_LIST:                   // 335",
          "5141:   case EID_LAST_RD_AP:                            // 336",
          "5142:   case EID_ROGUE_INFO:                            // 337",
          "5143:   case EID_MU_PMK_R1:                             // 339",
          "5144:   case EID_SIAPP_R0KHID:                          // 340",
          "5145:   case EID_SIAPP_R1KHID:                          // 341",
          "5146:   case EID_SIAPP_FT_NONCE:                        // 342",
          "5147:   case EID_SIAPP_FT_PMKR0NAME:                    // 343",
          "5148:   case EID_SIAPP_FT_R1KHID:                       // 344",
          "5149:   case EID_SIAPP_FT_S1KHID:                       // 345",
          "5150:   case EID_SIAPP_FT_PMKR1:                        // 346",
          "5151:   case EID_SIAPP_FT_PMKR1NAME:                    // 347",
          "5152:   case EID_SIAPP_FT_PAIRWISE:                     // 348",
          "5153:   case EID_SIAPP_FT_LIFETIME:                     // 349",
          "5154:   case EID_MU_POWER_CAP:                          // 350",
          "5155:   case EID_PERIODIC_NEIGHBOUR_REPORT:             // 352",
          "5156:   case EID_NEIGHBOUR_ENTRY:                       // 354",
          "5157:   case EID_MU_PMK_R0NAME:                         // 362",
          "5158:   case EID_IPV6_ADDR:                             // 373",
          "5159:   case EID_MU_DEV_IDENTITY:                       // 376",
          "5160:   case EID_NEIGHBOUR_ENTRY_2:                     // 383",
          "5161:   case EID_CHANNEL_ENTRY:                         // 384",
          "5162:   case EID_PKT_F_WIRELESS:                        // 391",
          "5163:   case EID_PKT_F_WIREDCLIENT:                     // 392",
          "5164:   case EID_PKT_F_DIRECTION:                       // 393",
          "5165:   case EID_PKT_F_IP_ARRAY:                        // 396",
          "5166:   case EID_PKT_F_RADIO:                           // 394",
          "5167:   case EID_VSA_SSID_ID:                           // 400",
          "5168:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5169:    offset += length;",
          "5170:    break;",
          "5173:   case EID_AC_IPADDR:                    // 6",
          "5174:   case EID_TFTP_SERVER:                  // 8",
          "5175:   case EID_STATIC_BP_IPADDR:             // 30",
          "5176:   case EID_STATIC_BP_NETMASK:            // 31",
          "5177:   case EID_STATIC_BP_GATEWAY:            // 32",
          "5178:   case EID_STATIC_BM_IPADDR:             // 33",
          "5179:   case EID_AP_IPADDR:                    // 89",
          "5180:   case EID_AP_NETMASK:                   // 90",
          "5181:   case EID_AP_GATEWAY:                   // 91",
          "5182:   case EID_MU_IP_ADDR:                   // 173",
          "5183:   case EID_PEER_SITE_IP:                 // 176",
          "5184:   case EID_COLLECTOR_IP_ADDR:            // 200",
          "5185:   case EID_IP_ADDR_TX:                   // 322",
          "5186:   case EID_IP_ADDR_RX:                   // 323",
          "5187:   case EID_GW_IP_ADDR:                   // 325",
          "5188:   case EID_STATIC_VSA_IPADDR:            // 387",
          "5189:   case EID_STATIC_VSA_NETMASK:           // 388",
          "5190:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5191:    offset += length;",
          "5192:    break;",
          "5194:   case EID_CONFIG:                       // 10",
          "5195:   case EID_ALARM:                        // 38",
          "5197:    dissector_try_uint(wassp_dissector_table, WASSP_SNMP, tvb_new_subset_length_caplen(tvb, offset + TLV_VALUE, -1, length - 4), pinfo, tlv_tree);",
          "5198:    offset += length;",
          "5199:    break;",
          "5201:   case EID_RU_STATE:                     // 11",
          "5202:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_eid_rustate, tvb, offset + TLV_VALUE, length - 4, ENC_BIG_ENDIAN);",
          "5203:    proto_item_append_text(tlvi, \": %s\",",
          "5204:             (tvb_get_guint8(tvb, offset + TLV_VALUE) ?",
          "5205:       wassp_eid_rustate_types.true_string :",
          "5206:       wassp_eid_rustate_types.false_string));",
          "5207:    offset += length;",
          "5208:    break;",
          "5211:   case EID_RU_PROTOCOL:                     // 13",
          "5212:   case EID_STANDBY_TIMEOUT:                 // 15",
          "5213:   case EID_RU_CHALLENGE_ID:                 // 16",
          "5214:   case EID_RU_SCAN_MODE:                    // 18",
          "5215:   case EID_RU_SCAN_TYPE:                    // 19",
          "5216:   case EID_RU_SCAN_INTERVAL:                // 20",
          "5217:   case EID_RU_RADIO_TYPE:                   // 21",
          "5218:   case EID_RU_CHANNEL_DWELL_TIME:           // 22",
          "5219:   case EID_RU_CHANNEL_LIST:                 // 23",
          "5220:   case EID_RU_SCAN_TIMES:                   // 25",
          "5221:   case EID_RU_SCAN_DELAY:                   // 26",
          "5222:   case EID_RU_SCAN_REQ_ID:                  // 27",
          "5223:   case EID_STATIC_CONFIG:                   // 28",
          "5224:   case EID_LOCAL_BRIDGING:                  // 29",
          "5225:   case EID_RU_CAPABILITY:                   // 36",
          "5226:   case EID_RADIO_ID:                        // 45",
          "5227:   case EID_REQ_ID:                          // 46",
          "5228:   case EID_NETWORK_ID:                      // 47",
          "5229:   case EID_TIME:                            // 49",
          "5230:   case EID_NUM_RADIOS:                      // 50",
          "5231:   case EID_VENDOR_ID:                       // 53",
          "5232:   case EID_SECURE_TUNNEL:                   // 56",
          "5233:   case EID_MU_TOPOLOGY_ID:                  // 57",
          "5234:   case EID_SNMP_ERROR_STATUS:               // 60",
          "5235:   case EID_SNMP_ERROR_INDEX:                // 61",
          "5236:   case EID_RU_REAUTH_TIMER:                 // 62",
          "5237:   case EID_AP_IMG_TO_RAM:                   // 63",
          "5238:   case EID_AP_IMG_ROLE:                     // 64",
          "5239:   case EID_STATS_REQUEST_TYPE:              // 67",
          "5240:   case EID_STATS_LAST:                      // 68",
          "5241:   case EID_COUNTDOWN_TIME:                  // 75",
          "5242:   case EID_WASSP_VLAN_TAG:                  // 76",
          "5243:   case EID_SSID_ID:                         // 77",
          "5244:   case EID_PORT_OPEN_FLAG:                  // 80",
          "5245:   case EID_WASSP_TUNNEL_TYPE:               // 81",
          "5246:   case EID_LOG_TYPE:                        // 82",
          "5247:   case EID_ALARM_SEVERITY:                  // 84",
          "5248:   case EID_AP_DHCP_MODE:                    // 88",
          "5249:   case EID_AUTH_STATE:                      // 98",
          "5250:   case EID_MU_DISC_AFTER_AUTH:              // 99",
          "5251:   case EID_TRANS_ID:                        // 101",
          "5252:   case EID_TIMEZONE_OFFSET:                 // 102",
          "5253:   case EID_SENSOR_FORCE_DOWNLOAD:           // 103",
          "5254:   case EID_BRIDGE_MODE:                     // 105",
          "5255:   case EID_MU_VLAN_TAG:                     // 106",
          "5256:   case EID_RATECTRL_CIR_UL:                 // 107",
          "5257:   case EID_RATECTRL_CIR_DL:                 // 108",
          "5258:   case EID_RATECTRL_CBS_UL:                 // 109",
          "5259:   case EID_RATECTRL_CBS_DL:                 // 110",
          "5260:   case EID_SIAPP_LOADBAL_PKT_TYPE:          // 153",
          "5261:   case EID_SIAPP_LOADBAL_LOAD_VALUE:        // 155",
          "5262:   case EID_SIAPP_FILTER_COS:                // 157",
          "5263:   case EID_UCAST_FILTER_DISABLE:            // 160",
          "5264:   case EID_MU_INFORM_REASON:                // 161",
          "5265:   case EID_MU_FILTER_KEY:                   // 165",
          "5266:   case EID_MU_TOPOLOGY_KEY:                 // 166",
          "5267:   case EID_MU_COS_KEY:                      // 167",
          "5268:   case EID_MU_SESSION_TIMEOUT:              // 168",
          "5269:   case EID_MU_LOGIN_LAT_PORT:               // 170",
          "5270:   case EID_MU_IDLE_TIMEOUT:                 // 171",
          "5271:   case EID_MU_ACCT_INTERIM_INTERVAL:        // 172",
          "5272:   case EID_MU_TERMINATE_ACTION:             // 174",
          "5273:   case EID_INTERFERENCE_EVENTS_ENABLE:      // 177",
          "5274:   case EID_EVENT_TYPE:                      // 178",
          "5275:   case EID_EVENT_CHANNEL:                   // 179",
          "5276:   case EID_EVENT_VALUE:                     // 180",
          "5277:   case EID_SSS_MU_ASSOC_TIME:               // 182",
          "5278:   case EID_SSS_MU_AUTH_STATE:               // 185",
          "5279:   case EID_TIME_FIRST_DETECTED:             // 187",
          "5280:   case EID_TIME_LAST_REPORTED:              // 188",
          "5281:   case EID_SSS_DEFAULT_SESSION_TIMEOUT:     // 190",
          "5282:   case EID_SSS_PRIVACY_TYPE:                // 192",
          "5283:   case EID_RU_AC_EVENT_COMPONENT_ID:        // 194",
          "5284:   case EID_MU_AUTH_STATE:                   // 195",
          "5285:   case EID_BULK_TYPE:                       // 197",
          "5286:   case EID_SENT_TIME:                       // 198",
          "5287:   case EID_SCAN_PROFILE_ID:                 // 209",
          "5288:   case EID_ACTION_REQ:                      // 210",
          "5289:   case EID_COUNTERMEASURES_MAX_CH:          // 212",
          "5290:   case EID_COUNTERMEASURES_SET:             // 213",
          "5291:   case EID_SEQ_NUM:                         // 215",
          "5292:   case EID_THREAT_TYPE:                     // 218",
          "5293:   case EID_THREAT_ID:                       // 219",
          "5294:   case EID_THREAT_FR_SFR:                   // 221",
          "5295:   case EID_THREAT_ALERT_TH_DUR:             // 225",
          "5296:   case EID_THREAT_CLEAR_TH_DUR:             // 226",
          "5297:   case EID_THREAT_PRIORITY:                 // 227",
          "5298:   case EID_THREAT_MITIGATION_LIST:          // 228",
          "5299:   case EID_PARAMS:                          // 235",
          "5300:   case EID_MU_EVENT_TYPE:                   // 260",
          "5301:   case EID_SSS_MU_IS_PORT_CLOSED:           // 229",
          "5302:   case EID_FULL_UPDATE:                     // 230",
          "5303:   case EID_REASON:                          // 231",
          "5304:   case EID_SCAN_CAP:                        // 238",
          "5305:   case EID_THREAT_CLASSIFICATION:           // 239",
          "5306:   case EID_STATE:                           // 242",
          "5307:   case EID_DROP_FR_CNT:                     // 243",
          "5308:   case EID_STOP_ROAM_CNT:                   // 244",
          "5309:   case EID_SPOOF_CNT:                       // 245",
          "5310:   case EID_ENCRYPTION_TYPE:                 // 250",
          "5311:   case EID_COMPONENT_ID:                    // 253",
          "5312:   case EID_BYPASS_BMCAST:                   // 255",
          "5313:   case EID_GETTIMEOFDAY:                    // 256",
          "5314:   case EID_COUNTRY_ID:                      // 257",
          "5315:   case EID_LOCATOR_FLOOR_ID:                // 261",
          "5316:   case EID_LOCATOR_LOC_TYPE:                // 262",
          "5317:   case EID_MU_EVENT_FROM_AP:                // 267",
          "5318:   case EID_LOCATOR_LOC_AP_DISTANCE:         // 269",
          "5319:   case EID_LOCATOR_LOC_PRECISION:           // 270",
          "5320:   case EID_LOCATOR_MU_ACTION:               // 273",
          "5321:   case EID_EFFECTIVE_EGRESS_VLAN:           // 274",
          "5322:   case EID_REBOOT_ACK:                      // 275",
          "5323:   case EID_AUTH_FLAG:                       // 277",
          "5324:   case EID_ROAMED_FLAG:                     // 278",
          "5325:   case EID_MU_RSS:                          // 279",
          "5326:   case EID_FILTER_RULES_VER:                // 280",
          "5327:   case EID_FILTER_TYPE:                     // 281",
          "5328:   case EID_DEFAULT_ACTION_TYPE:             // 284",
          "5329:   case EID_DEFAULT_CONTAIN_TO_VLAN:         // 285",
          "5330:   case EID_DEFAULT_BRIDGE_MODE:             // 286",
          "5331:   case EID_INVALID_POLICY:                  // 287",
          "5332:   case EID_AP_FLAGS:                        // 289",
          "5333:   case EID_AP_PVID:                         // 290",
          "5334:   case EID_MU_LOCATION_TS:                  // 332",
          "5335:   case EID_MU_IS_FT:                        // 338",
          "5336:   case EID_TIMESTAMP:                       // 353",
          "5337:   case EID_MU_REQ:                          // 355",
          "5338:   case EID_RU_REQ:                          // 356",
          "5339:   case EID_NEIGHBOUR_REQ:                   // 357",
          "5340:   case EID_SSS_FT_ASSOC:                    // 358",
          "5341:   case EID_DEFAULT_MIRRORN:                 // 359",
          "5342:   case EID_FILTER_RULE_EXT_ACT_FLAGS:       // 360",
          "5343:   case EID_TOPO_GROUP_MAPPING:              // 361",
          "5344:   case EID_SSS_CAPINFO:                     // 364",
          "5345:   case EID_SSS_CAPPOWER:                    // 365",
          "5346:   case EID_WFA_VSA:                         // 366",
          "5347:   case EID_WFA_HS20_REMED_METHOD:           // 367",
          "5348:   case EID_WFA_HS20_DEAUTH_CODE:            // 369",
          "5349:   case EID_WFA_HS20_REAUTH_DELAY:           // 370",
          "5350:   case EID_WFA_HS20_SWT:                    // 371",
          "5351:   case EID_POWER_STATUS:                    // 372",
          "5352:   case EID_FILTER_RULES_APP_SIG_GROUP_ID:   // 374",
          "5353:   case EID_FILTER_RULES_APP_SIG_DISP_ID:    // 375",
          "5354:   case EID_APPL_STATS_REQ:                  // 377",
          "5355:   case EID_PKT_CAPTURE_STATUS:              // 389",
          "5356:   case EID_PKT_CAPTURE_FILTERS:             // 390",
          "5357:   case EID_PKT_F_FLAGS:                     // 395",
          "5358:   case EID_PKT_F_PROTOCOL:                  // 398",
          "5359:   case EID_PKT_F_PORT:                      // 399",
          "5360:   case EID_MU_AUTH_TYPE:                    // 401",
          "5361:   case EID_PKT_F_MAX_PKT_COUNT:             // 402",
          "5362:   case EID_PKT_F_FLAG_2:                    // 403",
          "5363:   case EID_IMAGE_PORT:                      // 404",
          "5364:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_int, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5365:    offset += length;",
          "5366:    break;",
          "5368:   case EID_BP_BPSSID:                 // 34",
          "5369:   case EID_BP_WIRED_MACADDR:          // 35",
          "5370:   case EID_SIAPP_MACADDR:             // 149",
          "5371:   case EID_SIAPP_AC_MGMT_MAC:         // 156",
          "5372:   case EID_MAC_ADDR:                  // 208",
          "5373:   case EID_SCAN_BSSID:                // 233",
          "5374:   case EID_MU_BSSID:                  // 276",
          "5375:   case EID_MAC_ADDR_TX:               // 320",
          "5376:   case EID_MAC_ADDR_RX:               // 321",
          "5377:    proto_tree_add_item(tlv_tree, hf_wassp_macaddr, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5378:    offset += length;",
          "5379:    break;",
          "5380:   case EID_MU_MAC:                    // 48",
          "5381:   case EID_PKT_F_MAC:                 // 397",
          "5382:    proto_tree_add_item(tlv_tree, hf_wassp_mu_mac, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5383:    offset += length;",
          "5384:    break;",
          "5387:   case EID_EVENT_BLOCK:                                // 59",
          "5388:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, EVENT_BLOCK, ru_msg_type);",
          "5389:    break;",
          "5390:   case EID_AP_STATS_BLOCK:                             // 65",
          "5391:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, AP_STATS_BLOCK, ru_msg_type);",
          "5392:    break;",
          "5393:   case EID_MU_RF_STATS_BLOCK:                          // 66",
          "5394:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, MU_RF_STATS_BLOCK, ru_msg_type);",
          "5395:    break;",
          "5396:   case EID_TLV_CONFIG:                                 // 69",
          "5397:   case EID_BSSID2IP_BLOCK:                             // 92",
          "5398:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, CONFIG_GLOBAL_BLOCK, ru_msg_type);",
          "5399:    break;",
          "5400:   case EID_CONFIG_ERROR_BLOCK:                         // 70",
          "5401:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, CONFIG_ERROR_BLOCK, ru_msg_type);",
          "5402:    break;",
          "5403:   case EID_CONFIG_MODIFIED_BLOCK:                      // 71",
          "5404:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_CONFIG_MODIFIED, ru_msg_type);",
          "5405:    break;",
          "5406:   case EID_BULK_MU_BLOCK:                              // 78",
          "5407:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, BULK_MU_BLOCK, ru_msg_type);",
          "5408:    break;",
          "5409:   case EID_MU_BLOCK:                                   // 79",
          "5410:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, MU_BLOCK, ru_msg_type);",
          "5411:    break;",
          "5412:   case EID_BULK_VNS_BLOCK:                             // 86",
          "5413:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, BULK_VNS_BLOCK, ru_msg_type);",
          "5414:    break;",
          "5415:   case EID_VNS_BLOCK:                                  // 87",
          "5416:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, VNS_BLOCK, ru_msg_type);",
          "5417:    break;",
          "5418:   case EID_SIAPP_PMK_BLOCK:                            // 114",
          "5419:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_PMK_BLOCK, ru_msg_type);",
          "5420:    break;",
          "5421:   case EID_SIAPP_RADIO_CONFIG_BLOCK:                   // 121",
          "5422:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_RADIO_CONFIG_BLOCK, ru_msg_type);",
          "5423:    break;",
          "5424:   case EID_SIAPP_SIAPP_MU_STATS_BLOCK:                 // 123",
          "5425:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_MU_STATS_BLOCK, ru_msg_type);",
          "5426:    break;",
          "5427:   case EID_SIAPP_THIN_BLOCK:                           // 128",
          "5428:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_THIN_BLOCK, ru_msg_type);",
          "5429:    break;",
          "5430:   case EID_SIAPP_RADIOBLOCK:                           // 132",
          "5431:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_MU_STATS_BLOCK, ru_msg_type);",
          "5432:    break;",
          "5433:   case EID_SIAPP_BLOCK:                                // 134",
          "5434:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_BLOCK, ru_msg_type);",
          "5435:    break;",
          "5436:   case EID_SIAPP_LOADBAL_BLOCK:                        // 152",
          "5437:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, VNS_BLOCK, ru_msg_type);",
          "5438:    break;",
          "5439:   case EID_SSS_MU_BLOCK:                               // 181",
          "5440:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SSS_MU_BLOCK, ru_msg_type);",
          "5441:    break;",
          "5442:   case EID_ASSOC_SSID_ARRAY:                           // 204",
          "5443:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_ASSOC_SSID_ARRAY, ru_msg_type);",
          "5444:    break;",
          "5445:   case EID_ASSOC_SSID_BLOCK:                           // 205",
          "5446:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_ASSOC_SSID_BLOCK, ru_msg_type);",
          "5447:    break;",
          "5448:   case EID_AP_LIST_BLOCK:                              // 206",
          "5449:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_AP_LIST_BLOCK, ru_msg_type);",
          "5450:    break;",
          "5451:   case EID_AP_LIST_ARRAY:                              // 207",
          "5452:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_AP_LIST_ARRAY, ru_msg_type);",
          "5453:    break;",
          "5454:   case EID_SCAN_PROFILE_BLOCK:                         // 214",
          "5455:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SCAN_PROFILE_BLOCK, ru_msg_type);",
          "5456:    break;",
          "5457:   case EID_THREAT_DEF_ARRAY:                           // 216",
          "5458:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DEF_ARRAY, ru_msg_type);",
          "5459:    break;",
          "5460:   case EID_THREAT_DEF_BLOCK:                           // 217",
          "5461:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DEF_BLOCK, ru_msg_type);",
          "5462:    break;",
          "5463:   case EID_THREAT_PATTERN_ARRAY:                       // 222",
          "5464:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_PATTERN_ARRAY, ru_msg_type);",
          "5465:    break;",
          "5466:   case EID_THREAT_PATTERN_BLOCK:                       // 223",
          "5467:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_PATTERN_BLOCK, ru_msg_type);",
          "5468:    break;",
          "5469:   case EID_SURVEILLANCE_DATA_ARRAY:                    // 231",
          "5470:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SURVEILLANCE_DATA_ARRAY, ru_msg_type);",
          "5471:    break;",
          "5472:   case EID_SURVEILLANCE_DATA_BLOCK:                    // 232",
          "5473:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SURVEILLANCE_DATA_BLOCK, ru_msg_type);",
          "5474:    break;",
          "5475:   case EID_THREAT_DATA_ARRAY:                          // 239",
          "5476:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DATA_ARRAY, ru_msg_type);",
          "5477:    break;",
          "5478:   case EID_THREAT_DATA_BLOCK:                          // 240",
          "5479:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DATA_BLOCK, ru_msg_type);",
          "5480:    break;",
          "5481:   case EID_THREAT_CLASSIFY_ARRAY:                      // 245",
          "5482:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_CLASSIFY_ARRAY, ru_msg_type);",
          "5483:    break;",
          "5484:   case EID_THREAT_CLASSIFY_BLOCK:                      // 246",
          "5485:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_CLASSIFY_BLOCK, ru_msg_type);",
          "5486:    break;",
          "5487:   case EID_MU_EVENT_ARRAY:                             // 251",
          "5488:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_EVENT_ARRAY, ru_msg_type);",
          "5489:    break;",
          "5490:   case EID_MU_EVENT_BLOCK:                             // 252",
          "5491:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_EVENT_BLOCK, ru_msg_type);",
          "5492:    break;",
          "5493:   case EID_COUNTRY_ARRAY:                              // 258",
          "5494:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_COUNTRY_ARRAY, ru_msg_type);",
          "5495:    break;",
          "5496:   case EID_COUNTRY_BLOCK:                              // 259",
          "5497:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_COUNTRY_BLOCK, ru_msg_type);",
          "5498:    break;",
          "5499:   case EID_LOCATOR_LOC_BLOCK:                          // 263",
          "5500:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_LOCATOR_LOC_BLOCK, ru_msg_type);",
          "5501:    break;",
          "5502:   case EID_LOCATOR_LOC_ARRAY:                          // 264",
          "5503:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_LOCATOR_LOC_ARRAY, ru_msg_type);",
          "5504:    break;",
          "5505:   case EID_RSS_DATA_ARRAY:                             // 271",
          "5506:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_RSS_DATA_ARRAY, ru_msg_type);",
          "5507:    break;",
          "5508:   case EID_RSS_DATA_BLOCK:                             // 272",
          "5509:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_RSS_DATA_BLOCK, ru_msg_type);",
          "5510:    break;",
          "5511:   case EID_MCAST_FILTER_BLOCK:                         // 282",
          "5512:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MCAST_FILTER_BLOCK, ru_msg_type);",
          "5513:    break;",
          "5514:   case EID_MCAST_FILTER_BLOCK_ENTRY:                   // 283",
          "5515:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MCAST_FILTER_BLOCK_ENTRY, ru_msg_type);",
          "5516:    break;",
          "5517:   case EID_MU_SESSION_ARRAY:                           // 293",
          "5518:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_SESSION_ARRAY, ru_msg_type);",
          "5519:    break;",
          "5520:   case EID_MU_SESSION_BLOCK:                           // 294",
          "5521:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_SESSION_BLOCK, ru_msg_type);",
          "5522:    break;",
          "5523:   case EID_DETECTED_ROGUE_ARRAY:                       // 317",
          "5524:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_DETECTED_ROGUE_ARRAY, ru_msg_type);",
          "5525:    break;",
          "5526:   case EID_DETECTED_ROGUE_BLOCK:                       // 318",
          "5527:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_DETECTED_ROGUE_BLOCK, ru_msg_type);",
          "5528:    break;",
          "5529:   case EID_FILTER_RULES_EXT_BLOCK:                     // 329",
          "5530:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_FILTER_RULES_EXT_BLOCK, ru_msg_type);",
          "5531:    break;",
          "5532:   case EID_TOPOLOGY_ARRAY:                             // 379",
          "5533:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_TOPOLOGY_ARRAY_BLOCK, ru_msg_type);",
          "5534:    break;",
          "5535:   case EID_TOPOLOGY_STRUCT:                            // 380",
          "5536:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_TOPOLOGY_STRUCT_BLOCK, ru_msg_type);",
          "5537:    break;",
          "5538:   case EID_FILTER_CONFIG_STRUCT:                       // 381",
          "5539:    offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_FILTER_CONFIG_STRUCT_BLOCK, ru_msg_type);",
          "5540:    break;",
          "5542:   case EID_FILTER_RULES:                              // 97",
          "5543:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5544:    decode_filter_rule_octext_string(tlv_tree, tvb, offset + 4, length );",
          "5545:    offset += length;",
          "5546:    break;",
          "5547:   case EID_MU_MAC_LIST:                              // 100",
          "5548:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5549:    decode_mac_list_struct(tlv_tree, tvb, offset + 4,  length -4 );",
          "5550:    offset += length;",
          "5551:    break;",
          "5552:   case EID_COS:                                      // 158",
          "5553:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5554:    decode_cos_struct(tlv_tree, tvb, offset + 4 );",
          "5555:    offset += length;",
          "5556:    break;",
          "5557:   case EID_RATE_LIMIT_RESOURCE_TBL:                  // 159",
          "5558:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5559:    decode_rate_limit_struct(tlv_tree,tvb,  offset + 4,length-4 );",
          "5560:    offset += length;",
          "5561:    break;",
          "5562:   case EID_CHANNEL_LIST:                             // 211",
          "5563:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5564:    decode_Channel_list(tlv_tree, tvb, offset + 4,  length -4 );",
          "5565:    offset += length;",
          "5566:    break;",
          "5567:   case EID_DNS_IP_ADDR:                              // 333",
          "5568:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5569:    decode_ipv4_list_struct(tlv_tree, tvb, offset + 4,  length -4 );",
          "5570:    offset += length;",
          "5571:    break;",
          "5572:   case EID_MU_APPL_STATS_BLOCK:                      // 378",
          "5573:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5574:    decode_mu_appl_stats_block(tlv_tree, tvb, offset + 4 );",
          "5575:    offset += length;",
          "5576:    break;",
          "5578:   case EID_SCAN_RSS_RSSI:                            // 236",
          "5579:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_int, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5580:    index = offset + 4;",
          "5581:    proto_tree_add_item(tlv_tree, hf_wassp_rss, tvb, index, 2, ENC_BIG_ENDIAN);",
          "5582:    index += 2;",
          "5583:    proto_tree_add_item(tlv_tree, hf_wassp_rssi, tvb, index, 2, ENC_BIG_ENDIAN);",
          "5584:    offset += length;",
          "5585:    break;",
          "5587:   default:",
          "5589:    proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);",
          "5590:    call_dissector(data_handle, tvb_new_subset_length_caplen(tvb, offset + TLV_VALUE, -1, length - 4), pinfo, wassp_tree);",
          "5591:    offset += length;",
          "5592:   }",
          "5594:   if (tlv_type == EID_UNUSED_0)",
          "5595:   {",
          "5596:    proto_tree_add_item(wassp_tree, hf_wassp_tlv_invalid, tvb, offset, value, ENC_BIG_ENDIAN);",
          "5597:    offset += length;",
          "5598:   }",
          "5599:  }",
          "5600:  return offset;",
          "5601: }",
          "5605: static void",
          "5606: mu_association_status(char *buf, guint8 value)",
          "5607: {",
          "5608:  if (value == 1)",
          "5609:   g_snprintf(buf, ITEM_LABEL_LENGTH, \" Success (%d)\", value);",
          "5610:  else if (value == 2)",
          "5611:   g_snprintf(buf, ITEM_LABEL_LENGTH, \" Reject (%d)\", value);",
          "5612:  else",
          "5613:   g_snprintf(buf, ITEM_LABEL_LENGTH, \" Failure (%d)\", value);",
          "5614: }",
          "5618: static int dissect_mu_netflow(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "5619: {",
          "5620:  proto_item *ti, *temp;",
          "5621:  proto_tree *wassp_mu_netflow_tree, *mu_netflow_header_tree;",
          "5622:  guint16 netflowLen, totalRecord, i;",
          "5624:  ti = proto_tree_add_item(tree, hf_wassp_mu_netflow_tree, tvb, offset, -1, ENC_NA);",
          "5625:  wassp_mu_netflow_tree = proto_item_add_subtree(ti, ett_wassp_mu_data_netflow);",
          "5627:  temp = proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_header, tvb, MU_NETFLOW_HDR_VERSION, MU_NETFLOW_HEADER_TOTAL_LENGTH, ENC_NA);",
          "5628:  mu_netflow_header_tree = proto_item_add_subtree(temp, ett_wassp_mu_data_netflow_header);",
          "5629:  proto_tree_add_item(mu_netflow_header_tree, hf_wassp_mu_netflow_version, tvb, MU_NETFLOW_HDR_VERSION, 2, ENC_BIG_ENDIAN);",
          "5630:  proto_tree_add_item(mu_netflow_header_tree, hf_wassp_mu_netflow_length, tvb, MU_NETFLOW_HDR_LENGTH, 2, ENC_BIG_ENDIAN);",
          "5631:  proto_tree_add_item(mu_netflow_header_tree, hf_wassp_mu_netflow_flags, tvb, MU_NETFLOW_HDR_FLAG, 2, ENC_BIG_ENDIAN);",
          "5632:  proto_tree_add_item(mu_netflow_header_tree, hf_wassp_mu_netflow_uptime, tvb, MU_NETFLOW_HDR_UPTIME, 4, FALSE);",
          "5633:  offset += MU_NETFLOW_HEADER_TOTAL_LENGTH;",
          "5635:  netflowLen = tvb_get_ntohs(tvb, MU_NETFLOW_HDR_LENGTH);",
          "5636:  totalRecord = (netflowLen - MU_NETFLOW_HEADER_TOTAL_LENGTH) / MU_NETFLOW_RECORD_SIZE;  //netflow record size is 46 bytes",
          "5637:  if (totalRecord > 0)",
          "5638:  {",
          "5639:   for (i = 1; i <= totalRecord; i++)",
          "5640:   {",
          "5642:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_record, tvb, offset, MU_NETFLOW_RECORD_SIZE, ENC_NA);",
          "5643:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_in_bytes, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5644:    offset += 4;",
          "5645:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_in_packets, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5646:    offset += 4;",
          "5647:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_ip_protocol_number, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5648:    offset += 1;",
          "5649:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_source_tos, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5650:    offset += 1;",
          "5651:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_source_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5652:    offset += 2;",
          "5653:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_source_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5654:    offset += 4;",
          "5655:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_input_snmp, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5656:    offset += 2;",
          "5657:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_dest_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5658:    offset += 2;",
          "5659:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_dest_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5660:    offset += 4;",
          "5661:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_output_snmp, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5662:    offset += 2;",
          "5663:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_last_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5664:    offset += 4;",
          "5665:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_first_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5666:    offset += 4;",
          "5667:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_in_source_mac, tvb, offset, 6, ENC_NA);",
          "5668:    offset += 6;",
          "5669:    proto_tree_add_item(wassp_mu_netflow_tree, hf_wassp_mu_netflow_in_dest_mac, tvb, offset, 6, ENC_NA);",
          "5670:    offset += 6;",
          "5671:   }",
          "5672:  }",
          "5673:  else",
          "5674:  {",
          "5676:   offset += netflowLen;",
          "5677:  }",
          "5679:  return offset;",
          "5680: }",
          "5686: static int dissect_wassp_mu(proto_tree *wassp_tree, tvbuff_t *tvb, packet_info *pinfo, int offset, int plength)",
          "5687: {",
          "5688:  proto_item *ti, *temp;",
          "5689:  proto_tree *wassp_mu_tree, *mu_data_header_tree, *mu_action_field_tree;",
          "5690:  wassp_mu_msg_t mu_msg_type;",
          "5691:  char *label;",
          "5692:  guint16 length = WASSP_MU_HDR_WITHOUT_ASSO_STATUS_LEN;",
          "5694:  if (tvb_reported_length_remaining(tvb, offset) > 0)",
          "5695:  {",
          "5696:   mu_msg_type = (wassp_mu_msg_t)tvb_get_guint8(tvb, offset + WASSP_MU_HDR_TYPE);",
          "5697:   ti = proto_tree_add_item(wassp_tree, hf_wassp_mu_data_tree, tvb, offset, -1, ENC_NA);",
          "5698:   wassp_mu_tree = proto_item_add_subtree(ti, ett_wassp_data);",
          "5699:   label = (char*)try_val_to_str(mu_msg_type, wassp_mu_header_types);",
          "5700:   label = (label == NULL) ? \"Unknown Type\" : label;",
          "5701:   proto_item_append_text(ti, \", %s\", label);",
          "5703:   if ( mu_msg_type == WASSP_MU_Associate_Rsp )",
          "5704:    length = WASSP_MU_HDR_WITH_ASSO_STATUS_LEN;",
          "5707:   temp = proto_tree_add_item(wassp_mu_tree, hf_wassp_mu_data_header, tvb, WASSP_MU_HDR_TYPE, length, ENC_NA);",
          "5708:   mu_data_header_tree = proto_item_add_subtree(temp, ett_mu_data_header);",
          "5709:   proto_tree_add_item(mu_data_header_tree, hf_wassp_mu_type, tvb, offset + WASSP_MU_HDR_TYPE, 1, ENC_BIG_ENDIAN);",
          "5710:   proto_tree_add_item(mu_data_header_tree, hf_wassp_mu_qos, tvb, offset + WASSP_MU_HDR_QOS, 1, ENC_BIG_ENDIAN);",
          "5711:   temp = proto_tree_add_item(mu_data_header_tree, hf_wassp_mu_action_ssid, tvb, offset + WASSP_MU_HDR_ACTION_SSID, 2, ENC_BIG_ENDIAN);",
          "5712:   mu_action_field_tree = proto_item_add_subtree(temp, ett_mu_action_field);",
          "5713:   proto_tree_add_item(mu_action_field_tree, hf_wassp_mu_action, tvb, offset + WASSP_MU_HDR_ACTION_SSID, 2, ENC_BIG_ENDIAN);",
          "5714:   proto_tree_add_item(mu_action_field_tree, hf_wassp_mu_action_field_value, tvb, offset + WASSP_MU_HDR_ACTION_SSID, 2, ENC_BIG_ENDIAN);",
          "5715:   proto_tree_add_item(mu_data_header_tree, hf_wassp_mu_mac, tvb, offset + WASSP_MU_HDR_MAC, 6, ENC_NA);",
          "5716:   proto_tree_add_item(mu_data_header_tree, hf_wassp_mu_resv0, tvb, offset + WASSP_MU_HDR_RESV_0, 2, ENC_BIG_ENDIAN);",
          "5717:   proto_tree_add_item(mu_data_header_tree, hf_wassp_mu_resv1, tvb, offset + WASSP_MU_HDR_RESV_1, 2, ENC_BIG_ENDIAN);",
          "5718:   if ( mu_msg_type == WASSP_MU_Associate_Rsp )",
          "5719:    proto_tree_add_item(mu_data_header_tree, hf_wassp_mu_assoc_status, tvb, offset + WASSP_MU_HDR_RESV_1 + 2, 1, ENC_BIG_ENDIAN);",
          "5721:   offset += length;",
          "5723:   plength -= length;",
          "5726:   switch (mu_msg_type)",
          "5727:   {",
          "5728:   case WASSP_MU_NETFLOW:",
          "5729:    offset = dissect_mu_netflow(wassp_mu_tree, tvb, offset);",
          "5730:    break;",
          "5731:   case WASSP_MU_Associate_Req:",
          "5732:   case WASSP_MU_Update_Req:",
          "5733:   case WASSP_MU_Update_Rsp:",
          "5734:   case WASSP_AP2AC_MU_Inform_Req:",
          "5735:   case WASSP_AP2AC_MU_Inform_Rsp:",
          "5736:   case WASSP_MU_BULK_Associate_Req:",
          "5737:   case WASSP_MU_BULK_Associate_Rsp:",
          "5738:   case WASSP_MU_Disconnect_Req:",
          "5739:   case WASSP_MU_Disconnect_Rsp:",
          "5740:   case WASSP_MU_Associate_Rsp:",
          "5741:    offset = dissect_wassp_tlv(wassp_mu_tree, tvb, pinfo, offset, WASSP_RU_UNUSED_0);",
          "5742:    break;",
          "5743:   case WASSP_MU_MIRRORN:",
          "5744:   case WASSP_MU_Data:",
          "5745:   case WASSP_MU_Eap_Last:",
          "5747:    call_dissector(eth_handle, tvb_new_subset_length_caplen(tvb, offset, -1, plength), pinfo, wassp_mu_tree);",
          "5748:    offset += plength;",
          "5749:    break;",
          "5750:   case WASSP_MU_Roam_Notify:",
          "5751:   case WASSP_MU_Disconnect_Notify:",
          "5752:    offset += plength;",
          "5753:    break;",
          "5754:   default:",
          "5756:    call_dissector(data_handle, tvb_new_subset_length_caplen(tvb, offset, -1, plength), pinfo, wassp_mu_tree);",
          "5757:    offset += plength;",
          "5758:    break;",
          "5759:   }",
          "5760:  }",
          "5761:  return offset;",
          "5762: }",
          "5767: static void dissect_unfragmented_wassp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint16 plength2, wassp_ru_msg_t ru_msg_type, int offset2)",
          "5768: {",
          "5769:  proto_tree *wassp_tree;",
          "5770:  int offset = offset2;",
          "5771:  guint16 plength = plength2;",
          "5772:  guint16 lsbHeaderMagic = 0;",
          "5774:  if (tree)",
          "5775:  {",
          "5776:   wassp_tree = tree;",
          "5777:   plength -= WASSP_HDR_LEN;",
          "5779:   switch (ru_msg_type)",
          "5780:   {",
          "5781:   case WASSP_RU_Discov:                            // 1",
          "5782:   case WASSP_RU_Register_Req:                      // 2",
          "5783:   case WASSP_RU_Register_Rsp:                      // 3",
          "5784:   case WASSP_RU_Authentication_Req:                // 4",
          "5785:   case WASSP_RU_Authentication_Rsp:                // 5",
          "5786:   case WASSP_RU_SW_Version_Validate_Req:           // 6",
          "5787:   case WASSP_RU_SW_Version_Validate_Rsp:           // 7",
          "5788:   case WASSP_RU_Config_Req:                        // 8",
          "5789:   case WASSP_RU_Config_Rsp:                        // 9",
          "5790:   case WASSP_RU_Ack:                               // 10",
          "5791:   case WASSP_RU_Config_Status_Notify:              // 11",
          "5792:   case WASSP_RU_Set_State_Req:                     // 12",
          "5793:   case WASSP_RU_Set_State_Rsp:                     // 13",
          "5794:   case WASSP_RU_Poll:                              // 16",
          "5795:   case WASSP_RU_SNMP_Req:                          // 17",
          "5796:   case WASSP_RU_SNMP_Rsp:                          // 18",
          "5797:   case WASSP_BP_Trap_Notify:                       // 19",
          "5798:   case WASSP_BP_Scan_Req:                          // 20",
          "5799:   case WASSP_RFM_Notify:                           // 21",
          "5800:   case WASSP_RU_SNMP_Alarm_Notify:                 // 22",
          "5801:   case WASSP_RU_SNMP_Set_Alarm_Clear:              // 23",
          "5802:   case WASSP_RU_SNMP_Set_Log_Status:               // 24",
          "5803:   case WASSP_RU_SNMP_Get_Log_Req:                  // 25",
          "5804:   case WASSP_RU_SNMP_Get_Log_Resp:                 // 26",
          "5805:   case WASSP_SEC_Update_Notify:                    // 27",
          "5806:   case WASSP_RU_STATS_Req:                         // 28",
          "5807:   case WASSP_RU_STATS_Rsp:                         // 29",
          "5808:   case WASSP_RU_UNUSED_30:                         // 30",
          "5809:   case WASSP_RU_UNUSED_31:                         // 31",
          "5810:   case WASSP_RU_Get_Req:                           // 32",
          "5811:   case WASSP_RU_Get_Rsp:                           // 33",
          "5812:   case WASSP_RU_Alarm_Notify:                      // 34",
          "5813:   case WASSP_RU_Set_Alarm_Clear:                   // 35",
          "5814:   case WASSP_RU_Get_Log_Req:                       // 36",
          "5815:   case WASSP_RU_Get_Log_Rsp:                       // 37",
          "5816:   case WASSP_RU_UNUSED_38:                         // 38",
          "5817:   case WASSP_RU_UNUSED_39:                         // 39",
          "5818:   case WASSP_P_PEER_DOWN_NOTIFY:                   // 40",
          "5819:   case WASSP_P_LINK_STATE_CHANGE_REQ:              // 41",
          "5820:   case WASSP_P_LINK_STATE_CHANGE_RSP:              // 42",
          "5821:   case WASSP_RU_GetIP_Req:                         // 44",
          "5822:   case WASSP_RU_GetIP_Rsp:                         // 45",
          "5823:   case WASSP_RU_LAMG_Update_Req:                   // 46",
          "5824:   case WASSP_RU_LAMG_Update_Rsp:                   // 47",
          "5825:   case WASSP_RU_Event_Req:                         // 48",
          "5826:   case WASSP_RU_Event_Rsp:                         // 49",
          "5827:   case WASSP_RU_BULK_MU_UPDATE_REQ:                // 50",
          "5828:   case WASSP_RU_BULK_MU_UPDATE_RSP:                // 51",
          "5829:   case WASSP_ROAMED_MU_FILTER_STATS_REQ:           // 52",
          "5830:   case WASSP_ROAMED_MU_FILTER_STATS_RESP:          // 53",
          "5831:   case WASSP_RU_AC_Event_Req:                      // 56",
          "5832:   case WASSP_RU_AC_Event_Rsp:                      // 57",
          "5833:   case WASSP_RU_Event_Notify:                      // 58",
          "5834:   case WASSP_RU_AC_EVENT:                          // 59",
          "5835:   case WASSP_WIDS_WIPS_Config_Req:                 // 60",
          "5836:   case WASSP_WIDS_WIPS_Config_Rsp:                 // 61",
          "5837:   case WASSP_Scan_Data_Notify:                     // 62",
          "5838:   case WASSP_Scan_Data_Notify_Ack:                 // 63",
          "5839:   case WASSP_Loc_Data_Notify:                      // 64",
          "5840:   case WASSP_Loc_Data_Notify_Ack:                  // 65",
          "5841:   case WASSP_RU_SW_Version_Validate_Ack:           // 66",
          "5842:   case WASSP_NEIGHBOUR_STATS_Rsp:                  // 67",
          "5843:   case WASSP_APPL_STATS_RESP:                      // 68",
          "5844:   case WASSP_AC_Register_Req:                      // 101",
          "5845:   case WASSP_AC_Register_Rsp:                      // 102",
          "5846:   case WASSP_AC_Deregister_Req:                    // 103",
          "5847:   case WASSP_AC_Deregister_Rsp:                    // 104",
          "5848:    goto tlv_dissect;",
          "5849:   case WASSP_RU_Stats_Notify:                      // 14",
          "5851:    dissector_try_uint(wassp_dissector_table, WASSP_SNMP, tvb_new_subset_length_caplen(tvb, offset, -1, plength), pinfo, wassp_tree);",
          "5852:    offset += plength;",
          "5853:    goto data_dissect;",
          "5854:   case WASSP_LBS_TAG_REPORT:                       // 55",
          "5855:    lsbHeaderMagic = tvb_get_ntohs(tvb, 36);",
          "5856:    call_dissector(ip_handle, tvb_new_subset_length_caplen(tvb, offset, -1, plength), pinfo, wassp_tree);",
          "5857:    if (lsbHeaderMagic == LBS_HDR_MAGIC)",
          "5858:     offset = decode_lbs_tag_header(wassp_tree, tvb, offset + 28);",
          "5859:    else",
          "5860:    {",
          "5861:     return;",
          "5862:    }",
          "5863:    goto data_dissect;",
          "5864:   case WASSP_Data:                            // 15",
          "5865:    offset = dissect_wassp_mu(wassp_tree, tvb, pinfo, offset, plength);",
          "5866:    goto data_dissect;",
          "5867:   default:",
          "5868:    offset += plength;",
          "5869:    goto data_dissect;",
          "5870:   }",
          "5871: tlv_dissect:",
          "5873:   offset = dissect_wassp_tlv(wassp_tree, tvb, pinfo, offset, ru_msg_type);",
          "5874: data_dissect:",
          "5876:   call_dissector(data_handle, tvb_new_subset_length_caplen(tvb, offset, -1, -1), pinfo, wassp_tree);",
          "5877:  }",
          "5878: }",
          "5883: static int dissect_wassp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree )",
          "5884: {",
          "5886:  proto_item *ti, *temp;",
          "5887:  proto_tree *wassp_tree;",
          "5888:  proto_tree *wassp_header_tree, *ru_discover_header_tree, *wassp_seq_flag_tree;",
          "5889:  wassp_ru_msg_t ru_msg_type;",
          "5890:  int offset = 0;",
          "5891:  guint16  flag = 0, seq_number = 0;",
          "5892:  guint32  fragment = FALSE, complete = TRUE;",
          "5893:  guint32  remain_len = 0, length;",
          "5894:  fragment_head *wassp_frag_msg = NULL;",
          "5895:  gboolean   save_fragmented;",
          "5896:  tvbuff_t *next_tvb = NULL, *combined_tvb = NULL;",
          "5897:  char *label;",
          "5898:  conversation_t  *conv = NULL;",
          "5899:  guint32 reassembly_id;",
          "5902:     UDP Port = 13910 --> Wassp Protocol",
          "5903:     UDP port = 13907 --> Access Point Discover",
          "5905:     Wassp header format:",
          "5906:    Byte 1    Byte 2   Byte 3 and Byte 4    Byte 5 and Byte 6    Byte 7 and Byte 8",
          "5907:     | Version | Type   | Seq. Number & Flag |     Session ID    |  Length of Payload |",
          "5909:    RU discover header format:",
          "5910:   Byte 1    Byte 2   Byte 3 and Byte 4    Byte 5 and Byte 6    Byte 7 and Byte 8   Byte 7 and Byte 8      Byte 9 to Byte 12 if mac, else Byte 9 to Byte 10 for operation",
          "5911:    | Version | Type   |   Random Number   | Length of Payload    |  Check Sum       | Conteoller Operation |  Mac or Operation",
          "5915:  col_set_str(pinfo->cinfo, COL_PROTOCOL, PROTO_SHORT_NAME);",
          "5916:  remain_len = tvb_reported_length_remaining(tvb, WASSP_HDR_VERSION);",
          "5917:  next_tvb = tvb;",
          "5918:  ru_msg_type = (wassp_ru_msg_t)tvb_get_guint8(tvb, WASSP_HDR_TYPE);",
          "5920:  if ( ru_msg_type == WASSP_Data ) // wassp mu header",
          "5921:  {",
          "5922:   label = (char*)try_val_to_str(tvb_get_guint8(tvb, WASSP_HDR_LEN + WASSP_MU_HDR_TYPE), wassp_mu_header_types);",
          "5923:   col_add_str(pinfo->cinfo, COL_INFO, label);",
          "5924:  }",
          "5926:  {",
          "5927:   if (tvb_get_ntohs(tvb, RU_HDR_AC_OP) == RU_DISCOVER_OP_MODE)",
          "5928:    col_add_str(pinfo->cinfo, COL_INFO, \"RU Discover Request\");",
          "5929:   else",
          "5930:    col_add_str(pinfo->cinfo, COL_INFO, \"RU Discover Response\");",
          "5931:  }",
          "5932:  else if (ru_msg_type != WASSP_Data)",
          "5933:   col_add_str(pinfo->cinfo, COL_INFO, (char*)try_val_to_str(tvb_get_guint8(tvb, WASSP_HDR_TYPE), wassp_header_types));",
          "5934:  else",
          "5935:   col_add_str(pinfo->cinfo, COL_INFO, \"Unknown WASSP Message Type\");",
          "5937:  save_fragmented = pinfo->fragmented;",
          "5939:  ti = proto_tree_add_item(tree, proto_wassp, tvb, offset, -1, FALSE);",
          "5940:  wassp_tree = proto_item_add_subtree(ti, ett_wassp);",
          "5943:  {",
          "5944:   flag = tvb_get_ntohs(tvb, RU_HDR_AC_OP);",
          "5945:   if ( flag == RU_HDR_CONTAIN_MAC) // ru mac or ac-mode",
          "5946:    length = RU_HEADER_WITH_MAC_LEN;",
          "5947:   else",
          "5948:    length = RU_HEADER_WITHOUT_MAC_LEN;",
          "5950:   temp = proto_tree_add_item(wassp_tree, hf_ru_discover_header, tvb, RU_HDR_VERSION, length, ENC_NA);",
          "5951:   ru_discover_header_tree = proto_item_add_subtree(temp, ett_ru_discover_header);",
          "5952:   proto_tree_add_item(ru_discover_header_tree, hf_wassp_version, tvb, RU_HDR_VERSION, 1, ENC_BIG_ENDIAN);",
          "5953:   proto_item_append_text(ti, \", %s\", (char*)try_val_to_str(ru_msg_type, wassp_header_types)); //Update WASSP protocol with message type",
          "5954:   proto_tree_add_item(ru_discover_header_tree, hf_wassp_type, tvb, RU_HDR_TYPE, 1, ENC_BIG_ENDIAN);",
          "5955:   proto_tree_add_item(ru_discover_header_tree, hf_ru_rad_num, tvb, RU_HDR_RAD_NUM, 2, ENC_BIG_ENDIAN);",
          "5956:   proto_tree_add_item(ru_discover_header_tree, hf_wassp_length, tvb, RU_HDR_LENGTH, 2, ENC_BIG_ENDIAN);",
          "5957:   proto_tree_add_item(ru_discover_header_tree, hf_ru_checksum, tvb, RU_HDR_CHECKSUM, 2, ENC_BIG_ENDIAN);",
          "5958:   proto_tree_add_item(ru_discover_header_tree, hf_ru_ac_op, tvb, RU_HDR_AC_OP, 2, ENC_BIG_ENDIAN);",
          "5959:   if ( flag == RU_HDR_CONTAIN_MAC) // ru mac or ac-mode",
          "5960:    proto_tree_add_item(ru_discover_header_tree, hf_ru_mac, tvb, RU_HDR_MAC, 6, ENC_NA);",
          "5961:   else",
          "5962:    proto_tree_add_item(ru_discover_header_tree, hf_ru_ac_mode, tvb, RU_HDR_AC_MODE, 2, ENC_BIG_ENDIAN);",
          "5963:   offset = length;",
          "5964:  }",
          "5966:  {",
          "5967:   temp = proto_tree_add_item(wassp_tree, hf_wassp_header, tvb, WASSP_HDR_VERSION, WASSP_HDR_LEN, ENC_NA);",
          "5968:   wassp_header_tree = proto_item_add_subtree(temp, ett_wassp_header);",
          "5969:   flag = tvb_get_ntohs(tvb, WASSP_HDR_SEQ_NUM);",
          "5971:   seq_number = flag >> 6;",
          "5972:   proto_tree_add_item(wassp_header_tree, hf_wassp_version, tvb, WASSP_HDR_VERSION, 1, ENC_NA);",
          "5973:   proto_item_append_text(ti, \", %s\", (char*)try_val_to_str(ru_msg_type, wassp_header_types)); //Update WASSP protocol with message type",
          "5974:   proto_tree_add_item(wassp_header_tree, hf_wassp_type, tvb, WASSP_HDR_TYPE, 1, ENC_BIG_ENDIAN);",
          "5975:   temp = proto_tree_add_item(wassp_header_tree, hf_wassp_seq_num_flag, tvb, WASSP_HDR_SEQ_NUM, 2, ENC_BIG_ENDIAN);",
          "5976:   wassp_seq_flag_tree = proto_item_add_subtree(temp, ett_seq_flags);",
          "5977:   proto_tree_add_item(wassp_seq_flag_tree, hf_seq_num, tvb, WASSP_HDR_SEQ_NUM, 2, ENC_BIG_ENDIAN);",
          "5978:   proto_tree_add_item(wassp_seq_flag_tree, hf_wassp_use_frag, tvb, WASSP_HDR_SEQ_NUM, 2, ENC_BIG_ENDIAN);",
          "5979:   proto_tree_add_item(wassp_seq_flag_tree, hf_wassp_data_frag, tvb, WASSP_HDR_SEQ_NUM, 2, ENC_BIG_ENDIAN);",
          "5980:   proto_tree_add_item(wassp_seq_flag_tree, hf_wassp_more_frag, tvb, WASSP_HDR_SEQ_NUM, 2, ENC_BIG_ENDIAN);",
          "5981:   proto_tree_add_item(wassp_seq_flag_tree, hf_wassp_first_frag, tvb, WASSP_HDR_SEQ_NUM, 2, ENC_BIG_ENDIAN);",
          "5983:   proto_tree_add_item(wassp_header_tree, hf_wassp_length, tvb, WASSP_HDR_PLENGTH, 2, ENC_BIG_ENDIAN);",
          "5985:   if ( flag & RU_WASSP_FLAGS_USE_FRAGMENTATION)",
          "5986:   {",
          "5987:    fragment = TRUE;",
          "5988:    complete = FALSE;",
          "5989:   }",
          "5990:   offset = WASSP_HDR_LEN;",
          "5991:  }",
          "5995:  {",
          "5996:   pinfo->fragmented = TRUE;",
          "5997:   offset = WASSP_HDR_LEN;",
          "5998:   conv = find_conversation_pinfo(pinfo, 0);",
          "5999:   DISSECTOR_ASSERT(conv);",
          "6000:   reassembly_id = (((conv->conv_index) & 0x00FFFFFF) << 8) + ru_msg_type;",
          "6001:   wassp_frag_msg = fragment_add_seq_next(&wassp_reassembled_table, tvb, offset, pinfo, reassembly_id, NULL, remain_len - WASSP_HDR_LEN, flag & RU_WASSP_FLAGS_MORE_FRAGMENTS_FOLLOWING);",
          "6002:   if ( wassp_frag_msg )",
          "6003:    combined_tvb = process_reassembled_data(tvb, offset, pinfo, \"Reassembled Wassp\", wassp_frag_msg, &wassp_frag_items, NULL, wassp_tree);",
          "6005:   if ( combined_tvb)",
          "6006:   {",
          "6007:    col_append_str(pinfo->cinfo, COL_INFO, \" (Message Reassembled)\");",
          "6008:    next_tvb = combined_tvb;",
          "6009:    complete = TRUE;",
          "6010:    offset = 0;",
          "6011:   }",
          "6012:   else",
          "6013:   {",
          "6014:    col_append_fstr(pinfo->cinfo, COL_INFO, \" (Message fragment %u)\", seq_number);",
          "6015:    next_tvb = tvb_new_subset_length_caplen(tvb, WASSP_HDR_LEN, -1, -1);",
          "6016:   }",
          "6017:  }",
          "6020:  if (complete)",
          "6021:   dissect_unfragmented_wassp(next_tvb, pinfo, wassp_tree, remain_len, ru_msg_type, offset);",
          "6023:  pinfo->fragmented = save_fragmented;",
          "6024:  return 1;",
          "6025: }",
          "6032: void proto_register_wassp(void)",
          "6033: {",
          "6034:  static hf_register_info hf[] =",
          "6035:  {",
          "6036:   {",
          "6037:    &hf_aeroscout_header,",
          "6038:    {",
          "6039:     \"Location Base Service Header\", \"wassp.aeroscout.header\", FT_BYTES, BASE_NONE, NULL,",
          "6040:     0x00, \"Aeroscout header\", HFILL",
          "6041:    }",
          "6042:   },",
          "6043:   {",
          "6044:    &hf_aeroscout_header_magic_number,",
          "6045:    {",
          "6046:     \"Header Magic Number\", \"wassp.aeroscout.header_magic\", FT_UINT16, BASE_HEX, NULL,",
          "6047:     0x00, \"Aeroscout header magic number\", HFILL",
          "6048:    }",
          "6049:   },",
          "6050:   {",
          "6051:    &hf_aeroscout_request_id,",
          "6052:    {",
          "6053:     \"Request ID\", \"wassp.aeroscout.request_id\", FT_UINT16, BASE_DEC, NULL,",
          "6054:     0x00, \"Aeroscout Request ID\", HFILL",
          "6055:    }",
          "6056:   },",
          "6057:   {",
          "6058:    &hf_aeroscout_code,",
          "6059:    {",
          "6060:     \"Operation Code\", \"wassp.aeroscout.code\", FT_UINT8, BASE_DEC, NULL,",
          "6061:     0x00, \"Aeroscout Operation Code\", HFILL",
          "6062:    }",
          "6063:   },",
          "6065:   {",
          "6066:    &hf_aeroscout_sub_code,",
          "6067:    {",
          "6068:     \"Operation Sub Code\", \"wassp.aeroscout.sub_code\", FT_UINT8, BASE_DEC, NULL,",
          "6069:     0x00, \"Aeroscout Operation Sub Code\", HFILL",
          "6070:    }",
          "6071:   },",
          "6072:   {",
          "6073:    &hf_aeroscout_datalength,",
          "6074:    {",
          "6075:     \"Length of Data Payload\", \"wassp.aeroscout.datalength\", FT_UINT16, BASE_DEC, NULL,",
          "6076:     0x00, \"Aeroscout Length of Data Payload\", HFILL",
          "6077:    }",
          "6078:   },",
          "6079:   {",
          "6080:    &hf_lbs_vendor_id,",
          "6081:    {",
          "6082:     \"Location Base Service Vendor ID\", \"wassp.lbs.vendor_id\", FT_UINT16, BASE_DEC, NULL,",
          "6083:     0x00, \"LBS TAG Vendor ID\", HFILL",
          "6084:    }",
          "6085:   },",
          "6086:   {",
          "6087:    &hf_lbs_rsvd1,",
          "6088:    {",
          "6089:     \"LBS Rsvd\", \"wassp.lbs.rsvd1\", FT_UINT16, BASE_HEX, NULL,",
          "6090:     0x00, \"LBS TAG rsvd\", HFILL",
          "6091:    }",
          "6092:   },",
          "6093:   {",
          "6094:    &hf_lbs_ap_bssid,",
          "6095:    {",
          "6096:     \"Location Base Service AccessPoint BSSID\", \"wassp.lbs.ap_bssid\", FT_BYTES, BASE_NONE, NULL,",
          "6097:     0x00, \"LBS TAG ap bssid\", HFILL",
          "6098:    }",
          "6099:   },",
          "6100:   {",
          "6101:    &hf_lbs_rsvd2,",
          "6102:    {",
          "6103:     \"LBS Rsvd\", \"wassp.lbs.rsvd2\", FT_UINT8, BASE_HEX, NULL,",
          "6104:     0x00, \"LBS TAG rsvd2\", HFILL",
          "6105:    }",
          "6106:   },",
          "6107:   {",
          "6108:    &hf_lbs_rxchan,",
          "6109:    {",
          "6110:     \"LBS rxchan\", \"wassp.lbs.rxchan\", FT_UINT8, BASE_DEC, NULL,",
          "6111:     0x00, \"LBS TAG rxchan\", HFILL",
          "6112:    }",
          "6113:   },",
          "6115:   {",
          "6116:    &hf_lsb_tstamp,",
          "6117:    {",
          "6118:     \"Location Base Service Time Stamp\", \"wassp.lbs.tstamp\", FT_UINT32, BASE_DEC, NULL,",
          "6119:     0x00, \"LBS TAG tstamp\", HFILL",
          "6120:    }",
          "6121:   },",
          "6122:   {",
          "6123:    &hf_hf_lsb_rsvd3,",
          "6124:    {",
          "6125:     \"LBS Rsvd\", \"wassp.lbs.rsvd3\", FT_UINT16, BASE_HEX, NULL,",
          "6126:     0x00, \"LBS TAG  rsvd3\", HFILL",
          "6127:    }",
          "6128:   },",
          "6129:   {",
          "6130:    &hf_lsb_rssi,",
          "6131:    {",
          "6132:     \"Location Base Service RSSI\", \"wassp.lbs.rssi\", FT_INT8, BASE_DEC, NULL,",
          "6133:     0x00, \"LBS TAG rssi\", HFILL",
          "6134:    }",
          "6135:   },",
          "6136:   {",
          "6137:    &hf_lsb_rsvd,",
          "6138:    {",
          "6139:     \"LBS Rsvd\", \"wassp.lbs.rsvd\", FT_UINT8, BASE_HEX, NULL,",
          "6140:     0x00, \"LBS TAG rsvd4\", HFILL",
          "6141:    }",
          "6142:   },",
          "6143:   {",
          "6144:    &hf_lsb_noise_floor,",
          "6145:    {",
          "6146:     \"LBS Noise Floor\", \"wassp.lsb.noise_floor\", FT_INT8, BASE_DEC, NULL,",
          "6147:     0x00, \"LBS TAG noise floor\", HFILL",
          "6148:    }",
          "6149:   },",
          "6150:   {",
          "6151:    &hf_lsb_rsvd4,",
          "6152:    {",
          "6153:     \"LBS Rsvd\", \"wassp.lsb.rsvd4\", FT_UINT8, BASE_HEX, NULL,",
          "6154:     0x00, \"LBS TAG rsvd5\", HFILL",
          "6155:    }",
          "6156:   },",
          "6157:   {",
          "6158:    &hf_lsb_chan_rate,",
          "6159:    {",
          "6160:     \"LBS channel Rate\", \"wassp.lsb.chan_rate\", FT_UINT8, BASE_DEC, NULL,",
          "6161:     0x00, \"LBS TAG channel rate\", HFILL",
          "6162:    }",
          "6163:   },",
          "6164:   {",
          "6165:    &hf_lsb_rsvd5,",
          "6166:    {",
          "6167:     \"LBS Rsvd\", \"wassp.lsb.rsvd5\", FT_UINT8, BASE_HEX, NULL,",
          "6168:     0x00, \"LBS TAG rsvd6\", HFILL",
          "6169:    }",
          "6170:   },",
          "6171:   {",
          "6172:    &hf_lsb_wh_fc,",
          "6173:    {",
          "6174:     \"LBS Wireless Header Frame Control\", \"wassp.lsb.wh_fc\", FT_UINT16, BASE_HEX, NULL,",
          "6175:     0x00, \"LBS TAG Frame Controll\", HFILL",
          "6176:    }",
          "6177:   },",
          "6178:   {",
          "6179:    &hf_lsb_wh_seq,",
          "6180:    {",
          "6181:     \"LBS Wireless Header Sequence Number\", \"wassp.hf_lsb_wh_seq\", FT_UINT16, BASE_HEX, NULL,",
          "6182:     0x00, \"LBS TAG Sequence Number\", HFILL",
          "6183:    }",
          "6184:   },",
          "6185:   {",
          "6186:    &hf_lsb_rsvd6,",
          "6187:    {",
          "6188:     \"LBS Rsvd\", \"wassp.lsb.rsvd6\", FT_UINT16, BASE_HEX, NULL,",
          "6189:     0x00, \"LBS TAG rsvd7\", HFILL",
          "6190:    }",
          "6191:   },",
          "6192:   {",
          "6193:    &hf_lsb_wh_addr2,",
          "6194:    {",
          "6195:     \"MAC address2\", \"wassp.data.mu_mac\", FT_ETHER, BASE_NONE, NULL,",
          "6196:     0x00, \"Mobile Unit Ethernet address\", HFILL",
          "6197:    }",
          "6198:   },",
          "6199:   {",
          "6200:    &hf_lsb_wh_addr3,",
          "6201:    {",
          "6202:     \"MAC address3\", \"wassp.data.mu_mac\", FT_ETHER, BASE_NONE, NULL,",
          "6203:     0x00, \"Mobile Unit Ethernet address\", HFILL",
          "6204:    }",
          "6205:   },",
          "6206:   {",
          "6207:    &hf_lsb_wh_addr4,",
          "6208:    {",
          "6209:     \"MAC address4\", \"wassp.data.mu_mac\", FT_ETHER, BASE_NONE, NULL,",
          "6210:     0x00, \"Mobile Unit Ethernet address\", HFILL",
          "6211:    }",
          "6212:   },",
          "6213:   {",
          "6214:    &hf_wassp_version,",
          "6215:    {",
          "6216:     \"Version\", \"wassp.version\", FT_UINT8, BASE_DEC, NULL,",
          "6217:     0x00, \"Wassp Protocol Version\", HFILL",
          "6218:    }",
          "6219:   },",
          "6221:   {",
          "6222:    &hf_ru_rad_num,",
          "6223:    {",
          "6224:     \"RU Random Number\", \"wassp.ru_xid\", FT_UINT16, BASE_DEC, NULL,",
          "6225:     0x00, \"random number for checking the session\", HFILL",
          "6226:    }",
          "6227:   },",
          "6228:   {",
          "6229:    &hf_ru_checksum,",
          "6230:    {",
          "6231:     \"RU Messages Checksum\", \"wassp.ru_checksum\", FT_UINT16, BASE_DEC, NULL,",
          "6232:     0x00, \"AccessPoint messages checksum\", HFILL",
          "6233:    }",
          "6234:   },",
          "6235:   {",
          "6236:    &hf_ru_ac_op,",
          "6237:    {",
          "6238:     \"Controller Operation\", \"wassp.ru_ac_op\", FT_UINT16, BASE_DEC, NULL,",
          "6239:     0x00, \"Conteoller operation\", HFILL",
          "6240:    }",
          "6241:   },",
          "6242:   {",
          "6243:    &hf_ru_ac_mode,",
          "6244:    {",
          "6245:     \"Controller Operation Mode\", \"wassp.ru_ac_mode\", FT_UINT16, BASE_DEC, NULL,",
          "6246:     0x00, \"Conteoller operation mode\", HFILL",
          "6247:    }",
          "6248:   },",
          "6249:   {",
          "6250:    &hf_ru_mac,",
          "6251:    {",
          "6252:     \"AP MAC address\", \"wassp.ru_mac\", FT_ETHER, BASE_NONE, NULL,",
          "6253:     0x00, \"AP Ethernet address\", HFILL",
          "6254:    }",
          "6255:   },",
          "6256:   {",
          "6257:    &hf_ru_discover_header,",
          "6258:    {",
          "6259:     \"RU Discover Header\", \"wassp.ru.header\", FT_BYTES, BASE_NONE, NULL ,",
          "6260:     0x00, \"AccessPoint Discover Header\", HFILL",
          "6261:    }",
          "6262:   },",
          "6263:   {",
          "6264:    &hf_wassp_header,",
          "6265:    {",
          "6266:     \"Wassp Header\", \"wassp.header\", FT_BYTES, BASE_NONE, NULL ,",
          "6267:     0x00, \"Wassp Message Header\", HFILL",
          "6268:    }",
          "6269:   },",
          "6270:   {",
          "6271:    &hf_wassp_type,",
          "6272:    {",
          "6273:     \"WASSP Type\", \"wassp.type\", FT_UINT8, BASE_DEC,",
          "6274:     VALS(wassp_header_types), 0x00, \"Wassp message type\", HFILL",
          "6275:    }",
          "6276:   },",
          "6277:   {",
          "6278:    &hf_wassp_seq_num_flag,",
          "6279:    {",
          "6280:     \"Sequence Number & Flag\", \"wassp.seq_num_flag\", FT_UINT16, BASE_DEC,  NULL,",
          "6281:     0x00, \"Sequence number and flag for multi-message\", HFILL",
          "6282:    }",
          "6283:   },",
          "6284:   {",
          "6285:    &hf_seq_num,",
          "6286:    {",
          "6287:     \"Sequence Number\", \"wassp.seq_num\", FT_UINT16, BASE_DEC,  NULL,",
          "6288:     0xffc0, \"Sequence number for multi-message\", HFILL",
          "6289:    }",
          "6290:   },",
          "6291:   {",
          "6292:    &hf_wassp_use_frag,",
          "6293:    {",
          "6294:     \"Wassp Use Fragmentation\", \"wassp.use_frag\", FT_BOOLEAN, 6,  NULL,",
          "6295:     0x8, \"Wassp Packet Use Fragmentation\", HFILL",
          "6296:    }",
          "6297:   },",
          "6298:   {",
          "6299:    &hf_wassp_data_frag,",
          "6300:    {",
          "6301:     \"Wassp Data Fragmentation\", \"wassp.data_frag\", FT_BOOLEAN, 6,  NULL,",
          "6302:     0x2, \"Data Fragmentation\", HFILL",
          "6303:    }",
          "6304:   },",
          "6305:   {",
          "6306:    &hf_wassp_more_frag,",
          "6307:    {",
          "6308:     \"Fragments following\", \"wassp.following_frag\", FT_BOOLEAN, 6,  NULL,",
          "6309:     0x1, \"Wassp Fragments following\", HFILL",
          "6310:    }",
          "6311:   },",
          "6312:   {",
          "6313:    &hf_wassp_first_frag,",
          "6314:    {",
          "6315:     \"Not First fragment packet\", \"wassp.no_first_frag\", FT_BOOLEAN, 6, NULL,",
          "6316:     0x4, \"Wassp Not First Fragment Packet\", HFILL",
          "6317:    }",
          "6318:   },",
          "6319:   {",
          "6320:    &hf_wassp_sessionid,",
          "6321:    {",
          "6322:     \"Session ID\", \"wassp.session_id\", FT_UINT16, BASE_DEC, NULL,",
          "6323:     0x00, \"Concentrator Session ID\", HFILL",
          "6324:    }",
          "6325:   },",
          "6326:   {",
          "6327:    &hf_wassp_length,",
          "6328:    {",
          "6329:     \"Length\", \"wassp.length\", FT_UINT16, BASE_DEC, NULL,",
          "6330:     0x00, \"Length of Payload\", HFILL",
          "6331:    }",
          "6332:   },",
          "6334:   {",
          "6335:    &hf_wassp_mu_data_tree,",
          "6336:    {",
          "6337:     \"WASSP MU Data tree\", \"wassp.mu.data.subtree\",",
          "6338:     FT_NONE, BASE_NONE, NULL, 0x00,",
          "6339:     NULL, HFILL",
          "6340:    }",
          "6341:   },",
          "6342:   {",
          "6343:    &hf_wassp_mu_data_header,",
          "6344:    {",
          "6345:     \"Wassp MU Data Header\", \"wassp.mu_data_header\", FT_BYTES, BASE_NONE, NULL,",
          "6346:     0x00, \"MU Data Header\", HFILL",
          "6347:    }",
          "6348:   },",
          "6349:   {",
          "6350:    &hf_wassp_mu_type,",
          "6351:    {",
          "6352:     \"Type\", \"wassp.data.mu_type\", FT_UINT8, BASE_DEC, NULL,",
          "6353:     0x00, \"Wassp MU message type\", HFILL",
          "6354:    }",
          "6355:   },",
          "6356:   {",
          "6357:    &hf_wassp_mu_qos,",
          "6358:    {",
          "6359:     \"QOS\", \"wassp.data.mu_qos\", FT_UINT8, BASE_DEC, NULL,",
          "6360:     0x00, \"Quality of Service identifier\", HFILL",
          "6361:    }",
          "6362:   },",
          "6363:   {",
          "6364:    &hf_wassp_mu_action_ssid,",
          "6365:    {",
          "6366:     \"Action & SSID/Vlan ID\", \"wassp.data.mu_action_ssid\",  FT_UINT16, BASE_DEC,  NULL,",
          "6367:     0x00, \"Action and where device is currently registered\", HFILL",
          "6368:    }",
          "6369:   },",
          "6370:   {",
          "6371:    &hf_wassp_mu_action,",
          "6372:    {",
          "6373:     \"Action\", \"wassp.data.mu_action\",  FT_UINT16, BASE_HEX, VALS(mu_action_field_strings),",
          "6374:     0xf000, \"Notify what knind of action\", HFILL",
          "6375:    }",
          "6376:   },",
          "6378:   {",
          "6379:    &hf_wassp_mu_action_field_value,",
          "6380:    {",
          "6381:     \"SSID/Vlan ID\", \"wassp.data.mu_action_field_value\",  FT_UINT16, BASE_DEC,  NULL,",
          "6382:     0xfff, \"SSID value or VlanID vlaue\", HFILL",
          "6383:    }",
          "6384:   },",
          "6385:   {",
          "6386:    &hf_wassp_mu_resv0,",
          "6387:    {",
          "6388:     \"Reserved0\", \"wassp.data.mu_resv0\", FT_UINT16, BASE_HEX, VALS(mu_resv0_strings),",
          "6389:     0x00, \"MU data Reserved0 or Flag\", HFILL",
          "6390:    }",
          "6391:   },",
          "6392:   {",
          "6393:    &hf_wassp_mu_resv1,",
          "6394:    {",
          "6395:     \"Reserved1\", \"wassp.data.mu_resv1\", FT_UINT16, BASE_DEC, NULL,",
          "6396:     0x00, \"MU data Reserved 1\", HFILL",
          "6397:    }",
          "6398:   },",
          "6399:   {",
          "6400:    &hf_wassp_mu_assoc_status,",
          "6401:    {",
          "6402:     \"Association Status\", \"wassp.data.mu_assoc_status\", FT_UINT8, BASE_CUSTOM,  CF_FUNC(mu_association_status),",
          "6403:     0x00, \"MU Association Status\", HFILL",
          "6404:    }",
          "6405:   },",
          "6406:   {",
          "6407:    &hf_wassp_mu_mac,",
          "6408:    {",
          "6409:     \"MAC address\", \"wassp.data.mu_mac\", FT_ETHER, BASE_NONE, NULL,",
          "6410:     0x00, \"Mobile Unit Ethernet address\", HFILL",
          "6411:    }",
          "6412:   },",
          "6414:   {",
          "6415:    &hf_wassp_mu_netflow_tree,",
          "6416:    {",
          "6417:     \"WASSP MU Data NetFlow Tree\", \"wassp.mu.data.netflow.subtree\", FT_NONE, BASE_NONE, NULL,",
          "6418:     0x00, NULL, HFILL",
          "6419:    }",
          "6420:   },",
          "6421:   {",
          "6422:    &hf_wassp_mu_netflow_header,",
          "6423:    {",
          "6424:     \"Wassp MU Data NetFlow Header\", \"wassp.mu_data_netflow_header\", FT_BYTES, BASE_NONE, NULL,",
          "6425:     0x00, \"MU Data NetFlow Header\", HFILL",
          "6426:    }",
          "6427:   },",
          "6428:   {",
          "6429:    &hf_wassp_mu_netflow_version,",
          "6430:    {",
          "6431:     \"Version\", \"wassp.data.mu_netflow_version\", FT_UINT16, BASE_DEC, NULL,",
          "6432:     0x00, \"MU NetFlow Version\", HFILL",
          "6433:    }",
          "6434:   },",
          "6435:   {",
          "6436:    &hf_wassp_mu_netflow_length,",
          "6437:    {",
          "6438:     \"Length\", \"wassp.data.mu_netflow_length\", FT_UINT16, BASE_DEC, NULL,",
          "6439:     0x00, \"MU NetFlow Length\", HFILL",
          "6440:    }",
          "6441:   },",
          "6442:   {",
          "6443:    &hf_wassp_mu_netflow_flags,",
          "6444:    {",
          "6445:     \"Flag\", \"wassp.data.mu_netflow_flag\", FT_UINT16, BASE_HEX, NULL,",
          "6446:     0x00, \"MU NetFlow Flag\", HFILL",
          "6447:    }",
          "6448:   },",
          "6449:   {",
          "6450:    &hf_wassp_mu_netflow_uptime,",
          "6451:    {",
          "6452:     \"UpTime\", \"wassp.data.mu_netflow_uptime\", FT_ABSOLUTE_TIME, ABSOLUTE_TIME_LOCAL, NULL,",
          "6453:     0x00, \"MU NetFlow Up Time\", HFILL",
          "6454:    }",
          "6455:   },",
          "6456:   {",
          "6457:    &hf_wassp_mu_netflow_record,",
          "6458:    {",
          "6459:     \"Record\", \"wassp.data.mu_netflow_record\", FT_BYTES, BASE_NONE, NULL,",
          "6460:     0x00, \"MU NetFlow Record\", HFILL",
          "6461:    }",
          "6462:   },",
          "6463:   {",
          "6464:    &hf_wassp_mu_netflow_in_bytes,",
          "6465:    {",
          "6466:     \"InBytes\", \"wassp.data.mu_netflow_inbytes\", FT_UINT32, BASE_DEC, NULL,",
          "6467:     0x00, \"MU NetFlow In Bytes\", HFILL",
          "6468:    }",
          "6469:   },",
          "6470:   {",
          "6471:    &hf_wassp_mu_netflow_in_packets,",
          "6472:    {",
          "6473:     \"InPackets\", \"wassp.data.mu_netflow_inpackets\", FT_UINT32, BASE_DEC, NULL,",
          "6474:     0x00, \"MU NetFlow In Packets\", HFILL",
          "6475:    }",
          "6476:   },",
          "6477:   {",
          "6478:    &hf_wassp_mu_netflow_ip_protocol_number,",
          "6479:    {",
          "6480:     \"Protocol\", \"wassp.data.mu_netflow_protocol\", FT_UINT8, BASE_DEC, NULL,",
          "6481:     0x00, \"MU NetFlow IP Protocol\", HFILL",
          "6482:    }",
          "6483:   },",
          "6484:   {",
          "6485:    &hf_wassp_mu_netflow_source_tos,",
          "6486:    {",
          "6487:     \"Source TOS\", \"wassp.data.mu_netflow_tos\", FT_UINT8, BASE_HEX, NULL,",
          "6488:     0x00, \"MU NetFlow Source TOS\", HFILL",
          "6489:    }",
          "6490:   },",
          "6491:   {",
          "6492:    &hf_wassp_mu_netflow_source_port,",
          "6493:    {",
          "6494:     \"Source Port\", \"wassp.data.mu_netflow_source_port\", FT_INT16, BASE_DEC, NULL,",
          "6495:     0x00, \"MU NetFlow Source Port\", HFILL",
          "6496:    }",
          "6497:   },",
          "6498:   {",
          "6499:    &hf_wassp_mu_netflow_source_ip,",
          "6500:    {",
          "6501:     \"IP\", \"wassp.data.mu_netflow_source_ip\", FT_IPv4, BASE_NONE, NULL,",
          "6502:     0x00, \"MU NetFlow Source IP\", HFILL",
          "6503:    }",
          "6504:   },",
          "6505:   {",
          "6506:    &hf_wassp_mu_netflow_input_snmp,",
          "6507:    {",
          "6508:     \"In SNMP\", \"wassp.data.mu_netflow_in_snmp\", FT_UINT16, BASE_DEC, NULL,",
          "6509:     0x00, \"MU NetFlow In Snmp\", HFILL",
          "6510:    }",
          "6511:   },",
          "6512:   {",
          "6513:    &hf_wassp_mu_netflow_dest_port,",
          "6514:    {",
          "6515:     \"Dest Port\", \"wassp.data.mu_netflow_dest_port\", FT_INT16, BASE_DEC, NULL,",
          "6516:     0x00, \"MU NetFlow Dest Port\", HFILL",
          "6517:    }",
          "6518:   },",
          "6519:   {",
          "6520:    &hf_wassp_mu_netflow_dest_ip,",
          "6521:    {",
          "6522:     \"Dest IP\", \"wassp.data.mu_netflow_dest_ip\", FT_IPv4, BASE_NONE, NULL,",
          "6523:     0x00, \"MU NetFlow Dest IP\", HFILL",
          "6524:    }",
          "6525:   },",
          "6526:   {",
          "6527:    &hf_wassp_mu_netflow_output_snmp,",
          "6528:    {",
          "6529:     \"Out SNMP\", \"wassp.data.mu_netflow_out_snmp\", FT_UINT16, BASE_DEC, NULL,",
          "6530:     0x00, \"MU NetFlow Out Snmp\", HFILL",
          "6531:    }",
          "6532:   },",
          "6533:   {",
          "6534:    &hf_wassp_mu_netflow_last_time,",
          "6535:    {",
          "6536:     \"Last Time\", \"wassp.data.mu_netflow_last_time\", FT_UINT32, BASE_DEC, NULL,",
          "6537:     0x00, \"MU NetFlow Last Time\", HFILL",
          "6538:    }",
          "6539:   },",
          "6540:   {",
          "6541:    &hf_wassp_mu_netflow_first_time,",
          "6542:    {",
          "6543:     \"First Time\", \"wassp.data.mu_netflow_first_time\", FT_UINT32, BASE_DEC, NULL,",
          "6544:     0x00, \"MU NetFlow First Time\", HFILL",
          "6545:    }",
          "6546:   },",
          "6547:   {",
          "6548:    &hf_wassp_mu_netflow_in_source_mac,",
          "6549:    {",
          "6550:     \"Source Mac\", \"wassp.data.mu_netflow_source_mac\", FT_ETHER, BASE_NONE, NULL,",
          "6551:     0x00, \"MU NetFlow Source MAC Address\", HFILL",
          "6552:    }",
          "6553:   },",
          "6554:   {",
          "6555:    &hf_wassp_mu_netflow_in_dest_mac,",
          "6556:    {",
          "6557:     \"Dest Mac\", \"wassp.data.mu_netflow_dest_mac\", FT_ETHER, BASE_NONE, NULL,",
          "6558:     0x00, \"MU NetFlow Dest MAC Address\", HFILL",
          "6559:    }",
          "6560:   },",
          "6562:   {",
          "6563:    &hf_wassp_tlv_value,",
          "6564:    {",
          "6565:     \"Wassp TLV\", \"wassp.tlv.value\", FT_NONE, BASE_NONE, NULL,",
          "6566:     0x00, \"Wassp TLV in hexadecimal\", HFILL",
          "6567:    }",
          "6568:   },",
          "6569:   {",
          "6570:    &hf_wassp_tlv_type_main,",
          "6571:    {",
          "6572:     \"Type\", \"wassp.tlv.type\", FT_UINT16, BASE_DEC, VALS(wassp_tlv_types),",
          "6573:     0x00, \"Wassp TLV type\", HFILL",
          "6574:    }",
          "6575:   },",
          "6576:   {",
          "6577:    &hf_wassp_tlv_type_sub,",
          "6578:    {",
          "6579:     \"Type\", \"wassp.tlv.type\", FT_NONE, BASE_NONE, NULL,",
          "6580:     0x00, \"Wassp TLV type\", HFILL",
          "6581:    }",
          "6582:   },",
          "6583:   {",
          "6584:    &hf_wassp_tlv_length,",
          "6585:    {",
          "6586:     \"Length\", \"wassp.tlv.length\", FT_UINT16, BASE_DEC, NULL,",
          "6587:     0x00, \"Wassp TLV length\", HFILL",
          "6588:    }",
          "6589:   },",
          "6590:   {",
          "6591:    &hf_wassp_tlv_value_octext,",
          "6592:    {",
          "6593:     \"value\", \"wassp.tlv.value_octext\", FT_BYTES, BASE_NONE, NULL,",
          "6594:     0x00, \"Wassp TLV Value in hexadecimal\", HFILL",
          "6595:    }",
          "6596:   },",
          "6597:   {",
          "6598:    &hf_wassp_tlv_value_string,",
          "6599:    {",
          "6600:     \"Value\", \"wassp.tlv.valuestr\", FT_STRING, BASE_NONE, NULL,",
          "6601:     0x00, \"Wassp TLV Value in string formst\", HFILL",
          "6602:    }",
          "6603:   },",
          "6604:   {",
          "6605:    &hf_wassp_tlv_value_ip,",
          "6606:    {",
          "6607:     \"Value\", \"wassp.tlv.valueip\", FT_IPv4, BASE_NONE, NULL,",
          "6608:     0x00, \"Wassp TLV Value in IP format\", HFILL",
          "6609:    }",
          "6610:   },",
          "6611:   {",
          "6612:    &hf_wassp_tlv_value_int,",
          "6613:    {",
          "6614:     \"Value\", \"wassp.tlv.valueint\", FT_UINT8, BASE_DEC, NULL,",
          "6615:     0x00, \"Wassp TLV Value in an integer\", HFILL",
          "6616:    }",
          "6617:   },",
          "6618:   {",
          "6619:    &hf_wassp_tlv_eid_status,",
          "6620:    {",
          "6621:     \"Status\", \"wassp.tlv.eid.status\", FT_UINT32, BASE_DEC, VALS(wassp_eid_status_types),",
          "6622:     0x00, \"Explicit indication of request's status\", HFILL",
          "6623:    }",
          "6624:   },",
          "6625:   {",
          "6626:    &hf_wassp_tlv_eid_action,",
          "6627:    {",
          "6628:     \"action\", \"wassp.tlv.eid.action\", FT_UINT32, BASE_DEC, VALS(wassp_eid_action_types),",
          "6629:     0x00, \"upgrade action request\", HFILL",
          "6630:    }",
          "6631:   },",
          "6632:   {",
          "6633:    &hf_wassp_tlv_eid_rustate,",
          "6634:    {",
          "6635:     \"RU State\", \"wassp.tlv.eid.rustate\", FT_BOOLEAN, FT_UINT8, TFS(&wassp_eid_rustate_types),",
          "6636:     0x00, \"Remote Unit State\", HFILL",
          "6637:    }",
          "6638:   },",
          "6639:   {",
          "6640:    &hf_wassp_ipaddress,",
          "6641:    {",
          "6642:     \"IPv4 address\", \"wassp.ipaddress\", FT_IPv4, BASE_NONE, NULL,",
          "6643:     0x00, \"IPv4 IP address\", HFILL",
          "6644:    }",
          "6645:   },",
          "6647:   {",
          "6648:    &hf_wassp_fragment_overlap,",
          "6649:    {",
          "6650:     \"Fragment overlap\",    \"wassp.fragment.overlap\", FT_BOOLEAN, BASE_NONE, NULL,",
          "6651:     0x0, \"Fragment overlaps with other fragments\", HFILL",
          "6652:    }",
          "6653:   },",
          "6654:   {",
          "6655:    &hf_wassp_fragment_overlap_conflict,",
          "6656:    {",
          "6657:     \"Conflicting data in fragment overlap\",    \"wassp.fragment.overlap.conflict\", FT_BOOLEAN, BASE_NONE, NULL,",
          "6658:     0x00, \"Overlapping fragments contained conflicting data\", HFILL",
          "6659:    }",
          "6660:   },",
          "6661:   {",
          "6662:    &hf_wassp_fragment_multiple_tails,",
          "6663:    {",
          "6664:     \"Multiple tail fragments found\",    \"wassp.fragment.multipletails\", FT_BOOLEAN, BASE_NONE, NULL,",
          "6665:     0x00, \"Several tails were found when defragmenting the packet\", HFILL",
          "6666:    }",
          "6667:   },",
          "6668:   {",
          "6669:    &hf_wassp_fragment_too_long_fragment,",
          "6670:    {",
          "6671:     \"Fragment too long\",    \"wassp.fragment.toolongfragment\", FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "6672:     \"Fragment contained data past end of packet\", HFILL",
          "6673:    }",
          "6674:   },",
          "6675:   {",
          "6676:    &hf_wassp_fragment_error,",
          "6677:    {",
          "6678:     \"Defragmentation error\", \"wassp.fragment.error\", FT_FRAMENUM, BASE_NONE, NULL,",
          "6679:     0x00, \"Defragmentation error due to illegal fragments\", HFILL",
          "6680:    }",
          "6681:   },",
          "6682:   {",
          "6683:    &hf_wassp_fragment,",
          "6684:    {",
          "6685:     \"WASSP Fragment\", \"wassp.fragment\", FT_FRAMENUM, BASE_NONE, NULL,",
          "6686:     0x00, \"wassp Fragmented\", HFILL",
          "6687:    }",
          "6688:   },",
          "6689:   {",
          "6690:    &hf_wassp_fragments,",
          "6691:    {",
          "6692:     \"WASSP Fragments\", \"wassp.fragments\", FT_NONE, BASE_NONE, NULL,",
          "6693:     0x00, \"wassp more Fragments\", HFILL",
          "6694:    }",
          "6695:   },",
          "6696:   {",
          "6697:    &hf_wassp_fragment_count,",
          "6698:    {",
          "6699:     \"WASSP Fragment count\", \"wassp.fragment.count\", FT_UINT32, BASE_DEC, NULL,",
          "6700:     0x00, \"Fragment Count\", HFILL",
          "6701:    }",
          "6702:   },",
          "6703:   {",
          "6704:    &hf_wassp_reassembled_in,",
          "6705:    {",
          "6706:     \"Reassembled WASSP in frame\", \"wassp.reassembled_in\", FT_FRAMENUM, BASE_NONE, NULL,",
          "6707:     0x00, \"This WASSP frame is reassembled in this frame\", HFILL",
          "6708:    }",
          "6709:   },",
          "6710:   {",
          "6711:    &hf_wassp_reassembled_length,",
          "6712:    {",
          "6713:     \"Reassembled WASSP length\", \"wassp.reassembled.length\", FT_UINT32, BASE_DEC, NULL,",
          "6714:     0x00, \"The total length of the reassembled payload\", HFILL",
          "6715:    }",
          "6716:   },",
          "6717:   {",
          "6718:    &hf_wassp_sub_tree,",
          "6719:    {",
          "6720:     \"WASSP Sub TLV Block\", \"wassp.subtree\", FT_NONE, BASE_NONE, NULL,",
          "6721:     0x00, \"WASSP sub tree\", HFILL",
          "6722:    }",
          "6723:   },",
          "6724:   {",
          "6725:    &hf_wassp_tlv_unknown,",
          "6726:    {",
          "6727:     \"WASSP unknown tlv\", \"wassp.tlv.unknown\", FT_UINT32, BASE_DEC, NULL,",
          "6728:     0x00, \"Unknown tlv\", HFILL",
          "6729:    }",
          "6730:   },",
          "6731:   {",
          "6732:    &hf_wassp_tlv_invalid,",
          "6733:    {",
          "6734:     \"WASSP invalid tlv\", \"wassp.tlv.invalid\", FT_UINT32, BASE_DEC, NULL,",
          "6735:     0x00, \"Invalid tlv\", HFILL",
          "6736:    }",
          "6737:   },",
          "6738:   {",
          "6739:    &hf_wassp_topologykey,",
          "6740:    {",
          "6741:     \"Topology Key\", \"wassp.topology_key\", FT_UINT16, BASE_DEC, NULL,",
          "6742:     0x00, \"Topology ID\", HFILL",
          "6743:    }",
          "6744:   },",
          "6745:   {",
          "6746:    &hf_wassp_vlanid,",
          "6747:    {",
          "6748:     \"Vlan ID\", \"wassp.vlan_id\", FT_UINT16, BASE_DEC, NULL,",
          "6749:     0x00, \"Vlan Number\", HFILL",
          "6750:    }",
          "6751:   },",
          "6752:   {",
          "6753:    &hf_wassp_topology_mode,",
          "6754:    {",
          "6755:     \"Topology Mode\", \"wassp.topology_mode\", FT_UINT16,BASE_CUSTOM,  CF_FUNC(topology_moder_print),",
          "6756:     0x00, \"Wassp Topology Mode\", HFILL",
          "6757:    }",
          "6758:   },",
          "6759:   {",
          "6760:    &hf_wassp_in_cir,",
          "6761:    {",
          "6762:     \"Committed Information Rate(In direction)\", \"wassp.in_cir\", FT_UINT16, BASE_DEC, NULL,",
          "6763:     0x00, \"Committed Information Rate\", HFILL",
          "6764:    }",
          "6765:   },",
          "6766:   {",
          "6767:    &hf_wassp_out_cir,",
          "6768:    {",
          "6769:     \"Committed Information Rate(out direction)\", \"wassp.out_cir\", FT_UINT16, BASE_DEC, NULL,",
          "6770:     0x00, \"Committed Information Rate\", HFILL",
          "6771:    }",
          "6772:   },",
          "6773:   {",
          "6774:    &hf_wassp_flag_1b,",
          "6775:    {",
          "6776:     \"Flag (1 byte)\", \"wassp.flag.1b\", FT_UINT8, BASE_HEX, NULL,",
          "6777:     0x00, \"Flag\", HFILL",
          "6778:    }",
          "6779:   },",
          "6780:   {",
          "6781:    &hf_wassp_tos,",
          "6782:    {",
          "6783:     \"Type of Service\", \"wassp.tos\", FT_UINT8, BASE_HEX, NULL,",
          "6784:     0x00, \"Tos\", HFILL",
          "6785:    }",
          "6786:   },",
          "6787:   {",
          "6788:    &hf_cos_tos,",
          "6789:    {",
          "6790:     \"COS Tos\", \"wassp.cos_tos\", FT_UINT8, BASE_HEX, NULL, 0x00,",
          "6791:     \"Tos\", HFILL",
          "6792:    }",
          "6793:   },",
          "6794:   {",
          "6795:    &hf_wassp_tos_mask,",
          "6796:    {",
          "6797:     \"Type of Service Mask\", \"wassp.tos.mask\", FT_UINT8, BASE_HEX, NULL,",
          "6798:     0x00, \"ToS Mask\", HFILL",
          "6799:    }",
          "6800:   },",
          "6801:   {",
          "6802:    &hf_cos_tos_mask,",
          "6803:    {",
          "6804:     \"Class of Service ToS Mask\", \"wassp.cos_tos.mask\", FT_UINT8, BASE_HEX, NULL,",
          "6805:     0x00, \"Cos Tos Mask\", HFILL",
          "6806:    }",
          "6807:   },",
          "6808:   {",
          "6809:    &hf_filter_tos_maskbit_priority,",
          "6810:    {",
          "6811:     \"Mask bit and Priority\", \"wassp.mask_bit\", FT_UINT8,  BASE_CUSTOM,  CF_FUNC(maskbit_priority_print),",
          "6812:     0xff, \"Mask bit\", HFILL",
          "6813:    }",
          "6814:   },",
          "6815:   {",
          "6816:    &hf_wassp_priority,",
          "6817:    {",
          "6818:     \"Priority bit\", \"wassp.priority\", FT_BOOLEAN, 8, NULL,",
          "6819:     0xff, \"Priority\", HFILL",
          "6820:    }",
          "6821:   },",
          "6822:   {",
          "6823:    &hf_cos_priority_txq,",
          "6824:    {",
          "6825:     \"COS Priority and TxQ\", \"wassp.cos_priority_txq\",FT_UINT8,  BASE_CUSTOM,  CF_FUNC(cos_priority_txq_print),",
          "6826:     0xff, \"Cos Priority and Transmit Queue\", HFILL",
          "6827:    }",
          "6828:   },",
          "6829:   {",
          "6830:    &hf_cos_rateid,",
          "6831:    {",
          "6832:     \"COS In&Out Rate Id\", \"wassp.rate_id\", FT_UINT8,  BASE_CUSTOM,  CF_FUNC(cos_rate_id_print),",
          "6833:     0xff, \"Cos In&Out Rate Id\", HFILL",
          "6834:    }",
          "6835:   },",
          "6836:   {",
          "6837:    &hf_wassp_filter_rule,",
          "6838:    {",
          "6839:     \"WASSP Filter Rule\", \"wassp.filter.rule\", FT_BYTES, BASE_NONE, NULL,",
          "6840:     0x00, \"Filter Rule\", HFILL",
          "6841:    }",
          "6842:   },",
          "6843:   {",
          "6844:    &hf_wassp_filter_flag,",
          "6845:    {",
          "6846:     \"WASSP Filter Flag\", \"wassp.filter.flag\", FT_UINT32, BASE_HEX, NULL,",
          "6847:     0x00, \"Filter Flag\", HFILL",
          "6848:    }",
          "6849:   },",
          "6850:   {",
          "6851:    &hf_filter_rule_port_range,",
          "6852:    {",
          "6853:     \"TCP/UDP Port range\", \"wassp.port\", FT_UINT32, BASE_CUSTOM,  CF_FUNC(port_range_print),",
          "6854:     0x00, \"WASSP TCP/UDP Port\", HFILL",
          "6855:    }",
          "6856:   },",
          "6857:   {",
          "6858:    &hf_wassp_ipprotocol,",
          "6859:    {",
          "6860:     \"IP Protocol\", \"wassp.ip_protocol\", FT_UINT8, BASE_DEC, NULL,",
          "6861:     0x00, \"WASSP IP Protocol\", HFILL",
          "6862:    }",
          "6863:   },",
          "6864:   {",
          "6865:    &hf_wassp_netmasklength,",
          "6866:    {",
          "6867:     \"Netmask Length Bit\", \"wassp.netmask_length\", FT_UINT8, BASE_DEC, NULL,",
          "6868:     0x00, \"WASSP Netmask Length Bit\", HFILL",
          "6869:    }",
          "6870:   },",
          "6871:   {",
          "6872:    &hf_wassp_macaddr,",
          "6873:    {",
          "6874:     \"MAC address\", \"wassp.mac_address\", FT_ETHER, BASE_NONE, NULL,",
          "6875:     0x00, \"WASSP MAC address\", HFILL",
          "6876:    }",
          "6877:   },",
          "6878:   {",
          "6879:    &hf_wassp_macaddr_mask,",
          "6880:    {",
          "6881:     \"MAC address mask\", \"wassp.mac_address.mask\", FT_ETHER, BASE_NONE, NULL,",
          "6882:     0x00, \"MAC mask\", HFILL",
          "6883:    }",
          "6884:   },",
          "6885:   {",
          "6886:    &hf_wassp_ethernet_type,",
          "6887:    {",
          "6888:     \"Ethernet Type\", \"wassp.ethernet_type\", FT_UINT16, BASE_HEX, NULL,",
          "6889:     0x00, \"Ethernet Type Field\", HFILL",
          "6890:    }",
          "6891:   },",
          "6892:   {",
          "6893:    &hf_wassp_reserve,",
          "6894:    {",
          "6895:     \"Reserve\", \"wassp.reserve\", FT_UINT16, BASE_DEC, NULL,",
          "6896:     0x00, \"Reserve value\", HFILL",
          "6897:    }",
          "6898:   },",
          "6899:   {",
          "6900:    &hf_wassp_freq,",
          "6901:    {",
          "6902:     \"Freq in MHz\", \"wassp.freq\", FT_UINT16, BASE_DEC, NULL,",
          "6903:     0x00, \"WASSP Freq\", HFILL",
          "6904:    }",
          "6905:   },",
          "6906:   {",
          "6907:    &hf_wassp_rss,",
          "6908:    {",
          "6909:     \"RSS\", \"wassp.rss\", FT_UINT16, BASE_DEC, NULL,",
          "6910:     0x00, \"WASSP RSS\", HFILL",
          "6911:    }",
          "6912:   },",
          "6913:   {",
          "6914:    &hf_wassp_rssi,",
          "6915:    {",
          "6916:     \"RSSI\", \"wassp.rssi\", FT_UINT16, BASE_DEC, NULL,",
          "6917:     0x00, \"WASSP RSSI\", HFILL",
          "6918:    }",
          "6919:   },",
          "6920:   {",
          "6921:    &hf_wassp_threatstate,",
          "6922:    {",
          "6923:     \"WASSP Threat State\", \"wassp.threat_state\", FT_UINT8, BASE_HEX, VALS(threat_state_strings),",
          "6924:     0x00, \"WASSP Threat State (NA/Active/Inactive)\", HFILL",
          "6925:    }",
          "6926:   },",
          "6927:   {",
          "6928:    &hf_wassp_radioparams,",
          "6929:    {",
          "6930:     \"Radio Params QOS\", \"wassp.radio_params\", FT_UINT8, BASE_HEX, VALS(radio_params_strings),",
          "6931:     0x00, \"WASSP Radio Params QOS\", HFILL",
          "6932:    }",
          "6933:   },",
          "6934:   {",
          "6935:    &hf_wassp_channelfreq,",
          "6936:    {",
          "6937:     \"Channel Frequency\", \"wassp.channel_freq\", FT_UINT16, BASE_DEC, NULL,",
          "6938:     0x00, \"WASSP Channel Frequency\", HFILL",
          "6939:    }",
          "6940:   },",
          "6941:   {",
          "6942:    &hf_wassp_mu,",
          "6943:    {",
          "6944:     \"Total Mu\", \"wassp.mu\", FT_UINT32, BASE_DEC, NULL,",
          "6945:     0x00, \"WASSP Total Mu\", HFILL",
          "6946:    }",
          "6947:   },",
          "6948:   {",
          "6949:    &hf_wassp_apprules,",
          "6950:    {",
          "6951:     \"Number of Application Rules\", \"wassp.mu\", FT_UINT16, BASE_DEC, NULL,",
          "6952:     0x00, \"WASSP number of app rules\", HFILL",
          "6953:    }",
          "6954:   },",
          "6955:   {",
          "6956:    &hf_wassp_displayid,",
          "6957:    {",
          "6958:     \"Display ID\", \"wassp.display_id\", FT_UINT16, BASE_DEC, NULL,",
          "6959:     0x00, \"WASSP display ID\", HFILL",
          "6960:    }",
          "6961:   },",
          "6962:   {",
          "6963:    &hf_wassp_txbytes,",
          "6964:    {",
          "6965:     \"Tx Bytes\", \"wassp.tx_bytes\", FT_UINT32, BASE_DEC, NULL,",
          "6966:     0x00, \"WASSP Tx Bytes\", HFILL",
          "6967:    }",
          "6968:   },",
          "6969:   {",
          "6970:    &hf_wassp_rxbytes,",
          "6971:    {",
          "6972:     \"Rx Bytes\", \"wassp.rx_bytes\", FT_UINT32, BASE_DEC, NULL,",
          "6973:     0x00, \"WASSP Rx Bytes\", HFILL",
          "6974:    }",
          "6975:   },",
          "6978:  static gint * ett[] =",
          "6979:  {",
          "6981:   &ett_wassp_tlv,",
          "6982:   &ett_wassp_filter_rule,",
          "6983:   &ett_lbs_header,",
          "6984:   &ett_wassp_mu_appl_stats,",
          "6985:   &ett_wassp_header,",
          "6986:   &ett_ru_discover_header,",
          "6987:   &ett_mu_data_header,",
          "6988:   &ett_mu_action_field,",
          "6989:   &ett_wassp_data,",
          "6990:   &ett_wassp_mu_data_netflow,",
          "6991:   &ett_wassp_mu_data_netflow_header,",
          "6992:   &ett_seq_flags,",
          "6993:   &ett_wassp_tlv_missing,",
          "6994:   &ett_wassp_ap_stats_block,",
          "6995:   &ett_wassp_mu_rf_stats_block,",
          "6996:   &ett_wassp_config_error_block,",
          "6997:   &ett_wassp_config_modified_block,",
          "6998:   &ett_wassp_global_config_block,",
          "6999:   &ett_wassp_radio_config_block,",
          "7000:   &ett_wassp_vns_config_block,",
          "7001:   &ett_wassp_mu_stats_block,",
          "7002:   &ett_wassp_radio_stats_block,",
          "7003:   &ett_wassp_ether_stats_block,",
          "7004:   &ett_wassp_wds_stats_block,",
          "7005:   &ett_wassp_dot1x_stats_block,",
          "7006:   &ett_wassp_fragment,",
          "7007:   &ett_wassp_fragments,",
          "7008:   &ett_wassp_filter_config_block,",
          "7009:   &ett_wassp_filter_ext_config_block,",
          "7010:   &ett_wassp_site_filter_config_block,",
          "7011:   &ett_wassp_vns_stats_block,",
          "7012:   &ett_wassp_radius_server_config_block,",
          "7013:   &ett_wassp_site_config_block,",
          "7014:   &ett_wassp_policy_config_block,",
          "7015:   &ett_wassp_cos_config_block,",
          "7016:   &ett_wassp_localbase_lookup_block,",
          "7017:   &ett_wassp_radius_config_block,",
          "7018:   &ett_wassp_eid_main_tlv_block,",
          "7019:   &ett_wassp_app_policy_fixed_block,",
          "7020:   &ett_wassp_app_policy_entry_block,",
          "7021:   &ett_wassp_s_topo_m_filter_entry_block,",
          "7022:   &ett_wassp_s_topo_m_filter_ext_entry_block,",
          "7023:   &ett_wassp_11u_config_entry_block,",
          "7024:   &ett_wassp_hs2_config_entry_block,",
          "7025:   &ett_wassp_extapp_config_entry_block,",
          "7031:  proto_wassp = proto_register_protocol(\"Wireless Access Station Session Protocol\", \"WASSP\", \"wassp\");",
          "7036:  wassp_dissector_table = register_dissector_table(\"wassp.subd\", \"WASSP subdissectors\", proto_wassp, FT_UINT16, BASE_DEC);",
          "7037:  register_init_routine(&wassp_defragment_init);",
          "7038: }",
          "7041: static gboolean",
          "7042: test_wassp(tvbuff_t *tvb)",
          "7043: {",
          "7045:  if (tvb_captured_length(tvb) < 8",
          "7046:    || tvb_get_guint8(tvb, 0) != 3",
          "7049:     )",
          "7050:  {",
          "7051:   return FALSE;",
          "7052:  }",
          "7053:  return TRUE;",
          "7054: }",
          "7058: static gboolean",
          "7059: dissect_wassp_heur(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "7060: {",
          "7061:  if (!test_wassp(tvb))",
          "7062:  {",
          "7063:   return FALSE;",
          "7064:  }",
          "7065:  dissect_wassp(tvb, pinfo, tree);",
          "7066:  return TRUE;",
          "7067: }",
          "7069: static int",
          "7070: dissect_wassp_static(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "7071: {",
          "7072:  if (!test_wassp(tvb))",
          "7073:  {",
          "7074:   return 0;",
          "7075:  }",
          "7076:  return dissect_wassp(tvb, pinfo, tree);",
          "7093:  eth_handle = find_dissector(\"eth_withoutfcs\");",
          "7094:  data_handle = find_dissector(\"data\");",
          "7095:  ip_handle = find_dissector(\"ip\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}