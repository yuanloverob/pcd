{
  "cve_id": "CVE-2019-19965",
  "cve_desc": "In the Linux kernel through 5.4.6, there is a NULL pointer dereference in drivers/scsi/libsas/sas_discover.c because of mishandling of port disconnection during discovery, related to a PHY down race condition, aka CID-f70267f379b5.",
  "repo": "torvalds/linux",
  "patch_hash": "f70267f379b5e5e11bdc5d72a56bf17e5feed01f",
  "patch_info": {
    "commit_hash": "f70267f379b5e5e11bdc5d72a56bf17e5feed01f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f70267f379b5e5e11bdc5d72a56bf17e5feed01f",
    "files": [
      "drivers/scsi/libsas/sas_discover.c"
    ],
    "message": "scsi: libsas: stop discovering if oob mode is disconnected\n\nThe discovering of sas port is driven by workqueue in libsas. When libsas\nis processing port events or phy events in workqueue, new events may rise\nup and change the state of some structures such as asd_sas_phy.  This may\ncause some problems such as follows:\n\n==>thread 1                       ==>thread 2\n\n                                  ==>phy up\n                                  ==>phy_up_v3_hw()\n                                    ==>oob_mode = SATA_OOB_MODE;\n                                  ==>phy down quickly\n                                  ==>hisi_sas_phy_down()\n                                    ==>sas_ha->notify_phy_event()\n                                    ==>sas_phy_disconnected()\n                                      ==>oob_mode = OOB_NOT_CONNECTED\n==>workqueue wakeup\n==>sas_form_port()\n  ==>sas_discover_domain()\n    ==>sas_get_port_device()\n      ==>oob_mode is OOB_NOT_CONNECTED and device\n         is wrongly taken as expander\n\nThis at last lead to the panic when libsas trying to issue a command to\ndiscover the device.\n\n[183047.614035] Unable to handle kernel NULL pointer dereference at\nvirtual address 0000000000000058\n[183047.622896] Mem abort info:\n[183047.625762]   ESR = 0x96000004\n[183047.628893]   Exception class = DABT (current EL), IL = 32 bits\n[183047.634888]   SET = 0, FnV = 0\n[183047.638015]   EA = 0, S1PTW = 0\n[183047.641232] Data abort info:\n[183047.644189]   ISV = 0, ISS = 0x00000004\n[183047.648100]   CM = 0, WnR = 0\n[183047.651145] user pgtable: 4k pages, 48-bit VAs, pgdp =\n00000000b7df67be\n[183047.657834] [0000000000000058] pgd=0000000000000000\n[183047.662789] Internal error: Oops: 96000004 [#1] SMP\n[183047.667740] Process kworker/u16:2 (pid: 31291, stack limit =\n0x00000000417c4974)\n[183047.675208] CPU: 0 PID: 3291 Comm: kworker/u16:2 Tainted: G\nW  OE 4.19.36-vhulk1907.1.0.h410.eulerosv2r8.aarch64 #1\n[183047.687015] Hardware name: N/A N/A/Kunpeng Desktop Board D920S10,\nBIOS 0.15 10/22/2019\n[183047.695007] Workqueue: 0000:74:02.0_disco_q sas_discover_domain\n[183047.700999] pstate: 20c00009 (nzCv daif +PAN +UAO)\n[183047.705864] pc : prep_ata_v3_hw+0xf8/0x230 [hisi_sas_v3_hw]\n[183047.711510] lr : prep_ata_v3_hw+0xb0/0x230 [hisi_sas_v3_hw]\n[183047.717153] sp : ffff00000f28ba60\n[183047.720541] x29: ffff00000f28ba60 x28: ffff8026852d7228\n[183047.725925] x27: ffff8027dba3e0a8 x26: ffff8027c05fc200\n[183047.731310] x25: 0000000000000000 x24: ffff8026bafa8dc0\n[183047.736695] x23: ffff8027c05fc218 x22: ffff8026852d7228\n[183047.742079] x21: ffff80007c2f2940 x20: ffff8027c05fc200\n[183047.747464] x19: 0000000000f80800 x18: 0000000000000010\n[183047.752848] x17: 0000000000000000 x16: 0000000000000000\n[183047.758232] x15: ffff000089a5a4ff x14: 0000000000000005\n[183047.763617] x13: ffff000009a5a50e x12: ffff8026bafa1e20\n[183047.769001] x11: ffff0000087453b8 x10: ffff00000f28b870\n[183047.774385] x9 : 0000000000000000 x8 : ffff80007e58f9b0\n[183047.779770] x7 : 0000000000000000 x6 : 000000000000003f\n[183047.785154] x5 : 0000000000000040 x4 : ffffffffffffffe0\n[183047.790538] x3 : 00000000000000f8 x2 : 0000000002000007\n[183047.795922] x1 : 0000000000000008 x0 : 0000000000000000\n[183047.801307] Call trace:\n[183047.803827]  prep_ata_v3_hw+0xf8/0x230 [hisi_sas_v3_hw]\n[183047.809127]  hisi_sas_task_prep+0x750/0x888 [hisi_sas_main]\n[183047.814773]  hisi_sas_task_exec.isra.7+0x88/0x1f0 [hisi_sas_main]\n[183047.820939]  hisi_sas_queue_command+0x28/0x38 [hisi_sas_main]\n[183047.826757]  smp_execute_task_sg+0xec/0x218\n[183047.831013]  smp_execute_task+0x74/0xa0\n[183047.834921]  sas_discover_expander.part.7+0x9c/0x5f8\n[183047.839959]  sas_discover_root_expander+0x90/0x160\n[183047.844822]  sas_discover_domain+0x1b8/0x1e8\n[183047.849164]  process_one_work+0x1b4/0x3f8\n[183047.853246]  worker_thread+0x54/0x470\n[183047.856981]  kthread+0x134/0x138\n[183047.860283]  ret_from_fork+0x10/0x18\n[183047.863931] Code: f9407a80 528000e2 39409281 72a04002 (b9405800)\n[183047.870097] kernel fault(0x1) notification starting on CPU 0\n[183047.875828] kernel fault(0x1) notification finished on CPU 0\n[183047.881559] Modules linked in: unibsp(OE) hns3(OE) hclge(OE)\nhnae3(OE) mem_drv(OE) hisi_sas_v3_hw(OE) hisi_sas_main(OE)\n[183047.892418] ---[ end trace 4cc26083fc11b783  ]---\n[183047.897107] Kernel panic - not syncing: Fatal exception\n[183047.902403] kernel fault(0x5) notification starting on CPU 0\n[183047.908134] kernel fault(0x5) notification finished on CPU 0\n[183047.913865] SMP: stopping secondary CPUs\n[183047.917861] Kernel Offset: disabled\n[183047.921422] CPU features: 0x2,a2a00a38\n[183047.925243] Memory Limit: none\n[183047.928372] kernel reboot(0x2) notification starting on CPU 0\n[183047.934190] kernel reboot(0x2) notification finished on CPU 0\n[183047.940008] ---[ end Kernel panic - not syncing: Fatal exception\n]---\n\nFixes: 2908d778ab3e (\"[SCSI] aic94xx: new driver\")\nLink: https://lore.kernel.org/r/20191206011118.46909-1-yanaijie@huawei.com\nReported-by: Gao Chuan <gaochuan4@huawei.com>\nReviewed-by: John Garry <john.garry@huawei.com>\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/libsas/sas_discover.c||drivers/scsi/libsas/sas_discover.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/libsas/sas_discover.c||drivers/scsi/libsas/sas_discover.c": [
      "File: drivers/scsi/libsas/sas_discover.c -> drivers/scsi/libsas/sas_discover.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:   else",
      "82:    dev->dev_type = SAS_SATA_DEV;",
      "83:   dev->tproto = SAS_PROTOCOL_SATA;",
      "85:   struct sas_identify_frame *id =",
      "86:    (struct sas_identify_frame *) dev->frame_rcvd;",
      "87:   dev->dev_type = id->dev_type;",
      "88:   dev->iproto = id->initiator_bits;",
      "89:   dev->tproto = id->target_bits;",
      "90:  }",
      "92:  sas_init_dev(dev);",
      "",
      "[Removed Lines]",
      "84:  } else {",
      "",
      "[Added Lines]",
      "84:  } else if (port->oob_mode == SAS_OOB_MODE) {",
      "90:  } else {",
      "95:   sas_put_device(dev);",
      "96:   pr_warn(\"Port %016llx is disconnected when discovering\\n\",",
      "97:    SAS_ADDR(port->attached_sas_addr));",
      "98:   return -ENODEV;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2bd75f806c49929d7ab5a860c0a69b0a17c59d2",
      "candidate_info": {
        "commit_hash": "b2bd75f806c49929d7ab5a860c0a69b0a17c59d2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b2bd75f806c49929d7ab5a860c0a69b0a17c59d2",
        "files": [
          "include/linux/soundwire/sdw.h"
        ],
        "message": "soundwire: sdw_slave: track unattach_request to handle all init sequences\n\nThe Slave device initialization can be split in 4 different cases:\n\n1. Master-initiated hardware reset, system suspend-resume and\npm_runtime based on clock-stop mode1. To avoid timeouts and a bad\naudio experience, the Slave device resume operations need to wait for\nthe Slave device to be re-enumerated and its settings restored.\n\n2. Exit from clock-stop mode0. In this case, the Slave device is\nrequired to remain enumerated and its context preserved while the\nclock is stopped, so no re-initialization or wait_for_completion() is\nnecessary.\n\n3. Slave-initiated pm_runtime D3 transition. With the parent child\nrelationship, it is possible that a Slave device becomes 'suspended'\nwhile its parent is still 'active' with the bus clock still\ntoggling. In this case, during the pm_runtime resume operation, there\nis no need to wait for any settings to be restored.\n\n4. Slave reset (sync loss or implementation-defined). In that case the\nbus remains operational and the Slave device will be re-initialized\nwhen it becomes ATTACHED again.\n\nIn previous patches, we suggested the use of wait_for_completion() to\ndeal with the case #1, but case #2 and #3 do not need any wait.\n\nTo account for those differences, this patch adds an unattach_request\nfield. The field is explicitly set by the Master for the case #1, and\nif non-zero the Slave device shall wait on resume. In all other cases,\nthe Slave resume operations can proceed without wait.\n\nThe only request tracked so far is Master HardReset, but the request\nis declared as a bit mask for future extensions (if needed). The\ndefinition for this value is added in bus.h and does not need to be\nexposed in sdw.h\n\nSigned-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>\nLink: https://lore.kernel.org/r/20191212014507.28050-5-pierre-louis.bossart@linux.intel.com\nSigned-off-by: Vinod Koul <vkoul@kernel.org>",
        "before_after_code_files": [
          "include/linux/soundwire/sdw.h||include/linux/soundwire/sdw.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/linux/soundwire/sdw.h||include/linux/soundwire/sdw.h": [
          "File: include/linux/soundwire/sdw.h -> include/linux/soundwire/sdw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:  struct completion probe_complete;",
          "575:  struct completion enumeration_complete;",
          "576:  struct completion initialization_complete;",
          "577: };",
          "579: #define dev_to_sdw_dev(_dev) container_of(_dev, struct sdw_slave, dev)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582:  u32 unattach_request;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cf1cd8ee3ee09ef2859017df2058e2f53c5347f",
      "candidate_info": {
        "commit_hash": "9cf1cd8ee3ee09ef2859017df2058e2f53c5347f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9cf1cd8ee3ee09ef2859017df2058e2f53c5347f",
        "files": [
          "net/tipc/core.c"
        ],
        "message": "tipc: fix ordering of tipc module init and exit routine\n\nIn order to set/get/dump, the tipc uses the generic netlink\ninfrastructure. So, when tipc module is inserted, init function\ncalls genl_register_family().\nAfter genl_register_family(), set/get/dump commands are immediately\nallowed and these callbacks internally use the net_generic.\nnet_generic is allocated by register_pernet_device() but this\nis called after genl_register_family() in the __init function.\nSo, these callbacks would use un-initialized net_generic.\n\nTest commands:\n    #SHELL1\n    while :\n    do\n        modprobe tipc\n        modprobe -rv tipc\n    done\n\n    #SHELL2\n    while :\n    do\n        tipc link list\n    done\n\nSplat looks like:\n[   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled\n[   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access\n[   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI\n[   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194\n[   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006\n[   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]\n[   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00\n[   59.622550][ T2780] NET: Registered protocol family 30\n[   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202\n[   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907\n[   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149\n[   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1\n[   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40\n[   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328\n[   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000\n[   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   59.625875][ T2780] tipc: Started in single node mode\n[   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0\n[   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[   59.636478][ T2788] Call Trace:\n[   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]\n[   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0\n[   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]\n[   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]\n[   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380\n[   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]\n[   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]\n[   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270\n[   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0\n[   59.643050][ T2788]  netlink_dump+0x49c/0xed0\n[   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0\n[   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800\n[   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670\n[   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800\n[   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90\n[   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0\n[   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320\n[   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0\n[   59.647821][ T2788]  ? genl_unlock+0x20/0x20\n[   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0\n[   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0\n[   59.649276][ T2788]  ? genl_rcv+0x15/0x40\n[   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0\n[   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350\n[   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320\n[   59.651491][ T2788]  ? netlink_ack+0x940/0x940\n[   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0\n[   59.652449][ T2788]  genl_rcv+0x24/0x40\n[   59.652841][ T2788]  netlink_unicast+0x421/0x600\n[ ... ]\n\nFixes: 7e4369057806 (\"tipc: fix a slab object leak\")\nFixes: a62fbccecd62 (\"tipc: make subscriber server support net namespace\")\nSigned-off-by: Taehee Yoo <ap420073@gmail.com>\nAcked-by: Jon Maloy <jon.maloy@ericsson.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/tipc/core.c||net/tipc/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/tipc/core.c||net/tipc/core.c": [
          "File: net/tipc/core.c -> net/tipc/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:  sysctl_tipc_rmem[1] = RCVBUF_DEF;",
          "149:  sysctl_tipc_rmem[2] = RCVBUF_MAX;",
          "159:  err = tipc_register_sysctl();",
          "160:  if (err)",
          "161:   goto out_sysctl;",
          "",
          "[Removed Lines]",
          "151:  err = tipc_netlink_start();",
          "152:  if (err)",
          "153:   goto out_netlink;",
          "155:  err = tipc_netlink_compat_start();",
          "156:  if (err)",
          "157:   goto out_netlink_compat;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:  if (err)",
          "181:   goto out_bearer;",
          "183:  pr_info(\"Started in single node mode\\n\");",
          "184:  return 0;",
          "185: out_bearer:",
          "186:  unregister_pernet_subsys(&tipc_pernet_pre_exit_ops);",
          "187: out_register_pernet_subsys:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:  err = tipc_netlink_start();",
          "176:  if (err)",
          "177:   goto out_netlink;",
          "179:  err = tipc_netlink_compat_start();",
          "180:  if (err)",
          "181:   goto out_netlink_compat;",
          "186: out_netlink_compat:",
          "187:  tipc_netlink_stop();",
          "188: out_netlink:",
          "189:  tipc_bearer_cleanup();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193: out_pernet:",
          "194:  tipc_unregister_sysctl();",
          "195: out_sysctl:",
          "200:  pr_err(\"Unable to start in single node mode\\n\");",
          "201:  return err;",
          "202: }",
          "204: static void __exit tipc_exit(void)",
          "205: {",
          "206:  tipc_bearer_cleanup();",
          "207:  unregister_pernet_subsys(&tipc_pernet_pre_exit_ops);",
          "208:  unregister_pernet_device(&tipc_topsrv_net_ops);",
          "209:  tipc_socket_stop();",
          "210:  unregister_pernet_device(&tipc_net_ops);",
          "213:  tipc_unregister_sysctl();",
          "215:  pr_info(\"Deactivated\\n\");",
          "",
          "[Removed Lines]",
          "196:  tipc_netlink_compat_stop();",
          "197: out_netlink_compat:",
          "198:  tipc_netlink_stop();",
          "199: out_netlink:",
          "211:  tipc_netlink_stop();",
          "212:  tipc_netlink_compat_stop();",
          "",
          "[Added Lines]",
          "207:  tipc_netlink_compat_stop();",
          "208:  tipc_netlink_stop();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93e89ac8537bad2cd560c64b70dbb87e68714e54",
      "candidate_info": {
        "commit_hash": "93e89ac8537bad2cd560c64b70dbb87e68714e54",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/93e89ac8537bad2cd560c64b70dbb87e68714e54",
        "files": [
          "drivers/gpu/drm/i915/gem/i915_gem_userptr.c"
        ],
        "message": "drm/i915/gem: Wait on unbind barriers when invalidating userptr\n\nWhen we are told we have to drop all references to userptr, wait for any\nbarriers required for unbinding.\n\n<4> [2055.808787] WARNING: CPU: 3 PID: 6239 at mm/mmu_notifier.c:472 __mmu_notifier_invalidate_range_start+0x1f2/0x250\n<4> [2055.808792] Modules linked in: vgem mei_hdcp snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic x86_pkg_temp_thermal coretemp crct10dif_pclmul crc32_pclmul ghash_clmulni_intel r8169 lpc_ich realtek i915 snd_hda_intel snd_intel_dspcfg snd_hda_codec snd_hwdep snd_hda_core pinctrl_broxton snd_pcm pinctrl_intel mei_me intel_lpss_pci mei prime_numbers [last unloaded: vgem]\n<4> [2055.808834] CPU: 3 PID: 6239 Comm: gem_userptr_bli Tainted: G     U            5.5.0-rc1-CI-CI_DRM_7522+ #1\n<4> [2055.808839] Hardware name:  /NUC6CAYB, BIOS AYAPLCEL.86A.0049.2018.0508.1356 05/08/2018\n<4> [2055.808847] RIP: 0010:__mmu_notifier_invalidate_range_start+0x1f2/0x250\n<4> [2055.808853] Code: c2 48 c7 c7 70 17 2e 82 44 89 45 d4 48 8b 70 28 e8 ec 01 ef ff 41 f6 46 20 01 44 8b 45 d4 75 0a 41 83 f8 f5 44 89 7d d4 74 89 <0f> 0b 44 89 45 d4 eb 81 0f 0b 49 8b 46 18 49 8b 76 10 4c 89 ff 48\n<4> [2055.808858] RSP: 0018:ffffc90002937d40 EFLAGS: 00010202\n<4> [2055.808865] RAX: 0000000000000061 RBX: ffff8882703a33e0 RCX: 0000000000000001\n<4> [2055.808870] RDX: 0000000000000000 RSI: ffff888277da8cb8 RDI: 00000000ffffffff\n<4> [2055.808874] RBP: ffffc90002937d70 R08: 00000000fffffff5 R09: 0000000000000000\n<4> [2055.808879] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000001\n<4> [2055.808884] R13: ffffffff822e1716 R14: ffffc90002937d80 R15: 00000000fffffff5\n<4> [2055.808890] FS:  00007fda75004e40(0000) GS:ffff888277d80000(0000) knlGS:0000000000000000\n<4> [2055.808895] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n<4> [2055.808900] CR2: 000055ad72ec3000 CR3: 00000002697b2000 CR4: 00000000003406e0\n<4> [2055.808904] Call Trace:\n<4> [2055.808920]  unmap_vmas+0x13e/0x150\n<4> [2055.808937]  unmap_region+0xa3/0x100\n<4> [2055.808964]  __do_munmap+0x26d/0x490\n<4> [2055.808980]  __vm_munmap+0x66/0xc0\n<4> [2055.808994]  __x64_sys_munmap+0x12/0x20\n<4> [2055.809001]  do_syscall_64+0x4f/0x220\n\nCloses: https://gitlab.freedesktop.org/drm/intel/issues/771\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20191210133719.3874455-1-chris@chris-wilson.co.uk",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/gem/i915_gem_userptr.c||drivers/gpu/drm/i915/gem/i915_gem_userptr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/gem/i915_gem_userptr.c||drivers/gpu/drm/i915/gem/i915_gem_userptr.c": [
          "File: drivers/gpu/drm/i915/gem/i915_gem_userptr.c -> drivers/gpu/drm/i915/gem/i915_gem_userptr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   spin_unlock(&mn->lock);",
          "131:   ret = i915_gem_object_unbind(obj,",
          "133:   if (ret == 0)",
          "134:    ret = __i915_gem_object_put_pages(obj);",
          "135:   i915_gem_object_put(obj);",
          "",
          "[Removed Lines]",
          "132:           I915_GEM_OBJECT_UNBIND_ACTIVE);",
          "",
          "[Added Lines]",
          "132:           I915_GEM_OBJECT_UNBIND_ACTIVE |",
          "133:           I915_GEM_OBJECT_UNBIND_BARRIER);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36deeddcd3699c2755ed21c8d2595b1728d844e5",
      "candidate_info": {
        "commit_hash": "36deeddcd3699c2755ed21c8d2595b1728d844e5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/36deeddcd3699c2755ed21c8d2595b1728d844e5",
        "files": [
          "drivers/gpu/drm/i915/gt/intel_lrc.c"
        ],
        "message": "drm/i915/gt: Save irqstate around virtual_context_destroy\n\nAs virtual_context_destroy() may be called from a request signal, it may\nbe called from inside an irq-off section, and so we need to do a full\nsave/restore of the irq state rather than blindly re-enable irqs upon\nunlocking.\n\n<4> [110.024262] WARNING: inconsistent lock state\n<4> [110.024277] 5.4.0-rc8-CI-CI_DRM_7489+ #1 Tainted: G     U\n<4> [110.024292] --------------------------------\n<4> [110.024305] inconsistent {IN-HARDIRQ-W} -> {HARDIRQ-ON-W} usage.\n<4> [110.024323] kworker/0:0/5 [HC0[0]:SC0[0]:HE1:SE1] takes:\n<4> [110.024338] ffff88826a0c7a18 (&(&rq->lock)->rlock){?.-.}, at: i915_request_retire+0x221/0x930 [i915]\n<4> [110.024592] {IN-HARDIRQ-W} state was registered at:\n<4> [110.024612]   lock_acquire+0xa7/0x1c0\n<4> [110.024627]   _raw_spin_lock_irqsave+0x33/0x50\n<4> [110.024788]   intel_engine_breadcrumbs_irq+0x38c/0x600 [i915]\n<4> [110.024808]   irq_work_run_list+0x49/0x70\n<4> [110.024824]   irq_work_run+0x26/0x50\n<4> [110.024839]   smp_irq_work_interrupt+0x44/0x1e0\n<4> [110.024855]   irq_work_interrupt+0xf/0x20\n<4> [110.024871]   __do_softirq+0xb7/0x47f\n<4> [110.024885]   irq_exit+0xba/0xc0\n<4> [110.024898]   do_IRQ+0x83/0x160\n<4> [110.024910]   ret_from_intr+0x0/0x1d\n<4> [110.024922] irq event stamp: 172864\n<4> [110.024938] hardirqs last  enabled at (172863): [<ffffffff819ea214>] _raw_spin_unlock_irq+0x24/0x50\n<4> [110.024963] hardirqs last disabled at (172864): [<ffffffff819e9fba>] _raw_spin_lock_irq+0xa/0x40\n<4> [110.024988] softirqs last  enabled at (172812): [<ffffffff81c00385>] __do_softirq+0x385/0x47f\n<4> [110.025012] softirqs last disabled at (172797): [<ffffffff810b829a>] irq_exit+0xba/0xc0\n<4> [110.025031]\nother info that might help us debug this:\n<4> [110.025049]  Possible unsafe locking scenario:\n\n<4> [110.025065]        CPU0\n<4> [110.025075]        ----\n<4> [110.025084]   lock(&(&rq->lock)->rlock);\n<4> [110.025099]   <Interrupt>\n<4> [110.025109]     lock(&(&rq->lock)->rlock);\n<4> [110.025124]\n *** DEADLOCK ***\n\n<4> [110.025144] 4 locks held by kworker/0:0/5:\n<4> [110.025156]  #0: ffff88827588f528 ((wq_completion)events){+.+.}, at: process_one_work+0x1de/0x620\n<4> [110.025187]  #1: ffffc9000006fe78 ((work_completion)(&engine->retire_work)){+.+.}, at: process_one_work+0x1de/0x620\n<4> [110.025219]  #2: ffff88825605e270 (&kernel#2){+.+.}, at: engine_retire+0x57/0xe0 [i915]\n<4> [110.025405]  #3: ffff88826a0c7a18 (&(&rq->lock)->rlock){?.-.}, at: i915_request_retire+0x221/0x930 [i915]\n<4> [110.025634]\nstack backtrace:\n<4> [110.025653] CPU: 0 PID: 5 Comm: kworker/0:0 Tainted: G     U            5.4.0-rc8-CI-CI_DRM_7489+ #1\n<4> [110.025675] Hardware name:  /NUC7i5BNB, BIOS BNKBL357.86A.0054.2017.1025.1822 10/25/2017\n<4> [110.025856] Workqueue: events engine_retire [i915]\n<4> [110.025872] Call Trace:\n<4> [110.025891]  dump_stack+0x71/0x9b\n<4> [110.025907]  mark_lock+0x49a/0x500\n<4> [110.025926]  ? print_shortest_lock_dependencies+0x200/0x200\n<4> [110.025946]  mark_held_locks+0x49/0x70\n<4> [110.025962]  ? _raw_spin_unlock_irq+0x24/0x50\n<4> [110.025978]  lockdep_hardirqs_on+0xa2/0x1c0\n<4> [110.025995]  _raw_spin_unlock_irq+0x24/0x50\n<4> [110.026171]  virtual_context_destroy+0xc5/0x2e0 [i915]\n<4> [110.026376]  __active_retire+0xb4/0x290 [i915]\n<4> [110.026396]  dma_fence_signal_locked+0x9e/0x1b0\n<4> [110.026613]  i915_request_retire+0x451/0x930 [i915]\n<4> [110.026766]  retire_requests+0x4d/0x60 [i915]\n<4> [110.026919]  engine_retire+0x63/0xe0 [i915]\n\nFixes: b1e3177bd1d8 (\"drm/i915: Coordinate i915_active with its own mutex\")\nFixes: 6d06779e8672 (\"drm/i915: Load balancing across a virtual engine\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20191205145934.663183-1-chris@chris-wilson.co.uk\n(cherry picked from commit 6f7ac8285371fb0df58aba861eaab387f79ed04d)\nSigned-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/gt/intel_lrc.c||drivers/gpu/drm/i915/gt/intel_lrc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/gt/intel_lrc.c||drivers/gpu/drm/i915/gt/intel_lrc.c": [
          "File: drivers/gpu/drm/i915/gt/intel_lrc.c -> drivers/gpu/drm/i915/gt/intel_lrc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4120:  for (n = 0; n < ve->num_siblings; n++) {",
          "4121:   struct intel_engine_cs *sibling = ve->siblings[n];",
          "4122:   struct rb_node *node = &ve->nodes[sibling->id].rb;",
          "4124:   if (RB_EMPTY_NODE(node))",
          "4125:    continue;",
          "4130:   if (!RB_EMPTY_NODE(node))",
          "4131:    rb_erase_cached(node, &sibling->execlists.virtual);",
          "4134:  }",
          "4135:  GEM_BUG_ON(__tasklet_is_scheduled(&ve->base.execlists.tasklet));",
          "",
          "[Removed Lines]",
          "4127:   spin_lock_irq(&sibling->active.lock);",
          "4133:   spin_unlock_irq(&sibling->active.lock);",
          "",
          "[Added Lines]",
          "4123:   unsigned long flags;",
          "4128:   spin_lock_irqsave(&sibling->active.lock, flags);",
          "4134:   spin_unlock_irqrestore(&sibling->active.lock, flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c275779ff2dd51c96eaae04fac5d766421d6c596",
      "candidate_info": {
        "commit_hash": "c275779ff2dd51c96eaae04fac5d766421d6c596",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c275779ff2dd51c96eaae04fac5d766421d6c596",
        "files": [
          "fs/iomap/buffered-io.c"
        ],
        "message": "iomap: stop using ioend after it's been freed in iomap_finish_ioend()\n\nThis patch fixes the following KASAN report. The @ioend has been\nfreed by dio_put(), but the iomap_finish_ioend() still trys to access\nits data.\n\n[20563.631624] BUG: KASAN: use-after-free in iomap_finish_ioend+0x58c/0x5c0\n[20563.638319] Read of size 8 at addr fffffc0c54a36928 by task kworker/123:2/22184\n\n[20563.647107] CPU: 123 PID: 22184 Comm: kworker/123:2 Not tainted 5.4.0+ #1\n[20563.653887] Hardware name: HPE Apollo 70             /C01_APACHE_MB         , BIOS L50_5.13_1.11 06/18/2019\n[20563.664499] Workqueue: xfs-conv/sda5 xfs_end_io [xfs]\n[20563.669547] Call trace:\n[20563.671993]  dump_backtrace+0x0/0x370\n[20563.675648]  show_stack+0x1c/0x28\n[20563.678958]  dump_stack+0x138/0x1b0\n[20563.682455]  print_address_description.isra.9+0x60/0x378\n[20563.687759]  __kasan_report+0x1a4/0x2a8\n[20563.691587]  kasan_report+0xc/0x18\n[20563.694985]  __asan_report_load8_noabort+0x18/0x20\n[20563.699769]  iomap_finish_ioend+0x58c/0x5c0\n[20563.703944]  iomap_finish_ioends+0x110/0x270\n[20563.708396]  xfs_end_ioend+0x168/0x598 [xfs]\n[20563.712823]  xfs_end_io+0x1e0/0x2d0 [xfs]\n[20563.716834]  process_one_work+0x7f0/0x1ac8\n[20563.720922]  worker_thread+0x334/0xae0\n[20563.724664]  kthread+0x2c4/0x348\n[20563.727889]  ret_from_fork+0x10/0x18\n\n[20563.732941] Allocated by task 83403:\n[20563.736512]  save_stack+0x24/0xb0\n[20563.739820]  __kasan_kmalloc.isra.9+0xc4/0xe0\n[20563.744169]  kasan_slab_alloc+0x14/0x20\n[20563.747998]  slab_post_alloc_hook+0x50/0xa8\n[20563.752173]  kmem_cache_alloc+0x154/0x330\n[20563.756185]  mempool_alloc_slab+0x20/0x28\n[20563.760186]  mempool_alloc+0xf4/0x2a8\n[20563.763845]  bio_alloc_bioset+0x2d0/0x448\n[20563.767849]  iomap_writepage_map+0x4b8/0x1740\n[20563.772198]  iomap_do_writepage+0x200/0x8d0\n[20563.776380]  write_cache_pages+0x8a4/0xed8\n[20563.780469]  iomap_writepages+0x4c/0xb0\n[20563.784463]  xfs_vm_writepages+0xf8/0x148 [xfs]\n[20563.788989]  do_writepages+0xc8/0x218\n[20563.792658]  __writeback_single_inode+0x168/0x18f8\n[20563.797441]  writeback_sb_inodes+0x370/0xd30\n[20563.801703]  wb_writeback+0x2d4/0x1270\n[20563.805446]  wb_workfn+0x344/0x1178\n[20563.808928]  process_one_work+0x7f0/0x1ac8\n[20563.813016]  worker_thread+0x334/0xae0\n[20563.816757]  kthread+0x2c4/0x348\n[20563.819979]  ret_from_fork+0x10/0x18\n\n[20563.825028] Freed by task 22184:\n[20563.828251]  save_stack+0x24/0xb0\n[20563.831559]  __kasan_slab_free+0x10c/0x180\n[20563.835648]  kasan_slab_free+0x10/0x18\n[20563.839389]  slab_free_freelist_hook+0xb4/0x1c0\n[20563.843912]  kmem_cache_free+0x8c/0x3e8\n[20563.847745]  mempool_free_slab+0x20/0x28\n[20563.851660]  mempool_free+0xd4/0x2f8\n[20563.855231]  bio_free+0x33c/0x518\n[20563.858537]  bio_put+0xb8/0x100\n[20563.861672]  iomap_finish_ioend+0x168/0x5c0\n[20563.865847]  iomap_finish_ioends+0x110/0x270\n[20563.870328]  xfs_end_ioend+0x168/0x598 [xfs]\n[20563.874751]  xfs_end_io+0x1e0/0x2d0 [xfs]\n[20563.878755]  process_one_work+0x7f0/0x1ac8\n[20563.882844]  worker_thread+0x334/0xae0\n[20563.886584]  kthread+0x2c4/0x348\n[20563.889804]  ret_from_fork+0x10/0x18\n\n[20563.894855] The buggy address belongs to the object at fffffc0c54a36900\n                which belongs to the cache bio-1 of size 248\n[20563.906844] The buggy address is located 40 bytes inside of\n                248-byte region [fffffc0c54a36900, fffffc0c54a369f8)\n[20563.918485] The buggy address belongs to the page:\n[20563.923269] page:ffffffff82f528c0 refcount:1 mapcount:0 mapping:fffffc8e4ba31900 index:0xfffffc0c54a33300\n[20563.932832] raw: 17ffff8000000200 ffffffffa3060100 0000000700000007 fffffc8e4ba31900\n[20563.940567] raw: fffffc0c54a33300 0000000080aa0042 00000001ffffffff 0000000000000000\n[20563.948300] page dumped because: kasan: bad access detected\n\n[20563.955345] Memory state around the buggy address:\n[20563.960129]  fffffc0c54a36800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fc\n[20563.967342]  fffffc0c54a36880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[20563.974554] >fffffc0c54a36900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n[20563.981766]                                   ^\n[20563.986288]  fffffc0c54a36980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fc\n[20563.993501]  fffffc0c54a36a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[20564.000713] ==================================================================\n\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=205703\nSigned-off-by: Zorro Lang <zlang@redhat.com>\nFixes: 9cd0ed63ca514 (\"iomap: enhance writeback error message\")\nReviewed-by: Darrick J. Wong <darrick.wong@oracle.com>\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>",
        "before_after_code_files": [
          "fs/iomap/buffered-io.c||fs/iomap/buffered-io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/iomap/buffered-io.c||fs/iomap/buffered-io.c": [
          "File: fs/iomap/buffered-io.c -> fs/iomap/buffered-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1143:  struct bio *bio = &ioend->io_inline_bio;",
          "1144:  struct bio *last = ioend->io_bio, *next;",
          "1145:  u64 start = bio->bi_iter.bi_sector;",
          "1146:  bool quiet = bio_flagged(bio, BIO_QUIET);",
          "1148:  for (bio = &ioend->io_inline_bio; bio; bio = next) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1146:  loff_t offset = ioend->io_offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1163:    iomap_finish_page_writeback(inode, bv->bv_page, error);",
          "1164:   bio_put(bio);",
          "1165:  }",
          "1167:  if (unlikely(error && !quiet)) {",
          "1168:   printk_ratelimited(KERN_ERR",
          "1169: \"%s: writeback error on inode %lu, offset %lld, sector %llu\",",
          "1172:  }",
          "1173: }",
          "",
          "[Removed Lines]",
          "1170:    inode->i_sb->s_id, inode->i_ino, ioend->io_offset,",
          "1171:    start);",
          "",
          "[Added Lines]",
          "1172:    inode->i_sb->s_id, inode->i_ino, offset, start);",
          "",
          "---------------"
        ]
      }
    }
  ]
}