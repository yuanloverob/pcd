{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "447ec05f3160628ef6dc7f7eee34bae866af8e5c",
      "candidate_info": {
        "commit_hash": "447ec05f3160628ef6dc7f7eee34bae866af8e5c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/447ec05f3160628ef6dc7f7eee34bae866af8e5c",
        "files": [
          "phpdbg_prompt.c"
        ],
        "message": "Fixed infinite loop when quitting (sometimes)",
        "before_after_code_files": [
          "phpdbg_prompt.c||phpdbg_prompt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_prompt.c||phpdbg_prompt.c": [
          "File: phpdbg_prompt.c -> phpdbg_prompt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "920:   zend_bailout();",
          "921:  }",
          "",
          "[Removed Lines]",
          "923:  return SUCCESS;",
          "",
          "[Added Lines]",
          "923:  return PHPDBG_NEXT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1048:      case PHPDBG_FINISH:",
          "1049:      case PHPDBG_UNTIL:",
          "1050:      case PHPDBG_NEXT: {",
          "1052:        phpdbg_error(\"Not running\");",
          "1053:       }",
          "1054:       goto out;",
          "",
          "[Removed Lines]",
          "1051:       if (!EG(in_execution)) {",
          "",
          "[Added Lines]",
          "1051:       if (!EG(in_execution) && !(PHPDBG_G(flags) & PHPDBG_IS_QUITTING)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09d1a8aaab15eef182dd71cf6aa506f54dc70ea7",
      "candidate_info": {
        "commit_hash": "09d1a8aaab15eef182dd71cf6aa506f54dc70ea7",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/09d1a8aaab15eef182dd71cf6aa506f54dc70ea7",
        "files": [
          "Zend/tests/constant_expressions_arrays.phpt",
          "Zend/tests/constant_expressions_self_referencing_array.phpt"
        ],
        "message": "Add tests for constant expression arrays Adding one failing (!) test for now about circular constant references embedded in a constant AST, must be fixed before PHP 5.6 release.",
        "before_after_code_files": [
          "Zend/tests/constant_expressions_arrays.phpt||Zend/tests/constant_expressions_arrays.phpt",
          "Zend/tests/constant_expressions_self_referencing_array.phpt||Zend/tests/constant_expressions_self_referencing_array.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Zend/tests/constant_expressions_arrays.phpt||Zend/tests/constant_expressions_arrays.phpt": [
          "File: Zend/tests/constant_expressions_arrays.phpt -> Zend/tests/constant_expressions_arrays.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---TEST---",
          "2: Constant expressions with arrays",
          "3: ---FILE---",
          "4: <?php",
          "5: const a = [1,2,[3,[4]]];",
          "6: const b = a[0];",
          "7: const c = a[2][0];",
          "8: const d = a[2];",
          "9: const e = [\"string\" => [1]][\"string\"][0];",
          "11: var_dump(b, c, e);",
          "13: function test ($a = d[1][0]) {",
          "14:  var_dump($a);",
          "15: }",
          "17: test();",
          "19: class foo {",
          "20:  const bar = [1][0];",
          "21: }",
          "23: var_dump(foo::bar);",
          "25: var_dump(a); // Eventually allow that later with array dereferencing of constants",
          "27: ?>",
          "28: ---EXPECTF---",
          "29: int(1)",
          "30: int(3)",
          "31: int(1)",
          "32: int(4)",
          "33: int(1)",
          "35: Fatal error: Arrays are not allowed in constants at run-time in %s on line %d",
          "",
          "---------------"
        ],
        "Zend/tests/constant_expressions_self_referencing_array.phpt||Zend/tests/constant_expressions_self_referencing_array.phpt": [
          "File: Zend/tests/constant_expressions_self_referencing_array.phpt -> Zend/tests/constant_expressions_self_referencing_array.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---TEST---",
          "2: Self-referencing constant expression (part of a constant AST)",
          "3: ---FILE---",
          "4: <?php",
          "5: class A {",
          "6:    const FOO = [self::BAR];",
          "7:    const BAR = [self::FOO];",
          "8: }",
          "9: var_dump(A::FOO);",
          "10: ?>",
          "11: ---EXPECTF---",
          "12: Fatal error: Cannot declare self-referencing constant 'self::FOO' in %s on line %d",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e65e013e15f49d82ede44af8bdd52c27c0cd8274",
      "candidate_info": {
        "commit_hash": "e65e013e15f49d82ede44af8bdd52c27c0cd8274",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/e65e013e15f49d82ede44af8bdd52c27c0cd8274",
        "files": [
          "ext/phar/phar_object.c"
        ],
        "message": "Fix bug #67587: Redirection loop on nginx with FPM\n\nRedirection will work correctly as long as PATH_INFO is available,\ne.g. via the following nginx configuration:\n\n    set $path_info $fastcgi_path_info;\n    fastcgi_param PATH_INFO $path_info;",
        "before_after_code_files": [
          "ext/phar/phar_object.c||ext/phar/phar_object.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "606:  }",
          "608:  if ((strlen(sapi_module.name) == sizeof(\"cgi-fcgi\")-1 && !strncmp(sapi_module.name, \"cgi-fcgi\", sizeof(\"cgi-fcgi\")-1))",
          "609:   || (strlen(sapi_module.name) == sizeof(\"cgi\")-1 && !strncmp(sapi_module.name, \"cgi\", sizeof(\"cgi\")-1))) {",
          "611:   if (PG(http_globals)[TRACK_VARS_SERVER]) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "609:   || (strlen(sapi_module.name) == sizeof(\"fpm-fcgi\")-1 && !strncmp(sapi_module.name, \"fpm-fcgi\", sizeof(\"fpm-fcgi\")-1))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc36277eb6aeb7906207139c03ff4cf8d4cab872",
      "candidate_info": {
        "commit_hash": "fc36277eb6aeb7906207139c03ff4cf8d4cab872",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/fc36277eb6aeb7906207139c03ff4cf8d4cab872",
        "files": [
          "ext/openssl/tests/openssl_spki_verify.phpt"
        ],
        "message": "Fix test on modern distro where old unsecure algo are disabled in openssl config. Testing recent algo should be enough to check this function.",
        "before_after_code_files": [
          "ext/openssl/tests/openssl_spki_verify.phpt||ext/openssl/tests/openssl_spki_verify.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/openssl/tests/openssl_spki_verify.phpt||ext/openssl/tests/openssl_spki_verify.phpt": [
          "File: ext/openssl/tests/openssl_spki_verify.phpt -> ext/openssl/tests/openssl_spki_verify.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:       '4096'=>4096);",
          "23:      'sha224'=>OPENSSL_ALGO_SHA224,",
          "24:               'sha256'=>OPENSSL_ALGO_SHA256,",
          "25:               'sha384'=>OPENSSL_ALGO_SHA384,",
          "",
          "[Removed Lines]",
          "20: $algo = array('md4'=>OPENSSL_ALGO_MD4,",
          "21:               'md5'=>OPENSSL_ALGO_MD5,",
          "22:               'sha1'=>OPENSSL_ALGO_SHA1,",
          "",
          "[Added Lines]",
          "20: $algo = array('sha1'=>OPENSSL_ALGO_SHA1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: bool(true)",
          "91: bool(false)",
          "92: bool(true)",
          "105: bool(false)",
          "",
          "[Removed Lines]",
          "93: bool(false)",
          "94: bool(true)",
          "95: bool(false)",
          "96: bool(true)",
          "97: bool(false)",
          "98: bool(true)",
          "99: bool(false)",
          "100: bool(true)",
          "101: bool(false)",
          "102: bool(true)",
          "103: bool(false)",
          "104: bool(true)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66c177c77064cd7435f924c7d94d6366296d7963",
      "candidate_info": {
        "commit_hash": "66c177c77064cd7435f924c7d94d6366296d7963",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/66c177c77064cd7435f924c7d94d6366296d7963",
        "files": [
          "tests/basic/bug67198.phpt"
        ],
        "message": "XFAIL-- for bug #67198",
        "before_after_code_files": [
          "tests/basic/bug67198.phpt||tests/basic/bug67198.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/basic/bug67198.phpt||tests/basic/bug67198.phpt": [
          "File: tests/basic/bug67198.phpt -> tests/basic/bug67198.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: var_dump(file_get_contents(\"http://\" . PHP_CLI_SERVER_ADDRESS, false, $context));",
          "39: var_dump(file_get_contents(\"http://\" . PHP_CLI_SERVER_ADDRESS, false, $context));",
          "42: --EXPECT--",
          "43: string(4) \"PASS\"",
          "44: string(4) \"PASS\"",
          "",
          "[Removed Lines]",
          "40: --XFAIL--",
          "41: 67198 is open",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}