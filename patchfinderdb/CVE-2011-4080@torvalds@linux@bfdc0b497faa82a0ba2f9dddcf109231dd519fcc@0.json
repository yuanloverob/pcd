{
  "cve_id": "CVE-2011-4080",
  "cve_desc": "The sysrq_sysctl_handler function in kernel/sysctl.c in the Linux kernel before 2.6.39 does not require the CAP_SYS_ADMIN capability to modify the dmesg_restrict value, which allows local users to bypass intended access restrictions and read the kernel ring buffer by leveraging root privileges, as demonstrated by a root user in a Linux Containers (aka LXC) environment.",
  "repo": "torvalds/linux",
  "patch_hash": "bfdc0b497faa82a0ba2f9dddcf109231dd519fcc",
  "patch_info": {
    "commit_hash": "bfdc0b497faa82a0ba2f9dddcf109231dd519fcc",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bfdc0b497faa82a0ba2f9dddcf109231dd519fcc",
    "files": [
      "kernel/sysctl.c"
    ],
    "message": "sysctl: restrict write access to dmesg_restrict\n\nWhen dmesg_restrict is set to 1 CAP_SYS_ADMIN is needed to read the kernel\nring buffer.  But a root user without CAP_SYS_ADMIN is able to reset\ndmesg_restrict to 0.\n\nThis is an issue when e.g.  LXC (Linux Containers) are used and complete\nuser space is running without CAP_SYS_ADMIN.  A unprivileged and jailed\nroot user can bypass the dmesg_restrict protection.\n\nWith this patch writing to dmesg_restrict is only allowed when root has\nCAP_SYS_ADMIN.\n\nSigned-off-by: Richard Weinberger <richard@nod.at>\nAcked-by: Dan Rosenberg <drosenberg@vsecurity.com>\nAcked-by: Serge E. Hallyn <serge@hallyn.com>\nCc: Eric Paris <eparis@redhat.com>\nCc: Kees Cook <kees.cook@canonical.com>\nCc: James Morris <jmorris@namei.org>\nCc: Eugene Teo <eugeneteo@kernel.org>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "kernel/sysctl.c||kernel/sysctl.c"
    ]
  },
  "patch_diff": {
    "kernel/sysctl.c||kernel/sysctl.c": [
      "File: kernel/sysctl.c -> kernel/sysctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "170:           void __user *buffer, size_t *lenp, loff_t *ppos);",
      "171: #endif",
      "173: #ifdef CONFIG_MAGIC_SYSRQ",
      "175: static int __sysrq_enabled = SYSRQ_DEFAULT_ENABLE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: #ifdef CONFIG_PRINTK",
      "174: static int proc_dmesg_restrict(struct ctl_table *table, int write,",
      "175:     void __user *buffer, size_t *lenp, loff_t *ppos);",
      "176: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "707:   .data  = &kptr_restrict,",
      "708:   .maxlen  = sizeof(int),",
      "709:   .mode  = 0644,",
      "711:   .extra1  = &zero,",
      "712:   .extra2  = &two,",
      "713:  },",
      "",
      "[Removed Lines]",
      "710:   .proc_handler = proc_dointvec_minmax,",
      "",
      "[Added Lines]",
      "715:   .proc_handler = proc_dmesg_restrict,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2394:  return err;",
      "2395: }",
      "2397: struct do_proc_dointvec_minmax_conv_param {",
      "2398:  int *min;",
      "2399:  int *max;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2402: #ifdef CONFIG_PRINTK",
      "2403: static int proc_dmesg_restrict(struct ctl_table *table, int write,",
      "2404:     void __user *buffer, size_t *lenp, loff_t *ppos)",
      "2405: {",
      "2406:  if (write && !capable(CAP_SYS_ADMIN))",
      "2407:   return -EPERM;",
      "2409:  return proc_dointvec_minmax(table, write, buffer, lenp, ppos);",
      "2410: }",
      "2411: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "455cd5ab305c90ffc422dd2e0fb634730942b257",
      "candidate_info": {
        "commit_hash": "455cd5ab305c90ffc422dd2e0fb634730942b257",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/455cd5ab305c90ffc422dd2e0fb634730942b257",
        "files": [
          "Documentation/sysctl/kernel.txt",
          "include/linux/printk.h",
          "kernel/sysctl.c",
          "lib/vsprintf.c"
        ],
        "message": "kptr_restrict for hiding kernel pointers from unprivileged users\n\nAdd the %pK printk format specifier and the /proc/sys/kernel/kptr_restrict\nsysctl.\n\nThe %pK format specifier is designed to hide exposed kernel pointers,\nspecifically via /proc interfaces.  Exposing these pointers provides an\neasy target for kernel write vulnerabilities, since they reveal the\nlocations of writable structures containing easily triggerable function\npointers.  The behavior of %pK depends on the kptr_restrict sysctl.\n\nIf kptr_restrict is set to 0, no deviation from the standard %p behavior\noccurs.  If kptr_restrict is set to 1, the default, if the current user\n(intended to be a reader via seq_printf(), etc.) does not have CAP_SYSLOG\n(currently in the LSM tree), kernel pointers using %pK are printed as 0's.\n If kptr_restrict is set to 2, kernel pointers using %pK are printed as\n0's regardless of privileges.  Replacing with 0's was chosen over the\ndefault \"(null)\", which cannot be parsed by userland %p, which expects\n\"(nil)\".\n\n[akpm@linux-foundation.org: check for IRQ context when !kptr_restrict, save an indent level, s/WARN/WARN_ONCE/]\n[akpm@linux-foundation.org: coding-style fixup]\n[randy.dunlap@oracle.com: fix kernel/sysctl.c warning]\nSigned-off-by: Dan Rosenberg <drosenberg@vsecurity.com>\nSigned-off-by: Randy Dunlap <randy.dunlap@oracle.com>\nCc: James Morris <jmorris@namei.org>\nCc: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Thomas Graf <tgraf@infradead.org>\nCc: Eugene Teo <eugeneteo@kernel.org>\nCc: Kees Cook <kees.cook@canonical.com>\nCc: Ingo Molnar <mingo@elte.hu>\nCc: David S. Miller <davem@davemloft.net>\nCc: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: Eric Paris <eparis@parisplace.org>\n\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "include/linux/printk.h||include/linux/printk.h",
          "kernel/sysctl.c||kernel/sysctl.c",
          "lib/vsprintf.c||livsprintf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/sysctl.c||kernel/sysctl.c"
          ],
          "candidate": [
            "kernel/sysctl.c||kernel/sysctl.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/printk.h||include/linux/printk.h": [
          "File: include/linux/printk.h -> include/linux/printk.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: extern int printk_delay_msec;",
          "85: extern int dmesg_restrict;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: extern int kptr_restrict;",
          "",
          "---------------"
        ],
        "kernel/sysctl.c||kernel/sysctl.c": [
          "File: kernel/sysctl.c -> kernel/sysctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <linux/slab.h>",
          "25: #include <linux/sysctl.h>",
          "26: #include <linux/signal.h>",
          "27: #include <linux/proc_fs.h>",
          "28: #include <linux/security.h>",
          "29: #include <linux/ctype.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <linux/printk.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   .extra1  = &zero,",
          "711:   .extra2  = &one,",
          "712:  },",
          "713: #endif",
          "714:  {",
          "715:   .procname = \"ngroups_max\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:  {",
          "715:   .procname = \"kptr_restrict\",",
          "716:   .data  = &kptr_restrict,",
          "717:   .maxlen  = sizeof(int),",
          "718:   .mode  = 0644,",
          "719:   .proc_handler = proc_dointvec_minmax,",
          "720:   .extra1  = &zero,",
          "721:   .extra2  = &two,",
          "722:  },",
          "",
          "---------------"
        ],
        "lib/vsprintf.c||livsprintf.c": [
          "File: lib/vsprintf.c -> livsprintf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "936:  return string(buf, end, uuid, spec);",
          "937: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:   return buf + vsnprintf(buf, end - buf,",
          "1036:            ((struct va_format *)ptr)->fmt,",
          "1038:  }",
          "1039:  spec.flags |= SMALL;",
          "1040:  if (spec.field_width == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}