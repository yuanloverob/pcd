{
  "cve_id": "CVE-2022-33099",
  "cve_desc": "An issue in the component luaG_runerror of Lua v5.4.4 and below leads to a heap-buffer overflow when a recursive error occurs.",
  "repo": "lua/lua",
  "patch_hash": "42d40581dd919fb134c07027ca1ce0844c670daf",
  "patch_info": {
    "commit_hash": "42d40581dd919fb134c07027ca1ce0844c670daf",
    "repo": "lua/lua",
    "commit_url": "https://github.com/lua/lua/commit/42d40581dd919fb134c07027ca1ce0844c670daf",
    "files": [
      "ldebug.c",
      "lvm.c"
    ],
    "message": "Save stack space while handling errors\n\nBecause error handling (luaG_errormsg) uses slots from EXTRA_STACK,\nand some errors can recur (e.g., string overflow while creating an\nerror message in 'luaG_runerror', or a C-stack overflow before calling\nthe message handler), the code should use stack slots with parsimony.\n\nThis commit fixes the bug \"Lua-stack overflow when C stack overflows\nwhile handling an error\".",
    "before_after_code_files": [
      "ldebug.c||ldebug.c",
      "lvm.c||lvm.c"
    ]
  },
  "patch_diff": {
    "ldebug.c||ldebug.c": [
      "File: ldebug.c -> ldebug.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "824:   va_start(argp, fmt);",
      "826:   va_end(argp);",
      "828:     luaG_addinfo(L, msg, ci_func(ci)->p->source, getcurrentline(ci));",
      "829:   luaG_errormsg(L);",
      "830: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "830:     L->top--;",
      "831:   }",
      "",
      "---------------"
    ],
    "lvm.c||lvm.c": [
      "File: lvm.c -> lvm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "657:       for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {",
      "658:         size_t l = vslen(s2v(top - n - 1));",
      "660:           luaG_runerror(L, \"string length overflow\");",
      "661:         tl += l;",
      "662:       }",
      "",
      "[Removed Lines]",
      "659:         if (l_unlikely(l >= (MAX_SIZE/sizeof(char)) - tl))",
      "",
      "[Added Lines]",
      "659:         if (l_unlikely(l >= (MAX_SIZE/sizeof(char)) - tl)) {",
      "662:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "413a393e6222482f46599e138bebac162610a572",
      "candidate_info": {
        "commit_hash": "413a393e6222482f46599e138bebac162610a572",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/413a393e6222482f46599e138bebac162610a572",
        "files": [
          "lapi.c",
          "lapi.h",
          "ldebug.c",
          "ldebug.h",
          "ldo.c",
          "ldo.h",
          "lfunc.c",
          "lfunc.h",
          "lgc.c",
          "llex.c",
          "lobject.c",
          "lobject.h",
          "lparser.c",
          "lstate.c",
          "lstate.h",
          "ltests.c",
          "ltm.c",
          "lundump.c",
          "lvm.c"
        ],
        "message": "Stack indices changed to union's\n\nThat will allow to change pointers to offsets while reallocating\nthe stack.",
        "before_after_code_files": [
          "lapi.c||lapi.c",
          "lapi.h||lapi.h",
          "ldebug.c||ldebug.c",
          "ldebug.h||ldebug.h",
          "ldo.c||ldo.c",
          "ldo.h||ldo.h",
          "lfunc.c||lfunc.c",
          "lfunc.h||lfunc.h",
          "lgc.c||lgc.c",
          "llex.c||llex.c",
          "lobject.c||lobject.c",
          "lobject.h||lobject.h",
          "lparser.c||lparser.c",
          "lstate.c||lstate.c",
          "lstate.h||lstate.h",
          "ltests.c||ltests.c",
          "ltm.c||ltm.c",
          "lundump.c||lundump.c",
          "lvm.c||lvm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ldebug.c||ldebug.c",
            "lvm.c||lvm.c"
          ],
          "candidate": [
            "ldebug.c||ldebug.c",
            "lvm.c||lvm.c"
          ]
        }
      },
      "candidate_diff": {
        "lapi.c||lapi.c": [
          "File: lapi.c -> lapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: static TValue *index2value (lua_State *L, int idx) {",
          "61:   CallInfo *ci = L->ci;",
          "62:   if (idx > 0) {",
          "66:     else return s2v(o);",
          "67:   }",
          "71:   }",
          "72:   else if (idx == LUA_REGISTRYINDEX)",
          "73:     return &G(L)->l_registry;",
          "75:     idx = LUA_REGISTRYINDEX - idx;",
          "76:     api_check(L, idx <= MAXUPVAL + 1, \"upvalue index too large\");",
          "79:       return (idx <= func->nupvalues) ? &func->upvalue[idx-1]",
          "80:                                       : &G(L)->nilvalue;",
          "81:     }",
          "85:     }",
          "86:   }",
          "",
          "[Removed Lines]",
          "63:     StkId o = ci->func + idx;",
          "64:     api_check(L, idx <= L->ci->top - (ci->func + 1), \"unacceptable index\");",
          "65:     if (o >= L->top) return &G(L)->nilvalue;",
          "69:     api_check(L, idx != 0 && -idx <= L->top - (ci->func + 1), \"invalid index\");",
          "70:     return s2v(L->top + idx);",
          "78:       CClosure *func = clCvalue(s2v(ci->func));",
          "83:       api_check(L, ttislcf(s2v(ci->func)), \"caller not a C function\");",
          "",
          "[Added Lines]",
          "63:     StkId o = ci->func.p + idx;",
          "64:     api_check(L, idx <= ci->top.p - (ci->func.p + 1), \"unacceptable index\");",
          "65:     if (o >= L->top.p) return &G(L)->nilvalue;",
          "69:     api_check(L, idx != 0 && -idx <= L->top.p - (ci->func.p + 1),",
          "70:                  \"invalid index\");",
          "71:     return s2v(L->top.p + idx);",
          "79:       CClosure *func = clCvalue(s2v(ci->func.p));",
          "84:       api_check(L, ttislcf(s2v(ci->func.p)), \"caller not a C function\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: l_sinline StkId index2stack (lua_State *L, int idx) {",
          "95:   CallInfo *ci = L->ci;",
          "96:   if (idx > 0) {",
          "99:     return o;",
          "100:   }",
          "103:     api_check(L, !ispseudo(idx), \"invalid index\");",
          "105:   }",
          "106: }",
          "",
          "[Removed Lines]",
          "97:     StkId o = ci->func + idx;",
          "98:     api_check(L, o < L->top, \"invalid index\");",
          "102:     api_check(L, idx != 0 && -idx <= L->top - (ci->func + 1), \"invalid index\");",
          "104:     return L->top + idx;",
          "",
          "[Added Lines]",
          "98:     StkId o = ci->func.p + idx;",
          "99:     api_check(L, o < L->top.p, \"invalid index\");",
          "103:     api_check(L, idx != 0 && -idx <= L->top.p - (ci->func.p + 1),",
          "104:                  \"invalid index\");",
          "106:     return L->top.p + idx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:   lua_lock(L);",
          "113:   ci = L->ci;",
          "114:   api_check(L, n >= 0, \"negative 'n'\");",
          "118:     res = luaD_growstack(L, n, 0);",
          "121:   lua_unlock(L);",
          "122:   return res;",
          "123: }",
          "",
          "[Removed Lines]",
          "119:   if (res && ci->top < L->top + n)",
          "",
          "[Added Lines]",
          "121:   if (res && ci->top.p < L->top.p + n)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:   lua_lock(to);",
          "130:   api_checknelems(from, n);",
          "131:   api_check(from, G(from) == G(to), \"moving among independent states\");",
          "134:   for (i = 0; i < n; i++) {",
          "137:   }",
          "138:   lua_unlock(to);",
          "139: }",
          "",
          "[Removed Lines]",
          "132:   api_check(from, to->ci->top - to->top >= n, \"stack overflow\");",
          "133:   from->top -= n;",
          "135:     setobjs2s(to, to->top, from->top + i);",
          "",
          "[Added Lines]",
          "134:   api_check(from, to->ci->top.p - to->top.p >= n, \"stack overflow\");",
          "135:   from->top.p -= n;",
          "137:     setobjs2s(to, to->top.p, from->top.p + i);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167: LUA_API int lua_absindex (lua_State *L, int idx) {",
          "168:   return (idx > 0 || ispseudo(idx))",
          "169:          ? idx",
          "171: }",
          "174: LUA_API int lua_gettop (lua_State *L) {",
          "176: }",
          "",
          "[Removed Lines]",
          "170:          : cast_int(L->top - L->ci->func) + idx;",
          "175:   return cast_int(L->top - (L->ci->func + 1));",
          "",
          "[Added Lines]",
          "172:          : cast_int(L->top.p - L->ci->func.p) + idx;",
          "177:   return cast_int(L->top.p - (L->ci->func.p + 1));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:   lua_lock(L);",
          "184:   ci = L->ci;",
          "186:   if (idx >= 0) {",
          "189:     for (; diff > 0; diff--)",
          "191:   }",
          "192:   else {",
          "195:   }",
          "199:     lua_assert(hastocloseCfunc(ci->nresults));",
          "200:     newtop = luaF_close(L, newtop, CLOSEKTOP, 0);",
          "201:   }",
          "203:   lua_unlock(L);",
          "204: }",
          "",
          "[Removed Lines]",
          "185:   func = ci->func;",
          "187:     api_check(L, idx <= ci->top - (func + 1), \"new top too large\");",
          "188:     diff = ((func + 1) + idx) - L->top;",
          "193:     api_check(L, -(idx+1) <= (L->top - (func + 1)), \"invalid new top\");",
          "196:   api_check(L, L->tbclist < L->top, \"previous pop of an unclosed slot\");",
          "197:   newtop = L->top + diff;",
          "198:   if (diff < 0 && L->tbclist >= newtop) {",
          "",
          "[Added Lines]",
          "187:   func = ci->func.p;",
          "189:     api_check(L, idx <= ci->top.p - (func + 1), \"new top too large\");",
          "190:     diff = ((func + 1) + idx) - L->top.p;",
          "195:     api_check(L, -(idx+1) <= (L->top.p - (func + 1)), \"invalid new top\");",
          "198:   api_check(L, L->tbclist.p < L->top.p, \"previous pop of an unclosed slot\");",
          "199:   newtop = L->top.p + diff;",
          "200:   if (diff < 0 && L->tbclist.p >= newtop) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208:   StkId level;",
          "209:   lua_lock(L);",
          "210:   level = index2stack(L, idx);",
          "212:      \"no variable to close at given level\");",
          "213:   level = luaF_close(L, level, CLOSEKTOP, 0);",
          "214:   setnilvalue(s2v(level));",
          "",
          "[Removed Lines]",
          "211:   api_check(L, hastocloseCfunc(L->ci->nresults) && L->tbclist == level,",
          "",
          "[Added Lines]",
          "213:   api_check(L, hastocloseCfunc(L->ci->nresults) && L->tbclist.p == level,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "258:   api_check(L, isvalid(L, to), \"invalid index\");",
          "259:   setobj(L, to, fr);",
          "264:   lua_unlock(L);",
          "",
          "[Removed Lines]",
          "261:     luaC_barrier(L, clCvalue(s2v(L->ci->func)), fr);",
          "",
          "[Added Lines]",
          "263:     luaC_barrier(L, clCvalue(s2v(L->ci->func.p)), fr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "268: LUA_API void lua_pushvalue (lua_State *L, int idx) {",
          "269:   lua_lock(L);",
          "271:   api_incr_top(L);",
          "272:   lua_unlock(L);",
          "273: }",
          "",
          "[Removed Lines]",
          "270:   setobj2s(L, L->top, index2value(L, idx));",
          "",
          "[Added Lines]",
          "272:   setobj2s(L, L->top.p, index2value(L, idx));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "338:     api_checknelems(L, 1);",
          "340:     api_incr_top(L);",
          "341:   }",
          "345:   lua_unlock(L);",
          "346: }",
          "",
          "[Removed Lines]",
          "339:     setobjs2s(L, L->top, L->top - 1);",
          "343:   luaO_arith(L, op, s2v(L->top - 2), s2v(L->top - 1), L->top - 2);",
          "",
          "[Added Lines]",
          "341:     setobjs2s(L, L->top.p, L->top.p - 1);",
          "345:   luaO_arith(L, op, s2v(L->top.p - 2), s2v(L->top.p - 1), L->top.p - 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "369: LUA_API size_t lua_stringtonumber (lua_State *L, const char *s) {",
          "371:   if (sz != 0)",
          "372:     api_incr_top(L);",
          "373:   return sz;",
          "",
          "[Removed Lines]",
          "370:   size_t sz = luaO_str2num(s, s2v(L->top));",
          "",
          "[Added Lines]",
          "372:   size_t sz = luaO_str2num(s, s2v(L->top.p));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "495: LUA_API void lua_pushnil (lua_State *L) {",
          "496:   lua_lock(L);",
          "498:   api_incr_top(L);",
          "499:   lua_unlock(L);",
          "500: }",
          "",
          "[Removed Lines]",
          "497:   setnilvalue(s2v(L->top));",
          "",
          "[Added Lines]",
          "499:   setnilvalue(s2v(L->top.p));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "503: LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {",
          "504:   lua_lock(L);",
          "506:   api_incr_top(L);",
          "507:   lua_unlock(L);",
          "508: }",
          "",
          "[Removed Lines]",
          "505:   setfltvalue(s2v(L->top), n);",
          "",
          "[Added Lines]",
          "507:   setfltvalue(s2v(L->top.p), n);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "511: LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {",
          "512:   lua_lock(L);",
          "514:   api_incr_top(L);",
          "515:   lua_unlock(L);",
          "516: }",
          "",
          "[Removed Lines]",
          "513:   setivalue(s2v(L->top), n);",
          "",
          "[Added Lines]",
          "515:   setivalue(s2v(L->top.p), n);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "525:   TString *ts;",
          "526:   lua_lock(L);",
          "527:   ts = (len == 0) ? luaS_new(L, \"\") : luaS_newlstr(L, s, len);",
          "529:   api_incr_top(L);",
          "530:   luaC_checkGC(L);",
          "531:   lua_unlock(L);",
          "",
          "[Removed Lines]",
          "528:   setsvalue2s(L, L->top, ts);",
          "",
          "[Added Lines]",
          "530:   setsvalue2s(L, L->top.p, ts);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "536: LUA_API const char *lua_pushstring (lua_State *L, const char *s) {",
          "537:   lua_lock(L);",
          "538:   if (s == NULL)",
          "540:   else {",
          "541:     TString *ts;",
          "542:     ts = luaS_new(L, s);",
          "545:   }",
          "546:   api_incr_top(L);",
          "",
          "[Removed Lines]",
          "539:     setnilvalue(s2v(L->top));",
          "543:     setsvalue2s(L, L->top, ts);",
          "",
          "[Added Lines]",
          "541:     setnilvalue(s2v(L->top.p));",
          "545:     setsvalue2s(L, L->top.p, ts);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "577: LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {",
          "578:   lua_lock(L);",
          "579:   if (n == 0) {",
          "581:     api_incr_top(L);",
          "582:   }",
          "583:   else {",
          "",
          "[Removed Lines]",
          "580:     setfvalue(s2v(L->top), fn);",
          "",
          "[Added Lines]",
          "582:     setfvalue(s2v(L->top.p), fn);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "586:     api_check(L, n <= MAXUPVAL, \"upvalue index too large\");",
          "587:     cl = luaF_newCclosure(L, n);",
          "588:     cl->f = fn;",
          "590:     while (n--) {",
          "593:       lua_assert(iswhite(cl));",
          "594:     }",
          "596:     api_incr_top(L);",
          "597:     luaC_checkGC(L);",
          "598:   }",
          "",
          "[Removed Lines]",
          "589:     L->top -= n;",
          "591:       setobj2n(L, &cl->upvalue[n], s2v(L->top + n));",
          "595:     setclCvalue(L, s2v(L->top), cl);",
          "",
          "[Added Lines]",
          "591:     L->top.p -= n;",
          "593:       setobj2n(L, &cl->upvalue[n], s2v(L->top.p + n));",
          "597:     setclCvalue(L, s2v(L->top.p), cl);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "603: LUA_API void lua_pushboolean (lua_State *L, int b) {",
          "604:   lua_lock(L);",
          "605:   if (b)",
          "607:   else",
          "609:   api_incr_top(L);",
          "610:   lua_unlock(L);",
          "611: }",
          "",
          "[Removed Lines]",
          "606:     setbtvalue(s2v(L->top));",
          "608:     setbfvalue(s2v(L->top));",
          "",
          "[Added Lines]",
          "608:     setbtvalue(s2v(L->top.p));",
          "610:     setbfvalue(s2v(L->top.p));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "614: LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {",
          "615:   lua_lock(L);",
          "617:   api_incr_top(L);",
          "618:   lua_unlock(L);",
          "619: }",
          "",
          "[Removed Lines]",
          "616:   setpvalue(s2v(L->top), p);",
          "",
          "[Added Lines]",
          "618:   setpvalue(s2v(L->top.p), p);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "622: LUA_API int lua_pushthread (lua_State *L) {",
          "623:   lua_lock(L);",
          "625:   api_incr_top(L);",
          "626:   lua_unlock(L);",
          "627:   return (G(L)->mainthread == L);",
          "",
          "[Removed Lines]",
          "624:   setthvalue(L, s2v(L->top), L);",
          "",
          "[Added Lines]",
          "626:   setthvalue(L, s2v(L->top.p), L);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "638:   const TValue *slot;",
          "639:   TString *str = luaS_new(L, k);",
          "640:   if (luaV_fastget(L, t, str, slot, luaH_getstr)) {",
          "642:     api_incr_top(L);",
          "643:   }",
          "644:   else {",
          "646:     api_incr_top(L);",
          "648:   }",
          "649:   lua_unlock(L);",
          "651: }",
          "",
          "[Removed Lines]",
          "641:     setobj2s(L, L->top, slot);",
          "645:     setsvalue2s(L, L->top, str);",
          "647:     luaV_finishget(L, t, s2v(L->top - 1), L->top - 1, slot);",
          "650:   return ttype(s2v(L->top - 1));",
          "",
          "[Added Lines]",
          "643:     setobj2s(L, L->top.p, slot);",
          "647:     setsvalue2s(L, L->top.p, str);",
          "649:     luaV_finishget(L, t, s2v(L->top.p - 1), L->top.p - 1, slot);",
          "652:   return ttype(s2v(L->top.p - 1));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "674:   TValue *t;",
          "675:   lua_lock(L);",
          "676:   t = index2value(L, idx);",
          "679:   }",
          "680:   else",
          "682:   lua_unlock(L);",
          "684: }",
          "",
          "[Removed Lines]",
          "677:   if (luaV_fastget(L, t, s2v(L->top - 1), slot, luaH_get)) {",
          "678:     setobj2s(L, L->top - 1, slot);",
          "681:     luaV_finishget(L, t, s2v(L->top - 1), L->top - 1, slot);",
          "683:   return ttype(s2v(L->top - 1));",
          "",
          "[Added Lines]",
          "679:   if (luaV_fastget(L, t, s2v(L->top.p - 1), slot, luaH_get)) {",
          "680:     setobj2s(L, L->top.p - 1, slot);",
          "683:     luaV_finishget(L, t, s2v(L->top.p - 1), L->top.p - 1, slot);",
          "685:   return ttype(s2v(L->top.p - 1));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "696:   lua_lock(L);",
          "697:   t = index2value(L, idx);",
          "698:   if (luaV_fastgeti(L, t, n, slot)) {",
          "700:   }",
          "701:   else {",
          "702:     TValue aux;",
          "703:     setivalue(&aux, n);",
          "705:   }",
          "706:   api_incr_top(L);",
          "707:   lua_unlock(L);",
          "709: }",
          "712: l_sinline int finishrawget (lua_State *L, const TValue *val) {",
          "715:   else",
          "717:   api_incr_top(L);",
          "718:   lua_unlock(L);",
          "720: }",
          "",
          "[Removed Lines]",
          "699:     setobj2s(L, L->top, slot);",
          "704:     luaV_finishget(L, t, &aux, L->top, slot);",
          "708:   return ttype(s2v(L->top - 1));",
          "714:     setnilvalue(s2v(L->top));",
          "716:     setobj2s(L, L->top, val);",
          "719:   return ttype(s2v(L->top - 1));",
          "",
          "[Added Lines]",
          "701:     setobj2s(L, L->top.p, slot);",
          "706:     luaV_finishget(L, t, &aux, L->top.p, slot);",
          "710:   return ttype(s2v(L->top.p - 1));",
          "716:     setnilvalue(s2v(L->top.p));",
          "718:     setobj2s(L, L->top.p, val);",
          "721:   return ttype(s2v(L->top.p - 1));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "733:   lua_lock(L);",
          "734:   api_checknelems(L, 1);",
          "735:   t = gettable(L, idx);",
          "738:   return finishrawget(L, val);",
          "739: }",
          "",
          "[Removed Lines]",
          "736:   val = luaH_get(t, s2v(L->top - 1));",
          "",
          "[Added Lines]",
          "738:   val = luaH_get(t, s2v(L->top.p - 1));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "761:   Table *t;",
          "762:   lua_lock(L);",
          "763:   t = luaH_new(L);",
          "765:   api_incr_top(L);",
          "766:   if (narray > 0 || nrec > 0)",
          "767:     luaH_resize(L, t, narray, nrec);",
          "",
          "[Removed Lines]",
          "764:   sethvalue2s(L, L->top, t);",
          "",
          "[Added Lines]",
          "766:   sethvalue2s(L, L->top.p, t);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "788:       break;",
          "789:   }",
          "790:   if (mt != NULL) {",
          "792:     api_incr_top(L);",
          "793:     res = 1;",
          "794:   }",
          "",
          "[Removed Lines]",
          "791:     sethvalue2s(L, L->top, mt);",
          "",
          "[Added Lines]",
          "793:     sethvalue2s(L, L->top.p, mt);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "804:   o = index2value(L, idx);",
          "805:   api_check(L, ttisfulluserdata(o), \"full userdata expected\");",
          "806:   if (n <= 0 || n > uvalue(o)->nuvalue) {",
          "808:     t = LUA_TNONE;",
          "809:   }",
          "810:   else {",
          "813:   }",
          "814:   api_incr_top(L);",
          "815:   lua_unlock(L);",
          "",
          "[Removed Lines]",
          "807:     setnilvalue(s2v(L->top));",
          "811:     setobj2s(L, L->top, &uvalue(o)->uv[n - 1].uv);",
          "812:     t = ttype(s2v(L->top));",
          "",
          "[Added Lines]",
          "809:     setnilvalue(s2v(L->top.p));",
          "813:     setobj2s(L, L->top.p, &uvalue(o)->uv[n - 1].uv);",
          "814:     t = ttype(s2v(L->top.p));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "829:   TString *str = luaS_new(L, k);",
          "830:   api_checknelems(L, 1);",
          "831:   if (luaV_fastget(L, t, str, slot, luaH_getstr)) {",
          "834:   }",
          "835:   else {",
          "837:     api_incr_top(L);",
          "840:   }",
          "842: }",
          "",
          "[Removed Lines]",
          "832:     luaV_finishfastset(L, t, slot, s2v(L->top - 1));",
          "838:     luaV_finishset(L, t, s2v(L->top - 1), s2v(L->top - 2), slot);",
          "",
          "[Added Lines]",
          "834:     luaV_finishfastset(L, t, slot, s2v(L->top.p - 1));",
          "840:     luaV_finishset(L, t, s2v(L->top.p - 1), s2v(L->top.p - 2), slot);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "856:   lua_lock(L);",
          "857:   api_checknelems(L, 2);",
          "858:   t = index2value(L, idx);",
          "861:   }",
          "862:   else",
          "865:   lua_unlock(L);",
          "866: }",
          "",
          "[Removed Lines]",
          "859:   if (luaV_fastget(L, t, s2v(L->top - 2), slot, luaH_get)) {",
          "860:     luaV_finishfastset(L, t, slot, s2v(L->top - 1));",
          "863:     luaV_finishset(L, t, s2v(L->top - 2), s2v(L->top - 1), slot);",
          "",
          "[Added Lines]",
          "861:   if (luaV_fastget(L, t, s2v(L->top.p - 2), slot, luaH_get)) {",
          "862:     luaV_finishfastset(L, t, slot, s2v(L->top.p - 1));",
          "865:     luaV_finishset(L, t, s2v(L->top.p - 2), s2v(L->top.p - 1), slot);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "879:   api_checknelems(L, 1);",
          "880:   t = index2value(L, idx);",
          "881:   if (luaV_fastgeti(L, t, n, slot)) {",
          "883:   }",
          "884:   else {",
          "885:     TValue aux;",
          "886:     setivalue(&aux, n);",
          "888:   }",
          "890:   lua_unlock(L);",
          "891: }",
          "",
          "[Removed Lines]",
          "882:     luaV_finishfastset(L, t, slot, s2v(L->top - 1));",
          "887:     luaV_finishset(L, t, &aux, s2v(L->top - 1), slot);",
          "",
          "[Added Lines]",
          "884:     luaV_finishfastset(L, t, slot, s2v(L->top.p - 1));",
          "889:     luaV_finishset(L, t, &aux, s2v(L->top.p - 1), slot);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "896:   lua_lock(L);",
          "897:   api_checknelems(L, n);",
          "898:   t = gettable(L, idx);",
          "900:   invalidateTMcache(t);",
          "903:   lua_unlock(L);",
          "904: }",
          "907: LUA_API void lua_rawset (lua_State *L, int idx) {",
          "909: }",
          "",
          "[Removed Lines]",
          "899:   luaH_set(L, t, key, s2v(L->top - 1));",
          "901:   luaC_barrierback(L, obj2gco(t), s2v(L->top - 1));",
          "902:   L->top -= n;",
          "908:   aux_rawset(L, idx, s2v(L->top - 2), 2);",
          "",
          "[Added Lines]",
          "901:   luaH_set(L, t, key, s2v(L->top.p - 1));",
          "903:   luaC_barrierback(L, obj2gco(t), s2v(L->top.p - 1));",
          "904:   L->top.p -= n;",
          "910:   aux_rawset(L, idx, s2v(L->top.p - 2), 2);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "921:   lua_lock(L);",
          "922:   api_checknelems(L, 1);",
          "923:   t = gettable(L, idx);",
          "927:   lua_unlock(L);",
          "928: }",
          "",
          "[Removed Lines]",
          "924:   luaH_setint(L, t, n, s2v(L->top - 1));",
          "925:   luaC_barrierback(L, obj2gco(t), s2v(L->top - 1));",
          "926:   L->top--;",
          "",
          "[Added Lines]",
          "926:   luaH_setint(L, t, n, s2v(L->top.p - 1));",
          "927:   luaC_barrierback(L, obj2gco(t), s2v(L->top.p - 1));",
          "928:   L->top.p--;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "934:   lua_lock(L);",
          "935:   api_checknelems(L, 1);",
          "936:   obj = index2value(L, objindex);",
          "938:     mt = NULL;",
          "939:   else {",
          "942:   }",
          "943:   switch (ttype(obj)) {",
          "944:     case LUA_TTABLE: {",
          "",
          "[Removed Lines]",
          "937:   if (ttisnil(s2v(L->top - 1)))",
          "940:     api_check(L, ttistable(s2v(L->top - 1)), \"table expected\");",
          "941:     mt = hvalue(s2v(L->top - 1));",
          "",
          "[Added Lines]",
          "939:   if (ttisnil(s2v(L->top.p - 1)))",
          "942:     api_check(L, ttistable(s2v(L->top.p - 1)), \"table expected\");",
          "943:     mt = hvalue(s2v(L->top.p - 1));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "962:       break;",
          "963:     }",
          "964:   }",
          "966:   lua_unlock(L);",
          "967:   return 1;",
          "968: }",
          "",
          "[Removed Lines]",
          "965:   L->top--;",
          "",
          "[Added Lines]",
          "967:   L->top.p--;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "978:   if (!(cast_uint(n) - 1u < cast_uint(uvalue(o)->nuvalue)))",
          "980:   else {",
          "983:     res = 1;",
          "984:   }",
          "986:   lua_unlock(L);",
          "987:   return res;",
          "988: }",
          "",
          "[Removed Lines]",
          "981:     setobj(L, &uvalue(o)->uv[n - 1].uv, s2v(L->top - 1));",
          "982:     luaC_barrierback(L, gcvalue(o), s2v(L->top - 1));",
          "985:   L->top--;",
          "",
          "[Added Lines]",
          "983:     setobj(L, &uvalue(o)->uv[n - 1].uv, s2v(L->top.p - 1));",
          "984:     luaC_barrierback(L, gcvalue(o), s2v(L->top.p - 1));",
          "987:   L->top.p--;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "996: #define checkresults(L,na,nr) \\",
          "998:  \"results from function overflow current stack size\")",
          "",
          "[Removed Lines]",
          "997:      api_check(L, (nr) == LUA_MULTRET || (L->ci->top - L->top >= (nr) - (na)), \\",
          "",
          "[Added Lines]",
          "999:      api_check(L, (nr) == LUA_MULTRET \\",
          "1000:                || (L->ci->top.p - L->top.p >= (nr) - (na)), \\",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1007:   api_checknelems(L, nargs+1);",
          "1008:   api_check(L, L->status == LUA_OK, \"cannot do calls on non-normal thread\");",
          "1009:   checkresults(L, nargs, nresults);",
          "",
          "[Removed Lines]",
          "1010:   func = L->top - (nargs+1);",
          "",
          "[Added Lines]",
          "1013:   func = L->top.p - (nargs+1);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1090:   luaZ_init(L, &z, reader, data);",
          "1091:   status = luaD_protectedparser(L, &z, chunkname, mode);",
          "1096:       const TValue *gt = getGtable(L);",
          "1099:       luaC_barrier(L, f->upvals[0], gt);",
          "1100:     }",
          "1101:   }",
          "",
          "[Removed Lines]",
          "1098:       setobj(L, f->upvals[0]->v, gt);",
          "",
          "[Added Lines]",
          "1101:       setobj(L, f->upvals[0]->v.p, gt);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1109:   TValue *o;",
          "1110:   lua_lock(L);",
          "1111:   api_checknelems(L, 1);",
          "1113:   if (isLfunction(o))",
          "1114:     status = luaU_dump(L, getproto(o), writer, data, strip);",
          "1115:   else",
          "",
          "[Removed Lines]",
          "1112:   o = s2v(L->top - 1);",
          "",
          "[Added Lines]",
          "1115:   o = s2v(L->top.p - 1);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1235: LUA_API int lua_error (lua_State *L) {",
          "1236:   TValue *errobj;",
          "1237:   lua_lock(L);",
          "1239:   api_checknelems(L, 1);",
          "1241:   if (ttisshrstring(errobj) && eqshrstr(tsvalue(errobj), G(L)->memerrmsg))",
          "",
          "[Removed Lines]",
          "1238:   errobj = s2v(L->top - 1);",
          "",
          "[Added Lines]",
          "1241:   errobj = s2v(L->top.p - 1);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1253:   lua_lock(L);",
          "1254:   api_checknelems(L, 1);",
          "1255:   t = gettable(L, idx);",
          "1257:   if (more) {",
          "1258:     api_incr_top(L);",
          "1259:   }",
          "1262:   lua_unlock(L);",
          "1263:   return more;",
          "1264: }",
          "",
          "[Removed Lines]",
          "1256:   more = luaH_next(L, t, L->top - 1);",
          "",
          "[Added Lines]",
          "1259:   more = luaH_next(L, t, L->top.p - 1);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1270:   lua_lock(L);",
          "1271:   o = index2stack(L, idx);",
          "1272:   nresults = L->ci->nresults;",
          "",
          "[Removed Lines]",
          "1273:   api_check(L, L->tbclist < o, \"given index below or equal a marked one\");",
          "",
          "[Added Lines]",
          "1276:   api_check(L, L->tbclist.p < o, \"given index below or equal a marked one\");",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1297:   TValue *t;",
          "1298:   lua_lock(L);",
          "1299:   t = index2value(L, idx);",
          "1301:   api_incr_top(L);",
          "1302:   lua_unlock(L);",
          "1303: }",
          "",
          "[Removed Lines]",
          "1300:   luaV_objlen(L, L->top, t);",
          "",
          "[Added Lines]",
          "1303:   luaV_objlen(L, L->top.p, t);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1342:   lua_lock(L);",
          "1343:   api_check(L, 0 <= nuvalue && nuvalue < USHRT_MAX, \"invalid value\");",
          "1344:   u = luaS_newudata(L, size, nuvalue);",
          "1346:   api_incr_top(L);",
          "1347:   luaC_checkGC(L);",
          "1348:   lua_unlock(L);",
          "",
          "[Removed Lines]",
          "1345:   setuvalue(L, s2v(L->top), u);",
          "",
          "[Added Lines]",
          "1348:   setuvalue(L, s2v(L->top.p), u);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1384:   lua_lock(L);",
          "1385:   name = aux_upvalue(index2value(L, funcindex), n, &val, NULL);",
          "1386:   if (name) {",
          "1388:     api_incr_top(L);",
          "1389:   }",
          "1390:   lua_unlock(L);",
          "",
          "[Removed Lines]",
          "1387:     setobj2s(L, L->top, val);",
          "",
          "[Added Lines]",
          "1390:     setobj2s(L, L->top.p, val);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1402:   api_checknelems(L, 1);",
          "1403:   name = aux_upvalue(fi, n, &val, &owner);",
          "1404:   if (name) {",
          "1407:     luaC_barrier(L, owner, val);",
          "1408:   }",
          "1409:   lua_unlock(L);",
          "",
          "[Removed Lines]",
          "1405:     L->top--;",
          "1406:     setobj(L, val, s2v(L->top));",
          "",
          "[Added Lines]",
          "1408:     L->top.p--;",
          "1409:     setobj(L, val, s2v(L->top.p));",
          "",
          "---------------"
        ],
        "lapi.h||lapi.h": [
          "File: lapi.h -> lapi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"lstate.h\"",
          "25: #define adjustresults(L,nres) \\",
          "",
          "[Removed Lines]",
          "16: #define api_incr_top(L)   {L->top++; api_check(L, L->top <= L->ci->top, \\",
          "17:     \"stack overflow\");}",
          "26:     { if ((nres) <= LUA_MULTRET && L->ci->top < L->top) L->ci->top = L->top; }",
          "30: #define api_checknelems(L,n) api_check(L, (n) < (L->top - L->ci->func), \\",
          "31:       \"not enough elements in the stack\")",
          "",
          "[Added Lines]",
          "16: #define api_incr_top(L) {L->top.p++; \\",
          "17:     api_check(L, L->top.p <= L->ci->top.p, \\",
          "18:      \"stack overflow\");}",
          "27:     { if ((nres) <= LUA_MULTRET && L->ci->top.p < L->top.p) \\",
          "28:  L->ci->top.p = L->top.p; }",
          "32: #define api_checknelems(L,n) \\",
          "33:  api_check(L, (n) < (L->top.p - L->ci->func.p), \\",
          "34:      \"not enough elements in the stack\")",
          "",
          "---------------"
        ],
        "ldebug.c||ldebug.c": [
          "File: ldebug.c -> ldebug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: static const char *findvararg (CallInfo *ci, int n, StkId *pos) {",
          "186:     int nextra = ci->u.l.nextraargs;",
          "190:     }",
          "191:   }",
          "",
          "[Removed Lines]",
          "185:   if (clLvalue(s2v(ci->func))->p->is_vararg) {",
          "",
          "[Added Lines]",
          "185:   if (clLvalue(s2v(ci->func.p))->p->is_vararg) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196: const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {",
          "198:   const char *name = NULL;",
          "199:   if (isLua(ci)) {",
          "",
          "[Removed Lines]",
          "197:   StkId base = ci->func + 1;",
          "",
          "[Added Lines]",
          "197:   StkId base = ci->func.p + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:       name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));",
          "204:   }",
          "209:       name = isLua(ci) ? \"(temporary)\" : \"(C temporary)\";",
          "",
          "[Removed Lines]",
          "206:     StkId limit = (ci == L->ci) ? L->top : ci->next->func;",
          "",
          "[Added Lines]",
          "206:     StkId limit = (ci == L->ci) ? L->top.p : ci->next->func.p;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:   const char *name;",
          "222:   lua_lock(L);",
          "225:       name = NULL;",
          "228:   }",
          "231:     name = luaG_findlocal(L, ar->i_ci, n, &pos);",
          "232:     if (name) {",
          "234:       api_incr_top(L);",
          "235:     }",
          "236:   }",
          "",
          "[Removed Lines]",
          "227:       name = luaF_getlocalname(clLvalue(s2v(L->top - 1))->p, n, 0);",
          "233:       setobjs2s(L, L->top, pos);",
          "",
          "[Added Lines]",
          "227:       name = luaF_getlocalname(clLvalue(s2v(L->top.p - 1))->p, n, 0);",
          "233:       setobjs2s(L, L->top.p, pos);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:   lua_lock(L);",
          "246:   name = luaG_findlocal(L, ar->i_ci, n, &pos);",
          "247:   if (name) {",
          "250:   }",
          "251:   lua_unlock(L);",
          "252:   return name;",
          "",
          "[Removed Lines]",
          "248:     setobjs2s(L, pos, L->top - 1);",
          "",
          "[Added Lines]",
          "248:     setobjs2s(L, pos, L->top.p - 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290: static void collectvalidlines (lua_State *L, Closure *f) {",
          "291:   if (noLuaClosure(f)) {",
          "293:     api_incr_top(L);",
          "294:   }",
          "295:   else {",
          "",
          "[Removed Lines]",
          "292:     setnilvalue(s2v(L->top));",
          "",
          "[Added Lines]",
          "292:     setnilvalue(s2v(L->top.p));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "388:   lua_lock(L);",
          "389:   if (*what == '>') {",
          "390:     ci = NULL;",
          "392:     api_check(L, ttisfunction(func), \"function expected\");",
          "395:   }",
          "396:   else {",
          "397:     ci = ar->i_ci;",
          "399:     lua_assert(ttisfunction(func));",
          "400:   }",
          "401:   cl = ttisclosure(func) ? clvalue(func) : NULL;",
          "402:   status = auxgetinfo(L, what, ar, cl, ci);",
          "403:   if (strchr(what, 'f')) {",
          "405:     api_incr_top(L);",
          "406:   }",
          "407:   if (strchr(what, 'L'))",
          "",
          "[Removed Lines]",
          "391:     func = s2v(L->top - 1);",
          "398:     func = s2v(ci->func);",
          "404:     setobj2s(L, L->top, func);",
          "",
          "[Added Lines]",
          "391:     func = s2v(L->top.p - 1);",
          "398:     func = s2v(ci->func.p);",
          "404:     setobj2s(L, L->top.p, func);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "664: static int isinstack (CallInfo *ci, const TValue *o) {",
          "665:   StkId pos;",
          "667:     if (o == s2v(pos))",
          "668:       return 1;",
          "669:   }",
          "",
          "[Removed Lines]",
          "666:   for (pos = ci->func + 1; pos < ci->top; pos++) {",
          "",
          "[Added Lines]",
          "666:   for (pos = ci->func.p + 1; pos < ci->top.p; pos++) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "681:   LClosure *c = ci_func(ci);",
          "682:   int i;",
          "683:   for (i = 0; i < c->nupvalues; i++) {",
          "686:       return \"upvalue\";",
          "687:     }",
          "",
          "[Removed Lines]",
          "684:     if (c->upvals[i]->v == o) {",
          "",
          "[Added Lines]",
          "684:     if (c->upvals[i]->v.p == o) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "712:       kind = getobjname(ci_func(ci)->p, currentpc(ci),",
          "714:   }",
          "715:   return formatvarinfo(L, kind, name);",
          "716: }",
          "",
          "[Removed Lines]",
          "713:                         cast_int(cast(StkId, o) - (ci->func + 1)), &name);",
          "",
          "[Added Lines]",
          "713:                         cast_int(cast(StkId, o) - (ci->func.p + 1)), &name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "826:   va_end(argp);",
          "828:     luaG_addinfo(L, msg, ci_func(ci)->p->source, getcurrentline(ci));",
          "831:   }",
          "832:   luaG_errormsg(L);",
          "833: }",
          "",
          "[Removed Lines]",
          "830:     L->top--;",
          "",
          "[Added Lines]",
          "830:     L->top.p--;",
          "",
          "---------------"
        ],
        "ldebug.h||ldebug.h": [
          "File: ldebug.h -> ldebug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define resethookcount(L) (L->hookcount = L->basehookcount)",
          "",
          "[Removed Lines]",
          "18: #define ci_func(ci)  (clLvalue(s2v((ci)->func)))",
          "",
          "[Added Lines]",
          "18: #define ci_func(ci)  (clLvalue(s2v((ci)->func.p)))",
          "",
          "---------------"
        ],
        "ldo.c||ldo.c": [
          "File: ldo.c -> ldo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     }",
          "105:     default: {",
          "108:       break;",
          "109:     }",
          "110:   }",
          "112: }",
          "",
          "[Removed Lines]",
          "111:   L->top = oldtop + 1;",
          "",
          "[Added Lines]",
          "111:   L->top.p = oldtop + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160: static void correctstack (lua_State *L, StkId oldstack, StkId newstack) {",
          "161:   CallInfo *ci;",
          "162:   UpVal *up;",
          "165:   for (up = L->openupval; up != NULL; up = up->u.open.next)",
          "167:   for (ci = L->ci; ci != NULL; ci = ci->previous) {",
          "170:     if (isLua(ci))",
          "172:   }",
          "",
          "[Removed Lines]",
          "163:   L->top = (L->top - oldstack) + newstack;",
          "164:   L->tbclist = (L->tbclist - oldstack) + newstack;",
          "166:     up->v = s2v((uplevel(up) - oldstack) + newstack);",
          "168:     ci->top = (ci->top - oldstack) + newstack;",
          "169:     ci->func = (ci->func - oldstack) + newstack;",
          "",
          "[Added Lines]",
          "163:   L->top.p = (L->top.p - oldstack) + newstack;",
          "164:   L->tbclist.p = (L->tbclist.p - oldstack) + newstack;",
          "166:     up->v.p = s2v((uplevel(up) - oldstack) + newstack);",
          "168:     ci->top.p = (ci->top.p - oldstack) + newstack;",
          "169:     ci->func.p = (ci->func.p - oldstack) + newstack;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   }",
          "203:   i = ((oldsize <= newsize) ? oldsize : newsize) + EXTRA_STACK;",
          "205:   for (; i < newsize + EXTRA_STACK; i++)",
          "211:   return 1;",
          "212: }",
          "",
          "[Removed Lines]",
          "204:   memcpy(newstack, L->stack, i * sizeof(StackValue));",
          "207:   correctstack(L, L->stack, newstack);",
          "208:   luaM_freearray(L, L->stack, oldsize + EXTRA_STACK);",
          "209:   L->stack = newstack;",
          "210:   L->stack_last = L->stack + newsize;",
          "",
          "[Added Lines]",
          "203:   memcpy(newstack, L->stack.p, i * sizeof(StackValue));",
          "206:   correctstack(L, L->stack.p, newstack);",
          "207:   luaM_freearray(L, L->stack.p, oldsize + EXTRA_STACK);",
          "208:   L->stack.p = newstack;",
          "209:   L->stack_last.p = L->stack.p + newsize;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229:   }",
          "234:       newsize = LUAI_MAXSTACK;",
          "",
          "[Removed Lines]",
          "232:     int needed = cast_int(L->top - L->stack) + n;",
          "",
          "[Added Lines]",
          "231:     int needed = cast_int(L->top.p - L->stack.p) + n;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253: static int stackinuse (lua_State *L) {",
          "254:   CallInfo *ci;",
          "255:   int res;",
          "257:   for (ci = L->ci; ci != NULL; ci = ci->previous) {",
          "259:   }",
          "262:   if (res < LUA_MINSTACK)",
          "264:   return res;",
          "",
          "[Removed Lines]",
          "256:   StkId lim = L->top;",
          "258:     if (lim < ci->top) lim = ci->top;",
          "260:   lua_assert(lim <= L->stack_last + EXTRA_STACK);",
          "",
          "[Added Lines]",
          "255:   StkId lim = L->top.p;",
          "257:     if (lim < ci->top.p) lim = ci->top.p;",
          "259:   lua_assert(lim <= L->stack_last.p + EXTRA_STACK);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296: void luaD_inctop (lua_State *L) {",
          "297:   luaD_checkstack(L, 1);",
          "299: }",
          "",
          "[Removed Lines]",
          "298:   L->top++;",
          "",
          "[Added Lines]",
          "297:   L->top.p++;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "323:       ci->u2.transferinfo.ftransfer = ftransfer;",
          "324:       ci->u2.transferinfo.ntransfer = ntransfer;",
          "325:     }",
          "332:     ci->callstatus |= mask;",
          "333:     lua_unlock(L);",
          "",
          "[Removed Lines]",
          "326:     if (isLua(ci) && L->top < ci->top)",
          "329:     if (ci->top < L->top + LUA_MINSTACK)",
          "330:       ci->top = L->top + LUA_MINSTACK;",
          "",
          "[Added Lines]",
          "325:     if (isLua(ci) && L->top.p < ci->top.p)",
          "328:     if (ci->top.p < L->top.p + LUA_MINSTACK)",
          "329:       ci->top.p = L->top.p + LUA_MINSTACK;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "335:     lua_lock(L);",
          "336:     lua_assert(!L->allowhook);",
          "337:     L->allowhook = 1;",
          "340:     ci->callstatus &= ~mask;",
          "341:   }",
          "342: }",
          "",
          "[Removed Lines]",
          "338:     ci->top = restorestack(L, ci_top);",
          "339:     L->top = restorestack(L, top);",
          "",
          "[Added Lines]",
          "337:     ci->top.p = restorestack(L, ci_top);",
          "338:     L->top.p = restorestack(L, top);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "375:       if (p->is_vararg)",
          "376:         delta = ci->u.l.nextraargs + p->numparams + 1;",
          "377:     }",
          "382:   }",
          "383:   if (isLua(ci = ci->previous))",
          "",
          "[Removed Lines]",
          "379:     ftransfer = cast(unsigned short, firstres - ci->func);",
          "381:     ci->func -= delta;",
          "",
          "[Added Lines]",
          "378:     ftransfer = cast(unsigned short, firstres - ci->func.p);",
          "380:     ci->func.p -= delta;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "416:   int i;",
          "420:       return;",
          "427:       return;",
          "428:     case LUA_MULTRET:",
          "",
          "[Removed Lines]",
          "419:       L->top = res;",
          "426:       L->top = res + 1;",
          "",
          "[Added Lines]",
          "418:       L->top.p = res;",
          "425:       L->top.p = res + 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "468:   if (l_unlikely(L->hookmask && !hastocloseCfunc(wanted)))",
          "469:     rethook(L, ci, nres);",
          "473:   lua_assert(!(ci->callstatus &",
          "474:         (CIST_HOOKED | CIST_YPCALL | CIST_FIN | CIST_TRAN | CIST_CLSRET)));",
          "",
          "[Removed Lines]",
          "471:   moveresults(L, ci->func, nres, wanted);",
          "",
          "[Added Lines]",
          "470:   moveresults(L, ci->func.p, nres, wanted);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "483: l_sinline CallInfo *prepCallInfo (lua_State *L, StkId func, int nret,",
          "484:                                                 int mask, StkId top) {",
          "487:   ci->nresults = nret;",
          "488:   ci->callstatus = mask;",
          "490:   return ci;",
          "491: }",
          "",
          "[Removed Lines]",
          "486:   ci->func = func;",
          "489:   ci->top = top;",
          "",
          "[Added Lines]",
          "485:   ci->func.p = func;",
          "488:   ci->top.p = top;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "500:   CallInfo *ci;",
          "502:   L->ci = ci = prepCallInfo(L, func, nresults, CIST_C,",
          "505:   if (l_unlikely(L->hookmask & LUA_MASKCALL)) {",
          "507:     luaD_hook(L, LUA_HOOKCALL, -1, 1, narg);",
          "508:   }",
          "509:   lua_unlock(L);",
          "",
          "[Removed Lines]",
          "503:                                L->top + LUA_MINSTACK);",
          "504:   lua_assert(ci->top <= L->stack_last);",
          "506:     int narg = cast_int(L->top - func) - 1;",
          "",
          "[Added Lines]",
          "502:                                L->top.p + LUA_MINSTACK);",
          "503:   lua_assert(ci->top.p <= L->stack_last.p);",
          "505:     int narg = cast_int(L->top.p - func) - 1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "535:       int nfixparams = p->numparams;",
          "536:       int i;",
          "537:       checkstackGCp(L, fsize - delta, func);",
          "542:       for (; narg1 <= nfixparams; narg1++)",
          "547:       ci->callstatus |= CIST_TAIL;",
          "549:       return -1;",
          "550:     }",
          "",
          "[Removed Lines]",
          "540:         setobjs2s(L, ci->func + i, func + i);",
          "545:       lua_assert(ci->top <= L->stack_last);",
          "",
          "[Added Lines]",
          "539:         setobjs2s(L, ci->func.p + i, func + i);",
          "544:       lua_assert(ci->top.p <= L->stack_last.p);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "579:       CallInfo *ci;",
          "580:       Proto *p = clLvalue(s2v(func))->p;",
          "582:       int nfixparams = p->numparams;",
          "584:       checkstackGCp(L, fsize, func);",
          "585:       L->ci = ci = prepCallInfo(L, func, nresults, 0, func + 1 + fsize);",
          "587:       for (; narg < nfixparams; narg++)",
          "590:       return ci;",
          "591:     }",
          "",
          "[Removed Lines]",
          "589:       lua_assert(ci->top <= L->stack_last);",
          "",
          "[Added Lines]",
          "588:       lua_assert(ci->top.p <= L->stack_last.p);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "839:   }",
          "842:   lua_unlock(L);",
          "843:   return status;",
          "844: }",
          "",
          "[Removed Lines]",
          "838:     L->ci->top = L->top;",
          "841:                                     : cast_int(L->top - (L->ci->func + 1));",
          "",
          "[Added Lines]",
          "837:     L->ci->top.p = L->top.p;",
          "840:                                     : cast_int(L->top.p - (L->ci->func.p + 1));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "993:   p.dyd.gt.arr = NULL; p.dyd.gt.size = 0;",
          "994:   p.dyd.label.arr = NULL; p.dyd.label.size = 0;",
          "995:   luaZ_initbuffer(L, &p.buff);",
          "997:   luaZ_freebuffer(L, &p.buff);",
          "998:   luaM_freearray(L, p.dyd.actvar.arr, p.dyd.actvar.size);",
          "999:   luaM_freearray(L, p.dyd.gt.arr, p.dyd.gt.size);",
          "",
          "[Removed Lines]",
          "996:   status = luaD_pcall(L, f_parser, &p, savestack(L, L->top), L->errfunc);",
          "",
          "[Added Lines]",
          "995:   status = luaD_pcall(L, f_parser, &p, savestack(L, L->top.p), L->errfunc);",
          "",
          "---------------"
        ],
        "ldo.h||ldo.h": [
          "File: ldo.h -> ldo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #define ldo_h",
          "11: #include \"lobject.h\"",
          "12: #include \"lstate.h\"",
          "13: #include \"lzio.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include \"llimits.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: #define luaD_checkstackaux(L,n,pre,pos)  \\",
          "27:    { pre; luaD_growstack(L, n, 1); pos; } \\",
          "28:         else { condmovestack(L,pre,pos); }",
          "",
          "[Removed Lines]",
          "26:  if (l_unlikely(L->stack_last - L->top <= (n))) \\",
          "",
          "[Added Lines]",
          "27:  if (l_unlikely(L->stack_last.p - L->top.p <= (n))) \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "35: #define savestack(L,p)  ((char *)(p) - (char *)L->stack)",
          "36: #define restorestack(L,n) ((StkId)((char *)L->stack + (n)))",
          "",
          "[Added Lines]",
          "36: #define savestack(L,pt)  (cast_charp(pt) - cast_charp(L->stack.p))",
          "37: #define restorestack(L,n) cast(StkId, cast_charp(L->stack.p) + (n))",
          "",
          "---------------"
        ],
        "lfunc.c||lfunc.c": [
          "File: lfunc.c -> lfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   for (i = 0; i < cl->nupvalues; i++) {",
          "51:     GCObject *o = luaC_newobj(L, LUA_VUPVAL, sizeof(UpVal));",
          "52:     UpVal *uv = gco2upv(o);",
          "55:     cl->upvals[i] = uv;",
          "56:     luaC_objbarrier(L, cl, uv);",
          "57:   }",
          "",
          "[Removed Lines]",
          "54:     setnilvalue(uv->v);",
          "",
          "[Added Lines]",
          "54:     setnilvalue(uv->v.p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: static void callclosemethod (lua_State *L, TValue *obj, TValue *err, int yy) {",
          "110:   const TValue *tm = luaT_gettmbyobj(L, obj, TM_CLOSE);",
          "115:   if (yy)",
          "116:     luaD_call(L, top, 0);",
          "117:   else",
          "",
          "[Removed Lines]",
          "109:   StkId top = L->top;",
          "",
          "[Added Lines]",
          "109:   StkId top = L->top.p;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162: #define MAXDELTA  \\",
          "169: void luaF_newtbcupval (lua_State *L, StkId level) {",
          "171:   if (l_isfalse(s2v(level)))",
          "177:   }",
          "180: }",
          "",
          "[Removed Lines]",
          "163:  ((256ul << ((sizeof(L->stack->tbclist.delta) - 1) * 8)) - 1)",
          "170:   lua_assert(level > L->tbclist);",
          "174:   while (cast_uint(level - L->tbclist) > MAXDELTA) {",
          "176:     L->tbclist->tbclist.delta = 0;",
          "178:   level->tbclist.delta = cast(unsigned short, level - L->tbclist);",
          "179:   L->tbclist = level;",
          "",
          "[Added Lines]",
          "163:  ((256ul << ((sizeof(L->stack.p->tbclist.delta) - 1) * 8)) - 1)",
          "170:   lua_assert(level > L->tbclist.p);",
          "174:   while (cast_uint(level - L->tbclist.p) > MAXDELTA) {",
          "176:     L->tbclist.p->tbclist.delta = 0;",
          "178:   level->tbclist.delta = cast(unsigned short, level - L->tbclist.p);",
          "179:   L->tbclist.p = level;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:   while ((uv = L->openupval) != NULL && (upl = uplevel(uv)) >= level) {",
          "205:       luaC_barrier(L, uv, slot);",
          "",
          "[Removed Lines]",
          "199:     lua_assert(uplevel(uv) < L->top);",
          "",
          "[Added Lines]",
          "199:     lua_assert(uplevel(uv) < L->top.p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214: static void poptbclist (lua_State *L) {",
          "217:   tbc -= tbc->tbclist.delta;",
          "221: }",
          "",
          "[Removed Lines]",
          "215:   StkId tbc = L->tbclist;",
          "218:   while (tbc > L->stack && tbc->tbclist.delta == 0)",
          "220:   L->tbclist = tbc;",
          "",
          "[Added Lines]",
          "215:   StkId tbc = L->tbclist.p;",
          "218:   while (tbc > L->stack.p && tbc->tbclist.delta == 0)",
          "220:   L->tbclist.p = tbc;",
          "",
          "---------------"
        ],
        "lfunc.h||lfunc.h": [
          "File: lfunc.h -> lfunc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define MAXUPVAL 255",
          "",
          "[Removed Lines]",
          "32: #define upisopen(up) ((up)->v != &(up)->u.value)",
          "35: #define uplevel(up) check_exp(upisopen(up), cast(StkId, (up)->v))",
          "",
          "[Added Lines]",
          "32: #define upisopen(up) ((up)->v.p != &(up)->u.value)",
          "35: #define uplevel(up) check_exp(upisopen(up), cast(StkId, (up)->v.p))",
          "",
          "---------------"
        ],
        "lgc.c||lgc.c": [
          "File: lgc.c -> lgc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621: static int traversethread (global_State *g, lua_State *th) {",
          "622:   UpVal *uv;",
          "624:   if (isold(th) || g->gcstate == GCSpropagate)",
          "626:   if (o == NULL)",
          "628:   lua_assert(g->gcstate == GCSatomic ||",
          "629:              th->openupval == NULL || isintwups(th));",
          "631:     markvalue(g, s2v(o));",
          "632:   for (uv = th->openupval; uv != NULL; uv = uv->u.open.next)",
          "638:     if (!isintwups(th) && th->openupval != NULL) {",
          "",
          "[Removed Lines]",
          "623:   StkId o = th->stack;",
          "635:     for (; o < th->stack_last + EXTRA_STACK; o++)",
          "",
          "[Added Lines]",
          "623:   StkId o = th->stack.p;",
          "635:     for (; o < th->stack_last.p + EXTRA_STACK; o++)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893: static void dothecall (lua_State *L, void *ud) {",
          "894:   UNUSED(ud);",
          "896: }",
          "",
          "[Removed Lines]",
          "895:   luaD_callnoyield(L, L->top - 2, 0);",
          "",
          "[Added Lines]",
          "895:   luaD_callnoyield(L, L->top.p - 2, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "909:     int oldgcstp  = g->gcstp;",
          "920:       luaE_warnerror(L, \"__gc\");",
          "922:     }",
          "923:   }",
          "924: }",
          "",
          "[Removed Lines]",
          "915:     status = luaD_pcall(L, dothecall, NULL, savestack(L, L->top - 2), 0);",
          "",
          "[Added Lines]",
          "915:     status = luaD_pcall(L, dothecall, NULL, savestack(L, L->top.p - 2), 0);",
          "",
          "---------------"
        ],
        "llex.c||llex.c": [
          "File: llex.c -> llex.c"
        ],
        "lobject.c||lobject.c": [
          "File: lobject.c -> lobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414: static void pushstr (BuffFS *buff, const char *str, size_t lstr) {",
          "415:   lua_State *L = buff->L;",
          "",
          "[Removed Lines]",
          "416:   setsvalue2s(L, L->top, luaS_newlstr(L, str, lstr));",
          "",
          "[Added Lines]",
          "416:   setsvalue2s(L, L->top.p, luaS_newlstr(L, str, lstr));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:   lua_assert(buff.pushed == 1);",
          "546: }",
          "",
          "[Removed Lines]",
          "545:   return svalue(s2v(L->top - 1));",
          "",
          "[Added Lines]",
          "545:   return svalue(s2v(L->top.p - 1));",
          "",
          "---------------"
        ],
        "lobject.h||lobject.h": [
          "File: lobject.h -> lobject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: typedef StackValue *StkId;",
          "161: #define s2v(o) (&(o)->val)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: typedef union {",
          "163: } StkIdRel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618: typedef struct UpVal {",
          "619:   CommonHeader;",
          "622:   union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:   union {",
          "629:   } v;",
          "",
          "---------------"
        ],
        "lparser.c||lparser.c": [
          "File: lparser.c -> lparser.c"
        ],
        "lstate.c||lstate.c": [
          "File: lstate.c -> lstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: static void stack_init (lua_State *L1, lua_State *L) {",
          "181:   int i; CallInfo *ci;",
          "185:   for (i = 0; i < BASIC_STACK_SIZE + EXTRA_STACK; i++)",
          "190:   ci = &L1->base_ci;",
          "191:   ci->next = ci->previous = NULL;",
          "192:   ci->callstatus = CIST_C;",
          "194:   ci->u.c.k = NULL;",
          "195:   ci->nresults = 0;",
          "199:   L1->ci = ci;",
          "200: }",
          "203: static void freestack (lua_State *L) {",
          "207:   luaE_freeCI(L);",
          "208:   lua_assert(L->nci == 0);",
          "210: }",
          "",
          "[Removed Lines]",
          "183:   L1->stack = luaM_newvector(L, BASIC_STACK_SIZE + EXTRA_STACK, StackValue);",
          "184:   L1->tbclist = L1->stack;",
          "187:   L1->top = L1->stack;",
          "188:   L1->stack_last = L1->stack + BASIC_STACK_SIZE;",
          "193:   ci->func = L1->top;",
          "197:   L1->top++;",
          "198:   ci->top = L1->top + LUA_MINSTACK;",
          "204:   if (L->stack == NULL)",
          "",
          "[Added Lines]",
          "183:   L1->stack.p = luaM_newvector(L, BASIC_STACK_SIZE + EXTRA_STACK, StackValue);",
          "184:   L1->tbclist.p = L1->stack.p;",
          "187:   L1->top.p = L1->stack.p;",
          "188:   L1->stack_last.p = L1->stack.p + BASIC_STACK_SIZE;",
          "193:   ci->func.p = L1->top.p;",
          "197:   L1->top.p++;",
          "198:   ci->top.p = L1->top.p + LUA_MINSTACK;",
          "204:   if (L->stack.p == NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249: static void preinit_thread (lua_State *L, global_State *g) {",
          "250:   G(L) = g;",
          "252:   L->ci = NULL;",
          "253:   L->nci = 0;",
          "",
          "[Removed Lines]",
          "251:   L->stack = NULL;",
          "",
          "[Added Lines]",
          "251:   L->stack.p = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:   L1->next = g->allgc;",
          "298:   g->allgc = obj2gco(L1);",
          "301:   api_incr_top(L);",
          "302:   preinit_thread(L1, g);",
          "303:   L1->hookmask = L->hookmask;",
          "",
          "[Removed Lines]",
          "300:   setthvalue2s(L, L->top, L1);",
          "",
          "[Added Lines]",
          "300:   setthvalue2s(L, L->top.p, L1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327: int luaE_resetthread (lua_State *L, int status) {",
          "331:   ci->callstatus = CIST_C;",
          "332:   if (status == LUA_YIELD)",
          "333:     status = LUA_OK;",
          "335:   status = luaD_closeprotected(L, 1, status);",
          "338:   else",
          "342:   return status;",
          "343: }",
          "",
          "[Removed Lines]",
          "330:   ci->func = L->stack;",
          "337:     luaD_seterrorobj(L, status, L->stack + 1);",
          "339:     L->top = L->stack + 1;",
          "340:   ci->top = L->top + LUA_MINSTACK;",
          "341:   luaD_reallocstack(L, cast_int(ci->top - L->stack), 0);",
          "",
          "[Added Lines]",
          "330:   ci->func.p = L->stack.p;",
          "337:     luaD_seterrorobj(L, status, L->stack.p + 1);",
          "339:     L->top.p = L->stack.p + 1;",
          "340:   ci->top.p = L->top.p + LUA_MINSTACK;",
          "341:   luaD_reallocstack(L, cast_int(ci->top.p - L->stack.p), 0);",
          "",
          "---------------"
        ],
        "lstate.h||lstate.h": [
          "File: lstate.h -> lstate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: #define BASIC_STACK_SIZE        (2*LUA_MINSTACK)",
          "",
          "[Removed Lines]",
          "142: #define stacksize(th) cast_int((th)->stack_last - (th)->stack)",
          "",
          "[Added Lines]",
          "142: #define stacksize(th) cast_int((th)->stack_last.p - (th)->stack.p)",
          "",
          "---------------"
        ],
        "ltests.c||ltests.c": [
          "File: ltests.c -> ltests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: void *l_Trick = 0;",
          "50: static int runC (lua_State *L, lua_State *L1, const char *pc);",
          "",
          "[Removed Lines]",
          "47: #define obj_at(L,k) s2v(L->ci->func + (k))",
          "",
          "[Added Lines]",
          "47: #define obj_at(L,k) s2v(L->ci->func.p + (k))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: static void pushobject (lua_State *L, const TValue *o) {",
          "61:   api_incr_top(L);",
          "62: }",
          "",
          "[Removed Lines]",
          "60:   setobj2s(L, L->top, o);",
          "",
          "[Added Lines]",
          "60:   setobj2s(L, L->top.p, o);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "419:     if (uv) {",
          "420:       checkobjrefN(g, clgc, uv);",
          "421:       if (!upisopen(uv))",
          "423:     }",
          "424:   }",
          "425: }",
          "",
          "[Removed Lines]",
          "422:         checkvalref(g, obj2gco(uv), uv->v);",
          "",
          "[Added Lines]",
          "422:         checkvalref(g, obj2gco(uv), uv->v.p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "428: static int lua_checkpc (CallInfo *ci) {",
          "429:   if (!isLua(ci)) return 1;",
          "430:   else {",
          "432:     Proto *p = clLvalue(s2v(f))->p;",
          "433:     return p->code <= ci->u.l.savedpc &&",
          "434:            ci->u.l.savedpc <= p->code + p->sizecode;",
          "",
          "[Removed Lines]",
          "431:     StkId f = ci->func;",
          "",
          "[Added Lines]",
          "431:     StkId f = ci->func.p;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "441:   CallInfo *ci;",
          "442:   UpVal *uv;",
          "443:   assert(!isdead(g, L1));",
          "445:     assert(L1->openupval == NULL && L1->ci == NULL);",
          "446:     return;",
          "447:   }",
          "448:   for (uv = L1->openupval; uv != NULL; uv = uv->u.open.next)",
          "452:   for (ci = L1->ci; ci != NULL; ci = ci->previous) {",
          "454:     assert(lua_checkpc(ci));",
          "455:   }",
          "458: }",
          "",
          "[Removed Lines]",
          "450:   assert(L1->top <= L1->stack_last);",
          "451:   assert(L1->tbclist <= L1->top);",
          "453:     assert(ci->top <= L1->stack_last);",
          "456:   for (o = L1->stack; o < L1->stack_last; o++)",
          "",
          "[Added Lines]",
          "450:   assert(L1->top.p <= L1->stack_last.p);",
          "451:   assert(L1->tbclist.p <= L1->top.p);",
          "453:     assert(ci->top.p <= L1->stack_last.p);",
          "456:   for (o = L1->stack.p; o < L1->stack_last.p; o++)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "465:       break;",
          "466:     }",
          "467:     case LUA_VUPVAL: {",
          "469:       break;",
          "470:     }",
          "471:     case LUA_VTABLE: {",
          "",
          "[Removed Lines]",
          "468:       checkvalref(g, o, gco2upv(o)->v);",
          "",
          "[Added Lines]",
          "468:       checkvalref(g, o, gco2upv(o)->v.p);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "981: static int stacklevel (lua_State *L) {",
          "982:   unsigned long a = 0;",
          "984:   lua_pushinteger(L, stacksize(L));",
          "985:   lua_pushinteger(L, L->nCcalls);",
          "986:   lua_pushinteger(L, L->nci);",
          "",
          "[Removed Lines]",
          "983:   lua_pushinteger(L, (L->top - L->stack));",
          "",
          "[Added Lines]",
          "983:   lua_pushinteger(L, (L->top.p - L->stack.p));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1040:     TString *ts;",
          "1041:     int n = 0;",
          "1042:     for (ts = tb->hash[s]; ts != NULL; ts = ts->u.hnext) {",
          "1044:       api_incr_top(L);",
          "1045:       n++;",
          "1046:     }",
          "",
          "[Removed Lines]",
          "1043:       setsvalue2s(L, L->top, ts);",
          "",
          "[Added Lines]",
          "1043:       setsvalue2s(L, L->top.p, ts);",
          "",
          "---------------"
        ],
        "ltm.c||ltm.c": [
          "File: ltm.c -> ltm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,",
          "104:                   const TValue *p2, const TValue *p3) {",
          "112:   if (isLuacode(L->ci))",
          "113:     luaD_call(L, func, 0);",
          "",
          "[Removed Lines]",
          "105:   StkId func = L->top;",
          "110:   L->top = func + 4;",
          "",
          "[Added Lines]",
          "105:   StkId func = L->top.p;",
          "110:   L->top.p = func + 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119: void luaT_callTMres (lua_State *L, const TValue *f, const TValue *p1,",
          "120:                      const TValue *p2, StkId res) {",
          "121:   ptrdiff_t result = savestack(L, res);",
          "128:   if (isLuacode(L->ci))",
          "129:     luaD_call(L, func, 1);",
          "130:   else",
          "131:     luaD_callnoyield(L, func, 1);",
          "132:   res = restorestack(L, result);",
          "134: }",
          "",
          "[Removed Lines]",
          "122:   StkId func = L->top;",
          "126:   L->top += 3;",
          "",
          "[Added Lines]",
          "122:   StkId func = L->top.p;",
          "126:   L->top.p += 3;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167: void luaT_tryconcatTM (lua_State *L) {",
          "169:   if (l_unlikely(!callbinTM(L, s2v(top - 2), s2v(top - 1), top - 2,",
          "170:                                TM_CONCAT)))",
          "171:     luaG_concaterror(L, s2v(top - 2), s2v(top - 1));",
          "",
          "[Removed Lines]",
          "168:   StkId top = L->top;",
          "",
          "[Added Lines]",
          "168:   StkId top = L->top.p;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201: int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,",
          "202:                       TMS event) {",
          "205: #if defined(LUA_COMPAT_LT_LE)",
          "206:   else if (event == TM_LE) {",
          "212:       }",
          "214:   }",
          "",
          "[Removed Lines]",
          "204:     return !l_isfalse(s2v(L->top));",
          "209:       if (callbinTM(L, p2, p1, L->top, TM_LT)) {",
          "211:         return l_isfalse(s2v(L->top));",
          "",
          "[Added Lines]",
          "204:     return !l_isfalse(s2v(L->top.p));",
          "209:       if (callbinTM(L, p2, p1, L->top.p, TM_LT)) {",
          "211:         return l_isfalse(s2v(L->top.p));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238: void luaT_adjustvarargs (lua_State *L, int nfixparams, CallInfo *ci,",
          "239:                          const Proto *p) {",
          "240:   int i;",
          "243:   ci->u.l.nextraargs = nextra;",
          "244:   luaD_checkstack(L, p->maxstacksize + 1);",
          "248:   for (i = 1; i <= nfixparams; i++) {",
          "251:   }",
          "255: }",
          "",
          "[Removed Lines]",
          "246:   setobjs2s(L, L->top++, ci->func);",
          "249:     setobjs2s(L, L->top++, ci->func + i);",
          "252:   ci->func += actual + 1;",
          "253:   ci->top += actual + 1;",
          "254:   lua_assert(L->top <= ci->top && ci->top <= L->stack_last);",
          "",
          "[Added Lines]",
          "246:   setobjs2s(L, L->top.p++, ci->func.p);",
          "249:     setobjs2s(L, L->top.p++, ci->func.p + i);",
          "252:   ci->func.p += actual + 1;",
          "253:   ci->top.p += actual + 1;",
          "254:   lua_assert(L->top.p <= ci->top.p && ci->top.p <= L->stack_last.p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:   if (wanted < 0) {",
          "265:   }",
          "266:   for (i = 0; i < wanted && i < nextra; i++)",
          "269:     setnilvalue(s2v(where + i));",
          "270: }",
          "",
          "[Removed Lines]",
          "267:     setobjs2s(L, where + i, ci->func - nextra + i);",
          "",
          "[Added Lines]",
          "267:     setobjs2s(L, where + i, ci->func.p - nextra + i);",
          "",
          "---------------"
        ],
        "lundump.c||lundump.c": [
          "File: lundump.c -> lundump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:   S.Z = Z;",
          "322:   checkHeader(&S);",
          "323:   cl = luaF_newLclosure(L, loadByte(&S));",
          "325:   luaD_inctop(L);",
          "326:   cl->p = luaF_newproto(L);",
          "327:   luaC_objbarrier(L, cl, cl->p);",
          "",
          "[Removed Lines]",
          "324:   setclLvalue2s(L, L->top, cl);",
          "",
          "[Added Lines]",
          "324:   setclLvalue2s(L, L->top.p, cl);",
          "",
          "---------------"
        ],
        "lvm.c||lvm.c": [
          "File: lvm.c -> lvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "610:   else {",
          "613:   }",
          "614: }",
          "",
          "[Removed Lines]",
          "612:     return !l_isfalse(s2v(L->top));",
          "",
          "[Added Lines]",
          "612:     return !l_isfalse(s2v(L->top.p));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "638: void luaV_concat (lua_State *L, int total) {",
          "639:   if (total == 1)",
          "641:   do {",
          "644:     if (!(ttisstring(s2v(top - 2)) || cvt2str(s2v(top - 2))) ||",
          "645:         !tostring(L, s2v(top - 1)))",
          "",
          "[Removed Lines]",
          "642:     StkId top = L->top;",
          "",
          "[Added Lines]",
          "642:     StkId top = L->top.p;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "809: void luaV_finishOp (lua_State *L) {",
          "810:   CallInfo *ci = L->ci;",
          "813:   OpCode op = GET_OPCODE(inst);",
          "815:     case OP_MMBIN: case OP_MMBINI: case OP_MMBINK: {",
          "817:       break;",
          "818:     }",
          "819:     case OP_UNM: case OP_BNOT: case OP_LEN:",
          "820:     case OP_GETTABUP: case OP_GETTABLE: case OP_GETI:",
          "821:     case OP_GETFIELD: case OP_SELF: {",
          "823:       break;",
          "824:     }",
          "825:     case OP_LT: case OP_LE:",
          "826:     case OP_LTI: case OP_LEI:",
          "827:     case OP_GTI: case OP_GEI:",
          "831: #if defined(LUA_COMPAT_LT_LE)",
          "",
          "[Removed Lines]",
          "811:   StkId base = ci->func + 1;",
          "816:       setobjs2s(L, base + GETARG_A(*(ci->u.l.savedpc - 2)), --L->top);",
          "822:       setobjs2s(L, base + GETARG_A(inst), --L->top);",
          "829:       int res = !l_isfalse(s2v(L->top - 1));",
          "830:       L->top--;",
          "",
          "[Added Lines]",
          "811:   StkId base = ci->func.p + 1;",
          "816:       setobjs2s(L, base + GETARG_A(*(ci->u.l.savedpc - 2)), --L->top.p);",
          "822:       setobjs2s(L, base + GETARG_A(inst), --L->top.p);",
          "829:       int res = !l_isfalse(s2v(L->top.p - 1));",
          "830:       L->top.p--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "856:       StkId ra = base + GETARG_A(inst);",
          "861:       ci->u.l.savedpc--;",
          "862:       break;",
          "",
          "[Removed Lines]",
          "859:       L->top = ra + ci->u2.nres;",
          "",
          "[Added Lines]",
          "859:       L->top.p = ra + ci->u2.nres;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1070: #define updatetrap(ci)  (trap = ci->u.l.trap)",
          "1075: #define updatestack(ci)  \\",
          "",
          "[Removed Lines]",
          "1072: #define updatebase(ci) (base = ci->func + 1)",
          "",
          "[Added Lines]",
          "1072: #define updatebase(ci) (base = ci->func.p + 1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1107: #define savestate(L,ci)  (savepc(L), L->top = ci->top)",
          "",
          "[Added Lines]",
          "1107: #define savestate(L,ci)  (savepc(L), L->top.p = ci->top.p)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1126: #define checkGC(L,c)  \\",
          "1128:                          updatetrap(ci)); \\",
          "1129:            luai_threadyield(L); }",
          "",
          "[Removed Lines]",
          "1127:  { luaC_condGC(L, (savepc(L), L->top = (c)), \\",
          "",
          "[Added Lines]",
          "1127:  { luaC_condGC(L, (savepc(L), L->top.p = (c)), \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1155:  startfunc:",
          "1156:   trap = L->hookmask;",
          "1159:   k = cl->p->k;",
          "1160:   pc = ci->u.l.savedpc;",
          "1161:   if (l_unlikely(trap)) {",
          "",
          "[Removed Lines]",
          "1158:   cl = clLvalue(s2v(ci->func));",
          "",
          "[Added Lines]",
          "1158:   cl = clLvalue(s2v(ci->func.p));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1167:     }",
          "1169:   }",
          "1172:   for (;;) {",
          "",
          "[Removed Lines]",
          "1170:   base = ci->func + 1;",
          "",
          "[Added Lines]",
          "1170:   base = ci->func.p + 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1177:       printf(\"line: %d\\n\", luaG_getfuncline(cl->p, pcRel(pc, cl->p)));",
          "1178:     #endif",
          "1183:     vmdispatch (GET_OPCODE(i)) {",
          "1184:       vmcase(OP_MOVE) {",
          "1185:         StkId ra = RA(i);",
          "",
          "[Removed Lines]",
          "1179:     lua_assert(base == ci->func + 1);",
          "1180:     lua_assert(base <= L->top && L->top <= L->stack_last);",
          "1182:     lua_assert(isIT(i) || (cast_void(L->top = base), 1));",
          "",
          "[Added Lines]",
          "1179:     lua_assert(base == ci->func.p + 1);",
          "1180:     lua_assert(base <= L->top.p && L->top.p <= L->stack_last.p);",
          "1182:     lua_assert(isIT(i) || (cast_void(L->top.p = base), 1));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1238:       vmcase(OP_GETUPVAL) {",
          "1239:         StkId ra = RA(i);",
          "1240:         int b = GETARG_B(i);",
          "1242:         vmbreak;",
          "1243:       }",
          "1244:       vmcase(OP_SETUPVAL) {",
          "1245:         StkId ra = RA(i);",
          "1246:         UpVal *uv = cl->upvals[GETARG_B(i)];",
          "1248:         luaC_barrier(L, uv, s2v(ra));",
          "1249:         vmbreak;",
          "1250:       }",
          "1251:       vmcase(OP_GETTABUP) {",
          "1252:         StkId ra = RA(i);",
          "1253:         const TValue *slot;",
          "1255:         TValue *rc = KC(i);",
          "1257:         if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {",
          "",
          "[Removed Lines]",
          "1241:         setobj2s(L, ra, cl->upvals[b]->v);",
          "1247:         setobj(L, uv->v, s2v(ra));",
          "1254:         TValue *upval = cl->upvals[GETARG_B(i)]->v;",
          "",
          "[Added Lines]",
          "1241:         setobj2s(L, ra, cl->upvals[b]->v.p);",
          "1247:         setobj(L, uv->v.p, s2v(ra));",
          "1254:         TValue *upval = cl->upvals[GETARG_B(i)]->v.p;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1306:       }",
          "1307:       vmcase(OP_SETTABUP) {",
          "1308:         const TValue *slot;",
          "1310:         TValue *rb = KB(i);",
          "1311:         TValue *rc = RKC(i);",
          "",
          "[Removed Lines]",
          "1309:         TValue *upval = cl->upvals[GETARG_A(i)]->v;",
          "",
          "[Added Lines]",
          "1309:         TValue *upval = cl->upvals[GETARG_A(i)]->v.p;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1694:         int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;",
          "1695:         if (b != 0)",
          "1700:         if (TESTARG_k(i)) {",
          "1704:         }",
          "",
          "[Removed Lines]",
          "1696:           L->top = ra + b;",
          "1698:           b = cast_int(L->top - ra);",
          "1703:           lua_assert(base == ci->func + 1);",
          "",
          "[Added Lines]",
          "1696:           L->top.p = ra + b;",
          "1698:           b = cast_int(L->top.p - ra);",
          "1703:           lua_assert(base == ci->func.p + 1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1717:         int nparams1 = GETARG_C(i);",
          "1720:         savepc(ci);",
          "1725:           luaF_close(L, base, CLOSEKTOP, 1);",
          "1726:           updatetrap(ci);",
          "1727:           updatestack(ci);",
          "1728:         }",
          "1732:         luaD_poscall(L, ci, n);",
          "1734:         goto ret;",
          "",
          "[Removed Lines]",
          "1723:           if (L->top < ci->top)",
          "1724:             L->top = ci->top;",
          "1730:           ci->func -= ci->u.l.nextraargs + nparams1;",
          "",
          "[Added Lines]",
          "1723:           if (L->top.p < ci->top.p)",
          "1724:             L->top.p = ci->top.p;",
          "1730:           ci->func.p -= ci->u.l.nextraargs + nparams1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1736:       vmcase(OP_RETURN0) {",
          "1737:         if (l_unlikely(L->hookmask)) {",
          "1738:           StkId ra = RA(i);",
          "1740:           savepc(ci);",
          "1742:           trap = 1;",
          "",
          "[Removed Lines]",
          "1739:           L->top = ra;",
          "",
          "[Added Lines]",
          "1739:           L->top.p = ra;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1745:           int nres;",
          "1748:           for (nres = ci->nresults; l_unlikely(nres > 0); nres--)",
          "1750:         }",
          "1751:         goto ret;",
          "1752:       }",
          "1753:       vmcase(OP_RETURN1) {",
          "1754:         if (l_unlikely(L->hookmask)) {",
          "1755:           StkId ra = RA(i);",
          "1757:           savepc(ci);",
          "1759:           trap = 1;",
          "",
          "[Removed Lines]",
          "1747:           L->top = base - 1;",
          "1756:           L->top = ra + 1;",
          "",
          "[Added Lines]",
          "1747:           L->top.p = base - 1;",
          "1756:           L->top.p = ra + 1;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1762:           int nres = ci->nresults;",
          "1764:           if (nres == 0)",
          "1766:           else {",
          "1767:             StkId ra = RA(i);",
          "1770:             for (; l_unlikely(nres > 1); nres--)",
          "1772:           }",
          "1773:         }",
          "",
          "[Removed Lines]",
          "1769:             L->top = base;",
          "",
          "[Added Lines]",
          "1769:             L->top.p = base;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1826:         memcpy(ra + 4, ra, 3 * sizeof(*ra));",
          "",
          "[Removed Lines]",
          "1827:         L->top = ra + 4 + 3;",
          "",
          "[Added Lines]",
          "1827:         L->top.p = ra + 4 + 3;",
          "",
          "---------------"
        ]
      }
    }
  ]
}