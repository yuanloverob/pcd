{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
      "candidate_info": {
        "commit_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/gencol1.test"
        ],
        "message": "Correctly generate pre-UPDATE content for virtual columns that are used by foreign key constraints.  Ticket [b9befa4b83a660cc]\n\nFossilOrigin-Name: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     oldmask |= sqlite3TriggerColmask(pParse,",
          "662:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "663:     );",
          "665:       u32 colFlags = pTab->aCol[i].colFlags;",
          "670:       if( oldmask==0xffffffff",
          "671:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "672:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "",
          "[Removed Lines]",
          "664:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "666:       if( colFlags & COLFLAG_VIRTUAL ){",
          "667:         k--;",
          "668:         continue;",
          "669:       }",
          "",
          "[Added Lines]",
          "664:     for(i=0; i<pTab->nCol; i++){",
          "666:       k = sqlite3TableColumnToStorage(pTab, i) + regOld;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: # 2019-10-31 ticket b9befa4b83a660cc",
          "149: db close",
          "150: sqlite3 db :memory:",
          "151: do_execsql_test gencol1-3.100 {",
          "152:   PRAGMA foreign_keys = true;",
          "153:   CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 AS (c0+c1-c3) REFERENCES t0, c3);",
          "154:   INSERT INTO t0 VALUES (0, 0, 0), (11, 5, 5);",
          "155:   UPDATE t0 SET c1 = c0, c3 = c0;",
          "156:   SELECT *, '|' FROM t0 ORDER BY +c0;",
          "157: } {0 0 0 0 | 11 11 11 11 |}",
          "158: do_catchsql_test gencol1-3.110 {",
          "159:   UPDATE t0 SET c1 = c0, c3 = c0+1;",
          "160: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b910364bbf531670aa0c02ad004bcdf2f5b66ad",
      "candidate_info": {
        "commit_hash": "6b910364bbf531670aa0c02ad004bcdf2f5b66ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6b910364bbf531670aa0c02ad004bcdf2f5b66ad",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/callback.c",
          "src/expr.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereInt.h",
          "src/whereexpr.c",
          "test/rowvalue.test",
          "tool/lempar.c"
        ],
        "message": "Merge changes on trunk into the generated-columns branch.\n\nFossilOrigin-Name: ba123b8c201053d8f9387de38f3513b06f7721b28d79fab8489f96d336105117",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/callback.c||src/callback.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/whereexpr.c||src/whereexpr.c",
          "test/rowvalue.test||test/rowvalue.test",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void sqlite3Fts5IterClose(Fts5IndexIter*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: void sqlite3Fts5IndexCloseReader(Fts5Index*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   if( p->pReader ){",
          "619:     sqlite3_blob *pReader = p->pReader;",
          "620:     p->pReader = 0;",
          "",
          "[Removed Lines]",
          "617: static void fts5CloseReader(Fts5Index *p){",
          "",
          "[Added Lines]",
          "617: void sqlite3Fts5IndexCloseReader(Fts5Index *p){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:       assert( p->pReader==0 );",
          "644:       p->pReader = pBlob;",
          "645:       if( rc!=SQLITE_OK ){",
          "647:       }",
          "648:       if( rc==SQLITE_ABORT ) rc = SQLITE_OK;",
          "649:     }",
          "",
          "[Removed Lines]",
          "646:         fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "646:         sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5204: int sqlite3Fts5IndexSync(Fts5Index *p){",
          "5205:   assert( p->rc==SQLITE_OK );",
          "5206:   fts5IndexFlush(p);",
          "5208:   return fts5IndexReturn(p);",
          "5209: }",
          "",
          "[Removed Lines]",
          "5207:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5207:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5217: int sqlite3Fts5IndexRollback(Fts5Index *p){",
          "5219:   fts5IndexDiscardData(p);",
          "5220:   fts5StructureInvalidate(p);",
          "",
          "[Removed Lines]",
          "5218:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5218:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5456:     if( p->rc ){",
          "5457:       sqlite3Fts5IterClose((Fts5IndexIter*)pRet);",
          "5458:       pRet = 0;",
          "5460:     }",
          "",
          "[Removed Lines]",
          "5459:       fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5459:       sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5529:     Fts5Iter *pIter = (Fts5Iter*)pIndexIter;",
          "5530:     Fts5Index *pIndex = pIter->pIndex;",
          "5531:     fts5MultiIterFree(pIter);",
          "5533:   }",
          "5534: }",
          "",
          "[Removed Lines]",
          "5532:     fts5CloseReader(pIndex);",
          "",
          "[Added Lines]",
          "5532:     sqlite3Fts5IndexCloseReader(pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:     sqlite3_free(pCsr->zRankArgs);",
          "745:   }",
          "747:   memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan - (u8*)pCsr));",
          "748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   sqlite3Fts5IndexCloseReader(pTab->p.pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test": [
          "File: ext/fts5/test/fts5matchinfo.test -> ext/fts5/test/fts5matchinfo.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:   SELECT matchinfo(x1, 'd') FROM x1('a b c');",
          "492: } {1 {unrecognized matchinfo flag: d}}",
          "494: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: #-------------------------------------------------------------------------",
          "495: # Test using matchinfo() and similar on a non-full-text query",
          "496: #",
          "497: do_execsql_test 15.0 {",
          "498:   CREATE VIRTUAL TABLE t1 USING fts5(x, y);",
          "499:   INSERT INTO t1 VALUES('a', 'b');",
          "500:   INSERT INTO t1 VALUES('c', 'd');",
          "501: }",
          "503: do_execsql_test 15.1 {",
          "504:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "505: } {X'02000000'}",
          "507: do_execsql_test 15.2 {",
          "508:   DELETE FROM t1_content WHERE rowid=1;",
          "509:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "510: } {X'02000000'}",
          "512: fts5_aux_test_functions db",
          "513: do_execsql_test 15.3 {",
          "514:   SELECT fts5_test_all(t1) FROM t1 LIMIT 1;",
          "515: } {",
          "516:   {columnsize {0 0} columntext {c d} columntotalsize {2 2} poslist {} tokenize {c d} rowcount 2}",
          "517: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc368cb090376d33d3844e3689c4f6bd19eed758e39b878ee67fef93b1c839ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1645: #endif",
          "1646: }",
          "",
          "[Removed Lines]",
          "1668: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "1669:   sqlite3 *db = pParse->db;",
          "1670:   u8 enc = ENC(db);",
          "1671:   u8 initbusy = db->init.busy;",
          "1672:   CollSeq *pColl;",
          "1674:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "1675:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "1676:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "1677:   }",
          "1679:   return pColl;",
          "1680: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return SQLITE_ERROR;",
          "66: }",
          "",
          "[Removed Lines]",
          "82: CollSeq *sqlite3GetCollSeq(",
          "87: ){",
          "88:   CollSeq *p;",
          "89:   sqlite3 *db = pParse->db;",
          "91:   p = pColl;",
          "92:   if( !p ){",
          "93:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "94:   }",
          "95:   if( !p || !p->xCmp ){",
          "99:     callCollNeeded(db, enc, zName);",
          "100:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "101:   }",
          "102:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "103:     p = 0;",
          "104:   }",
          "105:   assert( !p || p->xCmp );",
          "106:   if( p==0 ){",
          "107:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "108:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "109:   }",
          "110:   return p;",
          "111: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204: CollSeq *sqlite3FindCollSeq(",
          "209: ){",
          "210:   CollSeq *pColl;",
          "211:   if( zName ){",
          "",
          "[Removed Lines]",
          "205:   sqlite3 *db,",
          "206:   u8 enc,",
          "207:   const char *zName,",
          "208:   int create",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   return pColl;",
          "220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: CollSeq *sqlite3GetCollSeq(",
          "196: ){",
          "197:   CollSeq *p;",
          "198:   sqlite3 *db = pParse->db;",
          "200:   p = pColl;",
          "201:   if( !p ){",
          "202:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "203:   }",
          "204:   if( !p || !p->xCmp ){",
          "208:     callCollNeeded(db, enc, zName);",
          "209:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "210:   }",
          "211:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "212:     p = 0;",
          "213:   }",
          "214:   assert( !p || p->xCmp );",
          "215:   if( p==0 ){",
          "216:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "217:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "218:   }",
          "219:   return p;",
          "220: }",
          "242: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "243:   sqlite3 *db = pParse->db;",
          "244:   u8 enc = ENC(db);",
          "245:   u8 initbusy = db->init.busy;",
          "246:   CollSeq *pColl;",
          "248:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "249:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "250:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "251:   }",
          "253:   return pColl;",
          "254: }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   return pColl;",
          "340: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: CollSeq *sqlite3ExprCompareCollSeq(Parse *pParse, Expr *p){",
          "351:   if( ExprHasProperty(p, EP_Commuted) ){",
          "352:     return sqlite3BinaryCompareCollSeq(pParse, p->pRight, p->pLeft);",
          "353:   }else{",
          "354:     return sqlite3BinaryCompareCollSeq(pParse, p->pLeft, p->pRight);",
          "355:   }",
          "356: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353: ){",
          "354:   int p5;",
          "355:   int addr;",
          "356:   CollSeq *p4;",
          "359:   p5 = binaryCompareP5(pLeft, pRight, jumpIfNull);",
          "360:   addr = sqlite3VdbeAddOp4(pParse->pVdbe, opcode, in2, dest, in1,",
          "361:                            (void*)p4, P4_COLLSEQ);",
          "",
          "[Removed Lines]",
          "358:   p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "",
          "[Added Lines]",
          "375:   if( isCommuted ){",
          "376:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
          "377:   }else{",
          "378:     p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "379:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   int regRight = 0;",
          "567:   u8 opx = op;",
          "568:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "570:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "571:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     assert( i>=0 && i<nLeft );",
          "596:     r1 = exprVectorRegister(pParse, pLeft, i, regLeft, &pL, &regFree1);",
          "597:     r2 = exprVectorRegister(pParse, pRight, i, regRight, &pR, &regFree2);",
          "599:     testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "600:     testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "601:     testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "598:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5);",
          "",
          "[Added Lines]",
          "620:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5, isCommuted);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3715:         r1 = sqlite3ExprCodeTemp(pParse, pLeft, &regFree1);",
          "3716:         r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "3717:         codeCompare(pParse, pLeft, pExpr->pRight, op,",
          "3719:         assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "3720:         assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "3721:         assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "3718:             r1, r2, inReg, SQLITE_STOREP2 | p5);",
          "",
          "[Added Lines]",
          "3740:             r1, r2, inReg, SQLITE_STOREP2 | p5,",
          "3741:             ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4607:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4608:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4609:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4611:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4612:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4613:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4610:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4633:                   r1, r2, dest, jumpIfNull, ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4782:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4783:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4784:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4786:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4787:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4788:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4785:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4808:                   r1, r2, dest, jumpIfNull,ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4968:       return 2;",
          "4969:     }",
          "4970:   }",
          "4972:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "4973:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "4974:     if( (combinedFlags & EP_FixedCol)==0",
          "",
          "[Removed Lines]",
          "4971:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "",
          "[Added Lines]",
          "4994:   if( (pA->flags & (EP_Distinct|EP_Commuted))",
          "4995:      != (pB->flags & (EP_Distinct|EP_Commuted)) ) return 2;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1703:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1704:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1705:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1706:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1707:         }else{",
          "1708: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1706:           VdbeCoverage(v);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4170:   if( pRight->op==TK_COLUMN",
          "4171:    && !ExprHasProperty(pRight, EP_FixedCol)",
          "4172:    && sqlite3ExprIsConstant(pLeft)",
          "4174:   ){",
          "4175:     constInsert(pConst, pRight, pLeft);",
          "4176:   }else",
          "4177:   if( pLeft->op==TK_COLUMN",
          "4178:    && !ExprHasProperty(pLeft, EP_FixedCol)",
          "4179:    && sqlite3ExprIsConstant(pRight)",
          "4181:   ){",
          "4182:     constInsert(pConst, pLeft, pRight);",
          "4183:   }",
          "",
          "[Removed Lines]",
          "4173:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "4180:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "",
          "[Added Lines]",
          "4173:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4180:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4555: #endif",
          "4556: int sqlite3Reprepare(Vdbe*);",
          "4557: void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);",
          "4558: CollSeq *sqlite3BinaryCompareCollSeq(Parse *, Expr *, Expr *);",
          "4559: int sqlite3TempInMemory(const sqlite3*);",
          "4560: const char *sqlite3JournalModename(int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4558: CollSeq *sqlite3ExprCompareCollSeq(Parse*,Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 continue;",
          "280:               }",
          "281:               assert(pX->pLeft);",
          "284:               if( pColl==0 ) pColl = pParse->db->pDfltColl;",
          "285:               if( sqlite3StrICmp(pColl->zName, pScan->zCollName) ){",
          "286:                 continue;",
          "",
          "[Removed Lines]",
          "282:               pColl = sqlite3BinaryCompareCollSeq(pParse,",
          "283:                                                   pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "282:               pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:         Expr *pX = pTerm->pExpr;",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "803:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "804:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2802:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "2803:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "2804:     Expr *pExpr;",
          "2806:     pExpr = pTerm->pExpr;",
          "2807:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2808:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "",
          "[Removed Lines]",
          "2805:     if( pTerm->wtFlags & TERM_NOPARTIDX ) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3265:     int iTerm = pIdxInfo->aConstraint[iCons].iTermOffset;",
          "3266:     Expr *pX = pHidden->pWC->a[iTerm].pExpr;",
          "3267:     if( pX->pLeft ){",
          "3269:     }",
          "3270:     zRet = (pC ? pC->zName : sqlite3StrBINARY);",
          "3271:   }",
          "",
          "[Removed Lines]",
          "3268:       pC = sqlite3BinaryCompareCollSeq(pHidden->pParse, pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "3266:       pC = sqlite3ExprCompareCollSeq(pHidden->pParse, pX);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "145:   }",
          "146:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "147:   if( pExpr->op>=TK_GT ){",
          "",
          "[Removed Lines]",
          "127:   u16 expRight = (pExpr->pRight->flags & EP_Collate);",
          "128:   u16 expLeft = (pExpr->pLeft->flags & EP_Collate);",
          "129:   u16 wtFlags = 0;",
          "130:   assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );",
          "131:   if( expRight==expLeft ){",
          "133:     if( expRight ){",
          "136:       pExpr->pRight->flags &= ~EP_Collate;",
          "137:       wtFlags |= TERM_NOPARTIDX;",
          "138:     }else if( sqlite3ExprCollSeq(pParse, pExpr->pLeft)!=0 ){",
          "142:       pExpr->pLeft->flags |= EP_Collate;",
          "143:       wtFlags |= TERM_NOPARTIDX;",
          "144:     }",
          "",
          "[Added Lines]",
          "114:   if( pExpr->pLeft->op==TK_VECTOR",
          "115:    || pExpr->pRight->op==TK_VECTOR",
          "116:    || sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "117:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft)",
          "118:   ){",
          "119:     pExpr->flags ^= EP_Commuted;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );",
          "153:     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;",
          "154:   }",
          "156: }",
          "",
          "[Removed Lines]",
          "155:   return wtFlags;",
          "",
          "[Added Lines]",
          "130:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "930:   ){",
          "931:     return 0;",
          "932:   }",
          "934:   if( sqlite3IsBinary(pColl) ) return 1;",
          "935:   return sqlite3ExprCollSeqMatch(pParse, pExpr->pLeft, pExpr->pRight);",
          "936: }",
          "",
          "[Removed Lines]",
          "933:   pColl = sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight);",
          "",
          "[Added Lines]",
          "908:   pColl = sqlite3ExprCompareCollSeq(pParse, pExpr);",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 5,6);",
          "571: } {1 0 1 0 0 1 0 1}",
          "573: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: # 2019-10-21 Ticket b47e3627ecaadbde",
          "574: #",
          "575: do_execsql_test 23.100 {",
          "576:   DROP TABLE IF EXISTS t0;",
          "577:   CREATE TABLE t0(aa COLLATE NOCASE, bb);",
          "578:   INSERT INTO t0 VALUES('a', 'A');",
          "579:   SELECT (+bb,1) >= (aa, 1), (aa,1)<=(+bb,1) FROM t0;",
          "580:   SELECT 2 FROM t0 WHERE (+bb,1) >= (aa,1);",
          "581:   SELECT 3 FROM t0 WHERE (aa,1) <= (+bb,1);",
          "582: } {0 1 3}",
          "583: do_execsql_test 23.110 {",
          "584:   SELECT (SELECT +bb,1) >= (aa, 1), (aa,1)<=(SELECT +bb,1) FROM t0;",
          "585:   SELECT 2 FROM t0 WHERE (SELECT +bb,1) >= (aa,1);",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1068:   return yyFallback[iToken];",
          "1069: #else",
          "1070:   (void)iToken;",
          "1072:   return 0;",
          "1073: }",
          "",
          "[Removed Lines]",
          "1071: #endif",
          "",
          "[Added Lines]",
          "1072: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
      "candidate_info": {
        "commit_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Performance optimization on sqlite3GenerateConstraintChecks() - bypass the loop that checks each column for NOT NULL constraints if it is known in advance that the table has no NOT NULL constraints.\n\nFossilOrigin-Name: e3c3f4d7872f431a95627d52553101388c1e39458cc7e7f93fc81255f49a89a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c0042bd5ccd83f8794d19cbb1ec7564584f0dce54bfebc0ada00b836aca065f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:         pTab->aCol[i].notNull = OE_Abort;",
          "1837:       }",
          "1838:     }",
          "1839:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1839:     pTab->tabFlags |= TF_HasNotNull;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1385:         onError = OE_Abort;",
          "1388:       }",
          "1403:       }",
          "1409:       }",
          "1410:     }",
          "1411:   }",
          "1415: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "1355:   for(i=0; i<nCol; i++){",
          "1356:     if( i==pTab->iPKey ){",
          "1358:     }",
          "1359:     if( aiChng && aiChng[i]<0 ){",
          "1361:       continue;",
          "1362:     }",
          "1363:     onError = pTab->aCol[i].notNull;",
          "1365:     if( overrideError!=OE_Default ){",
          "1366:       onError = overrideError;",
          "1367:     }else if( onError==OE_Default ){",
          "1368:       onError = OE_Abort;",
          "1369:     }",
          "1370:     if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1371:       onError = OE_Abort;",
          "1372:     }",
          "1373:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1374:         || onError==OE_Ignore || onError==OE_Replace );",
          "1375:     addr1 = 0;",
          "1376:     switch( onError ){",
          "1377:       case OE_Replace: {",
          "1378:         assert( onError==OE_Replace );",
          "1379:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1380:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1381:           VdbeCoverage(v);",
          "1382:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1383:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1384:           VdbeCoverage(v);",
          "1389:       case OE_Abort:",
          "1390:         sqlite3MayAbort(pParse);",
          "1392:       case OE_Rollback:",
          "1393:       case OE_Fail: {",
          "1394:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1395:                                     pTab->aCol[i].zName);",
          "1396:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1397:                           regNewData+1+i);",
          "1398:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1399:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1400:         VdbeCoverage(v);",
          "1401:         if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1402:         break;",
          "1404:       default: {",
          "1405:         assert( onError==OE_Ignore );",
          "1406:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1407:         VdbeCoverage(v);",
          "1408:         break;",
          "",
          "[Added Lines]",
          "1355:   if( pTab->tabFlags & TF_HasNotNull ){",
          "1356:     for(i=0; i<nCol; i++){",
          "1357:       onError = pTab->aCol[i].notNull;",
          "1359:       assert( pTab->tabFlags & TF_HasNotNull );",
          "1360:       if( i==pTab->iPKey ){",
          "1362:       }",
          "1363:       if( aiChng && aiChng[i]<0 ){",
          "1365:         continue;",
          "1366:       }",
          "1367:       if( overrideError!=OE_Default ){",
          "1368:         onError = overrideError;",
          "1369:       }else if( onError==OE_Default ){",
          "1372:       if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1373:         onError = OE_Abort;",
          "1375:       assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1376:           || onError==OE_Ignore || onError==OE_Replace );",
          "1377:       addr1 = 0;",
          "1378:       switch( onError ){",
          "1379:         case OE_Replace: {",
          "1380:           assert( onError==OE_Replace );",
          "1381:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1382:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1383:             VdbeCoverage(v);",
          "1384:           sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1385:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1386:             VdbeCoverage(v);",
          "1387:           onError = OE_Abort;",
          "1390:         }",
          "1391:         case OE_Abort:",
          "1392:           sqlite3MayAbort(pParse);",
          "1394:         case OE_Rollback:",
          "1395:         case OE_Fail: {",
          "1396:           char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1397:                                       pTab->aCol[i].zName);",
          "1398:           sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1399:                             onError, regNewData+1+i);",
          "1400:           sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1401:           sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1402:           VdbeCoverage(v);",
          "1403:           if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1404:           break;",
          "1405:         }",
          "1406:         default: {",
          "1407:           assert( onError==OE_Ignore );",
          "1408:           sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1409:           VdbeCoverage(v);",
          "1410:           break;",
          "1411:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
      "candidate_info": {
        "commit_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0c51d1a041966bccc598d114aa17a13cf64d662",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Do not allow shadow tables to be dropped in defensive mode.\n\nFossilOrigin-Name: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0adb273f7e7671efb0e0a1619887e369500dfd2db7ef1b1e125c2414ea96e96f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2963:     }",
          "2964:   }",
          "2965: #endif",
          "2969:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2970:     goto exit_drop_table;",
          "2971:   }",
          "",
          "[Removed Lines]",
          "2966:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2967:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2968:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "[Added Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     CREATE VIRTUAL TABLE y1 USING fts3;",
          "543:   }",
          "546:     INSERT INTO y1_segments VALUES(1, X'1234567890');",
          "547:   } {1 {table y1_segments may not be modified}}",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "554:     ALTER TABLE y1 RENAME TO z1;",
          "555:   }",
          "558:     SELECT * FROM z1_segments;",
          "559:   }",
          "560: }",
          "",
          "[Removed Lines]",
          "545:   do_catchsql_test 16.1 {",
          "549:   do_catchsql_test 16.2 {",
          "553:   do_execsql_test 16.3 {",
          "557:   do_execsql_test 16.4 {",
          "",
          "[Added Lines]",
          "545:   do_catchsql_test 16.10 {",
          "549:   do_catchsql_test 16.20 {",
          "553:   do_catchsql_test 16.21 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "561:   do_execsql_test 16.40 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47df8a2c40f1362e10d0e23163452c898fe73311",
      "candidate_info": {
        "commit_hash": "47df8a2c40f1362e10d0e23163452c898fe73311",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47df8a2c40f1362e10d0e23163452c898fe73311",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Increase the number of parameters to sqlite3WhereCodeOneLoopStart() to encourage the compiler to inline that routine within sqlite3WhereBegin(). This gives a performance improvement.\n\nFossilOrigin-Name: 3c2ad0e915e835b1cb2962879beff50b2745d0cefe1cfc89ef90b7879c139ce6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7153552bac51295c56a1c42ca79d57195851e232509f9e9610375692f48c7e86",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5075:         pParse, pTabList, pLevel, wctrlFlags",
          "5076:     );",
          "5077:     pLevel->addrBody = sqlite3VdbeCurrentAddr(v);",
          "5079:     pWInfo->iContinue = pLevel->addrCont;",
          "5080:     if( (wsFlags&WHERE_MULTI_OR)==0 && (wctrlFlags&WHERE_OR_SUBCLAUSE)==0 ){",
          "5081:       sqlite3WhereAddScanStatus(v, pTabList, pLevel, addrExplain);",
          "",
          "[Removed Lines]",
          "5078:     notReady = sqlite3WhereCodeOneLoopStart(pWInfo, ii, notReady);",
          "",
          "[Added Lines]",
          "5078:     notReady = sqlite3WhereCodeOneLoopStart(pParse,v,pWInfo,ii,pLevel,notReady);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:   pWC = &pWInfo->sWC;",
          "1196:   db = pParse->db;",
          "1198:   pLoop = pLevel->pWLoop;",
          "1199:   pTabItem = &pWInfo->pTabList->a[pLevel->iFrom];",
          "1200:   iCur = pTabItem->iCursor;",
          "1201:   pLevel->notReady = notReady & ~sqlite3WhereGetMask(&pWInfo->sMaskSet, iCur);",
          "1202:   bRev = (pWInfo->revMask>>iLevel)&1;",
          "1205:   VdbeModuleComment((v, \"Begin WHERE-loop%d: %s\",iLevel,pTabItem->pTab->zName));",
          "",
          "[Removed Lines]",
          "1193:   pParse = pWInfo->pParse;",
          "1194:   v = pParse->pVdbe;",
          "1197:   pLevel = &pWInfo->a[iLevel];",
          "1203:   omitTable = (pLoop->wsFlags & WHERE_IDX_ONLY)!=0",
          "1204:            && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1342:     pTerm = pLoop->aLTerm[0];",
          "1343:     assert( pTerm!=0 );",
          "1344:     assert( pTerm->pExpr!=0 );",
          "1346:     testcase( pTerm->wtFlags & TERM_VIRTUAL );",
          "1347:     iReleaseReg = ++pParse->nMem;",
          "1348:     iRowidReg = codeEqualityTerm(pParse, pTerm, pLevel, 0, bRev, iReleaseReg);",
          "",
          "[Removed Lines]",
          "1345:     assert( omitTable==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1361:     int memEndValue = 0;",
          "1362:     WhereTerm *pStart, *pEnd;",
          "1365:     j = 0;",
          "1366:     pStart = pEnd = 0;",
          "1367:     if( pLoop->wsFlags & WHERE_BTM_LIMIT ) pStart = pLoop->aLTerm[j++];",
          "",
          "[Removed Lines]",
          "1364:     assert( omitTable==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1726:     }",
          "1729:     if( omitTable ){",
          "1731:     }else if( HasRowid(pIdx->pTable) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1723:     omitTable = (pLoop->wsFlags & WHERE_IDX_ONLY)!=0",
          "1724:            && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}