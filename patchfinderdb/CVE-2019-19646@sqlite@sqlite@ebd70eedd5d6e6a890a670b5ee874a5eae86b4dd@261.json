{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e34e4061b534130bc7495c102120371c8738d95",
      "candidate_info": {
        "commit_hash": "8e34e4061b534130bc7495c102120371c8738d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e34e4061b534130bc7495c102120371c8738d95",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "test/fuzzdata8.db"
        ],
        "message": "Add the new sqlite3ExprUnmapAndDelete() function and use it in place of separate calls to sqlite3RenameExprUnmap() and sqlite3ExprDelete().\n\nFossilOrigin-Name: 36ea13e0a851a749c9ef292377ecd82dbd4797d38df907b362487fa234c98ca5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04bd5cb73287f926f1ecf578998fa6ce1379474e86918c692eae5778d0817cef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:   }else if( pRight==0 ){",
          "896:     return pLeft;",
          "897:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "904:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "905:   }else{",
          "906:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "898:     if( IN_RENAME_OBJECT ){",
          "899:       sqlite3RenameExprUnmap(pParse, pLeft);",
          "900:       sqlite3RenameExprUnmap(pParse, pRight);",
          "901:     }",
          "902:     sqlite3ExprDelete(db, pLeft);",
          "903:     sqlite3ExprDelete(db, pRight);",
          "",
          "[Added Lines]",
          "898:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "899:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1060:   if( p ) sqlite3ExprDeleteNN(db, p);",
          "1061: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1062: void sqlite3ExprUnmapAndDelete(Parse *pParse, Expr *p){",
          "1063:   if( p ){",
          "1064:     if( IN_RENAME_OBJECT ){",
          "1065:       sqlite3RenameExprUnmap(pParse, p);",
          "1066:     }",
          "1067:     sqlite3ExprDeleteNN(pParse->db, p);",
          "1068:   }",
          "1069: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1642:   }",
          "1644: vector_append_error:",
          "1649:   sqlite3IdListDelete(db, pColumns);",
          "1650:   return pList;",
          "1651: }",
          "",
          "[Removed Lines]",
          "1645:   if( IN_RENAME_OBJECT ){",
          "1646:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1647:   }",
          "1648:   sqlite3ExprDelete(db, pExpr);",
          "",
          "[Added Lines]",
          "1653:   sqlite3ExprUnmapAndDelete(pParse, pExpr);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1178:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1176:       sqlite3ExprDelete(pParse->db, A);",
          "",
          "[Added Lines]",
          "1176:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3872: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3873: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "3874: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3875: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3876: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3874: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
      "candidate_info": {
        "commit_hash": "d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Ensure that an ALWAYS() in the rename logic really is always true, even for faulty inputs.\n\nFossilOrigin-Name: 54410f0e7710542d5159d0449898598d2b7f7676bfd993644ca47da1bf1fcdac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75b04a4b0d2e65bfcd02cf4e0b6d8f1954957c590814a9b8f9a9ee2adc2ec022",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "757: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "758:   Parse *pParse = pWalker->pParse;",
          "759:   int i;",
          "760:   if( ALWAYS(p->pEList) ){",
          "761:     ExprList *pList = p->pEList;",
          "762:     for(i=0; i<pList->nExpr; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:   if( pParse->nErr ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   } $res",
          "466: }",
          "469: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: # Verify that the \"if( pParse->nErr ) return WRC_Abort\" at the top of the",
          "469: # renameUnmapSelectCb() routine in alter.c (2019-12-04) is really required.",
          "470: #",
          "471: sqlite3 db :memory:",
          "472: do_catchsql_test 20.10 {",
          "473:   CREATE TABLE s(a, b, c);",
          "474:   CREATE INDEX k ON s( (WITH s AS( SELECT * ) VALUES(2) ) IN () );",
          "475:   ALTER TABLE s RENAME a TO a2;",
          "476: } {1 {error in index k: no tables specified}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6397a78b2ba93729678ef0ea68d0765e046a360e",
      "candidate_info": {
        "commit_hash": "6397a78b2ba93729678ef0ea68d0765e046a360e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6397a78b2ba93729678ef0ea68d0765e046a360e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/trigger.c",
          "test/trigger1.test"
        ],
        "message": "If a TEMP TRIGGER references an auxiliary schema, and that auxiliary schema is detached, move the trigger to reference the TEMP schema before completing the detach, so that the trigger does not hold a dangling schema pointer.\n\nFossilOrigin-Name: 069c2f4c61f06211a8981abc412afcc1536ece13380b13a70aa99123f8f527cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/trigger.c||src/trigger.c",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 279ac7fdec0b1409cd400b7b093f89089d93c49f596f378c6a3032434a85bf83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "300:   int i;",
          "301:   Db *pDb = 0;",
          "302:   char zErr[128];",
          "304:   UNUSED_PARAMETER(NotUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:   HashElem *pEntry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:     goto detach_error;",
          "324:   }",
          "326:   sqlite3BtreeClose(pDb->pBt);",
          "327:   pDb->pBt = 0;",
          "328:   pDb->pSchema = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   assert( db->aDb[1].pSchema );",
          "330:   pEntry = sqliteHashFirst(&db->aDb[1].pSchema->trigHash);",
          "331:   while( pEntry ){",
          "332:     Trigger *pTrig = (Trigger*)sqliteHashData(pEntry);",
          "333:     if( pTrig->pTabSchema==pDb->pSchema ){",
          "334:       pTrig->pTabSchema = pTrig->pSchema;",
          "335:     }",
          "336:     pEntry = sqliteHashNext(pEntry);",
          "337:   }",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   iDb = sqlite3SchemaToIndex(pParse->db, pTrigger->pSchema);",
          "619:   assert( iDb>=0 && iDb<db->nDb );",
          "620:   pTable = tableOfTrigger(pTrigger);",
          "623: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "625:     int code = SQLITE_DROP_TRIGGER;",
          "626:     const char *zDb = db->aDb[iDb].zDbSName;",
          "627:     const char *zTab = SCHEMA_TABLE(iDb);",
          "",
          "[Removed Lines]",
          "621:   assert( pTable );",
          "622:   assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );",
          "624:   {",
          "",
          "[Added Lines]",
          "621:   assert( (pTable && pTable->pSchema==pTrigger->pSchema) || iDb==1 );",
          "623:   if( pTable ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:   if( (v = sqlite3GetVdbe(pParse))!=0 ){",
          "640:     sqlite3NestedParse(pParse,",
          "641:        \"DELETE FROM %Q.%s WHERE name=%Q AND type='trigger'\",",
          "",
          "[Removed Lines]",
          "638:   assert( pTable!=0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "659:   if( ALWAYS(pTrigger) ){",
          "660:     if( pTrigger->pSchema==pTrigger->pTabSchema ){",
          "661:       Table *pTab = tableOfTrigger(pTrigger);",
          "665:     }",
          "666:     sqlite3DeleteTrigger(db, pTrigger);",
          "667:     db->mDbFlags |= DBFLAG_SchemaChange;",
          "",
          "[Removed Lines]",
          "662:       Trigger **pp;",
          "663:       for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "",
          "[Added Lines]",
          "660:       if( pTab ){",
          "661:         Trigger **pp;",
          "662:         for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "664:       }",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:   SELECT * FROM t19;",
          "769: } {1 2 2}",
          "771: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771: # 2019-08-26 Chromium sqlite3_fts3_lpm_fuzzer find.",
          "772: #",
          "773: db close",
          "774: sqlite3 db :memory:",
          "775: do_execsql_test trigger1-20.1 {",
          "776:   CREATE TABLE t20_1(x);",
          "777:   ATTACH ':memory:' AS aux;",
          "778:   CREATE TABLE aux.t20_2(y);",
          "779:   CREATE TABLE aux.t20_3(z);",
          "780:   CREATE TEMP TRIGGER r20_3 AFTER INSERT ON t20_2 BEGIN UPDATE t20_3 SET z=z+1; END;",
          "781:   DETACH aux;",
          "782:   DROP TRIGGER r20_3;",
          "783: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e35a61e59fa735eb73c49fbad051d2f144470d3",
      "candidate_info": {
        "commit_hash": "9e35a61e59fa735eb73c49fbad051d2f144470d3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e35a61e59fa735eb73c49fbad051d2f144470d3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add a new test case to fuzzdata8.db.\n\nFossilOrigin-Name: ce8e279a7d37594e865c2d9197a5efe5d647e11f074dbaf4a4ee31c74c71dbc9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6089d5dba73437d787259033e94a38cf1b0c87cac4a89c27e69d8239c22f496e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "276d7f78470002e09ede5bd96556cddbc23cd678",
      "candidate_info": {
        "commit_hash": "276d7f78470002e09ede5bd96556cddbc23cd678",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/276d7f78470002e09ede5bd96556cddbc23cd678",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lempar.c"
        ],
        "message": "Try to fix a harmless compiler warning reported by ICC.\n\nFossilOrigin-Name: 7f41b44ca2ecb907ea0fd09a974ac9dbdf911463a94f0f77c826cf1b1d9c3e8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b528bdcd45db1b783ecd9739c3d3c890f04de7003f079668970eafaf8e23b2f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1068:   return yyFallback[iToken];",
          "1069: #else",
          "1070:   (void)iToken;",
          "1072:   return 0;",
          "1073: }",
          "",
          "[Removed Lines]",
          "1071: #endif",
          "",
          "[Added Lines]",
          "1072: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}