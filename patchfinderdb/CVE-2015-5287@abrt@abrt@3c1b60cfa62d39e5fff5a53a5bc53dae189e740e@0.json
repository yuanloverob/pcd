{
  "cve_id": "CVE-2015-5287",
  "cve_desc": "The abrt-hook-ccpp help program in Automatic Bug Reporting Tool (ABRT) before 2.7.1 allows local users with certain permissions to gain privileges via a symlink attack on a file with a predictable name, as demonstrated by /var/tmp/abrt/abrt-hax-coredump or /var/spool/abrt/abrt-hax-coredump.",
  "repo": "abrt/abrt",
  "patch_hash": "3c1b60cfa62d39e5fff5a53a5bc53dae189e740e",
  "patch_info": {
    "commit_hash": "3c1b60cfa62d39e5fff5a53a5bc53dae189e740e",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/3c1b60cfa62d39e5fff5a53a5bc53dae189e740e",
    "files": [
      "src/hooks/abrt-hook-ccpp.c"
    ],
    "message": "ccpp: save abrt core files only to new files\n\nPrior this commit abrt-hook-ccpp saved a core file generated by a\nprocess running a program whose name starts with \"abrt\" in\nDUMP_LOCATION/$(basename program)-coredump. If the file was a symlink,\nthe hook followed and wrote core file to the symlink's target.\n\nAddresses CVE-2015-5287\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
    ]
  },
  "patch_diff": {
    "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
      "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "718:         if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path))",
      "719:             error_msg_and_die(\"Error saving '%s': truncated long file path\", path);",
      "722:         off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);",
      "723:         if (core_size < 0 || fsync(abrt_core_fd) != 0)",
      "724:         {",
      "",
      "[Removed Lines]",
      "721:         int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_TRUNC, 0600);",
      "",
      "[Added Lines]",
      "721:         unlink(path);",
      "722:         int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bbccfc5ab32fd424aa3e512ecab031fe6bd5da3b",
      "candidate_info": {
        "commit_hash": "bbccfc5ab32fd424aa3e512ecab031fe6bd5da3b",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/bbccfc5ab32fd424aa3e512ecab031fe6bd5da3b",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "hook-ccpp: dump own core file in debug mode\n\nKernel sets RLIMI_CORE to 1 for core_pattern processes in order to avoid\ncrash recursion. Thus if we want to be able to dump own corefile, we\nmust set RLIMIT_CORE !=1.\n\nIn order to avoid unintended disasters cause by crash recursion, the\ncore file will be produced only if DebugLevel is >= 100. This\nshould ensure that we can debug abrt problems without infinite recursion\nin abrt-hook-ccpp.\n\nSELinux prevents abrt-hook-ccpp from changing its own RLIMIT_CORE,\ntherefore, SELinux must be in permissive mode at least. Otherwise, the\ncore file won't be produced as RLIMIT_CORE will remain set to 1.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: typedef char *security_context_t;",
          "28: #endif",
          "30: #ifdef ENABLE_DUMP_TIME_UNWIND",
          "31: #include <satyr/abrt.h>",
          "32: #include <satyr/utils.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <sys/resource.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:     return;",
          "603: }",
          "605: int main(int argc, char** argv)",
          "606: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607: static void dump_abrt_process(pid_t pid, const char *executable)",
          "608: {",
          "614:     const char *basename = strrchr(executable, '/') + 1;",
          "615:     char *path = xasprintf(\"%s/%s-coredump\", g_settings_dump_location, basename);",
          "616:     unlink(path);",
          "617:     int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600);",
          "618:     off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);",
          "619:     if (core_size < 0 || fsync(abrt_core_fd) != 0)",
          "620:     {",
          "621:         unlink(path);",
          "624:         error_msg_and_die(\"Error saving '%s'\", path);",
          "625:     }",
          "626:     log_notice(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\", (long)pid, basename, path, (long long)core_size);",
          "627:     free(path);",
          "628: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:     load_abrt_conf();",
          "624:     bool setting_MakeCompatCore;",
          "625:     bool setting_SaveBinaryImage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653:     if (g_settings_debug_level >= 100)",
          "654:         setrlimit(RLIMIT_CORE, &((struct rlimit){ RLIM_INFINITY, RLIM_INFINITY}));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:     if (executable && strstr(executable, \"/abrt-hook-ccpp\"))",
          "806:     {",
          "810:         xfunc_die();",
          "811:     }",
          "",
          "[Removed Lines]",
          "807:         error_msg_ignore_crash(pid_str, last_slash, (long unsigned)uid, signal_no,",
          "808:                 signame, \"avoid recursion\");",
          "",
          "[Added Lines]",
          "840:         if (g_settings_debug_level >= 100)",
          "841:         {",
          "842:             dump_abrt_process(pid, executable);",
          "843:         }",
          "844:         else",
          "845:         {   /* This can happen only if there is a bug in kernel, otherwise,",
          "850:             error_msg_ignore_crash(pid_str, last_slash, (long unsigned)uid,",
          "851:                                    signal_no, signame, \"avoid recursion\");",
          "852:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "896:     if (abrt_crash)",
          "897:     {",
          "917:         err = 0;",
          "918:         goto cleanup_and_exit;",
          "919:     }",
          "",
          "[Removed Lines]",
          "903:         if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path))",
          "904:             error_msg_and_die(\"Error saving '%s': truncated long file path\", path);",
          "906:         unlink(path);",
          "907:         int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600);",
          "908:         off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);",
          "909:         if (core_size < 0 || fsync(abrt_core_fd) != 0)",
          "910:         {",
          "911:             unlink(path);",
          "914:             error_msg_and_die(\"Error saving '%s'\", path);",
          "915:         }",
          "916:         log_notice(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\", (long)pid, executable, path, (long long)core_size);",
          "",
          "[Added Lines]",
          "942:         dump_abrt_process(pid, executable);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73d1e8c09178925d8173d1030bfcee910a0ff5af",
      "candidate_info": {
        "commit_hash": "73d1e8c09178925d8173d1030bfcee910a0ff5af",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/73d1e8c09178925d8173d1030bfcee910a0ff5af",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: save abrt core files only to new files\n\nPrior this commit abrt-hook-ccpp saved a core file generated by a\nprocess running a program whose name starts with \"abrt\" in\nDUMP_LOCATION/$(basename program)-coredump. If the file was a symlink,\nthe hook followed and wrote core file to the symlink's target.\n\nThis commit addresses CVE-2015-5287\nRelated: #1262252\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:         if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path))",
          "858:             error_msg_and_die(\"Error saving '%s': truncated long file path\", path);",
          "861:         off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);",
          "862:         if (core_size < 0 || fsync(abrt_core_fd) != 0)",
          "863:         {",
          "",
          "[Removed Lines]",
          "860:         int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_TRUNC, 0600);",
          "",
          "[Added Lines]",
          "860:         unlink(path);",
          "861:         int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600);",
          "",
          "---------------"
        ]
      }
    }
  ]
}