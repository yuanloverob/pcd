{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
      "candidate_info": {
        "commit_hash": "5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/pragma.test"
        ],
        "message": "Update requirement marks due to changes in documentation wording.\n\nFossilOrigin-Name: 326cdc16f4db23c1d17596e4ef8d9d7abc672d48665950029ba53fd40c1b2d99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/pragma.test||test/pragma.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3bcb9cc104e0265a600b03415ad955187fc6445ea8e46dc656412cba5bc1d621",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pragma.test||test/pragma.test": [
          "File: test/pragma.test -> test/pragma.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:     CREATE INDEX i1 ON t1(b,c);",
          "1860:     CREATE INDEX i2 ON t1(c,d);",
          "1861:     CREATE INDEX i2x ON t1(d COLLATE nocase, c DESC);",
          "1862:     CREATE TABLE t2(x INTEGER REFERENCES t1);",
          "1863:   }",
          "1864:   db2 eval {SELECT name FROM sqlite_master}",
          "1866: do_test 23.2a {",
          "1867:   db eval {",
          "1868:     DROP INDEX i2;",
          "",
          "[Removed Lines]",
          "1865: } {t1 i1 i2 i2x t2}",
          "",
          "[Added Lines]",
          "1862:     CREATE INDEX i3 ON t1(d,b+c,c);",
          "1866: } {t1 i1 i2 i2x i3 t2}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1889: # means left-most. Key columns come before auxiliary columns.)",
          "1890: #",
          "1891: # (The second column of output from PRAGMA index_xinfo is...)",
          "1893: # being indexed, or -1 if the index-column is the rowid of the table",
          "1895: #",
          "1896: # (The third column of output from PRAGMA index_xinfo is...)",
          "1899: #",
          "1900: # (The fourth column of output from PRAGMA index_xinfo is...)",
          "1901: # EVIDENCE-OF: R-11847-09179 1 if the index-column is sorted in reverse",
          "",
          "[Removed Lines]",
          "1892: # EVIDENCE-OF: R-40889-06838 The rank of the column within the table",
          "1894: # being indexed.",
          "1897: # EVIDENCE-OF: R-22751-28901 The name of the column being indexed, or",
          "1898: # NULL if the index-column is the rowid of the table being indexed.",
          "",
          "[Added Lines]",
          "1893: # EVIDENCE-OF: R-06603-49335 The rank of the column within the table",
          "1895: # being indexed and -2 if the index is on an expression.",
          "1898: # EVIDENCE-OF: R-40641-22898 The name of the column being indexed, or",
          "1899: # NULL if the index-column is the rowid of the table being indexed or an",
          "1900: # expression.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1915: do_test 23.2d {",
          "1916:   db2 eval {PRAGMA index_xinfo(i2x)}",
          "1917: } {0 3 d 0 nocase 1 1 2 c 1 BINARY 1 2 -1 {} 0 BINARY 0}",
          "1919: # EVIDENCE-OF: R-64103-17776 PRAGMA schema.index_list(table-name); This",
          "1920: # pragma returns one row for each index associated with the given table.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1920: do_test 23.2e {",
          "1921:   db2 eval {PRAGMA index_xinfo(i3)}",
          "1922: } {0 3 d 0 BINARY 1 1 -2 {} 0 BINARY 1 2 2 c 0 BINARY 1 3 -1 {} 0 BINARY 0}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1936: #",
          "1937: do_test 23.3 {",
          "1938:   db eval {",
          "1939:     CREATE INDEX i3 ON t1(d,b,c);",
          "1940:   }",
          "1941:   capture_pragma db2 out {PRAGMA index_list(t1)}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:     DROP INDEX IF EXISTS i3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6e0286c49b13f4232f4b01a95d299a1e85931fa",
      "candidate_info": {
        "commit_hash": "b6e0286c49b13f4232f4b01a95d299a1e85931fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6e0286c49b13f4232f4b01a95d299a1e85931fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "Add the sqlite3_drop_modules() interface.\n\nFossilOrigin-Name: e2c6fed8f84929ed51a4e876bb09c85ac4b86a2e4cf0832a7da724bb9f4df5bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cb009b0f724f72eaea90e45488122f7c2a7d0caf31a8422da4060469507e921",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "3655:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3656:   \".vfslist                 List all available VFSes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3654:   \"    --allexcept             Unregister everything except those named\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6892:   int nArg = 0;",
          "6893:   int n, c;",
          "6894:   int rc = 0;",
          "6897: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "6898:   if( p->expert.pExpert ){",
          "",
          "[Removed Lines]",
          "6895:   char *azArg[50];",
          "",
          "[Added Lines]",
          "6896:   char *azArg[52];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6906:     while( IsSpace(zLine[h]) ){ h++; }",
          "6907:     if( zLine[h]==0 ) break;",
          "6908:     if( zLine[h]=='\\'' || zLine[h]=='\"' ){",
          "",
          "[Removed Lines]",
          "6905:   while( zLine[h] && nArg<ArraySize(azArg) ){",
          "",
          "[Added Lines]",
          "6906:   while( zLine[h] && nArg<ArraySize(azArg)-1 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6923:       resolve_backslashes(azArg[nArg-1]);",
          "6924:     }",
          "6925:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6927:   azArg[nArg] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "[Removed Lines]",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "",
          "[Added Lines]",
          "9412:     int lenOpt;",
          "9413:     char *zOpt;",
          "9415:       raw_printf(stderr, \"Usage: .unmodule [--allexcept] NAME ...\\n\");",
          "9420:     zOpt = azArg[1];",
          "9421:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;",
          "9422:     lenOpt = (int)strlen(zOpt);",
          "9423:     if( lenOpt>=3 && strncmp(zOpt, \"-allexcept\",lenOpt)==0 ){",
          "9424:       assert( azArg[nArg]==0 );",
          "9425:       sqlite3_drop_modules(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "9426:     }else{",
          "9427:       for(ii=1; ii<nArg; ii++){",
          "9428:         sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9429:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6655: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6671: int sqlite3_drop_modules(",
          "6674: );",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   return TCL_OK;",
          "1111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_modules(",
          "1121:   void *NotUsed,",
          "1125: ){",
          "1126:   int rc;",
          "1127:   sqlite3 *db;",
          "1129:   if( argc!=2 ){",
          "1130:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "1131:        \" DB\\\"\", 0);",
          "1132:     return TCL_ERROR;",
          "1133:   }",
          "1134:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1135:   sqlite3_drop_modules(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1136:   return TCL_OK;",
          "1137: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:      { \"sqlite3_close_v2\",              (Tcl_CmdProc*)sqlite_test_close_v2  },",
          "7861:      { \"sqlite3_create_function\",       (Tcl_CmdProc*)test_create_function  },",
          "7862:      { \"sqlite3_create_aggregate\",      (Tcl_CmdProc*)test_create_aggregate },",
          "7863:      { \"sqlite_register_test_function\", (Tcl_CmdProc*)test_register_func    },",
          "7864:      { \"sqlite_abort\",                  (Tcl_CmdProc*)sqlite_abort          },",
          "7865:      { \"sqlite_bind\",                   (Tcl_CmdProc*)test_bind             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7889:      { \"sqlite3_drop_modules\",          (Tcl_CmdProc*)test_drop_modules     },",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: int sqlite3_drop_modules(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "147:     pNext = sqliteHashNext(pThis);",
          "148:     if( azNames ){",
          "149:       int ii;",
          "150:       for(ii=0; azNames[ii]!=0 && strcmp(azNames[ii],pMod->zName)!=0; ii++){}",
          "151:       if( azNames[ii]!=0 ) continue;",
          "152:     }",
          "153:     createModule(db, pMod->zName, 0, 0, 0);",
          "154:   }",
          "155:   return SQLITE_OK;",
          "156: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
      "candidate_info": {
        "commit_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fixes to the PRNG_SEED pragma idea.\n\nFossilOrigin-Name: c71098409c98af8360f8f28b9238a12ec764018a5782e8ff03fdf5db54031d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ac5723164ae801e209ce525a5d94692767136f9d06be2a84883dcea677d02da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "6398:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "6395:   if( Tcl_GetIntFromObj(objv[0],&i) ) return TCL_ERROR;",
          "",
          "[Added Lines]",
          "6395:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "215:     if( eVerbosity>=1 ){",
          "216:       printf(\"%s\\n\", azSql[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "216:   sqlite3_randomness(0,0);",
          "217: #endif",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:             sqlite3_progress_handler(db, 100000, progressHandler,",
          "1806:                                      &vdbeLimitFlag);",
          "1807:           }",
          "1808: #endif",
          "1809:           do{",
          "1810:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "1811:           sqlite3_randomness(0,0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "725dd72400872da94dcfb6af48128905b93d57fe",
      "candidate_info": {
        "commit_hash": "725dd72400872da94dcfb6af48128905b93d57fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/725dd72400872da94dcfb6af48128905b93d57fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/where.c",
          "test/analyzeC.test"
        ],
        "message": "Ensure that the optional \"sz=N\" parameter that can be manually added to the end of an sqlite_stat1 entry does not have an N value that is too small. Ticket [e4598ecbdd18bd82]\n\nFossilOrigin-Name: 98357d8c1263920b33a3648ef9214a63c99728bafa7a8d3dd6a1241b2303fd42",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/where.c||src/where.c",
          "test/analyzeC.test||test/analyzeC.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4f5b2d938194fab7627486e2ced633def2c90d9d3328e3700612feb9dbfa3d9a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1450:       if( sqlite3_strglob(\"unordered*\", z)==0 ){",
          "1451:         pIndex->bUnordered = 1;",
          "1452:       }else if( sqlite3_strglob(\"sz=[0-9]*\", z)==0 ){",
          "1454:       }else if( sqlite3_strglob(\"noskipscan*\", z)==0 ){",
          "1455:         pIndex->noSkipScan = 1;",
          "1456:       }",
          "",
          "[Removed Lines]",
          "1453:         pIndex->szIdxRow = sqlite3LogEst(sqlite3Atoi(z+3));",
          "",
          "[Added Lines]",
          "1453:         int sz = sqlite3Atoi(z+3);",
          "1454:         if( sz<2 ) sz = 2;",
          "1455:         pIndex->szIdxRow = sqlite3LogEst(sz);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2673:     rCostIdx = pNew->nOut + 1 + (15*pProbe->szIdxRow)/pSrc->pTab->szTabRow;",
          "2674:     pNew->rRun = sqlite3LogEstAdd(rLogSize, rCostIdx);",
          "2675:     if( (pNew->wsFlags & (WHERE_IDX_ONLY|WHERE_IPK))==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2673:     assert( pSrc->pTab->szTabRow>0 );",
          "",
          "---------------"
        ],
        "test/analyzeC.test||test/analyzeC.test": [
          "File: test/analyzeC.test -> test/analyzeC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   SELECT count(a) FROM t1;",
          "133: } {/.*INDEX t1ca.*/}",
          "136: # The sz=NNN parameter works even if there is other extraneous text",
          "137: # in the sqlite_stat1.stat column.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: # 2019-08-15.",
          "136: # Ticket https://www.sqlite.org/src/tktview/e4598ecbdd18bd82945f602901",
          "137: # The sz=N parameter in the sqlite_stat1 table needs to have a value of",
          "138: # 2 or more to avoid a division by zero in the query planner.",
          "139: #",
          "140: do_execsql_test 4.4 {",
          "141:   DROP TABLE IF EXISTS t44;",
          "142:   CREATE TABLE t44(a PRIMARY KEY);",
          "143:   INSERT INTO sqlite_stat1 VALUES('t44',null,'sz=0');",
          "144:   ANALYZE sqlite_master;",
          "145:   SELECT 0 FROM t44 WHERE a IN(1,2,3);",
          "146: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
      "candidate_info": {
        "commit_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "\"STORED\" is not actually a keyword.  The parser looks for STORED as an ordinary identifier.\n\nFossilOrigin-Name: 167cd574d6a1d4fe2253f5bc5aaa7b031cbc82853e4d33b8d9b72eaf049003d4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "225: %endif",
          "226:   REINDEX RENAME CTIME_KW IF",
          "227:   .",
          "",
          "[Removed Lines]",
          "224:   GENERATED ALWAYS STORED",
          "",
          "[Added Lines]",
          "224:   GENERATED ALWAYS",
          "",
          "---------------"
        ]
      }
    }
  ]
}