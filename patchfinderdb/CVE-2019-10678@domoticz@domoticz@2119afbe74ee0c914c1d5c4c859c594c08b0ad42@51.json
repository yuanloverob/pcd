{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0df8bafafebe876329dc8a609de37c3720a97c57",
      "candidate_info": {
        "commit_hash": "0df8bafafebe876329dc8a609de37c3720a97c57",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/0df8bafafebe876329dc8a609de37c3720a97c57",
        "files": [
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Python LogException upgraded to handle Python returning a NULL filename during stack tracing.",
        "before_after_code_files": [
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:    {",
          "748:     int lineno = PyFrame_GetLineNumber(frame);",
          "749:     PyCodeObject* pCode = frame->f_code;",
          "755:    }",
          "756:    pTraceback = pTraceback->tb_next;",
          "757:   }",
          "",
          "[Removed Lines]",
          "750:     PyBytesObject* pFileBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_filename);",
          "751:     PyBytesObject* pFuncBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_name);",
          "752:     _log.Log(LOG_ERROR, \"(%s) ----> Line %d in %s, function %s\", m_Name.c_str(), lineno, pFileBytes->ob_sval, pFuncBytes->ob_sval);",
          "753:     Py_XDECREF(pFileBytes);",
          "754:     Py_XDECREF(pFuncBytes);",
          "",
          "[Added Lines]",
          "750:     std::string  FileName = \"\";",
          "751:     if (pCode->co_filename)",
          "752:     {",
          "753:      PyBytesObject* pFileBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_filename);",
          "754:      FileName = pFileBytes->ob_sval;",
          "755:      Py_XDECREF(pFileBytes);",
          "756:     }",
          "757:     std::string  FuncName = \"Unknown\";",
          "758:     if (pCode->co_name)",
          "759:     {",
          "760:      PyBytesObject* pFuncBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_name);",
          "761:      FuncName = pFuncBytes->ob_sval;",
          "762:      Py_XDECREF(pFuncBytes);",
          "763:     }",
          "764:     if (FileName.length())",
          "765:      _log.Log(LOG_ERROR, \"(%s) ----> Line %d in '%'s, function %s\", m_Name.c_str(), lineno, FileName.c_str(), FuncName.c_str());",
          "766:     else",
          "767:      _log.Log(LOG_ERROR, \"(%s) ----> Line %d in '%s'\", m_Name.c_str(), lineno, FuncName.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "518838d3360efb93720d43cccc5d5a72913b522b",
      "candidate_info": {
        "commit_hash": "518838d3360efb93720d43cccc5d5a72913b522b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/518838d3360efb93720d43cccc5d5a72913b522b",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "RFXCom: Supporting detection of Pro2, Pro XL1",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2541:     WriteMessage(\"Firmware type     = \", false);",
          "2542:     switch (FWType)",
          "2543:     {",
          "2545:      strcpy(szTmp, \"Type1 RX\");",
          "2546:      break;",
          "2548:      strcpy(szTmp, \"Type1\");",
          "2549:      break;",
          "2551:      strcpy(szTmp, \"Type2\");",
          "2552:      break;",
          "2554:      strcpy(szTmp, \"Ext\");",
          "2555:      break;",
          "2557:      strcpy(szTmp, \"Ext2\");",
          "2558:      break;",
          "2560:      strcpy(szTmp, \"Pro1\");",
          "2561:      break;",
          "2562:     default:",
          "2563:      strcpy(szTmp, \"?\");",
          "2564:      break;",
          "",
          "[Removed Lines]",
          "2544:     case 0:",
          "2547:     case 1:",
          "2550:     case 2:",
          "2553:     case 3:",
          "2556:     case 4:",
          "2559:     case 5:",
          "",
          "[Added Lines]",
          "2544:     case FWtyperec:",
          "2547:     case FWtype1:",
          "2550:     case FWtype2:",
          "2553:     case FWtypeExt:",
          "2556:     case FWtypeExt2:",
          "2559:     case FWtypePro1:",
          "2562:     case FWtypePro2:",
          "2563:      strcpy(szTmp, \"Pro2\");",
          "2564:      break;",
          "2565:     case FWtypeProXL1:",
          "2566:      strcpy(szTmp, \"Pro XL1\");",
          "2567:      break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b48a53c3e1335a1a11c055262781094392a47133",
      "candidate_info": {
        "commit_hash": "b48a53c3e1335a1a11c055262781094392a47133",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/b48a53c3e1335a1a11c055262781094392a47133",
        "files": [
          "hardware/plugins/PluginTransports.cpp"
        ],
        "message": "Bugfix: UDP Listener disconnection error",
        "before_after_code_files": [
          "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp": [
          "File: hardware/plugins/PluginTransports.cpp -> hardware/plugins/PluginTransports.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   CPlugin*  pPlugin = pConnection ? pConnection->pPlugin : NULL;",
          "33:   if (pPlugin && (pPlugin->m_bDebug & PDM_CONNECTION) && m_pConnection && (m_pConnection->ob_refcnt <= 1))",
          "34:   {",
          "36:   }",
          "37:   if (!m_bDisconnectQueued && m_pConnection && (m_pConnection->ob_refcnt <= 1) && pPlugin)",
          "38:   {",
          "",
          "[Removed Lines]",
          "35:    _log.Log(LOG_NORM, \"(%s) Connection released by Python, reference count is %d.\", pPlugin->m_Name.c_str(), (int)m_pConnection->ob_refcnt);",
          "",
          "[Added Lines]",
          "35:    std::string sTransport = PyUnicode_AsUTF8(pConnection->Transport);",
          "36:    std::string sAddress = PyUnicode_AsUTF8(pConnection->Address);",
          "37:    std::string sPort = PyUnicode_AsUTF8(pConnection->Port);",
          "38:    if ((sTransport == \"Serial\") || (!sPort.length()))",
          "39:     _log.Log(LOG_NORM, \"(%s) Connection '%s' released by Python, reference count is %d.\", pPlugin->m_Name.c_str(), sAddress.c_str(), (int)m_pConnection->ob_refcnt);",
          "40:    else",
          "41:     _log.Log(LOG_NORM, \"(%s) Connection '%s:%s' released by Python, reference count is %d.\", pPlugin->m_Name.c_str(), sAddress.c_str(), sPort.c_str(), (int)m_pConnection->ob_refcnt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:   if (pPlugin->m_bDebug & PDM_CONNECTION)",
          "290:   {",
          "292:   }",
          "294:   m_tLastSeen = time(0);",
          "",
          "[Removed Lines]",
          "291:    _log.Log(LOG_NORM, \"(%s) Handling disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected?\"\":\"not \"));",
          "",
          "[Added Lines]",
          "297:    _log.Log(LOG_NORM, \"(%s) Handling TCP disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected?\"\":\"not \"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:   {",
          "512:    m_bConnected = false;",
          "515:    CPlugin* pPlugin = ((CConnection*)m_pConnection)->pPlugin;",
          "516:    pPlugin->MessagePlugin(new onConnectCallback(pPlugin, m_pConnection, -1, std::string(e.what())));",
          "517:    return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "520:    _log.Log(LOG_ERROR, \"Plugin: UDP Listen Exception: '%s' connecting to '%s:%s'\", e.what(), m_IP.c_str(), m_Port.c_str());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "567:   }",
          "568:   else",
          "569:   {",
          "572:     _log.Log(LOG_NORM, \"(%s) Queued asyncronous UDP read aborted (%s:%s).\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str());",
          "573:    else",
          "574:    {",
          "",
          "[Removed Lines]",
          "570:    if (pPlugin && (pPlugin->m_bDebug & PDM_CONNECTION) &&",
          "571:     ((ec == boost::asio::error::operation_aborted) || (ec == boost::asio::error::eof)))",
          "",
          "[Added Lines]",
          "576:    if (pPlugin && (pPlugin->m_bDebug & PDM_CONNECTION))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "628:   if (pPlugin->m_bDebug & PDM_CONNECTION)",
          "629:   {",
          "631:   }",
          "633:   m_tLastSeen = time(0);",
          "",
          "[Removed Lines]",
          "630:    _log.Log(LOG_NORM, \"(%s) Handling disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "[Added Lines]",
          "635:    _log.Log(LOG_NORM, \"(%s) Handling UDP disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "640:     m_Socket->shutdown(boost::asio::ip::udp::socket::shutdown_both, e);",
          "641:     if (e)",
          "642:     {",
          "644:      if (e.value() != boost::asio::error::not_connected)  // Linux always reports error 107, Windows does not",
          "646:       _log.Log(LOG_ERROR, \"(%s) Socket Shutdown Error: %d, %s\", pPlugin->m_Name.c_str(), e.value(), e.message().c_str());",
          "647:     }",
          "648:     else",
          "649:     {",
          "",
          "[Removed Lines]",
          "643: #ifndef WIN32",
          "645: #endif",
          "",
          "[Added Lines]",
          "650:      else",
          "651:       m_Socket->close();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "865:   if (pPlugin->m_bDebug & PDM_CONNECTION)",
          "866:   {",
          "868:   }",
          "870:   m_tLastSeen = time(0);",
          "",
          "[Removed Lines]",
          "867:    _log.Log(LOG_NORM, \"(%s) Handling disconnect, socket (%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "[Added Lines]",
          "872:    _log.Log(LOG_NORM, \"(%s) Handling ICMP disconnect, socket (%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}