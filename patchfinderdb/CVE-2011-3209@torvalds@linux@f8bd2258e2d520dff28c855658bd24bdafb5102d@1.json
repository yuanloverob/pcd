{
  "cve_id": "CVE-2011-3209",
  "cve_desc": "The div_long_long_rem implementation in include/asm-x86/div64.h in the Linux kernel before 2.6.26 on the x86 platform allows local users to cause a denial of service (Divide Error Fault and panic) via a clock_gettime system call.",
  "repo": "torvalds/linux",
  "patch_hash": "f8bd2258e2d520dff28c855658bd24bdafb5102d",
  "patch_info": {
    "commit_hash": "f8bd2258e2d520dff28c855658bd24bdafb5102d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f8bd2258e2d520dff28c855658bd24bdafb5102d",
    "files": [
      "arch/mips/kernel/binfmt_elfn32.c",
      "arch/mips/kernel/binfmt_elfo32.c",
      "drivers/char/mmtimer.c",
      "include/asm-x86/div64.h",
      "include/linux/calc64.h",
      "include/linux/jiffies.h",
      "kernel/posix-cpu-timers.c",
      "kernel/time.c",
      "kernel/time/ntp.c",
      "mm/slub.c"
    ],
    "message": "remove div_long_long_rem\n\nx86 is the only arch right now, which provides an optimized for\ndiv_long_long_rem and it has the downside that one has to be very careful that\nthe divide doesn't overflow.\n\nThe API is a little akward, as the arguments for the unsigned divide are\nsigned.  The signed version also doesn't handle a negative divisor and\nproduces worse code on 64bit archs.\n\nThere is little incentive to keep this API alive, so this converts the few\nusers to the new API.\n\nSigned-off-by: Roman Zippel <zippel@linux-m68k.org>\nCc: Ralf Baechle <ralf@linux-mips.org>\nCc: Ingo Molnar <mingo@elte.hu>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: john stultz <johnstul@us.ibm.com>\nCc: Christoph Lameter <clameter@sgi.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "arch/mips/kernel/binfmt_elfn32.c||arch/mips/kernel/binfmt_elfn32.c",
      "arch/mips/kernel/binfmt_elfo32.c||arch/mips/kernel/binfmt_elfo32.c",
      "drivers/char/mmtimer.c||drivers/char/mmtimer.c",
      "include/asm-x86/div64.h||include/asm-x86/div64.h",
      "include/linux/calc64.h||include/linux/calc64.h",
      "include/linux/jiffies.h||include/linux/jiffies.h",
      "kernel/posix-cpu-timers.c||kernel/posix-cpu-timers.c",
      "kernel/time.c||kernel/time.c",
      "kernel/time/ntp.c||kernel/time/ntp.c",
      "mm/slub.c||mm/slub.c"
    ]
  },
  "patch_diff": {
    "arch/mips/kernel/binfmt_elfn32.c||arch/mips/kernel/binfmt_elfn32.c": [
      "File: arch/mips/kernel/binfmt_elfn32.c -> arch/mips/kernel/binfmt_elfn32.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: #include <linux/module.h>",
      "55: #include <linux/elfcore.h>",
      "56: #include <linux/compat.h>",
      "58: #define elf_prstatus elf_prstatus32",
      "59: struct elf_prstatus32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "104:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "107:  value->tv_usec = rem / NSEC_PER_USEC;",
      "108: }",
      "",
      "[Removed Lines]",
      "105:  long rem;",
      "106:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "[Added Lines]",
      "106:  u32 rem;",
      "107:  value->tv_sec = div_u64_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "---------------"
    ],
    "arch/mips/kernel/binfmt_elfo32.c||arch/mips/kernel/binfmt_elfo32.c": [
      "File: arch/mips/kernel/binfmt_elfo32.c -> arch/mips/kernel/binfmt_elfo32.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: #include <linux/module.h>",
      "57: #include <linux/elfcore.h>",
      "58: #include <linux/compat.h>",
      "60: #define elf_prstatus elf_prstatus32",
      "61: struct elf_prstatus32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "109:  value->tv_usec = rem / NSEC_PER_USEC;",
      "110: }",
      "",
      "[Removed Lines]",
      "107:  long rem;",
      "108:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "[Added Lines]",
      "108:  u32 rem;",
      "109:  value->tv_sec = div_u64_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "---------------"
    ],
    "drivers/char/mmtimer.c||drivers/char/mmtimer.c": [
      "File: drivers/char/mmtimer.c -> drivers/char/mmtimer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include <linux/miscdevice.h>",
      "31: #include <linux/posix-timers.h>",
      "32: #include <linux/interrupt.h>",
      "34: #include <asm/uaccess.h>",
      "35: #include <asm/sn/addrs.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include <linux/time.h>",
      "34: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "473:  nsec = rtc_time() * sgi_clock_period",
      "474:    + sgi_clock_offset.tv_nsec;",
      "477:  return 0;",
      "478: };",
      "",
      "[Removed Lines]",
      "475:  tp->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &tp->tv_nsec)",
      "476:    + sgi_clock_offset.tv_sec;",
      "",
      "[Added Lines]",
      "478:  tp->tv_sec += sgi_clock_offset.tv_sec;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "481: {",
      "483:  u64 nsec;",
      "486:  nsec = rtc_time() * sgi_clock_period;",
      "490:  if (rem <= tp->tv_nsec)",
      "491:   sgi_clock_offset.tv_nsec = tp->tv_sec - rem;",
      "",
      "[Removed Lines]",
      "484:  u64 rem;",
      "488:  sgi_clock_offset.tv_sec = tp->tv_sec - div_long_long_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "[Added Lines]",
      "486:  u32 rem;",
      "490:  sgi_clock_offset.tv_sec = tp->tv_sec - div_u64_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "644:  return 0;",
      "645: }",
      "651: static void sgi_timer_get(struct k_itimer *timr, struct itimerspec *cur_setting)",
      "652: {",
      "",
      "[Removed Lines]",
      "647: #define timespec_to_ns(x) ((x).tv_nsec + (x).tv_sec * NSEC_PER_SEC)",
      "648: #define ns_to_timespec(ts, nsec) (ts).tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &(ts).tv_nsec)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "659:   return;",
      "660:  }",
      "665: }",
      "",
      "[Removed Lines]",
      "662:  ns_to_timespec(cur_setting->it_interval, timr->it.mmtimer.incr * sgi_clock_period);",
      "663:  ns_to_timespec(cur_setting->it_value, (timr->it.mmtimer.expires - rtc_time())* sgi_clock_period);",
      "664:  return;",
      "",
      "[Added Lines]",
      "661:  cur_setting->it_interval = ns_to_timespec(timr->it.mmtimer.incr * sgi_clock_period);",
      "662:  cur_setting->it_value = ns_to_timespec((timr->it.mmtimer.expires - rtc_time()) * sgi_clock_period);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "679:   sgi_timer_get(timr, old_setting);",
      "681:  sgi_timer_del(timr);",
      "685:  if (when == 0)",
      "",
      "[Removed Lines]",
      "682:  when = timespec_to_ns(new_setting->it_value);",
      "683:  period = timespec_to_ns(new_setting->it_interval);",
      "",
      "[Added Lines]",
      "680:  when = timespec_to_ns(&new_setting->it_value);",
      "681:  period = timespec_to_ns(&new_setting->it_interval);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "695:   unsigned long now;",
      "697:   getnstimeofday(&n);",
      "699:   if (when > now)",
      "700:    when -= now;",
      "701:   else",
      "",
      "[Removed Lines]",
      "698:   now = timespec_to_ns(n);",
      "",
      "[Added Lines]",
      "696:   now = timespec_to_ns(&n);",
      "",
      "---------------"
    ],
    "include/asm-x86/div64.h||include/asm-x86/div64.h": [
      "File: include/asm-x86/div64.h -> include/asm-x86/div64.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:  __mod;       \\",
      "34: })",
      "54: static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)",
      "55: {",
      "56:  union {",
      "",
      "[Removed Lines]",
      "42: #define div_long_long_rem(a, b, c) div_ll_X_l_rem(a, b, c)",
      "44: static inline long div_ll_X_l_rem(long long divs, long div, long *rem)",
      "45: {",
      "46:  long dum2;",
      "47:  asm(\"divl %2\":\"=a\"(dum2), \"=d\"(*rem)",
      "48:      : \"rm\"(div), \"A\"(divs));",
      "50:  return dum2;",
      "52: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "include/linux/calc64.h||include/linux/calc64.h": [
      "File: include/linux/calc64.h -> include/linux/calc64.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "include/linux/jiffies.h||include/linux/jiffies.h": [
      "File: include/linux/jiffies.h -> include/linux/jiffies.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #ifndef _LINUX_JIFFIES_H",
      "2: #define _LINUX_JIFFIES_H",
      "5: #include <linux/kernel.h>",
      "6: #include <linux/types.h>",
      "7: #include <linux/time.h>",
      "",
      "[Removed Lines]",
      "4: #include <linux/calc64.h>",
      "",
      "[Added Lines]",
      "4: #include <linux/math64.h>",
      "",
      "---------------"
    ],
    "kernel/posix-cpu-timers.c||kernel/posix-cpu-timers.c": [
      "File: kernel/posix-cpu-timers.c -> kernel/posix-cpu-timers.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include <linux/sched.h>",
      "6: #include <linux/posix-timers.h>",
      "8: #include <linux/errno.h>",
      "10: static int check_clock(const clockid_t which_clock)",
      "11: {",
      "",
      "[Removed Lines]",
      "7: #include <asm/uaccess.h>",
      "",
      "[Added Lines]",
      "8: #include <linux/math64.h>",
      "9: #include <asm/uaccess.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:           union cpu_time_count cpu,",
      "48:           struct timespec *tp)",
      "49: {",
      "54:   cputime_to_timespec(cpu.cpu, tp);",
      "56: }",
      "58: static inline int cpu_time_before(const clockid_t which_clock,",
      "",
      "[Removed Lines]",
      "50:  if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {",
      "51:   tp->tv_sec = div_long_long_rem(cpu.sched,",
      "52:             NSEC_PER_SEC, &tp->tv_nsec);",
      "53:  } else {",
      "55:  }",
      "",
      "[Added Lines]",
      "51:  if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED)",
      "53:  else",
      "",
      "---------------"
    ],
    "kernel/time.c||kernel/time.c": [
      "File: kernel/time.c -> kernel/time.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "392: struct timespec ns_to_timespec(const s64 nsec)",
      "393: {",
      "394:  struct timespec ts;",
      "396:  if (!nsec)",
      "397:   return (struct timespec) {0, 0};",
      "403:  return ts;",
      "404: }",
      "",
      "[Removed Lines]",
      "399:  ts.tv_sec = div_long_long_rem_signed(nsec, NSEC_PER_SEC, &ts.tv_nsec);",
      "400:  if (unlikely(nsec < 0))",
      "401:   set_normalized_timespec(&ts, ts.tv_sec, ts.tv_nsec);",
      "",
      "[Added Lines]",
      "395:  s32 rem;",
      "400:  ts.tv_sec = div_s64_rem(nsec, NSEC_PER_SEC, &rem);",
      "401:  if (unlikely(rem < 0)) {",
      "402:   ts.tv_sec--;",
      "403:   rem += NSEC_PER_SEC;",
      "404:  }",
      "405:  ts.tv_nsec = rem;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "533: }",
      "534: EXPORT_SYMBOL(jiffies_to_timespec);",
      "",
      "[Removed Lines]",
      "531:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "532:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &value->tv_nsec);",
      "",
      "[Added Lines]",
      "535:  u32 rem;",
      "536:  value->tv_sec = div_u64_rem((u64)jiffies * TICK_NSEC,",
      "537:         NSEC_PER_SEC, &rem);",
      "538:  value->tv_nsec = rem;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "576: }",
      "577: EXPORT_SYMBOL(jiffies_to_timeval);",
      "",
      "[Removed Lines]",
      "570:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "571:  long tv_usec;",
      "573:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &tv_usec);",
      "574:  tv_usec /= NSEC_PER_USEC;",
      "575:  value->tv_usec = tv_usec;",
      "",
      "[Added Lines]",
      "576:  u32 rem;",
      "578:  value->tv_sec = div_u64_rem((u64)jiffies * TICK_NSEC,",
      "579:         NSEC_PER_SEC, &rem);",
      "580:  value->tv_usec = rem / NSEC_PER_USEC;",
      "",
      "---------------"
    ],
    "kernel/time/ntp.c||kernel/time/ntp.c": [
      "File: kernel/time/ntp.c -> kernel/time/ntp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "235: int do_adjtimex(struct timex *txc)",
      "236: {",
      "238:  s64 freq_adj;",
      "239:  int result;",
      "",
      "[Removed Lines]",
      "237:  long mtemp, save_adjust, rem;",
      "",
      "[Added Lines]",
      "237:  long mtemp, save_adjust;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "345:       freq_adj += time_freq;",
      "346:       freq_adj = min(freq_adj, (s64)MAXFREQ_NSEC);",
      "347:       time_freq = max(freq_adj, (s64)-MAXFREQ_NSEC);",
      "351:       time_offset <<= SHIFT_UPDATE;",
      "",
      "[Removed Lines]",
      "348:       time_offset = div_long_long_rem_signed(time_offset,",
      "349:           NTP_INTERVAL_FREQ,",
      "350:           &rem);",
      "",
      "[Added Lines]",
      "348:       time_offset = div_s64(time_offset, NTP_INTERVAL_FREQ);",
      "",
      "---------------"
    ],
    "mm/slub.c||mm/slub.c": [
      "File: mm/slub.c -> mm/slub.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: #include <linux/debugobjects.h>",
      "23: #include <linux/kallsyms.h>",
      "24: #include <linux/memory.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3621:    len += sprintf(buf + len, \"<not-available>\");",
      "3623:   if (l->sum_time != l->min_time) {",
      "3626:    len += sprintf(buf + len, \" age=%ld/%ld/%ld\",",
      "3630:   } else",
      "3631:    len += sprintf(buf + len, \" age=%ld\",",
      "3632:     l->min_time);",
      "",
      "[Removed Lines]",
      "3624:    unsigned long remainder;",
      "3627:    l->min_time,",
      "3628:    div_long_long_rem(l->sum_time, l->count, &remainder),",
      "3629:    l->max_time);",
      "",
      "[Added Lines]",
      "3626:     l->min_time,",
      "3627:     (long)div_u64(l->sum_time, l->count),",
      "3628:     l->max_time);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eea83d896e318bda54be2d2770d2c5d6668d11db",
      "candidate_info": {
        "commit_hash": "eea83d896e318bda54be2d2770d2c5d6668d11db",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/eea83d896e318bda54be2d2770d2c5d6668d11db",
        "files": [
          "include/linux/timex.h",
          "kernel/time/ntp.c"
        ],
        "message": "ntp: NTP4 user space bits update\n\nThis adds a few more things from the ntp nanokernel related to user space.\nIt's now possible to select the resolution used of some values via STA_NANO\nand the kernel reports in which mode it works (pll/fll).\n\nIf some values for adjtimex() are outside the acceptable range, they are now\nsimply normalized instead of letting the syscall fail.  I removed\nMOD_CLKA/MOD_CLKB as the mapping didn't really makes any sense, the kernel\ndoesn't support setting the clock.\n\nSigned-off-by: Roman Zippel <zippel@linux-m68k.org>\nCc: john stultz <johnstul@us.ibm.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "include/linux/timex.h||include/linux/timex.h",
          "kernel/time/ntp.c||kernel/time/ntp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ],
          "candidate": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/timex.h||include/linux/timex.h": [
          "File: include/linux/timex.h -> include/linux/timex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: #define MOD_ESTERROR ADJ_ESTERROR",
          "147: #define MOD_STATUS ADJ_STATUS",
          "148: #define MOD_TIMECONST ADJ_TIMECONST",
          "",
          "[Removed Lines]",
          "149: #define MOD_CLKB ADJ_TICK",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173: #define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:  STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)",
          "",
          "---------------"
        ],
        "kernel/time/ntp.c||kernel/time/ntp.c": [
          "File: kernel/time/ntp.c -> kernel/time/ntp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  if (!(time_status & STA_PLL))",
          "66:   return;",
          "",
          "[Removed Lines]",
          "68:  time_offset = offset * NSEC_PER_USEC;",
          "",
          "[Added Lines]",
          "68:  time_offset = offset;",
          "69:  if (!(time_status & STA_NANO))",
          "70:   time_offset *= NSEC_PER_USEC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  freq_adj = time_offset * mtemp;",
          "87:  freq_adj = shift_right(freq_adj, time_constant * 2 +",
          "88:       (SHIFT_PLL + 2) * 2 - SHIFT_NSEC);",
          "90:   freq_adj += div_s64(time_offset << (SHIFT_NSEC - SHIFT_FLL), mtemp);",
          "91:  freq_adj += time_freq;",
          "92:  freq_adj = min(freq_adj, (s64)MAXFREQ_NSEC);",
          "93:  time_freq = max(freq_adj, (s64)-MAXFREQ_NSEC);",
          "",
          "[Removed Lines]",
          "89:  if (mtemp >= MINSEC && (time_status & STA_FLL || mtemp > MAXSEC))",
          "",
          "[Added Lines]",
          "91:  time_status &= ~STA_MODE;",
          "92:  if (mtemp >= MINSEC && (time_status & STA_FLL || mtemp > MAXSEC)) {",
          "94:   time_status |= STA_MODE;",
          "95:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273: int do_adjtimex(struct timex *txc)",
          "274: {",
          "275:  long save_adjust;",
          "276:  int result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:  struct timespec ts;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "284:  if ((txc->modes & ADJ_OFFSET_SINGLESHOT) == ADJ_OFFSET_SINGLESHOT) {",
          "288:    return -EINVAL;",
          "289:  }",
          "297:  if (txc->modes & ADJ_TICK)",
          "298:   if (txc->tick <  900000/USER_HZ ||",
          "",
          "[Removed Lines]",
          "286:   if (txc->modes != ADJ_OFFSET_SINGLESHOT &&",
          "287:      txc->modes != ADJ_OFFSET_SS_READ)",
          "291:  if (txc->modes != ADJ_OFFSET_SINGLESHOT && (txc->modes & ADJ_OFFSET))",
          "293:   if (txc->offset <= - MAXPHASE || txc->offset >= MAXPHASE )",
          "294:    return -EINVAL;",
          "",
          "[Added Lines]",
          "292:   if (txc->modes & ~ADJ_OFFSET_SS_READ)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300:    return -EINVAL;",
          "302:  write_seqlock_irq(&xtime_lock);",
          "306:  save_adjust = time_adjust;",
          "312:  if (txc->modes) {",
          "317:   if (txc->modes & ADJ_FREQUENCY) {",
          "323:      >> (SHIFT_USEC - SHIFT_NSEC);",
          "324:   }",
          "331:    time_maxerror = txc->maxerror;",
          "339:    time_esterror = txc->esterror;",
          "342:   if (txc->modes & ADJ_TIMECONST) {",
          "348:   }",
          "350:   if (txc->modes & ADJ_OFFSET) {",
          "",
          "[Removed Lines]",
          "310: #endif",
          "314:    time_status = (txc->status & ~STA_RONLY) |",
          "315:           (time_status & STA_RONLY);",
          "318:    if (txc->freq > MAXFREQ || txc->freq < -MAXFREQ) {",
          "319:     result = -EINVAL;",
          "320:     goto leave;",
          "321:    }",
          "322:    time_freq = ((s64)txc->freq * NSEC_PER_USEC)",
          "326:   if (txc->modes & ADJ_MAXERROR) {",
          "327:    if (txc->maxerror < 0 || txc->maxerror >= NTP_PHASE_LIMIT) {",
          "328:     result = -EINVAL;",
          "329:     goto leave;",
          "330:    }",
          "332:   }",
          "334:   if (txc->modes & ADJ_ESTERROR) {",
          "335:    if (txc->esterror < 0 || txc->esterror >= NTP_PHASE_LIMIT) {",
          "336:     result = -EINVAL;",
          "337:     goto leave;",
          "338:    }",
          "340:   }",
          "344:     result = -EINVAL;",
          "345:     goto leave;",
          "346:    }",
          "347:    time_constant = min(txc->constant + 4, (long)MAXTC);",
          "",
          "[Added Lines]",
          "309:   if (txc->modes & ADJ_STATUS) {",
          "310:    if ((time_status & STA_PLL) &&",
          "311:        !(txc->status & STA_PLL)) {",
          "312:     time_state = TIME_OK;",
          "313:     time_status = STA_UNSYNC;",
          "314:    }",
          "316:    time_status &= STA_RONLY;",
          "317:    time_status |= txc->status & ~STA_RONLY;",
          "318:   }",
          "320:   if (txc->modes & ADJ_NANO)",
          "321:    time_status |= STA_NANO;",
          "322:   if (txc->modes & ADJ_MICRO)",
          "323:    time_status &= ~STA_NANO;",
          "326:    time_freq = min(txc->freq, MAXFREQ);",
          "327:    time_freq = min(time_freq, -MAXFREQ);",
          "328:    time_freq = ((s64)time_freq * NSEC_PER_USEC)",
          "332:   if (txc->modes & ADJ_MAXERROR)",
          "334:   if (txc->modes & ADJ_ESTERROR)",
          "338:    time_constant = txc->constant;",
          "339:    if (!(time_status & STA_NANO))",
          "340:     time_constant += 4;",
          "341:    time_constant = min(time_constant, (long)MAXTC);",
          "342:    time_constant = max(time_constant, 0l);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "360:   if (txc->modes & (ADJ_TICK|ADJ_FREQUENCY|ADJ_OFFSET))",
          "361:    ntp_update_frequency();",
          "362:  }",
          "364:  if (time_status & (STA_UNSYNC|STA_CLOCKERR))",
          "365:   result = TIME_ERROR;",
          "367:  if ((txc->modes == ADJ_OFFSET_SINGLESHOT) ||",
          "368:      (txc->modes == ADJ_OFFSET_SS_READ))",
          "369:   txc->offset = save_adjust;",
          "371:   txc->offset = ((long)shift_right(time_offset, SHIFT_UPDATE)) *",
          "373:  txc->freq    = (time_freq / NSEC_PER_USEC) <<",
          "374:     (SHIFT_USEC - SHIFT_NSEC);",
          "375:  txc->maxerror    = time_maxerror;",
          "",
          "[Removed Lines]",
          "363: leave:",
          "370:  else",
          "372:         NTP_INTERVAL_FREQ / 1000;",
          "",
          "[Added Lines]",
          "366:  else {",
          "368:         NTP_INTERVAL_FREQ;",
          "369:   if (!(time_status & STA_NANO))",
          "370:    txc->offset /= NSEC_PER_USEC;",
          "371:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "391:  txc->stbcnt    = 0;",
          "392:  write_sequnlock_irq(&xtime_lock);",
          "396:  notify_cmos_timer();",
          "",
          "[Removed Lines]",
          "394:  do_gettimeofday(&txc->time);",
          "",
          "[Added Lines]",
          "393:  getnstimeofday(&ts);",
          "394:  txc->time.tv_sec = ts.tv_sec;",
          "395:  txc->time.tv_usec = ts.tv_nsec;",
          "396:  if (!(time_status & STA_NANO))",
          "397:   txc->time.tv_usec /= NSEC_PER_USEC;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "153b5d054ac2d98ea0d86504884326b6777f683d",
      "candidate_info": {
        "commit_hash": "153b5d054ac2d98ea0d86504884326b6777f683d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/153b5d054ac2d98ea0d86504884326b6777f683d",
        "files": [
          "include/linux/compat.h",
          "include/linux/timex.h",
          "kernel/compat.c",
          "kernel/time/ntp.c"
        ],
        "message": "ntp: support for TAI\n\nThis adds support for setting the TAI value (International Atomic Time).  The\nvalue is reported back to userspace via timex (as we don't have a\nntp_gettime() syscall).\n\nSigned-off-by: Roman Zippel <zippel@linux-m68k.org>\nCc: john stultz <johnstul@us.ibm.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "include/linux/compat.h||include/linux/compat.h",
          "include/linux/timex.h||include/linux/timex.h",
          "kernel/compat.c||kernel/compat.c",
          "kernel/time/ntp.c||kernel/time/ntp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ],
          "candidate": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/compat.h||include/linux/compat.h": [
          "File: include/linux/compat.h -> include/linux/compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  compat_long_t calcnt;",
          "66:  compat_long_t errcnt;",
          "67:  compat_long_t stbcnt;",
          "69:  compat_int_t :32; compat_int_t :32; compat_int_t :32; compat_int_t :32;",
          "70:  compat_int_t :32; compat_int_t :32; compat_int_t :32; compat_int_t :32;",
          "72: };",
          "74: #define _COMPAT_NSIG_WORDS (_COMPAT_NSIG / _COMPAT_NSIG_BPW)",
          "",
          "[Removed Lines]",
          "71:  compat_int_t :32; compat_int_t :32; compat_int_t :32; compat_int_t :32;",
          "",
          "[Added Lines]",
          "68:  compat_int_t tai;",
          "72:  compat_int_t :32; compat_int_t :32; compat_int_t :32;",
          "",
          "---------------"
        ],
        "include/linux/timex.h||include/linux/timex.h": [
          "File: include/linux/timex.h -> include/linux/timex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  int  :32; int  :32; int  :32; int  :32;",
          "125:  int  :32; int  :32; int  :32; int  :32;",
          "127: };",
          "",
          "[Removed Lines]",
          "126:  int  :32; int  :32; int  :32; int  :32;",
          "",
          "[Added Lines]",
          "128:  int  :32; int  :32; int  :32;",
          "",
          "---------------"
        ],
        "kernel/compat.c||kernel/compat.c": [
          "File: kernel/compat.c -> kernel/compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "955:    __put_user(txc.jitcnt, &utp->jitcnt) ||",
          "956:    __put_user(txc.calcnt, &utp->calcnt) ||",
          "957:    __put_user(txc.errcnt, &utp->errcnt) ||",
          "959:   ret = -EFAULT;",
          "961:  return ret;",
          "",
          "[Removed Lines]",
          "958:    __put_user(txc.stbcnt, &utp->stbcnt))",
          "",
          "[Added Lines]",
          "958:    __put_user(txc.stbcnt, &utp->stbcnt) ||",
          "959:    __put_user(txc.tai, &utp->tai))",
          "",
          "---------------"
        ],
        "kernel/time/ntp.c||kernel/time/ntp.c": [
          "File: kernel/time/ntp.c -> kernel/time/ntp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:  case TIME_DEL:",
          "163:   if ((xtime.tv_sec + 1) % 86400 == 0) {",
          "164:    xtime.tv_sec++;",
          "165:    wall_to_monotonic.tv_sec--;",
          "166:    time_state = TIME_WAIT;",
          "167:    printk(KERN_NOTICE \"Clock: deleting leap second \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:    time_tai--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:   }",
          "170:   break;",
          "171:  case TIME_OOP:",
          "172:   time_state = TIME_WAIT;",
          "173:   break;",
          "174:  case TIME_WAIT:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:   time_tai++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340:    time_constant = max(time_constant, 0l);",
          "341:   }",
          "343:   if (txc->modes & ADJ_OFFSET) {",
          "344:    if (txc->modes == ADJ_OFFSET_SINGLESHOT)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:   if (txc->modes & ADJ_TAI && txc->constant > 0)",
          "347:    time_tai = txc->constant;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:  txc->precision    = 1;",
          "378:  txc->tolerance    = MAXFREQ_SCALED / PPM_SCALE;",
          "379:  txc->tick    = tick_usec;",
          "382:  txc->ppsfreq    = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:  txc->tai    = time_tai;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e374d4835668a8c6aec7cefc0a44df69f9679017",
      "candidate_info": {
        "commit_hash": "e374d4835668a8c6aec7cefc0a44df69f9679017",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e374d4835668a8c6aec7cefc0a44df69f9679017",
        "files": [
          "mm/slub.c"
        ],
        "message": "slub: fix shadowed variable sparse warnings\n\nIntroduce 'len' at outer level:\nmm/slub.c:3406:26: warning: symbol 'n' shadows an earlier one\nmm/slub.c:3393:6: originally declared here\n\nNo need to declare new node:\nmm/slub.c:3501:7: warning: symbol 'node' shadows an earlier one\nmm/slub.c:3491:6: originally declared here\n\nNo need to declare new x:\nmm/slub.c:3513:9: warning: symbol 'x' shadows an earlier one\nmm/slub.c:3492:6: originally declared here\n\nSigned-off-by: Harvey Harrison <harvey.harrison@gmail.com>\nSigned-off-by: Christoph Lameter <clameter@sgi.com>",
        "before_after_code_files": [
          "mm/slub.c||mm/slub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mm/slub.c||mm/slub.c"
          ],
          "candidate": [
            "mm/slub.c||mm/slub.c"
          ]
        }
      },
      "candidate_diff": {
        "mm/slub.c||mm/slub.c": [
          "File: mm/slub.c -> mm/slub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3390: static int list_locations(struct kmem_cache *s, char *buf,",
          "3391:      enum track_item alloc)",
          "3392: {",
          "3394:  unsigned long i;",
          "3395:  struct loc_track t = { 0, 0, NULL };",
          "3396:  int node;",
          "",
          "[Removed Lines]",
          "3393:  int n = 0;",
          "",
          "[Added Lines]",
          "3393:  int len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3421:  for (i = 0; i < t.count; i++) {",
          "3422:   struct location *l = &t.loc[i];",
          "3425:    break;",
          "3428:   if (l->addr)",
          "3430:   else",
          "3433:   if (l->sum_time != l->min_time) {",
          "3434:    unsigned long remainder;",
          "3437:    l->min_time,",
          "3438:    div_long_long_rem(l->sum_time, l->count, &remainder),",
          "3439:    l->max_time);",
          "3440:   } else",
          "3442:     l->min_time);",
          "3444:   if (l->min_pid != l->max_pid)",
          "3446:     l->min_pid, l->max_pid);",
          "3447:   else",
          "3449:     l->min_pid);",
          "3451:   if (num_online_cpus() > 1 && !cpus_empty(l->cpus) &&",
          "3455:      l->cpus);",
          "3456:   }",
          "3458:   if (num_online_nodes() > 1 && !nodes_empty(l->nodes) &&",
          "3462:      l->nodes);",
          "3463:   }",
          "3466:  }",
          "3468:  free_loc_track(&t);",
          "3469:  if (!t.count)",
          "3472: }",
          "3474: enum slab_stat_type {",
          "",
          "[Removed Lines]",
          "3424:   if (n > PAGE_SIZE - 100)",
          "3426:   n += sprintf(buf + n, \"%7ld \", l->count);",
          "3429:    n += sprint_symbol(buf + n, (unsigned long)l->addr);",
          "3431:    n += sprintf(buf + n, \"<not-available>\");",
          "3436:    n += sprintf(buf + n, \" age=%ld/%ld/%ld\",",
          "3441:    n += sprintf(buf + n, \" age=%ld\",",
          "3445:    n += sprintf(buf + n, \" pid=%ld-%ld\",",
          "3448:    n += sprintf(buf + n, \" pid=%ld\",",
          "3452:     n < PAGE_SIZE - 60) {",
          "3453:    n += sprintf(buf + n, \" cpus=\");",
          "3454:    n += cpulist_scnprintf(buf + n, PAGE_SIZE - n - 50,",
          "3459:     n < PAGE_SIZE - 60) {",
          "3460:    n += sprintf(buf + n, \" nodes=\");",
          "3461:    n += nodelist_scnprintf(buf + n, PAGE_SIZE - n - 50,",
          "3465:   n += sprintf(buf + n, \"\\n\");",
          "3470:   n += sprintf(buf, \"No data\\n\");",
          "3471:  return n;",
          "",
          "[Added Lines]",
          "3424:   if (len > PAGE_SIZE - 100)",
          "3426:   len += sprintf(buf + len, \"%7ld \", l->count);",
          "3429:    len += sprint_symbol(buf + len, (unsigned long)l->addr);",
          "3431:    len += sprintf(buf + len, \"<not-available>\");",
          "3436:    len += sprintf(buf + len, \" age=%ld/%ld/%ld\",",
          "3441:    len += sprintf(buf + len, \" age=%ld\",",
          "3445:    len += sprintf(buf + len, \" pid=%ld-%ld\",",
          "3448:    len += sprintf(buf + len, \" pid=%ld\",",
          "3452:     len < PAGE_SIZE - 60) {",
          "3453:    len += sprintf(buf + len, \" cpus=\");",
          "3454:    len += cpulist_scnprintf(buf + len, PAGE_SIZE - len - 50,",
          "3459:     len < PAGE_SIZE - 60) {",
          "3460:    len += sprintf(buf + len, \" nodes=\");",
          "3461:    len += nodelist_scnprintf(buf + len, PAGE_SIZE - len - 50,",
          "3465:   len += sprintf(buf + len, \"\\n\");",
          "3470:   len += sprintf(buf, \"No data\\n\");",
          "3471:  return len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3499:  for_each_possible_cpu(cpu) {",
          "3500:   struct page *page;",
          "3502:   struct kmem_cache_cpu *c = get_cpu_slab(s, cpu);",
          "3504:   if (!c)",
          "",
          "[Removed Lines]",
          "3501:   int node;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3510:    continue;",
          "3511:   if (page) {",
          "3512:    if (flags & SO_CPU) {",
          "3515:     if (flags & SO_OBJECTS)",
          "3516:      x = page->inuse;",
          "3517:     else",
          "",
          "[Removed Lines]",
          "3513:     int x = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e96291653b2e4df02f160b574070f6e632868e5e",
      "candidate_info": {
        "commit_hash": "e96291653b2e4df02f160b574070f6e632868e5e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e96291653b2e4df02f160b574070f6e632868e5e",
        "files": [
          "kernel/time/ntp.c"
        ],
        "message": "time: ntp: refactor do_adjtimex() some more\n\nImpact: cleanup, no functionality changed\n\nFurther simplify do_adjtimex():\n\n - introduce the ntp_start_leap_timer() helper function\n - eliminate the goto adj_done complication\n\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "kernel/time/ntp.c||kernel/time/ntp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ],
          "candidate": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/time/ntp.c||kernel/time/ntp.c": [
          "File: kernel/time/ntp.c -> kernel/time/ntp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332: static inline void notify_cmos_timer(void) { }",
          "333: #endif",
          "339: static inline void process_adj_status(struct timex *txc, struct timespec *ts)",
          "340: {",
          "343:  if ((time_status & STA_PLL) && !(txc->status & STA_PLL)) {",
          "344:   time_state = TIME_OK;",
          "345:   time_status = STA_UNSYNC;",
          "",
          "[Removed Lines]",
          "341:  long now;",
          "",
          "[Added Lines]",
          "338: static inline void ntp_start_leap_timer(struct timespec *ts)",
          "339: {",
          "340:  long now = ts->tv_sec;",
          "342:  if (time_status & STA_INS) {",
          "343:   time_state = TIME_INS;",
          "344:   now += 86400 - now % 86400;",
          "345:   hrtimer_start(&leap_timer, ktime_set(now, 0), HRTIMER_MODE_ABS);",
          "347:   return;",
          "348:  }",
          "350:  if (time_status & STA_DEL) {",
          "351:   time_state = TIME_DEL;",
          "352:   now += 86400 - (now + 1) % 86400;",
          "353:   hrtimer_start(&leap_timer, ktime_set(now, 0), HRTIMER_MODE_ABS);",
          "354:  }",
          "355: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:  switch (time_state) {",
          "360:  case TIME_OK:",
          "372:   break;",
          "373:  case TIME_INS:",
          "374:  case TIME_DEL:",
          "375:   time_state = TIME_OK;",
          "377:  case TIME_WAIT:",
          "378:   if (!(time_status & (STA_INS | STA_DEL)))",
          "379:    time_state = TIME_OK;",
          "",
          "[Removed Lines]",
          "361:  start_timer:",
          "362:   now = ts->tv_sec;",
          "363:   if (time_status & STA_INS) {",
          "364:    time_state = TIME_INS;",
          "365:    now += 86400 - now % 86400;",
          "366:    hrtimer_start(&leap_timer, ktime_set(now, 0), HRTIMER_MODE_ABS);",
          "367:   } else if (time_status & STA_DEL) {",
          "368:    time_state = TIME_DEL;",
          "369:    now += 86400 - (now + 1) % 86400;",
          "370:    hrtimer_start(&leap_timer, ktime_set(now, 0), HRTIMER_MODE_ABS);",
          "371:   }",
          "376:   goto start_timer;",
          "",
          "[Added Lines]",
          "380:   ntp_start_leap_timer(ts);",
          "385:   ntp_start_leap_timer(ts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "457:   if (txc->modes & ADJ_TICK &&",
          "458:       (txc->tick <  900000/USER_HZ ||",
          "459:        txc->tick > 1100000/USER_HZ))",
          "462:   if (txc->modes & ADJ_STATUS && time_state != TIME_OK)",
          "463:    hrtimer_cancel(&leap_timer);",
          "",
          "[Removed Lines]",
          "460:     return -EINVAL;",
          "",
          "[Added Lines]",
          "472:    return -EINVAL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "477:    ntp_update_frequency();",
          "478:   }",
          "479:   txc->offset = save_adjust;",
          "488:       NTP_SCALE_SHIFT);",
          "494:  if (time_status & (STA_UNSYNC|STA_CLOCKERR))",
          "495:   result = TIME_ERROR;",
          "",
          "[Removed Lines]",
          "480:   goto adj_done;",
          "481:  }",
          "484:  if (txc->modes)",
          "485:   process_adjtimex_modes(txc, &ts);",
          "487:  txc->offset = shift_right(time_offset * NTP_INTERVAL_FREQ,",
          "489:  if (!(time_status & STA_NANO))",
          "490:   txc->offset /= NSEC_PER_USEC;",
          "492: adj_done:",
          "",
          "[Added Lines]",
          "491:  } else {",
          "494:   if (txc->modes)",
          "495:    process_adjtimex_modes(txc, &ts);",
          "497:   txc->offset = shift_right(time_offset * NTP_INTERVAL_FREQ,",
          "499:   if (!(time_status & STA_NANO))",
          "500:    txc->offset /= NSEC_PER_USEC;",
          "501:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "916c7a855174e3b53d182b97a26b2e27a29726a1",
      "candidate_info": {
        "commit_hash": "916c7a855174e3b53d182b97a26b2e27a29726a1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/916c7a855174e3b53d182b97a26b2e27a29726a1",
        "files": [
          "include/linux/timex.h",
          "kernel/time/ntp.c"
        ],
        "message": "ntp: fix ADJ_OFFSET_SS_READ bug and do_adjtimex() cleanup\n\nThanks to the review by Michael Kerrisk a bug in the recent\nADJ_OFFSET_SS_READ option was discovered, where the ntp time_offset was\ninadvertently set by it.  This fixes this by making the adjtime code\nmore separate from the ntp_adjtime code (both of which really want to\nbe separate syscalls).\n\nSigned-off-by: Roman Zippel <zippel@linux-m68k.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nAcked-by: John Stultz <johnstul@us.ibm.com>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "include/linux/timex.h||include/linux/timex.h",
          "kernel/time/ntp.c||kernel/time/ntp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ],
          "candidate": [
            "kernel/time/ntp.c||kernel/time/ntp.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/timex.h||include/linux/timex.h": [
          "File: include/linux/timex.h -> include/linux/timex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "148: #define MOD_OFFSET ADJ_OFFSET",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: #ifdef __KERNEL__",
          "149: #else",
          "152: #endif",
          "",
          "---------------"
        ],
        "kernel/time/ntp.c||kernel/time/ntp.c": [
          "File: kernel/time/ntp.c -> kernel/time/ntp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: int do_adjtimex(struct timex *txc)",
          "278: {",
          "279:  struct timespec ts;",
          "281:  int result;",
          "292:    return -EINVAL;",
          "293:  }",
          "303:  getnstimeofday(&ts);",
          "305:  write_seqlock_irq(&xtime_lock);",
          "311:  if (txc->modes) {",
          "312:   if (txc->modes & ADJ_STATUS) {",
          "313:    if ((time_status & STA_PLL) &&",
          "314:        !(txc->status & STA_PLL)) {",
          "",
          "[Removed Lines]",
          "280:  long save_adjust, sec;",
          "284:  if (txc->modes && !capable(CAP_SYS_TIME))",
          "285:   return -EPERM;",
          "289:  if ((txc->modes & ADJ_OFFSET_SINGLESHOT) == ADJ_OFFSET_SINGLESHOT) {",
          "291:   if (txc->modes & ~ADJ_OFFSET_SS_READ)",
          "296:  if (txc->modes & ADJ_TICK)",
          "297:   if (txc->tick <  900000/USER_HZ ||",
          "298:       txc->tick > 1100000/USER_HZ)",
          "299:    return -EINVAL;",
          "301:  if (time_state != TIME_OK && txc->modes & ADJ_STATUS)",
          "302:   hrtimer_cancel(&leap_timer);",
          "308:  save_adjust = time_adjust;",
          "",
          "[Added Lines]",
          "283:  if (txc->modes & ADJ_ADJTIME) {",
          "285:   if (!(txc->modes & ADJ_OFFSET_SINGLESHOT))",
          "287:   if (!(txc->modes & ADJ_OFFSET_READONLY) &&",
          "288:       !capable(CAP_SYS_TIME))",
          "289:    return -EPERM;",
          "290:  } else {",
          "292:    if (txc->modes && !capable(CAP_SYS_TIME))",
          "293:    return -EPERM;",
          "296:   if (txc->modes & ADJ_TICK &&",
          "297:       (txc->tick <  900000/USER_HZ ||",
          "298:        txc->tick > 1100000/USER_HZ))",
          "299:     return -EINVAL;",
          "301:   if (txc->modes & ADJ_STATUS && time_state != TIME_OK)",
          "302:    hrtimer_cancel(&leap_timer);",
          "310:  if (txc->modes & ADJ_ADJTIME) {",
          "311:   long save_adjust = time_adjust;",
          "313:   if (!(txc->modes & ADJ_OFFSET_READONLY)) {",
          "315:    time_adjust = txc->offset;",
          "316:    ntp_update_frequency();",
          "317:   }",
          "318:   txc->offset = save_adjust;",
          "319:   goto adj_done;",
          "320:  }",
          "322:   long sec;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:   if (txc->modes & ADJ_TAI && txc->constant > 0)",
          "376:    time_tai = txc->constant;",
          "385:   if (txc->modes & ADJ_TICK)",
          "386:    tick_usec = txc->tick;",
          "",
          "[Removed Lines]",
          "378:   if (txc->modes & ADJ_OFFSET) {",
          "379:    if (txc->modes == ADJ_OFFSET_SINGLESHOT)",
          "381:     time_adjust = txc->offset;",
          "382:    else",
          "383:     ntp_update_offset(txc->offset);",
          "384:   }",
          "",
          "[Added Lines]",
          "390:   if (txc->modes & ADJ_OFFSET)",
          "391:    ntp_update_offset(txc->offset);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:    ntp_update_frequency();",
          "390:  }",
          "393:  if (time_status & (STA_UNSYNC|STA_CLOCKERR))",
          "394:   result = TIME_ERROR;",
          "405:  txc->freq    = shift_right((s32)(time_freq >> PPM_SCALE_INV_SHIFT) *",
          "406:       (s64)PPM_SCALE_INV,",
          "407:       NTP_SCALE_SHIFT);",
          "",
          "[Removed Lines]",
          "396:  if ((txc->modes == ADJ_OFFSET_SINGLESHOT) ||",
          "397:      (txc->modes == ADJ_OFFSET_SS_READ))",
          "398:   txc->offset = save_adjust;",
          "399:  else {",
          "400:   txc->offset = shift_right(time_offset * NTP_INTERVAL_FREQ,",
          "401:        NTP_SCALE_SHIFT);",
          "402:   if (!(time_status & STA_NANO))",
          "403:    txc->offset /= NSEC_PER_USEC;",
          "404:  }",
          "",
          "[Added Lines]",
          "399:  txc->offset = shift_right(time_offset * NTP_INTERVAL_FREQ,",
          "400:       NTP_SCALE_SHIFT);",
          "401:  if (!(time_status & STA_NANO))",
          "402:   txc->offset /= NSEC_PER_USEC;",
          "404: adj_done:",
          "",
          "---------------"
        ]
      }
    }
  ]
}