{
  "cve_id": "CVE-2015-3315",
  "cve_desc": "Automatic Bug Reporting Tool (ABRT) allows local users to read, change the ownership of, or have other unspecified impact on arbitrary files via a symlink attack on (1) /var/tmp/abrt/*/maps, (2) /tmp/jvm-*/hs_error.log, (3) /proc/*/exe, (4) /etc/os-release in a chroot, or (5) an unspecified root directory related to librpm.",
  "repo": "abrt/abrt",
  "patch_hash": "d6e2f6f128cef4c21cb80941ae674c9842681aa7",
  "patch_info": {
    "commit_hash": "d6e2f6f128cef4c21cb80941ae674c9842681aa7",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/d6e2f6f128cef4c21cb80941ae674c9842681aa7",
    "files": [
      "src/hooks/abrt-hook-ccpp.c"
    ],
    "message": "ccpp: open file for dump_fd_info with O_EXCL\n\nTo avoid possible races.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
    ]
  },
  "patch_diff": {
    "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
      "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400: static bool dump_fd_info(const char *dest_filename, char *source_filename, int source_base_ofs, uid_t uid, gid_t gid)",
      "401: {",
      "403:     if (!fp)",
      "404:         return false;",
      "",
      "[Removed Lines]",
      "402:     FILE *fp = fopen(dest_filename, \"w\");",
      "",
      "[Added Lines]",
      "402:     FILE *fp = fopen(dest_filename, \"wx\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
      "candidate_info": {
        "commit_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/8939398b82006ba1fec4ed491339fc075f43fc7c",
        "files": [
          "src/daemon/abrt-server.c",
          "src/daemon/abrt.conf",
          "src/hooks/abrt-hook-ccpp.c",
          "src/include/libabrt.h",
          "src/lib/abrt_conf.c",
          "src/lib/hooklib.c",
          "src/plugins/abrt-dump-oops.c",
          "src/plugins/abrt-dump-xorg.c"
        ],
        "message": "make the dump directories owned by root by default\n\nIt was discovered that the abrt event scripts create a user-readable\ncopy of a sosreport file in abrt problem directories, and include\nexcerpts of /var/log/messages selected by the user-controlled process\nname, leading to an information disclosure.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1212868\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
          "src/daemon/abrt.conf||src/daemon/abrt.conf",
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
          "src/include/libabrt.h||src/include/libabrt.h",
          "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
          "src/lib/hooklib.c||src/lib/hooklib.c",
          "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c",
          "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   with this program; if not, write to the Free Software Foundation, Inc.,",
          "16:   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
          "18: #include \"libabrt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"problem_api.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dirname, g_settings_dump_location);",
          "155:     }",
          "157:     {",
          "158:         if (errno == ENOTDIR)",
          "159:         {",
          "",
          "[Removed Lines]",
          "156:     if (!dump_dir_accessible_by_uid(dirname, client_uid))",
          "",
          "[Added Lines]",
          "157:     if (g_settings_privatereports)",
          "158:     {",
          "159:         struct stat statbuf;",
          "160:         if (lstat(dirname, &statbuf) != 0 || !S_ISDIR(statbuf.st_mode))",
          "161:         {",
          "162:             error_msg(\"Path '%s' isn't directory\", dirname);",
          "164:         }",
          "166:         struct group *gr = getgrnam(\"abrt\");",
          "167:         if (!gr)",
          "168:         {",
          "169:             error_msg(\"Group 'abrt' does not exist\");",
          "170:             return 500;",
          "171:         }",
          "172:         if (statbuf.st_uid != 0 || !(statbuf.st_gid == 0 || statbuf.st_gid == gr->gr_gid) || statbuf.st_mode & 07)",
          "173:         {",
          "174:             error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dirname);",
          "175:             return 403;",
          "176:         }",
          "177:         struct dump_dir *dd = dd_opendir(dirname, DD_OPEN_READONLY);",
          "178:         const bool complete = dd && problem_dump_dir_is_complete(dd);",
          "179:         dd_close(dd);",
          "180:         if (complete)",
          "181:         {",
          "182:             error_msg(\"Problem directory '%s' has already been processed\", dirname);",
          "183:             return 403;",
          "184:         }",
          "185:     }",
          "186:     else if (!dump_dir_accessible_by_uid(dirname, client_uid))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "381:     if (!dd)",
          "382:     {",
          "383:         error_msg_and_die(\"Error creating problem directory '%s'\", path);",
          "",
          "[Removed Lines]",
          "380:     struct dump_dir *dd = dd_create(path, client_uid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "[Added Lines]",
          "410:     struct dump_dir *dd = dd_create(path, g_settings_privatereports ? 0 : client_uid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "---------------"
        ],
        "src/daemon/abrt.conf||src/daemon/abrt.conf": [
          "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #                session; otherwise No.",
          "44: #",
          "45: # ShortenedReporting = yes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: # Disable this if you want to regular users to own the problem data colleted by",
          "48: # abrt.",
          "49: #",
          "50: PrivateReports = yes",
          "",
          "---------------"
        ],
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:         }",
          "683:     }",
          "686:     if (setting_MakeCompatCore && ulimit_c != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:     const uid_t dduid = g_settings_privatereports ? 0 : fsuid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "773:         goto create_user_core;",
          "774:     }",
          "784:     if (dd)",
          "785:     {",
          "786:         char *rootdir = get_rootdir(pid);",
          "788:         dd_create_basic_files(dd, fsuid, NULL);",
          "790:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
          "",
          "[Removed Lines]",
          "783:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
          "",
          "[Added Lines]",
          "786:     dd = dd_create_skeleton(path, dduid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
          "",
          "---------------"
        ],
        "src/include/libabrt.h||src/include/libabrt.h": [
          "File: src/include/libabrt.h -> src/include/libabrt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: extern char *        g_settings_autoreporting_event;",
          "63: #define g_settings_shortenedreporting abrt_g_settings_shortenedreporting",
          "64: extern bool          g_settings_shortenedreporting;",
          "67: #define load_abrt_conf abrt_load_abrt_conf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: #define g_settings_privatereports abrt_g_settings_privatereports",
          "66: extern bool          g_settings_privatereports;",
          "",
          "---------------"
        ],
        "src/lib/abrt_conf.c||src/lib/abrt_conf.c": [
          "File: src/lib/abrt_conf.c -> src/lib/abrt_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: bool          g_settings_autoreporting = 0;",
          "28: char *        g_settings_autoreporting_event = NULL;",
          "29: bool          g_settings_shortenedreporting = 0;",
          "31: void free_abrt_conf_data()",
          "32: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: bool          g_settings_privatereports = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     else",
          "103:         g_settings_shortenedreporting = 0;",
          "105:     GHashTableIter iter;",
          "106:     const char *name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     value = get_map_string_item_or_NULL(settings, \"PrivateReports\");",
          "107:     if (value)",
          "108:     {",
          "109:         g_settings_privatereports = string_to_bool(value);",
          "110:         remove_map_string_item(settings, \"PrivateReports\");",
          "111:     }",
          "",
          "---------------"
        ],
        "src/lib/hooklib.c||src/lib/hooklib.c": [
          "File: src/lib/hooklib.c -> src/lib/hooklib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410: {",
          "411:     load_abrt_conf();",
          "415:     char *problem_id = NULL;",
          "416:     if (dd)",
          "",
          "[Removed Lines]",
          "413:     struct dump_dir *dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
          "",
          "[Added Lines]",
          "413:     struct dump_dir *dd = NULL;",
          "415:     if (g_settings_privatereports)",
          "416:         dd = create_dump_dir_from_problem_data_ext(pd, g_settings_dump_location, 0);",
          "417:     else",
          "418:         dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
          "",
          "---------------"
        ],
        "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c": [
          "File: src/plugins/abrt-dump-oops.c -> src/plugins/abrt-dump-oops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         mode = DEFAULT_DUMP_DIR_MODE;",
          "190:         my_euid = geteuid();",
          "191:     }",
          "193:     pid_t my_pid = getpid();",
          "194:     unsigned idx = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     if (g_settings_privatereports)",
          "193:     {",
          "194:         if (world_readable_dump)",
          "195:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
          "197:         mode = DEFAULT_DUMP_DIR_MODE;",
          "198:         my_euid = 0;",
          "199:     }",
          "",
          "---------------"
        ],
        "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c": [
          "File: src/plugins/abrt-dump-xorg.c -> src/plugins/abrt-dump-xorg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         mode = DEFAULT_DUMP_DIR_MODE;",
          "83:         my_euid = geteuid();",
          "84:     }",
          "86:     pid_t my_pid = getpid();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     if (g_settings_privatereports)",
          "86:     {",
          "87:         if ((g_opts & OPT_x))",
          "88:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
          "90:         mode = DEFAULT_DUMP_DIR_MODE;",
          "91:         my_euid = 0;",
          "92:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7269a2cc88735aee0d1fa62491b9efe73ab5c6e8",
      "candidate_info": {
        "commit_hash": "7269a2cc88735aee0d1fa62491b9efe73ab5c6e8",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/7269a2cc88735aee0d1fa62491b9efe73ab5c6e8",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: revert the UID/GID changes if user core fails\n\nThanks Florian Weimer <fweimer@redhat.com>\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:         return -1;",
          "352:     }",
          "357:     if (strcmp(core_basename, \"core\") == 0)",
          "358:     {",
          "",
          "[Removed Lines]",
          "354:     xsetegid(get_fsgid());",
          "355:     xseteuid(fsuid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:     {",
          "465:     }",
          "467:     xsetegid(0);",
          "468:     xseteuid(0);",
          "471:      || !S_ISREG(sb.st_mode)",
          "472:      || sb.st_nlink != 1",
          "473:      || sb.st_uid != fsuid",
          "474:     ) {",
          "479:         goto user_core_fail;",
          "480:     }",
          "481:     if (ftruncate(user_core_fd, 0) != 0) {",
          "",
          "[Removed Lines]",
          "450:     if (newcon != NULL && setfscreatecon_raw(newcon) < 0)",
          "451:     {",
          "452:         perror_msg(\"setfscreatecon_raw(%s)\", newcon);",
          "453:         return -1;",
          "454:     }",
          "456:     struct stat sb;",
          "457:     errno = 0;",
          "461:     if (newcon != NULL && setfscreatecon_raw(NULL) < 0)",
          "463:         error_msg(\"setfscreatecon_raw(NULL)\");",
          "464:         goto user_core_fail;",
          "469:     if (user_core_fd < 0",
          "470:      || fstat(user_core_fd, &sb) != 0",
          "475:         if (user_core_fd < 0)",
          "476:             perror_msg(\"Can't open '%s' at '%s'\", core_basename, user_pwd);",
          "477:         else",
          "478:             perror_msg(\"'%s' at '%s' is not a regular file with link count 1 owned by UID(%d)\", core_basename, user_pwd, fsuid);",
          "",
          "[Added Lines]",
          "446:     int user_core_fd = -1;",
          "447:     int selinux_fail = 1;",
          "452:     xsetegid(get_fsgid());",
          "453:     xseteuid(fsuid);",
          "457:     if (/* SELinux is disabled  */ newcon == NULL",
          "458:      || /* or the call succeeds */ setfscreatecon_raw(newcon) >= 0)",
          "465:         if (user_core_fd < 0)",
          "466:             perror_msg(\"Can't open '%s' at '%s'\", core_basename, user_pwd);",
          "469:         if (newcon != NULL && setfscreatecon_raw(NULL) < 0)",
          "470:             perror_msg(\"setfscreatecon_raw(NULL)\");",
          "471:         else",
          "472:             selinux_fail = 0;",
          "474:     else",
          "475:         perror_msg(\"setfscreatecon_raw(%s)\", newcon);",
          "483:     if (user_core_fd < 0 || selinux_fail)",
          "484:         goto user_core_fail;",
          "486:     struct stat sb;",
          "487:     if (fstat(user_core_fd, &sb) != 0",
          "492:         perror_msg(\"'%s' at '%s' is not a regular file with link count 1 owned by UID(%d)\", core_basename, user_pwd, fsuid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28ce40d8db91c1926a95f21ef19a980a8af88471",
      "candidate_info": {
        "commit_hash": "28ce40d8db91c1926a95f21ef19a980a8af88471",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/28ce40d8db91c1926a95f21ef19a980a8af88471",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: check for overflow in abrt coredump path creation\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:         int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_TRUNC, 0600);",
          "674:         off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);",
          "675:         if (core_size < 0 || fsync(abrt_core_fd) != 0)",
          "",
          "[Removed Lines]",
          "672:         snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash);",
          "",
          "[Added Lines]",
          "672:         if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path))",
          "673:             error_msg_and_die(\"Error saving '%s': truncated long file path\", path);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f948bdc09aa346616852a421ce1af2e03b39997",
      "candidate_info": {
        "commit_hash": "2f948bdc09aa346616852a421ce1af2e03b39997",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/2f948bdc09aa346616852a421ce1af2e03b39997",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: create dump directory without parents\n\nThis patch makes the code more robust.\nThis patch ensures that abrt-hook-ccpp never creates the dump location.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:     if (dd)",
          "682:     {",
          "683:         char *rootdir = get_rootdir(pid);",
          "",
          "[Removed Lines]",
          "680:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "[Added Lines]",
          "680:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f2c1ddd3e3b81d2d5146b883115371f1cada9f9",
      "candidate_info": {
        "commit_hash": "4f2c1ddd3e3b81d2d5146b883115371f1cada9f9",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/4f2c1ddd3e3b81d2d5146b883115371f1cada9f9",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: do not read data from root directories\n\nUsers are allowed to modify /proc/[pid]/root to any directory by running\ntheir own MOUNT namespace.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "678:     {",
          "679:         char *rootdir = get_rootdir(pid);",
          "683:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
          "684:         int source_base_ofs = sprintf(source_filename, \"/proc/%lu/smaps\", (long)pid);",
          "",
          "[Removed Lines]",
          "681:         dd_create_basic_files(dd, fsuid, (rootdir && strcmp(rootdir, \"/\") != 0) ? rootdir : NULL);",
          "",
          "[Added Lines]",
          "681:         dd_create_basic_files(dd, fsuid, NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}