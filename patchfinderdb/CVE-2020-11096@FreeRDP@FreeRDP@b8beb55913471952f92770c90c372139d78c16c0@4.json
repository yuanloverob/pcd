{
  "cve_id": "CVE-2020-11096",
  "cve_desc": "In FreeRDP before version 2.1.2, there is a global OOB read in update_read_cache_bitmap_v3_order. As a workaround, one can disable bitmap cache with -bitmap-cache (default). This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "b8beb55913471952f92770c90c372139d78c16c0",
  "patch_info": {
    "commit_hash": "b8beb55913471952f92770c90c372139d78c16c0",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b8beb55913471952f92770c90c372139d78c16c0",
    "files": [
      "libfreerdp/core/orders.c"
    ],
    "message": "Fixed OOB read in update_read_cache_bitmap_v3_order\n\nCVE-2020-11096 thanks @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "113:  }",
      "114: }",
      "131: static BOOL check_order_activated(wLog* log, rdpSettings* settings, const char* orderName,",
      "132:                                   BOOL condition)",
      "",
      "[Removed Lines]",
      "116: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
      "118: static const BYTE BPP_CBR2[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
      "119:                               0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
      "121: static const BYTE CBR23_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
      "123: static const BYTE BPP_CBR23[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
      "124:                                0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
      "126: static const BYTE BMF_BPP[] = { 0, 1, 0, 8, 16, 24, 32, 0 };",
      "128: static const BYTE BPP_BMF[] = { 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
      "129:                              0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
      "",
      "[Added Lines]",
      "116: static BYTE get_cbr2_bpp(UINT32 bpp, BOOL* pValid)",
      "117: {",
      "118:  if (pValid)",
      "120:  switch (bpp)",
      "121:  {",
      "122:   case 3:",
      "123:    return 8;",
      "124:   case 4:",
      "125:    return 16;",
      "126:   case 5:",
      "127:    return 24;",
      "128:   case 6:",
      "129:    return 32;",
      "130:   default:",
      "131:    WLog_WARN(TAG, \"Invalid bpp %\" PRIu32, bpp);",
      "132:    if (pValid)",
      "134:    return 0;",
      "135:  }",
      "136: }",
      "138: static BYTE get_bmf_bpp(UINT32 bmf, BOOL* pValid)",
      "139: {",
      "140:  if (pValid)",
      "142:  switch (bmf)",
      "143:  {",
      "144:   case 1:",
      "145:    return 1;",
      "146:   case 3:",
      "147:    return 8;",
      "148:   case 4:",
      "149:    return 16;",
      "150:   case 5:",
      "151:    return 24;",
      "152:   case 6:",
      "153:    return 32;",
      "154:   default:",
      "155:    WLog_WARN(TAG, \"Invalid bmf %\" PRIu32, bmf);",
      "156:    if (pValid)",
      "158:    return 0;",
      "159:  }",
      "160: }",
      "161: static BYTE get_bpp_bmf(UINT32 bpp, BOOL* pValid)",
      "162: {",
      "163:  if (pValid)",
      "165:  switch (bpp)",
      "166:  {",
      "167:   case 1:",
      "168:    return 1;",
      "169:   case 8:",
      "170:    return 3;",
      "171:   case 16:",
      "172:    return 4;",
      "173:   case 24:",
      "174:    return 5;",
      "175:   case 32:",
      "176:    return 6;",
      "177:   default:",
      "178:    WLog_WARN(TAG, \"Invalid color depth %\" PRIu32, bpp);",
      "179:    if (pValid)",
      "181:    return 0;",
      "182:  }",
      "183: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "815:  if (brush->style & CACHED_BRUSH)",
      "816:  {",
      "817:   brush->index = brush->hatch;",
      "820:   if (brush->bpp == 0)",
      "821:    brush->bpp = 1;",
      "822:  }",
      "",
      "[Removed Lines]",
      "818:   brush->bpp = BMF_BPP[brush->style & 0x07];",
      "",
      "[Added Lines]",
      "871:   BOOL rc;",
      "873:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
      "874:   if (!rc)",
      "875:    return FALSE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "859:  if (brush->style & CACHED_BRUSH)",
      "860:  {",
      "861:   brush->hatch = brush->index;",
      "864:   if (brush->bpp == 0)",
      "865:    brush->bpp = 1;",
      "866:  }",
      "",
      "[Removed Lines]",
      "862:   brush->bpp = BMF_BPP[brush->style & 0x07];",
      "",
      "[Added Lines]",
      "917:   BOOL rc;",
      "919:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
      "920:   if (!rc)",
      "921:    return FALSE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2016: static CACHE_BITMAP_V2_ORDER* update_read_cache_bitmap_v2_order(rdpUpdate* update, wStream* s,",
      "2017:                                                                 BOOL compressed, UINT16 flags)",
      "2018: {",
      "2019:  BYTE bitsPerPixelId;",
      "2020:  CACHE_BITMAP_V2_ORDER* cache_bitmap_v2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2077:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2030:  cache_bitmap_v2->cacheId = flags & 0x0003;",
      "2031:  cache_bitmap_v2->flags = (flags & 0xFF80) >> 7;",
      "2032:  bitsPerPixelId = (flags & 0x0078) >> 3;",
      "2035:  if (cache_bitmap_v2->flags & CBR2_PERSISTENT_KEY_PRESENT)",
      "2036:  {",
      "",
      "[Removed Lines]",
      "2033:  cache_bitmap_v2->bitmapBpp = CBR2_BPP[bitsPerPixelId];",
      "",
      "[Added Lines]",
      "2092:  cache_bitmap_v2->bitmapBpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
      "2093:  if (!rc)",
      "2094:   goto fail;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2109: BOOL update_write_cache_bitmap_v2_order(wStream* s, CACHE_BITMAP_V2_ORDER* cache_bitmap_v2,",
      "2110:                                         BOOL compressed, UINT16* flags)",
      "2111: {",
      "2112:  BYTE bitsPerPixelId;",
      "2114:  if (!Stream_EnsureRemainingCapacity(",
      "2115:          s, update_approximate_cache_bitmap_v2_order(cache_bitmap_v2, compressed, flags)))",
      "2116:   return FALSE;",
      "2120:           ((cache_bitmap_v2->flags << 7) & 0xFF80);",
      "",
      "[Removed Lines]",
      "2118:  bitsPerPixelId = BPP_CBR2[cache_bitmap_v2->bitmapBpp];",
      "",
      "[Added Lines]",
      "2173:  BOOL rc;",
      "2180:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v2->bitmapBpp, &rc);",
      "2181:  if (!rc)",
      "2182:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2177: static CACHE_BITMAP_V3_ORDER* update_read_cache_bitmap_v3_order(rdpUpdate* update, wStream* s,",
      "2178:                                                                 UINT16 flags)",
      "2179: {",
      "2180:  BYTE bitsPerPixelId;",
      "2181:  BITMAP_DATA_EX* bitmapData;",
      "2182:  UINT32 new_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2244:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2194:  cache_bitmap_v3->cacheId = flags & 0x00000003;",
      "2195:  cache_bitmap_v3->flags = (flags & 0x0000FF80) >> 7;",
      "2196:  bitsPerPixelId = (flags & 0x00000078) >> 3;",
      "2199:  if (Stream_GetRemainingLength(s) < 21)",
      "2200:   goto fail;",
      "",
      "[Removed Lines]",
      "2197:  cache_bitmap_v3->bpp = CBR23_BPP[bitsPerPixelId];",
      "",
      "[Added Lines]",
      "2262:  cache_bitmap_v3->bpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
      "2263:  if (!rc)",
      "2264:   goto fail;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2242: BOOL update_write_cache_bitmap_v3_order(wStream* s, CACHE_BITMAP_V3_ORDER* cache_bitmap_v3,",
      "2243:                                         UINT16* flags)",
      "2244: {",
      "2245:  BYTE bitsPerPixelId;",
      "2246:  BITMAP_DATA_EX* bitmapData;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2312:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2250:   return FALSE;",
      "2252:  bitmapData = &cache_bitmap_v3->bitmapData;",
      "2255:           ((cache_bitmap_v3->flags << 7) & 0x0000FF80) | ((bitsPerPixelId << 3) & 0x00000078);",
      "",
      "[Removed Lines]",
      "2253:  bitsPerPixelId = BPP_CBR23[cache_bitmap_v3->bpp];",
      "",
      "[Added Lines]",
      "2321:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v3->bpp, &rc);",
      "2322:  if (!rc)",
      "2323:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2574: static CACHE_BRUSH_ORDER* update_read_cache_brush_order(rdpUpdate* update, wStream* s, UINT16 flags)",
      "2575: {",
      "2576:  int i;",
      "2577:  BYTE iBitmapFormat;",
      "2578:  BOOL compressed = FALSE;",
      "2579:  CACHE_BRUSH_ORDER* cache_brush = calloc(1, sizeof(CACHE_BRUSH_ORDER));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2647:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2591:   goto fail;",
      "",
      "[Removed Lines]",
      "2590:  if (iBitmapFormat >= ARRAYSIZE(BMF_BPP))",
      "2593:  cache_brush->bpp = BMF_BPP[iBitmapFormat];",
      "",
      "[Added Lines]",
      "2661:  cache_brush->bpp = get_bmf_bpp(iBitmapFormat, &rc);",
      "2662:  if (!rc)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2661: {",
      "2662:  int i;",
      "2663:  BYTE iBitmapFormat;",
      "2664:  BOOL compressed = FALSE;",
      "2666:  if (!Stream_EnsureRemainingCapacity(s,",
      "2667:                                      update_approximate_cache_brush_order(cache_brush, flags)))",
      "2668:   return FALSE;",
      "",
      "[Removed Lines]",
      "2670:  iBitmapFormat = BPP_BMF[cache_brush->bpp];",
      "",
      "[Added Lines]",
      "2735:  BOOL rc;",
      "2742:  iBitmapFormat = get_bpp_bmf(cache_brush->bpp, &rc);",
      "2743:  if (!rc)",
      "2744:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
      "candidate_info": {
        "commit_hash": "02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed possible integer overflow in crypto_rsa_common\n\nThanks @anticomputer for pointing this out",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  BIGNUM* exp = NULL;",
          "106:  BIGNUM* x = NULL;",
          "107:  BIGNUM* y = NULL;",
          "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
          "111:   return -1;",
          "113:  if (length > bufferSize)",
          "114:   bufferSize = length;",
          "",
          "[Removed Lines]",
          "108:  size_t bufferSize = 2 * key_length + exponent_size;",
          "",
          "[Added Lines]",
          "108:  size_t bufferSize;",
          "113:  if (exponent_size > SIZE_MAX / 2)",
          "114:   return -1;",
          "116:  if (key_length >= SIZE_MAX / 2 - exponent_size)",
          "117:   return -1;",
          "119:  bufferSize = 2ULL * key_length + exponent_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce1a9d8d1969ecbb4d24b9f4812654638a44abc2",
      "candidate_info": {
        "commit_hash": "ce1a9d8d1969ecbb4d24b9f4812654638a44abc2",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ce1a9d8d1969ecbb4d24b9f4812654638a44abc2",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed #6298: Mask CACHED_BRUSH when checking brush style",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ],
          "candidate": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: {",
          "140:  if (pValid)",
          "143:  {",
          "144:   case 1:",
          "145:    return 1;",
          "",
          "[Removed Lines]",
          "142:  switch (bmf)",
          "",
          "[Added Lines]",
          "143:  switch (bmf & (~CACHED_BRUSH))",
          "",
          "---------------"
        ]
      }
    }
  ]
}