{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
      "candidate_info": {
        "commit_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Fix a problem with processing CTEs that use a WINDOW clause.\n\nFossilOrigin-Name: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01d71b947a7422081d5c7d6ac2c91b9c936dc41926ab58c92f4a088a64e8c051",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2215:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "2216:     if( pNew ){",
          "2217:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "2218:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "2219:       pNew->pFunc = p->pFunc;",
          "2220:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2218:       pNew->zBase = sqlite3DbStrDup(db, p->zBase);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2227:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2228:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2229:       pNew->pOwner = pOwner;",
          "2230:     }",
          "2231:   }",
          "2232:   return pNew;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2231:       pNew->bImplicitFrame = p->bImplicitFrame;",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   }",
          "203: }",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: reset_db",
          "207: do_execsql_test 4.0 {",
          "208:   CREATE TABLE x(a);",
          "209:   INSERT INTO x VALUES(1);",
          "210:   INSERT INTO x VALUES(2);",
          "211: }",
          "213: do_execsql_test 4.1 {",
          "214:   WITH y AS (",
          "215:       SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION BY a)",
          "216:   )",
          "217:   SELECT * FROM y;",
          "218: } {",
          "219:   1 1",
          "220: }",
          "222: do_catchsql_test 4.2 {",
          "223:   WITH y AS (",
          "224:     SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION",
          "225:   BY fake_column))",
          "226:   SELECT * FROM y;",
          "227: } {1 {no such column: fake_column}}",
          "229: do_catchsql_test 4.3 {",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d446165f7d712dddbecb2f5eaeec418f019b4b7b",
      "candidate_info": {
        "commit_hash": "d446165f7d712dddbecb2f5eaeec418f019b4b7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d446165f7d712dddbecb2f5eaeec418f019b4b7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Minor optimization in sqlite3WindowCodeStep().\n\nFossilOrigin-Name: b1322ffb6e63a110998068bf4f0a903028bd4fc0464ae1e517d745fb46423f39",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25ff7091cb12c63b1864ce68a9151f8432af5804b5ae905a2175761ab4b9fdd8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2154:   s.start.csr = s.current.csr+2;",
          "2155:   s.end.csr = s.current.csr+3;",
          "2157:   regNew = pParse->nMem+1;",
          "2158:   pParse->nMem += nInput;",
          "2159:   regRecord = ++pParse->nMem;",
          "2160:   regRowid = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "2161:   regFlushPart = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2203:     int regNewPart = regNew + pMWin->nBufferCol;",
          "2204:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "2206:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "2207:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "2208:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2208:     regFlushPart = ++pParse->nMem;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
      "candidate_info": {
        "commit_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0e1a574875a5cb3021adb2327f2919b85f186ede",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test4.c"
        ],
        "message": "Change the name of some internal testing interfaces to avoid a name conflict in AIX.\n\nFossilOrigin-Name: c1cae7e7f0a612508c8f82b334d9ebc423f443e99b13092d52e26b348c7cbc5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test4.c||src/test4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 037da798fa5510ba7c776831ebcd683a85dca28e25bc657ff17bb2b08c3d406e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test4.c||src/test4.c": [
          "File: src/test4.c -> src/test4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   Thread *p = (Thread*)pArg;",
          "69:   if( p->db ){",
          "70:     sqlite3_close(p->db);",
          "",
          "[Removed Lines]",
          "67: static void *thread_main(void *pArg){",
          "",
          "[Added Lines]",
          "67: static void *test_thread_main(void *pArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   threadset[i].zFilename = sqlite3_mprintf(\"%s\", argv[2]);",
          "152:   threadset[i].opnum = 1;",
          "153:   threadset[i].completed = 0;",
          "155:   if( rc ){",
          "156:     Tcl_AppendResult(interp, \"failed to create the thread\", 0);",
          "157:     sqlite3_free(threadset[i].zFilename);",
          "",
          "[Removed Lines]",
          "154:   rc = pthread_create(&x, 0, thread_main, &threadset[i]);",
          "",
          "[Added Lines]",
          "154:   rc = pthread_create(&x, 0, test_thread_main, &threadset[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   while( p->opnum>p->completed ) sched_yield();",
          "170: }",
          "",
          "[Removed Lines]",
          "168: static void thread_wait(Thread *p){",
          "",
          "[Added Lines]",
          "168: static void test_thread_wait(Thread *p){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "194:     return TCL_ERROR;",
          "195:   }",
          "197:   return TCL_OK;",
          "198: }",
          "205:   p->xOp = 0;",
          "206:   p->opnum++;",
          "208:   sqlite3_free(p->zArg);",
          "209:   p->zArg = 0;",
          "210:   sqlite3_free(p->zFilename);",
          "",
          "[Removed Lines]",
          "196:   thread_wait(&threadset[i]);",
          "203: static void stop_thread(Thread *p){",
          "204:   thread_wait(p);",
          "207:   thread_wait(p);",
          "",
          "[Added Lines]",
          "196:   test_thread_wait(&threadset[i]);",
          "203: static void test_stop_thread(Thread *p){",
          "204:   test_thread_wait(p);",
          "207:   test_thread_wait(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:   }",
          "234:   if( argv[1][0]=='*' && argv[1][1]==0 ){",
          "235:     for(i=0; i<N_THREAD; i++){",
          "237:     }",
          "238:   }else{",
          "239:     i = parse_thread_id(interp, argv[1]);",
          "",
          "[Removed Lines]",
          "236:       if( threadset[i].busy ) stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "236:       if( threadset[i].busy ) test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:       Tcl_AppendResult(interp, \"no such thread\", 0);",
          "243:       return TCL_ERROR;",
          "244:     }",
          "246:   }",
          "247:   return TCL_OK;",
          "248: }",
          "",
          "[Removed Lines]",
          "245:     stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "245:     test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "274:     return TCL_ERROR;",
          "275:   }",
          "277:   sqlite3_snprintf(sizeof(zBuf), zBuf, \"%d\", threadset[i].argc);",
          "278:   Tcl_AppendResult(interp, zBuf, 0);",
          "279:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "276:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "276:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:     return TCL_ERROR;",
          "307:   }",
          "308:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "310:   if( n<0 || n>=threadset[i].argc ){",
          "311:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "312:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "309:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "309:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "342:     return TCL_ERROR;",
          "343:   }",
          "344:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "346:   if( n<0 || n>=threadset[i].argc ){",
          "347:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "348:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "345:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "345:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "378:     return TCL_ERROR;",
          "379:   }",
          "381:   zName = sqlite3ErrName(threadset[i].rc);",
          "382:   Tcl_AppendResult(interp, zName, 0);",
          "383:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "380:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "380:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "408:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "409:     return TCL_ERROR;",
          "410:   }",
          "412:   Tcl_AppendResult(interp, threadset[i].zErr, 0);",
          "413:   return TCL_OK;",
          "414: }",
          "",
          "[Removed Lines]",
          "411:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "411:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "452:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "453:     return TCL_ERROR;",
          "454:   }",
          "456:   threadset[i].xOp = do_compile;",
          "457:   sqlite3_free(threadset[i].zArg);",
          "458:   threadset[i].zArg = sqlite3_mprintf(\"%s\", argv[2]);",
          "",
          "[Removed Lines]",
          "455:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "455:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "505:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "506:     return TCL_ERROR;",
          "507:   }",
          "509:   threadset[i].xOp = do_step;",
          "510:   threadset[i].opnum++;",
          "511:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "508:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "508:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "547:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "548:     return TCL_ERROR;",
          "549:   }",
          "551:   threadset[i].xOp = do_finalize;",
          "552:   sqlite3_free(threadset[i].zArg);",
          "553:   threadset[i].zArg = 0;",
          "",
          "[Removed Lines]",
          "550:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "550:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "579:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "580:     return TCL_ERROR;",
          "581:   }",
          "583:   j = parse_thread_id(interp, argv[2]);",
          "584:   if( j<0 ) return TCL_ERROR;",
          "585:   if( !threadset[j].busy ){",
          "586:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "587:     return TCL_ERROR;",
          "588:   }",
          "590:   temp = threadset[i].db;",
          "591:   threadset[i].db = threadset[j].db;",
          "592:   threadset[j].db = temp;",
          "",
          "[Removed Lines]",
          "582:   thread_wait(&threadset[i]);",
          "589:   thread_wait(&threadset[j]);",
          "",
          "[Added Lines]",
          "582:   test_thread_wait(&threadset[i]);",
          "589:   test_thread_wait(&threadset[j]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "620:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "621:     return TCL_ERROR;",
          "622:   }",
          "624:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].db);",
          "625:   threadset[i].db = 0;",
          "626:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "623:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "623:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "651:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "652:     return TCL_ERROR;",
          "653:   }",
          "655:   assert( !threadset[i].db );",
          "656:   threadset[i].db = (sqlite3*)sqlite3TestTextToPtr(argv[2]);",
          "657:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "654:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "654:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "683:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "684:     return TCL_ERROR;",
          "685:   }",
          "687:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].pStmt);",
          "688:   threadset[i].pStmt = 0;",
          "689:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "686:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "686:   test_thread_wait(&threadset[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f1bf4c1acb724d0a90c4ecc8fea76f9406719f9",
      "candidate_info": {
        "commit_hash": "0f1bf4c1acb724d0a90c4ecc8fea76f9406719f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f1bf4c1acb724d0a90c4ecc8fea76f9406719f9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improved detection of database corruption while balancing pages from an auto_vacuum database with overflow pages.  Test cases in TH3.\n\nFossilOrigin-Name: 35f04235c477501390acea126d07a730d81d03cdf7abcd82d861e397b3f75b0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac3b6021d9437ab1c027850d321f0a3e575b008763d8d515e2347f7d4e7c294b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   #define ptrmapPut(w,x,y,z,rc)",
          "1068:   #define ptrmapGet(w,x,y,z) SQLITE_OK",
          "1070: #endif",
          "",
          "[Removed Lines]",
          "1069:   #define ptrmapPutOvflPtr(x, y, rc)",
          "",
          "[Added Lines]",
          "1069:   #define ptrmapPutOvflPtr(x, y, z, rc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1360: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "1367:   CellInfo info;",
          "1368:   if( *pRC ) return;",
          "1369:   assert( pCell!=0 );",
          "1370:   pPage->xParseCell(pPage, pCell, &info);",
          "1371:   if( info.nLocal<info.nPayload ){",
          "1372:     Pgno ovfl;",
          "1375:       return;",
          "1376:     }",
          "",
          "[Removed Lines]",
          "1366: static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){",
          "1373:     if( SQLITE_WITHIN(pPage->aDataEnd, pCell, pCell+info.nLocal) ){",
          "",
          "[Added Lines]",
          "1367: static void ptrmapPutOvflPtr(MemPage *pPage, MemPage *pSrc, u8 *pCell,int *pRC){",
          "1374:     if( SQLITE_WITHIN(pSrc->aDataEnd, pCell, pCell+info.nLocal) ){",
          "1375:       testcase( pSrc!=pPage );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3491:   for(i=0; i<nCell; i++){",
          "3492:     u8 *pCell = findCell(pPage, i);",
          "3496:     if( !pPage->leaf ){",
          "3497:       Pgno childPgno = get4byte(pCell);",
          "",
          "[Removed Lines]",
          "3494:     ptrmapPutOvflPtr(pPage, pCell, &rc);",
          "",
          "[Added Lines]",
          "3496:     ptrmapPutOvflPtr(pPage, pPage, pCell, &rc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6681:     }",
          "6682: #endif",
          "6683:   }",
          "",
          "[Removed Lines]",
          "6680:       ptrmapPutOvflPtr(pPage, pCell, pRC);",
          "",
          "[Added Lines]",
          "6682:       ptrmapPutOvflPtr(pPage, pPage, pCell, pRC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7093:     if( ISAUTOVACUUM ){",
          "7094:       ptrmapPut(pBt, pgnoNew, PTRMAP_BTREE, pParent->pgno, &rc);",
          "7095:       if( szCell>pNew->minLocal ){",
          "7097:       }",
          "7098:     }",
          "",
          "[Removed Lines]",
          "7096:         ptrmapPutOvflPtr(pNew, pCell, &rc);",
          "",
          "[Added Lines]",
          "7098:         ptrmapPutOvflPtr(pNew, pNew, pCell, &rc);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7316:   assert( sqlite3_mutex_held(pBt->mutex) );",
          "7317:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "",
          "[Removed Lines]",
          "7319: #if 0",
          "7320:   TRACE((\"BALANCE: begin page %d child of %d\\n\", pPage->pgno, pParent->pgno));",
          "7321: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7787:   if( ISAUTOVACUUM ){",
          "7789:     u8 *aOld = pNew->aData;",
          "7790:     int cntOldNext = pNew->nCell + pNew->nOverflow;",
          "7791:     int usableSize = pBt->usableSize;",
          "",
          "[Removed Lines]",
          "7788:     MemPage *pNew = apNew[0];",
          "",
          "[Added Lines]",
          "7786:     MemPage *pOld;",
          "7787:     MemPage *pNew = pOld = apNew[0];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7795:     for(i=0; i<b.nCell; i++){",
          "7796:       u8 *pCell = b.apCell[i];",
          "7797:       if( i==cntOldNext ){",
          "7799:         cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;",
          "7800:         aOld = pOld->aData;",
          "7801:       }",
          "",
          "[Removed Lines]",
          "7798:         MemPage *pOld = (++iOld)<nNew ? apNew[iOld] : apOld[iOld];",
          "",
          "[Added Lines]",
          "7797:         pOld = (++iOld)<nNew ? apNew[iOld] : apOld[iOld];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7818:           ptrmapPut(pBt, get4byte(pCell), PTRMAP_BTREE, pNew->pgno, &rc);",
          "7819:         }",
          "7820:         if( cachedCellSize(&b,i)>pNew->minLocal ){",
          "7822:         }",
          "7823:         if( rc ) goto balance_cleanup;",
          "7824:       }",
          "",
          "[Removed Lines]",
          "7821:           ptrmapPutOvflPtr(pNew, pCell, &rc);",
          "",
          "[Added Lines]",
          "7820:           ptrmapPutOvflPtr(pNew, pOld, pCell, &rc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e45985b5951c8afc544361157c819717641df7ee",
      "candidate_info": {
        "commit_hash": "e45985b5951c8afc544361157c819717641df7ee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e45985b5951c8afc544361157c819717641df7ee",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Fix a bug in the custom in-memory VFS used by fuzzcheck.  This bug masks other bugs that should have caused some existing fuzzdata7.db entries to fail, and so this fix is initially on a branch until those other bugs can be repaired.\n\nFossilOrigin-Name: e0994e99955cf11f23dba029b5ed7f150f467887558848d5f03510e2fb5855f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18740bd448887d618fafee0b5a7c004aa2f2632244f7d29e2428772baa36b828",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:   if( iOfst+iAmt>pVFile->sz ){",
          "448:     memset(pData, 0, iAmt);",
          "449:     iAmt = (int)(pVFile->sz - iOfst);",
          "451:     return SQLITE_IOERR_SHORT_READ;",
          "452:   }",
          "453:   memcpy(pData, pVFile->a + iOfst, iAmt);",
          "",
          "[Removed Lines]",
          "450:     memcpy(pData, pVFile->a, iAmt);",
          "",
          "[Added Lines]",
          "450:     memcpy(pData, pVFile->a + iOfst, iAmt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}