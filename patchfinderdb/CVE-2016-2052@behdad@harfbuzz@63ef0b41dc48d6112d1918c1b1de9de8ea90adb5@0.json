{
  "cve_id": "CVE-2016-2052",
  "cve_desc": "Multiple unspecified vulnerabilities in HarfBuzz before 1.0.6, as used in Google Chrome before 48.0.2564.82, allow attackers to cause a denial of service or possibly have other impact via crafted data, as demonstrated by a buffer over-read resulting from an inverted length check in hb-ot-font.cc, a different issue than CVE-2015-8947.",
  "repo": "behdad/harfbuzz",
  "patch_hash": "63ef0b41dc48d6112d1918c1b1de9de8ea90adb5",
  "patch_info": {
    "commit_hash": "63ef0b41dc48d6112d1918c1b1de9de8ea90adb5",
    "repo": "behdad/harfbuzz",
    "commit_url": "https://github.com/behdad/harfbuzz/commit/63ef0b41dc48d6112d1918c1b1de9de8ea90adb5",
    "files": [
      "src/hb-ot-font.cc"
    ],
    "message": "[ot-font] Fix hmtx wrong table length check\n\nDiscovered by libFuzzer.  Ouch!\n\nhttps://github.com/behdad/harfbuzz/issues/139#issuecomment-148289957",
    "before_after_code_files": [
      "src/hb-ot-font.cc||src/hb-ot-font.cc"
    ]
  },
  "patch_diff": {
    "src/hb-ot-font.cc||src/hb-ot-font.cc": [
      "File: src/hb-ot-font.cc -> src/hb-ot-font.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     this->blob = OT::Sanitizer<OT::_mtx>::sanitize (face->reference_table (_mtx_tag));",
      "61:     if (unlikely (!this->num_advances ||",
      "63:     {",
      "64:       this->num_metrics = this->num_advances = 0;",
      "65:       hb_blob_destroy (this->blob);",
      "",
      "[Removed Lines]",
      "62:     2 * (this->num_advances + this->num_metrics) < hb_blob_get_length (this->blob)))",
      "",
      "[Added Lines]",
      "62:     2 * (this->num_advances + this->num_metrics) > hb_blob_get_length (this->blob)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "505b7d4732c6a8c423f43c0de46e05dc583e82c0",
      "candidate_info": {
        "commit_hash": "505b7d4732c6a8c423f43c0de46e05dc583e82c0",
        "repo": "behdad/harfbuzz",
        "commit_url": "https://github.com/behdad/harfbuzz/commit/505b7d4732c6a8c423f43c0de46e05dc583e82c0",
        "files": [
          "test/fuzzing/hb-fuzzer.cc"
        ],
        "message": "[fuzzing] Fuzz input text\n\nVery rudimentary right now, but will get kcc's bot going.\n\nFrom\nhttps://github.com/behdad/harfbuzz/issues/139#issuecomment-163580783",
        "before_after_code_files": [
          "test/fuzzing/hb-fuzzer.cc||test/fuzzing/hb-fuzzer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/fuzzing/hb-fuzzer.cc||test/fuzzing/hb-fuzzer.cc": [
          "File: test/fuzzing/hb-fuzzer.cc -> test/fuzzing/hb-fuzzer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <stddef.h>",
          "2: #include <hb.h>",
          "3: #include <hb-ot.h>",
          "5: extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {",
          "8:   hb_blob_t *blob = hb_blob_create((const char *)data, size,",
          "9:                                    HB_MEMORY_MODE_READONLY, NULL, NULL);",
          "",
          "[Removed Lines]",
          "6:   const char text[] = \"ABCDEXYZ123@_%&)*$!\";",
          "",
          "[Added Lines]",
          "4: #include <string.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:   hb_ot_font_set_funcs(font);",
          "13:   hb_font_set_scale(font, 12, 12);",
          "22:   hb_font_destroy(font);",
          "23:   hb_face_destroy(face);",
          "24:   hb_blob_destroy(blob);",
          "",
          "[Removed Lines]",
          "15:   hb_buffer_t *buffer = hb_buffer_create();",
          "16:   hb_buffer_add_utf8(buffer, text, -1, 0, -1);",
          "17:   hb_buffer_guess_segment_properties(buffer);",
          "19:   hb_shape(font, buffer, NULL, 0);",
          "21:   hb_buffer_destroy(buffer);",
          "",
          "[Added Lines]",
          "15:   {",
          "16:     const char text[] = \"ABCDEXYZ123@_%&)*$!\";",
          "17:     hb_buffer_t *buffer = hb_buffer_create();",
          "18:     hb_buffer_add_utf8(buffer, text, -1, 0, -1);",
          "19:     hb_buffer_guess_segment_properties(buffer);",
          "20:     hb_shape(font, buffer, NULL, 0);",
          "21:     hb_buffer_destroy(buffer);",
          "22:   }",
          "24:   uint32_t text32[16];",
          "25:   if (size > sizeof(text32)) {",
          "26:     memcpy(text32, data + size - sizeof(text32), sizeof(text32));",
          "27:     hb_buffer_t *buffer = hb_buffer_create();",
          "28:     hb_buffer_add_utf32(buffer, text32, sizeof(text32)/sizeof(text32[0]), 0, -1);",
          "29:     hb_buffer_guess_segment_properties(buffer);",
          "30:     hb_shape(font, buffer, NULL, 0);",
          "31:     hb_buffer_destroy(buffer);",
          "32:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "338ffec9e4a5819f2be21c3a320a567378c977b1",
      "candidate_info": {
        "commit_hash": "338ffec9e4a5819f2be21c3a320a567378c977b1",
        "repo": "behdad/harfbuzz",
        "commit_url": "https://github.com/behdad/harfbuzz/commit/338ffec9e4a5819f2be21c3a320a567378c977b1",
        "files": [
          "test/shaping/fonts/sha1sum/375d6ae32a3cbe52fbf81a4e5777e3377675d5a3.ttf",
          "test/shaping/fonts/sha1sum/641bd9db850193064d17575053ae2bf8ec149ddc.ttf",
          "test/shaping/fonts/sha1sum/MANIFEST",
          "test/shaping/tests/fuzzed.tests"
        ],
        "message": "Add tests for a couple of fixed issues found by libFuzzer\n\nFrom:\nhttps://github.com/behdad/harfbuzz/issues/139#issuecomment-147616887\nhttps://github.com/behdad/harfbuzz/issues/139#issuecomment-148289957",
        "before_after_code_files": [
          "test/shaping/tests/fuzzed.tests||test/shaping/tests/fuzzed.tests"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/shaping/tests/fuzzed.tests||test/shaping/tests/fuzzed.tests": [
          "File: test/shaping/tests/fuzzed.tests -> test/shaping/tests/fuzzed.tests",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: fonts/sha1sum/1a6f1687b7a221f9f2c834b0b360d3c8463b6daf.ttf::U+0041:[gid0=0+1000]",
          "2: fonts/sha1sum/5a5daf5eb5a4db77a2baa3ad9c7a6ed6e0655fa8.ttf::U+0041:[gid0=0+1000]",
          "3: fonts/sha1sum/0509e80afb379d16560e9e47bdd7d888bebdebc6.ttf::U+0041:[gid0=0+1000]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: fonts/sha1sum/641bd9db850193064d17575053ae2bf8ec149ddc.ttf::U+0041:[gid0=0+1000]",
          "5: fonts/sha1sum/375d6ae32a3cbe52fbf81a4e5777e3377675d5a3.ttf::U+0041:[gid0=0+2048]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1a5dc46c2231f7b62421e06b9766ccfebaf3ef5",
      "candidate_info": {
        "commit_hash": "c1a5dc46c2231f7b62421e06b9766ccfebaf3ef5",
        "repo": "behdad/harfbuzz",
        "commit_url": "https://github.com/behdad/harfbuzz/commit/c1a5dc46c2231f7b62421e06b9766ccfebaf3ef5",
        "files": [
          "test/fuzzing/hb-fuzzer.cc"
        ],
        "message": "[fuzz] Add fuzzing script from kcc@\n\nhttps://github.com/behdad/harfbuzz/issues/139",
        "before_after_code_files": [
          "test/fuzzing/hb-fuzzer.cc||test/fuzzing/hb-fuzzer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/fuzzing/hb-fuzzer.cc||test/fuzzing/hb-fuzzer.cc": [
          "File: test/fuzzing/hb-fuzzer.cc -> test/fuzzing/hb-fuzzer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stddef.h>",
          "2: #include \"src/hb.h\"",
          "3: #include \"src/hb-ot.h\"",
          "5: extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {",
          "6:   const char text[] = \"ABCDEXYZ123@_%&)*$!\";",
          "8:   hb_blob_t *blob = hb_blob_create((const char *)data, size,",
          "9:                                    HB_MEMORY_MODE_READONLY, NULL, NULL);",
          "10:   hb_face_t *face = hb_face_create(blob, 0);",
          "11:   hb_font_t *font = hb_font_create(face);",
          "12:   hb_ot_font_set_funcs(font);",
          "13:   hb_font_set_scale(font, 12, 12);",
          "15:   hb_buffer_t *buffer = hb_buffer_create();",
          "16:   hb_buffer_add_utf8(buffer, text, -1, 0, -1);",
          "17:   hb_buffer_guess_segment_properties(buffer);",
          "19:   hb_shape(font, buffer, NULL, 0);",
          "21:   hb_buffer_destroy(buffer);",
          "22:   hb_font_destroy(font);",
          "23:   hb_face_destroy(face);",
          "24:   hb_blob_destroy(blob);",
          "25:   return 0;",
          "26: }",
          "28: #ifdef MAIN",
          "29: #include <iostream>",
          "30: #include <iterator>",
          "31: #include <fstream>",
          "32: #include <assert.h>",
          "34: std::string FileToString(const std::string &Path) {",
          "35:   std::ifstream T(Path.c_str());",
          "36:   return std::string((std::istreambuf_iterator<char>(T)),",
          "37:                      std::istreambuf_iterator<char>());",
          "38: }",
          "40: int main(int argc, char **argv) {",
          "41:   for (int i = 1; i < argc; i++) {",
          "42:     std::string s = FileToString(argv[i]);",
          "43:     std::cout << argv[i] << std::endl;",
          "44:     LLVMFuzzerTestOneInput((const unsigned char*)s.data(), s.size());",
          "45:   }",
          "46: }",
          "47: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f96664974774bfeb237a7274f512f64aaafb201e",
      "candidate_info": {
        "commit_hash": "f96664974774bfeb237a7274f512f64aaafb201e",
        "repo": "behdad/harfbuzz",
        "commit_url": "https://github.com/behdad/harfbuzz/commit/f96664974774bfeb237a7274f512f64aaafb201e",
        "files": [
          "src/hb-ot-layout-gpos-table.hh"
        ],
        "message": "Fix another memory access issue discovered by libFuzzer\n\nFixes https://github.com/behdad/harfbuzz/issues/139#issuecomment-146984679",
        "before_after_code_files": [
          "src/hb-ot-layout-gpos-table.hh||src/hb-ot-layout-gpos-table.hh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/hb-ot-layout-gpos-table.hh||src/hb-ot-layout-gpos-table.hh": [
          "File: src/hb-ot-layout-gpos-table.hh -> src/hb-ot-layout-gpos-table.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:   {",
          "705:     TRACE_SANITIZE (this);",
          "707:     unsigned int len1 = valueFormat1.get_len ();",
          "708:     unsigned int len2 = valueFormat2.get_len ();",
          "709:     PairSet::sanitize_closure_t closure = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707:     if (!c->check_struct (this)) return_trace (false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:       1 + len1 + len2",
          "714:     };",
          "717:   }",
          "719:   protected:",
          "",
          "[Removed Lines]",
          "716:     return_trace (c->check_struct (this) && coverage.sanitize (c, this) && pairSet.sanitize (c, this, &closure));",
          "",
          "[Added Lines]",
          "718:     return_trace (coverage.sanitize (c, this) && pairSet.sanitize (c, this, &closure));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed13e2ce509408f849255be1d3cc3dbd7dbb3ba2",
      "candidate_info": {
        "commit_hash": "ed13e2ce509408f849255be1d3cc3dbd7dbb3ba2",
        "repo": "behdad/harfbuzz",
        "commit_url": "https://github.com/behdad/harfbuzz/commit/ed13e2ce509408f849255be1d3cc3dbd7dbb3ba2",
        "files": [
          "src/hb-ot-font.cc"
        ],
        "message": "[ot-font] Fix leak\n\nhttps://github.com/behdad/harfbuzz/issues/139#issuecomment-147616887",
        "before_after_code_files": [
          "src/hb-ot-font.cc||src/hb-ot-font.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/hb-ot-font.cc||src/hb-ot-font.cc"
          ],
          "candidate": [
            "src/hb-ot-font.cc||src/hb-ot-font.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/hb-ot-font.cc||src/hb-ot-font.cc": [
          "File: src/hb-ot-font.cc -> src/hb-ot-font.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:   ot_font->cmap.fini ();",
          "262:   ot_font->h_metrics.fini ();",
          "263:   ot_font->v_metrics.fini ();",
          "265:   free (ot_font);",
          "266: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:   ot_font->glyf.fini ();",
          "",
          "---------------"
        ]
      }
    }
  ]
}