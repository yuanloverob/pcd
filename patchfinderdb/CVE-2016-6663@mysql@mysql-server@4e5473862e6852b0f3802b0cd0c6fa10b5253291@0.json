{
  "cve_id": "CVE-2016-6663",
  "cve_desc": "Race condition in Oracle MySQL before 5.5.52, 5.6.x before 5.6.33, 5.7.x before 5.7.15, and 8.x before 8.0.1; MariaDB before 5.5.52, 10.0.x before 10.0.28, and 10.1.x before 10.1.18; Percona Server before 5.5.51-38.2, 5.6.x before 5.6.32-78-1, and 5.7.x before 5.7.14-8; and Percona XtraDB Cluster before 5.5.41-37.0, 5.6.x before 5.6.32-25.17, and 5.7.x before 5.7.14-26.17 allows local users with certain permissions to gain privileges by leveraging use of my_copystat by REPAIR TABLE to repair a MyISAM table.",
  "repo": "mysql/mysql-server",
  "patch_hash": "4e5473862e6852b0f3802b0cd0c6fa10b5253291",
  "patch_info": {
    "commit_hash": "4e5473862e6852b0f3802b0cd0c6fa10b5253291",
    "repo": "mysql/mysql-server",
    "commit_url": "https://github.com/mysql/mysql-server/commit/4e5473862e6852b0f3802b0cd0c6fa10b5253291",
    "files": [
      "include/my_sys.h",
      "include/myisam.h",
      "mysys/my_redel.c",
      "storage/myisam/ha_myisam.cc",
      "storage/myisam/mi_check.c",
      "storage/myisam/myisamchk.c"
    ],
    "message": "Bug#24388746: PRIVILEGE ESCALATION AND RACE CONDITION USING CREATE TABLE\n\nDuring REPAIR TABLE of a MyISAM table, a temporary data file (.TMD)\nis created. When repair finishes, this file is renamed to the original\n.MYD file. The problem was that during this rename, we copied the\nstats from the old file to the new file with chmod/chown. If a user\nmanaged to replace the temporary file before chmod/chown was executed,\nit was possible to get an arbitrary file with the privileges of the\nmysql user.\n\nThis patch fixes the problem by not copying stats from the old\nfile to the new file. This is not needed as the new file was\ncreated with the correct stats. This fix only changes server\nbehavior - external utilities such as myisamchk still does\nchmod/chown.\n\nNo test case provided since the problem involves synchronization\nwith file system operations.",
    "before_after_code_files": [
      "include/my_sys.h||include/my_sys.h",
      "include/myisam.h||include/myisam.h",
      "mysys/my_redel.c||mysys/my_redel.c",
      "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
      "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
      "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
    ]
  },
  "patch_diff": {
    "include/my_sys.h||include/my_sys.h": [
      "File: include/my_sys.h -> include/my_sys.h"
    ],
    "include/myisam.h||include/myisam.h": [
      "File: include/myisam.h -> include/myisam.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:    This program is free software; you can redistribute it and/or modify",
      "5:    it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "2:    Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.",
      "",
      "[Added Lines]",
      "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "426: int chk_key(MI_CHECK *param, MI_INFO *info);",
      "427: int chk_data_link(MI_CHECK *param, MI_INFO *info,int extend);",
      "428: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
      "431: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
      "433: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
      "435: int change_to_newfile(const char * filename, const char * old_ext,",
      "436:         const char * new_ext, myf myflags);",
      "437: int lock_file(MI_CHECK *param, File file, my_off_t start, int lock_type,",
      "",
      "[Removed Lines]",
      "429:        char * name, int rep_quick);",
      "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name);",
      "432:         const char * name, int rep_quick);",
      "434:         const char * name, int rep_quick);",
      "",
      "[Added Lines]",
      "429:        char * name, int rep_quick, my_bool no_copy_stat);",
      "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
      "431:                   my_bool no_copy_stat);",
      "433:         const char * name, int rep_quick, my_bool no_copy_stat);",
      "435:                        const char * name, int rep_quick, my_bool no_copy_stat);",
      "",
      "---------------"
    ],
    "mysys/my_redel.c||mysys/my_redel.c": [
      "File: mysys/my_redel.c -> mysys/my_redel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:    if MY_REDEL_MAKE_COPY is given, then the orginal file",
      "37:    is renamed to org_name-'current_time'.BAK",
      "40: #define REDEL_EXT \".BAK\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:           if MY_REDEL_NO_COPY_STAT is given, stats are not copied",
      "40:           from org_name to tmp_name.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46:   DBUG_PRINT(\"my\",(\"org_name: '%s' tmp_name: '%s'  MyFlags: %d\",",
      "47:      org_name,tmp_name,MyFlags));",
      "51:   if (MyFlags & MY_REDEL_MAKE_BACKUP)",
      "52:   {",
      "53:     char name_buff[FN_REFLEN+20];",
      "",
      "[Removed Lines]",
      "49:   if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
      "50:     goto end;",
      "",
      "[Added Lines]",
      "52:   if (!(MyFlags & MY_REDEL_NO_COPY_STAT))",
      "53:   {",
      "54:     if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
      "55:       goto end;",
      "56:   }",
      "",
      "---------------"
    ],
    "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc": [
      "File: storage/myisam/ha_myisam.cc -> storage/myisam/ha_myisam.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:    This program is free software; you can redistribute it and/or modify",
      "5:    it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "2:    Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.",
      "",
      "[Added Lines]",
      "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1092:         my_snprintf(buf, 40, \"Repair with %d threads\", my_count_bits(key_map));",
      "1093:         thd_proc_info(thd, buf);",
      "1094:         error = mi_repair_parallel(&param, file, fixed_name,",
      "1096:         thd_proc_info(thd, \"Repair done\"); // to reset proc_info, as",
      "1098:       }",
      "1099:       else",
      "1100:       {",
      "1101:         thd_proc_info(thd, \"Repair by sorting\");",
      "1102:         error = mi_repair_by_sort(&param, file, fixed_name,",
      "1104:       }",
      "1105:     }",
      "1106:     else",
      "1107:     {",
      "1108:       thd_proc_info(thd, \"Repair with keycache\");",
      "1109:       param.testflag &= ~T_REP_BY_SORT;",
      "1110:       error=  mi_repair(&param, file, fixed_name,",
      "1112:     }",
      "1113: #ifdef HAVE_MMAP",
      "1114:     if (remap)",
      "",
      "[Removed Lines]",
      "1095:             param.testflag & T_QUICK);",
      "1103:             param.testflag & T_QUICK);",
      "1111:    param.testflag & T_QUICK);",
      "",
      "[Added Lines]",
      "1095:           The new file is created with the right stats, so we can skip",
      "1096:           copying file stats from old to new.",
      "1099:                                    param.testflag & T_QUICK, TRUE);",
      "1107:           The new file is created with the right stats, so we can skip",
      "1108:           copying file stats from old to new.",
      "1111:                                   param.testflag & T_QUICK, TRUE);",
      "1119:         The new file is created with the right stats, so we can skip",
      "1120:         copying file stats from old to new.",
      "1123:    param.testflag & T_QUICK, TRUE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1124:     {",
      "1125:       optimize_done=1;",
      "1126:       thd_proc_info(thd, \"Sorting index\");",
      "1128:     }",
      "1129:     if (!statistics_done && (local_testflag & T_STATISTICS))",
      "1130:     {",
      "",
      "[Removed Lines]",
      "1127:       error=mi_sort_index(&param,file,fixed_name);",
      "",
      "[Added Lines]",
      "1140:         The new file is created with the right stats, so we can skip",
      "1141:         copying file stats from old to new.",
      "1143:       error=mi_sort_index(&param,file,fixed_name, TRUE);",
      "",
      "---------------"
    ],
    "storage/myisam/mi_check.c||storage/myisam/mi_check.c": [
      "File: storage/myisam/mi_check.c -> storage/myisam/mi_check.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:    This program is free software; you can redistribute it and/or modify",
      "5:    it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "2:    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.",
      "",
      "[Added Lines]",
      "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1514: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
      "1516: {",
      "1517:   int error,got_error;",
      "1518:   ha_rows start_records,new_header_length;",
      "",
      "[Removed Lines]",
      "1515:        char * name, int rep_quick)",
      "",
      "[Added Lines]",
      "1515:        char * name, int rep_quick, my_bool no_copy_stat)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1727:     if (new_file >= 0)",
      "1728:     {",
      "1729:       mysql_file_close(new_file, MYF(0));",
      "1730:       info->dfile=new_file= -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1729:       myf flags= 0;",
      "1730:       if (param->testflag & T_BACKUP_DATA)",
      "1731:         flags |= MY_REDEL_MAKE_BACKUP;",
      "1732:       if (no_copy_stat)",
      "1733:         flags |= MY_REDEL_NO_COPY_STAT;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1744:         info->s->file_map= NULL;",
      "1745:       }",
      "1746:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
      "1749:    mi_open_datafile(info,share,name,-1))",
      "1750:  got_error=1;",
      "",
      "[Removed Lines]",
      "1747:        (param->testflag & T_BACKUP_DATA ?",
      "1748:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
      "",
      "[Added Lines]",
      "1752:                             flags) ||",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1937: {",
      "1938:   reg2 uint key;",
      "1939:   reg1 MI_KEYDEF *keyinfo;",
      "",
      "[Removed Lines]",
      "1936: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name)",
      "",
      "[Added Lines]",
      "1940: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
      "1941:                   my_bool no_copy_stat)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2004:   share->kfile = -1;",
      "2005:   (void) mysql_file_close(new_file, MYF(MY_WME));",
      "2006:   if (change_to_newfile(share->index_file_name, MI_NAME_IEXT, INDEX_TMP_EXT,",
      "2008:       mi_open_keyfile(share))",
      "2009:     goto err2;",
      "",
      "[Removed Lines]",
      "2007:    MYF(0)) ||",
      "",
      "[Added Lines]",
      "2012:    no_copy_stat ? MYF(MY_REDEL_NO_COPY_STAT) : MYF(0)) ||",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2209:     info  MyISAM handler to repair",
      "2210:     name  Name of table (for warnings)",
      "2211:     rep_quick  set to <> 0 if we should not change data file",
      "2213:   RESULT",
      "2214:     0 ok",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2217:     no_copy_stat        Don't copy file stats from old to new file,",
      "2218:                         assume that new file was created with correct stats",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2218: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
      "2220: {",
      "2221:   int got_error;",
      "2222:   uint i;",
      "",
      "[Removed Lines]",
      "2219:         const char * name, int rep_quick)",
      "",
      "[Added Lines]",
      "2226:         const char * name, int rep_quick, my_bool no_copy_stat)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2544:     if (new_file >= 0)",
      "2545:     {",
      "2546:       mysql_file_close(new_file, MYF(0));",
      "2547:       info->dfile=new_file= -1;",
      "2548:       if (change_to_newfile(share->data_file_name,MI_NAME_DEXT, DATA_TMP_EXT,",
      "2551:    mi_open_datafile(info,share,name,-1))",
      "2552:  got_error=1;",
      "2553:     }",
      "",
      "[Removed Lines]",
      "2549:        (param->testflag & T_BACKUP_DATA ?",
      "2550:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
      "",
      "[Added Lines]",
      "2553:       myf flags= 0;",
      "2554:       if (param->testflag & T_BACKUP_DATA)",
      "2555:         flags |= MY_REDEL_MAKE_BACKUP;",
      "2556:       if (no_copy_stat)",
      "2557:         flags |= MY_REDEL_NO_COPY_STAT;",
      "2561:                             flags) ||",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2595:     info  MyISAM handler to repair",
      "2596:     name  Name of table (for warnings)",
      "2597:     rep_quick  set to <> 0 if we should not change data file",
      "2599:   DESCRIPTION",
      "2600:     Same as mi_repair_by_sort but do it multithreaded",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2609:     no_copy_stat        Don't copy file stats from old to new file,",
      "2610:                         assume that new file was created with correct stats",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2631: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
      "2633: {",
      "2634:   int got_error;",
      "2635:   uint i,key, total_key_length, istep;",
      "",
      "[Removed Lines]",
      "2632:    const char * name, int rep_quick)",
      "",
      "[Added Lines]",
      "2645:                        const char * name, int rep_quick, my_bool no_copy_stat)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "3077:     if (new_file >= 0)",
      "3078:     {",
      "3079:       mysql_file_close(new_file, MYF(0));",
      "3080:       info->dfile=new_file= -1;",
      "3081:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
      "3084:    mi_open_datafile(info,share,name,-1))",
      "3085:  got_error=1;",
      "3086:     }",
      "",
      "[Removed Lines]",
      "3082:        (param->testflag & T_BACKUP_DATA ?",
      "3083:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
      "",
      "[Added Lines]",
      "3092:       myf flags= 0;",
      "3093:       if (param->testflag & T_BACKUP_DATA)",
      "3094:         flags |= MY_REDEL_MAKE_BACKUP;",
      "3095:       if (no_copy_stat)",
      "3096:         flags |= MY_REDEL_NO_COPY_STAT;",
      "3100:        flags) ||",
      "",
      "---------------"
    ],
    "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c": [
      "File: storage/myisam/myisamchk.c -> storage/myisam/myisamchk.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "993:     info->s->state.key_map,",
      "994:     param->force_sort))",
      "995:  {",
      "996:           if (param->testflag & T_REP_BY_SORT)",
      "998:           else",
      "1000:    state_updated=1;",
      "1001:  }",
      "1002:  else if (param->testflag & T_REP_ANY)",
      "1004:       }",
      "1005:       if (!error && param->testflag & T_SORT_RECORDS)",
      "1006:       {",
      "",
      "[Removed Lines]",
      "997:             error=mi_repair_by_sort(param,info,filename,rep_quick);",
      "999:             error=mi_repair_parallel(param,info,filename,rep_quick);",
      "1003:    error=mi_repair(param, info,filename,rep_quick);",
      "",
      "[Added Lines]",
      "997:             The new file might not be created with the right stats depending",
      "998:             on how myisamchk is run, so we must copy file stats from old to new.",
      "1001:             error= mi_repair_by_sort(param, info, filename, rep_quick, FALSE);",
      "1003:             error= mi_repair_parallel(param, info, filename, rep_quick, FALSE);",
      "1007:    error= mi_repair(param, info, filename, rep_quick, FALSE);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1040:    {",
      "1041:      if (param->verbose)",
      "1042:        puts(\"Table had a compressed index;  We must now recreate the index\");",
      "1044:    }",
      "1045:  }",
      "1046:       }",
      "1047:       if (!error && param->testflag & T_SORT_INDEX)",
      "1049:       if (!error)",
      "1050:  share->state.changed&= ~(STATE_CHANGED | STATE_CRASHED |",
      "1051:      STATE_CRASHED_ON_REPAIR);",
      "",
      "[Removed Lines]",
      "1043:      error=mi_repair_by_sort(param,info,filename,1);",
      "1048:  error=mi_sort_index(param,info,filename);",
      "",
      "[Added Lines]",
      "1047:      error= mi_repair_by_sort(param, info, filename, 1, FALSE);",
      "1052:  error= mi_sort_index(param, info, filename, FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "033b11912121ad2c1dbd4a93202eeac196124801",
      "candidate_info": {
        "commit_hash": "033b11912121ad2c1dbd4a93202eeac196124801",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/033b11912121ad2c1dbd4a93202eeac196124801",
        "files": [
          "include/my_sys.h",
          "include/myisam.h",
          "mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c"
        ],
        "message": "Bug#24388746: PRIVILEGE ESCALATION AND RACE CONDITION USING CREATE TABLE\n\nDuring REPAIR TABLE of a MyISAM table, a temporary data file (.TMD)\nis created. When repair finishes, this file is renamed to the original\n.MYD file. The problem was that during this rename, we copied the\nstats from the old file to the new file with chmod/chown. If a user\nmanaged to replace the temporary file before chmod/chown was executed,\nit was possible to get an arbitrary file with the privileges of the\nmysql user.\n\nThis patch fixes the problem by not copying stats from the old\nfile to the new file. This is not needed as the new file was\ncreated with the correct stats. This fix only changes server\nbehavior - external utilities such as myisamchk still does\nchmod/chown.\n\nNo test case provided since the problem involves synchronization\nwith file system operations.",
        "before_after_code_files": [
          "include/my_sys.h||include/my_sys.h",
          "include/myisam.h||include/myisam.h",
          "mysys/my_redel.c||mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ],
          "candidate": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ]
        }
      },
      "candidate_diff": {
        "include/my_sys.h||include/my_sys.h": [
          "File: include/my_sys.h -> include/my_sys.h"
        ],
        "include/myisam.h||include/myisam.h": [
          "File: include/myisam.h -> include/myisam.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426: int chk_key(MI_CHECK *param, MI_INFO *info);",
          "427: int chk_data_link(MI_CHECK *param, MI_INFO *info,int extend);",
          "428: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
          "431: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
          "433: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
          "435: int change_to_newfile(const char * filename, const char * old_ext,",
          "436:         const char * new_ext, myf myflags);",
          "437: int lock_file(MI_CHECK *param, File file, my_off_t start, int lock_type,",
          "",
          "[Removed Lines]",
          "429:        char * name, int rep_quick);",
          "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name);",
          "432:         const char * name, int rep_quick);",
          "434:         const char * name, int rep_quick);",
          "",
          "[Added Lines]",
          "429:        char * name, int rep_quick, my_bool no_copy_stat);",
          "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
          "431:                   my_bool no_copy_stat);",
          "433:         const char * name, int rep_quick, my_bool no_copy_stat);",
          "435:                        const char * name, int rep_quick, my_bool no_copy_stat);",
          "",
          "---------------"
        ],
        "mysys/my_redel.c||mysys/my_redel.c": [
          "File: mysys/my_redel.c -> mysys/my_redel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:    if MY_REDEL_MAKE_COPY is given, then the orginal file",
          "37:    is renamed to org_name-'current_time'.BAK",
          "40: #define REDEL_EXT \".BAK\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:           if MY_REDEL_NO_COPY_STAT is given, stats are not copied",
          "40:           from org_name to tmp_name.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   DBUG_PRINT(\"my\",(\"org_name: '%s' tmp_name: '%s'  MyFlags: %d\",",
          "47:      org_name,tmp_name,MyFlags));",
          "51:   if (MyFlags & MY_REDEL_MAKE_BACKUP)",
          "52:   {",
          "53:     char name_buff[FN_REFLEN+20];",
          "",
          "[Removed Lines]",
          "49:   if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "50:     goto end;",
          "",
          "[Added Lines]",
          "52:   if (!(MyFlags & MY_REDEL_NO_COPY_STAT))",
          "53:   {",
          "54:     if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "55:       goto end;",
          "56:   }",
          "",
          "---------------"
        ],
        "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc": [
          "File: storage/myisam/ha_myisam.cc -> storage/myisam/ha_myisam.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1092:         my_snprintf(buf, 40, \"Repair with %d threads\", my_count_bits(key_map));",
          "1093:         thd_proc_info(thd, buf);",
          "1094:         error = mi_repair_parallel(&param, file, fixed_name,",
          "1096:         thd_proc_info(thd, \"Repair done\"); // to reset proc_info, as",
          "1098:       }",
          "1099:       else",
          "1100:       {",
          "1101:         thd_proc_info(thd, \"Repair by sorting\");",
          "1102:         error = mi_repair_by_sort(&param, file, fixed_name,",
          "1104:       }",
          "1105:     }",
          "1106:     else",
          "1107:     {",
          "1108:       thd_proc_info(thd, \"Repair with keycache\");",
          "1109:       param.testflag &= ~T_REP_BY_SORT;",
          "1110:       error=  mi_repair(&param, file, fixed_name,",
          "1112:     }",
          "1113: #ifdef HAVE_MMAP",
          "1114:     if (remap)",
          "",
          "[Removed Lines]",
          "1095:             param.testflag & T_QUICK);",
          "1103:             param.testflag & T_QUICK);",
          "1111:    param.testflag & T_QUICK);",
          "",
          "[Added Lines]",
          "1095:           The new file is created with the right stats, so we can skip",
          "1096:           copying file stats from old to new.",
          "1099:                                    param.testflag & T_QUICK, TRUE);",
          "1107:           The new file is created with the right stats, so we can skip",
          "1108:           copying file stats from old to new.",
          "1111:                                   param.testflag & T_QUICK, TRUE);",
          "1119:         The new file is created with the right stats, so we can skip",
          "1120:         copying file stats from old to new.",
          "1123:    param.testflag & T_QUICK, TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1124:     {",
          "1125:       optimize_done=1;",
          "1126:       thd_proc_info(thd, \"Sorting index\");",
          "1128:     }",
          "1129:     if (!statistics_done && (local_testflag & T_STATISTICS))",
          "1130:     {",
          "",
          "[Removed Lines]",
          "1127:       error=mi_sort_index(&param,file,fixed_name);",
          "",
          "[Added Lines]",
          "1140:         The new file is created with the right stats, so we can skip",
          "1141:         copying file stats from old to new.",
          "1143:       error=mi_sort_index(&param,file,fixed_name, TRUE);",
          "",
          "---------------"
        ],
        "storage/myisam/mi_check.c||storage/myisam/mi_check.c": [
          "File: storage/myisam/mi_check.c -> storage/myisam/mi_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1514: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
          "1516: {",
          "1517:   int error,got_error;",
          "1518:   ha_rows start_records,new_header_length;",
          "",
          "[Removed Lines]",
          "1515:        char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "1515:        char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1727:     if (new_file >= 0)",
          "1728:     {",
          "1729:       mysql_file_close(new_file, MYF(0));",
          "1730:       info->dfile=new_file= -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1729:       myf flags= 0;",
          "1730:       if (param->testflag & T_BACKUP_DATA)",
          "1731:         flags |= MY_REDEL_MAKE_BACKUP;",
          "1732:       if (no_copy_stat)",
          "1733:         flags |= MY_REDEL_NO_COPY_STAT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1744:         info->s->file_map= NULL;",
          "1745:       }",
          "1746:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "1749:    mi_open_datafile(info,share,name,-1))",
          "1750:  got_error=1;",
          "",
          "[Removed Lines]",
          "1747:        (param->testflag & T_BACKUP_DATA ?",
          "1748:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "1752:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1937: {",
          "1938:   reg2 uint key;",
          "1939:   reg1 MI_KEYDEF *keyinfo;",
          "",
          "[Removed Lines]",
          "1936: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name)",
          "",
          "[Added Lines]",
          "1940: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
          "1941:                   my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2004:   share->kfile = -1;",
          "2005:   (void) mysql_file_close(new_file, MYF(MY_WME));",
          "2006:   if (change_to_newfile(share->index_file_name, MI_NAME_IEXT, INDEX_TMP_EXT,",
          "2008:       mi_open_keyfile(share))",
          "2009:     goto err2;",
          "",
          "[Removed Lines]",
          "2007:    MYF(0)) ||",
          "",
          "[Added Lines]",
          "2012:    no_copy_stat ? MYF(MY_REDEL_NO_COPY_STAT) : MYF(0)) ||",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2209:     info  MyISAM handler to repair",
          "2210:     name  Name of table (for warnings)",
          "2211:     rep_quick  set to <> 0 if we should not change data file",
          "2213:   RESULT",
          "2214:     0 ok",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2217:     no_copy_stat        Don't copy file stats from old to new file,",
          "2218:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2218: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
          "2220: {",
          "2221:   int got_error;",
          "2222:   uint i;",
          "",
          "[Removed Lines]",
          "2219:         const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2226:         const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2544:     if (new_file >= 0)",
          "2545:     {",
          "2546:       mysql_file_close(new_file, MYF(0));",
          "2547:       info->dfile=new_file= -1;",
          "2548:       if (change_to_newfile(share->data_file_name,MI_NAME_DEXT, DATA_TMP_EXT,",
          "2551:    mi_open_datafile(info,share,name,-1))",
          "2552:  got_error=1;",
          "2553:     }",
          "",
          "[Removed Lines]",
          "2549:        (param->testflag & T_BACKUP_DATA ?",
          "2550:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "2553:       myf flags= 0;",
          "2554:       if (param->testflag & T_BACKUP_DATA)",
          "2555:         flags |= MY_REDEL_MAKE_BACKUP;",
          "2556:       if (no_copy_stat)",
          "2557:         flags |= MY_REDEL_NO_COPY_STAT;",
          "2561:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2595:     info  MyISAM handler to repair",
          "2596:     name  Name of table (for warnings)",
          "2597:     rep_quick  set to <> 0 if we should not change data file",
          "2599:   DESCRIPTION",
          "2600:     Same as mi_repair_by_sort but do it multithreaded",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2609:     no_copy_stat        Don't copy file stats from old to new file,",
          "2610:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2631: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
          "2633: {",
          "2634:   int got_error;",
          "2635:   uint i,key, total_key_length, istep;",
          "",
          "[Removed Lines]",
          "2632:    const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2645:                        const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3077:     if (new_file >= 0)",
          "3078:     {",
          "3079:       mysql_file_close(new_file, MYF(0));",
          "3080:       info->dfile=new_file= -1;",
          "3081:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "3084:    mi_open_datafile(info,share,name,-1))",
          "3085:  got_error=1;",
          "3086:     }",
          "",
          "[Removed Lines]",
          "3082:        (param->testflag & T_BACKUP_DATA ?",
          "3083:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "3092:       myf flags= 0;",
          "3093:       if (param->testflag & T_BACKUP_DATA)",
          "3094:         flags |= MY_REDEL_MAKE_BACKUP;",
          "3095:       if (no_copy_stat)",
          "3096:         flags |= MY_REDEL_NO_COPY_STAT;",
          "3100:        flags) ||",
          "",
          "---------------"
        ],
        "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c": [
          "File: storage/myisam/myisamchk.c -> storage/myisam/myisamchk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:     info->s->state.key_map,",
          "994:     param->force_sort))",
          "995:  {",
          "996:           if (param->testflag & T_REP_BY_SORT)",
          "998:           else",
          "1000:    state_updated=1;",
          "1001:  }",
          "1002:  else if (param->testflag & T_REP_ANY)",
          "1004:       }",
          "1005:       if (!error && param->testflag & T_SORT_RECORDS)",
          "1006:       {",
          "",
          "[Removed Lines]",
          "997:             error=mi_repair_by_sort(param,info,filename,rep_quick);",
          "999:             error=mi_repair_parallel(param,info,filename,rep_quick);",
          "1003:    error=mi_repair(param, info,filename,rep_quick);",
          "",
          "[Added Lines]",
          "997:             The new file might not be created with the right stats depending",
          "998:             on how myisamchk is run, so we must copy file stats from old to new.",
          "1001:             error= mi_repair_by_sort(param, info, filename, rep_quick, FALSE);",
          "1003:             error= mi_repair_parallel(param, info, filename, rep_quick, FALSE);",
          "1007:    error= mi_repair(param, info, filename, rep_quick, FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:    {",
          "1041:      if (param->verbose)",
          "1042:        puts(\"Table had a compressed index;  We must now recreate the index\");",
          "1044:    }",
          "1045:  }",
          "1046:       }",
          "1047:       if (!error && param->testflag & T_SORT_INDEX)",
          "1049:       if (!error)",
          "1050:  share->state.changed&= ~(STATE_CHANGED | STATE_CRASHED |",
          "1051:      STATE_CRASHED_ON_REPAIR);",
          "",
          "[Removed Lines]",
          "1043:      error=mi_repair_by_sort(param,info,filename,1);",
          "1048:  error=mi_sort_index(param,info,filename);",
          "",
          "[Added Lines]",
          "1047:      error= mi_repair_by_sort(param, info, filename, 1, FALSE);",
          "1052:  error= mi_sort_index(param, info, filename, FALSE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63dc9c3f42858e0f855abb875f37cb096cf3ae27",
      "candidate_info": {
        "commit_hash": "63dc9c3f42858e0f855abb875f37cb096cf3ae27",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/63dc9c3f42858e0f855abb875f37cb096cf3ae27",
        "files": [
          "storage/myisam/mi_check.c"
        ],
        "message": "Bug #22214852: MYSQL 5.5 AND 5.6: MAIN.KEY AND OTHER                FAILURE WITH VALGRIND FOR RELEASE BUILD\n\nIssue:\n------\nInitialization of variable with UNINIT_VAR is flagged by\nvalgrind 3.11.\n\nSOLUTION:\n---------\nInitialize the variable to 0.\n\nThis is a backport of Bug# 14580121.",
        "before_after_code_files": [
          "storage/myisam/mi_check.c||storage/myisam/mi_check.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c"
          ],
          "candidate": [
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c"
          ]
        }
      },
      "candidate_diff": {
        "storage/myisam/mi_check.c||storage/myisam/mi_check.c": [
          "File: storage/myisam/mi_check.c -> storage/myisam/mi_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: {",
          "139:   reg2 ha_rows i;",
          "140:   uint delete_link_length;",
          "142:   char buff[22],buff2[22];",
          "143:   DBUG_ENTER(\"chk_del\");",
          "",
          "[Removed Lines]",
          "141:   my_off_t empty,next_link,UNINIT_VAR(old_link);",
          "",
          "[Added Lines]",
          "141:   my_off_t empty, next_link, old_link= 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ad8a411d6f9f73a65e42efa7eb67549a0637a02",
      "candidate_info": {
        "commit_hash": "8ad8a411d6f9f73a65e42efa7eb67549a0637a02",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/8ad8a411d6f9f73a65e42efa7eb67549a0637a02",
        "files": [
          "include/my_sys.h",
          "include/myisam.h",
          "mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c"
        ],
        "message": "Bug#24388746: PRIVILEGE ESCALATION AND RACE CONDITION USING CREATE TABLE\n\nDuring REPAIR TABLE of a MyISAM table, a temporary data file (.TMD)\nis created. When repair finishes, this file is renamed to the original\n.MYD file. The problem was that during this rename, we copied the\nstats from the old file to the new file with chmod/chown. If a user\nmanaged to replace the temporary file before chmod/chown was executed,\nit was possible to get an arbitrary file with the privileges of the\nmysql user.\n\nThis patch fixes the problem by not copying stats from the old\nfile to the new file. This is not needed as the new file was\ncreated with the correct stats. This fix only changes server\nbehavior - external utilities such as myisamchk still does\nchmod/chown.\n\nNo test case provided since the problem involves synchronization\nwith file system operations.",
        "before_after_code_files": [
          "include/my_sys.h||include/my_sys.h",
          "include/myisam.h||include/myisam.h",
          "mysys/my_redel.c||mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ],
          "candidate": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ]
        }
      },
      "candidate_diff": {
        "include/my_sys.h||include/my_sys.h": [
          "File: include/my_sys.h -> include/my_sys.h"
        ],
        "include/myisam.h||include/myisam.h": [
          "File: include/myisam.h -> include/myisam.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426: int chk_key(MI_CHECK *param, MI_INFO *info);",
          "427: int chk_data_link(MI_CHECK *param, MI_INFO *info,int extend);",
          "428: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
          "431: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
          "433: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
          "435: int change_to_newfile(const char * filename, const char * old_ext,",
          "436:         const char * new_ext, myf myflags);",
          "437: int lock_file(MI_CHECK *param, File file, my_off_t start, int lock_type,",
          "",
          "[Removed Lines]",
          "429:        char * name, int rep_quick);",
          "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name);",
          "432:         const char * name, int rep_quick);",
          "434:         const char * name, int rep_quick);",
          "",
          "[Added Lines]",
          "429:        char * name, int rep_quick, my_bool no_copy_stat);",
          "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
          "431:                   my_bool no_copy_stat);",
          "433:         const char * name, int rep_quick, my_bool no_copy_stat);",
          "435:                        const char * name, int rep_quick, my_bool no_copy_stat);",
          "",
          "---------------"
        ],
        "mysys/my_redel.c||mysys/my_redel.c": [
          "File: mysys/my_redel.c -> mysys/my_redel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:    if MY_REDEL_MAKE_COPY is given, then the orginal file",
          "37:    is renamed to org_name-'current_time'.BAK",
          "40: #define REDEL_EXT \".BAK\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:           if MY_REDEL_NO_COPY_STAT is given, stats are not copied",
          "40:           from org_name to tmp_name.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   DBUG_PRINT(\"my\",(\"org_name: '%s' tmp_name: '%s'  MyFlags: %d\",",
          "47:      org_name,tmp_name,MyFlags));",
          "51:   if (MyFlags & MY_REDEL_MAKE_BACKUP)",
          "52:   {",
          "53:     char name_buff[FN_REFLEN+20];",
          "",
          "[Removed Lines]",
          "49:   if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "50:     goto end;",
          "",
          "[Added Lines]",
          "52:   if (!(MyFlags & MY_REDEL_NO_COPY_STAT))",
          "53:   {",
          "54:     if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "55:       goto end;",
          "56:   }",
          "",
          "---------------"
        ],
        "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc": [
          "File: storage/myisam/ha_myisam.cc -> storage/myisam/ha_myisam.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1092:         my_snprintf(buf, 40, \"Repair with %d threads\", my_count_bits(key_map));",
          "1093:         thd_proc_info(thd, buf);",
          "1094:         error = mi_repair_parallel(&param, file, fixed_name,",
          "1096:         thd_proc_info(thd, \"Repair done\"); // to reset proc_info, as",
          "1098:       }",
          "1099:       else",
          "1100:       {",
          "1101:         thd_proc_info(thd, \"Repair by sorting\");",
          "1102:         error = mi_repair_by_sort(&param, file, fixed_name,",
          "1104:       }",
          "1105:     }",
          "1106:     else",
          "1107:     {",
          "1108:       thd_proc_info(thd, \"Repair with keycache\");",
          "1109:       param.testflag &= ~T_REP_BY_SORT;",
          "1110:       error=  mi_repair(&param, file, fixed_name,",
          "1112:     }",
          "1113: #ifdef HAVE_MMAP",
          "1114:     if (remap)",
          "",
          "[Removed Lines]",
          "1095:             param.testflag & T_QUICK);",
          "1103:             param.testflag & T_QUICK);",
          "1111:    param.testflag & T_QUICK);",
          "",
          "[Added Lines]",
          "1095:           The new file is created with the right stats, so we can skip",
          "1096:           copying file stats from old to new.",
          "1099:                                    param.testflag & T_QUICK, TRUE);",
          "1107:           The new file is created with the right stats, so we can skip",
          "1108:           copying file stats from old to new.",
          "1111:                                   param.testflag & T_QUICK, TRUE);",
          "1119:         The new file is created with the right stats, so we can skip",
          "1120:         copying file stats from old to new.",
          "1123:    param.testflag & T_QUICK, TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1124:     {",
          "1125:       optimize_done=1;",
          "1126:       thd_proc_info(thd, \"Sorting index\");",
          "1128:     }",
          "1129:     if (!statistics_done && (local_testflag & T_STATISTICS))",
          "1130:     {",
          "",
          "[Removed Lines]",
          "1127:       error=mi_sort_index(&param,file,fixed_name);",
          "",
          "[Added Lines]",
          "1140:         The new file is created with the right stats, so we can skip",
          "1141:         copying file stats from old to new.",
          "1143:       error=mi_sort_index(&param,file,fixed_name, TRUE);",
          "",
          "---------------"
        ],
        "storage/myisam/mi_check.c||storage/myisam/mi_check.c": [
          "File: storage/myisam/mi_check.c -> storage/myisam/mi_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1514: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
          "1516: {",
          "1517:   int error,got_error;",
          "1518:   ha_rows start_records,new_header_length;",
          "",
          "[Removed Lines]",
          "1515:        char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "1515:        char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1727:     if (new_file >= 0)",
          "1728:     {",
          "1729:       mysql_file_close(new_file, MYF(0));",
          "1730:       info->dfile=new_file= -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1729:       myf flags= 0;",
          "1730:       if (param->testflag & T_BACKUP_DATA)",
          "1731:         flags |= MY_REDEL_MAKE_BACKUP;",
          "1732:       if (no_copy_stat)",
          "1733:         flags |= MY_REDEL_NO_COPY_STAT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1744:         info->s->file_map= NULL;",
          "1745:       }",
          "1746:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "1749:    mi_open_datafile(info,share,name,-1))",
          "1750:  got_error=1;",
          "",
          "[Removed Lines]",
          "1747:        (param->testflag & T_BACKUP_DATA ?",
          "1748:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "1752:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1937: {",
          "1938:   reg2 uint key;",
          "1939:   reg1 MI_KEYDEF *keyinfo;",
          "",
          "[Removed Lines]",
          "1936: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name)",
          "",
          "[Added Lines]",
          "1940: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
          "1941:                   my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2004:   share->kfile = -1;",
          "2005:   (void) mysql_file_close(new_file, MYF(MY_WME));",
          "2006:   if (change_to_newfile(share->index_file_name, MI_NAME_IEXT, INDEX_TMP_EXT,",
          "2008:       mi_open_keyfile(share))",
          "2009:     goto err2;",
          "",
          "[Removed Lines]",
          "2007:    MYF(0)) ||",
          "",
          "[Added Lines]",
          "2012:    no_copy_stat ? MYF(MY_REDEL_NO_COPY_STAT) : MYF(0)) ||",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2209:     info  MyISAM handler to repair",
          "2210:     name  Name of table (for warnings)",
          "2211:     rep_quick  set to <> 0 if we should not change data file",
          "2213:   RESULT",
          "2214:     0 ok",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2217:     no_copy_stat        Don't copy file stats from old to new file,",
          "2218:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2218: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
          "2220: {",
          "2221:   int got_error;",
          "2222:   uint i;",
          "",
          "[Removed Lines]",
          "2219:         const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2226:         const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2544:     if (new_file >= 0)",
          "2545:     {",
          "2546:       mysql_file_close(new_file, MYF(0));",
          "2547:       info->dfile=new_file= -1;",
          "2548:       if (change_to_newfile(share->data_file_name,MI_NAME_DEXT, DATA_TMP_EXT,",
          "2551:    mi_open_datafile(info,share,name,-1))",
          "2552:  got_error=1;",
          "2553:     }",
          "",
          "[Removed Lines]",
          "2549:        (param->testflag & T_BACKUP_DATA ?",
          "2550:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "2553:       myf flags= 0;",
          "2554:       if (param->testflag & T_BACKUP_DATA)",
          "2555:         flags |= MY_REDEL_MAKE_BACKUP;",
          "2556:       if (no_copy_stat)",
          "2557:         flags |= MY_REDEL_NO_COPY_STAT;",
          "2561:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2595:     info  MyISAM handler to repair",
          "2596:     name  Name of table (for warnings)",
          "2597:     rep_quick  set to <> 0 if we should not change data file",
          "2599:   DESCRIPTION",
          "2600:     Same as mi_repair_by_sort but do it multithreaded",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2609:     no_copy_stat        Don't copy file stats from old to new file,",
          "2610:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2631: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
          "2633: {",
          "2634:   int got_error;",
          "2635:   uint i,key, total_key_length, istep;",
          "",
          "[Removed Lines]",
          "2632:    const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2645:                        const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3077:     if (new_file >= 0)",
          "3078:     {",
          "3079:       mysql_file_close(new_file, MYF(0));",
          "3080:       info->dfile=new_file= -1;",
          "3081:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "3084:    mi_open_datafile(info,share,name,-1))",
          "3085:  got_error=1;",
          "3086:     }",
          "",
          "[Removed Lines]",
          "3082:        (param->testflag & T_BACKUP_DATA ?",
          "3083:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "3092:       myf flags= 0;",
          "3093:       if (param->testflag & T_BACKUP_DATA)",
          "3094:         flags |= MY_REDEL_MAKE_BACKUP;",
          "3095:       if (no_copy_stat)",
          "3096:         flags |= MY_REDEL_NO_COPY_STAT;",
          "3100:        flags) ||",
          "",
          "---------------"
        ],
        "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c": [
          "File: storage/myisam/myisamchk.c -> storage/myisam/myisamchk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:     info->s->state.key_map,",
          "994:     param->force_sort))",
          "995:  {",
          "996:           if (param->testflag & T_REP_BY_SORT)",
          "998:           else",
          "1000:    state_updated=1;",
          "1001:  }",
          "1002:  else if (param->testflag & T_REP_ANY)",
          "1004:       }",
          "1005:       if (!error && param->testflag & T_SORT_RECORDS)",
          "1006:       {",
          "",
          "[Removed Lines]",
          "997:             error=mi_repair_by_sort(param,info,filename,rep_quick);",
          "999:             error=mi_repair_parallel(param,info,filename,rep_quick);",
          "1003:    error=mi_repair(param, info,filename,rep_quick);",
          "",
          "[Added Lines]",
          "997:             The new file might not be created with the right stats depending",
          "998:             on how myisamchk is run, so we must copy file stats from old to new.",
          "1001:             error= mi_repair_by_sort(param, info, filename, rep_quick, FALSE);",
          "1003:             error= mi_repair_parallel(param, info, filename, rep_quick, FALSE);",
          "1007:    error= mi_repair(param, info, filename, rep_quick, FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:    {",
          "1041:      if (param->verbose)",
          "1042:        puts(\"Table had a compressed index;  We must now recreate the index\");",
          "1044:    }",
          "1045:  }",
          "1046:       }",
          "1047:       if (!error && param->testflag & T_SORT_INDEX)",
          "1049:       if (!error)",
          "1050:  share->state.changed&= ~(STATE_CHANGED | STATE_CRASHED |",
          "1051:      STATE_CRASHED_ON_REPAIR);",
          "",
          "[Removed Lines]",
          "1043:      error=mi_repair_by_sort(param,info,filename,1);",
          "1048:  error=mi_sort_index(param,info,filename);",
          "",
          "[Added Lines]",
          "1047:      error= mi_repair_by_sort(param, info, filename, 1, FALSE);",
          "1052:  error= mi_sort_index(param, info, filename, FALSE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94b504a3e7a3c425297ffb0cb33d5e325a6008ba",
      "candidate_info": {
        "commit_hash": "94b504a3e7a3c425297ffb0cb33d5e325a6008ba",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/94b504a3e7a3c425297ffb0cb33d5e325a6008ba",
        "files": [
          "include/my_sys.h",
          "include/myisam.h",
          "mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c"
        ],
        "message": "Bug#24388746: PRIVILEGE ESCALATION AND RACE CONDITION USING CREATE TABLE\n\nDuring REPAIR TABLE of a MyISAM table, a temporary data file (.TMD)\nis created. When repair finishes, this file is renamed to the original\n.MYD file. The problem was that during this rename, we copied the\nstats from the old file to the new file with chmod/chown. If a user\nmanaged to replace the temporary file before chmod/chown was executed,\nit was possible to get an arbitrary file with the privileges of the\nmysql user.\n\nThis patch fixes the problem by not copying stats from the old\nfile to the new file. This is not needed as the new file was\ncreated with the correct stats. This fix only changes server\nbehavior - external utilities such as myisamchk still does\nchmod/chown.\n\nNo test case provided since the problem involves synchronization\nwith file system operations.",
        "before_after_code_files": [
          "include/my_sys.h||include/my_sys.h",
          "include/myisam.h||include/myisam.h",
          "mysys/my_redel.c||mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ],
          "candidate": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ]
        }
      },
      "candidate_diff": {
        "include/my_sys.h||include/my_sys.h": [
          "File: include/my_sys.h -> include/my_sys.h"
        ],
        "include/myisam.h||include/myisam.h": [
          "File: include/myisam.h -> include/myisam.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426: int chk_key(MI_CHECK *param, MI_INFO *info);",
          "427: int chk_data_link(MI_CHECK *param, MI_INFO *info,int extend);",
          "428: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
          "431: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
          "433: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
          "435: int change_to_newfile(const char * filename, const char * old_ext,",
          "436:         const char * new_ext, myf myflags);",
          "437: int lock_file(MI_CHECK *param, File file, my_off_t start, int lock_type,",
          "",
          "[Removed Lines]",
          "429:        char * name, int rep_quick);",
          "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name);",
          "432:         const char * name, int rep_quick);",
          "434:         const char * name, int rep_quick);",
          "",
          "[Added Lines]",
          "429:        char * name, int rep_quick, my_bool no_copy_stat);",
          "430: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
          "431:                   my_bool no_copy_stat);",
          "433:         const char * name, int rep_quick, my_bool no_copy_stat);",
          "435:                        const char * name, int rep_quick, my_bool no_copy_stat);",
          "",
          "---------------"
        ],
        "mysys/my_redel.c||mysys/my_redel.c": [
          "File: mysys/my_redel.c -> mysys/my_redel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:    if MY_REDEL_MAKE_COPY is given, then the orginal file",
          "37:    is renamed to org_name-'current_time'.BAK",
          "40: #define REDEL_EXT \".BAK\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:           if MY_REDEL_NO_COPY_STAT is given, stats are not copied",
          "40:           from org_name to tmp_name.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   DBUG_PRINT(\"my\",(\"org_name: '%s' tmp_name: '%s'  MyFlags: %d\",",
          "47:      org_name,tmp_name,MyFlags));",
          "51:   if (MyFlags & MY_REDEL_MAKE_BACKUP)",
          "52:   {",
          "53:     char name_buff[FN_REFLEN+20];",
          "",
          "[Removed Lines]",
          "49:   if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "50:     goto end;",
          "",
          "[Added Lines]",
          "52:   if (!(MyFlags & MY_REDEL_NO_COPY_STAT))",
          "53:   {",
          "54:     if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "55:       goto end;",
          "56:   }",
          "",
          "---------------"
        ],
        "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc": [
          "File: storage/myisam/ha_myisam.cc -> storage/myisam/ha_myisam.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1092:         my_snprintf(buf, 40, \"Repair with %d threads\", my_count_bits(key_map));",
          "1093:         thd_proc_info(thd, buf);",
          "1094:         error = mi_repair_parallel(&param, file, fixed_name,",
          "1096:         thd_proc_info(thd, \"Repair done\"); // to reset proc_info, as",
          "1098:       }",
          "1099:       else",
          "1100:       {",
          "1101:         thd_proc_info(thd, \"Repair by sorting\");",
          "1102:         error = mi_repair_by_sort(&param, file, fixed_name,",
          "1104:       }",
          "1105:     }",
          "1106:     else",
          "1107:     {",
          "1108:       thd_proc_info(thd, \"Repair with keycache\");",
          "1109:       param.testflag &= ~T_REP_BY_SORT;",
          "1110:       error=  mi_repair(&param, file, fixed_name,",
          "1112:     }",
          "1113: #ifdef HAVE_MMAP",
          "1114:     if (remap)",
          "",
          "[Removed Lines]",
          "1095:             param.testflag & T_QUICK);",
          "1103:             param.testflag & T_QUICK);",
          "1111:    param.testflag & T_QUICK);",
          "",
          "[Added Lines]",
          "1095:           The new file is created with the right stats, so we can skip",
          "1096:           copying file stats from old to new.",
          "1099:                                    param.testflag & T_QUICK, TRUE);",
          "1107:           The new file is created with the right stats, so we can skip",
          "1108:           copying file stats from old to new.",
          "1111:                                   param.testflag & T_QUICK, TRUE);",
          "1119:         The new file is created with the right stats, so we can skip",
          "1120:         copying file stats from old to new.",
          "1123:    param.testflag & T_QUICK, TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1124:     {",
          "1125:       optimize_done=1;",
          "1126:       thd_proc_info(thd, \"Sorting index\");",
          "1128:     }",
          "1129:     if (!statistics_done && (local_testflag & T_STATISTICS))",
          "1130:     {",
          "",
          "[Removed Lines]",
          "1127:       error=mi_sort_index(&param,file,fixed_name);",
          "",
          "[Added Lines]",
          "1140:         The new file is created with the right stats, so we can skip",
          "1141:         copying file stats from old to new.",
          "1143:       error=mi_sort_index(&param,file,fixed_name, TRUE);",
          "",
          "---------------"
        ],
        "storage/myisam/mi_check.c||storage/myisam/mi_check.c": [
          "File: storage/myisam/mi_check.c -> storage/myisam/mi_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1514: int mi_repair(MI_CHECK *param, register MI_INFO *info,",
          "1516: {",
          "1517:   int error,got_error;",
          "1518:   ha_rows start_records,new_header_length;",
          "",
          "[Removed Lines]",
          "1515:        char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "1515:        char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1727:     if (new_file >= 0)",
          "1728:     {",
          "1729:       mysql_file_close(new_file, MYF(0));",
          "1730:       info->dfile=new_file= -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1729:       myf flags= 0;",
          "1730:       if (param->testflag & T_BACKUP_DATA)",
          "1731:         flags |= MY_REDEL_MAKE_BACKUP;",
          "1732:       if (no_copy_stat)",
          "1733:         flags |= MY_REDEL_NO_COPY_STAT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1744:         info->s->file_map= NULL;",
          "1745:       }",
          "1746:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "1749:    mi_open_datafile(info,share,name,-1))",
          "1750:  got_error=1;",
          "",
          "[Removed Lines]",
          "1747:        (param->testflag & T_BACKUP_DATA ?",
          "1748:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "1752:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1937: {",
          "1938:   reg2 uint key;",
          "1939:   reg1 MI_KEYDEF *keyinfo;",
          "",
          "[Removed Lines]",
          "1936: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name)",
          "",
          "[Added Lines]",
          "1940: int mi_sort_index(MI_CHECK *param, register MI_INFO *info, char * name,",
          "1941:                   my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2004:   share->kfile = -1;",
          "2005:   (void) mysql_file_close(new_file, MYF(MY_WME));",
          "2006:   if (change_to_newfile(share->index_file_name, MI_NAME_IEXT, INDEX_TMP_EXT,",
          "2008:       mi_open_keyfile(share))",
          "2009:     goto err2;",
          "",
          "[Removed Lines]",
          "2007:    MYF(0)) ||",
          "",
          "[Added Lines]",
          "2012:    no_copy_stat ? MYF(MY_REDEL_NO_COPY_STAT) : MYF(0)) ||",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2209:     info  MyISAM handler to repair",
          "2210:     name  Name of table (for warnings)",
          "2211:     rep_quick  set to <> 0 if we should not change data file",
          "2213:   RESULT",
          "2214:     0 ok",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2217:     no_copy_stat        Don't copy file stats from old to new file,",
          "2218:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2218: int mi_repair_by_sort(MI_CHECK *param, register MI_INFO *info,",
          "2220: {",
          "2221:   int got_error;",
          "2222:   uint i;",
          "",
          "[Removed Lines]",
          "2219:         const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2226:         const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2544:     if (new_file >= 0)",
          "2545:     {",
          "2546:       mysql_file_close(new_file, MYF(0));",
          "2547:       info->dfile=new_file= -1;",
          "2548:       if (change_to_newfile(share->data_file_name,MI_NAME_DEXT, DATA_TMP_EXT,",
          "2551:    mi_open_datafile(info,share,name,-1))",
          "2552:  got_error=1;",
          "2553:     }",
          "",
          "[Removed Lines]",
          "2549:        (param->testflag & T_BACKUP_DATA ?",
          "2550:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "2553:       myf flags= 0;",
          "2554:       if (param->testflag & T_BACKUP_DATA)",
          "2555:         flags |= MY_REDEL_MAKE_BACKUP;",
          "2556:       if (no_copy_stat)",
          "2557:         flags |= MY_REDEL_NO_COPY_STAT;",
          "2561:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2595:     info  MyISAM handler to repair",
          "2596:     name  Name of table (for warnings)",
          "2597:     rep_quick  set to <> 0 if we should not change data file",
          "2599:   DESCRIPTION",
          "2600:     Same as mi_repair_by_sort but do it multithreaded",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2609:     no_copy_stat        Don't copy file stats from old to new file,",
          "2610:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2631: int mi_repair_parallel(MI_CHECK *param, register MI_INFO *info,",
          "2633: {",
          "2634:   int got_error;",
          "2635:   uint i,key, total_key_length, istep;",
          "",
          "[Removed Lines]",
          "2632:    const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2645:                        const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3077:     if (new_file >= 0)",
          "3078:     {",
          "3079:       mysql_file_close(new_file, MYF(0));",
          "3080:       info->dfile=new_file= -1;",
          "3081:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "3084:    mi_open_datafile(info,share,name,-1))",
          "3085:  got_error=1;",
          "3086:     }",
          "",
          "[Removed Lines]",
          "3082:        (param->testflag & T_BACKUP_DATA ?",
          "3083:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "3092:       myf flags= 0;",
          "3093:       if (param->testflag & T_BACKUP_DATA)",
          "3094:         flags |= MY_REDEL_MAKE_BACKUP;",
          "3095:       if (no_copy_stat)",
          "3096:         flags |= MY_REDEL_NO_COPY_STAT;",
          "3100:        flags) ||",
          "",
          "---------------"
        ],
        "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c": [
          "File: storage/myisam/myisamchk.c -> storage/myisam/myisamchk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:     info->s->state.key_map,",
          "994:     param->force_sort))",
          "995:  {",
          "996:           if (param->testflag & T_REP_BY_SORT)",
          "998:           else",
          "1000:    state_updated=1;",
          "1001:  }",
          "1002:  else if (param->testflag & T_REP_ANY)",
          "1004:       }",
          "1005:       if (!error && param->testflag & T_SORT_RECORDS)",
          "1006:       {",
          "",
          "[Removed Lines]",
          "997:             error=mi_repair_by_sort(param,info,filename,rep_quick);",
          "999:             error=mi_repair_parallel(param,info,filename,rep_quick);",
          "1003:    error=mi_repair(param, info,filename,rep_quick);",
          "",
          "[Added Lines]",
          "997:             The new file might not be created with the right stats depending",
          "998:             on how myisamchk is run, so we must copy file stats from old to new.",
          "1001:             error= mi_repair_by_sort(param, info, filename, rep_quick, FALSE);",
          "1003:             error= mi_repair_parallel(param, info, filename, rep_quick, FALSE);",
          "1007:    error= mi_repair(param, info, filename, rep_quick, FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:    {",
          "1041:      if (param->verbose)",
          "1042:        puts(\"Table had a compressed index;  We must now recreate the index\");",
          "1044:    }",
          "1045:  }",
          "1046:       }",
          "1047:       if (!error && param->testflag & T_SORT_INDEX)",
          "1049:       if (!error)",
          "1050:  share->state.changed&= ~(STATE_CHANGED | STATE_CRASHED |",
          "1051:      STATE_CRASHED_ON_REPAIR);",
          "",
          "[Removed Lines]",
          "1043:      error=mi_repair_by_sort(param,info,filename,1);",
          "1048:  error=mi_sort_index(param,info,filename);",
          "",
          "[Added Lines]",
          "1047:      error= mi_repair_by_sort(param, info, filename, 1, FALSE);",
          "1052:  error= mi_sort_index(param, info, filename, FALSE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eea06725435fcdfad6cf709be87fd66312fcccf0",
      "candidate_info": {
        "commit_hash": "eea06725435fcdfad6cf709be87fd66312fcccf0",
        "repo": "mysql/mysql-server",
        "commit_url": "https://github.com/mysql/mysql-server/commit/eea06725435fcdfad6cf709be87fd66312fcccf0",
        "files": [
          "include/my_sys.h",
          "include/myisam.h",
          "mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c"
        ],
        "message": "Merge branch 'mysql-5.6' into mysql-5.7\n\n(cherry picked from commit ef2eb6f448ec57693aab96cd6edb452d35e4a3d9)",
        "before_after_code_files": [
          "include/my_sys.h||include/my_sys.h",
          "include/myisam.h||include/myisam.h",
          "mysys/my_redel.c||mysys/my_redel.c",
          "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
          "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
          "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ],
          "candidate": [
            "include/my_sys.h||include/my_sys.h",
            "include/myisam.h||include/myisam.h",
            "mysys/my_redel.c||mysys/my_redel.c",
            "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc",
            "storage/myisam/mi_check.c||storage/myisam/mi_check.c",
            "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c"
          ]
        }
      },
      "candidate_diff": {
        "include/my_sys.h||include/my_sys.h": [
          "File: include/my_sys.h -> include/my_sys.h"
        ],
        "include/myisam.h||include/myisam.h": [
          "File: include/myisam.h -> include/myisam.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:    This program is free software; you can redistribute it and/or modify",
          "5:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "2:    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.",
          "",
          "[Added Lines]",
          "2:    Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425: int chk_key(MI_CHECK *param, MI_INFO *info);",
          "426: int chk_data_link(MI_CHECK *param, MI_INFO *info,int extend);",
          "427: int mi_repair(MI_CHECK *param, MI_INFO *info,",
          "430: int mi_repair_by_sort(MI_CHECK *param, MI_INFO *info,",
          "432: int mi_repair_parallel(MI_CHECK *param, MI_INFO *info,",
          "434: int change_to_newfile(const char * filename, const char * old_ext,",
          "435:         const char * new_ext, myf myflags);",
          "436: int lock_file(MI_CHECK *param, File file, my_off_t start, int lock_type,",
          "",
          "[Removed Lines]",
          "428:        char * name, int rep_quick);",
          "429: int mi_sort_index(MI_CHECK *param, MI_INFO *info, char * name);",
          "431:         const char * name, int rep_quick);",
          "433:         const char * name, int rep_quick);",
          "",
          "[Added Lines]",
          "428:        char * name, int rep_quick, my_bool no_copy_stat);",
          "429: int mi_sort_index(MI_CHECK *param, MI_INFO *info, char * name,",
          "430:                   my_bool no_copy_stat);",
          "432:         const char * name, int rep_quick, my_bool no_copy_stat);",
          "434:                        const char * name, int rep_quick, my_bool no_copy_stat);",
          "",
          "---------------"
        ],
        "mysys/my_redel.c||mysys/my_redel.c": [
          "File: mysys/my_redel.c -> mysys/my_redel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:    if MY_REDEL_MAKE_COPY is given, then the orginal file",
          "35:    is renamed to org_name-'current_time'.BAK",
          "38: #define REDEL_EXT \".BAK\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:           if MY_REDEL_NO_COPY_STAT is given, stats are not copied",
          "38:           from org_name to tmp_name.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   DBUG_PRINT(\"my\",(\"org_name: '%s' tmp_name: '%s'  MyFlags: %d\",",
          "45:      org_name,tmp_name,MyFlags));",
          "49:   if (MyFlags & MY_REDEL_MAKE_BACKUP)",
          "50:   {",
          "51:     char name_buff[FN_REFLEN+20];",
          "",
          "[Removed Lines]",
          "47:   if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "48:     goto end;",
          "",
          "[Added Lines]",
          "50:   if (!(MyFlags & MY_REDEL_NO_COPY_STAT))",
          "51:   {",
          "52:     if (my_copystat(org_name,tmp_name,MyFlags) < 0)",
          "53:       goto end;",
          "54:   }",
          "",
          "---------------"
        ],
        "storage/myisam/ha_myisam.cc||storage/myisam/ha_myisam.cc": [
          "File: storage/myisam/ha_myisam.cc -> storage/myisam/ha_myisam.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1146:         my_snprintf(buf, 40, \"Repair with %d threads\", my_count_bits(key_map));",
          "1147:         thd_proc_info(thd, buf);",
          "1148:         error = mi_repair_parallel(&param, file, fixed_name,",
          "1150:         thd_proc_info(thd, \"Repair done\"); // to reset proc_info, as",
          "1152:       }",
          "1153:       else",
          "1154:       {",
          "1155:         thd_proc_info(thd, \"Repair by sorting\");",
          "1156:         error = mi_repair_by_sort(&param, file, fixed_name,",
          "1158:       }",
          "1159:     }",
          "1160:     else",
          "1161:     {",
          "1162:       thd_proc_info(thd, \"Repair with keycache\");",
          "1163:       param.testflag &= ~T_REP_BY_SORT;",
          "1164:       error=  mi_repair(&param, file, fixed_name,",
          "1166:     }",
          "1167:     if (remap)",
          "1168:       mi_dynmap_file(file, file->state->data_file_length);",
          "",
          "[Removed Lines]",
          "1149:             param.testflag & T_QUICK);",
          "1157:             param.testflag & T_QUICK);",
          "1165:    param.testflag & T_QUICK);",
          "",
          "[Added Lines]",
          "1149:           The new file is created with the right stats, so we can skip",
          "1150:           copying file stats from old to new.",
          "1153:                                    param.testflag & T_QUICK, TRUE);",
          "1161:           The new file is created with the right stats, so we can skip",
          "1162:           copying file stats from old to new.",
          "1165:                                   param.testflag & T_QUICK, TRUE);",
          "1173:         The new file is created with the right stats, so we can skip",
          "1174:         copying file stats from old to new.",
          "1177:    param.testflag & T_QUICK, TRUE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1176:     {",
          "1177:       optimize_done=1;",
          "1178:       thd_proc_info(thd, \"Sorting index\");",
          "1180:     }",
          "1181:     if (!statistics_done && (local_testflag & T_STATISTICS))",
          "1182:     {",
          "",
          "[Removed Lines]",
          "1179:       error=mi_sort_index(&param,file,fixed_name);",
          "",
          "[Added Lines]",
          "1192:         The new file is created with the right stats, so we can skip",
          "1193:         copying file stats from old to new.",
          "1195:       error=mi_sort_index(&param,file,fixed_name, TRUE);",
          "",
          "---------------"
        ],
        "storage/myisam/mi_check.c||storage/myisam/mi_check.c": [
          "File: storage/myisam/mi_check.c -> storage/myisam/mi_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1519: int mi_repair(MI_CHECK *param, MI_INFO *info,",
          "1521: {",
          "1522:   int error,got_error;",
          "1523:   ha_rows start_records,new_header_length;",
          "",
          "[Removed Lines]",
          "1520:        char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "1520:        char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1732:     if (new_file >= 0)",
          "1733:     {",
          "1734:       mysql_file_close(new_file, MYF(0));",
          "1735:       info->dfile=new_file= -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1734:       myf flags= 0;",
          "1735:       if (param->testflag & T_BACKUP_DATA)",
          "1736:         flags |= MY_REDEL_MAKE_BACKUP;",
          "1737:       if (no_copy_stat)",
          "1738:         flags |= MY_REDEL_NO_COPY_STAT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1749:         info->s->file_map= NULL;",
          "1750:       }",
          "1751:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "1754:    mi_open_datafile(info,share,name,-1))",
          "1755:  got_error=1;",
          "",
          "[Removed Lines]",
          "1752:        (param->testflag & T_BACKUP_DATA ?",
          "1753:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "1757:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1941: {",
          "1942:   uint key;",
          "1943:   MI_KEYDEF *keyinfo;",
          "",
          "[Removed Lines]",
          "1940: int mi_sort_index(MI_CHECK *param, MI_INFO *info, char * name)",
          "",
          "[Added Lines]",
          "1944: int mi_sort_index(MI_CHECK *param, MI_INFO *info, char * name,",
          "1945:                   my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2015:   share->kfile = -1;",
          "2016:   (void) mysql_file_close(new_file, MYF(MY_WME));",
          "2017:   if (change_to_newfile(share->index_file_name, MI_NAME_IEXT, INDEX_TMP_EXT,",
          "2019:       mi_open_keyfile(share))",
          "2020:     goto err2;",
          "",
          "[Removed Lines]",
          "2018:    MYF(0)) ||",
          "",
          "[Added Lines]",
          "2023:    no_copy_stat ? MYF(MY_REDEL_NO_COPY_STAT) : MYF(0)) ||",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2219:     info  MyISAM handler to repair",
          "2220:     name  Name of table (for warnings)",
          "2221:     rep_quick  set to <> 0 if we should not change data file",
          "2223:   RESULT",
          "2224:     0 ok",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2227:     no_copy_stat        Don't copy file stats from old to new file,",
          "2228:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2228: int mi_repair_by_sort(MI_CHECK *param, MI_INFO *info,",
          "2230: {",
          "2231:   int got_error;",
          "2232:   uint i;",
          "",
          "[Removed Lines]",
          "2229:         const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2236:         const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2550:     if (new_file >= 0)",
          "2551:     {",
          "2552:       mysql_file_close(new_file, MYF(0));",
          "2553:       info->dfile=new_file= -1;",
          "2554:       if (change_to_newfile(share->data_file_name,MI_NAME_DEXT, DATA_TMP_EXT,",
          "2557:    mi_open_datafile(info,share,name,-1))",
          "2558:  got_error=1;",
          "2559:     }",
          "",
          "[Removed Lines]",
          "2555:        (param->testflag & T_BACKUP_DATA ?",
          "2556:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "2559:       myf flags= 0;",
          "2560:       if (param->testflag & T_BACKUP_DATA)",
          "2561:         flags |= MY_REDEL_MAKE_BACKUP;",
          "2562:       if (no_copy_stat)",
          "2563:         flags |= MY_REDEL_NO_COPY_STAT;",
          "2567:                             flags) ||",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2601:     info  MyISAM handler to repair",
          "2602:     name  Name of table (for warnings)",
          "2603:     rep_quick  set to <> 0 if we should not change data file",
          "2605:   DESCRIPTION",
          "2606:     Same as mi_repair_by_sort but do it multithreaded",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2615:     no_copy_stat        Don't copy file stats from old to new file,",
          "2616:                         assume that new file was created with correct stats",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2637: int mi_repair_parallel(MI_CHECK *param, MI_INFO *info,",
          "2639: {",
          "2640:   int got_error;",
          "2641:   uint i,key, total_key_length, istep;",
          "",
          "[Removed Lines]",
          "2638:    const char * name, int rep_quick)",
          "",
          "[Added Lines]",
          "2651:                        const char * name, int rep_quick, my_bool no_copy_stat)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3071:     if (new_file >= 0)",
          "3072:     {",
          "3073:       mysql_file_close(new_file, MYF(0));",
          "3074:       info->dfile=new_file= -1;",
          "3075:       if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,",
          "3078:    mi_open_datafile(info,share,name,-1))",
          "3079:  got_error=1;",
          "3080:     }",
          "",
          "[Removed Lines]",
          "3076:        (param->testflag & T_BACKUP_DATA ?",
          "3077:         MYF(MY_REDEL_MAKE_BACKUP): MYF(0))) ||",
          "",
          "[Added Lines]",
          "3086:       myf flags= 0;",
          "3087:       if (param->testflag & T_BACKUP_DATA)",
          "3088:         flags |= MY_REDEL_MAKE_BACKUP;",
          "3089:       if (no_copy_stat)",
          "3090:         flags |= MY_REDEL_NO_COPY_STAT;",
          "3094:        flags) ||",
          "",
          "---------------"
        ],
        "storage/myisam/myisamchk.c||storage/myisam/myisamchk.c": [
          "File: storage/myisam/myisamchk.c -> storage/myisam/myisamchk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1007:     info->s->state.key_map,",
          "1008:     param->force_sort))",
          "1009:  {",
          "1010:           if (param->testflag & T_REP_BY_SORT)",
          "1012:           else",
          "1014:    state_updated=1;",
          "1015:  }",
          "1016:  else if (param->testflag & T_REP_ANY)",
          "1018:       }",
          "1019:       if (!error && param->testflag & T_SORT_RECORDS)",
          "1020:       {",
          "",
          "[Removed Lines]",
          "1011:             error=mi_repair_by_sort(param,info,filename,rep_quick);",
          "1013:             error=mi_repair_parallel(param,info,filename,rep_quick);",
          "1017:    error=mi_repair(param, info,filename,rep_quick);",
          "",
          "[Added Lines]",
          "1011:             The new file might not be created with the right stats depending",
          "1012:             on how myisamchk is run, so we must copy file stats from old to new.",
          "1015:             error= mi_repair_by_sort(param, info, filename, rep_quick, FALSE);",
          "1017:             error= mi_repair_parallel(param, info, filename, rep_quick, FALSE);",
          "1021:    error= mi_repair(param, info, filename, rep_quick, FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1055:    {",
          "1056:      if (param->verbose)",
          "1057:        puts(\"Table had a compressed index;  We must now recreate the index\");",
          "1059:    }",
          "1060:  }",
          "1061:       }",
          "1062:       if (!error && param->testflag & T_SORT_INDEX)",
          "1064:       if (!error)",
          "1065:  share->state.changed&= ~(STATE_CHANGED | STATE_CRASHED |",
          "1066:      STATE_CRASHED_ON_REPAIR);",
          "",
          "[Removed Lines]",
          "1058:      error=mi_repair_by_sort(param,info,filename,1);",
          "1063:  error=mi_sort_index(param,info,filename);",
          "",
          "[Added Lines]",
          "1062:      error= mi_repair_by_sort(param, info, filename, 1, FALSE);",
          "1067:  error= mi_sort_index(param, info, filename, FALSE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}