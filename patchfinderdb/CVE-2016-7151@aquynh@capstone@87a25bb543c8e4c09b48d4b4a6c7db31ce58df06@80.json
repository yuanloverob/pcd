{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "846c6080114bb7fdd0d7e800daa40605accd03ad",
      "candidate_info": {
        "commit_hash": "846c6080114bb7fdd0d7e800daa40605accd03ad",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/846c6080114bb7fdd0d7e800daa40605accd03ad",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "x86: more indentation",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2489: struct insn_reg2 {",
          "2490:  uint16_t insn;",
          "2491:  x86_reg reg1, reg2;",
          "2493: };",
          "2495: static struct insn_reg insn_regs_att[] = {",
          "",
          "[Removed Lines]",
          "2492:     enum cs_ac_type access1, access2;",
          "",
          "[Added Lines]",
          "2492:  enum cs_ac_type access1, access2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d31f94f7a13c279b601289538eba80b9df46abc8",
      "candidate_info": {
        "commit_hash": "d31f94f7a13c279b601289538eba80b9df46abc8",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/d31f94f7a13c279b601289538eba80b9df46abc8",
        "files": [
          "ChangeLog",
          "bindings/java/capstone/Arm.java"
        ],
        "message": "Java: Fix a bug where Arm.Operand is wrongly calculated for the second and following operands",
        "before_after_code_files": [
          "bindings/javcapstone/Arm.java||bindings/java/capstone/Arm.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javcapstone/Arm.java||bindings/java/capstone/Arm.java": [
          "File: bindings/javcapstone/Arm.java -> bindings/java/capstone/Arm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     public byte access;",
          "59:     public byte neon_lane;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbf6a1eebd7a1fd607f92e85a1f6350a0a63fa3e",
      "candidate_info": {
        "commit_hash": "bbf6a1eebd7a1fd607f92e85a1f6350a0a63fa3e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/bbf6a1eebd7a1fd607f92e85a1f6350a0a63fa3e",
        "files": [
          "bindings/python/capstone/__init__.py"
        ],
        "message": "Workaround unicorn handing back bytearrays",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "976:             print(code)",
          "977:             code = code.encode()",
          "978:             print(code)'''",
          "979:         res = _cs.cs_disasm(self.csh, code, len(code), offset, count, ctypes.byref(all_insn))",
          "980:         if res > 0:",
          "981:             try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979:         # Hack, unicorn's memory accessors give you back bytearrays, but they",
          "980:         # cause TypeErrors when you hand them into Capstone.",
          "981:         if isinstance(code, bytearray):",
          "982:             code = bytes(code)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1a16fa0bfa7d09773629914de9a8a298c3aee5e",
      "candidate_info": {
        "commit_hash": "c1a16fa0bfa7d09773629914de9a8a298c3aee5e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c1a16fa0bfa7d09773629914de9a8a298c3aee5e",
        "files": [
          "arch/X86/X86MappingInsnOp.inc"
        ],
        "message": "x86: fix access right memory operand of of MOVSS. see issue #693",
        "before_after_code_files": [
          "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc": [
          "File: arch/X86/X86MappingInsnOp.inc -> arch/X86/X86MappingInsnOp.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6195: },",
          "6197:  X86_EFLAGS_TEST_DF,",
          "6199: },",
          "6201:  X86_EFLAGS_TEST_DF,",
          "",
          "[Removed Lines]",
          "6198:  { CS_AC_READ, CS_AC_READ, 0 }",
          "",
          "[Added Lines]",
          "6198:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33933:  0,",
          "33934:  { 0 }",
          "",
          "[Removed Lines]",
          "33935: },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b25b0abcfce92c7ae5f6621692013f0b5bd2893",
      "candidate_info": {
        "commit_hash": "8b25b0abcfce92c7ae5f6621692013f0b5bd2893",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8b25b0abcfce92c7ae5f6621692013f0b5bd2893",
        "files": [
          "bindings/const_generator.py",
          "bindings/ocaml/arm_const.ml",
          "bindings/python/capstone/arm_const.py"
        ],
        "message": "file.write() need bytes when file is opened in binary mode",
        "before_after_code_files": [
          "bindings/const_generator.py||bindings/const_generator.py",
          "bindings/ocaml/arm_const.ml||bindings/ocaml/arm_const.ml",
          "bindings/python/capstone/arm_const.py||bindings/python/capstone/arm_const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/const_generator.py||bindings/const_generator.py": [
          "File: bindings/const_generator.py -> bindings/const_generator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: def gen(lang):",
          "68:     global include, INCL_DIR",
          "69:     templ = template[lang]",
          "70:     for target in include:",
          "71:         prefix = templ[target]",
          "75:         lines = open(INCL_DIR + target).readlines()",
          "",
          "[Removed Lines]",
          "72:         outfile = open(templ['out_file'] %(prefix), 'w')",
          "73:         outfile.write(templ['header'] % (prefix))",
          "",
          "[Added Lines]",
          "69:     print('Generating bindings for', lang)",
          "73:         outfile = open(templ['out_file'] %(prefix), 'wb')   # open as binary prevents windows newlines",
          "74:         outfile.write((templ['header'] % (prefix)).encode(\"utf-8\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:             line = line.strip()",
          "81:             if line.startswith(MARKUP):  # markup for comments",
          "84:                 continue",
          "86:             if line == '' or line.startswith('//'):",
          "",
          "[Removed Lines]",
          "82:                 outfile.write(\"\\n%s%s%s\\n\" %(templ['comment_open'], \\",
          "83:                             line.replace(MARKUP, ''), templ['comment_close']))",
          "",
          "[Added Lines]",
          "83:                 outfile.write((\"\\n%s%s%s\\n\" %(templ['comment_open'], \\",
          "84:                                               line.replace(MARKUP, ''), \\",
          "85:                                               templ['comment_close']) ).encode(\"utf-8\"))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:                     try:",
          "109:                         count = int(rhs) + 1",
          "110:                         if (count == 1):",
          "112:                     except ValueError:",
          "113:                         if lang == 'ocaml':",
          "114:                             # ocaml uses lsl for '<<', lor for '|'",
          "",
          "[Removed Lines]",
          "111:                             outfile.write(\"\\n\")",
          "",
          "[Added Lines]",
          "113:                             outfile.write((\"\\n\").encode(\"utf-8\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:                             if rhs[0].isalpha():",
          "119:                                 rhs = '_' + rhs",
          "124:         outfile.close()",
          "126: def main():",
          "",
          "[Removed Lines]",
          "121:                     outfile.write(templ['line_format'] %(f[0].strip(), rhs))",
          "123:         outfile.write(templ['footer'])",
          "",
          "[Added Lines]",
          "123:                     outfile.write((templ['line_format'] %(f[0].strip(), rhs)).encode(\"utf-8\"))",
          "125:         outfile.write((templ['footer']).encode(\"utf-8\"))",
          "",
          "---------------"
        ],
        "bindings/ocaml/arm_const.ml||bindings/ocaml/arm_const.ml": [
          "File: bindings/ocaml/arm_const.ml -> bindings/ocaml/arm_const.ml"
        ],
        "bindings/python/capstone/arm_const.py||bindings/python/capstone/arm_const.py": [
          "File: bindings/python/capstone/arm_const.py -> bindings/python/capstone/arm_const.py"
        ]
      }
    }
  ]
}