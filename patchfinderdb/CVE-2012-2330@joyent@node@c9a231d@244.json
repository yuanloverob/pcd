{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99679c643028eba79b81d0a3eaa204af1cce2d15",
      "candidate_info": {
        "commit_hash": "99679c643028eba79b81d0a3eaa204af1cce2d15",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/99679c643028eba79b81d0a3eaa204af1cce2d15",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "src/node_vars.h",
          "test/simple/test-isolates.js"
        ],
        "message": "IsolateDebugger C++",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "src/node_vars.h||src/node_vars.h",
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2625:   node_isolate = v8::Isolate::GetCurrent();",
          "2631: #ifdef _WIN32",
          "2633: #else // Posix",
          "2635: #endif // __POSIX__",
          "2636:   }",
          "2638:   Handle<Object> process_l = SetupProcessObject(argc, argv);",
          "",
          "[Removed Lines]",
          "2628:   if (use_debug_agent) {",
          "2629:     EnableDebug(debug_wait_connect);",
          "2630:   } else {",
          "2632:     RegisterDebugSignalHandler();",
          "2634:     RegisterSignalHandler(SIGUSR1, EnableDebugSignalHandler);",
          "",
          "[Added Lines]",
          "2628:   if (isolate->id_ == 1) {",
          "2630:     if (use_debug_agent) {",
          "2631:       EnableDebug(debug_wait_connect);",
          "2632:     } else {",
          "2634:       RegisterDebugSignalHandler();",
          "2636:       RegisterSignalHandler(SIGUSR1, EnableDebugSignalHandler);",
          "2638:     }",
          "2639:   } else if (isolate->debug_state != Isolate::kNone) {",
          "2640:     isolate->debugger_instance->Init();",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <v8.h>",
          "23: #include <node.h>",
          "24: #include <node_buffer.h>",
          "25: #include <node_isolate.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <v8-debug.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #include <assert.h>",
          "34: namespace node {",
          "36: using v8::Arguments;",
          "37: using v8::Array;",
          "38: using v8::False;",
          "39: using v8::FunctionTemplate;",
          "40: using v8::Handle;",
          "41: using v8::HandleScope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #define isolate_debugger_constructor NODE_VAR(isolate_debugger_constructor)",
          "42: using v8::Context;",
          "44: using v8::Function;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: using v8::Persistent;",
          "48: using v8::String;",
          "49: using v8::True;",
          "50: using v8::Value;",
          "51: using v8::Undefined;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: using v8::Undefined;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:     loop_ = uv_loop_new();",
          "253:   }",
          "255:   ngx_queue_init(&at_exit_callbacks_);",
          "257:   v8_isolate_ = v8::Isolate::New();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:   debug_state = kNone;",
          "263:   debugger_instance = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:   v8_isolate_->Enter();",
          "292:   if (v8_context_.IsEmpty()) {",
          "294:   }",
          "295:   v8_context_->Enter();",
          "",
          "[Removed Lines]",
          "293:     v8_context_ = v8::Context::New();",
          "",
          "[Added Lines]",
          "303:     v8_context_ = Context::New();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "476:   }",
          "477:   isolate->argv_[isolate->argc_] = NULL;",
          "479:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate))",
          "480:     return Null(); // wrap is collected by the GC",
          "481:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:   if (args.Length() > 1) {",
          "491:     Local<Object> options = args[1].As<Object>();",
          "492:     Local<Value> opt_debug = options->Get(String::New(\"debug\"));",
          "493:     Local<Value> opt_debug_brk = options->Get(String::New(\"debugBrk\"));",
          "496:     if (opt_debug->IsFunction()) {",
          "497:       isolate->debug_state = opt_debug_brk->IsTrue() ?",
          "498:           Isolate::kDebugBrk",
          "499:           :",
          "500:           Isolate::kDebug;",
          "501:       isolate->debugger_instance = IsolateDebugger::New(opt_debug);",
          "502:     }",
          "503:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "493:   HandleScope scope;",
          "494:   NODE_SET_METHOD(target, \"create\", CreateIsolate);",
          "495:   NODE_SET_METHOD(target, \"count\", CountIsolate);",
          "496: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:   IsolateDebugger::Initialize();",
          "524: }",
          "527: class IsolateDebuggerMessage {",
          "528:  public:",
          "529:   IsolateDebugger* d_;",
          "530:   uint16_t* value_;",
          "531:   int len_;",
          "533:   IsolateDebuggerMessage(IsolateDebugger* d, uint16_t* value, int len) {",
          "534:     d_ = d;",
          "535:     value_ = new uint16_t[len];",
          "536:     len_ = len;",
          "537:     memcpy(value_, value, len * sizeof(value_[0]));",
          "538:   }",
          "540:   ~IsolateDebuggerMessage() {",
          "541:     delete[] value_;",
          "542:   }",
          "543: };",
          "546: void IsolateDebugger::Initialize() {",
          "547:   HandleScope scope;",
          "549:   Local<FunctionTemplate> t = FunctionTemplate::New(IsolateDebugger::New);",
          "550:   isolate_debugger_constructor = Persistent<FunctionTemplate>::New(t);",
          "552:   t->InstanceTemplate()->SetInternalFieldCount(1);",
          "553:   t->SetClassName(String::NewSymbol(\"IsolateDebugger\"));",
          "555:   NODE_SET_PROTOTYPE_METHOD(t, \"write\", IsolateDebugger::Write);",
          "556: }",
          "559: IsolateDebugger::IsolateDebugger(Handle<Value> init) {",
          "560:   debuggee_ = NULL;",
          "561:   initialized_ = false;",
          "562:   host_ = Isolate::GetCurrent();",
          "563:   host_loop_ = host_->GetLoop();",
          "564:   init_callback_fn_ = Persistent<Value>::New(init);",
          "568:   uv_async_init(host_loop_,",
          "569:                 &init_callback_,",
          "570:                 IsolateDebugger::InitCallback);",
          "571:   init_callback_.data = reinterpret_cast<void*>(this);",
          "573:   msg_channel_ = new Channel<IsolateDebuggerMessage*>(",
          "574:       host_loop_, MessageCallback, NULL);",
          "575: }",
          "578: IsolateDebugger::~IsolateDebugger() {",
          "579:   init_callback_fn_.Clear();",
          "580:   init_callback_fn_.Dispose();",
          "581:   delete msg_channel_;",
          "582: }",
          "585: void IsolateDebugger::Init(void) {",
          "586:   HandleScope scope;",
          "588:   Isolate* isolate = Isolate::GetCurrent();",
          "590:   debuggee_ = isolate;",
          "591:   debuggee_v8_ = isolate->GetV8Isolate();",
          "592:   v8::Debug::SetMessageHandler2(IsolateDebugger::DebugMessageHandler);",
          "596:   if (isolate->debug_state == Isolate::kDebugBrk) {",
          "597:     Local<Context> debugContext = v8::Debug::GetDebugContext();",
          "599:     debugContext->SetSecurityToken(",
          "600:         isolate->GetV8Context()->GetSecurityToken()",
          "601:     );",
          "602:     isolate->GetV8Context()->Global()->Set(",
          "603:         String::New(\"v8debug\"),",
          "604:         debugContext->Global()",
          "605:     );",
          "606:   }",
          "608:   initialized_ = true;",
          "610:   uv_async_send(&init_callback_);",
          "611: }",
          "614: void IsolateDebugger::InitCallback(uv_async_t* c, int status) {",
          "615:   assert(c->data != NULL);",
          "617:   IsolateDebugger* d = reinterpret_cast<IsolateDebugger*>(c->data);",
          "619:   d->host_->Enter();",
          "620:   HandleScope scope;",
          "622:   Handle<Value> argv[1] = { d->handle_ };",
          "623:   Function::Cast(*d->init_callback_fn_)->Call(d->handle_, 1, argv);",
          "625:   d->host_->Exit();",
          "628:   uv_unref(d->host_loop_);",
          "629: }",
          "632: Handle<Value> IsolateDebugger::New(const Arguments& args) {",
          "633:   HandleScope scope;",
          "635:   IsolateDebugger* d = new IsolateDebugger(args[0]);",
          "636:   d->Wrap(args.Holder());",
          "638:   return args.This();",
          "639: }",
          "642: IsolateDebugger* IsolateDebugger::New(Handle<Value> init) {",
          "643:   HandleScope scope;",
          "645:   Handle<Value> argv[1] = { init };",
          "646:   Handle<Object> i = isolate_debugger_constructor->GetFunction()->NewInstance(",
          "647:       1,",
          "648:       argv",
          "649:   );",
          "651:   return ObjectWrap::Unwrap<IsolateDebugger>(i);",
          "652: }",
          "655: Handle<Value> IsolateDebugger::Write(const Arguments& args) {",
          "656:   HandleScope scope;",
          "658:   if (args.Length() != 1) {",
          "659:     return ThrowException(String::New(",
          "660:         \"IsolateDebugger::Write requires one argument\"",
          "661:     ));",
          "662:   }",
          "664:   IsolateDebugger* d = ObjectWrap::Unwrap<IsolateDebugger>(args.This());",
          "665:   assert(d->initialized_);",
          "667:   String::Value v(args[0]->ToString());",
          "668:   v8::Debug::SendCommand(*v,",
          "669:                          v.length(),",
          "670:                          NULL,",
          "671:                          d->debuggee_v8_);",
          "673:   return Undefined();",
          "674: }",
          "677: void IsolateDebugger::DebugMessageHandler(const v8::Debug::Message& message) {",
          "678:   IsolateDebugger* d = Isolate::GetCurrent()->debugger_instance;",
          "680:   String::Value v(message.GetJSON());",
          "681:   d->msg_channel_->Send(new IsolateDebuggerMessage(d, *v, v.length()));",
          "682: }",
          "685: void IsolateDebugger::MessageCallback(IsolateDebuggerMessage* msg, void*) {",
          "686:   assert(msg != NULL);",
          "688:   IsolateDebugger *d = msg->d_;",
          "690:   d->host_->Enter();",
          "691:   HandleScope scope;",
          "694:   Handle<Value> argv[] = { String::New(msg->value_, msg->len_) };",
          "695:   MakeCallback(d->handle_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "698:   delete msg;",
          "701:   d->host_->Exit();",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define SRC_NODE_ISOLATE_H_",
          "25: #include \"v8.h\"",
          "26: #include \"uv.h\"",
          "27: #include \"node_vars.h\"",
          "28: #include \"ngx-queue.h\"",
          "30: #ifdef NDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include \"v8-debug.h\"",
          "29: #include \"node_object_wrap.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: namespace node {",
          "45: class IsolateWrap;",
          "46: class IsolateChannel;",
          "47: class IsolateMessage;",
          "49: class Isolate {",
          "50: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: template <class T>",
          "49: class Channel;",
          "54: class IsolateDebugger;",
          "55: class IsolateDebuggerMessage;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   int argc_;",
          "53:   uv_thread_t tid_;",
          "56:   static void Initialize();",
          "57:   static int Count();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   enum {",
          "64:     kNone,",
          "65:     kDebug,",
          "66:     kDebugBrk",
          "67:   } debug_state;",
          "68:   IsolateDebugger* debugger_instance;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:   bool globals_init_;",
          "126: };",
          "128: } // namespace node",
          "130: #endif // SRC_NODE_ISOLATE_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: class IsolateDebugger : ObjectWrap {",
          "144: public:",
          "145:   static void Initialize();",
          "146:   void Init();",
          "147:   static void InitCallback(uv_async_t* c, int status);",
          "149:   static v8::Handle<v8::Value> New(const v8::Arguments& args);",
          "150:   static IsolateDebugger* New(v8::Handle<v8::Value> init);",
          "152:   static v8::Handle<v8::Value> Write(const v8::Arguments& args);",
          "154:   static void DebugMessageHandler(const v8::Debug::Message& message);",
          "155:   static void MessageCallback(IsolateDebuggerMessage* msg, void*);",
          "157:   IsolateDebugger(v8::Handle<v8::Value> init);",
          "158:   ~IsolateDebugger();",
          "160: protected:",
          "161:   Isolate* host_;",
          "162:   uv_loop_t* host_loop_;",
          "164:   uv_async_t init_callback_;",
          "165:   v8::Persistent<v8::Value> init_callback_fn_;",
          "167:   bool initialized_;",
          "168:   Isolate* debuggee_;",
          "169:   v8::Isolate* debuggee_v8_;",
          "171:   struct debug_msg_s {",
          "172:     uint16_t* value;",
          "173:     int len;",
          "175:     IsolateDebugger* d;",
          "176:   };",
          "178:   Channel<IsolateDebuggerMessage*>* msg_channel_;",
          "179: };",
          "",
          "---------------"
        ],
        "src/node_vars.h||src/node_vars.h": [
          "File: src/node_vars.h -> src/node_vars.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   v8::Persistent<v8::FunctionTemplate> wrapped_context_constructor;",
          "172:   v8::Persistent<v8::FunctionTemplate> wrapped_script_constructor;",
          "175:   v8::Persistent<v8::String> callback_symbol;",
          "176:   v8::Persistent<v8::FunctionTemplate> signal_watcher_constructor_template;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   v8::Persistent<v8::FunctionTemplate> isolate_debugger_constructor;",
          "",
          "---------------"
        ],
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: console.log(\"count: %d\", isolates.count());",
          "7: if (process.tid === 1) {",
          "10:   isolate.onmessage = function() {",
          "11:     console.error(\"onmessage\");",
          "",
          "[Removed Lines]",
          "8:   var isolate = isolates.create(process.argv);",
          "",
          "[Added Lines]",
          "8:   var isolate = isolates.create(process.argv, {",
          "9:     debug: function init(d) {",
          "10:       d.onmessage = function(data) {",
          "11:         data = JSON.parse(data);",
          "12:         if (data.event === 'break') {",
          "13:           d.write(JSON.stringify({",
          "14:             type: 'request',",
          "15:             seq: 1,",
          "16:             command: 'continue'",
          "17:           }));",
          "18:         }",
          "19:       };",
          "20:     }",
          "21:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58b8b3fa07df3ddeb32f37aeb7795de2b39a6b66",
      "candidate_info": {
        "commit_hash": "58b8b3fa07df3ddeb32f37aeb7795de2b39a6b66",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/58b8b3fa07df3ddeb32f37aeb7795de2b39a6b66",
        "files": [
          "deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/process.c"
        ],
        "message": "uv: upgrade to 5d5688f2",
        "before_after_code_files": [
          "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c": [
          "File: deps/uv/src/unix/ev/ev.c -> deps/uv/src/unix/ev/ev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "608: static void *",
          "609: ev_realloc_emul (void *ptr, long size)",
          "610: {",
          "",
          "[Removed Lines]",
          "611: #if __GLIBC__",
          "612:   return realloc (ptr, size);",
          "613: #else",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622:   free (ptr);",
          "623:   return 0;",
          "625: }",
          "627: static void *(*alloc)(void *ptr, long size) = ev_realloc_emul;",
          "",
          "[Removed Lines]",
          "624: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c": [
          "File: deps/uv/src/unix/process.c -> deps/uv/src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     if (i != use_fd) {",
          "238:       dup2(use_fd, i);",
          "239:       close(use_fd);",
          "240:     }",
          "241:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     } else {",
          "241:       uv__cloexec(use_fd, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07c886f94446daeb64aaab34904b319992895da4",
      "candidate_info": {
        "commit_hash": "07c886f94446daeb64aaab34904b319992895da4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/07c886f94446daeb64aaab34904b319992895da4",
        "files": [
          "doc/api/process.markdown",
          "src/node.cc",
          "test/pummel/test-process-hrtime.js"
        ],
        "message": "process: add `process.hrtime()`\n\nThis commit adds a high-resolution timer function.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "test/pummel/test-process-hrtime.js||test/pummel/test-process-hrtime.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1571:   return Undefined();",
          "1572: }",
          "1575: typedef void (UV_DYNAMIC* extInit)(Handle<Object> exports);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1575: #define NANOS_PER_SEC 1000000000",
          "1582: Handle<Value> Hrtime(const v8::Arguments& args) {",
          "1583:   HandleScope scope;",
          "1585:   uint64_t t = uv_hrtime();",
          "1587:   if (args.Length() > 0) {",
          "1589:     Local<Array> inArray = Local<Array>::Cast(args[0]);",
          "1590:     uint64_t seconds = inArray->Get(0)->Uint32Value();",
          "1591:     uint64_t nanos = inArray->Get(1)->Uint32Value();",
          "1592:     t -= (seconds * NANOS_PER_SEC) + nanos;",
          "1593:   }",
          "1595:   Local<Array> tuple = Array::New(2);",
          "1596:   tuple->Set(0, Integer::NewFromUnsigned(t / NANOS_PER_SEC));",
          "1597:   tuple->Set(1, Integer::NewFromUnsigned(t % NANOS_PER_SEC));",
          "1599:   return scope.Close(tuple);",
          "1600: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2150:   NODE_SET_METHOD(process, \"_debugPause\", DebugPause);",
          "2151:   NODE_SET_METHOD(process, \"_debugEnd\", DebugEnd);",
          "2153:   NODE_SET_METHOD(process, \"dlopen\", DLOpen);",
          "2155:   NODE_SET_METHOD(process, \"uptime\", Uptime);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2181:   NODE_SET_METHOD(process, \"hrtime\", Hrtime);",
          "",
          "---------------"
        ],
        "test/pummel/test-process-hrtime.js||test/pummel/test-process-hrtime.js": [
          "File: test/pummel/test-process-hrtime.js -> test/pummel/test-process-hrtime.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var start = process.hrtime();",
          "28: assert(Array.isArray(start));",
          "31: var now = Date.now();",
          "32: while (Date.now() - now < 2000);",
          "35: var diff = process.hrtime(start);",
          "39: assert(diff[0] >= 1);",
          "40: assert(diff[0] <= 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6530310ed59c1056aa71c17133b5dbee87e2415c",
      "candidate_info": {
        "commit_hash": "6530310ed59c1056aa71c17133b5dbee87e2415c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6530310ed59c1056aa71c17133b5dbee87e2415c",
        "files": [
          "lib/domain.js",
          "test/simple/test-domain.js"
        ],
        "message": "domain: Remove first arg from intercepted fn\n\nFix to remove the first-arg, in case arguments length is more than 2\nAdd domain.intercept() test about first-arg removal",
        "before_after_code_files": [
          "lib/domain.js||lidomain.js",
          "test/simple/test-domain.js||test/simple/test-domain.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/domain.js||lidomain.js": [
          "File: lib/domain.js -> lidomain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:           args = new Array(len - 1);",
          "187:           for (var i = 1; i < len; i++) {",
          "189:           }",
          "190:           break;",
          "191:       }",
          "",
          "[Removed Lines]",
          "188:             args[i] = arguments[i - 1];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-domain.js||test/simple/test-domain.js": [
          "File: test/simple/test-domain.js -> test/simple/test-domain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "150: var bound = d.intercept(fn2);",
          "151: bound(null, 'data');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: function fn3(data, data2) {",
          "156:   assert.equal(data, 'data', 'should not be null err argument');",
          "157:   assert.equal(data2, 'data2', 'should not be data argument');",
          "158: }",
          "160: bound = d.intercept(fn3);",
          "161: bound(null, 'data', 'data2');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2b1f57f74ce23ee7160de76844a71ab34276aa6",
      "candidate_info": {
        "commit_hash": "f2b1f57f74ce23ee7160de76844a71ab34276aa6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f2b1f57f74ce23ee7160de76844a71ab34276aa6",
        "files": [
          "lib/dgram.js",
          "src/udp_wrap.cc",
          "test/simple/test-dgram-multicast-setTTL.js"
        ],
        "message": "dgram: reintroduce setMulticastTTL()\n\nRemoved during the early stages of node 0.5 refactoring to libuv.",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js",
          "src/udp_wrap.cc||src/udp_wrap.cc",
          "test/simple/test-dgram-multicast-setTTL.js||test/simple/test-dgram-multicast-setTTL.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: Socket.prototype.setMulticastTTL = function(arg) {",
          "241: };",
          "",
          "[Removed Lines]",
          "240:   throw new Error('not yet implemented');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   static Handle<Value> GetSockName(const Arguments& args);",
          "94:   static Handle<Value> AddMembership(const Arguments& args);",
          "95:   static Handle<Value> DropMembership(const Arguments& args);",
          "96:   static Handle<Value> SetBroadcast(const Arguments& args);",
          "98: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   static Handle<Value> SetMulticastTTL(const Arguments& args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:   NODE_SET_PROTOTYPE_METHOD(t, \"getsockname\", GetSockName);",
          "155:   NODE_SET_PROTOTYPE_METHOD(t, \"addMembership\", AddMembership);",
          "156:   NODE_SET_PROTOTYPE_METHOD(t, \"dropMembership\", DropMembership);",
          "157:   NODE_SET_PROTOTYPE_METHOD(t, \"setBroadcast\", SetBroadcast);",
          "159:   target->Set(String::NewSymbol(\"UDP\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:   NODE_SET_PROTOTYPE_METHOD(t, \"setMulticastTTL\", SetMulticastTTL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:   return SetMembership(args, UV_LEAVE_GROUP);",
          "261: }",
          "264: Handle<Value> UDPWrap::DoSend(const Arguments& args, int family) {",
          "265:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: Handle<Value> UDPWrap::SetMulticastTTL(const Arguments& args) {",
          "266:   HandleScope scope;",
          "267:   UNWRAP",
          "269:   assert(args.Length() == 1);",
          "271:   int ttl = args[0]->Uint32Value();",
          "272:   int r = uv_udp_set_multicast_ttl(&wrap->handle_, ttl);",
          "274:   if (r)",
          "275:     SetErrno(uv_last_error(uv_default_loop()));",
          "277:   return scope.Close(Integer::New(r));",
          "278: }",
          "",
          "---------------"
        ],
        "test/simple/test-dgram-multicast-setTTL.js||test/simple/test-dgram-multicast-setTTL.js": [
          "File: test/simple/test-dgram-multicast-setTTL.js -> test/simple/test-dgram-multicast-setTTL.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common'),",
          "23:     assert = require('assert'),",
          "24:     dgram = require('dgram'),",
          "25:     thrown = false,",
          "26:     socket = dgram.createSocket('udp4');",
          "28: socket.bind(common.PORT);",
          "29: socket.setMulticastTTL(16);",
          "32: try {",
          "33:     socket.setMulticastTTL(1000);",
          "34: } catch (e) {",
          "35:     thrown = true;",
          "36: }",
          "38: assert(thrown, 'Setting an invalid mutlicast TTL should throw some error');",
          "41: socket.close();",
          "",
          "---------------"
        ]
      }
    }
  ]
}