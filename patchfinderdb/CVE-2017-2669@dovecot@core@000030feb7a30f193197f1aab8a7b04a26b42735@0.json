{
  "cve_id": "CVE-2017-2669",
  "cve_desc": "Dovecot before version 2.2.29 is vulnerable to a denial of service. When 'dict' passdb and userdb were used for user authentication, the username sent by the IMAP/POP3 client was sent through var_expand() to perform %variable expansion. Sending specially crafted %variable fields could result in excessive memory usage causing the process to crash (and restart), or excessive CPU usage causing all authentications to hang.",
  "repo": "dovecot/core",
  "patch_hash": "000030feb7a30f193197f1aab8a7b04a26b42735",
  "patch_info": {
    "commit_hash": "000030feb7a30f193197f1aab8a7b04a26b42735",
    "repo": "dovecot/core",
    "commit_url": "https://github.com/dovecot/core/commit/000030feb7a30f193197f1aab8a7b04a26b42735",
    "files": [
      "src/auth/db-dict.c"
    ],
    "message": "auth: Do not double-expand key in passdb dict when authenticating\n\nBroken by 79042f8c",
    "before_after_code_files": [
      "src/auth/db-dict.c||src/auth/db-dict.c"
    ]
  },
  "patch_diff": {
    "src/auth/db-dict.c||src/auth/db-dict.c": [
      "File: src/auth/db-dict.c -> src/auth/db-dict.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "413:    continue;",
      "415:   str_truncate(path, strlen(DICT_PATH_SHARED));",
      "422:   ret = dict_lookup(iter->conn->dict, iter->pool,",
      "423:       str_c(path), &key->value, &error);",
      "424:   if (ret > 0) {",
      "",
      "[Removed Lines]",
      "416:   ret = var_expand(path, key->key->key, iter->var_expand_table, &error);",
      "417:   if (ret <= 0) {",
      "418:    auth_request_log_error(iter->auth_request, AUTH_SUBSYS_DB,",
      "419:     \"Failed to expand key %s: %s\", key->key->key, error);",
      "420:    return -1;",
      "421:   }",
      "",
      "[Added Lines]",
      "416:   str_append(path, key->key->key);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5052fbfdbc2678cc8f12899afe55c998f43b740",
      "candidate_info": {
        "commit_hash": "b5052fbfdbc2678cc8f12899afe55c998f43b740",
        "repo": "dovecot/core",
        "commit_url": "https://github.com/dovecot/core/commit/b5052fbfdbc2678cc8f12899afe55c998f43b740",
        "files": [
          "src/auth/db-dict.c",
          "src/doveadm/doveadm-dict.c",
          "src/lib-dict-extra/dict-fs.c",
          "src/lib-dict-extra/dict-ldap.c",
          "src/lib-dict/dict-client.c",
          "src/lib-dict/dict-file.c",
          "src/lib-dict/dict-memcached-ascii.c",
          "src/lib-dict/dict-memcached.c",
          "src/lib-dict/dict-private.h",
          "src/lib-dict/dict-redis.c",
          "src/lib-dict/dict-sql.c",
          "src/lib-dict/dict.c",
          "src/lib-dict/dict.h",
          "src/lib-fs/fs-dict.c",
          "src/lib-storage/index/index-attribute.c",
          "src/plugins/expire/expire-plugin.c",
          "src/plugins/quota/quota-dict.c"
        ],
        "message": "lib-dict: dict_lookup() returns now error string",
        "before_after_code_files": [
          "src/auth/db-dict.c||src/auth/db-dict.c",
          "src/doveadm/doveadm-dict.c||src/doveadm/doveadm-dict.c",
          "src/lib-dict-extra/dict-fs.c||src/lib-dict-extra/dict-fs.c",
          "src/lib-dict-extra/dict-ldap.c||src/lib-dict-extra/dict-ldap.c",
          "src/lib-dict/dict-client.c||src/lib-dict/dict-client.c",
          "src/lib-dict/dict-file.c||src/lib-dict/dict-file.c",
          "src/lib-dict/dict-memcached-ascii.c||src/lib-dict/dict-memcached-ascii.c",
          "src/lib-dict/dict-memcached.c||src/lib-dict/dict-memcached.c",
          "src/lib-dict/dict-private.h||src/lib-dict/dict-private.h",
          "src/lib-dict/dict-redis.c||src/lib-dict/dict-redis.c",
          "src/lib-dict/dict-sql.c||src/lib-dict/dict-sql.c",
          "src/lib-dict/dict.c||src/lib-dict/dict.c",
          "src/lib-dict/dict.h||src/lib-dict/dict.h",
          "src/lib-fs/fs-dict.c||src/lib-fs/fs-dict.c",
          "src/lib-storage/index/index-attribute.c||src/lib-storage/index/index-attribute.c",
          "src/plugins/expire/expire-plugin.c||src/plugins/expire/expire-plugin.c",
          "src/plugins/quota/quota-dict.c||src/plugins/quota/quota-dict.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/auth/db-dict.c||src/auth/db-dict.c"
          ],
          "candidate": [
            "src/auth/db-dict.c||src/auth/db-dict.c"
          ]
        }
      },
      "candidate_diff": {
        "src/auth/db-dict.c||src/auth/db-dict.c": [
          "File: src/auth/db-dict.c -> src/auth/db-dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397: {",
          "398:  struct db_dict_iter_key *key;",
          "399:  string_t *path;",
          "400:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:  const char *error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:   str_truncate(path, strlen(DICT_PATH_SHARED));",
          "414:   var_expand(path, key->key->key, iter->var_expand_table);",
          "415:   ret = dict_lookup(iter->conn->dict, iter->pool,",
          "417:   if (ret > 0) {",
          "418:    auth_request_log_debug(iter->auth_request, AUTH_SUBSYS_DB,",
          "419:             \"Lookup: %s = %s\", str_c(path),",
          "420:             key->value);",
          "421:   } else if (ret < 0) {",
          "422:    auth_request_log_error(iter->auth_request, AUTH_SUBSYS_DB,",
          "424:    return -1;",
          "425:   } else if (key->key->default_value != NULL) {",
          "426:    auth_request_log_debug(iter->auth_request, AUTH_SUBSYS_DB,",
          "",
          "[Removed Lines]",
          "416:       str_c(path), &key->value);",
          "423:     \"Failed to lookup key %s\", str_c(path));",
          "",
          "[Added Lines]",
          "417:       str_c(path), &key->value, &error);",
          "424:     \"Failed to lookup key %s: %s\", str_c(path), error);",
          "",
          "---------------"
        ],
        "src/doveadm/doveadm-dict.c||src/doveadm/doveadm-dict.c": [
          "File: src/doveadm/doveadm-dict.c -> src/doveadm/doveadm-dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: static void cmd_dict_get(int argc, char *argv[])",
          "96: {",
          "97:  struct dict *dict;",
          "99:  int ret;",
          "101:  if (cmd_dict_init(&argc, &argv, 1, 0, cmd_dict_get, &dict) < 0)",
          "",
          "[Removed Lines]",
          "98:  const char *value;",
          "",
          "[Added Lines]",
          "98:  const char *value, *error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:  doveadm_print_init(DOVEADM_PRINT_TYPE_TABLE);",
          "105:  doveadm_print_header(\"value\", \"\", DOVEADM_PRINT_HEADER_FLAG_HIDE_TITLE);",
          "108:  if (ret < 0) {",
          "110:   doveadm_exit_code = EX_TEMPFAIL;",
          "111:  } else if (ret == 0) {",
          "112:   i_error(\"%s doesn't exist\", argv[0]);",
          "",
          "[Removed Lines]",
          "107:  ret = dict_lookup(dict, pool_datastack_create(), argv[0], &value);",
          "109:   i_error(\"dict_lookup(%s) failed\", argv[0]);",
          "",
          "[Added Lines]",
          "107:  ret = dict_lookup(dict, pool_datastack_create(), argv[0], &value, &error);",
          "109:   i_error(\"dict_lookup(%s) failed: %s\", argv[0], error);",
          "",
          "---------------"
        ],
        "src/lib-dict-extra/dict-fs.c||src/lib-dict-extra/dict-fs.c": [
          "File: src/lib-dict-extra/dict-fs.c -> src/lib-dict-extra/dict-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  }",
          "80: }",
          "84: {",
          "85:  struct fs_dict *dict = (struct fs_dict *)_dict;",
          "86:  struct fs_file *file;",
          "87:  struct istream *input;",
          "88:  const unsigned char *data;",
          "89:  size_t size;",
          "90:  string_t *str;",
          "91:  int ret;",
          "95:  input = fs_read_stream(file, IO_BLOCK_SIZE);",
          "96:  i_stream_read(input);",
          "",
          "[Removed Lines]",
          "82: static int fs_dict_lookup(struct dict *_dict, pool_t pool,",
          "83:      const char *key, const char **value_r)",
          "93:  file = fs_file_init(dict->fs, fs_dict_get_full_key(dict, key),",
          "94:        FS_OPEN_MODE_READONLY);",
          "",
          "[Added Lines]",
          "82: static int fs_dict_lookup(struct dict *_dict, pool_t pool, const char *key,",
          "83:      const char **value_r, const char **error_r)",
          "90:  const char *path;",
          "94:  path = fs_dict_get_full_key(dict, key);",
          "95:  file = fs_file_init(dict->fs, path, FS_OPEN_MODE_READONLY);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:   if (input->stream_errno == ENOENT)",
          "111:    ret = 0;",
          "112:  }",
          "114:  i_stream_unref(&input);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   else {",
          "115:     path, i_stream_get_error(input));",
          "116:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:  struct fs_dict_iterate_context *iter =",
          "146:   (struct fs_dict_iterate_context *)ctx;",
          "147:  struct fs_dict *dict = (struct fs_dict *)ctx->dict;",
          "149:  int ret;",
          "",
          "[Removed Lines]",
          "148:  const char *path;",
          "",
          "[Added Lines]",
          "153:  const char *path, *error;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "166:  }",
          "167:  p_clear(iter->value_pool);",
          "168:  path = t_strconcat(iter->paths[iter->path_idx], *key_r, NULL);",
          "171:   iter->failed = TRUE;",
          "172:   return FALSE;",
          "173:  } else if (ret == 0) {",
          "",
          "[Removed Lines]",
          "169:  if ((ret = fs_dict_lookup(ctx->dict, iter->value_pool, path, value_r)) < 0) {",
          "",
          "[Added Lines]",
          "174:  if ((ret = fs_dict_lookup(ctx->dict, iter->value_pool, path, value_r, &error)) < 0) {",
          "176:   i_error(\"%s\", error);",
          "",
          "---------------"
        ],
        "src/lib-dict-extra/dict-ldap.c||src/lib-dict-extra/dict-ldap.c": [
          "File: src/lib-dict-extra/dict-ldap.c -> src/lib-dict-extra/dict-ldap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:  pool_unref(&pool);",
          "302: }",
          "307: {",
          "308:  struct dict_lookup_result res;",
          "312:  ldap_dict_lookup_async(dict, key, ldap_dict_lookup_done, &res);",
          "318:  }",
          "320: }",
          "",
          "[Removed Lines]",
          "304: static",
          "305: int ldap_dict_lookup(struct dict *dict, pool_t pool,",
          "306:         const char *key, const char **value_r)",
          "309:  pool_t orig_pool = pool;",
          "310:  int ret;",
          "314:  if ((ret = ldap_dict_wait(dict)) == 0) {",
          "315:   if (res.ret == 0) {",
          "317:   } else ret = res.ret;",
          "319:  return ret;",
          "",
          "[Added Lines]",
          "304: static int",
          "305: ldap_dict_lookup(struct dict *dict, pool_t pool, const char *key,",
          "306:    const char **value_r, const char **error_r)",
          "312:  if (ldap_dict_wait(dict) < 0) {",
          "314:   return -1;",
          "315:  }",
          "316:  if (res.ret < 0) {",
          "318:   return -1;",
          "320:  if (res.ret > 0)",
          "322:  return res.ret;",
          "",
          "---------------"
        ],
        "src/lib-dict/dict-client.c||src/lib-dict/dict-client.c": [
          "File: src/lib-dict/dict-client.c -> src/lib-dict/dict-client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  unsigned int committed:1;",
          "79: };",
          "82: static void client_dict_disconnect(struct client_dict *dict);",
          "84: const char *dict_client_escape(const char *src)",
          "",
          "[Removed Lines]",
          "81: static int client_dict_connect(struct client_dict *dict);",
          "",
          "[Added Lines]",
          "81: static int client_dict_connect(struct client_dict *dict, const char **error_r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:  return str_c(dest);",
          "160: }",
          "163: {",
          "164:  if (dict->output == NULL) {",
          "167:    return -1;",
          "168:  }",
          "",
          "[Removed Lines]",
          "162: static int client_dict_send_query(struct client_dict *dict, const char *query)",
          "166:   if (client_dict_connect(dict) < 0)",
          "",
          "[Added Lines]",
          "162: static int client_dict_send_query(struct client_dict *dict, const char *query,",
          "163:       const char **error_r)",
          "167:   if (client_dict_connect(dict, error_r) < 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:   if (!dict->handshaked) {",
          "175:    return -1;",
          "176:   }",
          "179:   client_dict_disconnect(dict);",
          "181:    return -1;",
          "183:   if (o_stream_send_str(dict->output, query) < 0 ||",
          "184:       o_stream_flush(dict->output) < 0) {",
          "186:    client_dict_disconnect(dict);",
          "187:    return -1;",
          "188:   }",
          "",
          "[Removed Lines]",
          "180:   if (client_dict_connect(dict) < 0)",
          "185:    i_error(\"write(%s) failed: %m\", dict->path);",
          "",
          "[Added Lines]",
          "177:     dict->path, o_stream_get_error(dict->output));",
          "183:   if (client_dict_connect(dict, error_r) < 0)",
          "189:     dict->path, o_stream_get_error(dict->output));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194: client_dict_transaction_send_begin(struct client_dict_transaction_context *ctx)",
          "195: {",
          "196:  struct client_dict *dict = (struct client_dict *)ctx->ctx.dict;",
          "198:  if (ctx->failed)",
          "199:   return -1;",
          "203:  query = t_strdup_printf(\"%c%u\\n\", DICT_PROTOCOL_CMD_BEGIN, ctx->id);",
          "205:   ctx->failed = TRUE;",
          "209: }",
          "211: static int ATTR_NOWARN_UNUSED_RESULT",
          "",
          "[Removed Lines]",
          "201:  const char *query;",
          "204:  if (client_dict_send_query(dict, query) < 0)",
          "206:  else",
          "207:   ctx->connect_counter = dict->connect_counter;",
          "208:  return ctx->failed ? -1 : 0;",
          "",
          "[Added Lines]",
          "201:  const char *query, *error;",
          "207:  if (client_dict_send_query(dict, query, &error) < 0) {",
          "208:   i_error(\"%s\", error);",
          "210:   return -1;",
          "211:  }",
          "212:  ctx->connect_counter = dict->connect_counter;",
          "213:  return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "312: }",
          "314: static int",
          "316: {",
          "317:  unsigned int id;",
          "318:  char *line;",
          "",
          "[Removed Lines]",
          "315: client_dict_read_one_line_real(struct client_dict *dict, char **line_r)",
          "",
          "[Added Lines]",
          "320: client_dict_read_one_line_real(struct client_dict *dict, char **line_r,",
          "321:           const char **error_r)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "323:   ret = client_dict_read_timeout(dict);",
          "324:   switch (ret) {",
          "325:   case -1:",
          "332:    return -1;",
          "333:   case -2:",
          "335:    return -1;",
          "336:   case 0:",
          "338:     dict->path, DICT_CLIENT_READ_TIMEOUT_SECS);",
          "339:    return -1;",
          "340:   default:",
          "",
          "[Removed Lines]",
          "326:    if (dict->input->stream_errno != 0)",
          "327:     i_error(\"read(%s) failed: %m\", dict->path);",
          "328:    else {",
          "329:     i_error(\"read(%s) failed: Remote disconnected\",",
          "330:      dict->path);",
          "331:    }",
          "334:    i_error(\"read(%s) returned too much data\", dict->path);",
          "337:    i_error(\"read(%s) failed: Timeout after %u seconds\",",
          "",
          "[Added Lines]",
          "333:     dict->path, i_stream_get_disconnect_reason(dict->input));",
          "337:     \"read(%s) returned too much data\", dict->path);",
          "341:     \"read(%s) failed: Timeout after %u seconds\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "354:    ret = -1;",
          "355:    break;",
          "356:   default:",
          "359:    return -1;",
          "360:   }",
          "361:   if (str_to_uint(line+2, &id) < 0) {",
          "363:    return -1;",
          "364:   }",
          "365:   client_dict_finish_transaction(dict, id, ret);",
          "",
          "[Removed Lines]",
          "357:    i_error(\"dict-client: Invalid async commit line: %s\",",
          "358:     line);",
          "362:    i_error(\"dict-client: Invalid ID\");",
          "",
          "[Added Lines]",
          "362:     \"dict-client: Invalid async commit line: %s\", line);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "371:   if (*line == DICT_PROTOCOL_REPLY_OK)",
          "372:    return 0;",
          "373:   if (*line != '\\0' && *line != DICT_PROTOCOL_REPLY_FAIL) {",
          "376:    return -1;",
          "377:   }",
          "378:   dict->iter_replies_skip--;",
          "",
          "[Removed Lines]",
          "374:    i_error(\"dict-client: Invalid iteration reply line: %s\",",
          "375:     line);",
          "",
          "[Added Lines]",
          "379:     \"dict-client: Invalid iteration reply line: %s\", line);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "382:  return 1;",
          "383: }",
          "386: {",
          "387:  int ret;",
          "390:   client_dict_disconnect(dict);",
          "391:  return ret;",
          "392: }",
          "",
          "[Removed Lines]",
          "385: static int client_dict_read_one_line(struct client_dict *dict, char **line_r)",
          "389:  if ((ret = client_dict_read_one_line_real(dict, line_r)) < 0)",
          "",
          "[Added Lines]",
          "389: static int client_dict_read_one_line(struct client_dict *dict, char **line_r,",
          "390:          const char **error_r)",
          "394:  if ((ret = client_dict_read_one_line_real(dict, line_r, error_r)) < 0)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "414:  }",
          "415: }",
          "418: {",
          "422:   ;",
          "424:  client_dict_add_timeout(dict);",
          "426: }",
          "429: {",
          "430:  const char *query;",
          "432:  if (dict->last_failed_connect == ioloop_time) {",
          "434:   return -1;",
          "435:  }",
          "",
          "[Removed Lines]",
          "417: static char *client_dict_read_line(struct client_dict *dict)",
          "419:  char *line;",
          "421:  while (client_dict_read_one_line(dict, &line) == 0)",
          "425:  return line;",
          "428: static int client_dict_connect(struct client_dict *dict)",
          "",
          "[Added Lines]",
          "422: static int client_dict_read_line(struct client_dict *dict,",
          "423:      char **line_r, const char **error_r)",
          "425:  int ret;",
          "427:  while ((ret = client_dict_read_one_line(dict, line_r, error_r)) == 0)",
          "429:  i_assert(ret < 0 || *line_r != NULL);",
          "432:  return ret < 0 ? -1 : 0;",
          "435: static int client_dict_connect(struct client_dict *dict, const char **error_r)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "438:  if (dict->fd == -1) {",
          "439:   dict->last_failed_connect = ioloop_time;",
          "440:   if (errno == EACCES) {",
          "443:   } else {",
          "446:   }",
          "447:   return -1;",
          "448:  }",
          "",
          "[Removed Lines]",
          "441:    i_error(\"%s\", eacces_error_get(\"net_connect_unix\",",
          "442:              dict->path));",
          "444:    i_error(\"net_connect_unix(%s) failed: %m\",",
          "445:     dict->path);",
          "",
          "[Added Lines]",
          "450:           dict->path);",
          "453:     \"net_connect_unix(%s) failed: %m\", dict->path);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "458:     DICT_CLIENT_PROTOCOL_MAJOR_VERSION,",
          "459:     DICT_CLIENT_PROTOCOL_MINOR_VERSION,",
          "460:     dict->value_type, dict->username, dict->uri);",
          "462:   dict->last_failed_connect = ioloop_time;",
          "463:   client_dict_disconnect(dict);",
          "464:   return -1;",
          "",
          "[Removed Lines]",
          "461:  if (client_dict_send_query(dict, query) < 0) {",
          "",
          "[Added Lines]",
          "469:  if (client_dict_send_query(dict, query, error_r) < 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "567: static int client_dict_wait(struct dict *_dict)",
          "568: {",
          "569:  struct client_dict *dict = (struct client_dict *)_dict;",
          "570:  char *line;",
          "571:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:  const char *error;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "574:   return -1;",
          "576:  while (dict->async_commits > 0) {",
          "578:    return -1;",
          "580:   if (ret > 0) {",
          "581:    i_error(\"dict-client: Unexpected reply waiting waiting for async commits: %s\", line);",
          "",
          "[Removed Lines]",
          "577:   if ((ret = client_dict_read_one_line(dict, &line)) < 0)",
          "",
          "[Added Lines]",
          "586:   if ((ret = client_dict_read_one_line(dict, &line, &error)) < 0) {",
          "587:    i_error(\"%s\", error);",
          "589:   }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "586:  return 0;",
          "587: }",
          "591: {",
          "592:  struct client_dict *dict = (struct client_dict *)_dict;",
          "595:  query = t_strdup_printf(\"%c%s\\n\", DICT_PROTOCOL_CMD_LOOKUP,",
          "596:     dict_client_escape(key));",
          "598:   return -1;",
          "603:   return -1;",
          "605:  switch (*line) {",
          "",
          "[Removed Lines]",
          "589: static int client_dict_lookup(struct dict *_dict, pool_t pool,",
          "590:          const char *key, const char **value_r)",
          "593:  const char *query, *line;",
          "597:  if (client_dict_send_query(dict, query) < 0)",
          "601:  line = client_dict_read_line(dict);",
          "602:  if (line == NULL)",
          "",
          "[Added Lines]",
          "600: static int client_dict_lookup(struct dict *_dict, pool_t pool, const char *key,",
          "601:          const char **value_r, const char **error_r)",
          "604:  const char *query;",
          "605:  char *line;",
          "609:  if (client_dict_send_query(dict, query, error_r) < 0)",
          "613:  if (client_dict_read_line(dict, &line, error_r) < 0)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "611:   return 0;",
          "612:  case DICT_PROTOCOL_REPLY_FAIL:",
          "613:   return -1;",
          "614:  default:",
          "616:   client_dict_disconnect(dict);",
          "617:   return -1;",
          "618:  }",
          "",
          "[Removed Lines]",
          "615:   i_error(\"dict-client: Invalid lookup '%s' reply: %s\", key, line);",
          "",
          "[Added Lines]",
          "628:    \"dict-client: Invalid lookup '%s' reply: %s\", key, line);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "626:         struct client_dict_iterate_context *ctx;",
          "627:  string_t *query = t_str_new(256);",
          "628:  unsigned int i;",
          "630:  if (dict->in_iteration)",
          "631:   i_panic(\"dict-client: Only one iteration supported\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:  const char *error;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "641:    str_append(query, dict_client_escape(paths[i]));",
          "642:  }",
          "643:  str_append_c(query, '\\n');",
          "645:   ctx->failed = TRUE;",
          "646:  return &ctx->ctx;",
          "647: }",
          "",
          "[Removed Lines]",
          "644:  if (client_dict_send_query(dict, str_c(query)) < 0)",
          "",
          "[Added Lines]",
          "658:  if (client_dict_send_query(dict, str_c(query), &error) < 0) {",
          "659:   i_error(\"%s\", error);",
          "661:  }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "653:   (struct client_dict_iterate_context *)_ctx;",
          "654:  struct client_dict *dict = (struct client_dict *)_ctx->dict;",
          "655:  char *line, *key, *value;",
          "657:  if (ctx->failed)",
          "658:   return FALSE;",
          "663:   ctx->failed = TRUE;",
          "664:   return FALSE;",
          "665:  }",
          "",
          "[Removed Lines]",
          "661:  line = client_dict_read_line(dict);",
          "662:  if (line == NULL) {",
          "",
          "[Added Lines]",
          "672:  const char *error;",
          "678:  if (client_dict_read_line(dict, &line, &error) < 0) {",
          "679:   i_error(\"%s\", error);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "734: static void dict_async_input(struct client_dict *dict)",
          "735: {",
          "736:  char *line;",
          "737:  int ret;",
          "739:  i_assert(!dict->in_iteration);",
          "741:  do {",
          "743:  } while (ret == 0 && i_stream_get_data_size(dict->input) > 0);",
          "746:   io_remove(&dict->io);",
          "748:   i_error(\"dict-client: Unexpected reply waiting waiting for async commits: %s\", line);",
          "749:   client_dict_disconnect(dict);",
          "750:  }",
          "",
          "[Removed Lines]",
          "742:   ret = client_dict_read_one_line(dict, &line);",
          "745:  if (ret < 0)",
          "747:  else if (ret > 0) {",
          "",
          "[Added Lines]",
          "753:  const char *error;",
          "760:   ret = client_dict_read_one_line(dict, &line, &error);",
          "763:  if (ret < 0) {",
          "764:   i_error(\"%s\", error);",
          "766:  } else if (ret > 0) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "765:  ctx->committed = TRUE;",
          "766:  if (ctx->sent_begin && !ctx->failed) {",
          "769:   query = t_strdup_printf(\"%c%u\\n\", !async ?",
          "770:      DICT_PROTOCOL_CMD_COMMIT :",
          "",
          "[Removed Lines]",
          "767:   const char *query, *line;",
          "",
          "[Added Lines]",
          "786:   const char *query, *error;",
          "787:   char *line;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "782:    }",
          "783:   } else {",
          "787:     ret = -1;",
          "789:    case DICT_PROTOCOL_REPLY_OK:",
          "790:     ret = 1;",
          "791:     break;",
          "",
          "[Removed Lines]",
          "785:    line = client_dict_read_line(dict);",
          "786:    if (line == NULL)",
          "788:    else switch (*line) {",
          "",
          "[Added Lines]",
          "805:    if (client_dict_read_line(dict, &line, &error) < 0) {",
          "806:     i_error(\"%s\", error);",
          "808:    } else switch (*line) {",
          "",
          "---------------"
        ],
        "src/lib-dict/dict-file.c||src/lib-dict/dict-file.c": [
          "File: src/lib-dict/dict-file.c -> src/lib-dict/dict-file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:  return FALSE;",
          "137: }",
          "140: {",
          "141:  int open_type;",
          "",
          "[Removed Lines]",
          "139: static int file_dict_open_latest(struct file_dict *dict)",
          "",
          "[Added Lines]",
          "139: static int file_dict_open_latest(struct file_dict *dict, const char **error_r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   if (errno == ENOENT)",
          "156:    return 0;",
          "157:   if (errno == EACCES)",
          "159:   else",
          "161:   return -1;",
          "162:  }",
          "163:  dict->refreshed = FALSE;",
          "164:  return 1;",
          "165: }",
          "168: {",
          "169:  struct istream *input;",
          "170:  char *key, *value;",
          "173:   return -1;",
          "174:  if (dict->refreshed)",
          "175:   return 0;",
          "",
          "[Removed Lines]",
          "158:    i_error(\"%s\", eacces_error_get(\"open\", dict->path));",
          "160:    i_error(\"open(%s) failed: %m\", dict->path);",
          "167: static int file_dict_refresh(struct file_dict *dict)",
          "172:  if (file_dict_open_latest(dict) < 0)",
          "",
          "[Added Lines]",
          "167: static int file_dict_refresh(struct file_dict *dict, const char **error_r)",
          "172:  if (file_dict_open_latest(dict, error_r) < 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:  return 0;",
          "197: }",
          "201: {",
          "202:  struct file_dict *dict = (struct file_dict *)_dict;",
          "205:   return -1;",
          "",
          "[Removed Lines]",
          "199: static int file_dict_lookup(struct dict *_dict, pool_t pool,",
          "200:        const char *key, const char **value_r)",
          "204:  if (file_dict_refresh(dict) < 0)",
          "",
          "[Added Lines]",
          "199: static int file_dict_lookup(struct dict *_dict, pool_t pool, const char *key,",
          "200:        const char **value_r, const char **error_r)",
          "204:  if (file_dict_refresh(dict, error_r) < 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:         struct file_dict_iterate_context *ctx;",
          "216:  struct file_dict *dict = (struct file_dict *)_dict;",
          "217:  unsigned int i, path_count;",
          "218:  pool_t pool;",
          "220:  pool = pool_alloconly_create(\"file dict iterate\", 256);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:  const char *error;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:  ctx->flags = flags;",
          "232:  ctx->iter = hash_table_iterate_init(dict->hash);",
          "235:   ctx->failed = TRUE;",
          "236:  return &ctx->ctx;",
          "237: }",
          "",
          "[Removed Lines]",
          "234:  if (file_dict_refresh(dict) < 0)",
          "",
          "[Added Lines]",
          "235:  if (file_dict_refresh(dict, &error) < 0) {",
          "236:   i_error(\"%s\", error);",
          "238:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "425:  return fd_copy_stat_permissions(&src_st, dest_fd, dest_path);",
          "426: }",
          "429: {",
          "430:  const char *path, *p, *root;",
          "431:  struct stat st;",
          "",
          "[Removed Lines]",
          "428: static int file_dict_mkdir(struct file_dict *dict)",
          "",
          "[Added Lines]",
          "431: static int file_dict_mkdir(struct file_dict *dict, const char **error_r)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "439:  if (stat_first_parent(path, &root, &st) < 0) {",
          "440:   if (errno == EACCES)",
          "442:   else",
          "444:   return -1;",
          "445:  }",
          "446:  if ((st.st_mode & S_ISGID) != 0) {",
          "",
          "[Removed Lines]",
          "441:    i_error(\"%s\", eacces_error_get(\"stat\", root));",
          "443:    i_error(\"stat(%s) failed: %m\", root);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "451:  if (mkdir_parents(path, mode) < 0 && errno != EEXIST) {",
          "452:   if (errno == EACCES)",
          "454:   else",
          "456:   return -1;",
          "457:  }",
          "458:  return 0;",
          "459: }",
          "461: static int",
          "463: {",
          "464:  int ret;",
          "467:   return -1;",
          "469:  if (dict->fd == -1) {",
          "471:   dict->fd = open(dict->path, O_CREAT | O_RDWR, 0600);",
          "472:   if (dict->fd == -1 && errno == ENOENT) {",
          "474:     return -1;",
          "475:    dict->fd = open(dict->path, O_CREAT | O_RDWR, 0600);",
          "476:   }",
          "477:   if (dict->fd == -1) {",
          "478:    if (errno == EACCES)",
          "482:    return -1;",
          "483:   }",
          "484:   (void)fd_copy_parent_dir_permissions(dict->path, dict->fd,",
          "",
          "[Removed Lines]",
          "453:    i_error(\"%s\", eacces_error_get(\"mkdir_parents\", path));",
          "455:    i_error(\"mkdir_parents(%s) failed: %m\", path);",
          "462: file_dict_lock(struct file_dict *dict, struct file_lock **lock_r)",
          "466:  if (file_dict_open_latest(dict) < 0)",
          "473:    if (file_dict_mkdir(dict) < 0)",
          "479:     i_error(\"%s\", eacces_error_get(\"creat\", dict->path));",
          "480:    else",
          "481:     i_error(\"creat(%s) failed: %m\", dict->path);",
          "",
          "[Added Lines]",
          "465: file_dict_lock(struct file_dict *dict, struct file_lock **lock_r,",
          "466:         const char **error_r)",
          "470:  if (file_dict_open_latest(dict, error_r) < 0)",
          "477:    if (file_dict_mkdir(dict, error_r) < 0)",
          "484:    else {",
          "486:      \"creat(%s) failed: %m\", dict->path);",
          "487:    }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "490:        dict->lock_method,",
          "491:        file_dict_dotlock_settings.timeout,",
          "492:        lock_r) <= 0) {",
          "494:    return -1;",
          "495:   }",
          "500:  return ret < 0 ? -1 : 0;",
          "501: }",
          "",
          "[Removed Lines]",
          "493:    i_error(\"file_wait_lock(%s) failed: %m\", dict->path);",
          "498:  } while ((ret = file_dict_open_latest(dict)) > 0);",
          "",
          "[Added Lines]",
          "500:     \"file_wait_lock(%s) failed: %m\", dict->path);",
          "505:  } while ((ret = file_dict_open_latest(dict, error_r)) > 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "509:  const char *temp_path = NULL;",
          "510:  struct hash_iterate_context *iter;",
          "511:  struct ostream *output;",
          "512:  char *key, *value;",
          "513:  string_t *str;",
          "514:  int fd = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519:  const char *error;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "518:  switch (dict->lock_method) {",
          "519:  case FILE_LOCK_METHOD_FCNTL:",
          "520:  case FILE_LOCK_METHOD_FLOCK:",
          "522:    return -1;",
          "523:   temp_path = t_strdup_printf(\"%s.tmp\", dict->path);",
          "524:   fd = creat(temp_path, 0600);",
          "525:   if (fd == -1) {",
          "",
          "[Removed Lines]",
          "521:   if (file_dict_lock(dict, &lock) < 0)",
          "",
          "[Added Lines]",
          "529:   if (file_dict_lock(dict, &lock, &error) < 0) {",
          "530:    i_error(\"%s\", error);",
          "532:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "532:   fd = file_dotlock_open(&file_dict_dotlock_settings, dict->path, 0,",
          "533:            &dotlock);",
          "534:   if (fd == -1 && errno == ENOENT) {",
          "536:     return -1;",
          "537:    fd = file_dotlock_open(&file_dict_dotlock_settings,",
          "538:             dict->path, 0, &dotlock);",
          "539:   }",
          "",
          "[Removed Lines]",
          "535:    if (file_dict_mkdir(dict) < 0)",
          "",
          "[Added Lines]",
          "545:    if (file_dict_mkdir(dict, &error) < 0) {",
          "546:     i_error(\"%s\", error);",
          "548:    }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "547:  }",
          "551:   if (dotlock != NULL)",
          "552:    file_dotlock_delete(&dotlock);",
          "553:   else {",
          "",
          "[Removed Lines]",
          "550:  if (file_dict_refresh(dict) < 0) {",
          "",
          "[Added Lines]",
          "562:  if (file_dict_refresh(dict, &error) < 0) {",
          "563:   i_error(\"%s\", error);",
          "",
          "---------------"
        ],
        "src/lib-dict/dict-memcached-ascii.c||src/lib-dict/dict-memcached-ascii.c": [
          "File: src/lib-dict/dict-memcached-ascii.c -> src/lib-dict/dict-memcached-ascii.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:  return TRUE;",
          "122: }",
          "125: {",
          "126:  struct memcached_ascii_connection *conn = &dict->conn;",
          "127:  const enum memcached_ascii_input_state *states;",
          "",
          "[Removed Lines]",
          "124: static int memcached_ascii_input_reply_read(struct memcached_ascii_dict *dict)",
          "",
          "[Added Lines]",
          "124: static int memcached_ascii_input_reply_read(struct memcached_ascii_dict *dict,",
          "125:          const char **error_r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:  states = array_get(&dict->input_states, &count);",
          "149:  if (count == 0) {",
          "152:   return -1;",
          "153:  }",
          "154:  switch (states[0]) {",
          "",
          "[Removed Lines]",
          "150:   i_error(\"memcached_ascii: Unexpected input (expected nothing): %s\",",
          "151:    line);",
          "",
          "[Added Lines]",
          "152:    \"memcached_ascii: Unexpected input (expected nothing): %s\", line);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:    if (str_to_uint(p+1, &conn->reply_bytes_left) < 0)",
          "161:     break;",
          "164:   } else if (strcmp(line, \"END\") == 0)",
          "165:    return 1;",
          "166:   break;",
          "",
          "[Removed Lines]",
          "163:    return memcached_ascii_input_reply_read(dict);",
          "",
          "[Added Lines]",
          "164:    return memcached_ascii_input_reply_read(dict, error_r);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:    break;",
          "182:   return 1;",
          "183:  }",
          "185:   states[0], line);",
          "186:  return -1;",
          "187: }",
          "190: {",
          "191:  struct memcached_ascii_dict_reply *replies;",
          "192:  unsigned int count;",
          "193:  int ret;",
          "196:   return ret;",
          "198:  array_delete(&dict->input_states, 0, 1);",
          "",
          "[Removed Lines]",
          "184:  i_error(\"memcached_ascii: Unexpected input (state=%d): %s\",",
          "189: static int memcached_ascii_input_reply(struct memcached_ascii_dict *dict)",
          "195:  if ((ret = memcached_ascii_input_reply_read(dict)) <= 0)",
          "",
          "[Added Lines]",
          "186:   \"memcached_ascii: Unexpected input (state=%d): %s\",",
          "191: static int memcached_ascii_input_reply(struct memcached_ascii_dict *dict,",
          "192:            const char **error_r)",
          "198:  if ((ret = memcached_ascii_input_reply_read(dict, error_r)) <= 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211: {",
          "212:  struct memcached_ascii_connection *conn =",
          "213:   (struct memcached_ascii_connection *)_conn;",
          "214:  int ret;",
          "216:  switch (i_stream_read(_conn->input)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:  const char *error;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "223:   break;",
          "224:  }",
          "228:   memcached_ascii_conn_destroy(_conn);",
          "229:  io_loop_stop(conn->dict->ioloop);",
          "230: }",
          "233: {",
          "234:  dict->prev_ioloop = current_ioloop;",
          "235:  io_loop_set_current(dict->ioloop);",
          "",
          "[Removed Lines]",
          "226:  while ((ret = memcached_ascii_input_reply(conn->dict)) > 0) ;",
          "227:  if (ret < 0)",
          "232: static int memcached_ascii_input_wait(struct memcached_ascii_dict *dict)",
          "",
          "[Added Lines]",
          "230:  while ((ret = memcached_ascii_input_reply(conn->dict, &error)) > 0) ;",
          "231:  if (ret < 0) {",
          "232:   i_error(\"%s\", error);",
          "234:  }",
          "238: static int memcached_ascii_input_wait(struct memcached_ascii_dict *dict,",
          "239:           const char **error_r)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245:   dict->to = io_loop_move_timeout(&dict->to);",
          "246:  connection_switch_ioloop(&dict->conn.conn);",
          "249: }",
          "251: static void memcached_ascii_input_timeout(struct memcached_ascii_dict *dict)",
          "",
          "[Removed Lines]",
          "248:  return dict->conn.conn.fd_in == -1 ? -1 : 0;",
          "",
          "[Added Lines]",
          "255:  if (dict->conn.conn.fd_in == -1) {",
          "257:   return -1;",
          "258:  }",
          "259:  return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:  memcached_ascii_conn_destroy(&dict->conn.conn);",
          "256: }",
          "259: {",
          "260:  int ret = 0;",
          "",
          "[Removed Lines]",
          "258: static int memcached_ascii_wait_replies(struct memcached_ascii_dict *dict)",
          "",
          "[Added Lines]",
          "269: static int memcached_ascii_wait_replies(struct memcached_ascii_dict *dict,",
          "270:      const char **error_r)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "264:  while (array_count(&dict->input_states) > 0) {",
          "265:   i_assert(array_count(&dict->replies) > 0);",
          "268:    if (ret < 0)",
          "269:     memcached_ascii_conn_destroy(&dict->conn.conn);",
          "270:    break;",
          "271:   }",
          "273:   if (ret != 0)",
          "274:    break;",
          "275:  }",
          "",
          "[Removed Lines]",
          "267:   if ((ret = memcached_ascii_input_reply(dict)) != 0) {",
          "272:   ret = memcached_ascii_input_wait(dict);",
          "",
          "[Added Lines]",
          "279:   if ((ret = memcached_ascii_input_reply(dict, error_r)) != 0) {",
          "284:   ret = memcached_ascii_input_wait(dict, error_r);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "278:  return ret < 0 ? -1 : 0;",
          "279: }",
          "282: {",
          "283:  int ret;",
          "",
          "[Removed Lines]",
          "281: static int memcached_ascii_wait(struct memcached_ascii_dict *dict)",
          "",
          "[Added Lines]",
          "293: static int memcached_ascii_wait(struct memcached_ascii_dict *dict,",
          "294:     const char **error_r)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "289:   dict->to = timeout_add(dict->timeout_msecs,",
          "290:            memcached_ascii_input_timeout, dict);",
          "292:   timeout_remove(&dict->to);",
          "293:   if (ret < 0)",
          "294:    return -1;",
          "295:  }",
          "297:   return -1;",
          "298:  i_assert(array_count(&dict->input_states) == 0);",
          "299:  i_assert(array_count(&dict->replies) == 0);",
          "",
          "[Removed Lines]",
          "291:   ret = memcached_ascii_input_wait(dict);",
          "296:  if (memcached_ascii_wait_replies(dict) < 0)",
          "",
          "[Added Lines]",
          "304:   ret = memcached_ascii_input_wait(dict, error_r);",
          "309:  if (memcached_ascii_wait_replies(dict, error_r) < 0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "429:  struct memcached_ascii_dict *dict =",
          "430:   (struct memcached_ascii_dict *)_dict;",
          "431:  struct ioloop *old_ioloop = current_ioloop;",
          "435:  connection_deinit(&dict->conn.conn);",
          "437:  io_loop_set_current(dict->ioloop);",
          "",
          "[Removed Lines]",
          "433:  if (array_count(&dict->input_states) > 0)",
          "434:   (void)memcached_ascii_wait(dict);",
          "",
          "[Added Lines]",
          "445:  const char *error;",
          "447:  if (array_count(&dict->input_states) > 0) {",
          "448:   if (memcached_ascii_wait(dict, &error) < 0)",
          "449:    i_error(\"%s\", error);",
          "450:  }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "449:   connection_list_deinit(&memcached_ascii_connections);",
          "450: }",
          "453: {",
          "454:  if (dict->conn.conn.input != NULL)",
          "455:   return 0;",
          "457:  if (dict->conn.conn.fd_in == -1) {",
          "458:   if (connection_client_connect(&dict->conn.conn) < 0) {",
          "460:     net_ip2addr(&dict->ip), dict->port);",
          "461:    return -1;",
          "462:   }",
          "463:  }",
          "465: }",
          "467: static const char *",
          "",
          "[Removed Lines]",
          "452: static int memcached_ascii_connect(struct memcached_ascii_dict *dict)",
          "459:    i_error(\"memcached_ascii: Couldn't connect to %s:%u\",",
          "464:  return memcached_ascii_wait(dict);",
          "",
          "[Added Lines]",
          "468: static int memcached_ascii_connect(struct memcached_ascii_dict *dict,",
          "469:        const char **error_r)",
          "477:     \"memcached_ascii: Couldn't connect to %s:%u\",",
          "482:  return memcached_ascii_wait(dict, error_r);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "483: }",
          "485: static int",
          "488: {",
          "489:  struct memcached_ascii_dict *dict = (struct memcached_ascii_dict *)_dict;",
          "490:  struct memcached_ascii_dict_reply *reply;",
          "491:  enum memcached_ascii_input_state state = MEMCACHED_INPUT_STATE_GET;",
          "494:   return -1;",
          "496:  key = memcached_ascii_dict_get_full_key(dict, key);",
          "",
          "[Removed Lines]",
          "486: memcached_ascii_dict_lookup(struct dict *_dict, pool_t pool,",
          "487:        const char *key, const char **value_r)",
          "493:  if (memcached_ascii_connect(dict) < 0)",
          "",
          "[Added Lines]",
          "504: memcached_ascii_dict_lookup(struct dict *_dict, pool_t pool, const char *key,",
          "505:        const char **value_r, const char **error_r)",
          "511:  if (memcached_ascii_connect(dict, error_r) < 0)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "501:  reply = array_append_space(&dict->replies);",
          "502:  reply->reply_count = 1;",
          "505:   return -1;",
          "",
          "[Removed Lines]",
          "504:  if (memcached_ascii_wait(dict) < 0)",
          "",
          "[Added Lines]",
          "522:  if (memcached_ascii_wait(dict, error_r) < 0)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "568:  struct memcached_ascii_dict_reply *reply;",
          "569:  const struct dict_transaction_memory_change *changes;",
          "570:  unsigned int i, count, old_state_count;",
          "573:   return -1;",
          "575:  old_state_count = array_count(&dict->input_states);",
          "576:  changes = array_get(&ctx->memctx->changes, &count);",
          "",
          "[Removed Lines]",
          "572:  if (memcached_ascii_connect(dict) < 0)",
          "",
          "[Added Lines]",
          "589:  const char *error;",
          "591:  if (memcached_ascii_connect(dict, &error) < 0) {",
          "592:   i_error(\"%s\", error);",
          "594:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "600:  struct memcached_ascii_dict *dict =",
          "601:   (struct memcached_ascii_dict *)_ctx->dict;",
          "602:  struct dict_memcached_ascii_commit_ctx commit_ctx;",
          "603:  int ret = 1;",
          "605:  if (_ctx->changed) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624:  const char *error;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "613:   ret = memcached_ascii_transaction_send(&commit_ctx);",
          "614:   if (!async && ret >= 0) {",
          "616:     ret = -1;",
          "617:   }",
          "618:   str_free(&commit_ctx.str);",
          "619:  }",
          "",
          "[Removed Lines]",
          "615:    if (memcached_ascii_wait(dict) < 0)",
          "",
          "[Added Lines]",
          "637:    if (memcached_ascii_wait(dict, &error) < 0) {",
          "638:     i_error(\"%s\", error);",
          "640:    }",
          "",
          "---------------"
        ],
        "src/lib-dict/dict-memcached.c||src/lib-dict/dict-memcached.c": [
          "File: src/lib-dict/dict-memcached.c -> src/lib-dict/dict-memcached.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:  i_assert(buf->used == MEMCACHED_REQUEST_HDR_LENGTH);",
          "272: }",
          "276: {",
          "277:  struct memcached_dict *dict = (struct memcached_dict *)_dict;",
          "278:  struct ioloop *prev_ioloop = current_ioloop;",
          "",
          "[Removed Lines]",
          "274: static int memcached_dict_lookup(struct dict *_dict, pool_t pool,",
          "275:      const char *key, const char **value_r)",
          "",
          "[Added Lines]",
          "274: static int",
          "275: memcached_dict_lookup(struct dict *_dict, pool_t pool, const char *key,",
          "276:         const char **value_r, const char **error_r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:  if (strncmp(key, DICT_PATH_SHARED, strlen(DICT_PATH_SHARED)) == 0)",
          "283:   key += strlen(DICT_PATH_SHARED);",
          "284:  else {",
          "286:   return -1;",
          "287:  }",
          "288:  if (*dict->key_prefix != '\\0')",
          "289:   key = t_strconcat(dict->key_prefix, key, NULL);",
          "290:  key_len = strlen(key);",
          "291:  if (key_len > 0xffff) {",
          "294:   return -1;",
          "295:  }",
          "",
          "[Removed Lines]",
          "285:   i_error(\"memcached: Only shared keys supported currently\");",
          "292:   i_error(\"memcached: Key is too long (%u bytes): %s\",",
          "293:    key_len, key);",
          "",
          "[Added Lines]",
          "294:    \"memcached: Key is too long (%u bytes): %s\", key_len, key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:  case MEMCACHED_RESPONSE_NOTFOUND:",
          "346:   return 0;",
          "347:  case MEMCACHED_RESPONSE_INTERNALERROR:",
          "349:   return -1;",
          "350:  case MEMCACHED_RESPONSE_BUSY:",
          "352:   return -1;",
          "353:  case MEMCACHED_RESPONSE_TEMPFAILURE:",
          "355:   return -1;",
          "356:  }",
          "360:  return -1;",
          "361: }",
          "",
          "[Removed Lines]",
          "348:   i_error(\"memcached: Lookup(%s) failed: Internal error\", key);",
          "351:   i_error(\"memcached: Lookup(%s) failed: Busy\", key);",
          "354:   i_error(\"memcached: Lookup(%s) failed: Temporary failure\", key);",
          "358:  i_error(\"memcached: Lookup(%s) failed: Error code=%u\",",
          "359:   key, dict->conn.reply.status);",
          "",
          "[Added Lines]",
          "361:        dict->conn.reply.status);",
          "",
          "---------------"
        ],
        "src/lib-dict/dict-private.h||src/lib-dict/dict-private.h": [
          "File: src/lib-dict/dict-private.h -> src/lib-dict/dict-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  int (*wait)(struct dict *dict);",
          "13:  int (*lookup)(struct dict *dict, pool_t pool,",
          "16:  struct dict_iterate_context *",
          "17:   (*iterate_init)(struct dict *dict, const char *const *paths,",
          "",
          "[Removed Lines]",
          "14:         const char *key, const char **value_r);",
          "",
          "[Added Lines]",
          "14:         const char *key, const char **value_r,",
          "15:         const char **error_r);",
          "",
          "---------------"
        ],
        "src/lib-dict/dict-redis.c||src/lib-dict/dict-redis.c": [
          "File: src/lib-dict/dict-redis.c -> src/lib-dict/dict-redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:  redis_input_state_add(dict, REDIS_INPUT_STATE_SELECT);",
          "489: }",
          "493: {",
          "494:  struct redis_dict *dict = (struct redis_dict *)_dict;",
          "495:  struct timeout *to;",
          "",
          "[Removed Lines]",
          "491: static int redis_dict_lookup(struct dict *_dict, pool_t pool,",
          "492:         const char *key, const char **value_r)",
          "",
          "[Added Lines]",
          "491: static int redis_dict_lookup(struct dict *_dict, pool_t pool, const char *key,",
          "492:         const char **value_r, const char **error_r)",
          "",
          "---------------"
        ],
        "src/lib-dict/dict-sql.c||src/lib-dict/dict-sql.c": [
          "File: src/lib-dict/dict-sql.c -> src/lib-dict/dict-sql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:      result, result_idx);",
          "419: }",
          "423: {",
          "424:  struct sql_dict *dict = (struct sql_dict *)_dict;",
          "425:  const struct dict_sql_map *map;",
          "426:  struct sql_result *result = NULL;",
          "427:  string_t *query = t_str_new(256);",
          "429:  int ret;",
          "435:   return -1;",
          "439:  ret = sql_result_next_row(result);",
          "448:  }",
          "",
          "[Removed Lines]",
          "421: static int sql_dict_lookup(struct dict *_dict, pool_t pool,",
          "422:       const char *key, const char **value_r)",
          "428:  const char *error;",
          "431:  ret = sql_lookup_get_query(dict, key, query, &map, &error);",
          "432:  if (ret < 0) {",
          "433:   i_error(\"%s\", error);",
          "436:  }",
          "437:  result = sql_query_s(dict->db, str_c(query));",
          "440:  if (ret <= 0) {",
          "441:   if (ret < 0) {",
          "442:    i_error(\"dict sql lookup failed: %s\",",
          "443:     sql_result_get_error(result));",
          "444:   }",
          "446:  } else {",
          "",
          "[Added Lines]",
          "421: static int sql_dict_lookup(struct dict *_dict, pool_t pool, const char *key,",
          "422:       const char **value_r, const char **error_r)",
          "432:  if (sql_lookup_get_query(dict, key, query, &map, error_r) < 0)",
          "435:  result = sql_query_s(dict->db, str_c(query));",
          "437:  if (ret < 0) {",
          "439:         sql_result_get_error(result));",
          "440:  } else if (ret > 0) {",
          "",
          "---------------"
        ],
        "src/lib-dict/dict.c||src/lib-dict/dict.c": [
          "File: src/lib-dict/dict.c -> src/lib-dict/dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: }",
          "102: int dict_lookup(struct dict *dict, pool_t pool, const char *key,",
          "104: {",
          "105:  i_assert(dict_key_prefix_is_valid(key));",
          "107: }",
          "109: void dict_lookup_async(struct dict *dict, const char *key,",
          "",
          "[Removed Lines]",
          "103:   const char **value_r)",
          "106:  return dict->v.lookup(dict, pool, key, value_r);",
          "",
          "[Added Lines]",
          "103:   const char **value_r, const char **error_r)",
          "106:  return dict->v.lookup(dict, pool, key, value_r, error_r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:   memset(&result, 0, sizeof(result));",
          "116:   result.ret = dict_lookup(dict, pool_datastack_create(),",
          "120:   callback(&result, context);",
          "121:   return;",
          "122:  }",
          "",
          "[Removed Lines]",
          "117:       key, &result.value);",
          "118:   if (result.ret < 0)",
          "119:    result.error = \"Lookup failed\";",
          "",
          "[Added Lines]",
          "117:       key, &result.value, &result.error);",
          "",
          "---------------"
        ],
        "src/lib-dict/dict.h||src/lib-dict/dict.h": [
          "File: src/lib-dict/dict.h -> src/lib-dict/dict.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: int dict_lookup(struct dict *dict, pool_t pool,",
          "75: void dict_lookup_async(struct dict *dict, const char *key,",
          "76:          dict_lookup_callback_t *callback, void *context);",
          "",
          "[Removed Lines]",
          "74:   const char *key, const char **value_r);",
          "",
          "[Added Lines]",
          "74:   const char *key, const char **value_r, const char **error_r);",
          "",
          "---------------"
        ],
        "src/lib-fs/fs-dict.c||src/lib-fs/fs-dict.c": [
          "File: src/lib-fs/fs-dict.c -> src/lib-fs/fs-dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: static int fs_dict_lookup(struct dict_fs_file *file)",
          "142: {",
          "143:  struct dict_fs *fs = (struct dict_fs *)file->file.fs;",
          "144:  int ret;",
          "146:  if (file->value != NULL)",
          "147:   return 0;",
          "150:  if (ret > 0)",
          "151:   return 0;",
          "152:  else if (ret < 0) {",
          "153:   errno = EIO;",
          "155:   return -1;",
          "156:  } else {",
          "157:   errno = ENOENT;",
          "159:   return -1;",
          "160:  }",
          "161: }",
          "",
          "[Removed Lines]",
          "149:  ret = dict_lookup(fs->dict, file->pool, file->key, &file->value);",
          "154:   fs_set_error(&fs->fs, \"Dict lookup failed\");",
          "158:   fs_set_error(&fs->fs, \"Dict key doesn't exist\");",
          "",
          "[Added Lines]",
          "144:  const char *error;",
          "150:  ret = dict_lookup(fs->dict, file->pool, file->key, &file->value, &error);",
          "155:   fs_set_error(&fs->fs, \"dict_lookup(%s) failed: %s\", file->key, error);",
          "159:   fs_set_error(&fs->fs, \"Dict key %s doesn't exist\", file->key);",
          "",
          "---------------"
        ],
        "src/lib-storage/index/index-attribute.c||src/lib-storage/index/index-attribute.c": [
          "File: src/lib-storage/index/index-attribute.c -> src/lib-storage/index/index-attribute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     struct mail_attribute_value *value_r)",
          "236: {",
          "237:  struct dict *dict;",
          "239:  int ret;",
          "241:  memset(value_r, 0, sizeof(*value_r));",
          "",
          "[Removed Lines]",
          "238:  const char *mailbox_prefix;",
          "",
          "[Added Lines]",
          "238:  const char *mailbox_prefix, *error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:  ret = dict_lookup(dict, pool_datastack_create(),",
          "251:      key_get_prefixed(type, mailbox_prefix, key),",
          "253:  if (ret < 0) {",
          "255:   return -1;",
          "256:  }",
          "257:  return ret;",
          "",
          "[Removed Lines]",
          "252:      &value_r->value);",
          "254:   mail_storage_set_internal_error(t->box->storage);",
          "",
          "[Added Lines]",
          "252:      &value_r->value, &error);",
          "254:   mail_storage_set_critical(t->box->storage,",
          "255:    \"Failed to set attribute %s: %s\", key, error);",
          "",
          "---------------"
        ],
        "src/plugins/expire/expire-plugin.c||src/plugins/expire/expire-plugin.c": [
          "File: src/plugins/expire/expire-plugin.c -> src/plugins/expire/expire-plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  const struct expire_mail_index_header *hdr;",
          "116:  const void *data;",
          "117:  size_t data_size;",
          "119:  int ret;",
          "",
          "[Removed Lines]",
          "118:  const char *value;",
          "",
          "[Added Lines]",
          "118:  const char *value, *error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:  }",
          "140:  ret = dict_lookup(euser->db, pool_datastack_create(),",
          "142:  if (ret <= 0) {",
          "144:    return -1;",
          "145:   first_save_timestamp(box, new_stamp_r);",
          "146:   return 0;",
          "147:  }",
          "",
          "[Removed Lines]",
          "141:      key, &value);",
          "143:   if (ret < 0)",
          "",
          "[Added Lines]",
          "141:      key, &value, &error);",
          "143:   if (ret < 0) {",
          "144:    i_error(\"expire: dict_lookup(%s) failed: %s\", key, error);",
          "146:   }",
          "",
          "---------------"
        ],
        "src/plugins/quota/quota-dict.c||src/plugins/quota/quota-dict.c": [
          "File: src/plugins/quota/quota-dict.c -> src/plugins/quota/quota-dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   return 0;",
          "165:  T_BEGIN {",
          "168:   ret = dict_lookup(root->dict, unsafe_data_stack_pool,",
          "174:    intmax_t tmp;",
          "",
          "[Removed Lines]",
          "166:   const char *value;",
          "169:       want_bytes ? DICT_QUOTA_CURRENT_BYTES_PATH :",
          "170:       DICT_QUOTA_CURRENT_COUNT_PATH, &value);",
          "171:   if (ret < 0)",
          "173:   else {",
          "",
          "[Added Lines]",
          "166:   const char *key, *value, *error;",
          "168:   key = want_bytes ? DICT_QUOTA_CURRENT_BYTES_PATH :",
          "169:    DICT_QUOTA_CURRENT_COUNT_PATH;",
          "171:       key, &value, &error);",
          "172:   if (ret < 0) {",
          "173:    i_error(\"dict quota: dict_lookup(%s) failed: %s\", key, error);",
          "175:   } else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21d083ffb353b33f902a78f3f2781868fc457557",
      "candidate_info": {
        "commit_hash": "21d083ffb353b33f902a78f3f2781868fc457557",
        "repo": "dovecot/core",
        "commit_url": "https://github.com/dovecot/core/commit/21d083ffb353b33f902a78f3f2781868fc457557",
        "files": [
          "src/auth/db-dict.c"
        ],
        "message": "auth: Do not double-expand key in passdb dict when authenticating\n\nBroken by 79042f8c",
        "before_after_code_files": [
          "src/auth/db-dict.c||src/auth/db-dict.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/auth/db-dict.c||src/auth/db-dict.c"
          ],
          "candidate": [
            "src/auth/db-dict.c||src/auth/db-dict.c"
          ]
        }
      },
      "candidate_diff": {
        "src/auth/db-dict.c||src/auth/db-dict.c": [
          "File: src/auth/db-dict.c -> src/auth/db-dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:    continue;",
          "410:   str_truncate(path, strlen(DICT_PATH_SHARED));",
          "412:   ret = dict_lookup(iter->conn->dict, iter->pool,",
          "413:       str_c(path), &key->value);",
          "414:   if (ret > 0) {",
          "",
          "[Removed Lines]",
          "411:   var_expand(path, key->key->key, iter->var_expand_table);",
          "",
          "[Added Lines]",
          "411:   str_append(path, key->key->key);",
          "",
          "---------------"
        ]
      }
    }
  ]
}