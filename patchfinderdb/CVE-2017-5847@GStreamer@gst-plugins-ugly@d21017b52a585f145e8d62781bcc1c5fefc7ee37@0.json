{
  "cve_id": "CVE-2017-5847",
  "cve_desc": "The gst_asf_demux_process_ext_content_desc function in gst/asfdemux/gstasfdemux.c in gst-plugins-ugly in GStreamer allows remote attackers to cause a denial of service (out-of-bounds heap read) via vectors involving extended content descriptors.",
  "repo": "GStreamer/gst-plugins-ugly",
  "patch_hash": "d21017b52a585f145e8d62781bcc1c5fefc7ee37",
  "patch_info": {
    "commit_hash": "d21017b52a585f145e8d62781bcc1c5fefc7ee37",
    "repo": "GStreamer/gst-plugins-ugly",
    "commit_url": "https://github.com/GStreamer/gst-plugins-ugly/commit/d21017b52a585f145e8d62781bcc1c5fefc7ee37",
    "files": [
      "gst/asfdemux/gstasfdemux.c"
    ],
    "message": "asfdemux: Check that we have enough data available before parsing bool/uint extended content descriptors\n\nhttps://bugzilla.gnome.org/show_bug.cgi?id=777955",
    "before_after_code_files": [
      "gst/asfdemux/gstasfdemux.c||gst/asfdemux/gstasfdemux.c"
    ]
  },
  "patch_diff": {
    "gst/asfdemux/gstasfdemux.c||gst/asfdemux/gstasfdemux.c": [
      "File: gst/asfdemux/gstasfdemux.c -> gst/asfdemux/gstasfdemux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3439:           break;",
      "3440:         }",
      "3441:         case ASF_DEMUX_DATA_TYPE_DWORD:{",
      "3445:           g_value_init (&tag_value, G_TYPE_UINT);",
      "",
      "[Removed Lines]",
      "3442:           guint uint_val = GST_READ_UINT32_LE (value);",
      "",
      "[Added Lines]",
      "3442:           guint uint_val;",
      "3444:           if (value_len < 4)",
      "3445:             break;",
      "3447:           uint_val = GST_READ_UINT32_LE (value);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3453:         }",
      "3455:         case ASF_DEMUX_DATA_TYPE_BOOL:{",
      "3458:           if (strncmp (\"Stereoscopic\", name_utf8, strlen (name_utf8)) == 0) {",
      "3459:             if (bool_val) {",
      "",
      "[Removed Lines]",
      "3456:           gboolean bool_val = GST_READ_UINT32_LE (value);",
      "",
      "[Added Lines]",
      "3461:           gboolean bool_val;",
      "3463:           if (value_len < 4)",
      "3464:             break;",
      "3466:           bool_val = GST_READ_UINT32_LE (value);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe74dabd2c8dc2be54156729986ea38582e8c7ae",
      "candidate_info": {
        "commit_hash": "fe74dabd2c8dc2be54156729986ea38582e8c7ae",
        "repo": "GStreamer/gst-plugins-ugly",
        "commit_url": "https://github.com/GStreamer/gst-plugins-ugly/commit/fe74dabd2c8dc2be54156729986ea38582e8c7ae",
        "files": [
          "gst/asfdemux/gstasfdemux.c"
        ],
        "message": "asfdemux: Check that we have enough data available before parsing bool/uint extended content descriptors\n\nhttps://bugzilla.gnome.org/show_bug.cgi?id=777955",
        "before_after_code_files": [
          "gst/asfdemux/gstasfdemux.c||gst/asfdemux/gstasfdemux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "gst/asfdemux/gstasfdemux.c||gst/asfdemux/gstasfdemux.c"
          ],
          "candidate": [
            "gst/asfdemux/gstasfdemux.c||gst/asfdemux/gstasfdemux.c"
          ]
        }
      },
      "candidate_diff": {
        "gst/asfdemux/gstasfdemux.c||gst/asfdemux/gstasfdemux.c": [
          "File: gst/asfdemux/gstasfdemux.c -> gst/asfdemux/gstasfdemux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3439:           break;",
          "3440:         }",
          "3441:         case ASF_DEMUX_DATA_TYPE_DWORD:{",
          "3445:           g_value_init (&tag_value, G_TYPE_UINT);",
          "",
          "[Removed Lines]",
          "3442:           guint uint_val = GST_READ_UINT32_LE (value);",
          "",
          "[Added Lines]",
          "3442:           guint uint_val;",
          "3444:           if (value_len < 4)",
          "3445:             break;",
          "3447:           uint_val = GST_READ_UINT32_LE (value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3453:         }",
          "3455:         case ASF_DEMUX_DATA_TYPE_BOOL:{",
          "3458:           if (strncmp (\"Stereoscopic\", name_utf8, strlen (name_utf8)) == 0) {",
          "3459:             if (bool_val) {",
          "",
          "[Removed Lines]",
          "3456:           gboolean bool_val = GST_READ_UINT32_LE (value);",
          "",
          "[Added Lines]",
          "3461:           gboolean bool_val;",
          "3463:           if (value_len < 4)",
          "3464:             break;",
          "3466:           bool_val = GST_READ_UINT32_LE (value);",
          "",
          "---------------"
        ]
      }
    }
  ]
}