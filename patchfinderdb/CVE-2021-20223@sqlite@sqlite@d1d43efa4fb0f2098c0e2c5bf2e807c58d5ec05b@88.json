{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9524a7ea9f7c693bd03f8a0df3fdea0d441473d1",
      "candidate_info": {
        "commit_hash": "9524a7ea9f7c693bd03f8a0df3fdea0d441473d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9524a7ea9f7c693bd03f8a0df3fdea0d441473d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "When parsing a CREATE TABLE from the sqlite_master table, delete the CHECK constraints if there are any errors, since there might otherwise be attempts to use those CHECK constraints if PRAGMA writable_schema=ON is set. This undoes the fix in check-in [ea721b34477ab8b4] for a more general solution.\n\nFossilOrigin-Name: a982e6434cd66bfbe94d455f538bcbc4360b91572062d92acae6b77e9560e65d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c856404b4e98d295449a4e89a41495dc007319a8e9c35c1a763718d7c5f67e8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2244:   if( p->pCheck ){",
          "2245:     sqlite3ResolveSelfReference(pParse, p, NC_IsCheck, 0, p->pCheck);",
          "2246:   }",
          "2248: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2246:     if( pParse->nErr ){",
          "2249:       sqlite3ExprListDelete(db, p->pCheck);",
          "2250:       p->pCheck = 0;",
          "2251:     }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3649:           Table *pTab = pExpr->y.pTab;",
          "3650:           int iSrc;",
          "3651:           int iCol = pExpr->iColumn;",
          "3657:           assert( pTab!=0 );",
          "3658:           assert( iCol>=XN_ROWID );",
          "3659:           assert( iCol<pTab->nCol );",
          "",
          "[Removed Lines]",
          "3652:           if( pTab==0 ){",
          "3653:             assert( CORRUPT_DB );",
          "3654:             sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3655:             return target;",
          "3656:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3722:     default: {",
          "3729:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3730:       return target;",
          "3731:     }",
          "",
          "[Removed Lines]",
          "3727:       assert( op==TK_NULL || CORRUPT_DB );",
          "3728:       testcase( op!=TK_NULL );",
          "",
          "[Added Lines]",
          "3722:       assert( op==TK_NULL );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3752:       sqlite3VdbeAddOp2(v, OP_Variable, pExpr->iColumn, target);",
          "3753:       if( pExpr->u.zToken[1]!=0 ){",
          "3754:         const char *z = sqlite3VListNumToName(pParse->pVList, pExpr->iColumn);",
          "3757:         sqlite3VdbeAppendP4(v, (char*)z, P4_STATIC);",
          "3758:       }",
          "",
          "[Removed Lines]",
          "3755:         assert( pExpr->u.zToken[0]=='?' || strcmp(pExpr->u.zToken, z)==0 );",
          "",
          "[Added Lines]",
          "3749:         assert( pExpr->u.zToken[0]=='?' || (z && !strcmp(pExpr->u.zToken, z)) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c84ad3185111e6f437fd89eb702614a232e0c76f",
      "candidate_info": {
        "commit_hash": "c84ad3185111e6f437fd89eb702614a232e0c76f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c84ad3185111e6f437fd89eb702614a232e0c76f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "There is no need to keep track of the number of changed rows or of the last-insert-rowid while running VACUUM.\n\nFossilOrigin-Name: a8a7c05b16f6c73ac55c359fbf62cae4a76eb0d105a3c53e9f47cede9fd85916",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cec5f920f5c2a963f88329a08a443fc04be2dd6f7f2d840be63c0ab1de898f0a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2791:     }",
          "2792:     if( db->mDbFlags & DBFLAG_Vacuum ){",
          "2793:       sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2796:     }else{",
          "2797:       insFlags = OPFLAG_NCHANGE|OPFLAG_LASTROWID|OPFLAG_APPEND;",
          "2798:     }",
          "",
          "[Removed Lines]",
          "2794:       insFlags = OPFLAG_NCHANGE|OPFLAG_LASTROWID|",
          "2795:                            OPFLAG_APPEND|OPFLAG_USESEEKRESULT;",
          "",
          "[Added Lines]",
          "2794:       insFlags = OPFLAG_APPEND|OPFLAG_USESEEKRESULT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2844:         idxInsFlags = OPFLAG_USESEEKRESULT;",
          "2845:         sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2846:       }",
          "2849:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2850:     }",
          "2851:     sqlite3VdbeAddOp3(v, OP_RowData, iSrc, regData, 1);",
          "",
          "[Removed Lines]",
          "2847:     }",
          "2848:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "[Added Lines]",
          "2846:     }else if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a20ea9b5b932f3d94fd31185112d0cfe3acb7e1",
      "candidate_info": {
        "commit_hash": "9a20ea9b5b932f3d94fd31185112d0cfe3acb7e1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a20ea9b5b932f3d94fd31185112d0cfe3acb7e1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corruptL.test",
          "test/fts3corrupt4.test"
        ],
        "message": "Improve a specific case of early database corruption dectecion in the b-tree layer.\n\nFossilOrigin-Name: ceacc28b035803342764f9b696c1e80edcd259b87ea4fb46f92963d6cb33de3e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corruptL.test||test/corruptL.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 536e9a9d1bd514056ecbc8172ed58f2656a86f791a15e526ae2e5f2c93687b6a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1898:   if( pc>0 ){",
          "1899:     u32 next, size;",
          "",
          "[Removed Lines]",
          "1900:     if( pc<iCellFirst ){",
          "",
          "[Added Lines]",
          "1900:     if( pc<top ){",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   SELECT CAST((SELECT b FROM t1 WHERE 16=c) AS int) FROM t1 WHERE 16=c;",
          "1111: } {1 {database disk image is malformed}}",
          "1113: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1113: #-------------------------------------------------------------------------",
          "1114: reset_db",
          "1115: do_test 13.0 {",
          "1116:   sqlite3 db {}",
          "1117:   db deserialize [decode_hexdb {",
          "1118: | size 8192 pagesize 4096 filename crash-81dd2952aef34f.db",
          "1119: | page 1 offset 0",
          "1120: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1121: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 02   .....@  ........",
          "1122: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04   ................",
          "1123: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "1124: |     96: 00 00 00 00 0d 00 00 00 01 0f c4 00 0f c4 00 00   ................",
          "1125: |   4032: 00 00 00 00 3a 11 06 17 11 11 01 61 74 61 62 6c   ....:......atabl",
          "1126: |   4048: 65 74 31 74 31 02 43 52 45 41 54 45 20 54 41 42   et1t1.CREATE TAB",
          "1127: |   4064: 4c 45 20 74 31 28 61 20 49 4e 54 45 47 45 52 20   LE t1(a INTEGER",
          "1128: |   4080: 50 52 49 4d 41 52 59 20 4b 45 59 2c 62 2c 63 29   PRIMARY KEY,b,c)",
          "1129: | page 2 offset 4096",
          "1130: |      0: 0d 07 70 00 02 0f eb 00 0f fa 00 00 00 00 00 00   ..p.............",
          "1131: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 bf ff ff ff   ................",
          "1132: |   4080: ff ff ff ff ff 04 00 01 00 02 04 01 00 00 00 00   ................",
          "1133: | end crash-81dd2952aef34f.db",
          "1134: }]} {}",
          "1136: do_catchsql_test 13.1 {",
          "1137:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x-2019 FROM c WHERE x<2)",
          "1138:     INSERT INTO t1(b,c) SELECT last_insert_rowid(), x FROM c;",
          "1139: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4139:   PRAGMA writable_schema = 1;",
          "4140:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT '4hE'+x FROM c WHERE x<72)",
          "4141:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4144: do_catchsql_test 24.2 {",
          "4145:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h';",
          "",
          "[Removed Lines]",
          "4142: } {0 {}}",
          "",
          "[Added Lines]",
          "4142: } {1 {database disk image is malformed}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4148: do_catchsql_test 24.3 {",
          "4149:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4150:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4153: do_catchsql_test 24.4 {",
          "4154:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT null<<x FROM c WHERE x<72)",
          "",
          "[Removed Lines]",
          "4151: } {0 {}}",
          "",
          "[Added Lines]",
          "4151: } {1 {database disk image is malformed}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4158: do_catchsql_test 24.5 {",
          "4159:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4160:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4163: do_catchsql_test 24.7 {",
          "4164:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4167: #-------------------------------------------------------------------------",
          "4168: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "4161: } {0 {}}",
          "4165: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "4161: } {1 {database disk image is malformed}}",
          "4165: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4837:   PRAGMA writable_schema = 1;",
          "4838:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x GLOB 2.16770 FROM x)",
          "4839:     INSERT INTO t1(a) SELECT randomblob(3000) FROM t2 ;",
          "4841: do_catchsql_test 27.3 {",
          "4842:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<2.653)",
          "4843:     INSERT INTO t1(a) SELECT randomblob(-current_time) FROM c;",
          "4845: do_catchsql_test 27.4 {",
          "4846:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h*h*';",
          "4847: } {0 {}}",
          "4848: do_catchsql_test 27.5 {",
          "4849:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<2.653)",
          "4850:     INSERT INTO t1(a) SELECT randomblob(-current_time) FROM c;",
          "4852: do_catchsql_test 27.5 {",
          "4853:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4855: do_catchsql_test 27.6 {",
          "4856:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4859: #-------------------------------------------------------------------------",
          "4860: reset_db",
          "",
          "[Removed Lines]",
          "4840: } {0 {}}",
          "4844: } {0 {}}",
          "4851: } {0 {}}",
          "4854: } {0 {}}",
          "4857: } {0 {}}",
          "",
          "[Added Lines]",
          "4840: } {1 {database disk image is malformed}}",
          "4844: } {1 {database disk image is malformed}}",
          "4851: } {1 {database disk image is malformed}}",
          "4854: } {1 {database disk image is malformed}}",
          "4857: } {1 {database disk image is malformed}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5070:   PRAGMA writable_schema = 1;",
          "5071:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "5072:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5076:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h';",
          "5077: } {0 {}}",
          "5080:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "5081:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5085:   WITH c(x) AS (VALUES(1) UNION ALL SELECT 3<<x FROM c WHERE x<72)",
          "5086:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5087: } {0 {}}",
          "5090:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "5091:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5095:   WITH c(x) AS (VALUES(1) UNION ALL SELECT 3<<x FROM c WHERE x<72)",
          "5096:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5097: } {0 {}}",
          "5100:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+3 FROM c WHERE x<72)",
          "5101:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5105:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "5106: } {0 {}}",
          "",
          "[Removed Lines]",
          "5073: } {0 {}}",
          "5075: do_catchsql_test 28.1 {",
          "5079: do_catchsql_test 28.1 {",
          "5082: } {0 {}}",
          "5084: do_catchsql_test 28.1 {",
          "5089: do_catchsql_test 28.1 {",
          "5092: } {0 {}}",
          "5094: do_catchsql_test 28.1 {",
          "5099: do_catchsql_test 28.1 {",
          "5102: } {0 {}}",
          "5104: do_catchsql_test 28.1 {",
          "",
          "[Added Lines]",
          "5073: } {1 {database disk image is malformed}}",
          "5075: do_catchsql_test 28.2 {",
          "5079: do_catchsql_test 28.3 {",
          "5082: } {1 {database disk image is malformed}}",
          "5084: do_catchsql_test 28.4 {",
          "5089: do_catchsql_test 28.5 {",
          "5092: } {1 {database disk image is malformed}}",
          "5094: do_catchsql_test 28.6 {",
          "5099: do_catchsql_test 28.7 {",
          "5102: } {1 {database disk image is malformed}}",
          "5104: do_catchsql_test 28.8 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d732723403f9400c683763690c8e40be02ae01e",
      "candidate_info": {
        "commit_hash": "5d732723403f9400c683763690c8e40be02ae01e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5d732723403f9400c683763690c8e40be02ae01e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Debugging improvement: when tracing the VDBE, output the register value for OP_Cast after the cast is completed.\n\nFossilOrigin-Name: dc5f1d282d1e75f8a3791b0c95cb8f143b2a956323cb6c889d76d20db7f89257",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cc2b5709e66ef605c3b85ed13ae6cc9c3090e864ebc18859db36284b8f715b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1869:   sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);",
          "1870:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "1871:   if( rc ) goto abort_due_to_error;",
          "1872:   break;",
          "1873: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1872:   REGISTER_TRACE(pOp->p1, pIn1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6c1a71cde082e09750465d5675699062922e387",
      "candidate_info": {
        "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/altertab3.test"
        ],
        "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4982:     return WRC_Abort;",
          "4983:   }",
          "",
          "[Removed Lines]",
          "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
          "",
          "[Added Lines]",
          "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   ALTER TABLE t1 RENAME TO t1x;",
          "532: } {1 {error in trigger r1: no such table: main.t2}}",
          "534: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534: #------------------------------------------------------------------------",
          "535: #",
          "536: reset_db",
          "537: do_execsql_test 23.1 {",
          "538:   CREATE TABLE v0 (a);",
          "539:   CREATE VIEW v2 (v3) AS",
          "540:     WITH x1 AS (SELECT * FROM v2)",
          "541:     SELECT v3 AS x, v3 AS y FROM v2;",
          "542: }",
          "544: do_catchsql_test 23.2 {",
          "545:   SELECT * FROM v2",
          "546: } {1 {view v2 is circularly defined}}",
          "548: db close",
          "549: sqlite3 db test.db",
          "551: do_catchsql_test 23.3 {",
          "552:   ALTER TABLE v0 RENAME TO t3 ;",
          "553: } {1 {error in view v2: view v2 is circularly defined}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}