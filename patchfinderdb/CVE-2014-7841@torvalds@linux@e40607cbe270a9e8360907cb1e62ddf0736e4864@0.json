{
  "cve_id": "CVE-2014-7841",
  "cve_desc": "The sctp_process_param function in net/sctp/sm_make_chunk.c in the SCTP implementation in the Linux kernel before 3.17.4, when ASCONF is used, allows remote attackers to cause a denial of service (NULL pointer dereference and system crash) via a malformed INIT chunk.",
  "repo": "torvalds/linux",
  "patch_hash": "e40607cbe270a9e8360907cb1e62ddf0736e4864",
  "patch_info": {
    "commit_hash": "e40607cbe270a9e8360907cb1e62ddf0736e4864",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e40607cbe270a9e8360907cb1e62ddf0736e4864",
    "files": [
      "net/sctp/sm_make_chunk.c"
    ],
    "message": "net: sctp: fix NULL pointer dereference in af->from_addr_param on malformed packet\n\nAn SCTP server doing ASCONF will panic on malformed INIT ping-of-death\nin the form of:\n\n  ------------ INIT[PARAM: SET_PRIMARY_IP] ------------>\n\nWhile the INIT chunk parameter verification dissects through many things\nin order to detect malformed input, it misses to actually check parameters\ninside of parameters. E.g. RFC5061, section 4.2.4 proposes a 'set primary\nIP address' parameter in ASCONF, which has as a subparameter an address\nparameter.\n\nSo an attacker may send a parameter type other than SCTP_PARAM_IPV4_ADDRESS\nor SCTP_PARAM_IPV6_ADDRESS, param_type2af() will subsequently return 0\nand thus sctp_get_af_specific() returns NULL, too, which we then happily\ndereference unconditionally through af->from_addr_param().\n\nThe trace for the log:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000078\nIP: [<ffffffffa01e9c62>] sctp_process_init+0x492/0x990 [sctp]\nPGD 0\nOops: 0000 [#1] SMP\n[...]\nPid: 0, comm: swapper Not tainted 2.6.32-504.el6.x86_64 #1 Bochs Bochs\nRIP: 0010:[<ffffffffa01e9c62>]  [<ffffffffa01e9c62>] sctp_process_init+0x492/0x990 [sctp]\n[...]\nCall Trace:\n <IRQ>\n [<ffffffffa01f2add>] ? sctp_bind_addr_copy+0x5d/0xe0 [sctp]\n [<ffffffffa01e1fcb>] sctp_sf_do_5_1B_init+0x21b/0x340 [sctp]\n [<ffffffffa01e3751>] sctp_do_sm+0x71/0x1210 [sctp]\n [<ffffffffa01e5c09>] ? sctp_endpoint_lookup_assoc+0xc9/0xf0 [sctp]\n [<ffffffffa01e61f6>] sctp_endpoint_bh_rcv+0x116/0x230 [sctp]\n [<ffffffffa01ee986>] sctp_inq_push+0x56/0x80 [sctp]\n [<ffffffffa01fcc42>] sctp_rcv+0x982/0xa10 [sctp]\n [<ffffffffa01d5123>] ? ipt_local_in_hook+0x23/0x28 [iptable_filter]\n [<ffffffff8148bdc9>] ? nf_iterate+0x69/0xb0\n [<ffffffff81496d10>] ? ip_local_deliver_finish+0x0/0x2d0\n [<ffffffff8148bf86>] ? nf_hook_slow+0x76/0x120\n [<ffffffff81496d10>] ? ip_local_deliver_finish+0x0/0x2d0\n[...]\n\nA minimal way to address this is to check for NULL as we do on all\nother such occasions where we know sctp_get_af_specific() could\npossibly return with NULL.\n\nFixes: d6de3097592b (\"[SCTP]: Add the handling of \"Set Primary IP Address\" parameter to INIT\")\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nCc: Vlad Yasevich <vyasevich@gmail.com>\nAcked-by: Neil Horman <nhorman@tuxdriver.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/sctp/sm_make_chunk.c||net/sctp/sm_make_chunk.c"
    ]
  },
  "patch_diff": {
    "net/sctp/sm_make_chunk.c||net/sctp/sm_make_chunk.c": [
      "File: net/sctp/sm_make_chunk.c -> net/sctp/sm_make_chunk.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2609:   addr_param = param.v + sizeof(sctp_addip_param_t);",
      "2611:   af = sctp_get_af_specific(param_type2af(param.p->type));",
      "2612:   af->from_addr_param(&addr, addr_param,",
      "2613:         htons(asoc->peer.port), 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2612:   if (af == NULL)",
      "2613:    break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc6311dd2a8fb9a65c1b5b94abec97bdd94cfae6",
      "candidate_info": {
        "commit_hash": "dc6311dd2a8fb9a65c1b5b94abec97bdd94cfae6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/dc6311dd2a8fb9a65c1b5b94abec97bdd94cfae6",
        "files": [
          "drivers/scsi/bnx2fc/bnx2fc_els.c",
          "drivers/scsi/bnx2fc/bnx2fc_io.c"
        ],
        "message": "bnx2fc: fix tgt spinlock locking\n\nbnx2fc_queuecommand(): when allocating a new io_req, the tgt_lock\nspinlock must be locked before calling bnx2fc_cmd_alloc().\n\nThe spinlock should also be kept locked until bnx2fc_post_io_req() has\nbeen completed.\nIf not, a kernel thread may call bnx2fc_process_cq_compl() that extracts\nthe newly allocated io_req from hba->cmd_mgr->cmds and destroys it while\nit is still being used by bnx2fc_post_io_req().\n\nBUG: unable to handle kernel NULL pointer dereference at 000000000000004c\nIP: [<ffffffffa03130da>] bnx2fc_init_task+0x6a/0x230 [bnx2fc]\nPGD 0\nOops: 0000 [#1] SMP\nlast sysfs file: /sys/devices/pci0000:00/0000:00:02.0/0000:04:00.3/net/eth3/type\nCPU 33\nModules linked in: autofs4 target_core_iblock target_core_file target_core_pscsi target_core_mod configfs bnx2fc cnic uio fcoe libfcoe libfc scsi_transport_fc 8021q garp scsi_tgt stp llc cpufreq_ondemand freq_table pcc_cpufreq ipt_REJECT nf_conntrack_ipv4 nf_defrag_ipv4 iptable_filter ip_tables ip6t_REJECT nf_conntrack_ipv6 nf_defrag_ipv6 xt_state nf_conntrack ip6table_filter ip6_tables ipv6 power_meter microcode iTCO_wdt iTCO_vendor_support hpilo hpwdt sg bnx2x libcrc32c mdio serio_raw lpc_ich mfd_core shpchp ext4 jbd2 mbcache sd_mod crc_t10dif hpsa video output dm_mirror dm_region_hash dm_log dm_mod [last unloaded: scsi_wait_scan]\n\nPid: 7355, comm: bnx2fc_thread/3 Not tainted 2.6.32-431.el6.x86_64 #1 HP ProLiant BL460c Gen8\nRIP: 0010:[<ffffffffa03130da>]  [<ffffffffa03130da>] bnx2fc_init_task+0x6a/0x230 [bnx2fc]\nRSP: 0018:ffff8820b0da3b68  EFLAGS: 00010246\nRAX: 0000000000000000 RBX: ffff882003801080 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff882003801100\nRBP: ffff8820b0da3bc8 R08: ffffffff8160d4e8 R09: 0000000000000040\nR10: 0000000000000000 R11: 0000000000000000 R12: ffff88400e600e00\nR13: ffff8840108fbe40 R14: ffff88200ffe5400 R15: 0000000000000000\nFS:  0000000000000000(0000) GS:ffff8820b0da0000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0018 ES: 0018 CR0: 000000008005003b\nCR2: 000000000000004c CR3: 0000002010b67000 CR4: 00000000001407e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400\nProcess bnx2fc_thread/3 (pid: 7355, threadinfo ffff88401f940000, task ffff884012f5f540)\nStack:\n ffff8820b0da3bc8 ffffffff81527303 ffff884000000020 ffff8820b0da3bd8\n<d> ffff8820b0da3b98 000000028138931a ffff88400f506078 ffff88400e600e00\n<d> ffff88200ffe5400 ffff88200ffe5590 0000000000000021 0000000000000002\nCall Trace:\n <IRQ>\n [<ffffffff81527303>] ? printk+0x41/0x46\n [<ffffffffa03169bc>] bnx2fc_post_io_req+0x11c/0x440 [bnx2fc]\n [<ffffffff812825b9>] ? cpumask_next_and+0x29/0x50\n [<ffffffff8137ffd0>] ? scsi_done+0x0/0x60\n [<ffffffffa0316df7>] bnx2fc_queuecommand+0x117/0x140 [bnx2fc]\n [<ffffffff81380245>] scsi_dispatch_cmd+0xe5/0x310\n [<ffffffff81388b9e>] scsi_request_fn+0x5ee/0x7a0\n [<ffffffff812658f1>] __blk_run_queue+0x31/0x40\n [<ffffffff81265a40>] blk_run_queue+0x30/0x50\n [<ffffffff81387da6>] scsi_run_queue+0xc6/0x270\n [<ffffffff81260f92>] ? elv_requeue_request+0x52/0xa0\n [<ffffffff813897a0>] scsi_requeue_command+0x90/0xb0\n [<ffffffff81389b84>] scsi_io_completion+0x154/0x6c0\n [<ffffffff8137ff62>] scsi_finish_command+0xc2/0x130\n [<ffffffff8138a255>] scsi_softirq_done+0x145/0x170\n [<ffffffff8126e865>] blk_done_softirq+0x85/0xa0\n [<ffffffff8107a8e1>] __do_softirq+0xc1/0x1e0\n [<ffffffff8100c30c>] ? call_softirq+0x1c/0x30\n [<ffffffff8100c30c>] call_softirq+0x1c/0x30\n <EOI>\n [<ffffffff8100fa75>] ? do_softirq+0x65/0xa0\n [<ffffffff8107a40a>] local_bh_enable_ip+0x9a/0xb0\n [<ffffffff8152a4eb>] _spin_unlock_bh+0x1b/0x20\n [<ffffffffa0313937>] bnx2fc_process_cq_compl+0x257/0x2b0 [bnx2fc]\n [<ffffffffa03114ea>] bnx2fc_percpu_io_thread+0xea/0x160 [bnx2fc]\n [<ffffffffa0311400>] ? bnx2fc_percpu_io_thread+0x0/0x160 [bnx2fc]\n [<ffffffff8109aef6>] kthread+0x96/0xa0\n [<ffffffff8100c20a>] child_rip+0xa/0x20\n [<ffffffff8109ae60>] ? kthread+0x0/0xa0\n [<ffffffff8100c200>] ? child_rip+0x0/0x20\nCode: 89 df 45 8b 7e 30 0f 85 75 01 00 00 89 d1 31 c0 c1 e9 03 83 e2 04 89 c9 f3 48 ab 74 06 c7 07 00 00 00 00 49 89 9c 24 88 01 00 00 <83> 7e 4c 01 b8 01 00 00 00 0f 84 e7 00 00 00 89 c2 0a 53 38 41\nRIP  [<ffffffffa03130da>] bnx2fc_init_task+0x6a/0x230 [bnx2fc]\n RSP <ffff8820b0da3b68>\nCR2: 000000000000004c\n\nSigned-off-by: Maurizio Lombardi <mlombard@redhat.com>\nAcked-by: Chad Dupuis <chad.dupuis@qlogic.com>\nSigned-off-by: Christoph Hellwig <hch@lst.de>",
        "before_after_code_files": [
          "drivers/scsi/bnx2fc/bnx2fc_els.c||drivers/scsi/bnx2fc/bnx2fc_els.c",
          "drivers/scsi/bnx2fc/bnx2fc_io.c||drivers/scsi/bnx2fc/bnx2fc_io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/bnx2fc/bnx2fc_els.c||drivers/scsi/bnx2fc/bnx2fc_els.c": [
          "File: drivers/scsi/bnx2fc/bnx2fc_els.c -> drivers/scsi/bnx2fc/bnx2fc_els.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:    bnx2fc_initiate_cleanup(orig_io_req);",
          "482:    BNX2FC_IO_DBG(rec_req, \"Post IO request again\\n\");",
          "484:    rc = bnx2fc_post_io_req(tgt, new_io_req);",
          "486:    if (!rc)",
          "487:     goto free_frame;",
          "488:    BNX2FC_IO_DBG(rec_req, \"REC: io post err\\n\");",
          "",
          "[Removed Lines]",
          "483:    spin_unlock_bh(&tgt->tgt_lock);",
          "485:    spin_lock_bh(&tgt->tgt_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/scsi/bnx2fc/bnx2fc_io.c||drivers/scsi/bnx2fc/bnx2fc_io.c": [
          "File: drivers/scsi/bnx2fc/bnx2fc_io.c -> drivers/scsi/bnx2fc/bnx2fc_io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1894:    goto exit_qcmd;",
          "1895:   }",
          "1896:  }",
          "1897:  io_req = bnx2fc_cmd_alloc(tgt);",
          "1898:  if (!io_req) {",
          "1899:   rc = SCSI_MLQUEUE_HOST_BUSY;",
          "1901:  }",
          "1902:  io_req->sc_cmd = sc_cmd;",
          "1904:  if (bnx2fc_post_io_req(tgt, io_req)) {",
          "1905:   printk(KERN_ERR PFX \"Unable to post io_req\\n\");",
          "1906:   rc = SCSI_MLQUEUE_HOST_BUSY;",
          "1908:  }",
          "1909: exit_qcmd:",
          "1910:  return rc;",
          "1911: }",
          "",
          "[Removed Lines]",
          "1900:   goto exit_qcmd;",
          "1907:   goto exit_qcmd;",
          "",
          "[Added Lines]",
          "1898:  spin_lock_bh(&tgt->tgt_lock);",
          "1903:   goto exit_qcmd_tgtlock;",
          "1910:   goto exit_qcmd_tgtlock;",
          "1913: exit_qcmd_tgtlock:",
          "1914:  spin_unlock_bh(&tgt->tgt_lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2048:  if (bnx2fc_build_bd_list_from_sg(io_req)) {",
          "2049:   printk(KERN_ERR PFX \"BD list creation failed\\n\");",
          "2051:   kref_put(&io_req->refcount, bnx2fc_cmd_release);",
          "2053:   return -EAGAIN;",
          "2054:  }",
          "",
          "[Removed Lines]",
          "2050:   spin_lock_bh(&tgt->tgt_lock);",
          "2052:   spin_unlock_bh(&tgt->tgt_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2061:  task = &(task_page[index]);",
          "2062:  bnx2fc_init_task(io_req, task);",
          "2066:  if (tgt->flush_in_prog) {",
          "2067:   printk(KERN_ERR PFX \"Flush in progress..Host Busy\\n\");",
          "2068:   kref_put(&io_req->refcount, bnx2fc_cmd_release);",
          "2070:   return -EAGAIN;",
          "2071:  }",
          "2073:  if (!test_bit(BNX2FC_FLAG_SESSION_READY, &tgt->flags)) {",
          "2074:   printk(KERN_ERR PFX \"Session not ready...post_io\\n\");",
          "2075:   kref_put(&io_req->refcount, bnx2fc_cmd_release);",
          "2077:   return -EAGAIN;",
          "2078:  }",
          "",
          "[Removed Lines]",
          "2064:  spin_lock_bh(&tgt->tgt_lock);",
          "2069:   spin_unlock_bh(&tgt->tgt_lock);",
          "2076:   spin_unlock_bh(&tgt->tgt_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2093:  bnx2fc_ring_doorbell(tgt);",
          "2095:  return 0;",
          "2096: }",
          "",
          "[Removed Lines]",
          "2094:  spin_unlock_bh(&tgt->tgt_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64b12a68a9f74bb32d8efd7af1ad8a2ba02fc884",
      "candidate_info": {
        "commit_hash": "64b12a68a9f74bb32d8efd7af1ad8a2ba02fc884",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/64b12a68a9f74bb32d8efd7af1ad8a2ba02fc884",
        "files": [
          "drivers/mmc/core/core.c"
        ],
        "message": "mmc: core: fix prepared requests while doing bkops\n\nWhile starting the bkops the previously prepared request should be canceled\nand restarted after the bkops. As the prepared resource might already\nsetup the dma channels and ready to be started. Now with the arrival of bkops\nrequest this prepared request can be serviced ONLY after the bkops. So\nholding on to the prepared request in the host driver is confusing at\nthis point in time, so it makes sense to cleanup such dangling requests and\nreissue this request once bkops is done.\nCanceling the prepared request would give opportunity to the host drivers\nto perform cleanup on the prepared request.\n\nWithout this patch host drivers like mmci gets confused when a blocking\nrequest like send_ext_csd(CMD8) is issued while there is already a prepared\nrequest. With the help of this patch, the driver can better manage such\nblocking requests and cleanup the prepared requests which are not started yet.\n\nWithout this patch I hit below crash on Qualcomm APQ8064 based IFC6410 board\nwith mmci host driver.\n\nmmci-pl18x 12400000.sdcc: error during DMA transfer!\nUnable to handle kernel paging request at virtual address 40000000\npgd = c0204000\n[40000000] *pgd=00000000\nInternal error: Oops: 805 [#1] SMP ARM\nModules linked in: ipv6 ath6kl_sdio ath6kl_core\nCPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W      3.17.0-rc7-linaro-multi-v7 #1\ntask: c0c9d7e0 ti: c0c92000 task.ti: c0c92000\nPC is at v7_dma_inv_range+0x34/0x4c\nLR is at __dma_page_dev_to_cpu+0x80/0x100\npc : [<c021efc0>]    lr : [<c021af18>]    psr: 400f0193\nsp : c0c93e20  ip : c0c9a478  fp : c08ea538\nr10: c0c9f548  r9 : 00000002  r8 : e97d9000\nr7 : 00000200  r6 : c0c9d504  r5 : c0db0880  r4 : 00000000\nr3 : 0000003f  r2 : 00000040  r1 : 40000200  r0 : 40000000\nFlags: nZcv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment kernel\nControl: 10c5787d  Table: a9ef406a  DAC: 00000015\nProcess swapper/0 (pid: 0, stack limit = 0xc0c92250)\nStack: (0xc0c93e20 to 0xc0c94000)\n3e20: c021f058 e9a17178 e9a171bc e99dfd6c 00000001 00000001 e995de10 00000002\n3e40: 00000000 c021b574 00000000 c04bc4a4 00000000 e9b49ac0 c0ce6e6c e99dfda4\n3e60: 00000088 e9810780 c0d8291c c072ea58 00000000 c072d3fc 00000000 c072f534\n3e80: 00000000 e9b49ac0 00000100 c0c9a444 00000088 c072f6b4 c072f5d4 e9d40080\n3ea0: e98107dc 00000000 00000000 c0280a60 00000000 7d55bf61 e9810780 e98107dc\n3ec0: 00000000 f0002000 c0d460e8 c0d460e8 c0c92000 c0280b60 e9810780 c0ce7190\n3ee0: 00000000 c028369c c02835f4 00000088 00000088 c0280278 c0c8ec70 c020f080\n3f00: f000200c c0c9a958 c0c93f28 c02088e4 c04bd630 c04bd5bc 200f0013 ffffffff\n3f20: c0c93f5c c0212800 00000001 a987c000 c0c93f3c c04bd574 00000000 0000015b\n3f40: ea7a0e40 00000000 c0d460e8 c0d460e8 c0c92000 c08ea538 29b12000 c0c93f70\n3f60: c04bd630 c04bd5bc 200f0013 ffffffff c04bd574 c071bd24 7d50c9b4 c0719a44\n3f80: 7d50c9b4 0000015b c0c9a498 c0c92028 c0c9a498 c0c9a4fc ea7a0e40 c0c8ee38\n3fa0: c0d460e8 c0276198 00000000 c0d8291a 00000000 c0c9a400 00000000 c0be0bc4\n3fc0: ffffffff ffffffff c0be05f8 00000000 00000000 c0c533d8 c0d82ed4 c0c9a47c\n3fe0: c0c533d4 c0c9e870 8020406a 511f06f0 00000000 80208074 00000000 00000000\n[<c021efc0>] (v7_dma_inv_range) from [<c021af18>] (__dma_page_dev_to_cpu+0x80/0x100)\n[<c021af18>] (__dma_page_dev_to_cpu) from [<c021b574>] (arm_dma_unmap_sg+0x5c/0x84)\n[<c021b574>] (arm_dma_unmap_sg) from [<c072ea58>] (mmci_dma_unmap.isra.16+0x60/0x74)\n[<c072ea58>] (mmci_dma_unmap.isra.16) from [<c072f534>] (mmci_data_irq+0x1fc/0x29c)\n[<c072f534>] (mmci_data_irq) from [<c072f6b4>] (mmci_irq+0xe0/0x114)\n[<c072f6b4>] (mmci_irq) from [<c0280a60>] (handle_irq_event_percpu+0x78/0x134)\n[<c0280a60>] (handle_irq_event_percpu) from [<c0280b60>] (handle_irq_event+0x44/0x64)\n[<c0280b60>] (handle_irq_event) from [<c028369c>] (handle_fasteoi_irq+0xa8/0x1a8)\n[<c028369c>] (handle_fasteoi_irq) from [<c0280278>] (generic_handle_irq+0x2c/0x3c)\n[<c0280278>] (generic_handle_irq) from [<c020f080>] (handle_IRQ+0x40/0x90)\n[<c020f080>] (handle_IRQ) from [<c02088e4>] (gic_handle_irq+0x38/0x68)\n[<c02088e4>] (gic_handle_irq) from [<c0212800>] (__irq_svc+0x40/0x54)\nException stack(0xc0c93f28 to 0xc0c93f70)\n3f20:                   00000001 a987c000 c0c93f3c c04bd574 00000000 0000015b\n3f40: ea7a0e40 00000000 c0d460e8 c0d460e8 c0c92000 c08ea538 29b12000 c0c93f70\n3f60: c04bd630 c04bd5bc 200f0013 ffffffff\n[<c0212800>] (__irq_svc) from [<c04bd5bc>] (msm_cpu_pm_enter_sleep+0x48/0x4c)\n[<c04bd5bc>] (msm_cpu_pm_enter_sleep) from [<c071bd24>] (qcom_lpm_enter_spc+0x20/0x2c)\n[<c071bd24>] (qcom_lpm_enter_spc) from [<c0719a44>] (cpuidle_enter_state+0x44/0xf0)\n[<c0719a44>] (cpuidle_enter_state) from [<c0276198>] (cpu_startup_entry+0x1f4/0x238)\n[<c0276198>] (cpu_startup_entry) from [<c0be0bc4>] (start_kernel+0x384/0x390)\nCode: 1e070f3e e1110003 e1c11003 1e071f3e (ee070f36)\n---[ end trace cf6cb3f6432c9834 ]---\nKernel panic - not syncing: Fatal exception in interrupt\n\nReported-by: Nicolas Dechesne <nicolas.dechesne@linaro.org>\nSigned-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>\nSigned-off-by: Ulf Hansson <ulf.hansson@linaro.org>",
        "before_after_code_files": [
          "drivers/mmc/core/core.c||drivers/mmc/core/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mmc/core/core.c||drivers/mmc/core/core.c": [
          "File: drivers/mmc/core/core.c -> drivers/mmc/core/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:   if (host->card && mmc_card_mmc(host->card) &&",
          "551:       ((mmc_resp_type(host->areq->mrq->cmd) == MMC_RSP_R1) ||",
          "552:        (mmc_resp_type(host->areq->mrq->cmd) == MMC_RSP_R1B)) &&",
          "554:    mmc_start_bkops(host->card, true);",
          "555:  }",
          "557:  if (!err && areq)",
          "",
          "[Removed Lines]",
          "553:       (host->areq->mrq->cmd->resp[0] & R1_EXCEPTION_EVENT))",
          "",
          "[Added Lines]",
          "553:       (host->areq->mrq->cmd->resp[0] & R1_EXCEPTION_EVENT)) {",
          "556:    if (areq)",
          "557:     mmc_post_req(host, areq->mrq, -EINVAL);",
          "562:    if (areq)",
          "563:     mmc_pre_req(host, areq->mrq, !host->areq);",
          "564:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaef31703a0cf6a733e651885bfb49edc3ac6774",
      "candidate_info": {
        "commit_hash": "aaef31703a0cf6a733e651885bfb49edc3ac6774",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/aaef31703a0cf6a733e651885bfb49edc3ac6774",
        "files": [
          "net/ceph/crypto.c"
        ],
        "message": "libceph: do not crash on large auth tickets\n\nLarge (greater than 32k, the value of PAGE_ALLOC_COSTLY_ORDER) auth\ntickets will have their buffers vmalloc'ed, which leads to the\nfollowing crash in crypto:\n\n[   28.685082] BUG: unable to handle kernel paging request at ffffeb04000032c0\n[   28.686032] IP: [<ffffffff81392b42>] scatterwalk_pagedone+0x22/0x80\n[   28.686032] PGD 0\n[   28.688088] Oops: 0000 [#1] PREEMPT SMP\n[   28.688088] Modules linked in:\n[   28.688088] CPU: 0 PID: 878 Comm: kworker/0:2 Not tainted 3.17.0-vm+ #305\n[   28.688088] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007\n[   28.688088] Workqueue: ceph-msgr con_work\n[   28.688088] task: ffff88011a7f9030 ti: ffff8800d903c000 task.ti: ffff8800d903c000\n[   28.688088] RIP: 0010:[<ffffffff81392b42>]  [<ffffffff81392b42>] scatterwalk_pagedone+0x22/0x80\n[   28.688088] RSP: 0018:ffff8800d903f688  EFLAGS: 00010286\n[   28.688088] RAX: ffffeb04000032c0 RBX: ffff8800d903f718 RCX: ffffeb04000032c0\n[   28.688088] RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8800d903f750\n[   28.688088] RBP: ffff8800d903f688 R08: 00000000000007de R09: ffff8800d903f880\n[   28.688088] R10: 18df467c72d6257b R11: 0000000000000000 R12: 0000000000000010\n[   28.688088] R13: ffff8800d903f750 R14: ffff8800d903f8a0 R15: 0000000000000000\n[   28.688088] FS:  00007f50a41c7700(0000) GS:ffff88011fc00000(0000) knlGS:0000000000000000\n[   28.688088] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b\n[   28.688088] CR2: ffffeb04000032c0 CR3: 00000000da3f3000 CR4: 00000000000006b0\n[   28.688088] Stack:\n[   28.688088]  ffff8800d903f698 ffffffff81392ca8 ffff8800d903f6e8 ffffffff81395d32\n[   28.688088]  ffff8800dac96000 ffff880000000000 ffff8800d903f980 ffff880119b7e020\n[   28.688088]  ffff880119b7e010 0000000000000000 0000000000000010 0000000000000010\n[   28.688088] Call Trace:\n[   28.688088]  [<ffffffff81392ca8>] scatterwalk_done+0x38/0x40\n[   28.688088]  [<ffffffff81392ca8>] scatterwalk_done+0x38/0x40\n[   28.688088]  [<ffffffff81395d32>] blkcipher_walk_done+0x182/0x220\n[   28.688088]  [<ffffffff813990bf>] crypto_cbc_encrypt+0x15f/0x180\n[   28.688088]  [<ffffffff81399780>] ? crypto_aes_set_key+0x30/0x30\n[   28.688088]  [<ffffffff8156c40c>] ceph_aes_encrypt2+0x29c/0x2e0\n[   28.688088]  [<ffffffff8156d2a3>] ceph_encrypt2+0x93/0xb0\n[   28.688088]  [<ffffffff8156d7da>] ceph_x_encrypt+0x4a/0x60\n[   28.688088]  [<ffffffff8155b39d>] ? ceph_buffer_new+0x5d/0xf0\n[   28.688088]  [<ffffffff8156e837>] ceph_x_build_authorizer.isra.6+0x297/0x360\n[   28.688088]  [<ffffffff8112089b>] ? kmem_cache_alloc_trace+0x11b/0x1c0\n[   28.688088]  [<ffffffff8156b496>] ? ceph_auth_create_authorizer+0x36/0x80\n[   28.688088]  [<ffffffff8156ed83>] ceph_x_create_authorizer+0x63/0xd0\n[   28.688088]  [<ffffffff8156b4b4>] ceph_auth_create_authorizer+0x54/0x80\n[   28.688088]  [<ffffffff8155f7c0>] get_authorizer+0x80/0xd0\n[   28.688088]  [<ffffffff81555a8b>] prepare_write_connect+0x18b/0x2b0\n[   28.688088]  [<ffffffff81559289>] try_read+0x1e59/0x1f10\n\nThis is because we set up crypto scatterlists as if all buffers were\nkmalloc'ed.  Fix it.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Ilya Dryomov <idryomov@redhat.com>\nReviewed-by: Sage Weil <sage@redhat.com>",
        "before_after_code_files": [
          "net/ceph/crypto.c||net/ceph/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ceph/crypto.c||net/ceph/crypto.c": [
          "File: net/ceph/crypto.c -> net/ceph/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: static const u8 *aes_iv = (u8 *)CEPH_AES_IV;",
          "93: static int ceph_aes_encrypt(const void *key, int key_len,",
          "94:        void *dst, size_t *dst_len,",
          "95:        const void *src, size_t src_len)",
          "96: {",
          "98:  struct crypto_blkcipher *tfm = ceph_crypto_alloc_cipher();",
          "99:  struct blkcipher_desc desc = { .tfm = tfm, .flags = 0 };",
          "100:  int ret;",
          "",
          "[Removed Lines]",
          "97:  struct scatterlist sg_in[2], sg_out[1];",
          "",
          "[Added Lines]",
          "105: static int setup_sgtable(struct sg_table *sgt, struct scatterlist *prealloc_sg,",
          "106:     const void *buf, unsigned int buf_len)",
          "107: {",
          "108:  struct scatterlist *sg;",
          "109:  const bool is_vmalloc = is_vmalloc_addr(buf);",
          "110:  unsigned int off = offset_in_page(buf);",
          "111:  unsigned int chunk_cnt = 1;",
          "112:  unsigned int chunk_len = PAGE_ALIGN(off + buf_len);",
          "113:  int i;",
          "114:  int ret;",
          "116:  if (buf_len == 0) {",
          "117:   memset(sgt, 0, sizeof(*sgt));",
          "118:   return -EINVAL;",
          "119:  }",
          "121:  if (is_vmalloc) {",
          "122:   chunk_cnt = chunk_len >> PAGE_SHIFT;",
          "123:   chunk_len = PAGE_SIZE;",
          "124:  }",
          "126:  if (chunk_cnt > 1) {",
          "127:   ret = sg_alloc_table(sgt, chunk_cnt, GFP_NOFS);",
          "128:   if (ret)",
          "129:    return ret;",
          "130:  } else {",
          "131:   WARN_ON(chunk_cnt != 1);",
          "132:   sg_init_table(prealloc_sg, 1);",
          "133:   sgt->sgl = prealloc_sg;",
          "134:   sgt->nents = sgt->orig_nents = 1;",
          "135:  }",
          "137:  for_each_sg(sgt->sgl, sg, sgt->orig_nents, i) {",
          "138:   struct page *page;",
          "139:   unsigned int len = min(chunk_len - off, buf_len);",
          "141:   if (is_vmalloc)",
          "142:    page = vmalloc_to_page(buf);",
          "143:   else",
          "144:    page = virt_to_page(buf);",
          "146:   sg_set_page(sg, page, len, off);",
          "148:   off = 0;",
          "149:   buf += len;",
          "150:   buf_len -= len;",
          "151:  }",
          "152:  WARN_ON(buf_len != 0);",
          "154:  return 0;",
          "155: }",
          "157: static void teardown_sgtable(struct sg_table *sgt)",
          "158: {",
          "159:  if (sgt->orig_nents > 1)",
          "160:   sg_free_table(sgt);",
          "161: }",
          "167:  struct scatterlist sg_in[2], prealloc_sg;",
          "168:  struct sg_table sg_out;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:  sg_init_table(sg_in, 2);",
          "115:  sg_set_buf(&sg_in[0], src, src_len);",
          "116:  sg_set_buf(&sg_in[1], pad, zero_padding);",
          "119:  iv = crypto_blkcipher_crt(tfm)->iv;",
          "120:  ivsize = crypto_blkcipher_ivsize(tfm);",
          "122:  memcpy(iv, aes_iv, ivsize);",
          "124:  print_hex_dump(KERN_ERR, \"enc key: \", DUMP_PREFIX_NONE, 16, 1,",
          "125:          key, key_len, 1);",
          "",
          "[Removed Lines]",
          "113:  crypto_blkcipher_setkey((void *)tfm, key, key_len);",
          "117:  sg_init_table(sg_out, 1);",
          "118:  sg_set_buf(sg_out, dst, *dst_len);",
          "",
          "[Added Lines]",
          "187:  ret = setup_sgtable(&sg_out, &prealloc_sg, dst, *dst_len);",
          "188:  if (ret)",
          "189:   goto out_tfm;",
          "191:  crypto_blkcipher_setkey((void *)tfm, key, key_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  print_hex_dump(KERN_ERR, \"enc pad: \", DUMP_PREFIX_NONE, 16, 1,",
          "129:    pad, zero_padding, 1);",
          "132:          src_len + zero_padding);",
          "135:   pr_err(\"ceph_aes_crypt failed %d\\n\", ret);",
          "137:  print_hex_dump(KERN_ERR, \"enc out: \", DUMP_PREFIX_NONE, 16, 1,",
          "138:          dst, *dst_len, 1);",
          "141: }",
          "143: static int ceph_aes_encrypt2(const void *key, int key_len, void *dst,",
          "",
          "[Removed Lines]",
          "131:  ret = crypto_blkcipher_encrypt(&desc, sg_out, sg_in,",
          "133:  crypto_free_blkcipher(tfm);",
          "134:  if (ret < 0)",
          "140:  return 0;",
          "",
          "[Added Lines]",
          "204:  ret = crypto_blkcipher_encrypt(&desc, sg_out.sgl, sg_in,",
          "206:  if (ret < 0) {",
          "208:   goto out_sg;",
          "209:  }",
          "215: out_sg:",
          "216:  teardown_sgtable(&sg_out);",
          "217: out_tfm:",
          "218:  crypto_free_blkcipher(tfm);",
          "219:  return ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:         const void *src1, size_t src1_len,",
          "146:         const void *src2, size_t src2_len)",
          "147: {",
          "149:  struct crypto_blkcipher *tfm = ceph_crypto_alloc_cipher();",
          "150:  struct blkcipher_desc desc = { .tfm = tfm, .flags = 0 };",
          "151:  int ret;",
          "",
          "[Removed Lines]",
          "148:  struct scatterlist sg_in[3], sg_out[1];",
          "",
          "[Added Lines]",
          "227:  struct scatterlist sg_in[3], prealloc_sg;",
          "228:  struct sg_table sg_out;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:  sg_init_table(sg_in, 3);",
          "166:  sg_set_buf(&sg_in[0], src1, src1_len);",
          "167:  sg_set_buf(&sg_in[1], src2, src2_len);",
          "168:  sg_set_buf(&sg_in[2], pad, zero_padding);",
          "171:  iv = crypto_blkcipher_crt(tfm)->iv;",
          "172:  ivsize = crypto_blkcipher_ivsize(tfm);",
          "174:  memcpy(iv, aes_iv, ivsize);",
          "176:  print_hex_dump(KERN_ERR, \"enc  key: \", DUMP_PREFIX_NONE, 16, 1,",
          "177:          key, key_len, 1);",
          "",
          "[Removed Lines]",
          "164:  crypto_blkcipher_setkey((void *)tfm, key, key_len);",
          "169:  sg_init_table(sg_out, 1);",
          "170:  sg_set_buf(sg_out, dst, *dst_len);",
          "",
          "[Added Lines]",
          "248:  ret = setup_sgtable(&sg_out, &prealloc_sg, dst, *dst_len);",
          "249:  if (ret)",
          "250:   goto out_tfm;",
          "252:  crypto_blkcipher_setkey((void *)tfm, key, key_len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:  print_hex_dump(KERN_ERR, \"enc  pad: \", DUMP_PREFIX_NONE, 16, 1,",
          "183:    pad, zero_padding, 1);",
          "186:          src1_len + src2_len + zero_padding);",
          "189:   pr_err(\"ceph_aes_crypt2 failed %d\\n\", ret);",
          "191:  print_hex_dump(KERN_ERR, \"enc  out: \", DUMP_PREFIX_NONE, 16, 1,",
          "192:          dst, *dst_len, 1);",
          "195: }",
          "197: static int ceph_aes_decrypt(const void *key, int key_len,",
          "198:        void *dst, size_t *dst_len,",
          "199:        const void *src, size_t src_len)",
          "200: {",
          "202:  struct crypto_blkcipher *tfm = ceph_crypto_alloc_cipher();",
          "203:  struct blkcipher_desc desc = { .tfm = tfm };",
          "204:  char pad[16];",
          "",
          "[Removed Lines]",
          "185:  ret = crypto_blkcipher_encrypt(&desc, sg_out, sg_in,",
          "187:  crypto_free_blkcipher(tfm);",
          "188:  if (ret < 0)",
          "194:  return 0;",
          "201:  struct scatterlist sg_in[1], sg_out[2];",
          "",
          "[Added Lines]",
          "267:  ret = crypto_blkcipher_encrypt(&desc, sg_out.sgl, sg_in,",
          "269:  if (ret < 0) {",
          "271:   goto out_sg;",
          "272:  }",
          "278: out_sg:",
          "279:  teardown_sgtable(&sg_out);",
          "280: out_tfm:",
          "281:  crypto_free_blkcipher(tfm);",
          "282:  return ret;",
          "289:  struct sg_table sg_in;",
          "290:  struct scatterlist sg_out[2], prealloc_sg;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:  if (IS_ERR(tfm))",
          "211:   return PTR_ERR(tfm);",
          "215:  sg_init_table(sg_out, 2);",
          "217:  sg_set_buf(&sg_out[0], dst, *dst_len);",
          "218:  sg_set_buf(&sg_out[1], pad, sizeof(pad));",
          "220:  iv = crypto_blkcipher_crt(tfm)->iv;",
          "221:  ivsize = crypto_blkcipher_ivsize(tfm);",
          "223:  memcpy(iv, aes_iv, ivsize);",
          "",
          "[Removed Lines]",
          "213:  crypto_blkcipher_setkey((void *)tfm, key, key_len);",
          "214:  sg_init_table(sg_in, 1);",
          "216:  sg_set_buf(sg_in, src, src_len);",
          "",
          "[Added Lines]",
          "305:  ret = setup_sgtable(&sg_in, &prealloc_sg, src, src_len);",
          "306:  if (ret)",
          "307:   goto out_tfm;",
          "309:  crypto_blkcipher_setkey((void *)tfm, key, key_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "228:  print_hex_dump(KERN_ERR, \"dec  in: \", DUMP_PREFIX_NONE, 16, 1,",
          "229:          src, src_len, 1);",
          "234:  if (ret < 0) {",
          "235:   pr_err(\"ceph_aes_decrypt failed %d\\n\", ret);",
          "237:  }",
          "239:  if (src_len <= *dst_len)",
          "",
          "[Removed Lines]",
          "232:  ret = crypto_blkcipher_decrypt(&desc, sg_out, sg_in, src_len);",
          "233:  crypto_free_blkcipher(tfm);",
          "236:   return ret;",
          "",
          "[Added Lines]",
          "320:  ret = crypto_blkcipher_decrypt(&desc, sg_out, sg_in.sgl, src_len);",
          "323:   goto out_sg;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "251:  print_hex_dump(KERN_ERR, \"dec out: \", DUMP_PREFIX_NONE, 16, 1,",
          "252:          dst, *dst_len, 1);",
          "255: }",
          "257: static int ceph_aes_decrypt2(const void *key, int key_len,",
          "",
          "[Removed Lines]",
          "254:  return 0;",
          "",
          "[Added Lines]",
          "342: out_sg:",
          "343:  teardown_sgtable(&sg_in);",
          "344: out_tfm:",
          "345:  crypto_free_blkcipher(tfm);",
          "346:  return ret;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "259:         void *dst2, size_t *dst2_len,",
          "260:         const void *src, size_t src_len)",
          "261: {",
          "263:  struct crypto_blkcipher *tfm = ceph_crypto_alloc_cipher();",
          "264:  struct blkcipher_desc desc = { .tfm = tfm };",
          "265:  char pad[16];",
          "",
          "[Removed Lines]",
          "262:  struct scatterlist sg_in[1], sg_out[3];",
          "",
          "[Added Lines]",
          "354:  struct sg_table sg_in;",
          "355:  struct scatterlist sg_out[3], prealloc_sg;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "271:  if (IS_ERR(tfm))",
          "272:   return PTR_ERR(tfm);",
          "276:  sg_init_table(sg_out, 3);",
          "277:  sg_set_buf(&sg_out[0], dst1, *dst1_len);",
          "278:  sg_set_buf(&sg_out[1], dst2, *dst2_len);",
          "279:  sg_set_buf(&sg_out[2], pad, sizeof(pad));",
          "281:  crypto_blkcipher_setkey((void *)tfm, key, key_len);",
          "282:  iv = crypto_blkcipher_crt(tfm)->iv;",
          "283:  ivsize = crypto_blkcipher_ivsize(tfm);",
          "285:  memcpy(iv, aes_iv, ivsize);",
          "",
          "[Removed Lines]",
          "274:  sg_init_table(sg_in, 1);",
          "275:  sg_set_buf(sg_in, src, src_len);",
          "",
          "[Added Lines]",
          "371:  ret = setup_sgtable(&sg_in, &prealloc_sg, src, src_len);",
          "372:  if (ret)",
          "373:   goto out_tfm;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "290:  print_hex_dump(KERN_ERR, \"dec   in: \", DUMP_PREFIX_NONE, 16, 1,",
          "291:          src, src_len, 1);",
          "296:  if (ret < 0) {",
          "297:   pr_err(\"ceph_aes_decrypt failed %d\\n\", ret);",
          "299:  }",
          "301:  if (src_len <= *dst1_len)",
          "",
          "[Removed Lines]",
          "294:  ret = crypto_blkcipher_decrypt(&desc, sg_out, sg_in, src_len);",
          "295:  crypto_free_blkcipher(tfm);",
          "298:   return ret;",
          "",
          "[Added Lines]",
          "386:  ret = crypto_blkcipher_decrypt(&desc, sg_out, sg_in.sgl, src_len);",
          "389:   goto out_sg;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "325:          dst2, *dst2_len, 1);",
          "329: }",
          "",
          "[Removed Lines]",
          "328:  return 0;",
          "",
          "[Added Lines]",
          "419: out_sg:",
          "420:  teardown_sgtable(&sg_in);",
          "421: out_tfm:",
          "422:  crypto_free_blkcipher(tfm);",
          "423:  return ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab5c780913bca0a5763ca05dd5c2cb5cb08ccb26",
      "candidate_info": {
        "commit_hash": "ab5c780913bca0a5763ca05dd5c2cb5cb08ccb26",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ab5c780913bca0a5763ca05dd5c2cb5cb08ccb26",
        "files": [
          "arch/sparc/kernel/smp_64.c"
        ],
        "message": "sparc64: Do irq_{enter,exit}() around generic_smp_call_function*().\n\nOtherwise rcu_irq_{enter,exit}() do not happen and we get dumps like:\n\n====================\n[  188.275021] ===============================\n[  188.309351] [ INFO: suspicious RCU usage. ]\n[  188.343737] 3.18.0-rc3-00068-g20f3963-dirty #54 Not tainted\n[  188.394786] -------------------------------\n[  188.429170] include/linux/rcupdate.h:883 rcu_read_lock() used\nillegally while idle!\n[  188.505235]\nother info that might help us debug this:\n\n[  188.554230]\nRCU used illegally from idle CPU!\nrcu_scheduler_active = 1, debug_locks = 0\n[  188.637587] RCU used illegally from extended quiescent state!\n[  188.690684] 3 locks held by swapper/7/0:\n[  188.721932]  #0:  (&x->wait#11){......}, at: [<0000000000495de8>] complete+0x8/0x60\n[  188.797994]  #1:  (&p->pi_lock){-.-.-.}, at: [<000000000048510c>] try_to_wake_up+0xc/0x400\n[  188.881343]  #2:  (rcu_read_lock){......}, at: [<000000000048a910>] select_task_rq_fair+0x90/0xb40\n[  188.973043]stack backtrace:\n[  188.993879] CPU: 7 PID: 0 Comm: swapper/7 Not tainted 3.18.0-rc3-00068-g20f3963-dirty #54\n[  189.076187] Call Trace:\n[  189.089719]  [0000000000499360] lockdep_rcu_suspicious+0xe0/0x100\n[  189.147035]  [000000000048a99c] select_task_rq_fair+0x11c/0xb40\n[  189.202253]  [00000000004852d8] try_to_wake_up+0x1d8/0x400\n[  189.252258]  [000000000048554c] default_wake_function+0xc/0x20\n[  189.306435]  [0000000000495554] __wake_up_common+0x34/0x80\n[  189.356448]  [00000000004955b4] __wake_up_locked+0x14/0x40\n[  189.406456]  [0000000000495e08] complete+0x28/0x60\n[  189.448142]  [0000000000636e28] blk_end_sync_rq+0x8/0x20\n[  189.496057]  [0000000000639898] __blk_mq_end_request+0x18/0x60\n[  189.550249]  [00000000006ee014] scsi_end_request+0x94/0x180\n[  189.601286]  [00000000006ee334] scsi_io_completion+0x1d4/0x600\n[  189.655463]  [00000000006e51c4] scsi_finish_command+0xc4/0xe0\n[  189.708598]  [00000000006ed958] scsi_softirq_done+0x118/0x140\n[  189.761735]  [00000000006398ec] __blk_mq_complete_request_remote+0xc/0x20\n[  189.827383]  [00000000004c75d0] generic_smp_call_function_single_interrupt+0x150/0x1c0\n[  189.906581]  [000000000043e514] smp_call_function_single_client+0x14/0x40\n====================\n\nBased almost entirely upon a patch by Paul E. McKenney.\n\nReported-by: Meelis Roos <mroos@linux.ee>\nTested-by: Meelis Roos <mroos@linux.ee>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "arch/sparc/kernel/smp_64.c||arch/sparc/kernel/smp_64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/sparc/kernel/smp_64.c||arch/sparc/kernel/smp_64.c": [
          "File: arch/sparc/kernel/smp_64.c -> arch/sparc/kernel/smp_64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "816: void __irq_entry smp_call_function_client(int irq, struct pt_regs *regs)",
          "817: {",
          "818:  clear_softint(1 << irq);",
          "819:  generic_smp_call_function_interrupt();",
          "820: }",
          "822: void __irq_entry smp_call_function_single_client(int irq, struct pt_regs *regs)",
          "823: {",
          "824:  clear_softint(1 << irq);",
          "825:  generic_smp_call_function_single_interrupt();",
          "826: }",
          "828: static void tsb_sync(void *info)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "819:  irq_enter();",
          "821:  irq_exit();",
          "827:  irq_enter();",
          "829:  irq_exit();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6684228726cc25551a43f5c0bd9c5f977f10f48",
      "candidate_info": {
        "commit_hash": "b6684228726cc25551a43f5c0bd9c5f977f10f48",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b6684228726cc25551a43f5c0bd9c5f977f10f48",
        "files": [
          "drivers/mfd/viperboard.c"
        ],
        "message": "mfd: viperboard: Fix platform-device id collision\n\nAllow more than one viperboard to be connected by registering with\nPLATFORM_DEVID_AUTO instead of PLATFORM_DEVID_NONE.\n\nThe subdevices are currently registered with PLATFORM_DEVID_NONE, which\nwill cause a name collision on the platform bus when a second viperboard\nis plugged in:\n\nviperboard 1-2.4:1.0: version 0.00 found at bus 001 address 004\n------------[ cut here ]------------\nWARNING: CPU: 0 PID: 181 at /home/johan/work/omicron/src/linux/fs/sysfs/dir.c:31 sysfs_warn_dup+0x74/0x84()\nsysfs: cannot create duplicate filename '/bus/platform/devices/viperboard-gpio'\nModules linked in: i2c_viperboard viperboard netconsole [last unloaded: viperboard]\nCPU: 0 PID: 181 Comm: bash Tainted: G        W      3.17.0-rc6 #1\n[<c0016bf4>] (unwind_backtrace) from [<c0013860>] (show_stack+0x20/0x24)\n[<c0013860>] (show_stack) from [<c04305f8>] (dump_stack+0x24/0x28)\n[<c04305f8>] (dump_stack) from [<c0040fb4>] (warn_slowpath_common+0x80/0x98)\n[<c0040fb4>] (warn_slowpath_common) from [<c004100c>] (warn_slowpath_fmt+0x40/0x48)\n[<c004100c>] (warn_slowpath_fmt) from [<c016f1bc>] (sysfs_warn_dup+0x74/0x84)\n[<c016f1bc>] (sysfs_warn_dup) from [<c016f548>] (sysfs_do_create_link_sd.isra.2+0xcc/0xd0)\n[<c016f548>] (sysfs_do_create_link_sd.isra.2) from [<c016f588>] (sysfs_create_link+0x3c/0x48)\n[<c016f588>] (sysfs_create_link) from [<c02867ec>] (bus_add_device+0x12c/0x1e0)\n[<c02867ec>] (bus_add_device) from [<c0284820>] (device_add+0x410/0x584)\n[<c0284820>] (device_add) from [<c0289440>] (platform_device_add+0xd8/0x26c)\n[<c0289440>] (platform_device_add) from [<c02a5ae4>] (mfd_add_device+0x240/0x344)\n[<c02a5ae4>] (mfd_add_device) from [<c02a5ce0>] (mfd_add_devices+0xb8/0x110)\n[<c02a5ce0>] (mfd_add_devices) from [<bf00d1c8>] (vprbrd_probe+0x160/0x1b0 [viperboard])\n[<bf00d1c8>] (vprbrd_probe [viperboard]) from [<c030c000>] (usb_probe_interface+0x1bc/0x2a8)\n[<c030c000>] (usb_probe_interface) from [<c028768c>] (driver_probe_device+0x14c/0x3ac)\n[<c028768c>] (driver_probe_device) from [<c02879e4>] (__driver_attach+0xa4/0xa8)\n[<c02879e4>] (__driver_attach) from [<c0285698>] (bus_for_each_dev+0x70/0xa4)\n[<c0285698>] (bus_for_each_dev) from [<c0287030>] (driver_attach+0x2c/0x30)\n[<c0287030>] (driver_attach) from [<c030a288>] (usb_store_new_id+0x170/0x1ac)\n[<c030a288>] (usb_store_new_id) from [<c030a2f8>] (new_id_store+0x34/0x3c)\n[<c030a2f8>] (new_id_store) from [<c02853ec>] (drv_attr_store+0x30/0x3c)\n[<c02853ec>] (drv_attr_store) from [<c016eaa8>] (sysfs_kf_write+0x5c/0x60)\n[<c016eaa8>] (sysfs_kf_write) from [<c016dc68>] (kernfs_fop_write+0xd4/0x194)\n[<c016dc68>] (kernfs_fop_write) from [<c010fe40>] (vfs_write+0xb4/0x1c0)\n[<c010fe40>] (vfs_write) from [<c01104a8>] (SyS_write+0x4c/0xa0)\n[<c01104a8>] (SyS_write) from [<c000f900>] (ret_fast_syscall+0x0/0x48)\n---[ end trace 98e8603c22d65817 ]---\nviperboard 1-2.4:1.0: Failed to add mfd devices to core.\nviperboard: probe of 1-2.4:1.0 failed with error -17\n\nSigned-off-by: Johan Hovold <johan@kernel.org>\nSigned-off-by: Lee Jones <lee.jones@linaro.org>",
        "before_after_code_files": [
          "drivers/mfd/viperboard.c||drivers/mfd/viperboard.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mfd/viperboard.c||drivers/mfd/viperboard.c": [
          "File: drivers/mfd/viperboard.c -> drivers/mfd/viperboard.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:    version >> 8, version & 0xff,",
          "94:    vb->usb_dev->bus->busnum, vb->usb_dev->devnum);",
          "98:  if (ret != 0) {",
          "99:   dev_err(&interface->dev, \"Failed to add mfd devices to core.\");",
          "100:   goto error;",
          "",
          "[Removed Lines]",
          "96:  ret = mfd_add_devices(&interface->dev, -1, vprbrd_devs,",
          "97:     ARRAY_SIZE(vprbrd_devs), NULL, 0, NULL);",
          "",
          "[Added Lines]",
          "96:  ret = mfd_add_devices(&interface->dev, PLATFORM_DEVID_AUTO,",
          "97:     vprbrd_devs, ARRAY_SIZE(vprbrd_devs), NULL, 0,",
          "98:     NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}