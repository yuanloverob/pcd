{
  "cve_id": "CVE-2018-5729",
  "cve_desc": "MIT krb5 1.6 or later allows an authenticated kadmin with permission to add principals to an LDAP Kerberos database to cause a denial of service (NULL pointer dereference) or bypass a DN container check by supplying tagged data that is internal to the database module.",
  "repo": "krb5/krb5",
  "patch_hash": "e1caf6fb74981da62039846931ebdffed71309d1",
  "patch_info": {
    "commit_hash": "e1caf6fb74981da62039846931ebdffed71309d1",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/e1caf6fb74981da62039846931ebdffed71309d1",
    "files": [
      "src/lib/kadm5/srv/svr_principal.c",
      "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
      "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
      "src/tests/t_kdb.py"
    ],
    "message": "Fix flaws in LDAP DN checking\n\nKDB_TL_USER_INFO tl-data is intended to be internal to the LDAP KDB\nmodule, and not used in disk or wire principal entries.  Prevent\nkadmin clients from sending KDB_TL_USER_INFO tl-data by giving it a\ntype number less than 256 and filtering out type numbers less than 256\nin kadm5_create_principal_3().  (We already filter out low type\nnumbers in kadm5_modify_principal()).\n\nIn the LDAP KDB module, if containerdn and linkdn are both specified\nin a put_principal operation, check both linkdn and the computed\nstandalone_principal_dn for container membership.  To that end, factor\nout the checks into helper functions and call them on all applicable\nclient-influenced DNs.\n\nCVE-2018-5729:\n\nIn MIT krb5 1.6 or later, an authenticated kadmin user with permission\nto add principals to an LDAP Kerberos database can cause a null\ndereference in kadmind, or circumvent a DN container check, by\nsupplying tagged data intended to be internal to the database module.\nThanks to Sharwan Ram and Pooja Anil for discovering the potential\nnull dereference.\n\nCVE-2018-5730:\n\nIn MIT krb5 1.6 or later, an authenticated kadmin user with permission\nto add principals to an LDAP Kerberos database can circumvent a DN\ncontainership check by supplying both a \"linkdn\" and \"containerdn\"\ndatabase argument, or by supplying a DN string which is a left\nextension of a container DN string but is not hierarchically within\nthe container DN.\n\nticket: 8643 (new)\ntags: pullup\ntarget_version: 1.16-next\ntarget_version: 1.15-next",
    "before_after_code_files": [
      "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c",
      "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
      "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
      "src/tests/t_kdb.py||src/tests/t_kdb.py"
    ]
  },
  "patch_diff": {
    "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c": [
      "File: src/lib/kadm5/srv/svr_principal.c -> src/lib/kadm5/srv/svr_principal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:         return KADM5_BAD_MASK;",
      "331:     if((mask & ~ALL_PRINC_MASK))",
      "332:         return KADM5_BAD_MASK;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:     if (mask & KADM5_TL_DATA) {",
      "334:         for (tl_data_tail = entry->tl_data; tl_data_tail != NULL;",
      "335:              tl_data_tail = tl_data_tail->tl_data_next) {",
      "336:             if (tl_data_tail->tl_data_type < 256)",
      "337:                 return KADM5_BAD_TL_TYPE;",
      "338:         }",
      "339:     }",
      "",
      "---------------"
    ],
    "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h": [
      "File: src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h -> src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "141: #define UNSTORE16_INT(ptr, val) (val = load_16_be(ptr))",
      "142: #define UNSTORE32_INT(ptr, val) (val = load_32_be(ptr))",
      "146: #define KDB_TL_PRINCTYPE          0x01",
      "147: #define KDB_TL_PRINCCOUNT         0x02",
      "",
      "[Removed Lines]",
      "144: #define  KDB_TL_USER_INFO      0x7ffe",
      "",
      "[Added Lines]",
      "144: #define  KDB_TL_USER_INFO      0xff",
      "",
      "---------------"
    ],
    "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c": [
      "File: src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c -> src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "651:     return ret;",
      "652: }",
      "654: krb5_error_code",
      "655: krb5_ldap_put_principal(krb5_context context, krb5_db_entry *entry,",
      "656:                         char **db_args)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "654: static krb5_error_code",
      "655: check_dn_in_container(krb5_context context, const char *dn,",
      "656:                       char *const *subtrees, unsigned int ntrees)",
      "657: {",
      "658:     unsigned int i;",
      "659:     size_t dnlen = strlen(dn), stlen;",
      "661:     for (i = 0; i < ntrees; i++) {",
      "662:         if (subtrees[i] == NULL || *subtrees[i] == '\\0')",
      "663:             return 0;",
      "664:         stlen = strlen(subtrees[i]);",
      "665:         if (dnlen >= stlen &&",
      "666:             strcasecmp(dn + dnlen - stlen, subtrees[i]) == 0 &&",
      "667:             (dnlen == stlen || dn[dnlen - stlen - 1] == ','))",
      "668:             return 0;",
      "669:     }",
      "671:     k5_setmsg(context, EINVAL, _(\"DN is out of the realm subtree\"));",
      "672:     return EINVAL;",
      "673: }",
      "675: static krb5_error_code",
      "676: check_dn_exists(krb5_context context,",
      "677:                 krb5_ldap_server_handle *ldap_server_handle,",
      "678:                 const char *dn, krb5_boolean nonkrb_only)",
      "679: {",
      "680:     krb5_error_code st = 0, tempst;",
      "681:     krb5_ldap_context *ldap_context = context->dal_handle->db_context;",
      "682:     LDAP *ld = ldap_server_handle->ldap_handle;",
      "683:     LDAPMessage *result = NULL, *ent;",
      "684:     char *attrs[] = { \"krbticketpolicyreference\", \"krbprincipalname\", NULL };",
      "685:     char **values;",
      "687:     LDAP_SEARCH_1(dn, LDAP_SCOPE_BASE, 0, attrs, IGNORE_STATUS);",
      "688:     if (st != LDAP_SUCCESS)",
      "689:         return set_ldap_error(context, st, OP_SEARCH);",
      "691:     ent = ldap_first_entry(ld, result);",
      "692:     CHECK_NULL(ent);",
      "694:     values = ldap_get_values(ld, ent, \"krbticketpolicyreference\");",
      "695:     if (values != NULL)",
      "696:         ldap_value_free(values);",
      "698:     values = ldap_get_values(ld, ent, \"krbprincipalname\");",
      "699:     if (values != NULL) {",
      "700:         ldap_value_free(values);",
      "701:         if (nonkrb_only) {",
      "702:             st = EINVAL;",
      "703:             k5_setmsg(context, st, _(\"ldap object is already kerberized\"));",
      "704:             goto cleanup;",
      "705:         }",
      "706:     }",
      "708: cleanup:",
      "709:     ldap_msgfree(result);",
      "710:     return st;",
      "711: }",
      "713: static krb5_error_code",
      "714: validate_xargs(krb5_context context,",
      "715:                krb5_ldap_server_handle *ldap_server_handle,",
      "716:                const xargs_t *xargs, const char *standalone_dn,",
      "717:                char *const *subtrees, unsigned int ntrees)",
      "718: {",
      "719:     krb5_error_code st;",
      "721:     if (xargs->dn != NULL) {",
      "723:         st = check_dn_in_container(context, xargs->dn, subtrees, ntrees);",
      "724:         if (st)",
      "725:             return st;",
      "727:         st = check_dn_exists(context, ldap_server_handle, xargs->dn, TRUE);",
      "728:         if (st)",
      "729:             return st;",
      "730:     }",
      "732:     if (xargs->linkdn != NULL) {",
      "734:         st = check_dn_in_container(context, xargs->linkdn, subtrees, ntrees);",
      "735:         if (st)",
      "736:             return st;",
      "738:         st = check_dn_exists(context, ldap_server_handle, xargs->linkdn,",
      "739:                              FALSE);",
      "740:         if (st)",
      "741:             return st;",
      "742:     }",
      "744:     if (xargs->containerdn != NULL && standalone_dn != NULL) {",
      "747:         st = check_dn_in_container(context, standalone_dn, subtrees, ntrees);",
      "748:         if (st)",
      "749:             return st;",
      "750:     }",
      "752:     return 0;",
      "753: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "662:     LDAPMessage                 *result=NULL, *ent=NULL;",
      "663:     char                        **subtreelist = NULL;",
      "664:     char                        *user=NULL, *subtree=NULL, *principal_dn=NULL;",
      "666:     char                        *filtuser=NULL;",
      "667:     struct berval               **bersecretkey=NULL;",
      "668:     LDAPMod                     **mods=NULL;",
      "669:     krb5_boolean                create_standalone=FALSE;",
      "671:     char                        *standalone_principal_dn=NULL;",
      "672:     krb5_tl_data                *tl_data=NULL;",
      "673:     krb5_key_data               **keys=NULL;",
      "",
      "[Removed Lines]",
      "665:     char                        **values=NULL, *strval[10]={NULL}, errbuf[1024];",
      "670:     krb5_boolean                krb_identity_exists=FALSE, establish_links=FALSE;",
      "",
      "[Added Lines]",
      "766:     char                        *strval[10]={NULL}, errbuf[1024];",
      "771:     krb5_boolean                establish_links=FALSE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "862:     if (xargs.dn_from_kbd == TRUE) {",
      "882:         if (subtreelist == NULL) {",
      "883:             st = krb5_get_subtree_info(ldap_context, &subtreelist, &ntrees);",
      "",
      "[Removed Lines]",
      "864:         int              dnlen=0, subtreelen=0;",
      "865:         char             *dn=NULL;",
      "866:         krb5_boolean     outofsubtree=TRUE;",
      "868:         if (xargs.dn != NULL) {",
      "869:             dn = xargs.dn;",
      "870:         } else if (xargs.linkdn != NULL) {",
      "871:             dn = xargs.linkdn;",
      "872:         } else if (standalone_principal_dn != NULL) {",
      "878:             dn = standalone_principal_dn;",
      "879:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "885:                 goto cleanup;",
      "886:         }",
      "905:             goto cleanup;",
      "963:     }",
      "965:     if (xargs.linkdn != NULL) {",
      "",
      "[Removed Lines]",
      "888:         for (tre=0; tre<ntrees; ++tre) {",
      "889:             if (subtreelist[tre] == NULL || strlen(subtreelist[tre]) == 0) {",
      "890:                 outofsubtree = FALSE;",
      "891:                 break;",
      "892:             } else {",
      "893:                 dnlen = strlen (dn);",
      "894:                 subtreelen = strlen(subtreelist[tre]);",
      "895:                 if ((dnlen >= subtreelen) && (strcasecmp((dn + dnlen - subtreelen), subtreelist[tre]) == 0)) {",
      "896:                     outofsubtree = FALSE;",
      "897:                     break;",
      "898:                 }",
      "899:             }",
      "900:         }",
      "902:         if (outofsubtree == TRUE) {",
      "903:             st = EINVAL;",
      "904:             k5_setmsg(context, st, _(\"DN is out of the realm subtree\"));",
      "906:         }",
      "915:         if (standalone_principal_dn == NULL) {",
      "926:             char  *attributes[]={\"krbticketpolicyreference\", \"krbprincipalname\", NULL};",
      "928:             ldap_msgfree(result);",
      "929:             result = NULL;",
      "930:             LDAP_SEARCH_1(dn, LDAP_SCOPE_BASE, 0, attributes, IGNORE_STATUS);",
      "931:             if (st == LDAP_SUCCESS) {",
      "932:                 ent = ldap_first_entry(ld, result);",
      "933:                 if (ent != NULL) {",
      "934:                     if ((values=ldap_get_values(ld, ent, \"krbticketpolicyreference\")) != NULL) {",
      "935:                         ldap_value_free(values);",
      "936:                     }",
      "938:                     if ((values=ldap_get_values(ld, ent, \"krbprincipalname\")) != NULL) {",
      "939:                         krb_identity_exists = TRUE;",
      "940:                         ldap_value_free(values);",
      "941:                     }",
      "942:                 }",
      "943:             } else {",
      "944:                 st = set_ldap_error(context, st, OP_SEARCH);",
      "945:                 goto cleanup;",
      "946:             }",
      "947:         }",
      "948:     }",
      "957:     if (xargs.dn != NULL && krb_identity_exists == TRUE) {",
      "958:         st = EINVAL;",
      "959:         snprintf(errbuf, sizeof(errbuf),",
      "960:                  _(\"ldap object is already kerberized\"));",
      "961:         k5_setmsg(context, st, \"%s\", errbuf);",
      "962:         goto cleanup;",
      "",
      "[Added Lines]",
      "971:         st = validate_xargs(context, ldap_server_handle, &xargs,",
      "972:                             standalone_principal_dn, subtreelist, ntrees);",
      "973:         if (st)",
      "",
      "---------------"
    ],
    "src/tests/t_kdb.py||src/tests/t_kdb.py": [
      "File: src/tests/t_kdb.py -> src/tests/t_kdb.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "203: # in the test LDAP server.",
      "204: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=cn=krb5', 'princ1'],",
      "205:           expected_code=1, expected_msg='DN is out of the realm subtree')",
      "206: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=cn=t2,cn=krb5', 'princ1'])",
      "207: realm.run([kadminl, 'getprinc', 'princ1'], expected_msg='Principal: princ1')",
      "208: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=cn=t2,cn=krb5', 'again'],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206: # Check that the DN container check is a hierarchy test, not a simple",
      "207: # suffix match (CVE-2018-5730).  We expect this operation to fail",
      "208: # either way (because \"xcn\" isn't a valid DN tag) but the container",
      "209: # check should happen before the DN is parsed.",
      "210: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=xcn=t1,cn=krb5', 'princ1'],",
      "211:           expected_code=1, expected_msg='DN is out of the realm subtree')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "226:            'princ3'])",
      "227: realm.run([kadminl, 'modprinc', '-x', 'containerdn=cn=t2,cn=krb5', 'princ3'],",
      "228:           expected_code=1, expected_msg='containerdn option not supported')",
      "230: # Create and modify a ticket policy.",
      "231: kldaputil(['create_policy', '-maxtktlife', '3hour', '-maxrenewlife', '6hour',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "235: # Verify that containerdn is checked when linkdn is also supplied",
      "236: # (CVE-2018-5730).",
      "237: realm.run([kadminl, 'ank', '-randkey', '-x', 'containerdn=cn=krb5',",
      "238:            '-x', 'linkdn=cn=t2,cn=krb5', 'princ4'], expected_code=1,",
      "239:           expected_msg='DN is out of the realm subtree')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a2df94b6bb22ecf6e77c5044cff0f627b4fb30cf",
      "candidate_info": {
        "commit_hash": "a2df94b6bb22ecf6e77c5044cff0f627b4fb30cf",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/a2df94b6bb22ecf6e77c5044cff0f627b4fb30cf",
        "files": [
          "src/lib/kadm5/srv/svr_principal.c",
          "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
          "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
          "src/tests/t_kdb.py"
        ],
        "message": "Fix flaws in LDAP DN checking\n\nKDB_TL_USER_INFO tl-data is intended to be internal to the LDAP KDB\nmodule, and not used in disk or wire principal entries.  Prevent\nkadmin clients from sending KDB_TL_USER_INFO tl-data by giving it a\ntype number less than 256 and filtering out type numbers less than 256\nin kadm5_create_principal_3().  (We already filter out low type\nnumbers in kadm5_modify_principal()).\n\nIn the LDAP KDB module, if containerdn and linkdn are both specified\nin a put_principal operation, check both linkdn and the computed\nstandalone_principal_dn for container membership.  To that end, factor\nout the checks into helper functions and call them on all applicable\nclient-influenced DNs.\n\nCVE-2018-5729:\n\nIn MIT krb5 1.6 or later, an authenticated kadmin user with permission\nto add principals to an LDAP Kerberos database can cause a null\ndereference in kadmind, or circumvent a DN container check, by\nsupplying tagged data intended to be internal to the database module.\nThanks to Sharwan Ram and Pooja Anil for discovering the potential\nnull dereference.\n\nCVE-2018-5730:\n\nIn MIT krb5 1.6 or later, an authenticated kadmin user with permission\nto add principals to an LDAP Kerberos database can circumvent a DN\ncontainership check by supplying both a \"linkdn\" and \"containerdn\"\ndatabase argument, or by supplying a DN string which is a left\nextension of a container DN string but is not hierarchically within\nthe container DN.\n\n(cherry picked from commit e1caf6fb74981da62039846931ebdffed71309d1)\n\nticket: 8643\nversion_fixed: 1.15.3",
        "before_after_code_files": [
          "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c",
          "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
          "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
          "src/tests/t_kdb.py||src/tests/t_kdb.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c",
            "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
            "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
            "src/tests/t_kdb.py||src/tests/t_kdb.py"
          ],
          "candidate": [
            "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c",
            "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
            "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
            "src/tests/t_kdb.py||src/tests/t_kdb.py"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c": [
          "File: src/lib/kadm5/srv/svr_principal.c -> src/lib/kadm5/srv/svr_principal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:         return KADM5_BAD_MASK;",
          "331:     if((mask & ~ALL_PRINC_MASK))",
          "332:         return KADM5_BAD_MASK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:     if (mask & KADM5_TL_DATA) {",
          "334:         for (tl_data_tail = entry->tl_data; tl_data_tail != NULL;",
          "335:              tl_data_tail = tl_data_tail->tl_data_next) {",
          "336:             if (tl_data_tail->tl_data_type < 256)",
          "337:                 return KADM5_BAD_TL_TYPE;",
          "338:         }",
          "339:     }",
          "",
          "---------------"
        ],
        "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h": [
          "File: src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h -> src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: #define UNSTORE16_INT(ptr, val) (val = load_16_be(ptr))",
          "142: #define UNSTORE32_INT(ptr, val) (val = load_32_be(ptr))",
          "146: #define KDB_TL_PRINCTYPE          0x01",
          "147: #define KDB_TL_PRINCCOUNT         0x02",
          "",
          "[Removed Lines]",
          "144: #define  KDB_TL_USER_INFO      0x7ffe",
          "",
          "[Added Lines]",
          "144: #define  KDB_TL_USER_INFO      0xff",
          "",
          "---------------"
        ],
        "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c": [
          "File: src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c -> src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:     return ret;",
          "652: }",
          "654: krb5_error_code",
          "655: krb5_ldap_put_principal(krb5_context context, krb5_db_entry *entry,",
          "656:                         char **db_args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654: static krb5_error_code",
          "655: check_dn_in_container(krb5_context context, const char *dn,",
          "656:                       char *const *subtrees, unsigned int ntrees)",
          "657: {",
          "658:     unsigned int i;",
          "659:     size_t dnlen = strlen(dn), stlen;",
          "661:     for (i = 0; i < ntrees; i++) {",
          "662:         if (subtrees[i] == NULL || *subtrees[i] == '\\0')",
          "663:             return 0;",
          "664:         stlen = strlen(subtrees[i]);",
          "665:         if (dnlen >= stlen &&",
          "666:             strcasecmp(dn + dnlen - stlen, subtrees[i]) == 0 &&",
          "667:             (dnlen == stlen || dn[dnlen - stlen - 1] == ','))",
          "668:             return 0;",
          "669:     }",
          "671:     k5_setmsg(context, EINVAL, _(\"DN is out of the realm subtree\"));",
          "672:     return EINVAL;",
          "673: }",
          "675: static krb5_error_code",
          "676: check_dn_exists(krb5_context context,",
          "677:                 krb5_ldap_server_handle *ldap_server_handle,",
          "678:                 const char *dn, krb5_boolean nonkrb_only)",
          "679: {",
          "680:     krb5_error_code st = 0, tempst;",
          "681:     krb5_ldap_context *ldap_context = context->dal_handle->db_context;",
          "682:     LDAP *ld = ldap_server_handle->ldap_handle;",
          "683:     LDAPMessage *result = NULL, *ent;",
          "684:     char *attrs[] = { \"krbticketpolicyreference\", \"krbprincipalname\", NULL };",
          "685:     char **values;",
          "687:     LDAP_SEARCH_1(dn, LDAP_SCOPE_BASE, 0, attrs, IGNORE_STATUS);",
          "688:     if (st != LDAP_SUCCESS)",
          "689:         return set_ldap_error(context, st, OP_SEARCH);",
          "691:     ent = ldap_first_entry(ld, result);",
          "692:     CHECK_NULL(ent);",
          "694:     values = ldap_get_values(ld, ent, \"krbticketpolicyreference\");",
          "695:     if (values != NULL)",
          "696:         ldap_value_free(values);",
          "698:     values = ldap_get_values(ld, ent, \"krbprincipalname\");",
          "699:     if (values != NULL) {",
          "700:         ldap_value_free(values);",
          "701:         if (nonkrb_only) {",
          "702:             st = EINVAL;",
          "703:             k5_setmsg(context, st, _(\"ldap object is already kerberized\"));",
          "704:             goto cleanup;",
          "705:         }",
          "706:     }",
          "708: cleanup:",
          "709:     ldap_msgfree(result);",
          "710:     return st;",
          "711: }",
          "713: static krb5_error_code",
          "714: validate_xargs(krb5_context context,",
          "715:                krb5_ldap_server_handle *ldap_server_handle,",
          "716:                const xargs_t *xargs, const char *standalone_dn,",
          "717:                char *const *subtrees, unsigned int ntrees)",
          "718: {",
          "719:     krb5_error_code st;",
          "721:     if (xargs->dn != NULL) {",
          "723:         st = check_dn_in_container(context, xargs->dn, subtrees, ntrees);",
          "724:         if (st)",
          "725:             return st;",
          "727:         st = check_dn_exists(context, ldap_server_handle, xargs->dn, TRUE);",
          "728:         if (st)",
          "729:             return st;",
          "730:     }",
          "732:     if (xargs->linkdn != NULL) {",
          "734:         st = check_dn_in_container(context, xargs->linkdn, subtrees, ntrees);",
          "735:         if (st)",
          "736:             return st;",
          "738:         st = check_dn_exists(context, ldap_server_handle, xargs->linkdn,",
          "739:                              FALSE);",
          "740:         if (st)",
          "741:             return st;",
          "742:     }",
          "744:     if (xargs->containerdn != NULL && standalone_dn != NULL) {",
          "747:         st = check_dn_in_container(context, standalone_dn, subtrees, ntrees);",
          "748:         if (st)",
          "749:             return st;",
          "750:     }",
          "752:     return 0;",
          "753: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:     LDAPMessage                 *result=NULL, *ent=NULL;",
          "663:     char                        **subtreelist = NULL;",
          "664:     char                        *user=NULL, *subtree=NULL, *principal_dn=NULL;",
          "666:     char                        *filtuser=NULL;",
          "667:     struct berval               **bersecretkey=NULL;",
          "668:     LDAPMod                     **mods=NULL;",
          "669:     krb5_boolean                create_standalone=FALSE;",
          "671:     char                        *standalone_principal_dn=NULL;",
          "672:     krb5_tl_data                *tl_data=NULL;",
          "673:     krb5_key_data               **keys=NULL;",
          "",
          "[Removed Lines]",
          "665:     char                        **values=NULL, *strval[10]={NULL}, errbuf[1024];",
          "670:     krb5_boolean                krb_identity_exists=FALSE, establish_links=FALSE;",
          "",
          "[Added Lines]",
          "766:     char                        *strval[10]={NULL}, errbuf[1024];",
          "771:     krb5_boolean                establish_links=FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "862:     if (xargs.dn_from_kbd == TRUE) {",
          "882:         if (subtreelist == NULL) {",
          "883:             st = krb5_get_subtree_info(ldap_context, &subtreelist, &ntrees);",
          "",
          "[Removed Lines]",
          "864:         int              dnlen=0, subtreelen=0;",
          "865:         char             *dn=NULL;",
          "866:         krb5_boolean     outofsubtree=TRUE;",
          "868:         if (xargs.dn != NULL) {",
          "869:             dn = xargs.dn;",
          "870:         } else if (xargs.linkdn != NULL) {",
          "871:             dn = xargs.linkdn;",
          "872:         } else if (standalone_principal_dn != NULL) {",
          "878:             dn = standalone_principal_dn;",
          "879:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "885:                 goto cleanup;",
          "886:         }",
          "905:             goto cleanup;",
          "963:     }",
          "965:     if (xargs.linkdn != NULL) {",
          "",
          "[Removed Lines]",
          "888:         for (tre=0; tre<ntrees; ++tre) {",
          "889:             if (subtreelist[tre] == NULL || strlen(subtreelist[tre]) == 0) {",
          "890:                 outofsubtree = FALSE;",
          "891:                 break;",
          "892:             } else {",
          "893:                 dnlen = strlen (dn);",
          "894:                 subtreelen = strlen(subtreelist[tre]);",
          "895:                 if ((dnlen >= subtreelen) && (strcasecmp((dn + dnlen - subtreelen), subtreelist[tre]) == 0)) {",
          "896:                     outofsubtree = FALSE;",
          "897:                     break;",
          "898:                 }",
          "899:             }",
          "900:         }",
          "902:         if (outofsubtree == TRUE) {",
          "903:             st = EINVAL;",
          "904:             k5_setmsg(context, st, _(\"DN is out of the realm subtree\"));",
          "906:         }",
          "915:         if (standalone_principal_dn == NULL) {",
          "926:             char  *attributes[]={\"krbticketpolicyreference\", \"krbprincipalname\", NULL};",
          "928:             ldap_msgfree(result);",
          "929:             result = NULL;",
          "930:             LDAP_SEARCH_1(dn, LDAP_SCOPE_BASE, 0, attributes, IGNORE_STATUS);",
          "931:             if (st == LDAP_SUCCESS) {",
          "932:                 ent = ldap_first_entry(ld, result);",
          "933:                 if (ent != NULL) {",
          "934:                     if ((values=ldap_get_values(ld, ent, \"krbticketpolicyreference\")) != NULL) {",
          "935:                         ldap_value_free(values);",
          "936:                     }",
          "938:                     if ((values=ldap_get_values(ld, ent, \"krbprincipalname\")) != NULL) {",
          "939:                         krb_identity_exists = TRUE;",
          "940:                         ldap_value_free(values);",
          "941:                     }",
          "942:                 }",
          "943:             } else {",
          "944:                 st = set_ldap_error(context, st, OP_SEARCH);",
          "945:                 goto cleanup;",
          "946:             }",
          "947:         }",
          "948:     }",
          "957:     if (xargs.dn != NULL && krb_identity_exists == TRUE) {",
          "958:         st = EINVAL;",
          "959:         snprintf(errbuf, sizeof(errbuf),",
          "960:                  _(\"ldap object is already kerberized\"));",
          "961:         k5_setmsg(context, st, \"%s\", errbuf);",
          "962:         goto cleanup;",
          "",
          "[Added Lines]",
          "971:         st = validate_xargs(context, ldap_server_handle, &xargs,",
          "972:                             standalone_principal_dn, subtreelist, ntrees);",
          "973:         if (st)",
          "",
          "---------------"
        ],
        "src/tests/t_kdb.py||src/tests/t_kdb.py": [
          "File: src/tests/t_kdb.py -> src/tests/t_kdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:                 expected_code=1)",
          "172: if 'DN is out of the realm subtree' not in out:",
          "173:     fail('Unexpected kadmin.local output for out-of-realm dn')",
          "174: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=cn=t2,cn=krb5', 'princ1'])",
          "175: out = realm.run([kadminl, 'getprinc', 'princ1'])",
          "176: if 'Principal: princ1' not in out:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: # Check that the DN container check is a hierarchy test, not a simple",
          "175: # suffix match (CVE-2018-5730).  We expect this operation to fail",
          "176: # either way (because \"xcn\" isn't a valid DN tag) but the container",
          "177: # check should happen before the DN is parsed.",
          "178: out = realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=xcn=t1,cn=krb5',",
          "179:                  'princ1'], expected_code=1)",
          "180: if 'DN is out of the realm subtree' not in out:",
          "181:     fail('Unexpected kadmin.local output for non-hierarchy dn prefix')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:                  'princ3'], expected_code=1)",
          "209: if 'containerdn option not supported' not in out:",
          "210:     fail('Unexpected kadmin.local output trying to reset containerdn')",
          "212: # Create and modify a ticket policy.",
          "213: kldaputil(['create_policy', '-maxtktlife', '3hour', '-maxrenewlife', '6hour',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: # Verify that containerdn is checked when linkdn is also supplied",
          "220: # (CVE-2018-5730).",
          "221: out = realm.run([kadminl, 'ank', '-randkey', '-x', 'containerdn=cn=krb5',",
          "222:                  '-x', 'linkdn=cn=t2,cn=krb5', 'princ4'], expected_code=1)",
          "223: if 'DN is out of the realm subtree' not in out:",
          "224:     fail('Unexpected kadmin.local output for linkdn+containerdn test')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcfdea5477fa74b06b098f8888e5b4b2642ab38a",
      "candidate_info": {
        "commit_hash": "dcfdea5477fa74b06b098f8888e5b4b2642ab38a",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/dcfdea5477fa74b06b098f8888e5b4b2642ab38a",
        "files": [
          "src/lib/kadm5/srv/svr_principal.c",
          "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
          "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
          "src/tests/t_kdb.py"
        ],
        "message": "Fix flaws in LDAP DN checking\n\nKDB_TL_USER_INFO tl-data is intended to be internal to the LDAP KDB\nmodule, and not used in disk or wire principal entries.  Prevent\nkadmin clients from sending KDB_TL_USER_INFO tl-data by giving it a\ntype number less than 256 and filtering out type numbers less than 256\nin kadm5_create_principal_3().  (We already filter out low type\nnumbers in kadm5_modify_principal()).\n\nIn the LDAP KDB module, if containerdn and linkdn are both specified\nin a put_principal operation, check both linkdn and the computed\nstandalone_principal_dn for container membership.  To that end, factor\nout the checks into helper functions and call them on all applicable\nclient-influenced DNs.\n\nCVE-2018-5729:\n\nIn MIT krb5 1.6 or later, an authenticated kadmin user with permission\nto add principals to an LDAP Kerberos database can cause a null\ndereference in kadmind, or circumvent a DN container check, by\nsupplying tagged data intended to be internal to the database module.\nThanks to Sharwan Ram and Pooja Anil for discovering the potential\nnull dereference.\n\nCVE-2018-5730:\n\nIn MIT krb5 1.6 or later, an authenticated kadmin user with permission\nto add principals to an LDAP Kerberos database can circumvent a DN\ncontainership check by supplying both a \"linkdn\" and \"containerdn\"\ndatabase argument, or by supplying a DN string which is a left\nextension of a container DN string but is not hierarchically within\nthe container DN.\n\n(cherry picked from commit e1caf6fb74981da62039846931ebdffed71309d1)\n\nticket: 8643\nversion_fixed: 1.16.1",
        "before_after_code_files": [
          "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c",
          "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
          "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
          "src/tests/t_kdb.py||src/tests/t_kdb.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c",
            "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
            "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
            "src/tests/t_kdb.py||src/tests/t_kdb.py"
          ],
          "candidate": [
            "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c",
            "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
            "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
            "src/tests/t_kdb.py||src/tests/t_kdb.py"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/kadm5/srv/svr_principal.c||src/lib/kadm5/srv/svr_principal.c": [
          "File: src/lib/kadm5/srv/svr_principal.c -> src/lib/kadm5/srv/svr_principal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:         return KADM5_BAD_MASK;",
          "331:     if((mask & ~ALL_PRINC_MASK))",
          "332:         return KADM5_BAD_MASK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:     if (mask & KADM5_TL_DATA) {",
          "334:         for (tl_data_tail = entry->tl_data; tl_data_tail != NULL;",
          "335:              tl_data_tail = tl_data_tail->tl_data_next) {",
          "336:             if (tl_data_tail->tl_data_type < 256)",
          "337:                 return KADM5_BAD_TL_TYPE;",
          "338:         }",
          "339:     }",
          "",
          "---------------"
        ],
        "src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h||src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h": [
          "File: src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h -> src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: #define UNSTORE16_INT(ptr, val) (val = load_16_be(ptr))",
          "142: #define UNSTORE32_INT(ptr, val) (val = load_32_be(ptr))",
          "146: #define KDB_TL_PRINCTYPE          0x01",
          "147: #define KDB_TL_PRINCCOUNT         0x02",
          "",
          "[Removed Lines]",
          "144: #define  KDB_TL_USER_INFO      0x7ffe",
          "",
          "[Added Lines]",
          "144: #define  KDB_TL_USER_INFO      0xff",
          "",
          "---------------"
        ],
        "src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c||src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c": [
          "File: src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c -> src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:     return ret;",
          "652: }",
          "654: krb5_error_code",
          "655: krb5_ldap_put_principal(krb5_context context, krb5_db_entry *entry,",
          "656:                         char **db_args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654: static krb5_error_code",
          "655: check_dn_in_container(krb5_context context, const char *dn,",
          "656:                       char *const *subtrees, unsigned int ntrees)",
          "657: {",
          "658:     unsigned int i;",
          "659:     size_t dnlen = strlen(dn), stlen;",
          "661:     for (i = 0; i < ntrees; i++) {",
          "662:         if (subtrees[i] == NULL || *subtrees[i] == '\\0')",
          "663:             return 0;",
          "664:         stlen = strlen(subtrees[i]);",
          "665:         if (dnlen >= stlen &&",
          "666:             strcasecmp(dn + dnlen - stlen, subtrees[i]) == 0 &&",
          "667:             (dnlen == stlen || dn[dnlen - stlen - 1] == ','))",
          "668:             return 0;",
          "669:     }",
          "671:     k5_setmsg(context, EINVAL, _(\"DN is out of the realm subtree\"));",
          "672:     return EINVAL;",
          "673: }",
          "675: static krb5_error_code",
          "676: check_dn_exists(krb5_context context,",
          "677:                 krb5_ldap_server_handle *ldap_server_handle,",
          "678:                 const char *dn, krb5_boolean nonkrb_only)",
          "679: {",
          "680:     krb5_error_code st = 0, tempst;",
          "681:     krb5_ldap_context *ldap_context = context->dal_handle->db_context;",
          "682:     LDAP *ld = ldap_server_handle->ldap_handle;",
          "683:     LDAPMessage *result = NULL, *ent;",
          "684:     char *attrs[] = { \"krbticketpolicyreference\", \"krbprincipalname\", NULL };",
          "685:     char **values;",
          "687:     LDAP_SEARCH_1(dn, LDAP_SCOPE_BASE, 0, attrs, IGNORE_STATUS);",
          "688:     if (st != LDAP_SUCCESS)",
          "689:         return set_ldap_error(context, st, OP_SEARCH);",
          "691:     ent = ldap_first_entry(ld, result);",
          "692:     CHECK_NULL(ent);",
          "694:     values = ldap_get_values(ld, ent, \"krbticketpolicyreference\");",
          "695:     if (values != NULL)",
          "696:         ldap_value_free(values);",
          "698:     values = ldap_get_values(ld, ent, \"krbprincipalname\");",
          "699:     if (values != NULL) {",
          "700:         ldap_value_free(values);",
          "701:         if (nonkrb_only) {",
          "702:             st = EINVAL;",
          "703:             k5_setmsg(context, st, _(\"ldap object is already kerberized\"));",
          "704:             goto cleanup;",
          "705:         }",
          "706:     }",
          "708: cleanup:",
          "709:     ldap_msgfree(result);",
          "710:     return st;",
          "711: }",
          "713: static krb5_error_code",
          "714: validate_xargs(krb5_context context,",
          "715:                krb5_ldap_server_handle *ldap_server_handle,",
          "716:                const xargs_t *xargs, const char *standalone_dn,",
          "717:                char *const *subtrees, unsigned int ntrees)",
          "718: {",
          "719:     krb5_error_code st;",
          "721:     if (xargs->dn != NULL) {",
          "723:         st = check_dn_in_container(context, xargs->dn, subtrees, ntrees);",
          "724:         if (st)",
          "725:             return st;",
          "727:         st = check_dn_exists(context, ldap_server_handle, xargs->dn, TRUE);",
          "728:         if (st)",
          "729:             return st;",
          "730:     }",
          "732:     if (xargs->linkdn != NULL) {",
          "734:         st = check_dn_in_container(context, xargs->linkdn, subtrees, ntrees);",
          "735:         if (st)",
          "736:             return st;",
          "738:         st = check_dn_exists(context, ldap_server_handle, xargs->linkdn,",
          "739:                              FALSE);",
          "740:         if (st)",
          "741:             return st;",
          "742:     }",
          "744:     if (xargs->containerdn != NULL && standalone_dn != NULL) {",
          "747:         st = check_dn_in_container(context, standalone_dn, subtrees, ntrees);",
          "748:         if (st)",
          "749:             return st;",
          "750:     }",
          "752:     return 0;",
          "753: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:     LDAPMessage                 *result=NULL, *ent=NULL;",
          "663:     char                        **subtreelist = NULL;",
          "664:     char                        *user=NULL, *subtree=NULL, *principal_dn=NULL;",
          "666:     char                        *filtuser=NULL;",
          "667:     struct berval               **bersecretkey=NULL;",
          "668:     LDAPMod                     **mods=NULL;",
          "669:     krb5_boolean                create_standalone=FALSE;",
          "671:     char                        *standalone_principal_dn=NULL;",
          "672:     krb5_tl_data                *tl_data=NULL;",
          "673:     krb5_key_data               **keys=NULL;",
          "",
          "[Removed Lines]",
          "665:     char                        **values=NULL, *strval[10]={NULL}, errbuf[1024];",
          "670:     krb5_boolean                krb_identity_exists=FALSE, establish_links=FALSE;",
          "",
          "[Added Lines]",
          "766:     char                        *strval[10]={NULL}, errbuf[1024];",
          "771:     krb5_boolean                establish_links=FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "862:     if (xargs.dn_from_kbd == TRUE) {",
          "882:         if (subtreelist == NULL) {",
          "883:             st = krb5_get_subtree_info(ldap_context, &subtreelist, &ntrees);",
          "",
          "[Removed Lines]",
          "864:         int              dnlen=0, subtreelen=0;",
          "865:         char             *dn=NULL;",
          "866:         krb5_boolean     outofsubtree=TRUE;",
          "868:         if (xargs.dn != NULL) {",
          "869:             dn = xargs.dn;",
          "870:         } else if (xargs.linkdn != NULL) {",
          "871:             dn = xargs.linkdn;",
          "872:         } else if (standalone_principal_dn != NULL) {",
          "878:             dn = standalone_principal_dn;",
          "879:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "885:                 goto cleanup;",
          "886:         }",
          "905:             goto cleanup;",
          "963:     }",
          "965:     if (xargs.linkdn != NULL) {",
          "",
          "[Removed Lines]",
          "888:         for (tre=0; tre<ntrees; ++tre) {",
          "889:             if (subtreelist[tre] == NULL || strlen(subtreelist[tre]) == 0) {",
          "890:                 outofsubtree = FALSE;",
          "891:                 break;",
          "892:             } else {",
          "893:                 dnlen = strlen (dn);",
          "894:                 subtreelen = strlen(subtreelist[tre]);",
          "895:                 if ((dnlen >= subtreelen) && (strcasecmp((dn + dnlen - subtreelen), subtreelist[tre]) == 0)) {",
          "896:                     outofsubtree = FALSE;",
          "897:                     break;",
          "898:                 }",
          "899:             }",
          "900:         }",
          "902:         if (outofsubtree == TRUE) {",
          "903:             st = EINVAL;",
          "904:             k5_setmsg(context, st, _(\"DN is out of the realm subtree\"));",
          "906:         }",
          "915:         if (standalone_principal_dn == NULL) {",
          "926:             char  *attributes[]={\"krbticketpolicyreference\", \"krbprincipalname\", NULL};",
          "928:             ldap_msgfree(result);",
          "929:             result = NULL;",
          "930:             LDAP_SEARCH_1(dn, LDAP_SCOPE_BASE, 0, attributes, IGNORE_STATUS);",
          "931:             if (st == LDAP_SUCCESS) {",
          "932:                 ent = ldap_first_entry(ld, result);",
          "933:                 if (ent != NULL) {",
          "934:                     if ((values=ldap_get_values(ld, ent, \"krbticketpolicyreference\")) != NULL) {",
          "935:                         ldap_value_free(values);",
          "936:                     }",
          "938:                     if ((values=ldap_get_values(ld, ent, \"krbprincipalname\")) != NULL) {",
          "939:                         krb_identity_exists = TRUE;",
          "940:                         ldap_value_free(values);",
          "941:                     }",
          "942:                 }",
          "943:             } else {",
          "944:                 st = set_ldap_error(context, st, OP_SEARCH);",
          "945:                 goto cleanup;",
          "946:             }",
          "947:         }",
          "948:     }",
          "957:     if (xargs.dn != NULL && krb_identity_exists == TRUE) {",
          "958:         st = EINVAL;",
          "959:         snprintf(errbuf, sizeof(errbuf),",
          "960:                  _(\"ldap object is already kerberized\"));",
          "961:         k5_setmsg(context, st, \"%s\", errbuf);",
          "962:         goto cleanup;",
          "",
          "[Added Lines]",
          "971:         st = validate_xargs(context, ldap_server_handle, &xargs,",
          "972:                             standalone_principal_dn, subtreelist, ntrees);",
          "973:         if (st)",
          "",
          "---------------"
        ],
        "src/tests/t_kdb.py||src/tests/t_kdb.py": [
          "File: src/tests/t_kdb.py -> src/tests/t_kdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: # in the test LDAP server.",
          "204: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=cn=krb5', 'princ1'],",
          "205:           expected_code=1, expected_msg='DN is out of the realm subtree')",
          "206: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=cn=t2,cn=krb5', 'princ1'])",
          "207: realm.run([kadminl, 'getprinc', 'princ1'], expected_msg='Principal: princ1')",
          "208: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=cn=t2,cn=krb5', 'again'],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: # Check that the DN container check is a hierarchy test, not a simple",
          "207: # suffix match (CVE-2018-5730).  We expect this operation to fail",
          "208: # either way (because \"xcn\" isn't a valid DN tag) but the container",
          "209: # check should happen before the DN is parsed.",
          "210: realm.run([kadminl, 'ank', '-randkey', '-x', 'dn=xcn=t1,cn=krb5', 'princ1'],",
          "211:           expected_code=1, expected_msg='DN is out of the realm subtree')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:            'princ3'])",
          "227: realm.run([kadminl, 'modprinc', '-x', 'containerdn=cn=t2,cn=krb5', 'princ3'],",
          "228:           expected_code=1, expected_msg='containerdn option not supported')",
          "230: # Create and modify a ticket policy.",
          "231: kldaputil(['create_policy', '-maxtktlife', '3hour', '-maxrenewlife', '6hour',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: # Verify that containerdn is checked when linkdn is also supplied",
          "236: # (CVE-2018-5730).",
          "237: realm.run([kadminl, 'ank', '-randkey', '-x', 'containerdn=cn=krb5',",
          "238:            '-x', 'linkdn=cn=t2,cn=krb5', 'princ4'], expected_code=1,",
          "239:           expected_msg='DN is out of the realm subtree')",
          "",
          "---------------"
        ]
      }
    }
  ]
}