{
  "cve_id": "CVE-2015-5267",
  "cve_desc": "lib/moodlelib.php in Moodle through 2.6.11, 2.7.x before 2.7.10, 2.8.x before 2.8.8, and 2.9.x before 2.9.2 relies on the PHP mt_rand function to implement the random_string and complex_random_string functions, which makes it easier for remote attackers to predict password-recovery tokens via a brute-force approach.",
  "repo": "moodle/moodle",
  "patch_hash": "e4ac3879c2d1f8fe66caa74ff1544248bccef61e",
  "patch_info": {
    "commit_hash": "e4ac3879c2d1f8fe66caa74ff1544248bccef61e",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/e4ac3879c2d1f8fe66caa74ff1544248bccef61e",
    "files": [
      "lib/moodlelib.php",
      "lib/tests/moodlelib_test.php"
    ],
    "message": "MDL-50860 core: improve creation of random strings",
    "before_after_code_files": [
      "lib/moodlelib.php||lib/moodlelib.php",
      "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
    ]
  },
  "patch_diff": {
    "lib/moodlelib.php||lib/moodlelib.php": [
      "File: lib/moodlelib.php -> lib/moodlelib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "7562:     $pool  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
      "7563:     $pool .= 'abcdefghijklmnopqrstuvwxyz';",
      "7564:     $pool .= '0123456789';",
      "7565:     $poollen = strlen($pool);",
      "7566:     $string = '';",
      "7567:     for ($i = 0; $i < $length; $i++) {",
      "7569:     }",
      "7570:     return $string;",
      "7571: }",
      "",
      "[Removed Lines]",
      "7561: function random_string ($length=15) {",
      "7568:         $string .= substr($pool, (mt_rand()%($poollen)), 1);",
      "",
      "[Added Lines]",
      "7561: function random_string($length=15) {",
      "7562:     $randombytes = random_bytes_emulate($length);",
      "7569:         $rand = ord($randombytes[$i]);",
      "7570:         $string .= substr($pool, ($rand%($poollen)), 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7586:     if ($length===null) {",
      "7587:         $length = floor(rand(24, 32));",
      "7588:     }",
      "7589:     $string = '';",
      "7590:     for ($i = 0; $i < $length; $i++) {",
      "7592:     }",
      "7593:     return $string;",
      "7594: }",
      "",
      "[Removed Lines]",
      "7591:         $string .= $pool[(mt_rand()%$poollen)];",
      "",
      "[Added Lines]",
      "7591:     $randombytes = random_bytes_emulate($length);",
      "7594:         $rand = ord($randombytes[$i]);",
      "7595:         $string .= $pool[($rand%$poollen)];",
      "7611: function random_bytes_emulate($length) {",
      "7612:     global $CFG;",
      "7613:     if ($length <= 0) {",
      "7614:         debugging('Invalid random bytes length', DEBUG_DEVELOPER);",
      "7615:         return '';",
      "7616:     }",
      "7617:     if (function_exists('random_bytes')) {",
      "7619:         $hash = @random_bytes($length);",
      "7620:         if ($hash !== false) {",
      "7621:             return $hash;",
      "7622:         }",
      "7623:     }",
      "7624:     if (function_exists('openssl_random_pseudo_bytes')) {",
      "7626:         $hash = openssl_random_pseudo_bytes($length);",
      "7627:         if ($hash !== false) {",
      "7628:             return $hash;",
      "7629:         }",
      "7630:     }",
      "7633:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
      "7635:     if ($length <= 20) {",
      "7636:         return substr($hash, 0, $length);",
      "7637:     }",
      "7638:     return $hash . random_bytes_emulate($length - 20);",
      "7639: }",
      "",
      "---------------"
    ],
    "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
      "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "2906:         $_SERVER['HTTP_X_FORWARDED_FOR'] = $xforwardedfor;",
      "2908:     }",
      "2909: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2913:     public function test_random_bytes_emulate() {",
      "2914:         $result = random_bytes_emulate(10);",
      "2915:         $this->assertSame(10, strlen($result));",
      "2916:         $this->assertnotSame($result, random_bytes_emulate(10));",
      "2918:         $result = random_bytes_emulate(21);",
      "2919:         $this->assertSame(21, strlen($result));",
      "2920:         $this->assertnotSame($result, random_bytes_emulate(21));",
      "2922:         $result = random_bytes_emulate(666);",
      "2923:         $this->assertSame(666, strlen($result));",
      "2925:         $this->assertDebuggingNotCalled();",
      "2927:         $result = random_bytes_emulate(0);",
      "2928:         $this->assertSame('', $result);",
      "2929:         $this->assertDebuggingCalled();",
      "2931:         $result = random_bytes_emulate(-1);",
      "2932:         $this->assertSame('', $result);",
      "2933:         $this->assertDebuggingCalled();",
      "2934:     }",
      "2939:     public function test_random_string() {",
      "2940:         $pool = 'a-zA-Z0-9';",
      "2942:         $result = random_string(10);",
      "2943:         $this->assertSame(10, strlen($result));",
      "2944:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2945:         $this->assertNotSame($result, random_string(10));",
      "2947:         $result = random_string(21);",
      "2948:         $this->assertSame(21, strlen($result));",
      "2949:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2950:         $this->assertNotSame($result, random_string(21));",
      "2952:         $result = random_string(666);",
      "2953:         $this->assertSame(666, strlen($result));",
      "2954:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2956:         $result = random_string();",
      "2957:         $this->assertSame(15, strlen($result));",
      "2958:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2960:         $this->assertDebuggingNotCalled();",
      "2962:         $result = random_string(0);",
      "2963:         $this->assertSame('', $result);",
      "2964:         $this->assertDebuggingCalled();",
      "2966:         $result = random_string(-1);",
      "2967:         $this->assertSame('', $result);",
      "2968:         $this->assertDebuggingCalled();",
      "2969:     }",
      "2974:     public function test_complex_random_string() {",
      "2975:         $pool = preg_quote('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#%^&*()_+-=[];,./<>?:{} ', '/');",
      "2977:         $result = complex_random_string(10);",
      "2978:         $this->assertSame(10, strlen($result));",
      "2979:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2980:         $this->assertNotSame($result, complex_random_string(10));",
      "2982:         $result = complex_random_string(21);",
      "2983:         $this->assertSame(21, strlen($result));",
      "2984:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2985:         $this->assertNotSame($result, complex_random_string(21));",
      "2987:         $result = complex_random_string(666);",
      "2988:         $this->assertSame(666, strlen($result));",
      "2989:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2991:         $result = complex_random_string();",
      "2992:         $this->assertEquals(28, strlen($result), '', 4); // Expected length is 24 - 32.",
      "2993:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
      "2995:         $this->assertDebuggingNotCalled();",
      "2997:         $result = complex_random_string(0);",
      "2998:         $this->assertSame('', $result);",
      "2999:         $this->assertDebuggingCalled();",
      "3001:         $result = complex_random_string(-1);",
      "3002:         $this->assertSame('', $result);",
      "3003:         $this->assertDebuggingCalled();",
      "3004:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "289bc7f9e3022918b4cfd2cc9851472f0cea2896",
      "candidate_info": {
        "commit_hash": "289bc7f9e3022918b4cfd2cc9851472f0cea2896",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/289bc7f9e3022918b4cfd2cc9851472f0cea2896",
        "files": [
          "lib/moodlelib.php",
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-50860 core: improve creation of random strings",
        "before_after_code_files": [
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/moodlelib.php||lib/moodlelib.php",
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7468:     $pool  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
          "7469:     $pool .= 'abcdefghijklmnopqrstuvwxyz';",
          "7470:     $pool .= '0123456789';",
          "7471:     $poollen = strlen($pool);",
          "7472:     $string = '';",
          "7473:     for ($i = 0; $i < $length; $i++) {",
          "7475:     }",
          "7476:     return $string;",
          "7477: }",
          "",
          "[Removed Lines]",
          "7467: function random_string ($length=15) {",
          "7474:         $string .= substr($pool, (mt_rand()%($poollen)), 1);",
          "",
          "[Added Lines]",
          "7467: function random_string($length=15) {",
          "7468:     $randombytes = random_bytes_emulate($length);",
          "7475:         $rand = ord($randombytes[$i]);",
          "7476:         $string .= substr($pool, ($rand%($poollen)), 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7492:     if ($length===null) {",
          "7493:         $length = floor(rand(24, 32));",
          "7494:     }",
          "7495:     $string = '';",
          "7496:     for ($i = 0; $i < $length; $i++) {",
          "7498:     }",
          "7499:     return $string;",
          "7500: }",
          "",
          "[Removed Lines]",
          "7497:         $string .= $pool[(mt_rand()%$poollen)];",
          "",
          "[Added Lines]",
          "7497:     $randombytes = random_bytes_emulate($length);",
          "7500:         $rand = ord($randombytes[$i]);",
          "7501:         $string .= $pool[($rand%$poollen)];",
          "7517: function random_bytes_emulate($length) {",
          "7518:     global $CFG;",
          "7519:     if ($length <= 0) {",
          "7520:         debugging('Invalid random bytes length', DEBUG_DEVELOPER);",
          "7521:         return '';",
          "7522:     }",
          "7523:     if (function_exists('random_bytes')) {",
          "7525:         $hash = @random_bytes($length);",
          "7526:         if ($hash !== false) {",
          "7527:             return $hash;",
          "7528:         }",
          "7529:     }",
          "7530:     if (function_exists('openssl_random_pseudo_bytes')) {",
          "7532:         $hash = openssl_random_pseudo_bytes($length);",
          "7533:         if ($hash !== false) {",
          "7534:             return $hash;",
          "7535:         }",
          "7536:     }",
          "7539:     $hash = sha1(serialize($CFG) . serialize($_SERVER) . microtime(true) . uniqid('', true), true);",
          "7541:     if ($length <= 20) {",
          "7542:         return substr($hash, 0, $length);",
          "7543:     }",
          "7544:     return $hash . random_bytes_emulate($length - 20);",
          "7545: }",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2906:         $_SERVER['HTTP_X_FORWARDED_FOR'] = $xforwardedfor;",
          "2908:     }",
          "2909: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2913:     public function test_random_bytes_emulate() {",
          "2914:         $result = random_bytes_emulate(10);",
          "2915:         $this->assertSame(10, strlen($result));",
          "2916:         $this->assertnotSame($result, random_bytes_emulate(10));",
          "2918:         $result = random_bytes_emulate(21);",
          "2919:         $this->assertSame(21, strlen($result));",
          "2920:         $this->assertnotSame($result, random_bytes_emulate(21));",
          "2922:         $result = random_bytes_emulate(666);",
          "2923:         $this->assertSame(666, strlen($result));",
          "2925:         $this->assertDebuggingNotCalled();",
          "2927:         $result = random_bytes_emulate(0);",
          "2928:         $this->assertSame('', $result);",
          "2929:         $this->assertDebuggingCalled();",
          "2931:         $result = random_bytes_emulate(-1);",
          "2932:         $this->assertSame('', $result);",
          "2933:         $this->assertDebuggingCalled();",
          "2934:     }",
          "2939:     public function test_random_string() {",
          "2940:         $pool = 'a-zA-Z0-9';",
          "2942:         $result = random_string(10);",
          "2943:         $this->assertSame(10, strlen($result));",
          "2944:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2945:         $this->assertNotSame($result, random_string(10));",
          "2947:         $result = random_string(21);",
          "2948:         $this->assertSame(21, strlen($result));",
          "2949:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2950:         $this->assertNotSame($result, random_string(21));",
          "2952:         $result = random_string(666);",
          "2953:         $this->assertSame(666, strlen($result));",
          "2954:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2956:         $result = random_string();",
          "2957:         $this->assertSame(15, strlen($result));",
          "2958:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2960:         $this->assertDebuggingNotCalled();",
          "2962:         $result = random_string(0);",
          "2963:         $this->assertSame('', $result);",
          "2964:         $this->assertDebuggingCalled();",
          "2966:         $result = random_string(-1);",
          "2967:         $this->assertSame('', $result);",
          "2968:         $this->assertDebuggingCalled();",
          "2969:     }",
          "2974:     public function test_complex_random_string() {",
          "2975:         $pool = preg_quote('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#%^&*()_+-=[];,./<>?:{} ', '/');",
          "2977:         $result = complex_random_string(10);",
          "2978:         $this->assertSame(10, strlen($result));",
          "2979:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2980:         $this->assertNotSame($result, complex_random_string(10));",
          "2982:         $result = complex_random_string(21);",
          "2983:         $this->assertSame(21, strlen($result));",
          "2984:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2985:         $this->assertNotSame($result, complex_random_string(21));",
          "2987:         $result = complex_random_string(666);",
          "2988:         $this->assertSame(666, strlen($result));",
          "2989:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2991:         $result = complex_random_string();",
          "2992:         $this->assertEquals(28, strlen($result), '', 4); // Expected length is 24 - 32.",
          "2993:         $this->assertRegExp('/^[' . $pool . ']+$/', $result);",
          "2995:         $this->assertDebuggingNotCalled();",
          "2997:         $result = complex_random_string(0);",
          "2998:         $this->assertSame('', $result);",
          "2999:         $this->assertDebuggingCalled();",
          "3001:         $result = complex_random_string(-1);",
          "3002:         $this->assertSame('', $result);",
          "3003:         $this->assertDebuggingCalled();",
          "3004:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}