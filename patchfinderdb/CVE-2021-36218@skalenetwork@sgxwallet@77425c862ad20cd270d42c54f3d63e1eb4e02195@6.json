{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b9dcb3b4d619e86f0d1d7ec6b29c87aaa1fa49b",
      "candidate_info": {
        "commit_hash": "8b9dcb3b4d619e86f0d1d7ec6b29c87aaa1fa49b",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/8b9dcb3b4d619e86f0d1d7ec6b29c87aaa1fa49b",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3205",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
          "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
          "",
          "[Removed Lines]",
          "40:                 unsigned char decryptable, uint64_t* resultLen) {",
          "",
          "[Added Lines]",
          "40:                 unsigned char exportable, uint64_t* resultLen) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
          "68:     fullMessage[0] = type;",
          "71:     strncpy(fullMessage + 2, message, len );",
          "",
          "[Removed Lines]",
          "69:     fullMessage[1] = decryptable;",
          "",
          "[Added Lines]",
          "69:     fullMessage[1] = exportable;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: }",
          "89: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen,",
          "92:     if (!message) {",
          "93:         LOG_ERROR(\"Null message in AES_encrypt\");",
          "",
          "[Removed Lines]",
          "90:                 uint8_t *type, uint8_t* decryptable){",
          "",
          "[Added Lines]",
          "90:                 uint8_t *type, uint8_t* exportable){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:     }",
          "107:     if (!encr_message) {",
          "109:         return -4;",
          "110:     }",
          "",
          "[Removed Lines]",
          "108:         LOG_ERROR(\"Null decryptable in AES_encrypt\");",
          "",
          "[Added Lines]",
          "108:         LOG_ERROR(\"Null exportable in AES_encrypt\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
          "136:   for (int i = 2; i < strlen(message) + 1; i++) {",
          "137:       message[i - 2 ] = message[i];",
          "138:   }",
          "140:   return status;",
          "141: }",
          "",
          "[Removed Lines]",
          "154: void derive_DH_Key() {",
          "155:     memcpy(AES_DH_key, AES_key, SGX_AESGCM_KEY_SIZE );",
          "157: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
          "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define SGXD_AESUTILS_H",
          "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
          "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
          "32: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen,",
          "38: #define ECDSA '1'",
          "39: #define BLS '2'",
          "40: #define DKG '3'",
          "",
          "[Removed Lines]",
          "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
          "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
          "33:                 uint8_t *type, uint8_t* decryptable) ;",
          "36: void derive_DH_Key();",
          "42: #define DECRYPTABLE '1'",
          "43: #define NON_DECRYPTABLE '2'",
          "",
          "[Added Lines]",
          "30:                 unsigned char type, unsigned char exportable, uint64_t* resultLen);",
          "32:                 uint8_t *type, uint8_t* exportable) ;",
          "40: #define EXPORTABLE '1'",
          "41: #define NON_EXPORTABLE '2'",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
          "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
          "425:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
          "427:     uint8_t type = 0;",
          "432:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
          "",
          "[Removed Lines]",
          "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
          "428:     uint8_t decryptable = 0;",
          "430:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN, &type, &decryptable);",
          "",
          "[Added Lines]",
          "424:                              ECDSA, NON_EXPORTABLE, enc_len);",
          "428:     uint8_t exportable = 0;",
          "430:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "458:     CHECK_STATE(pub_key_y);",
          "460:     uint8_t type = 0;",
          "463:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN,",
          "465:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
          "467:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "",
          "[Removed Lines]",
          "461:     uint8_t decryptable = 0;",
          "464:                              &type, &decryptable);",
          "",
          "[Added Lines]",
          "461:     uint8_t exportable = 0;",
          "464:                              &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "541:     signature sign = signature_init();",
          "543:     uint8_t type = 0;",
          "547:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN,",
          "550:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
          "",
          "[Removed Lines]",
          "544:     uint8_t decryptable = 0;",
          "548:                              &type, &decryptable);",
          "",
          "[Added Lines]",
          "544:     uint8_t exportable = 0;",
          "548:                              &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "624:     uint8_t type = 0;",
          "627:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072,",
          "632:         snprintf(errString, BUF_LEN, \"Key is not exportable\");",
          "633:     }",
          "",
          "[Removed Lines]",
          "625:     uint8_t decryptable = 0;",
          "628:                              &type, &decryptable);",
          "630:     if (decryptable != DECRYPTABLE) {",
          "",
          "[Added Lines]",
          "625:     uint8_t exportable = 0;",
          "628:                              &type, &exportable);",
          "630:     if (exportable != EXPORTABLE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "670:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
          "673:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
          "675:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
          "677:     uint8_t type = 0;",
          "680:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN,",
          "683:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
          "",
          "[Removed Lines]",
          "671:                              DKG, DECRYPTABLE, enc_len);",
          "678:     uint8_t decryptable = 0;",
          "681:                          &type, &decryptable);",
          "",
          "[Added Lines]",
          "671:                              DKG, EXPORTABLE, enc_len);",
          "678:     uint8_t exportable = 0;",
          "681:                          &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "722:     SAFE_CHAR_BUF(key, BUF_LEN);SAFE_CHAR_BUF(sig, BUF_LEN);",
          "724:     uint8_t type = 0;",
          "729:     CHECK_STATUS(\"AES decrypt failed\")",
          "",
          "[Removed Lines]",
          "725:     uint8_t decryptable = 0;",
          "727:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN, &type, &decryptable);",
          "",
          "[Added Lines]",
          "725:     uint8_t exportable = 0;",
          "727:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "767:     CHECK_STATUS(\"gen_dkg_poly failed\")",
          "769:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
          "772:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
          "",
          "[Removed Lines]",
          "770:                          DKG, DECRYPTABLE, enc_len);",
          "",
          "[Added Lines]",
          "770:                          DKG, EXPORTABLE, enc_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "776:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
          "778:     uint8_t type = 0;",
          "781:     status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret,",
          "784:     CHECK_STATUS(\"aes decrypt dkg poly failed\");",
          "",
          "[Removed Lines]",
          "779:     uint8_t decryptable = 0;",
          "782:                          DKG_BUFER_LENGTH, &type, &decryptable);",
          "",
          "[Added Lines]",
          "779:     uint8_t exportable = 0;",
          "782:                          DKG_BUFER_LENGTH, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "809:     CHECK_STATE(decrypted_dkg_secret);",
          "811:     uint8_t  type;",
          "814:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, (char *) decrypted_dkg_secret,",
          "817:     CHECK_STATUS2(\"aes decrypt data - encrypted_dkg_secret failed with status %d\")",
          "",
          "[Removed Lines]",
          "812:     uint8_t  decryptable;",
          "815:                              3072, &type, &decryptable);",
          "",
          "[Added Lines]",
          "812:     uint8_t  exportable;",
          "815:                              3072, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "834:     memset(getThreadLocalDecryptedDkgPoly(), 0, DKG_BUFER_LENGTH);",
          "836:     uint8_t type = 0;",
          "839:     int status = AES_decrypt(encrypted_poly, enc_len, (char *) getThreadLocalDecryptedDkgPoly(),",
          "842:     CHECK_STATUS2(\"sgx_unseal_data - encrypted_poly failed with status %d\")",
          "",
          "[Removed Lines]",
          "837:     uint8_t decryptable = 0;",
          "840:                              DKG_BUFER_LENGTH, &type, &decryptable);",
          "",
          "[Added Lines]",
          "837:     uint8_t exportable = 0;",
          "840:                              DKG_BUFER_LENGTH, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "874:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
          "876:     uint8_t type = 0;",
          "881:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "[Removed Lines]",
          "877:     uint8_t decryptable = 0;",
          "879:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN, &type, &decryptable);",
          "",
          "[Added Lines]",
          "877:     uint8_t exportable = 0;",
          "879:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "930:     SAFE_CHAR_BUF(decrypted_dkg_secret, DKG_MAX_SEALED_LEN);",
          "932:     uint8_t type = 0;",
          "935:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, decrypted_dkg_secret,",
          "938:     CHECK_STATUS2(\"aes decrypt data - encrypted_dkg_secret failed with status %d\");",
          "",
          "[Removed Lines]",
          "933:     uint8_t decryptable = 0;",
          "936:                              DKG_MAX_SEALED_LEN, &type, &decryptable);",
          "",
          "[Added Lines]",
          "933:     uint8_t exportable = 0;",
          "936:                              DKG_MAX_SEALED_LEN, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "963:     mpz_init(s);",
          "965:     uint8_t type = 0;",
          "968:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN,",
          "971:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
          "",
          "[Removed Lines]",
          "966:     uint8_t decryptable = 0;",
          "969:                              &type, &decryptable);",
          "",
          "[Added Lines]",
          "966:     uint8_t exportable = 0;",
          "969:                              &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1026:     mpz_init(bls_key);",
          "1028:     uint8_t type = 0;",
          "1032:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN,",
          "1034:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
          "1036:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "[Removed Lines]",
          "1029:     uint8_t decryptable = 0;",
          "1033:                              &type, &decryptable);",
          "",
          "[Added Lines]",
          "1029:     uint8_t exportable = 0;",
          "1033:                              &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1090:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
          "1091:     key_share[BLS_KEY_LENGTH - 1] = 0;",
          "1095:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
          "",
          "[Removed Lines]",
          "1093:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, DECRYPTABLE, enc_bls_key_len);",
          "",
          "[Added Lines]",
          "1093:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_EXPORTABLE, enc_bls_key_len);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1117:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
          "1119:     uint8_t type = 0;",
          "1124:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN,",
          "1127:     CHECK_STATUS2(\"AES decrypt failed %d\");",
          "",
          "[Removed Lines]",
          "1120:     uint8_t decryptable = 0;",
          "1125:                              &type, &decryptable);",
          "",
          "[Added Lines]",
          "1120:     uint8_t exportable = 0;",
          "1125:                              &type, &exportable);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e2870ac7ff40f09a741a70dc0071a592b81b1db",
      "candidate_info": {
        "commit_hash": "4e2870ac7ff40f09a741a70dc0071a592b81b1db",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/4e2870ac7ff40f09a741a70dc0071a592b81b1db",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: void get_global_random(unsigned char *_randBuff, uint64_t _size) {",
          "151:     char errString[BUF_LEN];",
          "154:     CHECK_STATE(_size <= 32)",
          "155:     CHECK_STATE(_randBuff);",
          "157:     sgx_sha_state_handle_t shaStateHandle;",
          "163:     memcpy(_randBuff, globalRandom, _size);",
          "164: }",
          "",
          "[Removed Lines]",
          "152:     int *errStatus;",
          "158:     assert(sgx_sha256_init(&shaStateHandle) == SGX_SUCCESS);",
          "159:     assert(sgx_sha256_update(globalRandom, 32, shaStateHandle) == SGX_SUCCESS);",
          "160:     assert(sgx_sha256_get_hash(shaStateHandle, globalRandom) == SGX_SUCCESS);",
          "161:     assert(sgx_sha256_get_hash(shaStateHandle, globalRandom) == SGX_SUCCESS);",
          "162:     assert(sgx_sha256_close(shaStateHandle) == SGX_SUCCESS);",
          "",
          "[Added Lines]",
          "152:     int status;",
          "153:     int *errStatus = &status;",
          "164:     CHECK_STATE(sgx_sha256_init(&shaStateHandle) == SGX_SUCCESS);",
          "165:     CHECK_STATE(sgx_sha256_update(globalRandom, 32, shaStateHandle) == SGX_SUCCESS);",
          "166:     CHECK_STATE(sgx_sha256_get_hash(shaStateHandle, globalRandom) == SGX_SUCCESS);",
          "167:     CHECK_STATE(sgx_sha256_get_hash(shaStateHandle, globalRandom) == SGX_SUCCESS);",
          "168:     CHECK_STATE(sgx_sha256_close(shaStateHandle) == SGX_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:     }",
          "524: }",
          "526: void trustedBlsSignMessage(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "",
          "[Removed Lines]",
          "523:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "810:     }",
          "816: }",
          "818: void trustedCreateBlsKey(int *errStatus, char *errString, const char *s_shares,",
          "",
          "[Removed Lines]",
          "813:     mpz_clear(s);",
          "815:     snprintf(errString, BUF_LEN, \"common_key in verification is %s\", common_key);",
          "",
          "[Added Lines]",
          "881:     mpz_clear(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1412:         return;",
          "1413:     }",
          "1414: }",
          "1416: void",
          "1417: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "1418:     LOG_DEBUG(__FUNCTION__);",
          "1423:     char dkg_secret[DKG_BUFER_LENGTH];",
          "1424:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "1420:     CHECK_STATE(encrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "1543:     CHECK_STATE(encrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1471:     if (status != SGX_SUCCESS) {",
          "1472:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "1474:         return;",
          "1475:     }",
          "1476: }",
          "1479: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "1480:     LOG_DEBUG(__FUNCTION__);",
          "1482:     CHECK_STATE(encrypted_poly);",
          "1484:     memset(getThreadLocalDecryptedDkgPoly(), 0, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1601:         LOG_ERROR(errString);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1490:         snprintf(errString, BUF_LEN, \"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "1491:         return;",
          "1492:     }",
          "1493: }",
          "1495: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "1496:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "1497:                                        uint8_t ind) {",
          "1499:     CHECK_STATE(encrypted_skey);",
          "1500:     CHECK_STATE(result_str);",
          "1501:     CHECK_STATE(s_shareG2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1635:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1645:     }",
          "1650:     snprintf(errString, BUF_LEN, \"public shares %s\", public_shares);",
          "1651: }",
          "1653: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
          "",
          "[Removed Lines]",
          "1648:     mpz_clear(s);",
          "",
          "[Added Lines]",
          "1806:     mpz_clear(s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41429ab9ffcd717889bb720f3a659b6ad83360e9",
      "candidate_info": {
        "commit_hash": "41429ab9ffcd717889bb720f3a659b6ad83360e9",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/41429ab9ffcd717889bb720f3a659b6ad83360e9",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "secure_enclave/.deps/secure_enclave.Po",
          "secure_enclave/BLSEnclave.cpp",
          "secure_enclave/BLSEnclave.h",
          "secure_enclave/DH_dkg.c",
          "secure_enclave/DH_dkg.h",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h",
          "secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in",
          "secure_enclave/drive_key_dkg.c",
          "secure_enclave/drive_key_dkg.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.config.xml",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1512-add-DKG-to-SGX Add secret shares calculation",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/.deps/secure_enclave.Po||secure_enclave/.deps/secure_enclave.Po",
          "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp",
          "secure_enclave/BLSEnclave.h||secure_enclave/BLSEnclave.h",
          "secure_enclave/drive_key_dkg.c||secure_enclave/DH_dkg.c",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h",
          "secure_enclave/Makefile.am||secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in||secure_enclave/Makefile.in",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h||sgxwallet_common.h",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, _t);",
          "42:     for ( int i = 0 ; i < 3050; i++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     std::cerr << \"gen_dkg_secret, status \" << err_status << \" err msg \" << errMsg << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   free(encr_dkg_poly);",
          "98:   return pub_shares_vect;",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: }",
          "103: std::string get_secret_shares( const char* encryptedPolyHex, const std::string& publicKeys, int n, int t){",
          "104:   char* errMsg1 = (char*) calloc(1024,1);",
          "105:   int err_status = 0;",
          "107:   uint64_t enc_len = 0;",
          "109:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "110:   hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100);",
          "112:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "114:   std::string result;",
          "115:   for ( int i = 0; i < n; i++){",
          "116:     uint8_t encrypted_skey[BUF_LEN];",
          "117:     uint32_t dec_len;",
          "119:     char cur_share[193];",
          "120:     std::string pub_keyB = publicKeys.substr(64*i, 64*i + 128);",
          "121:     char pubKeyB[129];",
          "122:     strncpy(pubKeyB, pub_keyB.c_str(),129);",
          "123:     get_encr_sshare(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "124:                    cur_share, pubKeyB, t, n, i + 1 );",
          "126:     result += cur_share;",
          "132:   }",
          "135:   return result;",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: std::vector<std::string> SplitString(const char* koefs, const char symbol);",
          "17: #endif //SGXD_DKGCRYPTO_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: std::string get_secret_shares( const char* encryptedPolyHex, const std::string& publicKeys, int n, int t);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "240: }",
          "242: Json::Value generateDKGPolyImpl(const std::string& polyName, int t) {",
          "244:     Json::Value result;",
          "245:     result[\"status\"] = 0;",
          "246:     result[\"errorMessage\"] = \"\";",
          "250:     std::string encrPolyHex;",
          "252:     try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:    std::cerr <<  \" enter generateDKGPolyImpl\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:   return result;",
          "295: }",
          "297: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "298:     return generateDKGPolyImpl(polyName, t);",
          "299: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: Json::Value getSecretShareImpl(const std::string& polyName, const std::string& publicKeys, int n, int t){",
          "299:     Json::Value result;",
          "300:     result[\"status\"] = 0;",
          "301:     result[\"errorMessage\"] = \"\";",
          "303:     try {",
          "304:         std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "305:         std::string s = get_secret_shares( encr_poly_ptr->c_str(), publicKeys, n, t);",
          "307:         result[\"SecretShare\"] = s;",
          "309:     } catch (RPCException &_e) {",
          "310:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "311:         result[\"status\"] = _e.status;",
          "312:         result[\"errorMessage\"] = _e.errString;",
          "313:         result[\"SecretShare\"] = \"\";",
          "314:     }",
          "316:     return result;",
          "317: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:   return getVerificationVectorImpl(polyName, n, t);",
          "303: }",
          "305: Json::Value SGXWalletServer::generateECDSAKey(const std::string &_keyName) {",
          "306:     return generateECDSAKeyImpl(_keyName);",
          "307: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: Json::Value SGXWalletServer::getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t){",
          "328:     return getSecretShareImpl(polyName, publicKeys, n, t);",
          "329: }",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     virtual Json::Value generateDKGPoly(const std::string& polyName, int t);",
          "30:     virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t);",
          "33: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     virtual Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: Json::Value generateDKGPolyImpl(const std::string& polyName, int t);",
          "55: Json::Value getVerificationVectorImpl(const std::string& polyName, int n, int t);",
          "57: #endif //SGXWALLET_SGXWALLETSERVER_HPP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: Json::Value getSecretShareImpl(const std::string& polyName, const std::string& publicKeys, int n, int t);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:             this->bindAndAddMethod(jsonrpc::Procedure(\"getPublicECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getPublicECDSAKeyI);",
          "20:             this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "21:             this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "23:         }",
          "25:         inline virtual void importBLSKeyShareI(const Json::Value &request, Json::Value &response)",
          "",
          "[Removed Lines]",
          "22:             this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "",
          "[Added Lines]",
          "22:             this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,\"polyName\",jsonrpc::JSON_STRING, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "23:             this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         }",
          "53:         inline virtual void getVerificationVectorI(const Json::Value &request, Json::Value &response)",
          "54:         {",
          "56:         }",
          "57:         virtual Json::Value importBLSKeyShare(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t) = 0;",
          "58:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) = 0;",
          "",
          "[Removed Lines]",
          "55:             response = this->getVerificationVector(request[\"polyName\"].asString(), request[\"n\"].asInt(),request[\"t\"].asInt());",
          "",
          "[Added Lines]",
          "56:             response = this->getVerificationVector(request[\"polyName\"].asString(), request[\"n\"].asInt(), request[\"t\"].asInt());",
          "57:         }",
          "58:         inline virtual void getSecretShareI(const Json::Value &request, Json::Value &response)",
          "59:         {",
          "60:             response = this->getSecretShare(request[\"polyName\"].asString(), request[\"publicKeys\"].asString(), request[\"n\"].asInt(),request[\"t\"].asInt());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         virtual Json::Value ecdsaSignMessageHash(int base, const std::string& keyName, const std::string& messageHash) = 0;",
          "63:         virtual Json::Value generateDKGPoly(const std::string& polyName, int t) = 0;",
          "64:         virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t) = 0;",
          "65: };",
          "67: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         virtual Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/.deps/secure_enclave.Po||secure_enclave/.deps/secure_enclave.Po": [
          "File: secure_enclave/.deps/secure_enclave.Po -> secure_enclave/.deps/secure_enclave.Po",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdio.h \\",
          "28:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdarg.h \\",
          "29:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/stdbool.h \\",
          "31:  ../sgxwallet_common.h \\",
          "32:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/unistd.h \\",
          "33:  /home/kladko/sgxwallet/sgx-sdk-build/sgxsdk/include/tlibc/sys/types.h \\",
          "",
          "[Removed Lines]",
          "30:  domain_parameters.h point.h signature.h curves.h drive_key_dkg.h \\",
          "",
          "[Added Lines]",
          "30:  domain_parameters.h point.h signature.h curves.h DH_dkg.h \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: curves.h:",
          "104: ../sgxwallet_common.h:",
          "",
          "[Removed Lines]",
          "102: drive_key_dkg.h:",
          "",
          "[Added Lines]",
          "102: DH_dkg.h:",
          "",
          "---------------"
        ],
        "secure_enclave/BLSEnclave.cpp||secure_enclave/BLSEnclave.cpp": [
          "File: secure_enclave/BLSEnclave.cpp -> secure_enclave/BLSEnclave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: int char2int(char _input) {",
          "189:   if (_input >= '0' && _input <= '9')",
          "190:     return _input - '0';",
          "191:   if (_input >= 'A' && _input <= 'F')",
          "192:     return _input - 'A' + 10;",
          "193:   if (_input >= 'a' && _input <= 'f')",
          "194:     return _input - 'a' + 10;",
          "195:   return -1;",
          "196: }",
          "198: bool hex2carray2(const char * _hex, uint64_t  *_bin_len,",
          "199:                  uint8_t* _bin, const int _max_length ) {",
          "201:     int len = strnlen(_hex, _max_length);//2 * BUF_LEN);",
          "204:     if (len == 0 && len % 2 == 1)",
          "205:         return false;",
          "209:     for (int i = 0; i < len / 2; i++) {",
          "210:         int high = char2int((char)_hex[i * 2]);",
          "211:         int low = char2int((char)_hex[i * 2 + 1]);",
          "213:         if (high < 0 || low < 0) {",
          "214:             return false;",
          "215:         }",
          "217:         _bin[i] = (unsigned char) (high * 16 + low);",
          "218:     }",
          "220:     return true;",
          "222: }",
          "224: bool hex2carray(const char * _hex, uint64_t  *_bin_len,",
          "225:                 uint8_t* _bin ) {",
          "227:   int len = strnlen(_hex, 2 * BUF_LEN);",
          "230:   if (len == 0 && len % 2 == 1)",
          "231:     return false;",
          "235:   for (int i = 0; i < len / 2; i++) {",
          "236:     int high = char2int((char)_hex[i * 2]);",
          "237:     int low = char2int((char)_hex[i * 2 + 1]);",
          "239:     if (high < 0 || low < 0) {",
          "240:       return false;",
          "241:     }",
          "243:     _bin[i] = (unsigned char) (high * 16 + low);",
          "244:   }",
          "246:   return true;",
          "248: }",
          "",
          "---------------"
        ],
        "secure_enclave/BLSEnclave.h||secure_enclave/BLSEnclave.h": [
          "File: secure_enclave/BLSEnclave.h -> secure_enclave/BLSEnclave.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: EXTERNC bool enclave_sign(const char *_keyString, const char* _hashXString, const char* _hashYString, char* _sig);",
          "26: EXTERNC int char2int(char _input);",
          "28: EXTERNC void  carray2Hex(const unsigned char *d, int _len, char* _hexArray);",
          "29: EXTERNC bool hex2carray(const char * _hex, uint64_t  *_bin_len,",
          "30:                        uint8_t* _bin );",
          "32: EXTERNC void init();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: EXTERNC bool hex2carray2(const char * _hex, uint64_t  *_bin_len,",
          "32:                          uint8_t* _bin, const int _max_length );",
          "",
          "---------------"
        ],
        "secure_enclave/drive_key_dkg.c||secure_enclave/DH_dkg.c": [
          "File: secure_enclave/drive_key_dkg.c -> secure_enclave/DH_dkg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"point.h\"",
          "11: #include \"numbertheory.h\"",
          "14: void gen_session_key(char *skey_str, char* pb_keyB, char* common_key){",
          "17:     strncpy(pb_keyB_x, pb_keyB, 64);",
          "20:     strncpy(pb_keyB_y, pb_keyB + 64, 64);",
          "22:     domain_parameters curve = domain_parameters_init();",
          "23:     domain_parameters_load_curve(curve, secp256k1);",
          "45:     mpz_t skey;",
          "46:     mpz_init(skey);",
          "47:     mpz_set_str(skey, skey_str, 16);",
          "",
          "[Removed Lines]",
          "16:     char* pb_keyB_x = (char*)malloc(64);",
          "19:     char* pb_keyB_y = (char*)malloc(64);",
          "26:     sgx_read_rand( rand_char, 32);",
          "28:     mpz_t seed;",
          "29:     mpz_init(seed);",
          "30:     mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "31:     free(rand_char);",
          "33:     mpz_t skey_mpz;",
          "34:     mpz_init(skey_mpz);",
          "35:     mpz_mod(skey_mpz, seed, curve->p);",
          "36:     mpz_clear(seed);",
          "38:     char arr[mpz_sizeinbase (skey_mpz, 16) + 2];",
          "39:     char* sk = mpz_get_str(arr, 16, skey_mpz);",
          "",
          "[Added Lines]",
          "13: #include <stdint.h>",
          "14: #include \"BLSEnclave.h\"",
          "15: #include <string.h>",
          "21:     char* pb_keyB_x = (char*)malloc(65);",
          "24:     char* pb_keyB_y = (char*)malloc(65);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     char arr_x[mpz_sizeinbase (session_key->x, 16) + 2];",
          "56:     char* x = mpz_get_str(arr_x, 16, session_key->x);",
          "59:     mpz_clear(skey);",
          "60:     point_clear(pub_keyB);",
          "",
          "[Removed Lines]",
          "57:     strncpy(common_key, arr_x, 64);",
          "",
          "[Added Lines]",
          "43:     int n_zeroes = 64 - strlen(arr_x);",
          "44:     for ( int i = 0; i < n_zeroes; i++){",
          "45:       common_key[i] = '0';",
          "46:     }",
          "47:     strncpy(common_key + n_zeroes, arr_x, strlen(arr_x));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: }",
          "66: void xor_encrypt(char* key, char* message, char* cypher){",
          "70: }",
          "",
          "[Removed Lines]",
          "67:     for (int i = 0; i < 32; i++){",
          "68:         cypher[i] = message[i] ^ key[i];",
          "69:     }",
          "",
          "[Added Lines]",
          "58:    uint8_t cypher_bin[33];",
          "61:    uint8_t* key_bin = (uint8_t*)malloc(33);",
          "62:    uint64_t key_length;",
          "63:    hex2carray(key, &key_length, key_bin);",
          "65:    uint64_t msg_length;",
          "66:    uint8_t msg_bin[33];//[ECDSA_BIN_LEN];",
          "67:    hex2carray(message, &msg_length, msg_bin);",
          "70:    for (int i = 0; i < 32; i++){",
          "71:      cypher_bin[i] = msg_bin[i] ^ key_bin[i];",
          "72:    }",
          "74:    carray2Hex(cypher_bin, 32, cypher);",
          "76:    free(key_bin);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: }",
          "33: template<class T>",
          "35:   mpz_t t;",
          "36:   mpz_init(t);",
          "38:   field_elem.as_bigint().to_mpz(t);",
          "43:   mpz_clear(t);",
          "45:   std::string output = tmp;",
          "",
          "[Removed Lines]",
          "34: std::string ConvertToString(T field_elem) {",
          "40:   char arr[mpz_sizeinbase (t, 10) + 2];",
          "42:   char * tmp = mpz_get_str(arr, 10, t);",
          "",
          "[Added Lines]",
          "34: std::string ConvertToString(T field_elem, int base = 10) {",
          "40:   char arr[mpz_sizeinbase (t, base) + 2];",
          "42:   char * tmp = mpz_get_str(arr, base, t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     return tokens;",
          "70: }",
          "73:     libff::init_alt_bn128_params();",
          "74:     std::string result;",
          "75:     for (size_t i = 0; i < _t; ++i) {",
          "",
          "[Removed Lines]",
          "72: void gen_dkg_poly( char* secret/*[BUF_LEN]*/, unsigned _t ){",
          "",
          "[Added Lines]",
          "72: void gen_dkg_poly( char* secret, unsigned _t ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:        result += stringFromFr(cur_coef);",
          "82:        result += \":\";",
          "83:     }",
          "85: }",
          "87: libff::alt_bn128_Fr PolynomialValue(const std::vector<libff::alt_bn128_Fr>& pol, libff::alt_bn128_Fr point, unsigned _t) {",
          "",
          "[Removed Lines]",
          "84:     strncpy(secret, result.c_str(), result.length());",
          "",
          "[Added Lines]",
          "84:     strncpy(secret, result.c_str(), result.length() + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:   return value;",
          "101: }",
          "106:   std::string result;",
          "107:   char symbol = ':';",
          "",
          "[Removed Lines]",
          "103: void calc_secret_shares(const char* decrypted_koefs, char * secret_shares,",
          "104:     unsigned _t, unsigned _n) {",
          "",
          "[Added Lines]",
          "103: void calc_secret_shares(const char* decrypted_koefs, char * secret_shares,      // calculates secret shares in base 10 to a string secret_shares,",
          "104:     unsigned _t, unsigned _n) {                                                 // separated by \":\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:     result += ConvertToString(secret_share);//stringFromFr(secret_share);",
          "112:     result += \":\";",
          "113:   }",
          "116: }",
          "118: void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "119:                         unsigned _t) {",
          "120:   libff::init_alt_bn128_params();",
          "",
          "[Removed Lines]",
          "114:   strncpy(secret_shares, result.c_str(), result.length());",
          "",
          "[Added Lines]",
          "114:   strncpy(secret_shares, result.c_str(), result.length() + 1);",
          "118: void calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "119:                         unsigned _t, unsigned _n, unsigned ind) {",
          "121:   libff::init_alt_bn128_params();",
          "122:   char symbol = ':';",
          "123:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "125:   libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(ind), _t);",
          "126:   std::string cur_share = ConvertToString(secret_share, 16);//stringFromFr(secret_share);",
          "127:   int n_zeroes = 64 - cur_share.size();",
          "128:   cur_share.insert(0, n_zeroes, '0');",
          "130:   strncpy(s_share, cur_share.c_str(), cur_share.length() + 1);",
          "132: }",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h": [
          "File: secure_enclave/DKGUtils.h -> secure_enclave/DKGUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: EXTERNC void calc_secret_shares(const char* decrypted_koefs, char * secret_shares,",
          "17:                         unsigned _t, unsigned _n);",
          "18: EXTERNC void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "19:                         unsigned _t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: EXTERNC void calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "20:                                unsigned _t, unsigned _n, unsigned ind);",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.am||secure_enclave/Makefile.am": [
          "File: secure_enclave/Makefile.am -> secure_enclave/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: secure_enclave_SOURCES = secure_enclave_t.c secure_enclave_t.h \\",
          "87:  secure_enclave.c \\",
          "89:     DKGUtils.cpp   BLSEnclave.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "90:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g2.cpp \\",
          "91:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.cpp $(ENCLAVE_KEY) $(ENCLAVE_CONFIG)",
          "",
          "[Removed Lines]",
          "88:  curves.c domain_parameters.c numbertheory.c point.c signature.c drive_key_dkg.c \\",
          "",
          "[Added Lines]",
          "88:  curves.c domain_parameters.c numbertheory.c point.c signature.c DH_dkg.c \\",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.in||secure_enclave/Makefile.in": [
          "File: secure_enclave/Makefile.in -> secure_enclave/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: am_secure_enclave_OBJECTS = secure_enclave_t.$(OBJEXT) \\",
          "110:  secure_enclave.$(OBJEXT) curves.$(OBJEXT) \\",
          "111:  domain_parameters.$(OBJEXT) numbertheory.$(OBJEXT) \\",
          "113:  DKGUtils.$(OBJEXT) BLSEnclave.$(OBJEXT) \\",
          "114:  alt_bn128_init.$(OBJEXT) alt_bn128_g2.$(OBJEXT) \\",
          "115:  alt_bn128_g1.$(OBJEXT) $(am__objects_1) $(am__objects_1)",
          "",
          "[Removed Lines]",
          "112:  point.$(OBJEXT) signature.$(OBJEXT) drive_key_dkg.$(OBJEXT) \\",
          "",
          "[Added Lines]",
          "112:  point.$(OBJEXT) signature.$(OBJEXT) DH_dkg.$(OBJEXT) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: DEFAULT_INCLUDES = -I.@am__isrc@",
          "139: depcomp = $(SHELL) $(top_srcdir)/depcomp",
          "140: am__maybe_remake_depfiles = depfiles",
          "142:  ./$(DEPDIR)/DKGUtils.Po ./$(DEPDIR)/alt_bn128_g1.Po \\",
          "143:  ./$(DEPDIR)/alt_bn128_g2.Po ./$(DEPDIR)/alt_bn128_init.Po \\",
          "144:  ./$(DEPDIR)/curves.Po ./$(DEPDIR)/domain_parameters.Po \\",
          "149:  ./$(DEPDIR)/signed_enclave_rel.Po",
          "150: am__mv = mv -f",
          "151: COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\",
          "",
          "[Removed Lines]",
          "141: am__depfiles_remade = ./$(DEPDIR)/BLSEnclave.Po \\",
          "145:  ./$(DEPDIR)/drive_key_dkg.Po ./$(DEPDIR)/numbertheory.Po \\",
          "146:  ./$(DEPDIR)/point.Po ./$(DEPDIR)/secure_enclave.Po \\",
          "147:  ./$(DEPDIR)/secure_enclave_t.Po ./$(DEPDIR)/signature.Po \\",
          "148:  ./$(DEPDIR)/signed_enclave_debug.Po \\",
          "",
          "[Added Lines]",
          "141: am__depfiles_remade = ./$(DEPDIR)/BLSEnclave.Po ./$(DEPDIR)/DH_dkg.Po \\",
          "145:  ./$(DEPDIR)/numbertheory.Po ./$(DEPDIR)/point.Po \\",
          "146:  ./$(DEPDIR)/secure_enclave.Po ./$(DEPDIR)/secure_enclave_t.Po \\",
          "147:  ./$(DEPDIR)/signature.Po ./$(DEPDIR)/signed_enclave_debug.Po \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344: ENCLAVE_KEY = $(ENCLAVE)_private.pem",
          "345: secure_enclave_SOURCES = secure_enclave_t.c secure_enclave_t.h \\",
          "346:  secure_enclave.c \\",
          "348:     DKGUtils.cpp   BLSEnclave.cpp ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_init.cpp \\",
          "349:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g2.cpp \\",
          "350:                 ../trusted_libff/libff/algebra/curves/alt_bn128/alt_bn128_g1.cpp $(ENCLAVE_KEY) $(ENCLAVE_CONFIG)",
          "",
          "[Removed Lines]",
          "347:  curves.c domain_parameters.c numbertheory.c point.c signature.c drive_key_dkg.c \\",
          "",
          "[Added Lines]",
          "346:  curves.c domain_parameters.c numbertheory.c point.c signature.c DH_dkg.c \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:  -rm -f *.tab.c",
          "441: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BLSEnclave.Po@am__quote@ # am--include-marker",
          "442: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DKGUtils.Po@am__quote@ # am--include-marker",
          "443: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alt_bn128_g1.Po@am__quote@ # am--include-marker",
          "444: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alt_bn128_g2.Po@am__quote@ # am--include-marker",
          "445: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alt_bn128_init.Po@am__quote@ # am--include-marker",
          "446: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/curves.Po@am__quote@ # am--include-marker",
          "447: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/domain_parameters.Po@am__quote@ # am--include-marker",
          "449: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/numbertheory.Po@am__quote@ # am--include-marker",
          "450: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/point.Po@am__quote@ # am--include-marker",
          "451: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/secure_enclave.Po@am__quote@ # am--include-marker",
          "",
          "[Removed Lines]",
          "448: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/drive_key_dkg.Po@am__quote@ # am--include-marker",
          "",
          "[Added Lines]",
          "441: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DH_dkg.Po@am__quote@ # am--include-marker",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "660: distclean: distclean-am",
          "661:   -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "662:  -rm -f ./$(DEPDIR)/DKGUtils.Po",
          "663:  -rm -f ./$(DEPDIR)/alt_bn128_g1.Po",
          "664:  -rm -f ./$(DEPDIR)/alt_bn128_g2.Po",
          "665:  -rm -f ./$(DEPDIR)/alt_bn128_init.Po",
          "666:  -rm -f ./$(DEPDIR)/curves.Po",
          "667:  -rm -f ./$(DEPDIR)/domain_parameters.Po",
          "669:  -rm -f ./$(DEPDIR)/numbertheory.Po",
          "670:  -rm -f ./$(DEPDIR)/point.Po",
          "671:  -rm -f ./$(DEPDIR)/secure_enclave.Po",
          "",
          "[Removed Lines]",
          "668:  -rm -f ./$(DEPDIR)/drive_key_dkg.Po",
          "",
          "[Added Lines]",
          "661:  -rm -f ./$(DEPDIR)/DH_dkg.Po",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "720: maintainer-clean: maintainer-clean-am",
          "721:   -rm -f ./$(DEPDIR)/BLSEnclave.Po",
          "722:  -rm -f ./$(DEPDIR)/DKGUtils.Po",
          "723:  -rm -f ./$(DEPDIR)/alt_bn128_g1.Po",
          "724:  -rm -f ./$(DEPDIR)/alt_bn128_g2.Po",
          "725:  -rm -f ./$(DEPDIR)/alt_bn128_init.Po",
          "726:  -rm -f ./$(DEPDIR)/curves.Po",
          "727:  -rm -f ./$(DEPDIR)/domain_parameters.Po",
          "729:  -rm -f ./$(DEPDIR)/numbertheory.Po",
          "730:  -rm -f ./$(DEPDIR)/point.Po",
          "731:  -rm -f ./$(DEPDIR)/secure_enclave.Po",
          "",
          "[Removed Lines]",
          "728:  -rm -f ./$(DEPDIR)/drive_key_dkg.Po",
          "",
          "[Added Lines]",
          "721:  -rm -f ./$(DEPDIR)/DH_dkg.Po",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"secure_enclave_t.h\"",
          "43: #include \"sgx_tcrypto.h\"",
          "44: #include \"sgx_tseal.h\"",
          "",
          "[Removed Lines]",
          "35: #include <openssl/ec.h>",
          "36: #include <openssl/bn.h>",
          "37: #include <openssl/evp.h>",
          "38: #include <openssl/err.h>",
          "39: #include <openssl/rand.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: #include \"point.h\"",
          "55: #include \"signature.h\"",
          "56: #include \"curves.h\"",
          "60: #include <sgx_tcrypto.h>",
          "62: #include \"../sgxwallet_common.h\"",
          "64: void *(*gmp_realloc_func)(void *, size_t, size_t);",
          "66: void *(*oc_realloc_func)(void *, size_t, size_t);",
          "",
          "[Removed Lines]",
          "57: #include \"drive_key_dkg.h\"",
          "58: #include <string.h>",
          "",
          "[Added Lines]",
          "50: #include \"DH_dkg.h\"",
          "56: uint8_t Decrypted_dkg_poly[DKG_BUFER_LENGTH] ;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "558: }",
          "590:   sgx_status_t status = sgx_unseal_data(",
          "592:   if (status != SGX_SUCCESS) {",
          "593:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "594:     return;",
          "595:   }",
          "599:   gen_session_key(skey, pub_keyB, common_key);",
          "",
          "[Removed Lines]",
          "560: void drive_key(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t* dec_len, char* result_str, char* pub_keyB ){",
          "563:   char* pub_key = (char*)malloc(1024);",
          "565:   mpz_t skey;",
          "566:   mpz_init(skey);",
          "568:   gen_session_keys(skey, pub_key);",
          "569:   char arr_sk[mpz_sizeinbase (skey, 16) + 2];",
          "570:   char* sk = mpz_get_str(arr_sk, 16, skey);",
          "571:   snprintf(err_string, BUF_LEN,\"skey is %s length %d\", arr_sk, strlen(arr_sk));",
          "573:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "574:   sgx_status_t status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t*)arr_sk, sealedLen,(sgx_sealed_data_t*)encrypted_skey);",
          "576:   if(  status !=  SGX_SUCCESS) {",
          "577:     snprintf(err_string, BUF_LEN,\"SGX seal data failed\");",
          "581:   char* r = mpz_get_str(arr_r, base, sign->r);",
          "582:   strncpy(sig_r, arr_r, 1024);",
          "584:   char arr_s[mpz_sizeinbase (sign->s, base) + 2];",
          "585:   char* s = mpz_get_str(arr_s, base, sign->s);",
          "588:   char skey[ECDSA_SKEY_LEN];",
          "591:       (const sgx_sealed_data_t *)encrypted_skey, NULL, 0, skey, dec_len);",
          "597:   char * common_key = malloc(64*2);",
          "601:   mpz_clear(skey);",
          "605: }",
          "",
          "[Added Lines]",
          "554: void set_encrypted_dkg_poly(int *err_status, char *err_string, uint8_t* encrypted_poly){",
          "556:   uint32_t decr_len;",
          "557:   sgx_status_t status = sgx_unseal_data(",
          "558:       (const sgx_sealed_data_t *)encrypted_poly, NULL, 0, Decrypted_dkg_poly, &decr_len);",
          "560:   if (status != SGX_SUCCESS) {",
          "561:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "562:     return;",
          "563:   }",
          "565: }",
          "567: void get_encr_sshare(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t* dec_len,",
          "568:     char* result_str, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "570:   char skey[ECDSA_SKEY_LEN];",
          "571:   char *pub_key_x = (char *)calloc(1024, 1);",
          "572:   char *pub_key_y = (char *)calloc(1024, 1);",
          "574:   uint32_t enc_len;",
          "576:   generate_ecdsa_key(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "577:   snprintf(err_string, BUF_LEN,\"pub_key_x is %s\", pub_key_x);",
          "580:       (const sgx_sealed_data_t *)encrypted_skey, NULL, 0, (uint8_t *)skey, &enc_len);",
          "587:   char * common_key = (char *)malloc(65);",
          "591:   char* s_share = (char *)malloc(65);",
          "594:   calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind);",
          "597:   char* cypher = (char *)malloc(65);",
          "598:   xor_encrypt(common_key, s_share, cypher);",
          "601:   strncpy(result_str, cypher, strlen(cypher));",
          "602:   strncpy(result_str + strlen(cypher), pub_key_x, strlen(pub_key_x));",
          "603:   strncpy(result_str + strlen(pub_key_x) + strlen(pub_key_y), pub_key_y, strlen(pub_key_y));",
          "608:   free(common_key);",
          "609:   free(pub_key_x);",
          "610:   free(pub_key_y);",
          "611:   free(s_share);",
          "612:   free(cypher);",
          "613: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:                                  [user_check] uint8_t* sig_v,",
          "104:                                  int base);",
          "107:                                 [user_check]int *err_status,",
          "108:                                 [out, count = 1024] char *err_string,",
          "109:                                 [out, count = 1024] uint8_t *encrypted_skey,",
          "113:  };",
          "",
          "[Removed Lines]",
          "106:          public void drive_key(",
          "110:                                 [user_check]uint32_t* enc_len,",
          "111:                                 [out, count = 1024] char* result_str,",
          "112:                                 [out, count = 1024] char* pub_keyB );",
          "",
          "[Added Lines]",
          "106:          public void set_encrypted_dkg_poly( [user_check] int *err_status,",
          "107:                                              [out, count = 1024] char* err_string,",
          "108:                                              [in, count = 3050] uint8_t* encrypted_poly);",
          "110:          public void get_encr_sshare(",
          "114:                                 [user_check] uint32_t* dec_len,",
          "115:                                 [out, count = 193] char* result_str,",
          "116:                                 [in, count = 129] char* pub_keyB,",
          "117:                                 uint8_t _t,",
          "118:                                 uint8_t _n,",
          "119:                                 uint8_t ind);",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define ECDSA_SKEY_LEN 65",
          "33: #define ECDSA_SKEY_BASE 16",
          "34: #define ECDSA_ENCR_LEN 625",
          "36: #define UNKNOWN_ERROR -1",
          "37: #define PLAINTEXT_KEY_TOO_LONG -2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #define ECDSA_BIN_LEN 33",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:             else",
          "107:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "108:         }",
          "109: };",
          "111: #endif //JSONRPC_CPP_STUB_STUBCLIENT_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:         Json::Value getSecretShare(const std::string& polyName, const std::string& publicKeys, int n, int t) throw (jsonrpc::JsonRpcException)",
          "110:         {",
          "111:             Json::Value p;",
          "112:             p[\"polyName\"] = polyName;",
          "113:             p[\"publicKeys\"] = publicKeys;",
          "114:             p[\"n\"] = n;",
          "115:             p[\"t\"] = t;",
          "116:             Json::Value result = this->CallMethod(\"getSecretShare\",p);",
          "117:             if (result.isObject())",
          "118:                 return result;",
          "119:             else",
          "120:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "121:         }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "493:   sgx_destroy_enclave(eid);",
          "494: }",
          "499:   init_enclave();",
          "500:   uint8_t *encrypted_key = (uint8_t *) calloc(BUF_LEN, 1);",
          "502:   char *errMsg = (char *)calloc(1024, 1);",
          "505:   int err_status = 0;",
          "506:   uint32_t enc_len = 0;",
          "513:   REQUIRE(status == SGX_SUCCESS);",
          "515: }",
          "",
          "[Removed Lines]",
          "496: TEST_CASE( \"DKG drive key test\", \"[dkg-drive-key]\" ) {",
          "503:   char *result = (char *)calloc(1024, 1);",
          "504:   char *pub_key = (char *)calloc(1024, 1);",
          "508:   unsigned t = 3, n = 4;",
          "510:   status = drive_key(eid, &err_status, errMsg, encrypted_key, &enc_len, result,",
          "511:                      pub_key);",
          "514:   printf(\" drive_key completed with status: %d %s \\n\", err_status, errMsg);",
          "",
          "[Added Lines]",
          "496: TEST_CASE( \"DKG encrypted secret shares test\", \"[dkg-encr_sshares]\" ) {",
          "503:   char *result = (char *)calloc(130, 1);",
          "509:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "512:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "513:   REQUIRE(status == SGX_SUCCESS);",
          "514:   std::cerr << \" poly generated\" << std::endl;",
          "516:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "517:   REQUIRE(status == SGX_SUCCESS);",
          "518:   std::cerr << \" poly set\" << std::endl;",
          "520:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "521:   char *pub_key_x = (char *)calloc(1024, 1);",
          "522:   char *pub_key_y = (char *)calloc(1024, 1);",
          "524:   char *pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "526:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result,",
          "527:                      pub_keyB, 2, 2, 1);",
          "529:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "531:   std::cerr << \"secret share is \" << result << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "658:     } catch (JsonRpcException &e) {",
          "659:         cerr << e.what() << endl;",
          "660:     }",
          "",
          "[Removed Lines]",
          "657:         cout << c.getVerificationVector(\"polyy\", 5,  5);",
          "",
          "[Added Lines]",
          "678:         cout << c.getSecretShare(\"p2\",",
          "679:               \"669aa790e1c5f5199af82ab0b6f1965c382d23a2ebdda581454adba3fd082a30edab62b545f78f1e402ceef7340a0364a7046633d6151fe7e657d8b8a6352378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25e6e\",",
          "680:               2,2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0ddaf5095800d395b8ce5e99c939c166c8d0d41",
      "candidate_info": {
        "commit_hash": "e0ddaf5095800d395b8ce5e99c939c166c8d0d41",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/e0ddaf5095800d395b8ce5e99c939c166c8d0d41",
        "files": [
          "DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:         throw SGXException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "167:     }",
          "171:     if (status != SGX_SUCCESS || errStatus != 0) {",
          "172:         throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "169:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), &encLen);",
          "",
          "[Added Lines]",
          "169:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1563: void",
          "1564: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "1565:                            uint8_t *decrypted_dkg_secret,",
          "1566:                            uint32_t *dec_len) {",
          "",
          "[Added Lines]",
          "1565:                            uint32_t enc_len,",
          "1566:                            uint8_t *decrypted_dkg_secret) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1573:     CHECK_STATE(encrypted_dkg_secret);",
          "1574:     CHECK_STATE(decrypted_dkg_secret);",
          "1577:                              3072);",
          "1579:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1576:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *) decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "1576:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, (char *) decrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1587: }",
          "1591:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "1590: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "",
          "[Added Lines]",
          "1590: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1596:     CHECK_STATE(encrypted_poly);",
          "1598:     memset(getThreadLocalDecryptedDkgPoly(), 0, DKG_BUFER_LENGTH);",
          "1600:                              DKG_BUFER_LENGTH);",
          "1602:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1599:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *) getThreadLocalDecryptedDkgPoly(),",
          "",
          "[Added Lines]",
          "1599:     int status = AES_decrypt(encrypted_poly, enc_len, (char *) getThreadLocalDecryptedDkgPoly(),",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:                                 [out] int *errStatus,",
          "218:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "219:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "223:         public void trustedSetEncryptedDkgPolyAES(",
          "224:                                 [out] int *errStatus,",
          "225:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "229:         public void trustedGetEncryptedSecretShareAES(",
          "230:                                 [out]int *errStatus,",
          "",
          "[Removed Lines]",
          "220:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret,",
          "221:                                 [user_check] uint32_t* dec_len);",
          "227:                                 [user_check] uint64_t* enc_len);",
          "",
          "[Added Lines]",
          "220:                                 uint32_t enc_len,",
          "221:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
          "222:                                 );",
          "228:                                 uint32_t enc_len);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     vector<char> secret(BUF_LEN, 0);",
          "437:     REQUIRE(status == SGX_SUCCESS);",
          "438:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "435:     status = trustedDecryptDkgSecretAES(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(),",
          "436:                                         (uint8_t *) secret.data(), &encLen);",
          "",
          "[Added Lines]",
          "435:     status = trustedDecryptDkgSecretAES(eid, &errStatus, errMsg1.data(), encryptedDKGSecret.data(), encLen,",
          "436:                                         (uint8_t *) secret.data());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "492:     uint64_t enc_len = encLen;",
          "495:     REQUIRE(status == SGX_SUCCESS);",
          "496:     REQUIRE(errStatus == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "494:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &enc_len);",
          "",
          "[Added Lines]",
          "494:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), enc_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e37be46c06f1a55344e15f53802747b5c5fa3a68",
      "candidate_info": {
        "commit_hash": "e37be46c06f1a55344e15f53802747b5c5fa3a68",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/e37be46c06f1a55344e15f53802747b5c5fa3a68",
        "files": [
          "secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp": [
          "File: secure_enclave/EnclaveCommon.cpp -> secure_enclave/EnclaveCommon.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: int inited = 0;",
          "138: void enclave_init() {",
          "139:     if (inited == 1)",
          "140:         return;",
          "141:     inited = 1;",
          "142:     libff::init_alt_bn128_params();",
          "143: }",
          "145: bool enclave_sign(const char *_keyString, const char *_hashXString, const char *_hashYString,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: domain_parameters curve;",
          "146:     curve = domain_parameters_init();",
          "147:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "---------------"
        ],
        "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h": [
          "File: secure_enclave/EnclaveCommon.h -> secure_enclave/EnclaveCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     @date 2019",
          "24: #ifndef SGXWALLET_ENCLAVECOMMON_H",
          "25: #define SGXWALLET_ENCLAVECOMMON_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"DomainParameters.h\"",
          "26: #include \"Signature.h\"",
          "27: #include \"Curves.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: extern unsigned char* globalRandom;",
          "63: #endif //SGXWALLET_ENCLAVECOMMON_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: extern domain_parameters curve;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     CHECK_STATE(encryptedPrivateKey);",
          "197:     SAFE_CHAR_BUF(rand_char, 32);",
          "",
          "[Removed Lines]",
          "192:     CHECK_STATE(pub_key_x); CHECK_STATE(pub_key_y);",
          "194:     domain_parameters curve = domain_parameters_init();",
          "195:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Added Lines]",
          "188:     CHECK_STATE(pub_key_x);",
          "189:     CHECK_STATE(pub_key_y);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "218:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "219:     int n_zeroes = 64 - strlen(arr_x);",
          "",
          "[Removed Lines]",
          "216:     SAFE_CHAR_BUF(arr_x,len);",
          "",
          "[Added Lines]",
          "211:     SAFE_CHAR_BUF(arr_x, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "227:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "228:     n_zeroes = 64 - strlen(arr_y);",
          "229:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "226:     SAFE_CHAR_BUF(arr_y,mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2);",
          "",
          "[Added Lines]",
          "221:     SAFE_CHAR_BUF(arr_y, mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "255:     mpz_clear(seed);",
          "256:     mpz_clear(skey);",
          "258:     point_clear(Pkey);",
          "259: }",
          "",
          "[Removed Lines]",
          "257:     domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "272:     domain_parameters curve = domain_parameters_init();",
          "273:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "281:         snprintf(errString, BUF_LEN, \"sgx_unseal_data failed with status %d\", status);",
          "286:         return;",
          "287:     }",
          "",
          "[Removed Lines]",
          "284:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "295:         mpz_clear(privateKeyMpz);",
          "298:         return;",
          "299:     }",
          "",
          "[Removed Lines]",
          "296:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "313:         mpz_clear(privateKeyMpz);",
          "315:         point_clear(Pkey);",
          "316:         point_clear(Pkey_test);",
          "",
          "[Removed Lines]",
          "314:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "321:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "325:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "326:     int n_zeroes = 64 - strlen(arr_x);",
          "",
          "[Removed Lines]",
          "323:     SAFE_CHAR_BUF(arr_x,len);",
          "",
          "[Added Lines]",
          "314:     SAFE_CHAR_BUF(arr_x, len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "344:     mpz_clear(privateKeyMpz);",
          "346:     point_clear(Pkey);",
          "347:     point_clear(Pkey_test);",
          "348: }",
          "",
          "[Removed Lines]",
          "345:     domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "366:     signature sign = signature_init();",
          "370:     point publicKey = point_init();",
          "372:     if (strnlen(hash, 64) > 64) {",
          "",
          "[Removed Lines]",
          "368:     domain_parameters curve = domain_parameters_init();",
          "369:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "436:     mpz_clear(privateKeyMpz);",
          "437:     mpz_clear(msgMpz);",
          "439:     point_clear(publicKey);",
          "441:     signature_free(sign);",
          "",
          "[Removed Lines]",
          "438:     domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "550:     CHECK_STATE(_hashY);",
          "551:     CHECK_STATE(signature);",
          "556:     trustedDecryptKey(errStatus, errString, encryptedPrivateKey, enc_len, key);",
          "",
          "[Removed Lines]",
          "553:     SAFE_CHAR_BUF(key, BUF_LEN);",
          "554:     SAFE_CHAR_BUF(sig, BUF_LEN);",
          "",
          "[Added Lines]",
          "540:     SAFE_CHAR_BUF(key, BUF_LEN);SAFE_CHAR_BUF(sig, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "677:     uint32_t decr_len;",
          "678:     trustedDecryptDkgSecret(errStatus, errString, (uint8_t *) encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "675:     SAFE_CHAR_BUF(decrypted_dkg_secret,DKG_MAX_SEALED_LEN);",
          "",
          "[Added Lines]",
          "661:     SAFE_CHAR_BUF(decrypted_dkg_secret, DKG_MAX_SEALED_LEN);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "738:     uint32_t enc_len;",
          "",
          "[Removed Lines]",
          "734:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "735:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);",
          "736:     SAFE_CHAR_BUF(pub_key_y,BUF_LEN);",
          "",
          "[Added Lines]",
          "720:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "753:         return;",
          "754:     }",
          "761:     if (calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind) != 0) {",
          "",
          "[Removed Lines]",
          "756:     SAFE_CHAR_BUF(common_key,ECDSA_SKEY_LEN);",
          "758:     gen_session_key(skey, pub_keyB, common_key);",
          "759:     SAFE_CHAR_BUF(s_share,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "740:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
          "742:     gen_session_key(skey, pub_keyB, common_key);SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "770:         return;",
          "771:     }",
          "775:     xor_encrypt(common_key, s_share, cypher);",
          "",
          "[Removed Lines]",
          "773:     SAFE_CHAR_BUF(cypher,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "756:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "905:         strncpy(encr_sshare, s_shares + 192 * i, 64);",
          "906:         encr_sshare[64] = 0;",
          "910:         strncpy(s_share, s_shares + 192 * i, 192);",
          "911:         s_share[192] = 0;",
          "914:         session_key_recover(skey, s_share, common_key);",
          "915:         common_key[64] = 0;",
          "918:         xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "920:         mpz_t decr_secret_share;",
          "",
          "[Removed Lines]",
          "908:         SAFE_CHAR_BUF(s_share,193);",
          "913:         SAFE_CHAR_BUF(common_key,65);",
          "917:         SAFE_CHAR_BUF(decr_sshare,65);",
          "",
          "[Added Lines]",
          "891:         SAFE_CHAR_BUF(s_share, 193);",
          "896:         SAFE_CHAR_BUF(common_key, 65);",
          "900:         SAFE_CHAR_BUF(decr_sshare, 65);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "983:     uint32_t len = key_len;",
          "",
          "[Removed Lines]",
          "981:     SAFE_CHAR_BUF(skey_hex,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "964:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1101:     CHECK_STATE(encryptedPrivateKey);",
          "1107:     SAFE_CHAR_BUF(rand_char, 32);",
          "1108:     get_global_random(rand_char, 32);",
          "",
          "[Removed Lines]",
          "1102:     CHECK_STATE(pub_key_x); CHECK_STATE(pub_key_y);",
          "1104:     domain_parameters curve = domain_parameters_init();",
          "1105:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Added Lines]",
          "1084:     CHECK_STATE(pub_key_x);",
          "1085:     CHECK_STATE(pub_key_y);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1122:     signature_extract_public_key(Pkey, skey, curve);",
          "1126:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "1127:     int n_zeroes = 64 - strlen(arr_x);",
          "1128:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1124:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;",
          "1125:     SAFE_CHAR_BUF(arr_x, BUF_LEN);",
          "",
          "[Added Lines]",
          "1105:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;SAFE_CHAR_BUF(arr_x, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1139:     }",
          "1140:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "1144:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
          "1145:     n_zeroes = 64 - strlen(arr_skey_str);",
          "1146:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1142:     SAFE_CHAR_BUF(skey_str,ECDSA_SKEY_LEN);",
          "1143:     SAFE_CHAR_BUF(arr_skey_str,mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
          "",
          "[Added Lines]",
          "1122:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1159:         mpz_clear(skey);",
          "1161:         point_clear(Pkey);",
          "1163:         return;",
          "",
          "[Removed Lines]",
          "1160:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1174:         mpz_clear(skey);",
          "1176:         point_clear(Pkey);",
          "1178:         return;",
          "",
          "[Removed Lines]",
          "1175:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1183:     mpz_clear(skey);",
          "1185:     point_clear(Pkey);",
          "1186: }",
          "",
          "[Removed Lines]",
          "1184:     domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1195:     CHECK_STATE(encryptedPrivateKey);",
          "1203:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "1204:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "",
          "[Removed Lines]",
          "1196:     CHECK_STATE(pub_key_x); CHECK_STATE(pub_key_y);",
          "1198:     domain_parameters curve = domain_parameters_init();",
          "1199:     domain_parameters_load_curve(curve, secp256k1);",
          "1201:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1175:     CHECK_STATE(pub_key_x);",
          "1176:     CHECK_STATE(pub_key_y);",
          "1179:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1207:         snprintf(errString, BUF_LEN, \"AES_decrypt failed with status %d\", status);",
          "1212:         return;",
          "1213:     }",
          "",
          "[Removed Lines]",
          "1210:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1223:         mpz_clear(privateKeyMpz);",
          "1226:         return;",
          "1227:     }",
          "",
          "[Removed Lines]",
          "1224:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1241:         mpz_clear(privateKeyMpz);",
          "1243:         point_clear(Pkey);",
          "1244:         point_clear(Pkey_test);",
          "",
          "[Removed Lines]",
          "1242:         domain_parameters_clear(curve);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1259:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "1262:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "1263:     n_zeroes = 64 - strlen(arr_y);",
          "1264:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1261:     SAFE_CHAR_BUF(arr_y,mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2);",
          "",
          "[Added Lines]",
          "1238:     SAFE_CHAR_BUF(arr_y, mpz_sizeinbase(Pkey->y, ECDSA_SKEY_BASE) + 2);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1271:     mpz_clear(privateKeyMpz);",
          "1273:     point_clear(Pkey);",
          "1274:     point_clear(Pkey_test);",
          "1275: }",
          "1277: static uint64_t sigCounter = 0;",
          "1281: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "1272:     domain_parameters_clear(curve);",
          "1278: static domain_parameters ecdsaCurve = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1290:     CHECK_STATE(sigR);",
          "1291:     CHECK_STATE(sigS);",
          "1301:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "1293:     if (!ecdsaCurve) {",
          "1294:         ecdsaCurve = domain_parameters_init();",
          "1295:         domain_parameters_load_curve(ecdsaCurve, secp256k1);",
          "1296:     }",
          "1299:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1269:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1334:     signature sign = signature_init();",
          "1338:     sigCounter++;",
          "",
          "[Removed Lines]",
          "1336:     signature_sign(sign, msgMpz, privateKeyMpz, ecdsaCurve);",
          "",
          "[Added Lines]",
          "1306:     signature_sign(sign, msgMpz, privateKeyMpz, curve);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1342:         point Pkey = point_init();",
          "1348:             snprintf(errString, BUF_LEN, \"signature is not verified! \");",
          "1350:             mpz_clear(privateKeyMpz);",
          "1351:             mpz_clear(msgMpz);",
          "1353:             signature_free(sign);",
          "1354:             point_clear(Pkey);",
          "",
          "[Removed Lines]",
          "1344:         signature_extract_public_key(Pkey, privateKeyMpz, ecdsaCurve);",
          "1346:         if (!signature_verify(msgMpz, sign, Pkey, ecdsaCurve)) {",
          "1352:             domain_parameters_clear(ecdsaCurve);",
          "",
          "[Added Lines]",
          "1314:         signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "1316:         if (!signature_verify(msgMpz, sign, Pkey, curve)) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1359:         point_clear(Pkey);",
          "1360:     }",
          "1363:     mpz_get_str(arrM, 16, msgMpz);",
          "1364:     snprintf(errString, BUF_LEN, \"message is %s \", arrM);",
          "1367:     mpz_get_str(arrR, base, sign->r);",
          "1368:     strncpy(sigR, arrR, 1024);",
          "",
          "[Removed Lines]",
          "1362:     SAFE_CHAR_BUF(arrM,mpz_sizeinbase(msgMpz, 16) + 2);",
          "1366:     SAFE_CHAR_BUF(arrR,mpz_sizeinbase(sign->r, base) + 2);",
          "",
          "[Added Lines]",
          "1332:     SAFE_CHAR_BUF(arrM, mpz_sizeinbase(msgMpz, 16) + 2);",
          "1336:     SAFE_CHAR_BUF(arrR, mpz_sizeinbase(sign->r, base) + 2);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1411:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1408:     SAFE_CHAR_BUF(decryptedKey,BUF_LEN);",
          "",
          "[Added Lines]",
          "1378:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1482:     CHECK_STATE(_hashY);",
          "1483:     CHECK_STATE(signature);",
          "1489:     int stat = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1485:     SAFE_CHAR_BUF(key,BUF_LEN);",
          "1486:     SAFE_CHAR_BUF(sig,BUF_LEN);",
          "",
          "[Added Lines]",
          "1455:     SAFE_CHAR_BUF(key, BUF_LEN);SAFE_CHAR_BUF(sig, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1516:     CHECK_STATE(encrypted_dkg_secret);",
          "1521:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "",
          "[Removed Lines]",
          "1518:     SAFE_CHAR_BUF(dkg_secret,DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "1487:     SAFE_CHAR_BUF(dkg_secret, DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1539:     status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret,",
          "",
          "[Removed Lines]",
          "1536:     SAFE_CHAR_BUF(decr_dkg_secret,DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "1505:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1618:     LOG_DEBUG(__FUNCTION__);",
          "1626:     uint32_t enc_len;",
          "",
          "[Removed Lines]",
          "1620:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "1622:     SAFE_CHAR_BUF(pub_key_x,BUF_LEN);",
          "1623:     SAFE_CHAR_BUF(pub_key_y,BUF_LEN);",
          "",
          "[Added Lines]",
          "1589:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "1591:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1646:     gen_session_key(skey, pub_keyB, common_key);",
          "1650:     if (calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind) != 0) {",
          "",
          "[Removed Lines]",
          "1645:     SAFE_CHAR_BUF(common_key,ECDSA_SKEY_LEN);",
          "1648:     SAFE_CHAR_BUF(s_share,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1613:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
          "1616:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1660:         return;",
          "1661:     }",
          "1664:     xor_encrypt(common_key, s_share, cypher);",
          "1666:     strncpy(result_str, cypher, strlen(cypher));",
          "",
          "[Removed Lines]",
          "1663:     SAFE_CHAR_BUF(cypher,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1631:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1715:     CHECK_STATE(s_share);",
          "1716:     CHECK_STATE(encryptedPrivateKey);",
          "1721:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "1718:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1686:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1726:         return;",
          "1727:     }",
          "1731:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
          "1735:     session_key_recover(skey, s_share, common_key);",
          "1741:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "",
          "[Removed Lines]",
          "1729:     SAFE_CHAR_BUF(encr_sshare,ECDSA_SKEY_LEN);",
          "1733:     SAFE_CHAR_BUF(common_key,ECDSA_SKEY_LEN);",
          "1739:     SAFE_CHAR_BUF(decr_sshare,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1697:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
          "1701:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
          "1706:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1773:     CHECK_STATE(encr_bls_key);",
          "1778:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
          "1779:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1776:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1743:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1789:     mpz_init(sum);",
          "1790:     mpz_set_ui(sum, 0);",
          "1794:         strncpy(encr_sshare, s_shares + 192 * i, 64);",
          "1795:         encr_sshare[64] = 0;",
          "1798:         strncpy(s_share, s_shares + 192 * i, 192);",
          "1799:         s_share[192] = 0;",
          "1802:         session_key_recover(skey, s_share, common_key);",
          "1803:         common_key[64] = 0;",
          "1807:         xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "1809:         decr_sshare[64] = 0;",
          "",
          "[Removed Lines]",
          "1792:     for (int i = 0; i < num_shares; i++) {",
          "1793:         SAFE_CHAR_BUF(encr_sshare,65);",
          "1797:         SAFE_CHAR_BUF(s_share,193);",
          "1801:         SAFE_CHAR_BUF(common_key,65);",
          "1806:         SAFE_CHAR_BUF(decr_sshare,65);",
          "",
          "[Added Lines]",
          "1759:     for (int i = 0; i < num_shares; i++) { SAFE_CHAR_BUF(encr_sshare, 65);",
          "1763:         SAFE_CHAR_BUF(s_share, 193);",
          "1767:         SAFE_CHAR_BUF(common_key, 65);",
          "1772:         SAFE_CHAR_BUF(decr_sshare, 65);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1835:     mpz_mod(bls_key, sum, q);",
          "1839:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(bls_key, 16) + 2);",
          "",
          "[Removed Lines]",
          "1837:     SAFE_CHAR_BUF(key_share,BLS_KEY_LENGTH);",
          "",
          "[Added Lines]",
          "1803:     SAFE_CHAR_BUF(key_share, BLS_KEY_LENGTH);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1878:     CHECK_STATE(bls_pub_key);",
          "1879:     CHECK_STATE(encryptedPrivateKey);",
          "1883:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
          "1884:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1881:     SAFE_CHAR_BUF(skey_hex,ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1847:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
          "",
          "---------------"
        ]
      }
    }
  ]
}