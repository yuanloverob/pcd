{
  "cve_id": "CVE-2022-1587",
  "cve_desc": "An out-of-bounds read vulnerability was discovered in the PCRE2 library in the get_recurse_data_length() function of the pcre2_jit_compile.c file. This issue affects recursions in JIT-compiled regular expressions caused by duplicate data transfers.",
  "repo": "PCRE2Project/pcre2",
  "patch_hash": "03654e751e7f0700693526b67dfcadda6b42c9d0",
  "patch_info": {
    "commit_hash": "03654e751e7f0700693526b67dfcadda6b42c9d0",
    "repo": "PCRE2Project/pcre2",
    "commit_url": "https://github.com/PCRE2Project/pcre2/commit/03654e751e7f0700693526b67dfcadda6b42c9d0",
    "files": [
      "ChangeLog",
      "src/pcre2_jit_compile.c",
      "src/pcre2_jit_test.c"
    ],
    "message": "Fixed an issue affecting recursions in JIT",
    "before_after_code_files": [
      "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c",
      "src/pcre2_jit_test.c||src/pcre2_jit_test.c"
    ]
  },
  "patch_diff": {
    "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c": [
      "File: src/pcre2_jit_compile.c -> src/pcre2_jit_compile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "414:   sljit_s32 early_fail_start_ptr;",
      "415:   sljit_s32 early_fail_end_ptr;",
      "418:   const sljit_u8 *fcc;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "417:   sljit_s32 recurse_bitset_size;",
      "418:   uint8_t *recurse_bitset;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2318: #undef RECURSE_TMP_REG_COUNT",
      "2320: static int get_recurse_data_length(compiler_common *common, PCRE2_SPTR cc, PCRE2_SPTR ccend,",
      "2321:   BOOL *needs_control_head, BOOL *has_quit, BOOL *has_accept)",
      "2322: {",
      "2323: int length = 1;",
      "2325: PCRE2_SPTR alternative;",
      "2326: BOOL quit_found = FALSE;",
      "2327: BOOL accept_found = FALSE;",
      "2328: BOOL setsom_found = FALSE;",
      "2329: BOOL setmark_found = FALSE;",
      "2331: BOOL control_head_found = FALSE;",
      "2333: #if defined DEBUG_FORCE_CONTROL_HEAD && DEBUG_FORCE_CONTROL_HEAD",
      "2334: SLJIT_ASSERT(common->control_head_ptr != 0);",
      "2335: control_head_found = TRUE;",
      "",
      "[Removed Lines]",
      "2324: int size;",
      "2330: BOOL capture_last_found = FALSE;",
      "",
      "[Added Lines]",
      "2323: static BOOL recurse_check_bit(compiler_common *common, sljit_sw bit_index)",
      "2324: {",
      "2325: uint8_t *byte;",
      "2326: uint8_t mask;",
      "2328: SLJIT_ASSERT((bit_index & (sizeof(sljit_sw) - 1)) == 0);",
      "2330: bit_index >>= SLJIT_WORD_SHIFT;",
      "2332: mask = 1 << (bit_index & 0x7);",
      "2333: byte = common->recurse_bitset + (bit_index >> 3);",
      "2335: if (*byte & mask)",
      "2336:   return FALSE;",
      "2339: return TRUE;",
      "2340: }",
      "2346: int size, offset;",
      "2354: memset(common->recurse_bitset, 0, common->recurse_bitset_size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2352:       setsom_found = TRUE;",
      "2353:     if (common->mark_ptr != 0)",
      "2354:       setmark_found = TRUE;",
      "2357:     cc += 1 + LINK_SIZE;",
      "2358:     break;",
      "2360:     case OP_KET:",
      "2362:       {",
      "2364:       SLJIT_ASSERT(PRIVATE_DATA(cc + 1) != 0);",
      "2365:       cc += PRIVATE_DATA(cc + 1);",
      "2366:       }",
      "",
      "[Removed Lines]",
      "2355:     if (common->capture_last_ptr != 0)",
      "2356:       capture_last_found = TRUE;",
      "2361:     if (PRIVATE_DATA(cc) != 0)",
      "2363:       length++;",
      "",
      "[Added Lines]",
      "2378:     if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))",
      "2379:       length++;",
      "2384:     offset = PRIVATE_DATA(cc);",
      "2385:     if (offset != 0)",
      "2387:       if (recurse_check_bit(common, offset))",
      "2388:         length++;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2379:     case OP_SBRA:",
      "2380:     case OP_SBRAPOS:",
      "2381:     case OP_SCOND:",
      "2383:     SLJIT_ASSERT(PRIVATE_DATA(cc) != 0);",
      "2384:     cc += 1 + LINK_SIZE;",
      "2385:     break;",
      "2387:     case OP_CBRA:",
      "2388:     case OP_SCBRA:",
      "2393:       length++;",
      "2394:     cc += 1 + LINK_SIZE + IMM2_SIZE;",
      "2395:     break;",
      "2397:     case OP_CBRAPOS:",
      "2398:     case OP_SCBRAPOS:",
      "2402:     cc += 1 + LINK_SIZE + IMM2_SIZE;",
      "2403:     break;",
      "2405:     case OP_COND:",
      "2407:     alternative = cc + GET(cc, 1);",
      "2409:       length++;",
      "2410:     cc += 1 + LINK_SIZE;",
      "2411:     break;",
      "2413:     CASE_ITERATOR_PRIVATE_DATA_1",
      "2415:       length++;",
      "2416:     cc += 2;",
      "2417: #ifdef SUPPORT_UNICODE",
      "",
      "[Removed Lines]",
      "2382:     length++;",
      "2389:     length += 2;",
      "2390:     if (common->capture_last_ptr != 0)",
      "2391:       capture_last_found = TRUE;",
      "2392:     if (common->optimized_cbracket[GET2(cc, 1 + LINK_SIZE)] == 0)",
      "2399:     length += 2 + 2;",
      "2400:     if (common->capture_last_ptr != 0)",
      "2401:       capture_last_found = TRUE;",
      "2408:     if (*alternative == OP_KETRMAX || *alternative == OP_KETRMIN)",
      "2414:     if (PRIVATE_DATA(cc) != 0)",
      "",
      "[Added Lines]",
      "2408:     if (recurse_check_bit(common, PRIVATE_DATA(cc)))",
      "2409:       length++;",
      "2415:     offset = GET2(cc, 1 + LINK_SIZE);",
      "2416:     if (recurse_check_bit(common, OVECTOR(offset << 1)))",
      "2417:       {",
      "2418:       SLJIT_ASSERT(recurse_check_bit(common, OVECTOR((offset << 1) + 1)));",
      "2419:       length += 2;",
      "2420:       }",
      "2421:     if (common->optimized_cbracket[offset] == 0 && recurse_check_bit(common, OVECTOR_PRIV(offset)))",
      "2422:       length++;",
      "2423:     if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))",
      "2430:     offset = GET2(cc, 1 + LINK_SIZE);",
      "2431:     if (recurse_check_bit(common, OVECTOR(offset << 1)))",
      "2432:       {",
      "2433:       SLJIT_ASSERT(recurse_check_bit(common, OVECTOR((offset << 1) + 1)));",
      "2434:       length += 2;",
      "2435:       }",
      "2436:     if (recurse_check_bit(common, OVECTOR_PRIV(offset)))",
      "2437:       length++;",
      "2438:     if (recurse_check_bit(common, PRIVATE_DATA(cc)))",
      "2439:       length++;",
      "2440:     if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))",
      "2441:       length++;",
      "2448:     if ((*alternative == OP_KETRMAX || *alternative == OP_KETRMIN) && recurse_check_bit(common, PRIVATE_DATA(cc)))",
      "2454:     offset = PRIVATE_DATA(cc);",
      "2455:     if (offset != 0 && recurse_check_bit(common, offset))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2420:     break;",
      "2422:     CASE_ITERATOR_PRIVATE_DATA_2A",
      "2424:       length += 2;",
      "2425:     cc += 2;",
      "2426: #ifdef SUPPORT_UNICODE",
      "2427:     if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);",
      "",
      "[Removed Lines]",
      "2423:     if (PRIVATE_DATA(cc) != 0)",
      "",
      "[Added Lines]",
      "2464:     offset = PRIVATE_DATA(cc);",
      "2465:     if (offset != 0 && recurse_check_bit(common, offset))",
      "2466:       {",
      "2467:       SLJIT_ASSERT(recurse_check_bit(common, offset + sizeof(sljit_sw)));",
      "2469:       }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2429:     break;",
      "2431:     CASE_ITERATOR_PRIVATE_DATA_2B",
      "2433:       length += 2;",
      "2434:     cc += 2 + IMM2_SIZE;",
      "2435: #ifdef SUPPORT_UNICODE",
      "2436:     if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);",
      "",
      "[Removed Lines]",
      "2432:     if (PRIVATE_DATA(cc) != 0)",
      "",
      "[Added Lines]",
      "2477:     offset = PRIVATE_DATA(cc);",
      "2478:     if (offset != 0 && recurse_check_bit(common, offset))",
      "2479:       {",
      "2480:       SLJIT_ASSERT(recurse_check_bit(common, offset + sizeof(sljit_sw)));",
      "2482:       }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2438:     break;",
      "2440:     CASE_ITERATOR_TYPE_PRIVATE_DATA_1",
      "2442:       length++;",
      "2443:     cc += 1;",
      "2444:     break;",
      "2446:     CASE_ITERATOR_TYPE_PRIVATE_DATA_2A",
      "2448:       length += 2;",
      "2449:     cc += 1;",
      "2450:     break;",
      "2452:     CASE_ITERATOR_TYPE_PRIVATE_DATA_2B",
      "2454:       length += 2;",
      "2455:     cc += 1 + IMM2_SIZE;",
      "2456:     break;",
      "",
      "[Removed Lines]",
      "2441:     if (PRIVATE_DATA(cc) != 0)",
      "2447:     if (PRIVATE_DATA(cc) != 0)",
      "2453:     if (PRIVATE_DATA(cc) != 0)",
      "",
      "[Added Lines]",
      "2490:     offset = PRIVATE_DATA(cc);",
      "2491:     if (offset != 0 && recurse_check_bit(common, offset))",
      "2497:     offset = PRIVATE_DATA(cc);",
      "2498:     if (offset != 0 && recurse_check_bit(common, offset))",
      "2499:       {",
      "2500:       SLJIT_ASSERT(recurse_check_bit(common, offset + sizeof(sljit_sw)));",
      "2502:       }",
      "2507:     offset = PRIVATE_DATA(cc);",
      "2508:     if (offset != 0 && recurse_check_bit(common, offset))",
      "2509:       {",
      "2510:       SLJIT_ASSERT(recurse_check_bit(common, offset + sizeof(sljit_sw)));",
      "2512:       }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2463: #else",
      "2464:     size = 1 + 32 / (int)sizeof(PCRE2_UCHAR);",
      "2465: #endif",
      "2467:       length += get_class_iterator_size(cc + size);",
      "2468:     cc += size;",
      "2469:     break;",
      "",
      "[Removed Lines]",
      "2466:     if (PRIVATE_DATA(cc) != 0)",
      "",
      "[Added Lines]",
      "2525:     offset = PRIVATE_DATA(cc);",
      "2526:     if (offset != 0 && recurse_check_bit(common, offset))",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2498:     case OP_THEN:",
      "2499:     SLJIT_ASSERT(common->control_head_ptr != 0);",
      "2500:     quit_found = TRUE;",
      "2503:     cc++;",
      "2504:     break;",
      "",
      "[Removed Lines]",
      "2501:     if (!control_head_found)",
      "2502:       control_head_found = TRUE;",
      "",
      "[Added Lines]",
      "2561:     control_head_found = TRUE;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2520: if (control_head_found)",
      "2521:   length++;",
      "2524: if (quit_found)",
      "2525:   {",
      "2526:   if (setsom_found)",
      "",
      "[Removed Lines]",
      "2522: if (capture_last_found)",
      "2523:   length++;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2553: sljit_sw kept_shared_srcw[2];",
      "2554: int private_count, shared_count, kept_shared_count;",
      "2555: int from_sp, base_reg, offset, i;",
      "2561: #if defined DEBUG_FORCE_CONTROL_HEAD && DEBUG_FORCE_CONTROL_HEAD",
      "2562: SLJIT_ASSERT(common->control_head_ptr != 0);",
      "2564: #endif",
      "2566: switch (type)",
      "",
      "[Removed Lines]",
      "2556: BOOL setsom_found = FALSE;",
      "2557: BOOL setmark_found = FALSE;",
      "2558: BOOL capture_last_found = FALSE;",
      "2559: BOOL control_head_found = FALSE;",
      "2563: control_head_found = TRUE;",
      "",
      "[Added Lines]",
      "2614: memset(common->recurse_bitset, 0, common->recurse_bitset_size);",
      "2618: recurse_check_bit(common, common->control_head_ptr);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2648:     {",
      "2649:     case OP_SET_SOM:",
      "2650:     SLJIT_ASSERT(common->has_set_som);",
      "2652:       {",
      "2653:       kept_shared_srcw[0] = OVECTOR(0);",
      "2654:       kept_shared_count = 1;",
      "2656:       }",
      "2657:     cc += 1;",
      "2658:     break;",
      "",
      "[Removed Lines]",
      "2651:     if (has_quit && !setsom_found)",
      "2655:       setsom_found = TRUE;",
      "",
      "[Added Lines]",
      "2706:     if (has_quit && recurse_check_bit(common, OVECTOR(0)))",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2660:     case OP_RECURSE:",
      "2661:     if (has_quit)",
      "2662:       {",
      "2664:         {",
      "2665:         kept_shared_srcw[0] = OVECTOR(0);",
      "2666:         kept_shared_count = 1;",
      "2668:         }",
      "2670:         {",
      "2671:         kept_shared_srcw[kept_shared_count] = common->mark_ptr;",
      "2672:         kept_shared_count++;",
      "2674:         }",
      "2675:       }",
      "2677:       {",
      "2678:       shared_srcw[0] = common->capture_last_ptr;",
      "2679:       shared_count = 1;",
      "2681:       }",
      "2682:     cc += 1 + LINK_SIZE;",
      "2683:     break;",
      "2685:     case OP_KET:",
      "2687:       {",
      "2690:       SLJIT_ASSERT(PRIVATE_DATA(cc + 1) != 0);",
      "2691:       cc += PRIVATE_DATA(cc + 1);",
      "2692:       }",
      "",
      "[Removed Lines]",
      "2663:       if (common->has_set_som && !setsom_found)",
      "2667:         setsom_found = TRUE;",
      "2669:       if (common->mark_ptr != 0 && !setmark_found)",
      "2673:         setmark_found = TRUE;",
      "2676:     if (common->capture_last_ptr != 0 && !capture_last_found)",
      "2680:       capture_last_found = TRUE;",
      "2686:     if (PRIVATE_DATA(cc) != 0)",
      "2688:       private_count = 1;",
      "2689:       private_srcw[0] = PRIVATE_DATA(cc);",
      "",
      "[Added Lines]",
      "2717:       if (common->has_set_som && recurse_check_bit(common, OVECTOR(0)))",
      "2722:       if (common->mark_ptr != 0 && recurse_check_bit(common, common->mark_ptr))",
      "2728:     if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))",
      "2737:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2738:     if (private_srcw[0] != 0)",
      "2740:       if (recurse_check_bit(common, private_srcw[0]))",
      "2741:         private_count = 1;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2705:     case OP_SBRA:",
      "2706:     case OP_SBRAPOS:",
      "2707:     case OP_SCOND:",
      "2709:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2710:     cc += 1 + LINK_SIZE;",
      "2711:     break;",
      "2713:     case OP_CBRA:",
      "2714:     case OP_SCBRA:",
      "2721:       {",
      "2725:       }",
      "2728:       {",
      "2731:       }",
      "2732:     cc += 1 + LINK_SIZE + IMM2_SIZE;",
      "2733:     break;",
      "2735:     case OP_CBRAPOS:",
      "2736:     case OP_SCBRAPOS:",
      "2743:       {",
      "2747:       }",
      "2750:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2752:     cc += 1 + LINK_SIZE + IMM2_SIZE;",
      "2753:     break;",
      "",
      "[Removed Lines]",
      "2708:     private_count = 1;",
      "2715:     offset = (GET2(cc, 1 + LINK_SIZE)) << 1;",
      "2716:     shared_srcw[0] = OVECTOR(offset);",
      "2717:     shared_srcw[1] = OVECTOR(offset + 1);",
      "2718:     shared_count = 2;",
      "2720:     if (common->capture_last_ptr != 0 && !capture_last_found)",
      "2722:       shared_srcw[2] = common->capture_last_ptr;",
      "2723:       shared_count = 3;",
      "2724:       capture_last_found = TRUE;",
      "2727:     if (common->optimized_cbracket[GET2(cc, 1 + LINK_SIZE)] == 0)",
      "2729:       private_count = 1;",
      "2730:       private_srcw[0] = OVECTOR_PRIV(GET2(cc, 1 + LINK_SIZE));",
      "2737:     offset = (GET2(cc, 1 + LINK_SIZE)) << 1;",
      "2738:     shared_srcw[0] = OVECTOR(offset);",
      "2739:     shared_srcw[1] = OVECTOR(offset + 1);",
      "2740:     shared_count = 2;",
      "2742:     if (common->capture_last_ptr != 0 && !capture_last_found)",
      "2744:       shared_srcw[2] = common->capture_last_ptr;",
      "2745:       shared_count = 3;",
      "2746:       capture_last_found = TRUE;",
      "2749:     private_count = 2;",
      "2751:     private_srcw[1] = OVECTOR_PRIV(GET2(cc, 1 + LINK_SIZE));",
      "",
      "[Added Lines]",
      "2761:     if (recurse_check_bit(common, private_srcw[0]))",
      "2762:       private_count = 1;",
      "2768:     offset = GET2(cc, 1 + LINK_SIZE);",
      "2769:     shared_srcw[0] = OVECTOR(offset << 1);",
      "2770:     if (recurse_check_bit(common, shared_srcw[0]))",
      "2771:       {",
      "2772:       shared_srcw[1] = shared_srcw[0] + sizeof(sljit_sw);",
      "2773:       SLJIT_ASSERT(recurse_check_bit(common, shared_srcw[1]));",
      "2774:       shared_count = 2;",
      "2775:       }",
      "2777:     if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))",
      "2779:       shared_srcw[shared_count] = common->capture_last_ptr;",
      "2780:       shared_count++;",
      "2783:     if (common->optimized_cbracket[offset] == 0)",
      "2785:       private_srcw[0] = OVECTOR_PRIV(offset);",
      "2786:       if (recurse_check_bit(common, private_srcw[0]))",
      "2787:         private_count = 1;",
      "2795:     offset = GET2(cc, 1 + LINK_SIZE);",
      "2796:     shared_srcw[0] = OVECTOR(offset << 1);",
      "2797:     if (recurse_check_bit(common, shared_srcw[0]))",
      "2798:       {",
      "2799:       shared_srcw[1] = shared_srcw[0] + sizeof(sljit_sw);",
      "2800:       SLJIT_ASSERT(recurse_check_bit(common, shared_srcw[1]));",
      "2801:       shared_count = 2;",
      "2802:       }",
      "2804:     if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))",
      "2806:       shared_srcw[shared_count] = common->capture_last_ptr;",
      "2807:       shared_count++;",
      "2811:     if (recurse_check_bit(common, private_srcw[0]))",
      "2812:       private_count = 1;",
      "2814:     offset = OVECTOR_PRIV(offset);",
      "2815:     if (recurse_check_bit(common, offset))",
      "2816:       {",
      "2817:       private_srcw[private_count] = offset;",
      "2818:       private_count++;",
      "2819:       }",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2757:     alternative = cc + GET(cc, 1);",
      "2758:     if (*alternative == OP_KETRMAX || *alternative == OP_KETRMIN)",
      "2759:       {",
      "2761:       private_srcw[0] = PRIVATE_DATA(cc);",
      "2762:       }",
      "2763:     cc += 1 + LINK_SIZE;",
      "2764:     break;",
      "2766:     CASE_ITERATOR_PRIVATE_DATA_1",
      "2769:       private_count = 1;",
      "2772:     cc += 2;",
      "2773: #ifdef SUPPORT_UNICODE",
      "2774:     if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);",
      "",
      "[Removed Lines]",
      "2760:       private_count = 1;",
      "2767:     if (PRIVATE_DATA(cc))",
      "2768:       {",
      "2770:       private_srcw[0] = PRIVATE_DATA(cc);",
      "2771:       }",
      "",
      "[Added Lines]",
      "2829:       if (recurse_check_bit(common, private_srcw[0]))",
      "2830:         private_count = 1;",
      "2836:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2837:     if (private_srcw[0] != 0 && recurse_check_bit(common, private_srcw[0]))",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2776:     break;",
      "2778:     CASE_ITERATOR_PRIVATE_DATA_2A",
      "2780:       {",
      "2781:       private_count = 2;",
      "2784:       }",
      "2785:     cc += 2;",
      "2786: #ifdef SUPPORT_UNICODE",
      "",
      "[Removed Lines]",
      "2779:     if (PRIVATE_DATA(cc))",
      "2782:       private_srcw[0] = PRIVATE_DATA(cc);",
      "2783:       private_srcw[1] = PRIVATE_DATA(cc) + sizeof(sljit_sw);",
      "",
      "[Added Lines]",
      "2846:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2847:     if (private_srcw[0] != 0 && recurse_check_bit(common, private_srcw[0]))",
      "2850:       private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);",
      "2851:       SLJIT_ASSERT(recurse_check_bit(common, private_srcw[1]));",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2789:     break;",
      "2791:     CASE_ITERATOR_PRIVATE_DATA_2B",
      "2793:       {",
      "2794:       private_count = 2;",
      "2797:       }",
      "2798:     cc += 2 + IMM2_SIZE;",
      "2799: #ifdef SUPPORT_UNICODE",
      "",
      "[Removed Lines]",
      "2792:     if (PRIVATE_DATA(cc))",
      "2795:       private_srcw[0] = PRIVATE_DATA(cc);",
      "2796:       private_srcw[1] = PRIVATE_DATA(cc) + sizeof(sljit_sw);",
      "",
      "[Added Lines]",
      "2860:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2861:     if (private_srcw[0] != 0 && recurse_check_bit(common, private_srcw[0]))",
      "2864:       private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);",
      "2865:       SLJIT_ASSERT(recurse_check_bit(common, private_srcw[1]));",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2802:     break;",
      "2804:     CASE_ITERATOR_TYPE_PRIVATE_DATA_1",
      "2807:       private_count = 1;",
      "2810:     cc += 1;",
      "2811:     break;",
      "2813:     CASE_ITERATOR_TYPE_PRIVATE_DATA_2A",
      "2815:       {",
      "2816:       private_count = 2;",
      "2818:       private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);",
      "2819:       }",
      "2820:     cc += 1;",
      "2821:     break;",
      "2823:     CASE_ITERATOR_TYPE_PRIVATE_DATA_2B",
      "2825:       {",
      "2826:       private_count = 2;",
      "2828:       private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);",
      "2829:       }",
      "2830:     cc += 1 + IMM2_SIZE;",
      "2831:     break;",
      "",
      "[Removed Lines]",
      "2805:     if (PRIVATE_DATA(cc))",
      "2806:       {",
      "2808:       private_srcw[0] = PRIVATE_DATA(cc);",
      "2809:       }",
      "2814:     if (PRIVATE_DATA(cc))",
      "2817:       private_srcw[0] = PRIVATE_DATA(cc);",
      "2824:     if (PRIVATE_DATA(cc))",
      "2827:       private_srcw[0] = PRIVATE_DATA(cc);",
      "",
      "[Added Lines]",
      "2874:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2875:     if (private_srcw[0] != 0 && recurse_check_bit(common, private_srcw[0]))",
      "2881:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2882:     if (private_srcw[0] != 0 && recurse_check_bit(common, private_srcw[0]))",
      "2886:       SLJIT_ASSERT(recurse_check_bit(common, private_srcw[1]));",
      "2892:     private_srcw[0] = PRIVATE_DATA(cc);",
      "2893:     if (private_srcw[0] != 0 && recurse_check_bit(common, private_srcw[0]))",
      "2897:       SLJIT_ASSERT(recurse_check_bit(common, private_srcw[1]));",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2842:       switch(get_class_iterator_size(cc + i))",
      "2843:         {",
      "2844:         case 1:",
      "2846:         private_srcw[0] = PRIVATE_DATA(cc);",
      "2847:         break;",
      "2849:         case 2:",
      "2851:         private_srcw[0] = PRIVATE_DATA(cc);",
      "2853:         break;",
      "2855:         default:",
      "",
      "[Removed Lines]",
      "2845:         private_count = 1;",
      "2850:         private_count = 2;",
      "2852:         private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);",
      "",
      "[Added Lines]",
      "2919:         if (recurse_check_bit(common, private_srcw[0]))",
      "2920:           {",
      "2921:           private_count = 2;",
      "2922:           private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);",
      "2923:           SLJIT_ASSERT(recurse_check_bit(common, private_srcw[1]));",
      "2924:           }",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "2864:     case OP_PRUNE_ARG:",
      "2865:     case OP_THEN_ARG:",
      "2866:     SLJIT_ASSERT(common->mark_ptr != 0);",
      "2868:       {",
      "2869:       kept_shared_srcw[0] = common->mark_ptr;",
      "2870:       kept_shared_count = 1;",
      "2872:       }",
      "2874:       {",
      "2875:       private_srcw[0] = common->control_head_ptr;",
      "2876:       private_count = 1;",
      "2878:       }",
      "2879:     cc += 1 + 2 + cc[1];",
      "2880:     break;",
      "2882:     case OP_THEN:",
      "2883:     SLJIT_ASSERT(common->control_head_ptr != 0);",
      "2885:       {",
      "2886:       private_srcw[0] = common->control_head_ptr;",
      "2887:       private_count = 1;",
      "2889:       }",
      "2890:     cc++;",
      "2891:     break;",
      "",
      "[Removed Lines]",
      "2867:     if (has_quit && !setmark_found)",
      "2871:       setmark_found = TRUE;",
      "2873:     if (common->control_head_ptr != 0 && !control_head_found)",
      "2877:       control_head_found = TRUE;",
      "2884:     if (!control_head_found)",
      "2888:       control_head_found = TRUE;",
      "",
      "[Added Lines]",
      "2939:     if (has_quit && recurse_check_bit(common, common->mark_ptr))",
      "2944:     if (common->control_head_ptr != 0 && recurse_check_bit(common, common->control_head_ptr))",
      "2954:     if (recurse_check_bit(common, common->control_head_ptr))",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2893:     default:",
      "2894:     cc = next_opcode(common, cc);",
      "2895:     SLJIT_ASSERT(cc != NULL);",
      "2897:     }",
      "2899:   if (type != recurse_copy_shared_to_global && type != recurse_copy_kept_shared_to_global)",
      "",
      "[Removed Lines]",
      "2896:     break;",
      "",
      "[Added Lines]",
      "2965:     continue;",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "13811: common->cbra_ptr = OVECTOR_START + (re->top_bracket + 1) * 2 * sizeof(sljit_sw);",
      "13813: total_length = ccend - common->start;",
      "13815: if (!common->private_data_ptrs)",
      "13816:   {",
      "13817:   SLJIT_FREE(common->optimized_cbracket, allocator_data);",
      "",
      "[Removed Lines]",
      "13814: common->private_data_ptrs = (sljit_s32 *)SLJIT_MALLOC(total_length * (sizeof(sljit_s32) + (common->has_then ? 1 : 0)), allocator_data);",
      "",
      "[Added Lines]",
      "13883: common->private_data_ptrs = (sljit_s32*)SLJIT_MALLOC(total_length * (sizeof(sljit_s32) + (common->has_then ? 1 : 0)), allocator_data);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "13852: common->compiler = compiler;",
      "13855: sljit_emit_enter(compiler, 0, SLJIT_ARGS1(W, W), 5, 5, 0, 0, private_data_size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13924: SLJIT_ASSERT((private_data_size & (sizeof(sljit_sw) - 1)) == 0);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "14074: common->currententry = common->entries;",
      "14075: common->local_quit_available = TRUE;",
      "14076: quit_label = common->quit_label;",
      "14078:   {",
      "14082:     {",
      "14083:     sljit_free_compiler(compiler);",
      "14084:     SLJIT_FREE(common->optimized_cbracket, allocator_data);",
      "14085:     SLJIT_FREE(common->private_data_ptrs, allocator_data);",
      "14086:     PRIV(jit_free_rodata)(common->read_only_data_head, allocator_data);",
      "14087:     return PCRE2_ERROR_NOMEMORY;",
      "14088:     }",
      "14091:   }",
      "14092: common->local_quit_available = FALSE;",
      "14093: common->quit_label = quit_label;",
      "",
      "[Removed Lines]",
      "14077: while (common->currententry != NULL)",
      "14080:   compile_recurse(common);",
      "14081:   if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))",
      "14089:   flush_stubs(common);",
      "14090:   common->currententry = common->currententry->next;",
      "",
      "[Added Lines]",
      "14147: if (common->currententry != NULL)",
      "14150:   common->recurse_bitset_size = ((private_data_size / (int)sizeof(sljit_sw)) + 7) >> 3;",
      "14151:   SLJIT_ASSERT(common->recurse_bitset_size > 0);",
      "14152:   common->recurse_bitset = (sljit_u8*)SLJIT_MALLOC(common->recurse_bitset_size, allocator_data);;",
      "14154:   if (common->recurse_bitset != NULL)",
      "14155:     {",
      "14156:     do",
      "14157:       {",
      "14159:       compile_recurse(common);",
      "14160:       if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))",
      "14161:         break;",
      "14162:       flush_stubs(common);",
      "14163:       common->currententry = common->currententry->next;",
      "14164:       }",
      "14165:     while (common->currententry != NULL);",
      "14167:     SLJIT_FREE(common->recurse_bitset, allocator_data);",
      "14168:     }",
      "14170:   if (common->currententry != NULL)",
      "14173:     SLJIT_ASSERT(sljit_get_compiler_error(compiler) || common->recurse_bitset == NULL);",
      "",
      "---------------"
    ],
    "src/pcre2_jit_test.c||src/pcre2_jit_test.c": [
      "File: src/pcre2_jit_test.c -> src/pcre2_jit_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751:  { MU, A, 0, 0, \"((?(R)a|(?1)){1,3}?)M\", \"aaaM\" },",
      "752:  { MU, A, 0, 0, \"((.)(?:.|\\\\2(?1))){0}#(?1)#\", \"#aabbccdde# #aabbccddee#\" },",
      "753:  { MU, A, 0, 0, \"((.)(?:\\\\2|\\\\2{4}b)){0}#(?:(?1))+#\", \"#aaaab# #aaaaab#\" },",
      "756:  { CM, A, 0, 0 | F_FORCECONV, \"\\xc3\\xa1\", \"\\xc3\\x81\\xc3\\xa1\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:  { MU, A, 0, 0 | F_NOMATCH, \"(?1)$((.|\\\\2xx){1,2})\", \"abc\" },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d8a8bbbc879ea0929aa1d4df499050d3a0f624b",
      "candidate_info": {
        "commit_hash": "5d8a8bbbc879ea0929aa1d4df499050d3a0f624b",
        "repo": "PCRE2Project/pcre2",
        "commit_url": "https://github.com/PCRE2Project/pcre2/commit/5d8a8bbbc879ea0929aa1d4df499050d3a0f624b",
        "files": [
          ".github/workflows/build.yml",
          ".github/workflows/codeql.yml",
          ".github/workflows/scorecards.yml",
          "src/pcre2_jit_compile.c"
        ],
        "message": "jit: replace open coded SSIZE_OF(sw) (#167)\n\nmostly to silence warnings in Visual Studio, but also making the\ncode more consistent.",
        "before_after_code_files": [
          "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c"
          ],
          "candidate": [
            "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c": [
          "File: src/pcre2_jit_compile.c -> src/pcre2_jit_compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542: #undef CMP",
          "547: #ifdef SLJIT_PREF_SHIFT_REG",
          "548: #if SLJIT_PREF_SHIFT_REG == SLJIT_R2",
          "",
          "[Removed Lines]",
          "545: #define STACK(i)      ((i) * (int)sizeof(sljit_sw))",
          "",
          "[Added Lines]",
          "545: #define STACK(i)      ((i) * SSIZE_OF(sw))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "590: group contains the start / end character pointers, and the second is",
          "592: #define OVECTOR_START    (common->ovector_start)",
          "595: #define PRIVATE_DATA(cc) (common->private_data_ptrs[(cc) - common->start])",
          "597: #if PCRE2_CODE_UNIT_WIDTH == 8",
          "",
          "[Removed Lines]",
          "593: #define OVECTOR(i)       (OVECTOR_START + (i) * (sljit_sw)sizeof(sljit_sw))",
          "594: #define OVECTOR_PRIV(i)  (common->cbra_ptr + (i) * (sljit_sw)sizeof(sljit_sw))",
          "",
          "[Added Lines]",
          "593: #define OVECTOR(i)       (OVECTOR_START + (i) * SSIZE_OF(sw))",
          "594: #define OVECTOR_PRIV(i)  (common->cbra_ptr + (i) * SSIZE_OF(sw))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2151:       {",
          "2152:       OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), OVECTOR(0));",
          "2153:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, SLJIT_IMM, -OVECTOR(0));",
          "2155:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP1, 0);",
          "2157:       setsom_found = TRUE;",
          "2158:       }",
          "2159:     cc += 1;",
          "",
          "[Removed Lines]",
          "2154:       stackpos -= (int)sizeof(sljit_sw);",
          "2156:       stackpos -= (int)sizeof(sljit_sw);",
          "",
          "[Added Lines]",
          "2154:       stackpos -= SSIZE_OF(sw);",
          "2156:       stackpos -= SSIZE_OF(sw);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2168:       {",
          "2169:       OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), common->mark_ptr);",
          "2170:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, SLJIT_IMM, -common->mark_ptr);",
          "2172:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP1, 0);",
          "2174:       setmark_found = TRUE;",
          "2175:       }",
          "2176:     cc += 1 + 2 + cc[1];",
          "",
          "[Removed Lines]",
          "2171:       stackpos -= (int)sizeof(sljit_sw);",
          "2173:       stackpos -= (int)sizeof(sljit_sw);",
          "",
          "[Added Lines]",
          "2171:       stackpos -= SSIZE_OF(sw);",
          "2173:       stackpos -= SSIZE_OF(sw);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2181:       {",
          "2182:       OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), OVECTOR(0));",
          "2183:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, SLJIT_IMM, -OVECTOR(0));",
          "2185:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP1, 0);",
          "2187:       setsom_found = TRUE;",
          "2188:       }",
          "2189:     if (common->mark_ptr != 0 && !setmark_found)",
          "2190:       {",
          "2191:       OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), common->mark_ptr);",
          "2192:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, SLJIT_IMM, -common->mark_ptr);",
          "2194:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP1, 0);",
          "2196:       setmark_found = TRUE;",
          "2197:       }",
          "2198:     if (common->capture_last_ptr != 0 && !capture_last_found)",
          "2199:       {",
          "2200:       OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), common->capture_last_ptr);",
          "2201:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, SLJIT_IMM, -common->capture_last_ptr);",
          "2203:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP1, 0);",
          "2205:       capture_last_found = TRUE;",
          "2206:       }",
          "2207:     cc += 1 + LINK_SIZE;",
          "",
          "[Removed Lines]",
          "2184:       stackpos -= (int)sizeof(sljit_sw);",
          "2186:       stackpos -= (int)sizeof(sljit_sw);",
          "2193:       stackpos -= (int)sizeof(sljit_sw);",
          "2195:       stackpos -= (int)sizeof(sljit_sw);",
          "2202:       stackpos -= (int)sizeof(sljit_sw);",
          "2204:       stackpos -= (int)sizeof(sljit_sw);",
          "",
          "[Added Lines]",
          "2184:       stackpos -= SSIZE_OF(sw);",
          "2186:       stackpos -= SSIZE_OF(sw);",
          "2193:       stackpos -= SSIZE_OF(sw);",
          "2195:       stackpos -= SSIZE_OF(sw);",
          "2202:       stackpos -= SSIZE_OF(sw);",
          "2204:       stackpos -= SSIZE_OF(sw);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2215:       {",
          "2216:       OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), common->capture_last_ptr);",
          "2217:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, SLJIT_IMM, -common->capture_last_ptr);",
          "2219:       OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP1, 0);",
          "2221:       capture_last_found = TRUE;",
          "2222:       }",
          "2223:     offset = (GET2(cc, 1 + LINK_SIZE)) << 1;",
          "2224:     OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, SLJIT_IMM, OVECTOR(offset));",
          "2226:     OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), OVECTOR(offset));",
          "2227:     OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(SLJIT_SP), OVECTOR(offset + 1));",
          "2228:     OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP1, 0);",
          "2230:     OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), stackpos, TMP2, 0);",
          "2233:     cc += 1 + LINK_SIZE + IMM2_SIZE;",
          "2234:     break;",
          "",
          "[Removed Lines]",
          "2218:       stackpos -= (int)sizeof(sljit_sw);",
          "2220:       stackpos -= (int)sizeof(sljit_sw);",
          "2225:     stackpos -= (int)sizeof(sljit_sw);",
          "2229:     stackpos -= (int)sizeof(sljit_sw);",
          "2231:     stackpos -= (int)sizeof(sljit_sw);",
          "",
          "[Added Lines]",
          "2218:       stackpos -= SSIZE_OF(sw);",
          "2220:       stackpos -= SSIZE_OF(sw);",
          "2225:     stackpos -= SSIZE_OF(sw);",
          "2229:     stackpos -= SSIZE_OF(sw);",
          "2231:     stackpos -= SSIZE_OF(sw);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3144: DEFINE_COMPILER;",
          "3146: SLJIT_ASSERT(size > 0);",
          "3148: #ifdef DESTROY_REGISTERS",
          "3149: OP1(SLJIT_MOV, TMP1, 0, SLJIT_IMM, 12345);",
          "3150: OP1(SLJIT_MOV, TMP3, 0, TMP1, 0);",
          "",
          "[Removed Lines]",
          "3147: OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, size * sizeof(sljit_sw));",
          "",
          "[Added Lines]",
          "3147: OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, size * SSIZE_OF(sw));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3160: DEFINE_COMPILER;",
          "3162: SLJIT_ASSERT(size > 0);",
          "3164: }",
          "3166: static sljit_uw * allocate_read_only_data(compiler_common *common, sljit_uw size)",
          "",
          "[Removed Lines]",
          "3163: OP2(SLJIT_ADD, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, size * sizeof(sljit_sw));",
          "",
          "[Added Lines]",
          "3163: OP2(SLJIT_ADD, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, size * SSIZE_OF(sw));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3261: loop = LABEL();",
          "3262: OP1(SLJIT_MOV, SLJIT_MEM1(TMP1), 0, src, 0);",
          "3263: OP2(SLJIT_ADD, TMP1, 0, TMP1, 0, SLJIT_IMM, 3 * sizeof(sljit_sw));",
          "3266: CMPTO(SLJIT_LESS, TMP1, 0, TMP2, 0, loop);",
          "3268: if (uncleared_size >= sizeof(sljit_sw))",
          "",
          "[Removed Lines]",
          "3264: OP1(SLJIT_MOV, SLJIT_MEM1(TMP1), -2 * (sljit_sw)sizeof(sljit_sw), src, 0);",
          "3265: OP1(SLJIT_MOV, SLJIT_MEM1(TMP1), -1 * (sljit_sw)sizeof(sljit_sw), src, 0);",
          "",
          "[Added Lines]",
          "3264: OP1(SLJIT_MOV, SLJIT_MEM1(TMP1), -2 * SSIZE_OF(sw), src, 0);",
          "3265: OP1(SLJIT_MOV, SLJIT_MEM1(TMP1), -1 * SSIZE_OF(sw), src, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3418: if (topbracket > 1)",
          "3419:   {",
          "3421:     {",
          "3422:     GET_LOCAL_BASE(SLJIT_R0, 0, OVECTOR_START + topbracket * 2 * sizeof(sljit_sw));",
          "3423:     OP1(SLJIT_MOV, SLJIT_R1, 0, SLJIT_IMM, topbracket + 1);",
          "3426:     loop = LABEL();",
          "3428:     OP2(SLJIT_SUB, SLJIT_R1, 0, SLJIT_R1, 0, SLJIT_IMM, 1);",
          "3429:     CMPTO(SLJIT_EQUAL, SLJIT_R2, 0, SLJIT_S2, 0, loop);",
          "3430:     OP1(SLJIT_MOV, SLJIT_RETURN_REG, 0, SLJIT_R1, 0);",
          "",
          "[Removed Lines]",
          "3420:   if (sljit_emit_mem_update(compiler, SLJIT_MOV | SLJIT_MEM_SUPP | SLJIT_MEM_PRE, SLJIT_R2, SLJIT_MEM1(SLJIT_R0), -(2 * (sljit_sw)sizeof(sljit_sw))) == SLJIT_SUCCESS)",
          "3427:     sljit_emit_mem_update(compiler, SLJIT_MOV | SLJIT_MEM_PRE, SLJIT_R2, SLJIT_MEM1(SLJIT_R0), -(2 * (sljit_sw)sizeof(sljit_sw)));",
          "",
          "[Added Lines]",
          "3420:   if (sljit_emit_mem_update(compiler, SLJIT_MOV | SLJIT_MEM_SUPP | SLJIT_MEM_PRE, SLJIT_R2, SLJIT_MEM1(SLJIT_R0), -(2 * SSIZE_OF(sw))) == SLJIT_SUCCESS)",
          "3427:     sljit_emit_mem_update(compiler, SLJIT_MOV | SLJIT_MEM_PRE, SLJIT_R2, SLJIT_MEM1(SLJIT_R0), -(2 * SSIZE_OF(sw)));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3438:     loop = LABEL();",
          "3439:     OP1(SLJIT_MOV, SLJIT_R2, 0, SLJIT_MEM1(SLJIT_R0), 0);",
          "3441:     OP2(SLJIT_SUB, SLJIT_R1, 0, SLJIT_R1, 0, SLJIT_IMM, 1);",
          "3442:     CMPTO(SLJIT_EQUAL, SLJIT_R2, 0, SLJIT_S2, 0, loop);",
          "3443:     OP1(SLJIT_MOV, SLJIT_RETURN_REG, 0, SLJIT_R1, 0);",
          "",
          "[Removed Lines]",
          "3440:     OP2(SLJIT_SUB, SLJIT_R0, 0, SLJIT_R0, 0, SLJIT_IMM, 2 * (sljit_sw)sizeof(sljit_sw));",
          "",
          "[Added Lines]",
          "3440:     OP2(SLJIT_SUB, SLJIT_R0, 0, SLJIT_R0, 0, SLJIT_IMM, 2 * SSIZE_OF(sw));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6574: mainloop = LABEL();",
          "6576: jump = CMP(SLJIT_SIG_LESS_EQUAL, TMP2, 0, SLJIT_IMM, 0);",
          "6578: OP2(SLJIT_ADD, TMP2, 0, TMP2, 0, TMP1, 0);",
          "6579: if (HAS_VIRTUAL_REGISTERS)",
          "6580:   {",
          "6584:   }",
          "6585: else",
          "6586:   {",
          "6590:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), 0, TMP1, 0);",
          "6591:   GET_LOCAL_BASE(TMP1, 0, 0);",
          "6592:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), sizeof(sljit_sw), TMP3, 0);",
          "",
          "[Removed Lines]",
          "6575: OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(STACK_TOP), -sizeof(sljit_sw));",
          "6581:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), 0, SLJIT_MEM1(STACK_TOP), -(2 * sizeof(sljit_sw)));",
          "6582:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), sizeof(sljit_sw), SLJIT_MEM1(STACK_TOP), -(3 * sizeof(sljit_sw)));",
          "6583:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 3 * sizeof(sljit_sw));",
          "6587:   OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(STACK_TOP), -(2 * sizeof(sljit_sw)));",
          "6588:   OP1(SLJIT_MOV, TMP3, 0, SLJIT_MEM1(STACK_TOP), -(3 * sizeof(sljit_sw)));",
          "6589:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 3 * sizeof(sljit_sw));",
          "",
          "[Added Lines]",
          "6575: OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(STACK_TOP), -SSIZE_OF(sw));",
          "6581:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), 0, SLJIT_MEM1(STACK_TOP), -(2 * SSIZE_OF(sw)));",
          "6582:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), sizeof(sljit_sw), SLJIT_MEM1(STACK_TOP), -(3 * SSIZE_OF(sw)));",
          "6583:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 3 * SSIZE_OF(sw));",
          "6587:   OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(STACK_TOP), -(2 * SSIZE_OF(sw)));",
          "6588:   OP1(SLJIT_MOV, TMP3, 0, SLJIT_MEM1(STACK_TOP), -(3 * SSIZE_OF(sw)));",
          "6589:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 3 * SSIZE_OF(sw));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6603: OP2(SLJIT_ADD, TMP2, 0, TMP2, 0, TMP1, 0);",
          "6604: if (HAS_VIRTUAL_REGISTERS)",
          "6605:   {",
          "6608:   }",
          "6609: else",
          "6610:   {",
          "6613:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), 0, TMP3, 0);",
          "6614:   }",
          "6615: JUMPTO(SLJIT_JUMP, mainloop);",
          "",
          "[Removed Lines]",
          "6606:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), 0, SLJIT_MEM1(STACK_TOP), -(2 * sizeof(sljit_sw)));",
          "6607:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 2 * sizeof(sljit_sw));",
          "6611:   OP1(SLJIT_MOV, TMP3, 0, SLJIT_MEM1(STACK_TOP), -(2 * sizeof(sljit_sw)));",
          "6612:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 2 * sizeof(sljit_sw));",
          "",
          "[Added Lines]",
          "6606:   OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), 0, SLJIT_MEM1(STACK_TOP), -(2 * SSIZE_OF(sw)));",
          "6607:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 2 * SSIZE_OF(sw));",
          "6611:   OP1(SLJIT_MOV, TMP3, 0, SLJIT_MEM1(STACK_TOP), -(2 * SSIZE_OF(sw)));",
          "6612:   OP2(SLJIT_SUB, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, 2 * SSIZE_OF(sw));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "9756: sljit_sw value1;",
          "9757: sljit_sw value2;",
          "9758: sljit_sw value3;",
          "9761: PUSH_BACKTRACK(sizeof(backtrack_common), cc, NULL);",
          "",
          "[Removed Lines]",
          "9759: sljit_uw callout_arg_size = (common->re->top_bracket + 1) * 2 * sizeof(sljit_sw);",
          "",
          "[Added Lines]",
          "9759: sljit_uw callout_arg_size = (common->re->top_bracket + 1) * 2 * SSIZE_OF(sw);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "11451: int private_data_ptr = PRIVATE_DATA(cc);",
          "11452: int base = (private_data_ptr == 0) ? SLJIT_MEM1(STACK_TOP) : SLJIT_MEM1(SLJIT_SP);",
          "11453: int offset0 = (private_data_ptr == 0) ? STACK(0) : private_data_ptr;",
          "11455: int tmp_base, tmp_offset;",
          "11456: #if defined SUPPORT_UNICODE && PCRE2_CODE_UNIT_WIDTH != 32",
          "11457: BOOL use_tmp;",
          "",
          "[Removed Lines]",
          "11454: int offset1 = (private_data_ptr == 0) ? STACK(1) : private_data_ptr + (int)sizeof(sljit_sw);",
          "",
          "[Added Lines]",
          "11454: int offset1 = (private_data_ptr == 0) ? STACK(1) : private_data_ptr + SSIZE_OF(sw);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "11523:   {",
          "11525:   OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), early_fail_ptr);",
          "11527:   OP2(SLJIT_SUB, TMP1, 0, TMP1, 0, TMP2, 0);",
          "11528:   OP2(SLJIT_SUB, TMP2, 0, STR_PTR, 0, TMP2, 0);",
          "11529:   add_jump(compiler, &backtrack->topbacktracks, CMP(SLJIT_LESS_EQUAL, TMP2, 0, TMP1, 0));",
          "11531:   OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), early_fail_ptr, STR_PTR, 0);",
          "11533:   }",
          "11535: switch(opcode)",
          "",
          "[Removed Lines]",
          "11526:   OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(SLJIT_SP), early_fail_ptr + (int)sizeof(sljit_sw));",
          "11532:   OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), early_fail_ptr + (int)sizeof(sljit_sw), STR_PTR, 0);",
          "",
          "[Added Lines]",
          "11526:   OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(SLJIT_SP), early_fail_ptr + SSIZE_OF(sw));",
          "11532:   OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), early_fail_ptr + SSIZE_OF(sw), STR_PTR, 0);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "12428: int private_data_ptr = PRIVATE_DATA(cc);",
          "12429: int base = (private_data_ptr == 0) ? SLJIT_MEM1(STACK_TOP) : SLJIT_MEM1(SLJIT_SP);",
          "12430: int offset0 = (private_data_ptr == 0) ? STACK(0) : private_data_ptr;",
          "12433: cc = get_iterator_parameters(common, cc, &opcode, &type, &max, &exact, &end);",
          "",
          "[Removed Lines]",
          "12431: int offset1 = (private_data_ptr == 0) ? STACK(1) : private_data_ptr + (int)sizeof(sljit_sw);",
          "",
          "[Added Lines]",
          "12431: int offset1 = (private_data_ptr == 0) ? STACK(1) : private_data_ptr + SSIZE_OF(sw);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "14148: if (common->currententry != NULL)",
          "14149:   {",
          "14152:   SLJIT_ASSERT(common->recurse_bitset_size > 0);",
          "14153:   common->recurse_bitset = (sljit_u8*)SLJIT_MALLOC(common->recurse_bitset_size, allocator_data);;",
          "",
          "[Removed Lines]",
          "14151:   common->recurse_bitset_size = ((private_data_size / (int)sizeof(sljit_sw)) + 7) >> 3;",
          "",
          "[Added Lines]",
          "14151:   common->recurse_bitset_size = ((private_data_size / SSIZE_OF(sw)) + 7) >> 3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ca0530b9bdf00d2485d612ddfab8d21c72dc83a",
      "candidate_info": {
        "commit_hash": "4ca0530b9bdf00d2485d612ddfab8d21c72dc83a",
        "repo": "PCRE2Project/pcre2",
        "commit_url": "https://github.com/PCRE2Project/pcre2/commit/4ca0530b9bdf00d2485d612ddfab8d21c72dc83a",
        "files": [
          "src/pcre2_jit_compile.c"
        ],
        "message": "Improve the code generator of recurse in JIT",
        "before_after_code_files": [
          "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c"
          ],
          "candidate": [
            "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/pcre2_jit_compile.c||src/pcre2_jit_compile.c": [
          "File: src/pcre2_jit_compile.c -> src/pcre2_jit_compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2330: bit_index >>= SLJIT_WORD_SHIFT;",
          "2332: mask = 1 << (bit_index & 0x7);",
          "2333: byte = common->recurse_bitset + (bit_index >> 3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2332: SLJIT_ASSERT((bit_index >> 3) < common->recurse_bitset_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2339: return TRUE;",
          "2340: }",
          "2344: {",
          "2345: int length = 1;",
          "2346: int size, offset;",
          "2347: PCRE2_SPTR alternative;",
          "2354: memset(common->recurse_bitset, 0, common->recurse_bitset_size);",
          "2356: #if defined DEBUG_FORCE_CONTROL_HEAD && DEBUG_FORCE_CONTROL_HEAD",
          "2357: SLJIT_ASSERT(common->control_head_ptr != 0);",
          "2359: #endif",
          "",
          "[Removed Lines]",
          "2342: static int get_recurse_data_length(compiler_common *common, PCRE2_SPTR cc, PCRE2_SPTR ccend,",
          "2343:   BOOL *needs_control_head, BOOL *has_quit, BOOL *has_accept)",
          "2348: BOOL quit_found = FALSE;",
          "2349: BOOL accept_found = FALSE;",
          "2350: BOOL setsom_found = FALSE;",
          "2351: BOOL setmark_found = FALSE;",
          "2352: BOOL control_head_found = FALSE;",
          "2358: control_head_found = TRUE;",
          "",
          "[Added Lines]",
          "2344: enum get_recurse_flags {",
          "2345:   recurse_flag_quit_found = (1 << 0),",
          "2346:   recurse_flag_accept_found = (1 << 1),",
          "2347:   recurse_flag_setsom_found = (1 << 2),",
          "2348:   recurse_flag_setmark_found = (1 << 3),",
          "2349:   recurse_flag_control_head_found = (1 << 4),",
          "2350: };",
          "2352: static int get_recurse_data_length(compiler_common *common, PCRE2_SPTR cc, PCRE2_SPTR ccend, uint32_t *result_flags)",
          "2357: uint32_t recurse_flags = 0;",
          "2363: recurse_flags |= recurse_flag_control_head_found;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2366:     {",
          "2367:     case OP_SET_SOM:",
          "2368:     SLJIT_ASSERT(common->has_set_som);",
          "2370:     cc += 1;",
          "2371:     break;",
          "2373:     case OP_RECURSE:",
          "2374:     if (common->has_set_som)",
          "2376:     if (common->mark_ptr != 0)",
          "2378:     if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))",
          "2379:       length++;",
          "2380:     cc += 1 + LINK_SIZE;",
          "",
          "[Removed Lines]",
          "2369:     setsom_found = TRUE;",
          "2375:       setsom_found = TRUE;",
          "2377:       setmark_found = TRUE;",
          "",
          "[Added Lines]",
          "2374:     recurse_flags |= recurse_flag_setsom_found;",
          "2380:       recurse_flags |= recurse_flag_setsom_found;",
          "2382:       recurse_flags |= recurse_flag_setmark_found;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2533:     case OP_PRUNE_ARG:",
          "2534:     case OP_THEN_ARG:",
          "2535:     SLJIT_ASSERT(common->mark_ptr != 0);",
          "2538:     if (common->control_head_ptr != 0)",
          "2540:     if (*cc != OP_MARK)",
          "2543:     cc += 1 + 2 + cc[1];",
          "2544:     break;",
          "",
          "[Removed Lines]",
          "2536:     if (!setmark_found)",
          "2537:       setmark_found = TRUE;",
          "2539:       control_head_found = TRUE;",
          "2541:       quit_found = TRUE;",
          "",
          "[Added Lines]",
          "2541:     recurse_flags |= recurse_flag_setmark_found;",
          "2543:       recurse_flags |= recurse_flag_control_head_found;",
          "2545:       recurse_flags |= recurse_flag_quit_found;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2546:     case OP_PRUNE:",
          "2547:     case OP_SKIP:",
          "2548:     case OP_COMMIT:",
          "2550:     cc++;",
          "2551:     break;",
          "2553:     case OP_SKIP_ARG:",
          "2555:     cc += 1 + 2 + cc[1];",
          "2556:     break;",
          "2558:     case OP_THEN:",
          "2559:     SLJIT_ASSERT(common->control_head_ptr != 0);",
          "2562:     cc++;",
          "2563:     break;",
          "2565:     case OP_ACCEPT:",
          "2566:     case OP_ASSERT_ACCEPT:",
          "2568:     cc++;",
          "2569:     break;",
          "",
          "[Removed Lines]",
          "2549:     quit_found = TRUE;",
          "2554:     quit_found = TRUE;",
          "2560:     quit_found = TRUE;",
          "2561:     control_head_found = TRUE;",
          "2567:     accept_found = TRUE;",
          "",
          "[Added Lines]",
          "2553:     recurse_flags |= recurse_flag_quit_found;",
          "2558:     recurse_flags |= recurse_flag_quit_found;",
          "2564:     recurse_flags |= recurse_flag_quit_found | recurse_flag_control_head_found;",
          "2570:     recurse_flags |= recurse_flag_accept_found;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2576:   }",
          "2577: SLJIT_ASSERT(cc == ccend);",
          "2580:   length++;",
          "2582:   {",
          "2584:     length++;",
          "2586:     length++;",
          "2587:   }",
          "2592: return length;",
          "2593: }",
          "",
          "[Removed Lines]",
          "2579: if (control_head_found)",
          "2581: if (quit_found)",
          "2583:   if (setsom_found)",
          "2585:   if (setmark_found)",
          "",
          "[Added Lines]",
          "2582: if (recurse_flags & recurse_flag_control_head_found)",
          "2584: if (recurse_flags & recurse_flag_quit_found)",
          "2586:   if (recurse_flags & recurse_flag_setsom_found)",
          "2588:   if (recurse_flags & recurse_flag_setmark_found)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2601: };",
          "2603: static void copy_recurse_data(compiler_common *common, PCRE2_SPTR cc, PCRE2_SPTR ccend,",
          "2605: {",
          "2606: delayed_mem_copy_status status;",
          "2607: PCRE2_SPTR alternative;",
          "",
          "[Removed Lines]",
          "2604:   int type, int stackptr, int stacktop, BOOL has_quit)",
          "",
          "[Added Lines]",
          "2605:   int type, int stackptr, int stacktop, uint32_t recurse_flags)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2703:     {",
          "2704:     case OP_SET_SOM:",
          "2705:     SLJIT_ASSERT(common->has_set_som);",
          "2707:       {",
          "2708:       kept_shared_srcw[0] = OVECTOR(0);",
          "2709:       kept_shared_count = 1;",
          "",
          "[Removed Lines]",
          "2706:     if (has_quit && recurse_check_bit(common, OVECTOR(0)))",
          "",
          "[Added Lines]",
          "2707:     if ((recurse_flags & recurse_flag_quit_found) && recurse_check_bit(common, OVECTOR(0)))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2712:     break;",
          "2714:     case OP_RECURSE:",
          "2716:       {",
          "2717:       if (common->has_set_som && recurse_check_bit(common, OVECTOR(0)))",
          "2718:         {",
          "",
          "[Removed Lines]",
          "2715:     if (has_quit)",
          "",
          "[Added Lines]",
          "2716:     if (recurse_flags & recurse_flag_quit_found)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2936:     case OP_PRUNE_ARG:",
          "2937:     case OP_THEN_ARG:",
          "2938:     SLJIT_ASSERT(common->mark_ptr != 0);",
          "2940:       {",
          "2941:       kept_shared_srcw[0] = common->mark_ptr;",
          "2942:       kept_shared_count = 1;",
          "",
          "[Removed Lines]",
          "2939:     if (has_quit && recurse_check_bit(common, common->mark_ptr))",
          "",
          "[Added Lines]",
          "2940:     if ((recurse_flags & recurse_flag_quit_found) && recurse_check_bit(common, common->mark_ptr))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "13476: PCRE2_SPTR cc = common->start + common->currententry->start;",
          "13477: PCRE2_SPTR ccbegin = cc + 1 + LINK_SIZE + (*cc == OP_BRA ? 0 : IMM2_SIZE);",
          "13478: PCRE2_SPTR ccend = bracketend(cc) - (1 + LINK_SIZE);",
          "13483: int alt_count, alt_max, local_size;",
          "13484: backtrack_common altbacktrack;",
          "13485: jump_list *match = NULL;",
          "",
          "[Removed Lines]",
          "13479: BOOL needs_control_head;",
          "13480: BOOL has_quit;",
          "13481: BOOL has_accept;",
          "13482: int private_data_size = get_recurse_data_length(common, ccbegin, ccend, &needs_control_head, &has_quit, &has_accept);",
          "",
          "[Added Lines]",
          "13480: uint32_t recurse_flags = 0;",
          "13481: int private_data_size = get_recurse_data_length(common, ccbegin, ccend, &recurse_flags);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "13514: OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), STACK(local_size - 1), TMP2, 0);",
          "13519: OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->recursive_head_ptr, STACK_TOP, 0);",
          "13522:   OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->control_head_ptr, SLJIT_IMM, 0);",
          "13524: if (alt_max > 1)",
          "",
          "[Removed Lines]",
          "13516: copy_recurse_data(common, ccbegin, ccend, recurse_copy_from_global, local_size, private_data_size + local_size, has_quit);",
          "13521: if (needs_control_head)",
          "",
          "[Added Lines]",
          "13515: copy_recurse_data(common, ccbegin, ccend, recurse_copy_from_global, local_size, private_data_size + local_size, recurse_flags);",
          "13520: if (recurse_flags & recurse_flag_control_head_found)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "13543:   if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))",
          "13544:     return;",
          "13547:   OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(SLJIT_SP), common->recursive_head_ptr);",
          "13550:     {",
          "13551:     if (alt_max > 3)",
          "13552:       put_label = sljit_emit_put_label(compiler, SLJIT_MEM1(STACK_TOP), STACK(1));",
          "",
          "[Removed Lines]",
          "13546:   allocate_stack(common, (alt_max > 1 || has_accept) ? 2 : 1);",
          "13549:   if (alt_max > 1 || has_accept)",
          "",
          "[Added Lines]",
          "13545:   allocate_stack(common, (alt_max > 1 || (recurse_flags & recurse_flag_accept_found)) ? 2 : 1);",
          "13548:   if (alt_max > 1 || (recurse_flags & recurse_flag_accept_found))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "13566:     sljit_emit_fast_enter(compiler, TMP1, 0);",
          "13569:       accept_exit = CMP(SLJIT_EQUAL, SLJIT_MEM1(STACK_TOP), STACK(1), SLJIT_IMM, -1);",
          "13571:     OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(STACK_TOP), STACK(0));",
          "13573:     OP1(SLJIT_MOV, SLJIT_MEM1(TMP2), STACK(local_size - 1), TMP1, 0);",
          "13577:     if (alt_max > 1)",
          "13578:       {",
          "",
          "[Removed Lines]",
          "13568:     if (has_accept)",
          "13575:     copy_recurse_data(common, ccbegin, ccend, recurse_swap_global, local_size, private_data_size + local_size, has_quit);",
          "",
          "[Added Lines]",
          "13567:     if (recurse_flags & recurse_flag_accept_found)",
          "13574:     copy_recurse_data(common, ccbegin, ccend, recurse_swap_global, local_size, private_data_size + local_size, recurse_flags);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "13589:         next_alt = CMP(SLJIT_NOT_EQUAL, TMP1, 0, SLJIT_IMM, 0);",
          "13590:       }",
          "13591:     else",
          "13593:     }",
          "13594:   else if (alt_max > 3)",
          "13595:     {",
          "",
          "[Removed Lines]",
          "13592:       free_stack(common, has_accept ? 2 : 1);",
          "",
          "[Added Lines]",
          "13591:       free_stack(common, (recurse_flags & recurse_flag_accept_found) ? 2 : 1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "13625: quit = LABEL();",
          "13629: OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(STACK_TOP), STACK(local_size - 1));",
          "13630: free_stack(common, private_data_size + local_size);",
          "",
          "[Removed Lines]",
          "13627: copy_recurse_data(common, ccbegin, ccend, recurse_copy_private_to_global, local_size, private_data_size + local_size, has_quit);",
          "",
          "[Added Lines]",
          "13626: copy_recurse_data(common, ccbegin, ccend, recurse_copy_private_to_global, local_size, private_data_size + local_size, recurse_flags);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "13634: if (common->quit != NULL)",
          "13635:   {",
          "13638:   set_jumps(common->quit, LABEL());",
          "13639:   OP1(SLJIT_MOV, STACK_TOP, 0, SLJIT_MEM1(SLJIT_SP), common->recursive_head_ptr);",
          "13641:   JUMPTO(SLJIT_JUMP, quit);",
          "13642:   }",
          "13645:   {",
          "13646:   JUMPHERE(accept_exit);",
          "13647:   free_stack(common, 2);",
          "",
          "[Removed Lines]",
          "13636:   SLJIT_ASSERT(has_quit);",
          "13640:   copy_recurse_data(common, ccbegin, ccend, recurse_copy_shared_to_global, local_size, private_data_size + local_size, has_quit);",
          "13644: if (has_accept)",
          "",
          "[Added Lines]",
          "13635:   SLJIT_ASSERT(recurse_flags & recurse_flag_quit_found);",
          "13639:   copy_recurse_data(common, ccbegin, ccend, recurse_copy_shared_to_global, local_size, private_data_size + local_size, recurse_flags);",
          "13643: if (recurse_flags & recurse_flag_accept_found)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "13650:   OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), STACK(local_size - 1), TMP1, 0);",
          "13654:   OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(STACK_TOP), STACK(local_size - 1));",
          "13655:   free_stack(common, private_data_size + local_size);",
          "",
          "[Removed Lines]",
          "13652:   copy_recurse_data(common, ccbegin, ccend, recurse_copy_kept_shared_to_global, local_size, private_data_size + local_size, has_quit);",
          "",
          "[Added Lines]",
          "13651:   copy_recurse_data(common, ccbegin, ccend, recurse_copy_kept_shared_to_global, local_size, private_data_size + local_size, recurse_flags);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "13660: if (common->accept != NULL)",
          "13661:   {",
          "13664:   set_jumps(common->accept, LABEL());",
          "",
          "[Removed Lines]",
          "13662:   SLJIT_ASSERT(has_accept);",
          "",
          "[Added Lines]",
          "13661:   SLJIT_ASSERT(recurse_flags & recurse_flag_accept_found);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "13675: OP1(SLJIT_MOV, SLJIT_MEM1(STACK_TOP), STACK(0), TMP2, 0);",
          "13679: OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(TMP2), STACK(local_size - 1));",
          "13680: OP1(SLJIT_MOV, TMP1, 0, SLJIT_IMM, 1);",
          "",
          "[Removed Lines]",
          "13677: copy_recurse_data(common, ccbegin, ccend, recurse_swap_global, local_size, private_data_size + local_size, has_quit);",
          "",
          "[Added Lines]",
          "13676: copy_recurse_data(common, ccbegin, ccend, recurse_swap_global, local_size, private_data_size + local_size, recurse_flags);",
          "",
          "---------------"
        ]
      }
    }
  ]
}