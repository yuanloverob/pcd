{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05a5f2dfff5242394d8f08a46c98c846e9e65744",
      "candidate_info": {
        "commit_hash": "05a5f2dfff5242394d8f08a46c98c846e9e65744",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/05a5f2dfff5242394d8f08a46c98c846e9e65744",
        "files": [
          "BLSCrypto.cpp",
          "BLSCrypto.h",
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1512-add-DKG-to-SGX Add method getVerificationVector to server",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSCrypto.h||BLSCrypto.h",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet_common.h||sgxwallet_common.h",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: }",
          "89: bool sign(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: bool hex2carray2(const char * _hex, uint64_t  *_bin_len,",
          "87:                 uint8_t* _bin, const int _max_length ) {",
          "89:     int len = strnlen(_hex, _max_length);//2 * BUF_LEN);",
          "92:     if (len == 0 && len % 2 == 1)",
          "93:         return false;",
          "97:     for (int i = 0; i < len / 2; i++) {",
          "98:         int high = char2int((char)_hex[i * 2]);",
          "99:         int low = char2int((char)_hex[i * 2 + 1]);",
          "101:         if (high < 0 || low < 0) {",
          "102:             return false;",
          "103:         }",
          "105:         _bin[i] = (unsigned char) (high * 16 + low);",
          "106:     }",
          "108:     return true;",
          "110: }",
          "",
          "---------------"
        ],
        "BLSCrypto.h||BLSCrypto.h": [
          "File: BLSCrypto.h -> BLSCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: EXTERNC void  carray2Hex(const unsigned char *d, int _len, char* _hexArray);",
          "27: EXTERNC bool hex2carray(const char * _hex, uint64_t  *_bin_len,",
          "28:                         uint8_t* _bin );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: EXTERNC bool hex2carray2(const char * _hex, uint64_t  *_bin_len,",
          "30:                  uint8_t* _bin, const int _max_length );",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"sgxwallet.h\"",
          "8: #include <iostream>",
          "10: std::string gen_dkg_poly( int _t){",
          "11:     char *errMsg = (char *)calloc(1024, 1);",
          "12:     int err_status = 0;",
          "15:     uint32_t enc_len = 0;",
          "17:     status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, _t);",
          "21:     std::string result(hexEncrPoly);",
          "25:     free(errMsg);",
          "26:     free(encrypted_dkg_secret);",
          "27:     free(hexEncrPoly);",
          "29:     return result;",
          "30: }",
          "",
          "[Removed Lines]",
          "13:     uint8_t* encrypted_dkg_secret = (uint8_t *)calloc(2000, 1);",
          "19:     char *hexEncrPoly = (char *) calloc(4*BUF_LEN, 1);",
          "20:     carray2Hex(encrypted_dkg_secret, enc_len, hexEncrPoly);",
          "",
          "[Added Lines]",
          "10: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "11:   std::string str(koefs);",
          "12:   std::string delim;",
          "13:   delim.push_back(symbol);",
          "14:   std::vector<std::string> G2_strings;",
          "15:   size_t prev = 0, pos = 0;",
          "16:   do",
          "17:   {",
          "18:     pos = str.find(delim, prev);",
          "19:     if (pos == std::string::npos) pos = str.length();",
          "20:     std::string token = str.substr(prev, pos-prev);",
          "21:     if (!token.empty()) {",
          "22:       std::string koef(token.c_str());",
          "23:       G2_strings.push_back(koef);",
          "24:     }",
          "25:     prev = pos + delim.length();",
          "26:   }",
          "27:   while (pos < str.length() && prev < str.length());",
          "29:   return G2_strings;",
          "30: }",
          "35:     uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);;",
          "42:     for ( int i = 0 ; i < 3050; i++)",
          "46:     char *hexEncrPoly = (char *) calloc(DKG_MAX_SEALED_LEN * 2 + 1, 1);//(4*BUF_LEN, 1);",
          "48:     carray2Hex(encrypted_dkg_secret, DKG_MAX_SEALED_LEN, hexEncrPoly);",
          "51:     std::cerr << \"in DKGCrypto encr len is \" << enc_len << std::endl;",
          "58: }",
          "60: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int n, int t){",
          "62:   char* errMsg1 = (char*) calloc(1024,1);",
          "63:   int err_status = 0;",
          "66:   std::cerr << \"got encr poly size \" << strlen(encryptedPolyHex) << std::endl;",
          "67:   char* public_shares = (char*)calloc(10000, 1);",
          "69:   uint64_t enc_len = 0;",
          "71:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "72:   hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100);",
          "73:   std::cerr << \"enc len \" << enc_len << std::endl;",
          "75:   for ( int i = 0 ; i < 3050; i++)",
          "78:   uint32_t len;",
          "79:   status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "80:   std::cerr << \"err msg \" << errMsg1 << std::endl;",
          "82:   std::cerr << \"public_shares:\" << std::endl;",
          "83:   std::cerr << public_shares << std::endl;",
          "85:   printf(\"\\nget_public_shares status: %d error %s \\n\\n\", err_status, errMsg1);",
          "87:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "88:   std::vector <std::vector <std::string>> pub_shares_vect;",
          "89:   for ( int i = 0; i < G2_strings.size(); i++){",
          "90:     std::vector <std::string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "91:     pub_shares_vect.push_back(koef_str);",
          "92:   }",
          "94:   free(errMsg1);",
          "95:   free(public_shares);",
          "96:   free(encr_dkg_poly);",
          "98:   return pub_shares_vect;",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #define SGXD_DKGCRYPTO_H",
          "8: #include <string>",
          "10: std::string gen_dkg_poly( int _t);",
          "12: #endif //SGXD_DKGCRYPTO_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <vector>",
          "13: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int n, int t);",
          "15: std::vector<std::string> SplitString(const char* koefs, const char symbol);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:     return result;",
          "264: }",
          "266: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "267:     return generateDKGPolyImpl(polyName, t);",
          "268: }",
          "270: Json::Value SGXWalletServer::generateECDSAKey(const std::string &_keyName) {",
          "271:     return generateECDSAKeyImpl(_keyName);",
          "272: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: Json::Value getVerificationVectorImpl(const std::string& polyName, int n, int t) {",
          "268:   Json::Value result;",
          "269:   result[\"status\"] = 0;",
          "270:   result[\"errorMessage\"] = \"\";",
          "272:   std::vector <std::vector<std::string>> verifVector;",
          "273:   try {",
          "274:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName, \"DKGPoly:\");",
          "276:     verifVector = get_verif_vect(encr_poly_ptr->c_str(), n, t);",
          "277:     std::cerr << \"verif vect size \" << verifVector.size() << std::endl;",
          "278:   } catch (RPCException &_e) {",
          "279:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "280:     result[\"status\"] = _e.status;",
          "281:     result[\"errorMessage\"] = _e.errString;",
          "282:     result[\"Verification Vector\"] = \"\";",
          "283:   }",
          "285:   for ( int i = 0; i < t; i++){",
          "286:     std::vector<std::string> cur_coef = verifVector.at(i);",
          "287:     string num = std::to_string(i);",
          "288:     result[\"Verification Vector\"][i][num][\"X\"][\"c0\"] = cur_coef.at(0);",
          "289:     result[\"Verification Vector\"][i][num][\"X\"][\"c1\"] = cur_coef.at(1);",
          "290:     result[\"Verification Vector\"][i][num][\"Y\"][\"c0\"] = cur_coef.at(2);",
          "291:     result[\"Verification Vector\"][i][num][\"Y\"][\"c1\"] = cur_coef.at(3);",
          "292:   }",
          "294:   return result;",
          "295: }",
          "301: Json::Value SGXWalletServer::getVerificationVector(const std::string& polyName, int n, int t){",
          "302:   return getVerificationVectorImpl(polyName, n, t);",
          "303: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299: }",
          "302: shared_ptr<string> readKeyShare(const string &_keyShareName) {",
          "304:     auto keyShareStr = levelDb->readString(\"BLSKEYSHARE:\" + _keyShareName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: shared_ptr<string> readFromDb(const string & name, const string & prefix) {",
          "339:   auto dataStr = levelDb->readString(prefix + name);",
          "341:   if (dataStr == nullptr) {",
          "342:     throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Data with this name does not exists\");",
          "343:   }",
          "345:   return dataStr;",
          "346: }",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     virtual Json::Value getPublicECDSAKey(const std::string& keyName);",
          "29:     virtual Json::Value generateDKGPoly(const std::string& polyName, int t);",
          "32: };",
          "35: void writeKeyShare(const string &_keyShareName, const string &value, int index, int n, int t);",
          "36: shared_ptr<std::string> readKeyShare(const string& _keyShare);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t);",
          "35: shared_ptr<string> readFromDb(const string & name, const string & prefix);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: Json::Value getPublicECDSAKeyImpl(const std::string& keyName);",
          "52: Json::Value generateDKGPolyImpl(const std::string& polyName, int t);",
          "54: #endif //SGXWALLET_SGXWALLETSERVER_HPP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: Json::Value getVerificationVectorImpl(const std::string& polyName, int n, int t);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:             this->bindAndAddMethod(jsonrpc::Procedure(\"generateECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::generateECDSAKeyI);",
          "19:             this->bindAndAddMethod(jsonrpc::Procedure(\"getPublicECDSAKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::getPublicECDSAKeyI);",
          "20:             this->bindAndAddMethod(jsonrpc::Procedure(\"ecdsaSignMessageHash\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"base\",jsonrpc::JSON_INTEGER,\"keyName\",jsonrpc::JSON_STRING,\"messageHash\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::ecdsaSignMessageHashI);",
          "22:         }",
          "24:         inline virtual void importBLSKeyShareI(const Json::Value &request, Json::Value &response)",
          "",
          "[Removed Lines]",
          "21:             this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"keyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "",
          "[Added Lines]",
          "21:             this->bindAndAddMethod(jsonrpc::Procedure(\"generateDKGPoly\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::generateDKGPolyI);",
          "22:             this->bindAndAddMethod(jsonrpc::Procedure(\"getVerificationVector\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getVerificationVectorI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         }",
          "48:         inline virtual void generateDKGPolyI(const Json::Value &request, Json::Value &response)",
          "49:         {",
          "51:         }",
          "52:         virtual Json::Value importBLSKeyShare(int index, const std::string& keyShare, const std::string& keyShareName, int n, int t) = 0;",
          "53:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int n, int signerIndex, int t) = 0;",
          "",
          "[Removed Lines]",
          "50:             response = this->generateDKGPoly(request[\"keyName\"].asString(), request[\"t\"].asInt());",
          "",
          "[Added Lines]",
          "51:             response = this->generateDKGPoly(request[\"polyName\"].asString(), request[\"t\"].asInt());",
          "52:         }",
          "53:         inline virtual void getVerificationVectorI(const Json::Value &request, Json::Value &response)",
          "54:         {",
          "55:             response = this->getVerificationVector(request[\"polyName\"].asString(), request[\"n\"].asInt(),request[\"t\"].asInt());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:         virtual Json::Value generateECDSAKey(const std::string& keyName) = 0;",
          "56:         virtual Json::Value getPublicECDSAKey(const std::string& keyName) = 0;",
          "57:         virtual Json::Value ecdsaSignMessageHash(int base, const std::string& keyName, const std::string& messageHash) = 0;",
          "59: };",
          "61: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "58:         virtual Json::Value generateDKGPoly(const std::string& keyName, int t) = 0;",
          "",
          "[Added Lines]",
          "63:         virtual Json::Value generateDKGPoly(const std::string& polyName, int t) = 0;",
          "64:         virtual Json::Value getVerificationVector(const std::string& polyName, int n, int t) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     result += \":\";",
          "113:   }",
          "114:   strncpy(secret_shares, result.c_str(), result.length());",
          "115: }",
          "117: void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "118:                         unsigned _t) {",
          "120:   std::string result;",
          "121:   char symbol = ':';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   libff::init_alt_bn128_params();",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   free(dkg_secret);",
          "431: }",
          "437:   sgx_status_t status = sgx_unseal_data(",
          "440:   if (status != SGX_SUCCESS) {",
          "441:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", status);",
          "442:     return;",
          "443:   }",
          "444: }",
          "447:     unsigned _t, unsigned _n){",
          "451: }",
          "453: void get_public_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "454:                        unsigned _t, unsigned _n){",
          "455:   char* decrypted_dkg_secret = (char*)malloc(DKG_MAX_SEALED_LEN);",
          "458:   calc_public_shares(decrypted_dkg_secret, public_shares, _t);",
          "459: }",
          "461: void ecdsa_sign1(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "",
          "[Removed Lines]",
          "433: void decrypt_dkg_secret (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len){",
          "438:       (const sgx_sealed_data_t *)encrypted_dkg_secret, NULL, 0, decrypted_dkg_secret, &enc_len);",
          "446: void get_secret_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* secret_shares,",
          "448:   char* decrypted_dkg_secret = (char*)malloc(DKG_MAX_SEALED_LEN);",
          "449:   decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "450:   calc_secret_shares(decrypted_dkg_secret, secret_shares, _t, _n);",
          "456:   decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "457:   strncpy(err_string, decrypted_dkg_secret, 1024);",
          "",
          "[Added Lines]",
          "433: void decrypt_dkg_secret (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t* dec_len){",
          "436:   uint32_t decr_len;",
          "438:       (const sgx_sealed_data_t *)encrypted_dkg_secret, NULL, 0, decrypted_dkg_secret, &decr_len);",
          "448: void get_secret_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t* dec_len, char* secret_shares,",
          "451:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "454:   uint32_t decr_len ;",
          "456:   decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t*)decrypted_dkg_secret, &decr_len);",
          "460:   if (*err_status != 0) {",
          "461:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed with status %d\", *err_status);",
          "462:     return;",
          "463:   }",
          "468:  calc_secret_shares(decrypted_dkg_secret, secret_shares, _t, _n);",
          "469:  free(decrypted_dkg_secret);",
          "475:   uint32_t decr_len ;",
          "476:   decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "477:   if(  *err_status != 0 ){",
          "478:     snprintf(err_string, BUF_LEN,\"decrypt_dkg_secret failed with status %d\", *err_status);",
          "479:     return;",
          "480:   }",
          "484:   free(decrypted_dkg_secret);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         public void gen_dkg_secret (",
          "64:                      [user_check] int *err_status,",
          "65:                      [out, count = 1024] char* err_string,",
          "67:                      [user_check] uint32_t * enc_len,",
          "68:                      size_t _t);",
          "70:         public void decrypt_dkg_secret (",
          "71:                              [user_check] int *err_status,",
          "72:                              [out, count = 1024] char* err_string,",
          "77:         public void get_secret_shares (",
          "78:                                 [user_check] int *err_status,",
          "79:                                 [out, count = 1024] char* err_string,",
          "83:                                 unsigned _t,",
          "84:                                 unsigned _n);",
          "86:          public void get_public_shares (",
          "87:                                 [user_check] int *err_status,",
          "88:                                 [out, count = 1024] char* err_string,",
          "90:                                 uint32_t enc_len,",
          "91:                                 [out, count = 10000] char* public_shares,",
          "92:                                 unsigned _t,",
          "",
          "[Removed Lines]",
          "66:                      [out, count = 3650] uint8_t* encrypted_dkg_secret,",
          "73:                              [in, count = 3650] uint8_t* encrypted_dkg_secret,",
          "74:                              [out, count = 3650] uint8_t* decrypted_dkg_secret,",
          "75:                              uint32_t enc_len);",
          "80:                                 [in, count = 3650] uint8_t* encrypted_dkg_secret,",
          "81:                                 uint32_t enc_len,",
          "82:                                 [out, count = 3650] char* secret_shares,",
          "89:                                 [in, count = 3650] uint8_t* decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "66:                      [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "73:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "74:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "75:                              [user_check] uint32_t* dec_len);",
          "80:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                                 [user_check] uint32_t* dec_len,",
          "82:                                 [out, count = 2490] char* secret_shares,",
          "89:                                 [in, count = 3050] uint8_t* decrypted_dkg_secret,",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define ADD_ENTROPY_SIZE 32",
          "32: #define ECDSA_SKEY_LEN 65",
          "33: #define ECDSA_SKEY_BASE 16",
          "",
          "[Removed Lines]",
          "29: #define  DKG_BUFER_LENGTH 3060",
          "30: #define  DKG_MAX_SEALED_LEN 3650",
          "",
          "[Added Lines]",
          "29: #define  DKG_BUFER_LENGTH 2490//3060",
          "30: #define  DKG_MAX_SEALED_LEN 3050",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:             else",
          "84:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "85:         }",
          "87:         {",
          "88:             Json::Value p;",
          "90:             p[\"t\"] = t;",
          "91:             Json::Value result = this->CallMethod(\"generateDKGPoly\",p);",
          "92:             if (result.isObject())",
          "",
          "[Removed Lines]",
          "86:         Json::Value generateDKGPoly(const std::string& keyName, int t) throw (jsonrpc::JsonRpcException)",
          "89:             p[\"keyName\"] = keyName;",
          "",
          "[Added Lines]",
          "86:         Json::Value generateDKGPoly(const std::string& polyName, int t) throw (jsonrpc::JsonRpcException)",
          "89:             p[\"polyName\"] = polyName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:             else",
          "95:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "96:         }",
          "97: };",
          "99: #endif //JSONRPC_CPP_STUB_STUBCLIENT_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:         Json::Value getVerificationVector(const std::string& polyName, int n, int t) throw (jsonrpc::JsonRpcException)",
          "98:         {",
          "99:             Json::Value p;",
          "100:             p[\"polyName\"] = polyName;",
          "101:             p[\"n\"] = n;",
          "102:             p[\"t\"] = t;",
          "103:             Json::Value result = this->CallMethod(\"getVerificationVector\",p);",
          "104:             if (result.isObject())",
          "105:                 return result;",
          "106:             else",
          "107:                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "108:         }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #include \"BLSCrypto.h\"",
          "57: #include \"ServerInit.h\"",
          "60: #include \"RPCException.h\"",
          "61: #include \"LevelDB.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #include \"DKGCrypto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:   printf(\"gen_dkg_secret completed with status: %d %s \\n\", err_status, errMsg);",
          "274:   printf(\"\\n Length: %d \\n\", enc_len);",
          "278:   char* errMsg1 = (char*) calloc(1024,1);",
          "281:   REQUIRE(status == SGX_SUCCESS);",
          "283:   printf(\"\\ndecrypt_dkg_secret completed with status: %d %s \\n\", err_status, errMsg1);",
          "284:   printf(\"decrypted secret %s \\n\\n\", secret);",
          "286:   free(errMsg);",
          "287:   free(errMsg1);",
          "",
          "[Removed Lines]",
          "276:   char* secret = (char*)calloc(DKG_MAX_SEALED_LEN, sizeof(char));",
          "280:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, enc_len);",
          "",
          "[Added Lines]",
          "277:   char* secret = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "281:   uint32_t dec_len;",
          "282:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &dec_len);",
          "287:   printf (\"secret length %d \\n\", strlen(secret));",
          "288:   printf (\"decr length %d \\n\", dec_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:   return tokens;",
          "314: }",
          "317:   libff::init_alt_bn128_params();",
          "318:   std::string str(koefs);",
          "319:   std::string delim;",
          "",
          "[Removed Lines]",
          "316: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "",
          "[Added Lines]",
          "320: std::vector<std::string> SplitStringTest(const char* koefs, const char symbol){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "354:  TEST_CASE( \"DKG secret shares test\", \"[dkg-s_shares]\" ) {",
          "357:   init_enclave();",
          "358:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "360:   char* errMsg = (char*) calloc(1024,1);",
          "",
          "[Removed Lines]",
          "355:   libff::init_alt_bn128_params();",
          "",
          "[Added Lines]",
          "362:   libff::init_alt_bn128_params();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:   REQUIRE(status == SGX_SUCCESS);",
          "368:   printf(\"gen_dkg_secret completed with status: %d %s \\n\", err_status, errMsg);",
          "369:   printf(\"\\n Length: %d \\n\", enc_len);",
          "371:   char* errMsg1 = (char*) calloc(1024,1);",
          "373:   char colon = ':';",
          "376:   REQUIRE(status == SGX_SUCCESS);",
          "377:   printf(\"\\nget_secret_shares status: %d %s \\n\", err_status, errMsg1);",
          "378:   printf(\"secret shares %s \\n\\n\", secret_shares);",
          "380:   std::vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "405:   free(errMsg);",
          "406:   free(errMsg1);",
          "",
          "[Removed Lines]",
          "374:   char* secret_shares = (char*)calloc(DKG_MAX_SEALED_LEN, 1);",
          "375:   status = get_secret_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, enc_len, secret_shares, t, n);",
          "382:   char* secret = (char*)calloc(DKG_MAX_SEALED_LEN, sizeof(char));",
          "383:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, enc_len);",
          "384:   REQUIRE(status == SGX_SUCCESS);",
          "387:   signatures::Dkg dkg_obj(t,n);",
          "389:   std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "390:   std::vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "391:   printf(\"calculated secret length %d : \\n\", s_shares_dkg.size());",
          "392:   for ( int  i = 0; i < s_shares_dkg.size(); i++){",
          "393:     libff::alt_bn128_Fr cur_share = s_shares_dkg.at(i);",
          "394:     mpz_t(sshare);",
          "395:     mpz_init(sshare);",
          "396:     cur_share.as_bigint().to_mpz(sshare);",
          "397:     char arr[mpz_sizeinbase (sshare, 10) + 2];",
          "398:     char* share_str = mpz_get_str(arr, 10, sshare);",
          "399:     printf(\" %s \\n\", share_str);",
          "400:     mpz_clear(sshare);",
          "401:   }",
          "403:   REQUIRE(s_shares == s_shares_dkg);",
          "",
          "[Added Lines]",
          "377:   for ( int i = 0 ; i < enc_len; i++)",
          "383:   char* secret_shares = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "384:   uint32_t dec_len = enc_len;",
          "386:   status = get_secret_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, &dec_len, secret_shares, t, n);",
          "393:  char* secret = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "394:  status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &dec_len);",
          "395:  REQUIRE(status == SGX_SUCCESS);",
          "398:  signatures::Dkg dkg_obj(t,n);",
          "400:  std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "401:  std::vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "402:  printf(\"calculated secret length %d : \\n\", s_shares_dkg.size());",
          "403:  for ( int  i = 0; i < s_shares_dkg.size(); i++){",
          "404:    libff::alt_bn128_Fr cur_share = s_shares_dkg.at(i);",
          "405:    mpz_t(sshare);",
          "406:    mpz_init(sshare);",
          "407:    cur_share.as_bigint().to_mpz(sshare);",
          "408:    char arr[mpz_sizeinbase (sshare, 10) + 2];",
          "409:    char* share_str = mpz_get_str(arr, 10, sshare);",
          "410:    printf(\" %s \\n\", share_str);",
          "411:    mpz_clear(sshare);",
          "412:  }",
          "414:  REQUIRE(s_shares == s_shares_dkg);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "413: TEST_CASE( \"DKG public shares test\", \"[dkg-pub_shares]\" ) {",
          "416:   init_enclave();",
          "417:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:   libff::init_alt_bn128_params();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "433:   char* public_shares = (char*)calloc(10000, 1);",
          "434:   status = get_public_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, enc_len, public_shares, t, n);",
          "435:   REQUIRE(status == SGX_SUCCESS);",
          "438:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "439:   std::vector <libff::alt_bn128_G2> pub_shares_G2;",
          "440:   for ( int i = 0; i < G2_strings.size(); i++){",
          "441:     std::vector <std::string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "442:     libff::alt_bn128_G2 el = VectStringToG2(koef_str);",
          "445:     pub_shares_G2.push_back(VectStringToG2(koef_str));",
          "446:   }",
          "448:   char* secret = (char*)calloc(DKG_MAX_SEALED_LEN, sizeof(char));",
          "450:   REQUIRE(status == SGX_SUCCESS);",
          "451:   printf(\"\\ndecrypt_dkg_secret completed with status: %d %s \\n\", err_status, errMsg1);",
          "",
          "[Removed Lines]",
          "449:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, enc_len);",
          "",
          "[Added Lines]",
          "448:   printf(\"\\nget_public_shares status: %d error %s \\n\\n\", err_status, errMsg1);",
          "449:   printf(\" LEN: %d \\n\", strlen(public_shares));",
          "450:   printf(\" result: %s \\n\", public_shares);",
          "463:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &enc_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "644:     } catch (JsonRpcException &e) {",
          "645:         cerr << e.what() << endl;",
          "646:     }",
          "",
          "[Removed Lines]",
          "642:           cout << c.blsSignMessageHash(TEST_BLS_KEY_NAME, \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\", 2,2,1 );",
          "",
          "[Added Lines]",
          "657:         cout << c.getVerificationVector(\"polyy\", 5,  5);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a0d5457cf62cd1e4b4b28fd4b7faa746fdc55b1",
      "candidate_info": {
        "commit_hash": "1a0d5457cf62cd1e4b4b28fd4b7faa746fdc55b1",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/1a0d5457cf62cd1e4b4b28fd4b7faa746fdc55b1",
        "files": [
          "DKGCrypto.cpp",
          "Makefile.am",
          "ServerInit.cpp",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2003 Add changed files to git",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "Makefile.am||Makefile.am",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"sgxwallet.h\"",
          "27: #include <iostream>",
          "30: #include <memory>",
          "31: #include \"SGXWalletServer.hpp\"",
          "32: #include \"RPCException.h\"",
          "",
          "[Removed Lines]",
          "29: #include <memory>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: COMMON_ENCLAVE_SRC = secure_enclave_u.c secure_enclave_u.h",
          "69: sgxwallet_SOURCES = sgxwallet.c SGXWalletServer.cpp SGXRegistrationServer.cpp CSRManagerServer.cpp RPCException.cpp  BLSCrypto.cpp ECDSACrypto.cpp \\",
          "73: nodist_sgxwallet_SOURCES = $(COMMON_ENCLAVE_SRC)",
          "",
          "[Removed Lines]",
          "70: DKGCrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp ServerDataChecker.cpp $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "70: DKGCrypto.cpp ServerInit.cpp BLSPrivateKeyShareSGX.cpp LevelDB.cpp ServerDataChecker.cpp SEKManager.cpp $(COMMON_SRC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: testw_SOURCES=testw.cpp stubclient.cpp SGXWalletServer.cpp  RPCException.cpp BLSCrypto.cpp ServerInit.cpp LevelDB.cpp \\",
          "106: nodist_testw_SOURCES=${nodist_sgxwallet_SOURCES}",
          "107: EXTRA_testw_DEPENDENCIES=${EXTRA_sgxwallet_DEPENDENCIES}",
          "108: testw_LDADD= ${sgxwallet_LDADD}",
          "",
          "[Removed Lines]",
          "105:  DKGCrypto.cpp BLSPrivateKeyShareSGX.cpp ECDSACrypto.cpp ServerDataChecker.cpp  SGXRegistrationServer.cpp CSRManagerServer.cpp $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "105:  DKGCrypto.cpp BLSPrivateKeyShareSGX.cpp ECDSACrypto.cpp ServerDataChecker.cpp  SEKManager.cpp SGXRegistrationServer.cpp CSRManagerServer.cpp $(COMMON_SRC)",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include \"BLSCrypto.h\"",
          "53: #include \"ServerInit.h\"",
          "55: #include <iostream>",
          "57: #include \"spdlog/spdlog.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #include \"SEKManager.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     std::shared_ptr<std::string> encr_SEK_ptr = levelDb->readString(\"SEK\");",
          "89:     if (encr_SEK_ptr == nullptr){",
          "90:       spdlog::info(\"SEK was not created yet\");",
          "91:     }",
          "93: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:       generate_SEK();",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include \"../sgxwallet_common.h\"",
          "58: void *(*gmp_realloc_func)(void *, size_t, size_t);",
          "",
          "[Removed Lines]",
          "56: uint8_t Decrypted_dkg_poly[DKG_BUFER_LENGTH] ;",
          "",
          "[Added Lines]",
          "56: uint8_t Decrypted_dkg_poly[DKG_BUFER_LENGTH];",
          "57: uint8_t SEK[32];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "900:   unsigned char* rand_char = (unsigned char*)malloc(16);",
          "901:   sgx_read_rand( rand_char, 16);",
          "903:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, 32);",
          "906:   if( status !=  SGX_SUCCESS) {",
          "907:     snprintf(err_string, BUF_LEN,\"seal SEK failed\");",
          "",
          "[Removed Lines]",
          "905:   sgx_status_t status = sgx_seal_data(0, NULL, 32, (uint8_t *)rand_char, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "",
          "[Added Lines]",
          "904:   carray2Hex(rand_char, 16, SEK);",
          "907:   memcpy(err_string, 32, SEK);",
          "909:   sgx_status_t status = sgx_seal_data(0, NULL, 32, (uint8_t *)SEK, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "915: }",
          "",
          "[Removed Lines]",
          "914:     free(rand_char);",
          "",
          "[Added Lines]",
          "918:   free(rand_char);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f530541990483155980905dc93e6ffd3ea65f448",
      "candidate_info": {
        "commit_hash": "f530541990483155980905dc93e6ffd3ea65f448",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/f530541990483155980905dc93e6ffd3ea65f448",
        "files": [
          "SEKManager.cpp",
          "SEKManager.h",
          "SGXWalletServer.cpp",
          "sgxwallet_common.h"
        ],
        "message": "bug/SKALE-3536 Turns out thread number was not set properly in HTTP server",
        "before_after_code_files": [
          "SEKManager.cpp||SEKManager.cpp",
          "SEKManager.h||SEKManager.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "sgxwallet_common.h||sgxwallet_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp"
          ],
          "candidate": [
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: }",
          "213: }",
          "215: void setSEK(shared_ptr <string> hex_encrypted_SEK) {",
          "",
          "[Removed Lines]",
          "208: void  reinitEnclave() {",
          "212:     exit(3);",
          "",
          "[Added Lines]",
          "209: static std::atomic<int> isSgxWalletExiting(0);",
          "211: void  safeExit() {",
          "215:     auto previousValue = isSgxWalletExiting.exchange(1);",
          "217:     if (previousValue != 1)",
          "218:         exit(3);",
          "",
          "---------------"
        ],
        "SEKManager.h||SEKManager.h": [
          "File: SEKManager.h -> SEKManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: EXTERNC void setSEK();",
          "",
          "[Removed Lines]",
          "50: EXTERNC void reinitEnclave();",
          "",
          "[Added Lines]",
          "50: EXTERNC void safeExit();",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     LevelDB::getLevelDb()->visitKeys(&v, 100000000);",
          "112: }",
          "114: int SGXWalletServer::initHttpsServer(bool _checkCerts) {",
          "115:     spdlog::info(\"Entering {}\", __FUNCTION__);",
          "116:     string rootCAPath = string(SGXDATA_FOLDER) + \"cert_data/rootCA.pem\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #ifdef SGX_HW_SIM",
          "116: #define NUM_THREADS 16",
          "117: #else",
          "118: #define NUM_THREADS 64",
          "119: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:     }",
          "158:     server = make_shared<SGXWalletServer>(*httpServer,",
          "159:                                           JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "",
          "[Removed Lines]",
          "150:     int numThreads = 64;",
          "152: #if SGX_MODE == SIM",
          "153:    numThreads = 16;",
          "154: #endif",
          "157:     httpServer = make_shared<HttpServer>(BASE_PORT, certPath, keyPath, rootCAPath, _checkCerts, numThreads);",
          "",
          "[Added Lines]",
          "158:     httpServer = make_shared<HttpServer>(BASE_PORT, certPath, keyPath, rootCAPath, _checkCerts,",
          "159:                                          NUM_THREADS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170: int SGXWalletServer::initHttpServer() { //without ssl",
          "171:     spdlog::info(\"Entering {}\", __FUNCTION__);",
          "173:     server = make_shared<SGXWalletServer>(*httpServer,",
          "174:                                           JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "175:     if (!server->StartListening()) {",
          "",
          "[Removed Lines]",
          "172:     httpServer = make_shared<HttpServer>(BASE_PORT + 3);",
          "",
          "[Added Lines]",
          "174:     httpServer = make_shared<HttpServer>(BASE_PORT + 3, \"\", \"\", \"\", false,",
          "175:                                          NUM_THREADS);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:     result[\"encryptedKey\"] = \"\";",
          "277:     try {",
          "297:     } HANDLE_SGX_EXCEPTION(result)",
          "299:     RETURN_SUCCESS(result);",
          "",
          "[Removed Lines]",
          "278:       if (!checkECDSAKeyName(_keyShareName)) {",
          "279:           throw SGXException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "280:       }",
          "282:       string hashTmp = _keyShare;",
          "283:       if (hashTmp[0] == '0' && (hashTmp[1] == 'x' || hashTmp[1] == 'X')) {",
          "284:           hashTmp.erase(hashTmp.begin(), hashTmp.begin() + 2);",
          "285:       }",
          "287:       if (!checkHex(hashTmp)) {",
          "288:           throw SGXException(INVALID_HEX, \"Invalid ECDSA key share, please use hex\");",
          "289:       }",
          "291:       string encryptedKey = encryptECDSAKey(hashTmp);",
          "293:       writeDataToDB(_keyShareName, encryptedKey);",
          "295:       result[\"encryptedKey\"] = encryptedKey;",
          "296:       result[\"publicKey\"] = getECDSAPubKey(encryptedKey);",
          "",
          "[Added Lines]",
          "281:         if (!checkECDSAKeyName(_keyShareName)) {",
          "282:             throw SGXException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "283:         }",
          "285:         string hashTmp = _keyShare;",
          "286:         if (hashTmp[0] == '0' && (hashTmp[1] == 'x' || hashTmp[1] == 'X')) {",
          "287:             hashTmp.erase(hashTmp.begin(), hashTmp.begin() + 2);",
          "288:         }",
          "290:         if (!checkHex(hashTmp)) {",
          "291:             throw SGXException(INVALID_HEX, \"Invalid ECDSA key share, please use hex\");",
          "292:         }",
          "294:         string encryptedKey = encryptECDSAKey(hashTmp);",
          "296:         writeDataToDB(_keyShareName, encryptedKey);",
          "298:         result[\"encryptedKey\"] = encryptedKey;",
          "299:         result[\"publicKey\"] = getECDSAPubKey(encryptedKey);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "580:     RETURN_SUCCESS(result);",
          "581: }",
          "584:     spdlog::info(\"Entering {}\", __FUNCTION__);",
          "585:     INIT_RESULT(result)",
          "",
          "[Removed Lines]",
          "583: Json::Value SGXWalletServer::calculateAllBLSPublicKeysImpl(const Json::Value& publicShares, int t, int n) {",
          "",
          "[Added Lines]",
          "586: Json::Value SGXWalletServer::calculateAllBLSPublicKeysImpl(const Json::Value &publicShares, int t, int n) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "607:             }",
          "608:         }",
          "611:         for (int i = 0; i < n; ++i) {",
          "612:             public_shares[i] = publicShares[i].asString();",
          "613:         }",
          "618:             throw SGXException(UNKNOWN_ERROR, \"\");",
          "619:         }",
          "",
          "[Removed Lines]",
          "610:         vector<string> public_shares(n);",
          "615:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
          "617:         if (public_keys.size() != (uint64_t)n) {",
          "",
          "[Added Lines]",
          "613:         vector <string> public_shares(n);",
          "618:         vector <string> public_keys = calculateAllBlsPublicKeys(public_shares);",
          "620:         if (public_keys.size() != (uint64_t) n) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "654:             }",
          "655:         }",
          "663:         LevelDB::getLevelDb()->deleteKey(_polyName);",
          "665:         string encryptedSecretShareName = \"encryptedSecretShare:\" + _polyName;",
          "",
          "[Removed Lines]",
          "657:        for (int i = 0; i < _n; i++) {",
          "658:            string name = _polyName + \"_\" + to_string(i) + \":\";",
          "659:            LevelDB::getLevelDb()->deleteDHDKGKey(name);",
          "660:            string shareG2_name = \"shareG2_\" + _polyName + \"_\" + to_string(i) + \":\";",
          "661:            LevelDB::getLevelDb()->deleteKey(shareG2_name);",
          "662:        }",
          "",
          "[Added Lines]",
          "660:         for (int i = 0; i < _n; i++) {",
          "661:             string name = _polyName + \"_\" + to_string(i) + \":\";",
          "662:             LevelDB::getLevelDb()->deleteDHDKGKey(name);",
          "663:             string shareG2_name = \"shareG2_\" + _polyName + \"_\" + to_string(i) + \":\";",
          "664:             LevelDB::getLevelDb()->deleteKey(shareG2_name);",
          "665:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "762:     return getBLSPublicKeyShareImpl(blsKeyName);",
          "763: }",
          "766:     return calculateAllBLSPublicKeysImpl(publicShares, t, n);",
          "767: }",
          "770:     return importECDSAKeyImpl(keyShare, keyShareName);",
          "771: }",
          "",
          "[Removed Lines]",
          "765: Json::Value SGXWalletServer::calculateAllBLSPublicKeys(const Json::Value& publicShares, int t, int n) {",
          "769: Json::Value SGXWalletServer::importECDSAKey(const std::string& keyShare, const std::string& keyShareName) {",
          "",
          "[Added Lines]",
          "768: Json::Value SGXWalletServer::calculateAllBLSPublicKeys(const Json::Value &publicShares, int t, int n) {",
          "772: Json::Value SGXWalletServer::importECDSAKey(const std::string &keyShare, const std::string &keyShareName) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "787:     return importBLSKeyShareImpl(_keyShare, _keyShareName);",
          "788: }",
          "791:     return blsSignMessageHashImpl(_keyShareName, _messageHash, _t, _n);",
          "792: }",
          "",
          "[Removed Lines]",
          "790: Json::Value SGXWalletServer::blsSignMessageHash(const string &_keyShareName, const string &_messageHash, int _t, int _n) {",
          "",
          "[Added Lines]",
          "793: Json::Value",
          "794: SGXWalletServer::blsSignMessageHash(const string &_keyShareName, const string &_messageHash, int _t, int _n) {",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: } \\",
          "122: if (status != SGX_SUCCESS || errStatus == 3) { \\",
          "123: spdlog::error(__FUNCTION__);                   \\",
          "126: } \\",
          "127: } while ((status != SGX_SUCCESS || errStatus == 3) && __ATTEMPTS__ < 2);",
          "",
          "[Removed Lines]",
          "124: spdlog::error(\"Restarting sgx on status errStatus... {} {}\", status, errStatus);                    \\",
          "125: reinitEnclave(); \\",
          "",
          "[Added Lines]",
          "124: spdlog::error(\"Exiting sgx on status errStatus... {} {}\", status, errStatus);                    \\",
          "125: safeExit(); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133: if (status != SGX_SUCCESS || *errStatus == 3) { \\",
          "134: spdlog::error(__FUNCTION__);\\",
          "135: spdlog::error(\"Restarting sgx on status errStatus... {} {}\", status, *errStatus);                            \\",
          "137: } \\",
          "138: } while ((status != SGX_SUCCESS || *errStatus == 3) && __ATTEMPTS__ < 2);",
          "142: #endif //SGXWALLET_SGXWALLET_COMMON_H",
          "",
          "[Removed Lines]",
          "136: reinitEnclave(); \\",
          "",
          "[Added Lines]",
          "136: safeExit(); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a9c61fd9bbb46da170067cfd147d388fb691fcb",
      "candidate_info": {
        "commit_hash": "3a9c61fd9bbb46da170067cfd147d388fb691fcb",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/3a9c61fd9bbb46da170067cfd147d388fb691fcb",
        "files": [
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "Revert \"SKALE-3067-cleanup-sgx\"\n\nThis reverts commit 2b3422d050170fc122497310ce87de2bada774cd.",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1341: void",
          "1342: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
          "1344:     LOG_DEBUG(__FUNCTION__);",
          "1346:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *) decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "1343:                            uint8_t *decrypted_dkg_secret, uint32_t *dec_len) {",
          "",
          "[Added Lines]",
          "1343:                            uint8_t *decrypted_dkg_secret,",
          "1344:                            uint32_t *dec_len) {",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define ECDSA_ENCR_LEN 93",
          "4: #define ECDSA_BIN_LEN 33",
          "5: #define SMALL_BUF_SIZE 1024",
          "9: enclave {",
          "11:  trusted {",
          "",
          "[Removed Lines]",
          "6: #define SMALL_BUF_SIZE3 3072",
          "7: #define SMALL_BUF_SIZE10 10240",
          "8: #define SMALL_BUF_SIZE7 7168",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:         public void trustedGenDkgSecret (",
          "57:                                 [out] int *errStatus,",
          "58:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "60:                                 [out] uint32_t * enc_len,",
          "61:                                 size_t _t);",
          "63:         public void trustedDecryptDkgSecret (",
          "64:                              [out] int *errStatus,",
          "65:                              [out, count = SMALL_BUF_SIZE] char* err_string,",
          "68:                              [out] uint32_t* dec_len);",
          "70:         public void trustedGetSecretShares (",
          "71:                                 [out] int *errStatus,",
          "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "74:                                 [out] uint32_t* dec_len,",
          "76:                                 unsigned _t,",
          "77:                                 unsigned _n);",
          "79:         public void trustedGetPublicShares (",
          "80:                                 [out] int *errStatus,",
          "81:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "83:                                 uint32_t enc_len,",
          "85:                                 unsigned _t,",
          "86:                                 unsigned _n);",
          "",
          "[Removed Lines]",
          "59:                                 [out, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "66:                              [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "67:                              [out, count = SMALL_BUF_SIZE3] uint8_t* decrypted_dkg_secret,",
          "73:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "75:                                 [out, count = SMALL_BUF_SIZE3] char* secret_shares,",
          "82:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "84:                                 [out, count = SMALL_BUF_SIZE10] char* public_shares,",
          "",
          "[Added Lines]",
          "56:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "63:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "64:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "70:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "72:                                 [out, count = 2490] char* secret_shares,",
          "79:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                                 [out, count = 10000] char* public_shares,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         public void trustedSetEncryptedDkgPoly( [out] int *errStatus,",
          "100:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "103:         public void trustedGetEncryptedSecretShare(",
          "104:                                 [out]int *errStatus,",
          "105:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "106:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "107:                                 [out] uint32_t* dec_len,",
          "110:                                 [in, string] char* pub_keyB,",
          "111:                                 uint8_t _t,",
          "112:                                 uint8_t _n,",
          "",
          "[Removed Lines]",
          "101:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_poly);",
          "108:                                 [out, count = SMALL_BUF_SIZE3] char* result_str,",
          "109:                                 [out, count = SMALL_BUF_SIZE3] char* s_shareG2,",
          "",
          "[Added Lines]",
          "98:                                 [in, count = 3050] uint8_t* encrypted_poly);",
          "105:                                 [out, count = 193] char* result_str,",
          "106:                                 [out, count = 320] char* s_shareG2,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "138:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "139:                                 uint64_t key_len,",
          "142:         public void trustedComplaintResponse(",
          "143:                                 [out] int *errStatus,",
          "144:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "146:                                 [out] uint32_t* dec_len,",
          "148:                                 uint8_t _t,",
          "149:                                 uint8_t _n,",
          "150:                                 uint8_t ind1);",
          "",
          "[Removed Lines]",
          "140:                                 [out, count = SMALL_BUF_SIZE] char* bls_pub_key);",
          "145:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_dkg_secret,",
          "147:                                 [out, count = SMALL_BUF_SIZE] char* s_shareG2,",
          "",
          "[Added Lines]",
          "137:                                 [out, count = 320] char* bls_pub_key);",
          "142:                                 [in, count = 3050] uint8_t *encrypted_dkg_secret,",
          "144:                                 [out, count = 320] char* s_shareG2,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "155:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "156:                                 [out] uint32_t *enc_len,",
          "159:         public void trustedSetSEK(",
          "160:                                 [out] int *errStatus,",
          "",
          "[Removed Lines]",
          "157:                                 [out, count = SMALL_BUF_SIZE] char* hex_SEK);",
          "",
          "[Added Lines]",
          "154:                                 [out, count = 65] char* hex_SEK);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:         public void trustedGenDkgSecretAES (",
          "214:                                 [out] int *errStatus,",
          "215:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "217:                                 [out] uint32_t * enc_len, size_t _t);",
          "219:         public void trustedDecryptDkgSecretAES (",
          "220:                                 [out] int *errStatus,",
          "221:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "224:                                 [user_check] uint32_t* dec_len);",
          "226:         public void trustedSetEncryptedDkgPolyAES(",
          "227:                                 [out] int *errStatus,",
          "228:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "230:                                 [out] uint64_t* enc_len);",
          "232:         public void trustedGetEncryptedSecretShareAES(",
          "",
          "[Removed Lines]",
          "216:                                 [out, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "222:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "223:                                 [out, count = SMALL_BUF_SIZE3] uint8_t* decrypted_dkg_secret,",
          "229:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_poly,",
          "",
          "[Added Lines]",
          "213:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "219:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "220:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "234:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "235:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "236:                                 [out] uint32_t* dec_len,",
          "239:                                 [in, string] char* pub_keyB,",
          "240:                                 uint8_t _t,",
          "241:                                 uint8_t _n,",
          "",
          "[Removed Lines]",
          "237:                                 [out, count = SMALL_BUF_SIZE] char* result_str,",
          "238:                                 [out, count = SMALL_BUF_SIZE] char* s_shareG2,",
          "",
          "[Added Lines]",
          "234:                                 [out, count = 193] char* result_str,",
          "235:                                 [out, count = 320] char* s_shareG2,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "244:         public void trustedGetPublicSharesAES(",
          "245:                                 [out] int *errStatus,",
          "246:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "248:                                 uint32_t enc_len,",
          "250:                                 unsigned _t,",
          "251:                                 unsigned _n);",
          "",
          "[Removed Lines]",
          "247:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "249:                                 [out, count = SMALL_BUF_SIZE10] char* public_shares,",
          "",
          "[Added Lines]",
          "244:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "246:                                 [out, count = 10000] char* public_shares,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "264:         public void trustedCreateBlsKeyAES(",
          "265:                                 [out]int *errStatus,",
          "266:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "268:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "269:                                 uint64_t key_len,",
          "270:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "",
          "[Removed Lines]",
          "267:                                 [in, count = SMALL_BUF_SIZE7] const char* s_shares,",
          "",
          "[Added Lines]",
          "264:                                 [in, count = 6145] const char* s_shares,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "284:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "285:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "286:                                 uint64_t key_len,",
          "288:  };",
          "290:  untrusted {",
          "",
          "[Removed Lines]",
          "287:                                 [out, count = SMALL_BUF_SIZE] char* bls_pub_key);",
          "",
          "[Added Lines]",
          "284:                                 [out, count = 320] char* bls_pub_key);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90cab3b6fcbbc6818ade5e55d5819d6bc886f052",
      "candidate_info": {
        "commit_hash": "90cab3b6fcbbc6818ade5e55d5819d6bc886f052",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/90cab3b6fcbbc6818ade5e55d5819d6bc886f052",
        "files": [
          "ECDSACrypto.cpp",
          "Log.h",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-2977 fix hash ecdsa",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "Log.h||Log.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     }",
          "181:     status = trustedEcdsaSignAES(eid, &errStatus,",
          "183:                                  signatureR.data(),",
          "184:                                  signatureS.data(), &signatureV, base);",
          "186:     if (errStatus != 0) {",
          "187:         throw SGXException(666, errMsg.data());",
          "188:     }",
          "190:     if (status != SGX_SUCCESS) {",
          "192:         throw SGXException(666, \"failed to sign\");",
          "193:     }",
          "194:     signatureVector.at(0) = to_string(signatureV);",
          "",
          "[Removed Lines]",
          "182:             errMsg.data(), encryptedKey.data(), decLen, (unsigned char *) hashHex,",
          "191:         spdlog::error(\"failed to sign {}\", status);",
          "",
          "[Added Lines]",
          "182:             errMsg.data(), encryptedKey.data(), decLen, hashHex,",
          "187:         spdlog::error(\"failed to sign {}\", errStatus);",
          "192:         spdlog::error(\"failed to sign in enclave {}\", status);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:     pubKeyStr = getECDSAPubKey(encryptedKeyHex);",
          "207:     if (!verifyECDSASig(pubKeyStr, hashHex, signatureR.data(), signatureS.data(), base)) {",
          "208:         throw SGXException(667, \"ECDSA did not verify\");",
          "209:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:         spdlog::error(\"failed to verify ecdsa signature\");",
          "",
          "---------------"
        ],
        "Log.h||Log.h": [
          "File: Log.h -> Log.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #define HANDLE_SGX_EXCEPTION(_RESULT_) catch (SGXException &__e) { Log::handleSGXException(_RESULT_, __e);} \\",
          "79:         catch (exception  &__e) {spdlog::error(__e.what()); _RESULT_[\"status\"] = 1; _RESULT_[\"errorMessage\"] = __e.what();}",
          "85: #endif",
          "",
          "[Removed Lines]",
          "81: #define READ_LOCK(__M__)   ReadLock __rlock(__M__);",
          "82: #define WRITE_LOCK(__M__)  WriteLock __wlock(__M__);",
          "83: #define LOCK(__M__)  lock_guard<recursive_mutex> lock(__M__);",
          "",
          "[Added Lines]",
          "81: #define READ_LOCK(__M__) ReadLock __rlock(__M__);",
          "82: #define WRITE_LOCK(__M__) WriteLock __wlock(__M__);",
          "83: #define LOCK(__M__) lock_guard<recursive_mutex> lock(__M__);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:         if (hashTmp[0] == '0' && (hashTmp[1] == 'x' || hashTmp[1] == 'X')) {",
          "340:             hashTmp.erase(hashTmp.begin(), hashTmp.begin() + 2);",
          "341:         }",
          "346:         if (!checkECDSAKeyName(_keyName)) {",
          "347:             throw SGXException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "",
          "[Removed Lines]",
          "342:         while (hashTmp[0] == '0') {",
          "343:             hashTmp.erase(hashTmp.begin(), hashTmp.begin() + 1);",
          "344:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "546:         if (!check_n_t(_t, _n)) {",
          "547:             throw SGXException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "548:         }",
          "551:         spdlog::debug(\"secret shares from json are - {}\", _secretShare);",
          "555:         bool res = CreateBLSShare(_blsKeyName, _secretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "556:         if (res) {",
          "",
          "[Removed Lines]",
          "549:         vector< string > sshares_vect;",
          "553:         shared_ptr< string > encryptedKeyHex_ptr = readFromDb(_ethKeyName);",
          "",
          "[Added Lines]",
          "549:         vector<string> sshares_vect;",
          "553:         shared_ptr<string> encryptedKeyHex_ptr = readFromDb(_ethKeyName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "579:         if (!checkName(_blsKeyName, \"BLS_KEY\")) {",
          "580:             throw SGXException(INVALID_BLS_NAME, \"Invalid BLSKey name\");",
          "581:         }",
          "583:         spdlog::debug(\"encr_bls_key_share is {}\", *encryptedKeyHex_ptr);",
          "584:         spdlog::debug(\"length is {}\", encryptedKeyHex_ptr->length());",
          "587:         for (uint8_t i = 0; i < 4; i++) {",
          "588:             result[\"blsPublicKeyShare\"][i] = public_key_vect.at(i);",
          "589:         }",
          "",
          "[Removed Lines]",
          "582:         shared_ptr <string> encryptedKeyHex_ptr = readFromDb(_blsKeyName);",
          "586:         vector <string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "",
          "[Added Lines]",
          "582:         shared_ptr<string> encryptedKeyHex_ptr = readFromDb(_blsKeyName);",
          "586:         vector<string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <boost/thread/shared_mutex.hpp>",
          "30: typedef boost::shared_mutex Lock;",
          "34: #include <jsonrpccpp/server/connectors/httpserver.h>",
          "35: #include <mutex>",
          "",
          "[Removed Lines]",
          "31: typedef boost::unique_lock< Lock >  WriteLock;",
          "32: typedef boost::shared_lock< Lock >  ReadLock;",
          "",
          "[Added Lines]",
          "31: typedef boost::unique_lock< Lock > WriteLock;",
          "32: typedef boost::shared_lock< Lock > ReadLock;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1097:     point_clear(Pkey_test);",
          "1098: }",
          "1103: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
          "1105:     LOG_DEBUG(__FUNCTION__);",
          "1112:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1100: static uint64_t sigCounter = 0;",
          "1101: static domain_parameters ecdsaCurve = NULL;",
          "1104:                          unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "1107:     if (!ecdsaCurve) {",
          "1108:         ecdsaCurve = domain_parameters_init();",
          "1109:         domain_parameters_load_curve(ecdsaCurve, secp256k1);",
          "1110:     }",
          "",
          "[Added Lines]",
          "1101:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "1104:     domain_parameters ecdsaCurve = domain_parameters_init();",
          "1105:     domain_parameters_load_curve(ecdsaCurve, secp256k1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1116:     if (status != 0) {",
          "1118:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1119:         return;",
          "1120:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:         domain_parameters_clear(ecdsaCurve);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1129:         snprintf(errString, BUF_LEN, \"invalid secret key\");",
          "1130:         LOG_ERROR(skey);",
          "1131:         mpz_clear(privateKeyMpz);",
          "1132:         return;",
          "1133:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1128:         domain_parameters_clear(ecdsaCurve);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1141:         mpz_clear(privateKeyMpz);",
          "1142:         mpz_clear(msgMpz);",
          "1144:         return;",
          "1145:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140:         domain_parameters_clear(ecdsaCurve);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1149:     signature_sign(sign, msgMpz, privateKeyMpz, ecdsaCurve);",
          "1175:     char arrM[mpz_sizeinbase(msgMpz, 16) + 2];",
          "1176:     mpz_get_str(arrM, 16, msgMpz);",
          "1177:     snprintf(errString, BUF_LEN, \"message is %s \", arrM);",
          "",
          "[Removed Lines]",
          "1151:     sigCounter++;",
          "1153:     if (sigCounter % 1000 == 0) {",
          "1155:         point Pkey = point_init();",
          "1157:         signature_extract_public_key(Pkey, privateKeyMpz, ecdsaCurve);",
          "1159:         if (!signature_verify(msgMpz, sign, Pkey, ecdsaCurve)) {",
          "1161:             snprintf(errString, BUF_LEN, \"signature is not verified! \");",
          "1163:             mpz_clear(privateKeyMpz);",
          "1164:             mpz_clear(msgMpz);",
          "1165:             domain_parameters_clear(ecdsaCurve);",
          "1166:             signature_free(sign);",
          "1167:             point_clear(Pkey);",
          "1169:             return;",
          "1170:         }",
          "1172:         point_clear(Pkey);",
          "1173:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1189:     mpz_clear(privateKeyMpz);",
          "1190:     mpz_clear(msgMpz);",
          "1191:     signature_free(sign);",
          "1192: }",
          "1194: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1166:     domain_parameters_clear(ecdsaCurve);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "205:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "206:                                 uint32_t enc_len,",
          "208:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
          "209:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
          "210:                                 [user_check] uint8_t* sig_v,",
          "",
          "[Removed Lines]",
          "207:                                 [in, count = SMALL_BUF_SIZE] unsigned char* hash,",
          "",
          "[Added Lines]",
          "207:                                 [in, count = SMALL_BUF_SIZE] const char* hash,",
          "",
          "---------------"
        ]
      }
    }
  ]
}