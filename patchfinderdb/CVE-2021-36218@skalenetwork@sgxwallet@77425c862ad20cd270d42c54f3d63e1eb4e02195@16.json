{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73eea1bea58a0d37904e8d668e714a8deaf340d7",
      "candidate_info": {
        "commit_hash": "73eea1bea58a0d37904e8d668e714a8deaf340d7",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/73eea1bea58a0d37904e8d668e714a8deaf340d7",
        "files": [
          "ServerInit.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     if (status != SGX_SUCCESS) {",
          "87:         if (status == SGX_ERROR_ENCLAVE_FILE_ACCESS) {",
          "90:         } else {",
          "93:         }",
          "94:         exit(1);",
          "95:     }",
          "97:     spdlog::info(\"Enclave created and started successfully\");",
          "100:     if (status != SGX_SUCCESS) {",
          "102:         exit(1);",
          "103:     }",
          "107: }",
          "",
          "[Removed Lines]",
          "88:             fprintf(stderr, \"sgx_create_enclave: %s: file not found\\n\", ENCLAVE_NAME);",
          "89:             fprintf(stderr, \"Did you forget to set LD_LIBRARY_PATH?\\n\");",
          "91:             spdlog::error(\"sgx_create_enclave_search failed\");",
          "92:             fprintf(stderr, \"%s: 0x%04x\\n\", ENCLAVE_NAME, status);",
          "99:     status = tgmp_init(eid);",
          "101:         fprintf(stderr, \"ECALL tgmp_init: 0x%04x\\n\", status);",
          "105:     spdlog::info(\"Enclave libtgmp library initialized successfully\");",
          "",
          "[Added Lines]",
          "88:             spdlog::error(\"sgx_create_enclave: {}: file not found\", ENCLAVE_NAME);",
          "89:             spdlog::error(\"Did you forget to set LD_LIBRARY_PATH?\");",
          "91:             spdlog::error(\"sgx_create_enclave_search failed {} {}\", ENCLAVE_NAME, status);",
          "98:     status = trusted_enclave_init(eid, 0);",
          "100:         spdlog::error(\"trusted_enclave_init failed: {}\", status);",
          "104:     spdlog::info(\"Enclave libtgmp library and logging initialized successfully\");",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #include \"enclave_common.h\"",
          "62: void *(*gmp_realloc_func)(void *, size_t, size_t);",
          "",
          "[Removed Lines]",
          "59: uint8_t Decrypted_dkg_poly[DKG_BUFER_LENGTH];",
          "",
          "[Added Lines]",
          "59: uint8_t decryptedDkgPoly[DKG_BUFER_LENGTH];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: void free_function(void *, size_t);",
          "76:     oc_printf(\"Initing tgmp library\\n\");",
          "77:     oc_realloc_func = &reallocate_function;",
          "78:     oc_free_func = &free_function;",
          "",
          "[Removed Lines]",
          "75: void tgmp_init() {",
          "",
          "[Added Lines]",
          "75: void trusted_enclave_init(uint32_t _logLevel) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616: void set_encrypted_dkg_poly(int *err_status, char *err_string, uint8_t *encrypted_poly) {",
          "618:     uint32_t decr_len;",
          "619:     sgx_status_t status = sgx_unseal_data(",
          "622:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "617:     memset(Decrypted_dkg_poly, 0, DKG_BUFER_LENGTH);",
          "620:             (const sgx_sealed_data_t *) encrypted_poly, NULL, 0, Decrypted_dkg_poly, &decr_len);",
          "",
          "[Added Lines]",
          "617:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "620:             (const sgx_sealed_data_t *) encrypted_poly, NULL, 0, decryptedDkgPoly, &decr_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "666:     char *s_share[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "671:         snprintf(err_string, BUF_LEN, \"\\nt does not match poly degree\\n\");",
          "672:         return;",
          "",
          "[Removed Lines]",
          "669:     if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0) {",
          "",
          "[Added Lines]",
          "669:     if (calc_secret_share(decryptedDkgPoly, s_share, _t, _n, ind) != 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1406: }",
          "1408: void set_encrypted_dkg_poly_aes(int *err_status, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "1412:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1409:     memset(Decrypted_dkg_poly, 0, DKG_BUFER_LENGTH);",
          "1410:     int status = AES_decrypt(encrypted_poly, *enc_len, Decrypted_dkg_poly);",
          "",
          "[Added Lines]",
          "1409:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1410:     int status = AES_decrypt(encrypted_poly, *enc_len, decryptedDkgPoly);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1456:     char *s_share[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "1463:         return;",
          "1464:     }",
          "1465:     snprintf(err_string + 88, BUF_LEN, \"\\nsecret share is %s\", s_share);",
          "",
          "[Removed Lines]",
          "1459:     if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0) {",
          "1462:         snprintf(err_string, BUF_LEN, Decrypted_dkg_poly);",
          "",
          "[Added Lines]",
          "1459:     if (calc_secret_share(decryptedDkgPoly, s_share, _t, _n, ind) != 0) {",
          "1462:         snprintf(err_string, BUF_LEN, decryptedDkgPoly);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   include \"sgx_tgmp.h\"",
          "15:   public void e_mpz_add(",
          "16:    [user_check] mpz_t *c, [user_check] mpz_t *a, [user_check] mpz_t *b",
          "",
          "[Removed Lines]",
          "13:   public void tgmp_init();",
          "",
          "[Added Lines]",
          "13:   public void trusted_enclave_init(uint32_t _logLevel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68c645da6ccd1826697f7cf099e9ae25fd7dff80",
      "candidate_info": {
        "commit_hash": "68c645da6ccd1826697f7cf099e9ae25fd7dff80",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/68c645da6ccd1826697f7cf099e9ae25fd7dff80",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/DHDkg.c"
        ],
        "message": "SKALE-3067 Cleaning up",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/DHDkg.c||secure_enclave/DHDkg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         return -2;",
          "42:     }",
          "46:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
          "47:         LOG_ERROR(\"Output buffer too small\");",
          "",
          "[Removed Lines]",
          "44:     auto len = strlen(message);",
          "",
          "[Added Lines]",
          "44:     uint64_t len = strlen(message);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
          "55:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
          "56:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
          "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "",
          "[Removed Lines]",
          "53:     auto msgLen = strlen(message);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_key,",
          "92:                                                    encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
          "94:                                                    encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "95:                                                    NULL, 0,",
          "96:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
          "",
          "[Removed Lines]",
          "93:                                                    message,",
          "",
          "[Added Lines]",
          "91:                                                    (unsigned char*) message,",
          "",
          "---------------"
        ],
        "secure_enclave/DHDkg.c||secure_enclave/DHDkg.c": [
          "File: secure_enclave/DHDkg.c -> secure_enclave/DHDkg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     int ret = -1;",
          "117:     if (!common_key) {",
          "118:         LOG_ERROR(\"session_key_recover: Null common_key\");",
          "119:         goto clean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     SAFE_CHAR_BUF(pb_keyB_x, 65);",
          "119:     SAFE_CHAR_BUF(pb_keyB_y, 65);",
          "122:     mpz_t skey;",
          "123:     mpz_init(skey);",
          "124:     point pub_keyB = point_init();",
          "125:     point session_key = point_init();",
          "127:     pb_keyB_x[64] = 0;",
          "128:     strncpy(pb_keyB_x, sshare + 64, 64);",
          "129:     strncpy(pb_keyB_y, sshare + 128, 64);",
          "130:     pb_keyB_y[64] = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:     }",
          "148:     if (mpz_set_str(skey, skey_str, 16) == -1) {",
          "149:         goto clean;",
          "",
          "[Removed Lines]",
          "135:     SAFE_CHAR_BUF(pb_keyB_x, 65);",
          "136:     strncpy(pb_keyB_x, sshare + 64, 64);",
          "137:     pb_keyB_x[64] = 0;",
          "139:     SAFE_CHAR_BUF(pb_keyB_y, 65);",
          "140:     strncpy(pb_keyB_y, sshare + 128, 64);",
          "141:     pb_keyB_y[64] = 0;",
          "143:     mpz_t skey;",
          "144:     mpz_init(skey);",
          "145:     point pub_keyB = point_init();",
          "146:     point session_key = point_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     uint64_t key_length;",
          "199:         goto clean;",
          "200:     }",
          "",
          "[Removed Lines]",
          "198:     if (!hex2carray(key, &key_length, key_bin)) {",
          "",
          "[Added Lines]",
          "208:     if (!hex2carray(key, &key_length, (uint8_t *) key_bin)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "209:         cypher_bin[i] = msg_bin[i] ^ key_bin[i];",
          "210:     }",
          "214:     ret = 0;",
          "",
          "[Removed Lines]",
          "212:     carray2Hex(cypher_bin, 32, cypher);",
          "",
          "[Added Lines]",
          "222:     carray2Hex((unsigned char*) cypher_bin, 32, cypher);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:     SAFE_CHAR_BUF(key_bin,33)",
          "247:     uint64_t key_length;",
          "249:         goto clean;",
          "250:     }",
          "252:     uint64_t cypher_length;",
          "254:     SAFE_CHAR_BUF(cypher_bin, 33);",
          "256:         goto clean;",
          "257:     }",
          "",
          "[Removed Lines]",
          "248:     if (!hex2carray(key, &key_length, key_bin)) {",
          "255:     if (!hex2carray(cypher, &cypher_length, cypher_bin)) {",
          "",
          "[Added Lines]",
          "258:     if (!hex2carray(key, &key_length, (uint8_t*) key_bin)) {",
          "265:     if (!hex2carray(cypher, &cypher_length, (uint8_t *) cypher_bin)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:         msg_bin[i] = cypher_bin[i] ^ key_bin[i];",
          "261:     }",
          "265:     ret = 0;",
          "",
          "[Removed Lines]",
          "263:     carray2Hex(msg_bin, 32, message);",
          "",
          "[Added Lines]",
          "273:     carray2Hex((unsigned char*) msg_bin, 32, message);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f6064e756bc91153f418b9e002b7e00d579af88",
      "candidate_info": {
        "commit_hash": "1f6064e756bc91153f418b9e002b7e00d579af88",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/1f6064e756bc91153f418b9e002b7e00d579af88",
        "files": [
          "VERSION",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3151-cannot decrypt storage key",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: }",
          "194:     LOG_INFO(__FUNCTION__);",
          "195:     INIT_ERROR_STATE",
          "208:     sgx_attributes_t attribute_mask;",
          "209:     attribute_mask.flags = 0xfffffffffffffff3;",
          "210:     attribute_mask.xfrm = 0x0;",
          "211:     sgx_misc_select_t misc = 0xF0000000;",
          "215:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
          "222:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
          "223:     uint32_t decLen = BUF_LEN;",
          "226:     CHECK_STATE(add_text_length == 0);",
          "229:                              (uint8_t *) unsealedKey, &decLen );",
          "231:     CHECK_STATUS(\"seal/unseal SEK failed after SEK generation in unseal\");",
          "",
          "[Removed Lines]",
          "192: void trustedGenerateSEK(int *errStatus, char *errString,",
          "193:                         uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "197:     CHECK_STATE(encrypted_SEK);",
          "198:     CHECK_STATE(SEK_hex);",
          "200:     RANDOM_CHAR_BUF(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "202:     uint32_t hex_aes_key_length = SGX_AESGCM_KEY_SIZE * 2;",
          "203:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, SEK_hex);",
          "204:     memcpy(AES_key, SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "206:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, hex_aes_key_length + 1);",
          "213:     sgx_status_t status = sgx_seal_data_ex(SGX_KEYPOLICY_MRENCLAVE, attribute_mask, misc, 0, NULL, hex_aes_key_length + 1, (uint8_t *) SEK_hex, sealedLen,",
          "214:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "217:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_SEK);",
          "219:     CHECK_STATE(encrypt_text_length = hex_aes_key_length + 1);",
          "225:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_SEK);",
          "227:     CHECK_STATE(sgx_is_within_enclave(encrypted_SEK,sizeof(sgx_sealed_data_t)));",
          "228:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_SEK, NULL, NULL,",
          "",
          "[Added Lines]",
          "192: void sealHexSEK(int *errStatus, char *errString,",
          "193:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
          "197:     CHECK_STATE(encrypted_sek);",
          "198:     CHECK_STATE(sek_hex);",
          "201:     uint64_t plaintextLen = strlen(sek_hex + 1);",
          "203:     uint64_t sealedLen = sgx_calc_sealed_data_size(0, plaintextLen);",
          "210:     sgx_status_t status = sgx_seal_data_ex(SGX_KEYPOLICY_MRENCLAVE, attribute_mask, misc, 0, NULL, plaintextLen, (uint8_t *) sek_hex, sealedLen,",
          "211:                                            (sgx_sealed_data_t *) encrypted_sek);",
          "214:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
          "216:     CHECK_STATE(encrypt_text_length = plaintextLen);",
          "222:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
          "224:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
          "225:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     LOG_INFO(\"SGX call completed\");",
          "238: }",
          "241:     LOG_INFO(__FUNCTION__);",
          "242:     INIT_ERROR_STATE",
          "244:     SAFE_CHAR_BUF(aes_key_hex, BUF_LEN);",
          "246:     uint32_t dec_len;",
          "248:     sgx_status_t status = sgx_unseal_data(",
          "250:             (uint8_t *)aes_key_hex, &dec_len);",
          "252:     CHECK_STATUS2(\"sgx unseal SEK failed with status %d\");",
          "",
          "[Removed Lines]",
          "240: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK) {",
          "243:     CHECK_STATE(encrypted_SEK);",
          "249:             (const sgx_sealed_data_t *) encrypted_SEK, NULL, 0,",
          "",
          "[Added Lines]",
          "237: void trustedGenerateSEK(int *errStatus, char *errString,",
          "238:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
          "239:     LOG_INFO(__FUNCTION__);",
          "240:     INIT_ERROR_STATE",
          "242:     CHECK_STATE(encrypted_sek);",
          "243:     CHECK_STATE(sek_hex);",
          "245:     RANDOM_CHAR_BUF(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "247:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, sek_hex);",
          "248:     memcpy(AES_key, SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "250:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, sek_hex);",
          "252:     if (errStatus != 0) {",
          "253:         LOG_ERROR(\"sealHexSEK failed\");",
          "254:         goto clean;",
          "255:     }",
          "257:     SET_SUCCESS",
          "258:     clean:",
          "259:     ;",
          "260:     LOG_INFO(\"SGX call completed\");",
          "261: }",
          "263: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_sek) {",
          "266:     CHECK_STATE(encrypted_sek);",
          "272:             (const sgx_sealed_data_t *) encrypted_sek, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262: }",
          "264: void trustedSetSEK_backup(int *errStatus, char *errString,",
          "266:     LOG_INFO(__FUNCTION__);",
          "267:     INIT_ERROR_STATE",
          "272:     uint64_t len;",
          "278:     sgx_attributes_t attribute_mask;",
          "",
          "[Removed Lines]",
          "265:                           uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "269:     CHECK_STATE(encrypted_SEK);",
          "270:     CHECK_STATE(SEK_hex);",
          "273:     hex2carray(SEK_hex, &len, (uint8_t *) AES_key);",
          "275:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, strlen(SEK_hex) + 1);",
          "",
          "[Added Lines]",
          "288:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
          "292:     CHECK_STATE(encrypted_sek);",
          "293:     CHECK_STATE(sek_hex);",
          "296:     hex2carray(sek_hex, &len, (uint8_t *) AES_key);",
          "298:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, strlen(sek_hex) + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282:     sgx_misc_select_t misc = 0xF0000000;",
          "284:     sgx_status_t status = sgx_seal_data_ex(SGX_KEYPOLICY_MRENCLAVE,",
          "288:     CHECK_STATUS2(\"seal SEK failed with status %d\")",
          "",
          "[Removed Lines]",
          "285:                                            attribute_mask, misc, 0, NULL, strlen(SEK_hex) + 1, (uint8_t *) SEK_hex, sealedLen,",
          "286:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "",
          "[Added Lines]",
          "308:                                            attribute_mask, misc, 0, NULL, strlen(sek_hex) + 1, (uint8_t *) sek_hex, sealedLen,",
          "309:                                         (sgx_sealed_data_t *) encrypted_sek);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b505fb2e2bf2d886b031ce9fce4ba78f4cfb16ba",
      "candidate_info": {
        "commit_hash": "b505fb2e2bf2d886b031ce9fce4ba78f4cfb16ba",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/b505fb2e2bf2d886b031ce9fce4ba78f4cfb16ba",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     return status;",
          "41: }",
          "44:   uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
          "46:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_key,",
          "47:                                                    encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
          "48:                                                    message,",
          "",
          "[Removed Lines]",
          "43: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message) {",
          "",
          "[Added Lines]",
          "43: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
          "46:   if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
          "47:       LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
          "48:       return -1;",
          "49:   }",
          "55:   if (msgLen < len) {",
          "56:         LOG_ERROR(\"Output buffer not large enough\");",
          "57:         return -2;",
          "58:   }",
          "",
          "---------------"
        ],
        "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
          "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: int AES_encrypt(char *message, uint8_t *encr_message);",
          "33: #endif //SGXD_AESUTILS_H",
          "",
          "[Removed Lines]",
          "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message);",
          "",
          "[Added Lines]",
          "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1004:     if (stat != 0) {",
          "1005:         snprintf(errString + 19 + strlen(skey_str), BUF_LEN, \"ecdsa private key decr failed with status %d\", stat);",
          "",
          "[Removed Lines]",
          "1001:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str);",
          "",
          "[Added Lines]",
          "1001:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1027:     char skey[ECDSA_SKEY_LEN];",
          "1030:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "1032:     if (status != 0) {",
          "",
          "[Removed Lines]",
          "1029:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey);",
          "",
          "[Added Lines]",
          "1028:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1115:     char skey[ECDSA_SKEY_LEN];",
          "1119:     if (status != 0) {",
          "",
          "[Removed Lines]",
          "1117:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey);",
          "",
          "[Added Lines]",
          "1116:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1216:     char decryptedKey[BUF_LEN];",
          "1217:     memset(decryptedKey, 0, BUF_LEN);",
          "1221:     if (stat != 0) {",
          "",
          "[Removed Lines]",
          "1219:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey);",
          "",
          "[Added Lines]",
          "1218:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1252:     if (status != 0) {",
          "",
          "[Removed Lines]",
          "1250:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key);",
          "",
          "[Added Lines]",
          "1249:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1278:     char sig[BUF_LEN];",
          "1279:     memset(sig, 0, BUF_LEN);",
          "1283:     if (stat != 0) {",
          "",
          "[Removed Lines]",
          "1281:     int stat = AES_decrypt(encryptedPrivateKey, enc_len, key);",
          "",
          "[Added Lines]",
          "1280:     int stat = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1321:     char decr_dkg_secret[DKG_BUFER_LENGTH];",
          "1322:     memset(decr_dkg_secret, 0, DKG_BUFER_LENGTH);",
          "1325:     if (status != SGX_SUCCESS) {",
          "1326:         snprintf(errString, BUF_LEN, \"aes decrypt dkg poly failed\");",
          "",
          "[Removed Lines]",
          "1324:     status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret);",
          "",
          "[Added Lines]",
          "1323:     status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret,",
          "1324:                          DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1341:                            uint32_t *dec_len) {",
          "1342:     LOG_DEBUG(__FUNCTION__);",
          "1346:     if (status != SGX_SUCCESS) {",
          "1347:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "1344:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *) decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "1344:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *) decrypted_dkg_secret,",
          "1345:                              3072);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1354:     LOG_DEBUG(__FUNCTION__);",
          "1356:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1359:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1357:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *) decryptedDkgPoly);",
          "",
          "[Added Lines]",
          "1358:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *) decryptedDkgPoly,",
          "1359:                              DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1382:         return;",
          "1383:     }",
          "1386:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1388:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1385:     int status = AES_decrypt(encrypted_skey, enc_len, skey);",
          "",
          "[Added Lines]",
          "1387:     int status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1433:     char *decrypted_dkg_secret = (char *) calloc(DKG_MAX_SEALED_LEN, 1);",
          "1434:     memset(decrypted_dkg_secret, 0, DKG_MAX_SEALED_LEN);",
          "1438:     if (status != SGX_SUCCESS) {",
          "1439:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "1436:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "1438:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, decrypted_dkg_secret,",
          "1439:                              DKG_MAX_SEALED_LEN);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1459:     char skey[ECDSA_SKEY_LEN];",
          "1460:     memset(skey, 0, ECDSA_SKEY_LEN);",
          "1463:     if (status != SGX_SUCCESS) {",
          "1464:         snprintf(errString, BUF_LEN, \"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\", status);",
          "",
          "[Removed Lines]",
          "1461:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey);",
          "",
          "[Added Lines]",
          "1465:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1511:     LOG_DEBUG(__FUNCTION__);",
          "1513:     char skey[ECDSA_SKEY_LEN];",
          "1515:     if (status != SGX_SUCCESS) {",
          "1517:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "1514:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey);",
          "",
          "[Added Lines]",
          "1518:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1625:     char skey_hex[ECDSA_SKEY_LEN];",
          "1628:     if (status != SGX_SUCCESS) {",
          "1630:         snprintf(errString, BUF_LEN, \"aes_decrypt failed with status %d\", status);",
          "",
          "[Removed Lines]",
          "1627:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex);",
          "",
          "[Added Lines]",
          "1631:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:                                 [out] int *errStatus,",
          "218:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "219:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "221:                                 [user_check] uint32_t* dec_len);",
          "223:         public void trustedSetEncryptedDkgPolyAES(",
          "224:                                 [out] int *errStatus,",
          "225:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "229:         public void trustedGetEncryptedSecretShareAES(",
          "230:                                 [out]int *errStatus,",
          "",
          "[Removed Lines]",
          "220:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "227:                                 [out] uint64_t* enc_len);",
          "",
          "[Added Lines]",
          "220:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret,",
          "227:                                 [user_check] uint64_t* enc_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b8f7281b22b342e05d647bb9f3f4fea60597d75",
      "candidate_info": {
        "commit_hash": "4b8f7281b22b342e05d647bb9f3f4fea60597d75",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/4b8f7281b22b342e05d647bb9f3f4fea60597d75",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "Revert \"SKALE-3039\"\n\nThis reverts commit 85590b1ee4afde624c75b923df34038f9090a762.",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"AESUtils.h\"",
          "36: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
          "",
          "[Removed Lines]",
          "33: uint8_t AES_key[2* BUF_LEN];",
          "",
          "[Added Lines]",
          "33: sgx_aes_gcm_128bit_key_t AES_key;",
          "34: sgx_aes_gcm_128bit_key_t AES_DH_key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
          "78:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
          "79:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "80:                                                      NULL, 0,",
          "",
          "[Removed Lines]",
          "77:     sgx_status_t status = sgx_rijndael128GCM_encrypt(AES_key + BUF_LEN, (uint8_t*)message, len,",
          "",
          "[Added Lines]",
          "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:         return -2;",
          "124:   }",
          "127:                                                    encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
          "128:                                                    (unsigned char*) message,",
          "129:                                                    encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "",
          "[Removed Lines]",
          "126:   sgx_status_t status = sgx_rijndael128GCM_decrypt(AES_key + BUF_LEN,",
          "",
          "[Added Lines]",
          "127:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_key,",
          "",
          "---------------"
        ],
        "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
          "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SGXD_AESUTILS_H",
          "25: #define SGXD_AESUTILS_H",
          "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
          "31:                 unsigned char type, unsigned char exportable, uint64_t* resultLen);",
          "",
          "[Removed Lines]",
          "27: #define BUF_LEN 1024",
          "28: extern uint8_t AES_key[2* BUF_LEN] ;",
          "",
          "[Added Lines]",
          "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:     RANDOM_CHAR_BUF(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "293:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, sek_hex);",
          "297:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, sek_hex);",
          "",
          "[Removed Lines]",
          "294:     memcpy(AES_key + BUF_LEN, SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "[Added Lines]",
          "294:     memcpy(AES_key, SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:     uint64_t len;",
          "336:     SET_SUCCESS",
          "337:     clean:",
          "",
          "[Removed Lines]",
          "334:     hex2carray(aes_key_hex, &len, (uint8_t *) AES_key + BUF_LEN);",
          "",
          "[Added Lines]",
          "334:     hex2carray(aes_key_hex, &len, (uint8_t *) AES_key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:     CHECK_STATE(sek_hex);",
          "351:     uint64_t len;",
          "355:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, (char *)sek_hex);",
          "",
          "[Removed Lines]",
          "352:     hex2carray(sek_hex, &len, (uint8_t *) AES_key + BUF_LEN);",
          "",
          "[Added Lines]",
          "352:     hex2carray(sek_hex, &len, (uint8_t *) AES_key);",
          "",
          "---------------"
        ]
      }
    }
  ]
}