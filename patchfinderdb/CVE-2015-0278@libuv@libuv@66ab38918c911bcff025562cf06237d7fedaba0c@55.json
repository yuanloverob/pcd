{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7df24583e5ea77086e765a4bf0773407f0ec190d",
      "candidate_info": {
        "commit_hash": "7df24583e5ea77086e765a4bf0773407f0ec190d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7df24583e5ea77086e765a4bf0773407f0ec190d",
        "files": [
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/unix/fs.c",
          "src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h",
          "src/win/fs.c",
          "test/test-fs-event.c",
          "test/test-fs.c",
          "test/test-spawn.c"
        ],
        "message": "fs: vectored IO API for filesystem read/write\n\nThis improves API consistency with uv_read and uv_write and may\nimprove efficiency for some uses. Vectored IO is emulated when the\nrequisite system calls are unavailable.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/unix/fs.c||src/unix/fs.c",
          "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   uv_file file;                                                               \\",
          "296:   int flags;                                                                  \\",
          "297:   mode_t mode;                                                                \\",
          "300:   off_t off;                                                                  \\",
          "301:   uv_uid_t uid;                                                               \\",
          "302:   uv_gid_t gid;                                                               \\",
          "303:   double atime;                                                               \\",
          "304:   double mtime;                                                               \\",
          "305:   struct uv__work work_req;                                                   \\",
          "307: #define UV_WORK_PRIVATE_FIELDS                                                \\",
          "308:   struct uv__work work_req;",
          "",
          "[Removed Lines]",
          "298:   void* buf;                                                                  \\",
          "299:   size_t len;                                                                 \\",
          "",
          "[Added Lines]",
          "298:   unsigned int nbufs;                                                         \\",
          "299:   uv_buf_t* bufs;                                                             \\",
          "306:   uv_buf_t bufsml[4];                                                         \\",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:       WCHAR* new_pathw;                                                       \\",
          "553:       int file_flags;                                                         \\",
          "554:       int fd_out;                                                             \\",
          "557:       int64_t offset;                                                         \\",
          "558:     };                                                                        \\",
          "559:     struct {                                                                  \\",
          "560:       double atime;                                                           \\",
          "",
          "[Removed Lines]",
          "555:       void* buf;                                                              \\",
          "556:       size_t length;                                                          \\",
          "",
          "[Added Lines]",
          "555:       unsigned int nbufs;                                                     \\",
          "556:       uv_buf_t* bufs;                                                         \\",
          "558:       uv_buf_t bufsml[4];                                                     \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1729:     int flags, int mode, uv_fs_cb cb);",
          "1731: UV_EXTERN int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1734: UV_EXTERN int uv_fs_unlink(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1735:     uv_fs_cb cb);",
          "1737: UV_EXTERN int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1740: UV_EXTERN int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1741:     int mode, uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "1732:     void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "1738:     const void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "",
          "[Added Lines]",
          "1732:     const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb);",
          "1738:     const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb);",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include <utime.h>",
          "45: #include <poll.h>",
          "47: #if defined(__linux__) || defined(__sun)",
          "48: # include <sys/sendfile.h>",
          "49: #elif defined(__APPLE__) || defined(__FreeBSD__)",
          "50: # include <sys/socket.h>",
          "51: # include <sys/uio.h>",
          "52: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #if defined(__DragonFly__)  ||                                            \\",
          "48:     defined(__FreeBSD__)    ||                                            \\",
          "49:     defined(__OpenBSD__)    ||                                            \\",
          "50:     defined(__NetBSD__)",
          "51: # define HAVE_PREADV 1",
          "52: #else",
          "53: # define HAVE_PREADV 0",
          "54: #endif",
          "60: #endif",
          "62: #if HAVE_PREADV || defined(__APPLE__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: static ssize_t uv__fs_read(uv_fs_t* req) {",
          "194:   if (req->off < 0)",
          "198: }",
          "",
          "[Removed Lines]",
          "195:     return read(req->file, req->buf, req->len);",
          "196:   else",
          "197:     return pread(req->file, req->buf, req->len, req->off);",
          "",
          "[Added Lines]",
          "206:   ssize_t result;",
          "209:     result = readv(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "210:   else {",
          "211: #if HAVE_PREADV",
          "212:     result = preadv(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "213: #else",
          "214: # if defined(__linux__)",
          "215:     static int no_preadv;",
          "216:     if (no_preadv)",
          "217: # endif",
          "218:     {",
          "219:       off_t nread;",
          "220:       size_t index;",
          "222: # if defined(__linux__)",
          "223:     retry:",
          "224: # endif",
          "225:       nread = 0;",
          "226:       index = 0;",
          "227:       result = 1;",
          "228:       do {",
          "229:         if (req->bufs[index].len > 0) {",
          "230:           result = pread(req->file,",
          "231:                          req->bufs[index].base,",
          "232:                          req->bufs[index].len,",
          "233:                          req->off + nread);",
          "234:           if (result > 0)",
          "235:             nread += result;",
          "236:         }",
          "237:         index++;",
          "238:       } while (index < req->nbufs && result > 0);",
          "239:       if (nread > 0)",
          "240:         result = nread;",
          "241:     }",
          "242: # if defined(__linux__)",
          "243:     else {",
          "244:       result = uv__preadv(req->file,",
          "245:                           (struct iovec*)req->bufs,",
          "246:                           req->nbufs,",
          "247:                           req->off);",
          "248:       if (result == -1 && errno == ENOSYS) {",
          "249:         no_preadv = 1;",
          "250:         goto retry;",
          "251:       }",
          "252:     }",
          "253: # endif",
          "254: #endif",
          "255:   }",
          "256:   if (req->bufs != req->bufsml)",
          "257:     free(req->bufs);",
          "258:   return result;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:   int out_fd;",
          "307:   char buf[8192];",
          "310:   in_fd = req->flags;",
          "311:   out_fd = req->file;",
          "312:   offset = req->off;",
          "",
          "[Removed Lines]",
          "309:   len = req->len;",
          "",
          "[Added Lines]",
          "370:   len = req->bufsml[0].len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "419:     ssize_t r;",
          "421:     off = req->off;",
          "",
          "[Removed Lines]",
          "422:     r = sendfile(out_fd, in_fd, &off, req->len);",
          "",
          "[Added Lines]",
          "483:     r = sendfile(out_fd, in_fd, &off, req->bufsml[0].len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "454: #if defined(__FreeBSD__)",
          "455:     len = 0;",
          "457: #else",
          "461:     r = sendfile(in_fd, out_fd, req->off, &len, NULL, 0);",
          "462: #endif",
          "",
          "[Removed Lines]",
          "456:     r = sendfile(in_fd, out_fd, req->off, req->len, NULL, &len, 0);",
          "460:     len = req->len;",
          "",
          "[Added Lines]",
          "517:     r = sendfile(in_fd, out_fd, req->off, req->bufsml[0].len, NULL, &len, 0);",
          "521:     len = req->bufsml[0].len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507: #endif",
          "509:   if (req->off < 0)",
          "514: #if defined(__APPLE__)",
          "515:   pthread_mutex_unlock(&lock);",
          "516: #endif",
          "518:   return r;",
          "519: }",
          "",
          "[Removed Lines]",
          "510:     r = write(req->file, req->buf, req->len);",
          "511:   else",
          "512:     r = pwrite(req->file, req->buf, req->len, req->off);",
          "",
          "[Added Lines]",
          "571:     r = writev(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "572:   else {",
          "573: #if HAVE_PREADV",
          "574:     r = pwritev(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "575: #else",
          "576: # if defined(__linux__)",
          "577:     static int no_pwritev;",
          "578:     if (no_pwritev)",
          "579: # endif",
          "580:     {",
          "581:       off_t written;",
          "582:       size_t index;",
          "584: # if defined(__linux__)",
          "585:     retry:",
          "586: # endif",
          "587:       written = 0;",
          "588:       index = 0;",
          "589:       r = 1;",
          "590:       do {",
          "591:         if (req->bufs[index].len > 0) {",
          "592:           r = pwrite(req->file,",
          "593:                      req->bufs[index].base,",
          "594:                      req->bufs[index].len,",
          "595:                      req->off + written);",
          "596:           if (r > 0)",
          "597:             written += r;",
          "598:         }",
          "599:         index++;",
          "600:       } while (index < req->nbufs && r > 0);",
          "601:       if (written > 0)",
          "602:         r = written;",
          "603:     }",
          "604: # if defined(__linux__)",
          "605:     else {",
          "606:       r = uv__pwritev(req->file,",
          "607:                       (struct iovec*) req->bufs,",
          "608:                       req->nbufs,",
          "609:                       req->off);",
          "610:       if (r == -1 && errno == ENOSYS) {",
          "611:         no_pwritev = 1;",
          "612:         goto retry;",
          "613:       }",
          "614:     }",
          "615: # endif",
          "616: #endif",
          "617:   }",
          "623:   if (req->bufs != req->bufsml)",
          "624:     free(req->bufs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "866: int uv_fs_read(uv_loop_t* loop, uv_fs_t* req,",
          "867:                uv_file file,",
          "870:                int64_t off,",
          "871:                uv_fs_cb cb) {",
          "872:   INIT(READ);",
          "873:   req->file = file;",
          "876:   req->off = off;",
          "877:   POST;",
          "878: }",
          "",
          "[Removed Lines]",
          "868:                void* buf,",
          "869:                size_t len,",
          "874:   req->buf = buf;",
          "875:   req->len = len;",
          "",
          "[Added Lines]",
          "976:                const uv_buf_t bufs[],",
          "977:                unsigned int nbufs,",
          "983:   req->nbufs = nbufs;",
          "984:   req->bufs = req->bufsml;",
          "985:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "986:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "988:   if (req->bufs == NULL)",
          "989:     return -ENOMEM;",
          "991:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "930:   req->file = out_fd;",
          "931:   req->off = off;",
          "933:   POST;",
          "934: }",
          "",
          "[Removed Lines]",
          "932:   req->len = len;",
          "",
          "[Added Lines]",
          "1049:   req->bufsml[0].len = len;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "978: int uv_fs_write(uv_loop_t* loop,",
          "979:                 uv_fs_t* req,",
          "980:                 uv_file file,",
          "983:                 int64_t off,",
          "984:                 uv_fs_cb cb) {",
          "985:   INIT(WRITE);",
          "986:   req->file = file;",
          "989:   req->off = off;",
          "990:   POST;",
          "991: }",
          "",
          "[Removed Lines]",
          "981:                 const void* buf,",
          "982:                 size_t len,",
          "987:   req->buf = (void*) buf;",
          "988:   req->len = len;",
          "",
          "[Added Lines]",
          "1098:                 const uv_buf_t bufs[],",
          "1099:                 unsigned int nbufs,",
          "1105:   req->nbufs = nbufs;",
          "1106:   req->bufs = req->bufsml;",
          "1107:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1108:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1110:   if (req->bufs == NULL)",
          "1111:     return -ENOMEM;",
          "1113:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c": [
          "File: src/unix/linux-syscalls.c -> src/unix/linux-syscalls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: # endif",
          "203: int uv__accept4(int fd, struct sockaddr* addr, socklen_t* addrlen, int flags) {",
          "204: #if defined(__i386__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: #ifndef __NR_preadv",
          "203: # if defined(__x86_64__)",
          "204: #  define __NR_preadv 295",
          "205: # elif defined(__i386__)",
          "206: #  define __NR_preadv 333",
          "207: # elif defined(__arm__)",
          "208: #  define __NR_preadv (UV_SYSCALL_BASE + 361)",
          "209: # endif",
          "212: #ifndef __NR_pwritev",
          "213: # if defined(__x86_64__)",
          "214: #  define __NR_pwritev 296",
          "215: # elif defined(__i386__)",
          "216: #  define __NR_pwritev 334",
          "217: # elif defined(__arm__)",
          "218: #  define __NR_pwritev (UV_SYSCALL_BASE + 362)",
          "219: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:   return errno = ENOSYS, -1;",
          "387: #endif",
          "388: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410: ssize_t uv__preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset) {",
          "411: #if defined(__NR_preadv)",
          "412:   return syscall(__NR_preadv, fd, iov, iovcnt, offset);",
          "413: #else",
          "414:   return errno = ENOSYS, -1;",
          "415: #endif",
          "416: }",
          "418: ssize_t uv__pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset) {",
          "419: #if defined(__NR_pwritev)",
          "420:   return syscall(__NR_pwritev, fd, iov, iovcnt, offset);",
          "421: #else",
          "422:   return errno = ENOSYS, -1;",
          "423: #endif",
          "424: }",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h": [
          "File: src/unix/linux-syscalls.h -> src/unix/linux-syscalls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:                  const char* path,",
          "148:                  const struct timespec times[2],",
          "149:                  int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: ssize_t uv__preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "151: ssize_t uv__pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:   LARGE_INTEGER offset_;",
          "547:   DWORD bytes;",
          "548:   DWORD error;",
          "550:   VERIFY_FD(fd, req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:   int result;",
          "550:   unsigned int index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:     overlapped_ptr = NULL;",
          "574:   }",
          "577:     SET_REQ_RESULT(req, bytes);",
          "578:   } else {",
          "579:     error = GetLastError();",
          "",
          "[Removed Lines]",
          "576:   if (ReadFile(handle, req->buf, req->length, &bytes, overlapped_ptr)) {",
          "",
          "[Added Lines]",
          "578:   index = 0;",
          "579:   bytes = 0;",
          "580:   do {",
          "581:     DWORD incremental_bytes;",
          "582:     result = ReadFile(handle,",
          "583:                       req->bufs[index].base,",
          "584:                       req->bufs[index].len,",
          "585:                       &incremental_bytes,",
          "586:                       overlapped_ptr);",
          "587:     bytes += incremental_bytes;",
          "588:     ++index;",
          "589:   } while (result && index < req->nbufs);",
          "591:   if (result || bytes > 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "594:   OVERLAPPED overlapped, *overlapped_ptr;",
          "595:   LARGE_INTEGER offset_;",
          "596:   DWORD bytes;",
          "598:   VERIFY_FD(fd, req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:   int result;",
          "613:   unsigned int index;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "620:     overlapped_ptr = NULL;",
          "621:   }",
          "624:     SET_REQ_RESULT(req, bytes);",
          "625:   } else {",
          "626:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "[Removed Lines]",
          "623:   if (WriteFile(handle, req->buf, length, &bytes, overlapped_ptr)) {",
          "",
          "[Added Lines]",
          "640:   index = 0;",
          "641:   bytes = 0;",
          "642:   do {",
          "643:     DWORD incremental_bytes;",
          "644:     result = WriteFile(handle,",
          "645:                        req->bufs[index].base,",
          "646:                        req->bufs[index].len,",
          "647:                        &incremental_bytes,",
          "648:                        overlapped_ptr);",
          "649:     bytes += incremental_bytes;",
          "650:     ++index;",
          "651:   } while (result && index < req->nbufs);",
          "653:   if (result || bytes > 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1569: }",
          "1574:   uv_fs_req_init(loop, req, UV_FS_READ, cb);",
          "1576:   req->fd = fd;",
          "1579:   req->offset = offset;",
          "1581:   if (cb) {",
          "",
          "[Removed Lines]",
          "1572: int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file fd, void* buf,",
          "1573:     size_t length, int64_t offset, uv_fs_cb cb) {",
          "1577:   req->buf = buf;",
          "1578:   req->length = length;",
          "",
          "[Added Lines]",
          "1602: int uv_fs_read(uv_loop_t* loop,",
          "1603:                uv_fs_t* req,",
          "1604:                uv_file fd,",
          "1605:                const uv_buf_t bufs[],",
          "1606:                unsigned int nbufs,",
          "1607:                int64_t offset,",
          "1608:                uv_fs_cb cb) {",
          "1613:   req->nbufs = nbufs;",
          "1614:   req->bufs = req->bufsml;",
          "1615:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1616:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1618:   if (req->bufs == NULL)",
          "1619:     return UV_ENOMEM;",
          "1621:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1593:   uv_fs_req_init(loop, req, UV_FS_WRITE, cb);",
          "1595:   req->fd = fd;",
          "1598:   req->offset = offset;",
          "1600:   if (cb) {",
          "",
          "[Removed Lines]",
          "1596:   req->buf = (void*) buf;",
          "1597:   req->length = length;",
          "",
          "[Added Lines]",
          "1641:   req->nbufs = nbufs;",
          "1642:   req->bufs = req->bufsml;",
          "1643:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1644:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1646:   if (req->bufs == NULL)",
          "1647:     return UV_ENOMEM;",
          "1649:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   int r;",
          "80:   uv_file file;",
          "81:   uv_fs_t req;",
          "83:   r = uv_fs_open(loop, &req, name, O_RDWR, 0, NULL);",
          "84:   ASSERT(r >= 0);",
          "85:   file = r;",
          "86:   uv_fs_req_cleanup(&req);",
          "89:   ASSERT(r >= 0);",
          "90:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "88:   r = uv_fs_write(loop, &req, file, \"foo\", 4, -1, NULL);",
          "",
          "[Added Lines]",
          "82:   uv_buf_t buf;",
          "89:   buf = uv_buf_init(\"foo\", 4);",
          "90:   r = uv_fs_write(loop, &req, file, &buf, 1, -1, NULL);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: static char buf[32];",
          "104: static char test_buf[] = \"test-buffer\\n\";",
          "107: static void check_permission(const char* filename, unsigned int mode) {",
          "108:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: static uv_buf_t iov;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:   ASSERT(memcmp(req->path, \"test_file2\\0\", 11) == 0);",
          "285:   uv_fs_req_cleanup(req);",
          "286:   memset(buf, 0, sizeof(buf));",
          "288:       read_cb);",
          "289:   ASSERT(r == 0);",
          "290: }",
          "",
          "[Removed Lines]",
          "287:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "287:   iov = uv_buf_init(buf, sizeof(buf));",
          "288:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:   ASSERT(req->result >= 0);",
          "346:   create_cb_count++;",
          "347:   uv_fs_req_cleanup(req);",
          "350:   ASSERT(r == 0);",
          "351: }",
          "",
          "[Removed Lines]",
          "348:   r = uv_fs_write(loop, &write_req, req->result, test_buf, sizeof(test_buf),",
          "349:       -1, write_cb);",
          "",
          "[Added Lines]",
          "349:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "350:   r = uv_fs_write(loop, &write_req, req->result, &iov, 1, -1, write_cb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:   ASSERT(open_req1.result >= 0);",
          "664:   uv_fs_req_cleanup(&open_req1);",
          "668:   ASSERT(r >= 0);",
          "669:   ASSERT(write_req.result >= 0);",
          "670:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "666:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "667:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "667:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "668:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "679:   ASSERT(open_req1.result >= 0);",
          "680:   uv_fs_req_cleanup(&open_req1);",
          "684:   ASSERT(r >= 0);",
          "685:   ASSERT(read_req.result >= 0);",
          "686:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "682:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "683:       NULL);",
          "",
          "[Added Lines]",
          "683:   iov = uv_buf_init(buf, sizeof(buf));",
          "684:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "707:   uv_fs_req_cleanup(&open_req1);",
          "709:   memset(buf, 0, sizeof(buf));",
          "711:       NULL);",
          "712:   ASSERT(r >= 0);",
          "713:   ASSERT(read_req.result >= 0);",
          "",
          "[Removed Lines]",
          "710:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "711:   iov = uv_buf_init(buf, sizeof(buf));",
          "712:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "910:   file = req.result;",
          "911:   uv_fs_req_cleanup(&req);",
          "914:   ASSERT(r == sizeof(test_buf));",
          "915:   ASSERT(req.result == sizeof(test_buf));",
          "916:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "913:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "915:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "916:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1020:   file = req.result;",
          "1021:   uv_fs_req_cleanup(&req);",
          "1024:   ASSERT(r == sizeof(test_buf));",
          "1025:   ASSERT(req.result == sizeof(test_buf));",
          "1026:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1023:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1026:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1027:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1183:   file = req.result;",
          "1184:   uv_fs_req_cleanup(&req);",
          "1187:   ASSERT(r == sizeof(test_buf));",
          "1188:   ASSERT(req.result == sizeof(test_buf));",
          "1189:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1186:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1190:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1191:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1203:   uv_fs_req_cleanup(&req);",
          "1205:   memset(buf, 0, sizeof(buf));",
          "1207:   ASSERT(r >= 0);",
          "1208:   ASSERT(req.result >= 0);",
          "1209:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1206:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1211:   iov = uv_buf_init(buf, sizeof(buf));",
          "1212:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1223:   uv_fs_req_cleanup(&req);",
          "1225:   memset(buf, 0, sizeof(buf));",
          "1227:   ASSERT(r >= 0);",
          "1228:   ASSERT(req.result >= 0);",
          "1229:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1226:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1232:   iov = uv_buf_init(buf, sizeof(buf));",
          "1233:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1289:   file = req.result;",
          "1290:   uv_fs_req_cleanup(&req);",
          "1293:   ASSERT(r == sizeof(test_buf));",
          "1294:   ASSERT(req.result == sizeof(test_buf));",
          "1295:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1292:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1299:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1300:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1326:   uv_fs_req_cleanup(&req);",
          "1328:   memset(buf, 0, sizeof(buf));",
          "1330:   ASSERT(r >= 0);",
          "1331:   ASSERT(req.result >= 0);",
          "1332:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1329:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1337:   iov = uv_buf_init(buf, sizeof(buf));",
          "1338:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1365:   uv_fs_req_cleanup(&req);",
          "1367:   memset(buf, 0, sizeof(buf));",
          "1369:   ASSERT(r >= 0);",
          "1370:   ASSERT(req.result >= 0);",
          "1371:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1368:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "[Added Lines]",
          "1377:   iov = uv_buf_init(buf, sizeof(buf));",
          "1378:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1774:   ASSERT(open_req1.result >= 0);",
          "1775:   uv_fs_req_cleanup(&open_req1);",
          "1779:   ASSERT(r >= 0);",
          "1780:   ASSERT(write_req.result >= 0);",
          "1781:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1777:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1778:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1787:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1788:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1790:   ASSERT(open_req1.result >= 0);",
          "1791:   uv_fs_req_cleanup(&open_req1);",
          "1795:   ASSERT(r >= 0);",
          "1796:   ASSERT(write_req.result >= 0);",
          "1797:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1793:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1794:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1803:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1804:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1806:   ASSERT(open_req1.result >= 0);",
          "1807:   uv_fs_req_cleanup(&open_req1);",
          "1810:       NULL);",
          "1811:   printf(\"read = %d\\n\", r);",
          "1812:   ASSERT(r == 26);",
          "",
          "[Removed Lines]",
          "1809:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "1819:   iov = uv_buf_init(buf, sizeof(buf));",
          "1820:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1844:   ASSERT(open_req1.result >= 0);",
          "1845:   uv_fs_req_cleanup(&open_req1);",
          "1849:   ASSERT(r >= 0);",
          "1850:   ASSERT(write_req.result >= 0);",
          "1851:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1847:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1848:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1858:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1859:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1877:   uv_fs_req_cleanup(&open_req1);",
          "1879:   memset(buf, 0, sizeof(buf));",
          "1881:       NULL);",
          "1882:   ASSERT(r >= 0);",
          "1883:   ASSERT(read_req.result >= 0);",
          "",
          "[Removed Lines]",
          "1880:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "[Added Lines]",
          "1891:   iov = uv_buf_init(buf, sizeof(buf));",
          "1892:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1912:   ASSERT(open_req1.result >= 0);",
          "1913:   uv_fs_req_cleanup(&open_req1);",
          "1917:   ASSERT(r >= 0);",
          "1918:   ASSERT(write_req.result >= 0);",
          "1919:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1915:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1916:       sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "1927:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1928:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1929:   uv_fs_req_cleanup(&open_req1);",
          "1931:   memset(buf, 0, sizeof(buf));",
          "1934:   ASSERT(r >= 0);",
          "1935:   ASSERT(read_req.result >= 0);",
          "1936:   ASSERT(strcmp(buf, test_buf) == 0);",
          "1937:   uv_fs_req_cleanup(&read_req);",
          "1941:   ASSERT(r == 0);",
          "1942:   ASSERT(read_req.result == 0);",
          "1943:   uv_fs_req_cleanup(&read_req);",
          "",
          "[Removed Lines]",
          "1932:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "1933:       NULL);",
          "1939:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf),",
          "1940:       read_req.result, NULL);",
          "",
          "[Added Lines]",
          "1944:   iov = uv_buf_init(buf, sizeof(buf));",
          "1945:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "1951:   iov = uv_buf_init(buf, sizeof(buf));",
          "1952:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1,",
          "1953:                  read_req.result, NULL);",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   uv_file file;",
          "219:   uv_fs_t fs_req;",
          "220:   uv_stdio_container_t stdio[2];",
          "223:   unlink(\"stdout_file\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   uv_buf_t buf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   ASSERT(exit_cb_called == 1);",
          "247:   ASSERT(close_cb_called == 1);",
          "251:   ASSERT(r == 12);",
          "252:   uv_fs_req_cleanup(&fs_req);",
          "",
          "[Removed Lines]",
          "249:   r = uv_fs_read(uv_default_loop(), &fs_req, file, output, sizeof(output),",
          "250:       0, NULL);",
          "",
          "[Added Lines]",
          "250:   buf = uv_buf_init(output, sizeof(output));",
          "251:   r = uv_fs_read(uv_default_loop(), &fs_req, file, &buf, 1, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:   uv_file file;",
          "272:   uv_fs_t fs_req;",
          "273:   uv_stdio_container_t stdio[3];",
          "276:   unlink(\"stdout_file\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:   uv_buf_t buf;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "301:   ASSERT(exit_cb_called == 1);",
          "302:   ASSERT(close_cb_called == 1);",
          "306:   ASSERT(r == 27);",
          "307:   uv_fs_req_cleanup(&fs_req);",
          "",
          "[Removed Lines]",
          "304:   r = uv_fs_read(uv_default_loop(), &fs_req, file, output, sizeof(output),",
          "305:       0, NULL);",
          "",
          "[Added Lines]",
          "306:   buf = uv_buf_init(output, sizeof(output));",
          "307:   r = uv_fs_read(uv_default_loop(), &fs_req, file, &buf, 1, 0, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08327a7cbd214ae0cb3f3d87eeead2d9ce829904",
      "candidate_info": {
        "commit_hash": "08327a7cbd214ae0cb3f3d87eeead2d9ce829904",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/08327a7cbd214ae0cb3f3d87eeead2d9ce829904",
        "files": [
          "Makefile.am",
          "src/unix/udp.c",
          "src/win/udp.c",
          "test/test-list.h",
          "test/test-udp-multicast-interface6.c",
          "uv.gyp"
        ],
        "message": "unix, windows: add IPv6 support for uv_udp_multicast_interface",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/udp.c||src/unix/udp.c",
          "src/win/udp.c||src/win/udp.c",
          "test/test-list.h||test/test-list.h",
          "test/test-udp-multicast-interface6.c||test/test-udp-multicast-interface6.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:                          test/test-udp-dgram-too-big.c \\",
          "204:                          test/test-udp-ipv6.c \\",
          "205:                          test/test-udp-multicast-interface.c \\",
          "206:                          test/test-udp-multicast-join.c \\",
          "207:                          test/test-udp-multicast-join6.c \\",
          "208:                          test/test-udp-multicast-ttl.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:                          test/test-udp-multicast-interface6.c \\",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "610: }",
          "612: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "622:   } else {",
          "624:   }",
          "632:   }",
          "634:   return 0;",
          "",
          "[Removed Lines]",
          "613:   struct in_addr addr;",
          "614:   int err;",
          "616:   memset(&addr, 0, sizeof addr);",
          "618:   if (interface_addr) {",
          "619:     err = uv_inet_pton(AF_INET, interface_addr, &addr.s_addr);",
          "620:     if (err)",
          "621:       return err;",
          "623:     addr.s_addr = htonl(INADDR_ANY);",
          "626:   if (setsockopt(handle->io_watcher.fd,",
          "627:                  IPPROTO_IP,",
          "628:                  IP_MULTICAST_IF,",
          "629:                  (void*) &addr,",
          "630:                  sizeof addr) == -1) {",
          "631:     return -errno;",
          "",
          "[Added Lines]",
          "613:   struct sockaddr_storage addr_st;",
          "614:   struct sockaddr_in* addr4;",
          "615:   struct sockaddr_in6* addr6;",
          "617:   addr4 = (struct sockaddr_in*) &addr_st;",
          "618:   addr6 = (struct sockaddr_in6*) &addr_st;",
          "620:   if (!interface_addr) {",
          "621:     memset(&addr_st, 0, sizeof addr_st);",
          "622:     addr_st.ss_family = AF_INET;",
          "623:     addr4->sin_addr.s_addr = htonl(INADDR_ANY);",
          "624:   } else if (uv_ip4_addr(interface_addr, 0, addr4) == 0) {",
          "626:   } else if (uv_ip6_addr(interface_addr, 0, addr6) == 0) {",
          "629:     return -EINVAL;",
          "632:   if (addr_st.ss_family == AF_INET) {",
          "633:     if (setsockopt(handle->io_watcher.fd,",
          "634:                    IPPROTO_IP,",
          "635:                    IP_MULTICAST_IF,",
          "636:                    (void*) &addr4->sin_addr,",
          "637:                    sizeof(addr4->sin_addr)) == -1) {",
          "638:       return -errno;",
          "639:     }",
          "640:   } else if (addr_st.ss_family == AF_INET6) {",
          "641:     if (setsockopt(handle->io_watcher.fd,",
          "642:                    IPPROTO_IPV6,",
          "643:                    IPV6_MULTICAST_IF,",
          "644:                    &addr6->sin6_scope_id,",
          "645:                    sizeof(addr6->sin6_scope_id)) == -1) {",
          "646:       return -errno;",
          "647:     }",
          "648:   } else {",
          "649:     assert(0 && \"unexpected address family\");",
          "650:     abort();",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "664:   int err;",
          "673:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "",
          "[Removed Lines]",
          "663:   struct in_addr addr;",
          "666:   memset(&addr, 0, sizeof addr);",
          "668:   if (handle->flags & UV_HANDLE_IPV6) {",
          "669:     return UV_ENOSYS;",
          "670:   }",
          "",
          "[Added Lines]",
          "664:   struct sockaddr_storage addr_st;",
          "665:   struct sockaddr_in* addr4;",
          "666:   struct sockaddr_in6* addr6;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "679:       return uv_translate_sys_error(err);",
          "680:   }",
          "686:   } else {",
          "688:   }",
          "696:   }",
          "698:   return 0;",
          "",
          "[Removed Lines]",
          "682:   if (interface_addr) {",
          "683:     err = uv_inet_pton(AF_INET, interface_addr, &addr.s_addr);",
          "684:     if (err)",
          "685:       return err;",
          "687:     addr.s_addr = htonl(INADDR_ANY);",
          "690:   if (setsockopt(handle->socket,",
          "691:                  IPPROTO_IP,",
          "692:                  IP_MULTICAST_IF,",
          "693:                  (char*) &addr,",
          "694:                  sizeof addr) == SOCKET_ERROR) {",
          "695:     return uv_translate_sys_error(WSAGetLastError());",
          "",
          "[Added Lines]",
          "678:   addr4 = (struct sockaddr_in*) &addr_st;",
          "679:   addr6 = (struct sockaddr_in6*) &addr_st;",
          "681:   if (!interface_addr) {",
          "682:     memset(&addr_st, 0, sizeof addr_st);",
          "683:     if (handle->flags & UV_HANDLE_IPV6) {",
          "684:       addr_st.ss_family = AF_INET6;",
          "685:       addr6->sin6_scope_id = 0;",
          "686:     } else {",
          "687:       addr_st.ss_family = AF_INET;",
          "688:       addr4->sin_addr.s_addr = htonl(INADDR_ANY);",
          "689:     }",
          "690:   } else if (uv_ip4_addr(interface_addr, 0, addr4) == 0) {",
          "692:   } else if (uv_ip6_addr(interface_addr, 0, addr6) == 0) {",
          "695:     return UV_EINVAL;",
          "698:   if (addr_st.ss_family == AF_INET) {",
          "699:     if (setsockopt(handle->socket,",
          "700:                    IPPROTO_IP,",
          "701:                    IP_MULTICAST_IF,",
          "702:                    (char*) &addr4->sin_addr,",
          "703:                    sizeof(addr4->sin_addr)) == SOCKET_ERROR) {",
          "704:       return uv_translate_sys_error(WSAGetLastError());",
          "705:     }",
          "706:   } else if (addr_st.ss_family == AF_INET6) {",
          "707:     if (setsockopt(handle->socket,",
          "708:                    IPPROTO_IPV6,",
          "709:                    IPV6_MULTICAST_IF,",
          "710:                    (char*) &addr6->sin6_scope_id,",
          "711:                    sizeof(addr6->sin6_scope_id)) == SOCKET_ERROR) {",
          "712:       return uv_translate_sys_error(WSAGetLastError());",
          "713:     }",
          "714:   } else {",
          "715:     assert(0 && \"unexpected address family\");",
          "716:     abort();",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: TEST_DECLARE   (udp_multicast_join6)",
          "85: TEST_DECLARE   (udp_multicast_ttl)",
          "86: TEST_DECLARE   (udp_multicast_interface)",
          "87: TEST_DECLARE   (udp_dgram_too_big)",
          "88: TEST_DECLARE   (udp_dual_stack)",
          "89: TEST_DECLARE   (udp_ipv6_only)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: TEST_DECLARE   (udp_multicast_interface6)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:   TEST_ENTRY  (udp_dual_stack)",
          "354:   TEST_ENTRY  (udp_ipv6_only)",
          "355:   TEST_ENTRY  (udp_options)",
          "356:   TEST_ENTRY  (udp_multicast_join)",
          "357:   TEST_ENTRY  (udp_multicast_join6)",
          "358:   TEST_ENTRY  (udp_multicast_ttl)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:   TEST_ENTRY  (udp_multicast_interface)",
          "358:   TEST_ENTRY  (udp_multicast_interface6)",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-interface6.c||test/test-udp-multicast-interface6.c": [
          "File: test/test-udp-multicast-interface6.c -> test/test-udp-multicast-interface6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "29: #define CHECK_HANDLE(handle) \\",
          "30:   ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)",
          "32: static uv_udp_t server;",
          "33: static uv_udp_t client;",
          "35: static int sv_send_cb_called;",
          "36: static int close_cb_called;",
          "39: static void close_cb(uv_handle_t* handle) {",
          "40:   CHECK_HANDLE(handle);",
          "41:   close_cb_called++;",
          "42: }",
          "45: static void sv_send_cb(uv_udp_send_t* req, int status) {",
          "46:   ASSERT(req != NULL);",
          "47:   printf(\"-- sv_send_cb: %s (%d): %s\\n\", uv_err_name(status), status, uv_strerror(status));",
          "48:   ASSERT(status == 0);",
          "49:   CHECK_HANDLE(req->handle);",
          "51:   sv_send_cb_called++;",
          "53:   uv_close((uv_handle_t*) req->handle, close_cb);",
          "54: }",
          "57: TEST_IMPL(udp_multicast_interface6) {",
          "58:   int r;",
          "59:   uv_udp_send_t req;",
          "60:   uv_buf_t buf;",
          "61:   struct sockaddr_in6 addr;",
          "62:   struct sockaddr_in6 baddr;",
          "64:   ASSERT(0 == uv_ip6_addr(\"::1\", TEST_PORT, &addr));",
          "66:   r = uv_udp_init(uv_default_loop(), &server);",
          "67:   ASSERT(r == 0);",
          "69:   ASSERT(0 == uv_ip6_addr(\"::\", 0, &baddr));",
          "70:   r = uv_udp_bind(&server, (const struct sockaddr*)&baddr, 0);",
          "71:   ASSERT(r == 0);",
          "73: #if defined(__APPLE__)",
          "74:   r = uv_udp_set_multicast_interface(&server, \"::1%lo0\");",
          "75: #else",
          "76:   r = uv_udp_set_multicast_interface(&server, \"::1\");",
          "77: #endif",
          "78:   ASSERT(r == 0);",
          "81:   buf = uv_buf_init(\"PING\", 4);",
          "82:   r = uv_udp_send(&req,",
          "83:                   &server,",
          "84:                   &buf,",
          "85:                   1,",
          "86:                   (const struct sockaddr*)&addr,",
          "87:                   sv_send_cb);",
          "88:   ASSERT(r == 0);",
          "90:   ASSERT(close_cb_called == 0);",
          "91:   ASSERT(sv_send_cb_called == 0);",
          "94:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "96:   ASSERT(sv_send_cb_called == 1);",
          "97:   ASSERT(close_cb_called == 1);",
          "99:   MAKE_VALGRIND_HAPPY();",
          "100:   return 0;",
          "101: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:         'test/test-ip4-addr.c',",
          "396:         'test/test-ip6-addr.c',",
          "397:         'test/test-udp-multicast-interface.c',",
          "398:       ],",
          "399:       'conditions': [",
          "400:         [ 'OS==\"win\"', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:         'test/test-udp-multicast-interface6.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5dad19503d5da4ec27529d12e96e57ea521f4c9a",
      "candidate_info": {
        "commit_hash": "5dad19503d5da4ec27529d12e96e57ea521f4c9a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5dad19503d5da4ec27529d12e96e57ea521f4c9a",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/version.c"
        ],
        "message": "Now working on v0.11.14",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.13], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.14], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 13",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 14",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc1ea27c736f0d21c7160c790bcd1b113d20abd9",
      "candidate_info": {
        "commit_hash": "dc1ea27c736f0d21c7160c790bcd1b113d20abd9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/dc1ea27c736f0d21c7160c790bcd1b113d20abd9",
        "files": [
          "include/uv.h"
        ],
        "message": "doc: clarify the return value of uv_default_loop",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    },
    {
      "candidate_hash": "7bdcf3dc7ea2bc92cde91a4082b76e111cc07db7",
      "candidate_info": {
        "commit_hash": "7bdcf3dc7ea2bc92cde91a4082b76e111cc07db7",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7bdcf3dc7ea2bc92cde91a4082b76e111cc07db7",
        "files": [
          "src/win/getnameinfo.c"
        ],
        "message": "windows: fix GetNameInfoW error handling\n\nGetNameInfoW return non-zero on error, and not vice versa.",
        "before_after_code_files": [
          "src/win/getnameinfo.c||src/win/getnameinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/getnameinfo.c||src/win/getnameinfo.c": [
          "File: src/win/getnameinfo.c -> src/win/getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   int ret = 0;",
          "48:   req = container_of(w, uv_getnameinfo_t, work_req);",
          "56:     ret = WSAGetLastError();",
          "57:   }",
          "58:   req->retcode = uv__getaddrinfo_translate_error(ret);",
          "",
          "[Removed Lines]",
          "49:   if (!GetNameInfoW((struct sockaddr*)&req->storage,",
          "50:                      sizeof(req->storage),",
          "51:                      host,",
          "52:                      ARRAY_SIZE(host),",
          "53:                      service,",
          "54:                      ARRAY_SIZE(service),",
          "55:                      req->flags)) {",
          "",
          "[Added Lines]",
          "49:   if (GetNameInfoW((struct sockaddr*)&req->storage,",
          "50:                    sizeof(req->storage),",
          "51:                    host,",
          "52:                    ARRAY_SIZE(host),",
          "53:                    service,",
          "54:                    ARRAY_SIZE(service),",
          "55:                    req->flags)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}