{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "66b23b11b0f6e7ed060300ad091f19ba6d0ab4d6",
      "candidate_info": {
        "commit_hash": "66b23b11b0f6e7ed060300ad091f19ba6d0ab4d6",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/66b23b11b0f6e7ed060300ad091f19ba6d0ab4d6",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix Nmap reset on ESP8266\n\nPUBLISHED_FROM=7b9c85e7708721f2c6d0e2fc8ad5c32c61b48854",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14501: void mg_lwip_handle_accept(struct mg_connection *nc) {",
          "14502:   struct mg_lwip_conn_state *cs = (struct mg_lwip_conn_state *) nc->sock;",
          "14503: #if MG_ENABLE_SSL",
          "14504:   if (cs->lc->flags & MG_F_SSL) {",
          "14505:     if (mg_ssl_if_conn_accept(nc, cs->lc) != MG_SSL_OK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14503:   if (cs->pcb.tcp == NULL) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a2bc33a8945c7a14436062247a52ca7d0c91fe5",
      "candidate_info": {
        "commit_hash": "2a2bc33a8945c7a14436062247a52ca7d0c91fe5",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/2a2bc33a8945c7a14436062247a52ca7d0c91fe5",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Add mg_strstr\n\nPUBLISHED_FROM=4306e870e2cab854febb6becc198ca2247e2e002",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1481:   }",
          "1482:   return mg_strcmp(s1, s2);",
          "1483: }",
          "1484: #ifdef MG_MODULE_LINES",
          "1485: #line 1 \"common/str_util.c\"",
          "1486: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485: const char *mg_strstr(const struct mg_str haystack,",
          "1486:                       const struct mg_str needle) WEAK;",
          "1487: const char *mg_strstr(const struct mg_str haystack,",
          "1488:                       const struct mg_str needle) {",
          "1489:   size_t i;",
          "1490:   if (needle.len > haystack.len) return NULL;",
          "1491:   for (i = 0; i <= haystack.len - needle.len; i++) {",
          "1492:     if (memcmp(haystack.p + i, needle.p, needle.len) == 0) {",
          "1493:       return haystack.p + i;",
          "1494:     }",
          "1495:   }",
          "1496:   return NULL;",
          "1497: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1809: int mg_strcmp(const struct mg_str str1, const struct mg_str str2);",
          "1810: int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n);",
          "1812: #ifdef __cplusplus",
          "1813: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1812: const char *mg_strstr(const struct mg_str haystack, const struct mg_str needle);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae611a6e553dfe8e9cc814f71a42181bc6af1194",
      "candidate_info": {
        "commit_hash": "ae611a6e553dfe8e9cc814f71a42181bc6af1194",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/ae611a6e553dfe8e9cc814f71a42181bc6af1194",
        "files": [
          "docs/c-api/net.h/intro.md",
          "docs/c-api/net.h/mg_enable_javascript.md",
          "docs/c-api/net.h/struct_mg_mgr.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Clean up v7 from mongoose\n\nPUBLISHED_FROM=efa9cc3aaf0c5ae8841e029370f882b615cebf1b",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:     s_filter_pattern = NULL;",
          "318:     s_filter_pattern_len = 0;",
          "319:   }",
          "322: int cs_log_print_prefix(enum cs_log_level, const char *, const char *) WEAK;",
          "323: int cs_log_print_prefix(enum cs_log_level level, const char *func,",
          "",
          "[Removed Lines]",
          "320: };",
          "",
          "[Added Lines]",
          "320: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2281:   DBG((\"init mgr=%p\", m));",
          "2282: }",
          "2310: void mg_mgr_free(struct mg_mgr *m) {",
          "2311:   struct mg_connection *conn, *tmp_conn;",
          "",
          "[Removed Lines]",
          "2284: #if MG_ENABLE_JAVASCRIPT",
          "2285: static enum v7_err mg_send_js(struct v7 *v7, v7_val_t *res) {",
          "2286:   v7_val_t arg0 = v7_arg(v7, 0);",
          "2287:   v7_val_t arg1 = v7_arg(v7, 1);",
          "2288:   struct mg_connection *c = (struct mg_connection *) v7_get_ptr(v7, arg0);",
          "2289:   size_t len = 0;",
          "2291:   if (v7_is_string(arg1)) {",
          "2292:     const char *data = v7_get_string(v7, &arg1, &len);",
          "2293:     mg_send(c, data, len);",
          "2294:   }",
          "2298:   return V7_OK;",
          "2299: }",
          "2301: enum v7_err mg_enable_javascript(struct mg_mgr *m, struct v7 *v7,",
          "2302:                                  const char *init_file_name) {",
          "2303:   v7_val_t v;",
          "2304:   m->v7 = v7;",
          "2305:   v7_set_method(v7, v7_get_global(v7), \"mg_send\", mg_send_js);",
          "2306:   return v7_exec_file(v7, init_file_name, &v);",
          "2307: }",
          "2308: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5995:                           MG_SOCK_STRINGIFY_IP | MG_SOCK_STRINGIFY_PORT);",
          "5996:       DBG((\"%p %s %.*s %.*s\", nc, addr, (int) hm->method.len, hm->method.p,",
          "5997:            (int) hm->uri.len, hm->uri.p));",
          "6047:       mg_http_call_endpoint_handler(nc, trigger_ev, hm);",
          "6049:       mbuf_remove(io, hm->message.len);",
          "6050:     }",
          "6051:   }",
          "",
          "[Removed Lines]",
          "6001: #if MG_ENABLE_JAVASCRIPT",
          "6002:       v7_val_t v1, v2, headers, req, args, res;",
          "6003:       struct v7 *v7 = nc->mgr->v7;",
          "6004:       const char *ev_name = trigger_ev == MG_EV_HTTP_REPLY ? \"onsnd\" : \"onrcv\";",
          "6005:       int i, js_callback_handled_request = 0;",
          "6007:       if (v7 != NULL) {",
          "6009:         v1 = v7_get(v7, v7_get_global(v7), \"Http\", ~0);",
          "6010:         v2 = v7_get(v7, v1, ev_name, ~0);",
          "6013:         args = v7_mk_array(v7);",
          "6014:         req = v7_mk_object(v7);",
          "6015:         headers = v7_mk_object(v7);",
          "6018:         v7_set(v7, req, \"method\", ~0,",
          "6019:                v7_mk_string(v7, hm->method.p, hm->method.len, 1));",
          "6020:         v7_set(v7, req, \"uri\", ~0, v7_mk_string(v7, hm->uri.p, hm->uri.len, 1));",
          "6021:         v7_set(v7, req, \"body\", ~0,",
          "6022:                v7_mk_string(v7, hm->body.p, hm->body.len, 1));",
          "6023:         v7_set(v7, req, \"headers\", ~0, headers);",
          "6024:         for (i = 0; hm->header_names[i].len > 0; i++) {",
          "6025:           const struct mg_str *name = &hm->header_names[i];",
          "6026:           const struct mg_str *value = &hm->header_values[i];",
          "6027:           v7_set(v7, headers, name->p, name->len,",
          "6028:                  v7_mk_string(v7, value->p, value->len, 1));",
          "6029:         }",
          "6032:         v7_array_push(v7, args, v7_mk_foreign(v7, nc));",
          "6033:         v7_array_push(v7, args, req);",
          "6034:         if (v7_apply(v7, v2, V7_UNDEFINED, args, &res) == V7_OK &&",
          "6035:             v7_is_truthy(v7, res)) {",
          "6036:           js_callback_handled_request++;",
          "6037:         }",
          "6038:       }",
          "6041:       if (js_callback_handled_request) {",
          "6042:         nc->flags |= MG_F_SEND_AND_CLOSE;",
          "6043:       } else {",
          "6044:         mg_http_call_endpoint_handler(nc, trigger_ev, hm);",
          "6045:       }",
          "6046: #else",
          "6048: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2939: #define MG_ENABLE_IPV6 0",
          "2940: #endif",
          "2946: #ifndef MG_ENABLE_MQTT",
          "2947: #define MG_ENABLE_MQTT 1",
          "2948: #endif",
          "",
          "[Removed Lines]",
          "2942: #ifndef MG_ENABLE_JAVASCRIPT",
          "2943: #define MG_ENABLE_JAVASCRIPT 0",
          "2944: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3243: #ifndef CS_MONGOOSE_SRC_NET_H_",
          "3244: #define CS_MONGOOSE_SRC_NET_H_",
          "",
          "[Removed Lines]",
          "3246: #if MG_ENABLE_JAVASCRIPT",
          "3247: #define EXCLUDE_COMMON",
          "3248: #include <v7.h>",
          "3249: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3311:   int num_ifaces;",
          "3317: };",
          "",
          "[Removed Lines]",
          "3313: #if MG_ENABLE_JAVASCRIPT",
          "3314:   struct v7 *v7;",
          "3315: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3778: int mg_check_ip_acl(const char *acl, uint32_t remote_ip);",
          "",
          "[Removed Lines]",
          "3780: #if MG_ENABLE_JAVASCRIPT",
          "3787: enum v7_err mg_enable_javascript(struct mg_mgr *m, struct v7 *v7,",
          "3788:                                  const char *init_js_file_name);",
          "3789: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7bea65ae7e05d4a810163d4c7dae7615dea59bf",
      "candidate_info": {
        "commit_hash": "c7bea65ae7e05d4a810163d4c7dae7615dea59bf",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/c7bea65ae7e05d4a810163d4c7dae7615dea59bf",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "CC3220 FS support\n\nFor now, we only support SPIFFS-in-a-box, same as CC3200.\nOn CC3200SF it should be possible to have SPIFFS on built-in flash, but that is left for later.\n\nPUBLISHED_FROM=dee337c8cd8ed288c22abe9960eef81e6e90cc4a",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12675: #if CS_PLATFORM == CS_P_CC3200",
          "12676: #include <inc/hw_types.h>",
          "12677: #endif",
          "12685: int set_errno(int e);",
          "12686: const char *drop_dir(const char *fname, bool *is_slfs);",
          "",
          "[Removed Lines]",
          "12678: #include <simplelink/include/simplelink.h>",
          "12679: #include <simplelink/include/fs.h>",
          "",
          "[Added Lines]",
          "12682: #if SL_MAJOR_VERSION_NUM < 2",
          "12683: int slfs_open(const unsigned char *fname, uint32_t flags) {",
          "12684:   _i32 fh;",
          "12685:   _i32 r = sl_FsOpen(fname, flags, NULL /* token */, &fh);",
          "12686:   return (r < 0 ? r : fh);",
          "12687: }",
          "12689: int slfs_open(const unsigned char *fname, uint32_t flags) {",
          "12690:   return sl_FsOpen(fname, flags, NULL /* token */);",
          "12691: }",
          "12692: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12712:   switch (r) {",
          "12713:     case SL_FS_OK:",
          "12714:       return 0;",
          "12716:       return EEXIST;",
          "12718:       return EINVAL;",
          "12721:       return ENOSPC;",
          "12723:       return ENOMEM;",
          "12725:       return ENOENT;",
          "12727:       return ENOTSUP;",
          "12728:   }",
          "12729:   return ENXIO;",
          "",
          "[Removed Lines]",
          "12715:     case SL_FS_FILE_NAME_EXIST:",
          "12717:     case SL_FS_WRONG_FILE_NAME:",
          "12719:     case SL_FS_ERR_NO_AVAILABLE_NV_INDEX:",
          "12720:     case SL_FS_ERR_NO_AVAILABLE_BLOCKS:",
          "12722:     case SL_FS_ERR_FAILED_TO_ALLOCATE_MEM:",
          "12724:     case SL_FS_ERR_FILE_NOT_EXISTS:",
          "12726:     case SL_FS_ERR_NOT_SUPPORTED:",
          "",
          "[Added Lines]",
          "12725:     case SL_ERROR_FS_FILE_NAME_EXIST:",
          "12727:     case SL_ERROR_FS_WRONG_FILE_NAME:",
          "12729:     case SL_ERROR_FS_NO_AVAILABLE_NV_INDEX:",
          "12730:     case SL_ERROR_FS_NOT_ENOUGH_STORAGE_SPACE:",
          "12732:     case SL_ERROR_FS_FAILED_TO_ALLOCATE_MEM:",
          "12734:     case SL_ERROR_FS_FILE_NOT_EXISTS:",
          "12736:     case SL_ERROR_FS_NOT_SUPPORTED:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12751:     SlFsFileInfo_t sl_fi;",
          "12752:     _i32 r = sl_FsGetInfo((const _u8 *) pathname, 0, &sl_fi);",
          "12753:     if (r == SL_FS_OK) {",
          "12755:     }",
          "12757:   } else {",
          "12758:     if (!(flags & O_TRUNC) || (flags & O_APPEND)) {",
          "",
          "[Removed Lines]",
          "12754:       fi->size = sl_fi.FileLen;",
          "12756:     am = FS_MODE_OPEN_READ;",
          "",
          "[Added Lines]",
          "12764:       fi->size = SL_FI_FILE_SIZE(sl_fi);",
          "12766:     am = SL_FS_READ;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12773:       }",
          "12774:       am = FS_MODE_OPEN_CREATE(new_size, 0);",
          "12775:     } else {",
          "12777:     }",
          "12778:   }",
          "12783:     fi->pos = 0;",
          "12784:     r = fd;",
          "12785:   } else {",
          "12788:   }",
          "12789:   return r;",
          "12790: }",
          "",
          "[Removed Lines]",
          "12776:       am = FS_MODE_OPEN_WRITE;",
          "12779:   _i32 r = sl_FsOpen((_u8 *) pathname, am, NULL, &fi->fh);",
          "12780:   LOG(LL_DEBUG, (\"sl_FsOpen(%s, 0x%x) sz %u = %d, %d\", pathname, (int) am,",
          "12781:                  (unsigned int) new_size, (int) r, (int) fi->fh));",
          "12782:   if (r == SL_FS_OK) {",
          "12786:     fi->fh = -1;",
          "12787:     r = set_errno(sl_fs_to_errno(r));",
          "",
          "[Added Lines]",
          "12786:       am = SL_FS_WRITE;",
          "12789:   fi->fh = slfs_open((_u8 *) pathname, am);",
          "12790:   LOG(LL_DEBUG, (\"sl_FsOpen(%s, 0x%x) sz %u = %d\", pathname, (int) am,",
          "12791:                  (unsigned int) new_size, (int) fi->fh));",
          "12792:   int r;",
          "12793:   if (fi->fh >= 0) {",
          "12797:     r = set_errno(sl_fs_to_errno(fi->fh));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12838:   if (r == SL_FS_OK) {",
          "12839:     s->st_mode = S_IFREG | 0666;",
          "12840:     s->st_nlink = 1;",
          "12842:     return 0;",
          "12843:   }",
          "12844:   return set_errno(sl_fs_to_errno(r));",
          "",
          "[Removed Lines]",
          "12841:     s->st_size = sl_fi.FileLen;",
          "",
          "[Added Lines]",
          "12851:     s->st_size = SL_FI_FILE_SIZE(sl_fi);",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212: #if SL_MAJOR_VERSION_NUM < 2",
          "1213: #define SL_ERROR_BSD_EAGAIN SL_EAGAIN",
          "1214: #define SL_ERROR_BSD_EALREADY SL_EALREADY",
          "1215: #define SL_ERROR_BSD_ENOPROTOOPT SL_ENOPROTOOPT",
          "1216: #define SL_ERROR_BSD_ESECDATEERROR SL_ESECDATEERROR",
          "1217: #define SL_ERROR_BSD_ESECSNOVERIFY SL_ESECSNOVERIFY",
          "1218: #define SL_SOCKET_FD_ZERO SL_FD_ZERO",
          "1219: #define SL_SOCKET_FD_SET SL_FD_SET",
          "1220: #define SL_SOCKET_FD_ISSET SL_FD_ISSET",
          "1221: #define SL_SO_SECURE_DOMAIN_NAME_VERIFICATION SO_SECURE_DOMAIN_NAME_VERIFICATION",
          "1223: #define SlDeviceVersion_t SlVersionFull",
          "1224: #define sl_DeviceGet sl_DevGet",
          "1225: #define SL_DEVICE_GENERAL SL_DEVICE_GENERAL_CONFIGURATION",
          "1226: #define SL_DEV_GET_LEN_TYPE _u8",
          "1228: #define SL_DEV_GET_LEN_TYPE _u16",
          "",
          "[Removed Lines]",
          "1227: #else",
          "1229: #endif",
          "",
          "[Added Lines]",
          "1219: #define SL_ERROR_FS_FAILED_TO_ALLOCATE_MEM SL_FS_ERR_FAILED_TO_ALLOCATE_MEM",
          "1220: #define SL_ERROR_FS_FILE_HAS_NOT_BEEN_CLOSE_CORRECTLY \\",
          "1221:   SL_FS_FILE_HAS_NOT_BEEN_CLOSE_CORRECTLY",
          "1222: #define SL_ERROR_FS_FILE_NAME_EXIST SL_FS_FILE_NAME_EXIST",
          "1223: #define SL_ERROR_FS_FILE_NOT_EXISTS SL_FS_ERR_FILE_NOT_EXISTS",
          "1224: #define SL_ERROR_FS_NO_AVAILABLE_NV_INDEX SL_FS_ERR_NO_AVAILABLE_NV_INDEX",
          "1225: #define SL_ERROR_FS_NOT_ENOUGH_STORAGE_SPACE SL_FS_ERR_NO_AVAILABLE_BLOCKS",
          "1226: #define SL_ERROR_FS_NOT_SUPPORTED SL_FS_ERR_NOT_SUPPORTED",
          "1227: #define SL_ERROR_FS_WRONG_FILE_NAME SL_FS_WRONG_FILE_NAME",
          "1228: #define SL_ERROR_FS_INVALID_HANDLE SL_FS_ERR_INVALID_HANDLE",
          "1234: #define SL_FS_READ FS_MODE_OPEN_READ",
          "1235: #define SL_FS_WRITE FS_MODE_OPEN_WRITE",
          "1237: #define SL_FI_FILE_SIZE(fi) ((fi).FileLen)",
          "1238: #define SL_FI_FILE_MAX_SIZE(fi) ((fi).AllocatedLen)",
          "1247: #define FS_MODE_OPEN_CREATE(max_size, flag) \\",
          "1248:   (SL_FS_CREATE | SL_FS_CREATE_MAX_SIZE(max_size))",
          "1249: #define SL_FI_FILE_SIZE(fi) ((fi).Len)",
          "1250: #define SL_FI_FILE_MAX_SIZE(fi) ((fi).MaxSize)",
          "1256: int slfs_open(const unsigned char *fname, uint32_t flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "663e928d65e8cefd0f2597d0cdb9143be9731489",
      "candidate_info": {
        "commit_hash": "663e928d65e8cefd0f2597d0cdb9143be9731489",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/663e928d65e8cefd0f2597d0cdb9143be9731489",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix mg_strdup_nul\n\nPUBLISHED_FROM=25bc4d20016bcb71c4e2e4b7be8d2d0566fdfa2e",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1407: struct mg_str mg_strdup(const struct mg_str s) WEAK;",
          "1408: struct mg_str mg_strdup(const struct mg_str s) {",
          "1410: }",
          "1412: struct mg_str mg_strdup_nul(const struct mg_str s) WEAK;",
          "1413: struct mg_str mg_strdup_nul(const struct mg_str s) {",
          "1415: }",
          "1417: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) WEAK;",
          "",
          "[Removed Lines]",
          "1409:   return mg_strdup_common(s, 1 /* NUL-terminate */);",
          "1414:   return mg_strdup_common(s, 0 /* NUL-terminate */);",
          "",
          "[Added Lines]",
          "1409:   return mg_strdup_common(s, 0 /* NUL-terminate */);",
          "1414:   return mg_strdup_common(s, 1 /* NUL-terminate */);",
          "",
          "---------------"
        ]
      }
    }
  ]
}