{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d99950310ff4477be8df292744e91d783897263e",
      "candidate_info": {
        "commit_hash": "d99950310ff4477be8df292744e91d783897263e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d99950310ff4477be8df292744e91d783897263e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/walker.c",
          "test/altertab2.test",
          "test/altertab3.test",
          "test/window1.test"
        ],
        "message": "Fix problems with sub-selects in WINDOW definitions. Also rename-column operations when the column being renamed appears in a WINDOW definition that is part of a VIEW or TRIGGER.\n\nFossilOrigin-Name: 0387cb3add992b2028efe4f2100188d8f9fdfdcb233329857aa4b46a293cfc97",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/walker.c||src/walker.c",
          "test/altertab2.test||test/altertab2.test",
          "test/altertab3.test||test/altertab3.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d8172a94bce2d067027685e5aa1dc8f5d5d55b5da0832ad2836f6939de68c8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5366:   w.xSelectCallback2 = analyzeAggregatesInSelectEnd;",
          "5367:   w.walkerDepth = 0;",
          "5368:   w.u.pNC = pNC;",
          "5369:   assert( pNC->pSrcList!=0 );",
          "5370:   sqlite3WalkExpr(&w, pExpr);",
          "5371: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5369:   w.pParse = 0;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "858: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "859:         if( pExpr->y.pWin ){",
          "860:           Select *pSel = pNC->pWinSelect;",
          "861:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "862:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "863:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "865:           if( 0==pSel->pWin",
          "866:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "867:           ){",
          "",
          "[Removed Lines]",
          "864:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Added Lines]",
          "861:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1536:       }",
          "1537:     }",
          "1541:     if( p->pNext && p->pEList->nExpr!=p->pNext->pEList->nExpr ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1539:     if( IN_RENAME_OBJECT ){",
          "1540:       Window *pWin;",
          "1541:       for(pWin=p->pWinDefn; pWin; pWin=pWin->pNextWin){",
          "1542:         if( sqlite3ResolveExprListNames(&sNC, pWin->pOrderBy)",
          "1543:          || sqlite3ResolveExprListNames(&sNC, pWin->pPartition)",
          "1544:         ){",
          "1545:           return WRC_Abort;",
          "1546:         }",
          "1547:       }",
          "1548:     }",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #if !defined(SQLITE_OMIT_WINDOWFUNC)",
          "25: static int walkWindowList(Walker *pWalker, Window *pList){",
          "26:   Window *pWin;",
          "27:   for(pWin=pList; pWin; pWin=pWin->pNextWin){",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:   }",
          "32:   return WRC_Continue;",
          "33: }",
          "34: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:       }",
          "57: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "58:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "63:       }",
          "64: #endif",
          "65:     }",
          "",
          "[Removed Lines]",
          "59:         Window *pWin = pExpr->y.pWin;",
          "60:         if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "61:         if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "62:         if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   if( sqlite3WalkExpr(pWalker, p->pHaving) ) return WRC_Abort;",
          "100:   if( sqlite3WalkExprList(pWalker, p->pOrderBy) ) return WRC_Abort;",
          "101:   if( sqlite3WalkExpr(pWalker, p->pLimit) ) return WRC_Abort;",
          "102:   return WRC_Continue;",
          "103: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #if !defined(SQLITE_OMIT_WINDOWFUNC) && !defined(SQLITE_OMIT_ALTERTABLE)",
          "116:   {",
          "117:     Parse *pParse = pWalker->pParse;",
          "118:     if( pParse && IN_RENAME_OBJECT ){",
          "119:       if( walkWindowList(pWalker, p->pWinDefn) ) return WRC_Abort;",
          "120:     }",
          "121:   }",
          "122: #endif",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: do_execsql_test 5.0 {",
          "183:   CREATE TABLE t2(a);",
          "184:   CREATE TRIGGER r2 AFTER INSERT ON t2 WHEN new.a NOT NULL BEGIN",
          "186:       WINDOW w1 AS (",
          "188:       ),",
          "189:       w2 AS (",
          "192:       );",
          "193:   END;",
          "194: } {}",
          "197:   INSERT INTO t2 VALUES(1);",
          "200: do_execsql_test 5.1 {",
          "201:   ALTER TABLE t2 RENAME TO t2x;",
          "202:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "203: } {",
          "204:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.a NOT NULL BEGIN",
          "206:       WINDOW w1 AS (",
          "208:       ),",
          "209:       w2 AS (",
          "212:       );",
          "213:   END}",
          "214: }",
          "",
          "[Removed Lines]",
          "185:     SELECT a, rank() OVER w1 FROM t2",
          "187:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "190:         PARTITION BY b",
          "191:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "196: do_catchsql_test 5.0.1 {",
          "198: } {1 {no such column: b}}",
          "205:     SELECT a, rank() OVER w1 FROM \"t2x\"",
          "207:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "210:         PARTITION BY b",
          "211:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "",
          "[Added Lines]",
          "185:     SELECT a, sum(a) OVER w1 FROM t2",
          "187:         PARTITION BY a ORDER BY a",
          "188:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "191:         PARTITION BY a",
          "192:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "197: do_execsql_test 5.0.1 {",
          "199: } {}",
          "206:     SELECT a, sum(a) OVER w1 FROM \"t2x\"",
          "208:         PARTITION BY a ORDER BY a",
          "209:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "212:         PARTITION BY a",
          "213:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "219: } {",
          "220:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.aaaa NOT NULL BEGIN",
          "222:       WINDOW w1 AS (",
          "224:       ),",
          "225:       w2 AS (",
          "228:       );",
          "229:   END}",
          "230: }",
          "233:   INSERT INTO t2x VALUES(1);",
          "236: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "221:     SELECT aaaa, rank() OVER w1 FROM \"t2x\"",
          "223:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "226:         PARTITION BY b",
          "227:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "232: do_catchsql_test 5.3 {",
          "234: } {1 {no such column: b}}",
          "",
          "[Added Lines]",
          "223:     SELECT aaaa, sum(aaaa) OVER w1 FROM \"t2x\"",
          "225:         PARTITION BY aaaa ORDER BY aaaa",
          "226:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "229:         PARTITION BY aaaa",
          "230:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "235: do_execsql_test 5.3 {",
          "237: } {}",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 January 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix altertab3",
          "17: # If SQLITE_OMIT_ALTERTABLE is defined, omit this file.",
          "18: ifcapable !altertable {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "26:     SELECT sum(b) OVER w FROM t1 WINDOW w AS (ORDER BY a);",
          "27:   END;",
          "28: }",
          "30: do_execsql_test 1.1 {",
          "31:   ALTER TABLE t1 RENAME a TO aaa;",
          "32: }",
          "34: do_execsql_test 1.2 {",
          "35:   SELECT sql FROM sqlite_master WHERE name='tr1'",
          "36: } {{CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "37:     SELECT sum(b) OVER w FROM t1 WINDOW w AS (ORDER BY aaa);",
          "38:   END}}",
          "40: do_execsql_test 1.3 {",
          "41:   INSERT INTO t1 VALUES(1, 2);",
          "42: }",
          "45: finish_test",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:   ) x WHERE x+x;",
          "674: } {}",
          "676: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676: #-------------------------------------------------------------------------",
          "678: do_execsql_test 16.0 {",
          "679:   CREATE TABLE t7(a,b);",
          "680:   INSERT INTO t7(rowid, a, b) VALUES",
          "681:       (1, 1, 3),",
          "682:       (2, 10, 4),",
          "683:       (3, 100, 2);",
          "684: }",
          "686: do_execsql_test 16.1 {",
          "687:   SELECT rowid, sum(a) OVER (PARTITION BY b IN (SELECT rowid FROM t7)) FROM t7;",
          "688: } {",
          "689:   2 10",
          "690:   1 101",
          "691:   3 101",
          "692: }",
          "694: do_execsql_test 16.2 {",
          "695:   SELECT rowid, sum(a) OVER w1 FROM t7",
          "696:   WINDOW w1 AS (PARTITION BY b IN (SELECT rowid FROM t7));",
          "697: } {",
          "698:   2 10",
          "699:   1 101",
          "700:   3 101",
          "701: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "885eeb676b5bf2b6cda8d3449f4eb268fac11ca5",
      "candidate_info": {
        "commit_hash": "885eeb676b5bf2b6cda8d3449f4eb268fac11ca5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/885eeb676b5bf2b6cda8d3449f4eb268fac11ca5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/sqliteInt.h",
          "test/altercol.test"
        ],
        "message": "Enhance the ALTER TABLE RENAME COLUMN feature so that it works on tables that have redundant UNIQUE and/or PRIMARY KEY constraints. Fix for ticket [bc8d94f0fbd633fd9a051e3]\n\nFossilOrigin-Name: f09aa3248e2b4a32ff5b5d37084cb2a27445322cb06a3354cef723f4f0b2cd34",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altercol.test||test/altercol.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca67f2ec0e294384c397db438605df1b47aae5f348a8de94f97286997625d169",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "961:   rc = sqlite3RunParser(p, zSql, &zErr);",
          "962:   assert( p->zErrMsg==0 );",
          "963:   assert( rc!=SQLITE_OK || zErr==0 );",
          "965:   p->zErrMsg = zErr;",
          "966:   if( db->mallocFailed ) rc = SQLITE_NOMEM;",
          "967:   if( rc==SQLITE_OK",
          "",
          "[Removed Lines]",
          "964:   assert( (0!=p->pNewTable) + (0!=p->pNewIndex) + (0!=p->pNewTrigger)<2 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1182: static void renameParseCleanup(Parse *pParse){",
          "1183:   sqlite3 *db = pParse->db;",
          "1184:   if( pParse->pVdbe ){",
          "1185:     sqlite3VdbeFinalize(pParse->pVdbe);",
          "1186:   }",
          "1187:   sqlite3DeleteTable(db, pParse->pNewTable);",
          "1189:   sqlite3DeleteTrigger(db, pParse->pNewTrigger);",
          "1190:   sqlite3DbFree(db, pParse->zErrMsg);",
          "1191:   renameTokenFree(db, pParse->pRename);",
          "",
          "[Removed Lines]",
          "1188:   if( pParse->pNewIndex ) sqlite3FreeIndex(db, pParse->pNewIndex);",
          "",
          "[Added Lines]",
          "1183:   Index *pIdx;",
          "1188:   while( (pIdx = pParse->pNewIndex)!=0 ){",
          "1189:     pParse->pNewIndex = pIdx->pNext;",
          "1190:     sqlite3FreeIndex(db, pIdx);",
          "1191:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296:         for(pIdx=sParse.pNewTable->pIndex; pIdx; pIdx=pIdx->pNext){",
          "1297:           sqlite3WalkExprList(&sWalker, pIdx->aColExpr);",
          "1298:         }",
          "1299:       }",
          "1301:       for(pFKey=sParse.pNewTable->pFKey; pFKey; pFKey=pFKey->pNextFrom){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:         for(pIdx=sParse.pNewIndex; pIdx; pIdx=pIdx->pNext){",
          "1303:           sqlite3WalkExprList(&sWalker, pIdx->aColExpr);",
          "1304:         }",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3467:           }",
          "3468:         }",
          "3469:         if( idxType==SQLITE_IDXTYPE_PRIMARYKEY ) pIdx->idxType = idxType;",
          "3470:         goto exit_create_index;",
          "3471:       }",
          "3472:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3470:         if( IN_RENAME_OBJECT ){",
          "3471:           pIndex->pNext = pParse->pNewIndex;",
          "3472:           pParse->pNewIndex = pIndex;",
          "3473:           pIndex = 0;",
          "3474:         }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3140: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3137:   Index *pNewIndex;         /* An index being constructed by CREATE INDEX.",
          "",
          "---------------"
        ],
        "test/altercol.test||test/altercol.test": [
          "File: test/altercol.test -> test/altercol.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:   {CREATE VIEW v2(e) AS SELECT coalesce(t2.c,t1.f) FROM t1, t2 WHERE t1.b=t2.d}",
          "779: }",
          "783: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781: # 2019-01-08: https://www.sqlite.org/src/tktview/bc8d94f0fbd633fd9a051e3",
          "782: #",
          "783: # ALTER TABLE RENAME COLUMN does not work for tables that have redundant",
          "784: # UNIQUE constraints.",
          "785: #",
          "786: sqlite3 db :memory:",
          "787: do_execsql_test 20.100 {",
          "788:   CREATE TABLE t1(aaa,b,c,UNIQUE(aaA),PRIMARY KEY(aAa),UNIQUE(aAA));",
          "789:   ALTER TABLE t1 RENAME aaa TO bbb;",
          "790:   SELECT sql FROM sqlite_master WHERE name='t1';",
          "791: } {{CREATE TABLE t1(bbb,b,c,UNIQUE(bbb),PRIMARY KEY(bbb),UNIQUE(bbb))}}",
          "792: do_execsql_test 20.105 {",
          "793:   DROP TABLE t1;",
          "794:   CREATE TABLE t1(aaa,b,c,UNIQUE(aaA),PRIMARY KEY(aAa),UNIQUE(aAA))WITHOUT ROWID;",
          "795:   ALTER TABLE t1 RENAME aaa TO bbb;",
          "796:   SELECT sql FROM sqlite_master WHERE name='t1';",
          "797: } {{CREATE TABLE t1(bbb,b,c,UNIQUE(bbb),PRIMARY KEY(bbb),UNIQUE(bbb))WITHOUT ROWID}}",
          "798: do_execsql_test 20.110 {",
          "799:   DROP TABLE t1;",
          "800:   CREATE TABLE t1(aa UNIQUE,bb UNIQUE,cc UNIQUE,UNIQUE(aA),PRIMARY KEY(bB),UNIQUE(cC));",
          "801:   ALTER TABLE t1 RENAME aa TO xx;",
          "802:   ALTER TABLE t1 RENAME bb TO yy;",
          "803:   ALTER TABLE t1 RENAME cc TO zz;",
          "804:   SELECT sql FROM sqlite_master WHERE name='t1';",
          "805: } {{CREATE TABLE t1(xx UNIQUE,yy UNIQUE,zz UNIQUE,UNIQUE(xx),PRIMARY KEY(yy),UNIQUE(zz))}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8f3b4c320f9d289e6fd75632c77874f4f253336",
      "candidate_info": {
        "commit_hash": "d8f3b4c320f9d289e6fd75632c77874f4f253336",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8f3b4c320f9d289e6fd75632c77874f4f253336",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a problem with corrupt fts3 database detection introduced by [95a9a39f].\n\nFossilOrigin-Name: c80bb15b44e9b6a3c0c5a49d5e93e66376c3520ecefc1db7425c8a7e09d3eade",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1414:   ){",
          "1415:     return FTS_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "1412:   if( pReader->nDoclist-(pReader->aDoclist-pReader->aNode) > pReader->nNode",
          "",
          "[Added Lines]",
          "1412:   if( pReader->nDoclist > pReader->nNode-(pReader->aDoclist-pReader->aNode)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7acaed08f946633fca3ab8434dd6349ea6f1bac4fd9ec21f476db013ee06de30",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   INSERT INTO t1(t1) VALUES('optimize');",
          "167: }",
          "170: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #-------------------------------------------------------------------------",
          "170: reset_db",
          "171: do_test 5.0 {",
          "172:   sqlite3 db {}",
          "173:   db deserialize [decode_hexdb {",
          "174: | size 24576 pagesize 4096 filename c15.db",
          "175: | page 1 offset 0",
          "176: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "177: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 04   .....@  ........",
          "178: |     32: 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 04   ................",
          "179: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "180: |     96: 00 00 00 00 0d 0e f9 00 06 0d ec 00 0f cd 0f 69   ...............i",
          "181: |    112: 0f 01 0e 10 0e c6 0d ec 00 00 00 00 00 00 00 00   ................",
          "182: |   3552: 00 00 00 00 00 00 00 00 00 00 00 00 22 06 06 17   ................",
          "183: |   3568: 11 11 01 31 74 61 62 6c 65 74 32 74 32 06 43 52   ...1tablet2t2.CR",
          "184: |   3584: 45 41 54 45 20 54 41 42 4c 45 20 74 32 28 78 29   EATE TABLE t2(x)",
          "185: |   3600: 81 33 04 07 17 1f 1f 01 82 35 74 61 62 6c 65 74   .3.......5tablet",
          "186: |   3616: 31 5f 73 65 67 64 69 72 74 31 5f 73 65 67 64 69   1_segdirt1_segdi",
          "187: |   3632: 72 04 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   r.CREATE TABLE '",
          "188: |   3648: 74 31 5f 73 65 67 64 69 72 27 28 6c 65 76 65 6c   t1_segdir'(level",
          "189: |   3664: 20 49 4e 54 45 47 45 52 2c 69 64 78 20 49 4e 54    INTEGER,idx INT",
          "190: |   3680: 45 47 45 52 2c 73 74 61 72 74 5f 62 6c 6f 63 6b   EGER,start_block",
          "191: |   3696: 20 49 4e 54 45 47 45 52 2c 6c 65 61 76 65 73 5f    INTEGER,leaves_",
          "192: |   3712: 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45   end_block INTEGE",
          "193: |   3728: 52 2c 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45   R,end_block INTE",
          "194: |   3744: 47 45 52 2c 72 6f 6f 74 20 42 4c 4f 42 2c 50 52   GER,root BLOB,PR",
          "195: |   3760: 49 4d 41 52 59 20 4b 45 59 28 6c 65 76 65 6c 2c   IMARY KEY(level,",
          "196: |   3776: 20 69 64 78 29 29 31 05 06 17 45 1f 01 00 69 6e    idx))1...E...in",
          "197: |   3792: 64 65 78 73 71 6c 69 74 65 5f 61 75 74 6f 69 6e   dexsqlite_autoin",
          "198: |   3808: 64 65 79 5f 74 31 5f 73 65 67 64 69 72 5f 31 74   dey_t1_segdir_1t",
          "199: |   3824: 31 5f 73 65 67 64 69 72 05 00 00 00 08 00 00 00   1_segdir........",
          "200: |   3840: 00 66 03 07 17 23 23 01 81 13 74 61 62 6c 65 74   .f...##...tablet",
          "201: |   3856: 31 5f 73 65 67 6d 65 6e 74 73 74 31 5f 73 65 67   1_segmentst1_seg",
          "202: |   3872: 6d 65 6e 74 73 03 43 52 45 41 54 45 20 54 41 42   ments.CREATE TAB",
          "203: |   3888: 4c 45 20 27 74 31 5f 73 65 67 6d 65 6e 74 73 27   LE 't1_segments'",
          "204: |   3904: 28 62 6c 6f 63 6b 69 64 20 49 4e 54 45 47 45 52   (blockid INTEGER",
          "205: |   3920: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62 6c    PRIMARY KEY, bl",
          "206: |   3936: 6f 63 6b 20 42 4c 4f 42 29 62 02 07 17 21 21 01   ock BLOB)b...!!.",
          "207: |   3952: 81 0f 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65 6e   ..tablet1_conten",
          "208: |   3968: 74 74 31 5f 63 6f 6e 74 65 6e 74 02 43 52 45 41   tt1_content.CREA",
          "209: |   3984: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "210: |   4000: 74 65 6e 74 27 28 64 6f 63 69 64 20 49 4e 54 45   tent'(docid INTE",
          "211: |   4016: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "212: |   4032: 20 27 63 30 63 6f 6e 74 65 6e 74 27 29 31 01 06    'c0content')1..",
          "213: |   4048: 17 11 11 08 51 74 61 62 6c 65 74 31 74 31 43 52   ....Qtablet1t1CR",
          "214: |   4064: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "215: |   4080: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 33   LE t1 USING fts3",
          "216: | page 2 offset 4096",
          "217: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "218: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "219: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "220: | page 3 offset 8192",
          "221: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "222: | page 4 offset 12288",
          "223: |      0: 0d 00 00 00 01 0f d6 00 0f d6 00 00 00 00 00 00   ................",
          "224: |   4048: 00 00 00 00 00 00 28 01 07 08 08 08 08 15 46 30   ......(.......F0",
          "225: |   4064: 20 32 39 00 05 61 62 61 63 6b 03 01 02 00 03 02    29..aback......",
          "226: |   4080: 66 74 03 02 02 00 03 04 6e 64 6f 60 30 30 20 00   ft......ndo`00 .",
          "227: | page 5 offset 16384",
          "228: |      0: a0 00 00 00 10 ff b0 00 ff fb 00 00 00 00 00 00   ................",
          "229: |   4080: 00 00 00 00 00 00 00 00 00 00 00 04 04 08 08 09   ................",
          "230: | page 6 offset 20480",
          "231: |      0: 0d 00 00 00 05 0f b8 00 0f f4 0f e9 0f d6 0f c7   ................",
          "232: |     16: 0f b8 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64   ..'t1_content'(d",
          "233: |     32: 6f 63 69 64 20 49 4e 54 45 47 45 52 20 50 52 49   ocid INTEGER PRI",
          "234: |     48: 4d 41 52 59 20 4b 45 59 2c 20 27 63 30 63 6f 6e   MARY KEY, 'c0con",
          "235: |     64: 74 65 6e 74 27 29 31 01 06 17 11 11 08 51 74 61   tent')1......Qta",
          "236: |     80: 62 6c 65 74 31 74 31 43 52 45 41 54 45 20 56 49   blet1t1CREATE VI",
          "237: |     96: 52 54 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55   RTUAL TABLE t1 U",
          "238: |    112: 53 49 4e 47 20 66 74 73 33 0d 00 00 00 03 0f e0   SING fts3.......",
          "239: |    128: 00 0f f6 0f ec 0f e0 00 00 00 00 00 00 00 00 00   ................",
          "240: |   4016: 00 00 00 00 00 00 00 00 0d 05 02 23 61 75 74 6f   ...........#auto",
          "241: |   4032: 6d 65 72 67 65 3d 35 0d 04 02 23 6d 65 72 67 65   merge=5...#merge",
          "242: |   4048: 3d 31 30 30 2c 38 11 03 02 2b 69 6e 74 65 67 72   =100,8...+integr",
          "243: |   4064: 69 74 79 2d 63 68 65 63 6b 09 02 02 1b 72 65 62   ity-check....reb",
          "244: |   4080: 75 69 6c 64 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   uild....optimize",
          "245: | end c15.db",
          "246: }]} {}",
          "248: do_catchsql_test 5.1 {",
          "249:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "250: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c3de90da1a6dcb5291b2fdb6d889a51743d21c6",
      "candidate_info": {
        "commit_hash": "2c3de90da1a6dcb5291b2fdb6d889a51743d21c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c3de90da1a6dcb5291b2fdb6d889a51743d21c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Add a VdbeCoverage() macro that was omitted from check-in [eea1e7aa57e74c43].\n\nFossilOrigin-Name: cd2317d04c1c4bcf5fe63aa02a6051bdfae8f5566a098e3f45bf9ec1dd0c3ea6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f41b44ca2ecb907ea0fd09a974ac9dbdf911463a94f0f77c826cf1b1d9c3e8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1583:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1584:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1585:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1586:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1587:         }else{",
          "1588: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1586:           VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ce974d122875c6e9ac3017660cc7a3746d276af",
      "candidate_info": {
        "commit_hash": "0ce974d122875c6e9ac3017660cc7a3746d276af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ce974d122875c6e9ac3017660cc7a3746d276af",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/pcache.c",
          "test/cast.test",
          "test/e_expr.test"
        ],
        "message": "Adjust requirements marks and add new requirements tests.\n\nFossilOrigin-Name: ebb81dad1f43dac4636cd44d4055d1d4b198c675f73e23c5a2d8d992ae27fe1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/pcache.c||src/pcache.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 491f0f9bbddb6302536d99abd1ea481fd747ddcf6c6eaaacc0338d147b119081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c"
        ],
        "src/pcache.c||src/pcache.c": [
          "File: src/pcache.c -> src/pcache.c"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "419: # 2019-06-10",
          "420: # https://www.sqlite.org/src/info/dd6bffbfb6e61db9",
          "421: #",
          "426: #",
          "427: do_execsql_test cast-7.20 {",
          "428:   DROP TABLE IF EXISTS t0;",
          "",
          "[Removed Lines]",
          "422: # EVIDENCE-OF: R-09295-61337 Casting a TEXT or BLOB value into NUMERIC",
          "423: # first does a forced conversion into REAL but then further converts the",
          "424: # result into INTEGER if and only if the conversion from REAL to INTEGER",
          "425: # is lossless and reversible.",
          "",
          "[Added Lines]",
          "422: # EVIDENCE-OF: R-55084-10555 Casting a TEXT or BLOB value into NUMERIC",
          "423: # yields either an INTEGER or a REAL result.",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1644: } integer 9223372036854775807",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "1658: # EVIDENCE-OF: R-30347-18702 Casting a REAL or INTEGER value to NUMERIC",
          "1659: # is a no-op, even if a real value could be losslessly converted to an",
          "",
          "[Removed Lines]",
          "1647: # EVIDENCE-OF: R-09295-61337 Casting a TEXT or BLOB value into NUMERIC",
          "1648: # first does a forced conversion into REAL but then further converts the",
          "1649: # result into INTEGER if and only if the conversion from REAL to INTEGER",
          "1650: # is lossless and reversible.",
          "",
          "[Added Lines]",
          "1647: # EVIDENCE-OF: R-55084-10555 Casting a TEXT or BLOB value into NUMERIC",
          "1648: # yields either an INTEGER or a REAL result.",
          "1649: #",
          "1650: # EVIDENCE-OF: R-48945-04866 If the input text looks like an integer",
          "1651: # (there is no decimal point nor exponent) and the value is small enough",
          "1652: # to fit in a 64-bit signed integer, then the result will be INTEGER.",
          "1653: #",
          "1654: # EVIDENCE-OF: R-47045-23194 Input text that looks like floating point",
          "1655: # (there is a decimal point and/or an exponent) and the text describes a",
          "1656: # value that can be losslessly converted back and forth between IEEE 754",
          "1657: # 64-bit float and a 51-bit signed integer, then the result is INTEGER.",
          "1664: do_expr_test e_expr-32.1.6 {CAST( '9.223372036e14' AS NUMERIC)} integer  922337203600000",
          "1665: do_expr_test e_expr-32.1.7 {CAST('-9.223372036e14' AS NUMERIC)} integer -922337203600000",
          "1666: do_expr_test e_expr-32.1.8 {CAST( '9.223372036e15' AS NUMERIC)} real     9223372036000000.0",
          "1667: do_expr_test e_expr-32.1.9 {CAST('-9.223372036e15' AS NUMERIC)} real    -9223372036000000.0",
          "1670: # EVIDENCE-OF: R-50300-26941 Any text input that describes a value",
          "1671: # outside the range of a 64-bit signed integer yields a REAL result.",
          "1672: #",
          "1673: do_expr_test e_expr-32.1.20 { CAST('9223372036854775807' AS numeric) } \\",
          "1674:    integer 9223372036854775807",
          "1675: do_expr_test e_expr-32.1.21 { CAST('9223372036854775808' AS numeric) } \\",
          "1676:    real 9.22337203685478e+18",
          "1677: do_expr_test e_expr-32.1.22 { CAST('-9223372036854775808' AS numeric) } \\",
          "1678:    integer -9223372036854775808",
          "1679: do_expr_test e_expr-32.1.23 { CAST('-9223372036854775809' AS numeric) } \\",
          "1680:    real -9.22337203685478e+18",
          "",
          "---------------"
        ]
      }
    }
  ]
}