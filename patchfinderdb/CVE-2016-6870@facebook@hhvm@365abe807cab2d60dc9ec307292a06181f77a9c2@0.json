{
  "cve_id": "CVE-2016-6870",
  "cve_desc": "Out-of-bounds write in the (1) mb_detect_encoding, (2) mb_send_mail, and (3) mb_detect_order functions in Facebook HHVM before 3.15.0 allows attackers to have unspecified impact via unknown vectors.",
  "repo": "facebook/hhvm",
  "patch_hash": "365abe807cab2d60dc9ec307292a06181f77a9c2",
  "patch_info": {
    "commit_hash": "365abe807cab2d60dc9ec307292a06181f77a9c2",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/365abe807cab2d60dc9ec307292a06181f77a9c2",
    "files": [
      "hphp/runtime/ext/mbstring/ext_mbstring.cpp",
      "hphp/test/quick/mbstring-oob.php"
    ],
    "message": "Use req::strndup in php_mb_parse_encoding_list to prevent oob memory write.\n\nSummary:\nFix out of bounds write access in mb_detect_encoding.  Using strndup in\nphp_mb_parse_encoding_list will cause strings with embedded nulls to be\nunexpectedly shortened.  The expected length of the string is tracked in\nvalue_length but since strndup may copy fewer characters when there are\nmbedded null this can lead to oob writes into tmpstr.\n\nI've found a couple other places in this file that use strndup and replaced\nthem with req::strndup as well.  The use of strndup in mb_send_mail also seemed\nto be a leak.\n\nThis replaces uses of strndup with req::strndup which can handle embedded\nnulls properly.\n\nIt looks like I also accidentally fixed t11337047 at the same time.  Adding it to the list of tasks.\n\nReviewed By: paulbiss\n\nDifferential Revision: D3360065\n\nfbshipit-source-id: 99776cf9105e3789883380bf30240009eec52cec",
    "before_after_code_files": [
      "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
      "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp": [
      "File: hphp/runtime/ext/mbstring/ext_mbstring.cpp -> hphp/runtime/ext/mbstring/ext_mbstring.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "556:     if (value[0]=='\"' && value[value_length-1]=='\"' && value_length>2) {",
      "558:       value_length -= 2;",
      "559:     }",
      "562:     if (tmpstr == nullptr) {",
      "563:       return 0;",
      "564:     }",
      "",
      "[Removed Lines]",
      "557:       tmpstr = (char *)strndup(value+1, value_length-2);",
      "560:     else",
      "561:       tmpstr = (char *)strndup(value, value_length);",
      "",
      "[Added Lines]",
      "557:       tmpstr = req::strndup(value + 1, value_length - 2);",
      "559:     } else {",
      "560:       tmpstr = req::strndup(value, value_length);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "640:       }",
      "641:       ret = 0;",
      "642:     }",
      "644:   }",
      "646:   return ret;",
      "",
      "[Removed Lines]",
      "643:     free(tmpstr);",
      "",
      "[Added Lines]",
      "643:     req::free(tmpstr);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2254:   info.num_from_encodings     = MBSTRG(http_input_list_size);",
      "2255:   info.from_language          = MBSTRG(current_language);",
      "2258:   Array resultArr = Array::Create();",
      "2259:   mbfl_encoding *detected =",
      "2260:     _php_mb_encoding_handler_ex(&info, resultArr, encstr);",
      "2262:   result.assignIfRef(resultArr);",
      "2264:   MBSTRG(http_input_identify) = detected;",
      "",
      "[Removed Lines]",
      "2257:   char *encstr = strndup(encoded_string.data(), encoded_string.size());",
      "2261:   free(encstr);",
      "",
      "[Added Lines]",
      "2257:   char *encstr = req::strndup(encoded_string.data(), encoded_string.size());",
      "2261:   req::free(encstr);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4251:   if (!to.empty()) {",
      "4252:     int to_len = to.size();",
      "4253:     if (to_len > 0) {",
      "4255:       for (; to_len; to_len--) {",
      "4256:         if (!isspace((unsigned char)to_r[to_len - 1])) {",
      "4257:           break;",
      "",
      "[Removed Lines]",
      "4254:       to_r = strndup(to.data(), to_len);",
      "",
      "[Added Lines]",
      "4254:       to_r = req::strndup(to.data(), to_len);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4398:                                encoded_message.data(),",
      "4399:                                all_headers, cmd.data()));",
      "4400:   mbfl_memory_device_clear(&device);",
      "4401:   return ret;",
      "4402: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4401:   if (to_r != to.data()) {",
      "4402:     req::free(to_r);",
      "4403:   }",
      "",
      "---------------"
    ],
    "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php": [
      "File: hphp/test/quick/mbstring-oob.php -> hphp/test/quick/mbstring-oob.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?hh // strict",
      "4: $var0 = null;",
      "5: $var3 = \"\\x00\";",
      "6: $var3 = mb_detect_encoding($var0,$var3);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7d310c2d7129932d43dd3e839140633ff675001",
      "candidate_info": {
        "commit_hash": "b7d310c2d7129932d43dd3e839140633ff675001",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/b7d310c2d7129932d43dd3e839140633ff675001",
        "files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/slow/ext_mb/mb_sendmail_null.php",
          "hphp/test/slow/ext_mb/mb_sendmail_null.php.expectf"
        ],
        "message": "Fix buffer overruns in mb_send_mail\n\nSummary:\nThe code assumed that strndup(s, n) allocated at least n+1 bytes, but\nit only allocates min(strlen(s), n)+1 bytes.\n\nDifferential Revision: D3628971\n\nfbshipit-source-id: 06ba5aae7f1dca20f764d2ca50c789779678c6ae",
        "before_after_code_files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/slow/ext_mb/mb_sendmail_null.php||hphp/test/slow/ext_mmb_sendmail_null.php",
          "hphp/test/slow/ext_mb/mb_sendmail_null.php.expectf||hphp/test/slow/ext_mmb_sendmail_null.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp": [
          "File: hphp/runtime/ext/mbstring/ext_mbstring.cpp -> hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:     if (value[0]=='\"' && value[value_length-1]=='\"' && value_length>2) {",
          "557:       tmpstr = req::strndup(value + 1, value_length - 2);",
          "559:     } else {",
          "560:       tmpstr = req::strndup(value, value_length);",
          "561:     }",
          "563:       return 0;",
          "564:     }",
          "",
          "[Removed Lines]",
          "558:       value_length -= 2;",
          "562:     if (tmpstr == nullptr) {",
          "",
          "[Added Lines]",
          "561:     value_length = tmpstr ? strlen(tmpstr) : 0;",
          "562:     if (!value_length) {",
          "563:       req::free(tmpstr);",
          "564:       if (return_list) {",
          "566:       }",
          "567:       if (return_size) {",
          "569:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4251:   char *to_r = nullptr;",
          "4252:   int err = 0;",
          "4262:       }",
          "4275:       }",
          "4278:     }",
          "4279:   } else {",
          "4280:     raise_warning(\"Missing To: field\");",
          "",
          "[Removed Lines]",
          "4253:   if (!to.empty()) {",
          "4254:     int to_len = to.size();",
          "4255:     if (to_len > 0) {",
          "4256:       to_r = req::strndup(to.data(), to_len);",
          "4257:       for (; to_len; to_len--) {",
          "4258:         if (!isspace((unsigned char)to_r[to_len - 1])) {",
          "4259:           break;",
          "4260:         }",
          "4261:         to_r[to_len - 1] = '\\0';",
          "4263:       for (int i = 0; to_r[i]; i++) {",
          "4264:         if (iscntrl((unsigned char)to_r[i])) {",
          "4272:           SKIP_LONG_HEADER_SEP_MBSTRING(to_r, i);",
          "4273:           to_r[i] = ' ';",
          "4274:         }",
          "4276:     } else {",
          "4277:       to_r = (char*)to.data();",
          "",
          "[Added Lines]",
          "4260:   if (auto to_len = strlen(to.data())) { // not to.size()",
          "4261:     to_r = req::strndup(to.data(), to_len);",
          "4262:     for (; to_len; to_len--) {",
          "4263:       if (!isspace((unsigned char)to_r[to_len - 1])) {",
          "4264:         break;",
          "4266:       to_r[to_len - 1] = '\\0';",
          "4267:     }",
          "4268:     for (int i = 0; to_r[i]; i++) {",
          "4269:       if (iscntrl((unsigned char)to_r[i])) {",
          "4277:         SKIP_LONG_HEADER_SEP_MBSTRING(to_r, i);",
          "4278:         to_r[i] = ' ';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4400:                                encoded_message.data(),",
          "4401:                                all_headers, cmd.data()));",
          "4402:   mbfl_memory_device_clear(&device);",
          "4406:   return ret;",
          "4407: }",
          "",
          "[Removed Lines]",
          "4403:   if (to_r != to.data()) {",
          "4404:     req::free(to_r);",
          "4405:   }",
          "",
          "[Added Lines]",
          "4405:   req::free(to_r);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_mb/mb_sendmail_null.php||hphp/test/slow/ext_mmb_sendmail_null.php": [
          "File: hphp/test/slow/ext_mb/mb_sendmail_null.php -> hphp/test/slow/ext_mmb_sendmail_null.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_mb/mb_sendmail_null.php.expectf||hphp/test/slow/ext_mmb_sendmail_null.php.expectf": [
          "File: hphp/test/slow/ext_mb/mb_sendmail_null.php.expectf -> hphp/test/slow/ext_mmb_sendmail_null.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0ed15f19de628a0450470efc42cc338294b3304",
      "candidate_info": {
        "commit_hash": "b0ed15f19de628a0450470efc42cc338294b3304",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/b0ed15f19de628a0450470efc42cc338294b3304",
        "files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/quick/mbstring-oob.php"
        ],
        "message": "Use req::strndup in php_mb_parse_encoding_list to prevent oob memory write.\n\nSummary:\nFix out of bounds write access in mb_detect_encoding.  Using strndup in\nphp_mb_parse_encoding_list will cause strings with embedded nulls to be\nunexpectedly shortened.  The expected length of the string is tracked in\nvalue_length but since strndup may copy fewer characters when there are\nmbedded null this can lead to oob writes into tmpstr.\n\nI've found a couple other places in this file that use strndup and replaced\nthem with req::strndup as well.  The use of strndup in mb_send_mail also seemed\nto be a leak.\n\nThis replaces uses of strndup with req::strndup which can handle embedded\nnulls properly.\n\nIt looks like I also accidentally fixed t11337047 at the same time.  Adding it to the list of tasks.\n\nReviewed By: paulbiss\n\nDifferential Revision: D3360065\n\nfbshipit-source-id: 99776cf9105e3789883380bf30240009eec52cec",
        "before_after_code_files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
            "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
          ],
          "candidate": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
            "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp": [
          "File: hphp/runtime/ext/mbstring/ext_mbstring.cpp -> hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:     if (value[0]=='\"' && value[value_length-1]=='\"' && value_length>2) {",
          "559:       value_length -= 2;",
          "560:     }",
          "563:     if (tmpstr == nullptr) {",
          "564:       return 0;",
          "565:     }",
          "",
          "[Removed Lines]",
          "558:       tmpstr = (char *)strndup(value+1, value_length-2);",
          "561:     else",
          "562:       tmpstr = (char *)strndup(value, value_length);",
          "",
          "[Added Lines]",
          "558:       tmpstr = req::strndup(value + 1, value_length - 2);",
          "560:     } else {",
          "561:       tmpstr = req::strndup(value, value_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "641:       }",
          "642:       ret = 0;",
          "643:     }",
          "645:   }",
          "647:   return ret;",
          "",
          "[Removed Lines]",
          "644:     free(tmpstr);",
          "",
          "[Added Lines]",
          "644:     req::free(tmpstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2255:   info.num_from_encodings     = MBSTRG(http_input_list_size);",
          "2256:   info.from_language          = MBSTRG(current_language);",
          "2259:   Array resultArr = Array::Create();",
          "2260:   mbfl_encoding *detected =",
          "2261:     _php_mb_encoding_handler_ex(&info, resultArr, encstr);",
          "2263:   result.assignIfRef(resultArr);",
          "2265:   MBSTRG(http_input_identify) = detected;",
          "",
          "[Removed Lines]",
          "2258:   char *encstr = strndup(encoded_string.data(), encoded_string.size());",
          "2262:   free(encstr);",
          "",
          "[Added Lines]",
          "2258:   char *encstr = req::strndup(encoded_string.data(), encoded_string.size());",
          "2262:   req::free(encstr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4252:   if (!to.empty()) {",
          "4253:     int to_len = to.size();",
          "4254:     if (to_len > 0) {",
          "4256:       for (; to_len; to_len--) {",
          "4257:         if (!isspace((unsigned char)to_r[to_len - 1])) {",
          "4258:           break;",
          "",
          "[Removed Lines]",
          "4255:       to_r = strndup(to.data(), to_len);",
          "",
          "[Added Lines]",
          "4255:       to_r = req::strndup(to.data(), to_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4399:                                encoded_message.data(),",
          "4400:                                all_headers, cmd.data()));",
          "4401:   mbfl_memory_device_clear(&device);",
          "4402:   return ret;",
          "4403: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4402:   if (to_r != to.data()) {",
          "4403:     req::free(to_r);",
          "4404:   }",
          "",
          "---------------"
        ],
        "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php": [
          "File: hphp/test/quick/mbstring-oob.php -> hphp/test/quick/mbstring-oob.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh // strict",
          "4: $var0 = null;",
          "5: $var3 = \"\\x00\";",
          "6: $var3 = mb_detect_encoding($var0,$var3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "121a804ca6454e3e489d1328452e24f729ebda6f",
      "candidate_info": {
        "commit_hash": "121a804ca6454e3e489d1328452e24f729ebda6f",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/121a804ca6454e3e489d1328452e24f729ebda6f",
        "files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/quick/mbstring-oob.php"
        ],
        "message": "Use req::strndup in php_mb_parse_encoding_list to prevent oob memory write.\n\nSummary:\nFix out of bounds write access in mb_detect_encoding.  Using strndup in\nphp_mb_parse_encoding_list will cause strings with embedded nulls to be\nunexpectedly shortened.  The expected length of the string is tracked in\nvalue_length but since strndup may copy fewer characters when there are\nmbedded null this can lead to oob writes into tmpstr.\n\nI've found a couple other places in this file that use strndup and replaced\nthem with req::strndup as well.  The use of strndup in mb_send_mail also seemed\nto be a leak.\n\nThis replaces uses of strndup with req::strndup which can handle embedded\nnulls properly.\n\nIt looks like I also accidentally fixed t11337047 at the same time.  Adding it to the list of tasks.\n\nReviewed By: paulbiss\n\nDifferential Revision: D3360065\n\nfbshipit-source-id: 99776cf9105e3789883380bf30240009eec52cec",
        "before_after_code_files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
            "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
          ],
          "candidate": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
            "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp": [
          "File: hphp/runtime/ext/mbstring/ext_mbstring.cpp -> hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:     if (value[0]=='\"' && value[value_length-1]=='\"' && value_length>2) {",
          "558:       value_length -= 2;",
          "559:     }",
          "562:     if (tmpstr == nullptr) {",
          "563:       return 0;",
          "564:     }",
          "",
          "[Removed Lines]",
          "557:       tmpstr = (char *)strndup(value+1, value_length-2);",
          "560:     else",
          "561:       tmpstr = (char *)strndup(value, value_length);",
          "",
          "[Added Lines]",
          "557:       tmpstr = req::strndup(value + 1, value_length - 2);",
          "559:     } else {",
          "560:       tmpstr = req::strndup(value, value_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640:       }",
          "641:       ret = 0;",
          "642:     }",
          "644:   }",
          "646:   return ret;",
          "",
          "[Removed Lines]",
          "643:     free(tmpstr);",
          "",
          "[Added Lines]",
          "643:     req::free(tmpstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2254:   info.num_from_encodings     = MBSTRG(http_input_list_size);",
          "2255:   info.from_language          = MBSTRG(current_language);",
          "2258:   Array resultArr = Array::Create();",
          "2259:   mbfl_encoding *detected =",
          "2260:     _php_mb_encoding_handler_ex(&info, resultArr, encstr);",
          "2262:   result.assignIfRef(resultArr);",
          "2264:   MBSTRG(http_input_identify) = detected;",
          "",
          "[Removed Lines]",
          "2257:   char *encstr = strndup(encoded_string.data(), encoded_string.size());",
          "2261:   free(encstr);",
          "",
          "[Added Lines]",
          "2257:   char *encstr = req::strndup(encoded_string.data(), encoded_string.size());",
          "2261:   req::free(encstr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4251:   if (!to.empty()) {",
          "4252:     int to_len = to.size();",
          "4253:     if (to_len > 0) {",
          "4255:       for (; to_len; to_len--) {",
          "4256:         if (!isspace((unsigned char)to_r[to_len - 1])) {",
          "4257:           break;",
          "",
          "[Removed Lines]",
          "4254:       to_r = strndup(to.data(), to_len);",
          "",
          "[Added Lines]",
          "4254:       to_r = req::strndup(to.data(), to_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4398:                                encoded_message.data(),",
          "4399:                                all_headers, cmd.data()));",
          "4400:   mbfl_memory_device_clear(&device);",
          "4401:   return ret;",
          "4402: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4401:   if (to_r != to.data()) {",
          "4402:     req::free(to_r);",
          "4403:   }",
          "",
          "---------------"
        ],
        "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php": [
          "File: hphp/test/quick/mbstring-oob.php -> hphp/test/quick/mbstring-oob.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh // strict",
          "4: $var0 = null;",
          "5: $var3 = \"\\x00\";",
          "6: $var3 = mb_detect_encoding($var0,$var3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd8e463c04c7f131e18d51c52f943bd750a8570d",
      "candidate_info": {
        "commit_hash": "bd8e463c04c7f131e18d51c52f943bd750a8570d",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/bd8e463c04c7f131e18d51c52f943bd750a8570d",
        "files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/quick/mbstring-oob.php"
        ],
        "message": "Use req::strndup in php_mb_parse_encoding_list to prevent oob memory write.\n\nSummary:\nFix out of bounds write access in mb_detect_encoding.  Using strndup in\nphp_mb_parse_encoding_list will cause strings with embedded nulls to be\nunexpectedly shortened.  The expected length of the string is tracked in\nvalue_length but since strndup may copy fewer characters when there are\nmbedded null this can lead to oob writes into tmpstr.\n\nI've found a couple other places in this file that use strndup and replaced\nthem with req::strndup as well.  The use of strndup in mb_send_mail also seemed\nto be a leak.\n\nThis replaces uses of strndup with req::strndup which can handle embedded\nnulls properly.\n\nIt looks like I also accidentally fixed t11337047 at the same time.  Adding it to the list of tasks.\n\nReviewed By: paulbiss\n\nDifferential Revision: D3360065\n\nfbshipit-source-id: 99776cf9105e3789883380bf30240009eec52cec",
        "before_after_code_files": [
          "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
            "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
          ],
          "candidate": [
            "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp",
            "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/mbstring/ext_mbstring.cpp||hphp/runtime/ext/mbstring/ext_mbstring.cpp": [
          "File: hphp/runtime/ext/mbstring/ext_mbstring.cpp -> hphp/runtime/ext/mbstring/ext_mbstring.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "554:     if (value[0]=='\"' && value[value_length-1]=='\"' && value_length>2) {",
          "556:       value_length -= 2;",
          "557:     }",
          "560:     if (tmpstr == nullptr) {",
          "561:       return 0;",
          "562:     }",
          "",
          "[Removed Lines]",
          "555:       tmpstr = (char *)strndup(value+1, value_length-2);",
          "558:     else",
          "559:       tmpstr = (char *)strndup(value, value_length);",
          "",
          "[Added Lines]",
          "555:       tmpstr = req::strndup(value + 1, value_length - 2);",
          "557:     } else {",
          "558:       tmpstr = req::strndup(value, value_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "638:       }",
          "639:       ret = 0;",
          "640:     }",
          "642:   }",
          "644:   return ret;",
          "",
          "[Removed Lines]",
          "641:     free(tmpstr);",
          "",
          "[Added Lines]",
          "641:     req::free(tmpstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2232:   info.num_from_encodings     = MBSTRG(http_input_list_size);",
          "2233:   info.from_language          = MBSTRG(current_language);",
          "2236:   Array resultArr = Array::Create();",
          "2237:   mbfl_encoding *detected =",
          "2238:     _php_mb_encoding_handler_ex(&info, resultArr, encstr);",
          "2240:   result.assignIfRef(resultArr);",
          "2242:   MBSTRG(http_input_identify) = detected;",
          "",
          "[Removed Lines]",
          "2235:   char *encstr = strndup(encoded_string.data(), encoded_string.size());",
          "2239:   free(encstr);",
          "",
          "[Added Lines]",
          "2235:   char *encstr = req::strndup(encoded_string.data(), encoded_string.size());",
          "2239:   req::free(encstr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4224:   if (!to.empty()) {",
          "4225:     int to_len = to.size();",
          "4226:     if (to_len > 0) {",
          "4228:       for (; to_len; to_len--) {",
          "4229:         if (!isspace((unsigned char)to_r[to_len - 1])) {",
          "4230:           break;",
          "",
          "[Removed Lines]",
          "4227:       to_r = strndup(to.data(), to_len);",
          "",
          "[Added Lines]",
          "4227:       to_r = req::strndup(to.data(), to_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4371:                                encoded_message.data(),",
          "4372:                                all_headers, cmd.data()));",
          "4373:   mbfl_memory_device_clear(&device);",
          "4374:   return ret;",
          "4375: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4374:   if (to_r != to.data()) {",
          "4375:     req::free(to_r);",
          "4376:   }",
          "",
          "---------------"
        ],
        "hphp/test/quick/mbstring-oob.php||hphp/test/quick/mbstring-oob.php": [
          "File: hphp/test/quick/mbstring-oob.php -> hphp/test/quick/mbstring-oob.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh // strict",
          "4: $var0 = null;",
          "5: $var3 = \"\\x00\";",
          "6: $var3 = mb_detect_encoding($var0,$var3);",
          "",
          "---------------"
        ]
      }
    }
  ]
}