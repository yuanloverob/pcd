{
  "cve_id": "CVE-2022-21655",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The envoy common router will segfault if an internal redirect selects a route configured with direct response or redirect actions. This will result in a denial of service. As a workaround turn off internal redirects if direct response entries are configured on the same listener.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "177d608155ba8b11598b9bbf8240e90d8c350682",
  "patch_info": {
    "commit_hash": "177d608155ba8b11598b9bbf8240e90d8c350682",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/177d608155ba8b11598b9bbf8240e90d8c350682",
    "files": [
      "docs/root/version_history/current.rst",
      "source/common/router/router.cc",
      "test/common/router/router_test.cc",
      "test/integration/redirect_integration_test.cc"
    ],
    "message": "CVE-2022-21655\n\nCrash with direct_response\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/common/router/router.cc||source/common/router/router.cc",
      "test/common/router/router_test.cc||test/common/router/router_test.cc",
      "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1692:     return false;",
      "1693:   }",
      "1696:   for (const auto& predicate : policy.predicates()) {",
      "1697:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
      "1698:                                       !target_is_http)) {",
      "",
      "[Removed Lines]",
      "1695:   const auto& route_name = route->routeEntry()->routeName();",
      "",
      "[Added Lines]",
      "1695:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
      "1696:                                                         : route->routeEntry()->routeName();",
      "",
      "---------------"
    ],
    "test/common/router/router_test.cc||test/common/router/router_test.cc": [
      "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: using testing::Eq;",
      "57: using testing::InSequence;",
      "58: using testing::Invoke;",
      "59: using testing::MockFunction;",
      "60: using testing::NiceMock;",
      "61: using testing::Property;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: using testing::InvokeWithoutArgs;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:       sendLocalReply(Http::Code::ServiceUnavailable,",
      "320:                      testing::Eq(\"missing required header: :method\"), _, _,",
      "321:                      \"filter_removed_required_request_headers{missing_required_header:_:method}\"))",
      "323:   router_.decodeHeaders(headers, true);",
      "324:   router_.onDestroy();",
      "325: }",
      "",
      "[Removed Lines]",
      "322:       .WillOnce(testing::InvokeWithoutArgs([] {}));",
      "",
      "[Added Lines]",
      "323:       .WillOnce(InvokeWithoutArgs([] {}));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3416:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
      "",
      "[Removed Lines]",
      "3414:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
      "3415:   }));",
      "",
      "[Added Lines]",
      "3415:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4207:                    ->value());",
      "4208: }",
      "4210: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
      "4211:   enableRedirects();",
      "4212:   default_request_headers_.setForwardedProto(\"http\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4210: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
      "4211:   NiceMock<MockDirectResponseEntry> direct_response;",
      "4212:   std::string route_name(\"route-test-name\");",
      "4213:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
      "4215:   enableRedirects();",
      "4216:   sendRequest();",
      "4217:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
      "4219:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
      "4220:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
      "4221:   }));",
      "4222:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
      "4224:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
      "4225:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
      "4226:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
      "4227:                     .value());",
      "4230:   router_.onDestroy();",
      "4231:   EXPECT_EQ(1, callbacks_.streamInfo()",
      "4232:                    .filterState()",
      "4233:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
      "4234:                    ->value());",
      "4235: }",
      "",
      "---------------"
    ],
    "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
      "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:         ->set_value(3);",
      "40:     config_helper_.addVirtualHost(handle_max_3_hop);",
      "42:     HttpProtocolIntegrationTest::initialize();",
      "43:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
      "43:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
      "44:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
      "45:     handle_by_direct_response.mutable_routes(0)",
      "46:         ->mutable_direct_response()",
      "47:         ->mutable_body()",
      "48:         ->set_inline_string(EMPTY_STRING);",
      "49:     config_helper_.addVirtualHost(handle_by_direct_response);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "665:             response->headers().get(test_header_key_)[0]->value().getStringView());",
      "666: }",
      "668: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
      "669:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
      "670:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "677: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
      "678:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
      "680:   config_helper_.addConfigModifier(",
      "681:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "682:              hcm) { hcm.set_via(\"via_value\"); });",
      "683:   initialize();",
      "685:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "687:   default_request_headers_.setHost(\"handle.internal.redirect\");",
      "688:   IntegrationStreamDecoderPtr response =",
      "689:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
      "691:   waitForNextUpstreamRequest();",
      "693:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
      "694:   upstream_request_->encodeHeaders(redirect_response_, true);",
      "696:   ASSERT_TRUE(response->waitForEndStream());",
      "697:   ASSERT_TRUE(response->complete());",
      "698:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
      "699:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
      "700:                    ->value());",
      "702:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
      "703:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
      "704:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
      "705:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
      "707:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
      "708: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18871dbfb168d3512a10c78dd267ff7c03f564c6",
      "candidate_info": {
        "commit_hash": "18871dbfb168d3512a10c78dd267ff7c03f564c6",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/18871dbfb168d3512a10c78dd267ff7c03f564c6",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/router/router.cc",
          "test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "[1.18] CVE-2022-21655\n\nCrash with direct_response\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1590:     return false;",
          "1591:   }",
          "1594:   for (const auto& predicate : policy.predicates()) {",
          "1595:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
          "1596:                                       !target_is_http)) {",
          "",
          "[Removed Lines]",
          "1593:   const auto& route_name = route->routeEntry()->routeName();",
          "",
          "[Added Lines]",
          "1593:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
          "1594:                                                         : route->routeEntry()->routeName();",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: using testing::Eq;",
          "60: using testing::InSequence;",
          "61: using testing::Invoke;",
          "62: using testing::MockFunction;",
          "63: using testing::NiceMock;",
          "64: using testing::Property;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: using testing::InvokeWithoutArgs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3446:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "3444:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
          "3445:   }));",
          "",
          "[Added Lines]",
          "3445:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4403:                    .value());",
          "4404: }",
          "4406: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
          "4407:   enableRedirects();",
          "4408:   default_request_headers_.setForwardedProto(\"http\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4403:                    .value());",
          "4404: }",
          "4406: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
          "4407:   NiceMock<MockDirectResponseEntry> direct_response;",
          "4408:   std::string route_name(\"route-test-name\");",
          "4409:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
          "4411:   enableRedirects();",
          "4412:   sendRequest();",
          "4413:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
          "4415:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
          "4416:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
          "4417:   }));",
          "4418:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "4420:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
          "4421:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "4422:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
          "4423:                     .value());",
          "4426:   router_.onDestroy();",
          "4427:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         ->set_value(3);",
          "43:     config_helper_.addVirtualHost(handle_max_3_hop);",
          "45:     HttpProtocolIntegrationTest::initialize();",
          "46:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
          "46:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
          "47:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
          "48:     handle_by_direct_response.mutable_routes(0)",
          "49:         ->mutable_direct_response()",
          "50:         ->mutable_body()",
          "51:         ->set_inline_string(EMPTY_STRING);",
          "52:     config_helper_.addVirtualHost(handle_by_direct_response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "802: }",
          "804: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
          "805:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
          "806:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
          "814:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
          "816:   config_helper_.addConfigModifier(",
          "817:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "818:              hcm) { hcm.set_via(\"via_value\"); });",
          "819:   initialize();",
          "821:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "823:   default_request_headers_.setHost(\"handle.internal.redirect\");",
          "824:   IntegrationStreamDecoderPtr response =",
          "825:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "827:   waitForNextUpstreamRequest();",
          "829:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
          "830:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "832:   ASSERT_TRUE(response->waitForEndStream());",
          "833:   ASSERT_TRUE(response->complete());",
          "834:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
          "835:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
          "836:                    ->value());",
          "838:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "839:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "840:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "841:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "843:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "844: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bf9b0f1e7f247a4eee7180849cb0823926f7fff",
      "candidate_info": {
        "commit_hash": "5bf9b0f1e7f247a4eee7180849cb0823926f7fff",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/5bf9b0f1e7f247a4eee7180849cb0823926f7fff",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/router/router.cc",
          "test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "[1.21] CVE-2022-21655\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1660:     return false;",
          "1661:   }",
          "1664:   for (const auto& predicate : policy.predicates()) {",
          "1665:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
          "1666:                                       !target_is_http)) {",
          "",
          "[Removed Lines]",
          "1663:   const auto& route_name = route->routeEntry()->routeName();",
          "",
          "[Added Lines]",
          "1663:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
          "1664:                                                         : route->routeEntry()->routeName();",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: using testing::Eq;",
          "57: using testing::InSequence;",
          "58: using testing::Invoke;",
          "59: using testing::MockFunction;",
          "60: using testing::NiceMock;",
          "61: using testing::Property;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: using testing::InvokeWithoutArgs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3695:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "3693:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
          "3694:   }));",
          "",
          "[Added Lines]",
          "3694:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4654:                    .value());",
          "4655: }",
          "4657: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
          "4658:   enableRedirects();",
          "4659:   default_request_headers_.setForwardedProto(\"http\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4657: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
          "4658:   NiceMock<MockDirectResponseEntry> direct_response;",
          "4659:   std::string route_name(\"route-test-name\");",
          "4660:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
          "4662:   enableRedirects();",
          "4663:   sendRequest();",
          "4664:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
          "4666:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
          "4667:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
          "4668:   }));",
          "4669:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "4671:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
          "4672:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "4673:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
          "4674:                     .value());",
          "4677:   router_.onDestroy();",
          "4678:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4679:                    .filterState()",
          "4680:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "4681:                    .value());",
          "4682: }",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         ->set_value(3);",
          "40:     config_helper_.addVirtualHost(handle_max_3_hop);",
          "42:     HttpProtocolIntegrationTest::initialize();",
          "43:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
          "43:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
          "44:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
          "45:     handle_by_direct_response.mutable_routes(0)",
          "46:         ->mutable_direct_response()",
          "47:         ->mutable_body()",
          "48:         ->set_inline_string(EMPTY_STRING);",
          "49:     config_helper_.addVirtualHost(handle_by_direct_response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "662: }",
          "664: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
          "665:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
          "666:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
          "674:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
          "676:   config_helper_.addConfigModifier(",
          "677:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "678:              hcm) { hcm.set_via(\"via_value\"); });",
          "679:   initialize();",
          "681:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "683:   default_request_headers_.setHost(\"handle.internal.redirect\");",
          "684:   IntegrationStreamDecoderPtr response =",
          "685:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "687:   waitForNextUpstreamRequest();",
          "689:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
          "690:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "692:   ASSERT_TRUE(response->waitForEndStream());",
          "693:   ASSERT_TRUE(response->complete());",
          "694:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
          "695:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
          "696:                    ->value());",
          "698:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "699:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "700:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "701:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "703:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "704: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}