{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe464a2fea93880a7da883138f83a2ae8ad6a30f",
      "candidate_info": {
        "commit_hash": "fe464a2fea93880a7da883138f83a2ae8ad6a30f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/fe464a2fea93880a7da883138f83a2ae8ad6a30f",
        "files": [
          "configure",
          "doc/api/process.markdown",
          "node.gyp"
        ],
        "message": "Rename GYP variable node_use_system_openssl to be consistent",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     'node_shared_v8%': 'false',",
          "10:     'node_shared_zlib%': 'false',",
          "11:     'node_use_openssl%': 'true',",
          "13:     'library_files': [",
          "14:       'src/node.js',",
          "15:       'lib/_debugger.js',",
          "",
          "[Removed Lines]",
          "12:     'node_use_system_openssl%': 'false',",
          "",
          "[Added Lines]",
          "12:     'node_shared_openssl%': 'false',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:           'defines': [ 'HAVE_OPENSSL=1' ],",
          "137:           'sources': [ 'src/node_crypto.cc' ],",
          "138:           'conditions': [",
          "140:               'dependencies': [ './deps/openssl/openssl.gyp:openssl' ],",
          "141:             }]]",
          "142:         }, {",
          "",
          "[Removed Lines]",
          "139:             [ 'node_use_system_openssl==\"false\"', {",
          "",
          "[Added Lines]",
          "139:             [ 'node_shared_openssl==\"false\"', {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f70b138fcbf88e23ae5f645fa70041a7ae3f8359",
      "candidate_info": {
        "commit_hash": "f70b138fcbf88e23ae5f645fa70041a7ae3f8359",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f70b138fcbf88e23ae5f645fa70041a7ae3f8359",
        "files": [
          "node.gyp"
        ],
        "message": "always link sunos builds with libumem",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:         [ 'OS==\"solaris\"', {",
          "227:           'libraries': [",
          "228:             '-lkstat',",
          "229:           ],",
          "230:         }],",
          "231:       ],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:             '-lumem',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8517089b3e1eb7cd3cd1a77666c1de756fd752a3",
      "candidate_info": {
        "commit_hash": "8517089b3e1eb7cd3cd1a77666c1de756fd752a3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8517089b3e1eb7cd3cd1a77666c1de756fd752a3",
        "files": [
          "lib/readline.js"
        ],
        "message": "Revert \"readline: add multiline support\"\n\nThis reverts commit 443071db5749603f816199b9ec8bc512fb441d98.\n\nPatch was overly compilicated and made some incorrect assumptions about the\nposition of the cursor being at the bottom of the screen. @rlidwka and I are\nworking on getting a proper implementation written.",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     this.history = [];",
          "96:     this.historyIndex = -1;",
          "101:     var winSize = output.getWindowSize();",
          "102:     exports.columns = winSize[0];",
          "105:     if (process.listeners('SIGWINCH').length === 0) {",
          "106:       process.on('SIGWINCH', function() {",
          "107:         var winSize = output.getWindowSize();",
          "108:         exports.columns = winSize[0];",
          "110:       });",
          "111:     }",
          "112:   }",
          "",
          "[Removed Lines]",
          "99:     this.usedLines = 1;",
          "103:     exports.rows = winSize[1];",
          "109:         exports.rows = winSize[1];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   return exports.columns;",
          "119: });",
          "125: Interface.prototype.setPrompt = function(prompt, length) {",
          "126:   this._prompt = prompt;",
          "127:   if (length) {",
          "",
          "[Removed Lines]",
          "121: Interface.prototype.__defineGetter__('rows', function() {",
          "122:   return exports.rows;",
          "123: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187: };",
          "197: Interface.prototype._refreshLine = function() {",
          "223:   this.output.clearLine(1);",
          "237: };",
          "",
          "[Removed Lines]",
          "190: Interface.prototype._recalcUsedLines = function() {",
          "191:   var line = this._prompt + this.line;",
          "192:   var newcount = Math.ceil(line.length / this.columns);",
          "193:   if (newcount > this.usedLines) this.usedLines = newcount;",
          "194: };",
          "198:   var columns = this.columns;",
          "199:   if (!columns) columns = Infinity;",
          "202:   var oldLines = this.usedLines;",
          "203:   this._recalcUsedLines();",
          "204:   if (oldLines != this.usedLines) {",
          "205:     this.output.cursorTo(0, this.rows - 1);",
          "206:     for (var i = oldLines; i < this.usedLines; i++) {",
          "207:       this.output.write('\\r\\n');",
          "208:     }",
          "209:   }",
          "212:   if (this.usedLines === 1) {",
          "213:     this.output.cursorTo(0);",
          "214:   } else {",
          "215:     this.output.cursorTo(0, this.rows - this.usedLines);",
          "216:   }",
          "219:   var buffer = this._prompt + this.line;",
          "220:   this.output.write(buffer);",
          "224:   var clearLinesCnt = this.usedLines - Math.floor(buffer.length / columns) - 1;",
          "225:   for (var i = this.rows - clearLinesCnt; i < this.rows; i++) {",
          "226:     this.output.cursorTo(0, i);",
          "227:     this.output.clearLine(0);",
          "228:   }",
          "231:   var curPos = this._getCursorPos();",
          "232:   if (this.usedLines === 1) {",
          "233:     this.output.cursorTo(curPos[0]);",
          "234:   } else {",
          "235:     this.output.cursorTo(curPos[0], this.rows - this.usedLines + curPos[1]);",
          "236:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:     this.line += c;",
          "286:     this.cursor += c.length;",
          "287:     this.output.write(c);",
          "289:   }",
          "290: };",
          "",
          "[Removed Lines]",
          "288:     this._recalcUsedLines();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "459: Interface.prototype._line = function() {",
          "460:   var line = this._addHistory();",
          "461:   this.output.write('\\r\\n');",
          "463:   this._onLine(line);",
          "464: };",
          "",
          "[Removed Lines]",
          "462:   this.usedLines = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "491: };",
          "522: Interface.prototype._ttyWrite = function(s, key) {",
          "523:   var next_word, next_non_word, previous_word, previous_non_word;",
          "",
          "[Removed Lines]",
          "495: Interface.prototype._getCursorPos = function() {",
          "496:   var columns = this.columns;",
          "497:   var pos = this.cursor + this._promptLength;",
          "498:   if (!columns) return [pos, 0];",
          "500:   var lineNum = Math.floor(pos / columns);",
          "501:   var colNum = pos - lineNum * columns;",
          "502:   return [colNum, lineNum];",
          "503: };",
          "506: Interface.prototype._moveCursor = function(dx) {",
          "507:   var oldcursor = this.cursor;",
          "508:   var oldLine = this._getCursorPos()[1];",
          "509:   this.cursor += dx;",
          "510:   var newLine = this._getCursorPos()[1];",
          "513:   if (oldLine == newLine) {",
          "514:     this.output.moveCursor(dx, 0);",
          "515:   } else {",
          "516:     this._refreshLine();",
          "517:   }",
          "518: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "692:       case 'left':",
          "693:         if (this.cursor > 0) {",
          "695:         }",
          "696:         break;",
          "698:       case 'right':",
          "699:         if (this.cursor != this.line.length) {",
          "701:         }",
          "702:         break;",
          "",
          "[Removed Lines]",
          "694:           this._moveCursor(-1);",
          "700:           this._moveCursor(1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "677c2c112c8f92910b85e14575c9c941799f5916",
      "candidate_info": {
        "commit_hash": "677c2c112c8f92910b85e14575c9c941799f5916",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/677c2c112c8f92910b85e14575c9c941799f5916",
        "files": [
          "lib/url.js",
          "test/simple/test-url.js"
        ],
        "message": "Ignore an empty port component when parsing URLs.",
        "before_after_code_files": [
          "lib/url.js||liurl.js",
          "test/simple/test-url.js||test/simple/test-url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/url.js||liurl.js": [
          "File: lib/url.js -> liurl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: var protocolPattern = /^([a-z0-9.+-]+:)/i,",
          "36:     delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],",
          "",
          "[Removed Lines]",
          "34:     portPattern = /:[0-9]+$/,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625:   var port = portPattern.exec(host);",
          "626:   if (port) {",
          "627:     port = port[0];",
          "629:     host = host.substr(0, host.length - port.length);",
          "630:   }",
          "631:   if (host) out.hostname = host;",
          "",
          "[Removed Lines]",
          "628:     out.port = port.substr(1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-url.js||test/simple/test-url.js": [
          "File: test/simple/test-url.js -> test/simple/test-url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:     'query': 'n=Temperature',",
          "546:     'pathname': '/.well-known/r',",
          "547:     'path': '/.well-known/r?n=Temperature'",
          "548:   }",
          "549: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:   },",
          "550:   'http://example.com:': {",
          "551:     'protocol': 'http:',",
          "552:     'slashes': true,",
          "553:     'host': 'example.com',",
          "554:     'hostname': 'example.com',",
          "555:     'href': 'http://example.com/',",
          "556:     'pathname': '/',",
          "557:     'path': '/'",
          "558:   },",
          "559:   'http://example.com:/a/b.html': {",
          "560:     'protocol': 'http:',",
          "561:     'slashes': true,",
          "562:     'host': 'example.com',",
          "563:     'hostname': 'example.com',",
          "564:     'href': 'http://example.com/a/b.html',",
          "565:     'pathname': '/a/b.html',",
          "566:     'path': '/a/b.html'",
          "567:   },",
          "568:   'http://example.com:?a=b': {",
          "569:     'protocol': 'http:',",
          "570:     'slashes': true,",
          "571:     'host': 'example.com',",
          "572:     'hostname': 'example.com',",
          "573:     'href': 'http://example.com/?a=b',",
          "574:     'search': '?a=b',",
          "575:     'query': 'a=b',",
          "576:     'pathname': '/',",
          "577:     'path': '/?a=b'",
          "578:   },",
          "579:   'http://example.com:#abc': {",
          "580:     'protocol': 'http:',",
          "581:     'slashes': true,",
          "582:     'host': 'example.com',",
          "583:     'hostname': 'example.com',",
          "584:     'href': 'http://example.com/#abc',",
          "585:     'hash': '#abc',",
          "586:     'pathname': '/',",
          "587:     'path': '/'",
          "588:   },",
          "589:   'http://[fe80::1]:/a/b?a=b#abc': {",
          "590:     'protocol': 'http:',",
          "591:     'slashes': true,",
          "592:     'host': '[fe80::1]',",
          "593:     'hostname': 'fe80::1',",
          "594:     'href': 'http://[fe80::1]/a/b?a=b#abc',",
          "595:     'search': '?a=b',",
          "596:     'query': 'a=b',",
          "597:     'hash': '#abc',",
          "598:     'pathname': '/a/b',",
          "599:     'path': '/a/b?a=b'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3898f3c1fb2aa75a0aa6f751dfc3b602871e07e",
      "candidate_info": {
        "commit_hash": "c3898f3c1fb2aa75a0aa6f751dfc3b602871e07e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c3898f3c1fb2aa75a0aa6f751dfc3b602871e07e",
        "files": [
          "lib/_debugger.js",
          "test/fixtures/breakpoints.js",
          "test/simple/test-debugger-repl.js"
        ],
        "message": "debugger: support mirroring Date objects\n\n* fixes #3203",
        "before_after_code_files": [
          "lib/_debugger.js||li_debugger.js",
          "test/fixtures/breakpoints.js||test/fixtures/breakpoints.js",
          "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/_debugger.js||li_debugger.js": [
          "File: lib/_debugger.js -> li_debugger.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:       if (handle.className == 'Array') {",
          "543:         mirror = [];",
          "544:       } else {",
          "545:         mirror = {};",
          "546:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fixtures/breakpoints.js||test/fixtures/breakpoints.js": [
          "File: test/fixtures/breakpoints.js -> test/fixtures/breakpoints.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: setInterval(function() {",
          "19: }, 5000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: now = new Date();",
          "23: debugger;",
          "",
          "---------------"
        ],
        "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js": [
          "File: test/simple/test-debugger-repl.js -> test/simple/test-debugger-repl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:   /\\d/, /\\d/, /\\d/, /\\d/, /\\d/",
          "144: ]);",
          "146: function finish() {",
          "147:   process.exit(0);",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: addTest('c', [",
          "147:   /break in .*breakpoints.js:\\d+/,",
          "148:   /\\d/, /\\d/, /\\d/, /\\d/, /\\d/",
          "149: ]);",
          "151: addTest('repl', [",
          "152:   /Press Ctrl \\+ C to leave debug repl/",
          "153: ]);",
          "155: addTest('now', [",
          "156:   /\\w* \\w* \\d* \\d* \\d*:\\d*:\\d* GMT[+-]\\d* (\\w*)/",
          "157: ]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}