{
  "cve_id": "CVE-2021-37232",
  "cve_desc": "A stack overflow vulnerability occurs in Atomicparsley 20210124.204813.840499f through APar_read64() in src/util.cpp due to the lack of buffer size of uint32_buffer while reading more bytes in APar_read64.",
  "repo": "wez/atomicparsley",
  "patch_hash": "d72ccf06c98259d7261e0f3ac4fd8717778782c1",
  "patch_info": {
    "commit_hash": "d72ccf06c98259d7261e0f3ac4fd8717778782c1",
    "repo": "wez/atomicparsley",
    "commit_url": "https://github.com/wez/atomicparsley/commit/d72ccf06c98259d7261e0f3ac4fd8717778782c1",
    "files": [
      ".github/workflows/ci.yml",
      "src/extracts.cpp",
      "tests/issue-32.mp4",
      "tests/test.sh"
    ],
    "message": "Avoid stack overflow\n\nrefs: https://github.com/wez/atomicparsley/issues/32",
    "before_after_code_files": [
      "src/extracts.cpp||src/extracts.cpp",
      "tests/test.sh||tests/test.sh"
    ]
  },
  "patch_diff": {
    "src/extracts.cpp||src/extracts.cpp": [
      "File: src/extracts.cpp -> src/extracts.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1588: }",
      "1590: void APar_ExtractDetails(FILE *isofile, uint8_t optional_output) {",
      "1592:   Trackage track = {0};",
      "1594:   AtomicInfo *mvhdAtom = APar_FindAtom(\"moov.mvhd\", false, VERSIONED_ATOM, 0);",
      "",
      "[Removed Lines]",
      "1591:   char uint32_buffer[5];",
      "",
      "[Added Lines]",
      "1591:   char uint32_buffer[8];",
      "",
      "---------------"
    ],
    "tests/test.sh||tests/test.sh": [
      "File: tests/test.sh -> tests/test.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/bin/bash",
      "2: set -xe",
      "3: ./AtomicParsley ./tests/issue-32.mp4 -T 1 -t +",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "020176f688d9efec68f1ce1b100e052bff1cfc2e",
      "candidate_info": {
        "commit_hash": "020176f688d9efec68f1ce1b100e052bff1cfc2e",
        "repo": "wez/atomicparsley",
        "commit_url": "https://github.com/wez/atomicparsley/commit/020176f688d9efec68f1ce1b100e052bff1cfc2e",
        "files": [
          "src/extracts.cpp"
        ],
        "message": "fix memory leak and avoid some heap allocations\n\nIt's not necessary to heap allocate these small buffers; using\nthe stack avoids the need to remember to free them as well.\n\nRefs: #30\nFixes: #31",
        "before_after_code_files": [
          "src/extracts.cpp||src/extracts.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/extracts.cpp||src/extracts.cpp"
          ],
          "candidate": [
            "src/extracts.cpp||src/extracts.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/extracts.cpp||src/extracts.cpp": [
          "File: src/extracts.cpp -> src/extracts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:       } // end switch",
          "725:     }   // end level if",
          "726:   } else if (track_type == S_AMR_TRACK) {",
          "728:     if (track_info->track_codec == 0x73616D72 ||",
          "729:         track_info->track_codec == 0x73617762) {",
          "730:       if (track_info->amr_modes & 0x0001)",
          "",
          "[Removed Lines]",
          "727:     char *amr_modes = (char *)calloc(1, sizeof(char) * 500);",
          "",
          "[Added Lines]",
          "727:     char amr_modes[500] = {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "786:               \"  AMR VBR Wide-Band. Encoder vendor code: %s\\n\",",
          "787:               track_info->encoder_name);",
          "788:     }",
          "792:   } else if (track_type == EVRC_TRACK) {",
          "793:     fprintf(stdout,",
          "794:             \"  EVRC (Enhanced Variable Rate Coder). Encoder vendor code: %s\\n\",",
          "",
          "[Removed Lines]",
          "789:     free(amr_modes);",
          "790:     amr_modes = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "821:       fprintf(stdout, \"    channels: [%u]\\n\", track_info->channels);",
          "822:     }",
          "823:   }",
          "825: }",
          "",
          "[Removed Lines]",
          "824:   return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1592: }",
          "1594: void APar_ExtractDetails(FILE *isofile, uint8_t optional_output) {",
          "1596:   Trackage track = {0};",
          "1598:   AtomicInfo *mvhdAtom = APar_FindAtom(\"moov.mvhd\", false, VERSIONED_ATOM, 0);",
          "",
          "[Removed Lines]",
          "1595:   char *uint32_buffer = (char *)malloc(sizeof(char) * 5);",
          "",
          "[Added Lines]",
          "1591:   char uint32_buffer[5];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1692:       }",
          "1693:     }",
          "1694:   }",
          "1696: }",
          "1700: void APar_ExtractBrands(char *filepath) {",
          "1701:   FILE *a_file = APar_OpenISOBaseMediaFile(filepath, true);",
          "1703:   uint32_t atom_length = 0;",
          "1704:   uint8_t file_type_offset = 0;",
          "1705:   uint32_t compatible_brand = 0;",
          "",
          "[Removed Lines]",
          "1695:   return;",
          "1702:   char *buffer = (char *)calloc(1, sizeof(char) * 16);",
          "",
          "[Added Lines]",
          "1697:   char buffer[16] = {};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1779:   fprintf(stdout,",
          "1780:           \"   ISO-copyright notices @ movie and/or track level \"",
          "1781:           \"allowed.\\n   uuid private user extension tags allowed.\\n\");",
          "1786: }",
          "",
          "[Removed Lines]",
          "1783:   free(buffer);",
          "1784:   buffer = NULL;",
          "1785:   return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}