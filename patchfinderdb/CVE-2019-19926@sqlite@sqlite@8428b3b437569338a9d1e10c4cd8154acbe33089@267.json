{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fcc057db259c9a85fa2fdd6017bb479f72ff06b6",
      "candidate_info": {
        "commit_hash": "fcc057db259c9a85fa2fdd6017bb479f72ff06b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcc057db259c9a85fa2fdd6017bb479f72ff06b6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Fix a double-free that could occur when a component of a compound SELECT with an ORDER BY clause uses named window definitions.\n\nFossilOrigin-Name: 92893b7980cbb0c6e26bc0b21390a717193205c9897fea5f26476462928897f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4cb9708d48ead10ee9543f86878be8382cd6e850950d5384c95254bac4a8d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4569:   p->pPrior = 0;",
          "4570:   p->pNext = 0;",
          "4571:   p->pWith = 0;",
          "4572:   p->selFlags &= ~SF_Compound;",
          "4573:   assert( (p->selFlags & SF_Converted)==0 );",
          "4574:   p->selFlags |= SF_Converted;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4572: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4573:   p->pWinDefn = 0;",
          "4574: #endif",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1272:   FROM t1;",
          "1273: }",
          "1275: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1275: #-------------------------------------------------------------------------",
          "1276: reset_db",
          "1277: do_catchsql_test 35.0 {",
          "1278:   SELECT * WINDOW f AS () ORDER BY name COLLATE nocase;",
          "1279: } {1 {no tables specified}}",
          "1281: do_catchsql_test 35.1 {",
          "1282:   VALUES(1) INTERSECT SELECT * WINDOW f AS () ORDER BY x COLLATE nocase;",
          "1283: } {1 {no tables specified}}",
          "1285: do_execsql_test 35.2 {",
          "1286:   CREATE TABLE t1(x);",
          "1287:   INSERT INTO t1 VALUES(1), (2), (3);",
          "1288:   VALUES(1) INTERSECT",
          "1289:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1290: } {1}",
          "1292: do_execsql_test 35.3 {",
          "1293:   VALUES(8) EXCEPT",
          "1294:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1295: } {8}",
          "1297: do_execsql_test 35.4 {",
          "1298:   VALUES(1) UNION",
          "1299:   SELECT sum(x) OVER f FROM t1 WINDOW f AS (ORDER BY x) ORDER BY 1;",
          "1300: } {1 3 6}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd79010964231114a6e370852c28aae8adcb5dfd",
      "candidate_info": {
        "commit_hash": "cd79010964231114a6e370852c28aae8adcb5dfd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd79010964231114a6e370852c28aae8adcb5dfd",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Fix a problem in the fts3 integrity-check routine causing it to report as corrupt tables that contain values with embedded 0x00 bytes.\n\nFossilOrigin-Name: 629e20c9880acc2cb9e2fa6da39a15a90483e9a8f433df29d285c23bdfb03b0b",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5244:       for(iCol=0; rc==SQLITE_OK && iCol<p->nColumn; iCol++){",
          "5245:         if( p->abNotindexed[iCol]==0 ){",
          "5246:           const char *zText = (const char *)sqlite3_column_text(pStmt, iCol+1);",
          "5248:           sqlite3_tokenizer_cursor *pT = 0;",
          "5251:           while( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "5247:           int nText = sqlite3_column_bytes(pStmt, iCol+1);",
          "5250:           rc = sqlite3Fts3OpenTokenizer(p->pTokenizer, iLang, zText, nText,&pT);",
          "",
          "[Added Lines]",
          "5249:           rc = sqlite3Fts3OpenTokenizer(p->pTokenizer, iLang, zText, -1, &pT);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ccba7202b69d239724c3b589439c9c3b0e1bba237accfeb11c39d492522b8719",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   SELECT rowid FROM t6 WHERE t6 MATCH 'b OR \"x a\"'",
          "227: } {50001 50002 50003 50004}",
          "230: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: #-------------------------------------------------------------------------",
          "230: #",
          "231: reset_db",
          "232: do_execsql_test 7.0 {",
          "233:   CREATE VIRTUAL TABLE vt0 USING fts3(c0);",
          "234:   INSERT INTO vt0 VALUES (x'00');",
          "235: }",
          "236: do_execsql_test 7.1 {",
          "237:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "238: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4658b68fa906229797f6411e92a4cf15598528b",
      "candidate_info": {
        "commit_hash": "f4658b68fa906229797f6411e92a4cf15598528b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4658b68fa906229797f6411e92a4cf15598528b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Tighten the generated column requirement such that every table must have at least one non-generated column.  Ticket [166347c6fc994155].\n\nFossilOrigin-Name: 4fba090e678ef184736277c9ec9a9374c8bd4df4d41f51a3dc6818e2efcc103b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 361ea81ae8a13e7d2ec4c2412f30e049bb6ee320980d502c86bedc315cdd3bc0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2243: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2244:   if( p->tabFlags & TF_HasGenerated ){",
          "2246:     testcase( p->tabFlags & TF_HasVirtual );",
          "2247:     testcase( p->tabFlags & TF_HasStored );",
          "2248:     for(ii=0; ii<p->nCol; ii++){",
          "",
          "[Removed Lines]",
          "2245:     int ii, nNV = 0;",
          "",
          "[Added Lines]",
          "2245:     int ii, nNG = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2252:         testcase( colFlags & COLFLAG_STORED );",
          "2253:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2254:                                     p->aCol[ii].pDflt, 0);",
          "2255:       }",
          "2257:     }",
          "2260:       return;",
          "2261:     }",
          "2262:   }",
          "",
          "[Removed Lines]",
          "2256:       if( (colFlags & COLFLAG_VIRTUAL)==0 ) nNV++;",
          "2258:     if( nNV==0 ){",
          "2259:       sqlite3ErrorMsg(pParse, \"must have at least one non-VIRTUAL column\");",
          "",
          "[Added Lines]",
          "2255:       }else{",
          "2256:         nNG++;",
          "2259:     if( nNG==0 ){",
          "2260:       sqlite3ErrorMsg(pParse, \"must have at least one non-generated column\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34ab941e5bae10894b3c0653248c6636edc5e9f8",
      "candidate_info": {
        "commit_hash": "34ab941e5bae10894b3c0653248c6636edc5e9f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/34ab941e5bae10894b3c0653248c6636edc5e9f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/nulls1.test"
        ],
        "message": "Detect the invalid use of NULLS LAST on an INTEGER PRIMARY KEY definition of a WITHOUT ROWID table.\n\nFossilOrigin-Name: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1547:     assert( autoInc==0 || autoInc==1 );",
          "1548:     pTab->tabFlags |= autoInc*TF_Autoincrement;",
          "1549:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortFlags;",
          "1550:   }else if( autoInc ){",
          "1551: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "1552:     sqlite3ErrorMsg(pParse, \"AUTOINCREMENT is only allowed on an \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550:     (void)sqlite3HasExplicitNulls(pParse, pList);",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   SELECT * FROM t71 ORDER BY a DESC NULLS FIRST;",
          "249: }",
          "251: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: # 2019-12-18 gramfuzz1 find",
          "252: # NULLS LAST not allows on an INTEGER PRIMARY KEY.",
          "253: #",
          "254: do_catchsql_test 8.0 {",
          "255:   CREATE TABLE t80(a, b INTEGER, PRIMARY KEY(b NULLS LAST)) WITHOUT ROWID;",
          "256: } {1 {unsupported use of NULLS LAST}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37874d7dccf49e8de10341cf61184db407425eb4",
      "candidate_info": {
        "commit_hash": "37874d7dccf49e8de10341cf61184db407425eb4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/37874d7dccf49e8de10341cf61184db407425eb4",
        "files": [
          "ext/expert/expert1.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Disable broken test case in expert1.test.\n\nFossilOrigin-Name: 73e30c2e92ccab274ff7cee48511c461de148786bb9d338921c1ecb193822282",
        "before_after_code_files": [
          "ext/expert/expert1.test||ext/expert/expert1.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/expert1.test||ext/expert/expert1.test": [
          "File: ext/expert/expert1.test -> ext/expert/expert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   SEARCH TABLE t1 USING COVERING INDEX t1_idx_000123a7 (a=?)",
          "135: }",
          "137: do_setup_rec_test $tn.6 {",
          "138:   CREATE TABLE t1(a, b, c);",
          "139: } {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: if 0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   CREATE INDEX t1_idx_00000061 ON t1(a);",
          "143:   SEARCH TABLE t1 USING COVERING INDEX t1_idx_00000061",
          "144: }",
          "146: do_setup_rec_test $tn.7 {",
          "147:   CREATE TABLE t1(a, b, c);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6153bcf41a9aa0497f8210311c99ac23846223068f2b6a3a1c2d9dec7673c7e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}