{
  "cve_id": "CVE-2019-20503",
  "cve_desc": "usrsctp before 2019-12-20 has out-of-bounds reads in sctp_load_addresses_from_init.",
  "repo": "sctplab/usrsctp",
  "patch_hash": "790a7a2555aefb392a5a69923f1e9d17b4968467",
  "patch_info": {
    "commit_hash": "790a7a2555aefb392a5a69923f1e9d17b4968467",
    "repo": "sctplab/usrsctp",
    "commit_url": "https://github.com/sctplab/usrsctp/commit/790a7a2555aefb392a5a69923f1e9d17b4968467",
    "files": [
      "usrsctplib/netinet/sctp_auth.c",
      "usrsctplib/netinet/sctp_pcb.c"
    ],
    "message": "Improve input validation for some parameters having a too small reported length.\n\nThanks to Natalie Silvanovich from Google for finding one of these\nissues in the SCTP userland stack and reporting it.",
    "before_after_code_files": [
      "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c",
      "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
    ]
  },
  "patch_diff": {
    "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c": [
      "File: usrsctplib/netinet/sctp_auth.c -> usrsctplib/netinet/sctp_auth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #ifdef __FreeBSD__",
      "36: #include <sys/cdefs.h>",
      "38: #endif",
      "40: #include <netinet/sctp_os.h>",
      "",
      "[Removed Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 352438 2019-09-17 09:46:42Z tuexen $\");",
      "",
      "[Added Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 355931 2019-12-20 15:25:08Z tuexen $\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1421:   ptype = ntohs(phdr->param_type);",
      "1422:   plen = ntohs(phdr->param_length);",
      "1425:    break;",
      "1427:   if (ptype == SCTP_RANDOM) {",
      "",
      "[Removed Lines]",
      "1424:   if ((plen == 0) || (offset + plen > length))",
      "",
      "[Added Lines]",
      "1424:   if ((plen < sizeof(struct sctp_paramhdr)) ||",
      "1425:       (offset + plen > length))",
      "",
      "---------------"
    ],
    "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c": [
      "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplib/netinet/sctp_pcb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #ifdef __FreeBSD__",
      "36: #include <sys/cdefs.h>",
      "38: #endif",
      "40: #include <netinet/sctp_os.h>",
      "",
      "[Removed Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 353477 2019-10-13 16:14:04Z markj $\");",
      "",
      "[Added Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 355931 2019-12-20 15:25:08Z tuexen $\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7247:   if (offset + plen > limit) {",
      "7248:    break;",
      "7249:   }",
      "7251:    break;",
      "7252:   }",
      "7253: #ifdef INET",
      "",
      "[Removed Lines]",
      "7250:   if (plen == 0) {",
      "",
      "[Added Lines]",
      "7250:   if (plen < sizeof(struct sctp_paramhdr)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7463:    if (plen > sizeof(lstore)) {",
      "7464:     return (-23);",
      "7465:    }",
      "7466:    phdr = sctp_get_next_param(m, offset,",
      "7467:          (struct sctp_paramhdr *)&lstore,",
      "7468:          plen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7466:    if (plen < sizeof(struct sctp_asconf_addrv4_param)) {",
      "7467:     return (-101);",
      "7468:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b67a4e8bd491c279f00c65fc6c822a5ce7465d86",
      "candidate_info": {
        "commit_hash": "b67a4e8bd491c279f00c65fc6c822a5ce7465d86",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/b67a4e8bd491c279f00c65fc6c822a5ce7465d86",
        "files": [
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctputil.c",
          "usrsctplib/netinet/sctputil.h"
        ],
        "message": "Use int instead of bool.\n\nThis fixes https://github.com/sctplab/usrsctp/issues/429",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c",
          "usrsctplib/netinet/sctputil.h||usrsctplinetinet/sctputil.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 357708 2020-02-09 22:40:05Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5536:   }",
          "5537:  }",
          "5541:  if ((stcb->asoc.state & SCTP_STATE_ABOUT_TO_BE_FREED) == 0) {",
          "5542:   SCTP_ADD_SUBSTATE(stcb, SCTP_STATE_ABOUT_TO_BE_FREED);",
          "",
          "[Removed Lines]",
          "5539:  sctp_stop_association_timers(stcb, false);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5708:  sctp_stop_association_timers(stcb, true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c": [
          "File: usrsctplib/netinet/sctputil.c -> usrsctplinetinet/sctputil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.c 357705 2020-02-09 22:05:41Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "833: }",
          "835: void",
          "837: {",
          "838:  struct sctp_inpcb *inp;",
          "839:  struct sctp_nets *net;",
          "",
          "[Removed Lines]",
          "836: sctp_stop_association_timers(struct sctp_tcb *stcb, bool stop_assoc_kill_timer)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "843:                  SCTP_FROM_SCTPUTIL + SCTP_LOC_18);",
          "844:  sctp_timer_stop(SCTP_TIMER_TYPE_STRRESET, inp, stcb, NULL,",
          "845:                  SCTP_FROM_SCTPUTIL + SCTP_LOC_19);",
          "847:   sctp_timer_stop(SCTP_TIMER_TYPE_ASOCKILL, inp, stcb, NULL,",
          "848:                   SCTP_FROM_SCTPUTIL + SCTP_LOC_20);",
          "849:  }",
          "",
          "[Removed Lines]",
          "846:  if (stop_assoc_kill_timer) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.h||usrsctplinetinet/sctputil.h": [
          "File: usrsctplib/netinet/sctputil.h -> usrsctplinetinet/sctputil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #ifndef _NETINET_SCTP_UTIL_H_",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.h 357705 2020-02-09 22:05:41Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177: void sctp_stop_timers_for_shutdown(struct sctp_tcb *);",
          "182: void sctp_report_all_outbound(struct sctp_tcb *, uint16_t, int, int",
          "183: #if !defined(__APPLE__) && !defined(SCTP_SO_LOCK_TESTING)",
          "",
          "[Removed Lines]",
          "180: void sctp_stop_association_timers(struct sctp_tcb *, bool);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c5953eef4ec6c05f4765d100c38582dd13026e1",
      "candidate_info": {
        "commit_hash": "2c5953eef4ec6c05f4765d100c38582dd13026e1",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/2c5953eef4ec6c05f4765d100c38582dd13026e1",
        "files": [
          "usrsctplib/netinet/sctp_lock_userspace.h",
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_process_lock.h",
          "usrsctplib/netinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c"
        ],
        "message": "Improve address list locking",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_lock_userspace.h||usrsctplinetinet/sctp_lock_userspace.h",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_process_lock.h||usrsctplinetinet/sctp_process_lock.h",
          "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c",
          "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_lock_userspace.h||usrsctplinetinet/sctp_lock_userspace.h": [
          "File: usrsctplib/netinet/sctp_lock_userspace.h -> usrsctplinetinet/sctp_lock_userspace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #define SCTP_IPI_ADDR_WLOCK()",
          "77: #define SCTP_IPI_ADDR_RUNLOCK()",
          "78: #define SCTP_IPI_ADDR_WUNLOCK()",
          "80: #define SCTP_IPI_ITERATOR_WQ_INIT()",
          "81: #define SCTP_IPI_ITERATOR_WQ_DESTROY()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 362497 2020-06-22 14:01:31Z markj $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:  hash_ifn_head = &SCTP_BASE_INFO(vrf_ifn_hash)[(ifn_index & SCTP_BASE_INFO(vrf_ifn_hashmark))];",
          "264:  LIST_FOREACH(sctp_ifnp, hash_ifn_head, next_bucket) {",
          "265:   if (sctp_ifnp->ifn_index == ifn_index) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356:   return;",
          "357:  }",
          "359:   SCTP_IPI_ADDR_WLOCK();",
          "360:  LIST_REMOVE(sctp_ifnp, next_bucket);",
          "361:  LIST_REMOVE(sctp_ifnp, next_ifn);",
          "363:   SCTP_IPI_ADDR_WUNLOCK();",
          "365:  sctp_free_ifn(sctp_ifnp);",
          "366: }",
          "",
          "[Removed Lines]",
          "358:  if (hold_addr_lock == 0)",
          "362:  if (hold_addr_lock == 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "546:        int dynamic_add)",
          "547: {",
          "548:  struct sctp_vrf *vrf;",
          "551:  struct sctp_ifalist *hash_addr_head;",
          "552:  struct sctp_ifnlist *hash_ifn_head;",
          "553:  uint32_t hash_of_addr;",
          "",
          "[Removed Lines]",
          "549:  struct sctp_ifn *sctp_ifnp = NULL;",
          "550:  struct sctp_ifa *sctp_ifap = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "557:  SCTPDBG(SCTP_DEBUG_PCB4, \"vrf_id 0x%x: adding address: \", vrf_id);",
          "558:  SCTPDBG_ADDR(SCTP_DEBUG_PCB4, addr);",
          "559: #endif",
          "560:  SCTP_IPI_ADDR_WLOCK();",
          "561:  sctp_ifnp = sctp_find_ifn(ifn, ifn_index);",
          "562:  if (sctp_ifnp) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "567:    vrf = sctp_allocate_vrf(vrf_id);",
          "568:    if (vrf == NULL) {",
          "569:     SCTP_IPI_ADDR_WUNLOCK();",
          "570:     return (NULL);",
          "571:    }",
          "572:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "587:   memset(sctp_ifnp, 0, sizeof(struct sctp_ifn));",
          "588:   sctp_ifnp->ifn_index = ifn_index;",
          "589:   sctp_ifnp->ifn_p = ifn;",
          "",
          "[Removed Lines]",
          "578:   SCTP_IPI_ADDR_WUNLOCK();",
          "579:   SCTP_MALLOC(sctp_ifnp, struct sctp_ifn *,",
          "580:        sizeof(struct sctp_ifn), SCTP_M_IFN);",
          "581:   if (sctp_ifnp == NULL) {",
          "582: #ifdef INVARIANTS",
          "583:    panic(\"No memory for IFN\");",
          "584: #endif",
          "585:    return (NULL);",
          "586:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "599:   }",
          "600:   hash_ifn_head = &SCTP_BASE_INFO(vrf_ifn_hash)[(ifn_index & SCTP_BASE_INFO(vrf_ifn_hashmark))];",
          "601:   LIST_INIT(&sctp_ifnp->ifalist);",
          "603:   LIST_INSERT_HEAD(hash_ifn_head, sctp_ifnp, next_bucket);",
          "604:   LIST_INSERT_HEAD(&vrf->ifnlist, sctp_ifnp, next_ifn);",
          "605:   atomic_add_int(&SCTP_BASE_INFO(ipi_count_ifns), 1);",
          "",
          "[Removed Lines]",
          "602:   SCTP_IPI_ADDR_WLOCK();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "626:    }",
          "627:   exit_stage_left:",
          "628:    SCTP_IPI_ADDR_WUNLOCK();",
          "629:    return (sctp_ifap);",
          "630:   } else {",
          "631:    if (sctp_ifap->ifn_p) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "652:    goto exit_stage_left;",
          "653:   }",
          "654:  }",
          "663:  memset(sctp_ifap, 0, sizeof(struct sctp_ifa));",
          "664:  sctp_ifap->ifn_p = sctp_ifnp;",
          "665:  atomic_add_int(&sctp_ifnp->refcount, 1);",
          "",
          "[Removed Lines]",
          "655:  SCTP_IPI_ADDR_WUNLOCK();",
          "656:  SCTP_MALLOC(sctp_ifap, struct sctp_ifa *, sizeof(struct sctp_ifa), SCTP_M_IFA);",
          "657:  if (sctp_ifap == NULL) {",
          "658: #ifdef INVARIANTS",
          "659:   panic(\"No memory for IFA\");",
          "660: #endif",
          "661:   return (NULL);",
          "662:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "748:      (sctp_ifap->src_is_loop == 0)) {",
          "749:   sctp_ifap->src_is_glob = 1;",
          "750:  }",
          "752:  hash_addr_head = &vrf->vrf_addr_hash[(hash_of_addr & vrf->vrf_addr_hashmark)];",
          "753:  LIST_INSERT_HEAD(hash_addr_head, sctp_ifap, next_bucket);",
          "754:  sctp_ifap->refcount = 1;",
          "",
          "[Removed Lines]",
          "751:  SCTP_IPI_ADDR_WLOCK();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "760:   sctp_ifnp->registered_af = new_ifn_af;",
          "761:  }",
          "762:  SCTP_IPI_ADDR_WUNLOCK();",
          "763:  if (dynamic_add) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6853:  vrf_bucket = &SCTP_BASE_INFO(sctp_vrfhash)[(SCTP_DEFAULT_VRFID & SCTP_BASE_INFO(hashvrfmark))];",
          "6854:  LIST_FOREACH_SAFE(vrf, vrf_bucket, next_vrf, nvrf) {",
          "6855:   LIST_FOREACH_SAFE(ifn, &vrf->ifnlist, next_ifn, nifn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6869:   LIST_REMOVE(vrf, next_vrf);",
          "6870:   SCTP_FREE(vrf, SCTP_M_VRF);",
          "6871:  }",
          "6873:  SCTP_HASH_FREE(SCTP_BASE_INFO(sctp_vrfhash), SCTP_BASE_INFO(hashvrfmark));",
          "6874:  SCTP_HASH_FREE(SCTP_BASE_INFO(vrf_ifn_hash), SCTP_BASE_INFO(vrf_ifn_hashmark));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_process_lock.h||usrsctplinetinet/sctp_process_lock.h": [
          "File: usrsctplib/netinet/sctp_process_lock.h -> usrsctplinetinet/sctp_process_lock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:  EnterCriticalSection(&SCTP_BASE_INFO(ipi_addr_mtx))",
          "544: #define SCTP_IPI_ADDR_WUNLOCK() \\",
          "545:  LeaveCriticalSection(&SCTP_BASE_INFO(ipi_addr_mtx))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:  KASSERT(pthread_mutex_lock(&SCTP_BASE_INFO(ipi_addr_mtx)) == 0, (\"%s: ipi_addr_mtx already locked\", __func__))",
          "580: #define SCTP_IPI_ADDR_WUNLOCK() \\",
          "581:  KASSERT(pthread_mutex_unlock(&SCTP_BASE_INFO(ipi_addr_mtx)) == 0, (\"%s: ipi_addr_mtx not locked\", __func__))",
          "582: #else",
          "583: #define SCTP_IPI_ADDR_RLOCK() \\",
          "584:  (void)pthread_mutex_lock(&SCTP_BASE_INFO(ipi_addr_mtx))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "588:  (void)pthread_mutex_lock(&SCTP_BASE_INFO(ipi_addr_mtx))",
          "589: #define SCTP_IPI_ADDR_WUNLOCK() \\",
          "590:  (void)pthread_mutex_unlock(&SCTP_BASE_INFO(ipi_addr_mtx))",
          "591: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c": [
          "File: usrsctplib/netinet/sctp_usrreq.c -> usrsctplinetinet/sctp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 363080 2020-07-10 16:59:06Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1466: #endif",
          "1467:  struct sctp_vrf *vrf;",
          "1469:  actual = 0;",
          "1470:  if (limit == 0)",
          "1471:   return (actual);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1813:  vrf = sctp_find_vrf(vrf_id);",
          "1814:  if (vrf == NULL) {",
          "1815:   return (0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c": [
          "File: usrsctplib/netinet/sctputil.c -> usrsctplinetinet/sctputil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.c 362813 2020-06-30 21:50:05Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5854:  struct sctp_ifalist *hash_head;",
          "5855:  uint32_t hash_of_addr;",
          "5858:   SCTP_IPI_ADDR_RLOCK();",
          "5860:  vrf = sctp_find_vrf(vrf_id);",
          "5861:  if (vrf == NULL) {",
          "",
          "[Removed Lines]",
          "5857:  if (holds_lock == 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7125:  struct sctp_ifa *ifa;",
          "7126:  struct sctp_laddr *wi;",
          "7129:  if (ifa == NULL) {",
          "7130:   SCTP_LTRACE_ERR_RET(NULL, NULL, NULL, SCTP_FROM_SCTPUTIL, EADDRNOTAVAIL);",
          "7131:   return (EADDRNOTAVAIL);",
          "",
          "[Removed Lines]",
          "7128:  ifa = sctp_find_ifa_by_addr(sa, vrf_id, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "547d3b46c64876c0336b9eef297fda58dbe1adaf",
      "candidate_info": {
        "commit_hash": "547d3b46c64876c0336b9eef297fda58dbe1adaf",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/547d3b46c64876c0336b9eef297fda58dbe1adaf",
        "files": [
          "usrsctplib/netinet/sctp_pcb.c"
        ],
        "message": "Clear the pointer to the socket when closing it also in case of an ungraceful operation. This fixes a use-after-free bug found and reported by Taylor Brandstetter from Google by testing the userland stack.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 363323 2020-07-19 12:34:19Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4096:  cnt = 0;",
          "4097:  LIST_FOREACH_SAFE(asoc, &inp->sctp_asoc_list, sctp_tcblist, nasoc) {",
          "4098:   SCTP_TCB_LOCK(asoc);",
          "4099:   if (asoc->asoc.state & SCTP_STATE_ABOUT_TO_BE_FREED) {",
          "4100:    if (asoc->asoc.state & SCTP_STATE_IN_ACCEPT_QUEUE) {",
          "4101:     SCTP_CLEAR_SUBSTATE(asoc, SCTP_STATE_IN_ACCEPT_QUEUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "928bf9cc66892c809fcfb6c7985887a1f381aac4",
      "candidate_info": {
        "commit_hash": "928bf9cc66892c809fcfb6c7985887a1f381aac4",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/928bf9cc66892c809fcfb6c7985887a1f381aac4",
        "files": [
          "usrsctplib/netinet/sctp_auth.c"
        ],
        "message": "Fix the check for updating an SCTP-AUTH key.\n\nThis bug could result in a use-after-free situation. Thanks\nto \\xe9\\x82\\xb5\\xe5\\xa4\\xa7\\xe6\\x88\\x90 <da_cheng_shao@yeah.net>\nfor reporting the issue.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c"
          ],
          "candidate": [
            "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c"
          ]
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c": [
          "File: usrsctplib/netinet/sctp_auth.c -> usrsctplib/netinet/sctp_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 339042 2018-10-01 14:05:31Z tuexen $\");",
          "",
          "[Added Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 352438 2019-09-17 09:46:42Z tuexen $\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:   } else if (new_skey->keyid == skey->keyid) {",
          "529:     SCTPDBG(SCTP_DEBUG_AUTH1,",
          "530:      \"can't replace shared key id %u\\n\",",
          "531:      new_skey->keyid);",
          "",
          "[Removed Lines]",
          "528:    if ((skey->deactivated) && (skey->refcount > 1)) {",
          "",
          "[Added Lines]",
          "529:    if ((skey->deactivated) || (skey->refcount > 1)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3dd8e2318f87c2a691944c80a6257d4df5217ab",
      "candidate_info": {
        "commit_hash": "c3dd8e2318f87c2a691944c80a6257d4df5217ab",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/c3dd8e2318f87c2a691944c80a6257d4df5217ab",
        "files": [
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_ss_functions.c",
          "usrsctplib/netinet/sctp_usrreq.c"
        ],
        "message": "Sync with stream reset.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_ss_functions.c||usrsctplinetinet/sctp_ss_functions.c",
          "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
          ],
          "candidate": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
          ]
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 344742 2019-03-03 19:55:06Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5757:  for (i = 0; i < asoc->streamoutcnt; i++) {",
          "5758:   struct sctp_stream_out *outs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5762:   TAILQ_FOREACH_SAFE(sp, &outs->outqueue, next, nsp) {",
          "5763:    atomic_subtract_int(&asoc->stream_queue_cnt, 1);",
          "5764:    TAILQ_REMOVE(&outs->outqueue, sp, next);",
          "5766:    sctp_free_spbufspace(stcb, asoc, sp);",
          "5767:    if (sp->data) {",
          "5768:     if (so) {",
          "",
          "[Removed Lines]",
          "5765:    stcb->asoc.ss_functions.sctp_ss_remove_from_stream(stcb, asoc, outs, sp, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5784:    sctp_free_a_strmoq(stcb, sp, SCTP_SO_LOCKED);",
          "5785:   }",
          "5786:  }",
          "5788:  TAILQ_FOREACH_SAFE(strrst, &asoc->resetHead, next_resp, nstrrst) {",
          "5789:   TAILQ_REMOVE(&asoc->resetHead, strrst, next_resp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_ss_functions.c||usrsctplinetinet/sctp_ss_functions.c": [
          "File: usrsctplib/netinet/sctp_ss_functions.c -> usrsctplinetinet/sctp_ss_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #ifdef __FreeBSD__",
          "32: #include <sys/cdefs.h>",
          "34: #endif",
          "36: #include <netinet/sctp_pcb.h>",
          "",
          "[Removed Lines]",
          "33: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_ss_functions.c 344924 2019-03-08 18:16:19Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "843:    stcb->asoc.ss_data.last_out_stream = strq;",
          "844:   }",
          "845:  }",
          "846:  return;",
          "847: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c": [
          "File: usrsctplib/netinet/sctp_usrreq.c -> usrsctplinetinet/sctp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 344925 2019-03-08 18:17:57Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2087:  sctp_connectx_helper_add(stcb, sa, (totaddr-1), &error);",
          "2089:  if (error) {",
          "2092:   goto out_now;",
          "2093:  }",
          "2094:  a_id = (sctp_assoc_t *)optval;",
          "",
          "[Removed Lines]",
          "2090:   (void)sctp_free_assoc(inp, stcb, SCTP_PCBFREE_FORCE,",
          "2091:                         SCTP_FROM_SCTP_USRREQ + SCTP_LOC_7);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}