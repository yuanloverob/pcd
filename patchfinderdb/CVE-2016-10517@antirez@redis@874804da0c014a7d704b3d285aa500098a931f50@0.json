{
  "cve_id": "CVE-2016-10517",
  "cve_desc": "networking.c in Redis before 3.2.7 allows \"Cross Protocol Scripting\" because it lacks a check for POST and Host: strings, which are not valid in the Redis protocol (but commonly occur when an attack triggers an HTTP request to the Redis TCP port).",
  "repo": "antirez/redis",
  "patch_hash": "874804da0c014a7d704b3d285aa500098a931f50",
  "patch_info": {
    "commit_hash": "874804da0c014a7d704b3d285aa500098a931f50",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/874804da0c014a7d704b3d285aa500098a931f50",
    "files": [
      "src/networking.c",
      "src/server.c",
      "src/server.h"
    ],
    "message": "Security: Cross Protocol Scripting protection.\n\nThis is an attempt at mitigating problems due to cross protocol\nscripting, an attack targeting services using line oriented protocols\nlike Redis that can accept HTTP requests as valid protocol, by\ndiscarding the invalid parts and accepting the payloads sent, for\nexample, via a POST request.\n\nFor this to be effective, when we detect POST and Host: and terminate\nthe connection asynchronously, the networking code was modified in order\nto never process further input. It was later verified that in a\npipelined request containing a POST command, the successive commands are\nnot executed.",
    "before_after_code_files": [
      "src/networking.c||src/networking.c",
      "src/server.c||src/server.c",
      "src/server.h||src/server.h"
    ]
  },
  "patch_diff": {
    "src/networking.c||src/networking.c": [
      "File: src/networking.c -> src/networking.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:         if (!c->reqtype) {",
      "",
      "[Removed Lines]",
      "1273:         if (c->flags & CLIENT_CLOSE_AFTER_REPLY) break;",
      "",
      "[Added Lines]",
      "1275:         if (c->flags & (CLIENT_CLOSE_AFTER_REPLY|CLIENT_CLOSE_ASAP)) break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1637:     }",
      "1638: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1651: void securityWarningCommand(client *c) {",
      "1652:     static time_t logged_time;",
      "1653:     time_t now = time(NULL);",
      "1655:     if (labs(now-logged_time) > 60) {",
      "1656:         serverLog(LL_WARNING,\"Possible SECURITY ATTACK detected. It looks like somebody is sending POST or Host: commands to Redis. This is likely due to an attacker attempting to use Cross Protocol Scripting to compromise your Redis instance. Connection aborted.\");",
      "1657:         logged_time = now;",
      "1658:     }",
      "1659:     freeClientAsync(c);",
      "1660: }",
      "",
      "---------------"
    ],
    "src/server.c||src/server.c": [
      "File: src/server.c -> src/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "294:     {\"pfcount\",pfcountCommand,-2,\"r\",0,NULL,1,-1,1,0,0},",
      "295:     {\"pfmerge\",pfmergeCommand,-2,\"wm\",0,NULL,1,-1,1,0,0},",
      "296:     {\"pfdebug\",pfdebugCommand,-3,\"w\",0,NULL,0,0,0,0,0},",
      "297:     {\"latency\",latencyCommand,-2,\"aslt\",0,NULL,0,0,0,0,0}",
      "298: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "297:     {\"post\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
      "298:     {\"host:\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
      "",
      "---------------"
    ],
    "src/server.h||src/server.h": [
      "File: src/server.h -> src/server.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1645: void pfmergeCommand(client *c);",
      "1646: void pfdebugCommand(client *c);",
      "1647: void latencyCommand(client *c);",
      "1649: #if defined(__GNUC__)",
      "1650: void *calloc(size_t count, size_t size) __attribute__ ((deprecated));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1648: void securityWarningCommand(client *c);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a81a92ca2ceba364f4bb51efde9284d939e7ff47",
      "candidate_info": {
        "commit_hash": "a81a92ca2ceba364f4bb51efde9284d939e7ff47",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/a81a92ca2ceba364f4bb51efde9284d939e7ff47",
        "files": [
          "src/networking.c",
          "src/server.c",
          "src/server.h"
        ],
        "message": "Security: Cross Protocol Scripting protection.\n\nThis is an attempt at mitigating problems due to cross protocol\nscripting, an attack targeting services using line oriented protocols\nlike Redis that can accept HTTP requests as valid protocol, by\ndiscarding the invalid parts and accepting the payloads sent, for\nexample, via a POST request.\n\nFor this to be effective, when we detect POST and Host: and terminate\nthe connection asynchronously, the networking code was modified in order\nto never process further input. It was later verified that in a\npipelined request containing a POST command, the successive commands are\nnot executed.",
        "before_after_code_files": [
          "src/networking.c||src/networking.c",
          "src/server.c||src/server.c",
          "src/server.h||src/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c",
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ],
          "candidate": [
            "src/networking.c||src/networking.c",
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ]
        }
      },
      "candidate_diff": {
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1249:         if (!c->reqtype) {",
          "",
          "[Removed Lines]",
          "1246:         if (c->flags & CLIENT_CLOSE_AFTER_REPLY) break;",
          "",
          "[Added Lines]",
          "1248:         if (c->flags & (CLIENT_CLOSE_AFTER_REPLY|CLIENT_CLOSE_ASAP)) break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1610:     }",
          "1611: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1624: void securityWarningCommand(client *c) {",
          "1625:     static time_t logged_time;",
          "1626:     time_t now = time(NULL);",
          "1628:     if (labs(now-logged_time) > 60) {",
          "1629:         serverLog(LL_WARNING,\"Possible SECURITY ATTACK detected. It looks like somebody is sending POST or Host: commands to Redis. This is likely due to an attacker attempting to use Cross Protocol Scripting to compromise your Redis instance. Connection aborted.\");",
          "1630:         logged_time = now;",
          "1631:     }",
          "1632:     freeClientAsync(c);",
          "1633: }",
          "",
          "---------------"
        ],
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:     {\"pfcount\",pfcountCommand,-2,\"r\",0,NULL,1,-1,1,0,0},",
          "297:     {\"pfmerge\",pfmergeCommand,-2,\"wm\",0,NULL,1,-1,1,0,0},",
          "298:     {\"pfdebug\",pfdebugCommand,-3,\"w\",0,NULL,0,0,0,0,0},",
          "299:     {\"latency\",latencyCommand,-2,\"aslt\",0,NULL,0,0,0,0,0}",
          "300: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:     {\"post\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
          "300:     {\"host:\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1812: void pfdebugCommand(client *c);",
          "1813: void latencyCommand(client *c);",
          "1814: void moduleCommand(client *c);",
          "1816: #if defined(__GNUC__)",
          "1817: void *calloc(size_t count, size_t size) __attribute__ ((deprecated));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1815: void securityWarningCommand(client *c);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "110041825c3af14feff03f43d12e3683f64cdc48",
      "candidate_info": {
        "commit_hash": "110041825c3af14feff03f43d12e3683f64cdc48",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/110041825c3af14feff03f43d12e3683f64cdc48",
        "files": [
          "src/db.c",
          "src/server.c",
          "src/server.h"
        ],
        "message": "Streams: XREAD get-keys method.",
        "before_after_code_files": [
          "src/db.c||src/db.c",
          "src/server.c||src/server.c",
          "src/server.h||src/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ],
          "candidate": [
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ]
        }
      },
      "candidate_diff": {
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1363:     return keys;",
          "1364: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1369: int *xreadGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {",
          "1370:     int i, num, *keys;",
          "1371:     UNUSED(cmd);",
          "1375:     int streams_pos = -1;",
          "1376:     for (i = 1; i < argc; i++) {",
          "1377:         char *arg = argv[i]->ptr;",
          "1378:         if (!strcasecmp(arg, \"streams\")) streams_pos = i;",
          "1379:     }",
          "1382:     if (streams_pos == -1) {",
          "1384:         return NULL;",
          "1385:     }",
          "1387:     num = argc - streams_pos - 1;",
          "1388:     keys = zmalloc(sizeof(int) * num);",
          "1389:     for (i = streams_pos+1; i < argc; i++) keys[i-streams_pos-1] = i;",
          "1391:     return keys;",
          "1392: }",
          "",
          "---------------"
        ],
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     {\"xadd\",xaddCommand,-4,\"wmF\",0,NULL,1,1,1,0,0},",
          "306:     {\"xrange\",xrangeCommand,-4,\"r\",0,NULL,1,1,1,0,0},",
          "307:     {\"xlen\",xlenCommand,2,\"rF\",0,NULL,1,1,1,0,0},",
          "308:     {\"post\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
          "309:     {\"host:\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
          "310:     {\"latency\",latencyCommand,-2,\"aslt\",0,NULL,0,0,0,0,0}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:     {\"xread\",xreadCommand,-3,\"rs\",0,xreadGetKeys,1,1,1,0,0},",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1767: int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);",
          "1768: int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);",
          "1769: int *georadiusGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);",
          "1772: void clusterInit(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1770: int *xreadGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2011: void xaddCommand(client *c);",
          "2012: void xrangeCommand(client *c);",
          "2013: void xlenCommand(client *c);",
          "2015: #if defined(__GNUC__)",
          "2016: void *calloc(size_t count, size_t size) __attribute__ ((deprecated));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2015: void xreadCommand(client *c);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dead2cff563375543b23c1ecec78a1462ad611a",
      "candidate_info": {
        "commit_hash": "6dead2cff563375543b23c1ecec78a1462ad611a",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/6dead2cff563375543b23c1ecec78a1462ad611a",
        "files": [
          "redis.conf",
          "src/Makefile",
          "src/config.c",
          "src/module.c",
          "src/modules/.gitignore",
          "src/modules/API.md",
          "src/modules/Makefile",
          "src/modules/helloworld.c",
          "src/networking.c",
          "src/redismodule.h",
          "src/server.c",
          "src/server.h",
          "src/util.c"
        ],
        "message": "Modules: first preview 31 March 2016.",
        "before_after_code_files": [
          "redis.conf||redis.conf",
          "src/config.c||src/config.c",
          "src/module.c||src/module.c",
          "src/modules/helloworld.c||src/modules/helloworld.c",
          "src/networking.c||src/networking.c",
          "src/redismodule.h||src/redismodule.h",
          "src/server.c||src/server.c",
          "src/server.h||src/server.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c",
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ],
          "candidate": [
            "src/networking.c||src/networking.c",
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ]
        }
      },
      "candidate_diff": {
        "redis.conf||redis.conf": [
          "File: redis.conf -> redis.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # include /path/to/local.conf",
          "36: # include /path/to/other.conf",
          "38: ################################## NETWORK #####################################",
          "40: # By default, if no \"bind\" configuration directive is specified, Redis listens",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: ################################## MODULES #####################################",
          "40: # Load modules at startup. If the server is not able to load modules",
          "41: # it will abort. It is possible to use multiple loadmodule directives.",
          "42: #",
          "43: # loadmodule /path/to/my_module.so",
          "44: # loadmodule /path/to/other_module.so",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "632:                     \"Allowed values: 'upstart', 'systemd', 'auto', or 'no'\";",
          "633:                 goto loaderr;",
          "634:             }",
          "635:         } else if (!strcasecmp(argv[0],\"sentinel\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "635:         } else if (!strcasecmp(argv[0],\"loadmodule\") && argc == 2) {",
          "636:             listAddNodeTail(server.loadmodule_queue,sdsnew(argv[1]));",
          "",
          "---------------"
        ],
        "src/module.c||src/module.c": [
          "File: src/module.c -> src/module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"server.h\"",
          "2: #include \"cluster.h\"",
          "3: #include <dlfcn.h>",
          "5: #define REDISMODULE_CORE 1",
          "6: #include \"redismodule.h\"",
          "15: struct RedisModule {",
          "20: };",
          "21: typedef struct RedisModule RedisModule;",
          "27: struct AutoMemEntry {",
          "28:     void *ptr;",
          "29:     int type;",
          "30: };",
          "33: #define REDISMODULE_AM_KEY 0",
          "34: #define REDISMODULE_AM_STRING 1",
          "35: #define REDISMODULE_AM_REPLY 2",
          "45: struct RedisModuleCtx {",
          "53: };",
          "54: typedef struct RedisModuleCtx RedisModuleCtx;",
          "56: #define REDISMODULE_CTX_INIT {(void*)&RedisModule_GetApi, NULL, NULL, NULL, 0, 0, 0}",
          "57: #define REDISMODULE_CTX_MULTI_EMITTED (1<<0)",
          "58: #define REDISMODULE_CTX_AUTO_MEMORY (1<<1)",
          "61: struct RedisModuleKey {",
          "62:     RedisModuleCtx *ctx;",
          "63:     redisDb *db;",
          "68: };",
          "69: typedef struct RedisModuleKey RedisModuleKey;",
          "73: typedef int (*RedisModuleCmdFunc) (RedisModuleCtx *ctx, void **argv, int argc);",
          "76: struct RedisModuleCommandProxy {",
          "77:     struct RedisModule *module;",
          "78:     RedisModuleCmdFunc func;",
          "79:     struct redisCommand *rediscmd;",
          "80: };",
          "81: typedef struct RedisModuleCommandProxy RedisModuleCommandProxy;",
          "83: #define REDISMODULE_REPLYFLAG_NONE 0",
          "85: #define REDISMODULE_REPLYFLAG_NESTED (1<<1)  /* Nested reply object. No proto",
          "91: struct RedisModuleCallReply {",
          "92:     RedisModuleCtx *ctx;",
          "98:     union {",
          "99:         const char *str; /* String pointer for string and error replies. This",
          "100:                             does not need to be freed, always points inside",
          "101:                             a reply->proto buffer of the reply object or, in",
          "105:     } val;",
          "106: };",
          "107: typedef struct RedisModuleCallReply RedisModuleCallReply;",
          "113: void RedisModule_FreeCallReply(RedisModuleCallReply *reply);",
          "114: void RedisModule_CloseKey(RedisModuleKey *key);",
          "115: void RedisModule_AutoMemoryCollect(RedisModuleCtx *ctx);",
          "116: robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt, int *argcp, int *flags, va_list ap);",
          "117: void moduleReplicateMultiIfNeeded(RedisModuleCtx *ctx);",
          "135: int moduleCreateEmtpyKey(RedisModuleKey *key, int type) {",
          "136:     robj *obj;",
          "139:     if (!(key->mode & REDISMODULE_WRITE) || key->value)",
          "140:         return REDISMODULE_ERR;",
          "142:     switch(type) {",
          "143:     case REDISMODULE_KEYTYPE_LIST:",
          "144:         obj = createQuicklistObject();",
          "145:         quicklistSetOptions(obj->ptr, server.list_max_ziplist_size,",
          "146:                             server.list_compress_depth);",
          "147:         break;",
          "148:     default: return REDISMODULE_ERR;",
          "149:     }",
          "150:     dbAdd(key->db,key->key,obj);",
          "151:     key->value = obj;",
          "152:     return REDISMODULE_OK;",
          "153: }",
          "165: int moduleDelKeyIfEmpty(RedisModuleKey *key) {",
          "166:     if (!(key->mode & REDISMODULE_WRITE) || key->value == NULL) return 0;",
          "167:     int isempty;",
          "168:     robj *o = key->value;",
          "170:     switch(o->type) {",
          "171:     case OBJ_LIST: isempty = listTypeLength(o) == 0; break;",
          "172:     case OBJ_SET: isempty = setTypeSize(o) == 0; break;",
          "173:     case OBJ_ZSET: isempty = zsetLength(o) == 0; break;",
          "174:     case OBJ_HASH : isempty = hashTypeLength(o) == 0; break;",
          "175:     default: isempty = 0;",
          "176:     }",
          "178:     if (isempty) {",
          "179:         dbDelete(key->db,key->key);",
          "180:         key->value = NULL;",
          "181:         return 1;",
          "182:     } else {",
          "183:         return 0;",
          "184:     }",
          "185: }",
          "194: int RedisModule_GetApi(const char *funcname, void **targetPtrPtr) {",
          "195:     dictEntry *he = dictFind(server.moduleapi, funcname);",
          "196:     if (!he) return REDISMODULE_ERR;",
          "198:     return REDISMODULE_OK;",
          "199: }",
          "203: void RedisModuleCommandDispatcher(client *c) {",
          "204:     RedisModuleCommandProxy *cp = (void*)c->cmd->getkeys_proc;",
          "205:     RedisModuleCtx ctx = REDISMODULE_CTX_INIT;",
          "207:     ctx.module = cp->module;",
          "208:     ctx.client = c;",
          "209:     cp->func(&ctx,(void**)c->argv,c->argc);",
          "210:     RedisModule_AutoMemoryCollect(&ctx);",
          "211:     preventCommandPropagation(c);",
          "215:     if (ctx.flags & REDISMODULE_CTX_MULTI_EMITTED) {",
          "216:         robj *propargv[1];",
          "217:         propargv[0] = createStringObject(\"EXEC\",4);",
          "218:         alsoPropagate(server.execCommand,c->db->id,propargv,1,",
          "219:             PROPAGATE_AOF|PROPAGATE_REPL);",
          "220:         decrRefCount(propargv[0]);",
          "221:     }",
          "222: }",
          "228: int RedisModule_CreateCommand(RedisModuleCtx *ctx, const char *name, RedisModuleCmdFunc cmdfunc) {",
          "229:     struct redisCommand *rediscmd;",
          "230:     RedisModuleCommandProxy *cp;",
          "231:     sds cmdname = sdsnew(name);",
          "234:     if (lookupCommand((char*)name) != NULL) {",
          "235:         sdsfree(cmdname);",
          "236:         return REDISMODULE_ERR;",
          "237:     }",
          "246:     cp = zmalloc(sizeof(*cp));",
          "247:     cp->module = ctx->module;",
          "248:     cp->func = cmdfunc;",
          "249:     cp->rediscmd = zmalloc(sizeof(*rediscmd));",
          "250:     cp->rediscmd->name = cmdname;",
          "251:     cp->rediscmd->proc = RedisModuleCommandDispatcher;",
          "252:     cp->rediscmd->arity = -1;",
          "253:     cp->rediscmd->flags = 0;",
          "254:     cp->rediscmd->getkeys_proc = (redisGetKeysProc*)cp;",
          "255:     cp->rediscmd->firstkey = 1;",
          "256:     cp->rediscmd->lastkey = 1;",
          "257:     cp->rediscmd->keystep = 1;",
          "258:     cp->rediscmd->microseconds = 0;",
          "259:     cp->rediscmd->calls = 0;",
          "260:     dictAdd(server.commands,sdsdup(cmdname),cp->rediscmd);",
          "261:     dictAdd(server.orig_commands,sdsdup(cmdname),cp->rediscmd);",
          "262:     return REDISMODULE_OK;",
          "263: }",
          "266: void RedisModule_SetModuleAttribs(RedisModuleCtx *ctx, const char *name, int ver, int apiver){",
          "267:     RedisModule *module;",
          "269:     if (ctx->module != NULL) return;",
          "270:     module = zmalloc(sizeof(*module));",
          "271:     module->name = sdsnew((char*)name);",
          "272:     module->ver = ver;",
          "273:     module->apiver = apiver;",
          "274:     ctx->module = module;",
          "275: }",
          "282: void RedisModule_AutoMemory(RedisModuleCtx *ctx) {",
          "283:     ctx->flags |= REDISMODULE_CTX_AUTO_MEMORY;",
          "284: }",
          "287: void RedisModule_AutoMemoryAdd(RedisModuleCtx *ctx, int type, void *ptr) {",
          "288:     if (!(ctx->flags & REDISMODULE_CTX_AUTO_MEMORY)) return;",
          "289:     if (ctx->amqueue_used == ctx->amqueue_len) {",
          "290:         ctx->amqueue_len *= 2;",
          "291:         if (ctx->amqueue_len < 16) ctx->amqueue_len = 16;",
          "292:         ctx->amqueue = zrealloc(ctx->amqueue,sizeof(struct AutoMemEntry)*ctx->amqueue_len);",
          "293:     }",
          "294:     ctx->amqueue[ctx->amqueue_used].type = type;",
          "295:     ctx->amqueue[ctx->amqueue_used].ptr = ptr;",
          "296:     ctx->amqueue_used++;",
          "297: }",
          "301: void RedisModule_AutoMemoryFreed(RedisModuleCtx *ctx, int type, void *ptr) {",
          "302:     if (!(ctx->flags & REDISMODULE_CTX_AUTO_MEMORY)) return;",
          "304:     int j;",
          "305:     for (j = 0; j < ctx->amqueue_used; j++) {",
          "306:         if (ctx->amqueue[j].type == type &&",
          "307:             ctx->amqueue[j].ptr == ptr)",
          "308:         {",
          "309:             ctx->amqueue[j].type = REDISMODULE_AM_FREED;",
          "312:             if (j == ctx->amqueue_used-1) ctx->amqueue_used--;",
          "313:         }",
          "314:     }",
          "315: }",
          "318: void RedisModule_AutoMemoryCollect(RedisModuleCtx *ctx) {",
          "319:     if (!(ctx->flags & REDISMODULE_CTX_AUTO_MEMORY)) return;",
          "323:     ctx->flags &= ~REDISMODULE_CTX_AUTO_MEMORY;",
          "324:     int j;",
          "325:     for (j = 0; j < ctx->amqueue_used; j++) {",
          "326:         void *ptr = ctx->amqueue[j].ptr;",
          "327:         switch(ctx->amqueue[j].type) {",
          "328:         case REDISMODULE_AM_STRING: decrRefCount(ptr); break;",
          "329:         case REDISMODULE_AM_REPLY: RedisModule_FreeCallReply(ptr); break;",
          "330:         case REDISMODULE_AM_KEY: RedisModule_CloseKey(ptr); break;",
          "331:         }",
          "332:     }",
          "333:     ctx->flags |= REDISMODULE_CTX_AUTO_MEMORY;",
          "334:     zfree(ctx->amqueue);",
          "335:     ctx->amqueue = NULL;",
          "336:     ctx->amqueue_len = 0;",
          "337:     ctx->amqueue_used = 0;",
          "338: }",
          "346: RedisModuleString *RedisModule_CreateString(RedisModuleCtx *ctx, const char *ptr, size_t len)",
          "347: {",
          "348:     RedisModuleString *o = createStringObject(ptr,len);",
          "349:     RedisModule_AutoMemoryAdd(ctx,REDISMODULE_AM_STRING,o);",
          "350:     return o;",
          "351: }",
          "355: RedisModuleString *RedisModule_CreateStringFromLongLong(RedisModuleCtx *ctx, long long ll) {",
          "356:     char buf[LONG_STR_SIZE];",
          "357:     size_t len = ll2string(buf,sizeof(buf),ll);",
          "358:     return RedisModule_CreateString(ctx,buf,len);",
          "359: }",
          "363: void RedisModule_FreeString(RedisModuleCtx *ctx, RedisModuleString *str) {",
          "364:     decrRefCount(str);",
          "365:     RedisModule_AutoMemoryFreed(ctx,REDISMODULE_AM_STRING,str);",
          "366: }",
          "369: const char *RedisModule_StringPtrLen(RedisModuleString *str, size_t *len) {",
          "370:     if (len) *len = sdslen(str->ptr);",
          "371:     return str->ptr;",
          "372: }",
          "378: int RedisModule_StringToLongLong(RedisModuleString *str, long long *ll) {",
          "379:     return string2ll(str->ptr,sdslen(str->ptr),ll) ? REDISMODULE_OK :",
          "380:                                                      REDISMODULE_ERR;",
          "381: }",
          "394: int RedisModule_WrongArity(RedisModuleCtx *ctx) {",
          "395:     addReplyErrorFormat(ctx->client,",
          "396:         \"wrong number of arguments for '%s' command\",",
          "397:         (char*)ctx->client->argv[0]->ptr);",
          "398:     return REDISMODULE_OK;",
          "399: }",
          "403: int RedisModule_ReplyWithLongLong(RedisModuleCtx *ctx, long long ll) {",
          "404:     addReplyLongLong(ctx->client,ll);",
          "405:     return REDISMODULE_OK;",
          "406: }",
          "410: int RedisModule_ReplyWithStatus(RedisModuleCtx *ctx, const char *msg, char *prefix) {",
          "411:     sds strmsg = sdsnewlen(prefix,1);",
          "412:     strmsg = sdscat(strmsg,msg);",
          "413:     strmsg = sdscatlen(strmsg,\"\\r\\n\",2);",
          "414:     addReplySds(ctx->client,strmsg);",
          "415:     return REDISMODULE_OK;",
          "416: }",
          "430: int RedisModule_ReplyWithError(RedisModuleCtx *ctx, const char *err) {",
          "431:     return RedisModule_ReplyWithStatus(ctx,err,\"-\");",
          "432: }",
          "437: int RedisModule_ReplyWithSimpleString(RedisModuleCtx *ctx, const char *msg) {",
          "438:     return RedisModule_ReplyWithStatus(ctx,msg,\"+\");",
          "439: }",
          "444: int RedisModule_ReplyWithArray(RedisModuleCtx *ctx, int len) {",
          "445:     addReplyMultiBulkLen(ctx->client,len);",
          "446:     return REDISMODULE_OK;",
          "447: }",
          "450: int RedisModule_ReplyWithStringBuffer(RedisModuleCtx *ctx, const char *buf, size_t len) {",
          "451:     addReplyBulkCBuffer(ctx->client,(char*)buf,len);",
          "452:     return REDISMODULE_OK;",
          "453: }",
          "456: int RedisModule_ReplyWithString(RedisModuleCtx *ctx, RedisModuleString *str) {",
          "457:     addReplyBulk(ctx->client,str);",
          "458:     return REDISMODULE_OK;",
          "459: }",
          "468: void moduleReplicateMultiIfNeeded(RedisModuleCtx *ctx) {",
          "469:     if (ctx->flags & REDISMODULE_CTX_MULTI_EMITTED) return;",
          "470:     execCommandPropagateMulti(ctx->client);",
          "471:     ctx->flags |= REDISMODULE_CTX_MULTI_EMITTED;",
          "472: }",
          "484: int RedisModule_Replicate(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {",
          "485:     struct redisCommand *cmd;",
          "486:     robj **argv = NULL;",
          "487:     int argc = 0, flags = 0, j;",
          "488:     va_list ap;",
          "490:     cmd = lookupCommandByCString((char*)cmdname);",
          "491:     if (!cmd) return REDISMODULE_ERR;",
          "494:     va_start(ap, fmt);",
          "495:     argv = moduleCreateArgvFromUserFormat(cmdname,fmt,&argc,&flags,ap);",
          "496:     va_end(ap);",
          "497:     if (argv == NULL) return REDISMODULE_ERR;",
          "500:     moduleReplicateMultiIfNeeded(ctx);",
          "501:     alsoPropagate(cmd,ctx->client->db->id,argv,argc,",
          "502:         PROPAGATE_AOF|PROPAGATE_REPL);",
          "505:     for (j = 0; j < argc; j++) decrRefCount(argv[j]);",
          "506:     zfree(argv);",
          "507:     return REDISMODULE_OK;",
          "508: }",
          "514: int RedisModule_ReplicateVerbatim(RedisModuleCtx *ctx) {",
          "515:     alsoPropagate(ctx->client->cmd,ctx->client->db->id,",
          "516:         ctx->client->argv,ctx->client->argc,",
          "517:         PROPAGATE_AOF|PROPAGATE_REPL);",
          "518:     return REDISMODULE_OK;",
          "519: }",
          "526: int RedisModule_GetSelectedDb(RedisModuleCtx *ctx) {",
          "527:     return ctx->client->db->id;",
          "528: }",
          "532: int RedisModule_SelectDb(RedisModuleCtx *ctx, int newid) {",
          "533:     int retval = selectDb(ctx->client,newid);",
          "534:     return (retval == C_OK) ? REDISMODULE_OK : REDISMODULE_ERR;",
          "535: }",
          "551: void *RedisModule_OpenKey(RedisModuleCtx *ctx, robj *keyname, int mode) {",
          "552:     RedisModuleKey *kp;",
          "553:     robj *value;",
          "555:     if (mode & REDISMODULE_WRITE) {",
          "556:         value = lookupKeyWrite(ctx->client->db,keyname);",
          "557:     } else {",
          "558:         value = lookupKeyRead(ctx->client->db,keyname);",
          "559:         if (value == NULL) {",
          "560:             decrRefCount(keyname);",
          "561:             return NULL;",
          "562:         }",
          "563:     }",
          "566:     kp = zmalloc(sizeof(*kp));",
          "567:     kp->ctx = ctx;",
          "568:     kp->db = ctx->client->db;",
          "569:     kp->key = keyname;",
          "570:     incrRefCount(keyname);",
          "571:     kp->value = value;",
          "572:     kp->iter = NULL;",
          "573:     kp->mode = mode;",
          "574:     RedisModule_AutoMemoryAdd(ctx,REDISMODULE_AM_KEY,kp);",
          "575:     return (void*)kp;",
          "576: }",
          "579: void RedisModule_CloseKey(RedisModuleKey *key) {",
          "580:     if (key == NULL) return;",
          "581:     if (key->mode & REDISMODULE_WRITE) signalModifiedKey(key->db,key->key);",
          "583:     decrRefCount(key->key);",
          "584:     RedisModule_AutoMemoryFreed(key->ctx,REDISMODULE_AM_KEY,key);",
          "585:     zfree(key);",
          "586: }",
          "590: int RedisModule_KeyType(RedisModuleKey *key) {",
          "591:     if (key == NULL || key->value ==  NULL) return REDISMODULE_KEYTYPE_EMPTY;",
          "594:     switch(key->value->type) {",
          "595:     case OBJ_STRING: return REDISMODULE_KEYTYPE_STRING;",
          "596:     case OBJ_LIST: return REDISMODULE_KEYTYPE_LIST;",
          "597:     case OBJ_SET: return REDISMODULE_KEYTYPE_SET;",
          "598:     case OBJ_ZSET: return REDISMODULE_KEYTYPE_ZSET;",
          "599:     case OBJ_HASH: return REDISMODULE_KEYTYPE_HASH;",
          "600:     default: return 0;",
          "601:     }",
          "602: }",
          "609: size_t RedisModule_ValueLength(RedisModuleKey *key) {",
          "610:     if (key == NULL || key->value == NULL) return 0;",
          "611:     switch(key->value->type) {",
          "612:     case OBJ_STRING: return stringObjectLen(key->value);",
          "613:     case OBJ_LIST: return listTypeLength(key->value);",
          "614:     case OBJ_SET: return setTypeSize(key->value);",
          "615:     case OBJ_ZSET: return zsetLength(key->value);",
          "616:     case OBJ_HASH: return hashTypeLength(key->value);",
          "617:     default: return 0;",
          "618:     }",
          "619: }",
          "625: int RedisModule_DeleteKey(RedisModuleKey *key) {",
          "626:     if (!(key->mode & REDISMODULE_WRITE)) return REDISMODULE_ERR;",
          "627:     if (key->value) {",
          "628:         dbDelete(key->db,key->key);",
          "629:         key->value = NULL;",
          "630:     }",
          "631:     return REDISMODULE_OK;",
          "632: }",
          "642: int RedisModule_StringSet(RedisModuleKey *key, RedisModuleString *str) {",
          "643:     if (!(key->mode & REDISMODULE_WRITE) || key->iter) return REDISMODULE_ERR;",
          "644:     RedisModule_DeleteKey(key);",
          "645:     setKey(key->db,key->key,str);",
          "646:     return REDISMODULE_OK;",
          "647: }",
          "678: char *RedisModule_StringDMA(RedisModuleKey *key, size_t *len, int mode) {",
          "683:     char *emptystring = \"<dma-empty-string>\";",
          "684:     if (key->value == NULL) {",
          "686:         return emptystring;",
          "687:     }",
          "689:     if (key->value->type != OBJ_STRING) return NULL;",
          "693:     if ((mode & REDISMODULE_WRITE) || key->value->encoding != OBJ_ENCODING_RAW)",
          "694:         key->value = dbUnshareStringValue(key->db, key->key, key->value);",
          "697:     return key->value->ptr;",
          "698: }",
          "712: int RedisModule_StringTruncate(RedisModuleKey *key, size_t newlen) {",
          "713:     if (!(key->mode & REDISMODULE_WRITE)) return REDISMODULE_ERR;",
          "714:     if (key->value && key->value->type != OBJ_STRING) return REDISMODULE_ERR;",
          "715:     if (newlen > 512*1024*1024) return REDISMODULE_ERR;",
          "719:     if (key->value == NULL && newlen == 0) return REDISMODULE_OK;",
          "723:     if (key->value == NULL) {",
          "724:         robj *emptyobj = createStringObject(\"\",0);",
          "725:         setKey(key->db,key->key,emptyobj);",
          "726:         key->value = emptyobj;",
          "727:         decrRefCount(emptyobj);",
          "728:     }",
          "731:     key->value = dbUnshareStringValue(key->db, key->key, key->value);",
          "732:     size_t curlen = sdslen(key->value->ptr);",
          "733:     if (newlen > curlen) {",
          "734:         key->value->ptr = sdsgrowzero(key->value->ptr,newlen);",
          "735:     } else if (newlen < curlen) {",
          "736:         sdsrange(key->value->ptr,0,newlen-1);",
          "738:         if (sdslen(key->value->ptr) > sdsavail(key->value->ptr))",
          "739:             key->value->ptr = sdsRemoveFreeSpace(key->value->ptr);",
          "740:     }",
          "741:     return REDISMODULE_OK;",
          "742: }",
          "752: int RedisModule_ListPush(RedisModuleKey *key, int where, RedisModuleString *ele) {",
          "753:     if (!(key->mode & REDISMODULE_WRITE)) return REDISMODULE_ERR;",
          "754:     if (key->value == NULL) moduleCreateEmtpyKey(key,REDISMODULE_KEYTYPE_LIST);",
          "755:     if (key->value->type != OBJ_LIST) return REDISMODULE_ERR;",
          "756:     listTypePush(key->value, ele,",
          "757:         (where == REDISMODULE_LIST_HEAD) ? QUICKLIST_HEAD : QUICKLIST_TAIL);",
          "758:     signalModifiedKey(key->db,key->key);",
          "759:     return REDISMODULE_OK;",
          "760: }",
          "769: RedisModuleString *RedisModule_ListPop(RedisModuleKey *key, int where) {",
          "770:     if (!(key->mode & REDISMODULE_WRITE) ||",
          "771:         key->value == NULL ||",
          "772:         key->value->type != OBJ_LIST) return NULL;",
          "773:     robj *ele = listTypePop(key->value,",
          "774:         (where == REDISMODULE_LIST_HEAD) ? QUICKLIST_HEAD : QUICKLIST_TAIL);",
          "775:     robj *decoded = getDecodedObject(ele);",
          "776:     decrRefCount(ele);",
          "777:     moduleDelKeyIfEmpty(key);",
          "778:     RedisModule_AutoMemoryAdd(key->ctx,REDISMODULE_AM_STRING,decoded);",
          "779:     return decoded;",
          "780: }",
          "790: RedisModuleCallReply *moduleCreateCallReplyFromProto(RedisModuleCtx *ctx, sds proto) {",
          "791:     RedisModuleCallReply *reply = zmalloc(sizeof(*reply));",
          "792:     reply->ctx = ctx;",
          "793:     reply->proto = proto;",
          "794:     reply->protolen = sdslen(proto);",
          "796:     switch(proto[0]) {",
          "797:     case '$':",
          "798:     case '+': reply->type = REDISMODULE_REPLY_STRING;",
          "799:     case '-': reply->type = REDISMODULE_REPLY_ERROR;",
          "800:     case ':': reply->type = REDISMODULE_REPLY_INTEGER;",
          "801:     case '*': reply->type = REDISMODULE_REPLY_ARRAY;",
          "802:     default: reply->type = REDISMODULE_REPLY_UNKNOWN;",
          "803:     }",
          "804:     if ((proto[0] == '*' || proto[0] == '$') && proto[1] == '-')",
          "805:         reply->type = REDISMODULE_REPLY_NULL;",
          "806:     return reply;",
          "807: }",
          "809: void moduleParseCallReply_Int(RedisModuleCallReply *reply);",
          "810: void moduleParseCallReply_BulkString(RedisModuleCallReply *reply);",
          "811: void moduleParseCallReply_SimpleString(RedisModuleCallReply *reply);",
          "812: void moduleParseCallReply_Array(RedisModuleCallReply *reply);",
          "817: void moduleParseCallReply(RedisModuleCallReply *reply) {",
          "818:     if (!(reply->flags & REDISMODULE_REPLYFLAG_TOPARSE)) return;",
          "819:     reply->flags &= ~REDISMODULE_REPLYFLAG_TOPARSE;",
          "821:     switch(reply->proto[0]) {",
          "822:     case ':': moduleParseCallReply_Int(reply); break;",
          "823:     case '$': moduleParseCallReply_BulkString(reply); break;",
          "825:     case '+': moduleParseCallReply_SimpleString(reply); break;",
          "826:     case '*': moduleParseCallReply_Array(reply); break;",
          "827:     }",
          "828: }",
          "830: void moduleParseCallReply_Int(RedisModuleCallReply *reply) {",
          "831:     char *proto = reply->proto;",
          "832:     char *p = strchr(proto+1,'\\r');",
          "834:     string2ll(proto+1,p-proto-1,&reply->val.ll);",
          "835:     reply->protolen = p-proto+2;",
          "836:     reply->type = REDISMODULE_REPLY_INTEGER;",
          "837: }",
          "839: void moduleParseCallReply_BulkString(RedisModuleCallReply *reply) {",
          "840:     char *proto = reply->proto;",
          "841:     char *p = strchr(proto+1,'\\r');",
          "842:     long long bulklen;",
          "844:     string2ll(proto+1,p-proto-1,&bulklen);",
          "845:     if (bulklen == -1) {",
          "846:         reply->protolen = proto-p+2;",
          "847:         reply->type = REDISMODULE_REPLY_NULL;",
          "848:     } else {",
          "849:         reply->val.str = p+2;",
          "850:         reply->len = bulklen;",
          "851:         reply->protolen = p-proto+2+bulklen+2;",
          "852:         reply->type = REDISMODULE_REPLY_STRING;",
          "853:     }",
          "854: }",
          "856: void moduleParseCallReply_SimpleString(RedisModuleCallReply *reply) {",
          "857:     char *proto = reply->proto;",
          "858:     char *p = strchr(proto+1,'\\r');",
          "860:     reply->val.str = proto+1;",
          "861:     reply->len = p-proto-1;",
          "862:     reply->protolen = proto-p+2;",
          "863:     reply->type = proto[0] == '+' ? REDISMODULE_REPLY_STRING :",
          "864:                                     REDISMODULE_REPLY_ERROR;",
          "865: }",
          "867: void moduleParseCallReply_Array(RedisModuleCallReply *reply) {",
          "868:     char *proto = reply->proto;",
          "869:     char *p = strchr(proto+1,'\\r');",
          "870:     long long arraylen, j;",
          "872:     string2ll(proto+1,p-proto-1,&arraylen);",
          "873:     p += 2;",
          "875:     if (arraylen == -1) {",
          "876:         reply->protolen = proto-p;",
          "877:         reply->type = REDISMODULE_REPLY_NULL;",
          "878:         return;",
          "879:     }",
          "881:     reply->val.array = zmalloc(sizeof(RedisModuleCallReply)*arraylen);",
          "882:     reply->len = arraylen;",
          "883:     for (j = 0; j < arraylen; j++) {",
          "884:         RedisModuleCallReply *ele = reply->val.array+j;",
          "885:         ele->flags = REDISMODULE_REPLYFLAG_NESTED |",
          "886:                      REDISMODULE_REPLYFLAG_TOPARSE;",
          "887:         ele->proto = p;",
          "888:         moduleParseCallReply(ele);",
          "889:         p += ele->protolen;",
          "890:     }",
          "891:     reply->protolen = proto-p;",
          "892:     reply->type = REDISMODULE_REPLY_ARRAY;",
          "893: }",
          "897: void RedisModule_FreeCallReply_Rec(RedisModuleCallReply *reply, int freenested){",
          "901:     if (!freenested && reply->flags & REDISMODULE_REPLYFLAG_NESTED) return;",
          "903:     if (!(reply->flags & REDISMODULE_REPLYFLAG_TOPARSE)) {",
          "904:         if (reply->type == REDISMODULE_REPLY_ARRAY) {",
          "905:             size_t j;",
          "906:             for (j = 0; j < reply->len; j++)",
          "907:                 RedisModule_FreeCallReply_Rec(reply->val.array+j,1);",
          "908:             zfree(reply->val.array);",
          "909:         }",
          "910:     }",
          "916:     if (!(reply->flags & REDISMODULE_REPLYFLAG_NESTED)) {",
          "917:         if (reply->proto) sdsfree(reply->proto);",
          "918:         zfree(reply);",
          "919:     }",
          "920: }",
          "925: void RedisModule_FreeCallReply(RedisModuleCallReply *reply) {",
          "926:     RedisModule_FreeCallReply_Rec(reply,0);",
          "927:     RedisModule_AutoMemoryFreed(reply->ctx,REDISMODULE_AM_REPLY,reply);",
          "928: }",
          "931: int RedisModule_CallReplyType(RedisModuleCallReply *reply) {",
          "932:     return reply->type;",
          "933: }",
          "936: size_t RedisModule_CallReplyLength(RedisModuleCallReply *reply) {",
          "937:     moduleParseCallReply(reply);",
          "938:     switch(reply->type) {",
          "939:     case REDISMODULE_REPLY_STRING:",
          "940:     case REDISMODULE_REPLY_ERROR:",
          "941:     case REDISMODULE_REPLY_ARRAY:",
          "942:         return reply->len;",
          "943:     default:",
          "944:         return 0;",
          "945:     }",
          "946: }",
          "950: RedisModuleCallReply *RedisModule_CallReplyArrayElement(RedisModuleCallReply *reply, size_t idx) {",
          "951:     moduleParseCallReply(reply);",
          "952:     if (reply->type != REDISMODULE_REPLY_ARRAY) return NULL;",
          "953:     if (idx >= reply->len) return NULL;",
          "954:     return reply->val.array+idx;",
          "955: }",
          "958: long long RedisModule_CallReplyInteger(RedisModuleCallReply *reply) {",
          "959:     moduleParseCallReply(reply);",
          "960:     if (reply->type != REDISMODULE_REPLY_INTEGER) return LLONG_MIN;",
          "961:     return reply->val.ll;",
          "962: }",
          "965: const char *RedisModule_CallReplyStringPtr(RedisModuleCallReply *reply, size_t *len) {",
          "966:     moduleParseCallReply(reply);",
          "967:     if (reply->type != REDISMODULE_REPLY_STRING &&",
          "968:         reply->type != REDISMODULE_REPLY_ERROR) return NULL;",
          "969:     if (len) *len = reply->len;",
          "970:     return reply->val.str;",
          "971: }",
          "975: RedisModuleString *RedisModule_CreateStringFromCallReply(RedisModuleCallReply *reply) {",
          "976:     moduleParseCallReply(reply);",
          "977:     switch(reply->type) {",
          "978:     case REDISMODULE_REPLY_STRING:",
          "979:     case REDISMODULE_REPLY_ERROR:",
          "980:         return RedisModule_CreateString(reply->ctx,reply->val.str,reply->len);",
          "981:     case REDISMODULE_REPLY_INTEGER: {",
          "982:         char buf[64];",
          "983:         int len = ll2string(buf,sizeof(buf),reply->val.ll);",
          "984:         return RedisModule_CreateString(reply->ctx,buf,len);",
          "985:         }",
          "986:     default: return NULL;",
          "987:     }",
          "988: }",
          "1002: #define REDISMODULE_ARGV_REPLICATE (1<<0)",
          "1004: robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt, int *argcp, int *flags, va_list ap) {",
          "1005:     int argc = 0, argv_size, j;",
          "1006:     robj **argv = NULL;",
          "1011:     argv = zrealloc(argv,sizeof(robj*)*argv_size);",
          "1014:     argv[0] = createStringObject(cmdname,strlen(cmdname));",
          "1015:     argc++;",
          "1018:     const char *p = fmt;",
          "1019:     while(*p) {",
          "1020:         if (*p == 'c') {",
          "1021:             char *cstr = va_arg(ap,char*);",
          "1022:             argv[argc++] = createStringObject(cstr,strlen(cstr));",
          "1023:         } else if (*p == 's') {",
          "1024:             robj *obj = va_arg(ap,void*);",
          "1025:             argv[argc++] = obj;",
          "1026:             incrRefCount(obj);",
          "1027:         } else if (*p == 'b') {",
          "1028:             char *buf = va_arg(ap,char*);",
          "1029:             size_t len = va_arg(ap,size_t);",
          "1030:             argv[argc++] = createStringObject(buf,len);",
          "1031:         } else if (*p == 'l') {",
          "1032:             long ll = va_arg(ap,long long);",
          "1033:             argv[argc++] = createStringObjectFromLongLong(ll);",
          "1034:         } else if (*p == 'v') {",
          "1036:         } else if (*p == '!') {",
          "1037:             if (flags) (*flags) |= REDISMODULE_ARGV_REPLICATE;",
          "1038:         } else {",
          "1039:             goto fmterr;",
          "1040:         }",
          "1041:         p++;",
          "1042:     }",
          "1044:     return argv;",
          "1046: fmterr:",
          "1047:     for (j = 0; j < argc; j++)",
          "1048:         decrRefCount(argv[j]);",
          "1049:     zfree(argv);",
          "1050:     return NULL;",
          "1051: }",
          "1059: RedisModuleCallReply *RedisModule_Call(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {",
          "1060:     struct redisCommand *cmd;",
          "1061:     client *c = NULL;",
          "1062:     robj **argv = NULL;",
          "1063:     int argc = 0, flags = 0;",
          "1064:     va_list ap;",
          "1065:     RedisModuleCallReply *reply = NULL;",
          "1068:     cmd = lookupCommandByCString((char*)cmdname);",
          "1069:     if (!cmd) {",
          "1070:         errno = EINVAL;",
          "1071:         return NULL;",
          "1072:     }",
          "1075:     va_start(ap, fmt);",
          "1076:     c = createClient(-1);",
          "1077:     argv = moduleCreateArgvFromUserFormat(cmdname,fmt,&argc,&flags,ap);",
          "1078:     replicate = flags & REDISMODULE_ARGV_REPLICATE;",
          "1079:     va_end(ap);",
          "1082:     c->flags |= CLIENT_MODULE;",
          "1083:     c->argv = argv;",
          "1084:     c->argc = argc;",
          "1085:     c->cmd = c->lastcmd = cmd;",
          "1088:     if (argv == NULL) goto cleanup;",
          "1091:     if ((cmd->arity > 0 && cmd->arity != argc) || (argc < -cmd->arity)) {",
          "1092:         errno = EINVAL;",
          "1093:         goto cleanup;",
          "1094:     }",
          "1099:     if (server.cluster_enabled && !(ctx->client->flags & CLIENT_MASTER)) {",
          "1101:         c->flags &= ~(CLIENT_READONLY|CLIENT_ASKING);",
          "1102:         c->flags |= ctx->client->flags & (CLIENT_READONLY|CLIENT_ASKING);",
          "1103:         if (getNodeByQuery(c,c->cmd,c->argv,c->argc,NULL,NULL) !=",
          "1104:                            server.cluster->myself)",
          "1105:         {",
          "1106:             errno = EPERM;",
          "1107:             goto cleanup;",
          "1108:         }",
          "1109:     }",
          "1114:     if (replicate) moduleReplicateMultiIfNeeded(ctx);",
          "1117:     int call_flags = CMD_CALL_SLOWLOG | CMD_CALL_STATS;",
          "1118:     if (replicate) {",
          "1119:         call_flags |= CMD_CALL_PROPAGATE_AOF;",
          "1120:         call_flags |= CMD_CALL_PROPAGATE_REPL;",
          "1121:     }",
          "1122:     call(c,call_flags);",
          "1127:     sds proto = sdsnewlen(c->buf,c->bufpos);",
          "1128:     c->bufpos = 0;",
          "1129:     while(listLength(c->reply)) {",
          "1130:         sds o = listNodeValue(listFirst(c->reply));",
          "1132:         proto = sdscatsds(proto,o);",
          "1133:         listDelNode(c->reply,listFirst(c->reply));",
          "1134:     }",
          "1135:     reply = moduleCreateCallReplyFromProto(ctx,proto);",
          "1136:     RedisModule_AutoMemoryAdd(ctx,REDISMODULE_AM_REPLY,reply);",
          "1138: cleanup:",
          "1139:     freeClient(c);",
          "1140:     return reply;",
          "1141: }",
          "1145: const char *RedisModule_CallReplyProto(RedisModuleCallReply *reply, size_t *len) {",
          "1146:     if (reply->proto) *len = sdslen(reply->proto);",
          "1147:     return reply->proto;",
          "1148: }",
          "1157: unsigned int dictCStringKeyHash(const void *key) {",
          "1158:     return dictGenHashFunction((unsigned char*)key, strlen((char*)key));",
          "1159: }",
          "1161: int dictCStringKeyCompare(void *privdata, const void *key1, const void *key2) {",
          "1162:     DICT_NOTUSED(privdata);",
          "1163:     return strcmp(key1,key2) == 0;",
          "1164: }",
          "1166: dictType moduleAPIDictType = {",
          "1173: };",
          "1175: int moduleRegisterApi(const char *funcname, void *funcptr) {",
          "1176:     return dictAdd(server.moduleapi, (char*)funcname, funcptr);",
          "1177: }",
          "1179: #define REGISTER_API(name) \\",
          "1180:     moduleRegisterApi(\"RedisModule_\" #name, (void *)RedisModule_ ## name)",
          "1183: void moduleRegisterCoreAPI(void) {",
          "1184:     server.moduleapi = dictCreate(&moduleAPIDictType,NULL);",
          "1185:     REGISTER_API(CreateCommand);",
          "1186:     REGISTER_API(SetModuleAttribs);",
          "1187:     REGISTER_API(WrongArity);",
          "1188:     REGISTER_API(ReplyWithLongLong);",
          "1189:     REGISTER_API(ReplyWithError);",
          "1190:     REGISTER_API(ReplyWithSimpleString);",
          "1191:     REGISTER_API(ReplyWithArray);",
          "1192:     REGISTER_API(ReplyWithString);",
          "1193:     REGISTER_API(ReplyWithStringBuffer);",
          "1194:     REGISTER_API(GetSelectedDb);",
          "1195:     REGISTER_API(SelectDb);",
          "1196:     REGISTER_API(OpenKey);",
          "1197:     REGISTER_API(CloseKey);",
          "1198:     REGISTER_API(KeyType);",
          "1199:     REGISTER_API(ValueLength);",
          "1200:     REGISTER_API(ListPush);",
          "1201:     REGISTER_API(ListPop);",
          "1202:     REGISTER_API(StringToLongLong);",
          "1203:     REGISTER_API(Call);",
          "1204:     REGISTER_API(CallReplyProto);",
          "1205:     REGISTER_API(FreeCallReply);",
          "1206:     REGISTER_API(CallReplyInteger);",
          "1207:     REGISTER_API(CallReplyType);",
          "1208:     REGISTER_API(CallReplyLength);",
          "1209:     REGISTER_API(CallReplyArrayElement);",
          "1210:     REGISTER_API(CallReplyStringPtr);",
          "1211:     REGISTER_API(CreateStringFromCallReply);",
          "1212:     REGISTER_API(CreateString);",
          "1213:     REGISTER_API(CreateStringFromLongLong);",
          "1214:     REGISTER_API(FreeString);",
          "1215:     REGISTER_API(StringPtrLen);",
          "1216:     REGISTER_API(AutoMemory);",
          "1217:     REGISTER_API(Replicate);",
          "1218:     REGISTER_API(ReplicateVerbatim);",
          "1219:     REGISTER_API(DeleteKey);",
          "1220:     REGISTER_API(StringSet);",
          "1221:     REGISTER_API(StringDMA);",
          "1222:     REGISTER_API(StringTruncate);",
          "1223: }",
          "1226: void moduleInitModulesSystem(void) {",
          "1227:     server.loadmodule_queue = listCreate();",
          "1228:     modules = dictCreate(&modulesDictType,NULL);",
          "1229:     moduleRegisterCoreAPI();",
          "1230: }",
          "1241: void moduleLoadFromQueue(void) {",
          "1242:     listIter li;",
          "1243:     listNode *ln;",
          "1245:     listRewind(server.loadmodule_queue,&li);",
          "1246:     while((ln = listNext(&li))) {",
          "1247:         sds modulepath = ln->value;",
          "1248:         if (moduleLoad(modulepath) == C_ERR) {",
          "1249:             serverLog(LL_WARNING,",
          "1250:                 \"Can't load module from %s: server aborting\",",
          "1251:                 modulepath);",
          "1252:             exit(1);",
          "1253:         }",
          "1254:     }",
          "1255: }",
          "1257: void moduleFreeModuleStructure(struct RedisModule *module) {",
          "1258:     sdsfree(module->name);",
          "1259:     zfree(module);",
          "1260: }",
          "1264: int moduleLoad(const char *path) {",
          "1265:     int (*onload)(void *);",
          "1266:     void *handle;",
          "1267:     RedisModuleCtx ctx = REDISMODULE_CTX_INIT;",
          "1269:     handle = dlopen(path,RTLD_LAZY);",
          "1270:     if (handle == NULL) return C_ERR;",
          "1271:     onload = (int (*)(void *)) dlsym(handle,\"RedisModule_OnLoad\");",
          "1272:     if (onload == NULL) {",
          "1273:         serverLog(LL_WARNING,",
          "1274:             \"Module %s does not export RedisModule_OnLoad() \"",
          "1275:             \"symbol. Module not loaded.\",path);",
          "1276:         return C_ERR;",
          "1277:     }",
          "1278:     if (onload((void*)&ctx) == REDISMODULE_ERR) {",
          "1279:         if (ctx.module) moduleFreeModuleStructure(ctx.module);",
          "1280:         dlclose(handle);",
          "1281:         serverLog(LL_WARNING,",
          "1282:             \"Module %s initialization failed. Module not loaded\",path);",
          "1283:         return C_ERR;",
          "1284:     }",
          "1287:     dictAdd(modules,ctx.module->name,ctx.module);",
          "1288:     ctx.module->handle = handle;",
          "1289:     serverLog(LL_NOTICE,\"Module '%s' loaded from %s\",ctx.module->name,path);",
          "1290:     return C_OK;",
          "1291: }",
          "1298: int moduleUnload(sds name) {",
          "1299:     struct RedisModule *module = dictFetchValue(modules,name);",
          "1300:     if (module == NULL) {",
          "1301:         errno = ENOENT;",
          "1302:         return REDISMODULE_ERR;",
          "1303:     }",
          "1306:     dictIterator *di = dictGetSafeIterator(server.commands);",
          "1307:     dictEntry *de;",
          "1308:     while ((de = dictNext(di)) != NULL) {",
          "1309:         struct redisCommand *cmd = dictGetVal(de);",
          "1310:         if (cmd->proc == RedisModuleCommandDispatcher) {",
          "1311:             RedisModuleCommandProxy *cp = (void*)cmd->getkeys_proc;",
          "1312:             sds cmdname = cp->rediscmd->name;",
          "1313:             if (cp->module == module) {",
          "1314:                 dictDelete(server.commands,cmdname);",
          "1315:                 dictDelete(server.orig_commands,cmdname);",
          "1316:                 sdsfree(cmdname);",
          "1317:                 zfree(cp->rediscmd);",
          "1318:                 zfree(cp);",
          "1319:             }",
          "1320:         }",
          "1321:     }",
          "1322:     dictReleaseIterator(di);",
          "1327:     if (dlclose(module->handle) == -1) {",
          "1328:         char *error = dlerror();",
          "1329:         if (error == NULL) error = \"Unknown error\";",
          "1330:         serverLog(LL_WARNING,\"Error when trying to close the %s module: %s\",",
          "1331:             module->name, error);",
          "1332:     }",
          "1335:     serverLog(LL_NOTICE,\"Module %s unloaded\",module->name);",
          "1336:     dictDelete(modules,module->name);",
          "1339:     zfree(module);",
          "1341:     return REDISMODULE_OK;",
          "1342: }",
          "1347: void moduleCommand(client *c) {",
          "1348:     char *subcmd = c->argv[1]->ptr;",
          "1350:     if (!strcasecmp(subcmd,\"load\") && c->argc == 3) {",
          "1351:         if (moduleLoad(c->argv[2]->ptr) == C_OK)",
          "1352:             addReply(c,shared.ok);",
          "1353:         else",
          "1354:             addReplyError(c,",
          "1355:                 \"Error loading the extension. Please check the server logs.\");",
          "1356:     } else if (!strcasecmp(subcmd,\"unload\") && c->argc == 3) {",
          "1357:         if (moduleUnload(c->argv[2]->ptr) == C_OK)",
          "1358:             addReply(c,shared.ok);",
          "1359:         else {",
          "1360:             char *errmsg = \"operation not possible.\";",
          "1361:             switch(errno) {",
          "1362:             case ENOENT: errmsg = \"no such module with that name\";",
          "1363:             }",
          "1364:             addReplyErrorFormat(c,\"Error unloading module: %s\",errmsg);",
          "1365:         }",
          "1366:     } else if (!strcasecmp(subcmd,\"list\") && c->argc == 2) {",
          "1367:         dictIterator *di = dictGetIterator(modules);",
          "1368:         dictEntry *de;",
          "1370:         addReplyMultiBulkLen(c,dictSize(modules));",
          "1371:         while ((de = dictNext(di)) != NULL) {",
          "1372:             sds name = dictGetKey(de);",
          "1373:             struct RedisModule *module = dictGetVal(de);",
          "1374:             addReplyMultiBulkLen(c,4);",
          "1375:             addReplyBulkCString(c,\"name\");",
          "1376:             addReplyBulkCBuffer(c,name,sdslen(name));",
          "1377:             addReplyBulkCString(c,\"ver\");",
          "1378:             addReplyLongLong(c,module->ver);",
          "1379:         }",
          "1380:         dictReleaseIterator(di);",
          "1381:     } else {",
          "1382:         addReply(c,shared.syntaxerr);",
          "1383:     }",
          "1384: }",
          "",
          "---------------"
        ],
        "src/modules/helloworld.c||src/modules/helloworld.c": [
          "File: src/modules/helloworld.c -> src/modules/helloworld.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"../redismodule.h\"",
          "2: #include <stdio.h>",
          "3: #include <stdlib.h>",
          "4: #include <ctype.h>",
          "11: int HelloSimple_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "12:     RedisModule_ReplyWithLongLong(ctx,RedisModule_GetSelectedDb(ctx));",
          "13:     return REDISMODULE_OK;",
          "14: }",
          "22: int HelloPushNative_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
          "23: {",
          "24:     if (argc != 3) return RedisModule_WrongArity(ctx);",
          "26:     RedisModuleKey *key = RedisModule_OpenKey(ctx,argv[1],",
          "27:         REDISMODULE_READ|REDISMODULE_WRITE);",
          "29:     RedisModule_ListPush(key,REDISMODULE_LIST_TAIL,argv[2]);",
          "30:     size_t newlen = RedisModule_ValueLength(key);",
          "31:     RedisModule_CloseKey(key);",
          "32:     RedisModule_ReplyWithLongLong(ctx,newlen);",
          "33:     return REDISMODULE_OK;",
          "34: }",
          "41: int HelloPushCall_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
          "42: {",
          "43:     if (argc != 3) return RedisModule_WrongArity(ctx);",
          "45:     RedisModuleCallReply *reply;",
          "47:     reply = RedisModule_Call(ctx,\"RPUSH\",\"ss\",argv[1],argv[2]);",
          "48:     long long len = RedisModule_CallReplyInteger(reply);",
          "49:     RedisModule_FreeCallReply(reply);",
          "50:     RedisModule_ReplyWithLongLong(ctx,len);",
          "51:     return REDISMODULE_OK;",
          "52: }",
          "57: int HelloListSumLen_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
          "58: {",
          "59:     if (argc != 2) return RedisModule_WrongArity(ctx);",
          "61:     RedisModuleCallReply *reply;",
          "63:     reply = RedisModule_Call(ctx,\"LRANGE\",\"sll\",argv[1],(long long)0,(long long)-1);",
          "64:     size_t strlen = 0;",
          "65:     size_t items = RedisModule_CallReplyLength(reply);",
          "66:     size_t j;",
          "67:     for (j = 0; j < items; j++) {",
          "68:         RedisModuleCallReply *ele = RedisModule_CallReplyArrayElement(reply,j);",
          "69:         strlen += RedisModule_CallReplyLength(ele);",
          "70:     }",
          "71:     RedisModule_FreeCallReply(reply);",
          "72:     RedisModule_ReplyWithLongLong(ctx,strlen);",
          "73:     return REDISMODULE_OK;",
          "74: }",
          "80: int HelloListSplice_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "81:     if (argc != 4) return RedisModule_WrongArity(ctx);",
          "83:     RedisModuleKey *srckey = RedisModule_OpenKey(ctx,argv[1],",
          "84:         REDISMODULE_READ|REDISMODULE_WRITE);",
          "85:     RedisModuleKey *dstkey = RedisModule_OpenKey(ctx,argv[2],",
          "86:         REDISMODULE_READ|REDISMODULE_WRITE);",
          "89:     if ((RedisModule_KeyType(srckey) != REDISMODULE_KEYTYPE_LIST &&",
          "90:          RedisModule_KeyType(srckey) != REDISMODULE_KEYTYPE_EMPTY) ||",
          "91:         (RedisModule_KeyType(dstkey) != REDISMODULE_KEYTYPE_LIST &&",
          "92:          RedisModule_KeyType(dstkey) != REDISMODULE_KEYTYPE_EMPTY))",
          "93:     {",
          "94:         RedisModule_CloseKey(srckey);",
          "95:         RedisModule_CloseKey(dstkey);",
          "96:         return RedisModule_ReplyWithError(ctx,REDISMODULE_ERRORMSG_WRONGTYPE);",
          "97:     }",
          "99:     long long count;",
          "100:     if (RedisModule_StringToLongLong(argv[3],&count) != REDISMODULE_OK) {",
          "101:         RedisModule_CloseKey(srckey);",
          "102:         RedisModule_CloseKey(dstkey);",
          "103:         return RedisModule_ReplyWithError(ctx,\"ERR invalid count\");",
          "104:     }",
          "106:     while(count-- > 0) {",
          "107:         RedisModuleString *ele;",
          "109:         ele = RedisModule_ListPop(srckey,REDISMODULE_LIST_TAIL);",
          "110:         if (ele == NULL) break;",
          "111:         RedisModule_ListPush(dstkey,REDISMODULE_LIST_HEAD,ele);",
          "112:         RedisModule_FreeString(ctx,ele);",
          "113:     }",
          "115:     size_t len = RedisModule_ValueLength(srckey);",
          "116:     RedisModule_CloseKey(srckey);",
          "117:     RedisModule_CloseKey(dstkey);",
          "118:     RedisModule_ReplyWithLongLong(ctx,len);",
          "119:     return REDISMODULE_OK;",
          "120: }",
          "124: int HelloListSpliceAuto_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "125:     if (argc != 4) return RedisModule_WrongArity(ctx);",
          "127:     RedisModule_AutoMemory(ctx);",
          "129:     RedisModuleKey *srckey = RedisModule_OpenKey(ctx,argv[1],",
          "130:         REDISMODULE_READ|REDISMODULE_WRITE);",
          "131:     RedisModuleKey *dstkey = RedisModule_OpenKey(ctx,argv[2],",
          "132:         REDISMODULE_READ|REDISMODULE_WRITE);",
          "135:     if ((RedisModule_KeyType(srckey) != REDISMODULE_KEYTYPE_LIST &&",
          "136:          RedisModule_KeyType(srckey) != REDISMODULE_KEYTYPE_EMPTY) ||",
          "137:         (RedisModule_KeyType(dstkey) != REDISMODULE_KEYTYPE_LIST &&",
          "138:          RedisModule_KeyType(dstkey) != REDISMODULE_KEYTYPE_EMPTY))",
          "139:     {",
          "140:         return RedisModule_ReplyWithError(ctx,REDISMODULE_ERRORMSG_WRONGTYPE);",
          "141:     }",
          "143:     long long count;",
          "144:     if (RedisModule_StringToLongLong(argv[3],&count) != REDISMODULE_OK)",
          "145:         return RedisModule_ReplyWithError(ctx,\"ERR invalid count\");",
          "147:     while(count-- > 0) {",
          "148:         RedisModuleString *ele;",
          "150:         ele = RedisModule_ListPop(srckey,REDISMODULE_LIST_TAIL);",
          "151:         if (ele == NULL) break;",
          "152:         RedisModule_ListPush(dstkey,REDISMODULE_LIST_HEAD,ele);",
          "153:     }",
          "155:     size_t len = RedisModule_ValueLength(srckey);",
          "156:     RedisModule_ReplyWithLongLong(ctx,len);",
          "157:     return REDISMODULE_OK;",
          "158: }",
          "163: int HelloRandArray_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "164:     if (argc != 2) return RedisModule_WrongArity(ctx);",
          "165:     long long count;",
          "166:     if (RedisModule_StringToLongLong(argv[1],&count) != REDISMODULE_OK ||",
          "167:         count < 0)",
          "168:         return RedisModule_ReplyWithError(ctx,\"ERR invalid count\");",
          "173:     RedisModule_ReplyWithArray(ctx,count);",
          "174:     while(count--) RedisModule_ReplyWithLongLong(ctx,rand());",
          "175:     return REDISMODULE_OK;",
          "176: }",
          "182: int HelloRepl1_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)",
          "183: {",
          "184:     RedisModuleCallReply *reply;",
          "185:     RedisModule_AutoMemory(ctx);",
          "197:     RedisModule_Replicate(ctx,\"ECHO\",\"c\",\"foo\");",
          "201:     reply = RedisModule_Call(ctx,\"INCR\",\"c!\",\"foo\");",
          "202:     reply = RedisModule_Call(ctx,\"INCR\",\"c!\",\"bar\");",
          "204:     RedisModule_ReplyWithLongLong(ctx,0);",
          "206:     return REDISMODULE_OK;",
          "207: }",
          "219: int HelloRepl2_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "220:     if (argc != 2) return RedisModule_WrongArity(ctx);",
          "223:     RedisModuleKey *key = RedisModule_OpenKey(ctx,argv[1],",
          "224:         REDISMODULE_READ|REDISMODULE_WRITE);",
          "226:     if (RedisModule_KeyType(key) != REDISMODULE_KEYTYPE_LIST)",
          "227:         return RedisModule_ReplyWithError(ctx,REDISMODULE_ERRORMSG_WRONGTYPE);",
          "229:     size_t listlen = RedisModule_ValueLength(key);",
          "230:     long long sum = 0;",
          "233:     while(listlen--) {",
          "234:         RedisModuleString *ele = RedisModule_ListPop(key,REDISMODULE_LIST_TAIL);",
          "235:         long long val;",
          "236:         if (RedisModule_StringToLongLong(ele,&val) != REDISMODULE_OK) val = 0;",
          "237:         val++;",
          "238:         sum += val;",
          "239:         RedisModuleString *newele = RedisModule_CreateStringFromLongLong(ctx,val);",
          "240:         RedisModule_ListPush(key,REDISMODULE_LIST_HEAD,newele);",
          "241:     }",
          "242:     RedisModule_ReplyWithLongLong(ctx,sum);",
          "243:     RedisModule_ReplicateVerbatim(ctx);",
          "244:     return REDISMODULE_OK;",
          "245: }",
          "255: int HelloToggleCase_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "256:     if (argc != 2) return RedisModule_WrongArity(ctx);",
          "258:     RedisModuleKey *key = RedisModule_OpenKey(ctx,argv[1],",
          "259:         REDISMODULE_READ|REDISMODULE_WRITE);",
          "261:     int keytype = RedisModule_KeyType(key);",
          "262:     if (keytype != REDISMODULE_KEYTYPE_STRING &&",
          "263:         keytype != REDISMODULE_KEYTYPE_EMPTY)",
          "264:     {",
          "265:         RedisModule_CloseKey(key);",
          "266:         return RedisModule_ReplyWithError(ctx,REDISMODULE_ERRORMSG_WRONGTYPE);",
          "267:     }",
          "269:     if (keytype == REDISMODULE_KEYTYPE_STRING) {",
          "270:         size_t len, j;",
          "271:         char *s = RedisModule_StringDMA(key,&len,REDISMODULE_WRITE);",
          "272:         for (j = 0; j < len; j++) {",
          "273:             if (isupper(s[j])) {",
          "274:                 s[j] = tolower(s[j]);",
          "275:             } else {",
          "276:                 s[j] = toupper(s[j]);",
          "277:             }",
          "278:         }",
          "279:     }",
          "281:     RedisModule_CloseKey(key);",
          "282:     RedisModule_ReplyWithSimpleString(ctx,\"OK\");",
          "283:     RedisModule_ReplicateVerbatim(ctx);",
          "284:     return REDISMODULE_OK;",
          "285: }",
          "289: int RedisModule_OnLoad(RedisModuleCtx *ctx) {",
          "290:     if (RedisModule_Init(ctx,\"helloworld\",1,REDISMODULE_APIVER_1)",
          "291:         == REDISMODULE_ERR) return REDISMODULE_ERR;",
          "293:     if (RedisModule_CreateCommand(ctx,\"hello.simple\",",
          "294:         HelloSimple_RedisCommand) == REDISMODULE_ERR)",
          "295:         return REDISMODULE_ERR;",
          "297:     if (RedisModule_CreateCommand(ctx,\"hello.push.native\",",
          "298:         HelloPushNative_RedisCommand) == REDISMODULE_ERR)",
          "299:         return REDISMODULE_ERR;",
          "301:     if (RedisModule_CreateCommand(ctx,\"hello.push.call\",",
          "302:         HelloPushCall_RedisCommand) == REDISMODULE_ERR)",
          "303:         return REDISMODULE_ERR;",
          "305:     if (RedisModule_CreateCommand(ctx,\"hello.list.sum.len\",",
          "306:         HelloListSumLen_RedisCommand) == REDISMODULE_ERR)",
          "307:         return REDISMODULE_ERR;",
          "309:     if (RedisModule_CreateCommand(ctx,\"hello.list.splice\",",
          "310:         HelloListSplice_RedisCommand) == REDISMODULE_ERR)",
          "311:         return REDISMODULE_ERR;",
          "313:     if (RedisModule_CreateCommand(ctx,\"hello.list.splice.auto\",",
          "314:         HelloListSpliceAuto_RedisCommand) == REDISMODULE_ERR)",
          "315:         return REDISMODULE_ERR;",
          "317:     if (RedisModule_CreateCommand(ctx,\"hello.rand.array\",",
          "318:         HelloRandArray_RedisCommand) == REDISMODULE_ERR)",
          "319:         return REDISMODULE_ERR;",
          "321:     if (RedisModule_CreateCommand(ctx,\"hello.repl1\",",
          "322:         HelloRepl1_RedisCommand) == REDISMODULE_ERR)",
          "323:         return REDISMODULE_ERR;",
          "325:     if (RedisModule_CreateCommand(ctx,\"hello.repl2\",",
          "326:         HelloRepl2_RedisCommand) == REDISMODULE_ERR)",
          "327:         return REDISMODULE_ERR;",
          "329:     if (RedisModule_CreateCommand(ctx,\"hello.toggle.case\",",
          "330:         HelloToggleCase_RedisCommand) == REDISMODULE_ERR)",
          "331:         return REDISMODULE_ERR;",
          "333:     return REDISMODULE_OK;",
          "334: }",
          "",
          "---------------"
        ],
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: int prepareClientToWrite(client *c) {",
          "164:     if (c->flags & (CLIENT_REPLY_OFF|CLIENT_REPLY_SKIP)) return C_ERR;",
          "",
          "[Removed Lines]",
          "161:     if (c->flags & CLIENT_LUA) return C_OK;",
          "",
          "[Added Lines]",
          "161:     if (c->flags & (CLIENT_LUA|CLIENT_MODULE)) return C_OK;",
          "",
          "---------------"
        ],
        "src/redismodule.h||src/redismodule.h": [
          "File: src/redismodule.h -> src/redismodule.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef REDISMODULE_H",
          "2: #define REDISMODULE_H",
          "4: #include <sys/types.h>",
          "9: #define REDISMODULE_OK 0",
          "10: #define REDISMODULE_ERR 1",
          "13: #define REDISMODULE_APIVER_1 1",
          "16: #define REDISMODULE_READ (1<<0)",
          "17: #define REDISMODULE_WRITE (1<<1)",
          "19: #define REDISMODULE_LIST_HEAD 0",
          "20: #define REDISMODULE_LIST_TAIL 1",
          "23: #define REDISMODULE_KEYTYPE_EMPTY 0",
          "24: #define REDISMODULE_KEYTYPE_STRING 1",
          "25: #define REDISMODULE_KEYTYPE_LIST 2",
          "26: #define REDISMODULE_KEYTYPE_HASH 3",
          "27: #define REDISMODULE_KEYTYPE_SET 4",
          "28: #define REDISMODULE_KEYTYPE_ZSET 5",
          "31: #define REDISMODULE_REPLY_UNKNOWN -1",
          "32: #define REDISMODULE_REPLY_STRING 0",
          "33: #define REDISMODULE_REPLY_ERROR 1",
          "34: #define REDISMODULE_REPLY_INTEGER 2",
          "35: #define REDISMODULE_REPLY_ARRAY 3",
          "36: #define REDISMODULE_REPLY_NULL 4",
          "39: #define REDISMODULE_ERRORMSG_WRONGTYPE \"WRONGTYPE Operation against a key holding the wrong kind of value\"",
          "43: #ifndef REDISMODULE_CORE",
          "46: typedef struct RedisModuleCtx RedisModuleCtx;",
          "47: typedef struct RedisModuleKey RedisModuleKey;",
          "48: typedef struct RedisModuleString RedisModuleString;",
          "49: typedef struct RedisModuleCallReply RedisModuleCallReply;",
          "51: typedef int (*RedisModuleCmdFunc) (RedisModuleCtx *ctx, RedisModuleString **argv, int argc);",
          "53: #define REDISMODULE_GET_API(name) \\",
          "54:     RedisModule_GetApi(\"RedisModule_\" #name, ((void **)&RedisModule_ ## name))",
          "56: #define REDISMODULE_API_FUNC(x) (*x)",
          "58: int REDISMODULE_API_FUNC(RedisModule_GetApi)(const char *, void *);",
          "59: int REDISMODULE_API_FUNC(RedisModule_CreateCommand)(RedisModuleCtx *ctx, const char *name, RedisModuleCmdFunc cmdfunc);",
          "60: int REDISMODULE_API_FUNC(RedisModule_SetModuleAttribs)(RedisModuleCtx *ctx, const char *name, int ver, int apiver);",
          "61: int REDISMODULE_API_FUNC(RedisModule_WrongArity)(RedisModuleCtx *ctx);",
          "62: int REDISMODULE_API_FUNC(RedisModule_ReplyWithLongLong)(RedisModuleCtx *ctx, long long ll);",
          "63: int REDISMODULE_API_FUNC(RedisModule_GetSelectedDb)(RedisModuleCtx *ctx);",
          "64: int REDISMODULE_API_FUNC(RedisModule_SelectDb)(RedisModuleCtx *ctx, int newid);",
          "65: void *REDISMODULE_API_FUNC(RedisModule_OpenKey)(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode);",
          "66: void REDISMODULE_API_FUNC(RedisModule_CloseKey)(RedisModuleKey *kp);",
          "67: int REDISMODULE_API_FUNC(RedisModule_KeyType)(RedisModuleKey *kp);",
          "68: size_t REDISMODULE_API_FUNC(RedisModule_ValueLength)(RedisModuleKey *kp);",
          "69: int REDISMODULE_API_FUNC(RedisModule_ListPush)(RedisModuleKey *kp, int where, RedisModuleString *ele);",
          "70: RedisModuleString *REDISMODULE_API_FUNC(RedisModule_ListPop)(RedisModuleKey *key, int where);",
          "71: RedisModuleCallReply *REDISMODULE_API_FUNC(RedisModule_Call)(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...);",
          "72: const char *REDISMODULE_API_FUNC(RedisModule_CallReplyProto)(RedisModuleCallReply *reply, size_t *len);",
          "73: void REDISMODULE_API_FUNC(RedisModule_FreeCallReply)(RedisModuleCallReply *reply);",
          "74: int REDISMODULE_API_FUNC(RedisModule_CallReplyType)(RedisModuleCallReply *reply);",
          "75: long long REDISMODULE_API_FUNC(RedisModule_CallReplyInteger)(RedisModuleCallReply *reply);",
          "76: size_t REDISMODULE_API_FUNC(RedisModule_CallReplyLength)(RedisModuleCallReply *reply);",
          "77: RedisModuleCallReply *REDISMODULE_API_FUNC(RedisModule_CallReplyArrayElement)(RedisModuleCallReply *reply, size_t idx);",
          "78: RedisModuleString *REDISMODULE_API_FUNC(RedisModule_CreateString)(RedisModuleCtx *ctx, const char *ptr, size_t len);",
          "79: RedisModuleString *REDISMODULE_API_FUNC(RedisModule_CreateStringFromLongLong)(RedisModuleCtx *ctx, long long ll);",
          "80: void REDISMODULE_API_FUNC(RedisModule_FreeString)(RedisModuleCtx *ctx, RedisModuleString *str);",
          "81: const char *REDISMODULE_API_FUNC(RedisModule_StringPtrLen)(RedisModuleString *str, size_t *len);",
          "82: int REDISMODULE_API_FUNC(RedisModule_ReplyWithError)(RedisModuleCtx *ctx, const char *err);",
          "83: int REDISMODULE_API_FUNC(RedisModule_ReplyWithSimpleString)(RedisModuleCtx *ctx, const char *msg);",
          "84: int REDISMODULE_API_FUNC(RedisModule_ReplyWithArray)(RedisModuleCtx *ctx, int len);",
          "85: int REDISMODULE_API_FUNC(RedisModule_ReplyWithStringBuffer)(RedisModuleCtx *ctx, const char *buf, size_t len);",
          "86: int REDISMODULE_API_FUNC(RedisModule_ReplyWithString)(RedisModuleCtx *ctx, RedisModuleString *str);",
          "87: int REDISMODULE_API_FUNC(RedisModule_StringToLongLong)(RedisModuleString *str, long long *ll);",
          "88: void REDISMODULE_API_FUNC(RedisModule_AutoMemory)(RedisModuleCtx *ctx);",
          "89: int REDISMODULE_API_FUNC(RedisModule_Replicate)(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...);",
          "90: int REDISMODULE_API_FUNC(RedisModule_ReplicateVerbatim)(RedisModuleCtx *ctx);",
          "91: const char *REDISMODULE_API_FUNC(RedisModule_CallReplyStringPtr)(RedisModuleCallReply *reply, size_t *len);",
          "92: RedisModuleString *REDISMODULE_API_FUNC(RedisModule_CreateStringFromCallReply)(RedisModuleCallReply *reply);",
          "93: int REDISMODULE_API_FUNC(RedisModule_DeleteKey)(RedisModuleKey *key);",
          "94: int REDISMODULE_API_FUNC(RedisModule_StringSet)(RedisModuleKey *key, RedisModuleString *str);",
          "95: char *REDISMODULE_API_FUNC(RedisModule_StringDMA)(RedisModuleKey *key, size_t *len, int mode);",
          "96: int REDISMODULE_API_FUNC(RedisModule_StringTruncate)(RedisModuleKey *key, size_t newlen);",
          "99: static int RedisModule_Init(RedisModuleCtx *ctx, const char *name, int ver, int apiver) {",
          "100:     void *getapifuncptr = ((void**)ctx)[0];",
          "101:     RedisModule_GetApi = (int (*)(const char *, void *)) getapifuncptr;",
          "102:     REDISMODULE_GET_API(CreateCommand);",
          "103:     REDISMODULE_GET_API(SetModuleAttribs);",
          "104:     REDISMODULE_GET_API(WrongArity);",
          "105:     REDISMODULE_GET_API(ReplyWithLongLong);",
          "106:     REDISMODULE_GET_API(ReplyWithError);",
          "107:     REDISMODULE_GET_API(ReplyWithSimpleString);",
          "108:     REDISMODULE_GET_API(ReplyWithArray);",
          "109:     REDISMODULE_GET_API(ReplyWithStringBuffer);",
          "110:     REDISMODULE_GET_API(ReplyWithString);",
          "111:     REDISMODULE_GET_API(GetSelectedDb);",
          "112:     REDISMODULE_GET_API(SelectDb);",
          "113:     REDISMODULE_GET_API(OpenKey);",
          "114:     REDISMODULE_GET_API(CloseKey);",
          "115:     REDISMODULE_GET_API(KeyType);",
          "116:     REDISMODULE_GET_API(ValueLength);",
          "117:     REDISMODULE_GET_API(ListPush);",
          "118:     REDISMODULE_GET_API(ListPop);",
          "119:     REDISMODULE_GET_API(StringToLongLong);",
          "120:     REDISMODULE_GET_API(Call);",
          "121:     REDISMODULE_GET_API(CallReplyProto);",
          "122:     REDISMODULE_GET_API(FreeCallReply);",
          "123:     REDISMODULE_GET_API(CallReplyInteger);",
          "124:     REDISMODULE_GET_API(CallReplyType);",
          "125:     REDISMODULE_GET_API(CallReplyLength);",
          "126:     REDISMODULE_GET_API(CallReplyArrayElement);",
          "127:     REDISMODULE_GET_API(CallReplyStringPtr);",
          "128:     REDISMODULE_GET_API(CreateStringFromCallReply);",
          "129:     REDISMODULE_GET_API(CreateString);",
          "130:     REDISMODULE_GET_API(CreateStringFromLongLong);",
          "131:     REDISMODULE_GET_API(FreeString);",
          "132:     REDISMODULE_GET_API(StringPtrLen);",
          "133:     REDISMODULE_GET_API(AutoMemory);",
          "134:     REDISMODULE_GET_API(Replicate);",
          "135:     REDISMODULE_GET_API(ReplicateVerbatim);",
          "136:     REDISMODULE_GET_API(DeleteKey);",
          "137:     REDISMODULE_GET_API(StringSet);",
          "138:     REDISMODULE_GET_API(StringDMA);",
          "139:     REDISMODULE_GET_API(StringTruncate);",
          "141:     RedisModule_SetModuleAttribs(ctx,name,ver,apiver);",
          "142:     return REDISMODULE_OK;",
          "143: }",
          "145: #else",
          "149: #define RedisModuleString robj",
          "",
          "---------------"
        ],
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: struct redisCommand redisCommandTable[] = {",
          "126:     {\"get\",getCommand,2,\"rF\",0,NULL,1,1,1,0,0},",
          "127:     {\"set\",setCommand,-3,\"wm\",0,NULL,1,1,1,0,0},",
          "128:     {\"setnx\",setnxCommand,3,\"wmF\",0,NULL,1,1,1,0,0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:     {\"module\",moduleCommand,-2,\"as\",0,NULL,1,1,1,0,0},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "649: };",
          "652: dictType migrateCacheDictType = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: dictType modulesDictType = {",
          "662: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2240:     c->flags &= ~(CLIENT_FORCE_AOF|CLIENT_FORCE_REPL|CLIENT_PREVENT_PROP);",
          "2241:     redisOpArrayInit(&server.also_propagate);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2254:     redisOpArray prev_also_propagate = server.also_propagate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2333:         }",
          "2334:         redisOpArrayFree(&server.also_propagate);",
          "2335:     }",
          "2336:     server.stat_numcommands++;",
          "2337: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2350:     server.also_propagate = prev_also_propagate;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3993:     dictSetHashFunctionSeed(tv.tv_sec^tv.tv_usec^getpid());",
          "3994:     server.sentinel_mode = checkForSentinelMode(argc,argv);",
          "3995:     initServerConfig();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4011:     moduleInitModulesSystem();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4099:     #ifdef __linux__",
          "4100:         linuxMemoryWarnings();",
          "4101:     #endif",
          "4102:         loadDataFromDisk();",
          "4103:         if (server.cluster_enabled) {",
          "4104:             if (verifyClusterConfigWithData() == C_ERR) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4118:         moduleLoadFromQueue();",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085: extern dictType hashDictType;",
          "1086: extern dictType replScriptCacheDictType;",
          "1087: extern dictType keyptrDictType;",
          "1094: long long ustime(void);",
          "1095: long long mstime(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091: extern dictType modulesDictType;",
          "1098: void moduleInitModulesSystem(void);",
          "1099: int moduleLoad(const char *path);",
          "1100: void moduleLoadFromQueue(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1686: void pfmergeCommand(client *c);",
          "1687: void pfdebugCommand(client *c);",
          "1688: void latencyCommand(client *c);",
          "1690: #if defined(__GNUC__)",
          "1691: void *calloc(size_t count, size_t size) __attribute__ ((deprecated));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1698: void moduleCommand(client *c);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:     static const char digits[201] =",
          "279:         \"0001020304050607080910111213141516171819\"",
          "280:         \"2021222324252627282930313233343536373839\"",
          "",
          "[Removed Lines]",
          "277: int ll2string(char* dst, size_t dstlen, long long svalue) {",
          "",
          "[Added Lines]",
          "277: int ll2string(char *dst, size_t dstlen, long long svalue) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec9bbe96bf47ae1f104c51cc6078eb72ca43cef0",
      "candidate_info": {
        "commit_hash": "ec9bbe96bf47ae1f104c51cc6078eb72ca43cef0",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/ec9bbe96bf47ae1f104c51cc6078eb72ca43cef0",
        "files": [
          "src/server.c",
          "src/server.h",
          "src/t_stream.c"
        ],
        "message": "Streams: XLEN command.",
        "before_after_code_files": [
          "src/server.c||src/server.c",
          "src/server.h||src/server.h",
          "src/t_stream.c||src/t_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ],
          "candidate": [
            "src/server.c||src/server.c",
            "src/server.h||src/server.h"
          ]
        }
      },
      "candidate_diff": {
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     {\"pfdebug\",pfdebugCommand,-3,\"w\",0,NULL,0,0,0,0,0},",
          "305:     {\"xadd\",xaddCommand,-4,\"wmF\",0,NULL,1,1,1,0,0},",
          "306:     {\"xrange\",xrangeCommand,-4,\"r\",0,NULL,1,1,1,0,0},",
          "307:     {\"post\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
          "308:     {\"host:\",securityWarningCommand,-1,\"lt\",0,NULL,0,0,0,0,0},",
          "309:     {\"latency\",latencyCommand,-2,\"aslt\",0,NULL,0,0,0,0,0}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:     {\"xlen\",xlenCommand,2,\"rF\",0,NULL,1,1,1,0,0},",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2001: void securityWarningCommand(client *c);",
          "2002: void xaddCommand(client *c);",
          "2003: void xrangeCommand(client *c);",
          "2005: #if defined(__GNUC__)",
          "2006: void *calloc(size_t count, size_t size) __attribute__ ((deprecated));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2004: void xlenCommand(client *c);",
          "",
          "---------------"
        ],
        "src/t_stream.c||src/t_stream.c": [
          "File: src/t_stream.c -> src/t_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:     s = o->ptr;",
          "379:     streamReplyWithRange(c,s,&startid,&endid,count);",
          "380: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: void xlenCommand(client *c) {",
          "384:     robj *o;",
          "385:     if ((o = lookupKeyReadOrReply(c,c->argv[1],shared.czero)) == NULL",
          "386:         || checkType(c,o,OBJ_STREAM)) return;",
          "387:     stream *s = o->ptr;",
          "388:     addReplyLongLong(c,s->length);",
          "389: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}