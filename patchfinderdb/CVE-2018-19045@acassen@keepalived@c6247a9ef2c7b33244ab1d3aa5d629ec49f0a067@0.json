{
  "cve_id": "CVE-2018-19045",
  "cve_desc": "keepalived 2.0.8 used mode 0666 when creating new temporary files upon a call to PrintData or PrintStats, potentially leaking sensitive information.",
  "repo": "acassen/keepalived",
  "patch_hash": "c6247a9ef2c7b33244ab1d3aa5d629ec49f0a067",
  "patch_info": {
    "commit_hash": "c6247a9ef2c7b33244ab1d3aa5d629ec49f0a067",
    "repo": "acassen/keepalived",
    "commit_url": "https://github.com/acassen/keepalived/commit/c6247a9ef2c7b33244ab1d3aa5d629ec49f0a067",
    "files": [
      "doc/keepalived.conf.SYNOPSIS",
      "doc/man/man5/keepalived.conf.5",
      "doc/man/man8/keepalived.8",
      "keepalived/core/global_data.c",
      "keepalived/core/global_parser.c",
      "keepalived/core/main.c",
      "keepalived/include/global_data.h",
      "keepalived/include/main.h"
    ],
    "message": "Add command line and configuration option to set umask\n\nIssue #1048 identified that files created by keepalived are created\nwith mode 0666. This commit changes the default to 0644, and also\nallows the umask to be specified in the configuration or as a command\nline option.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
    "before_after_code_files": [
      "keepalived/core/global_data.c||keepalived/core/global_data.c",
      "keepalived/core/global_parser.c||keepalived/core/global_parser.c",
      "keepalived/core/main.c||keepalived/core/main.c",
      "keepalived/include/global_data.h||keepalived/include/global_data.h",
      "keepalived/include/main.h||keepalived/include/main.h"
    ]
  },
  "patch_diff": {
    "keepalived/core/global_data.c||keepalived/core/global_data.c": [
      "File: keepalived/core/global_data.c -> keepalived/core/global_data.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "571:  if (buf[0])",
      "572:   conf_write(fp, \"%s\", buf);",
      "573:  conf_write(fp, \" rx_bufs_multiples = %u\", global_data->vrrp_rx_bufs_multiples);",
      "574: #endif",
      "575: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "574:  conf_write(fp, \" umask = 0%o\", global_data->umask);",
      "",
      "---------------"
    ],
    "keepalived/core/global_parser.c||keepalived/core/global_parser.c": [
      "File: keepalived/core/global_parser.c -> keepalived/core/global_parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include <sched.h>",
      "36: #endif",
      "37: #include <strings.h>",
      "39: #ifdef _WITH_SNMP_",
      "40: #include \"snmp.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: #include <sys/types.h>",
      "39: #include <sys/stat.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1341: }",
      "1342: #endif",
      "1344: void",
      "1345: init_global_keywords(bool global_active)",
      "1346: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1346: static void",
      "1347: umask_handler(vector_t *strvec)",
      "1348: {",
      "1349:  long umask_long;",
      "1350:  mode_t umask_val = 0;",
      "1351:  char *mask = strvec_slot(strvec, 1);",
      "1352:  char *endptr;",
      "1353:  unsigned i;",
      "1354:  char *p;",
      "1356:  if (umask_cmdline) {",
      "1357:   log_message(LOG_INFO, \"umask command line option specified, ignoring config option\");",
      "1358:   return;",
      "1359:  }",
      "1361:  if (isdigit(mask[0])) {",
      "1362:   if (vector_size(strvec) != 2) {",
      "1363:    report_config_error(CONFIG_GENERAL_ERROR, \"%s parameter(s) to umask option\", vector_size(strvec) == 1 ? \"Missing\" : \"Extra\");",
      "1364:    return;",
      "1365:   }",
      "1366:   umask_long = strtol(mask, &endptr, 0);",
      "1367:   if (*endptr || umask_long < 0 || umask_long & ~0777L) {",
      "1368:    report_config_error(CONFIG_GENERAL_ERROR, \"invalid umask value %s\", mask);",
      "1369:    return;",
      "1370:   }",
      "1371:   umask_val = umask_long & 0777;",
      "1372:  }",
      "1373:  else {",
      "1374:   bool need_or = false;",
      "1375:   for (i = 1; i < vector_size(strvec); i++) {",
      "1376:    for (p = strvec_slot(strvec, i); *p; ) {",
      "1377:     if (need_or) {",
      "1378:      if (*p == '|') {",
      "1379:       need_or = false;",
      "1380:       p++;",
      "1381:       continue;",
      "1382:      }",
      "1384:      report_config_error(CONFIG_GENERAL_ERROR, \"Invalid umask syntax %s\", FMT_STR_VSLOT(strvec, i));",
      "1385:      return;",
      "1386:     }",
      "1388:     if      (!strncmp(p, \"IRUSR\", 5)) umask_val |= S_IRUSR;",
      "1389:     else if (!strncmp(p, \"IWUSR\", 5)) umask_val |= S_IWUSR;",
      "1390:     else if (!strncmp(p, \"IXUSR\", 5)) umask_val |= S_IXUSR;",
      "1391:     else if (!strncmp(p, \"IRGRP\", 5)) umask_val |= S_IRGRP;",
      "1392:     else if (!strncmp(p, \"IWGRP\", 5)) umask_val |= S_IWGRP;",
      "1393:     else if (!strncmp(p, \"IXGRP\", 5)) umask_val |= S_IXGRP;",
      "1394:     else if (!strncmp(p, \"IROTH\", 5)) umask_val |= S_IROTH;",
      "1395:     else if (!strncmp(p, \"IWOTH\", 5)) umask_val |= S_IWOTH;",
      "1396:     else if (!strncmp(p, \"IXOTH\", 5)) umask_val |= S_IXOTH;",
      "1397:     else {",
      "1398:      report_config_error(CONFIG_GENERAL_ERROR, \"Unknown umask bit %s\", p);",
      "1399:      return;",
      "1400:     }",
      "1402:     p += 5;",
      "1403:     need_or = true;",
      "1404:    }",
      "1405:   }",
      "1406:   if (!need_or) {",
      "1407:    report_config_error(CONFIG_GENERAL_ERROR, \"umask missing bit value\");",
      "1408:    return;",
      "1409:   }",
      "1410:  }",
      "1412:  global_data->umask = umask_val;",
      "1413:  umask(umask_val);",
      "1414: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1483:  install_keyword(\"vrrp_rx_bufs_policy\", &vrrp_rx_bufs_policy_handler);",
      "1484:  install_keyword(\"vrrp_rx_bufs_multiplier\", &vrrp_rx_bufs_multiplier_handler);",
      "1485: #endif",
      "1486: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1558:  install_keyword(\"umask\", &umask_handler);",
      "",
      "---------------"
    ],
    "keepalived/core/main.c||keepalived/core/main.c": [
      "File: keepalived/core/main.c -> keepalived/core/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #include <signal.h>",
      "34: #include <fcntl.h>",
      "35: #include <sys/wait.h>",
      "36: #include <sys/stat.h>",
      "37: #include <unistd.h>",
      "38: #include <getopt.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: #include <sys/types.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155: };",
      "156: #define LOG_FACILITY_MAX ((sizeof(LOG_FACILITY) / sizeof(LOG_FACILITY[0])) - 1)",
      "159: static bool set_core_dump_pattern = false;",
      "160: static bool create_core_dump = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "160: bool umask_cmdline;",
      "161: static mode_t umask_val = S_IXUSR | S_IWGRP | S_IXGRP | S_IWOTH | S_IXOTH;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "866:  }",
      "867: }",
      "869: void",
      "870: initialise_debug_options(void)",
      "871: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "874: static mode_t",
      "875: set_umask(const char *optarg)",
      "876: {",
      "877:  long umask_long;",
      "878:  mode_t umask_val;",
      "879:  char *endptr;",
      "881:  umask_long = strtoll(optarg, &endptr, 0);",
      "883:  if (*endptr || umask_long < 0 || umask_long & ~0777L) {",
      "884:   fprintf(stderr, \"Invalid --umask option %s\", optarg);",
      "885:   return;",
      "886:  }",
      "888:  umask_val = umask_long & 0777;",
      "889:  umask(umask_val);",
      "891:  umask_cmdline = true;",
      "893:  return umask_val;",
      "894: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1090:  fprintf(stderr, \"  -g, --log-file=FILE          Also log to FILE (default /tmp/keepalived.log)\\n\");",
      "1091:  fprintf(stderr, \"      --flush-log-file         Flush log file on write\\n\");",
      "1092:  fprintf(stderr, \"  -G, --no-syslog              Don't log via syslog\\n\");",
      "1093: #ifdef _WITH_VRRP_",
      "1094:  fprintf(stderr, \"  -X, --release-vips           Drop VIP on transition from signal.\\n\");",
      "1095:  fprintf(stderr, \"  -V, --dont-release-vrrp      Don't remove VRRP VIPs and VROUTEs on daemon stop\\n\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1120:  fprintf(stderr, \"  -u, --umask=MASK             umask for file creation (in numeric form)\\n\");",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1183:  int curind;",
      "1184:  bool bad_option = false;",
      "1185:  unsigned facility;",
      "1187:  struct option long_options[] = {",
      "1188:   {\"use-file\",  required_argument, NULL, 'f'},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1214:  mode_t new_umask_val;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1200:   {\"log-file\",  optional_argument, NULL, 'g'},",
      "1201:   {\"flush-log-file\", no_argument,  NULL,  2 },",
      "1202:   {\"no-syslog\",  no_argument,  NULL, 'G'},",
      "1203: #ifdef _WITH_VRRP_",
      "1204:   {\"release-vips\", no_argument,  NULL, 'X'},",
      "1205:   {\"dont-release-vrrp\", no_argument,  NULL, 'V'},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1232:   {\"umask\",  required_argument, NULL, 'u'},",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1254:  curind = optind;",
      "1256: #if defined _WITH_VRRP_ && defined _WITH_LVS_",
      "1257:          \"PC\"",
      "1258: #endif",
      "",
      "[Removed Lines]",
      "1255:  while (longindex = -1, (c = getopt_long(argc, argv, \":vhlndDRS:f:p:i:mM::g::Gt::\"",
      "",
      "[Added Lines]",
      "1285:  while (longindex = -1, (c = getopt_long(argc, argv, \":vhlndu:DRS:f:p:i:mM::g::Gt::\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1358:    __set_bit(NO_SYSLOG_BIT, &debug);",
      "1359:    reopen_log = true;",
      "1360:    break;",
      "1361:   case 't':",
      "1362:    __set_bit(CONFIG_TEST_BIT, &debug);",
      "1363:    __set_bit(DONT_RESPAWN_BIT, &debug);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1391:   case 'u':",
      "1392:    new_umask_val = set_umask(optarg);",
      "1393:    if (umask_cmdline)",
      "1394:     umask_val = new_umask_val;",
      "1395:    break;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1582:  __set_bit(DAEMON_BFD, &daemon_mode);",
      "1583: #endif",
      "1586:  openlog(PACKAGE_NAME, LOG_PID, log_facility);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1621:  umask(022);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1678:  }",
      "1680:  global_data = alloc_global_data();",
      "1682:  read_config_file();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1719:  global_data->umask = umask_val;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1809:   exit(0);",
      "1810:  }",
      "1815: #ifdef _MEM_CHECK_",
      "1816:  enable_mem_log_termination();",
      "1817: #endif",
      "",
      "[Removed Lines]",
      "1813:  umask(0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "keepalived/include/global_data.h||keepalived/include/global_data.h": [
      "File: keepalived/include/global_data.h -> keepalived/include/global_data.h"
    ],
    "keepalived/include/main.h||keepalived/include/main.h": [
      "File: keepalived/include/main.h -> keepalived/include/main.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "98: extern unsigned child_wait_time;",
      "100: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: extern bool umask_cmdline;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
      "candidate_info": {
        "commit_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/04f2d32871bb3b11d7dc024039952f2fe2750306",
        "files": [
          "keepalived/core/main.c",
          "keepalived/core/pidfile.c",
          "keepalived/core/smtp.c",
          "keepalived/vrrp/vrrp_dbus.c",
          "keepalived/vrrp/vrrp_json.c",
          "keepalived/vrrp/vrrp_parser.c",
          "keepalived/vrrp/vrrp_print.c",
          "keepalived/vrrp/vrrp_scheduler.c",
          "lib/logger.c",
          "lib/memory.c",
          "lib/notify.c",
          "lib/parser.c",
          "lib/utils.c",
          "lib/utils.h"
        ],
        "message": "When opening files for write, ensure they aren't symbolic links\n\nIssue #1048 identified that if, for example, a non privileged user\ncreated a symbolic link from /etc/keepalvied.data to /etc/passwd,\nwriting to /etc/keepalived.data (which could be invoked via DBus)\nwould cause /etc/passwd to be overwritten.\n\nThis commit stops keepalived writing to pathnames where the ultimate\ncomponent is a symbolic link, by setting O_NOFOLLOW whenever opening\na file for writing.\n\nThis might break some setups, where, for example, /etc/keepalived.data\nwas a symbolic link to /home/fred/keepalived.data. If this was the case,\ninstead create a symbolic link from /home/fred/keepalived.data to\n/tmp/keepalived.data, so that the file is still accessible via\n/home/fred/keepalived.data.\n\nThere doesn't appear to be a way around this backward incompatibility,\nsince even checking if the pathname is a symbolic link prior to opening\nfor writing would create a race condition.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/core/main.c||keepalived/core/main.c",
          "keepalived/core/pidfile.c||keepalived/core/pidfile.c",
          "keepalived/core/smtp.c||keepalived/core/smtp.c",
          "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c",
          "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c",
          "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c",
          "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c",
          "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
          "lib/logger.c||lib/logger.c",
          "lib/memory.c||lib/memory.c",
          "lib/notify.c||lib/notify.c",
          "lib/parser.c||lib/parser.c",
          "lib/utils.c||lib/utils.c",
          "lib/utils.h||lib/utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/acassen/keepalived/pull/1051"
        ],
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:    __set_bit(DONT_FORK_BIT, &debug);",
          "1400:    __set_bit(NO_SYSLOG_BIT, &debug);",
          "1401:    if (optarg && optarg[0]) {",
          "1403:     if (fd == -1) {",
          "1404:      fprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);",
          "1405:      exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "[Added Lines]",
          "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "---------------"
        ],
        "keepalived/core/pidfile.c||keepalived/core/pidfile.c": [
          "File: keepalived/core/pidfile.c -> keepalived/core/pidfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: pidfile_write(const char *pid_file, int pid)",
          "61: {",
          "62:  FILE *pidfile = NULL;",
          "65:  if (pidfd != -1) pidfile = fdopen(pidfd, \"w\");",
          "",
          "[Removed Lines]",
          "63:  int pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "[Added Lines]",
          "63:  int pidfd = open(pid_file, O_NOFOLLOW | O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "---------------"
        ],
        "keepalived/core/smtp.c||keepalived/core/smtp.c": [
          "File: keepalived/core/smtp.c -> keepalived/core/smtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570: static void",
          "571: smtp_log_to_file(smtp_t *smtp)",
          "572: {",
          "574:  time_t now;",
          "575:  struct tm tm;",
          "576:  char time_buf[25];",
          "",
          "[Removed Lines]",
          "573:  FILE *fp = fopen(\"/tmp/smtp-alert.log\", \"a\");",
          "",
          "[Added Lines]",
          "573:  FILE *fp = fopen_safe(\"/tmp/smtp-alert.log\", \"a\");",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c": [
          "File: keepalived/vrrp/vrrp_dbus.c -> keepalived/vrrp/vrrp_dbus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:  size_t length;",
          "595:  gchar *ret = NULL;",
          "598:  if (f) {",
          "599:   fseek(f, 0, SEEK_END);",
          "600:   length = (size_t)ftell(f);",
          "",
          "[Removed Lines]",
          "597:  f = fopen(filepath, \"rb\");",
          "",
          "[Added Lines]",
          "597:  f = fopen(filepath, \"r\");",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c": [
          "File: keepalived/vrrp/vrrp_json.c -> keepalived/vrrp/vrrp_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"vrrp_iprule.h\"",
          "38: #include \"logger.h\"",
          "39: #include \"timer.h\"",
          "41: static inline double",
          "42: timeval_to_double(const timeval_t *t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include \"utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:  if (LIST_ISEMPTY(vrrp_data->vrrp))",
          "56:   return;",
          "59:  if (!file) {",
          "60:   log_message(LOG_INFO, \"Can't open /tmp/keepalived.json (%d: %s)\",",
          "61:    errno, strerror(errno));",
          "",
          "[Removed Lines]",
          "58:  file = fopen (\"/tmp/keepalived.json\",\"w\");",
          "",
          "[Added Lines]",
          "59:  file = fopen_safe(\"/tmp/keepalived.json\", \"w\");",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
          "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1206:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "1209:    fprintf(tf, \"%d\\n\", track_file_init_value);",
          "1210:    fclose(tf);",
          "1211:   }",
          "",
          "[Removed Lines]",
          "1208:   if ((tf = fopen(tfile->file_path, \"w\"))) {",
          "",
          "[Added Lines]",
          "1208:   if ((tf = fopen_safe(tfile->file_path, \"w\"))) {",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c": [
          "File: keepalived/vrrp/vrrp_print.c -> keepalived/vrrp/vrrp_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"vrrp.h\"",
          "33: #include \"vrrp_data.h\"",
          "34: #include \"vrrp_print.h\"",
          "36: static const char *dump_file = \"/tmp/keepalived.data\";",
          "37: static const char *stats_file = \"/tmp/keepalived.stats\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: void",
          "40: vrrp_print_data(void)",
          "41: {",
          "44:  if (!file) {",
          "45:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
          "",
          "[Removed Lines]",
          "42:  FILE *file = fopen (dump_file, \"w\");",
          "",
          "[Added Lines]",
          "43:  FILE *file = fopen_safe(dump_file, \"w\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: void",
          "56: vrrp_print_stats(void)",
          "57: {",
          "61:  if (!file) {",
          "62:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
          "",
          "[Removed Lines]",
          "58:  FILE *file;",
          "59:  file = fopen (stats_file, \"w\");",
          "",
          "[Added Lines]",
          "59:  FILE *file = fopen_safe(stats_file, \"w\");",
          "60:  element e;",
          "61:  vrrp_t *vrrp;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:   return;",
          "65:  }",
          "73:   fprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);",
          "74:   fprintf(file, \"  Advertisements:\\n\");",
          "75:   fprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->advert_rcvd);",
          "76:   fprintf(file, \"    Sent: %d\\n\", vrrp->stats->advert_sent);",
          "77:   fprintf(file, \"  Became master: %d\\n\", vrrp->stats->become_master);",
          "80:   fprintf(file, \"  Packet Errors:\\n\");",
          "81:   fprintf(file, \"    Length: %\" PRIu64 \"\\n\", vrrp->stats->packet_len_err);",
          "82:   fprintf(file, \"    TTL: %\" PRIu64 \"\\n\", vrrp->stats->ip_ttl_err);",
          "",
          "[Removed Lines]",
          "67:  list l = vrrp_data->vrrp;",
          "68:  element e;",
          "69:  vrrp_t *vrrp;",
          "71:  for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {",
          "72:   vrrp = ELEMENT_DATA(e);",
          "78:   fprintf(file, \"  Released master: %d\\n\",",
          "79:    vrrp->stats->release_master);",
          "",
          "[Added Lines]",
          "70:  LIST_FOREACH(vrrp_data->vrrp, vrrp, e) {",
          "76:   fprintf(file, \"  Released master: %d\\n\", vrrp->stats->release_master);",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c": [
          "File: keepalived/vrrp/vrrp_scheduler.c -> keepalived/vrrp/vrrp_scheduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:      NULL,",
          "1135: #endif",
          "1136:      global_data->instance_name);",
          "1138:  FREE(file_name);",
          "1140:  set_time_now();",
          "",
          "[Removed Lines]",
          "1137:  fp = fopen(file_name, \"a\");",
          "",
          "[Added Lines]",
          "1137:  fp = fopen_safe(file_name, \"a\");",
          "",
          "---------------"
        ],
        "lib/logger.c||lib/logger.c": [
          "File: lib/logger.c -> lib/logger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  file_name = make_file_name(name, prog, namespace, instance);",
          "82:  if (log_file) {",
          "83:   int n = fileno(log_file);",
          "84:   fcntl(n, F_SETFD, FD_CLOEXEC | fcntl(n, F_GETFD));",
          "",
          "[Removed Lines]",
          "81:  log_file = fopen(file_name, \"a\");",
          "",
          "[Added Lines]",
          "81:  log_file = fopen_safe(file_name, \"a\");",
          "",
          "---------------"
        ],
        "lib/memory.c||lib/memory.c": [
          "File: lib/memory.c -> lib/memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:  }",
          "623:  snprintf(log_name, log_name_len, \"/tmp/%s_mem.%d.log\", prog_name, getpid());",
          "625:  if (log_op == NULL) {",
          "626:   log_message(LOG_INFO, \"Unable to open %s for appending\", log_name);",
          "627:   log_op = stderr;",
          "",
          "[Removed Lines]",
          "624:  log_op = fopen(log_name, \"a\");",
          "",
          "[Added Lines]",
          "624:  log_op = fopen_safe(log_name, \"a\");",
          "",
          "---------------"
        ],
        "lib/notify.c||lib/notify.c": [
          "File: lib/notify.c -> lib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     notify_fifo_exec(master, script_exit, fifo, fifo->script);",
          "240:     log_message(LOG_INFO, \"Unable to open %snotify fifo %s - errno %d\", type, fifo->name, errno);",
          "241:     if (fifo->created_fifo) {",
          "242:      unlink(fifo->name);",
          "",
          "[Removed Lines]",
          "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK)) == -1) {",
          "",
          "[Added Lines]",
          "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK | O_NOFOLLOW)) == -1) {",
          "",
          "---------------"
        ],
        "lib/parser.c||lib/parser.c": [
          "File: lib/parser.c -> lib/parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "455: {",
          "456:  unsigned int i;",
          "457:  keyword_t *keyword_vec;",
          "460:  if (!level) {",
          "461:   snprintf(file_name, sizeof(file_name), \"/tmp/keywords.%d\", getpid());",
          "463:   if (!fp)",
          "464:    return;",
          "465:  }",
          "",
          "[Removed Lines]",
          "458:  char file_name[21];",
          "462:   fp = fopen(file_name, \"w\");",
          "",
          "[Added Lines]",
          "458:  char file_name[22];",
          "462:   fp = fopen_safe(file_name, \"w\");",
          "",
          "---------------"
        ],
        "lib/utils.c||lib/utils.c": [
          "File: lib/utils.c -> lib/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  nptrs = backtrace(buffer, 100);",
          "125:  if (file_name) {",
          "127:   if (str)",
          "128:    dprintf(fd, \"%s\\n\", str);",
          "129:   backtrace_symbols_fd(buffer, nptrs, fd);",
          "",
          "[Removed Lines]",
          "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);",
          "",
          "[Added Lines]",
          "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "788:  return !strcmp(str1, str2);",
          "789: }",
          "791: void",
          "792: set_std_fd(bool force)",
          "793: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "793: FILE *fopen_safe(const char *path, const char *mode)",
          "794: {",
          "795:  int fd;",
          "796:  FILE *file;",
          "797:  int flags = O_NOFOLLOW | O_CREAT;",
          "799:  if (mode[0] == 'r')",
          "800:   return fopen(path, mode);",
          "802:  if (mode[0] != 'a' && mode[0] != 'w')",
          "803:   return NULL;",
          "805:  if (mode[1] &&",
          "806:      (mode[1] != '+' || mode[2]))",
          "807:   return NULL;",
          "809:  if (mode[0] == 'w')",
          "810:   flags |= O_TRUNC;",
          "811:  else",
          "812:   flags |= O_APPEND;",
          "814:  if (mode[1])",
          "815:   flags |= O_RDWR;",
          "816:  else",
          "817:   flags |= O_WRONLY;",
          "819:  fd = open(path, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
          "820:  if (fd == -1)",
          "821:   return NULL;",
          "823:  file = fdopen (fd, \"w\");",
          "824:  if (!file) {",
          "825:   close(fd);",
          "826:   return NULL;",
          "827:  }",
          "829:  return file;",
          "830: }",
          "",
          "---------------"
        ],
        "lib/utils.h||lib/utils.h": [
          "File: lib/utils.h -> lib/utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: extern int inet_sockaddrcmp(const struct sockaddr_storage *, const struct sockaddr_storage *);",
          "183: extern char *get_local_name(void);",
          "184: extern bool string_equal(const char *, const char *);",
          "185: extern void set_std_fd(bool);",
          "186: extern void close_std_fd(void);",
          "187: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: extern FILE *fopen_safe(const char *, const char *);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac8e2ef053de273ce7a0cf0cb611e599dca4b298",
      "candidate_info": {
        "commit_hash": "ac8e2ef053de273ce7a0cf0cb611e599dca4b298",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/ac8e2ef053de273ce7a0cf0cb611e599dca4b298",
        "files": [
          "lib/memory.c",
          "lib/utils.c"
        ],
        "message": "When opening files for write, ensure files can only be read by root\n\nIssue #1048 referred to CVE-2018-19046 regarding files used for\ndebugging purposes could potentially be read by non root users.\n\nThis commit ensures that such log files cannot be opened by non root\nusers.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "lib/memory.c||lib/memory.c",
          "lib/utils.c||lib/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/memory.c||lib/memory.c": [
          "File: lib/memory.c -> lib/memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:  }",
          "624:  snprintf(log_name, log_name_len, \"/tmp/%s_mem.%d.log\", prog_name, getpid());",
          "626:  if (log_op == NULL) {",
          "627:   log_message(LOG_INFO, \"Unable to open %s for appending\", log_name);",
          "628:   log_op = stderr;",
          "",
          "[Removed Lines]",
          "625:  log_op = fopen_safe(log_name, \"a\");",
          "",
          "[Added Lines]",
          "625:  log_op = fopen_safe(log_name, \"w\");",
          "",
          "---------------"
        ],
        "lib/utils.c||lib/utils.c": [
          "File: lib/utils.c -> lib/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <netdb.h>",
          "31: #include <arpa/inet.h>",
          "32: #include <sys/utsname.h>",
          "33: #include <stdint.h>",
          "34: #include <errno.h>",
          "35: #ifdef _WITH_PERF_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: #include \"signals.h\"",
          "59: #include \"bitops.h\"",
          "60: #include \"parser.h\"",
          "62: #include \"logger.h\"",
          "64: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_",
          "65: #include \"process.h\"",
          "66: #endif",
          "",
          "[Removed Lines]",
          "61: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_ || defined _WITH_STACKTRACE_ || defined _WITH_PERF_",
          "63: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:  int fd;",
          "796:  FILE *file;",
          "797:  int flags = O_NOFOLLOW | O_CREAT;",
          "799:  if (mode[0] == 'r')",
          "800:   return fopen(path, mode);",
          "807:   return NULL;",
          "809:  if (mode[0] == 'w')",
          "810:   flags |= O_TRUNC;",
          "",
          "[Removed Lines]",
          "802:  if (mode[0] != 'a' && mode[0] != 'w')",
          "803:   return NULL;",
          "805:  if (mode[1] &&",
          "806:      (mode[1] != '+' || mode[2]))",
          "",
          "[Added Lines]",
          "797:  int sav_errno;",
          "802:  if ((mode[0] != 'a' && mode[0] != 'w') ||",
          "803:      (mode[1] &&",
          "804:       (mode[1] != '+' || mode[2]))) {",
          "805:   errno = EINVAL;",
          "807:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "820:  if (fd == -1)",
          "821:   return NULL;",
          "823:  file = fdopen (fd, \"w\");",
          "824:  if (!file) {",
          "825:   close(fd);",
          "826:   return NULL;",
          "827:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "824:  if (fchown(fd, 0, 0)) {",
          "825:   sav_errno = errno;",
          "826:   log_message(LOG_INFO, \"Unable to change file ownership of %s- errno %d (%m)\", path, errno);",
          "827:   close(fd);",
          "828:   errno = sav_errno;",
          "829:   return NULL;",
          "830:  }",
          "833:  if (fchmod(fd, S_IRUSR | S_IWUSR)) {",
          "834:   sav_errno = errno;",
          "835:   log_message(LOG_INFO, \"Unable to change file permission of %s - errno %d (%m)\", path, errno);",
          "836:   close(fd);",
          "837:   errno = sav_errno;",
          "838:   return NULL;",
          "839:  }",
          "843:   sav_errno = errno;",
          "844:   log_message(LOG_INFO, \"fdopen(\\\"%s\\\") failed - errno %d (%m)\", path, errno);",
          "846:   errno = sav_errno;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bff24302e243ff245283c4c26f22efc36ccbf834",
      "candidate_info": {
        "commit_hash": "bff24302e243ff245283c4c26f22efc36ccbf834",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/bff24302e243ff245283c4c26f22efc36ccbf834",
        "files": [
          "keepalived/bfd/bfd_parser.c",
          "keepalived/check/check_api.c",
          "keepalived/check/check_bfd.c",
          "keepalived/check/check_data.c",
          "keepalived/check/check_dns.c",
          "keepalived/check/check_http.c",
          "keepalived/check/check_misc.c",
          "keepalived/check/check_parser.c",
          "keepalived/core/global_parser.c",
          "keepalived/include/vrrp_ip_rule_route_parser.h",
          "keepalived/include/vrrp_ipaddress.h",
          "keepalived/include/vrrp_track.h",
          "keepalived/vrrp/vrrp_data.c",
          "keepalived/vrrp/vrrp_ip_rule_route_parser.c",
          "keepalived/vrrp/vrrp_ipaddress.c",
          "keepalived/vrrp/vrrp_iproute.c",
          "keepalived/vrrp/vrrp_iprule.c",
          "keepalived/vrrp/vrrp_parser.c",
          "keepalived/vrrp/vrrp_track.c",
          "lib/notify.c",
          "lib/rttables.c",
          "lib/utils.c",
          "lib/utils.h",
          "lib/vector.c",
          "lib/vector.h"
        ],
        "message": "Make strvec_slot a const char *, rather than void *\n\nThis avoids a lot of casts and simplifies the code\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/bfd/bfd_parser.c||keepalived/bfd/bfd_parser.c",
          "keepalived/check/check_api.c||keepalived/check/check_api.c",
          "keepalived/check/check_bfd.c||keepalived/check/check_bfd.c",
          "keepalived/check/check_data.c||keepalived/check/check_data.c",
          "keepalived/check/check_dns.c||keepalived/check/check_dns.c",
          "keepalived/check/check_http.c||keepalived/check/check_http.c",
          "keepalived/check/check_misc.c||keepalived/check/check_misc.c",
          "keepalived/check/check_parser.c||keepalived/check/check_parser.c",
          "keepalived/core/global_parser.c||keepalived/core/global_parser.c",
          "keepalived/include/vrrp_ip_rule_route_parser.h||keepalived/include/vrrp_ip_rule_route_parser.h",
          "keepalived/include/vrrp_ipaddress.h||keepalived/include/vrrp_ipaddress.h",
          "keepalived/include/vrrp_track.h||keepalived/include/vrrp_track.h",
          "keepalived/vrrp/vrrp_data.c||keepalived/vrrp/vrrp_data.c",
          "keepalived/vrrp/vrrp_ip_rule_route_parser.c||keepalived/vrrp/vrrp_ip_rule_route_parser.c",
          "keepalived/vrrp/vrrp_ipaddress.c||keepalived/vrrp/vrrp_ipaddress.c",
          "keepalived/vrrp/vrrp_iproute.c||keepalived/vrrp/vrrp_iproute.c",
          "keepalived/vrrp/vrrp_iprule.c||keepalived/vrrp/vrrp_iprule.c",
          "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c",
          "keepalived/vrrp/vrrp_track.c||keepalived/vrrp/vrrp_track.c",
          "lib/notify.c||lib/notify.c",
          "lib/rttables.c||lib/rttables.c",
          "lib/utils.c||lib/utils.c",
          "lib/utils.h||lib/utils.h",
          "lib/vector.c||lib/vector.c",
          "lib/vector.h||lib/vector.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/core/global_parser.c||keepalived/core/global_parser.c"
          ],
          "candidate": [
            "keepalived/core/global_parser.c||keepalived/core/global_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/bfd/bfd_parser.c||keepalived/bfd/bfd_parser.c": [
          "File: keepalived/bfd/bfd_parser.c -> keepalived/bfd/bfd_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   report_config_error(CONFIG_GENERAL_ERROR,",
          "113:        \"Configuration error: BFD instance %s has\"",
          "114:        \" malformed %s address %s, ignoring instance\",",
          "116:   list_del(bfd_data->bfd, bfd);",
          "117:   skip_block(false);",
          "118:   return;",
          "",
          "[Removed Lines]",
          "115:        bfd->iname, neighbor_str, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "115:        bfd->iname, neighbor_str, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   report_config_error(CONFIG_GENERAL_ERROR,",
          "121:        \"Configuration error: BFD instance %s has\"",
          "122:        \" duplicate %s address %s, ignoring instance\",",
          "124:   list_del(bfd_data->bfd, bfd);",
          "125:   skip_block(false);",
          "126:   return;",
          "",
          "[Removed Lines]",
          "123:        bfd->iname, neighbor_str, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "123:        bfd->iname, neighbor_str, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:   report_config_error(CONFIG_GENERAL_ERROR,",
          "145:        \"Configuration error: BFD instance %s has\"",
          "146:        \" malformed source address %s, ignoring\",",
          "148:  } else",
          "149:   bfd->src_addr = src_addr;",
          "150: }",
          "",
          "[Removed Lines]",
          "147:        bfd->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "147:        bfd->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:  if (!read_unsigned_strvec(strvec, 1, &value, BFD_MINRX_MIN, BFD_MINRX_MAX, false))",
          "165:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: BFD instance %s\"",
          "166:        \" min_rx value %s is not valid (must be in range\"",
          "168:        BFD_MINRX_MIN, BFD_MINRX_MAX);",
          "169:  else",
          "170:   bfd->local_min_rx_intv = value * 1000U;",
          "",
          "[Removed Lines]",
          "167:        \" [%u-%u]), ignoring\", bfd->iname, FMT_STR_VSLOT(strvec, 1),",
          "",
          "[Added Lines]",
          "167:        \" [%u-%u]), ignoring\", bfd->iname, strvec_slot(strvec, 1),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:  if (!read_unsigned_strvec(strvec, 1, &value, BFD_MINTX_MIN, BFD_MINTX_MAX, false))",
          "191:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: BFD instance %s\"",
          "192:        \" min_tx value %s is not valid (must be in range\"",
          "194:        BFD_MINTX_MIN, BFD_MINTX_MAX);",
          "195:  else",
          "196:   bfd->local_min_tx_intv = value * 1000U;",
          "",
          "[Removed Lines]",
          "193:        \" [%u-%u]), ignoring\", bfd->iname, FMT_STR_VSLOT(strvec, 1),",
          "",
          "[Added Lines]",
          "193:        \" [%u-%u]), ignoring\", bfd->iname, strvec_slot(strvec, 1),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:  if (!read_unsigned_strvec(strvec, 1, &value,BFD_IDLETX_MIN, BFD_IDLETX_MAX, false))",
          "217:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: BFD instance %s\"",
          "218:        \" idle_tx value %s is not valid (must be in range\"",
          "220:        BFD_IDLETX_MIN, BFD_IDLETX_MAX);",
          "221:  else",
          "222:   bfd->local_idle_tx_intv = value * 1000U;",
          "",
          "[Removed Lines]",
          "219:        \" [%u-%u]), ignoring\", bfd->iname, FMT_STR_VSLOT(strvec, 1),",
          "",
          "[Added Lines]",
          "219:        \" [%u-%u]), ignoring\", bfd->iname, strvec_slot(strvec, 1),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242:  if (!read_unsigned_strvec(strvec, 1, &value, BFD_MULTIPLIER_MIN, BFD_MULTIPLIER_MAX, false))",
          "243:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: BFD instance %s\"",
          "244:        \" multiplier value %s not valid (must be in range\"",
          "246:        BFD_MULTIPLIER_MIN, BFD_MULTIPLIER_MAX);",
          "247:  else",
          "248:   bfd->local_detect_mult = value;",
          "",
          "[Removed Lines]",
          "245:        \" [%u-%u]), ignoring\", bfd->iname, FMT_STR_VSLOT(strvec, 1),",
          "",
          "[Added Lines]",
          "245:        \" [%u-%u]), ignoring\", bfd->iname, strvec_slot(strvec, 1),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "277:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: BFD instance %s\"",
          "278:        \" ttl/hoplimit value %s not valid (must be in range\"",
          "279:        \" [1-%u]), ignoring\", bfd->iname,",
          "281:  else",
          "282:   bfd->ttl = value;",
          "283: }",
          "",
          "[Removed Lines]",
          "280:        FMT_STR_VSLOT(strvec, 1), BFD_TTL_MAX);",
          "",
          "[Added Lines]",
          "280:        strvec_slot(strvec, 1), BFD_TTL_MAX);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "298:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: BFD instance %s\"",
          "299:        \" max_hops value %s not valid (must be in range\"",
          "300:        \" [-1-%u]), ignoring\", bfd->iname,",
          "302:  else",
          "303:   bfd->max_hops = value;",
          "304: }",
          "",
          "[Removed Lines]",
          "301:        FMT_STR_VSLOT(strvec, 1), BFD_TTL_MAX);",
          "",
          "[Added Lines]",
          "301:        strvec_slot(strvec, 1), BFD_TTL_MAX);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "426:  if (!read_int_strvec(strvec, 1, &value, -253, 253, true)) {",
          "427:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: BFD instance %s\"",
          "428:        \" weight value %s not valid (must be in range\"",
          "430:        -253, 253);",
          "431:  } else",
          "432:   tbfd->weight = value;",
          "",
          "[Removed Lines]",
          "429:        \" [%d-%d]), ignoring\", tbfd->bname, FMT_STR_VSLOT(strvec, 1),",
          "",
          "[Added Lines]",
          "429:        \" [%d-%d]), ignoring\", tbfd->bname, strvec_slot(strvec, 1),",
          "",
          "---------------"
        ],
        "keepalived/check/check_api.c||keepalived/check/check_api.c": [
          "File: keepalived/check/check_api.c -> keepalived/check/check_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:  conn_opts_t *co = CHECKER_GET_CO();",
          "229:  if (inet_stosockaddr(strvec_slot(strvec, 1), NULL, &co->dst))",
          "231:  else if (co->bindto.ss_family != AF_UNSPEC &&",
          "232:    co->bindto.ss_family != co->dst.ss_family) {",
          "234:   co->dst.ss_family = AF_UNSPEC;",
          "235:  }",
          "236: }",
          "",
          "[Removed Lines]",
          "230:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid connect_ip address %s - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "233:   report_config_error(CONFIG_GENERAL_ERROR, \"connect_ip address %s does not match address family of bindto - skipping\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "230:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid connect_ip address %s - ignoring\", strvec_slot(strvec, 1));",
          "233:   report_config_error(CONFIG_GENERAL_ERROR, \"connect_ip address %s does not match address family of bindto - skipping\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  unsigned port;",
          "245:  if (!read_unsigned_strvec(strvec, 1, &port, 1, 65535, true)) {",
          "247:   return;",
          "248:  }",
          "",
          "[Removed Lines]",
          "246:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid checker connect_port '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "246:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid checker connect_port '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256: {",
          "257:  conn_opts_t *co = CHECKER_GET_CO();",
          "258:  if (inet_stosockaddr(strvec_slot(strvec, 1), NULL, &co->bindto))",
          "260:  else if (co->dst.ss_family != AF_UNSPEC &&",
          "261:    co->dst.ss_family != co->bindto.ss_family) {",
          "263:   co->bindto.ss_family = AF_UNSPEC;",
          "264:  }",
          "265: }",
          "",
          "[Removed Lines]",
          "259:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid bindto address %s - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "262:   report_config_error(CONFIG_GENERAL_ERROR, \"bindto address %s does not match address family of connect_ip - skipping\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "259:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid bindto address %s - ignoring\", strvec_slot(strvec, 1));",
          "262:   report_config_error(CONFIG_GENERAL_ERROR, \"bindto address %s does not match address family of connect_ip - skipping\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:  unsigned port;",
          "274:  if (!read_unsigned_strvec(strvec, 1, &port, 1, 65535, true)) {",
          "276:   return;",
          "277:  }",
          "",
          "[Removed Lines]",
          "275:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid checker bind_port '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "275:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid checker bind_port '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "287:  conn_opts_t *co = CHECKER_GET_CO();",
          "289:  if (strlen(strvec_slot(strvec, 1)) > sizeof(co->bind_if) - 1) {",
          "291:   return;",
          "292:  }",
          "293:  strcpy(co->bind_if, strvec_slot(strvec, 1));",
          "",
          "[Removed Lines]",
          "290:   report_config_error(CONFIG_GENERAL_ERROR, \"Interface name %s is too long - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "290:   report_config_error(CONFIG_GENERAL_ERROR, \"Interface name %s is too long - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "301:  unsigned long timer;",
          "303:  if (!read_timer(strvec, 1, &timer, 1, UINT_MAX, true)) {",
          "305:   return;",
          "306:  }",
          "307:  co->connection_to = timer;",
          "",
          "[Removed Lines]",
          "304:   report_config_error(CONFIG_GENERAL_ERROR, \"connect_timeout %s invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "304:   report_config_error(CONFIG_GENERAL_ERROR, \"connect_timeout %s invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:  unsigned fwmark;",
          "318:  if (!read_unsigned_strvec(strvec, 1, &fwmark, 0, UINT_MAX, true)) {",
          "320:   return;",
          "321:  }",
          "322:  co->fwmark = fwmark;",
          "",
          "[Removed Lines]",
          "319:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid fwmark connection value '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "319:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid fwmark connection value '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "330:  unsigned retry;",
          "332:  if (!read_unsigned_strvec(strvec, 1, &retry, 0, UINT_MAX, true)) {",
          "334:   return;",
          "335:  }",
          "",
          "[Removed Lines]",
          "333:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid retry connection value '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "333:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid retry connection value '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "344:  unsigned long delay;",
          "346:  if (!read_timer(strvec, 1, &delay, 0, 0, true)) {",
          "348:   return;",
          "349:  }",
          "",
          "[Removed Lines]",
          "347:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid delay_before_retry connection value '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "347:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid delay_before_retry connection value '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "359:  unsigned long warmup;",
          "361:  if (!read_timer(strvec, 1, &warmup, 0, 0, true)) {",
          "363:   return;",
          "364:  }",
          "",
          "[Removed Lines]",
          "362:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid warmup connection value '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "362:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid warmup connection value '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "373:  unsigned long delay_loop;",
          "375:  if (!read_timer(strvec, 1, &delay_loop, 1, 0, true)) {",
          "377:   return;",
          "378:  }",
          "",
          "[Removed Lines]",
          "376:   report_config_error(CONFIG_GENERAL_ERROR, \"delay_loop '%s' is invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "376:   report_config_error(CONFIG_GENERAL_ERROR, \"delay_loop '%s' is invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "389:  if (vector_size(strvec) >= 2) {",
          "390:   res = check_true_false(strvec_slot(strvec, 1));",
          "391:   if (res == -1) {",
          "393:    return;",
          "394:   }",
          "395:  }",
          "",
          "[Removed Lines]",
          "392:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid alpha parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "392:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid alpha parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "404:  if (vector_size(strvec) >= 2) {",
          "405:   res = check_true_false(strvec_slot(strvec, 1));",
          "406:   if (res == -1) {",
          "408:    return;",
          "409:   }",
          "410:  }",
          "",
          "[Removed Lines]",
          "407:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid log_all_failures parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "407:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid log_all_failures parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/check/check_bfd.c||keepalived/check/check_bfd.c": [
          "File: keepalived/check/check_bfd.c -> keepalived/check/check_bfd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  if (!config_error) {",
          "150:   LIST_FOREACH(new_checker->rs->tracked_bfds, bfd_c, e) {",
          "151:    if (tbfd == bfd_c->bfd) {",
          "153:     config_error = true;",
          "154:     break;",
          "155:    }",
          "",
          "[Removed Lines]",
          "152:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) BFD_CHECK - RS already monitoring %s\", FMT_RS(new_checker->rs, new_checker->vs), FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "152:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) BFD_CHECK - RS already monitoring %s\", FMT_RS(new_checker->rs, new_checker->vs), strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:  if (vector_size(strvec) >= 2) {",
          "177:   res = check_true_false(strvec_slot(strvec, 1));",
          "178:   if (res == -1) {",
          "180:    return;",
          "181:   }",
          "182:  }",
          "",
          "[Removed Lines]",
          "179:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid alpha parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "179:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid alpha parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/check/check_data.c||keepalived/check/check_data.c": [
          "File: keepalived/check/check_data.c -> keepalived/check/check_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:  virtual_server_group_entry_t *old;",
          "170:  uint32_t start;",
          "171:  element e;",
          "173:  uint32_t range;",
          "174:  unsigned fwmark;",
          "",
          "[Removed Lines]",
          "172:  char *port_str;",
          "",
          "[Added Lines]",
          "172:  const char *port_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:  if (!strcmp(strvec_slot(strvec, 0), \"fwmark\")) {",
          "179:   if (!read_unsigned_strvec(strvec, 1, &fwmark, 0, UINT32_MAX, true)) {",
          "181:    FREE(new);",
          "182:    return;",
          "183:   }",
          "",
          "[Removed Lines]",
          "180:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s): fwmark '%s' must be in [0, %u] - ignoring\", vsg->gname, FMT_STR_VSLOT(strvec, 1), UINT32_MAX);",
          "",
          "[Added Lines]",
          "180:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s): fwmark '%s' must be in [0, %u] - ignoring\", vsg->gname, strvec_slot(strvec, 1), UINT32_MAX);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:    port_str = NULL;",
          "204:   if (inet_stosockaddr(strvec_slot(strvec, 0), port_str, &new->addr)) {",
          "206:       port_str ? \"/port\" : \"\", port_str ? \"/\" : \"\", port_str ? port_str : \"\");",
          "207:    FREE(new);",
          "208:    return;",
          "209:   }",
          "210: #ifndef LIBIPVS_USE_NL",
          "211:   if (new->addr.ss_family != AF_INET) {",
          "213:    FREE(new);",
          "214:    return;",
          "215:   }",
          "",
          "[Removed Lines]",
          "205:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid virtual server group IP address%s %s%s%s - skipping\", FMT_STR_VSLOT(strvec, 0),",
          "212:    report_config_error(CONFIG_GENERAL_ERROR, \"IPVS does not support IPv6 in this build - skipping %s\", FMT_STR_VSLOT(strvec, 0));",
          "",
          "[Added Lines]",
          "205:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid virtual server group IP address%s %s%s%s - skipping\", strvec_slot(strvec, 0),",
          "212:    report_config_error(CONFIG_GENERAL_ERROR, \"IPVS does not support IPv6 in this build - skipping %s\", strvec_slot(strvec, 0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:     start = ntohs(((struct sockaddr_in6 *)&new->addr)->sin6_addr.s6_addr16[7]);",
          "238:    if (start >= new->range) {",
          "240:     FREE(new);",
          "241:     return;",
          "242:    }",
          "",
          "[Removed Lines]",
          "239:     report_config_error(CONFIG_GENERAL_ERROR, \"Address range end is not greater than address range start - %s - skipping\", FMT_STR_VSLOT(strvec, 0));",
          "",
          "[Added Lines]",
          "239:     report_config_error(CONFIG_GENERAL_ERROR, \"Address range end is not greater than address range start - %s - skipping\", strvec_slot(strvec, 0));",
          "",
          "---------------"
        ],
        "keepalived/check/check_dns.c||keepalived/check/check_dns.c": [
          "File: keepalived/check/check_dns.c -> keepalived/check/check_dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:  dns_type = dns_type_lookup(type_str);",
          "504:  if (!dns_type)",
          "506:  else",
          "507:   dns_check->type = dns_type;",
          "",
          "[Removed Lines]",
          "505:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown DNS check type %s - defaulting to SOA\", vector_size(strvec) < 2 ? \"[blank]\" : FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "505:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown DNS check type %s - defaulting to SOA\", vector_size(strvec) < 2 ? \"[blank]\" : strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/check/check_http.c||keepalived/check/check_http.c": [
          "File: keepalived/check/check_http.c -> keepalived/check/check_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:  dump_list(fp, http_get_chk->url);",
          "284: }",
          "285: static http_checker_t *",
          "287: {",
          "288:  http_checker_t *http_get_chk;",
          "",
          "[Removed Lines]",
          "286: alloc_http_get(char *proto)",
          "",
          "[Added Lines]",
          "286: alloc_http_get(const char *proto)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356: {",
          "357:  checker_t *checker;",
          "358:  http_checker_t *http_get_chk;",
          "362:  http_get_chk = alloc_http_get(str);",
          "",
          "[Removed Lines]",
          "359:  char *str = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "359:  const char *str = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "375:  report_config_error(CONFIG_GENERAL_ERROR, \"nb_get_retry is deprecated - please use 'retry'\");",
          "377:  if (!read_unsigned_strvec(strvec, 1, &retry, 0, UINT_MAX, true)) {",
          "379:   return;",
          "380:  }",
          "",
          "[Removed Lines]",
          "378:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid nb_get_retry value '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "378:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid nb_get_retry value '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478:  unsigned val;",
          "480:  if (!read_unsigned_strvec(strvec, 1, &val, 100, 999, true))",
          "482:  else",
          "483:   url->status_code = val;",
          "484: }",
          "",
          "[Removed Lines]",
          "481:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid HTTP_GET status code '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "481:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid HTTP_GET status code '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "521: regex_options_handler(const vector_t *strvec)",
          "522: {",
          "523:  unsigned i, j;",
          "526:  for (i = 1; i < vector_size(strvec); i++) {",
          "527:   str = strvec_slot(strvec, i);",
          "",
          "[Removed Lines]",
          "524:  char *str;",
          "",
          "[Added Lines]",
          "524:  const char *str;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "549:  val = strtoul(vector_slot(strvec, 1), &endptr, 10);",
          "550:  if (*endptr) {",
          "552:   return 0;",
          "553:  }",
          "",
          "[Removed Lines]",
          "551:   log_message(LOG_INFO, \"Invalid regex_%s_offset %s specified\", type, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "551:   log_message(LOG_INFO, \"Invalid regex_%s_offset %s specified\", type, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "684:  if (vector_size(strvec) >= 2) {",
          "685:   res = check_true_false(strvec_slot(strvec, 1));",
          "686:   if (res == -1) {",
          "688:    return;",
          "689:   }",
          "690:  }",
          "",
          "[Removed Lines]",
          "687:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid enable_sni parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "687:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid enable_sni parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/check/check_misc.c||keepalived/check/check_misc.c": [
          "File: keepalived/check/check_misc.c -> keepalived/check/check_misc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   return;",
          "135:  if (!read_unsigned_strvec(strvec, 1, &timeout, 0, UINT_MAX / TIMER_HZ, true)) {",
          "137:   return;",
          "138:  }",
          "",
          "[Removed Lines]",
          "136:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid misc_timeout value '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "136:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid misc_timeout value '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/check/check_parser.c||keepalived/check/check_parser.c": [
          "File: keepalived/check/check_parser.c -> keepalived/check/check_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   af = AF_INET6;",
          "205:  }",
          "206:  else {",
          "208:   return;",
          "209:  }",
          "211:  if (vs->af != AF_UNSPEC &&",
          "212:      af != vs->af) {",
          "214:   return;",
          "215:  }",
          "",
          "[Removed Lines]",
          "207:   report_config_error(CONFIG_GENERAL_ERROR, \"unknown address family %s\", FMT_STR_VSLOT(strvec, 1));",
          "213:   report_config_error(CONFIG_GENERAL_ERROR, \"Virtual server specified family %s conflicts with server family\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "207:   report_config_error(CONFIG_GENERAL_ERROR, \"unknown address family %s\", strvec_slot(strvec, 1));",
          "213:   report_config_error(CONFIG_GENERAL_ERROR, \"Virtual server specified family %s conflicts with server family\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "223:  unsigned long timer;",
          "225:  if (!read_timer(strvec, 1, &timer, 1, UINT_MAX, true)) {",
          "227:   return;",
          "228:  }",
          "229:  vs->connection_to = timer;",
          "",
          "[Removed Lines]",
          "226:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server connect_timeout %s invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "226:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server connect_timeout %s invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:  if (read_timer(strvec, 1, &delay, 1, 0, true))",
          "238:   vs->delay_loop = delay;",
          "239:  else",
          "241: }",
          "242: static void",
          "243: vs_delay_before_retry_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "240:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server delay loop '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "240:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server delay loop '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:  if (read_timer(strvec, 1, &delay, 0, 0, true))",
          "249:   vs->delay_before_retry = delay;",
          "250:  else",
          "252: }",
          "253: static void",
          "254: vs_retry_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "251:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server delay before retry '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "251:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server delay before retry '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "257:  unsigned retry;",
          "259:  if (!read_unsigned_strvec(strvec, 1, &retry, 1, UINT32_MAX, false)) {",
          "261:   return;",
          "262:  }",
          "263:  vs->retry = retry;",
          "",
          "[Removed Lines]",
          "260:   report_config_error(CONFIG_GENERAL_ERROR, \"retry value invalid - %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "260:   report_config_error(CONFIG_GENERAL_ERROR, \"retry value invalid - %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:  if (read_timer(strvec, 1, &delay, 0, 0, true))",
          "272:   vs->warmup = delay;",
          "273:  else",
          "275: }",
          "276: static void",
          "277: lbalgo_handler(const vector_t *strvec)",
          "278: {",
          "279:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "281:  int i;",
          "284:  for (i = 0; lvs_schedulers[i] && strcmp(str, lvs_schedulers[i]); i++);",
          "286:  if (!lvs_schedulers[i] || strlen(str) >= sizeof(vs->sched)) {",
          "288:   return;",
          "289:  }",
          "",
          "[Removed Lines]",
          "274:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server warmup '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "280:  char *str = strvec_slot(strvec, 1);",
          "287:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_scheduler '%s' - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "274:   report_config_error(CONFIG_GENERAL_ERROR, \"virtual server warmup '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "280:  const char *str = strvec_slot(strvec, 1);",
          "287:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_scheduler '%s' - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "295: lbflags_handler(const vector_t *strvec)",
          "296: {",
          "297:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "300:  if (!strcmp(str, \"hashed\"))",
          "301:   vs->flags |= IP_VS_SVC_F_HASHED;",
          "",
          "[Removed Lines]",
          "298:  char *str = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "298:  const char *str = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "335: forwarding_handler(const vector_t *strvec)",
          "336: {",
          "337:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "340:  if (!strcmp(str, \"NAT\"))",
          "341:   vs->forwarding_method = IP_VS_CONN_F_MASQ;",
          "",
          "[Removed Lines]",
          "338:  char *str = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "338:  const char *str = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "369: pengine_handler(const vector_t *strvec)",
          "370: {",
          "371:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "373:  size_t size = sizeof (vs->pe_name);",
          "375:  strncpy(vs->pe_name, str, size - 1);",
          "",
          "[Removed Lines]",
          "372:  char *str = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "372:  const char *str = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "390:  if (af == AF_INET6) {",
          "391:   if (!read_unsigned_strvec(strvec, 1, &granularity, 1, 128, false)) {",
          "393:    return;",
          "394:   }",
          "395:   vs->persistence_granularity = granularity;",
          "396:  } else {",
          "397:   if (!inet_aton(strvec_slot(strvec, 1), &addr)) {",
          "399:    return;",
          "400:   }",
          "",
          "[Removed Lines]",
          "392:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid IPv6 persistence_granularity specified - %s\", FMT_STR_VSLOT(strvec, 1));",
          "398:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid IPv4 persistence_granularity specified - %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "392:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid IPv6 persistence_granularity specified - %s\", strvec_slot(strvec, 1));",
          "398:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid IPv4 persistence_granularity specified - %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "404:   while (!(haddr & 1))",
          "405:    haddr = (haddr >> 1) | 0x80000000;",
          "406:   if (haddr != 0xffffffff) {",
          "408:    return;",
          "409:   }",
          "",
          "[Removed Lines]",
          "407:    report_config_error(CONFIG_GENERAL_ERROR, \"IPv4 persistence_granularity netmask is not solid - %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "407:    report_config_error(CONFIG_GENERAL_ERROR, \"IPv4 persistence_granularity netmask is not solid - %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "421: proto_handler(const vector_t *strvec)",
          "422: {",
          "423:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "426:  if (!strcasecmp(str, \"TCP\"))",
          "427:   vs->service_type = IPPROTO_TCP;",
          "",
          "[Removed Lines]",
          "424:  char *str = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "424:  const char *str = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "448:  if (vector_size(strvec) >= 2) {",
          "449:   res = check_true_false(strvec_slot(strvec, 1));",
          "450:   if (res == -1) {",
          "452:    return;",
          "453:   }",
          "454:  }",
          "",
          "[Removed Lines]",
          "451:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid virtual_server smtp_alert parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "451:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid virtual_server smtp_alert parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "465: static void",
          "466: svr_forwarding_handler(real_server_t *rs, const vector_t *strvec)",
          "467: {",
          "470:  if (!strcmp(str, \"NAT\"))",
          "471:   rs->forwarding_method = IP_VS_CONN_F_MASQ;",
          "",
          "[Removed Lines]",
          "468:  char *str = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "468:  const char *str = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "546:  unsigned weight;",
          "548:  if (!read_unsigned_strvec(strvec, 1, &weight, 0, 65535, true)) {",
          "550:   return;",
          "551:  }",
          "552:  rs->weight = weight;",
          "",
          "[Removed Lines]",
          "549:   report_config_error(CONFIG_GENERAL_ERROR, \"Real server weight %s is outside range 0-65535\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "549:   report_config_error(CONFIG_GENERAL_ERROR, \"Real server weight %s is outside range 0-65535\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "568:  unsigned threshold;",
          "570:  if (!read_unsigned_strvec(strvec, 1, &threshold, 0, UINT_MAX, true)) {",
          "572:   return;",
          "573:  }",
          "574:  rs->u_threshold = threshold;",
          "",
          "[Removed Lines]",
          "571:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid real_server uthreshold '%s' - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "571:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid real_server uthreshold '%s' - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "581:  unsigned threshold;",
          "583:  if (!read_unsigned_strvec(strvec, 1, &threshold, 0, UINT_MAX, true)) {",
          "585:   return;",
          "586:  }",
          "587:  rs->l_threshold = threshold;",
          "",
          "[Removed Lines]",
          "584:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid real_server lthreshold '%s' - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "584:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid real_server lthreshold '%s' - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "603:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "604:  real_server_t *rs = LIST_TAIL_DATA(vs->rs);",
          "605:  if (rs->notify_up) {",
          "607:   return;",
          "608:  }",
          "609:  rs->notify_up = set_check_notify_script(strvec, \"notify\");",
          "",
          "[Removed Lines]",
          "606:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_up script already specified - ignoring %s\", vs->vsgname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "606:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_up script already specified - ignoring %s\", vs->vsgname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "614:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "615:  real_server_t *rs = LIST_TAIL_DATA(vs->rs);",
          "616:  if (rs->notify_down) {",
          "618:   return;",
          "619:  }",
          "620:  rs->notify_down = set_check_notify_script(strvec, \"notify\");",
          "",
          "[Removed Lines]",
          "617:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_down script already specified - ignoring %s\", vs->vsgname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "617:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_down script already specified - ignoring %s\", vs->vsgname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "627:  unsigned long timer;",
          "629:  if (!read_timer(strvec, 1, &timer, 1, UINT_MAX, true)) {",
          "631:   return;",
          "632:  }",
          "633:  rs->connection_to = timer;",
          "",
          "[Removed Lines]",
          "630:   report_config_error(CONFIG_GENERAL_ERROR, \"real server connect_timeout %s invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "630:   report_config_error(CONFIG_GENERAL_ERROR, \"real server connect_timeout %s invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "642:  if (read_timer(strvec, 1, &delay, 1, 0, true))",
          "643:   rs->delay_loop = delay;",
          "644:  else",
          "646: }",
          "647: static void",
          "648: rs_delay_before_retry_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "645:   report_config_error(CONFIG_GENERAL_ERROR, \"real server delay_loop '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "645:   report_config_error(CONFIG_GENERAL_ERROR, \"real server delay_loop '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "654:  if (read_timer(strvec, 1, &delay, 0, 0, true))",
          "655:   rs->delay_before_retry = delay;",
          "656:  else",
          "658: }",
          "659: static void",
          "660: rs_retry_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "657:   report_config_error(CONFIG_GENERAL_ERROR, \"real server delay_before_retry '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "657:   report_config_error(CONFIG_GENERAL_ERROR, \"real server delay_before_retry '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "664:  unsigned retry;",
          "666:  if (!read_unsigned_strvec(strvec, 1, &retry, 1, UINT32_MAX, false)) {",
          "668:   return;",
          "669:  }",
          "670:  rs->retry = (unsigned)retry;",
          "",
          "[Removed Lines]",
          "667:   report_config_error(CONFIG_GENERAL_ERROR, \"retry value invalid - %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "667:   report_config_error(CONFIG_GENERAL_ERROR, \"retry value invalid - %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "679:  if (read_timer(strvec, 1, &delay, 0, 0, true))",
          "680:   rs->warmup = delay;",
          "681:  else",
          "683: }",
          "684: static void",
          "685: rs_inhibit_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "682:   report_config_error(CONFIG_GENERAL_ERROR, \"real server warmup '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "682:   report_config_error(CONFIG_GENERAL_ERROR, \"real server warmup '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "691:  if (vector_size(strvec) >= 2) {",
          "692:   res = check_true_false(strvec_slot(strvec, 1));",
          "693:   if (res == -1) {",
          "695:    return;",
          "696:   }",
          "697:  }",
          "",
          "[Removed Lines]",
          "694:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid inhibit_on_failure parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "694:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid inhibit_on_failure parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "707:  if (vector_size(strvec) >= 2) {",
          "708:   res = check_true_false(strvec_slot(strvec, 1));",
          "709:   if (res == -1) {",
          "711:    return;",
          "712:   }",
          "713:  }",
          "",
          "[Removed Lines]",
          "710:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid alpha parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "710:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid alpha parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "723:  if (vector_size(strvec) >= 2) {",
          "724:   res = check_true_false(strvec_slot(strvec, 1));",
          "725:   if (res == -1) {",
          "727:    return;",
          "728:   }",
          "729:  }",
          "",
          "[Removed Lines]",
          "726:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid real_server smtp_alert parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "726:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid real_server smtp_alert parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "753: {",
          "754:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "755:  if (vs->notify_quorum_up) {",
          "757:   return;",
          "758:  }",
          "759:  vs->notify_quorum_up = set_check_notify_script(strvec, \"quorum\");",
          "",
          "[Removed Lines]",
          "756:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) quorum_up script already specified - ignoring %s\", vs->vsgname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "756:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) quorum_up script already specified - ignoring %s\", vs->vsgname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "763: {",
          "764:  virtual_server_t *vs = LIST_TAIL_DATA(check_data->vs);",
          "765:  if (vs->notify_quorum_down) {",
          "767:   return;",
          "768:  }",
          "769:  vs->notify_quorum_down = set_check_notify_script(strvec, \"quorum\");",
          "",
          "[Removed Lines]",
          "766:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) quorum_down script already specified - ignoring %s\", vs->vsgname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "766:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) quorum_down script already specified - ignoring %s\", vs->vsgname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "775:  unsigned quorum;",
          "777:  if (!read_unsigned_strvec(strvec, 1, &quorum, 1, UINT_MAX, true)) {",
          "779:   quorum = 1;",
          "780:  }",
          "",
          "[Removed Lines]",
          "778:   report_config_error(CONFIG_GENERAL_ERROR, \"Quorum %s must be in [1, %u]. Setting to 1.\", FMT_STR_VSLOT(strvec, 1), UINT_MAX);",
          "",
          "[Added Lines]",
          "778:   report_config_error(CONFIG_GENERAL_ERROR, \"Quorum %s must be in [1, %u]. Setting to 1.\", strvec_slot(strvec, 1), UINT_MAX);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "788:  unsigned hysteresis;",
          "790:  if (!read_unsigned_strvec(strvec, 1, &hysteresis, 0, UINT_MAX, true)) {",
          "792:   return;",
          "793:  }",
          "",
          "[Removed Lines]",
          "791:   report_config_error(CONFIG_GENERAL_ERROR, \"Hysteresis %s must be in [0, %u] - ignoring\", FMT_STR_VSLOT(strvec, 1), UINT_MAX);",
          "",
          "[Added Lines]",
          "791:   report_config_error(CONFIG_GENERAL_ERROR, \"Hysteresis %s must be in [0, %u] - ignoring\", strvec_slot(strvec, 1), UINT_MAX);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "801:  unsigned weight;",
          "803:  if (!read_unsigned_strvec(strvec, 1, &weight, 1, 65535, true)) {",
          "805:   return;",
          "806:  }",
          "807:  vs->weight = weight;",
          "",
          "[Removed Lines]",
          "804:   report_config_error(CONFIG_GENERAL_ERROR, \"Virtual server weight %s is outside range 1-65535\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "804:   report_config_error(CONFIG_GENERAL_ERROR, \"Virtual server weight %s is outside range 1-65535\", strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/core/global_parser.c||keepalived/core/global_parser.c": [
          "File: keepalived/core/global_parser.c -> keepalived/core/global_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  if (!read_unsigned_strvec(strvec, 1, &timeout, 0, UINT_MAX / TIMER_HZ, true)) {",
          "160:   return;",
          "161:  }",
          "",
          "[Removed Lines]",
          "159:   report_config_error(CONFIG_GENERAL_ERROR, \"smtp_connect_timeout '%s' must be in [0, %d] - ignoring\", FMT_STR_VSLOT(strvec, 1), UINT_MAX / TIMER_HZ);",
          "",
          "[Added Lines]",
          "159:   report_config_error(CONFIG_GENERAL_ERROR, \"smtp_connect_timeout '%s' must be in [0, %d] - ignoring\", strvec_slot(strvec, 1), UINT_MAX / TIMER_HZ);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171: static void",
          "172: dynamic_interfaces_handler(const vector_t *strvec)",
          "173: {",
          "176:  global_data->dynamic_interfaces = true;",
          "",
          "[Removed Lines]",
          "174:  char *str;",
          "",
          "[Added Lines]",
          "174:  const char *str;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194: smtpserver_handler(const vector_t *strvec)",
          "195: {",
          "196:  int ret = -1;",
          "200:  if (vector_size(strvec) >= 3)",
          "",
          "[Removed Lines]",
          "197:  char *port_str = SMTP_PORT_STR;",
          "",
          "[Added Lines]",
          "197:  const char *port_str = SMTP_PORT_STR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:   domain_stosockaddr(strvec_slot(strvec, 1), port_str, &global_data->smtp_server);",
          "210:  if (global_data->smtp_server.ss_family == AF_UNSPEC)",
          "212: }",
          "213: static void",
          "214: smtphelo_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "211:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid smtp server %s %s\", FMT_STR_VSLOT(strvec, 1), port_str);",
          "",
          "[Added Lines]",
          "211:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid smtp server %s %s\", strvec_slot(strvec, 1), port_str);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:  if (vector_size(strvec) >= 2) {",
          "253:   res = check_true_false(strvec_slot(strvec,1));",
          "254:   if (res < 0) {",
          "256:    return;",
          "257:   }",
          "258:  }",
          "",
          "[Removed Lines]",
          "255:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global smtp_alert specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "255:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global smtp_alert specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268:  if (vector_size(strvec) >= 2) {",
          "269:   res = check_true_false(strvec_slot(strvec,1));",
          "270:   if (res < 0) {",
          "272:    return;",
          "273:   }",
          "274:  }",
          "",
          "[Removed Lines]",
          "271:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global smtp_alert_vrrp specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "271:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global smtp_alert_vrrp specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:  if (vector_size(strvec) >= 2) {",
          "286:   res = check_true_false(strvec_slot(strvec,1));",
          "287:   if (res < 0) {",
          "289:    return;",
          "290:   }",
          "291:  }",
          "",
          "[Removed Lines]",
          "288:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global smtp_alert_checker specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "288:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global smtp_alert_checker specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349:     continue;",
          "350:    }",
          "351:    if (!read_unsigned_strvec(strvec, i + 1, &val, 0, LVS_MAX_TIMEOUT, false))",
          "353:    else",
          "354:     global_data->lvs_tcp_timeout = val;",
          "",
          "[Removed Lines]",
          "352:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_timeout tcp (%s) - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "",
          "[Added Lines]",
          "352:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_timeout tcp (%s) - ignoring\", strvec_slot(strvec, i+1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "361:     continue;",
          "362:    }",
          "363:    if (!read_unsigned_strvec(strvec, i + 1, &val, 0, LVS_MAX_TIMEOUT, false))",
          "365:    else",
          "366:     global_data->lvs_tcpfin_timeout = val;",
          "",
          "[Removed Lines]",
          "364:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_timeout tcpfin (%s) - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "",
          "[Added Lines]",
          "364:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_timeout tcpfin (%s) - ignoring\", strvec_slot(strvec, i+1));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "373:     continue;",
          "374:    }",
          "375:    if (!read_unsigned_strvec(strvec, i + 1, &val, 0, LVS_MAX_TIMEOUT, false))",
          "377:    else",
          "378:     global_data->lvs_udp_timeout = val;",
          "380:    continue;",
          "381:   }",
          "383:  }",
          "384: }",
          "385: #if defined _WITH_LVS_ && defined _WITH_VRRP_",
          "",
          "[Removed Lines]",
          "376:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_timeout udp (%s) - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "382:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown option %s specified for lvs_timeouts\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "376:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_timeout udp (%s) - ignoring\", strvec_slot(strvec, i+1));",
          "382:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown option %s specified for lvs_timeouts\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "400:  }",
          "402:  if (strlen(strvec_slot(strvec, 1)) >= IP_VS_IFNAME_MAXLEN) {",
          "404:   return;",
          "405:  }",
          "407:  if (strlen(strvec_slot(strvec, 2)) >= IP_VS_IFNAME_MAXLEN) {",
          "409:   return;",
          "410:  }",
          "",
          "[Removed Lines]",
          "403:   report_config_error(CONFIG_GENERAL_ERROR, \"lvs_sync_daemon interface name '%s' too long - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "408:   report_config_error(CONFIG_GENERAL_ERROR, \"lvs_sync_daemon vrrp interface name '%s' too long - ignoring\", FMT_STR_VSLOT(strvec, 2));",
          "",
          "[Added Lines]",
          "403:   report_config_error(CONFIG_GENERAL_ERROR, \"lvs_sync_daemon interface name '%s' too long - ignoring\", strvec_slot(strvec, 1));",
          "408:   report_config_error(CONFIG_GENERAL_ERROR, \"lvs_sync_daemon vrrp interface name '%s' too long - ignoring\", strvec_slot(strvec, 2));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "417:  strcpy(global_data->lvs_syncd.vrrp_name, strvec_slot(strvec, 2));",
          "421:   report_config_error(CONFIG_GENERAL_ERROR, \"Please use keyword \\\"id\\\" before lvs_sync_daemon syncid value\");",
          "422:   if (!read_unsigned_strvec(strvec, 3, &val, 0, 255, false))",
          "424:   else",
          "425:    global_data->lvs_syncd.syncid = val;",
          "426:   i = 4;",
          "",
          "[Removed Lines]",
          "420:  if (vector_size(strvec) >= 4 && isdigit(FMT_STR_VSLOT(strvec, 3)[0])) {",
          "423:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid syncid (%s) - defaulting to vrid\", FMT_STR_VSLOT(strvec, 3));",
          "",
          "[Added Lines]",
          "420:  if (vector_size(strvec) >= 4 && isdigit(strvec_slot(strvec, 3)[0])) {",
          "423:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid syncid (%s) - defaulting to vrid\", strvec_slot(strvec, 3));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "435:     continue;",
          "436:    }",
          "437:    if (!read_unsigned_strvec(strvec, i + 1, &val, 0, 255, false))",
          "439:    else",
          "440:     global_data->lvs_syncd.syncid = val;",
          "",
          "[Removed Lines]",
          "438:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid syncid (%s) - defaulting to vrid\", FMT_STR_VSLOT(strvec, i+1));",
          "",
          "[Added Lines]",
          "438:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid syncid (%s) - defaulting to vrid\", strvec_slot(strvec, i+1));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "448:     continue;",
          "449:    }",
          "450:    if (!read_unsigned_strvec(strvec, i + 1, &val, 0, 65535 - 20 - 8, false))",
          "452:    else",
          "453:     global_data->lvs_syncd.sync_maxlen = (uint16_t)val;",
          "",
          "[Removed Lines]",
          "451:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon maxlen (%s) - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "",
          "[Added Lines]",
          "451:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon maxlen (%s) - ignoring\", strvec_slot(strvec, i+1));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "460:     continue;",
          "461:    }",
          "462:    if (!read_unsigned_strvec(strvec, i + 1, &val, 0, 65535, false))",
          "464:    else",
          "465:     global_data->lvs_syncd.mcast_port = (uint16_t)val;",
          "",
          "[Removed Lines]",
          "463:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon port (%s) - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "",
          "[Added Lines]",
          "463:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon port (%s) - ignoring\", strvec_slot(strvec, i+1));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "472:     continue;",
          "473:    }",
          "474:    if (!read_unsigned_strvec(strvec, i + 1, &val, 0, 255, false))",
          "476:    else",
          "477:     global_data->lvs_syncd.mcast_ttl = (uint8_t)val;",
          "",
          "[Removed Lines]",
          "475:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon ttl (%s) - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "",
          "[Added Lines]",
          "475:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon ttl (%s) - ignoring\", strvec_slot(strvec, i+1));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "485:    }",
          "487:    if (inet_stosockaddr(strvec_slot(strvec, i+1), NULL, &global_data->lvs_syncd.mcast_group) < 0)",
          "490:    if ((global_data->lvs_syncd.mcast_group.ss_family == AF_INET  && !IN_MULTICAST(htonl(((struct sockaddr_in *)&global_data->lvs_syncd.mcast_group)->sin_addr.s_addr))) ||",
          "491:        (global_data->lvs_syncd.mcast_group.ss_family == AF_INET6 && !IN6_IS_ADDR_MULTICAST(&((struct sockaddr_in6 *)&global_data->lvs_syncd.mcast_group)->sin6_addr))) {",
          "493:     global_data->lvs_syncd.mcast_group.ss_family = AF_UNSPEC;",
          "494:    }",
          "",
          "[Removed Lines]",
          "488:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon group (%s) - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "492:     report_config_error(CONFIG_GENERAL_ERROR, \"lvs_sync_daemon group address %s is not multicast - ignoring\", FMT_STR_VSLOT(strvec, i+1));",
          "",
          "[Added Lines]",
          "488:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid lvs_sync_daemon group (%s) - ignoring\", strvec_slot(strvec, i+1));",
          "492:     report_config_error(CONFIG_GENERAL_ERROR, \"lvs_sync_daemon group address %s is not multicast - ignoring\", strvec_slot(strvec, i+1));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "497:    continue;",
          "498:   }",
          "499: #endif",
          "501:  }",
          "502: }",
          "503: #endif",
          "",
          "[Removed Lines]",
          "500:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown option %s specified for lvs_sync_daemon\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "500:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown option %s specified for lvs_sync_daemon\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "515:  else if (!strcmp(strvec_slot(strvec, 1), \"VS\"))",
          "516:   global_data->lvs_flush_onstop = LVS_FLUSH_VS;",
          "517:  else",
          "519: }",
          "520: #endif",
          "521: #ifdef _HAVE_SCHED_RT_",
          "",
          "[Removed Lines]",
          "518:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown lvs_flush_onstop type %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "518:   report_config_error(CONFIG_GENERAL_ERROR, \"Unknown lvs_flush_onstop type %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "535:  max_priority = sched_get_priority_max(SCHED_RR);",
          "537:  if (!read_int_strvec(strvec, 1, &priority, INT_MIN, INT_MAX, true)) {",
          "539:   return -1;",
          "540:  }",
          "",
          "[Removed Lines]",
          "538:   report_config_error(CONFIG_GENERAL_ERROR, \"%s process real-time priority '%s' invalid\", process, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "538:   report_config_error(CONFIG_GENERAL_ERROR, \"%s process real-time priority '%s' invalid\", process, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "590:  rlim_t rlim;",
          "592:  if (!read_unsigned_strvec(strvec, 1, &limit, 1, UINT32_MAX, true)) {",
          "594:   return 0;",
          "595:  }",
          "",
          "[Removed Lines]",
          "593:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid %s real-time limit - %s\", process, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "593:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid %s real-time limit - %s\", process, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "627:  ret = inet_stosockaddr(strvec_slot(strvec, 1), 0, (struct sockaddr_storage *)mcast);",
          "628:  if (ret < 0) {",
          "629:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: Cant parse vrrp_mcast_group4 [%s]. Skipping\"",
          "631:  }",
          "632: }",
          "633: static void",
          "",
          "[Removed Lines]",
          "630:        , FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "630:        , strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "639:  ret = inet_stosockaddr(strvec_slot(strvec, 1), 0, (struct sockaddr_storage *)mcast);",
          "640:  if (ret < 0) {",
          "641:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: Cant parse vrrp_mcast_group6 [%s]. Skipping\"",
          "643:  }",
          "644: }",
          "645: static void",
          "",
          "[Removed Lines]",
          "642:        , FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "642:        , strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "648:  unsigned timeout;",
          "650:         if (!read_unsigned_strvec(strvec, 1, &timeout, 0, UINT_MAX / TIMER_HZ, true)) {",
          "652:                 return;",
          "653:         }",
          "",
          "[Removed Lines]",
          "651:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_master_delay '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "651:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_master_delay '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "664:  if (!read_unsigned_strvec(strvec, 1, &repeats, 0, UINT_MAX, true)) {",
          "666:   return;",
          "667:  }",
          "",
          "[Removed Lines]",
          "665:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_master_repeat '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "665:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_master_repeat '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "680:         unsigned refresh;",
          "682:         if (!read_unsigned_strvec(strvec, 1, &refresh, 0, UINT_MAX, true)) {",
          "684:                 global_data->vrrp_garp_refresh.tv_sec = 0;",
          "685:         }",
          "686:         else",
          "",
          "[Removed Lines]",
          "683:                 report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_garp_master_refresh '%s' - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "683:                 report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_garp_master_refresh '%s' - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "698:         if (!read_unsigned_strvec(strvec, 1, &repeats, 0, UINT_MAX, true)) {",
          "700:                 return;",
          "701:         }",
          "",
          "[Removed Lines]",
          "699:                 report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_master_refresh_repeat '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "699:                 report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_master_refresh_repeat '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "714:         unsigned delay;",
          "716:         if (!read_unsigned_strvec(strvec, 1, &delay, 0, UINT_MAX / TIMER_HZ, true)) {",
          "718:                 return;",
          "719:         }",
          "",
          "[Removed Lines]",
          "717:                 report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_lower_prio_delay '%s' invalid - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "717:                 report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_lower_prio_delay '%s' invalid - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "726:  unsigned garp_lower_prio_rep;",
          "728:         if (!read_unsigned_strvec(strvec, 1, &garp_lower_prio_rep, 0, INT_MAX, true)) {",
          "730:                 return;",
          "731:         }",
          "",
          "[Removed Lines]",
          "729:                 report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_garp_lower_prio_repeat '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "729:                 report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_garp_lower_prio_repeat '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "738:  double interval;",
          "740:  if (!read_double_strvec(strvec, 1, &interval, 1.0F / TIMER_HZ, UINT_MAX / TIMER_HZ, true))",
          "742:  else",
          "743:   global_data->vrrp_garp_interval = (unsigned)(interval * TIMER_HZ);",
          "745:  if (global_data->vrrp_garp_interval >= 1 * TIMER_HZ)",
          "747: }",
          "748: static void",
          "749: vrrp_gna_interval_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "741:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_interval '%s' is invalid\", FMT_STR_VSLOT(strvec, 1));",
          "746:   log_message(LOG_INFO, \"The vrrp_garp_interval is very large - %s seconds\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "741:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_garp_interval '%s' is invalid\", strvec_slot(strvec, 1));",
          "746:   log_message(LOG_INFO, \"The vrrp_garp_interval is very large - %s seconds\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "751:  double interval;",
          "753:  if (!read_double_strvec(strvec, 1, &interval, 1.0F / TIMER_HZ, UINT_MAX / TIMER_HZ, true))",
          "755:  else",
          "756:   global_data->vrrp_gna_interval = (unsigned)(interval * TIMER_HZ);",
          "758:  if (global_data->vrrp_gna_interval >= 1 * TIMER_HZ)",
          "760: }",
          "761: static void",
          "762: vrrp_min_garp_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "754:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_gna_interval '%s' is invalid\", FMT_STR_VSLOT(strvec, 1));",
          "759:   log_message(LOG_INFO, \"The vrrp_gna_interval is very large - %s seconds\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "754:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_gna_interval '%s' is invalid\", strvec_slot(strvec, 1));",
          "759:   log_message(LOG_INFO, \"The vrrp_gna_interval is very large - %s seconds\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "891: static void",
          "892: vrrp_nftables_handler(__attribute__((unused)) const vector_t *strvec)",
          "893: {",
          "895:  size_t len;",
          "897:  if (global_data->vrrp_nf_table_name) {",
          "",
          "[Removed Lines]",
          "894:  char *name;",
          "",
          "[Added Lines]",
          "894:  const char *name;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "924:  if (read_int_strvec(strvec, 1, &priority, INT32_MIN, INT32_MAX, false))",
          "925:   global_data->vrrp_nf_chain_priority = priority;",
          "926:  else",
          "928: }",
          "929: static void",
          "930: vrrp_nftables_counters_handler(__attribute__((unused)) const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "927:   report_config_error(CONFIG_INVALID_NUMBER, \"invalid nftables chain priority '%s'\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "927:   report_config_error(CONFIG_INVALID_NUMBER, \"invalid nftables chain priority '%s'\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1006:  }",
          "1008:  if (fifo->name) {",
          "1010:   return;",
          "1011:  }",
          "",
          "[Removed Lines]",
          "1009:   report_config_error(CONFIG_GENERAL_ERROR, \"%snotify_fifo already specified - ignoring %s\", type, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "1009:   report_config_error(CONFIG_GENERAL_ERROR, \"%snotify_fifo already specified - ignoring %s\", type, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1040:  }",
          "1042:  if (fifo->script) {",
          "1044:   return;",
          "1045:  }",
          "",
          "[Removed Lines]",
          "1043:   report_config_error(CONFIG_GENERAL_ERROR, \"%snotify_fifo_script already specified - ignoring %s\", type, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "1043:   report_config_error(CONFIG_GENERAL_ERROR, \"%snotify_fifo_script already specified - ignoring %s\", type, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1080:  if (vector_size(strvec) >= 2) {",
          "1081:   res = check_true_false(strvec_slot(strvec,1));",
          "1082:   if (res < 0) {",
          "1084:    return;",
          "1085:   }",
          "1086:  }",
          "",
          "[Removed Lines]",
          "1083:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global vrrp_notify_priority_changes specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1083:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global vrrp_notify_priority_changes specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1253:   use_pid_dir = true;",
          "1254:  }",
          "1255:  else",
          "1257: }",
          "1259: static void",
          "",
          "[Removed Lines]",
          "1256:   report_config_error(CONFIG_GENERAL_ERROR, \"Duplicate net_namespace definition %s - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1256:   report_config_error(CONFIG_GENERAL_ERROR, \"Duplicate net_namespace definition %s - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1293:    use_pid_dir = true;",
          "1294:   }",
          "1295:   else",
          "1297:  }",
          "1298: }",
          "",
          "[Removed Lines]",
          "1296:    report_config_error(CONFIG_GENERAL_ERROR, \"Duplicate instance definition %s - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1296:    report_config_error(CONFIG_GENERAL_ERROR, \"Duplicate instance definition %s - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1333:   return;",
          "1335:  if (!read_unsigned_strvec(strvec, 1, &secs, 0, UINT_MAX, false)) {",
          "1337:   return;",
          "1338:  }",
          "",
          "[Removed Lines]",
          "1336:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid child_wait_time %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1336:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid child_wait_time %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1362:    global_data->vrrp_rx_bufs_policy |= RX_BUFS_POLICY_ADVERT;",
          "1363:   else {",
          "1364:    if (!read_unsigned_strvec(strvec, 1, &rx_buf_size, 0, UINT_MAX, false))",
          "1366:    else {",
          "1367:     global_data->vrrp_rx_bufs_size = rx_buf_size;",
          "1368:     global_data->vrrp_rx_bufs_policy |= RX_BUFS_SIZE;",
          "",
          "[Removed Lines]",
          "1365:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_rx_bufs_policy %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1365:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_rx_bufs_policy %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1396:  }",
          "1398:  if (!read_unsigned_strvec(strvec, 1, &rx_buf_mult, 1, UINT_MAX, false))",
          "1400:  else",
          "1401:   global_data->vrrp_rx_bufs_multiples = rx_buf_mult;",
          "1402: }",
          "",
          "[Removed Lines]",
          "1399:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_rx_bufs_multiplier %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1399:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_rx_bufs_multiplier %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1417:  }",
          "1419:  if (!read_unsigned_strvec(strvec, 1, &val, 0, UINT_MAX, false)) {",
          "1421:   return 0;",
          "1422:  }",
          "",
          "[Removed Lines]",
          "1420:   report_config_error(CONFIG_GENERAL_ERROR, \"%s_rcv_bufs size (%s) invalid\", type, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1420:   report_config_error(CONFIG_GENERAL_ERROR, \"%s_rcv_bufs size (%s) invalid\", type, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1451:  if (vector_size(strvec) >= 2) {",
          "1452:   res = check_true_false(strvec_slot(strvec,1));",
          "1453:   if (res < 0) {",
          "1455:    return;",
          "1456:   }",
          "1457:  }",
          "",
          "[Removed Lines]",
          "1454:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global vrrp_netlink_monitor_rcv_bufs_force specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1454:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global vrrp_netlink_monitor_rcv_bufs_force specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1484:  if (vector_size(strvec) >= 2) {",
          "1485:   res = check_true_false(strvec_slot(strvec,1));",
          "1486:   if (res < 0) {",
          "1488:    return;",
          "1489:   }",
          "1490:  }",
          "",
          "[Removed Lines]",
          "1487:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global vrrp_netlink_cmd_rcv_bufs_force specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1487:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global vrrp_netlink_cmd_rcv_bufs_force specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1518:  if (vector_size(strvec) >= 2) {",
          "1519:   res = check_true_false(strvec_slot(strvec,1));",
          "1520:   if (res < 0) {",
          "1522:    return;",
          "1523:   }",
          "1524:  }",
          "",
          "[Removed Lines]",
          "1521:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global process_monitor_rcv_bufs_force specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1521:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global process_monitor_rcv_bufs_force specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1554:  if (vector_size(strvec) >= 2) {",
          "1555:   res = check_true_false(strvec_slot(strvec,1));",
          "1556:   if (res < 0) {",
          "1558:    return;",
          "1559:   }",
          "1560:  }",
          "",
          "[Removed Lines]",
          "1557:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global lvs_netlink_monitor_rcv_bufs_force specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1557:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global lvs_netlink_monitor_rcv_bufs_force specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1587:  if (vector_size(strvec) >= 2) {",
          "1588:   res = check_true_false(strvec_slot(strvec,1));",
          "1589:   if (res < 0) {",
          "1591:    return;",
          "1592:   }",
          "1593:  }",
          "",
          "[Removed Lines]",
          "1590:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global lvs_netlink_cmd_rcv_bufs_force specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1590:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global lvs_netlink_cmd_rcv_bufs_force specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1603:  if (vector_size(strvec) >= 2) {",
          "1604:   res = check_true_false(strvec_slot(strvec,1));",
          "1605:   if (res < 0) {",
          "1607:    return;",
          "1608:   }",
          "1609:  }",
          "",
          "[Removed Lines]",
          "1606:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global rs_init_notifies specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1606:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global rs_init_notifies specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1619:  if (vector_size(strvec) >= 2) {",
          "1620:   res = check_true_false(strvec_slot(strvec,1));",
          "1621:   if (res < 0) {",
          "1623:    return;",
          "1624:   }",
          "1625:  }",
          "",
          "[Removed Lines]",
          "1622:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global no_checker_emails specified\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1622:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid value '%s' for global no_checker_emails specified\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1633: {",
          "1634:  long umask_long;",
          "1635:  mode_t umask_bits = 0;",
          "1637:  char *endptr;",
          "1638:  unsigned i;",
          "1641:  if (umask_cmdline) {",
          "1642:   log_message(LOG_INFO, \"umask command line option specified, ignoring config option\");",
          "",
          "[Removed Lines]",
          "1636:  char *mask = strvec_slot(strvec, 1);",
          "1639:  char *p;",
          "",
          "[Added Lines]",
          "1636:  const char *mask = strvec_slot(strvec, 1);",
          "1639:  const char *p;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1666:       continue;",
          "1667:      }",
          "1670:      return;",
          "1671:     }",
          "",
          "[Removed Lines]",
          "1669:      report_config_error(CONFIG_GENERAL_ERROR, \"Invalid umask syntax %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1669:      report_config_error(CONFIG_GENERAL_ERROR, \"Invalid umask syntax %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1712:  double startup_delay;",
          "1714:  if (!read_double_strvec(strvec, 1, &startup_delay, 0.001F / TIMER_HZ, UINT_MAX / TIMER_HZ, true))",
          "1716:  else",
          "1717:   global_data->vrrp_startup_delay = (unsigned)(startup_delay * TIMER_HZ);",
          "1719:  if (global_data->vrrp_startup_delay >= 60 * TIMER_HZ)",
          "1721: }",
          "1723: static void",
          "",
          "[Removed Lines]",
          "1715:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_startup_delay '%s' is invalid\", FMT_STR_VSLOT(strvec, 1));",
          "1720:   log_message(LOG_INFO, \"The vrrp_startup_delay is very large - %s seconds\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1715:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_startup_delay '%s' is invalid\", strvec_slot(strvec, 1));",
          "1720:   log_message(LOG_INFO, \"The vrrp_startup_delay is very large - %s seconds\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1733:  unsigned val;",
          "1735:  if (!read_unsigned_strvec(strvec, 1, &val, 0, UINT_MAX, false)) {",
          "1737:   return;",
          "1738:  }",
          "",
          "[Removed Lines]",
          "1736:   report_config_error(CONFIG_GENERAL_ERROR, \"random_seed %s invalid\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1736:   report_config_error(CONFIG_GENERAL_ERROR, \"random_seed %s invalid\", strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/include/vrrp_ip_rule_route_parser.h||keepalived/include/vrrp_ip_rule_route_parser.h": [
          "File: keepalived/include/vrrp_ip_rule_route_parser.h -> keepalived/include/vrrp_ip_rule_route_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"vrrp_iproute.h\"",
          "31: #endif",
          "34: extern bool get_u8(uint8_t *, const char *, uint8_t, const char*);",
          "35: extern bool get_u32(uint32_t *, const char *, uint32_t, const char*);",
          "36: extern bool get_u16(uint16_t *, const char *, uint16_t, const char*);",
          "",
          "[Removed Lines]",
          "33: extern bool get_realms(uint32_t *, char *);",
          "",
          "[Added Lines]",
          "33: extern bool get_realms(uint32_t *, const char *);",
          "",
          "---------------"
        ],
        "keepalived/include/vrrp_ipaddress.h||keepalived/include/vrrp_ipaddress.h": [
          "File: keepalived/include/vrrp_ipaddress.h -> keepalived/include/vrrp_ipaddress.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: extern void free_ipaddress(void *);",
          "117: extern void format_ipaddress(const ip_address_t *, char *, size_t);",
          "118: extern void dump_ipaddress(FILE *, const void *);",
          "121: extern void alloc_ipaddress(list, const vector_t *, const interface_t *, bool);",
          "122: extern void get_diff_address(vrrp_t *, vrrp_t *, list);",
          "123: extern void clear_address_list(list, bool);",
          "",
          "[Removed Lines]",
          "119: extern ip_address_t *parse_ipaddress(ip_address_t *, char *, bool);",
          "120: extern ip_address_t *parse_route(char *);",
          "",
          "[Added Lines]",
          "119: extern ip_address_t *parse_ipaddress(ip_address_t *, const char *, bool);",
          "120: extern ip_address_t *parse_route(const char *);",
          "",
          "---------------"
        ],
        "keepalived/include/vrrp_track.h||keepalived/include/vrrp_track.h": [
          "File: keepalived/include/vrrp_track.h -> keepalived/include/vrrp_track.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "208: extern void alloc_track_bfd(struct _vrrp_t *, const vector_t *);",
          "209: extern void alloc_group_track_bfd(struct _vrrp_sgroup *, const vector_t *);",
          "210: #endif",
          "212: extern void update_script_priorities(vrrp_script_t *, bool);",
          "213: extern void down_instance(struct _vrrp_t *);",
          "214: extern void vrrp_set_effective_priority(struct _vrrp_t *);",
          "",
          "[Removed Lines]",
          "211: extern vrrp_script_t *find_script_by_name(char *) __attribute__ ((pure));",
          "",
          "[Added Lines]",
          "211: extern vrrp_script_t *find_script_by_name(const char *) __attribute__ ((pure));",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_data.c||keepalived/vrrp/vrrp_data.c": [
          "File: keepalived/vrrp/vrrp_data.c -> keepalived/vrrp/vrrp_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:  if (inet_stosockaddr(strvec_slot(strvec, 0), NULL, peer)) {",
          "781:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: VRRP instance[%s] malformed unicast\"",
          "782:          \" peer address[%s]. Skipping...\"",
          "784:   FREE(peer);",
          "785:   return;",
          "786:  }",
          "",
          "[Removed Lines]",
          "783:        , vrrp->iname, FMT_STR_VSLOT(strvec, 0));",
          "",
          "[Added Lines]",
          "783:        , vrrp->iname, strvec_slot(strvec, 0));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "790:  else if (peer->ss_family != vrrp->family) {",
          "791:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: VRRP instance[%s] and unicast peer address\"",
          "792:          \"[%s] MUST be of the same family !!! Skipping...\"",
          "794:   FREE(peer);",
          "795:   return;",
          "796:  }",
          "",
          "[Removed Lines]",
          "793:        , vrrp->iname, FMT_STR_VSLOT(strvec, 0));",
          "",
          "[Added Lines]",
          "793:        , vrrp->iname, strvec_slot(strvec, 0));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "926:   if (vrrp->family == AF_UNSPEC)",
          "927:    vrrp->family = address_family;",
          "928:   else if (address_family != vrrp->family) {",
          "930:    free_list_element(vrrp->vip, vrrp->vip->tail);",
          "931:   }",
          "932:  }",
          "",
          "[Removed Lines]",
          "929:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s): address family must match VRRP instance [%s] - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 0));",
          "",
          "[Added Lines]",
          "929:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s): address family must match VRRP instance [%s] - ignoring\", vrrp->iname, strvec_slot(strvec, 0));",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_ip_rule_route_parser.c||keepalived/vrrp/vrrp_ip_rule_route_parser.c": [
          "File: keepalived/vrrp/vrrp_ip_rule_route_parser.c -> keepalived/vrrp/vrrp_ip_rule_route_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"parser.h\"",
          "43: bool",
          "45: {",
          "46:  uint32_t val, val1;",
          "47:  char *end;",
          "49:  if ((end = strchr(str,'/')))",
          "52:  if (!find_rttables_realms(str, &val))",
          "53:   goto err;",
          "",
          "[Removed Lines]",
          "44: get_realms(uint32_t *realms, char *str)",
          "",
          "[Added Lines]",
          "44: get_realms(uint32_t *realms, const char *str)",
          "50:   str = STRNDUP(str,  end - str);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   val <<= 16;",
          "60:   val |= val1;",
          "63:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   FREE_CONST(str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: err:",
          "70:  if (end)",
          "72:  return true;",
          "73: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   FREE_CONST(str);",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_ipaddress.c||keepalived/vrrp/vrrp_ipaddress.c": [
          "File: keepalived/vrrp/vrrp_ipaddress.c -> keepalived/vrrp/vrrp_ipaddress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310: }",
          "312: ip_address_t *",
          "314: {",
          "315:  ip_address_t *new = ip_address;",
          "316:  void *addr;",
          "",
          "[Removed Lines]",
          "313: parse_ipaddress(ip_address_t *ip_address, char *str, bool allow_subnet_mask)",
          "",
          "[Added Lines]",
          "313: parse_ipaddress(ip_address_t *ip_address, const char *str, bool allow_subnet_mask)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355: }",
          "357: ip_address_t *",
          "359: {",
          "360:  ip_address_t *new = (ip_address_t *)MALLOC(sizeof(ip_address_t));",
          "",
          "[Removed Lines]",
          "358: parse_route(char *str)",
          "",
          "[Added Lines]",
          "358: parse_route(const char *str)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:  ip_address_t *new;",
          "393:  interface_t *ifp_local;",
          "395:  unsigned int i = 0, addr_idx = 0;",
          "396:  uint8_t scope;",
          "397:  bool param_avail;",
          "398:  bool param_missing = false;",
          "400:  ip_address_t peer = { .ifa.ifa_family = AF_UNSPEC };",
          "401:  int brd_len = 0;",
          "402:  uint32_t mask;",
          "",
          "[Removed Lines]",
          "394:  char *str;",
          "399:  char *param;",
          "",
          "[Added Lines]",
          "394:  const char *str;",
          "399:  const char *param;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "426:    }",
          "428:    if (new->ifp) {",
          "430:     FREE(new);",
          "431:     return;",
          "432:    }",
          "433:    if (!(ifp_local = if_get_by_ifname(strvec_slot(strvec, ++i), IF_CREATE_IF_DYNAMIC))) {",
          "434:     report_config_error(CONFIG_GENERAL_ERROR, \"WARNING - interface %s for ip address %s doesn't exist\",",
          "436:     FREE(new);",
          "437:     return;",
          "438:    }",
          "",
          "[Removed Lines]",
          "429:     report_config_error(CONFIG_GENERAL_ERROR, \"Cannot specify static ipaddress device more than once for %s\", FMT_STR_VSLOT(strvec, addr_idx));",
          "435:       FMT_STR_VSLOT(strvec, i), FMT_STR_VSLOT(strvec, addr_idx));",
          "",
          "[Added Lines]",
          "429:     report_config_error(CONFIG_GENERAL_ERROR, \"Cannot specify static ipaddress device more than once for %s\", strvec_slot(strvec, addr_idx));",
          "435:       strvec_slot(strvec, i), strvec_slot(strvec, addr_idx));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "444:    }",
          "446:    if (!find_rttables_scope(strvec_slot(strvec, ++i), &scope))",
          "448:    else",
          "449:     new->ifa.ifa_scope = scope;",
          "450:   } else if (!strcmp(str, \"broadcast\") || !strcmp(str, \"brd\")) {",
          "",
          "[Removed Lines]",
          "447:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid scope '%s' specified for %s - ignoring\", FMT_STR_VSLOT(strvec,i), FMT_STR_VSLOT(strvec, addr_idx));",
          "",
          "[Added Lines]",
          "447:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid scope '%s' specified for %s - ignoring\", strvec_slot(strvec,i), strvec_slot(strvec, addr_idx));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "456:    if (IP_IS6(new)) {",
          "457:     report_config_error(CONFIG_GENERAL_ERROR, \"VRRP is trying to assign a broadcast %s to the IPv6 address %s !!?? \"",
          "458:             \"WTF... skipping VIP...\"",
          "460:     FREE(new);",
          "461:     return;",
          "462:    }",
          "",
          "[Removed Lines]",
          "459:           , FMT_STR_VSLOT(strvec, i), FMT_STR_VSLOT(strvec, addr_idx));",
          "",
          "[Added Lines]",
          "459:           , strvec_slot(strvec, i), strvec_slot(strvec, addr_idx));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "470:     brd_len = -1;",
          "471:    else if (!inet_pton(AF_INET, param, &new->u.sin.sin_brd)) {",
          "472:     report_config_error(CONFIG_GENERAL_ERROR, \"VRRP is trying to assign invalid broadcast %s. \"",
          "474:     FREE(new);",
          "475:     return;",
          "476:    }",
          "",
          "[Removed Lines]",
          "473:             \"skipping VIP...\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "473:             \"skipping VIP...\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "491:    i++;",
          "492:    if (new->have_peer) {",
          "494:     continue;",
          "495:    }",
          "497:    if (!parse_ipaddress(&peer, strvec_slot(strvec,i), false))",
          "499:    else if (peer.ifa.ifa_family != new->ifa.ifa_family)",
          "501:    else {",
          "502:     if ((new->ifa.ifa_family == AF_INET6 && new->ifa.ifa_prefixlen != 128) ||",
          "503:         (new->ifa.ifa_family == AF_INET && new->ifa.ifa_prefixlen != 32))",
          "",
          "[Removed Lines]",
          "493:     report_config_error(CONFIG_GENERAL_ERROR, \"Peer %s - another peer has already been specified\", FMT_STR_VSLOT(strvec, i));",
          "498:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid peer address %s\", FMT_STR_VSLOT(strvec, i));",
          "500:     report_config_error(CONFIG_GENERAL_ERROR, \"Peer address %s does not match address family\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "493:     report_config_error(CONFIG_GENERAL_ERROR, \"Peer %s - another peer has already been specified\", strvec_slot(strvec, i));",
          "498:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid peer address %s\", strvec_slot(strvec, i));",
          "500:     report_config_error(CONFIG_GENERAL_ERROR, \"Peer address %s does not match address family\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "542:    }",
          "543:    i++;",
          "544:    if (new->track_group) {",
          "546:     break;",
          "547:    }",
          "548:    if (!(new->track_group = find_track_group(strvec_slot(strvec, i))))",
          "550:   } else",
          "551:    report_config_error(CONFIG_GENERAL_ERROR, \"Unknown configuration entry '%s' for ip address - ignoring\", str);",
          "552:   i++;",
          "",
          "[Removed Lines]",
          "545:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s is a duplicate\", FMT_STR_VSLOT(strvec, i));",
          "549:                                 report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s not found\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "545:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s is a duplicate\", strvec_slot(strvec, i));",
          "549:                                 report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s not found\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "556:  if (param_missing) {",
          "558:   free(new);",
          "559:   return;",
          "560:  }",
          "",
          "[Removed Lines]",
          "557:   report_config_error(CONFIG_GENERAL_ERROR, \"No %s parameter specified for %s\", str, FMT_STR_VSLOT(strvec, addr_idx));",
          "",
          "[Added Lines]",
          "557:   report_config_error(CONFIG_GENERAL_ERROR, \"No %s parameter specified for %s\", str, strvec_slot(strvec, addr_idx));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "581:    global_data->default_ifp = if_get_by_ifname(DFLT_INT, IF_CREATE_IF_DYNAMIC);",
          "582:    if (!global_data->default_ifp) {",
          "583:     report_config_error(CONFIG_GENERAL_ERROR, \"Default interface %s doesn't exist for static address %s.\",",
          "585:     FREE(new);",
          "586:     return;",
          "587:    }",
          "",
          "[Removed Lines]",
          "584:        DFLT_INT, FMT_STR_VSLOT(strvec, addr_idx));",
          "",
          "[Added Lines]",
          "584:        DFLT_INT, strvec_slot(strvec, addr_idx));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "592:  if (new->ifa.ifa_family == AF_INET6) {",
          "593:   if (new->ifa.ifa_scope) {",
          "595:    new->ifa.ifa_scope = 0;",
          "596:   }",
          "597:   if (new->label) {",
          "599:    FREE(new->label);",
          "600:    new->label = NULL;",
          "601:   }",
          "",
          "[Removed Lines]",
          "594:    report_config_error(CONFIG_GENERAL_ERROR, \"Cannot specify scope for IPv6 addresses (%s) - ignoring scope\", FMT_STR_VSLOT(strvec, addr_idx));",
          "598:    report_config_error(CONFIG_GENERAL_ERROR, \"Cannot specify label for IPv6 addresses (%s) - ignoring label\", FMT_STR_VSLOT(strvec, addr_idx));",
          "",
          "[Added Lines]",
          "594:    report_config_error(CONFIG_GENERAL_ERROR, \"Cannot specify scope for IPv6 addresses (%s) - ignoring scope\", strvec_slot(strvec, addr_idx));",
          "598:    report_config_error(CONFIG_GENERAL_ERROR, \"Cannot specify label for IPv6 addresses (%s) - ignoring label\", strvec_slot(strvec, addr_idx));",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_iproute.c||keepalived/vrrp/vrrp_iproute.c": [
          "File: keepalived/vrrp/vrrp_iproute.c -> keepalived/vrrp/vrrp_iproute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "907: #if HAVE_DECL_LWTUNNEL_ENCAP_MPLS",
          "908: static int parse_encap_mpls(const vector_t *strvec, unsigned int *i_ptr, encap_t *encap)",
          "909: {",
          "912:  encap->type = LWTUNNEL_ENCAP_MPLS;",
          "",
          "[Removed Lines]",
          "910:  char *str;",
          "",
          "[Added Lines]",
          "910:  const char *str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "929: static int parse_encap_ip(const vector_t *strvec, unsigned int *i_ptr, encap_t *encap)",
          "930: {",
          "931:  unsigned int i = *i_ptr;",
          "934:  encap->type = LWTUNNEL_ENCAP_IP;",
          "",
          "[Removed Lines]",
          "932:  char *str, *str1;",
          "",
          "[Added Lines]",
          "932:  const char *str, *str1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013: static",
          "1014: int parse_encap_ila(const vector_t *strvec, unsigned int *i_ptr, encap_t *encap)",
          "1015: {",
          "1018:  encap->type = LWTUNNEL_ENCAP_ILA;",
          "",
          "[Removed Lines]",
          "1016:  char *str;",
          "",
          "[Added Lines]",
          "1016:  const char *str;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037: int parse_encap_ip6(const vector_t *strvec, unsigned int *i_ptr, encap_t *encap)",
          "1038: {",
          "1039:  unsigned int i = *i_ptr;",
          "1042:  encap->type = LWTUNNEL_ENCAP_IP6;",
          "",
          "[Removed Lines]",
          "1040:  char *str, *str1;",
          "",
          "[Added Lines]",
          "1040:  const char *str, *str1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1118: static bool",
          "1119: parse_encap(const vector_t *strvec, unsigned int *i, encap_t *encap)",
          "1120: {",
          "1123:  if (vector_size(strvec) <= ++*i) {",
          "1124:   report_config_error(CONFIG_GENERAL_ERROR, \"Missing encap type\");",
          "",
          "[Removed Lines]",
          "1121:  char *str;",
          "",
          "[Added Lines]",
          "1121:  const char *str;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1154: {",
          "1155:  uint8_t family = AF_UNSPEC;",
          "1156:  nexthop_t *new;",
          "1158:  uint32_t val;",
          "1160:  if (!LIST_EXISTS(route->nhs))",
          "",
          "[Removed Lines]",
          "1157:  char *str;",
          "",
          "[Added Lines]",
          "1157:  const char *str;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1231:    else if (!strcmp(str, \"realms\")) {",
          "1233:     if (get_realms(&new->realms, strvec_slot(strvec, ++i))) {",
          "1235:      goto err;",
          "1236:     }",
          "1237:     if (route->family == AF_UNSPEC)",
          "",
          "[Removed Lines]",
          "1234:      report_config_error(CONFIG_GENERAL_ERROR, \"Invalid realms %s for route\", FMT_STR_VSLOT(strvec,i));",
          "",
          "[Added Lines]",
          "1234:      report_config_error(CONFIG_GENERAL_ERROR, \"Invalid realms %s for route\", strvec_slot(strvec,i));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1257:  }",
          "1259:  if (i < vector_size(strvec)) {",
          "1261:   goto err;",
          "1262:  }",
          "",
          "[Removed Lines]",
          "1260:   report_config_error(CONFIG_GENERAL_ERROR, \"Route has trailing nonsense after nexthops - %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1260:   report_config_error(CONFIG_GENERAL_ERROR, \"Route has trailing nonsense after nexthops - %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1272: {",
          "1273:  ip_route_t *new;",
          "1274:  interface_t *ifp;",
          "1276:  uint32_t val;",
          "1277:  uint8_t val8;",
          "1278:  unsigned int i = 0;",
          "1279:  bool do_nexthop = false;",
          "1280:  bool raw;",
          "1281:  uint8_t family;",
          "1284:  new = (ip_route_t *) MALLOC(sizeof(ip_route_t));",
          "",
          "[Removed Lines]",
          "1275:  char *str;",
          "1282:  char *dest = NULL;",
          "",
          "[Added Lines]",
          "1275:  const char *str;",
          "1282:  const char *dest = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1316:     FREE(new->pref_src);",
          "1317:    new->pref_src = parse_ipaddress(NULL, strvec_slot(strvec, ++i), false);",
          "1318:    if (!new->pref_src) {",
          "1320:     goto err;",
          "1321:    }",
          "1322:    if (new->family == AF_UNSPEC)",
          "",
          "[Removed Lines]",
          "1319:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid route src address %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1319:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid route src address %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1364:     FREE(new->via);",
          "1365:    new->via = parse_ipaddress(NULL, str, false);",
          "1366:    if (!new->via) {",
          "1368:     goto err;",
          "1369:    }",
          "1370:    if (new->family == AF_UNSPEC)",
          "",
          "[Removed Lines]",
          "1367:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid route via address %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1367:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid route via address %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1379:     FREE(new->src);",
          "1380:    new->src = parse_route(strvec_slot(strvec, ++i));",
          "1381:    if (!new->src) {",
          "1383:     goto err;",
          "1384:    }",
          "1385:    if (new->src->ifa.ifa_family != AF_INET6) {",
          "1387:     goto err;",
          "1388:    }",
          "1389:    if (new->family == AF_UNSPEC)",
          "",
          "[Removed Lines]",
          "1382:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid route from address %s\", FMT_STR_VSLOT(strvec, i));",
          "1386:     report_config_error(CONFIG_GENERAL_ERROR, \"route from address only supported with IPv6 (%s)\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1382:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid route from address %s\", strvec_slot(strvec, i));",
          "1386:     report_config_error(CONFIG_GENERAL_ERROR, \"route from address only supported with IPv6 (%s)\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1396:   else if (!strcmp(str, \"tos\") || !strcmp(str,\"dsfield\")) {",
          "1398:    if (!find_rttables_dsfield(strvec_slot(strvec, ++i), &val8)) {",
          "1400:     goto err;",
          "1401:    }",
          "",
          "[Removed Lines]",
          "1399:     report_config_error(CONFIG_GENERAL_ERROR, \"TOS value %s is invalid\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1399:     report_config_error(CONFIG_GENERAL_ERROR, \"TOS value %s is invalid\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1405:   }",
          "1406:   else if (!strcmp(str, \"table\")) {",
          "1407:    if (!find_rttables_table(strvec_slot(strvec, ++i), &val)) {",
          "1409:     goto err;",
          "1410:    }",
          "1411:    new->table = val;",
          "1412:   }",
          "1413:   else if (!strcmp(str, \"protocol\")) {",
          "1414:    if (!find_rttables_proto(strvec_slot(strvec, ++i), &val8)) {",
          "1416:     goto err;",
          "1417:    }",
          "1418:    new->protocol = val8;",
          "",
          "[Removed Lines]",
          "1408:     report_config_error(CONFIG_GENERAL_ERROR, \"Routing table %s not found for route\", FMT_STR_VSLOT(strvec, i));",
          "1415:     report_config_error(CONFIG_GENERAL_ERROR, \"Protocol %s not found or invalid for route\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1408:     report_config_error(CONFIG_GENERAL_ERROR, \"Routing table %s not found for route\", strvec_slot(strvec, i));",
          "1415:     report_config_error(CONFIG_GENERAL_ERROR, \"Protocol %s not found or invalid for route\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1421:   else if (!strcmp(str, \"scope\")) {",
          "1423:    if (!find_rttables_scope(strvec_slot(strvec, ++i), &val8)) {",
          "1425:     goto err;",
          "1426:    }",
          "1427:    new->scope = val8;",
          "",
          "[Removed Lines]",
          "1424:     report_config_error(CONFIG_GENERAL_ERROR, \"Scope %s not found or invalid for route\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1424:     report_config_error(CONFIG_GENERAL_ERROR, \"Scope %s not found or invalid for route\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1500:    }",
          "1501:    if (get_time_rtt(&new->rtt, strvec_slot(strvec, i), &raw) ||",
          "1502:        (!raw && new->rtt >= UINT32_MAX / 8)) {",
          "1504:     goto err;",
          "1505:    }",
          "1506:    if (raw)",
          "",
          "[Removed Lines]",
          "1503:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rtt %s for route\", FMT_STR_VSLOT(strvec,i));",
          "",
          "[Added Lines]",
          "1503:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rtt %s for route\", strvec_slot(strvec,i));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1514:    }",
          "1515:    if (get_time_rtt(&new->rttvar, strvec_slot(strvec, i), &raw) ||",
          "1516:        (!raw && new->rtt >= UINT32_MAX / 4)) {",
          "1518:     goto err;",
          "1519:    }",
          "1520:    if (raw)",
          "",
          "[Removed Lines]",
          "1517:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rttvar %s for route\", FMT_STR_VSLOT(strvec,i));",
          "",
          "[Added Lines]",
          "1517:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rttvar %s for route\", strvec_slot(strvec,i));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1555:   }",
          "1556:   else if (!strcmp(str, \"realms\")) {",
          "1557:    if (get_realms(&new->realms, strvec_slot(strvec, ++i))) {",
          "1559:     goto err;",
          "1560:    }",
          "1561:    if (new->family == AF_INET6) {",
          "",
          "[Removed Lines]",
          "1558:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid realms %s for route\", FMT_STR_VSLOT(strvec,i));",
          "",
          "[Added Lines]",
          "1558:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid realms %s for route\", strvec_slot(strvec,i));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1570:     i++;",
          "1571:    }",
          "1572:    if (get_time_rtt(&new->rto_min, strvec_slot(strvec, i), &raw)) {",
          "1574:     goto err;",
          "1575:    }",
          "1576:    new->mask |= IPROUTE_BIT_RTO_MIN;",
          "",
          "[Removed Lines]",
          "1573:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rto_min value %s specified for route\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1573:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rto_min value %s specified for route\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1591:    if (!strcmp(\"ecn\", strvec_slot(strvec, i)))",
          "1592:     new->features |= RTAX_FEATURE_ECN;",
          "1593:    else",
          "1595:   }",
          "1596:   else if (!strcmp(str, \"quickack\")) {",
          "1597:    i++;",
          "",
          "[Removed Lines]",
          "1594:     report_config_error(CONFIG_GENERAL_ERROR, \"feature %s not supported\", FMT_STR_VSLOT(strvec,i));",
          "",
          "[Added Lines]",
          "1594:     report_config_error(CONFIG_GENERAL_ERROR, \"feature %s not supported\", strvec_slot(strvec,i));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1690:    nh = MALLOC(sizeof(nexthop_t));",
          "1691:    nh->addr = parse_ipaddress(NULL, strvec_slot(strvec, ++i), false);",
          "1692:    if (!nh->addr) {",
          "1694:     FREE(nh);",
          "1695:     goto err;",
          "1696:    }",
          "",
          "[Removed Lines]",
          "1693:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid \\\"or\\\" address %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1693:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid \\\"or\\\" address %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1708:   else if (allow_track_group && !strcmp(str, \"track_group\")) {",
          "1709:    i++;",
          "1710:    if (new->track_group) {",
          "1712:     break;",
          "1713:    }",
          "1714:    if (!(new->track_group = find_track_group(strvec_slot(strvec, i))))",
          "1716:   }",
          "1717:   else {",
          "1718:    if (!strcmp(str, \"to\"))",
          "",
          "[Removed Lines]",
          "1711:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s is a duplicate\", FMT_STR_VSLOT(strvec, i));",
          "1715:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s not found\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1711:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s is a duplicate\", strvec_slot(strvec, i));",
          "1715:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s not found\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1744:  if (do_nexthop)",
          "1745:   parse_nexthops(strvec, i, new);",
          "1746:  else if (i < vector_size(strvec)) {",
          "1748:   goto err;",
          "1749:  }",
          "",
          "[Removed Lines]",
          "1747:   report_config_error(CONFIG_GENERAL_ERROR, \"Route has trailing nonsense - %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "1747:   report_config_error(CONFIG_GENERAL_ERROR, \"Route has trailing nonsense - %s\", strvec_slot(strvec, i));",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_iprule.c||keepalived/vrrp/vrrp_iprule.c": [
          "File: keepalived/vrrp/vrrp_iprule.c -> keepalived/vrrp/vrrp_iprule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "455: alloc_rule(list rule_list, const vector_t *strvec, __attribute__((unused)) bool allow_track_group)",
          "456: {",
          "457:  ip_rule_t *new;",
          "459:  unsigned int i = 0;",
          "460:  unsigned long val, val1;",
          "461:  unsigned val_unsigned;",
          "",
          "[Removed Lines]",
          "458:  char *str;",
          "",
          "[Added Lines]",
          "458:  const char *str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:     FREE(new->from_addr);",
          "506:    new->from_addr = parse_route(strvec_slot(strvec, ++i));",
          "507:    if (!new->from_addr) {",
          "509:     goto err;",
          "510:    }",
          "511:    if (family == AF_UNSPEC)",
          "",
          "[Removed Lines]",
          "508:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rule from address %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "508:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rule from address %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "521:     FREE(new->to_addr);",
          "522:    new->to_addr = parse_route(strvec_slot(strvec, ++i));",
          "523:    if (!new->to_addr) {",
          "525:     goto err;",
          "526:    }",
          "527:    if (family == AF_UNSPEC)",
          "",
          "[Removed Lines]",
          "524:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rule to address %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "524:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid rule to address %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "535:   else if (!strcmp(str, \"table\") ||",
          "536:     !strcmp(str, \"lookup\")) {",
          "537:    if (!find_rttables_table(strvec_slot(strvec, ++i), &uval32)) {",
          "539:     goto err;",
          "540:    }",
          "541:    if (uval32 == 0) {",
          "",
          "[Removed Lines]",
          "538:     report_config_error(CONFIG_GENERAL_ERROR, \"Routing table %s not found for rule\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "538:     report_config_error(CONFIG_GENERAL_ERROR, \"Routing table %s not found for rule\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "564:   }",
          "565:   else if (!strcmp(str, \"tos\") || !strcmp(str, \"dsfield\")) {",
          "566:    if (!find_rttables_dsfield(strvec_slot(strvec, ++i), &uval8)) {",
          "568:     goto err;",
          "569:    }",
          "",
          "[Removed Lines]",
          "567:     report_config_error(CONFIG_GENERAL_ERROR, \"TOS value %s is invalid\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "567:     report_config_error(CONFIG_GENERAL_ERROR, \"TOS value %s is invalid\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "609:   else if (!strcmp(str, \"realms\")) {",
          "610:    str = strvec_slot(strvec, ++i);",
          "611:    if (get_realms(&uval32, str)) {",
          "613:     goto err;",
          "614:    }",
          "",
          "[Removed Lines]",
          "612:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid realms %s for rule\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "612:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid realms %s for rule\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "635: #if HAVE_DECL_FRA_SUPPRESS_IFGROUP",
          "636:   else if (!strcmp(str, \"suppress_ifgroup\") || !strcmp(str, \"sup_group\")) {",
          "637:    if (!find_rttables_group(strvec_slot(strvec, ++i), &uval32)) {",
          "639:     goto err;",
          "640:    }",
          "641:    new->suppress_group = uval32;",
          "",
          "[Removed Lines]",
          "638:     report_config_error(CONFIG_GENERAL_ERROR, \"suppress_group %s is invalid\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "638:     report_config_error(CONFIG_GENERAL_ERROR, \"suppress_group %s is invalid\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "698: #if HAVE_DECL_FRA_PROTOCOL",
          "699:   else if (!strcmp(str, \"protocol\")) {",
          "700:    if (!read_unsigned_strvec(strvec, ++i, &val_unsigned, 0, UINT8_MAX, false))",
          "702:    else {",
          "703:     new->protocol = val_unsigned;",
          "704:     new->mask |= IPRULE_BIT_PROTOCOL;",
          "",
          "[Removed Lines]",
          "701:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid protocol %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "701:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid protocol %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "709:   else if (!strcmp(str, \"ipproto\")) {",
          "710:    int ip_proto = inet_proto_a2n(strvec_slot(strvec, ++i));",
          "711:    if (ip_proto < 0 || ip_proto > UINT8_MAX)",
          "713:    else {",
          "714:     new->ip_proto = ip_proto;",
          "715:     new->mask |= IPRULE_BIT_IP_PROTO;",
          "",
          "[Removed Lines]",
          "712:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid ipproto %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "712:     report_config_error(CONFIG_GENERAL_ERROR, \"Invalid ipproto %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "725:    if (ret == 1)",
          "726:     sport.end = sport.start;",
          "727:    if (ret != 2)",
          "729:    else {",
          "730:     new->src_port = sport;",
          "731:     new->mask |= IPRULE_BIT_SPORT_RANGE;",
          "",
          "[Removed Lines]",
          "728:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid sport range %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "728:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid sport range %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "741:    if (ret == 1)",
          "742:     dport.end = dport.start;",
          "743:    if (ret != 2)",
          "745:    else {",
          "746:     new->dst_port = dport;",
          "747:     new->mask |= IPRULE_BIT_DPORT_RANGE;",
          "",
          "[Removed Lines]",
          "744:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid dport range %s\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "744:     report_config_error(CONFIG_GENERAL_ERROR, \"invalid dport range %s\", strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "755:   else if (allow_track_group && !strcmp(str, \"track_group\")) {",
          "756:    i++;",
          "757:    if (new->track_group) {",
          "759:     break;",
          "760:    }",
          "761:    if (!(new->track_group = find_track_group(strvec_slot(strvec, i))))",
          "763:   }",
          "764: #endif",
          "765:   else {",
          "",
          "[Removed Lines]",
          "758:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s is a duplicate\", FMT_STR_VSLOT(strvec, i));",
          "762:                                 report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s not found\", FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "758:     report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s is a duplicate\", strvec_slot(strvec, i));",
          "762:                                 report_config_error(CONFIG_GENERAL_ERROR, \"track_group %s not found\", strvec_slot(strvec, i));",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
          "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: {",
          "85:  element e;",
          "86:  static_track_group_t *tg;",
          "89:  if (!strvec)",
          "90:   return;",
          "",
          "[Removed Lines]",
          "87:  char* gname;",
          "",
          "[Added Lines]",
          "87:  const char *gname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:  int lb_type = 0;",
          "174:  if (!(ifp = if_get_by_ifname(vector_slot(strvec, 0), global_data->dynamic_interfaces))) {",
          "176:   return;",
          "177:  }",
          "",
          "[Removed Lines]",
          "175:   report_config_error(CONFIG_FATAL, \"unknown interface %s specified for linkbeat interface\", FMT_STR_VSLOT(strvec, 0));",
          "",
          "[Added Lines]",
          "175:   report_config_error(CONFIG_FATAL, \"unknown interface %s specified for linkbeat interface\", strvec_slot(strvec, 0));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:    lb_type = LB_IOCTL;",
          "195:   if (!lb_type || vector_size(strvec) > 2)",
          "197:  }",
          "199:  ifp->linkbeat_use_polling = true;",
          "",
          "[Removed Lines]",
          "196:    report_config_error(CONFIG_GENERAL_ERROR, \"extra characters %s in linkbeat interface\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "196:    report_config_error(CONFIG_GENERAL_ERROR, \"extra characters %s in linkbeat interface\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:  list l;",
          "217:  element e;",
          "218:  vrrp_sgroup_t *sg;",
          "221:  if (!strvec)",
          "222:   return;",
          "",
          "[Removed Lines]",
          "219:  char* gname;",
          "",
          "[Added Lines]",
          "219:  const char *gname;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307: {",
          "308:  vrrp_sgroup_t *vgroup = LIST_TAIL_DATA(vrrp_data->vrrp_sync_group);",
          "309:  if (vgroup->script_backup) {",
          "311:   return;",
          "312:  }",
          "313:  vgroup->script_backup = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "310:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_backup script already specified - ignoring %s\", vgroup->gname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "310:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_backup script already specified - ignoring %s\", vgroup->gname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318: {",
          "319:  vrrp_sgroup_t *vgroup = LIST_TAIL_DATA(vrrp_data->vrrp_sync_group);",
          "320:  if (vgroup->script_master) {",
          "322:   return;",
          "323:  }",
          "324:  vgroup->script_master = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "321:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_master script already specified - ignoring %s\", vgroup->gname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "321:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_master script already specified - ignoring %s\", vgroup->gname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "329: {",
          "330:  vrrp_sgroup_t *vgroup = LIST_TAIL_DATA(vrrp_data->vrrp_sync_group);",
          "331:  if (vgroup->script_fault) {",
          "333:   return;",
          "334:  }",
          "335:  vgroup->script_fault = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "332:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_fault script already specified - ignoring %s\", vgroup->gname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "332:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_fault script already specified - ignoring %s\", vgroup->gname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "340: {",
          "341:  vrrp_sgroup_t *vgroup = LIST_TAIL_DATA(vrrp_data->vrrp_sync_group);",
          "342:  if (vgroup->script_stop) {",
          "344:   return;",
          "345:  }",
          "346:  vgroup->script_stop = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "343:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_stop script already specified - ignoring %s\", vgroup->gname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "343:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify_stop script already specified - ignoring %s\", vgroup->gname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "351: {",
          "352:  vrrp_sgroup_t *vgroup = LIST_TAIL_DATA(vrrp_data->vrrp_sync_group);",
          "353:  if (vgroup->script) {",
          "355:   return;",
          "356:  }",
          "357:  vgroup->script = set_vrrp_notify_script(strvec, 4);",
          "",
          "[Removed Lines]",
          "354:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify script already specified - ignoring %s\", vgroup->gname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "354:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp group %s: notify script already specified - ignoring %s\", vgroup->gname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "366:  if (vector_size(strvec) >= 2) {",
          "367:   res = check_true_false(strvec_slot(strvec, 1));",
          "368:   if (res == -1) {",
          "370:    return;",
          "371:   }",
          "372:  }",
          "",
          "[Removed Lines]",
          "369:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_group smtp_alert parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "369:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_group smtp_alert parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "392:  list l;",
          "393:  element e;",
          "394:  vrrp_t *vrrp;",
          "397:  global_data->have_vrrp_config = true;",
          "",
          "[Removed Lines]",
          "395:  char *iname;",
          "",
          "[Added Lines]",
          "395:  const char *iname;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "434:  if (vector_size(strvec) >= 2) {",
          "435:   if (strlen(strvec_slot(strvec, 1)) >= IFNAMSIZ) {",
          "437:    return;",
          "438:   }",
          "",
          "[Removed Lines]",
          "436:    report_config_error(CONFIG_GENERAL_ERROR, \"VMAC interface name '%s' too long - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "436:    report_config_error(CONFIG_GENERAL_ERROR, \"VMAC interface name '%s' too long - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "473:  __set_bit(VRRP_IPVLAN_BIT, &vrrp->vmac_flags);",
          "475:  for (i = 1; i < vector_size(strvec); i++) {",
          "477:    if (had_flags)",
          "479:    else {",
          "480:     vrrp->ipvlan_type = 0;",
          "481:     had_flags = true;",
          "",
          "[Removed Lines]",
          "476:   if (!strcmp(FMT_STR_VSLOT(strvec, i), \"bridge\")) {",
          "478:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan type already specified - ignoring '%s'\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "476:   if (!strcmp(strvec_slot(strvec, i), \"bridge\")) {",
          "478:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan type already specified - ignoring '%s'\", vrrp->iname, strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "484:    continue;",
          "485:   }",
          "488:    if (had_flags)",
          "490:    else {",
          "491: #ifdef IPVLAN_F_PRIVATE",
          "492:     vrrp->ipvlan_type = IPVLAN_F_PRIVATE;",
          "493: #else",
          "495: #endif",
          "496:     had_flags = true;",
          "497:    }",
          "",
          "[Removed Lines]",
          "487:   if (!strcmp(FMT_STR_VSLOT(strvec, i), \"private\")) {",
          "489:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan type already specified - ignoring '%s'\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "494:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) kernel doesn't support ipvlan type %s\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "487:   if (!strcmp(strvec_slot(strvec, i), \"private\")) {",
          "489:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan type already specified - ignoring '%s'\", vrrp->iname, strvec_slot(strvec, i));",
          "494:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) kernel doesn't support ipvlan type %s\", vrrp->iname, strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "499:    continue;",
          "500:   }",
          "503:    if (had_flags)",
          "505:    else {",
          "506: #ifdef IPVLAN_F_VEPA",
          "507:     vrrp->ipvlan_type = IPVLAN_F_VEPA;",
          "508: #else",
          "510: #endif",
          "511:     had_flags = true;",
          "512:    }",
          "",
          "[Removed Lines]",
          "502:   if (!strcmp(FMT_STR_VSLOT(strvec, i), \"vepa\")) {",
          "504:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan type already specified - ignoring '%s'\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "509:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) kernel doesn't support ipvlan type %s\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "502:   if (!strcmp(strvec_slot(strvec, i), \"vepa\")) {",
          "504:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan type already specified - ignoring '%s'\", vrrp->iname, strvec_slot(strvec, i));",
          "509:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) kernel doesn't support ipvlan type %s\", vrrp->iname, strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "514:    continue;",
          "515:   }",
          "519:    if (vrrp->ipvlan_addr) {",
          "521:     continue;",
          "522:    }",
          "",
          "[Removed Lines]",
          "517:   if (check_valid_ipaddress(FMT_STR_VSLOT(strvec, i), true)) {",
          "518:    parse_ipaddress(&addr, FMT_STR_VSLOT(strvec, i), true);",
          "520:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan address already specified - ignoring '%s'\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "517:   if (check_valid_ipaddress(strvec_slot(strvec, i), true)) {",
          "518:    parse_ipaddress(&addr, strvec_slot(strvec, i), true);",
          "520:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan address already specified - ignoring '%s'\", vrrp->iname, strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "526:    else if (addr.ifa.ifa_family != vrrp->family) {",
          "527:     report_config_error(CONFIG_GENERAL_ERROR, \"(%s) ipvlan address\"",
          "528:            \"[%s] MUST match vrrp instance family !!! Skipping...\"",
          "530:     continue;",
          "531:    }",
          "",
          "[Removed Lines]",
          "529:          , vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "529:          , vrrp->iname, strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "547:   }",
          "549:   if (vrrp->vmac_ifname[0]) {",
          "551:    continue;",
          "552:   }",
          "556:    continue;",
          "557:   }",
          "562:   if ((ifp = if_get_by_ifname(vrrp->vmac_ifname, IF_NO_CREATE)) &&",
          "",
          "[Removed Lines]",
          "550:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) IPVLAN interface already specified - ignoring '%s'\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "554:   if (strlen(FMT_STR_VSLOT(strvec, i)) >= IFNAMSIZ) {",
          "555:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) IPVLAN interface name '%s' too long - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, i));",
          "559:   strcpy(vrrp->vmac_ifname, FMT_STR_VSLOT(strvec, i));",
          "",
          "[Added Lines]",
          "550:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) IPVLAN interface already specified - ignoring '%s'\", vrrp->iname, strvec_slot(strvec, i));",
          "554:   if (strlen(strvec_slot(strvec, i)) >= IFNAMSIZ) {",
          "555:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) IPVLAN interface name '%s' too long - ignoring\", vrrp->iname, strvec_slot(strvec, i));",
          "559:   strcpy(vrrp->vmac_ifname, strvec_slot(strvec, i));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "583:   if (!strcmp(strvec_slot(strvec, 1), \"never\"))",
          "584:    vrrp->unicast_chksum_compat = CHKSUM_COMPATIBILITY_NEVER;",
          "585:   else",
          "587:  }",
          "588:  else",
          "589:   vrrp->unicast_chksum_compat = CHKSUM_COMPATIBILITY_CONFIG;",
          "",
          "[Removed Lines]",
          "586:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Unknown old_unicast_chksum mode %s - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "586:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Unknown old_unicast_chksum mode %s - ignoring\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "605: static void",
          "606: vrrp_state_handler(const vector_t *strvec)",
          "607: {",
          "609:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "611:  if (!strcmp(str, \"MASTER\"))",
          "",
          "[Removed Lines]",
          "608:  char *str = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "608:  const char *str = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "626: vrrp_int_handler(const vector_t *strvec)",
          "627: {",
          "628:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "631:  if (strlen(name) >= IFNAMSIZ) {",
          "632:   report_config_error(CONFIG_GENERAL_ERROR, \"Interface name '%s' too long - ignoring\", name);",
          "",
          "[Removed Lines]",
          "629:  char *name = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "629:  const char *name = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "699:  if (inet_stosockaddr(strvec_slot(strvec, 1), NULL, saddr)) {",
          "700:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: VRRP instance[%s] malformed\"",
          "701:          \" src address[%s]. Skipping...\"",
          "703:   return;",
          "704:  }",
          "",
          "[Removed Lines]",
          "702:        , vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "702:        , vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "710:  else if (saddr->ss_family != vrrp->family) {",
          "711:   report_config_error(CONFIG_GENERAL_ERROR, \"Configuration error: VRRP instance[%s] and src address\"",
          "712:          \"[%s] MUST be of the same family !!! Skipping...\"",
          "714:   saddr->ss_family = AF_UNSPEC;",
          "715:   vrrp->saddr_from_config = false;",
          "716:  }",
          "",
          "[Removed Lines]",
          "713:        , vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "713:        , vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "729:  unsigned vrid;",
          "731:  if (!read_unsigned_strvec(strvec, 1, &vrid, 1, 255, false)) {",
          "733:   return;",
          "734:  }",
          "",
          "[Removed Lines]",
          "732:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): VRID '%s' not valid - must be between 1 & 255\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "732:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): VRID '%s' not valid - must be between 1 & 255\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "761:  if (!res || adver_int <= 0)",
          "763:  else",
          "764:   vrrp->adver_int = (unsigned)(adver_int * TIMER_HZ);",
          "765: }",
          "",
          "[Removed Lines]",
          "762:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Advert interval (%s) not valid! Must be > 0 - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "762:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Advert interval (%s) not valid! Must be > 0 - ignoring\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "770:  unsigned debug_val;",
          "772:  if (!read_unsigned_strvec(strvec, 1, &debug_val, 0, 4, true))",
          "774:  else",
          "775:   vrrp->debug = debug_val;",
          "776: }",
          "",
          "[Removed Lines]",
          "773:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Debug value '%s' not valid; must be between 0-4\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "773:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Debug value '%s' not valid; must be between 0-4\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "785:   if (res >= 0)",
          "786:    vrrp->skip_check_adv_addr = (bool)res;",
          "787:   else",
          "789:  } else {",
          "791:   vrrp->skip_check_adv_addr = true;",
          "",
          "[Removed Lines]",
          "788:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid skip_check_adv_addr %s specified\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "788:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid skip_check_adv_addr %s specified\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "802:   if (res >= 0)",
          "803:    vrrp->strict_mode = (bool)res;",
          "804:   else",
          "806:  } else {",
          "808:   vrrp->strict_mode = true;",
          "",
          "[Removed Lines]",
          "805:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid strict_mode %s specified\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "805:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid strict_mode %s specified\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "838: {",
          "839:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "840:  if (vrrp->script_backup) {",
          "842:   return;",
          "843:  }",
          "844:  vrrp->script_backup = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "841:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_backup script already specified - ignoring %s\", vrrp->iname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "841:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_backup script already specified - ignoring %s\", vrrp->iname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "849: {",
          "850:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "851:  if (vrrp->script_master) {",
          "853:   return;",
          "854:  }",
          "855:  vrrp->script_master = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "852:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_master script already specified - ignoring %s\", vrrp->iname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "852:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_master script already specified - ignoring %s\", vrrp->iname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "860: {",
          "861:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "862:  if (vrrp->script_fault) {",
          "864:   return;",
          "865:  }",
          "866:  vrrp->script_fault = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "863:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_fault script already specified - ignoring %s\", vrrp->iname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "863:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_fault script already specified - ignoring %s\", vrrp->iname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "871: {",
          "872:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "873:  if (vrrp->script_stop) {",
          "875:   return;",
          "876:  }",
          "877:  vrrp->script_stop = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "874:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_stop script already specified - ignoring %s\", vrrp->iname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "874:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_stop script already specified - ignoring %s\", vrrp->iname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "882: {",
          "883:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "884:  if (vrrp->script) {",
          "886:   return;",
          "887:  }",
          "888:  vrrp->script = set_vrrp_notify_script(strvec, 4);",
          "",
          "[Removed Lines]",
          "885:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify script already specified - ignoring %s\", vrrp->iname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "885:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify script already specified - ignoring %s\", vrrp->iname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "893: {",
          "894:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "895:  if (vrrp->script_master_rx_lower_pri) {",
          "897:   return;",
          "898:  }",
          "899:  vrrp->script_master_rx_lower_pri = set_vrrp_notify_script(strvec, 0);",
          "",
          "[Removed Lines]",
          "896:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_master_rx_lower_pri script already specified - ignoring %s\", vrrp->iname, FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "896:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) notify_master_rx_lower_pri script already specified - ignoring %s\", vrrp->iname, strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "908:  if (vector_size(strvec) >= 2) {",
          "909:   res = check_true_false(strvec_slot(strvec, 1));",
          "910:   if (res == -1) {",
          "912:    return;",
          "913:   }",
          "914:  }",
          "",
          "[Removed Lines]",
          "911:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_instance smtp_alert parameter %s\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "911:    report_config_error(CONFIG_GENERAL_ERROR, \"Invalid vrrp_instance smtp_alert parameter %s\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "923:         if (vector_size(strvec) >= 2) {",
          "924:                 res = check_true_false(strvec_slot(strvec,1));",
          "925:                 if (res < 0) {",
          "927:                         return;",
          "928:                 }",
          "929:         }",
          "",
          "[Removed Lines]",
          "926:                         report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Invalid value '%s' for notify_priority_changes specified\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "926:                         report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Invalid value '%s' for notify_priority_changes specified\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "955:  unsigned delay;",
          "957:  if (!read_unsigned_strvec(strvec, 1, &delay, 0, UINT_MAX / TIMER_HZ, true)) {",
          "959:   return;",
          "960:  }",
          "",
          "[Removed Lines]",
          "958:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_delay '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "958:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_delay '%s' invalid - ignoring\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "968:  unsigned refresh;",
          "970:  if (!read_unsigned_strvec(strvec, 1, &refresh, 0, UINT_MAX, true)) {",
          "972:   vrrp->garp_refresh.tv_sec = 0;",
          "973:  }",
          "974:  else",
          "",
          "[Removed Lines]",
          "971:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): Invalid garp_master_refresh '%s' - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "971:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): Invalid garp_master_refresh '%s' - ignoring\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "986:  if (!read_unsigned_strvec(strvec, 1, &repeats, 0, UINT_MAX, true)) {",
          "988:   return;",
          "989:  }",
          "",
          "[Removed Lines]",
          "987:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_repeat '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "987:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_repeat '%s' invalid - ignoring\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1006:  if (!read_unsigned_strvec(strvec, 1, &repeats, 0, UINT_MAX, true)) {",
          "1008:   return;",
          "1009:  }",
          "",
          "[Removed Lines]",
          "1007:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_refresh_repeat '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1007:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_refresh_repeat '%s' invalid - ignoring\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1023:  unsigned delay;",
          "1025:  if (!read_unsigned_strvec(strvec, 1, &delay, 0, UINT_MAX / TIMER_HZ, true)) {",
          "1027:   return;",
          "1028:  }",
          "",
          "[Removed Lines]",
          "1026:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_lower_prio_delay '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1026:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_lower_prio_delay '%s' invalid - ignoring\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1036:  unsigned garp_lower_prio_rep;",
          "1038:  if (!read_unsigned_strvec(strvec, 1, &garp_lower_prio_rep, 0, INT_MAX, true)) {",
          "1040:   return;",
          "1041:  }",
          "",
          "[Removed Lines]",
          "1039:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): Invalid garp_lower_prio_repeat '%s'\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1039:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): Invalid garp_lower_prio_repeat '%s'\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1053:   if (res >= 0)",
          "1054:    vrrp->lower_prio_no_advert = (unsigned)res;",
          "1055:   else",
          "1057:  } else {",
          "1059:   vrrp->lower_prio_no_advert = true;",
          "",
          "[Removed Lines]",
          "1056:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid lower_prio_no_advert %s specified\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1056:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid lower_prio_no_advert %s specified\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1071:   if (res >= 0)",
          "1072:    vrrp->higher_prio_send_advert = (unsigned)res;",
          "1073:   else",
          "1075:  } else {",
          "1077:   vrrp->higher_prio_send_advert = true;",
          "",
          "[Removed Lines]",
          "1074:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid higher_prio_send_advert %s specified\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1074:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid higher_prio_send_advert %s specified\", vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1099: vrrp_auth_type_handler(const vector_t *strvec)",
          "1100: {",
          "1101:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "1104:  if (!strcmp(str, \"AH\"))",
          "1105:   vrrp->auth_type = VRRP_AUTH_AH;",
          "",
          "[Removed Lines]",
          "1102:  char *str = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "1102:  const char *str = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1112: vrrp_auth_pass_handler(const vector_t *strvec)",
          "1113: {",
          "1114:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "1116:  size_t max_size = sizeof (vrrp->auth_data);",
          "1117:  size_t str_len = strlen(str);",
          "",
          "[Removed Lines]",
          "1115:  char *str = strvec_slot(strvec, 1);",
          "",
          "[Added Lines]",
          "1115:  const char *str = strvec_slot(strvec, 1);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1188:  if (!read_unsigned_strvec(strvec, 1, &interval, 0, UINT_MAX / TIMER_HZ, true)) {",
          "1190:   return;",
          "1191:  }",
          "",
          "[Removed Lines]",
          "1189:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script interval '%s' must be between 1 and %u - ignoring\", vscript->sname, FMT_STR_VSLOT(strvec, 1), UINT_MAX / TIMER_HZ);",
          "",
          "[Added Lines]",
          "1189:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script interval '%s' must be between 1 and %u - ignoring\", vscript->sname, strvec_slot(strvec, 1), UINT_MAX / TIMER_HZ);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1208:  if (!read_unsigned_strvec(strvec, 1, &timeout, 0, UINT_MAX / TIMER_HZ, true)) {",
          "1210:   return;",
          "1211:  }",
          "",
          "[Removed Lines]",
          "1209:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script timeout '%s' invalid - ignoring\", vscript->sname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1209:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script timeout '%s' invalid - ignoring\", vscript->sname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1224:  int weight;",
          "1226:  if (!read_int_strvec(strvec, 1, &weight, -253, 253, true))",
          "1228:  vscript->weight = weight;",
          "1229: }",
          "1230: static void",
          "",
          "[Removed Lines]",
          "1227:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_script %s weight %s must be in [-253, 253]\", vscript->sname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1227:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_script %s weight %s must be in [-253, 253]\", vscript->sname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1234:  unsigned rise;",
          "1236:  if (!read_unsigned_strvec(strvec, 1, &rise, 1, INT_MAX, true)) {",
          "1238:   vscript->rise = 1;",
          "1239:  }",
          "1240:  else",
          "",
          "[Removed Lines]",
          "1237:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script rise value '%s' invalid, defaulting to 1\", vscript->sname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1237:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script rise value '%s' invalid, defaulting to 1\", vscript->sname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1247:  unsigned fall;",
          "1249:  if (!read_unsigned_strvec(strvec, 1, &fall, 1, INT_MAX, true)) {",
          "1251:   vscript->fall = 1;",
          "1252:  }",
          "1253:  else",
          "",
          "[Removed Lines]",
          "1250:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script fall value '%s' invalid, defaulting to 1\", vscript->sname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1250:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script fall value '%s' invalid, defaulting to 1\", vscript->sname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1309: {",
          "1310:  vrrp_tracked_file_t *tfile = LIST_TAIL_DATA(vrrp_data->vrrp_track_files);",
          "1311:  if (tfile->file_path) {",
          "1313:   return;",
          "1314:  }",
          "1315:  tfile->file_path = set_value(strvec);",
          "",
          "[Removed Lines]",
          "1312:   report_config_error(CONFIG_GENERAL_ERROR, \"File already set for track file %s - ignoring %s\", tfile->fname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1312:   report_config_error(CONFIG_GENERAL_ERROR, \"File already set for track file %s - ignoring %s\", tfile->fname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1325:   return;",
          "1326:  }",
          "1327:  if (tfile->weight != 1) {",
          "1329:   return;",
          "1330:  }",
          "1332:  if (!read_int_strvec(strvec, 1, &weight, -254, 254, true)) {",
          "1333:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight (%s) for vrrp_track_file %s must be between \"",
          "1335:   weight = 1;",
          "1336:  }",
          "",
          "[Removed Lines]",
          "1328:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight already set for track file %s - ignoring %s\", tfile->fname, FMT_STR_VSLOT(strvec, 1));",
          "1334:      \"[-254..254] inclusive. Ignoring...\", FMT_STR_VSLOT(strvec, 1), tfile->fname);",
          "",
          "[Added Lines]",
          "1328:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight already set for track file %s - ignoring %s\", tfile->fname, strvec_slot(strvec, 1));",
          "1334:      \"[-254..254] inclusive. Ignoring...\", strvec_slot(strvec, 1), tfile->fname);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1341: vrrp_tfile_init_handler(const vector_t *strvec)",
          "1342: {",
          "1343:  unsigned i;",
          "1345:  vrrp_tracked_file_t *tfile = LIST_TAIL_DATA(vrrp_data->vrrp_track_files);",
          "1346:  int value;",
          "",
          "[Removed Lines]",
          "1344:  char *word;",
          "",
          "[Added Lines]",
          "1344:  const char *word;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1429:  char *p;",
          "1431:  if (tprocess->process_path) {",
          "1433:   return;",
          "1434:  }",
          "1435:  tprocess->process_path = set_value(strvec);",
          "",
          "[Removed Lines]",
          "1432:   report_config_error(CONFIG_GENERAL_ERROR, \"Process already set for track process %s - ignoring %s\", tprocess->pname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1432:   report_config_error(CONFIG_GENERAL_ERROR, \"Process already set for track process %s - ignoring %s\", tprocess->pname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1471:   tprocess->param_match = PARAM_MATCH_PARTIAL;",
          "1472:   tprocess->full_command = true;",
          "1473:  } else",
          "1476: }",
          "1477: static void",
          "",
          "[Removed Lines]",
          "1474:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid param_match type %s - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1474:   report_config_error(CONFIG_GENERAL_ERROR, \"Invalid param_match type %s - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1485:   return;",
          "1486:  }",
          "1487:  if (tprocess->weight) {",
          "1489:   return;",
          "1490:  }",
          "1492:  if (!read_int_strvec(strvec, 1, &weight, -254, 254, true)) {",
          "1493:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight (%s) for vrrp_track_process %s must be between \"",
          "1495:   return;",
          "1496:  }",
          "",
          "[Removed Lines]",
          "1488:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight already set for track process %s - ignoring %s\", tprocess->pname, FMT_STR_VSLOT(strvec, 1));",
          "1494:      \"[-254..254] inclusive. Ignoring...\", FMT_STR_VSLOT(strvec, 1), tprocess->pname);",
          "",
          "[Added Lines]",
          "1488:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight already set for track process %s - ignoring %s\", tprocess->pname, strvec_slot(strvec, 1));",
          "1494:      \"[-254..254] inclusive. Ignoring...\", strvec_slot(strvec, 1), tprocess->pname);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1506:  if (!read_unsigned_strvec(strvec, 1, &quorum, 1, 65535, true)) {",
          "1507:   report_config_error(CONFIG_GENERAL_ERROR, \"Quorum (%s) for vrrp_track_process %s must be between \"",
          "1509:   return;",
          "1510:  }",
          "",
          "[Removed Lines]",
          "1508:      \"[1..65535] inclusive. Ignoring...\", FMT_STR_VSLOT(strvec, 1), tprocess->pname);",
          "",
          "[Added Lines]",
          "1508:      \"[1..65535] inclusive. Ignoring...\", strvec_slot(strvec, 1), tprocess->pname);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1525:  if (!read_unsigned_strvec(strvec, 1, &quorum_max, 0, 65535, true)) {",
          "1526:   report_config_error(CONFIG_GENERAL_ERROR, \"quorum_max (%s) for vrrp_track_process %s must be between \"",
          "1528:   return;",
          "1529:  }",
          "",
          "[Removed Lines]",
          "1527:      \"[0..65535] inclusive. Ignoring...\", FMT_STR_VSLOT(strvec, 1), tprocess->pname);",
          "",
          "[Added Lines]",
          "1527:      \"[0..65535] inclusive. Ignoring...\", strvec_slot(strvec, 1), tprocess->pname);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1553:      \"[0.000001..3600] inclusive. Ignoring...\",",
          "1554:      delay_type == PROCESS_TERMINATE_DELAY ? \"terminate_\" :",
          "1555:      delay_type == PROCESS_FORK_DELAY ? \"fork_\" : \"\",",
          "1557:   return;",
          "1558:  }",
          "",
          "[Removed Lines]",
          "1556:      FMT_STR_VSLOT(strvec, 1), tprocess->pname);",
          "",
          "[Added Lines]",
          "1556:      strvec_slot(strvec, 1), tprocess->pname);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1656:  double val;",
          "1658:  if (!read_double_strvec(strvec, 1, &val, 0, INT_MAX / 1000000, true)) {",
          "1660:   return;",
          "1661:  }",
          "",
          "[Removed Lines]",
          "1659:   report_config_error(CONFIG_GENERAL_ERROR, \"garp_group garp_interval '%s' invalid\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1659:   report_config_error(CONFIG_GENERAL_ERROR, \"garp_group garp_interval '%s' invalid\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1665:  delay->have_garp_interval = true;",
          "1667:  if (delay->garp_interval.tv_sec >= 1)",
          "1669: }",
          "1670: static void",
          "1671: garp_group_gna_interval_handler(const vector_t *strvec)",
          "",
          "[Removed Lines]",
          "1668:   log_message(LOG_INFO, \"The garp_interval is very large - %s seconds\", FMT_STR_VSLOT(strvec,1));",
          "",
          "[Added Lines]",
          "1668:   log_message(LOG_INFO, \"The garp_interval is very large - %s seconds\", strvec_slot(strvec,1));",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1674:  double val;",
          "1676:  if (!read_double_strvec(strvec, 1, &val, 0, INT_MAX / 1000000, true)) {",
          "1678:   return;",
          "1679:  }",
          "",
          "[Removed Lines]",
          "1677:   report_config_error(CONFIG_GENERAL_ERROR, \"garp_group gna_interval '%s' invalid\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1677:   report_config_error(CONFIG_GENERAL_ERROR, \"garp_group gna_interval '%s' invalid\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1683:  delay->have_gna_interval = true;",
          "1685:  if (delay->gna_interval.tv_sec >= 1)",
          "1687: }",
          "1688: static void",
          "1689: garp_group_interface_handler(const vector_t *strvec)",
          "1690: {",
          "1691:  interface_t *ifp = if_get_by_ifname(strvec_slot(strvec, 1), IF_CREATE_IF_DYNAMIC);",
          "1692:  if (!ifp) {",
          "1694:   return;",
          "1695:  }",
          "1697:  if (ifp->garp_delay) {",
          "1699:   return;",
          "1700:  }",
          "",
          "[Removed Lines]",
          "1686:   log_message(LOG_INFO, \"The gna_interval is very large - %s seconds\", FMT_STR_VSLOT(strvec,1));",
          "1693:   report_config_error(CONFIG_GENERAL_ERROR, \"WARNING - interface %s specified for garp_group doesn't exist\", FMT_STR_VSLOT(strvec, 1));",
          "1698:   report_config_error(CONFIG_GENERAL_ERROR, \"garp_group already specified for %s - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1686:   log_message(LOG_INFO, \"The gna_interval is very large - %s seconds\", strvec_slot(strvec,1));",
          "1693:   report_config_error(CONFIG_GENERAL_ERROR, \"WARNING - interface %s specified for garp_group doesn't exist\", strvec_slot(strvec, 1));",
          "1698:   report_config_error(CONFIG_GENERAL_ERROR, \"garp_group already specified for %s - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1736:   ifp = if_get_by_ifname(vector_slot(interface_vec, i), IF_CREATE_IF_DYNAMIC);",
          "1737:   if (!ifp) {",
          "1738:    if (global_data->dynamic_interfaces)",
          "1740:    else",
          "1742:    continue;",
          "1743:   }",
          "1745:   if (ifp->garp_delay) {",
          "1747:    continue;",
          "1748:   }",
          "",
          "[Removed Lines]",
          "1739:     log_message(LOG_INFO, \"WARNING - interface %s specified for garp_group doesn't exist\", FMT_STR_VSLOT(strvec, i));",
          "1741:     report_config_error(CONFIG_GENERAL_ERROR, \"WARNING - interface %s specified for garp_group doesn't exist\", FMT_STR_VSLOT(strvec, i));",
          "1746:    report_config_error(CONFIG_GENERAL_ERROR, \"garp_group already specified for %s - ignoring\", FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "1739:     log_message(LOG_INFO, \"WARNING - interface %s specified for garp_group doesn't exist\", strvec_slot(strvec, i));",
          "1741:     report_config_error(CONFIG_GENERAL_ERROR, \"WARNING - interface %s specified for garp_group doesn't exist\", strvec_slot(strvec, i));",
          "1746:    report_config_error(CONFIG_GENERAL_ERROR, \"garp_group already specified for %s - ignoring\", strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_track.c||keepalived/vrrp/vrrp_track.c": [
          "File: keepalived/vrrp/vrrp_track.c -> keepalived/vrrp/vrrp_track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  interface_t *ifp = NULL;",
          "70:  tracked_if_t *tip = NULL;",
          "71:  int weight = 0;",
          "73:  element e;",
          "75:  ifp = if_get_by_ifname(tracked, IF_CREATE_IF_DYNAMIC);",
          "",
          "[Removed Lines]",
          "72:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "72:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:      !strcmp(strvec_slot(strvec, 1), \"weight\")) {",
          "92:   if (!read_int_strvec(strvec, 2, &weight, -254, 254, true)) {",
          "93:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) weight %s for %s must be between \"",
          "95:    weight = 0;",
          "96:   }",
          "97:   else if (weight == -254 || weight == 254) {",
          "",
          "[Removed Lines]",
          "94:       \"[-253..253] inclusive. Ignoring...\", vrrp->iname, FMT_STR_VSLOT(strvec, 2), tracked);",
          "",
          "[Added Lines]",
          "94:       \"[-253..253] inclusive. Ignoring...\", vrrp->iname, strvec_slot(strvec, 2), tracked);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:  interface_t *ifp;",
          "115:  tracked_if_t *tip;",
          "116:  int weight = 0;",
          "118:  element e;",
          "120:  ifp = if_get_by_ifname(tracked, IF_CREATE_IF_DYNAMIC);",
          "",
          "[Removed Lines]",
          "117:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "117:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154: }",
          "156: vrrp_script_t * __attribute__ ((pure))",
          "158: {",
          "159:  element e;",
          "160:  vrrp_script_t *scr;",
          "",
          "[Removed Lines]",
          "157: find_script_by_name(char *name)",
          "",
          "[Added Lines]",
          "157: find_script_by_name(const char *name)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:  if (LIST_ISEMPTY(vrrp_data->vrrp_script))",
          "163:   return NULL;",
          "167:   if (!strcmp(scr->sname, name))",
          "168:    return scr;",
          "169:  }",
          "",
          "[Removed Lines]",
          "165:  for (e = LIST_HEAD(vrrp_data->vrrp_script); e; ELEMENT_NEXT(e)) {",
          "166:   scr = ELEMENT_DATA(e);",
          "",
          "[Added Lines]",
          "165:  LIST_FOREACH(vrrp_data->vrrp_script, scr, e) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:  vrrp_script_t *vsc;",
          "191:  tracked_sc_t *tsc;",
          "192:  int weight;",
          "194:  element e;",
          "195:  tracked_sc_t *etsc;",
          "",
          "[Removed Lines]",
          "193:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "192:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "244:  vrrp_script_t *vsc = NULL;",
          "245:  tracked_sc_t *tsc = NULL;",
          "246:  int weight = 0;",
          "248:  tracked_sc_t *etsc = NULL;",
          "249:  element e;",
          "",
          "[Removed Lines]",
          "247:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "246:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "328: {",
          "329:  vrrp_tracked_file_t *vsf;",
          "330:  tracked_file_t *tfile;",
          "332:  tracked_file_t *etfile;",
          "333:  element e;",
          "334:  int weight;",
          "",
          "[Removed Lines]",
          "331:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "330:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "356:  if (vector_size(strvec) >= 2) {",
          "357:   if (strcmp(strvec_slot(strvec, 1), \"weight\")) {",
          "358:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) unknown track file option %s - ignoring\",",
          "360:    return;",
          "361:   }",
          "362:   if (vector_size(strvec) >= 3) {",
          "",
          "[Removed Lines]",
          "359:       vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "358:       vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "383: {",
          "384:  vrrp_tracked_file_t *vsf;",
          "385:  tracked_file_t *tfile;",
          "387:  tracked_file_t *etfile;",
          "388:  element e;",
          "389:  int weight;",
          "",
          "[Removed Lines]",
          "386:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "385:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "411:  if (vector_size(strvec) >= 2) {",
          "412:   if (strcmp(strvec_slot(strvec, 1), \"weight\")) {",
          "413:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) unknown track file option %s - ignoring\",",
          "415:    return;",
          "416:   }",
          "417:   if (vector_size(strvec) >= 3) {",
          "",
          "[Removed Lines]",
          "414:       sgroup->gname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "413:       sgroup->gname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "469: {",
          "470:  vrrp_tracked_process_t *vsp;",
          "471:  tracked_process_t *tprocess;",
          "473:  tracked_process_t *etprocess;",
          "474:  element e;",
          "475:  int weight;",
          "",
          "[Removed Lines]",
          "472:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "471:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "494:  if (vector_size(strvec) >= 2) {",
          "495:   if (strcmp(strvec_slot(strvec, 1), \"weight\")) {",
          "496:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) unknown track process option %s - ignoring\",",
          "498:    return;",
          "499:   }",
          "500:   if (vector_size(strvec) >= 3) {",
          "",
          "[Removed Lines]",
          "497:       vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "496:       vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "521: {",
          "522:  vrrp_tracked_process_t *vsp;",
          "523:  tracked_process_t *tprocess;",
          "525:  tracked_process_t *etprocess;",
          "526:  element e;",
          "527:  int weight;",
          "",
          "[Removed Lines]",
          "524:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "523:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "546:  if (vector_size(strvec) >= 2) {",
          "547:   if (strcmp(strvec_slot(strvec, 1), \"weight\")) {",
          "548:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) unknown track process option %s - ignoring\",",
          "550:    return;",
          "551:   }",
          "552:   if (vector_size(strvec) >= 3) {",
          "",
          "[Removed Lines]",
          "549:       sgroup->gname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "548:       sgroup->gname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "602: {",
          "603:  vrrp_tracked_bfd_t *vtb;",
          "604:  tracked_bfd_t *tbfd;",
          "606:  tracked_bfd_t *etbfd;",
          "607:  element e;",
          "608:  int weight;",
          "",
          "[Removed Lines]",
          "605:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "604:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "627:  if (vector_size(strvec) >= 2) {",
          "628:   if (strcmp(strvec_slot(strvec, 1), \"weight\")) {",
          "629:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) unknown track bfd option %s - ignoring\",",
          "631:    return;",
          "632:   }",
          "633:   if (vector_size(strvec) >= 3) {",
          "",
          "[Removed Lines]",
          "630:       vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "629:       vrrp->iname, strvec_slot(strvec, 1));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "654: {",
          "655:  vrrp_tracked_bfd_t *vtb;",
          "656:  tracked_bfd_t *tbfd;",
          "658:  tracked_bfd_t *etbfd;",
          "659:  element e;",
          "660:  int weight;",
          "",
          "[Removed Lines]",
          "657:  char *tracked = strvec_slot(strvec, 0);",
          "",
          "[Added Lines]",
          "656:  const char *tracked = strvec_slot(strvec, 0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "679:  if (vector_size(strvec) >= 2) {",
          "680:   if (strcmp(strvec_slot(strvec, 1), \"weight\")) {",
          "681:    report_config_error(CONFIG_GENERAL_ERROR, \"(%s) unknown track bfd option %s - ignoring\",",
          "683:    return;",
          "684:   }",
          "685:   if (vector_size(strvec) >= 3) {",
          "",
          "[Removed Lines]",
          "682:       sgroup->gname, FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "681:       sgroup->gname, strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "lib/notify.c||lib/notify.c": [
          "File: lib/notify.c -> lib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1054: bool",
          "1055: set_script_uid_gid(const vector_t *strvec, unsigned keyword_offset, uid_t *uid_p, gid_t *gid_p)",
          "1056: {",
          "1060:  username = strvec_slot(strvec, keyword_offset);",
          "1061:  if (vector_size(strvec) > keyword_offset + 1)",
          "",
          "[Removed Lines]",
          "1057:  char *username;",
          "1058:  char *groupname;",
          "",
          "[Added Lines]",
          "1057:  const char *username;",
          "1058:  const char *groupname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1122:  set_script_params_array(strvec_qe, script, extra_params);",
          "1123:  if (!script->args) {",
          "1125:   FREE(script);",
          "1126:   free_strvec(strvec_qe);",
          "1127:   return NULL;",
          "",
          "[Removed Lines]",
          "1124:   log_message(LOG_INFO, \"Unable to parse script '%s' - ignoring\", FMT_STR_VSLOT(strvec_qe, 1));",
          "",
          "[Added Lines]",
          "1124:   log_message(LOG_INFO, \"Unable to parse script '%s' - ignoring\", strvec_slot(strvec_qe, 1));",
          "",
          "---------------"
        ],
        "lib/rttables.c||lib/rttables.c": [
          "File: lib/rttables.c -> lib/rttables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   }",
          "167:   rte->id = (unsigned)id;",
          "170:   if (!rte->name) {",
          "171:    FREE(rte);",
          "172:    free_strvec(strvec);",
          "",
          "[Removed Lines]",
          "169:   rte->name = STRDUP(FMT_STR_VSLOT(strvec, 1));",
          "",
          "[Added Lines]",
          "169:   rte->name = STRDUP(strvec_slot(strvec, 1));",
          "",
          "---------------"
        ],
        "lib/utils.c||lib/utils.c": [
          "File: lib/utils.c -> lib/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "552: bool",
          "554: {",
          "555:  int family;",
          "556:  unsigned long prefixlen;",
          "558:  char *endptr;",
          "559:  union {",
          "560:   struct in_addr in;",
          "561:   struct in6_addr in6;",
          "562:  } addr;",
          "563:  int res;",
          "565:  if (!strchr(str, ':') && !strchr(str, '.'))",
          "566:   return false;",
          "",
          "[Removed Lines]",
          "553: check_valid_ipaddress(char *str, bool allow_subnet_mask)",
          "557:  char *p;",
          "",
          "[Added Lines]",
          "553: check_valid_ipaddress(const char *str, bool allow_subnet_mask)",
          "557:  const char *p;",
          "564:  const char *str_dup = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:   prefixlen = strtoul(p + 1, &endptr, 10);",
          "579:   if (*endptr || prefixlen > (family == AF_INET6 ? 128 : 32))",
          "580:    return false;",
          "582:  }",
          "589:  return res;",
          "590: }",
          "",
          "[Removed Lines]",
          "584:  res = inet_pton(family, str, &addr);",
          "586:  if (p)",
          "",
          "[Added Lines]",
          "582:   str_dup = STRNDUP(str, p - str);",
          "585:  res = inet_pton(family, str_dup ? str_dup : str, &addr);",
          "587:  if (str_dup)",
          "588:   FREE_CONST(str_dup);",
          "",
          "---------------"
        ],
        "lib/utils.h||lib/utils.h": [
          "File: lib/utils.h -> lib/utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "215: extern int inet_stosockaddr(const char *, const char *, struct sockaddr_storage *);",
          "216: extern void inet_ip4tosockaddr(const struct in_addr *, struct sockaddr_storage *);",
          "217: extern void inet_ip6tosockaddr(const struct in6_addr *, struct sockaddr_storage *);",
          "219: extern char *inet_sockaddrtos(const struct sockaddr_storage *);",
          "220: extern const char *inet_sockaddrtopair(const struct sockaddr_storage *);",
          "221: extern const char *inet_sockaddrtotrio(const struct sockaddr_storage *, uint16_t);",
          "",
          "[Removed Lines]",
          "218: extern bool check_valid_ipaddress(char *, bool);",
          "",
          "[Added Lines]",
          "218: extern bool check_valid_ipaddress(const char *, bool);",
          "",
          "---------------"
        ],
        "lib/vector.c||lib/vector.c": [
          "File: lib/vector.c -> lib/vector.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  return old_handler;",
          "47: }",
          "50: {",
          "51:  if (strvec &&",
          "52:      index < vector_size(strvec) &&",
          "",
          "[Removed Lines]",
          "49: void *strvec_slot(const vector_t *strvec, size_t index)",
          "",
          "[Added Lines]",
          "49: const char *",
          "50: strvec_slot(const vector_t *strvec, size_t index)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101: #ifdef _INCLUDE_UNUSED_CODE_",
          "104: vector_insert_slot(vector_t *v, unsigned int index, void *value)",
          "105: {",
          "106:  unsigned int i;",
          "",
          "[Removed Lines]",
          "103: void",
          "",
          "[Added Lines]",
          "104: static void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116: }",
          "121: {",
          "122:  unsigned int size;",
          "123:  vector_t *new = vector_alloc();",
          "",
          "[Removed Lines]",
          "119: vector_t *",
          "120: vector_copy(vector_t *v)",
          "",
          "[Added Lines]",
          "120: static vector_t *",
          "121: vector_copy(const vector_t *v)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136: static void",
          "138: {",
          "139:  if (v->allocated > num)",
          "140:   return;",
          "",
          "[Removed Lines]",
          "137: vector_ensure(vector_t *v, unsigned int num)",
          "",
          "[Added Lines]",
          "138: vector_ensure(const vector_t *v, unsigned int num)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154: static int",
          "156: {",
          "157:  unsigned int i;",
          "",
          "[Removed Lines]",
          "155: vector_empty_slot(vector_t *v)",
          "",
          "[Added Lines]",
          "156: vector_empty_slot(const vector_t *v)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169: }",
          "174: {",
          "175:  unsigned int i;",
          "",
          "[Removed Lines]",
          "172: int",
          "173: vector_set(vector_t *v, void *val)",
          "",
          "[Added Lines]",
          "173: static int",
          "174: vector_set(const vector_t *v, void *val)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "199: #ifdef _INCLUDE_UNUSED_CODE_",
          "202: vector_set_index(vector_t *v, unsigned int i, void *val)",
          "203: {",
          "204:  vector_ensure(v, i);",
          "",
          "[Removed Lines]",
          "201: int",
          "",
          "[Added Lines]",
          "202: static int",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "212: }",
          "217: {",
          "218:  if (i >= v->active)",
          "219:   return NULL;",
          "",
          "[Removed Lines]",
          "215: void *",
          "216: vector_lookup(vector_t *v, unsigned int i)",
          "",
          "[Added Lines]",
          "216: static void *",
          "217: vector_lookup(const vector_t *v, unsigned int i)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "221: }",
          "226: {",
          "227:  vector_ensure(v, i);",
          "228:  return v->slot[i];",
          "",
          "[Removed Lines]",
          "224: void *",
          "225: vector_lookup_ensure(vector_t *v, unsigned int i)",
          "",
          "[Added Lines]",
          "225: static void *",
          "226: vector_lookup_ensure(const vector_t *v, unsigned int i)",
          "",
          "---------------"
        ],
        "lib/vector.h||lib/vector.h": [
          "File: lib/vector.h -> lib/vector.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define vector_active(V) ((V)->active)",
          "47: #define vector_foreach_slot(v,p,i) \\",
          "48:  for (i = 0; i < (v)->allocated && ((p) = (v)->slot[i]); i++)",
          "51: #ifdef _MEM_CHECK_",
          "52: #define vector_alloc()  (memcheck_log(\"vector_alloc\", NULL, (__FILE__), (__func__), (__LINE__)), \\",
          "",
          "[Removed Lines]",
          "49: #define FMT_STR_VSLOT(V,E) ((char*)strvec_slot(V,E))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: extern null_strvec_handler_t register_null_strvec_handler(null_strvec_handler_t);",
          "66: extern null_strvec_handler_t unregister_null_strvec_handler(void);",
          "68: extern vector_t *vector_alloc_r(void) __attribute__ ((malloc));",
          "69: extern void vector_alloc_slot_r(vector_t *);",
          "70: extern void vector_set_slot(vector_t *, void *);",
          "",
          "[Removed Lines]",
          "67: extern void *strvec_slot(const vector_t *strvec, size_t index);",
          "",
          "[Added Lines]",
          "66: extern const char *strvec_slot(const vector_t *strvec, size_t index);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47506045a0cbdd301bdf55f9b5026d3fe941aae2",
      "candidate_info": {
        "commit_hash": "47506045a0cbdd301bdf55f9b5026d3fe941aae2",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/47506045a0cbdd301bdf55f9b5026d3fe941aae2",
        "files": [
          "keepalived/core/main.c"
        ],
        "message": "Allow keepalived to run with --config-test when live instance running\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/core/main.c||keepalived/core/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1409:  }",
          "1410: #endif",
          "1413: #if HAVE_DECL_CLONE_NEWNET",
          "1415: #endif",
          "1417:   if ((syslog_ident = make_syslog_ident(PACKAGE_NAME))) {",
          "1418:    log_message(LOG_INFO, \"Changing syslog ident to %s\", syslog_ident);",
          "1419:    closelog();",
          "",
          "[Removed Lines]",
          "1412:  if (global_data->instance_name",
          "1414:      || global_data->network_namespace",
          "1416:            ) {",
          "",
          "[Added Lines]",
          "1412:  if (!__test_bit(CONFIG_TEST_BIT, &debug) &&",
          "1413:      (global_data->instance_name",
          "1415:       || global_data->network_namespace",
          "1417:            )) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1438:  global_print();",
          "1439: #endif",
          "1444:  }",
          "1446: #if HAVE_DECL_CLONE_NEWNET",
          "",
          "[Removed Lines]",
          "1441:  if (use_pid_dir) {",
          "1443:   create_pid_dir();",
          "",
          "[Added Lines]",
          "1442:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "1443:   if (use_pid_dir) {",
          "1445:    create_pid_dir();",
          "1446:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1452:  }",
          "1453: #endif",
          "1458: #ifdef _WITH_LVS_",
          "1461: #endif",
          "1462: #ifdef _WITH_VRRP_",
          "1465: #endif",
          "1466: #ifdef _WITH_BFD_",
          "1469: #endif",
          "1475: #ifdef _WITH_LVS_",
          "1478: #endif",
          "1479: #ifdef _WITH_VRRP_",
          "1482: #endif",
          "1483: #ifdef _WITH_BFD_",
          "1486: #endif",
          "1492: #ifdef _WITH_LVS_",
          "1495: #endif",
          "1496: #ifdef _WITH_VRRP_",
          "1499: #endif",
          "1500: #ifdef _WITH_BFD_",
          "1503: #endif",
          "1511:  }",
          "",
          "[Removed Lines]",
          "1455:  if (global_data->instance_name) {",
          "1456:   if (!main_pidfile && (main_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR KEEPALIVED_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1457:    free_main_pidfile = true;",
          "1459:   if (!checkers_pidfile && (checkers_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR CHECKERS_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1460:    free_checkers_pidfile = true;",
          "1463:   if (!vrrp_pidfile && (vrrp_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR VRRP_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1464:    free_vrrp_pidfile = true;",
          "1467:   if (!bfd_pidfile && (bfd_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR VRRP_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1468:    free_bfd_pidfile = true;",
          "1470:  }",
          "1472:  if (use_pid_dir) {",
          "1473:   if (!main_pidfile)",
          "1474:    main_pidfile = KEEPALIVED_PID_DIR KEEPALIVED_PID_FILE PID_EXTENSION;",
          "1476:   if (!checkers_pidfile)",
          "1477:    checkers_pidfile = KEEPALIVED_PID_DIR CHECKERS_PID_FILE PID_EXTENSION;",
          "1480:   if (!vrrp_pidfile)",
          "1481:    vrrp_pidfile = KEEPALIVED_PID_DIR VRRP_PID_FILE PID_EXTENSION;",
          "1484:   if (!bfd_pidfile)",
          "1485:    bfd_pidfile = KEEPALIVED_PID_DIR BFD_PID_FILE PID_EXTENSION;",
          "1487:  }",
          "1488:  else",
          "1489:  {",
          "1490:   if (!main_pidfile)",
          "1491:    main_pidfile = PID_DIR KEEPALIVED_PID_FILE PID_EXTENSION;",
          "1493:   if (!checkers_pidfile)",
          "1494:    checkers_pidfile = PID_DIR CHECKERS_PID_FILE PID_EXTENSION;",
          "1497:   if (!vrrp_pidfile)",
          "1498:    vrrp_pidfile = PID_DIR VRRP_PID_FILE PID_EXTENSION;",
          "1501:   if (!bfd_pidfile)",
          "1502:    bfd_pidfile = PID_DIR BFD_PID_FILE PID_EXTENSION;",
          "1504:  }",
          "1507:  if (keepalived_running(daemon_mode)) {",
          "1508:   log_message(LOG_INFO, \"daemon is already running\");",
          "1509:   report_stopped = false;",
          "1510:   goto end;",
          "",
          "[Added Lines]",
          "1458:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "1459:   if (global_data->instance_name) {",
          "1460:    if (!main_pidfile && (main_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR KEEPALIVED_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1461:     free_main_pidfile = true;",
          "1463:    if (!checkers_pidfile && (checkers_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR CHECKERS_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1464:     free_checkers_pidfile = true;",
          "1467:    if (!vrrp_pidfile && (vrrp_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR VRRP_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1468:     free_vrrp_pidfile = true;",
          "1471:    if (!bfd_pidfile && (bfd_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR VRRP_PID_FILE, global_data->instance_name, PID_EXTENSION)))",
          "1472:     free_bfd_pidfile = true;",
          "1474:   }",
          "1476:   if (use_pid_dir) {",
          "1477:    if (!main_pidfile)",
          "1478:     main_pidfile = KEEPALIVED_PID_DIR KEEPALIVED_PID_FILE PID_EXTENSION;",
          "1480:    if (!checkers_pidfile)",
          "1481:     checkers_pidfile = KEEPALIVED_PID_DIR CHECKERS_PID_FILE PID_EXTENSION;",
          "1484:    if (!vrrp_pidfile)",
          "1485:     vrrp_pidfile = KEEPALIVED_PID_DIR VRRP_PID_FILE PID_EXTENSION;",
          "1488:    if (!bfd_pidfile)",
          "1489:     bfd_pidfile = KEEPALIVED_PID_DIR BFD_PID_FILE PID_EXTENSION;",
          "1491:   }",
          "1492:   else",
          "1493:   {",
          "1494:    if (!main_pidfile)",
          "1495:     main_pidfile = PID_DIR KEEPALIVED_PID_FILE PID_EXTENSION;",
          "1497:    if (!checkers_pidfile)",
          "1498:     checkers_pidfile = PID_DIR CHECKERS_PID_FILE PID_EXTENSION;",
          "1501:    if (!vrrp_pidfile)",
          "1502:     vrrp_pidfile = PID_DIR VRRP_PID_FILE PID_EXTENSION;",
          "1505:    if (!bfd_pidfile)",
          "1506:     bfd_pidfile = PID_DIR BFD_PID_FILE PID_EXTENSION;",
          "1508:   }",
          "1511:   if (keepalived_running(daemon_mode)) {",
          "1512:    log_message(LOG_INFO, \"daemon is already running\");",
          "1513:    report_stopped = false;",
          "1514:    goto end;",
          "1515:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e4abe99943d4b1e0df7e95dc925f6a624fa936f",
      "candidate_info": {
        "commit_hash": "2e4abe99943d4b1e0df7e95dc925f6a624fa936f",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/2e4abe99943d4b1e0df7e95dc925f6a624fa936f",
        "files": [
          "configure",
          "configure.ac",
          "doc/keepalived.conf.SYNOPSIS",
          "doc/man/man5/keepalived.conf.5",
          "keepalived/Makefile.am",
          "keepalived/Makefile.in",
          "keepalived/bfd/Makefile.am",
          "keepalived/bfd/Makefile.in",
          "keepalived/bfd/bfd.c",
          "keepalived/bfd/bfd_daemon.c",
          "keepalived/bfd/bfd_data.c",
          "keepalived/bfd/bfd_event.c",
          "keepalived/bfd/bfd_parser.c",
          "keepalived/bfd/bfd_scheduler.c",
          "keepalived/check/check_parser.c",
          "keepalived/core/main.c",
          "keepalived/include/bfd.h",
          "keepalived/include/bfd_daemon.h",
          "keepalived/include/bfd_data.h",
          "keepalived/include/bfd_event.h",
          "keepalived/include/bfd_parser.h",
          "keepalived/include/bfd_scheduler.h",
          "keepalived/include/main.h",
          "keepalived/include/pidfile.h",
          "keepalived/include/vrrp.h",
          "keepalived/include/vrrp_data.h",
          "keepalived/vrrp/vrrp_data.c",
          "keepalived/vrrp/vrrp_parser.c",
          "keepalived/vrrp/vrrp_print.c",
          "keepalived/vrrp/vrrp_scheduler.c",
          "lib/config.h.in",
          "lib/scheduler.h"
        ],
        "message": "Initial import of the BFD framework\n\nThis code was produced by Ilya Voronin <ivoronin@gmail.com>.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "keepalived/Makefile.am||keepalived/Makefile.am",
          "keepalived/Makefile.in||keepalived/Makefile.in",
          "keepalived/bfd/Makefile.am||keepalived/bfd/Makefile.am",
          "keepalived/bfd/Makefile.in||keepalived/bfd/Makefile.in",
          "keepalived/bfd/bfd.c||keepalived/bfd/bfd.c",
          "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c",
          "keepalived/bfd/bfd_data.c||keepalived/bfd/bfd_data.c",
          "keepalived/bfd/bfd_event.c||keepalived/bfd/bfd_event.c",
          "keepalived/bfd/bfd_parser.c||keepalived/bfd/bfd_parser.c",
          "keepalived/bfd/bfd_scheduler.c||keepalived/bfd/bfd_scheduler.c",
          "keepalived/check/check_parser.c||keepalived/check/check_parser.c",
          "keepalived/core/main.c||keepalived/core/main.c",
          "keepalived/include/bfd.h||keepalived/include/bfd.h",
          "keepalived/include/bfd_daemon.h||keepalived/include/bfd_daemon.h",
          "keepalived/include/bfd_data.h||keepalived/include/bfd_data.h",
          "keepalived/include/bfd_event.h||keepalived/include/bfd_event.h",
          "keepalived/include/bfd_parser.h||keepalived/include/bfd_parser.h",
          "keepalived/include/bfd_scheduler.h||keepalived/include/bfd_scheduler.h",
          "keepalived/include/main.h||keepalived/include/main.h",
          "keepalived/include/pidfile.h||keepalived/include/pidfile.h",
          "keepalived/include/vrrp.h||keepalived/include/vrrp.h",
          "keepalived/include/vrrp_data.h||keepalived/include/vrrp_data.h",
          "keepalived/vrrp/vrrp_data.c||keepalived/vrrp/vrrp_data.c",
          "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c",
          "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c",
          "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
          "lib/config.h.in||lib/config.h.in",
          "lib/scheduler.h||lib/scheduler.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/include/main.h||keepalived/include/main.h"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/include/main.h||keepalived/include/main.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: #endif])",
          "112: AC_CONFIG_FILES([Makefile keepalived/Makefile lib/Makefile keepalived/core/Makefile keepalived.spec \\",
          "117: MAINTAINERCLEANFILES=\"*~ *.orig *.rej core core.*\"",
          "118: AC_SUBST(MAINTAINERCLEANFILES)",
          "",
          "[Removed Lines]",
          "113:    genhash/Makefile keepalived/check/Makefile keepalived/vrrp/Makefile doc/Makefile \\",
          "114:    bin_install/Makefile keepalived/dbus/Makefile keepalived/etc/Makefile \\",
          "115:    keepalived/etc/init/Makefile keepalived/etc/init.d/Makefile])",
          "",
          "[Added Lines]",
          "113:    genhash/Makefile keepalived/check/Makefile keepalived/vrrp/Makefile \\",
          "114:    keepalived/bfd/Makefile doc/Makefile bin_install/Makefile keepalived/dbus/Makefile \\",
          "115:    keepalived/etc/Makefile keepalived/etc/init/Makefile keepalived/etc/init.d/Makefile])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   [AS_HELP_STRING([--disable-lvs-64bit-stats], [do not use the LVS 64-bit stats])])",
          "133: AC_ARG_ENABLE(vrrp,",
          "134:   [AS_HELP_STRING([--disable-vrrp], [do not use the VRRP framework])])",
          "135: AC_ARG_WITH(kernel-dir,",
          "136:   [AS_HELP_STRING([--with-kernel-dir=DIR], [path to linux kernel source directory])],",
          "137:   [AS_HELP_STRING([kernel_src_path=\"$withval\"],], [[kernel_src_path=\"\"])])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: AC_ARG_ENABLE(bfd,",
          "137:   [AS_HELP_STRING([--enable-bfd], [use the BFD framework])])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "993:   ])",
          "994: CPPFLAGS=\"$SAV_CPPFLAGS\"",
          "997: IPVS_SYNCD_ATTRIBUTES=No",
          "998: IPVS_64BIT_STATS=No",
          "999: if test \"$enable_lvs\" != no; then",
          "",
          "[Removed Lines]",
          "996: dnl ----[ Checks for LVS and VRRP support ]----",
          "",
          "[Added Lines]",
          "999: dnl ----[ Checks for LVS, VRRP and BFD support ]----",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1068: VRRP_AUTH_SUPPORT=No",
          "1069: MACVLAN_SUPPORT=No",
          "1070: ENABLE_JSON=No",
          "1071: if test \"$enable_vrrp\" != no; then",
          "1072:   VRRP_SUPPORT=Yes",
          "1073:   AC_DEFINE([_WITH_VRRP_], [ 1 ], [Define to 1 if have VRRP support])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074: BFD_SUPPORT=No",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1109:     ENABLE_JSON=Yes",
          "1110:     add_config_opt([JSON])",
          "1111:   fi",
          "1112: fi",
          "1113: AM_CONDITIONAL([WITH_VRRP], [test $VRRP_SUPPORT = Yes])",
          "1114: AM_CONDITIONAL([VRRP_AUTH], [test $VRRP_AUTH_SUPPORT = Yes])",
          "1115: AM_CONDITIONAL([VMAC], [test $MACVLAN_SUPPORT = Yes])",
          "1116: AM_CONDITIONAL([WITH_JSON], [test $ENABLE_JSON = Yes])",
          "1118: if test ${IPVS_SUPPORT} = No -a ${VRRP_SUPPORT} = No; then",
          "1119:   AC_MSG_ERROR([keepalived MUST be compiled with at least one of LVS or VRRP framework])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117:   dnl ----[ BFD support ? ]----",
          "1118:   if test \"${enable_bfd}\" = yes; then",
          "1119:     BFD_SUPPORT=Yes",
          "1120:     AC_DEFINE([_WITH_BFD_], [ 1 ], [Define to 1 if have BFD support])",
          "1121:     add_config_opt([BFD])",
          "1122:   fi",
          "1128: AM_CONDITIONAL([WITH_BFD], [test $BFD_SUPPORT = Yes])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1591:   echo \"Use VRRP authentication  : ${VRRP_AUTH_SUPPORT}\"",
          "1592:   echo \"With ip rules/routes     : ${FIB_ROUTING_SUPPORT}\"",
          "1593: fi",
          "1594: echo \"SNMP vrrp support        : ${SNMP_VRRP_SUPPORT}\"",
          "1595: echo \"SNMP checker support     : ${SNMP_CHECKER_SUPPORT}\"",
          "1596: echo \"SNMP RFCv2 support       : ${SNMP_RFCV2_SUPPORT}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1606: echo \"Use BFD Framework        : ${BFD_SUPPORT}\"",
          "",
          "---------------"
        ],
        "keepalived/Makefile.am||keepalived/Makefile.am": [
          "File: keepalived/Makefile.am -> keepalived/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   DBUS_SUBDIR  = dbus",
          "38: endif",
          "40: keepalived.service: Makefile",
          "41:  @rm -f $@ $@.tmp",
          "42:  @$(edit) '$(srcdir)/$@.in' >$@",
          "44: keepalived.service: $(srcdir)/keepalived.service.in",
          "48: EXTRA_DIST  = keepalived.service.in",
          "52: MOSTLYCLEANFILES = keepalived.service",
          "",
          "[Removed Lines]",
          "46: SUBDIRS   = core $(VRRP_SUBDIR) $(IPVS_SUBDIR) $(DBUS_SUBDIR) etc",
          "50: keepalived_LDADD = core/libcore.a $(IPVS_LIB) $(VRRP_LIB) core/libcore.a ../lib/liblib.a $(KA_LIBS)",
          "",
          "[Added Lines]",
          "40: if WITH_BFD",
          "41:   BFD_SUBDIR  = bfd",
          "42:   BFD_LIB  = bfd/libbfd.a",
          "43: endif",
          "51: SUBDIRS   = core $(VRRP_SUBDIR) $(IPVS_SUBDIR) $(DBUS_SUBDIR) $(BFD_SUBDIR) etc",
          "55: keepalived_LDADD = core/libcore.a $(IPVS_LIB) $(VRRP_LIB) $(BFD_LIB) core/libcore.a ../lib/liblib.a $(KA_LIBS)",
          "",
          "---------------"
        ],
        "keepalived/Makefile.in||keepalived/Makefile.in": [
          "File: keepalived/Makefile.in -> keepalived/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: keepalived_OBJECTS = $(am_keepalived_OBJECTS)",
          "115: am__DEPENDENCIES_1 =",
          "116: keepalived_DEPENDENCIES = core/libcore.a $(IPVS_LIB) $(VRRP_LIB) \\",
          "118: AM_V_P = $(am__v_P_@AM_V@)",
          "119: am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)",
          "120: am__v_P_0 = false",
          "",
          "[Removed Lines]",
          "117:  core/libcore.a ../lib/liblib.a $(am__DEPENDENCIES_1)",
          "",
          "[Added Lines]",
          "117:  $(BFD_LIB) core/libcore.a ../lib/liblib.a \\",
          "118:  $(am__DEPENDENCIES_1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:   done | $(am__uniquify_input)`",
          "216: ETAGS = etags",
          "217: CTAGS = ctags",
          "219: am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp",
          "220: DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)",
          "221: am__relativize = \\",
          "",
          "[Removed Lines]",
          "218: DIST_SUBDIRS = core vrrp check dbus etc",
          "",
          "[Added Lines]",
          "219: DIST_SUBDIRS = core vrrp check dbus bfd etc",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370: @WITH_VRRP_TRUE@VRRP_SUBDIR = vrrp",
          "371: @WITH_VRRP_TRUE@VRRP_LIB = vrrp/libvrrp.a",
          "372: @WITH_DBUS_TRUE@DBUS_SUBDIR = dbus",
          "374: EXTRA_DIST = keepalived.service.in",
          "376: MOSTLYCLEANFILES = keepalived.service",
          "377: sysconfigdir = $(sysconfdir)/sysconfig",
          "378: sysconfig_DATA = etc/sysconfig/keepalived",
          "",
          "[Removed Lines]",
          "373: SUBDIRS = core $(VRRP_SUBDIR) $(IPVS_SUBDIR) $(DBUS_SUBDIR) etc",
          "375: keepalived_LDADD = core/libcore.a $(IPVS_LIB) $(VRRP_LIB) core/libcore.a ../lib/liblib.a $(KA_LIBS)",
          "",
          "[Added Lines]",
          "374: @WITH_BFD_TRUE@BFD_SUBDIR = bfd",
          "375: @WITH_BFD_TRUE@BFD_LIB = bfd/libbfd.a",
          "376: SUBDIRS = core $(VRRP_SUBDIR) $(IPVS_SUBDIR) $(DBUS_SUBDIR) $(BFD_SUBDIR) etc",
          "378: keepalived_LDADD = core/libcore.a $(IPVS_LIB) $(VRRP_LIB) $(BFD_LIB) core/libcore.a ../lib/liblib.a $(KA_LIBS)",
          "",
          "---------------"
        ],
        "keepalived/bfd/Makefile.am||keepalived/bfd/Makefile.am": [
          "File: keepalived/bfd/Makefile.am -> keepalived/bfd/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Makefile.am",
          "2: #",
          "3: # Keepalived OpenSource project.",
          "4: #",
          "5: # Copyright (C) 2017-2017 Alexandre Cassen, <acassen@gmail.com>",
          "7: AM_CPPFLAGS  = $(KA_CPPFLAGS) $(DEBUG_CPPFLAGS)",
          "8: AM_CFLAGS  = $(KA_CFLAGS) $(DEBUG_CFLAGS)",
          "9: AM_LDFLAGS  = $(KA_LDFLAGS) $(DEBUG_LDFLAGS)",
          "10: # AM_LIBS  = $(KA_LIBS)",
          "11: # AM_LIBTOOLFLAGS = $(KA_LIBTOOLFLAGS)",
          "13: noinst_LIBRARIES = libbfd.a",
          "15: libbfd_a_SOURCES = \\",
          "16:  bfd.c bfd_data.c bfd_parser.c bfd_daemon.c bfd_scheduler.c \\",
          "17:  bfd_event.c",
          "19: AM_CPPFLAGS  += -I$(srcdir)/../include -I$(srcdir)/../../lib",
          "21: EXTRA_libbfd_a_SOURCES =",
          "22: libbfd_a_LIBADD =",
          "24: MAINTAINERCLEANFILES = @MAINTAINERCLEANFILES@",
          "",
          "---------------"
        ],
        "keepalived/bfd/Makefile.in||keepalived/bfd/Makefile.in": [
          "File: keepalived/bfd/Makefile.in -> keepalived/bfd/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Makefile.in generated by automake 1.15 from Makefile.am.",
          "2: # @configure_input@",
          "4: # Copyright (C) 1994-2014 Free Software Foundation, Inc.",
          "6: # This Makefile.in is free software; the Free Software Foundation",
          "7: # gives unlimited permission to copy and/or distribute it,",
          "8: # with or without modifications, as long as this notice is preserved.",
          "10: # This program is distributed in the hope that it will be useful,",
          "11: # but WITHOUT ANY WARRANTY, to the extent permitted by law; without",
          "12: # even the implied warranty of MERCHANTABILITY or FITNESS FOR A",
          "13: # PARTICULAR PURPOSE.",
          "15: @SET_MAKE@",
          "17: # Makefile.am",
          "18: #",
          "19: # Keepalived OpenSource project.",
          "20: #",
          "21: # Copyright (C) 2017-2017 Alexandre Cassen, <acassen@gmail.com>",
          "23: VPATH = @srcdir@",
          "24: am__is_gnu_make = { \\",
          "25:   if test -z '$(MAKELEVEL)'; then \\",
          "26:     false; \\",
          "27:   elif test -n '$(MAKE_HOST)'; then \\",
          "28:     true; \\",
          "29:   elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \\",
          "30:     true; \\",
          "31:   else \\",
          "32:     false; \\",
          "33:   fi; \\",
          "34: }",
          "35: am__make_running_with_option = \\",
          "36:   case $${target_option-} in \\",
          "37:       ?) ;; \\",
          "39:               \"target option '$${target_option-}' specified\" >&2; \\",
          "40:          exit 1;; \\",
          "41:   esac; \\",
          "42:   has_opt=no; \\",
          "43:   sane_makeflags=$$MAKEFLAGS; \\",
          "44:   if $(am__is_gnu_make); then \\",
          "45:     sane_makeflags=$$MFLAGS; \\",
          "46:   else \\",
          "47:     case $$MAKEFLAGS in \\",
          "49:         bs=\\\\; \\",
          "50:         sane_makeflags=`printf '%s\\n' \"$$MAKEFLAGS\" \\",
          "51:           | sed \"s/$$bs$$bs[$$bs $$bs ]*//g\"`;; \\",
          "52:     esac; \\",
          "53:   fi; \\",
          "54:   skip_next=no; \\",
          "55:   strip_trailopt () \\",
          "56:   { \\",
          "57:     flg=`printf '%s\\n' \"$$flg\" | sed \"s/$$1.*$$//\"`; \\",
          "58:   }; \\",
          "59:   for flg in $$sane_makeflags; do \\",
          "60:     test $$skip_next = yes && { skip_next=no; continue; }; \\",
          "61:     case $$flg in \\",
          "63:         -*I) strip_trailopt 'I'; skip_next=yes;; \\",
          "64:       -*I?*) strip_trailopt 'I';; \\",
          "65:         -*O) strip_trailopt 'O'; skip_next=yes;; \\",
          "66:       -*O?*) strip_trailopt 'O';; \\",
          "67:         -*l) strip_trailopt 'l'; skip_next=yes;; \\",
          "68:       -*l?*) strip_trailopt 'l';; \\",
          "69:       -[dEDm]) skip_next=yes;; \\",
          "70:       -[JT]) skip_next=yes;; \\",
          "71:     esac; \\",
          "72:     case $$flg in \\",
          "74:     esac; \\",
          "75:   done; \\",
          "76:   test $$has_opt = yes",
          "77: am__make_dryrun = (target_option=n; $(am__make_running_with_option))",
          "78: am__make_keepgoing = (target_option=k; $(am__make_running_with_option))",
          "79: pkgdatadir = $(datadir)/@PACKAGE@",
          "80: pkgincludedir = $(includedir)/@PACKAGE@",
          "81: pkglibdir = $(libdir)/@PACKAGE@",
          "82: pkglibexecdir = $(libexecdir)/@PACKAGE@",
          "83: am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd",
          "84: install_sh_DATA = $(install_sh) -c -m 644",
          "85: install_sh_PROGRAM = $(install_sh) -c",
          "86: install_sh_SCRIPT = $(install_sh) -c",
          "87: INSTALL_HEADER = $(INSTALL_DATA)",
          "88: transform = $(program_transform_name)",
          "89: NORMAL_INSTALL = :",
          "90: PRE_INSTALL = :",
          "91: POST_INSTALL = :",
          "92: NORMAL_UNINSTALL = :",
          "93: PRE_UNINSTALL = :",
          "94: POST_UNINSTALL = :",
          "95: subdir = keepalived/bfd",
          "96: ACLOCAL_M4 = $(top_srcdir)/aclocal.m4",
          "97: am__aclocal_m4_deps = $(top_srcdir)/configure.ac",
          "98: am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\",
          "99:  $(ACLOCAL_M4)",
          "100: DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)",
          "101: mkinstalldirs = $(install_sh) -d",
          "102: CONFIG_HEADER = $(top_builddir)/lib/config.h",
          "103: CONFIG_CLEAN_FILES =",
          "104: CONFIG_CLEAN_VPATH_FILES =",
          "105: LIBRARIES = $(noinst_LIBRARIES)",
          "106: AM_V_AR = $(am__v_AR_@AM_V@)",
          "107: am__v_AR_ = $(am__v_AR_@AM_DEFAULT_V@)",
          "108: am__v_AR_0 = @echo \"  AR      \" $@;",
          "109: am__v_AR_1 =",
          "110: libbfd_a_AR = $(AR) $(ARFLAGS)",
          "111: libbfd_a_DEPENDENCIES =",
          "112: am_libbfd_a_OBJECTS = bfd.$(OBJEXT) bfd_data.$(OBJEXT) \\",
          "113:  bfd_parser.$(OBJEXT) bfd_daemon.$(OBJEXT) \\",
          "114:  bfd_scheduler.$(OBJEXT) bfd_event.$(OBJEXT)",
          "115: libbfd_a_OBJECTS = $(am_libbfd_a_OBJECTS)",
          "116: AM_V_P = $(am__v_P_@AM_V@)",
          "117: am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)",
          "118: am__v_P_0 = false",
          "119: am__v_P_1 = :",
          "120: AM_V_GEN = $(am__v_GEN_@AM_V@)",
          "121: am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)",
          "122: am__v_GEN_0 = @echo \"  GEN     \" $@;",
          "123: am__v_GEN_1 =",
          "124: AM_V_at = $(am__v_at_@AM_V@)",
          "125: am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)",
          "126: am__v_at_0 = @",
          "127: am__v_at_1 =",
          "128: DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)/lib",
          "129: depcomp = $(SHELL) $(top_srcdir)/depcomp",
          "130: am__depfiles_maybe = depfiles",
          "131: am__mv = mv -f",
          "132: COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\",
          "133:  $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)",
          "134: AM_V_CC = $(am__v_CC_@AM_V@)",
          "135: am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)",
          "136: am__v_CC_0 = @echo \"  CC      \" $@;",
          "137: am__v_CC_1 =",
          "138: CCLD = $(CC)",
          "139: LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@",
          "140: AM_V_CCLD = $(am__v_CCLD_@AM_V@)",
          "141: am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)",
          "142: am__v_CCLD_0 = @echo \"  CCLD    \" $@;",
          "143: am__v_CCLD_1 =",
          "144: SOURCES = $(libbfd_a_SOURCES) $(EXTRA_libbfd_a_SOURCES)",
          "145: DIST_SOURCES = $(libbfd_a_SOURCES) $(EXTRA_libbfd_a_SOURCES)",
          "146: am__can_run_installinfo = \\",
          "147:   case $$AM_UPDATE_INFO_DIR in \\",
          "148:     n|no|NO) false;; \\",
          "150:   esac",
          "151: am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)",
          "152: # Read a list of newline-separated strings from the standard input,",
          "153: # and print each of them once, without duplicates.  Input order is",
          "154: # *not* preserved.",
          "155: am__uniquify_input = $(AWK) '\\",
          "156:   BEGIN { nonempty = 0; } \\",
          "157:   { items[$$0] = 1; nonempty = 1; } \\",
          "158:   END { if (nonempty) { for (i in items) print i; }; } \\",
          "159: '",
          "160: # Make sure the list of sources is unique.  This is necessary because,",
          "161: # e.g., the same source file might be shared among _SOURCES variables",
          "162: # for different programs/libraries.",
          "163: am__define_uniq_tagged_files = \\",
          "164:   list='$(am__tagged_files)'; \\",
          "165:   unique=`for i in $$list; do \\",
          "166:     if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\",
          "167:   done | $(am__uniquify_input)`",
          "168: ETAGS = etags",
          "169: CTAGS = ctags",
          "170: am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp",
          "171: DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)",
          "172: ACLOCAL = @ACLOCAL@",
          "173: AMTAR = @AMTAR@",
          "174: AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@",
          "175: AR = @AR@",
          "176: ARFLAGS = @ARFLAGS@",
          "177: AUTOCONF = @AUTOCONF@",
          "178: AUTOHEADER = @AUTOHEADER@",
          "179: AUTOMAKE = @AUTOMAKE@",
          "180: AWK = @AWK@",
          "181: CC = @CC@",
          "182: CCDEPMODE = @CCDEPMODE@",
          "183: CFLAGS = @CFLAGS@",
          "184: CPP = @CPP@",
          "185: CPPFLAGS = @CPPFLAGS@",
          "186: CYGPATH_W = @CYGPATH_W@",
          "187: DEFS = @DEFS@",
          "188: DEPDIR = @DEPDIR@",
          "189: ECHO_C = @ECHO_C@",
          "190: ECHO_N = @ECHO_N@",
          "191: ECHO_T = @ECHO_T@",
          "192: EGREP = @EGREP@",
          "193: EXEEXT = @EXEEXT@",
          "194: GENHASH_LIBS = @GENHASH_LIBS@",
          "195: GREP = @GREP@",
          "196: HAVE_SPHINX_BUILD = @HAVE_SPHINX_BUILD@",
          "197: INSTALL = @INSTALL@",
          "198: INSTALL_DATA = @INSTALL_DATA@",
          "199: INSTALL_PROGRAM = @INSTALL_PROGRAM@",
          "200: INSTALL_SCRIPT = @INSTALL_SCRIPT@",
          "201: INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@",
          "202: KA_CFLAGS = @KA_CFLAGS@",
          "203: KA_CPPFLAGS = @KA_CPPFLAGS@",
          "204: KA_LDFLAGS = @KA_LDFLAGS@",
          "205: KA_LIBS = @KA_LIBS@",
          "206: LDD = @LDD@",
          "207: LDFLAGS = @LDFLAGS@",
          "208: LIBOBJS = @LIBOBJS@",
          "209: LIBS = @LIBS@",
          "210: LN_S = @LN_S@",
          "211: LTLIBOBJS = @LTLIBOBJS@",
          "212: MAINTAINERCLEANFILES = @MAINTAINERCLEANFILES@",
          "213: MAKEINFO = @MAKEINFO@",
          "214: MKDIR_P = @MKDIR_P@",
          "215: NETSNMP_CONFIG = @NETSNMP_CONFIG@",
          "216: OBJEXT = @OBJEXT@",
          "217: PACKAGE = @PACKAGE@",
          "218: PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@",
          "219: PACKAGE_NAME = @PACKAGE_NAME@",
          "220: PACKAGE_STRING = @PACKAGE_STRING@",
          "221: PACKAGE_TARNAME = @PACKAGE_TARNAME@",
          "222: PACKAGE_URL = @PACKAGE_URL@",
          "223: PACKAGE_VERSION = @PACKAGE_VERSION@",
          "224: PATH_SEPARATOR = @PATH_SEPARATOR@",
          "225: PID_DIR = @PID_DIR@",
          "226: PKG_CONFIG = @PKG_CONFIG@",
          "227: PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@",
          "228: PKG_CONFIG_PATH = @PKG_CONFIG_PATH@",
          "229: RANLIB = @RANLIB@",
          "230: SED = @SED@",
          "231: SET_MAKE = @SET_MAKE@",
          "232: SHELL = @SHELL@",
          "233: SPHINXBUILDNAME = @SPHINXBUILDNAME@",
          "234: STRIP = @STRIP@",
          "235: VERSION = @VERSION@",
          "236: abs_builddir = @abs_builddir@",
          "237: abs_srcdir = @abs_srcdir@",
          "238: abs_top_builddir = @abs_top_builddir@",
          "239: abs_top_srcdir = @abs_top_srcdir@",
          "240: ac_ct_AR = @ac_ct_AR@",
          "241: ac_ct_CC = @ac_ct_CC@",
          "242: am__include = @am__include@",
          "243: am__leading_dot = @am__leading_dot@",
          "244: am__quote = @am__quote@",
          "245: am__tar = @am__tar@",
          "246: am__untar = @am__untar@",
          "247: bindir = @bindir@",
          "248: build_alias = @build_alias@",
          "249: builddir = @builddir@",
          "250: datadir = @datadir@",
          "251: datarootdir = @datarootdir@",
          "252: docdir = @docdir@",
          "253: dvidir = @dvidir@",
          "254: exec_prefix = @exec_prefix@",
          "255: host_alias = @host_alias@",
          "256: htmldir = @htmldir@",
          "257: includedir = @includedir@",
          "258: infodir = @infodir@",
          "259: install_sh = @install_sh@",
          "260: libdir = @libdir@",
          "261: libexecdir = @libexecdir@",
          "262: localedir = @localedir@",
          "263: localstatedir = @localstatedir@",
          "264: mandir = @mandir@",
          "265: mkdir_p = @mkdir_p@",
          "266: oldincludedir = @oldincludedir@",
          "267: pdfdir = @pdfdir@",
          "268: prefix = @prefix@",
          "269: program_transform_name = @program_transform_name@",
          "270: psdir = @psdir@",
          "271: sbindir = @sbindir@",
          "272: sharedstatedir = @sharedstatedir@",
          "273: srcdir = @srcdir@",
          "274: sysconfdir = @sysconfdir@",
          "275: systemdsystemunitdir = @systemdsystemunitdir@",
          "276: target_alias = @target_alias@",
          "277: top_build_prefix = @top_build_prefix@",
          "278: top_builddir = @top_builddir@",
          "279: top_srcdir = @top_srcdir@",
          "280: AM_CPPFLAGS = $(KA_CPPFLAGS) $(DEBUG_CPPFLAGS) -I$(srcdir)/../include \\",
          "281:  -I$(srcdir)/../../lib",
          "282: AM_CFLAGS = $(KA_CFLAGS) $(DEBUG_CFLAGS)",
          "283: AM_LDFLAGS = $(KA_LDFLAGS) $(DEBUG_LDFLAGS)",
          "284: # AM_LIBS  = $(KA_LIBS)",
          "285: # AM_LIBTOOLFLAGS = $(KA_LIBTOOLFLAGS)",
          "286: noinst_LIBRARIES = libbfd.a",
          "287: libbfd_a_SOURCES = \\",
          "288:  bfd.c bfd_data.c bfd_parser.c bfd_daemon.c bfd_scheduler.c \\",
          "289:  bfd_event.c",
          "291: EXTRA_libbfd_a_SOURCES =",
          "292: libbfd_a_LIBADD =",
          "293: all: all-am",
          "295: .SUFFIXES:",
          "296: .SUFFIXES: .c .o .obj",
          "297: $(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)",
          "298:  @for dep in $?; do \\",
          "299:    case '$(am__configure_deps)' in \\",
          "301:        ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \\",
          "302:          && { if test -f $@; then exit 0; else break; fi; }; \\",
          "303:        exit 1;; \\",
          "304:    esac; \\",
          "305:  done; \\",
          "306:  echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign keepalived/bfd/Makefile'; \\",
          "307:  $(am__cd) $(top_srcdir) && \\",
          "308:    $(AUTOMAKE) --foreign keepalived/bfd/Makefile",
          "309: Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status",
          "310:  @case '$?' in \\",
          "312:      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \\",
          "314:      echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \\",
          "315:      cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \\",
          "316:  esac;",
          "318: $(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)",
          "319:  cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh",
          "321: $(top_srcdir)/configure:  $(am__configure_deps)",
          "322:  cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh",
          "323: $(ACLOCAL_M4):  $(am__aclocal_m4_deps)",
          "324:  cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh",
          "325: $(am__aclocal_m4_deps):",
          "327: clean-noinstLIBRARIES:",
          "328:  -test -z \"$(noinst_LIBRARIES)\" || rm -f $(noinst_LIBRARIES)",
          "330: libbfd.a: $(libbfd_a_OBJECTS) $(libbfd_a_DEPENDENCIES) $(EXTRA_libbfd_a_DEPENDENCIES)",
          "331:  $(AM_V_at)-rm -f libbfd.a",
          "332:  $(AM_V_AR)$(libbfd_a_AR) libbfd.a $(libbfd_a_OBJECTS) $(libbfd_a_LIBADD)",
          "333:  $(AM_V_at)$(RANLIB) libbfd.a",
          "335: mostlyclean-compile:",
          "336:  -rm -f *.$(OBJEXT)",
          "338: distclean-compile:",
          "339:  -rm -f *.tab.c",
          "341: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bfd.Po@am__quote@",
          "342: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bfd_daemon.Po@am__quote@",
          "343: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bfd_data.Po@am__quote@",
          "344: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bfd_event.Po@am__quote@",
          "345: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bfd_parser.Po@am__quote@",
          "346: @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bfd_scheduler.Po@am__quote@",
          "348: .c.o:",
          "349: @am__fastdepCC_TRUE@ $(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<",
          "350: @am__fastdepCC_TRUE@ $(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po",
          "351: @AMDEP_TRUE@@am__fastdepCC_FALSE@ $(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@",
          "352: @AMDEP_TRUE@@am__fastdepCC_FALSE@ DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@",
          "353: @am__fastdepCC_FALSE@ $(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<",
          "355: .c.obj:",
          "356: @am__fastdepCC_TRUE@ $(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`",
          "357: @am__fastdepCC_TRUE@ $(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po",
          "358: @AMDEP_TRUE@@am__fastdepCC_FALSE@ $(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@",
          "359: @AMDEP_TRUE@@am__fastdepCC_FALSE@ DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@",
          "360: @am__fastdepCC_FALSE@ $(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`",
          "362: ID: $(am__tagged_files)",
          "363:  $(am__define_uniq_tagged_files); mkid -fID $$unique",
          "364: tags: tags-am",
          "365: TAGS: tags",
          "367: tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)",
          "368:  set x; \\",
          "369:  here=`pwd`; \\",
          "370:  $(am__define_uniq_tagged_files); \\",
          "371:  shift; \\",
          "372:  if test -z \"$(ETAGS_ARGS)$$*$$unique\"; then :; else \\",
          "373:    test -n \"$$unique\" || unique=$$empty_fix; \\",
          "374:    if test $$# -gt 0; then \\",
          "375:      $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\",
          "376:        \"$$@\" $$unique; \\",
          "377:    else \\",
          "378:      $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\",
          "379:        $$unique; \\",
          "380:    fi; \\",
          "381:  fi",
          "382: ctags: ctags-am",
          "384: CTAGS: ctags",
          "385: ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)",
          "386:  $(am__define_uniq_tagged_files); \\",
          "387:  test -z \"$(CTAGS_ARGS)$$unique\" \\",
          "388:    || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \\",
          "389:       $$unique",
          "391: GTAGS:",
          "392:  here=`$(am__cd) $(top_builddir) && pwd` \\",
          "393:    && $(am__cd) $(top_srcdir) \\",
          "394:    && gtags -i $(GTAGS_ARGS) \"$$here\"",
          "395: cscopelist: cscopelist-am",
          "397: cscopelist-am: $(am__tagged_files)",
          "398:  list='$(am__tagged_files)'; \\",
          "399:  case \"$(srcdir)\" in \\",
          "400:    [\\\\/]* | ?:[\\\\/]*) sdir=\"$(srcdir)\" ;; \\",
          "402:  esac; \\",
          "403:  for i in $$list; do \\",
          "404:    if test -f \"$$i\"; then \\",
          "405:      echo \"$(subdir)/$$i\"; \\",
          "406:    else \\",
          "407:      echo \"$$sdir/$$i\"; \\",
          "408:    fi; \\",
          "409:  done >> $(top_builddir)/cscope.files",
          "411: distclean-tags:",
          "412:  -rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags",
          "414: distdir: $(DISTFILES)",
          "415:  @srcdirstrip=`echo \"$(srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\",
          "416:  topsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\",
          "417:  list='$(DISTFILES)'; \\",
          "418:    dist_files=`for file in $$list; do echo $$file; done | \\",
          "419:    sed -e \"s|^$$srcdirstrip/||;t\" \\",
          "420:        -e \"s|^$$topsrcdirstrip/|$(top_builddir)/|;t\"`; \\",
          "421:  case $$dist_files in \\",
          "423:       sed '/\\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \\",
          "424:       sort -u` ;; \\",
          "425:  esac; \\",
          "426:  for file in $$dist_files; do \\",
          "427:    if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \\",
          "428:    if test -d $$d/$$file; then \\",
          "429:      dir=`echo \"/$$file\" | sed -e 's,/[^/]*$$,,'`; \\",
          "430:      if test -d \"$(distdir)/$$file\"; then \\",
          "431:        find \"$(distdir)/$$file\" -type d ! -perm -700 -exec chmod u+rwx {} \\;; \\",
          "432:      fi; \\",
          "433:      if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \\",
          "434:        cp -fpR $(srcdir)/$$file \"$(distdir)$$dir\" || exit 1; \\",
          "435:        find \"$(distdir)/$$file\" -type d ! -perm -700 -exec chmod u+rwx {} \\;; \\",
          "436:      fi; \\",
          "437:      cp -fpR $$d/$$file \"$(distdir)$$dir\" || exit 1; \\",
          "438:    else \\",
          "439:      test -f \"$(distdir)/$$file\" \\",
          "440:      || cp -p $$d/$$file \"$(distdir)/$$file\" \\",
          "441:      || exit 1; \\",
          "442:    fi; \\",
          "443:  done",
          "444: check-am: all-am",
          "445: check: check-am",
          "446: all-am: Makefile $(LIBRARIES)",
          "447: installdirs:",
          "448: install: install-am",
          "449: install-exec: install-exec-am",
          "450: install-data: install-data-am",
          "451: uninstall: uninstall-am",
          "453: install-am: all-am",
          "454:  @$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am",
          "456: installcheck: installcheck-am",
          "457: install-strip:",
          "458:  if test -z '$(STRIP)'; then \\",
          "459:    $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\",
          "460:      install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\",
          "461:        install; \\",
          "462:  else \\",
          "463:    $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\",
          "464:      install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\",
          "465:      \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\" install; \\",
          "466:  fi",
          "467: mostlyclean-generic:",
          "469: clean-generic:",
          "471: distclean-generic:",
          "472:  -test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)",
          "473:  -test . = \"$(srcdir)\" || test -z \"$(CONFIG_CLEAN_VPATH_FILES)\" || rm -f $(CONFIG_CLEAN_VPATH_FILES)",
          "475: maintainer-clean-generic:",
          "476:  @echo \"This command is intended for maintainers to use\"",
          "477:  @echo \"it deletes files that may require special tools to rebuild.\"",
          "478:  -test -z \"$(MAINTAINERCLEANFILES)\" || rm -f $(MAINTAINERCLEANFILES)",
          "479: clean: clean-am",
          "481: clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am",
          "483: distclean: distclean-am",
          "484:  -rm -rf ./$(DEPDIR)",
          "485:  -rm -f Makefile",
          "486: distclean-am: clean-am distclean-compile distclean-generic \\",
          "487:  distclean-tags",
          "489: dvi: dvi-am",
          "491: dvi-am:",
          "493: html: html-am",
          "495: html-am:",
          "497: info: info-am",
          "499: info-am:",
          "501: install-data-am:",
          "503: install-dvi: install-dvi-am",
          "505: install-dvi-am:",
          "507: install-exec-am:",
          "509: install-html: install-html-am",
          "511: install-html-am:",
          "513: install-info: install-info-am",
          "515: install-info-am:",
          "517: install-man:",
          "519: install-pdf: install-pdf-am",
          "521: install-pdf-am:",
          "523: install-ps: install-ps-am",
          "525: install-ps-am:",
          "527: installcheck-am:",
          "529: maintainer-clean: maintainer-clean-am",
          "530:  -rm -rf ./$(DEPDIR)",
          "531:  -rm -f Makefile",
          "532: maintainer-clean-am: distclean-am maintainer-clean-generic",
          "534: mostlyclean: mostlyclean-am",
          "536: mostlyclean-am: mostlyclean-compile mostlyclean-generic",
          "538: pdf: pdf-am",
          "540: pdf-am:",
          "542: ps: ps-am",
          "544: ps-am:",
          "546: uninstall-am:",
          "548: .MAKE: install-am install-strip",
          "550: .PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \\",
          "551:  clean-noinstLIBRARIES cscopelist-am ctags ctags-am distclean \\",
          "552:  distclean-compile distclean-generic distclean-tags distdir dvi \\",
          "553:  dvi-am html html-am info info-am install install-am \\",
          "554:  install-data install-data-am install-dvi install-dvi-am \\",
          "555:  install-exec install-exec-am install-html install-html-am \\",
          "556:  install-info install-info-am install-man install-pdf \\",
          "557:  install-pdf-am install-ps install-ps-am install-strip \\",
          "558:  installcheck installcheck-am installdirs maintainer-clean \\",
          "559:  maintainer-clean-generic mostlyclean mostlyclean-compile \\",
          "560:  mostlyclean-generic pdf pdf-am ps ps-am tags tags-am uninstall \\",
          "561:  uninstall-am",
          "563: .PRECIOUS: Makefile",
          "566: # Tell versions [3.59,3.63) of GNU make to not export all variables.",
          "567: # Otherwise a system limit (for SysV at least) may be exceeded.",
          "568: .NOEXPORT:",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd.c||keepalived/bfd/bfd.c": [
          "File: keepalived/bfd/bfd.c -> keepalived/bfd/bfd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"config.h\"",
          "33: #include <assert.h>",
          "34: #include <string.h>",
          "35: #include <arpa/inet.h>",
          "36: #include <sys/time.h>",
          "38: #include \"bitops.h\"",
          "39: #include \"bfd.h\"",
          "40: #include \"bfd_data.h\"",
          "41: #include \"logger.h\"",
          "42: #include \"utils.h\"",
          "45: const bfd_t bfd0 = {",
          "46:  .local_state = BFD_STATE_DOWN,",
          "47:  .remote_state = BFD_STATE_DOWN,",
          "49:  .remote_discr = 0,",
          "50:  .local_diag = BFD_DIAG_NO_DIAG,",
          "51:  .remote_diag = BFD_DIAG_NO_DIAG,",
          "52:  .remote_min_tx_intv = 0,",
          "53:  .remote_min_rx_intv = 0,",
          "54:  .local_demand = 0,",
          "55:  .remote_demand = 0,",
          "56:  .remote_detect_mult = 0,",
          "57:  .poll = 0,",
          "58:  .final = 0,",
          "59:  .local_tx_intv = 0,",
          "60:  .remote_tx_intv = 0,",
          "61:  .local_detect_time = 0,",
          "62:  .remote_detect_time = 0,",
          "63:  .last_seen = (struct timeval) {0},",
          "64: };",
          "66: void",
          "67: bfd_update_local_tx_intv(bfd_t *bfd)",
          "68: {",
          "69:  bfd->local_tx_intv = bfd->local_min_tx_intv > bfd->remote_min_rx_intv ?",
          "70:      bfd->local_min_tx_intv : bfd->remote_min_rx_intv;",
          "71: }",
          "73: void",
          "74: bfd_update_remote_tx_intv(bfd_t *bfd)",
          "75: {",
          "76:  bfd->remote_tx_intv = bfd->local_min_rx_intv > bfd->remote_min_tx_intv ?",
          "77:      bfd->local_min_rx_intv : bfd->remote_min_tx_intv;",
          "78: }",
          "80: void",
          "81: bfd_idle_local_tx_intv(bfd_t *bfd)",
          "82: {",
          "83:  bfd->local_tx_intv = bfd->local_idle_tx_intv;",
          "84: }",
          "86: void",
          "87: bfd_set_poll(bfd_t *bfd)",
          "88: {",
          "89:  if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "90:   log_message(LOG_INFO, \"BFD_Instance(%s) Starting poll sequence\",",
          "91:        bfd->iname);",
          "99:  if (bfd->final != 1)",
          "100:   bfd->poll = 1;",
          "101: }",
          "104: void",
          "105: bfd_copy_state(bfd_t *bfd, const bfd_t *bfd_old)",
          "106: {",
          "107:  assert(bfd_old);",
          "108:  assert(bfd);",
          "111:  bfd->local_state = bfd_old->local_state;",
          "112:  bfd->remote_state = bfd_old->remote_state;",
          "113:  bfd->local_discr = bfd_old->local_discr;",
          "114:  bfd->remote_discr = bfd_old->remote_discr;",
          "115:  bfd->local_diag = bfd_old->local_diag;",
          "116:  bfd->remote_diag = bfd_old->remote_diag;",
          "117:  bfd->remote_min_tx_intv = bfd_old->remote_min_tx_intv;",
          "118:  bfd->remote_min_rx_intv = bfd_old->remote_min_rx_intv;",
          "119:  bfd->local_demand = bfd_old->local_demand;",
          "120:  bfd->remote_demand = bfd_old->remote_demand;",
          "121:  bfd->remote_detect_mult = bfd_old->remote_detect_mult;",
          "122:  bfd->poll = bfd_old->poll;",
          "123:  bfd->final = bfd_old->final;",
          "125:  bfd->local_tx_intv = bfd_old->local_tx_intv;",
          "126:  bfd->remote_tx_intv = bfd_old->remote_tx_intv;",
          "127:  bfd->local_detect_time = bfd_old->local_detect_time;",
          "128:  bfd->remote_detect_time = bfd_old->remote_detect_time;",
          "130:  bfd->last_seen = bfd_old->last_seen;",
          "131: }",
          "134: void",
          "135: bfd_copy_sands(bfd_t *bfd, const bfd_t *bfd_old)",
          "136: {",
          "137:  bfd->sands_out = bfd_old->sands_out;",
          "138:  bfd->sands_exp = bfd_old->sands_exp;",
          "139:  bfd->sands_rst = bfd_old->sands_rst;",
          "140: }",
          "143: void",
          "144: bfd_init_state(bfd_t *bfd)",
          "145: {",
          "146:  assert(bfd);",
          "148:  bfd_copy_state(bfd, &bfd0);",
          "149:  bfd->local_discr = bfd_get_random_discr(bfd_data);",
          "150:  bfd->local_tx_intv = bfd->local_idle_tx_intv;",
          "151: }",
          "156: void",
          "157: bfd_build_packet(bfdpkt_t *pkt, const bfd_t *bfd, char *buf,",
          "158:    const ssize_t bufsz)",
          "159: {",
          "160:  ssize_t len = sizeof (bfdhdr_t);",
          "162:  memset(buf, 0, bufsz);",
          "163:  pkt->hdr = (bfdhdr_t *) buf;",
          "165:  pkt->hdr->diag = bfd->local_diag;",
          "166:  pkt->hdr->version = BFD_VERSION_1;",
          "167:  pkt->hdr->state = bfd->local_state;",
          "168:  pkt->hdr->poll = bfd->poll;",
          "169:  pkt->hdr->final = bfd->final;",
          "170:  pkt->hdr->cplane = 0;",
          "172:  pkt->hdr->demand = bfd->local_demand;",
          "173:  pkt->hdr->multipoint = 0;",
          "174:  pkt->hdr->detect_mult = bfd->local_detect_mult;",
          "175:  pkt->hdr->len = len;",
          "176:  pkt->hdr->local_discr = htonl(bfd->local_discr);",
          "177:  pkt->hdr->remote_discr = htonl(bfd->remote_discr);",
          "178:  pkt->hdr->min_tx_intv = htonl(bfd->local_min_tx_intv);",
          "179:  pkt->hdr->min_rx_intv = htonl(bfd->local_min_rx_intv);",
          "182:  pkt->len = len;",
          "183:  pkt->dst_addr = bfd->nbr_addr;",
          "184:  pkt->buf = buf;",
          "185: }",
          "190: bool",
          "191: bfd_check_packet(const bfdpkt_t *pkt)",
          "192: {",
          "194:  if (sizeof (bfdhdr_t) > pkt->len) {",
          "195:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "196:    log_message(LOG_ERR, \"Packet is too small: %u bytes\",",
          "197:         pkt->len);",
          "198:   return true;",
          "199:  }",
          "201:  if (pkt->hdr->len != pkt->len) {",
          "202:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "203:    log_message(LOG_ERR, \"Packet size mismatch:\"",
          "204:         \" length field: %u bytes\"",
          "205:         \", buffer size: %u bytes\",",
          "206:         pkt->hdr->len, pkt->len);",
          "207:   return true;",
          "208:  }",
          "211:  if (pkt->ttl && pkt->ttl != BFD_CONTROL_TTL) {",
          "212:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "213:    log_message(LOG_ERR, \"Packet ttl(%i) != %i\",",
          "214:         pkt->ttl, BFD_CONTROL_TTL);",
          "215:   return true;",
          "216:  }",
          "219:  if (pkt->hdr->version != BFD_VERSION_1) {",
          "220:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "221:    log_message(LOG_ERR, \"Packet is of unsupported\"",
          "222:         \" version: %i\", pkt->hdr->version);",
          "223:   return true;",
          "224:  }",
          "226:  if (!pkt->hdr->detect_mult) {",
          "227:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "228:    log_message(LOG_ERR, \"Packet 'detection multiplier'\"",
          "229:         \" field is zero\");",
          "230:   return true;",
          "231:  }",
          "233:  if (pkt->hdr->multipoint) {",
          "234:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "235:    log_message(LOG_ERR, \"Packet has 'multipoint' flag\");",
          "236:   return true;",
          "237:  }",
          "239:  if (!pkt->hdr->local_discr) {",
          "240:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "241:    log_message(LOG_ERR, \"Packet 'my discriminator'\"",
          "242:         \" field is zero\");",
          "243:   return true;",
          "244:  }",
          "246:  if (!pkt->hdr->remote_discr",
          "247:      && pkt->hdr->state != BFD_STATE_DOWN",
          "248:      && pkt->hdr->state != BFD_STATE_ADMINDOWN) {",
          "249:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "250:    log_message(LOG_ERR,",
          "251:         \"Packet 'your discriminator' field is\"",
          "252:         \" zero and 'state' field is not\"",
          "253:         \" Down or AdminDown\");",
          "254:   return true;",
          "255:  }",
          "258:  if (pkt->hdr->poll && pkt->hdr->final) {",
          "259:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "260:    log_message(LOG_ERR, \"Packet has both poll and final\"",
          "261:         \"  flags set\");",
          "262:   return true;",
          "263:  }",
          "265:  if (!BFD_VALID_STATE(pkt->hdr->state)) {",
          "266:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "267:    log_message(LOG_ERR, \"Packet has invalid 'state'\"",
          "268:         \" field: %u\", pkt->hdr->state);",
          "269:   return true;",
          "270:  }",
          "272:  if (!BFD_VALID_DIAG(pkt->hdr->diag)) {",
          "273:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "274:    log_message(LOG_ERR, \"Packet has invalid 'diag'\"",
          "275:         \" field: %u\", pkt->hdr->diag);",
          "276:   return true;",
          "277:  }",
          "279:  return false;",
          "280: }",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c": [
          "File: keepalived/bfd/bfd_daemon.c -> keepalived/bfd/bfd_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"config.h\"",
          "25: #ifdef BFD_SCHED_RT",
          "26: #include <sched.h>",
          "27: #endif",
          "28: #include <unistd.h>",
          "29: #include <sys/types.h>",
          "30: #include <sys/stat.h>",
          "31: #include <sys/prctl.h>",
          "32: #include <fcntl.h>",
          "34: #include \"bfd.h\"",
          "35: #include \"bfd_daemon.h\"",
          "36: #include \"bfd_data.h\"",
          "37: #include \"bfd_parser.h\"",
          "38: #include \"bfd_scheduler.h\"",
          "39: #include \"bfd_event.h\"",
          "40: #include \"pidfile.h\"",
          "41: #include \"logger.h\"",
          "42: #include \"signals.h\"",
          "43: #include \"list.h\"",
          "44: #include \"main.h\"",
          "45: #include \"parser.h\"",
          "46: #include \"time.h\"",
          "47: #include \"global_data.h\"",
          "48: #include \"bitops.h\"",
          "49: #include \"utils.h\"",
          "50: #include \"scheduler.h\"",
          "53: int bfd_event_pipe[2] = { -1, -1};",
          "56: static char *bfd_syslog_ident;",
          "58: static int reload_bfd_thread(thread_t *);",
          "61: static void",
          "62: stop_bfd(int status)",
          "63: {",
          "64:  signal_handler_destroy();",
          "67:  pidfile_rm(bfd_pidfile);",
          "70:  free_global_data(global_data);",
          "71:  bfd_dispatcher_release(bfd_data);",
          "72:  free_bfd_data(bfd_data);",
          "73:  free_bfd_buffer();",
          "74:  thread_destroy_master(master);",
          "76: #ifdef _DEBUG_",
          "77:  keepalived_free_final(\"BFD Child process\");",
          "78: #endif",
          "84:  log_message(LOG_INFO, \"Stopped\");",
          "86:  if (log_file_name)",
          "87:   close_log_file();",
          "88:  closelog();",
          "90: #ifndef _MEM_CHECK_LOG_",
          "91:  FREE_PTR(bfd_syslog_ident);",
          "92: #else",
          "93:         if (bfd_syslog_ident)",
          "94:                 free(bfd_syslog_ident);",
          "95: #endif",
          "96:  close_std_fd();",
          "98:  exit(status);",
          "99: }",
          "102: void",
          "103: open_bfd_pipe(void)",
          "104: {",
          "106:  if (pipe(bfd_event_pipe) == -1) {",
          "107:   log_message(LOG_ERR, \"Unable to create BFD event pipe: %m\");",
          "108:   stop_keepalived();",
          "109:   return;",
          "110:  }",
          "111:  fcntl(bfd_event_pipe[0], F_SETFL, O_NONBLOCK | fcntl(bfd_event_pipe[0], F_GETFL));",
          "112:  fcntl(bfd_event_pipe[1], F_SETFL, O_NONBLOCK | fcntl(bfd_event_pipe[1], F_GETFL));",
          "113: }",
          "116: static void",
          "117: start_bfd(void)",
          "118: {",
          "119:  srand(time(NULL));",
          "121:  global_data = alloc_global_data();",
          "122:  if (!(bfd_data = alloc_bfd_data())) {",
          "123:   stop_bfd(KEEPALIVED_EXIT_FATAL);",
          "124:   return;",
          "125:  }",
          "127:  alloc_bfd_buffer();",
          "129:  init_data(conf_file, bfd_init_keywords);",
          "131:  bfd_complete_init();",
          "133:  if (__test_bit(DUMP_CONF_BIT, &debug))",
          "134:   dump_bfd_data(bfd_data);",
          "136:  thread_add_event(master, bfd_dispatcher_init, bfd_data, 0);",
          "137: }",
          "140: static void",
          "141: sighup_bfd(__attribute__ ((unused)) void *v,",
          "142:     __attribute__ ((unused)) int sig)",
          "143: {",
          "144:  thread_add_event(master, reload_bfd_thread, NULL, 0);",
          "145: }",
          "148: static void",
          "149: sigend_bfd(__attribute__ ((unused)) void *v,",
          "150:     __attribute__ ((unused)) int sig)",
          "151: {",
          "152:  if (master)",
          "153:   thread_add_terminate_event(master);",
          "154: }",
          "157: static void",
          "158: bfd_signal_init(void)",
          "159: {",
          "160:  signal_handler_init();",
          "161:  signal_set(SIGHUP, sighup_bfd, NULL);",
          "162:  signal_set(SIGINT, sigend_bfd, NULL);",
          "163:  signal_set(SIGTERM, sigend_bfd, NULL);",
          "164:  signal_ignore(SIGPIPE);",
          "165: }",
          "168: static int",
          "169: reload_bfd_thread(__attribute__((unused)) thread_t * thread)",
          "170: {",
          "171:  timeval_t timer;",
          "172:  timer = timer_now();",
          "175:  SET_RELOAD;",
          "178:  signal_handler_destroy();",
          "181:  bfd_dispatcher_release(bfd_data);",
          "182:  thread_destroy_master(master);",
          "183:  master = thread_make_master();",
          "184:  free_global_data(global_data);",
          "185:  free_bfd_buffer();",
          "187:  old_bfd_data = bfd_data;",
          "188:  bfd_data = NULL;",
          "191:  signal_set(SIGCHLD, thread_child_handler, master);",
          "192:  start_bfd();",
          "194:  free_bfd_data(old_bfd_data);",
          "195:  UNSET_RELOAD;",
          "197:  log_message(LOG_INFO, \"Reload finished in %li usec\",",
          "198:       timer_tol(timer_sub_now(timer)));",
          "200:  return 0;",
          "201: }",
          "204: static int",
          "205: bfd_respawn_thread(thread_t * thread)",
          "206: {",
          "207:  pid_t pid;",
          "210:  pid = THREAD_CHILD_PID(thread);",
          "213:  if (thread->type == THREAD_CHILD_TIMEOUT) {",
          "214:   thread_add_child(master, bfd_respawn_thread, NULL,",
          "215:      pid, RESPAWN_TIMER);",
          "216:   return 0;",
          "217:  }",
          "220:  if (!__test_bit(DONT_RESPAWN_BIT, &debug)) {",
          "221:   log_message(LOG_ALERT, \"BFD child process(%d) died: Respawning\",",
          "222:        pid);",
          "223:   start_bfd_child();",
          "224:  } else {",
          "225:   log_message(LOG_ALERT, \"BFD child process(%d) died: Exiting\",",
          "226:        pid);",
          "227:   raise(SIGTERM);",
          "228:  }",
          "229:  return 0;",
          "230: }",
          "232: int",
          "233: start_bfd_child(void)",
          "234: {",
          "235: #ifndef _DEBUG_",
          "236:  pid_t pid;",
          "237:  int ret;",
          "238:  char *syslog_ident;",
          "241:  if (log_file_name)",
          "242:   flush_log_file();",
          "244:  pid = fork();",
          "246:  if (pid < 0) {",
          "247:   log_message(LOG_INFO, \"BFD child process: fork error(%m)\");",
          "248:   return -1;",
          "249:  } else if (pid) {",
          "250:   bfd_child = pid;",
          "251:   log_message(LOG_INFO, \"Starting BFD child process, pid=%d\",",
          "252:        pid);",
          "254:   thread_add_child(master, bfd_respawn_thread, NULL,",
          "255:      pid, RESPAWN_TIMER);",
          "256:   return 0;",
          "257:  }",
          "258:  prctl(PR_SET_PDEATHSIG, SIGTERM);",
          "261:  set_child_finder_name(NULL);",
          "264:  prog_type = PROG_TYPE_BFD;",
          "266:  if ((instance_name",
          "267: #if HAVE_DECL_CLONE_NEWNET",
          "268:       || network_namespace",
          "269: #endif",
          "270:             ) &&",
          "271:       (bfd_syslog_ident = make_syslog_ident(PROG_BFD)))",
          "272:   syslog_ident = bfd_syslog_ident;",
          "273:  else",
          "274:   syslog_ident = PROG_BFD;",
          "277:  if (!__test_bit(NO_SYSLOG_BIT, &debug))",
          "278:   openlog(syslog_ident, LOG_PID | ((__test_bit(LOG_CONSOLE_BIT, &debug)) ? LOG_CONS : 0)",
          "279:         , (log_facility==LOG_DAEMON) ? LOG_LOCAL2 : log_facility);",
          "281:  if (log_file_name)",
          "282:   open_log_file(log_file_name, \"bfd\", network_namespace, instance_name);",
          "284:  signal_handler_destroy();",
          "286: #ifdef _MEM_CHECK_",
          "287:  mem_log_init(PROG_CHECK, \"Healthcheck child process\");",
          "288: #endif",
          "290:  free_parent_mallocs_startup(true);",
          "292: #ifdef BFD_SCHED_RT",
          "294:  struct sched_param sp;",
          "295:  sp.sched_priority = sched_get_priority_max(SCHED_RR);",
          "296:  if (sched_setscheduler(pid, SCHED_RR, &sp))",
          "297:   log_message(LOG_WARNING,",
          "298:        \"BFD child process: cannot raise priority\");",
          "299: #endif",
          "302:  if (!pidfile_write(bfd_pidfile, getpid())) {",
          "304:   log_message(LOG_INFO,",
          "305:        \"BFD child process: cannot write pidfile\");",
          "306:   exit(0);",
          "307:  }",
          "310:  signal_handler_destroy();",
          "311:  thread_destroy_master(master);",
          "312:  master = thread_make_master();",
          "315:  ret = chdir(\"/\");",
          "316:  if (ret < 0) {",
          "317:   log_message(LOG_INFO, \"BFD child process: error chdir\");",
          "318:  }",
          "321:  umask(0);",
          "322: #endif",
          "327:  UNSET_RELOAD;",
          "330:  bfd_signal_init();",
          "333:  start_bfd();",
          "336:  launch_scheduler();",
          "339:  stop_bfd(EXIT_SUCCESS);",
          "342:  exit(EXIT_SUCCESS);",
          "343: }",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd_data.c||keepalived/bfd/bfd_data.c": [
          "File: keepalived/bfd/bfd_data.c -> keepalived/bfd/bfd_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"config.h\"",
          "25: #include <assert.h>",
          "27: #include \"bfd.h\"",
          "28: #include \"bfd_data.h\"",
          "29: #include \"logger.h\"",
          "30: #include \"parser.h\"",
          "31: #include \"memory.h\"",
          "32: #include \"utils.h\"",
          "33: #include \"main.h\"",
          "36: bfd_data_t *bfd_data;",
          "37: bfd_data_t *old_bfd_data;",
          "38: char *bfd_buffer;",
          "44: void",
          "45: alloc_bfd(char *name, bool disabled)",
          "46: {",
          "47:  bfd_t *bfd;",
          "49:  assert(name);",
          "51:  bfd = (bfd_t *) MALLOC(sizeof (bfd_t));",
          "52:  strcpy(bfd->iname, name);",
          "55:  bfd->local_min_rx_intv = BFD_MINRX_DEFAULT * 1000;",
          "56:  bfd->local_min_tx_intv = BFD_MINTX_DEFAULT * 1000;",
          "57:  bfd->local_idle_tx_intv = BFD_IDLETX_DEFAULT * 1000;",
          "58:  bfd->local_detect_mult = BFD_MULTIPLIER_DEFAULT;",
          "59:  bfd->disabled = disabled;",
          "62:  bfd->fd_out = -1;",
          "63:  bfd->thread_out = NULL;",
          "64:  bfd->thread_exp = NULL;",
          "65:  bfd->thread_rst = NULL;",
          "66:  bfd->sands_out = -1;",
          "67:  bfd->sands_exp = -1;",
          "68:  bfd->sands_rst = -1;",
          "70:  list_add(bfd_data->bfd, bfd);",
          "71: }",
          "73: static void",
          "74: free_bfd(void *data)",
          "75: {",
          "76:  assert(data);",
          "77:  FREE(data);",
          "78: }",
          "81: static void",
          "82: dump_bfd(void *data)",
          "83: {",
          "84:  bfd_t *bfd;",
          "86:  assert(data);",
          "87:  bfd = (bfd_t *)data;",
          "89:  log_message(LOG_INFO, \" BFD Instance = %s\", bfd->iname);",
          "90:  log_message(LOG_INFO, \"   Neighbor IP = %s\",",
          "91:       inet_sockaddrtos(&bfd->nbr_addr));",
          "93:  if (bfd->src_addr.ss_family)",
          "94:   log_message(LOG_INFO, \"   Source IP = %s\",",
          "95:        inet_sockaddrtos(&bfd->src_addr));",
          "97:  log_message(LOG_INFO, \"   Required min RX interval = %i ms\",",
          "98:       bfd->local_min_rx_intv / TIMER_HZ);",
          "99:  log_message(LOG_INFO, \"   Desired min TX interval = %i ms\",",
          "100:       bfd->local_min_tx_intv / TIMER_HZ);",
          "101:  log_message(LOG_INFO, \"   Desired idle TX interval = %i ms\",",
          "102:       bfd->local_idle_tx_intv / TIMER_HZ);",
          "103:  log_message(LOG_INFO, \"   Detection multiplier = %i\",",
          "104:       bfd->local_detect_mult);",
          "105: }",
          "108: static bfd_t *",
          "109: find_bfd_by_name2(char *name, bfd_data_t *data)",
          "110: {",
          "111:  element e;",
          "112:  bfd_t *bfd;",
          "114:  assert(name);",
          "115:  assert(data);",
          "116:  assert(data->bfd);",
          "118:  if (LIST_ISEMPTY(data->bfd))",
          "119:   return NULL;",
          "121:  for (e = LIST_HEAD(data->bfd); e; ELEMENT_NEXT(e)) {",
          "122:   bfd = ELEMENT_DATA(e);",
          "123:   if (!strcmp(name, bfd->iname))",
          "124:    return bfd;",
          "125:  }",
          "127:  return NULL;",
          "128: }",
          "130: bfd_t *",
          "131: find_bfd_by_name(char *name)",
          "132: {",
          "133:  return find_bfd_by_name2(name, bfd_data);",
          "134: }",
          "137: static void",
          "138: bfd_check_config(bfd_t * bfd)",
          "139: {",
          "140:  assert(bfd);",
          "142:  if (!bfd->nbr_addr.ss_family) {",
          "143:   log_message(LOG_ERR,",
          "144:        \"Configuration error: BFD instance %s has\"",
          "145:        \" no neighbor address set, disabling instance\",",
          "146:        bfd->iname);",
          "147:   bfd->disabled = true;",
          "148:  }",
          "150:  if (bfd->src_addr.ss_family",
          "151:      && bfd->nbr_addr.ss_family != bfd->src_addr.ss_family) {",
          "152:   log_message(LOG_ERR,",
          "153:        \"Configuration error: BFD instance %s source\"",
          "154:        \" address %s and neighbor address %s\"",
          "155:        \" are not of the same family, disabling instance\",",
          "156:        bfd->iname, inet_sockaddrtos(&bfd->src_addr)",
          "157:        , inet_sockaddrtos(&bfd->nbr_addr));",
          "158:   bfd->disabled = true;",
          "159:  }",
          "160: }",
          "163: static int",
          "164: bfd_cmp_timers(bfd_t * old_bfd, bfd_t * bfd)",
          "165: {",
          "166:  return (old_bfd->local_min_rx_intv != bfd->local_min_rx_intv",
          "167:   || old_bfd->local_min_tx_intv != bfd->local_min_tx_intv);",
          "168: }",
          "173: bfd_data_t *",
          "174: alloc_bfd_data(void)",
          "175: {",
          "176:  bfd_data_t *data;",
          "178:  data = (bfd_data_t *) MALLOC(sizeof (bfd_data_t));",
          "179:  data->bfd = alloc_list(free_bfd, dump_bfd);",
          "182:  data->thread_in = NULL;",
          "183:  data->fd_in = -1;",
          "185:  return data;",
          "186: }",
          "188: void",
          "189: free_bfd_data(bfd_data_t * data)",
          "190: {",
          "191:  assert(data);",
          "193:  free_list(&data->bfd);",
          "194:  FREE(data);",
          "195: }",
          "197: void",
          "198: dump_bfd_data(bfd_data_t * data)",
          "199: {",
          "200:  assert(data);",
          "202:  if (!LIST_ISEMPTY(data->bfd)) {",
          "203:   log_message(LOG_INFO, \"------< BFD Topology >------\");",
          "204:   dump_list(data->bfd);",
          "205:  }",
          "206: }",
          "208: void",
          "209: bfd_complete_init(void)",
          "210: {",
          "211:  bfd_t *bfd, *bfd_old;",
          "212:  element e;",
          "214:  assert(bfd_data);",
          "215:  assert(bfd_data->bfd);",
          "218:  for (e = LIST_HEAD(bfd_data->bfd); e; ELEMENT_NEXT(e)) {",
          "219:   bfd = ELEMENT_DATA(e);",
          "220:   bfd_check_config(bfd);",
          "224:   if (reload && (bfd_old = find_bfd_by_name2(bfd->iname, old_bfd_data))) {",
          "225:    bfd_copy_state(bfd, bfd_old);",
          "226:    bfd_copy_sands(bfd, bfd_old);",
          "227:    if (bfd_cmp_timers(bfd_old, bfd))",
          "228:     bfd_set_poll(bfd);",
          "231:    if (bfd_old->disabled",
          "232:     && !bfd->disabled",
          "233:     && BFD_ISADMINDOWN(bfd)) {",
          "234:     bfd->local_state = BFD_STATE_DOWN;",
          "235:     log_message(LOG_INFO, \"BFD_Instance(%s)\"",
          "236:          \" Enabling instance\", bfd->iname);",
          "237:    }",
          "238:   } else",
          "239:    bfd_init_state(bfd);",
          "240:  }",
          "243:  if (reload)",
          "244:   bfd_data->fd_in = old_bfd_data->fd_in;",
          "245: }",
          "250: void",
          "251: alloc_bfd_buffer(void)",
          "252: {",
          "253:  bfd_buffer = (char *) MALLOC(BFD_BUFFER_SIZE);",
          "254: }",
          "256: void",
          "257: free_bfd_buffer(void)",
          "258: {",
          "259:  FREE(bfd_buffer);",
          "260: }",
          "266: bfd_t *",
          "267: find_bfd_by_addr(struct sockaddr_storage *addr)",
          "268: {",
          "269:  element e;",
          "270:  bfd_t *bfd;",
          "271:  assert(addr);",
          "272:  assert(bfd_data);",
          "274:  if (LIST_ISEMPTY(bfd_data->bfd))",
          "275:   return NULL;",
          "277:  for (e = LIST_HEAD(bfd_data->bfd); e; ELEMENT_NEXT(e)) {",
          "278:   bfd = ELEMENT_DATA(e);",
          "279:   if (!inet_sockaddrcmp(&bfd->nbr_addr, addr))",
          "280:    return bfd;",
          "281:  }",
          "283:  return NULL;",
          "284: }",
          "287: bfd_t *",
          "288: find_bfd_by_discr(uint32_t discr)",
          "289: {",
          "290:  element e;",
          "291:  bfd_t *bfd;",
          "293:  if (LIST_ISEMPTY(bfd_data->bfd))",
          "294:   return NULL;",
          "296:  for (e = LIST_HEAD(bfd_data->bfd); e; ELEMENT_NEXT(e)) {",
          "297:   bfd = ELEMENT_DATA(e);",
          "298:   if (bfd->local_discr == discr)",
          "299:    return bfd;",
          "300:  }",
          "302:  return NULL;",
          "303: }",
          "309: uint32_t",
          "310: rand_intv(uint32_t min, uint32_t max)",
          "311: {",
          "312:  double scaled = (double) rand() / RAND_MAX;",
          "313:  return (max - min + 1) * scaled + min;",
          "314: }",
          "317: uint32_t",
          "318: bfd_get_random_discr(bfd_data_t * data)",
          "319: {",
          "320:  bfd_t *bfd;",
          "321:  uint32_t discr;",
          "322:  element e;",
          "324:  assert(data);",
          "326:  discr = rand_intv(1, UINT32_MAX);",
          "329:  for (e = LIST_HEAD(data->bfd); e; ELEMENT_NEXT(e)) {",
          "330:   bfd = ELEMENT_DATA(e);",
          "331:   if (bfd->local_discr == discr)",
          "332:    return bfd_get_random_discr(data);",
          "333:  }",
          "335:  return discr;",
          "336: }",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd_event.c||keepalived/bfd/bfd_event.c": [
          "File: keepalived/bfd/bfd_event.c -> keepalived/bfd/bfd_event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"config.h\"",
          "25: #include <assert.h>",
          "26: #include <unistd.h>",
          "28: #include \"bfd.h\"",
          "29: #include \"bfd_event.h\"",
          "30: #include \"bfd_daemon.h\"",
          "31: #include \"logger.h\"",
          "32: #include \"main.h\"",
          "33: #include \"memory.h\"",
          "34: #include \"bitops.h\"",
          "35: #include \"utils.h\"",
          "37: void",
          "38: bfd_event_send(bfd_t *bfd)",
          "39: {",
          "40:  bfd_event_t evt;",
          "41:  int ret;",
          "43:  assert(bfd);",
          "45:  memset(&evt, 0, sizeof evt);",
          "46:  strcpy(evt.iname, bfd->iname);",
          "47:  evt.state = bfd->local_state;",
          "48:  evt.sent_time = timer_now();",
          "50:  ret = write(bfd_event_pipe[1], &evt, sizeof evt);",
          "51:  if (ret == -1 && __test_bit(LOG_DETAIL_BIT, &debug))",
          "52:   log_message(LOG_ERR, \"BFD_Instance(%s) write() error %m\",",
          "53:        bfd->iname);",
          "54: }",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd_parser.c||keepalived/bfd/bfd_parser.c": [
          "File: keepalived/bfd/bfd_parser.c -> keepalived/bfd/bfd_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"config.h\"",
          "25: #include <assert.h>",
          "27: #include \"bfd.h\"",
          "28: #include \"bfd_data.h\"",
          "29: #include \"bfd_parser.h\"",
          "30: #include \"logger.h\"",
          "31: #include \"parser.h\"",
          "32: #include \"global_parser.h\"",
          "33: #include \"utils.h\"",
          "35: #ifdef _WITH_LVS_",
          "36: #include \"check_parser.h\"",
          "37: #endif",
          "38: #ifdef _WITH_VRRP_",
          "39: #include \"vrrp_parser.h\"",
          "40: #endif",
          "42: static void",
          "43: bfd_handler(vector_t *strvec)",
          "44: {",
          "45:  char iname[BFD_INAME_MAX] = { 0 };",
          "46:  char *name;",
          "47:  bool disabled = false;",
          "49:  assert(strvec);",
          "51:  name = vector_slot(strvec, 1);",
          "52:  strncpy(iname, name, BFD_INAME_MAX);",
          "54:  if (iname[BFD_INAME_MAX - 1] != '\\0') {",
          "55:   iname[BFD_INAME_MAX - 1] = '\\0';",
          "56:   log_message(LOG_ERR, \"Configuration error: BFD instance %s\"",
          "57:        \" name was truncated to %s (maximum length is %i\"",
          "58:        \" characters), disabling instance\", name, iname,",
          "59:        BFD_INAME_MAX - 1);",
          "60:   disabled = true;",
          "61:  }",
          "63:  if (find_bfd_by_name(iname)) {",
          "64:   (void) snprintf(iname, BFD_INAME_MAX, \"<DUP-%i>\",",
          "65:     LIST_SIZE(bfd_data->bfd));",
          "66:   log_message(LOG_ERR,",
          "67:        \"Configuration error: BFD instance %s\"",
          "68:        \" was renamed to %s due to a duplicate name,\"",
          "69:        \" disabling instance\", name, iname);",
          "70:   disabled = true;",
          "71:  }",
          "73:  alloc_bfd(iname, disabled);",
          "74: }",
          "76: static void",
          "77: bfd_nbrip_handler(vector_t *strvec)",
          "78: {",
          "79:  bfd_t *bfd;",
          "80:  int ret;",
          "81:  struct sockaddr_storage nbr_addr;",
          "83:  assert(strvec);",
          "84:  assert(bfd_data);",
          "86:  bfd = LIST_TAIL_DATA(bfd_data->bfd);",
          "87:  assert(bfd);",
          "89:  ret = inet_stosockaddr(vector_slot(strvec, 1), BFD_CONTROL_PORT, &nbr_addr);",
          "90:  if (ret < 0) {",
          "91:   log_message(LOG_ERR,",
          "92:        \"Configuration error: BFD instance %s has\"",
          "93:        \" malformed neighbor address %s, disabling instance\",",
          "94:        bfd->iname, FMT_STR_VSLOT(strvec, 1));",
          "95:   bfd->disabled = true;",
          "96:  } else if (find_bfd_by_addr(&nbr_addr)) {",
          "97:   log_message(LOG_ERR,",
          "98:        \"Configuration error: BFD instance %s has\"",
          "99:        \" duplicate neighbor address %s, disabling instance\",",
          "100:        bfd->iname, FMT_STR_VSLOT(strvec, 1));",
          "101:   bfd->disabled = true;",
          "102:  } else",
          "103:   bfd->nbr_addr = nbr_addr;",
          "104: }",
          "106: static void",
          "107: bfd_srcip_handler(vector_t *strvec)",
          "108: {",
          "109:  bfd_t *bfd;",
          "110:  int ret;",
          "111:  struct sockaddr_storage src_addr;",
          "113:  assert(strvec);",
          "114:  assert(bfd_data);",
          "116:  bfd = LIST_TAIL_DATA(bfd_data->bfd);",
          "117:  assert(bfd);",
          "119:  ret = inet_stosockaddr(vector_slot(strvec, 1), 0, &src_addr);",
          "120:  if (ret < 0) {",
          "121:   log_message(LOG_ERR,",
          "122:        \"Configuration error: BFD instance %s has\"",
          "123:        \" malformed source address %s, ignoring\",",
          "124:        bfd->iname, FMT_STR_VSLOT(strvec, 1));",
          "125:  } else",
          "126:   bfd->src_addr = src_addr;",
          "127: }",
          "129: static void",
          "130: bfd_minrx_handler(vector_t *strvec)",
          "131: {",
          "132:  bfd_t *bfd;",
          "133:  int value;",
          "135:  assert(strvec);",
          "136:  assert(bfd_data);",
          "138:  bfd = LIST_TAIL_DATA(bfd_data->bfd);",
          "139:  assert(bfd);",
          "141:  value = atoi(vector_slot(strvec, 1));",
          "143:  if (value < BFD_MINRX_MIN || value > BFD_MINRX_MAX) {",
          "144:   log_message(LOG_ERR, \"Configuration error: BFD instance %s\"",
          "145:        \" min_rx value %i is not valid (must be in range\"",
          "146:        \" [%u-%u]), ignoring\", bfd->iname, value,",
          "147:        BFD_MINRX_MIN, BFD_MINRX_MAX);",
          "148:  } else",
          "149:   bfd->local_min_rx_intv = value * 1000;",
          "150: }",
          "152: static void",
          "153: bfd_mintx_handler(vector_t *strvec)",
          "154: {",
          "155:  bfd_t *bfd;",
          "156:  int value;",
          "158:  assert(strvec);",
          "159:  assert(bfd_data);",
          "161:  bfd = LIST_TAIL_DATA(bfd_data->bfd);",
          "162:  assert(bfd);",
          "164:  value = atoi(vector_slot(strvec, 1));",
          "166:  if (value < BFD_MINTX_MIN || value > BFD_MINTX_MAX) {",
          "167:   log_message(LOG_ERR, \"Configuration error: BFD instance %s\"",
          "168:        \" min_tx value %i is not valid (must be in range\"",
          "169:        \" [%u-%u]), ignoring\", bfd->iname, value,",
          "170:        BFD_MINTX_MIN, BFD_MINTX_MAX);",
          "171:  } else",
          "172:   bfd->local_min_tx_intv = value * 1000;",
          "173: }",
          "175: static void",
          "176: bfd_idletx_handler(vector_t *strvec)",
          "177: {",
          "178:  bfd_t *bfd;",
          "179:  int value;",
          "181:  assert(strvec);",
          "182:  assert(bfd_data);",
          "184:  bfd = LIST_TAIL_DATA(bfd_data->bfd);",
          "185:  assert(bfd);",
          "187:  value = atoi(vector_slot(strvec, 1));",
          "189:  if (value < BFD_IDLETX_MIN || value > BFD_IDLETX_MAX) {",
          "190:   log_message(LOG_ERR, \"Configuration error: BFD instance %s\"",
          "191:        \" min_tx value %i is not valid (must be in range\"",
          "192:        \" [%u-%u]), ignoring\", bfd->iname, value,",
          "193:        BFD_IDLETX_MIN, BFD_IDLETX_MAX);",
          "194:  } else",
          "195:   bfd->local_idle_tx_intv = value * 1000;",
          "196: }",
          "198: static void",
          "199: bfd_multiplier_handler(vector_t *strvec)",
          "200: {",
          "201:  bfd_t *bfd;",
          "202:  int value;",
          "204:  assert(strvec);",
          "205:  assert(bfd_data);",
          "207:  bfd = LIST_TAIL_DATA(bfd_data->bfd);",
          "208:  assert(bfd);",
          "210:  value = atoi(vector_slot(strvec, 1));",
          "212:  if (value < BFD_MULTIPLIER_MIN || value > BFD_MULTIPLIER_MAX) {",
          "213:   log_message(LOG_ERR, \"Configuration error: BFD instance %s\"",
          "214:        \" min_tx value %i not valid (must be in range\"",
          "215:        \" [%u-%u]), ignoring\", bfd->iname, value,",
          "216:        BFD_MULTIPLIER_MIN, BFD_MULTIPLIER_MAX);",
          "217:  } else",
          "218:   bfd->local_detect_mult = value;",
          "219: }",
          "221: static void",
          "222: bfd_disabled_handler(__attribute__((unused)) vector_t *strvec)",
          "223: {",
          "224:  bfd_t *bfd;",
          "226:  assert(strvec);",
          "227:  assert(bfd_data);",
          "229:  bfd = LIST_TAIL_DATA(bfd_data->bfd);",
          "230:  assert(bfd);",
          "232:  bfd->disabled = true;",
          "233: }",
          "235: void",
          "236: init_bfd_keywords(bool active)",
          "237: {",
          "238:  install_keyword_root(\"bfd_instance\", &bfd_handler, active);",
          "239:  install_keyword(\"source_ip\", &bfd_srcip_handler);",
          "240:  install_keyword(\"neighbor_ip\", &bfd_nbrip_handler);",
          "241:  install_keyword(\"min_rx\", &bfd_minrx_handler);",
          "242:  install_keyword(\"min_tx\", &bfd_mintx_handler);",
          "243:  install_keyword(\"idle_tx\", &bfd_idletx_handler);",
          "244:  install_keyword(\"multiplier\", &bfd_multiplier_handler);",
          "245:  install_keyword(\"disabled\", &bfd_disabled_handler);",
          "246: }",
          "248: vector_t *",
          "249: bfd_init_keywords(void)",
          "250: {",
          "252:         init_global_keywords(true);",
          "254:         init_bfd_keywords(true);",
          "255: #ifdef _WITH_LVS_",
          "256:         init_check_keywords(false);",
          "257: #endif",
          "258: #ifdef _WITH_VRRP_",
          "259:         init_vrrp_keywords(false);",
          "260: #endif",
          "262:         return keywords;",
          "263: }",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd_scheduler.c||keepalived/bfd/bfd_scheduler.c": [
          "File: keepalived/bfd/bfd_scheduler.c -> keepalived/bfd/bfd_scheduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"config.h\"",
          "25: #include <sys/socket.h>",
          "26: #include <unistd.h>",
          "27: #include <assert.h>",
          "28: #include <netdb.h>",
          "30: #include \"bfd.h\"",
          "31: #include \"bfd_data.h\"",
          "32: #include \"bfd_scheduler.h\"",
          "33: #include \"bfd_event.h\"",
          "34: #include \"parser.h\"",
          "35: #include \"logger.h\"",
          "36: #include \"memory.h\"",
          "37: #include \"main.h\"",
          "38: #include \"bitops.h\"",
          "39: #include \"utils.h\"",
          "41: static int bfd_send_packet(int, bfdpkt_t *);",
          "42: static void bfd_sender_schedule(bfd_t *);",
          "44: static void bfd_state_down(bfd_t *, char diag);",
          "45: static void bfd_state_admindown(bfd_t *);",
          "46: static void bfd_state_up(bfd_t *);",
          "47: static void bfd_dump_timers(bfd_t *);",
          "56: inline static long",
          "57: thread_time_to_wakeup(thread_t *thread)",
          "58: {",
          "59:  struct timeval tmp_time;",
          "61:  timersub(&thread->sands, &time_now, &tmp_time);",
          "63:  return timer_tol(tmp_time);",
          "64: }",
          "67: static int",
          "68: bfd_sender_thread(thread_t *thread)",
          "69: {",
          "70:  bfd_t *bfd;",
          "71:  bfdpkt_t pkt;",
          "73:  assert(thread);",
          "74:  bfd = THREAD_ARG(thread);",
          "75:  assert(bfd);",
          "76:  assert(!BFD_ISADMINDOWN(bfd));",
          "78:  bfd->thread_out = NULL;",
          "80:  bfd_build_packet(&pkt, bfd, bfd_buffer, BFD_BUFFER_SIZE);",
          "81:  if (bfd_send_packet(bfd->fd_out, &pkt) == -1) {",
          "82:   log_message(LOG_ERR, \"BFD_Instance(%s) Error sending packet,\"",
          "83:        \" disabling instance\", bfd->iname);",
          "84:   bfd_state_admindown(bfd);",
          "85:  }",
          "88:  bfd->final = 0;",
          "91:  if (thread->type != THREAD_EVENT && !BFD_ISADMINDOWN(bfd))",
          "92:   bfd_sender_schedule(bfd);",
          "94:  return 0;",
          "95: }",
          "98: static void",
          "99: bfd_sender_schedule(bfd_t * bfd)",
          "100: {",
          "101:  uint32_t min_jitter, jitter;",
          "103:  assert(bfd);",
          "104:  assert(!bfd->thread_out);",
          "117:  if (bfd->local_detect_mult)",
          "118:   min_jitter = bfd->local_tx_intv * 0.1;",
          "119:  else",
          "120:   min_jitter = 0;",
          "122:  jitter = rand_intv(min_jitter, bfd->local_tx_intv * 0.25);",
          "123:  bfd->thread_out =",
          "124:      thread_add_timer(master, bfd_sender_thread, bfd,",
          "125:         bfd->local_tx_intv - jitter);",
          "126: }",
          "129: static void",
          "130: bfd_sender_cancel(bfd_t *bfd)",
          "131: {",
          "132:  assert(bfd);",
          "133:  assert(bfd->thread_out);",
          "135:  thread_cancel(bfd->thread_out);",
          "136:  bfd->thread_out = NULL;",
          "137: }",
          "140: static void",
          "141: bfd_sender_reschedule(bfd_t *bfd)",
          "142: {",
          "143:  assert(bfd);",
          "145:  bfd_sender_cancel(bfd);",
          "146:  bfd_sender_schedule(bfd);",
          "147: }",
          "150: static int",
          "151: bfd_sender_scheduled(bfd_t *bfd)",
          "152: {",
          "153:  assert(bfd);",
          "155:  return bfd->thread_out != NULL;",
          "156: }",
          "159: static void",
          "160: bfd_sender_suspend(bfd_t * bfd)",
          "161: {",
          "162:  assert(bfd);",
          "163:  assert(bfd->thread_out);",
          "164:  assert(bfd->sands_out == -1);",
          "166:  bfd->sands_out = thread_time_to_wakeup(bfd->thread_out);",
          "167:  bfd_sender_cancel(bfd);",
          "168: }",
          "171: static void",
          "172: bfd_sender_resume(bfd_t *bfd)",
          "173: {",
          "174:  assert(bfd);",
          "175:  assert(!bfd->thread_out);",
          "176:  assert(bfd->sands_out != -1);",
          "178:  bfd->thread_out =",
          "179:      thread_add_timer(master, bfd_sender_thread, bfd, bfd->sands_out);",
          "180:  bfd->sands_out = -1;",
          "181: }",
          "184: static int",
          "185: bfd_sender_suspended(bfd_t *bfd)",
          "186: {",
          "187:  assert(bfd);",
          "189:  return bfd->sands_out != -1;",
          "190: }",
          "192: static void",
          "193: bfd_sender_discard(bfd_t *bfd)",
          "194: {",
          "195:  assert(bfd);",
          "196:  assert(bfd->sands_out != -1);",
          "198:  bfd->sands_out = -1;",
          "199: }",
          "209: static int",
          "210: bfd_expire_thread(thread_t *thread)",
          "211: {",
          "212:  bfd_t *bfd;",
          "213:  uint32_t dead_time, overdue_time;",
          "214:  timeval_t dead_time_tv;",
          "216:  assert(thread);",
          "218:  bfd = THREAD_ARG(thread);",
          "219:  assert(bfd);",
          "222:  assert(BFD_ISUP(bfd) || BFD_ISINIT(bfd));",
          "224:  bfd->thread_exp = NULL;",
          "227:  timersub(&time_now, &bfd->last_seen, &dead_time_tv);",
          "228:  dead_time = timer_tol(dead_time_tv);",
          "231:  overdue_time = dead_time - bfd->local_detect_time;",
          "233:  log_message(LOG_INFO, \"last_seen %ld.%6.6ld dead_time %u overdue_time %u, now %ld.%6.6ld, local_detect_time %u\", bfd->last_seen.tv_sec, bfd->last_seen.tv_usec, dead_time, overdue_time, time_now.tv_sec, time_now.tv_usec, bfd->local_detect_time);",
          "234:  log_message(LOG_WARNING, \"BFD_Instance(%s) Expired after\"",
          "235:       \" %i ms (%i usec overdue)\",",
          "236:       bfd->iname, dead_time / 1000, overdue_time);",
          "244:  bfd->remote_discr = 0;",
          "245:  bfd_state_down(bfd, BFD_DIAG_EXPIRED);",
          "247:  return 0;",
          "248: }",
          "251: static void",
          "252: bfd_expire_schedule(bfd_t *bfd)",
          "253: {",
          "254:  assert(bfd);",
          "255:  assert(!bfd->thread_exp);",
          "257:  bfd->thread_exp =",
          "258:      thread_add_timer(master, bfd_expire_thread, bfd,",
          "259:         bfd->local_detect_time);",
          "260: }",
          "263: static void",
          "264: bfd_expire_cancel(bfd_t *bfd)",
          "265: {",
          "266:  assert(bfd);",
          "267:  assert(bfd->thread_exp);",
          "269:  thread_cancel(bfd->thread_exp);",
          "270:  bfd->thread_exp = NULL;",
          "271: }",
          "274: static void",
          "275: bfd_expire_reschedule(bfd_t *bfd)",
          "276: {",
          "277:  assert(bfd);",
          "279:  bfd_expire_cancel(bfd);",
          "280:  bfd_expire_schedule(bfd);",
          "281: }",
          "284: static int",
          "285: bfd_expire_scheduled(bfd_t *bfd)",
          "286: {",
          "287:  assert(bfd);",
          "289:  return bfd->thread_exp != NULL;",
          "290: }",
          "293: static void",
          "294: bfd_expire_suspend(bfd_t *bfd)",
          "295: {",
          "296:  assert(bfd);",
          "297:  assert(bfd->thread_exp);",
          "298:  assert(bfd->sands_exp == -1);",
          "300:  bfd->sands_exp = thread_time_to_wakeup(bfd->thread_exp);",
          "301:  bfd_expire_cancel(bfd);",
          "302: }",
          "305: static void",
          "306: bfd_expire_resume(bfd_t *bfd)",
          "307: {",
          "308:  assert(bfd);",
          "309:  assert(!bfd->thread_exp);",
          "310:  assert(bfd->sands_exp != -1);",
          "312:  bfd->thread_exp =",
          "313:      thread_add_timer(master, bfd_expire_thread, bfd, bfd->sands_exp);",
          "314:  bfd->sands_exp = -1;",
          "315: }",
          "318: static int",
          "319: bfd_expire_suspended(bfd_t *bfd)",
          "320: {",
          "321:  assert(bfd);",
          "323:  return bfd->sands_exp != -1;",
          "324: }",
          "326: static void",
          "327: bfd_expire_discard(bfd_t *bfd)",
          "328: {",
          "329:  assert(bfd);",
          "330:  assert(bfd->sands_exp != -1);",
          "332:  bfd->sands_exp = -1;",
          "333: }",
          "343: static int",
          "344: bfd_reset_thread(thread_t *thread)",
          "345: {",
          "346:  bfd_t *bfd;",
          "348:  assert(thread);",
          "350:  bfd = THREAD_ARG(thread);",
          "351:  assert(bfd);",
          "352:  assert(bfd->thread_rst);",
          "354:  bfd->thread_rst = NULL;",
          "356:  bfd_init_state(bfd);",
          "357:  return 0;",
          "358: }",
          "361: static void",
          "362: bfd_reset_schedule(bfd_t * bfd)",
          "363: {",
          "364:  assert(bfd);",
          "365:  assert(!bfd->thread_rst);",
          "367:  bfd->thread_rst =",
          "368:      thread_add_timer(master, bfd_reset_thread, bfd,",
          "369:         bfd->local_detect_time);",
          "370: }",
          "373: static void",
          "374: bfd_reset_cancel(bfd_t *bfd)",
          "375: {",
          "376:  assert(bfd);",
          "377:  assert(bfd->thread_rst);",
          "379:  thread_cancel(bfd->thread_rst);",
          "380:  bfd->thread_rst = NULL;",
          "381: }",
          "384: static int",
          "385: bfd_reset_scheduled(bfd_t *bfd)",
          "386: {",
          "387:  assert(bfd);",
          "389:  return bfd->thread_rst != NULL;",
          "390: }",
          "393: static void",
          "394: bfd_reset_suspend(bfd_t *bfd)",
          "395: {",
          "396:  assert(bfd);",
          "397:  assert(bfd->thread_rst);",
          "398:  assert(bfd->sands_rst == -1);",
          "400:  bfd->sands_rst = thread_time_to_wakeup(bfd->thread_rst);",
          "401:  bfd_reset_cancel(bfd);",
          "402: }",
          "405: static void",
          "406: bfd_reset_resume(bfd_t *bfd)",
          "407: {",
          "408:  assert(bfd);",
          "409:  assert(!bfd->thread_rst);",
          "410:  assert(bfd->sands_rst != -1);",
          "412:  bfd->thread_rst =",
          "413:      thread_add_timer(master, bfd_reset_thread, bfd, bfd->sands_rst);",
          "414:  bfd->sands_rst = -1;",
          "415: }",
          "418: static int",
          "419: bfd_reset_suspended(bfd_t *bfd)",
          "420: {",
          "421:  assert(bfd);",
          "423:  return bfd->sands_rst != -1;",
          "424: }",
          "426: static void",
          "427: bfd_reset_discard(bfd_t *bfd)",
          "428: {",
          "429:  assert(bfd);",
          "430:  assert(bfd->sands_rst != -1);",
          "432:  bfd->sands_rst = -1;",
          "433: }",
          "439: static void",
          "440: bfd_state_fall(bfd_t *bfd)",
          "441: {",
          "442:  assert(bfd);",
          "450:  bfd_idle_local_tx_intv(bfd);",
          "452:  if (bfd_expire_scheduled(bfd))",
          "453:   bfd_expire_cancel(bfd);",
          "455:  bfd_event_send(bfd);",
          "456: }",
          "459: static void",
          "460: bfd_state_down(bfd_t *bfd, char diag)",
          "461: {",
          "462:  assert(bfd);",
          "463:  assert(BFD_VALID_DIAG(diag));",
          "465:  bfd->local_state = BFD_STATE_DOWN;",
          "466:  bfd->local_diag = diag;",
          "468:  log_message(LOG_WARNING, \"BFD_Instance(%s) Entering %s state\"",
          "469:       \" (Local diagnostic - %s, Remote diagnostic - %s)\",",
          "470:       bfd->iname, BFD_STATE_STR(bfd->local_state),",
          "471:       BFD_DIAG_STR(bfd->local_diag),",
          "472:       BFD_DIAG_STR(bfd->remote_diag));",
          "474:  bfd_reset_schedule(bfd);",
          "476:  bfd_state_fall(bfd);",
          "477: }",
          "480: static void",
          "481: bfd_state_admindown(bfd_t *bfd)",
          "482: {",
          "483:  assert(bfd);",
          "485:  bfd->local_state = BFD_STATE_ADMINDOWN;",
          "486:  bfd->local_diag = BFD_DIAG_ADMIN_DOWN;",
          "488:  if (bfd_sender_scheduled(bfd))",
          "489:   bfd_sender_cancel(bfd);",
          "491:  log_message(LOG_WARNING, \"BFD_Instance(%s) Entering %s state\",",
          "492:       bfd->iname, BFD_STATE_STR(bfd->local_state));",
          "494:  bfd_state_fall(bfd);",
          "495: }",
          "498: static void",
          "499: bfd_state_rise(bfd_t *bfd)",
          "500: {",
          "502:  bfd->local_diag = BFD_DIAG_NO_DIAG;",
          "504:  log_message(LOG_INFO, \"BFD_Instance(%s) Entering %s state\",",
          "505:       bfd->iname, BFD_STATE_STR(bfd->local_state));",
          "507:  if (bfd_reset_scheduled(bfd))",
          "508:   bfd_reset_cancel(bfd);",
          "510:  if (!bfd_expire_scheduled(bfd))",
          "511:   bfd_expire_schedule(bfd);",
          "513:  bfd_event_send(bfd);",
          "514: }",
          "517: static void",
          "518: bfd_state_up(bfd_t *bfd)",
          "519: {",
          "520:  assert(bfd);",
          "522:  bfd->local_state = BFD_STATE_UP;",
          "523:  bfd_state_rise(bfd);",
          "524: }",
          "527: static void",
          "528: bfd_state_init(bfd_t *bfd)",
          "529: {",
          "530:  assert(bfd);",
          "534:  assert(!BFD_ISUP(bfd));",
          "536:  bfd->local_state = BFD_STATE_INIT;",
          "537:  bfd_state_rise(bfd);",
          "538: }",
          "541: static void",
          "542: bfd_dump_timers(bfd_t *bfd)",
          "543: {",
          "544:  assert(bfd);",
          "546:  log_message(LOG_INFO, \"BFD_Instance(%s)\"",
          "547:       \" --------------< Session parameters >-------------\",",
          "548:       bfd->iname);",
          "549:  log_message(LOG_INFO, \"BFD_Instance(%s)\"",
          "550:       \"        min_tx  min_rx  tx_intv  mult  detect_time\",",
          "551:       bfd->iname);",
          "552:  log_message(LOG_INFO, \"BFD_Instance(%s)\"",
          "553:       \" local %7u %7u %8u %5u %12u\",",
          "554:       bfd->iname, bfd->local_min_tx_intv / 1000,",
          "555:       bfd->local_min_rx_intv / 1000,",
          "556:       bfd->local_tx_intv / 1000, bfd->local_detect_mult,",
          "557:       bfd->local_detect_time / 1000);",
          "558:  log_message(LOG_INFO, \"BFD_Instance(%s)\" \" remote %6u %7u %8u %5u %12u\",",
          "559:       bfd->iname, bfd->remote_min_tx_intv / 1000,",
          "560:       bfd->remote_min_rx_intv / 1000,",
          "561:       bfd->remote_tx_intv / 1000, bfd->remote_detect_mult,",
          "562:       bfd->remote_detect_time / 1000);",
          "563: }",
          "571: static int",
          "572: bfd_send_packet(int fd, bfdpkt_t *pkt)",
          "573: {",
          "574:  int ret;",
          "575:  socklen_t dstlen;",
          "577:  assert(fd >= 0);",
          "578:  assert(pkt);",
          "580:  if (pkt->dst_addr.ss_family == AF_INET)",
          "581:   dstlen = sizeof (struct sockaddr_in);",
          "582:  else",
          "583:   dstlen = sizeof (struct sockaddr_in6);",
          "585:  ret =",
          "586:      sendto(fd, pkt->buf, pkt->len, 0,",
          "587:      (struct sockaddr *) &pkt->dst_addr, dstlen);",
          "588:  if (ret == -1)",
          "589:   log_message(LOG_ERR, \"sendto() error (%m)\");",
          "591:  return ret;",
          "593: }",
          "597: static void",
          "598: bfd_handle_packet(bfdpkt_t *pkt)",
          "599: {",
          "600:  unsigned int old_local_tx_intv;",
          "601:  unsigned int old_remote_tx_intv;",
          "602:  unsigned int old_local_detect_time;",
          "603:  unsigned int old_remote_detect_time;",
          "604:  bfd_t *bfd;",
          "606:  assert(pkt);",
          "607:  assert(pkt->hdr);",
          "610:  if (bfd_check_packet(pkt)) {",
          "611:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "612:    log_message(LOG_ERR,",
          "613:         \"Discarding bogus packet from %s:%i\",",
          "614:         inet_sockaddrtos(&pkt->src_addr),",
          "615:         inet_sockaddrport(&pkt->src_addr));",
          "617:   return;",
          "618:  }",
          "621:  if (!pkt->hdr->remote_discr)",
          "622:   bfd = find_bfd_by_addr(&pkt->src_addr);",
          "623:  else",
          "624:   bfd = find_bfd_by_discr(ntohl(pkt->hdr->remote_discr));",
          "626:  if (!bfd) {",
          "627:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "628:    log_message(LOG_ERR, \"Discarding packet from %s:%i\"",
          "629:         \" (session is not found - your\"",
          "630:         \" discriminator field is %u)\",",
          "631:         inet_sockaddrtos(&pkt->src_addr),",
          "632:         inet_sockaddrport(&pkt->src_addr),",
          "633:         pkt->hdr->remote_discr);",
          "635:   return;",
          "636:  }",
          "639:  if (pkt->hdr->auth != 0) {",
          "640:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "641:    log_message(LOG_ERR, \"Discarding packet from %s:%i\"",
          "642:         \" (auth bit is set, but no authentication\"",
          "643:         \"  is in use)\",",
          "644:         inet_sockaddrtos(&pkt->src_addr),",
          "645:         inet_sockaddrport(&pkt->src_addr));",
          "647:   return;",
          "648:  }",
          "651:  if (bfd->local_state == BFD_STATE_ADMINDOWN) {",
          "652:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "653:    log_message(LOG_INFO, \"Discarding packet from %s:%i\"",
          "654:         \" (session is in AdminDown state)\",",
          "655:         inet_sockaddrtos(&pkt->src_addr),",
          "656:         inet_sockaddrport(&pkt->src_addr));",
          "658:   return;",
          "659:  }",
          "662:  bfd->remote_discr = ntohl(pkt->hdr->local_discr);",
          "663:  bfd->remote_state = pkt->hdr->state;",
          "664:  bfd->remote_diag = pkt->hdr->diag;",
          "665:  bfd->remote_min_rx_intv = ntohl(pkt->hdr->min_rx_intv);",
          "666:  bfd->remote_min_tx_intv = ntohl(pkt->hdr->min_tx_intv);",
          "667:  bfd->remote_demand = pkt->hdr->demand;",
          "668:  bfd->remote_detect_mult = pkt->hdr->detect_mult;",
          "671:  if (pkt->hdr->final)",
          "672:   bfd->poll = 0;",
          "675:  old_local_tx_intv = bfd->local_tx_intv;",
          "676:  old_remote_tx_intv = bfd->remote_tx_intv;",
          "677:  old_local_detect_time = bfd->local_detect_time;",
          "678:  old_remote_detect_time = bfd->remote_detect_time;",
          "686:  if ((pkt->hdr->final && bfd->local_state == BFD_STATE_UP) ||",
          "687:      (pkt->hdr->poll && bfd->local_state == BFD_STATE_UP) ||",
          "688:      bfd->local_state != BFD_STATE_UP) {",
          "689:   bfd_update_local_tx_intv(bfd);",
          "690:   bfd_update_remote_tx_intv(bfd);",
          "691:  }",
          "694:  bfd->local_detect_time = bfd->remote_detect_mult * bfd->remote_tx_intv;",
          "695:  bfd->remote_detect_time = bfd->local_detect_mult * bfd->local_tx_intv;",
          "698:  if (bfd->local_tx_intv != old_local_tx_intv ||",
          "699:      bfd->remote_tx_intv != old_remote_tx_intv ||",
          "700:      bfd->local_detect_time != old_local_detect_time ||",
          "701:      bfd->remote_detect_time != old_remote_detect_time)",
          "702:   if (__test_bit(LOG_DETAIL_BIT, &debug))",
          "703:    bfd_dump_timers(bfd);",
          "706:  if (bfd->local_tx_intv < old_local_tx_intv &&",
          "707:      bfd_sender_scheduled(bfd))",
          "708:   bfd_sender_reschedule(bfd);",
          "711:  if (bfd->local_detect_time != old_local_detect_time)",
          "712:   log_message(LOG_INFO, \"BFD_Instance(%s) Detection time\"",
          "713:        \" is %u ms (was %u ms)\", bfd->iname,",
          "714:        bfd->local_detect_time / 1000,",
          "715:        old_local_detect_time / 1000);",
          "718:  if (bfd->remote_state == BFD_STATE_ADMINDOWN &&",
          "719:      bfd->local_state != BFD_STATE_DOWN)",
          "720:   bfd_state_down(bfd, BFD_DIAG_NBR_SIGNALLED_DOWN);",
          "721:  else {",
          "722:   if (bfd->local_state == BFD_STATE_DOWN) {",
          "723:    if (bfd->remote_state == BFD_STATE_DOWN)",
          "724:     bfd_state_init(bfd);",
          "725:    else if (bfd->remote_state == BFD_STATE_INIT)",
          "726:     bfd_state_up(bfd);",
          "727:   } else if (bfd->local_state == BFD_STATE_INIT) {",
          "728:    if (bfd->remote_state == BFD_STATE_INIT ||",
          "729:        bfd->remote_state == BFD_STATE_UP)",
          "730:     bfd_state_up(bfd);",
          "731:   } else if (bfd->local_state == BFD_STATE_UP)",
          "732:    if (bfd->remote_state == BFD_STATE_DOWN)",
          "733:     bfd_state_down(bfd, BFD_DIAG_NBR_SIGNALLED_DOWN);",
          "734:  }",
          "736:  if (bfd->remote_demand &&",
          "737:      bfd->local_state == BFD_STATE_UP &&",
          "738:      bfd->remote_state == BFD_STATE_UP)",
          "739:   if (bfd_sender_scheduled(bfd))",
          "740:    bfd_sender_cancel(bfd);",
          "742:  if (!bfd->remote_demand ||",
          "743:      bfd->local_state != BFD_STATE_UP ||",
          "744:      bfd->remote_state != BFD_STATE_UP)",
          "745:   if (!bfd_sender_scheduled(bfd))",
          "746:    bfd_sender_schedule(bfd);",
          "748:  if (pkt->hdr->poll) {",
          "749:   bfd->final = 1;",
          "750:   thread_add_event(master, bfd_sender_thread, bfd, 0);",
          "751:  }",
          "754:  bfd->last_seen = timer_now();",
          "757:  if (bfd_expire_scheduled(bfd))",
          "758:   bfd_expire_reschedule(bfd);",
          "759: }",
          "762: static int",
          "763: bfd_receive_packet(bfdpkt_t *pkt, int fd, char *buf, ssize_t bufsz)",
          "764: {",
          "765:  ssize_t len;",
          "766:  unsigned int ttl = 0;",
          "767:  struct msghdr msg = { 0 };",
          "768:  struct cmsghdr *cmsg = NULL;",
          "769:  char cbuf[CMSG_SPACE(sizeof (ttl))] = { 0 };",
          "770:  struct iovec iov[1] = { {0} };",
          "772:  assert(pkt);",
          "773:  assert(fd >= 0);",
          "774:  assert(buf);",
          "775:  assert(bufsz);",
          "777:  iov[0].iov_base = buf;",
          "778:  iov[0].iov_len = bufsz;",
          "780:  msg.msg_name = &pkt->src_addr;",
          "781:  msg.msg_namelen = sizeof (pkt->src_addr);",
          "782:  msg.msg_iov = iov;",
          "783:  msg.msg_iovlen = 1;",
          "784:  msg.msg_control = cbuf;",
          "785:  msg.msg_controllen = sizeof (cbuf);",
          "787:  len = recvmsg(fd, &msg, MSG_DONTWAIT);",
          "788:  if (len == -1) {",
          "789:   log_message(LOG_ERR, \"recvmsg() error (%m)\");",
          "790:   return 1;",
          "791:  }",
          "793:  if (msg.msg_flags & MSG_TRUNC) {",
          "794:   log_message(LOG_WARNING, \"recvmsg() message truncated\");",
          "795:   return 1;",
          "796:  }",
          "798:  if (msg.msg_flags & MSG_CTRUNC)",
          "799:   log_message(LOG_WARNING, \"recvmsg() control message truncated\");",
          "801:  for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;",
          "802:       cmsg = CMSG_NXTHDR(&msg, cmsg)) {",
          "803:   if (cmsg->cmsg_level != IPPROTO_IP || cmsg->cmsg_type != IP_TTL) {",
          "804:    log_message(LOG_WARNING, \"recvmsg() received\"",
          "805:         \" unexpected control message\");",
          "806:   } else",
          "807:    ttl = *CMSG_DATA(cmsg);",
          "808:  }",
          "810:  if (!ttl)",
          "811:   log_message(LOG_WARNING, \"recvmsg() returned no TTL control message\");",
          "813:  pkt->hdr = (bfdhdr_t *) buf;",
          "814:  pkt->len = len;",
          "815:  pkt->ttl = ttl;",
          "817:  return 0;",
          "818: }",
          "825: static int",
          "826: bfd_receiver_thread(thread_t *thread)",
          "827: {",
          "828:  bfd_data_t *data;",
          "829:  bfdpkt_t pkt;",
          "830:  int ret;",
          "831:  int fd;",
          "833:  assert(thread);",
          "835:  data = THREAD_ARG(thread);",
          "836:  assert(data);",
          "838:  fd = thread->u.fd;",
          "839:  assert(fd >= 0);",
          "841:  data->thread_in = NULL;",
          "844:  if (thread->type == THREAD_READY_FD) {",
          "845:   ret = bfd_receive_packet(&pkt, fd, bfd_buffer, BFD_BUFFER_SIZE);",
          "846:   if (!ret)",
          "847:    bfd_handle_packet(&pkt);",
          "848:  }",
          "850:  data->thread_in =",
          "851:      thread_add_read(thread->master, bfd_receiver_thread, data,",
          "852:        fd, 60 * TIMER_HZ);",
          "854:  return 0;",
          "855: }",
          "862: static int",
          "863: bfd_open_fd_in(bfd_data_t *data)",
          "864: {",
          "865:  struct addrinfo hints;",
          "866:  struct addrinfo *ai_in;",
          "867:  int ret;",
          "868:  int yes = 1;",
          "870:  assert(data);",
          "871:  assert(data->fd_in == -1);",
          "873:  memset(&hints, 0, sizeof hints);",
          "874:  hints.ai_family = AF_UNSPEC;",
          "875:  hints.ai_flags = AI_NUMERICSERV | AI_PASSIVE;",
          "876:  hints.ai_protocol = IPPROTO_UDP;",
          "877:  hints.ai_socktype = SOCK_DGRAM;",
          "879:  ai_in = (struct addrinfo *)MALLOC(sizeof (struct addrinfo));",
          "881:  if ((ret = getaddrinfo(NULL, BFD_CONTROL_PORT, &hints, &ai_in)))",
          "882:   log_message(LOG_ERR, \"getaddrinfo() error (%s)\", gai_strerror(ret));",
          "883:  else if ((data->fd_in = socket(ai_in->ai_family, ai_in->ai_socktype, ai_in->ai_protocol)) == -1)",
          "884:   log_message(LOG_ERR, \"socket() error (%m)\");",
          "885:  else if ((ret = setsockopt(data->fd_in, IPPROTO_IP, IP_RECVTTL, &yes, sizeof (yes))) == -1)",
          "886:   log_message(LOG_ERR, \"setsockopt() error (%m)\");",
          "887:  else if ((ret = bind(data->fd_in, ai_in->ai_addr, ai_in->ai_addrlen)) == -1)",
          "888:   log_message(LOG_ERR, \"bind() error (%m)\");",
          "890:  if (ret)",
          "891:   ret = 1;",
          "893:  freeaddrinfo(ai_in);",
          "894:  return ret;",
          "895: }",
          "898: static int",
          "899: bfd_open_fd_out(bfd_t *bfd)",
          "900: {",
          "901:  int ttl = BFD_CONTROL_TTL;",
          "902:  int ret;",
          "904:  assert(bfd);",
          "905:  assert(bfd->fd_out == -1);",
          "907:  bfd->fd_out = socket(bfd->nbr_addr.ss_family, SOCK_DGRAM, IPPROTO_UDP);",
          "908:  if (bfd->fd_out == -1) {",
          "909:   log_message(LOG_ERR, \"BFD_Instance(%s) socket() error (%m)\",",
          "910:        bfd->iname);",
          "911:   return 1;",
          "912:  }",
          "914:  if (bfd->src_addr.ss_family) {",
          "915:   ret =",
          "916:       bind(bfd->fd_out, (struct sockaddr *) &bfd->src_addr,",
          "917:     sizeof (struct sockaddr));",
          "918:   if (ret == -1) {",
          "919:    log_message(LOG_ERR,",
          "920:         \"BFD_Instance(%s) bind() error (%m)\",",
          "921:         bfd->iname);",
          "922:    return 1;",
          "923:   }",
          "924:  }",
          "926:  ret = setsockopt(bfd->fd_out, IPPROTO_IP, IP_TTL, &ttl, sizeof (ttl));",
          "927:  if (ret == -1) {",
          "928:   log_message(LOG_ERR, \"BFD_Instance(%s) setsockopt() \"",
          "929:        \" error (%m)\", bfd->iname);",
          "930:   return 1;",
          "931:  }",
          "933:  return 0;",
          "934: }",
          "937: static int",
          "938: bfd_open_fds(bfd_data_t *data)",
          "939: {",
          "940:  bfd_t *bfd;",
          "941:  element e;",
          "943:  assert(data);",
          "944:  assert(data->bfd);",
          "947:  if (bfd_data->fd_in == -1) {",
          "948:   if (bfd_open_fd_in(data)) {",
          "949:    log_message(LOG_ERR, \"Unable to open listening socket\");",
          "952:    return 1;",
          "953:   }",
          "954:  }",
          "956:  for (e = LIST_HEAD(data->bfd); e; ELEMENT_NEXT(e)) {",
          "957:   bfd = ELEMENT_DATA(e);",
          "958:   assert(bfd);",
          "961:   if (bfd->disabled)",
          "962:    continue;",
          "964:   if (bfd_open_fd_out(bfd)) {",
          "965:    log_message(LOG_ERR, \"BFD_Instance(%s) Unable to\"",
          "966:         \" open output socket, disabling instance\",",
          "967:         bfd->iname);",
          "968:    bfd_state_admindown(bfd);",
          "969:   }",
          "970:  }",
          "972:  return 0;",
          "973: }",
          "976: static void",
          "977: bfd_register_workers(bfd_data_t *data)",
          "978: {",
          "979:  bfd_t *bfd;",
          "980:  element e;",
          "982:  assert(data);",
          "983:  assert(!data->thread_in);",
          "986:  data->thread_in = thread_add_read(master, bfd_receiver_thread,",
          "987:        data, data->fd_in, 60 * TIMER_HZ);",
          "990:  for (e = LIST_HEAD(data->bfd); e; ELEMENT_NEXT(e)) {",
          "991:   bfd = ELEMENT_DATA(e);",
          "994:   if (bfd->disabled)",
          "995:    continue;",
          "999:   if (bfd_sender_suspended(bfd)) {",
          "1000:    if (bfd_sender_suspended(bfd)) {",
          "1001:     if (BFD_ISADMINDOWN(bfd))",
          "1002:      bfd_sender_discard(bfd);",
          "1003:     else",
          "1004:      bfd_sender_resume(bfd);",
          "1005:    }",
          "1006:   } else if (!BFD_ISADMINDOWN(bfd))",
          "1007:    bfd_sender_schedule(bfd);",
          "1009:   if (bfd_expire_suspended(bfd)) {",
          "1010:    if (BFD_ISADMINDOWN(bfd))",
          "1011:     bfd_expire_discard(bfd);",
          "1012:    else",
          "1013:     bfd_expire_resume(bfd);",
          "1014:   }",
          "1016:   if (bfd_reset_suspended(bfd)) {",
          "1017:    if (BFD_ISADMINDOWN(bfd))",
          "1018:     bfd_reset_discard(bfd);",
          "1019:    else",
          "1020:     bfd_reset_resume(bfd);",
          "1021:   }",
          "1022:  }",
          "1023: }",
          "1026: void",
          "1027: bfd_dispatcher_release(bfd_data_t *data)",
          "1028: {",
          "1029:  bfd_t *bfd;",
          "1030:  element e;",
          "1032:  assert(data);",
          "1036:  if (!data->thread_in)",
          "1037:   return;",
          "1039:  assert(data->fd_in != -1);",
          "1041:  thread_cancel(data->thread_in);",
          "1042:  data->thread_in = NULL;",
          "1045:  if (!reload) {",
          "1046:   close(data->fd_in);",
          "1047:   data->fd_in = -1;",
          "1048:  }",
          "1051:  set_time_now();",
          "1052:  for (e = LIST_HEAD(data->bfd); e; ELEMENT_NEXT(e)) {",
          "1053:   bfd = ELEMENT_DATA(e);",
          "1056:   if (bfd->disabled)",
          "1057:    continue;",
          "1059:   if (bfd_sender_scheduled(bfd))",
          "1060:    bfd_sender_suspend(bfd);",
          "1062:   if (bfd_expire_scheduled(bfd))",
          "1063:    bfd_expire_suspend(bfd);",
          "1065:   if (bfd_reset_scheduled(bfd))",
          "1066:    bfd_reset_suspend(bfd);",
          "1068:   assert(bfd->fd_out != -1);",
          "1070:   close(bfd->fd_out);",
          "1071:   bfd->fd_out = -1;",
          "1072:  }",
          "1073: }",
          "1076: int",
          "1077: bfd_dispatcher_init(thread_t *thread)",
          "1078: {",
          "1079:  bfd_data_t *data;",
          "1081:  assert(thread);",
          "1083:  data = THREAD_ARG(thread);",
          "1084:  if (bfd_open_fds(data) == -1)",
          "1085:   exit(EXIT_FAILURE);",
          "1087:  bfd_register_workers(data);",
          "1089:  return 0;",
          "1090: }",
          "",
          "---------------"
        ],
        "keepalived/check/check_parser.c||keepalived/check/check_parser.c": [
          "File: keepalived/check/check_parser.c -> keepalived/check/check_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #if defined _WITH_VRRP_",
          "41: #include \"vrrp_parser.h\"",
          "42: #endif",
          "43: #include \"libipvs.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #if defined _WITH_BFD_",
          "44: #include \"bfd_parser.h\"",
          "45: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:  init_check_keywords(true);",
          "740: #ifdef _WITH_VRRP_",
          "741:  init_vrrp_keywords(false);",
          "742: #endif",
          "743:  return keywords;",
          "744: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745: #endif",
          "746: #ifdef _WITH_BFD_",
          "747:  init_bfd_keywords(false);",
          "",
          "---------------"
        ],
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #include \"vrrp_json.h\"",
          "69: #endif",
          "70: #endif",
          "71: #include \"global_parser.h\"",
          "72: #if HAVE_DECL_CLONE_NEWNET",
          "73: #include \"namespaces.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: #ifdef _WITH_BFD_",
          "72: #include \"bfd_daemon.h\"",
          "73: #include \"bfd_parser.h\"",
          "74: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: static bool free_vrrp_pidfile;",
          "109: #endif",
          "111: #ifdef _WITH_SNMP_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: #ifdef _WITH_BFD_",
          "117: static bool free_bfd_pidfile;",
          "118: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  if (free_checkers_pidfile)",
          "221:   FREE_PTR(checkers_pidfile);",
          "222: #endif",
          "224:  FREE_PTR(instance_name);",
          "225:  FREE_PTR(config_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: #ifdef _WITH_BFD_",
          "233:  if (free_bfd_pidfile)",
          "234:   FREE_PTR(bfd_pidfile);",
          "235: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "304:  if (pid == vrrp_child)",
          "305:   return PROG_VRRP;",
          "306: #endif",
          "308:  return NULL;",
          "309: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320: #ifdef _WITH_BFD_",
          "321:  if (pid == bfd_child)",
          "322:   return PROG_BFD;",
          "323: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "321: #ifdef _WITH_LVS_",
          "322:  init_check_keywords(false);",
          "323: #endif",
          "325:  return keywords;",
          "326: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341: #ifdef _WITH_BFD_",
          "342:  init_bfd_keywords(false);",
          "343: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "333: #endif",
          "337: stop_keepalived(void)",
          "338: {",
          "339: #ifndef _DEBUG_",
          "",
          "[Removed Lines]",
          "336: static void",
          "",
          "[Added Lines]",
          "356: void",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "351:   pidfile_rm(checkers_pidfile);",
          "352: #endif",
          "354:  pidfile_rm(main_pidfile);",
          "355: #endif",
          "356: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374: #ifdef _WITH_BFD_",
          "375:  if (__test_bit(DAEMON_BFD, &daemon_mode))",
          "376:   pidfile_rm(bfd_pidfile);",
          "377: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "359: static void",
          "360: start_keepalived(void)",
          "361: {",
          "362: #ifdef _WITH_LVS_",
          "364:  if (__test_bit(DAEMON_CHECKERS, &daemon_mode))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387: #ifdef _WITH_BFD_",
          "389:  open_bfd_pipe();",
          "390: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "369:  if (__test_bit(DAEMON_VRRP, &daemon_mode))",
          "370:   start_vrrp_child();",
          "371: #endif",
          "372: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: #ifdef _WITH_BFD_",
          "404:  if (__test_bit(DAEMON_BFD, &daemon_mode))",
          "405:   start_bfd_child();",
          "406: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "421:  if (checkers_child > 0 && sig == SIGHUP)",
          "422:   kill(checkers_child, sig);",
          "423: #endif",
          "424: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459: #ifdef _WITH_BFD_",
          "460:  if (bfd_child > 0 && sig == SIGHUP)",
          "461:   kill(bfd_child, sig);",
          "462: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "480:   wait_count++;",
          "481:  }",
          "482: #endif",
          "484:  gettimeofday(&start_time, NULL);",
          "485:  while (wait_count) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: #ifdef _WITH_BFD_",
          "523:  if (bfd_child > 0) {",
          "524:   kill(bfd_child, SIGTERM);",
          "525:   wait_count++;",
          "526:  }",
          "527: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "525:    wait_count--;",
          "526:   }",
          "527: #endif",
          "528: #else",
          "529:   ret = sigtimedwait(&child_wait, NULL, &timeout);",
          "530:   if (ret == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: #ifdef _WITH_BFD_",
          "574:   if (bfd_child > 0 && bfd_child == (pid_t)siginfo.ssi_pid) {",
          "575:    report_child_status(status, bfd_child, PROG_BFD);",
          "576:    bfd_child = 0;",
          "577:    wait_count--;",
          "578:   }",
          "579: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "549:    wait_count--;",
          "550:   }",
          "551: #endif",
          "552: #endif",
          "554:   if (wait_count) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605: #ifdef _WITH_BFD_",
          "606:   if (bfd_child > 0 && bfd_child == waitpid(bfd_child, &status, WNOHANG)) {",
          "607:    report_child_status(status, bfd_child, PROG_BFD);",
          "608:    bfd_child = 0;",
          "609:    wait_count--;",
          "610:   }",
          "611: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "585:   kill(checkers_child, SIGKILL);",
          "586:  }",
          "587: #endif",
          "589: #ifndef HAVE_SIGNALFD",
          "590:  if (!sigismember(&old_set, SIGCHLD))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "649: #ifdef _WITH_BFD_",
          "650:  if (bfd_child) {",
          "651:   log_message(LOG_INFO, \"bfd process failed to die - forcing termination\");",
          "652:   kill(bfd_child, SIGKILL);",
          "653:  }",
          "654: #endif",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "684: #if defined _WITH_VRRP_ && defined _WITH_LVS_",
          "685:  fprintf(stderr, \"  -P, --vrrp                   Only run with VRRP subsystem\\n\");",
          "686:  fprintf(stderr, \"  -C, --check                  Only run with Health-checker subsystem\\n\");",
          "687: #endif",
          "688:  fprintf(stderr, \"  -l, --log-console            Log messages to local console\\n\");",
          "689:  fprintf(stderr, \"  -D, --log-detail             Detailed log messages\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754: #endif",
          "755: #ifdef _WITH_BFD_",
          "756:  fprintf(stderr, \"  -B, --no_bfd                    Don't run BFD subsystem\\n\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "709:  fprintf(stderr, \"  -c, --checkers_pid=FILE      Use specified pidfile for checkers child process\\n\");",
          "710:  fprintf(stderr, \"  -a, --address-monitoring     Report all address additions/deletions notified via netlink\\n\");",
          "711: #endif",
          "712: #ifdef _WITH_SNMP_",
          "713:  fprintf(stderr, \"  -x, --snmp                   Enable SNMP subsystem\\n\");",
          "714:  fprintf(stderr, \"  -A, --snmp-agent-socket=FILE Use the specified socket for master agent\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782: #ifdef _WITH_BFD_",
          "783:  fprintf(stderr, \"  -b, --bfd_pid=FILE           Use specified pidfile for BFD child process\\n\");",
          "784: #endif",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "747: #if defined _WITH_VRRP_ && defined _WITH_LVS_",
          "748:   {\"vrrp\",  no_argument,  NULL, 'P'},",
          "749:   {\"check\",  no_argument,  NULL, 'C'},",
          "750: #endif",
          "751:   {\"log-console\",  no_argument,  NULL, 'l'},",
          "752:   {\"log-detail\",  no_argument,  NULL, 'D'},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "823: #endif",
          "824: #ifdef _WITH_BFD_",
          "825:   {\"no_bfd\",  no_argument,  NULL, 'B'},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "772:   {\"checkers_pid\", required_argument, NULL, 'c'},",
          "773:   {\"address-monitoring\", no_argument,  NULL, 'a'},",
          "774: #endif",
          "775: #ifdef _WITH_SNMP_",
          "776:   {\"snmp\",  no_argument,  NULL, 'x'},",
          "777:   {\"snmp-agent-socket\", required_argument, NULL, 'A'},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851: #ifdef _WITH_BFD_",
          "852:   {\"bfd_pid\",  required_argument, NULL, 'b'},",
          "853: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "802: #ifdef _WITH_LVS_",
          "803:          \"ac:I\"",
          "804: #endif",
          "805: #ifdef _WITH_SNMP_",
          "806:          \"xA:\"",
          "807: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884: #ifdef _WITH_BFD_",
          "885:          \"Bb:\"",
          "886: #endif",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "887:    break;",
          "888: #if defined _WITH_VRRP_ && defined _WITH_LVS_",
          "889:   case 'P':",
          "892:    break;",
          "893:   case 'C':",
          "896:    break;",
          "897: #endif",
          "898:   case 'p':",
          "",
          "[Removed Lines]",
          "890:    daemon_mode = 0;",
          "891:    __set_bit(DAEMON_VRRP, &daemon_mode);",
          "894:    daemon_mode = 0;",
          "895:    __set_bit(DAEMON_CHECKERS, &daemon_mode);",
          "",
          "[Added Lines]",
          "972:    __clear_bit(DAEMON_CHECKERS, &daemon_mode);",
          "975:    __clear_bit(DAEMON_VRRP, &daemon_mode);",
          "976:    break;",
          "977: #endif",
          "978: #ifdef _WITH_BFD_",
          "979:   case 'B':",
          "980:    __clear_bit(DAEMON_BFD, &daemon_mode);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "911:    vrrp_pidfile = optarg;",
          "912:    break;",
          "913: #endif",
          "914: #ifdef _WITH_SNMP_",
          "915:   case 'x':",
          "916:    snmp = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999: #ifdef _WITH_BFD_",
          "1000:   case 'b':",
          "1001:    bfd_pidfile = optarg;",
          "1002:    break;",
          "1003: #endif",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "995: #ifdef _WITH_LVS_",
          "996:  __set_bit(DAEMON_CHECKERS, &daemon_mode);",
          "997: #endif",
          "1000:  openlog(PACKAGE_NAME, LOG_PID, log_facility);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088: #ifdef _WITH_BFD_",
          "1089:  __set_bit(DAEMON_BFD, &daemon_mode);",
          "1090: #endif",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1172: #ifdef _WITH_VRRP_",
          "1173:   if (!vrrp_pidfile && (vrrp_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR VRRP_PID_FILE, instance_name, PID_EXTENSION)))",
          "1174:    free_vrrp_pidfile = true;",
          "1175: #endif",
          "1176:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1268: #endif",
          "1269: #ifdef _WITH_BFD_",
          "1270:   if (!bfd_pidfile && (bfd_pidfile = make_pidfile_name(KEEPALIVED_PID_DIR VRRP_PID_FILE, instance_name, PID_EXTENSION)))",
          "1271:    free_bfd_pidfile = true;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1185: #ifdef _WITH_VRRP_",
          "1186:   if (!vrrp_pidfile)",
          "1187:    vrrp_pidfile = KEEPALIVED_PID_DIR VRRP_PID_FILE PID_EXTENSION;",
          "1188: #endif",
          "1189:  }",
          "1190:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1285: #endif",
          "1286: #ifdef _WITH_BFD_",
          "1287:   if (!bfd_pidfile)",
          "1288:    bfd_pidfile = KEEPALIVED_PID_DIR BFD_PID_FILE PID_EXTENSION;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1198: #ifdef _WITH_VRRP_",
          "1199:   if (!vrrp_pidfile)",
          "1200:    vrrp_pidfile = PID_DIR VRRP_PID_FILE PID_EXTENSION;",
          "1201: #endif",
          "1202:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302: #endif",
          "1303: #ifdef _WITH_BFD_",
          "1304:   if (!bfd_pidfile)",
          "1305:    bfd_pidfile = PID_DIR BFD_PID_FILE PID_EXTENSION;",
          "",
          "---------------"
        ],
        "keepalived/include/bfd.h||keepalived/include/bfd.h": [
          "File: keepalived/include/bfd.h -> keepalived/include/bfd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _BFD_H_",
          "23: #define _BFD_H_",
          "25: #include <stdbool.h>",
          "26: #include <stdint.h>",
          "27: #include <sys/socket.h>",
          "29: #include \"scheduler.h\"",
          "30: #include \"timer.h\"",
          "35: #define BFD_CONTROL_PORT \"3784\"",
          "36: #define BFD_CONTROL_TTL  255",
          "41: #define BFD_MINRX_MIN  1",
          "42: #define BFD_MINRX_MAX  1000",
          "43: #define BFD_MINRX_DEFAULT 10",
          "45: #define BFD_MINTX_MIN  1",
          "46: #define BFD_MINTX_MAX  1000",
          "47: #define BFD_MINTX_DEFAULT 10",
          "49: #define BFD_IDLETX_MIN  1000",
          "50: #define BFD_IDLETX_MAX  10000",
          "51: #define BFD_IDLETX_DEFAULT 1000",
          "53: #define BFD_MULTIPLIER_MIN 1",
          "54: #define BFD_MULTIPLIER_MAX 10",
          "55: #define BFD_MULTIPLIER_DEFAULT 5",
          "61: #define BFD_INAME_MAX 32",
          "63: typedef struct _bfd {",
          "104: } bfd_t;",
          "109: typedef struct _bfdhdr {",
          "110: #if __BYTE_ORDER == __LITTLE_ENDIAN",
          "111:  u_char diag:5;",
          "112:  u_char version:3;",
          "115:  u_char multipoint:1;",
          "116:  u_char demand:1;",
          "117:  u_char auth:1;",
          "118:  u_char cplane:1;",
          "119:  u_char final:1;",
          "120:  u_char poll:1;",
          "121:  u_char state:2;",
          "122: #elif __BYTE_ORDER == __BIG_ENDIAN",
          "123:  u_char version:3;",
          "124:  u_char diag:5;",
          "127:  u_char state:2;",
          "128:  u_char poll:1;",
          "129:  u_char final:1;",
          "130:  u_char cplane:1;",
          "131:  u_char auth:1;",
          "132:  u_char demand:1;",
          "133:  u_char multipoint:1;",
          "134: #else",
          "135: #error \"Unsupported byte order\"",
          "136: #endif",
          "137:  u_char detect_mult;",
          "138:  u_char len;",
          "140:  uint32_t local_discr;",
          "141:  uint32_t remote_discr;",
          "142:  uint32_t min_tx_intv;",
          "143:  uint32_t min_rx_intv;",
          "144:  uint32_t min_echo_rx_intv;",
          "145: } bfdhdr_t;",
          "148:   Version",
          "150: #define BFD_VERSION_1   1",
          "153:    State (Sta)",
          "156: #define BFD_STATE_ADMINDOWN  0",
          "157: #define BFD_STATE_DOWN   1",
          "158: #define BFD_STATE_INIT   2",
          "159: #define BFD_STATE_UP   3",
          "161: #define BFD_STATE_STR(s) \\",
          "162:  (BFD_STATE_ADMINDOWN == s ? \"AdminDown\" : \\",
          "163:  (BFD_STATE_DOWN == s ? \"Down\" : \\",
          "164:  (BFD_STATE_INIT == s ? \"Init\" : \\",
          "165:  (BFD_STATE_UP == s ? \"Up\" : \"Unknown\"))))",
          "167: #define BFD_VALID_STATE(s) (s >= 0 && s <= 3)",
          "169: #define BFD_ISADMINDOWN(b) (b->local_state == BFD_STATE_ADMINDOWN)",
          "170: #define BFD_ISDOWN(b) (b->local_state == BFD_STATE_DOWN)",
          "171: #define BFD_ISINIT(b) (b->local_state == BFD_STATE_INIT)",
          "172: #define BFD_ISUP(b) (b->local_state == BFD_STATE_UP)",
          "175:    Diagnostic (Diag)",
          "178: #define BFD_DIAG_NO_DIAG  0",
          "179: #define BFD_DIAG_EXPIRED  1",
          "180: #define BFD_DIAG_ECHO_FAILED  2",
          "181: #define BFD_DIAG_NBR_SIGNALLED_DOWN 3",
          "182: #define BFD_DIAG_FWD_PLANE_RESET 4",
          "183: #define BFD_DIAG_PATH_DOWN  5",
          "184: #define BFD_DIAG_CAT_PATH_DOWN  6",
          "185: #define BFD_DIAG_ADMIN_DOWN  7",
          "186: #define BFD_DIAG_RCAT_PATH_DOWN  8",
          "188: #define BFD_DIAG_STR(d) \\",
          "189:  (BFD_DIAG_NO_DIAG == d ? \"No Diagnostic\" : \\",
          "190:  (BFD_DIAG_EXPIRED == d ? \"Control Detection Time Expired\" : \\",
          "191:  (BFD_DIAG_ECHO_FAILED == d ? \"Echo Function Failed\" : \\",
          "192:  (BFD_DIAG_NBR_SIGNALLED_DOWN == d ? \"Neighbor Signaled Session Down\" : \\",
          "193:  (BFD_DIAG_FWD_PLANE_RESET == d ? \"Forwarding Plane Reset\" : \\",
          "194:  (BFD_DIAG_PATH_DOWN == d ? \"Path Down\" : \\",
          "195:  (BFD_DIAG_CAT_PATH_DOWN == d ? \"Concatenated Path Down\" : \\",
          "196:  (BFD_DIAG_ADMIN_DOWN == d ? \"Administratively Down\" : \\",
          "197:  (BFD_DIAG_RCAT_PATH_DOWN == d ? \"Reverse Concatenated Path Down\" : \"Unknown\")))))))))",
          "199: #define BFD_VALID_DIAG(d)    (d >= 0 && d <= 8)",
          "204: typedef struct _bfdpkt {",
          "205:  bfdhdr_t *hdr;",
          "206:  struct sockaddr_storage src_addr;",
          "207:  struct sockaddr_storage dst_addr;",
          "208:  unsigned int ttl;",
          "209:  unsigned int len;",
          "210:  char *buf;",
          "211: } bfdpkt_t;",
          "213: extern void bfd_update_local_tx_intv(bfd_t *);",
          "214: extern void bfd_update_remote_tx_intv(bfd_t *);",
          "215: extern void bfd_idle_local_tx_intv(bfd_t * bfd);",
          "216: extern void bfd_set_poll(bfd_t *);",
          "217: extern void bfd_init_state(bfd_t *);",
          "218: extern void bfd_copy_state(bfd_t *, const bfd_t *);",
          "219: extern void bfd_copy_sands(bfd_t *, const bfd_t *);",
          "220: extern bool bfd_check_packet(const bfdpkt_t *);",
          "221: extern void bfd_build_packet(bfdpkt_t * pkt, const bfd_t *, char *,",
          "222:         const ssize_t);",
          "",
          "---------------"
        ],
        "keepalived/include/bfd_daemon.h||keepalived/include/bfd_daemon.h": [
          "File: keepalived/include/bfd_daemon.h -> keepalived/include/bfd_daemon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _BFD_DAEMON_H_",
          "24: #define _BFD_DAEMON_H_",
          "26: #define PROG_BFD \"Keepalived_bfd\"",
          "28: extern int bfd_event_pipe[2];",
          "30: extern void open_bfd_pipe(void);",
          "31: extern int start_bfd_child(void);",
          "",
          "---------------"
        ],
        "keepalived/include/bfd_data.h||keepalived/include/bfd_data.h": [
          "File: keepalived/include/bfd_data.h -> keepalived/include/bfd_data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _BFD_DATA_H_",
          "24: #define _BFD_DATA_H_",
          "26: #include <stdbool.h>",
          "28: #include \"list.h\"",
          "29: #include \"bfd.h\"",
          "31: typedef struct _bfd_data {",
          "35: } bfd_data_t;",
          "37: #define BFD_BUFFER_SIZE 32",
          "40: extern bfd_data_t *bfd_data;",
          "41: extern bfd_data_t *old_bfd_data;",
          "42: extern char *bfd_buffer;",
          "44: extern void alloc_bfd(char *, bool);",
          "45: extern bfd_data_t *alloc_bfd_data(void);",
          "46: extern void dump_bfd_data(bfd_data_t *);",
          "47: extern void free_bfd_data(bfd_data_t *);",
          "48: extern void bfd_complete_init(void);",
          "49: extern void alloc_bfd_buffer(void);",
          "50: extern void free_bfd_buffer(void);",
          "51: extern bfd_t *find_bfd_by_addr(struct sockaddr_storage *);",
          "52: extern bfd_t *find_bfd_by_discr(uint32_t);",
          "53: extern bfd_t *find_bfd_by_name(char *);",
          "54: extern uint32_t rand_intv(uint32_t, uint32_t);",
          "55: extern uint32_t bfd_get_random_discr(bfd_data_t *);",
          "",
          "---------------"
        ],
        "keepalived/include/bfd_event.h||keepalived/include/bfd_event.h": [
          "File: keepalived/include/bfd_event.h -> keepalived/include/bfd_event.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _BFD_EVENT_H_",
          "24: #define _BFD_EVENT_H_",
          "26: #include \"bfd.h\"",
          "28: typedef struct _bfd_event {",
          "29:  char iname[BFD_INAME_MAX];",
          "30:  u_char state;",
          "31:  timeval_t sent_time;",
          "32: } bfd_event_t;",
          "34: extern void bfd_event_send(bfd_t *);",
          "",
          "---------------"
        ],
        "keepalived/include/bfd_parser.h||keepalived/include/bfd_parser.h": [
          "File: keepalived/include/bfd_parser.h -> keepalived/include/bfd_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _BFD_PARSER_H_",
          "23: #define _BFD_PARSER_H_",
          "25: #include <stdbool.h>",
          "27: #include \"vector.h\"",
          "29: extern void init_bfd_keywords(bool);",
          "30: extern vector_t *bfd_init_keywords(void);",
          "",
          "---------------"
        ],
        "keepalived/include/bfd_scheduler.h||keepalived/include/bfd_scheduler.h": [
          "File: keepalived/include/bfd_scheduler.h -> keepalived/include/bfd_scheduler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _BFD_SCHEDULER_H_",
          "23: #define _BFD_SCHEDULER_H_",
          "25: #include \"scheduler.h\"",
          "26: #include \"bfd_data.h\"",
          "28: extern int bfd_dispatcher_init(thread_t *);",
          "29: extern void bfd_dispatcher_release(bfd_data_t *);",
          "",
          "---------------"
        ],
        "keepalived/include/main.h||keepalived/include/main.h": [
          "File: keepalived/include/main.h -> keepalived/include/main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #ifdef _WITH_LVS_",
          "38:  DAEMON_CHECKERS,",
          "39: #endif",
          "40: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #ifdef _WITH_BFD_",
          "41:  DAEMON_BFD,",
          "42: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: #ifdef _WITH_SNMP_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #ifdef _WITH_VRRP_",
          "57: #endif",
          "58: #ifdef _WITH_LVS_",
          "61: #endif",
          "62: #ifdef _WITH_BFD_",
          "65: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: extern void free_parent_mallocs_exit(void);",
          "73: extern char *make_syslog_ident(const char*);",
          "76: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: extern void stop_keepalived(void);",
          "",
          "---------------"
        ],
        "keepalived/include/pidfile.h||keepalived/include/pidfile.h": [
          "File: keepalived/include/pidfile.h -> keepalived/include/pidfile.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #endif",
          "36: #define KEEPALIVED_PID_DIR PID_DIR PACKAGE \"/\"",
          "37: #define KEEPALIVED_PID_FILE PACKAGE",
          "38: #define VRRP_PID_FILE  \"vrrp\"",
          "39: #define CHECKERS_PID_FILE \"checkers\"",
          "40: #define PID_EXTENSION  \".pid\"",
          "42: extern const char *pid_directory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #ifdef _WITH_VRRP_",
          "40: #endif",
          "41: #ifdef _WITH_LVS_",
          "43: #endif",
          "44: #ifdef _WITH_BFD_",
          "45: #define BFD_PID_FILE  \"bfd\"",
          "46: #endif",
          "",
          "---------------"
        ],
        "keepalived/include/vrrp.h||keepalived/include/vrrp.h": [
          "File: keepalived/include/vrrp.h -> keepalived/include/vrrp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: #ifdef _WITH_BFD_",
          "201: #endif",
          "",
          "---------------"
        ],
        "keepalived/include/vrrp_data.h||keepalived/include/vrrp_data.h": [
          "File: keepalived/include/vrrp_data.h -> keepalived/include/vrrp_data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  list   vrrp_socket_pool;",
          "45:  list   vrrp_script;",
          "46:  list   vrrp_track_files;",
          "47: } vrrp_data_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #ifdef _WITH_BFD_",
          "49:  thread_t  *bfd_thread;",
          "50: #endif",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_data.c||keepalived/vrrp/vrrp_data.c": [
          "File: keepalived/vrrp/vrrp_data.c -> keepalived/vrrp/vrrp_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   log_message(LOG_INFO, \"   Tracked files = %d\", LIST_SIZE(vrrp->track_file));",
          "370:   dump_list(vrrp->track_file);",
          "371:  }",
          "372:  if (!LIST_ISEMPTY(vrrp->unicast_peer)) {",
          "373:   log_message(LOG_INFO, \"   Unicast Peer = %d\", LIST_SIZE(vrrp->unicast_peer));",
          "374:   dump_list(vrrp->unicast_peer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: #ifdef _WITH_BFD_",
          "373:  if (vrrp->track_bfd)",
          "374:   log_message(LOG_INFO, \"   Tracked BFD instance = %s\", vrrp->track_bfd);",
          "375: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "491:  new->skip_check_adv_addr = global_data->vrrp_skip_check_adv_addr;",
          "492:  new->strict_mode = PARAMETER_UNSET;",
          "494:  list_add(vrrp_data->vrrp, new);",
          "495: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: #ifdef _WITH_BFD_",
          "499:  new->bfd_up = true;",
          "500: #endif",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
          "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #ifdef _WITH_LVS_",
          "57: #include \"check_parser.h\"",
          "58: #endif",
          "61: static enum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #ifdef _WITH_BFD_",
          "60: #include \"bfd_parser.h\"",
          "61: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "381:  vrrp->dont_track_primary = true;",
          "382: }",
          "383: static void",
          "384: vrrp_srcip_handler(vector_t *strvec)",
          "385: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386: #ifdef _WITH_BFD_",
          "387: static void",
          "388: vrrp_track_bfd_handler(vector_t *strvec)",
          "389: {",
          "390:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "392:  if (vrrp->track_bfd) {",
          "393:   log_message(LOG_INFO, \"(%s) track_bfd %s already set - ignoring %s\", vrrp->iname, vrrp->track_bfd, FMT_STR_VSLOT(strvec, 1));",
          "394:   return;",
          "395:  }",
          "397:  vrrp->track_bfd = set_value(strvec);",
          "398:  vrrp->bfd_up = false;",
          "399:  vrrp->num_script_if_fault++;",
          "400: }",
          "401: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1136:  install_keyword(\"track_interface\", &vrrp_track_if_handler);",
          "1137:  install_keyword(\"track_script\", &vrrp_track_scr_handler);",
          "1138:  install_keyword(\"track_file\", &vrrp_track_file_handler);",
          "1139:  install_keyword(\"mcast_src_ip\", &vrrp_srcip_handler);",
          "1140:  install_keyword(\"unicast_src_ip\", &vrrp_srcip_handler);",
          "1141:  install_keyword(\"track_src_ip\", &vrrp_track_srcip_handler);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158: #ifdef _WITH_BFD_",
          "1159:  install_keyword(\"track_bfd\", &vrrp_track_bfd_handler);",
          "1160: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1212: #ifdef _WITH_LVS_",
          "1213:  init_check_keywords(false);",
          "1214: #endif",
          "1216:  return keywords;",
          "1217: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237: #ifdef _WITH_BFD_",
          "1238:  init_bfd_keywords(false);",
          "1239: #endif",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c": [
          "File: keepalived/vrrp/vrrp_print.c -> keepalived/vrrp/vrrp_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:  }",
          "339:  fprintf(file, \"   Wantstate = %s\\n\", get_state_str(vrrp->wantstate));",
          "340:  ctime_r(&vrrp->last_transition.tv_sec, time_str);",
          "342:  fprintf(file, \"   Number of track scripts init = %d\\n\", vrrp->num_script_init);",
          "343:  fprintf(file, \"   Last transition = %ld (%.24s)\\n\", vrrp->last_transition.tv_sec, time_str);",
          "344:  if (!ctime_r(&vrrp->sands.tv_sec, time_str))",
          "",
          "[Removed Lines]",
          "341:  fprintf(file, \"   Number of interface and track script faults = %d\\n\", vrrp->num_script_if_fault);",
          "",
          "[Added Lines]",
          "341:  fprintf(file, \"   Number of interface and track script faults = %u\\n\", vrrp->num_script_if_fault);",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c": [
          "File: keepalived/vrrp/vrrp_scheduler.c -> keepalived/vrrp/vrrp_scheduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #ifdef _WITH_SNMP_RFCV3_",
          "55: #include \"vrrp_snmp.h\"",
          "56: #endif",
          "59: timeval_t garp_next_time;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #ifdef _WITH_BFD_",
          "58: #include \"bfd_event.h\"",
          "59: #include \"bfd_daemon.h\"",
          "60: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: static int vrrp_script_child_thread(thread_t * thread);",
          "89: static int vrrp_script_thread(thread_t * thread);",
          "91: static int vrrp_read_dispatcher_thread(thread_t *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: #ifdef _WITH_BFD_",
          "95: static int vrrp_bfd_thread(thread_t * thread);",
          "96: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:   vrrp_init_script(vrrp_data->vrrp_script);",
          "394:  }",
          "397:  for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {",
          "398:   sock = ELEMENT_DATA(e);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: #ifdef _WITH_BFD_",
          "404:  if (!LIST_ISEMPTY(vrrp_data->vrrp)) {",
          "406:   vrrp_data->bfd_thread = thread_add_read(master, vrrp_bfd_thread, NULL,",
          "407:         bfd_event_pipe[0], TIMER_HZ);",
          "408:  }",
          "409: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "586: vrrp_dispatcher_release(vrrp_data_t *data)",
          "587: {",
          "588:  free_list(&data->vrrp_socket_pool);",
          "589: }",
          "591: static void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: #ifdef _WITH_BFD_",
          "605:  thread_cancel(data->bfd_thread);",
          "606: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "701:  }",
          "702: }",
          "705: static int",
          "706: vrrp_dispatcher_read_timeout(int fd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "722: #ifdef _WITH_BFD_",
          "723: static void",
          "724: vrrp_handle_bfd_event(bfd_event_t * evt)",
          "725: {",
          "726:  vrrp_t * vrrp;",
          "727:  element e;",
          "728:  struct timeval time_now;",
          "729:  struct timeval timer_tmp;",
          "730:  uint32_t delivery_time;",
          "732:  if (__test_bit(LOG_DETAIL_BIT, &debug)) {",
          "733:   time_now = timer_now();",
          "734:   timersub(&time_now, &evt->sent_time, &timer_tmp);",
          "735:   delivery_time = timer_tol(timer_tmp);",
          "736:   log_message(LOG_INFO, \"Received BFD event: instance %s is in\"",
          "737:        \" state %s (delivered in %i usec)\",",
          "738:        evt->iname, BFD_STATE_STR(evt->state), delivery_time);",
          "739:  }",
          "741:  for (e = LIST_HEAD(vrrp_data->vrrp); e; ELEMENT_NEXT(e)) {",
          "742:   vrrp = ELEMENT_DATA(e);",
          "744:   if (!vrrp->track_bfd)",
          "745:    continue;",
          "747:   if (strcmp(vrrp->track_bfd, evt->iname))",
          "748:    continue;",
          "750:   if ((vrrp->bfd_up && evt->state == BFD_STATE_UP) ||",
          "751:       (!vrrp->bfd_up && evt->state == BFD_STATE_DOWN))",
          "752:    continue;",
          "754:   log_message(LOG_INFO, \"VRRP_Instance(%s) Tracked BFD\"",
          "755:        \" instance %s is %s\", vrrp->iname, evt->iname, evt->state == BFD_STATE_UP ? \"UP\" : \"DOWN\");",
          "756:   if (evt->state == BFD_STATE_DOWN) {",
          "757:    vrrp->bfd_up = false;",
          "758:    down_instance(vrrp);",
          "759:   } else {",
          "760:    vrrp->bfd_up = true;",
          "761:    try_up_instance(vrrp, false);",
          "762:   }",
          "763:  }",
          "764: }",
          "766: static int",
          "767: vrrp_bfd_thread(thread_t * thread)",
          "768: {",
          "769:  bfd_event_t evt;",
          "771:  vrrp_data->bfd_thread = thread_add_read(master, vrrp_bfd_thread, NULL,",
          "772:       thread->u.fd, TIMER_HZ * 60);",
          "774:  if (thread->type != THREAD_READY_FD)",
          "775:   return 0;",
          "777:  while (read(thread->u.fd, &evt, sizeof(bfd_event_t)) != -1)",
          "778:   vrrp_handle_bfd_event(&evt);",
          "780:  return 0;",
          "781: }",
          "782: #endif",
          "",
          "---------------"
        ],
        "lib/config.h.in||lib/config.h.in": [
          "File: lib/config.h.in -> lib/config.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "629: #undef _UINT8_T",
          "632: #undef _WITH_DBUS_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632: #undef _WITH_BFD_",
          "",
          "---------------"
        ],
        "lib/scheduler.h||lib/scheduler.h": [
          "File: lib/scheduler.h -> lib/scheduler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: #ifdef _WITH_LVS_",
          "103:  PROG_TYPE_CHECKER,",
          "104: #endif",
          "105: } prog_type_t;",
          "106: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: #ifdef _WITH_BFD_",
          "106:  PROG_TYPE_BFD,",
          "107: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}