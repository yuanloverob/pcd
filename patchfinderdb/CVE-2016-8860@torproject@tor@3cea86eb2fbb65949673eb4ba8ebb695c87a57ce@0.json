{
  "cve_id": "CVE-2016-8860",
  "cve_desc": "Tor before 0.2.8.9 and 0.2.9.x before 0.2.9.4-alpha had internal functions that were entitled to expect that buf_t data had NUL termination, but the implementation of or/buffers.c did not ensure that NUL termination was present, which allows remote attackers to cause a denial of service (client, hidden service, relay, or authority crash) via crafted data.",
  "repo": "torproject/tor",
  "patch_hash": "3cea86eb2fbb65949673eb4ba8ebb695c87a57ce",
  "patch_info": {
    "commit_hash": "3cea86eb2fbb65949673eb4ba8ebb695c87a57ce",
    "repo": "torproject/tor",
    "commit_url": "https://github.com/torproject/tor/commit/3cea86eb2fbb65949673eb4ba8ebb695c87a57ce",
    "files": [
      "changes/buf-sentinel",
      "src/or/buffers.c"
    ],
    "message": "Add a one-word sentinel value of 0x0 at the end of each buf_t chunk\n\nThis helps protect against bugs where any part of a buf_t's memory\nis passed to a function that expects a NUL-terminated input.\n\nIt also closes TROVE-2016-10-001 (aka bug 20384).",
    "before_after_code_files": [
      "src/or/buffers.c||src/or/buffers.c"
    ]
  },
  "patch_diff": {
    "src/or/buffers.c||src/or/buffers.c": [
      "File: src/or/buffers.c -> src/or/buffers.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "70: #define CHUNK_HEADER_LEN STRUCT_OFFSET(chunk_t, mem[0])",
      "",
      "[Removed Lines]",
      "74: #define CHUNK_ALLOC_SIZE(memlen) (CHUNK_HEADER_LEN + (memlen))",
      "77: #define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)",
      "",
      "[Added Lines]",
      "73: #define SENTINEL_LEN 4",
      "76: #define CHUNK_OVERHEAD (CHUNK_HEADER_LEN + SENTINEL_LEN)",
      "80: #define CHUNK_ALLOC_SIZE(memlen) (CHUNK_OVERHEAD + (memlen))",
      "83: #define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_OVERHEAD)",
      "85: #define DEBUG_SENTINEL",
      "87: #ifdef DEBUG_SENTINEL",
      "88: #define DBG_S(s) s",
      "89: #else",
      "90: #define DBG_S(s) (void)0",
      "91: #endif",
      "93: #define CHUNK_SET_SENTINEL(chunk, alloclen) do {                        \\",
      "94:     uint8_t *a = (uint8_t*) &(chunk)->mem[(chunk)->memlen];             \\",
      "95:     DBG_S(uint8_t *b = &((uint8_t*)(chunk))[(alloclen)-SENTINEL_LEN]);  \\",
      "96:     DBG_S(tor_assert(a == b));                                          \\",
      "97:     memset(a,0,SENTINEL_LEN);                                           \\",
      "98:   } while (0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:   ch->memlen = CHUNK_SIZE_WITH_ALLOC(alloc);",
      "132:   total_bytes_allocated_in_chunks += alloc;",
      "133:   ch->data = &ch->mem[0];",
      "134:   return ch;",
      "135: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155:   CHUNK_SET_SENTINEL(ch, alloc);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "140: chunk_grow(chunk_t *chunk, size_t sz)",
      "141: {",
      "142:   off_t offset;",
      "144:   tor_assert(sz > chunk->memlen);",
      "145:   offset = chunk->data - chunk->mem;",
      "147:   chunk->memlen = sz;",
      "148:   chunk->data = chunk->mem + offset;",
      "149: #ifdef DEBUG_CHUNK_ALLOC",
      "152: #endif",
      "155:   return chunk;",
      "156: }",
      "",
      "[Removed Lines]",
      "143:   size_t memlen_orig = chunk->memlen;",
      "146:   chunk = tor_realloc(chunk, CHUNK_ALLOC_SIZE(sz));",
      "150:   tor_assert(chunk->DBG_alloc == CHUNK_ALLOC_SIZE(memlen_orig));",
      "151:   chunk->DBG_alloc = CHUNK_ALLOC_SIZE(sz);",
      "153:   total_bytes_allocated_in_chunks +=",
      "154:     CHUNK_ALLOC_SIZE(sz) - CHUNK_ALLOC_SIZE(memlen_orig);",
      "",
      "[Added Lines]",
      "165:   const size_t memlen_orig = chunk->memlen;",
      "166:   const size_t orig_alloc = CHUNK_ALLOC_SIZE(memlen_orig);",
      "167:   const size_t new_alloc = CHUNK_ALLOC_SIZE(sz);",
      "170:   chunk = tor_realloc(chunk, new_alloc);",
      "174:   tor_assert(chunk->DBG_alloc == orig_alloc);",
      "175:   chunk->DBG_alloc = new_alloc;",
      "177:   total_bytes_allocated_in_chunks += new_alloc - orig_alloc;",
      "178:   CHUNK_SET_SENTINEL(chunk, new_alloc);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6227edae1d8318b694029800a26e17a2a960af5",
      "candidate_info": {
        "commit_hash": "b6227edae1d8318b694029800a26e17a2a960af5",
        "repo": "torproject/tor",
        "commit_url": "https://github.com/torproject/tor/commit/b6227edae1d8318b694029800a26e17a2a960af5",
        "files": [
          "changes/buf-sentinel",
          "src/or/buffers.c"
        ],
        "message": "Add a one-word sentinel value of 0x0 at the end of each buf_t chunk\n\nThis helps protect against bugs where any part of a buf_t's memory\nis passed to a function that expects a NUL-terminated input.\n\nIt also closes TROVE-2016-10-001 (aka bug 20384).",
        "before_after_code_files": [
          "src/or/buffers.c||src/or/buffers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/or/buffers.c||src/or/buffers.c"
          ],
          "candidate": [
            "src/or/buffers.c||src/or/buffers.c"
          ]
        }
      },
      "candidate_diff": {
        "src/or/buffers.c||src/or/buffers.c": [
          "File: src/or/buffers.c -> src/or/buffers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: #define CHUNK_HEADER_LEN STRUCT_OFFSET(chunk_t, mem[0])",
          "",
          "[Removed Lines]",
          "74: #define CHUNK_ALLOC_SIZE(memlen) (CHUNK_HEADER_LEN + (memlen))",
          "77: #define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)",
          "",
          "[Added Lines]",
          "73: #define SENTINEL_LEN 4",
          "76: #define CHUNK_OVERHEAD (CHUNK_HEADER_LEN + SENTINEL_LEN)",
          "80: #define CHUNK_ALLOC_SIZE(memlen) (CHUNK_OVERHEAD + (memlen))",
          "83: #define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_OVERHEAD)",
          "85: #define DEBUG_SENTINEL",
          "87: #ifdef DEBUG_SENTINEL",
          "88: #define DBG_S(s) s",
          "89: #else",
          "90: #define DBG_S(s) (void)0",
          "91: #endif",
          "93: #define CHUNK_SET_SENTINEL(chunk, alloclen) do {                        \\",
          "94:     uint8_t *a = (uint8_t*) &(chunk)->mem[(chunk)->memlen];             \\",
          "95:     DBG_S(uint8_t *b = &((uint8_t*)(chunk))[(alloclen)-SENTINEL_LEN]);  \\",
          "96:     DBG_S(tor_assert(a == b));                                          \\",
          "97:     memset(a,0,SENTINEL_LEN);                                           \\",
          "98:   } while (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   ch->memlen = CHUNK_SIZE_WITH_ALLOC(alloc);",
          "132:   total_bytes_allocated_in_chunks += alloc;",
          "133:   ch->data = &ch->mem[0];",
          "134:   return ch;",
          "135: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   CHUNK_SET_SENTINEL(ch, alloc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140: chunk_grow(chunk_t *chunk, size_t sz)",
          "141: {",
          "142:   off_t offset;",
          "144:   tor_assert(sz > chunk->memlen);",
          "145:   offset = chunk->data - chunk->mem;",
          "147:   chunk->memlen = sz;",
          "148:   chunk->data = chunk->mem + offset;",
          "149: #ifdef DEBUG_CHUNK_ALLOC",
          "152: #endif",
          "155:   return chunk;",
          "156: }",
          "",
          "[Removed Lines]",
          "143:   size_t memlen_orig = chunk->memlen;",
          "146:   chunk = tor_realloc(chunk, CHUNK_ALLOC_SIZE(sz));",
          "150:   tor_assert(chunk->DBG_alloc == CHUNK_ALLOC_SIZE(memlen_orig));",
          "151:   chunk->DBG_alloc = CHUNK_ALLOC_SIZE(sz);",
          "153:   total_bytes_allocated_in_chunks +=",
          "154:     CHUNK_ALLOC_SIZE(sz) - CHUNK_ALLOC_SIZE(memlen_orig);",
          "",
          "[Added Lines]",
          "165:   const size_t memlen_orig = chunk->memlen;",
          "166:   const size_t orig_alloc = CHUNK_ALLOC_SIZE(memlen_orig);",
          "167:   const size_t new_alloc = CHUNK_ALLOC_SIZE(sz);",
          "170:   chunk = tor_realloc(chunk, new_alloc);",
          "174:   tor_assert(chunk->DBG_alloc == orig_alloc);",
          "175:   chunk->DBG_alloc = new_alloc;",
          "177:   total_bytes_allocated_in_chunks += new_alloc - orig_alloc;",
          "178:   CHUNK_SET_SENTINEL(chunk, new_alloc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b923c4dc9f011ab8f62e03211407d042dbe9f92a",
      "candidate_info": {
        "commit_hash": "b923c4dc9f011ab8f62e03211407d042dbe9f92a",
        "repo": "torproject/tor",
        "commit_url": "https://github.com/torproject/tor/commit/b923c4dc9f011ab8f62e03211407d042dbe9f92a",
        "files": [
          "changes/bug21439",
          "configure.ac",
          "src/common/memarea.c",
          "src/or/buffers.c",
          "src/test/test_util.c"
        ],
        "message": "Code to disable memory sentinels for fuzzing\n\nThis feature makes it possible to turn off memory sentinels (like\nthose used for safety in buffers.c and memarea.c) when fuzzing, so\nthat we can catch bugs that they would otherwise prevent.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/common/memarea.c||src/common/memarea.c",
          "src/or/buffers.c||src/or/buffers.c",
          "src/test/test_util.c||src/test/test_util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/or/buffers.c||src/or/buffers.c"
          ],
          "candidate": [
            "src/or/buffers.c||src/or/buffers.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:    AS_HELP_STRING(--enable-libfuzzer, [build extra fuzzers based on 'libfuzzer']))",
          "54: AC_ARG_ENABLE(oss-fuzz,",
          "55:    AS_HELP_STRING(--enable-oss-fuzz, [build extra fuzzers based on 'oss-fuzz' environment]))",
          "57: if test \"x$enable_coverage\" != \"xyes\" -a \"x$enable_asserts_in_tests\" = \"xno\" ; then",
          "58:     AC_MSG_ERROR([Can't disable assertions outside of coverage build])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: AC_ARG_ENABLE(memory-sentinels,",
          "57:    AS_HELP_STRING(--disable-memory-sentinels, [disable code that tries to prevent some kinds of memory access bugs. For fuzzing only.]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:             [Defined if we're not going to look for a torrc in SYSCONF])",
          "77: fi",
          "79: AM_CONDITIONAL(USE_OPENBSD_MALLOC, test \"x$enable_openbsd_malloc\" = \"xyes\")",
          "81: AC_ARG_ENABLE(asciidoc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: if test \"$enable_memory_sentinels\" = \"no\"; then",
          "82:   AC_DEFINE(DISABLE_MEMORY_SENTINELS, 1,",
          "83:            [Defined if we're turning off memory safety code to look for bugs])",
          "84: fi",
          "",
          "---------------"
        ],
        "src/common/memarea.c||src/common/memarea.c": [
          "File: src/common/memarea.c -> src/common/memarea.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"util.h\"",
          "13: #include \"compat.h\"",
          "14: #include \"torlog.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"container.h\"",
          "17: #ifndef DISABLE_MEMORY_SENTINELS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:   }",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: #else",
          "312: struct memarea_t {",
          "313:   smartlist_t *pieces;",
          "314: };",
          "316: memarea_t *",
          "317: memarea_new(void)",
          "318: {",
          "319:   memarea_t *ma = tor_malloc_zero(sizeof(memarea_t));",
          "320:   ma->pieces = smartlist_new();",
          "321:   return ma;",
          "322: }",
          "323: void",
          "324: memarea_drop_all(memarea_t *area)",
          "325: {",
          "326:   memarea_clear(area);",
          "327:   smartlist_free(area->pieces);",
          "328:   tor_free(area);",
          "329: }",
          "330: void",
          "331: memarea_clear(memarea_t *area)",
          "332: {",
          "333:   SMARTLIST_FOREACH(area->pieces, void *, p, tor_free_(p));",
          "334:   smartlist_clear(area->pieces);",
          "335: }",
          "336: int",
          "337: memarea_owns_ptr(const memarea_t *area, const void *ptr)",
          "338: {",
          "339:   SMARTLIST_FOREACH(area->pieces, const void *, p, if (ptr == p) return 1;);",
          "340:   return 0;",
          "341: }",
          "343: void *",
          "344: memarea_alloc(memarea_t *area, size_t sz)",
          "345: {",
          "346:   void *result = tor_malloc(sz);",
          "347:   smartlist_add(area->pieces, result);",
          "348:   return result;",
          "349: }",
          "351: void *",
          "352: memarea_alloc_zero(memarea_t *area, size_t sz)",
          "353: {",
          "354:   void *result = tor_malloc_zero(sz);",
          "355:   smartlist_add(area->pieces, result);",
          "356:   return result;",
          "357: }",
          "358: void *",
          "359: memarea_memdup(memarea_t *area, const void *s, size_t n)",
          "360: {",
          "361:   void *r = memarea_alloc(area, n);",
          "362:   memcpy(r, s, n);",
          "363:   return r;",
          "364: }",
          "365: char *",
          "366: memarea_strdup(memarea_t *area, const char *s)",
          "367: {",
          "368:   size_t n = strlen(s);",
          "369:   char *r = memarea_alloc(area, n+1);",
          "370:   memcpy(r, s, n);",
          "371:   r[n] = 0;",
          "372:   return r;",
          "373: }",
          "374: char *",
          "375: memarea_strndup(memarea_t *area, const char *s, size_t n)",
          "376: {",
          "377:   size_t ln = strnlen(s, n);",
          "378:   char *r = memarea_alloc(area, ln+1);",
          "379:   memcpy(r, s, ln);",
          "380:   r[ln] = 0;",
          "381:   return r;",
          "382: }",
          "383: void",
          "384: memarea_get_stats(memarea_t *area,",
          "385:                   size_t *allocated_out, size_t *used_out)",
          "386: {",
          "387:   (void)area;",
          "389: }",
          "390: void",
          "391: memarea_assert_ok(memarea_t *area)",
          "392: {",
          "393:   (void)area;",
          "394: }",
          "396: #endif",
          "",
          "---------------"
        ],
        "src/or/buffers.c||src/or/buffers.c": [
          "File: src/or/buffers.c -> src/or/buffers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: #define CHUNK_HEADER_LEN STRUCT_OFFSET(chunk_t, mem[0])",
          "86: #define SENTINEL_LEN 4",
          "89: #define CHUNK_OVERHEAD (CHUNK_HEADER_LEN + SENTINEL_LEN)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: #ifdef DISABLE_MEMORY_SENTINELS",
          "87: #define SENTINEL_LEN 0",
          "88: #else",
          "90: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #define DEBUG_SENTINEL",
          "101: #define DBG_S(s) s",
          "102: #else",
          "103: #define DBG_S(s) (void)0",
          "104: #endif",
          "106: #define CHUNK_SET_SENTINEL(chunk, alloclen) do {                        \\",
          "107:     uint8_t *a = (uint8_t*) &(chunk)->mem[(chunk)->memlen];             \\",
          "108:     DBG_S(uint8_t *b = &((uint8_t*)(chunk))[(alloclen)-SENTINEL_LEN]);  \\",
          "109:     DBG_S(tor_assert(a == b));                                          \\",
          "110:     memset(a,0,SENTINEL_LEN);                                           \\",
          "111:   } while (0)",
          "",
          "[Removed Lines]",
          "100: #ifdef DEBUG_SENTINEL",
          "",
          "[Added Lines]",
          "104: #if defined(DEBUG_SENTINEL) && !defined(DISABLE_MEMORY_SENTINELS)",
          "110: #ifdef DISABLE_MEMORY_SENTINELS",
          "111: #define CHUNK_SET_SENTINEL(chunk, alloclen) STMT_NIL",
          "112: #else",
          "119: #endif",
          "",
          "---------------"
        ],
        "src/test/test_util.c||src/test/test_util.c": [
          "File: src/test/test_util.c -> src/test/test_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3339:   void *malloced_ptr = NULL;",
          "3340:   int i;",
          "3342:   (void)arg;",
          "3343:   tt_assert(area);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3342: #ifdef DISABLE_MEMORY_SENTINELS",
          "3345:   if (1)",
          "3346:     tt_skip();",
          "3347: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}