{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "78a50d728093c4f5d28ffeb308d0e366ba3ffb40",
      "candidate_info": {
        "commit_hash": "78a50d728093c4f5d28ffeb308d0e366ba3ffb40",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/78a50d728093c4f5d28ffeb308d0e366ba3ffb40",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Fix the build for when SQLITE_ENABLE_STAT4 is defined.\n\nFossilOrigin-Name: 8f0a8c2aa45f7cf7339094d83893aeb046b010b5b97bb4dae99ac07a8ebf2fa6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a773fd4698d474fda5e57bc77ed66a79cf74efee2706f43f6def6f450bfd1fc0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     p->nSkipAhead++;",
          "780:     sqlite3_result_int(context, p->current.anDLt[0]>0);",
          "781:   }",
          "782: #endif",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782: #else",
          "783:   {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73b21382d4abf02c435b25c7c1da4dd614023068",
      "candidate_info": {
        "commit_hash": "73b21382d4abf02c435b25c7c1da4dd614023068",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73b21382d4abf02c435b25c7c1da4dd614023068",
        "files": [
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Ensure fts5 consistently calls sqlite3_value_text() before sqlite3_value_bytes(). This matters when storing blobs in fts5 tables within utf-16 databases. Fix for [cf36cb4e02].\n\nFossilOrigin-Name: c16305eba0eb14368f2631b9a82b7eb4483c93f3b31257ee7c33f9b00c344379",
        "before_after_code_files": [
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:   for(ctx.iCol=0; rc==SQLITE_OK && ctx.iCol<pConfig->nCol; ctx.iCol++){",
          "739:     ctx.szCol = 0;",
          "740:     if( pConfig->abUnindexed[ctx.iCol]==0 ){",
          "741:       rc = sqlite3Fts5Tokenize(pConfig,",
          "742:           FTS5_TOKENIZE_DOCUMENT,",
          "745:           (void*)&ctx,",
          "746:           fts5StorageInsertCallback",
          "747:       );",
          "",
          "[Removed Lines]",
          "743:           (const char*)sqlite3_value_text(apVal[ctx.iCol+2]),",
          "744:           sqlite3_value_bytes(apVal[ctx.iCol+2]),",
          "",
          "[Added Lines]",
          "741:       const char *zText = sqlite3_value_text(apVal[ctx.iCol+2]);",
          "742:       int nText = sqlite3_value_bytes(apVal[ctx.iCol+2]);",
          "745:           zText, nText,",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test": [
          "File: ext/fts5/test/fts5integrity.test -> ext/fts5/test/fts5integrity.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   } {1000}",
          "211: }",
          "213: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: #-------------------------------------------------------------------------",
          "214: reset_db",
          "215: do_execsql_test 7.0 {",
          "216:   PRAGMA encoding = 'UTF-16';",
          "217:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "218:   INSERT INTO vt0 VALUES (x'46f0');",
          "219:   SELECT quote(c0) FROM vt0;",
          "220: } {X'46F0'}",
          "222: do_execsql_test 7.1 {",
          "223:   UPDATE vt0 SET c0='';",
          "224: }",
          "226: do_execsql_test 7.2 {",
          "227:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "228: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01ca865f31c0c817ede7f357401ef76cf311ae662397908464f53e1c147f5b6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d58b7f40f38519b9fdff0f604d19c4b39ae0008",
      "candidate_info": {
        "commit_hash": "2d58b7f40f38519b9fdff0f604d19c4b39ae0008",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d58b7f40f38519b9fdff0f604d19c4b39ae0008",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix a typo in a comment.  No code changes.\n\nFossilOrigin-Name: 4363f69c3ad5a9859471547cab713f1acabd5fce13872cc1ddaa972d6c1dfb35",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84f314902c48336849081c7e9fe2a52caf171b8215a1c6e80cded0700c447eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c"
        ]
      }
    },
    {
      "candidate_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
      "candidate_info": {
        "commit_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "\"STORED\" is not actually a keyword.  The parser looks for STORED as an ordinary identifier.\n\nFossilOrigin-Name: 167cd574d6a1d4fe2253f5bc5aaa7b031cbc82853e4d33b8d9b72eaf049003d4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "225: %endif",
          "226:   REINDEX RENAME CTIME_KW IF",
          "227:   .",
          "",
          "[Removed Lines]",
          "224:   GENERATED ALWAYS STORED",
          "",
          "[Added Lines]",
          "224:   GENERATED ALWAYS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "742efb67495c620b95697ffe0b2a224e3c3e4daf",
      "candidate_info": {
        "commit_hash": "742efb67495c620b95697ffe0b2a224e3c3e4daf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/742efb67495c620b95697ffe0b2a224e3c3e4daf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/whereL.test"
        ],
        "message": "New test case for ticket [1dcb4d44964846ad].\n\nFossilOrigin-Name: 9e9f1e96c9aac60fcbbcda6923e01e350ca4dd88acefb9d400979419ba4e1e4d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/whereL.test||test/whereL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65c6c26bb48d5347ce53bb3607de3a03a5a03946b232d35e46a20533f86750f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/whereL.test||test/whereL.test": [
          "File: test/whereL.test -> test/whereL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:    WHERE x='good' AND y='good';",
          "158: } {good good}",
          "160: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: # 2020-04-24: Another test case for the previous (1dcb4d44964846ad)",
          "161: # ticket.  The test case comes from",
          "162: # https://stackoverflow.com/questions/61399253/sqlite3-different-result-in-console-compared-to-python-script/",
          "163: # Output verified against postgresql.",
          "164: #",
          "165: do_execsql_test 610 {",
          "166:   CREATE TABLE tableA(",
          "167:     ID           int,",
          "168:     RunYearMonth int",
          "169:   );",
          "170:   INSERT INTO tableA VALUES(1,202003),(2,202003),(3,202003),(4,202004),",
          "171:     (5,202004),(6,202004),(7,202004),(8,202004);",
          "172:   CREATE TABLE tableB (",
          "173:     ID           int,",
          "174:     RunYearMonth int",
          "175:   );",
          "176:   INSERT INTO tableB VALUES(1,202004),(2,202004),(3,202004),(4,202004),",
          "177:   (5,202004);",
          "178:   SELECT *",
          "179:    FROM (",
          "180:         SELECT *",
          "181:         FROM tableA",
          "182:         WHERE RunYearMonth = 202004",
          "183:     ) AS A",
          "184:     INNER JOIN (",
          "185:         SELECT *",
          "186:         FROM tableB",
          "187:         WHERE RunYearMonth = 202004",
          "188:     ) AS B",
          "189:     ON A.ID = B.ID",
          "190:     AND A.RunYearMonth = B.RunYearMonth;",
          "191: } {4 202004 4 202004 5 202004 5 202004}",
          "",
          "---------------"
        ]
      }
    }
  ]
}