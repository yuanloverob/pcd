{
  "cve_id": "CVE-2020-13974",
  "cve_desc": "An issue was discovered in the Linux kernel 4.4 through 5.7.1. drivers/tty/vt/keyboard.c has an integer overflow if k_ascii is called several times in a row, aka CID-b86dab054059. NOTE: Members in the community argue that the integer overflow does not lead to a security issue in this case.",
  "repo": "torvalds/linux",
  "patch_hash": "b86dab054059b970111b5516ae548efaae5b3aae",
  "patch_info": {
    "commit_hash": "b86dab054059b970111b5516ae548efaae5b3aae",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/b86dab054059b970111b5516ae548efaae5b3aae",
    "files": [
      "drivers/tty/vt/keyboard.c"
    ],
    "message": "vt: keyboard: avoid signed integer overflow in k_ascii\n\nWhen k_ascii is invoked several times in a row there is a potential for\nsigned integer overflow:\n\nUBSAN: Undefined behaviour in drivers/tty/vt/keyboard.c:888:19 signed integer overflow:\n10 * 1111111111 cannot be represented in type 'int'\nCPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.6.11 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\nCall Trace:\n <IRQ>\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xce/0x128 lib/dump_stack.c:118\n ubsan_epilogue+0xe/0x30 lib/ubsan.c:154\n handle_overflow+0xdc/0xf0 lib/ubsan.c:184\n __ubsan_handle_mul_overflow+0x2a/0x40 lib/ubsan.c:205\n k_ascii+0xbf/0xd0 drivers/tty/vt/keyboard.c:888\n kbd_keycode drivers/tty/vt/keyboard.c:1477 [inline]\n kbd_event+0x888/0x3be0 drivers/tty/vt/keyboard.c:1495\n\nWhile it can be worked around by using check_mul_overflow()/\ncheck_add_overflow(), it is better to introduce a separate flag to\nsignal that number pad is being used to compose a symbol, and\nchange type of the accumulator from signed to unsigned, thus\navoiding undefined behavior when it overflows.\n\nReported-by: Kyungtae Kim <kt0755@gmail.com>\nSigned-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>\nCc: stable <stable@vger.kernel.org>\nLink: https://lore.kernel.org/r/20200525232740.GA262061@dtor-ws\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "drivers/tty/vt/keyboard.c||drivers/tty/vt/keyboard.c"
    ]
  },
  "patch_diff": {
    "drivers/tty/vt/keyboard.c||drivers/tty/vt/keyboard.c": [
      "File: drivers/tty/vt/keyboard.c -> drivers/tty/vt/keyboard.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: static bool dead_key_next;",
      "131: static unsigned int diacr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132: static bool npadch_active;",
      "133: static unsigned int npadch_value;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "845:   shift_state &= ~(1 << value);",
      "849:   if (kbd->kbdmode == VC_UNICODE)",
      "851:   else",
      "854:  }",
      "855: }",
      "",
      "[Removed Lines]",
      "848:  if (up_flag && shift_state != old_state && npadch != -1) {",
      "850:    to_utf8(vc, npadch);",
      "852:    put_queue(vc, npadch & 0xff);",
      "853:   npadch = -1;",
      "",
      "[Added Lines]",
      "852:  if (up_flag && shift_state != old_state && npadch_active) {",
      "854:    to_utf8(vc, npadch_value);",
      "856:    put_queue(vc, npadch_value & 0xff);",
      "857:   npadch_active = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "869: static void k_ascii(struct vc_data *vc, unsigned char value, char up_flag)",
      "870: {",
      "873:  if (up_flag)",
      "874:   return;",
      "",
      "[Removed Lines]",
      "871:  int base;",
      "",
      "[Added Lines]",
      "875:  unsigned int base;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "882:   base = 16;",
      "883:  }",
      "889: }",
      "891: static void k_lock(struct vc_data *vc, unsigned char value, char up_flag)",
      "",
      "[Removed Lines]",
      "885:  if (npadch == -1)",
      "886:   npadch = value;",
      "887:  else",
      "888:   npadch = npadch * base + value;",
      "",
      "[Added Lines]",
      "889:  if (!npadch_active) {",
      "890:   npadch_value = 0;",
      "891:   npadch_active = true;",
      "892:  }",
      "894:  npadch_value = npadch_value * base + value;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51415b6c1b117e223bc083e30af675cb5c5498f3",
      "candidate_info": {
        "commit_hash": "51415b6c1b117e223bc083e30af675cb5c5498f3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/51415b6c1b117e223bc083e30af675cb5c5498f3",
        "files": [
          "fs/btrfs/relocation.c"
        ],
        "message": "btrfs: reloc: fix reloc root leak and NULL pointer dereference\n\n[BUG]\nWhen balance is canceled, there is a pretty high chance that unmounting\nthe fs can lead to lead the NULL pointer dereference:\n\n  BTRFS warning (device dm-3): page private not zero on page 223158272\n  ...\n  BTRFS warning (device dm-3): page private not zero on page 223162368\n  BTRFS error (device dm-3): leaked root 18446744073709551608-304 refcount 1\n  BUG: kernel NULL pointer dereference, address: 0000000000000168\n  #PF: supervisor read access in kernel mode\n  #PF: error_code(0x0000) - not-present page\n  PGD 0 P4D 0\n  Oops: 0000 [#1] PREEMPT SMP NOPTI\n  CPU: 2 PID: 5793 Comm: umount Tainted: G           O      5.7.0-rc5-custom+ #53\n  Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015\n  RIP: 0010:__lock_acquire+0x5dc/0x24c0\n  Call Trace:\n   lock_acquire+0xab/0x390\n   _raw_spin_lock+0x39/0x80\n   btrfs_release_extent_buffer_pages+0xd7/0x200 [btrfs]\n   release_extent_buffer+0xb2/0x170 [btrfs]\n   free_extent_buffer+0x66/0xb0 [btrfs]\n   btrfs_put_root+0x8e/0x130 [btrfs]\n   btrfs_check_leaked_roots.cold+0x5/0x5d [btrfs]\n   btrfs_free_fs_info+0xe5/0x120 [btrfs]\n   btrfs_kill_super+0x1f/0x30 [btrfs]\n   deactivate_locked_super+0x3b/0x80\n   deactivate_super+0x3e/0x50\n   cleanup_mnt+0x109/0x160\n   __cleanup_mnt+0x12/0x20\n   task_work_run+0x67/0xa0\n   exit_to_usermode_loop+0xc5/0xd0\n   syscall_return_slowpath+0x205/0x360\n   do_syscall_64+0x6e/0xb0\n   entry_SYSCALL_64_after_hwframe+0x49/0xb3\n  RIP: 0033:0x7fd028ef740b\n\n[CAUSE]\nWhen balance is canceled, all reloc roots are marked as orphan, and\norphan reloc roots are going to be cleaned up.\n\nHowever for orphan reloc roots and merged reloc roots, their lifespan\nare quite different:\n\n\tMerged reloc roots\t|\tOrphan reloc roots by cancel\n--------------------------------------------------------------------\ncreate_reloc_root()\t\t| create_reloc_root()\n|- refs == 1\t\t\t| |- refs == 1\n\t\t\t\t|\nbtrfs_grab_root(reloc_root);\t| btrfs_grab_root(reloc_root);\n|- refs == 2\t\t\t| |- refs == 2\n\t\t\t\t|\nroot->reloc_root = reloc_root;\t| root->reloc_root = reloc_root;\n\t\t>>> No difference so far <<<\n\t\t\t\t|\nprepare_to_merge()\t\t| prepare_to_merge()\n|- btrfs_set_root_refs(item, 1);| |- if (!err) (err == -EINTR)\n\t\t\t\t|\nmerge_reloc_roots()\t\t| merge_reloc_roots()\n|- merge_reloc_root()\t\t| |- Doing nothing to put reloc root\n   |- insert_dirty_subvol()\t| |- refs == 2\n      |- __del_reloc_root()\t|\n         |- btrfs_put_root()\t|\n            |- refs == 1\t|\n\t\t>>> Now orphan reloc roots still have refs 2 <<<\n\t\t\t\t|\nclean_dirty_subvols()\t\t| clean_dirty_subvols()\n|- btrfs_drop_snapshot()\t| |- btrfS_drop_snapshot()\n   |- reloc_root get freed\t|    |- reloc_root still has refs 2\n\t\t\t\t|\trelated ebs get freed, but\n\t\t\t\t|\treloc_root still recorded in\n\t\t\t\t|\tallocated_roots\nbtrfs_check_leaked_roots()\t| btrfs_check_leaked_roots()\n|- No leaked roots\t\t| |- Leaked reloc_roots detected\n\t\t\t\t| |- btrfs_put_root()\n\t\t\t\t|    |- free_extent_buffer(root->node);\n\t\t\t\t|       |- eb already freed, caused NULL\n\t\t\t\t|\t   pointer dereference\n\n[FIX]\nThe fix is to clear fs_root->reloc_root and put it at\nmerge_reloc_roots() time, so that we won't leak reloc roots.\n\nFixes: d2311e698578 (\"btrfs: relocation: Delay reloc tree deletion after merge_reloc_roots\")\nCC: stable@vger.kernel.org # 5.1+\nTested-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>\nSigned-off-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/relocation.c||fs/btrfs/relocation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/relocation.c||fs/btrfs/relocation.c": [
          "File: fs/btrfs/relocation.c -> fs/btrfs/relocation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1917:   reloc_root = list_entry(reloc_roots.next,",
          "1918:      struct btrfs_root, root_list);",
          "1920:   if (btrfs_root_refs(&reloc_root->root_item) > 0) {",
          "1923:    BUG_ON(IS_ERR(root));",
          "1924:    BUG_ON(root->reloc_root != reloc_root);",
          "1926:    ret = merge_reloc_root(rc, root);",
          "1927:    btrfs_put_root(root);",
          "1928:    if (ret) {",
          "",
          "[Removed Lines]",
          "1921:    root = read_fs_root(fs_info,",
          "1922:          reloc_root->root_key.offset);",
          "",
          "[Added Lines]",
          "1920:   root = read_fs_root(fs_info, reloc_root->root_key.offset);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1932:     goto out;",
          "1933:    }",
          "1934:   } else {",
          "1935:    list_del_init(&reloc_root->root_list);",
          "1937:    list_add_tail(&reloc_root->reloc_dirty_list,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933:    if (!IS_ERR(root)) {",
          "1934:     if (root->reloc_root == reloc_root) {",
          "1935:      root->reloc_root = NULL;",
          "1936:      btrfs_put_root(reloc_root);",
          "1937:     }",
          "1938:     btrfs_put_root(root);",
          "1939:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c73bc52195def14165c3a7d91bdbb33b51725f5",
      "candidate_info": {
        "commit_hash": "3c73bc52195def14165c3a7d91bdbb33b51725f5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3c73bc52195def14165c3a7d91bdbb33b51725f5",
        "files": [
          "drivers/usb/gadget/udc/core.c",
          "include/linux/usb/gadget.h"
        ],
        "message": "usb: gadget: core: sync interrupt before unbind the udc\n\nThe threaded interrupt handler may still be called after the\nusb_gadget_disconnect is called, it causes the structures used\nat interrupt handler was freed before it uses, eg the\nusb_request. This issue usually occurs we remove the udc function\nduring the transfer. Below is the example when doing stress\ntest for android switch function, the EP0's request is freed\nby .unbind (configfs_composite_unbind -> composite_dev_cleanup),\nbut the threaded handler accesses this request during handling\nsetup packet request.\n\nIn fact, there is no protection between unbind the udc\nand udc interrupt handling, so we have to avoid the interrupt\nhandler is occurred or scheduled during the .unbind flow.\n\ninit: Sending signal 9 to service 'adbd' (pid 18077) process group...\nandroid_work: did not send uevent (0 0 000000007bec2039)\nlibprocessgroup: Successfully killed process cgroup uid 0 pid 18077 in 6ms\ninit: Service 'adbd' (pid 18077) received signal 9\ninit: Sending signal 9 to service 'adbd' (pid 18077) process group...\nlibprocessgroup: Successfully killed process cgroup uid 0 pid 18077 in 0ms\ninit: processing action (init.svc.adbd=stopped) from (/init.usb.configfs.rc:14)\ninit: Received control message 'start' for 'adbd' from pid: 399 (/vendor/bin/hw/android.hardware.usb@1.\n\ninit: starting service 'adbd'...\nread descriptors\nread strings\nUnable to handle kernel read from unreadable memory at virtual address 000000000000002a\nandroid_work: sent uevent USB_STATE=CONNECTED\nMem abort info:\n  ESR = 0x96000004\n  EC = 0x25: DABT (current EL), IL = 32 bits\n  SET = 0, FnV = 0\n  EA = 0, S1PTW = 0\nData abort info:\n  ISV = 0, ISS = 0x00000004\n  CM = 0, WnR = 0\nuser pgtable: 4k pages, 48-bit VAs, pgdp=00000000e97f1000\nusing random self ethernet address\n[000000000000002a] pgd=0000000000000000\nInternal error: Oops: 96000004 [#1] PREEMPT SMP\nModules linked in:\nCPU: 0 PID: 232 Comm: irq/68-5b110000 Not tainted 5.4.24-06075-g94a6b52b5815 #92\nHardware name: Freescale i.MX8QXP MEK (DT)\npstate: 00400085 (nzcv daIf +PAN -UAO)\nusing random host ethernet address\npc : composite_setup+0x5c/0x1730\nlr : android_setup+0xc0/0x148\nsp : ffff80001349bba0\nx29: ffff80001349bba0 x28: ffff00083a50da00\nx27: ffff8000124e6000 x26: ffff800010177950\nx25: 0000000000000040 x24: ffff000834e18010\nx23: 0000000000000000 x22: 0000000000000000\nx21: ffff00083a50da00 x20: ffff00082e75ec40\nx19: 0000000000000000 x18: 0000000000000000\nx17: 0000000000000000 x16: 0000000000000000\nx15: 0000000000000000 x14: 0000000000000000\nx13: 0000000000000000 x12: 0000000000000001\nx11: ffff80001180fb58 x10: 0000000000000040\nx9 : ffff8000120fc980 x8 : 0000000000000000\nx7 : ffff00083f98df50 x6 : 0000000000000100\nx5 : 00000307e8978431 x4 : ffff800011386788\nx3 : 0000000000000000 x2 : ffff800012342000\nx1 : 0000000000000000 x0 : ffff800010c6d3a0\nCall trace:\n composite_setup+0x5c/0x1730\n android_setup+0xc0/0x148\n cdns3_ep0_delegate_req+0x64/0x90\n cdns3_check_ep0_interrupt_proceed+0x384/0x738\n cdns3_device_thread_irq_handler+0x124/0x6e0\n cdns3_thread_irq+0x94/0xa0\n irq_thread_fn+0x30/0xa0\n irq_thread+0x150/0x248\n kthread+0xfc/0x128\n ret_from_fork+0x10/0x18\nCode: 910e8000 f9400693 12001ed7 79400f79 (3940aa61)\n---[ end trace c685db37f8773fba ]---\nKernel panic - not syncing: Fatal exception\nSMP: stopping secondary CPUs\nKernel Offset: disabled\nCPU features: 0x0002,20002008\nMemory Limit: none\nRebooting in 5 seconds..\n\nReviewed-by: Jun Li <jun.li@nxp.com>\nSigned-off-by: Peter Chen <peter.chen@nxp.com>\nSigned-off-by: Felipe Balbi <balbi@kernel.org>",
        "before_after_code_files": [
          "drivers/usb/gadget/udc/core.c||drivers/usgadget/udc/core.c",
          "include/linux/usb/gadget.h||include/linux/usgadget.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/usb/gadget/udc/core.c||drivers/usgadget/udc/core.c": [
          "File: drivers/usb/gadget/udc/core.c -> drivers/usgadget/udc/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297:  kobject_uevent(&udc->dev.kobj, KOBJ_CHANGE);",
          "1299:  usb_gadget_disconnect(udc->gadget);",
          "1300:  udc->driver->unbind(udc->gadget);",
          "1301:  usb_gadget_udc_stop(udc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/linux/usb/gadget.h||include/linux/usgadget.h": [
          "File: include/linux/usb/gadget.h -> include/linux/usgadget.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:  unsigned   deactivated:1;",
          "431:  unsigned   connected:1;",
          "432:  unsigned   lpm_capable:1;",
          "433: };",
          "434: #define work_to_gadget(w) (container_of((w), struct usb_gadget, work))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14e6b038afa014ac2288a2f3d692697f708ba344",
      "candidate_info": {
        "commit_hash": "14e6b038afa014ac2288a2f3d692697f708ba344",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/14e6b038afa014ac2288a2f3d692697f708ba344",
        "files": [
          "drivers/net/ethernet/mellanox/mlx5/core/en_rep.h",
          "drivers/net/ethernet/mellanox/mlx5/core/en_tc.c",
          "drivers/net/ethernet/mellanox/mlx5/core/eswitch.c",
          "drivers/net/ethernet/mellanox/mlx5/core/eswitch.h",
          "drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c"
        ],
        "message": "net/mlx5e: Add support for hw decapsulation of MPLS over UDP\n\nMPLS over UDP is supported in hardware by using a packet reformat object\nwith reformat type equal L3_TUNNEL_TO_L2 which both decapsulates the\nouter L3, L4 and MPLS headers, and allows for setting the L2 headers of\nthe resulting decapsulated packet. For the hardware to operate\ncorrectly, the configuration of the firmware must have\nFLEX_PARSER_PROFILE_ENABLE = 1.\n\nExample tc rule:\n  tc filter add dev bareudp0 protocol all prio 1 root flower enc_dst_port \\\n      6635 enc_src_ip 8.8.8.23 action mpls pop protocol ip pipe \\\n      action pedit ex munge eth dst set 00:11:22:33:44:21 pipe action \\\n      mirred egress redirect dev enp59s0f0_0\n\nWe use pedit to set the correct destination MAC.\n\nFor MPLS over UDP decapsulation to take place, the driver logic requires\nthe following:\n\n1. flower filter added on bareudp device.\n2. action mpls pop\n3. zero or more pedit munge actions\n4. one redirect action\n\nCurrent implementation supports only IPv4 and no VLAN.\n\ntc filter show output looks like this:\n   filter protocol all pref 1 flower chain 0\n   filter protocol all pref 1 flower chain 0 handle 0x1\n     enc_src_ip 8.8.8.24\n     enc_dst_port 6635\n     in_hw in_hw_count 1\n            action order 1: mpls  pop protocol ip pipe\n             index 2 ref 1 bind 1\n\n            action order 2:  pedit action pipe keys 2\n             index 1 ref 1 bind 1\n             key #0  at eth+0: val 00112233 mask 00000000\n             key #1  at eth+4: val 44210000 mask 0000ffff\n\n            action order 3: mirred (Egress Redirect to device enp59s0f0_0) stolen\n            index 2 ref 1 bind 1\n\nSigned-off-by: Eli Cohen <eli@mellanox.com>\nReviewed-by: Roi Dayan <roid@mellanox.com>\nReviewed-by: Eli Britstein <elibr@mellanox.com>\nReviewed-by: Vlad Buslov <vladbu@mellanox.com>\nReviewed-by: Paul Blakey <paulb@mellanox.com>\nSigned-off-by: Saeed Mahameed <saeedm@mellanox.com>",
        "before_after_code_files": [
          "drivers/net/ethernet/mellanox/mlx5/core/en_rep.h||drivers/net/ethernet/mellanox/mlx5/core/en_rep.h",
          "drivers/net/ethernet/mellanox/mlx5/core/en_tc.c||drivers/net/ethernet/mellanox/mlx5/core/en_tc.c",
          "drivers/net/ethernet/mellanox/mlx5/core/eswitch.c||drivers/net/ethernet/mellanox/mlx5/core/eswitch.c",
          "drivers/net/ethernet/mellanox/mlx5/core/eswitch.h||drivers/net/ethernet/mellanox/mlx5/core/eswitch.h",
          "drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c||drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/mellanox/mlx5/core/en_rep.h||drivers/net/ethernet/mellanox/mlx5/core/en_rep.h": [
          "File: drivers/net/ethernet/mellanox/mlx5/core/en_rep.h -> drivers/net/ethernet/mellanox/mlx5/core/en_rep.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: enum {",
          "160:  MLX5_ENCAP_ENTRY_VALID     = BIT(0),",
          "161: };",
          "163: struct mlx5e_encap_entry {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:  MLX5_REFORMAT_DECAP        = BIT(1),",
          "162: };",
          "164: struct mlx5e_decap_key {",
          "165:  struct ethhdr key;",
          "166: };",
          "168: struct mlx5e_decap_entry {",
          "169:  struct mlx5e_decap_key key;",
          "170:  struct list_head flows;",
          "171:  struct hlist_node hlist;",
          "172:  refcount_t refcnt;",
          "173:  struct completion res_ready;",
          "174:  int compl_result;",
          "175:  struct mlx5_pkt_reformat *pkt_reformat;",
          "176:  struct rcu_head rcu;",
          "",
          "---------------"
        ],
        "drivers/net/ethernet/mellanox/mlx5/core/en_tc.c||drivers/net/ethernet/mellanox/mlx5/core/en_tc.c": [
          "File: drivers/net/ethernet/mellanox/mlx5/core/en_tc.c -> drivers/net/ethernet/mellanox/mlx5/core/en_tc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include <net/tc_act/tc_tunnel_key.h>",
          "47: #include <net/tc_act/tc_pedit.h>",
          "48: #include <net/tc_act/tc_csum.h>",
          "49: #include <net/arp.h>",
          "50: #include <net/ipv6_stubs.h>",
          "51: #include <net/bareudp.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include <net/tc_act/tc_mpls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:  MLX5E_TC_FLOW_FLAG_NOT_READY = MLX5E_TC_FLOW_BASE + 5,",
          "94:  MLX5E_TC_FLOW_FLAG_DELETED = MLX5E_TC_FLOW_BASE + 6,",
          "95:  MLX5E_TC_FLOW_FLAG_CT  = MLX5E_TC_FLOW_BASE + 7,",
          "96: };",
          "98: #define MLX5E_TC_MAX_SPLITS 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:  MLX5E_TC_FLOW_FLAG_L3_TO_L2_DECAP = MLX5E_TC_FLOW_BASE + 8,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:  u64   cookie;",
          "127:  unsigned long  flags;",
          "128:  struct mlx5_flow_handle *rule[MLX5E_TC_MAX_SPLITS + 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:  struct list_head l3_to_l2_reformat;",
          "134:  struct mlx5e_decap_entry *decap_reformat;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:  struct mlx5_flow_spec spec;",
          "158:  struct mlx5e_tc_mod_hdr_acts mod_hdr_acts;",
          "159:  int mirred_ifindex[MLX5_MAX_FLOW_FWD_VPORTS];",
          "160: };",
          "162: #define MLX5E_TC_TABLE_NUM_GROUPS 4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  struct ethhdr eth;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1124:          struct netlink_ext_ack *extack,",
          "1125:          struct net_device **encap_dev,",
          "1126:          bool *encap_valid);",
          "1128: static struct mlx5_flow_handle *",
          "1129: mlx5e_tc_offload_fdb_rules(struct mlx5_eswitch *esw,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1135: static int mlx5e_attach_decap(struct mlx5e_priv *priv,",
          "1136:          struct mlx5e_tc_flow *flow,",
          "1137:          struct netlink_ext_ack *extack);",
          "1138: static void mlx5e_detach_decap(struct mlx5e_priv *priv,",
          "1139:           struct mlx5e_tc_flow *flow);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1299:   return -EOPNOTSUPP;",
          "1300:  }",
          "1302:  for (out_index = 0; out_index < MLX5_MAX_FLOW_FWD_VPORTS; out_index++) {",
          "1303:   int mirred_ifindex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1315:  if (flow_flag_test(flow, L3_TO_L2_DECAP)) {",
          "1316:   err = mlx5e_attach_decap(priv, flow, extack);",
          "1317:   if (err)",
          "1318:    return err;",
          "1319:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1409:  if (attr->action & MLX5_FLOW_CONTEXT_ACTION_COUNT)",
          "1410:   mlx5_fc_destroy(attr->counter_dev, attr->counter);",
          "1411: }",
          "1413: void mlx5e_tc_encap_flows_add(struct mlx5e_priv *priv,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1431:  if (flow_flag_test(flow, L3_TO_L2_DECAP))",
          "1432:   mlx5e_detach_decap(priv, flow);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1684:  kfree_rcu(e, rcu);",
          "1685: }",
          "1687: void mlx5e_encap_put(struct mlx5e_priv *priv, struct mlx5e_encap_entry *e)",
          "1688: {",
          "1689:  struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1709: static void mlx5e_decap_dealloc(struct mlx5e_priv *priv,",
          "1710:     struct mlx5e_decap_entry *d)",
          "1711: {",
          "1712:  WARN_ON(!list_empty(&d->flows));",
          "1714:  if (!d->compl_result)",
          "1715:   mlx5_packet_reformat_dealloc(priv->mdev, d->pkt_reformat);",
          "1717:  kfree_rcu(d, rcu);",
          "1718: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1696:  mlx5e_encap_dealloc(priv, e);",
          "1697: }",
          "1699: static void mlx5e_detach_encap(struct mlx5e_priv *priv,",
          "1700:           struct mlx5e_tc_flow *flow, int out_index)",
          "1701: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1732: static void mlx5e_decap_put(struct mlx5e_priv *priv, struct mlx5e_decap_entry *d)",
          "1733: {",
          "1734:  struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;",
          "1736:  if (!refcount_dec_and_mutex_lock(&d->refcnt, &esw->offloads.decap_tbl_lock))",
          "1737:   return;",
          "1738:  hash_del_rcu(&d->hlist);",
          "1739:  mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "1741:  mlx5e_decap_dealloc(priv, d);",
          "1742: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1719:  mlx5e_encap_dealloc(priv, e);",
          "1720: }",
          "1722: static void __mlx5e_tc_del_fdb_peer_flow(struct mlx5e_tc_flow *flow)",
          "1723: {",
          "1724:  struct mlx5_eswitch *esw = flow->priv->mdev->priv.eswitch;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767: static void mlx5e_detach_decap(struct mlx5e_priv *priv,",
          "1768:           struct mlx5e_tc_flow *flow)",
          "1769: {",
          "1770:  struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;",
          "1771:  struct mlx5e_decap_entry *d = flow->decap_reformat;",
          "1773:  if (!d)",
          "1774:   return;",
          "1776:  mutex_lock(&esw->offloads.decap_tbl_lock);",
          "1777:  list_del(&flow->l3_to_l2_reformat);",
          "1778:  flow->decap_reformat = NULL;",
          "1780:  if (!refcount_dec_and_test(&d->refcnt)) {",
          "1781:   mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "1782:   return;",
          "1783:  }",
          "1784:  hash_del_rcu(&d->hlist);",
          "1785:  mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "1787:  mlx5e_decap_dealloc(priv, d);",
          "1788: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1990:    return err;",
          "1991:   }",
          "1994:  }",
          "1996:  if (!needs_mapping && !sets_mapping)",
          "",
          "[Removed Lines]",
          "1993:   flow->esw_attr->action |= MLX5_FLOW_CONTEXT_ACTION_DECAP;",
          "",
          "[Added Lines]",
          "2064:   if (!netif_is_bareudp(filter_dev))",
          "2065:    flow->esw_attr->action |= MLX5_FLOW_CONTEXT_ACTION_DECAP;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3285:         a->tc_tunnel->tunnel_type != b->tc_tunnel->tunnel_type;",
          "3286: }",
          "3288: static inline int hash_encap_info(struct encap_key *key)",
          "3289: {",
          "3290:  return jhash(key->ip_tun_key, sizeof(*key->ip_tun_key),",
          "3291:        key->tc_tunnel->tunnel_type);",
          "3292: }",
          "3295: static bool is_merged_eswitch_dev(struct mlx5e_priv *priv,",
          "3296:       struct net_device *peer_netdev)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3360: static inline int cmp_decap_info(struct mlx5e_decap_key *a,",
          "3361:      struct mlx5e_decap_key *b)",
          "3362: {",
          "3363:  return memcmp(&a->key, &b->key, sizeof(b->key));",
          "3364: }",
          "3372: static inline int hash_decap_info(struct mlx5e_decap_key *key)",
          "3373: {",
          "3374:  return jhash(&key->key, sizeof(key->key), 0);",
          "3375: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3305:   same_hw_devs(priv, peer_priv));",
          "3306: }",
          "3310: bool mlx5e_encap_take(struct mlx5e_encap_entry *e)",
          "3311: {",
          "3312:  return refcount_inc_not_zero(&e->refcnt);",
          "3313: }",
          "3315: static struct mlx5e_encap_entry *",
          "3316: mlx5e_encap_get(struct mlx5e_priv *priv, struct encap_key *key,",
          "3317:   uintptr_t hash_key)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3395: static bool mlx5e_decap_take(struct mlx5e_decap_entry *e)",
          "3396: {",
          "3397:  return refcount_inc_not_zero(&e->refcnt);",
          "3398: }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3332:  return NULL;",
          "3333: }",
          "3335: static struct ip_tunnel_info *dup_tun_info(const struct ip_tunnel_info *tun_info)",
          "3336: {",
          "3337:  size_t tun_size = sizeof(*tun_info) + tun_info->options_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3420: static struct mlx5e_decap_entry *",
          "3421: mlx5e_decap_get(struct mlx5e_priv *priv, struct mlx5e_decap_key *key,",
          "3422:   uintptr_t hash_key)",
          "3423: {",
          "3424:  struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;",
          "3425:  struct mlx5e_decap_key r_key;",
          "3426:  struct mlx5e_decap_entry *e;",
          "3428:  hash_for_each_possible_rcu(esw->offloads.decap_tbl, e,",
          "3429:        hlist, hash_key) {",
          "3430:   r_key = e->key;",
          "3431:   if (!cmp_decap_info(&r_key, key) &&",
          "3432:       mlx5e_decap_take(e))",
          "3433:    return e;",
          "3434:  }",
          "3435:  return NULL;",
          "3436: }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3477:  return err;",
          "3478: }",
          "3480: static int parse_tc_vlan_action(struct mlx5e_priv *priv,",
          "3481:     const struct flow_action_entry *act,",
          "3482:     struct mlx5_esw_flow_attr *attr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3583: static int mlx5e_attach_decap(struct mlx5e_priv *priv,",
          "3584:          struct mlx5e_tc_flow *flow,",
          "3585:          struct netlink_ext_ack *extack)",
          "3586: {",
          "3587:  struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;",
          "3588:  struct mlx5_esw_flow_attr *attr = flow->esw_attr;",
          "3589:  struct mlx5e_tc_flow_parse_attr *parse_attr;",
          "3590:  struct mlx5e_decap_entry *d;",
          "3591:  struct mlx5e_decap_key key;",
          "3592:  uintptr_t hash_key;",
          "3593:  int err;",
          "3595:  parse_attr = attr->parse_attr;",
          "3596:  if (sizeof(parse_attr->eth) > MLX5_CAP_ESW(priv->mdev, max_encap_header_size)) {",
          "3597:   NL_SET_ERR_MSG_MOD(extack,",
          "3598:        \"encap header larger than max supported\");",
          "3599:   return -EOPNOTSUPP;",
          "3600:  }",
          "3602:  key.key = parse_attr->eth;",
          "3603:  hash_key = hash_decap_info(&key);",
          "3604:  mutex_lock(&esw->offloads.decap_tbl_lock);",
          "3605:  d = mlx5e_decap_get(priv, &key, hash_key);",
          "3606:  if (d) {",
          "3607:   mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "3608:   wait_for_completion(&d->res_ready);",
          "3609:   mutex_lock(&esw->offloads.decap_tbl_lock);",
          "3610:   if (d->compl_result) {",
          "3611:    err = -EREMOTEIO;",
          "3612:    goto out_free;",
          "3613:   }",
          "3614:   goto found;",
          "3615:  }",
          "3617:  d = kzalloc(sizeof(*d), GFP_KERNEL);",
          "3618:  if (!d) {",
          "3619:   err = -ENOMEM;",
          "3620:   goto out_err;",
          "3621:  }",
          "3623:  d->key = key;",
          "3624:  refcount_set(&d->refcnt, 1);",
          "3625:  init_completion(&d->res_ready);",
          "3626:  INIT_LIST_HEAD(&d->flows);",
          "3627:  hash_add_rcu(esw->offloads.decap_tbl, &d->hlist, hash_key);",
          "3628:  mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "3630:  d->pkt_reformat = mlx5_packet_reformat_alloc(priv->mdev,",
          "3631:            MLX5_REFORMAT_TYPE_L3_TUNNEL_TO_L2,",
          "3632:            sizeof(parse_attr->eth),",
          "3633:            &parse_attr->eth,",
          "3634:            MLX5_FLOW_NAMESPACE_FDB);",
          "3635:  if (IS_ERR(d->pkt_reformat)) {",
          "3636:   err = PTR_ERR(d->pkt_reformat);",
          "3637:   d->compl_result = err;",
          "3638:  }",
          "3639:  mutex_lock(&esw->offloads.decap_tbl_lock);",
          "3640:  complete_all(&d->res_ready);",
          "3641:  if (err)",
          "3642:   goto out_free;",
          "3644: found:",
          "3645:  flow->decap_reformat = d;",
          "3646:  attr->decap_pkt_reformat = d->pkt_reformat;",
          "3647:  list_add(&flow->l3_to_l2_reformat, &d->flows);",
          "3648:  mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "3649:  return 0;",
          "3651: out_free:",
          "3652:  mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "3653:  mlx5e_decap_put(priv, d);",
          "3654:  return err;",
          "3656: out_err:",
          "3657:  mutex_unlock(&esw->offloads.decap_tbl_lock);",
          "3658:  return err;",
          "3659: }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3688: static int parse_tc_fdb_actions(struct mlx5e_priv *priv,",
          "3689:     struct flow_action *flow_action,",
          "3690:     struct mlx5e_tc_flow *flow,",
          "3692: {",
          "3693:  struct pedit_headers_action hdrs[2] = {};",
          "3694:  struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;",
          "",
          "[Removed Lines]",
          "3691:     struct netlink_ext_ack *extack)",
          "",
          "[Added Lines]",
          "3872:     struct netlink_ext_ack *extack,",
          "3873:     struct net_device *filter_dev)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3727:    }",
          "3728:    mpls_push = true;",
          "3729:    break;",
          "3730:   case FLOW_ACTION_MANGLE:",
          "3731:   case FLOW_ACTION_ADD:",
          "3732:    err = parse_tc_pedit_action(priv, act, MLX5_FLOW_NAMESPACE_FDB,",
          "3733:           hdrs, extack);",
          "3734:    if (err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3912:   case FLOW_ACTION_MPLS_POP:",
          "3918:    if (i) {",
          "3919:     NL_SET_ERR_MSG_MOD(extack,",
          "3920:          \"mpls pop supported only as first action\");",
          "3921:     return -EOPNOTSUPP;",
          "3922:    }",
          "3923:    if (!netif_is_bareudp(filter_dev)) {",
          "3924:     NL_SET_ERR_MSG_MOD(extack,",
          "3925:          \"mpls pop supported only on bareudp devices\");",
          "3926:     return -EOPNOTSUPP;",
          "3927:    }",
          "3929:    parse_attr->eth.h_proto = act->mpls_pop.proto;",
          "3930:    action |= MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT;",
          "3931:    flow_flag_set(flow, L3_TO_L2_DECAP);",
          "3932:    break;",
          "3935:    if (flow_flag_test(flow, L3_TO_L2_DECAP))",
          "3936:     return -EOPNOTSUPP;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4093:   INIT_LIST_HEAD(&flow->encaps[out_index].list);",
          "4094:  INIT_LIST_HEAD(&flow->mod_hdr);",
          "4095:  INIT_LIST_HEAD(&flow->hairpin);",
          "4096:  refcount_set(&flow->refcnt, 1);",
          "4097:  init_completion(&flow->init_done);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4302:  INIT_LIST_HEAD(&flow->l3_to_l2_reformat);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4162:  if (err)",
          "4163:   goto err_free;",
          "4166:  if (err)",
          "4167:   goto err_free;",
          "",
          "[Removed Lines]",
          "4165:  err = parse_tc_fdb_actions(priv, &rule->action, flow, extack);",
          "",
          "[Added Lines]",
          "4372:  err = parse_tc_fdb_actions(priv, &rule->action, flow, extack, filter_dev);",
          "",
          "---------------"
        ],
        "drivers/net/ethernet/mellanox/mlx5/core/eswitch.c||drivers/net/ethernet/mellanox/mlx5/core/eswitch.c": [
          "File: drivers/net/ethernet/mellanox/mlx5/core/eswitch.c -> drivers/net/ethernet/mellanox/mlx5/core/eswitch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2262:  hash_init(esw->offloads.encap_tbl);",
          "2263:  mutex_init(&esw->offloads.mod_hdr.lock);",
          "2264:  hash_init(esw->offloads.mod_hdr.hlist);",
          "2265:  atomic64_set(&esw->offloads.num_flows, 0);",
          "2266:  mutex_init(&esw->state_lock);",
          "2267:  mutex_init(&esw->mode_lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2265:  mutex_init(&esw->offloads.decap_tbl_lock);",
          "2266:  hash_init(esw->offloads.decap_tbl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2303:  mutex_destroy(&esw->state_lock);",
          "2304:  mutex_destroy(&esw->offloads.mod_hdr.lock);",
          "2305:  mutex_destroy(&esw->offloads.encap_tbl_lock);",
          "2306:  kfree(esw->vports);",
          "2307:  kfree(esw);",
          "2308: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2308:  mutex_destroy(&esw->offloads.decap_tbl_lock);",
          "",
          "---------------"
        ],
        "drivers/net/ethernet/mellanox/mlx5/core/eswitch.h||drivers/net/ethernet/mellanox/mlx5/core/eswitch.h": [
          "File: drivers/net/ethernet/mellanox/mlx5/core/eswitch.h -> drivers/net/ethernet/mellanox/mlx5/core/eswitch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  struct mutex peer_mutex;",
          "211:  DECLARE_HASHTABLE(encap_tbl, 8);",
          "212:  struct mod_hdr_tbl mod_hdr;",
          "213:  DECLARE_HASHTABLE(termtbl_tbl, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:  DECLARE_HASHTABLE(decap_tbl, 8);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:  struct mlx5_flow_table *fdb;",
          "433:  struct mlx5_flow_table *dest_ft;",
          "434:  struct mlx5_ct_attr ct_attr;",
          "435:  struct mlx5e_tc_flow_parse_attr *parse_attr;",
          "436: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:  struct mlx5_pkt_reformat *decap_pkt_reformat;",
          "",
          "---------------"
        ],
        "drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c||drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c": [
          "File: drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c -> drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:    }",
          "367:   }",
          "368:  }",
          "369:  if (flow_act.action & MLX5_FLOW_CONTEXT_ACTION_COUNT) {",
          "370:   dest[i].type = MLX5_FLOW_DESTINATION_TYPE_COUNTER;",
          "371:   dest[i].counter_id = mlx5_fc_id(attr->counter);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:  if (attr->decap_pkt_reformat)",
          "371:   flow_act.pkt_reformat = attr->decap_pkt_reformat;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6988f31d558aa8c744464a7f6d91d34ada48ad12",
      "candidate_info": {
        "commit_hash": "6988f31d558aa8c744464a7f6d91d34ada48ad12",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6988f31d558aa8c744464a7f6d91d34ada48ad12",
        "files": [
          "include/linux/mm.h"
        ],
        "message": "mm: remove VM_BUG_ON(PageSlab()) from page_mapcount()\n\nReplace superfluous VM_BUG_ON() with comment about correct usage.\n\nTechnically reverts commit 1d148e218a0d (\"mm: add VM_BUG_ON_PAGE() to\npage_mapcount()\"), but context lines have changed.\n\nFunction isolate_migratepages_block() runs some checks out of lru_lock\nwhen choose pages for migration.  After checking PageLRU() it checks\nextra page references by comparing page_count() and page_mapcount().\nBetween these two checks page could be removed from lru, freed and taken\nby slab.\n\nAs a result this race triggers VM_BUG_ON(PageSlab()) in page_mapcount().\nRace window is tiny.  For certain workload this happens around once a\nyear.\n\n    page:ffffea0105ca9380 count:1 mapcount:0 mapping:ffff88ff7712c180 index:0x0 compound_mapcount: 0\n    flags: 0x500000000008100(slab|head)\n    raw: 0500000000008100 dead000000000100 dead000000000200 ffff88ff7712c180\n    raw: 0000000000000000 0000000080200020 00000001ffffffff 0000000000000000\n    page dumped because: VM_BUG_ON_PAGE(PageSlab(page))\n    ------------[ cut here ]------------\n    kernel BUG at ./include/linux/mm.h:628!\n    invalid opcode: 0000 [#1] SMP NOPTI\n    CPU: 77 PID: 504 Comm: kcompactd1 Tainted: G        W         4.19.109-27 #1\n    Hardware name: Yandex T175-N41-Y3N/MY81-EX0-Y3N, BIOS R05 06/20/2019\n    RIP: 0010:isolate_migratepages_block+0x986/0x9b0\n\nThe code in isolate_migratepages_block() was added in commit\n119d6d59dcc0 (\"mm, compaction: avoid isolating pinned pages\") before\nadding VM_BUG_ON into page_mapcount().\n\nThis race has been predicted in 2015 by Vlastimil Babka (see link\nbelow).\n\n[akpm@linux-foundation.org: comment tweaks, per Hugh]\nFixes: 1d148e218a0d (\"mm: add VM_BUG_ON_PAGE() to page_mapcount()\")\nSigned-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nAcked-by: Hugh Dickins <hughd@google.com>\nAcked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCc: David Rientjes <rientjes@google.com>\nCc: <stable@vger.kernel.org>\nLink: http://lkml.kernel.org/r/159032779896.957378.7852761411265662220.stgit@buzz\nLink: https://lore.kernel.org/lkml/557710E1.6060103@suse.cz/\nLink: https://lore.kernel.org/linux-mm/158937872515.474360.5066096871639561424.stgit@buzz/T/ (v1)\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "include/linux/mm.h||include/linux/mm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/linux/mm.h||include/linux/mm.h": [
          "File: include/linux/mm.h -> include/linux/mm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "802: int __page_mapcount(struct page *page);",
          "804: static inline int page_mapcount(struct page *page)",
          "805: {",
          "808:  if (unlikely(PageCompound(page)))",
          "809:   return __page_mapcount(page);",
          "810:  return atomic_read(&page->_mapcount) + 1;",
          "",
          "[Removed Lines]",
          "806:  VM_BUG_ON_PAGE(PageSlab(page), page);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88743470668ef5eb6b7ba9e0f99888e5999bf172",
      "candidate_info": {
        "commit_hash": "88743470668ef5eb6b7ba9e0f99888e5999bf172",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/88743470668ef5eb6b7ba9e0f99888e5999bf172",
        "files": [
          "arch/x86/include/asm/dma.h"
        ],
        "message": "x86/dma: Fix max PFN arithmetic overflow on 32 bit systems\n\nThe intermediate result of the old term (4UL * 1024 * 1024 * 1024) is\n4 294 967 296 or 0x100000000 which is no problem on 64 bit systems.\nThe patch does not change the later overall result of 0x100000 for\nMAX_DMA32_PFN (after it has been shifted by PAGE_SHIFT). The new\ncalculation yields the same result, but does not require 64 bit\narithmetic.\n\nOn 32 bit systems the old calculation suffers from an arithmetic\noverflow in that intermediate term in braces: 4UL aka unsigned long int\nis 4 byte wide and an arithmetic overflow happens (the 0x100000000 does\nnot fit in 4 bytes), the in braces result is truncated to zero, the\nfollowing right shift does not alter that, so MAX_DMA32_PFN evaluates to\n0 on 32 bit systems.\n\nThat wrong value is a problem in a comparision against MAX_DMA32_PFN in\nthe init code for swiotlb in pci_swiotlb_detect_4gb() to decide if\nswiotlb should be active.  That comparison yields the opposite result,\nwhen compiling on 32 bit systems.\n\nThis was not possible before\n\n  1b7e03ef7570 (\"x86, NUMA: Enable emulation on 32bit too\")\n\nwhen that MAX_DMA32_PFN was first made visible to x86_32 (and which\nlanded in v3.0).\n\nIn practice this wasn't a problem, unless CONFIG_SWIOTLB is active on\nx86-32.\n\nHowever if one has set CONFIG_IOMMU_INTEL, since\n\n  c5a5dc4cbbf4 (\"iommu/vt-d: Don't switch off swiotlb if bounce page is used\")\n\nthere's a dependency on CONFIG_SWIOTLB, which was not necessarily\nactive before. That landed in v5.4, where we noticed it in the fli4l\nLinux distribution. We have CONFIG_IOMMU_INTEL active on both 32 and 64\nbit kernel configs there (I could not find out why, so let's just say\nhistorical reasons).\n\nThe effect is at boot time 64 MiB (default size) were allocated for\nbounce buffers now, which is a noticeable amount of memory on small\nsystems like pcengines ALIX 2D3 with 256 MiB memory, which are still\nfrequently used as home routers.\n\nWe noticed this effect when migrating from kernel v4.19 (LTS) to v5.4\n(LTS) in fli4l and got that kernel messages for example:\n\n  Linux version 5.4.22 (buildroot@buildroot) (gcc version 7.3.0 (Buildroot 2018.02.8)) #1 SMP Mon Nov 26 23:40:00 CET 2018\n  \u2026\n  Memory: 183484K/261756K available (4594K kernel code, 393K rwdata, 1660K rodata, 536K init, 456K bss , 78272K reserved, 0K cma-reserved, 0K highmem)\n  \u2026\n  PCI-DMA: Using software bounce buffering for IO (SWIOTLB)\n  software IO TLB: mapped [mem 0x0bb78000-0x0fb78000] (64MB)\n\nThe initial analysis and the suggested fix was done by user 'sourcejedi'\nat stackoverflow and explicitly marked as GPLv2 for inclusion in the\nLinux kernel:\n\n  https://unix.stackexchange.com/a/520525/50007\n\nThe new calculation, which does not suffer from that overflow, is the\nsame as for arch/mips now as suggested by Robin Murphy.\n\nThe fix was tested by fli4l users on round about two dozen different\nsystems, including both 32 and 64 bit archs, bare metal and virtualized\nmachines.\n\n [ bp: Massage commit message. ]\n\nFixes: 1b7e03ef7570 (\"x86, NUMA: Enable emulation on 32bit too\")\nReported-by: Alan Jenkins <alan.christopher.jenkins@gmail.com>\nSuggested-by: Robin Murphy <robin.murphy@arm.com>\nSigned-off-by: Alexander Dahl <post@lespocky.de>\nSigned-off-by: Borislav Petkov <bp@suse.de>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nCc: stable@vger.kernel.org\nLink: https://unix.stackexchange.com/q/520065/50007\nLink: https://web.nettworks.org/bugs/browse/FFL-2560\nLink: https://lkml.kernel.org/r/20200526175749.20742-1-post@lespocky.de",
        "before_after_code_files": [
          "arch/x86/include/asm/dma.h||arch/x86/include/asm/dma.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/dma.h||arch/x86/include/asm/dma.h": [
          "File: arch/x86/include/asm/dma.h -> arch/x86/include/asm/dma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #define MAX_DMA_PFN   ((16UL * 1024 * 1024) >> PAGE_SHIFT)",
          "79: #ifdef CONFIG_X86_32",
          "",
          "[Removed Lines]",
          "77: #define MAX_DMA32_PFN ((4UL * 1024 * 1024 * 1024) >> PAGE_SHIFT)",
          "",
          "[Added Lines]",
          "77: #define MAX_DMA32_PFN (1UL << (32 - PAGE_SHIFT))",
          "",
          "---------------"
        ]
      }
    }
  ]
}