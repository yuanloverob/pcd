{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b412ac2473707fc7bc4ce29466d7b7dc4988905",
      "candidate_info": {
        "commit_hash": "3b412ac2473707fc7bc4ce29466d7b7dc4988905",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b412ac2473707fc7bc4ce29466d7b7dc4988905",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "test/dbdata.test"
        ],
        "message": "Add the sqlite_dbptr virtual table to the dbdata extension. For querying the links between b-tree pages.\n\nFossilOrigin-Name: 3213a15f2133afbb0a4fec3b8f6e0eeca8c0befafd6658c41074e84f589d5d32",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "test/dbdata.test||test/dbdata.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: };",
          "90: struct DbdataTable {",
          "93: };",
          "95: #define DBDATA_COLUMN_PGNO        0",
          "",
          "[Removed Lines]",
          "86:   sqlite3_int64 iRowid;",
          "",
          "[Added Lines]",
          "92:   sqlite3_int64 iRowid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #define DBDATA_COLUMN_VALUE       3",
          "99: #define DBDATA_COLUMN_SCHEMA      4",
          "101: #define DBDATA_SCHEMA             \\",
          "102:       \"CREATE TABLE x(\"           \\",
          "103:       \"  pgno INTEGER,\"           \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #define DBPTR_COLUMN_PGNO         0",
          "116: #define DBPTR_COLUMN_CHILD        1",
          "117: #define DBPTR_COLUMN_SCHEMA       2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:       \"  schema TEXT HIDDEN\"      \\",
          "108:       \")\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: #define DBPTR_SCHEMA              \\",
          "129:       \"CREATE TABLE x(\"           \\",
          "130:       \"  pgno INTEGER,\"           \\",
          "131:       \"  child INTEGER,\"          \\",
          "132:       \"  schema TEXT HIDDEN\"      \\",
          "133:       \")\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:   char **pzErr",
          "119: ){",
          "120:   DbdataTable *pTab = 0;",
          "123:   if( rc==SQLITE_OK ){",
          "124:     pTab = (DbdataTable*)sqlite3_malloc64(sizeof(DbdataTable));",
          "",
          "[Removed Lines]",
          "121:   int rc = sqlite3_declare_vtab(db, DBDATA_SCHEMA);",
          "",
          "[Added Lines]",
          "146:   int rc = sqlite3_declare_vtab(db, pAux ? DBPTR_SCHEMA : DBDATA_SCHEMA);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     }else{",
          "128:       memset(pTab, 0, sizeof(DbdataTable));",
          "129:       pTab->db = db;",
          "130:     }",
          "131:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:       pTab->bPtr = (pAux!=0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "160:   int i;",
          "161:   int iSchema = -1;",
          "162:   int iPgno = -1;",
          "164:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "165:     struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];",
          "166:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ ){",
          "168:         if( p->usable==0 ) return SQLITE_CONSTRAINT;",
          "169:         iSchema = i;",
          "170:       }",
          "",
          "[Removed Lines]",
          "167:       if( p->iColumn==DBDATA_COLUMN_SCHEMA ){",
          "",
          "[Added Lines]",
          "186:   DbdataTable *pTab = (DbdataTable*)tab;",
          "190:   int colSchema = (pTab->bPtr ? DBPTR_COLUMN_SCHEMA : DBDATA_COLUMN_SCHEMA);",
          "195:       if( p->iColumn==colSchema ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:   pCsr->iPgno = 1;",
          "211:   pCsr->iCell = 0;",
          "212:   pCsr->iField = 0;",
          "213: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:   pCsr->bOnePage = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "283: static int dbdataNext(sqlite3_vtab_cursor *pCursor){",
          "286:   pCsr->iRowid++;",
          "287:   while( 1 ){",
          "288:     int rc;",
          "290:     if( pCsr->aPage==0 ){",
          "291:       rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);",
          "295:     }",
          "320:       }",
          "321:       if( pCsr->iCell>=pCsr->nCell ){",
          "322:         sqlite3_free(pCsr->aPage);",
          "323:         pCsr->aPage = 0;",
          "324:         return SQLITE_OK;",
          "325:       }",
          "360:         }else{",
          "362:         }",
          "387:         }",
          "388:       }",
          "400:     }",
          "410:   }",
          "412:   assert( !\"can't get here\" );",
          "",
          "[Removed Lines]",
          "284:   DbdataCursor *pCsr = (DbdataCursor *)pCursor;",
          "292:       if( rc!=SQLITE_OK ) return rc;",
          "293:       pCsr->iCell = 0;",
          "294:       pCsr->nCell = get_uint16(&pCsr->aPage[pCsr->iPgno==1 ? 103 : 3]);",
          "298:     if( pCsr->pRec==0 ){",
          "299:       int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "300:       int bHasRowid = 0;",
          "301:       int nPointer = 0;",
          "302:       sqlite3_int64 nPayload = 0;",
          "303:       sqlite3_int64 nHdr = 0;",
          "304:       int iHdr;",
          "305:       int U, X;",
          "306:       int nLocal;",
          "308:       switch( pCsr->aPage[iOff] ){",
          "309:         case 0x02:",
          "310:           nPointer = 4;",
          "311:           break;",
          "312:         case 0x0a:",
          "313:           break;",
          "314:         case 0x0d:",
          "315:           bHasRowid = 1;",
          "316:           break;",
          "317:         default:",
          "318:           pCsr->iCell = pCsr->nCell;",
          "319:           break;",
          "327:       iOff += 8 + nPointer + pCsr->iCell*2;",
          "328:       iOff = get_uint16(&pCsr->aPage[iOff]);",
          "331:       iOff += nPointer;",
          "334:       iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "337:       if( bHasRowid ){",
          "338:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "339:       }",
          "342:       pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "343:       if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "344:       pCsr->nRec = nPayload;",
          "346:       U = pCsr->nPage;",
          "347:       if( bHasRowid ){",
          "348:         X = U-35;",
          "349:       }else{",
          "350:         X = ((U-12)*64/255)-23;",
          "351:       }",
          "352:       if( nPayload<=X ){",
          "353:         nLocal = nPayload;",
          "354:       }else{",
          "355:         int M, K;",
          "356:         M = ((U-12)*32/255)-23;",
          "357:         K = M+((nPayload-M)%(U-4));",
          "358:         if( K<=X ){",
          "359:           nLocal = K;",
          "361:           nLocal = M;",
          "363:       }",
          "366:       memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "367:       iOff += nLocal;",
          "370:       if( nPayload>nLocal ){",
          "371:         sqlite3_int64 nRem = nPayload - nLocal;",
          "372:         u32 pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "373:         while( nRem>0 ){",
          "374:           u8 *aOvfl = 0;",
          "375:           int nOvfl = 0;",
          "376:           int nCopy;",
          "377:           rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "378:           assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "379:           if( rc!=SQLITE_OK ) return rc;",
          "381:           nCopy = U-4;",
          "382:           if( nCopy>nRem ) nCopy = nRem;",
          "383:           memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "384:           nRem -= nCopy;",
          "386:           sqlite3_free(aOvfl);",
          "391:       pCsr->nField = 0;",
          "392:       iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "393:       while( iHdr<nHdr ){",
          "394:         sqlite3_int64 iDummy;",
          "395:         iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iDummy);",
          "396:         pCsr->nField++;",
          "397:       }",
          "399:       pCsr->iField = (bHasRowid ? -2 : -1);",
          "402:     pCsr->iField++;",
          "403:     if( pCsr->iField<pCsr->nField ) return SQLITE_OK;",
          "407:     sqlite3_free(pCsr->pRec);",
          "408:     pCsr->pRec = 0;",
          "409:     pCsr->iCell++;",
          "",
          "[Added Lines]",
          "313:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "314:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "319:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "323:       if( rc!=SQLITE_OK || pCsr->aPage==0 ) return rc;",
          "324:       pCsr->iCell = pTab->bPtr ? -2 : 0;",
          "325:       pCsr->nCell = get_uint16(&pCsr->aPage[iOff+3]);",
          "328:     if( pTab->bPtr ){",
          "329:       if( pCsr->aPage[iOff]!=0x02 && pCsr->aPage[iOff]!=0x05 ){",
          "330:         pCsr->iCell = pCsr->nCell;",
          "332:       pCsr->iCell++;",
          "336:         if( pCsr->bOnePage ) return SQLITE_OK;",
          "337:         pCsr->iPgno++;",
          "338:       }else{",
          "341:     }else{",
          "343:       if( pCsr->pRec==0 ){",
          "344:         int bHasRowid = 0;",
          "345:         int nPointer = 0;",
          "346:         sqlite3_int64 nPayload = 0;",
          "347:         sqlite3_int64 nHdr = 0;",
          "348:         int iHdr;",
          "349:         int U, X;",
          "350:         int nLocal;",
          "352:         switch( pCsr->aPage[iOff] ){",
          "353:           case 0x02:",
          "354:             nPointer = 4;",
          "355:             break;",
          "356:           case 0x0a:",
          "357:             break;",
          "358:           case 0x0d:",
          "359:             bHasRowid = 1;",
          "360:             break;",
          "361:           default:",
          "363:             pCsr->iCell = pCsr->nCell;",
          "364:             break;",
          "365:         }",
          "367:         if( pCsr->iCell>=pCsr->nCell ){",
          "368:           sqlite3_free(pCsr->aPage);",
          "369:           pCsr->aPage = 0;",
          "370:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "371:           pCsr->iPgno++;",
          "372:           continue;",
          "373:         }",
          "375:         iOff += 8 + nPointer + pCsr->iCell*2;",
          "376:         iOff = get_uint16(&pCsr->aPage[iOff]);",
          "379:         iOff += nPointer;",
          "382:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "385:         if( bHasRowid ){",
          "386:           iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "387:         }",
          "390:         pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "391:         if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "392:         pCsr->nRec = nPayload;",
          "394:         U = pCsr->nPage;",
          "395:         if( bHasRowid ){",
          "396:           X = U-35;",
          "398:           X = ((U-12)*64/255)-23;",
          "400:         if( nPayload<=X ){",
          "401:           nLocal = nPayload;",
          "402:         }else{",
          "403:           int M, K;",
          "404:           M = ((U-12)*32/255)-23;",
          "405:           K = M+((nPayload-M)%(U-4));",
          "406:           if( K<=X ){",
          "407:             nLocal = K;",
          "408:           }else{",
          "409:             nLocal = M;",
          "410:           }",
          "414:         memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "415:         iOff += nLocal;",
          "418:         if( nPayload>nLocal ){",
          "419:           sqlite3_int64 nRem = nPayload - nLocal;",
          "420:           u32 pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "421:           while( nRem>0 ){",
          "422:             u8 *aOvfl = 0;",
          "423:             int nOvfl = 0;",
          "424:             int nCopy;",
          "425:             rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "426:             assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "427:             if( rc!=SQLITE_OK ) return rc;",
          "429:             nCopy = U-4;",
          "430:             if( nCopy>nRem ) nCopy = nRem;",
          "431:             memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "432:             nRem -= nCopy;",
          "434:             sqlite3_free(aOvfl);",
          "435:           }",
          "436:         }",
          "439:         pCsr->nField = 0;",
          "440:         iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "441:         while( iHdr<nHdr ){",
          "442:           sqlite3_int64 iDummy;",
          "443:           iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iDummy);",
          "444:           pCsr->nField++;",
          "445:         }",
          "447:         pCsr->iField = (bHasRowid ? -2 : -1);",
          "450:       pCsr->iField++;",
          "451:       if( pCsr->iField<pCsr->nField ) return SQLITE_OK;",
          "455:       sqlite3_free(pCsr->pRec);",
          "456:       pCsr->pRec = 0;",
          "457:       pCsr->iCell++;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "440:   }",
          "441:   if( idxNum & 0x02 ){",
          "442:     pCsr->iPgno = sqlite3_value_int(argv[(idxNum & 0x01)]);",
          "443:   }",
          "445:   rc = sqlite3_prepare_v2(pTab->db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:     pCsr->bOnePage = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:   int i",
          "534: ){",
          "535:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "558:         }",
          "562:       }",
          "564:     }",
          "565:   }",
          "566:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "536:   switch( i ){",
          "537:     case DBDATA_COLUMN_PGNO:",
          "538:       sqlite3_result_int64(ctx, pCsr->iPgno);",
          "539:       break;",
          "540:     case DBDATA_COLUMN_CELL:",
          "541:       sqlite3_result_int(ctx, pCsr->iCell);",
          "542:       break;",
          "543:     case DBDATA_COLUMN_FIELD:",
          "544:       sqlite3_result_int(ctx, pCsr->iField);",
          "545:       break;",
          "546:     case DBDATA_COLUMN_VALUE: {",
          "547:       if( pCsr->iField<0 ){",
          "548:         sqlite3_result_int64(ctx, pCsr->iIntkey);",
          "549:       }else{",
          "550:         int iHdr;",
          "551:         sqlite3_int64 iType;",
          "552:         sqlite3_int64 iOff;",
          "553:         int i;",
          "554:         iHdr = dbdataGetVarint(pCsr->pRec, &iOff);",
          "555:         for(i=0; i<pCsr->iField; i++){",
          "556:           iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "557:           iOff += dbdataValueBytes(iType);",
          "559:         dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "561:         dbdataValue(ctx, iType, &pCsr->pRec[iOff]);",
          "563:       break;",
          "",
          "[Added Lines]",
          "586:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "587:   if( pTab->bPtr ){",
          "588:     switch( i ){",
          "589:       case DBPTR_COLUMN_PGNO:",
          "590:         sqlite3_result_int64(ctx, pCsr->iPgno);",
          "591:         break;",
          "592:       case DBPTR_COLUMN_CHILD: {",
          "593:         int iOff = pCsr->iPgno==1 ? 100 : 0;",
          "594:         if( pCsr->iCell<0 ){",
          "595:           iOff += 8;",
          "596:         }else{",
          "597:           iOff += 12 + pCsr->iCell*2;",
          "598:           iOff = get_uint16(&pCsr->aPage[iOff]);",
          "600:         sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "601:         break;",
          "602:       }",
          "603:     }",
          "604:   }else{",
          "605:     switch( i ){",
          "606:       case DBDATA_COLUMN_PGNO:",
          "607:         sqlite3_result_int64(ctx, pCsr->iPgno);",
          "608:         break;",
          "609:       case DBDATA_COLUMN_CELL:",
          "610:         sqlite3_result_int(ctx, pCsr->iCell);",
          "611:         break;",
          "612:       case DBDATA_COLUMN_FIELD:",
          "613:         sqlite3_result_int(ctx, pCsr->iField);",
          "614:         break;",
          "615:       case DBDATA_COLUMN_VALUE: {",
          "616:         if( pCsr->iField<0 ){",
          "617:           sqlite3_result_int64(ctx, pCsr->iIntkey);",
          "618:         }else{",
          "619:           int iHdr;",
          "620:           sqlite3_int64 iType;",
          "621:           sqlite3_int64 iOff;",
          "622:           int i;",
          "623:           iHdr = dbdataGetVarint(pCsr->pRec, &iOff);",
          "624:           for(i=0; i<pCsr->iField; i++){",
          "625:             iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "626:             iOff += dbdataValueBytes(iType);",
          "627:           }",
          "628:           dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "630:           dbdataValue(ctx, iType, &pCsr->pRec[iOff]);",
          "631:         }",
          "632:         break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "606:   };",
          "608: }",
          "610: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "607:   return sqlite3_create_module(db, \"sqlite_dbdata\", &dbdata_module, 0);",
          "",
          "[Added Lines]",
          "678:   int rc = sqlite3_create_module(db, \"sqlite_dbdata\", &dbdata_module, 0);",
          "679:   if( rc==SQLITE_OK ){",
          "680:     rc = sqlite3_create_module(db, \"sqlite_dbptr\", &dbdata_module, (void*)1);",
          "681:   }",
          "682:   return rc;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3ab58832935e1399ecc7e4d8daefa3a6afa6b301792ce7176bc5d7c173510fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbdata.test||test/dbdata.test": [
          "File: test/dbdata.test -> test/dbdata.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   2 1  1 'ten'",
          "44: }",
          "47: do_execsql_test 1.2 {",
          "48:   INSERT INTO t1 VALUES(NULL, $big);",
          "49:   SELECT value FROM sqlite_dbdata WHERE pgno=2 AND cell=2 AND field=1;",
          "50: } $big",
          "54: finish_test",
          "",
          "[Removed Lines]",
          "46: set big [string repeat big 2000]",
          "",
          "[Added Lines]",
          "46: breakpoint",
          "48:   SELECT pgno, cell, field, quote(value) FROM sqlite_dbdata;",
          "49: } {",
          "50:   1 0 -1 1",
          "51:   1 0 0 'table'",
          "52:   1 0 1 'T1'",
          "53:   1 0 2 'T1'",
          "54:   1 0 3 2",
          "55:   1 0 4 {'CREATE TABLE T1(a, b)'}",
          "56:   2 0 -1 5",
          "57:   2 0  0 'v'",
          "58:   2 0  1 'five'",
          "59:   2 1 -1 10",
          "60:   2 1  0 'x'",
          "61:   2 1  1 'ten'",
          "62: }",
          "64: set big [string repeat big 2000]",
          "65: do_execsql_test 1.3 {",
          "70: #-------------------------------------------------------------------------",
          "71: reset_db",
          "72: db enable_load_extension 1",
          "73: db eval { SELECT load_extension('../dbdata') }",
          "75: do_execsql_test 2.0 {",
          "76:   CREATE TABLE t1(a);",
          "77:   CREATE INDEX i1 ON t1(a);",
          "78:   WITH s(i) AS (",
          "79:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10",
          "80:   )",
          "81:   INSERT INTO t1 SELECT randomblob(900) FROM s;",
          "82: }",
          "84: do_execsql_test 2.1 {",
          "85:   SELECT * FROM sqlite_dbptr WHERE pgno=2;",
          "86: } {",
          "87:   2 25   2 6   2 7   2 9   2 11   2 13   2 15   2 17   2 19   2 21",
          "88: }",
          "90: do_execsql_test 2.2 {",
          "91:   SELECT * FROM sqlite_dbptr WHERE pgno=3;",
          "92: } {",
          "93:   3 24   3 23",
          "94: }",
          "96: do_execsql_test 2.3 {",
          "97:   SELECT * FROM sqlite_dbptr",
          "98: } {",
          "99:   2 25   2 6   2 7   2 9   2 11   2 13   2 15   2 17   2 19   2 21",
          "100:   3 24   3 23",
          "101: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
      "candidate_info": {
        "commit_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Enhance the btree search routine so that it does early detection of impossibly large keys and thereby avoids a large malloc() call.\n\nFossilOrigin-Name: 3ecaaee69f49e43d38047b7d53b82689eba7f7d33541fcac3c32b6dc8a568458",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 505ed9a47825240979338a24044559613fbbd2a7850bdff70c7164da054ec63d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5479:             rc = SQLITE_CORRUPT_PAGE(pPage);",
          "5480:             goto moveto_finish;",
          "5481:           }",
          "",
          "[Removed Lines]",
          "5478:           if( nCell<2 ){",
          "",
          "[Added Lines]",
          "5478:           if( nCell<2 || nCell/pCur->pBt->usableSize>pCur->pBt->nPage ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99778c4b211b78134152b38ee1798c54b5c268a8",
      "candidate_info": {
        "commit_hash": "99778c4b211b78134152b38ee1798c54b5c268a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99778c4b211b78134152b38ee1798c54b5c268a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Improvements to the documentation for the xAccess method of the VFS. Ticket [5e0423b058fa5adf]\n\nFossilOrigin-Name: 7078d77effc296c63c91ec032c866e2b320f081d58e57e9e83cc58373169bda3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c0c90961b4fa1c1185772d04fe1915bc1a1af27ed8ddb8db1c524bf90d68ccbf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "6fcc1ecc99dbf222394bbfe207496b1148ece800",
      "candidate_info": {
        "commit_hash": "6fcc1ecc99dbf222394bbfe207496b1148ece800",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6fcc1ecc99dbf222394bbfe207496b1148ece800",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "In \"PRAGMA vdbe_trace\" output, show the results of OP_Affinity opcodes.\n\nFossilOrigin-Name: 56604bb60a8ebac8d2854628d1b052d594d7effe14be8333977995dc07b65114",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36dd5b0804797a35d0dc596b6ca4f71813a155c5a470237ab6e3d1bcd9ccc6be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2769:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2770:     assert( memIsValid(pIn1) );",
          "2771:     applyAffinity(pIn1, *(zAffinity++), encoding);",
          "2772:     pIn1++;",
          "2773:   }while( zAffinity[0] );",
          "2774:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2772:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c143114460ec0c214218978baa98b6585649cc22",
      "candidate_info": {
        "commit_hash": "c143114460ec0c214218978baa98b6585649cc22",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c143114460ec0c214218978baa98b6585649cc22",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/pragma.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/vtab.c"
        ],
        "message": "Some (but not all) INSERT and UPDATE statements now work for STORED columns.\n\nFossilOrigin-Name: fe7517bf4d360597576ab9aba29627d7926d23f2bbbfb3e7bf4d32761617574c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8f67b89b04622c1509dc102a83be7a80057dc791625804fc2c294089c98b97e4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1568:   pCol->colFlags |= eType;",
          "1569:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "1570:   goto generated_done;",
          "",
          "[Removed Lines]",
          "1567:   pTab->nVCol++;",
          "",
          "[Added Lines]",
          "1567:   if( eType==COLFLAG_VIRTUAL ) pTab->nVCol++;",
          "1569:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1570:   assert( TF_HasStored==COLFLAG_STORED );",
          "1571:   pTab->tabFlags |= eType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2177:   }",
          "2179: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2181:     int ii;",
          "2182:     for(ii=0; ii<p->nCol; ii++){",
          "2183:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "",
          "[Removed Lines]",
          "2180:   if( p->nVCol ){",
          "",
          "[Added Lines]",
          "2183:   if( p->tabFlags & (TF_HasVirtual|TF_HasStored) ){",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   return 0;",
          "203: }",
          "205: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "213: void sqlite3ComputeStoredColumns(",
          "217: ){",
          "218:   int i;",
          "219:   pParse->iSelfTab = -iRegStore;",
          "220:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "221:     u32 colFlags = pTab->aCol[i].colFlags;",
          "222:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "224:       iRegStore--;",
          "225:     }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "227:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "228:     }",
          "229:   }",
          "230:   pParse->iSelfTab = 0;",
          "231: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028:           iRegStore--;",
          "1029:           continue;",
          "1033:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1034:           continue;",
          "1035:         }",
          "",
          "[Removed Lines]",
          "1030:         }else if( (colFlags & COLFLAG_STORED)!=0 || pColumn==0 ){",
          "",
          "[Added Lines]",
          "1060:         }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "1062:           continue;",
          "1063:         }else if( pColumn==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1061:       }",
          "1062:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1096: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1099:     if( pTab->tabFlags & TF_HasStored ){",
          "1100:       sqlite3ComputeStoredColumns(pParse, regRowid+1, pTab);",
          "1101:     }",
          "1102: #endif",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1108:           }",
          "1109:           if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1115:           }",
          "1116:         }",
          "",
          "[Removed Lines]",
          "1111:           }else if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1113:           }else{",
          "",
          "[Added Lines]",
          "1111:           }else if( pCol->colFlags & COLFLAG_STORED ){",
          "1113:           }else{ assert( pCol->colFlags & COLFLAG_HIDDEN );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4020: # define sqlite3AutoincrementEnd(X)",
          "4021: #endif",
          "4022: void sqlite3Insert(Parse*, SrcList*, Select*, IdList*, int, Upsert*);",
          "4023: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "4024: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "4025: int sqlite3IdListIndex(IdList*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4030: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "4031:   void sqlite3ComputeStoredColumns(Parse*, int, Table*);",
          "4032: #endif",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "671:   for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "672:     if( i==pTab->iPKey ){",
          "673:       sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "676:     }else{",
          "677:       j = aXRef[i];",
          "678:       if( j>=0 ){",
          "",
          "[Removed Lines]",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "675:       k--;",
          "",
          "[Added Lines]",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)!=0 ){",
          "675:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) k--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:       }",
          "692:     }",
          "693:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "695:   if( pTab->tabFlags & TF_HasStored ){",
          "696:     sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "697:   }",
          "698: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:     for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "729:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "730:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "731:       }",
          "732:     }",
          "733:   }",
          "735:   if( !isView ){",
          "",
          "[Removed Lines]",
          "727:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "728:         k--;",
          "",
          "[Added Lines]",
          "732:       if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "733:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) k--;",
          "738: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "739:     if( pTab->tabFlags & TF_HasStored ){",
          "740:       sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "741:     }",
          "742: #endif",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:       rc = SQLITE_ERROR;",
          "625:     }else{",
          "626:       int iCol;",
          "",
          "[Removed Lines]",
          "627:       u8 oooHidden = 0;",
          "",
          "[Added Lines]",
          "627:       u16 oooHidden = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}