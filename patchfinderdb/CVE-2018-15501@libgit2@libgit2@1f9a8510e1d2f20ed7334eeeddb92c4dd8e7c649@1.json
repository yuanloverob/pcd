{
  "cve_id": "CVE-2018-15501",
  "cve_desc": "In ng_pkt in transports/smart_pkt.c in libgit2 before 0.26.6 and 0.27.x before 0.27.4, a remote attacker can send a crafted smart-protocol \"ng\" packet that lacks a '\\0' byte to trigger an out-of-bounds read that leads to DoS.",
  "repo": "libgit2/libgit2",
  "patch_hash": "1f9a8510e1d2f20ed7334eeeddb92c4dd8e7c649",
  "patch_info": {
    "commit_hash": "1f9a8510e1d2f20ed7334eeeddb92c4dd8e7c649",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/1f9a8510e1d2f20ed7334eeeddb92c4dd8e7c649",
    "files": [
      "src/transports/smart_pkt.c"
    ],
    "message": "smart_pkt: fix potential OOB-read when processing ng packet\n\nOSS-fuzz has reported a potential out-of-bounds read when processing a\n\"ng\" smart packet:\n\n==1==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6310000249c0 at pc 0x000000493a92 bp 0x7ffddc882cd0 sp 0x7ffddc882480\n\tREAD of size 65529 at 0x6310000249c0 thread T0\n\tSCARINESS: 26 (multi-byte-read-heap-buffer-overflow)\n\t#0 0x493a91 in __interceptor_strchr.part.35 /src/llvm/projects/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:673\n\t#1 0x813960 in ng_pkt libgit2/src/transports/smart_pkt.c:320:14\n\t#2 0x810f79 in git_pkt_parse_line libgit2/src/transports/smart_pkt.c:478:9\n\t#3 0x82c3c9 in git_smart__store_refs libgit2/src/transports/smart_protocol.c:47:12\n\t#4 0x6373a2 in git_smart__connect libgit2/src/transports/smart.c:251:15\n\t#5 0x57688f in git_remote_connect libgit2/src/remote.c:708:15\n\t#6 0x52e59b in LLVMFuzzerTestOneInput /src/download_refs_fuzzer.cc:145:9\n\t#7 0x52ef3f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5\n\t#8 0x52f4ee in main /src/libfuzzer/afl/afl_driver.cpp:339:12\n\t#9 0x7f6c910db82f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/libc-start.c:291\n\t#10 0x41d518 in _start\n\nWhen parsing an \"ng\" packet, we keep track of both the current position\nas well as the remaining length of the packet itself. But instead of\ntaking care not to exceed the length, we pass the current pointer's\nposition to `strchr`, which will search for a certain character until\nhitting NUL. It is thus possible to create a crafted packet which\ndoesn't contain a NUL byte to trigger an out-of-bounds read.\n\nFix the issue by instead using `memchr`, passing the remaining length as\nrestriction. Furthermore, verify that we actually have enough bytes left\nto produce a match at all.\n\nOSS-Fuzz-Issue: 9406",
    "before_after_code_files": [
      "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
    ]
  },
  "patch_diff": {
    "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
      "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "299:  pkt->ref = NULL;",
      "300:  pkt->type = GIT_PKT_NG;",
      "304:   goto out_err;",
      "305:  len = ptr - line;",
      "",
      "[Removed Lines]",
      "303:  if (!(ptr = strchr(line, ' ')))",
      "",
      "[Added Lines]",
      "302:  if (len < 3)",
      "303:   goto out_err;",
      "305:  len -= 3;",
      "306:  if (!(ptr = memchr(line, ' ', len)))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "311:  memcpy(pkt->ref, line, len);",
      "312:  pkt->ref[len] = '\\0';",
      "314:  line = ptr + 1;",
      "316:   goto out_err;",
      "317:  len = ptr - line;",
      "",
      "[Removed Lines]",
      "315:  if (!(ptr = strchr(line, '\\n')))",
      "",
      "[Added Lines]",
      "317:  if (len < 1)",
      "318:   goto out_err;",
      "320:  len -= 1;",
      "321:  if (!(ptr = memchr(line, '\\n', len)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "50705a2aa6f596d51e0ae1c5b2a616f8e71d1743",
      "candidate_info": {
        "commit_hash": "50705a2aa6f596d51e0ae1c5b2a616f8e71d1743",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/50705a2aa6f596d51e0ae1c5b2a616f8e71d1743",
        "files": [
          "src/transports/smart_pkt.c"
        ],
        "message": "smart_pkt: fix potential OOB-read when processing ng packet\n\nOSS-fuzz has reported a potential out-of-bounds read when processing a\n\"ng\" smart packet:\n\n==1==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6310000249c0 at pc 0x000000493a92 bp 0x7ffddc882cd0 sp 0x7ffddc882480\n\tREAD of size 65529 at 0x6310000249c0 thread T0\n\tSCARINESS: 26 (multi-byte-read-heap-buffer-overflow)\n\t#0 0x493a91 in __interceptor_strchr.part.35 /src/llvm/projects/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:673\n\t#1 0x813960 in ng_pkt libgit2/src/transports/smart_pkt.c:320:14\n\t#2 0x810f79 in git_pkt_parse_line libgit2/src/transports/smart_pkt.c:478:9\n\t#3 0x82c3c9 in git_smart__store_refs libgit2/src/transports/smart_protocol.c:47:12\n\t#4 0x6373a2 in git_smart__connect libgit2/src/transports/smart.c:251:15\n\t#5 0x57688f in git_remote_connect libgit2/src/remote.c:708:15\n\t#6 0x52e59b in LLVMFuzzerTestOneInput /src/download_refs_fuzzer.cc:145:9\n\t#7 0x52ef3f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5\n\t#8 0x52f4ee in main /src/libfuzzer/afl/afl_driver.cpp:339:12\n\t#9 0x7f6c910db82f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/libc-start.c:291\n\t#10 0x41d518 in _start\n\nWhen parsing an \"ng\" packet, we keep track of both the current position\nas well as the remaining length of the packet itself. But instead of\ntaking care not to exceed the length, we pass the current pointer's\nposition to `strchr`, which will search for a certain character until\nhitting NUL. It is thus possible to create a crafted packet which\ndoesn't contain a NUL byte to trigger an out-of-bounds read.\n\nFix the issue by instead using `memchr`, passing the remaining length as\nrestriction. Furthermore, verify that we actually have enough bytes left\nto produce a match at all.\n\nOSS-Fuzz-Issue: 9406",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ],
          "candidate": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:  pkt->ref = NULL;",
          "300:  pkt->type = GIT_PKT_NG;",
          "304:   goto out_err;",
          "305:  len = ptr - line;",
          "",
          "[Removed Lines]",
          "303:  if (!(ptr = strchr(line, ' ')))",
          "",
          "[Added Lines]",
          "302:  if (len < 3)",
          "303:   goto out_err;",
          "305:  len -= 3;",
          "306:  if (!(ptr = memchr(line, ' ', len)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311:  memcpy(pkt->ref, line, len);",
          "312:  pkt->ref[len] = '\\0';",
          "314:  line = ptr + 1;",
          "316:   goto out_err;",
          "317:  len = ptr - line;",
          "",
          "[Removed Lines]",
          "315:  if (!(ptr = strchr(line, '\\n')))",
          "",
          "[Added Lines]",
          "317:  if (len < 1)",
          "318:   goto out_err;",
          "320:  len -= 1;",
          "321:  if (!(ptr = memchr(line, '\\n', len)))",
          "",
          "---------------"
        ]
      }
    }
  ]
}