{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69a66a7be12600547ab1a91c83995fa6bd6375fd",
      "candidate_info": {
        "commit_hash": "69a66a7be12600547ab1a91c83995fa6bd6375fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69a66a7be12600547ab1a91c83995fa6bd6375fd",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Include OPTS in the build of dbfuzz2.\n\nFossilOrigin-Name: eac9c0c49650b008951318a2225b932709a0a8dffbb01ed57684c40357b2e25c",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:   -DSQLITE_EANBLE_FTS5",
          "687: dbfuzz2: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "689:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c",
          "690:  mkdir -p dbfuzz2-dir",
          "691:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "",
          "[Removed Lines]",
          "688:  clang-6.0 -I. -g -O0 -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "[Added Lines]",
          "688:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "689:   -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54231ac4ca506e6c34c31bc02bb8d3db22f14e1b01679bc70529b165d7dabb83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "909f78cbd8a80b5c26668f5acfe81220e52cb374",
      "candidate_info": {
        "commit_hash": "909f78cbd8a80b5c26668f5acfe81220e52cb374",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/909f78cbd8a80b5c26668f5acfe81220e52cb374",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/attach.test",
          "test/indexexpr2.test",
          "test/pragma4.test"
        ],
        "message": "Update some test cases to account for SQLITE_OMIT_VIRTUAL_TABLE builds.\n\nFossilOrigin-Name: b53a9a3dc6b0422a102b245451769b0cd8c0d67090fefabf7cb3a65137a73771",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/attach.test||test/attach.test",
          "test/indexexpr2.test||test/indexexpr2.test",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c040fdb013d178e5dffa300621eab91b92beb085ffb9ef2ba08f6bf1dd4013e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/attach.test||test/attach.test": [
          "File: test/attach.test -> test/attach.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "726:     } db2",
          "727:   } {1 {trigger r5 cannot reference objects in database temp}}",
          "728: } ;# endif subquery",
          "730:   do_test attach-5.10 {",
          "731:     db close",
          "732:     catch {db2 close}",
          "",
          "[Removed Lines]",
          "729: ifcapable json1 {",
          "",
          "[Added Lines]",
          "729: ifcapable json1&&vtab {",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: # Additional test cases to show that UPDATE does not modify indexes that",
          "202: # do not involve unchanged columns.",
          "203: #",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "204: load_static_extension db explain",
          "205: do_execsql_test 4.200 {",
          "206:   CREATE TABLE t2(a,b,c,d,e,f);",
          "207:   INSERT INTO t2 VALUES(2,3,4,5,6,7);",
          "208:   CREATE INDEX t2abc ON t2(a+b+c);",
          "209:   CREATE INDEX t2cd ON t2(c*d);",
          "210:   CREATE INDEX t2def ON t2(d,e+25*f);",
          "211:   SELECT sqlite_master.name",
          "212:     FROM sqlite_master, explain('UPDATE t2 SET b=b+1')",
          "213:    WHERE explain.opcode LIKE 'Open%'",
          "214:      AND sqlite_master.rootpage=explain.p2",
          "215:    ORDER BY 1;",
          "216: } {t2 t2abc}",
          "217: do_execsql_test 4.210 {",
          "218:   SELECT sqlite_master.name",
          "219:     FROM sqlite_master, explain('UPDATE t2 SET c=c+1')",
          "220:    WHERE explain.opcode LIKE 'Open%'",
          "221:      AND sqlite_master.rootpage=explain.p2",
          "222:    ORDER BY 1;",
          "223: } {t2 t2abc t2cd}",
          "224: do_execsql_test 4.220 {",
          "225:   SELECT sqlite_master.name",
          "226:     FROM sqlite_master, explain('UPDATE t2 SET c=c+1, f=NULL')",
          "227:    WHERE explain.opcode LIKE 'Open%'",
          "228:      AND sqlite_master.rootpage=explain.p2",
          "229:    ORDER BY 1;",
          "230: } {t2 t2abc t2cd t2def}",
          "",
          "[Added Lines]",
          "204: ifcapable vtab {",
          "205:   load_static_extension db explain",
          "206:   do_execsql_test 4.200 {",
          "207:     CREATE TABLE t2(a,b,c,d,e,f);",
          "208:     INSERT INTO t2 VALUES(2,3,4,5,6,7);",
          "209:     CREATE INDEX t2abc ON t2(a+b+c);",
          "210:     CREATE INDEX t2cd ON t2(c*d);",
          "211:     CREATE INDEX t2def ON t2(d,e+25*f);",
          "212:     SELECT sqlite_master.name",
          "213:       FROM sqlite_master, explain('UPDATE t2 SET b=b+1')",
          "214:      WHERE explain.opcode LIKE 'Open%'",
          "215:        AND sqlite_master.rootpage=explain.p2",
          "216:      ORDER BY 1;",
          "217:   } {t2 t2abc}",
          "218:   do_execsql_test 4.210 {",
          "219:     SELECT sqlite_master.name",
          "220:       FROM sqlite_master, explain('UPDATE t2 SET c=c+1')",
          "221:      WHERE explain.opcode LIKE 'Open%'",
          "222:        AND sqlite_master.rootpage=explain.p2",
          "223:      ORDER BY 1;",
          "224:   } {t2 t2abc t2cd}",
          "225:   do_execsql_test 4.220 {",
          "226:     SELECT sqlite_master.name",
          "227:       FROM sqlite_master, explain('UPDATE t2 SET c=c+1, f=NULL')",
          "228:      WHERE explain.opcode LIKE 'Open%'",
          "229:        AND sqlite_master.rootpage=explain.p2",
          "230:      ORDER BY 1;",
          "231:   } {t2 t2abc t2cd t2def}",
          "232: }",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   ATTACH 'test.db2' AS aux;",
          "135:   CREATE TABLE aux.t2(d, e, f);",
          "136: }",
          "142: }",
          "143: do_test 4.2.4 {",
          "144:   sqlite3 db3 test.db",
          "",
          "[Removed Lines]",
          "137: do_execsql_test 4.2.2 { SELECT * FROM pragma_table_info('t1') } {",
          "138:   0 a {} 0 {} 0 1 b {} 0 {} 0 2 c {} 0 {} 0",
          "139: }",
          "140: do_execsql_test 4.2.3 { SELECT * FROM pragma_table_info('t2') } {",
          "141:   0 d {} 0 {} 0 1 e {} 0 {} 0 2 f {} 0 {} 0",
          "",
          "[Added Lines]",
          "137: ifcapable vtab {",
          "138:   do_execsql_test 4.2.2 { SELECT * FROM pragma_table_info('t1') } {",
          "139:     0 a {} 0 {} 0 1 b {} 0 {} 0 2 c {} 0 {} 0",
          "140:   }",
          "141:   do_execsql_test 4.2.3 { SELECT * FROM pragma_table_info('t2') } {",
          "142:     0 d {} 0 {} 0 1 e {} 0 {} 0 2 f {} 0 {} 0",
          "143:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   execsql { DROP TABLE t1 } db3",
          "147:   execsql { DROP TABLE t2 } db2",
          "148: } {}",
          "152: db2 close",
          "153: db3 close",
          "",
          "[Removed Lines]",
          "149: do_execsql_test 4.2.5 { SELECT * FROM pragma_table_info('t1') }",
          "150: do_execsql_test 4.2.6 { SELECT * FROM pragma_table_info('t2') }",
          "",
          "[Added Lines]",
          "151: ifcapable vtab {",
          "152:   do_execsql_test 4.2.5 { SELECT * FROM pragma_table_info('t1') }",
          "153:   do_execsql_test 4.2.6 { SELECT * FROM pragma_table_info('t2') }",
          "154: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:   CREATE TABLE aux.t2(d, e, f);",
          "161:   CREATE INDEX aux.i2 ON t2(e);",
          "162: }",
          "165: do_test 4.3.4 {",
          "166:   sqlite3 db3 test.db",
          "167:   sqlite3 db2 test.db2",
          "168:   execsql { DROP INDEX i1 } db3",
          "169:   execsql { DROP INDEX i2 } db2",
          "170: } {}",
          "174: do_execsql_test 4.4.0 {",
          "175:   CREATE INDEX main.i1 ON t1(b, c);",
          "176:   CREATE INDEX aux.i2 ON t2(e, f);",
          "177: }",
          "180: do_test 4.4.3 {",
          "181:   execsql { DROP INDEX i1 } db3",
          "182:   execsql { DROP INDEX i2 } db2",
          "183: } {}",
          "187: do_execsql_test 4.5.0 {",
          "188:   CREATE UNIQUE INDEX main.i1 ON t1(a);",
          "",
          "[Removed Lines]",
          "163: do_execsql_test 4.3.2 { SELECT * FROM pragma_index_info('i1') } {0 1 b}",
          "164: do_execsql_test 4.3.3 { SELECT * FROM pragma_index_info('i2') } {0 1 e}",
          "171: do_execsql_test 4.3.5 { SELECT * FROM pragma_index_info('i1') }",
          "172: do_execsql_test 4.3.6 { SELECT * FROM pragma_index_info('i2') }",
          "178: do_execsql_test 4.4.1 { SELECT * FROM pragma_index_list('t1') } {0 i1 0 c 0}",
          "179: do_execsql_test 4.4.2 { SELECT * FROM pragma_index_list('t2') } {0 i2 0 c 0}",
          "184: do_execsql_test 4.4.5 { SELECT * FROM pragma_index_list('t1') } {}",
          "185: do_execsql_test 4.4.6 { SELECT * FROM pragma_index_list('t2') } {}",
          "",
          "[Added Lines]",
          "167: ifcapable vtab {",
          "168:   do_execsql_test 4.3.2 { SELECT * FROM pragma_index_info('i1') } {0 1 b}",
          "169:   do_execsql_test 4.3.3 { SELECT * FROM pragma_index_info('i2') } {0 1 e}",
          "170: }",
          "177: ifcapable vtab {",
          "178:   do_execsql_test 4.3.5 { SELECT * FROM pragma_index_info('i1') }",
          "179:   do_execsql_test 4.3.6 { SELECT * FROM pragma_index_info('i2') }",
          "180: }",
          "182: execsql {SELECT * FROM main.sqlite_master, aux.sqlite_master}",
          "187: ifcapable vtab {",
          "188:   do_execsql_test 4.4.1 { SELECT * FROM pragma_index_list('t1') } {0 i1 0 c 0}",
          "189:   do_execsql_test 4.4.2 { SELECT * FROM pragma_index_list('t2') } {0 i2 0 c 0}",
          "190: }",
          "195: ifcapable vtab {",
          "196:   do_execsql_test 4.4.5 { SELECT * FROM pragma_index_list('t1') } {}",
          "197:   do_execsql_test 4.4.6 { SELECT * FROM pragma_index_list('t2') } {}",
          "198: }",
          "199: execsql {SELECT * FROM main.sqlite_master, aux.sqlite_master}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:   CREATE TABLE main.c1 (a, b, c REFERENCES t1(a));",
          "191:   CREATE TABLE aux.c2 (d, e, r REFERENCES t2(d));",
          "192: }",
          "198: }",
          "199: do_test 4.5.3 {",
          "200:   execsql { DROP TABLE c1 } db3",
          "201:   execsql { DROP TABLE c2 } db2",
          "202: } {}",
          "206: do_execsql_test 4.6.0 {",
          "207:   CREATE TABLE main.c1 (a, b, c REFERENCES t1(a));",
          "",
          "[Removed Lines]",
          "193: do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') } {",
          "194:   0 0 t1 c a {NO ACTION} {NO ACTION} NONE",
          "195: }",
          "196: do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') } {",
          "197:   0 0 t2 r d {NO ACTION} {NO ACTION} NONE",
          "203: do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') }",
          "204: do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') }",
          "",
          "[Added Lines]",
          "207: ifcapable vtab {",
          "208:   do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') } {",
          "209:     0 0 t1 c a {NO ACTION} {NO ACTION} NONE",
          "210:   }",
          "211:   do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') } {",
          "212:     0 0 t2 r d {NO ACTION} {NO ACTION} NONE",
          "213:   }",
          "219: ifcapable vtab {",
          "220:   do_execsql_test 4.5.4 { SELECT * FROM pragma_foreign_key_list('c1') }",
          "221:   do_execsql_test 4.5.5 { SELECT * FROM pragma_foreign_key_list('c2') }",
          "222: }",
          "223: execsql {SELECT * FROM main.sqlite_master, aux.sqlite_master}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
      "candidate_info": {
        "commit_hash": "6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c"
        ],
        "message": "This is part of the previous check-in that didn't get committed for some reason - probably because I failed to press the \"Save\" button on the text editor.\n\nFossilOrigin-Name: 51d32173ff1f610b5d75a50f20fa1e0e4e22046299869e3b82e0bb446dba890c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30392985612c51d4583a905f8fe766f08cd31b86d0e30a977adc6a6705649e00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:           zNew[iTo++] = zNew[iFrom];",
          "263:         }",
          "264:         zNew[iTo] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:         assert( iTo>0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || zNew[0]=='+'",
          "282:         ){",
          "283:           if( pLeft->op!=TK_COLUMN",
          "284:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "",
          "[Removed Lines]",
          "281:          || (iTo>0 && zNew[iTo-1]=='0'-1)",
          "",
          "[Added Lines]",
          "282:          || zNew[iTo-1]=='0'-1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ad1251a60ae792b58de473a0bd22e67224ea3ec",
      "candidate_info": {
        "commit_hash": "5ad1251a60ae792b58de473a0bd22e67224ea3ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5ad1251a60ae792b58de473a0bd22e67224ea3ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved debugging output from the OP_MakeRecord opcode.\n\nFossilOrigin-Name: ac790729d9c8f8612936bab56dca6061408007bc2150ac8c7089132403d7f885",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5cd728fb6b3a70f795306d4d6e12151a4de327f801733a8558139e3cd76fe66a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2882:   if( zAffinity ){",
          "2883:     pRec = pData0;",
          "2884:     do{",
          "2886:       assert( zAffinity[0]==0 || pRec<=pLast );",
          "2887:     }while( zAffinity[0] );",
          "2888:   }",
          "",
          "[Removed Lines]",
          "2885:       applyAffinity(pRec++, *(zAffinity++), encoding);",
          "",
          "[Added Lines]",
          "2885:       applyAffinity(pRec, zAffinity[0], encoding);",
          "2886:       REGISTER_TRACE((int)(pRec-aMem), pRec);",
          "2887:       zAffinity++;",
          "2888:       pRec++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
      "candidate_info": {
        "commit_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe9a832e806ea2796a8f362f21168725c610687b",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json104.test"
        ],
        "message": "Fix a problem with handling with handling quoted path elements in extension functions json_set() and json_insert() reported on the mailing list.\n\nFossilOrigin-Name: 45bfcb88e71451a656982e217375e257fc8e68374349c2984be1266bf86fb8cf",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json104.test||test/json104.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:       u32 iStart, iLabel;",
          "1124:       JsonNode *pNode;",
          "1125:       iStart = jsonParseAddNode(pParse, JSON_OBJECT, 2, 0);",
          "1127:       zPath += i;",
          "1128:       pNode = jsonLookupAppend(pParse, zPath, pApnd, pzErr);",
          "1129:       if( pParse->oom ) return 0;",
          "",
          "[Removed Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, i, zPath);",
          "",
          "[Added Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, nKey, zKey);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a61db8ff6713d66778a0500ca4049229c081a3ae95991f05eba09729434444b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json104.test||test/json104.test": [
          "File: test/json104.test -> test/json104.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !json1 {",
          "18:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: set testprefix json104",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   SELECT json_patch('{}','{\"a\":{\"bb\":{\"ccc\":null}}}');",
          "126: } {{{\"a\":{\"bb\":{}}}}}",
          "130: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: #-------------------------------------------------------------------------",
          "131: do_execsql_test 401 {",
          "132:   CREATE TABLE obj(x);",
          "133:   INSERT INTO obj VALUES('{\"a\":1,\"b\":2}');",
          "134:   SELECT * FROM obj;",
          "135: } {{{\"a\":1,\"b\":2}}}",
          "136: do_execsql_test 402 {",
          "137:   UPDATE obj SET x = json_insert(x, '$.c', 3);",
          "138:   SELECT * FROM obj;",
          "139: } {{{\"a\":1,\"b\":2,\"c\":3}}}",
          "140: do_execsql_test 403 {",
          "141:   SELECT json_extract(x, '$.b') FROM obj;",
          "142:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "143: } {2 2}",
          "144: do_execsql_test 404 {",
          "145:   UPDATE obj SET x = json_set(x, '$.\"b\"', 555);",
          "146:   SELECT json_extract(x, '$.b') FROM obj;",
          "147:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "148: } {555 555}",
          "149: do_execsql_test 405 {",
          "150:   UPDATE obj SET x = json_set(x, '$.\"d\"', 4);",
          "151:   SELECT json_extract(x, '$.\"d\"') FROM obj;",
          "152: } {4}",
          "",
          "---------------"
        ]
      }
    }
  ]
}