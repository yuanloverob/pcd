{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
      "candidate_info": {
        "commit_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a NEVER() comparison from sqlite3ExprCompare().\n\nFossilOrigin-Name: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e1ba9145049491c593ac70d9e05149662d34770129c270d702f284cd19a481",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5030:     ){",
          "5031:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op2!=pB->op2 ) return 2;",
          "5036:     }",
          "5037:   }",
          "5038:   return 0;",
          "",
          "[Removed Lines]",
          "5033:       if( pA->op!=TK_IN",
          "5034:        && pA->iTable!=pB->iTable",
          "5035:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "",
          "[Added Lines]",
          "5033:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5034:         return 2;",
          "5035:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
      "candidate_info": {
        "commit_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ded26a53c4df312e9fd06facbbf70377e969983",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Prevent aliases of window functions expressions from being used as arguments to aggregate or other window functions.\n\nFossilOrigin-Name: 1e16d3e8fc60d39ca3899759ff15d355fdd7d3e23b325d8d2b0f954e11ce8dce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ae70ad2ffd36c27b154940126c5e3ed00c05c0d8761d9320a65a03b1b4e4dc6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:             sqlite3ErrorMsg(pParse, \"misuse of aliased aggregate %s\", zAs);",
          "436:             return WRC_Abort;",
          "437:           }",
          "438:           if( sqlite3ExprVectorSize(pOrig)!=1 ){",
          "439:             sqlite3ErrorMsg(pParse, \"row value misused\");",
          "440:             return WRC_Abort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:           if( (pNC->ncFlags&NC_AllowWin)==0 && ExprHasProperty(pOrig, EP_Win) ){",
          "439:             sqlite3ErrorMsg(pParse, \"misuse of aliased window function %s\",zAs);",
          "440:             return WRC_Abort;",
          "441:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "730:       zId = pExpr->u.zToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:           pNC->nErr++;",
          "847:         }",
          "848:         if( is_agg ){",
          "849: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "851: #else",
          "852:           pNC->ncFlags &= ~NC_AllowAgg;",
          "853: #endif",
          "",
          "[Removed Lines]",
          "850:           pNC->ncFlags &= ~(pExpr->y.pWin ? NC_AllowWin : NC_AllowAgg);",
          "",
          "[Added Lines]",
          "858:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "868:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "869:             pSel->pWin = pExpr->y.pWin;",
          "870:           }",
          "872:         }else",
          "874:         {",
          "",
          "[Removed Lines]",
          "871:           pNC->ncFlags |= NC_AllowWin;",
          "",
          "[Added Lines]",
          "879:           pNC->ncFlags |= NC_HasWin;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "886:             pNC2->ncFlags |= NC_HasAgg | (pDef->funcFlags & SQLITE_FUNC_MINMAX);",
          "888:           }",
          "890:         }",
          "891:       }",
          "",
          "[Removed Lines]",
          "889:           pNC->ncFlags |= NC_AllowAgg;",
          "",
          "[Added Lines]",
          "898:         pNC->ncFlags |= savedAllowFlags;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1648:   Walker w;",
          "1650:   if( pExpr==0 ) return SQLITE_OK;",
          "1653:   w.pParse = pNC->pParse;",
          "1654:   w.xExprCallback = resolveExprStep;",
          "1655:   w.xSelectCallback = resolveSelectStep;",
          "",
          "[Removed Lines]",
          "1651:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg);",
          "1652:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg);",
          "",
          "[Added Lines]",
          "1659:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1660:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1668:   if( pNC->ncFlags & NC_HasAgg ){",
          "1669:     ExprSetProperty(pExpr, EP_Agg);",
          "1670:   }",
          "1671:   pNC->ncFlags |= savedHasAgg;",
          "1672:   return pNC->nErr>0 || w.pParse->nErr>0;",
          "1673: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:   if( pNC->ncFlags & NC_HasWin ){",
          "1680:     ExprSetProperty(pExpr, EP_Win);",
          "1681:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   ) FROM t1 ORDER BY 1",
          "48:   \"",
          "49: }",
          "51: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: errorsql_test 2.1 {",
          "51:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "52: }",
          "54: errorsql_test 2.2 {",
          "55:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "56: }",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   ) FROM t1 ORDER BY 1",
          "87: } } } 1",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: # PG says ERROR:  aggregate function calls cannot contain window function calls",
          "90: do_test 2.1 { catch { execsql {",
          "91:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "92: } } } 1",
          "94: # PG says ERROR:  column \"xyz\" does not exist",
          "95: do_test 2.2 { catch { execsql {",
          "96:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "97: } } } 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
      "candidate_info": {
        "commit_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13d04020775b10b252029455d2b8dcfcf49a47e4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/cast.test"
        ],
        "message": "As a special case, casting '-0.0' into numeric should yield 0. Fix for ticket [674385aeba91c774].\n\nFossilOrigin-Name: 491f0f9bbddb6302536d99abd1ea481fd747ddcf6c6eaaacc0338d147b119081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c6146b56a75a94f4baa10e95407c54dd0b9314a57a8702a4b96b15c4d7ac48c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "704: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i >= -2251799813685248 && i < 2251799813685248;",
          "",
          "[Added Lines]",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   execsql {SELECT CAST('123.5abc' AS integer)}",
          "184: } 123",
          "187:   execsql {SELECT CAST(null AS REAL)}",
          "188: } {{}}",
          "190:   execsql {SELECT typeof(CAST(null AS REAL))}",
          "191: } {null}",
          "193:   execsql {SELECT CAST(1 AS REAL)}",
          "194: } {1.0}",
          "196:   execsql {SELECT typeof(CAST(1 AS REAL))}",
          "197: } {real}",
          "199:   execsql {SELECT CAST('1' AS REAL)}",
          "200: } {1.0}",
          "202:   execsql {SELECT typeof(CAST('1' AS REAL))}",
          "203: } {real}",
          "205:   execsql {SELECT CAST('abc' AS REAL)}",
          "206: } {0.0}",
          "208:   execsql {SELECT typeof(CAST('abc' AS REAL))}",
          "209: } {real}",
          "211:   execsql {SELECT CAST(x'31' AS REAL)}",
          "212: } {1.0}",
          "214:   execsql {SELECT typeof(CAST(x'31' AS REAL))}",
          "215: } {real}",
          "",
          "[Removed Lines]",
          "186: do_test case-1.60 {",
          "189: do_test case-1.61 {",
          "192: do_test case-1.62 {",
          "195: do_test case-1.63 {",
          "198: do_test case-1.64 {",
          "201: do_test case-1.65 {",
          "204: do_test case-1.66 {",
          "207: do_test case-1.67 {",
          "210: do_test case-1.68 {",
          "213: do_test case-1.69 {",
          "",
          "[Added Lines]",
          "186: do_test cast-1.60 {",
          "189: do_test cast-1.61 {",
          "192: do_test cast-1.62 {",
          "195: do_test cast-1.63 {",
          "198: do_test cast-1.64 {",
          "201: do_test cast-1.65 {",
          "204: do_test cast-1.66 {",
          "207: do_test cast-1.67 {",
          "210: do_test cast-1.68 {",
          "213: do_test cast-1.69 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     } 9223372036854774784",
          "300:   }",
          "301: }",
          "303:   execsql {SELECT CAST(NULL AS numeric)}",
          "304: } {{}}",
          "",
          "[Removed Lines]",
          "302: do_test case-3.31 {",
          "",
          "[Added Lines]",
          "302: do_test cast-3.31 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368: # ignored because it is no part of the integer prefix.",
          "369: # EVIDENCE-OF: R-24225-46995 For example, \"(CAST '123e+5' AS INTEGER)\"",
          "370: # results in 123, not in 12300000.",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "",
          "[Removed Lines]",
          "371: do_execsql_test case-5.3 {",
          "",
          "[Added Lines]",
          "371: do_execsql_test cast-5.3 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378: # The following does not have anything to do with the CAST operator,",
          "379: # but it does deal with affinity transformations.",
          "380: #",
          "382:   DROP TABLE IF EXISTS t1;",
          "383:   CREATE TABLE t1(a NUMERIC);",
          "384:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "381: do_execsql_test case-6.1 {",
          "",
          "[Added Lines]",
          "381: do_execsql_test cast-6.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392: # 2019-06-07",
          "393: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "395:   SELECT CAST('-' AS NUMERIC);",
          "396: } {0}",
          "398:   SELECT CAST('-0' AS NUMERIC);",
          "399: } {0}",
          "401:   SELECT CAST('+' AS NUMERIC);",
          "402: } {0}",
          "404:   SELECT CAST('/' AS NUMERIC);",
          "405: } {0}",
          "407: # 2019-06-07",
          "408: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "410:   SELECT '' - 2851427734582196970;",
          "411: } {-2851427734582196970}",
          "413:   SELECT 0 - 2851427734582196970;",
          "414: } {-2851427734582196970}",
          "416:   SELECT '' - 1;",
          "417: } {-1}",
          "",
          "[Removed Lines]",
          "394: do_execsql_test case-7.1 {",
          "397: do_execsql_test case-7.2 {",
          "400: do_execsql_test case-7.3 {",
          "403: do_execsql_test case-7.4 {",
          "409: do_execsql_test case-7.10 {",
          "412: do_execsql_test case-7.11 {",
          "415: do_execsql_test case-7.12 {",
          "",
          "[Added Lines]",
          "394: do_execsql_test cast-7.1 {",
          "397: do_execsql_test cast-7.2 {",
          "400: do_execsql_test cast-7.3 {",
          "403: do_execsql_test cast-7.4 {",
          "409: do_execsql_test cast-7.10 {",
          "412: do_execsql_test cast-7.11 {",
          "415: do_execsql_test cast-7.12 {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "447:   SELECT -CAST('.' AS numeric);",
          "448: } 0",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450: # 2019-06-12",
          "451: # https://www.sqlite.org/src/info/674385aeba91c774",
          "452: #",
          "453: do_execsql_test cast-7.40 {",
          "454:   SELECT CAST('-0.0' AS numeric);",
          "455: } 0",
          "456: do_execsql_test cast-7.41 {",
          "457:   SELECT CAST('0.0' AS numeric);",
          "458: } 0",
          "459: do_execsql_test cast-7.42 {",
          "460:   SELECT CAST('+0.0' AS numeric);",
          "461: } 0",
          "462: do_execsql_test cast-7.43 {",
          "463:   SELECT CAST('-1.0' AS numeric);",
          "464: } -1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
      "candidate_info": {
        "commit_hash": "a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the \".recover\" output in the shell to use double-quotes around table and column identifiers.\n\nFossilOrigin-Name: 846d2d2d2f7fd2e4178c70bc2b92f18941a7972fe88c0129035b7a253ed21785",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bfc29e62eff0ed00c153e18a27815f7e3ba316f46871e9645b84ab1e6709a392",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3977:   }",
          "3978: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3984: static void shellIdQuote(",
          "3985:   sqlite3_context *context,",
          "3986:   int argc,",
          "3987:   sqlite3_value **argv",
          "3988: ){",
          "3989:   const char *zName = (const char*)sqlite3_value_text(argv[0]);",
          "3990:   if( zName ){",
          "3991:     char *z = sqlite3_mprintf(\"\\\"%w\\\"\", zName);",
          "3992:     sqlite3_result_text(context, z, -1, sqlite3_free);",
          "3993:   }",
          "3994: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4153:                             shellEscapeCrnl, 0, 0);",
          "4154:     sqlite3_create_function(p->db, \"shell_int32\", 2, SQLITE_UTF8, 0,",
          "4155:                             shellInt32, 0, 0);",
          "4156: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4157:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4158:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4172:     sqlite3_create_function(p->db, \"shell_idquote\", 1, SQLITE_UTF8, 0,",
          "4173:                             shellIdQuote, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6330:     sqlite3_stmt *pStmt = 0;",
          "6332:     rc = sqlite3_open(\"\", &dbtmp);",
          "6333:     if( rc==SQLITE_OK ){",
          "6334:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "6335:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6351:     if( rc==SQLITE_OK ){",
          "6352:       sqlite3_create_function(dbtmp, \"shell_idquote\", 1, SQLITE_UTF8, 0,",
          "6353:                               shellIdQuote, 0, 0);",
          "6354:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6386:         }",
          "6387:       }",
          "6390:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));",
          "6391:       pTab->nCol = nSqlCol;",
          "6393:       if( bIntkey ){",
          "6395:       }else{",
          "6396:         pTab->azlCol[0] = shellMPrintf(&rc, \"\");",
          "6397:       }",
          "6398:       i = 1;",
          "6399:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6401:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6402:           \"FROM pragma_table_info(%Q)\",",
          "6403:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "",
          "[Removed Lines]",
          "6389:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", zName);",
          "6394:         pTab->azlCol[0] = shellMPrintf(&rc, \"%Q\", zPk);",
          "6400:           \"SELECT %Q || group_concat(quote(name), ', ') \"",
          "",
          "[Added Lines]",
          "6411:       pTab->zQuoted = shellMPrintf(&rc, \"\\\"%w\\\"\", zName);",
          "6416:         pTab->azlCol[0] = shellMPrintf(&rc, \"\\\"%w\\\"\", zPk);",
          "6422:           \"SELECT %Q || group_concat(shell_idquote(name), ', ') \"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6512:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6513:     if( pTab ){",
          "6515:       pTab->nCol = nCol;",
          "6516:       pTab->iPk = -2;",
          "6517:       if( nCol>0 ){",
          "",
          "[Removed Lines]",
          "6514:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", zTab);",
          "",
          "[Added Lines]",
          "6536:       pTab->zQuoted = shellMPrintf(pRc, \"\\\"%w\\\"\", zTab);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6775:       if( pTab==0 ) break;",
          "6776:     }",
          "6779:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6780:     }",
          "6781:     sqlite3_bind_int(pPages, 1, iRoot);",
          "",
          "[Removed Lines]",
          "6778:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"'sqlite_sequence'\") ){",
          "",
          "[Added Lines]",
          "6800:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"\\\"sqlite_sequence\\\"\") ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
      "candidate_info": {
        "commit_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/window.c"
        ],
        "message": "Change the meaning of the SQLITE_SUBTYPE flag so that it indicates that the user-defined function cares about the subtypes of its arguments.\n\nFossilOrigin-Name: af1bc20f502816db460d2b2d353f715da5cf660e59095de5214c829c1cb20981",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                         SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_SUBTYPE,",
          "2508:                         (void*)&aFunc[i].flag,",
          "2509:                         aFunc[i].xFunc, 0, 0);",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14ef7543465dd14d8fa141fcceb1950b5c2d265a3e862323969d747b39c0cd8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869: }",
          "",
          "[Removed Lines]",
          "875: int exprListContainsSubtype(Parse *pParse, ExprList *pList){",
          "876:   if( pList ){",
          "877:     sqlite3 *db = pParse->db;",
          "878:     int i;",
          "879:     for(i=0; i<pList->nExpr; i++){",
          "880:       Expr *p = pList->a[i].pExpr;",
          "881:       if( p->op==TK_FUNCTION ){",
          "882:         FuncDef *pDef;",
          "883:         int nArg = 0;",
          "884:         if( !ExprHasProperty(p, EP_TokenOnly) && p->x.pList ){",
          "885:           nArg = p->x.pList->nExpr;",
          "886:         }",
          "887:         pDef = sqlite3FindFunction(db, p->u.zToken, nArg, db->enc, 0);",
          "888:         if( pDef && (pDef->funcFlags & SQLITE_FUNC_SUBTYPE) ){",
          "889:           return 1;",
          "890:         }",
          "891:       }",
          "892:     }",
          "893:   }",
          "894:   return 0;",
          "895: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "994:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "996:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "997:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "998:         pWin->bExprArgs = 1;",
          "",
          "[Removed Lines]",
          "995:       if( exprListContainsSubtype(pParse, pArgs) ){",
          "",
          "[Added Lines]",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}