{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59b584c92ddfe26430fdb4756737dd723dbee0b0",
      "candidate_info": {
        "commit_hash": "59b584c92ddfe26430fdb4756737dd723dbee0b0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/59b584c92ddfe26430fdb4756737dd723dbee0b0",
        "files": [
          "src/node.cc"
        ],
        "message": "node: remove PrepareTick() and CheckTick()\n\nSuperfluous after commit 430d94e. Pointed out by Shigeki Ohtsu.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: bool no_deprecation = false;",
          "134: static uv_idle_t tick_spinner;",
          "135: static bool need_tick_cb;",
          "136: static Persistent<String> tick_callback_sym;",
          "",
          "[Removed Lines]",
          "132: static uv_check_t check_tick_watcher;",
          "133: static uv_prepare_t prepare_tick_watcher;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:   uv_idle_start(&tick_spinner, Spin);",
          "274: }",
          "276: static Handle<Value> NeedTickCallback(const Arguments& args) {",
          "277:   StartTickSpinner();",
          "278:   return Undefined();",
          "279: }",
          "294: static inline const char *errno_string(int errorno) {",
          "295: #define ERRNO_CASE(e)  case e: return #e;",
          "",
          "[Removed Lines]",
          "281: static void PrepareTick(uv_prepare_t* handle, int status) {",
          "282:   assert(handle == &prepare_tick_watcher);",
          "283:   assert(status == 0);",
          "284:   Tick();",
          "285: }",
          "288: static void CheckTick(uv_check_t* handle, int status) {",
          "289:   assert(handle == &check_tick_watcher);",
          "290:   assert(status == 0);",
          "291:   Tick();",
          "292: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2764:   RegisterSignalHandler(SIGTERM, SignalExit);",
          "2765: #endif // __POSIX__",
          "2775:   uv_idle_init(uv_default_loop(), &tick_spinner);",
          "2777:   uv_check_init(uv_default_loop(), &gc_check);",
          "",
          "[Removed Lines]",
          "2767:   uv_prepare_init(uv_default_loop(), &prepare_tick_watcher);",
          "2768:   uv_prepare_start(&prepare_tick_watcher, PrepareTick);",
          "2769:   uv_unref(reinterpret_cast<uv_handle_t*>(&prepare_tick_watcher));",
          "2771:   uv_check_init(uv_default_loop(), &check_tick_watcher);",
          "2772:   uv_check_start(&check_tick_watcher, node::CheckTick);",
          "2773:   uv_unref(reinterpret_cast<uv_handle_t*>(&check_tick_watcher));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60b45dcbb66ad754c70693adba80595ae67dc026",
      "candidate_info": {
        "commit_hash": "60b45dcbb66ad754c70693adba80595ae67dc026",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/60b45dcbb66ad754c70693adba80595ae67dc026",
        "files": [
          "doc/api/domain.markdown",
          "test/simple/test-domain-http-server.js"
        ],
        "message": "domain: document and test dispose event",
        "before_after_code_files": [
          "test/simple/test-domain-http-server.js||test/simple/test-domain-http-server.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-domain-http-server.js||test/simple/test-domain-http-server.js": [
          "File: test/simple/test-domain-http-server.js -> test/simple/test-domain-http-server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: objects.baz.asdf = objects;",
          "30: var serverCaught = 0;",
          "33: var server = http.createServer(function(req, res) {",
          "34:   var dom = domain.create();",
          "",
          "[Removed Lines]",
          "31: var clientCaught = 0",
          "",
          "[Added Lines]",
          "31: var clientCaught = 0;",
          "32: var disposeEmit = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:       dom.dispose();",
          "85:     });",
          "87:     var req = http.get({ host: 'localhost', port: common.PORT, path: p });",
          "88:     dom.add(req);",
          "89:     req.on('response', function(res) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     dom.on('dispose', function() {",
          "89:       disposeEmit += 1;",
          "90:     });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111: process.on('exit', function() {",
          "112:   assert.equal(serverCaught, 2);",
          "113:   assert.equal(clientCaught, 2);",
          "114:   console.log('ok');",
          "115: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:   assert.equal(disposeEmit, 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b39929d47f962fccafb4116f3c177ddc4fd3269",
      "candidate_info": {
        "commit_hash": "5b39929d47f962fccafb4116f3c177ddc4fd3269",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5b39929d47f962fccafb4116f3c177ddc4fd3269",
        "files": [
          "doc/node.1",
          "lib/fs.js",
          "lib/http.js",
          "lib/net.js",
          "lib/os.js",
          "lib/path.js",
          "lib/tty.js",
          "lib/util.js",
          "src/node.cc",
          "src/node.js",
          "test/simple/test-deprecation-flags.js"
        ],
        "message": "Add --no-deprecation and --trace-deprecation flags",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "lib/http.js||lihttp.js",
          "lib/net.js||linet.js",
          "lib/os.js||lios.js",
          "lib/path.js||lipath.js",
          "lib/tty.js||litty.js",
          "lib/util.js||liutil.js",
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js",
          "test/simple/test-deprecation-flags.js||test/simple/test-deprecation-flags.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "921:     interval: 5007,",
          "923:   };",
          "925:   if ('object' == typeof arguments[1]) {",
          "",
          "[Removed Lines]",
          "922:     persistent: true,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1831:   return c;",
          "1832: };",
          "1840:   return new Client(port, host);",
          "",
          "[Removed Lines]",
          "1834: exports.Client = Client;",
          "1837: module.deprecate('Client', 'It will be removed soon. Do not use it.');",
          "1839: exports.createClient = function(port, host) {",
          "1841: };",
          "1842: module.deprecate('createClient', 'Use `http.request` instead.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1092: };",
          "1105: Server.prototype._setupSlave = function(socketList) {",
          "",
          "[Removed Lines]",
          "1095: var listenFDwarn = false;",
          "1096: Server.prototype.listenFD = function(fd, type) {",
          "1097:   if (!listenFDwarn) {",
          "1098:     console.error('listenFD is deprecated. Use server.listen()');",
          "1099:     listenFDwarn = true;",
          "1100:   }",
          "1101:   this.listen({ fd: fd });",
          "1102: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/os.js||lios.js": [
          "File: lib/os.js -> lios.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var binding = process.binding('os');",
          "24: exports.hostname = binding.getHostname;",
          "25: exports.loadavg = binding.getLoadAvg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:          (process.platform === 'win32' ? 'c:\\\\windows\\\\temp' : '/tmp');",
          "47: };",
          "50:   return exports.networkInterfaces();",
          "55: exports.EOL = process.platform === 'win32' ? '\\r\\n' : '\\n';",
          "",
          "[Removed Lines]",
          "49: exports.getNetworkInterfaces = function() {",
          "51: };",
          "52: module.deprecate('getNetworkInterfaces',",
          "53:                  'It is now called `os.networkInterfaces`.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/path.js||lipath.js": [
          "File: lib/path.js -> lipath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: var isWindows = process.platform === 'win32';",
          "",
          "[Removed Lines]",
          "24: var _deprecationWarning = require('util')._deprecationWarning;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415: };",
          "419:   require('fs').exists(path, callback);",
          "425:   return require('fs').existsSync(path);",
          "430: if (isWindows) {",
          "",
          "[Removed Lines]",
          "418: exports.exists = function(path, callback) {",
          "420: };",
          "421: module.deprecate('exists', 'It is now called `fs.exists`.');",
          "424: exports.existsSync = function(path) {",
          "426: };",
          "427: module.deprecate('existsSync', 'It is now called `fs.existsSync`.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tty.js||litty.js": [
          "File: lib/tty.js -> litty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var net = require('net');",
          "25: var TTY = process.binding('tty_wrap').TTY;",
          "26: var isTTY = process.binding('tty_wrap').isTTY;",
          "28: exports.isatty = function(fd) {",
          "29:   return isTTY(fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   if (!process.stdin.isTTY) {",
          "36:     throw new Error('can\\'t set raw mode on non-tty');",
          "37:   }",
          "38:   process.stdin.setRawMode(flag);",
          "43: function ReadStream(fd) {",
          "",
          "[Removed Lines]",
          "34: exports.setRawMode = function(flag) {",
          "39: };",
          "40: module.deprecate('setRawMode', 'Use `process.stdin.setRawMode()` instead.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/util.js||liutil.js": [
          "File: lib/util.js -> liutil.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: };",
          "57: exports.print = function() {",
          "58:   for (var i = 0, len = arguments.length; i < len; ++i) {",
          "59:     process.stdout.write(String(arguments[i]));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407: }",
          "411:   for (var i = 0, len = arguments.length; i < len; ++i) {",
          "412:     error(exports.inspect(arguments[i]));",
          "413:   }",
          "418: function pad(n) {",
          "",
          "[Removed Lines]",
          "410: exports.p = function() {",
          "414: };",
          "415: module.deprecate('p', 'Use `util.puts(util.inspect())` instead.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438: };",
          "442:   return require('child_process').exec.apply(this, arguments);",
          "447: exports.pump = function(readStream, writeStream, callback) {",
          "",
          "[Removed Lines]",
          "441: exports.exec = function() {",
          "443: };",
          "444: module.deprecate('exec', 'It is now called `child_process.exec`.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: static bool print_eval = false;",
          "122: static bool force_repl = false;",
          "123: static char *eval_string = NULL;",
          "124: static int option_end_index = 0;",
          "125: static bool use_debug_agent = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: static bool no_deprecation = false;",
          "124: static bool trace_deprecation = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1094:   } else if (strcasecmp(*encoding, \"hex\") == 0) {",
          "1095:     return HEX;",
          "1096:   } else if (strcasecmp(*encoding, \"raw\") == 0) {",
          "1099:     return BINARY;",
          "1100:   } else if (strcasecmp(*encoding, \"raws\") == 0) {",
          "1103:     return BINARY;",
          "1104:   } else {",
          "1105:     return _default;",
          "",
          "[Removed Lines]",
          "1097:     fprintf(stderr, \"'raw' (array of integers) has been removed. \"",
          "1098:                     \"Use 'binary'.\\n\");",
          "1101:     fprintf(stderr, \"'raws' encoding has been renamed to 'binary'. \"",
          "1102:                     \"Please update your code.\\n\");",
          "",
          "[Added Lines]",
          "1099:     if (!no_deprecation) {",
          "1100:       fprintf(stderr, \"'raw' (array of integers) has been removed. \"",
          "1101:                       \"Use 'binary'.\\n\");",
          "1102:     }",
          "1105:     if (!no_deprecation) {",
          "1106:       fprintf(stderr, \"'raws' encoding has been renamed to 'binary'. \"",
          "1107:                       \"Please update your code.\\n\");",
          "1108:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2224:     process->Set(String::NewSymbol(\"_forceRepl\"), True());",
          "2225:   }",
          "2227:   size_t size = 2*PATH_MAX;",
          "2228:   char* execPath = new char[size];",
          "2229:   if (uv_exepath(execPath, &size) != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2234:   if (no_deprecation) {",
          "2235:     process->Set(String::NewSymbol(\"noDeprecation\"), True());",
          "2236:   }",
          "2239:   if (trace_deprecation) {",
          "2240:     process->Set(String::NewSymbol(\"traceDeprecation\"), True());",
          "2241:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2371:          \"  -p, --print          print result of --eval\\n\"",
          "2372:          \"  -i, --interactive    always enter the REPL even if stdin\\n\"",
          "2373:          \"                       does not appear to be a terminal\\n\"",
          "2374:          \"  --v8-options         print v8 command line options\\n\"",
          "2375:          \"  --max-stack-size=val set max v8 stack size (bytes)\\n\"",
          "2376:          \"\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2390:          \"  --no-deprecation     silence deprecation warnings\\n\"",
          "2391:          \"  --trace-deprecation  show stack traces on deprecations\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2428:       argv[i] = const_cast<char*>(\"\");",
          "2429:     } else if (strcmp(arg, \"--v8-options\") == 0) {",
          "2430:       argv[i] = const_cast<char*>(\"--help\");",
          "2431:     } else if (argv[i][0] != '-') {",
          "2432:       break;",
          "2433:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2449:     } else if (strcmp(arg, \"--no-deprecation\") == 0) {",
          "2450:       argv[i] = const_cast<char*>(\"\");",
          "2451:       no_deprecation = true;",
          "2452:     } else if (strcmp(arg, \"--trace-deprecation\") == 0) {",
          "2453:       argv[i] = const_cast<char*>(\"\");",
          "2454:       trace_deprecation = true;",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:     NativeModule._cache[this.id] = this;",
          "601:   };",
          "632:   startup();",
          "633: });",
          "",
          "[Removed Lines]",
          "606:   NativeModule.prototype.deprecate = function(method, message) {",
          "607:     var original = this.exports[method];",
          "608:     var self = this;",
          "609:     var warned = false;",
          "610:     message = message || '';",
          "612:     Object.defineProperty(this.exports, method, {",
          "613:       enumerable: false,",
          "614:       value: function() {",
          "615:         if (!warned) {",
          "616:           warned = true;",
          "617:           message = self.id + '.' + method + ' is deprecated. ' + message;",
          "619:           var moduleIdCheck = new RegExp('\\\\b' + self.id + '\\\\b');",
          "620:           if (moduleIdCheck.test(process.env.NODE_DEBUG))",
          "621:             console.trace(message);",
          "622:           else",
          "623:             console.error(message);",
          "625:           self.exports[method] = original;",
          "626:         }",
          "627:         return original.apply(this, arguments);",
          "628:       }",
          "629:     });",
          "630:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-deprecation-flags.js||test/simple/test-deprecation-flags.js": [
          "File: test/simple/test-deprecation-flags.js -> test/simple/test-deprecation-flags.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var execFile = require('child_process').execFile;",
          "25: var depmod = require.resolve('../fixtures/deprecated.js');",
          "26: var node = process.execPath;",
          "28: var normal = [depmod];",
          "29: var noDep = ['--no-deprecation', depmod];",
          "30: var traceDep = ['--trace-deprecation', depmod];",
          "32: execFile(node, normal, function(er, stdout, stderr) {",
          "33:   console.error('normal: show deprecation warning');",
          "34:   assert.equal(er, null);",
          "35:   assert.equal(stdout, '');",
          "36:   assert.equal(stderr, 'util.p: Use console.error() instead.\\n\\'This is deprecated\\'\\n');",
          "37:   console.log('normal ok');",
          "38: });",
          "40: execFile(node, noDep, function(er, stdout, stderr) {",
          "41:   console.error('--no-deprecation: silence deprecations');",
          "42:   assert.equal(er, null);",
          "43:   assert.equal(stdout, '');",
          "44:   assert.equal(stderr, '\\'This is deprecated\\'\\n');",
          "45:   console.log('silent ok');",
          "46: });",
          "48: execFile(node, traceDep, function(er, stdout, stderr) {",
          "49:   console.error('--trace-deprecation: show stack');",
          "50:   assert.equal(er, null);",
          "51:   assert.equal(stdout, '');",
          "52:   var stack = stderr.trim().split('\\n');",
          "54:   assert.equal(stack[0], 'Trace: util.p: Use console.error() instead.');",
          "55:   assert.equal(stack.pop(), '\\'This is deprecated\\'');",
          "56:   console.log('trace ok');",
          "57: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dec16aa5c2e21de1d0db737f2a08872993c1b2dd",
      "candidate_info": {
        "commit_hash": "dec16aa5c2e21de1d0db737f2a08872993c1b2dd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/dec16aa5c2e21de1d0db737f2a08872993c1b2dd",
        "files": [
          "test/pummel/test-https-ci-reneg-attack.js"
        ],
        "message": "Test client renegotiation attacks on HTTPS\n\nThis test should output roughly the same results as the tls ci-reneg attack\npummel test.  However, it does not.",
        "before_after_code_files": [
          "test/pummel/test-https-ci-reneg-attack.js||test/pummel/test-https-ci-reneg-attack.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-https-ci-reneg-attack.js||test/pummel/test-https-ci-reneg-attack.js": [
          "File: test/pummel/test-https-ci-reneg-attack.js -> test/pummel/test-https-ci-reneg-attack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var spawn = require('child_process').spawn;",
          "25: var tls = require('tls');",
          "26: var https = require('https');",
          "27: var fs = require('fs');",
          "30: var LIMITS = [0, 1, 2, 3, 5, 10, 16];",
          "32: if (process.platform === 'win32') {",
          "33:   console.log('Skipping test, you probably don\\'t have openssl installed.');",
          "34:   process.exit();",
          "35: }",
          "37: (function() {",
          "38:   var n = 0;",
          "39:   function next() {",
          "40:     if (n >= LIMITS.length) return;",
          "41:     tls.CLIENT_RENEG_LIMIT = LIMITS[n++];",
          "42:     test(next);",
          "43:   }",
          "44:   next();",
          "45: })();",
          "47: function test(next) {",
          "48:   var options = {",
          "49:     cert: fs.readFileSync(common.fixturesDir + '/test_cert.pem'),",
          "50:     key: fs.readFileSync(common.fixturesDir + '/test_key.pem')",
          "51:   };",
          "53:   var seenError = false;",
          "55:   var server = https.createServer(options, function(req, res) {",
          "56:     var conn = req.connection;",
          "57:     conn.on('error', function(err) {",
          "58:       console.error('Caught exception: ' + err);",
          "59:       assert(/TLS session renegotiation attack/.test(err));",
          "60:       conn.destroy();",
          "61:       seenError = true;",
          "62:     });",
          "63:     res.end('ok');",
          "64:   });",
          "66:   server.listen(common.PORT, function() {",
          "67:     var args = ('s_client -connect 127.0.0.1:' + common.PORT).split(' ');",
          "68:     var child = spawn('openssl', args);",
          "70:     child.stdout.pipe(process.stdout);",
          "71:     child.stderr.pipe(process.stderr);",
          "74:     var handshakes = 0;",
          "75:     var renegs = 0;",
          "77:     child.stderr.on('data', function(data) {",
          "78:       if (seenError) return;",
          "79:       handshakes += (('' + data).match(/verify return:1/g) || []).length;",
          "80:       if (handshakes === 2) spam();",
          "81:       renegs += (('' + data).match(/RENEGOTIATING/g) || []).length;",
          "82:     });",
          "84:     child.on('exit', function() {",
          "85:       assert.equal(renegs, tls.CLIENT_RENEG_LIMIT + 1);",
          "86:       server.close();",
          "87:       process.nextTick(next);",
          "88:     });",
          "90:     var closed = false;",
          "91:     child.stdin.on('error', function(err) {",
          "92:       assert.equal(err.code, 'EPIPE');",
          "93:       closed = true;",
          "94:     });",
          "95:     child.stdin.on('close', function() {",
          "96:       closed = true;",
          "97:     });",
          "100:     function spam() {",
          "101:       if (closed) return;",
          "102:       child.stdin.write('R\\n');",
          "103:       setTimeout(spam, 50);",
          "104:     }",
          "105:   });",
          "106: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7144be70db2e6ce337d0f6ec47a28a06802d1c7a",
      "candidate_info": {
        "commit_hash": "7144be70db2e6ce337d0f6ec47a28a06802d1c7a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7144be70db2e6ce337d0f6ec47a28a06802d1c7a",
        "files": [
          "lib/url.js",
          "test/simple/test-url.js"
        ],
        "message": "url: Go much faster by using Url class\n\nV8 loves it when JavaScript pretends to be a Classic inheritance\ntype of language.\n\nBefore:\n\n$ ./node benchmark/url.js\nbenchmarking parse() ... 1.868 sec\nbenchmarking format() ... 1.906 sec\nbenchmarking resolve(\"../foo/bar?baz=boom\") ... 7.800 sec\nbenchmarking resolve(\"foo/bar\") ... 7.099 sec\nbenchmarking resolve(\"http://nodejs.org\") ... 8.403 sec\nbenchmarking resolve(\"./foo/bar?baz\") ... 7.974 sec\n\nAfter:\n\n$ ./node benchmark/url.js\nbenchmarking parse() ... 1.769 sec\nbenchmarking format() ... 1.793 sec\nbenchmarking resolve(\"../foo/bar?baz=boom\") ... 4.254 sec\nbenchmarking resolve(\"foo/bar\") ... 3.932 sec\nbenchmarking resolve(\"http://nodejs.org\") ... 4.382 sec\nbenchmarking resolve(\"./foo/bar?baz\") ... 4.293 sec",
        "before_after_code_files": [
          "lib/url.js||liurl.js",
          "test/simple/test-url.js||test/simple/test-url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/url.js||liurl.js": [
          "File: lib/url.js -> liurl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: exports.resolveObject = urlResolveObject;",
          "27: exports.format = urlFormat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     querystring = require('querystring');",
          "92: function urlParse(url, parseQueryString, slashesDenoteHost) {",
          "95:   if (typeof url !== 'string') {",
          "96:     throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);",
          "97:   }",
          "",
          "[Removed Lines]",
          "93:   if (url && typeof(url) === 'object' && url.href) return url;",
          "99:   var out = {},",
          "100:       rest = url;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:   if (proto) {",
          "108:     proto = proto[0];",
          "109:     var lowerProto = proto.toLowerCase();",
          "111:     rest = rest.substr(proto.length);",
          "112:   }",
          "",
          "[Removed Lines]",
          "110:     out.protocol = lowerProto;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:     var slashes = rest.substr(0, 2) === '//';",
          "120:     if (slashes && !(proto && hostlessProtocol[proto])) {",
          "121:       rest = rest.substr(2);",
          "123:     }",
          "124:   }",
          "",
          "[Removed Lines]",
          "122:       out.slashes = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:       if (hasAuth) {",
          "153:         rest = rest.substr(atSign + 1);",
          "154:       }",
          "155:     }",
          "",
          "[Removed Lines]",
          "152:         out.auth = decodeURIComponent(auth);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:     }",
          "164:     if (firstNonHost !== -1) {",
          "166:       rest = rest.substr(firstNonHost);",
          "167:     } else {",
          "169:       rest = '';",
          "170:     }",
          "194:       for (var i = 0, l = hostparts.length; i < l; i++) {",
          "195:         var part = hostparts[i];",
          "196:         if (!part) continue;",
          "",
          "[Removed Lines]",
          "165:       out.host = rest.substr(0, firstNonHost);",
          "168:       out.host = rest;",
          "173:     var p = parseHost(out.host);",
          "174:     var keys = Object.keys(p);",
          "175:     for (var i = 0, l = keys.length; i < l; i++) {",
          "176:       var key = keys[i];",
          "177:       out[key] = p[key];",
          "178:     }",
          "182:     out.hostname = out.hostname || '';",
          "186:     var ipv6Hostname = out.hostname[0] === '[' &&",
          "187:         out.hostname[out.hostname.length - 1] === ']';",
          "190:     if (out.hostname.length > hostnameMaxLen) {",
          "191:       out.hostname = '';",
          "192:     } else if (!ipv6Hostname) {",
          "193:       var hostparts = out.hostname.split(/\\./);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218:             if (notHost.length) {",
          "219:               rest = '/' + notHost.join('.') + rest;",
          "220:             }",
          "222:             break;",
          "223:           }",
          "224:         }",
          "225:       }",
          "226:     }",
          "231:     if (!ipv6Hostname) {",
          "237:       var newOut = [];",
          "238:       for (var i = 0; i < domainArray.length; ++i) {",
          "239:         var s = domainArray[i];",
          "240:         newOut.push(s.match(/[^A-Za-z0-9_-]/) ?",
          "241:             'xn--' + punycode.encode(s) : s);",
          "242:       }",
          "244:     }",
          "251:     if (ipv6Hostname) {",
          "253:       if (rest[0] !== '/') {",
          "254:         rest = '/' + rest;",
          "255:       }",
          "",
          "[Removed Lines]",
          "221:             out.hostname = validParts.join('.');",
          "229:     out.hostname = out.hostname.toLowerCase();",
          "236:       var domainArray = out.hostname.split('.');",
          "243:       out.hostname = newOut.join('.');",
          "246:     out.host = (out.hostname || '') +",
          "247:         ((out.port) ? ':' + out.port : '');",
          "248:     out.href += out.host;",
          "252:       out.hostname = out.hostname.substr(1, out.hostname.length - 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:   var hash = rest.indexOf('#');",
          "279:   if (hash !== -1) {",
          "282:     rest = rest.slice(0, hash);",
          "283:   }",
          "284:   var qm = rest.indexOf('?');",
          "285:   if (qm !== -1) {",
          "288:     if (parseQueryString) {",
          "290:     }",
          "291:     rest = rest.slice(0, qm);",
          "292:   } else if (parseQueryString) {",
          "296:   }",
          "298:   if (slashedProtocol[proto] &&",
          "301:   }",
          "307:   }",
          "315: function urlFormat(obj) {",
          "",
          "[Removed Lines]",
          "281:     out.hash = rest.substr(hash);",
          "286:     out.search = rest.substr(qm);",
          "287:     out.query = rest.substr(qm + 1);",
          "289:       out.query = querystring.parse(out.query);",
          "294:     out.search = '';",
          "295:     out.query = {};",
          "297:   if (rest) out.pathname = rest;",
          "299:       out.hostname && !out.pathname) {",
          "300:     out.pathname = '/';",
          "304:   if (out.pathname || out.search) {",
          "305:     out.path = (out.pathname ? out.pathname : '') +",
          "306:                (out.search ? out.search : '');",
          "310:   out.href = urlFormat(out);",
          "311:   return out;",
          "312: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "320:   if (typeof(obj) === 'string') obj = urlParse(obj);",
          "323:   if (auth) {",
          "324:     auth = encodeURIComponent(auth);",
          "325:     auth = auth.replace(/%3A/i, ':');",
          "326:     auth += '@';",
          "327:   }",
          "332:       host = false,",
          "333:       query = '';",
          "343:     }",
          "344:   }",
          "349:   }",
          "353:   if (protocol && protocol.substr(-1) !== ':') protocol += ':';",
          "358:       (!protocol || slashedProtocol[protocol]) && host !== false) {",
          "359:     host = '//' + (host || '');",
          "360:     if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;",
          "",
          "[Removed Lines]",
          "322:   var auth = obj.auth || '';",
          "329:   var protocol = obj.protocol || '',",
          "330:       pathname = obj.pathname || '',",
          "331:       hash = obj.hash || '',",
          "335:   if (obj.host !== undefined) {",
          "336:     host = auth + obj.host;",
          "337:   } else if (obj.hostname !== undefined) {",
          "338:     host = auth + (obj.hostname.indexOf(':') === -1 ?",
          "339:         obj.hostname :",
          "340:         '[' + obj.hostname + ']');",
          "341:     if (obj.port) {",
          "342:       host += ':' + obj.port;",
          "346:   if (obj.query && typeof obj.query === 'object' &&",
          "347:       Object.keys(obj.query).length) {",
          "348:     query = querystring.stringify(obj.query);",
          "351:   var search = obj.search || (query && ('?' + query)) || '';",
          "357:   if (obj.slashes ||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "366:   if (search && search.charAt(0) !== '?') search = '?' + search;",
          "368:   return protocol + host + pathname + search + hash;",
          "371: function urlResolve(source, relative) {",
          "373: }",
          "375: function urlResolveObject(source, relative) {",
          "376:   if (!source) return relative;",
          "384:   if (relative.href === '') {",
          "387:   }",
          "390:   if (relative.slashes && !relative.protocol) {",
          "396:     }",
          "399:   }",
          "",
          "[Removed Lines]",
          "369: }",
          "372:   return urlFormat(urlResolveObject(source, relative));",
          "378:   source = urlParse(urlFormat(source), false, true);",
          "379:   relative = urlParse(urlFormat(relative), false, true);",
          "382:   source.hash = relative.hash;",
          "385:     source.href = urlFormat(source);",
          "386:     return source;",
          "391:     relative.protocol = source.protocol;",
          "393:     if (slashedProtocol[relative.protocol] &&",
          "394:         relative.hostname && !relative.pathname) {",
          "395:       relative.path = relative.pathname = '/';",
          "397:     relative.href = urlFormat(relative);",
          "398:     return relative;",
          "401:   if (relative.protocol && relative.protocol !== source.protocol) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "410:     if (!slashedProtocol[relative.protocol]) {",
          "413:     }",
          "415:     if (!relative.host && !hostlessProtocol[relative.protocol]) {",
          "416:       var relPath = (relative.pathname || '').split('/');",
          "417:       while (relPath.length && !(relative.host = relPath.shift()));",
          "",
          "[Removed Lines]",
          "411:       relative.href = urlFormat(relative);",
          "412:       return relative;",
          "414:     source.protocol = relative.protocol;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "419:       if (!relative.hostname) relative.hostname = '';",
          "420:       if (relPath[0] !== '') relPath.unshift('');",
          "421:       if (relPath.length < 2) relPath.unshift('');",
          "423:     }",
          "435:     }",
          "439:   }",
          "442:       isRelAbs = (",
          "444:           relative.pathname && relative.pathname.charAt(0) === '/'",
          "445:       ),",
          "446:       mustEndAbs = (isRelAbs || isSourceAbs ||",
          "448:       removeAllDots = mustEndAbs,",
          "450:       relPath = relative.pathname && relative.pathname.split('/') || [],",
          "459:   if (psychotic) {",
          "466:     }",
          "468:     if (relative.protocol) {",
          "471:       if (relative.host) {",
          "472:         if (relPath[0] === '') relPath[0] = relative.host;",
          "473:         else relPath.unshift(relative.host);",
          "474:       }",
          "476:     }",
          "477:     mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');",
          "478:   }",
          "480:   if (isRelAbs) {",
          "488:     srcPath = relPath;",
          "490:   } else if (relPath.length) {",
          "",
          "[Removed Lines]",
          "422:       relative.pathname = relPath.join('/');",
          "424:     source.pathname = relative.pathname;",
          "425:     source.search = relative.search;",
          "426:     source.query = relative.query;",
          "427:     source.host = relative.host || '';",
          "428:     source.auth = relative.auth;",
          "429:     source.hostname = relative.hostname || relative.host;",
          "430:     source.port = relative.port;",
          "432:     if (source.pathname !== undefined || source.search !== undefined) {",
          "433:       source.path = (source.pathname ? source.pathname : '') +",
          "434:                     (source.search ? source.search : '');",
          "436:     source.slashes = source.slashes || relative.slashes;",
          "437:     source.href = urlFormat(source);",
          "438:     return source;",
          "441:   var isSourceAbs = (source.pathname && source.pathname.charAt(0) === '/'),",
          "443:           relative.host !== undefined ||",
          "447:                     (source.host && relative.pathname)),",
          "449:       srcPath = source.pathname && source.pathname.split('/') || [],",
          "451:       psychotic = source.protocol &&",
          "452:           !slashedProtocol[source.protocol];",
          "461:     delete source.hostname;",
          "462:     delete source.port;",
          "463:     if (source.host) {",
          "464:       if (srcPath[0] === '') srcPath[0] = source.host;",
          "465:       else srcPath.unshift(source.host);",
          "467:     delete source.host;",
          "469:       delete relative.hostname;",
          "470:       delete relative.port;",
          "475:       delete relative.host;",
          "482:     source.host = (relative.host || relative.host === '') ?",
          "483:                       relative.host : source.host;",
          "484:     source.hostname = (relative.hostname || relative.hostname === '') ?",
          "485:                       relative.hostname : source.hostname;",
          "486:     source.search = relative.search;",
          "487:     source.query = relative.query;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "493:     if (!srcPath) srcPath = [];",
          "494:     srcPath.pop();",
          "495:     srcPath = srcPath.concat(relPath);",
          "502:     if (psychotic) {",
          "509:       if (authInHost) {",
          "512:       }",
          "513:     }",
          "520:     }",
          "523:   }",
          "524:   if (!srcPath.length) {",
          "531:     } else {",
          "533:     }",
          "536:   }",
          "540:   var last = srcPath.slice(-1)[0];",
          "541:   var hasTrailingSlash = (",
          "543:       last === '');",
          "",
          "[Removed Lines]",
          "496:     source.search = relative.search;",
          "497:     source.query = relative.query;",
          "498:   } else if ('search' in relative) {",
          "503:       source.hostname = source.host = srcPath.shift();",
          "507:       var authInHost = source.host && source.host.indexOf('@') > 0 ?",
          "508:                        source.host.split('@') : false;",
          "510:         source.auth = authInHost.shift();",
          "511:         source.host = source.hostname = authInHost.shift();",
          "514:     source.search = relative.search;",
          "515:     source.query = relative.query;",
          "517:     if (source.pathname !== undefined || source.search !== undefined) {",
          "518:       source.path = (source.pathname ? source.pathname : '') +",
          "519:                     (source.search ? source.search : '');",
          "521:     source.href = urlFormat(source);",
          "522:     return source;",
          "527:     delete source.pathname;",
          "529:     if (!source.search) {",
          "530:       source.path = '/' + source.search;",
          "532:       delete source.path;",
          "534:     source.href = urlFormat(source);",
          "535:     return source;",
          "542:       (source.host || relative.host) && (last === '.' || last === '..') ||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "581:   if (psychotic) {",
          "583:                                     srcPath.length ? srcPath.shift() : '';",
          "589:     if (authInHost) {",
          "592:     }",
          "593:   }",
          "597:   if (mustEndAbs && !isAbsolute) {",
          "598:     srcPath.unshift('');",
          "599:   }",
          "606:   }",
          "615:   var port = portPattern.exec(host);",
          "616:   if (port) {",
          "617:     port = port[0];",
          "618:     if (port !== ':') {",
          "620:     }",
          "621:     host = host.substr(0, host.length - port.length);",
          "622:   }",
          "",
          "[Removed Lines]",
          "582:     source.hostname = source.host = isAbsolute ? '' :",
          "587:     var authInHost = source.host && source.host.indexOf('@') > 0 ?",
          "588:                      source.host.split('@') : false;",
          "590:       source.auth = authInHost.shift();",
          "591:       source.host = source.hostname = authInHost.shift();",
          "595:   mustEndAbs = mustEndAbs || (source.host && srcPath.length);",
          "601:   source.pathname = srcPath.join('/');",
          "603:   if (source.pathname !== undefined || source.search !== undefined) {",
          "604:     source.path = (source.pathname ? source.pathname : '') +",
          "605:                   (source.search ? source.search : '');",
          "607:   source.auth = relative.auth || source.auth;",
          "608:   source.slashes = source.slashes || relative.slashes;",
          "609:   source.href = urlFormat(source);",
          "610:   return source;",
          "611: }",
          "613: function parseHost(host) {",
          "614:   var out = {};",
          "619:       out.port = port.substr(1);",
          "623:   if (host) out.hostname = host;",
          "624:   return out;",
          "625: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-url.js||test/simple/test-url.js": [
          "File: test/simple/test-url.js -> test/simple/test-url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:       spaced = url.parse('     \\t  ' + u + '\\n\\t');",
          "660:       expected = parseTests[u];",
          "662:   assert.deepEqual(actual, expected);",
          "663:   assert.deepEqual(spaced, expected);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:   Object.keys(actual).forEach(function (i) {",
          "663:     if (expected[i] === undefined && actual[i] === null) {",
          "664:       expected[i] = null;",
          "665:     }",
          "666:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695: for (var u in parseTestsWithQueryString) {",
          "696:   var actual = url.parse(u, true);",
          "697:   var expected = parseTestsWithQueryString[u];",
          "699:   assert.deepEqual(actual, expected);",
          "700: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:   for (var i in actual) {",
          "705:     if (actual[i] === null && expected[i] === undefined) {",
          "706:       expected[i] = null;",
          "707:     }",
          "708:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1227:   var actual = url.resolveObject(url.parse(relativeTest[0]), relativeTest[1]),",
          "1228:       expected = url.parse(relativeTest[2]);",
          "1240:   assert.deepEqual(actual, expected);",
          "",
          "[Removed Lines]",
          "1233:   for (var i in actual) {",
          "1234:     if (actual[i] === undefined ||",
          "1235:         (!emptyIsImportant.hasOwnProperty(i) && !actual[i])) {",
          "1236:       delete actual[i];",
          "1237:     }",
          "1238:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1264:   var actual = url.resolveObject(url.parse(relativeTest[1]), relativeTest[0]),",
          "1265:       expected = url.parse(relativeTest[2]);",
          "1277:   assert.deepEqual(actual, expected);",
          "1279:   var expected = relativeTest[2],",
          "",
          "[Removed Lines]",
          "1270:   for (var i in actual) {",
          "1271:     if (actual[i] === undefined ||",
          "1272:         (!emptyIsImportant.hasOwnProperty(i) && !actual[i])) {",
          "1273:       delete actual[i];",
          "1274:     }",
          "1275:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}