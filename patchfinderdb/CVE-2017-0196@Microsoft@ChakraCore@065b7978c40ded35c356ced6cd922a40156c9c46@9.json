{
  "cve_id": "CVE-2017-0196",
  "cve_desc": "An information disclosure vulnerability in Microsoft scripting engine allows remote attackers to obtain sensitive information from process memory via a crafted web site, aka \"Microsoft Browser Information Disclosure Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "patch_info": {
    "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
    "files": [
      "lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js"
    ],
    "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
    "before_after_code_files": [
      "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
    ]
  },
  "patch_diff": {
    "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
      "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
      "479:     {",
      "480:         bool isIntArray = false, isFloatArray = false;",
      "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         if (this->length <= index)",
      "481:         {",
      "482:             return false;",
      "483:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5768:         if (!pArr->HasNoMissingValues())",
      "5769:         {",
      "5771:             {",
      "",
      "[Removed Lines]",
      "5770:             for (uint32 i = 0; i < newLen; i++)",
      "",
      "[Added Lines]",
      "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
      "",
      "---------------"
    ],
    "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
      "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "593:             assert.areEqual(101, arr.length);",
      "594:         }",
      "595:     },",
      "596: ];",
      "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     {",
      "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
      "598:         body: function ()",
      "599:         {",
      "600:             var getterCalled = false;",
      "601:             var a = [1, 2];",
      "602:             for (var i = 0; i < 100 * 1024; i++) {",
      "603:                 a.push(i);",
      "604:             }",
      "605:             delete a[0]; // Make a missing item",
      "606:             var protoObj = [11];",
      "607:             Object.defineProperty(protoObj, '0', {",
      "608:                 get : function () {",
      "609:                     getterCalled = true;",
      "610:                     Object.setPrototypeOf(a, Array.prototype);",
      "611:                     a.splice(0); // head seg is now length=0",
      "612:                     return 42;",
      "613:                 },",
      "614:                 configurable : true",
      "615:             });",
      "616:             Object.setPrototypeOf(a, protoObj);",
      "617:             var b = a.slice();",
      "618:             assert.isTrue(getterCalled);",
      "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
      "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
      "621:         }",
      "622:     },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "046f94b414b803c3cf63dc3755ae197b03d9de6d",
      "candidate_info": {
        "commit_hash": "046f94b414b803c3cf63dc3755ae197b03d9de6d",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/046f94b414b803c3cf63dc3755ae197b03d9de6d",
        "files": [
          "lib/Backend/JITTimeConstructorCache.cpp",
          "lib/Common/Common.h",
          "lib/Common/DataStructures/BaseDictionary.h",
          "lib/Common/DataStructures/List.h",
          "lib/Common/Memory/Recycler.inl",
          "lib/Common/Memory/RecyclerPointers.h",
          "lib/Common/Memory/RecyclerWriteBarrierManager.h",
          "lib/JITIDL/JITTypes.h",
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.h",
          "test/runtests.py"
        ],
        "message": "swb: fixes with verification on unit tests\n\nChanged `runtests.py` to simplify passing multiple ch switches, e.g. to\nrun Lei's swb verification on test\\Basics on x86_debug and interpreted\nvariants only:\n\n```\npython test\\runtests.py -d test\\Basics \\\n  --flags \"-ForceSoftwareWriteBarrier -recyclerconcurrentstress -recyclerverifymark\" \\\n  --variants interpreted\n```\n\nFixed some found issues.\n\nNotably, original swb type traits were missing \"T* const\" specification.\nCopyArray/etc. also needs to take account of \"TAllocator\" type, as we may\ncopy structs that contain GC pointers (and we usually use RecyclerNonLeaf\nwith those).",
        "before_after_code_files": [
          "lib/Backend/JITTimeConstructorCache.cpp||lib/Backend/JITTimeConstructorCache.cpp",
          "lib/Common/Common.h||lib/Common/Common.h",
          "lib/Common/DataStructures/BaseDictionary.h||lib/Common/DataStructures/BaseDictionary.h",
          "lib/Common/DataStructures/List.h||lib/Common/DataStructures/List.h",
          "lib/Common/Memory/Recycler.inl||lib/Common/Memory/Recycler.inl",
          "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h",
          "lib/Common/Memory/RecyclerWriteBarrierManager.h||lib/Common/Memory/RecyclerWriteBarrierManager.h",
          "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.cpp||lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "lib/Runtime/Types/ES5ArrayTypeHandler.h||lib/Runtime/Types/ES5ArrayTypeHandler.h",
          "test/runtests.py||test/runtests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/JITTimeConstructorCache.cpp||lib/Backend/JITTimeConstructorCache.cpp": [
          "File: lib/Backend/JITTimeConstructorCache.cpp -> lib/Backend/JITTimeConstructorCache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: {",
          "12:     Assert(constructor != nullptr);",
          "13:     Assert(runtimeCache != nullptr);",
          "16:     m_data.slotCount = runtimeCache->content.slotCount;",
          "17:     m_data.inlineSlotCount = runtimeCache->content.inlineSlotCount;",
          "18:     m_data.skipNewScObject = runtimeCache->content.skipDefaultNewObject;",
          "",
          "[Removed Lines]",
          "14:     m_data.runtimeCacheAddr = (intptr_t)runtimeCache;",
          "15:     m_data.runtimeCacheGuardAddr = (intptr_t)runtimeCache->GetAddressOfGuardValue();",
          "",
          "[Added Lines]",
          "14:     m_data.runtimeCacheAddr = runtimeCache;",
          "15:     m_data.runtimeCacheGuardAddr = const_cast<void*>(runtimeCache->GetAddressOfGuardValue());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: {",
          "31:     Assert(other != nullptr);",
          "32:     Assert(other->GetRuntimeCacheAddr() != 0);",
          "35:     m_data.type = *(TypeIDL*)PointerValue(other->GetType().t);",
          "36:     m_data.slotCount = other->GetSlotCount();",
          "37:     m_data.inlineSlotCount = other->GetInlineSlotCount();",
          "",
          "[Removed Lines]",
          "33:     m_data.runtimeCacheAddr = other->GetRuntimeCacheAddr();",
          "34:     m_data.runtimeCacheGuardAddr = other->GetRuntimeCacheGuardAddr();",
          "",
          "[Added Lines]",
          "33:     m_data.runtimeCacheAddr = reinterpret_cast<void*>(other->GetRuntimeCacheAddr());",
          "34:     m_data.runtimeCacheGuardAddr = reinterpret_cast<void*>(other->GetRuntimeCacheGuardAddr());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80: intptr_t",
          "81: JITTimeConstructorCache::GetRuntimeCacheAddr() const",
          "82: {",
          "84: }",
          "86: intptr_t",
          "87: JITTimeConstructorCache::GetRuntimeCacheGuardAddr() const",
          "88: {",
          "90: }",
          "92: JITTypeHolder",
          "",
          "[Removed Lines]",
          "83:     return m_data.runtimeCacheAddr;",
          "89:     return m_data.runtimeCacheGuardAddr;",
          "",
          "[Added Lines]",
          "83:     return reinterpret_cast<intptr_t>(PointerValue(m_data.runtimeCacheAddr));",
          "89:     return reinterpret_cast<intptr_t>(PointerValue(m_data.runtimeCacheGuardAddr));",
          "",
          "---------------"
        ],
        "lib/Common/Common.h||lib/Common/Common.h": [
          "File: lib/Common/Common.h -> lib/Common/Common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: #include \"DataStructures/StringBuilder.h\"",
          "105: #include \"DataStructures/WeakReferenceDictionary.h\"",
          "106: #include \"DataStructures/LeafValueDictionary.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #include \"DataStructures/QuickSort.h\"",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/BaseDictionary.h||lib/Common/DataStructures/BaseDictionary.h": [
          "File: lib/Common/DataStructures/BaseDictionary.h -> lib/Common/DataStructures/BaseDictionary.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:             freeCount = other.freeCount;",
          "184:             CopyArray(buckets, bucketCount, other.buckets, bucketCount);",
          "186:                 entries, size, other.entries, size);",
          "188: #if PROFILE_DICTIONARY",
          "",
          "[Removed Lines]",
          "185:             CopyArray<EntryType, Field(ValueType, TAllocator)>(",
          "",
          "[Added Lines]",
          "185:             CopyArray<EntryType, Field(ValueType, TAllocator), TAllocator>(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:             freeCount = other->freeCount;",
          "716:             CopyArray(buckets, bucketCount, other->buckets, bucketCount);",
          "718:                 entries, size, other->entries, size);",
          "720: #if PROFILE_DICTIONARY",
          "",
          "[Removed Lines]",
          "717:             CopyArray<EntryType, Field(ValueType, TAllocator)>(",
          "",
          "[Added Lines]",
          "717:             CopyArray<EntryType, Field(ValueType, TAllocator), TAllocator>(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1022:             {",
          "1024:                 newEntries = AllocateEntries(newSize);",
          "1026:                     newEntries, newSize, entries, count);",
          "1028:                 DeleteEntries(entries, size);",
          "",
          "[Removed Lines]",
          "1025:                 CopyArray<EntryType, Field(ValueType, TAllocator)>(",
          "",
          "[Added Lines]",
          "1025:                 CopyArray<EntryType, Field(ValueType, TAllocator), TAllocator>(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1033:             }",
          "1035:             Allocate(&newBuckets, &newEntries, newBucketCount, newSize);",
          "1037:                 newEntries, newSize, entries, count);",
          "",
          "[Removed Lines]",
          "1036:             CopyArray<EntryType, Field(ValueType, TAllocator)>(",
          "",
          "[Added Lines]",
          "1036:             CopyArray<EntryType, Field(ValueType, TAllocator), TAllocator>(",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/List.h||lib/Common/DataStructures/List.h": [
          "File: lib/Common/DataStructures/List.h -> lib/Common/DataStructures/List.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:                 Field(T, TAllocator)* newbuffer = AllocArray(newLength);",
          "275:                 Field(T, TAllocator)* oldbuffer = this->buffer;",
          "278:                 FreeArray(oldbuffer, oldBufferSize);",
          "",
          "[Removed Lines]",
          "276:                 CopyArray(newbuffer, newLength, oldbuffer, length);",
          "",
          "[Added Lines]",
          "276:                 CopyArray<Field(T, TAllocator), Field(T, TAllocator), TAllocator>(",
          "277:                     newbuffer, newLength, oldbuffer, length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501:                 (IsSame<TRemovePolicyType, Js::CopyRemovePolicy<TListType, true> >::IsTrue));",
          "502:             if (this->count)",
          "503:             {",
          "505:             }",
          "506:         }",
          "",
          "[Removed Lines]",
          "504:                 qsort_s(this->buffer, this->count, sizeof(T), _PtFuncCompare, _Context);",
          "",
          "[Added Lines]",
          "505:                 qsort_s<Field(T, TAllocator), Field(T, TAllocator), TAllocator>(",
          "506:                     this->buffer, this->count, _PtFuncCompare, _Context);",
          "",
          "---------------"
        ],
        "lib/Common/Memory/Recycler.inl||lib/Common/Memory/Recycler.inl": [
          "File: lib/Common/Memory/Recycler.inl -> lib/Common/Memory/Recycler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:         memBlock = RealAlloc<(ObjectInfoBits)(((attributes | WithBarrierBit) & ~LeafBit) & InternalObjectInfoBitMask), nothrow>(&autoHeap, allocSize);",
          "102:     }",
          "103:     else",
          "104: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: #if DBG",
          "106:         if (attributes & LeafBit)",
          "107:         {",
          "108:             Recycler::WBSetBits(memBlock, (uint)(HeapInfo::GetAlignedSizeNoCheck(allocSize) / sizeof(void*)));",
          "109:         }",
          "110: #endif",
          "",
          "---------------"
        ],
        "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h": [
          "File: lib/Common/Memory/RecyclerPointers.h -> lib/Common/Memory/RecyclerPointers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: template <class T>",
          "31: struct TypeWriteBarrierPolicy<T*> { typedef _write_barrier_policy Policy; };",
          "32: template <class T>",
          "33: struct TypeWriteBarrierPolicy<WriteBarrierPtr<T>> { typedef _write_barrier_policy Policy; };",
          "34: template <>",
          "35: struct TypeWriteBarrierPolicy<_write_barrier_policy> { typedef _write_barrier_policy Policy; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: struct TypeWriteBarrierPolicy<T* const> { typedef _write_barrier_policy Policy; };",
          "34: template <class T>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: struct _WriteBarrierFieldType { typedef T Type; };",
          "76: template <class T>",
          "77: struct _WriteBarrierFieldType<T*, _write_barrier_policy> { typedef WriteBarrierPtr<T> Type; };",
          "79: template <class T,",
          "80:           class Allocator = Recycler,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: template <class T>",
          "81: struct _WriteBarrierFieldType<T* const, _write_barrier_policy> { typedef const WriteBarrierPtr<T> Type; };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148: void ArrayWriteBarrier(T * address, size_t count)",
          "149: {",
          "151:     return _ArrayWriteBarrier<Policy>::WriteBarrier(address, count);",
          "152: }",
          "158: void CopyArray(T* dst, size_t dstCount, const T* src, size_t srcCount)",
          "159: {",
          "160:     js_memcpy_s(reinterpret_cast<void*>(dst), sizeof(T) * dstCount,",
          "161:                 reinterpret_cast<const void*>(src), sizeof(T) * srcCount);",
          "163: }",
          "165: void CopyArray(WriteBarrierPtr<T>& dst, size_t dstCount,",
          "166:                const WriteBarrierPtr<T>& src, size_t srcCount)",
          "167: {",
          "169:         static_cast<T*>(dst), dstCount, static_cast<const T*>(src), srcCount);",
          "170: }",
          "172: void CopyArray(T* dst, size_t dstCount,",
          "173:                const WriteBarrierPtr<T>& src, size_t srcCount)",
          "174: {",
          "176:         dst, dstCount, static_cast<const T*>(src), srcCount);",
          "177: }",
          "179: void CopyArray(WriteBarrierPtr<T>& dst, size_t dstCount,",
          "180:                const T* src, size_t srcCount)",
          "181: {",
          "183:         static_cast<T*>(dst), dstCount, src, srcCount);",
          "184: }",
          "189: void CopyArray(WriteBarrierPtr<T>* dst, size_t dstCount,",
          "190:                T* const * src, size_t srcCount)",
          "191: {",
          "192:     CompileAssert(sizeof(WriteBarrierPtr<T>) == sizeof(T*));",
          "194:         reinterpret_cast<T**>(dst), dstCount, src, srcCount);",
          "195: }",
          "200: void MoveArray(T* dst, const T* src, size_t count)",
          "201: {",
          "202:     memmove(reinterpret_cast<void*>(dst),",
          "203:             reinterpret_cast<const void*>(src),",
          "204:             sizeof(T) * count);",
          "206: }",
          "208: template <class T>",
          "",
          "[Removed Lines]",
          "147: template <class T, class PolicyType = T>",
          "150:     typedef typename _ArrayItemWriteBarrierPolicy<PolicyType>::Policy Policy;",
          "157: template <class T, class PolicyType = T>",
          "162:     ArrayWriteBarrier<T, PolicyType>(dst, dstCount);",
          "164: template <class T, class PolicyType = T>",
          "168:     return CopyArray<T, PolicyType>(",
          "171: template <class T, class PolicyType = T>",
          "175:     return CopyArray<T, PolicyType>(",
          "178: template <class T, class PolicyType = T>",
          "182:     return CopyArray<T, PolicyType>(",
          "188: template <class T, class PolicyType = WriteBarrierPtr<T>>",
          "193:     return CopyArray<T*, PolicyType>(",
          "199: template <class T, class PolicyType = T>",
          "205:     ArrayWriteBarrier<T, PolicyType>(dst, count);",
          "",
          "[Added Lines]",
          "151: template <class T, class PolicyType = T, class Allocator = Recycler>",
          "154:     typedef typename _ArrayItemWriteBarrierPolicy<PolicyType>::Policy ItemPolicy;",
          "155:     typedef typename AllocatorWriteBarrierPolicy<Allocator, ItemPolicy>::Policy Policy;",
          "162: template <class T, class PolicyType = T, class Allocator = Recycler>",
          "167:     ArrayWriteBarrier<T, PolicyType, Allocator>(dst, dstCount);",
          "169: template <class T, class PolicyType = T, class Allocator = Recycler>",
          "173:     return CopyArray<T, PolicyType, Allocator>(",
          "176: template <class T, class PolicyType = T, class Allocator = Recycler>",
          "180:     return CopyArray<T, PolicyType, Allocator>(",
          "183: template <class T, class PolicyType = T, class Allocator = Recycler>",
          "187:     return CopyArray<T, PolicyType, Allocator>(",
          "193: template <class T, class PolicyType = WriteBarrierPtr<T>, class Allocator = Recycler>",
          "198:     return CopyArray<T*, PolicyType, Allocator>(",
          "204: template <class T, class PolicyType = T, class Allocator = Recycler>",
          "210:     ArrayWriteBarrier<T, PolicyType, Allocator>(dst, count);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "326:     WriteBarrierPtr(WriteBarrierPtr<T>&& other)",
          "327:     {",
          "328:         WriteBarrierSet(other.ptr);",
          "332:     T * operator->() const { return ptr; }",
          "",
          "[Removed Lines]",
          "329:     }",
          "",
          "[Added Lines]",
          "334:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "484:         ::qsort_s(arr, count, sizeof(T), comparer, context);",
          "485:     }",
          "486: };",
          "487: template <>",
          "488: struct _QuickSortImpl<_write_barrier_policy>",
          "489: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492: #ifdef RECYCLER_WRITE_BARRIER",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "494:         JsUtil::QuickSort<T, Comparer>::Sort(arr, arr + count - 1, comparer, context);",
          "495:     }",
          "496: };",
          "499: void qsort_s(T* arr, size_t count, const Comparer& comparer, void* context)",
          "500: {",
          "503:     _QuickSortImpl<Policy>::Sort(arr, count, comparer, context);",
          "504: }",
          "505: template<class T, class Comparer>",
          "",
          "[Removed Lines]",
          "498: template<class T, class PolicyType = T, class Comparer>",
          "502:     typedef typename _ArrayItemWriteBarrierPolicy<PolicyType>::Policy Policy;",
          "",
          "[Added Lines]",
          "503: #endif",
          "505: template<class T, class PolicyType = T, class Allocator = Recycler, class Comparer>",
          "508:     typedef typename _ArrayItemWriteBarrierPolicy<PolicyType>::Policy ItemPolicy;",
          "509:     typedef typename AllocatorWriteBarrierPolicy<Allocator, ItemPolicy>::Policy Policy;",
          "",
          "---------------"
        ],
        "lib/Common/Memory/RecyclerWriteBarrierManager.h||lib/Common/Memory/RecyclerWriteBarrierManager.h": [
          "File: lib/Common/Memory/RecyclerWriteBarrierManager.h -> lib/Common/Memory/RecyclerWriteBarrierManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #define RECYCLER_WRITE_BARRIER_BYTE",
          "17: #define RECYCLER_WRITE_BARRIER_JIT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #if GLOBAL_ENABLE_WRITE_BARRIER",
          "19: #endif",
          "",
          "---------------"
        ],
        "lib/JITIDL/JITTypes.h||lib/JITIDL/JITTypes.h": [
          "File: lib/JITIDL/JITTypes.h -> lib/JITIDL/JITTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     X64_PAD4(1)",
          "147:     IDL_Field(TypeIDL) type;",
          "151:     IDL_Field(CHAKRA_PTR) guardedPropOps;",
          "152: } JITTimeConstructorCacheIDL;",
          "",
          "[Removed Lines]",
          "149:     IDL_Field(CHAKRA_PTR) runtimeCacheAddr;",
          "150:     IDL_Field(CHAKRA_PTR) runtimeCacheGuardAddr;",
          "",
          "[Added Lines]",
          "149:     IDL_Field(CHAKRA_WB_PTR) runtimeCacheAddr;",
          "150:     IDL_Field(CHAKRA_WB_PTR) runtimeCacheGuardAddr;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1418:             int excess = this->inSlotsCount - executeFunction->GetInParamsCount();",
          "1420:             JavascriptArray *array = static_cast<JavascriptArray *>(*dest);",
          "1422:             CopyArray(elements, excess, src, excess);",
          "1423:         }",
          "1424:         else",
          "",
          "[Removed Lines]",
          "1421:             Field(Var)* elements = ((SparseArraySegment<Var>*)array->GetHead())->elements;",
          "",
          "[Added Lines]",
          "1421:             Field(Var)* elements = SparseArraySegment<Var>::From(array->GetHead())->elements;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"RuntimeLibraryPch.h\"",
          "7: #include \"Types/PathTypeHandler.h\"",
          "8: #include \"Types/SpreadArgument.h\"",
          "11: namespace Js",
          "12: {",
          "",
          "[Removed Lines]",
          "9: #include \"DataStructures/QuickSort.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/ES5ArrayTypeHandler.cpp||lib/Runtime/Types/ES5ArrayTypeHandler.cpp": [
          "File: lib/Runtime/Types/ES5ArrayTypeHandler.cpp -> lib/Runtime/Types/ES5ArrayTypeHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:             if (descriptor->Attributes & PropertyConfigurable)",
          "176:             {",
          "179:                 descriptor->Attributes = PropertyDeleted | PropertyWritable | PropertyConfigurable;",
          "180:             }",
          "181:             else",
          "",
          "[Removed Lines]",
          "177:                 descriptor->Getter = NULL;",
          "178:                 descriptor->Setter = NULL;",
          "",
          "[Added Lines]",
          "177:                 descriptor->Getter = nullptr;",
          "178:                 descriptor->Setter = nullptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:             }",
          "648:             arr->DirectDeleteItemAt<Var>(index);",
          "651:             descriptor->Attributes = PropertyDeleted | PropertyWritable | PropertyConfigurable;",
          "652:             return true;",
          "653:         }",
          "",
          "[Removed Lines]",
          "649:             descriptor->Getter = NULL;",
          "650:             descriptor->Setter = NULL;",
          "",
          "[Added Lines]",
          "649:             descriptor->Getter = nullptr;",
          "650:             descriptor->Setter = nullptr;",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/ES5ArrayTypeHandler.h||lib/Runtime/Types/ES5ArrayTypeHandler.h": [
          "File: lib/Runtime/Types/ES5ArrayTypeHandler.h -> lib/Runtime/Types/ES5ArrayTypeHandler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     class IndexPropertyDescriptor",
          "10:     {",
          "11:     public:",
          "16:         IndexPropertyDescriptor(PropertyAttributes attributes = PropertyDynamicTypeDefaults,",
          "17:             Var getter = NULL, Var setter = NULL)",
          "",
          "[Removed Lines]",
          "12:         PropertyAttributes Attributes;",
          "13:         Var Getter;",
          "14:         Var Setter;",
          "",
          "[Added Lines]",
          "12:         Field(PropertyAttributes) Attributes;",
          "13:         Field(Var) Getter;",
          "14:         Field(Var) Setter;",
          "",
          "---------------"
        ],
        "test/runtests.py||test/runtests.py": [
          "File: test/runtests.py -> test/runtests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:                     help='select tests with given tags')",
          "57: parser.add_argument('--not-tag', nargs='*',",
          "58:                     help='exclude tests with given tags')",
          "60:                     help='global test flags to ch')",
          "61: parser.add_argument('--timeout', type=int, default=DEFAULT_TIMEOUT,",
          "62:                     help='test timeout (default ' + str(DEFAULT_TIMEOUT) + ' seconds)')",
          "",
          "[Removed Lines]",
          "59: parser.add_argument('--flag', nargs='*',",
          "",
          "[Added Lines]",
          "59: parser.add_argument('--flags', default='',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:         working_path = os.path.dirname(js_file)",
          "398:         flags = self._expand_compile_flags(test) + \\",
          "402:         cmd = [binary] + flags + [os.path.basename(js_file)]",
          "",
          "[Removed Lines]",
          "397:         flags = test.get('compile-flags')",
          "399:                     (args.flag or []) + \\",
          "400:                     (flags.split() if flags else [])",
          "",
          "[Added Lines]",
          "397:         flags = test.get('compile-flags') or ''",
          "399:                     args.flags.split() + \\",
          "400:                     flags.split()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d318150296e09a369202434fe6d6f70673422b6a",
      "candidate_info": {
        "commit_hash": "d318150296e09a369202434fe6d6f70673422b6a",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/d318150296e09a369202434fe6d6f70673422b6a",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "ChakraCore fix for servicing release 18-02B: CVE-2018-0835",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6878:                 Js::Throw::FatalInternalError();",
          "6879:             }",
          "6913:         }",
          "6914:         else",
          "6915:         {",
          "",
          "[Removed Lines]",
          "6886: #if defined(TARGET_64)",
          "6887:             if(compFn && JavascriptNativeFloatArray::Is(arr))",
          "6888:             {",
          "6889:                 arr = JavascriptNativeFloatArray::ConvertToVarArray((JavascriptNativeFloatArray*)arr);",
          "6890:                 JS_REENTRANT(jsReentLock, arr->Sort(compFn));",
          "6891:                 arr = arr->ConvertToNativeArrayInPlace<JavascriptNativeFloatArray, double>(arr);",
          "6892:             }",
          "6893:             else",
          "6894:             {",
          "6895:                 EnsureNonNativeArray(arr);",
          "6896:                 JS_REENTRANT(jsReentLock, arr->Sort(compFn));",
          "6897:             }",
          "6898: #else",
          "6899:             if(compFn && JavascriptNativeIntArray::Is(arr))",
          "6900:             {",
          "6902:                 arr = JavascriptNativeIntArray::ConvertToVarArray((JavascriptNativeIntArray*)arr);",
          "6903:                 JS_REENTRANT(jsReentLock, arr->Sort(compFn));",
          "6904:                 arr = arr->ConvertToNativeArrayInPlace<JavascriptNativeIntArray, int32>(arr);",
          "6905:             }",
          "6906:             else",
          "6907:             {",
          "6908:                 EnsureNonNativeArray(arr);",
          "6909:                 JS_REENTRANT(jsReentLock, arr->Sort(compFn));",
          "6910:             }",
          "6911: #endif",
          "",
          "[Added Lines]",
          "6881:             EnsureNonNativeArray(arr);",
          "6882:             JS_REENTRANT(jsReentLock, arr->Sort(compFn));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41278339ad82e1d81dc580395714860c4a01d660",
      "candidate_info": {
        "commit_hash": "41278339ad82e1d81dc580395714860c4a01d660",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/41278339ad82e1d81dc580395714860c4a01d660",
        "files": [
          "lib/Common/DataStructures/SList.h",
          "lib/Common/Memory/RecyclerPointers.h",
          "lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Base/ScriptContext.h",
          "lib/Runtime/Base/ThreadContext.cpp",
          "lib/Runtime/Language/DynamicProfileInfo.cpp",
          "lib/Runtime/Language/DynamicProfileInfo.h",
          "lib/Runtime/Library/ForInObjectEnumerator.h",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl",
          "tools/RecyclerChecker/RecyclerChecker.cpp"
        ],
        "message": "swb: annotate SList, Array\n\nChange SListNode to template on TAllocator. Annotate SList fields and fix\nall usages.\n\nAdd PointerValue() function to retrieve a pointer type field's pointer\nvalue. Simplifies casts.\n\nAdd SparseArraySegment<T>::From() function to simplify all\nSparseArraySegment casts after annotation.",
        "before_after_code_files": [
          "lib/Common/DataStructures/SList.h||lib/Common/DataStructures/SList.h",
          "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h",
          "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Base/ScriptContext.h||lib/Runtime/Base/ScriptContext.h",
          "lib/Runtime/Base/ThreadContext.cpp||lib/Runtime/Base/ThreadContext.cpp",
          "lib/Runtime/Language/DynamicProfileInfo.cpp||lib/Runtime/Language/DynamicProfileInfo.cpp",
          "lib/Runtime/Language/DynamicProfileInfo.h||lib/Runtime/Language/DynamicProfileInfo.h",
          "lib/Runtime/Library/ForInObjectEnumerator.h||lib/Runtime/Library/ForInObjectEnumerator.h",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl",
          "tools/RecyclerChecker/RecyclerChecker.cpp||tools/RecyclerChecker/RecyclerChecker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/DataStructures/SList.h||lib/Common/DataStructures/SList.h": [
          "File: lib/Common/DataStructures/SList.h -> lib/Common/DataStructures/SList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: typedef FakeCount DefaultCount;",
          "40: #endif",
          "45: class SListNodeBase",
          "46: {",
          "47: public:",
          "50: protected:",
          "59: };",
          "63: {",
          "68:     SListNode() : data() {}",
          "71:     template <typename TParam>",
          "75:     template <typename TParam1, typename TParam2>",
          "81: };",
          "85: {",
          "86: private:",
          "89:     bool IsHead(NodeBase const * node) const",
          "90:     {",
          "91:         return (node == this);",
          "92:     }",
          "93: public:",
          "94:     class Iterator",
          "95:     {",
          "",
          "[Removed Lines]",
          "42: template <typename TData, typename TCount = DefaultCount> class SListBase;",
          "43: template <typename TData> class SListNode;",
          "44: template <typename TData>",
          "48:     SListNodeBase<TData> * Next() const { return next.base; }",
          "49:     SListNodeBase<TData> *& Next() { return next.base; }",
          "53:     union",
          "54:     {",
          "55:         SListNodeBase<TData> * base;",
          "56:         SListNode<TData> * node;",
          "57:         SListBase<TData> * list;",
          "58:     } next;",
          "61: template <typename TData>",
          "62: class SListNode : public SListNodeBase<TData>",
          "64:     friend class SListBase<TData, FakeCount>;",
          "65:     friend class SListBase<TData, RealCount>;",
          "66: private:",
          "72:     SListNode(TParam param) : data(param) {}",
          "76:     SListNode(TParam1 param1, TParam2 param2) : data(param1, param2) {}",
          "79:     SListNode(TData const& data) : data(data) {};",
          "80:     TData data;",
          "83: template<typename TData, typename TCount>",
          "84: class SListBase : protected SListNodeBase<TData>, public TCount",
          "87:     typedef SListNodeBase<TData> NodeBase;",
          "88:     typedef SListNode<TData> Node;",
          "",
          "[Added Lines]",
          "42: template <typename TData,",
          "43:           typename TAllocator = ArenaAllocator,",
          "44:           typename TCount = DefaultCount> class SListBase;",
          "46: template <typename TAllocator>",
          "50:     Field(SListNodeBase*, TAllocator) Next() const { return next; }",
          "51:     Field(SListNodeBase*, TAllocator)& Next() { return next; }",
          "55:     Field(SListNodeBase*, TAllocator) next;",
          "58: template <typename TData, typename TAllocator>",
          "59: class SListNode : public SListNodeBase<TAllocator>",
          "61:     friend class SListBase<TData, TAllocator, FakeCount>;",
          "62:     friend class SListBase<TData, TAllocator, RealCount>;",
          "64: private:",
          "69:     SListNode(const TParam& param) : data(param) {}",
          "73:     SListNode(const TParam1& param1, const TParam2& param2) : data(param1, param2) {}",
          "75:     Field(TData, TAllocator) data;",
          "78: template<typename TData, typename TAllocator, typename TCount>",
          "79: class SListBase : protected SListNodeBase<TAllocator>, public TCount",
          "82:     typedef SListNodeBase<TAllocator> NodeBase;",
          "83:     typedef SListNode<TData, TAllocator> Node;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:             current = current->Next();",
          "120:             return true;",
          "121:         }",
          "123:         {",
          "124:             Assert(this->IsValid());",
          "125:             return ((Node *)current)->data;",
          "126:         }",
          "128:         {",
          "129:             Assert(this->IsValid());",
          "130:             return ((Node *)current)->data;",
          "",
          "[Removed Lines]",
          "122:         TData const& Data() const",
          "127:         TData& Data()",
          "",
          "[Added Lines]",
          "119:         Field(TData, TAllocator) const& Data() const",
          "124:         Field(TData, TAllocator)& Data()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     {",
          "139:     public:",
          "140:         EditingIterator() : Iterator(), last(nullptr) {};",
          "143:         bool Next()",
          "144:         {",
          "",
          "[Removed Lines]",
          "141:         EditingIterator(SListBase  * list) : Iterator(list), last(nullptr) {};",
          "",
          "[Added Lines]",
          "138:         EditingIterator(SListBase * list) : Iterator(list), last(nullptr) {};",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:             UnlinkCurrentNode();",
          "159:         }",
          "162:         void RemoveCurrent(TAllocator * allocator)",
          "163:         {",
          "164:             const NodeBase *dead = this->current;",
          "",
          "[Removed Lines]",
          "161:         template <typename TAllocator>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:             AllocatorFree(allocator, freeFunc, (Node *) dead, sizeof(Node));",
          "170:         }",
          "174:         {",
          "175:             Assert(last != nullptr);",
          "176:             Node * newNode = AllocatorNew(TAllocator, allocator, Node);",
          "",
          "[Removed Lines]",
          "172:         template <typename TAllocator>",
          "173:         TData * InsertNodeBefore(TAllocator * allocator)",
          "",
          "[Added Lines]",
          "168:         Field(TData, TAllocator) * InsertNodeBefore(TAllocator * allocator)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "180:                 const_cast<NodeBase *>(last)->Next() = newNode;",
          "181:                 const_cast<SListBase *>(this->list)->IncrementCount();",
          "182:                 last = newNode;",
          "184:             }",
          "185:             return nullptr;",
          "186:         }",
          "190:         {",
          "191:             Assert(last != nullptr);",
          "192:             Node * newNode = AllocatorNewNoThrow(TAllocator, allocator, Node);",
          "",
          "[Removed Lines]",
          "183:                 return &newNode->data;",
          "188:         template <typename TAllocator>",
          "189:         TData * InsertNodeBeforeNoThrow(TAllocator * allocator)",
          "",
          "[Added Lines]",
          "178:                 return AddressOf(newNode->data);",
          "183:         Field(TData, TAllocator) * InsertNodeBeforeNoThrow(TAllocator * allocator)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "196:                 const_cast<NodeBase *>(last)->Next() = newNode;",
          "197:                 const_cast<SListBase *>(this->list)->IncrementCount();",
          "198:                 last = newNode;",
          "200:             }",
          "201:             return nullptr;",
          "202:         }",
          "206:         {",
          "207:             Assert(last != nullptr);",
          "208:             Node * newNode = AllocatorNew(TAllocator, allocator, Node, param1, param2);",
          "",
          "[Removed Lines]",
          "199:                 return &newNode->data;",
          "204:         template <typename TAllocator, typename TParam1, typename TParam2>",
          "205:         TData * InsertNodeBefore(TAllocator * allocator, TParam1 param1, TParam2 param2)",
          "",
          "[Added Lines]",
          "193:                 return AddressOf(newNode->data);",
          "198:         template <typename TParam1, typename TParam2>",
          "199:         Field(TData, TAllocator) * InsertNodeBefore(TAllocator * allocator, TParam1 param1, TParam2 param2)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "212:                 const_cast<NodeBase *>(last)->Next() = newNode;",
          "213:                 const_cast<SListBase *>(this->list)->IncrementCount();",
          "214:                 last = newNode;",
          "216:             }",
          "217:             return nullptr;",
          "218:         }",
          "221:         bool InsertBefore(TAllocator * allocator, TData const& data)",
          "222:         {",
          "223:             Assert(last != nullptr);",
          "",
          "[Removed Lines]",
          "215:                 return &newNode->data;",
          "220:         template <typename TAllocator>",
          "",
          "[Added Lines]",
          "209:                 return AddressOf(newNode->data);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "265:         }",
          "266:     };",
          "268:     explicit SListBase()",
          "269:     {",
          "270:         Reset();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     inline Iterator GetIterator() const { return Iterator(this); }",
          "262:     inline EditingIterator GetEditingIterator() { return EditingIterator(this); }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "281:         this->SetCount(0);",
          "282:     }",
          "285:     __forceinline",
          "286:     void Clear(TAllocator * allocator)",
          "287:     {",
          "",
          "[Removed Lines]",
          "284:     template <typename TAllocator>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "299:         this->Reset();",
          "300:     }",
          "301:     bool Empty() const { return this->IsHead(this->Next()); }",
          "302:     bool HasOne() const { return !Empty() && this->IsHead(this->Next()->Next()); }",
          "303:     bool HasTwo() const { return !Empty() && this->IsHead(this->Next()->Next()->Next()); }",
          "313:     bool Prepend(TAllocator * allocator, TData const& data)",
          "314:     {",
          "315:         Node * newNode = AllocatorNew(TAllocator, allocator, Node, data);",
          "",
          "[Removed Lines]",
          "304:     TData const& Head() const { Assert(!Empty()); return ((Node *)this->Next())->data; }",
          "305:     TData& Head()",
          "306:     {",
          "307:         Assert(!Empty());",
          "308:         Node * node = this->next.node;",
          "309:         return node->data;",
          "310:     }",
          "312:     template <typename TAllocator>",
          "",
          "[Added Lines]",
          "300:     Field(TData, TAllocator) const& Head() const",
          "301:         { Assert(!Empty()); return ((Node *)this->Next())->data; }",
          "302:     Field(TData, TAllocator)& Head()",
          "303:         { Assert(!Empty()); return ((Node *)this->Next())->data; }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "323:         return false;",
          "324:     }",
          "327:     bool PrependNoThrow(TAllocator * allocator, TData const& data)",
          "328:     {",
          "329:         Node * newNode = AllocatorNewNoThrow(TAllocator, allocator, Node, data);",
          "",
          "[Removed Lines]",
          "326:     template <typename TAllocator>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "337:         return false;",
          "338:     }",
          "342:     {",
          "343:         Node * newNode = AllocatorNew(TAllocator, allocator, Node);",
          "344:         if (newNode)",
          "",
          "[Removed Lines]",
          "340:     template <typename TAllocator>",
          "341:     TData * PrependNode(TAllocator * allocator)",
          "",
          "[Added Lines]",
          "331:     Field(TData, TAllocator) * PrependNode(TAllocator * allocator)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "346:             newNode->Next() = this->Next();",
          "347:             this->Next() = newNode;",
          "348:             this->IncrementCount();",
          "350:         }",
          "351:         return nullptr;",
          "352:     }",
          "356:     {",
          "357:         Node * newNode = AllocatorNew(TAllocator, allocator, Node, param);",
          "358:         if (newNode)",
          "",
          "[Removed Lines]",
          "349:             return &newNode->data;",
          "354:     template <typename TAllocator, typename TParam>",
          "355:     TData * PrependNode(TAllocator * allocator, TParam param)",
          "",
          "[Added Lines]",
          "339:             return AddressOf(newNode->data);",
          "344:     template <typename TParam>",
          "345:     Field(TData, TAllocator) * PrependNode(TAllocator * allocator, TParam param)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "360:             newNode->Next() = this->Next();",
          "361:             this->Next() = newNode;",
          "362:             this->IncrementCount();",
          "364:         }",
          "365:         return nullptr;",
          "366:     }",
          "370:     {",
          "371:         Node * newNode = AllocatorNew(TAllocator, allocator, Node, param1, param2);",
          "372:         if (newNode)",
          "",
          "[Removed Lines]",
          "363:             return &newNode->data;",
          "368:     template <typename TAllocator, typename TParam1, typename TParam2>",
          "369:     TData * PrependNode(TAllocator * allocator, TParam1 param1, TParam2 param2)",
          "",
          "[Added Lines]",
          "353:             return AddressOf(newNode->data);",
          "358:     template <typename TParam1, typename TParam2>",
          "359:     Field(TData, TAllocator) * PrependNode(TAllocator * allocator, TParam1 param1, TParam2 param2)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "374:             newNode->Next() = this->Next();",
          "375:             this->Next() = newNode;",
          "376:             this->IncrementCount();",
          "378:         }",
          "379:         return nullptr;",
          "380:     }",
          "383:     void RemoveHead(TAllocator * allocator)",
          "384:     {",
          "385:         Assert(!this->Empty());",
          "",
          "[Removed Lines]",
          "377:             return &newNode->data;",
          "382:     template <typename TAllocator>",
          "",
          "[Added Lines]",
          "367:             return AddressOf(newNode->data);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "392:         this->DecrementCount();",
          "393:     }",
          "396:     bool Remove(TAllocator * allocator, TData const& data)",
          "397:     {",
          "398:         EditingIterator iter(this);",
          "",
          "[Removed Lines]",
          "395:     template <typename TAllocator>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "444:     template<class Fn>",
          "446:     {",
          "447:         Assert(this != toList);",
          "",
          "[Removed Lines]",
          "445:     TData* MoveTo(SListBase* toList, Fn predicate)",
          "",
          "[Added Lines]",
          "433:     Field(TData, TAllocator)* MoveTo(SListBase* toList, Fn predicate)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "451:         {",
          "452:             if (predicate(iter.Data()))",
          "453:             {",
          "455:                 iter.MoveCurrentTo(toList);",
          "456:                 return data;",
          "457:             }",
          "",
          "[Removed Lines]",
          "454:                 TData* data = &iter.Data();",
          "",
          "[Added Lines]",
          "442:                 Field(TData, TAllocator)* data = AddressOf(iter.Data());",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "460:     }",
          "462:     template<class Fn>",
          "464:     {",
          "465:         Iterator iter(this);",
          "466:         while(iter.Next())",
          "467:         {",
          "468:             if(predicate(iter.Data()))",
          "469:             {",
          "471:             }",
          "472:         }",
          "473:         return nullptr;",
          "",
          "[Removed Lines]",
          "463:     TData* Find(Fn predicate)",
          "470:                 return &iter.Data();",
          "",
          "[Added Lines]",
          "451:     Field(TData, TAllocator)* Find(Fn predicate)",
          "458:                 return AddressOf(iter.Data());",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "511:         return !iter2.Next();",
          "512:     }",
          "515:     bool CopyTo(TAllocator * allocator, SListBase& to) const",
          "516:     {",
          "517:         return CopyTo<DefaultCopyElement>(allocator, to);",
          "518:     }",
          "521:     bool CopyTo(TAllocator * allocator, SListBase& to) const",
          "522:     {",
          "523:         to.Clear(allocator);",
          "",
          "[Removed Lines]",
          "514:     template <typename TAllocator>",
          "520:     template <void (*CopyElement)(TData const& from, TData& to), typename TAllocator>",
          "",
          "[Added Lines]",
          "507:     template <void (*CopyElement)(",
          "508:         Field(TData, TAllocator) const& from, Field(TData, TAllocator)& to)>",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "542:     template <class Fn>",
          "543:     void Map(Fn fn) const",
          "544:     {",
          "546:     }",
          "548:     template <class Fn>",
          "",
          "[Removed Lines]",
          "545:         MapUntil([fn](TData& data) { fn(data); return false; });",
          "",
          "[Added Lines]",
          "533:         MapUntil([fn](Field(TData, TAllocator)& data) { fn(data); return false; });",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "558:         }",
          "559:         return false;",
          "560:     }",
          "561: private:",
          "565:     SListBase(SListBase const& list);",
          "566: };",
          "571: {",
          "572: };",
          "574: template <typename TData, typename TAllocator = ArenaAllocator, typename TCount = DefaultCount>",
          "576: {",
          "577: public:",
          "579:     {",
          "580:     public:",
          "583:         void RemoveCurrent()",
          "584:         {",
          "585:             __super::RemoveCurrent(Allocator());",
          "586:         }",
          "588:         {",
          "589:             return __super::InsertNodeBefore(Allocator());",
          "590:         }",
          "",
          "[Removed Lines]",
          "563:     static void DefaultCopyElement(TData const& from, TData& to) { to = from; }",
          "569: template <typename TData>",
          "570: class SListBaseCounted : public SListBase<TData, RealCount>",
          "575: class SList : public SListBase<TData, TCount>",
          "578:     class EditingIterator : public SListBase<TData, TCount>::EditingIterator",
          "581:         EditingIterator() : SListBase<TData, TCount>::EditingIterator() {}",
          "582:         EditingIterator(SList * list) : SListBase<TData, TCount>::EditingIterator(list) {}",
          "587:         TData * InsertNodeBefore()",
          "",
          "[Added Lines]",
          "551:     static void DefaultCopyElement(",
          "552:         Field(TData, TAllocator) const& from, Field(TData, TAllocator)& to)",
          "553:     {",
          "554:         to = from;",
          "555:     }",
          "562: template <typename TData, typename TAllocator = ArenaAllocator>",
          "563: class SListBaseCounted : public SListBase<TData, TAllocator, RealCount>",
          "568: class SList : public SListBase<TData, TAllocator, TCount>",
          "571:     class EditingIterator : public SListBase<TData, TAllocator, TCount>::EditingIterator",
          "574:         EditingIterator() : SListBase<TData, TAllocator, TCount>::EditingIterator() {}",
          "575:         EditingIterator(SList * list) : SListBase<TData, TAllocator, TCount>::EditingIterator(list) {}",
          "580:         Field(TData, TAllocator) * InsertNodeBefore()",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "599:         }",
          "600:     };",
          "602:     explicit SList(TAllocator * allocator) : allocator(allocator) {}",
          "603:     ~SList()",
          "604:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:     inline EditingIterator GetEditingIterator() { return EditingIterator(this); }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "612:     {",
          "613:         return __super::Prepend(allocator, data);",
          "614:     }",
          "616:     {",
          "617:         return __super::PrependNode(allocator);",
          "618:     }",
          "619:     template <typename TParam>",
          "621:     {",
          "622:         return __super::PrependNode(allocator, param);",
          "623:     }",
          "624:     template <typename TParam1, typename TParam2>",
          "626:     {",
          "627:         return __super::PrependNode(allocator, param1, param2);",
          "628:     }",
          "",
          "[Removed Lines]",
          "615:     TData * PrependNode()",
          "620:     TData * PrependNode(TParam param)",
          "625:     TData * PrependNode(TParam1 param1, TParam2 param2)",
          "",
          "[Added Lines]",
          "610:     Field(TData, TAllocator) * PrependNode()",
          "615:     Field(TData, TAllocator) * PrependNode(TParam param)",
          "620:     Field(TData, TAllocator) * PrependNode(TParam1 param1, TParam2 param2)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "649:         return data;",
          "650:     }",
          "653:     {",
          "654:         return this->Head();",
          "655:     }",
          "657:     {",
          "658:         return this->Head();",
          "659:     }",
          "660: private:",
          "662: };",
          "664: template <typename TData, typename TAllocator = ArenaAllocator>",
          "665: class SListCounted : public SList<TData, TAllocator, RealCount>",
          "666: {",
          "667: public:",
          "670: };",
          "672: #define _FOREACH_LIST_ENTRY_EX(List, T, Iterator, iter, data, list) \\",
          "674:     while (iter.Next()) \\",
          "675:     { \\",
          "676:         T& data = iter.Data();",
          "",
          "[Removed Lines]",
          "652:     TData const& Top() const",
          "656:     TData& Top()",
          "661:     TAllocator * allocator;",
          "668:     explicit SListCounted(TAllocator * allocator) : SList<TData, TAllocator, RealCount>(allocator) {}",
          "673:     _TYPENAME List<T>::Iterator iter(list); \\",
          "",
          "[Added Lines]",
          "647:     Field(TData, TAllocator) const& Top() const",
          "651:     Field(TData, TAllocator)& Top()",
          "657:     FieldNoBarrier(TAllocator *) allocator;",
          "664:     explicit SListCounted(TAllocator * allocator)",
          "665:         : SList<TData, TAllocator, RealCount>(allocator)",
          "666:     {}",
          "671:     auto iter = (list)->Get##Iterator(); \\",
          "",
          "---------------"
        ],
        "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h": [
          "File: lib/Common/Memory/RecyclerPointers.h -> lib/Common/Memory/RecyclerPointers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "424: inline T* AddressOf(T& val) { return _AddressOfType<T>::AddressOf(val); }",
          "425: template <class T>",
          "426: inline const T* AddressOf(const T& val) { return _AddressOfType<T>::AddressOf(val); }",
          "427: }  // namespace Memory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: template <class T>",
          "429: inline T* const& PointerValue(T* const& ptr) { return ptr; }",
          "430: template <class T>",
          "431: inline T* const& PointerValue(const WriteBarrierPtr<T>& ptr) { return ptr; }",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp": [
          "File: lib/Runtime/Base/ScriptContext.cpp -> lib/Runtime/Base/ScriptContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1161: #if DBG_DUMP || defined(DYNAMIC_PROFILE_STORAGE) || defined(RUNTIME_DATA_COLLECTION)",
          "1162:         if (DynamicProfileInfo::NeedProfileInfoList())",
          "1163:         {",
          "1165:         }",
          "1166: #endif",
          "1167: #endif",
          "",
          "[Removed Lines]",
          "1164:             this->profileInfoList.Root(RecyclerNew(this->GetRecycler(), SListBase<DynamicProfileInfo *>), recycler);",
          "",
          "[Added Lines]",
          "1164:             this->profileInfoList.Root(RecyclerNew(this->GetRecycler(), DynamicProfileInfoList), recycler);",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ScriptContext.h||lib/Runtime/Base/ScriptContext.h": [
          "File: lib/Runtime/Base/ScriptContext.h -> lib/Runtime/Base/ScriptContext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "840: #if ENABLE_PROFILE_INFO",
          "841: #if DBG_DUMP || defined(DYNAMIC_PROFILE_STORAGE) || defined(RUNTIME_DATA_COLLECTION)",
          "843: #endif",
          "844: #endif",
          "",
          "[Removed Lines]",
          "842:         RecyclerRootPtr<SListBase<DynamicProfileInfo *>> profileInfoList;",
          "",
          "[Added Lines]",
          "842:         RecyclerRootPtr<DynamicProfileInfoList> profileInfoList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1061:             }",
          "1062:         }",
          "1065: #endif",
          "1066: #endif",
          "",
          "[Removed Lines]",
          "1064:         SListBase<DynamicProfileInfo *> * GetProfileInfoList() { return profileInfoList; }",
          "",
          "[Added Lines]",
          "1064:         DynamicProfileInfoList * GetProfileInfoList() { return profileInfoList; }",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ThreadContext.cpp||lib/Runtime/Base/ThreadContext.cpp": [
          "File: lib/Runtime/Base/ThreadContext.cpp -> lib/Runtime/Base/ThreadContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2020:     this->TTDLog = HeapNew(TTD::EventLog, this);",
          "2021: }",
          "2024:     TTD::TTDInitializeForWriteLogStreamCallback writeInitializefp,",
          "2025:     TTD::TTDOpenResourceStreamCallback getResourceStreamfp, TTD::TTDReadBytesFromStreamCallback readBytesFromStreamfp,",
          "2026:     TTD::TTDWriteBytesToStreamCallback writeBytesToStreamfp, TTD::TTDFlushAndCloseStreamCallback flushAndCloseStreamfp,",
          "",
          "[Removed Lines]",
          "2023: void ThreadContext::InitHostFunctionsAndTTData(bool record, bool replay, bool debug,",
          "",
          "[Added Lines]",
          "2023: void ThreadContext::InitHostFunctionsAndTTData(bool record, bool replay, bool debug,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2037:     {",
          "2038:         this->TTDLog->InitForTTDRecord();",
          "2039:     }",
          "2041:     {",
          "2042:         this->TTDLog->InitForTTDReplay(this->TTDContext->TTDStreamFunctions, this->TTDContext->TTDUri.UriByteLength, this->TTDContext->TTDUri.UriBytes, debug);",
          "2043:     }",
          "",
          "[Removed Lines]",
          "2040:     else",
          "",
          "[Added Lines]",
          "2040:     else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3141:     {",
          "3142:         if (inlineCache == nullptr)",
          "3143:         {",
          "3145:             cacheCount++;",
          "3146:         }",
          "3147:     }",
          "",
          "[Removed Lines]",
          "3144:             iterator.RemoveCurrent(&this->inlineCacheThreadInfoAllocator);",
          "",
          "[Added Lines]",
          "3144:             iterator.RemoveCurrent();",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/DynamicProfileInfo.cpp||lib/Runtime/Language/DynamicProfileInfo.cpp": [
          "File: lib/Runtime/Language/DynamicProfileInfo.cpp -> lib/Runtime/Language/DynamicProfileInfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1614:         }",
          "1615:     }",
          "1618:     {",
          "1619:         AUTO_NESTED_HANDLED_EXCEPTION_TYPE(ExceptionType_DisableCheck);",
          "1620:         if (Configuration::Global.flags.Dump.IsEnabled(DynamicProfilePhase))",
          "1621:         {",
          "1623:             {",
          "1624:                 if (Configuration::Global.flags.Dump.IsEnabled(DynamicProfilePhase, info->GetFunctionBody()->GetSourceContextId(), info->GetFunctionBody()->GetLocalFunctionId()))",
          "1625:                 {",
          "",
          "[Removed Lines]",
          "1617:     void DynamicProfileInfo::DumpList(SListBase<DynamicProfileInfo *> * profileInfoList, ArenaAllocator * dynamicProfileInfoAllocator)",
          "1622:             FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo *, info, profileInfoList)",
          "",
          "[Added Lines]",
          "1617:     void DynamicProfileInfo::DumpList(",
          "1618:         DynamicProfileInfoList * profileInfoList, ArenaAllocator * dynamicProfileInfoAllocator)",
          "1623:             FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo * const, info, profileInfoList)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1632:         if (Configuration::Global.flags.Dump.IsEnabled(JITLoopBodyPhase) && !Configuration::Global.flags.Dump.IsEnabled(DynamicProfilePhase))",
          "1633:         {",
          "1635:             {",
          "1636:                 if (info->functionBody->GetLoopCount() > 0)",
          "1637:                 {",
          "",
          "[Removed Lines]",
          "1634:             FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo *, info, profileInfoList)",
          "",
          "[Added Lines]",
          "1635:             FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo * const, info, profileInfoList)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1652:             uint elementAccessSaved = 0;",
          "1653:             uint fldAccessSaved = 0;",
          "1656:             {",
          "1657:                 bool hasHotLoop = false;",
          "1658:                 if (info->functionBody->DoJITLoopBody())",
          "",
          "[Removed Lines]",
          "1655:             FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo *, info, profileInfoList)",
          "",
          "[Added Lines]",
          "1656:             FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo * const, info, profileInfoList)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2060:         {",
          "2061:             FunctionBody * functionBody = info->GetFunctionBody();",
          "2062:             SourceDynamicProfileManager * sourceDynamicProfileManager = functionBody->GetSourceContextInfo()->sourceDynamicProfileManager;",
          "",
          "[Removed Lines]",
          "2058:         SListBase<DynamicProfileInfo *> * profileInfoList = scriptContext->GetProfileInfoList();",
          "2059:         FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo *, info, profileInfoList)",
          "",
          "[Added Lines]",
          "2059:         DynamicProfileInfoList * profileInfoList = scriptContext->GetProfileInfoList();",
          "2060:         FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo * const, info, profileInfoList)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2146:             });",
          "2147:         }",
          "2150:         {",
          "2151:             WriteData((byte)1, file);",
          "2152:             WriteData(info->functionBody, file);",
          "",
          "[Removed Lines]",
          "2149:         FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo *, info, scriptContext->GetProfileInfoList())",
          "",
          "[Added Lines]",
          "2150:         FOREACH_SLISTBASE_ENTRY(DynamicProfileInfo * const, info, scriptContext->GetProfileInfoList())",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/DynamicProfileInfo.h||lib/Runtime/Language/DynamicProfileInfo.h": [
          "File: lib/Runtime/Language/DynamicProfileInfo.h -> lib/Runtime/Language/DynamicProfileInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:         static byte const NotNativeFloatBit = 2;",
          "319:     };",
          "321:     class DynamicProfileInfo",
          "322:     {",
          "323:     public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:     class DynamicProfileInfo;",
          "322:     typedef SListBase<DynamicProfileInfo*, Recycler> DynamicProfileInfoList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527: #endif",
          "528:         static JavascriptMethod EnsureDynamicProfileInfo(Js::ScriptFunction * function);",
          "529: #if DBG_DUMP",
          "531:         static void DumpProfiledValue(char16 const * name, uint * value, uint count);",
          "532:         static void DumpProfiledValue(char16 const * name, ValueType * value, uint count);",
          "533:         static void DumpProfiledValue(char16 const * name, CallSiteInfo * callSiteInfo, uint count);",
          "",
          "[Removed Lines]",
          "530:         static void DumpList(SListBase<DynamicProfileInfo *> * profileInfoList, ArenaAllocator * dynamicProfileInfoAllocator);",
          "",
          "[Added Lines]",
          "533:         static void DumpList(DynamicProfileInfoList * profileInfoList, ArenaAllocator * dynamicProfileInfoAllocator);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ForInObjectEnumerator.h||lib/Runtime/Library/ForInObjectEnumerator.h": [
          "File: lib/Runtime/Library/ForInObjectEnumerator.h -> lib/Runtime/Library/ForInObjectEnumerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:             Field(RecyclableObject *) currentObject;",
          "17:             Field(RecyclableObject *) firstPrototype;",
          "18:             Field(BVSparse<Recycler>) propertyIds;",
          "20:         } *shadowData;",
          "",
          "[Removed Lines]",
          "19:             Field(SListBase<Js::PropertyRecord const *>) newPropertyStrings;",
          "",
          "[Added Lines]",
          "19:             Field(SListBase<Js::PropertyRecord const *, Recycler>) newPropertyStrings;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:             if (node->IsLeaf())",
          "160:             {",
          "162:             }",
          "163:             else",
          "164:             {",
          "",
          "[Removed Lines]",
          "161:                 matchOrNext = (i == 0 ? node->segments[0] : prev->next);",
          "",
          "[Added Lines]",
          "161:                 matchOrNext = (i == 0 ? node->segments[0] : PointerValue(prev->next));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:                 newNode.children[j] = child->children[j+MinDegree];",
          "271:             }",
          "272:         }",
          "273:         child->segmentCount = MinKeys;",
          "",
          "[Removed Lines]",
          "269:                 child->children[j+MinDegree].segments = NULL;",
          "270:                 child->children[j+MinDegree].children = NULL;",
          "",
          "[Added Lines]",
          "269:                 child->children[j+MinDegree].segments = nullptr;",
          "270:                 child->children[j+MinDegree].children = nullptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:         Var fill = Js::JavascriptArray::MissingItem;",
          "408:         for (uint i = 0; i < size; i++)",
          "409:         {",
          "411:         }",
          "412:     }",
          "",
          "[Removed Lines]",
          "410:             ((SparseArraySegment<Var>*)head)->elements[i] = fill;",
          "",
          "[Added Lines]",
          "410:             SparseArraySegment<Var>::From(head)->elements[i] = fill;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425:     {",
          "426:         SetHeadAndLastUsedSegment(DetermineInlineHeadSegmentPointer<JavascriptNativeIntArray, 0, false>(this));",
          "427:         head->size = size;",
          "429:     }",
          "431:     JavascriptNativeFloatArray::JavascriptNativeFloatArray(uint32 length, uint32 size, DynamicType * type)",
          "",
          "[Removed Lines]",
          "428:         ((SparseArraySegment<int32>*)head)->FillSegmentBuffer(0, size);",
          "",
          "[Added Lines]",
          "428:         SparseArraySegment<int32>::From(head)->FillSegmentBuffer(0, size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "442:     {",
          "443:         SetHeadAndLastUsedSegment(DetermineInlineHeadSegmentPointer<JavascriptNativeFloatArray, 0, false>(this));",
          "444:         head->size = size;",
          "446:     }",
          "448:     bool JavascriptArray::Is(Var aValue)",
          "",
          "[Removed Lines]",
          "445:         ((SparseArraySegment<double>*)head)->FillSegmentBuffer(0, size);",
          "",
          "[Added Lines]",
          "445:         SparseArraySegment<double>::From(head)->FillSegmentBuffer(0, size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "673:     {",
          "674:         Assert(index < head->length);",
          "677:     }",
          "679:     bool JavascriptArray::IsMissingHeadSegmentItem(const uint32 index) const",
          "",
          "[Removed Lines]",
          "676:         return SparseArraySegment<T>::IsMissingItem(&static_cast<SparseArraySegment<T> *>(head)->elements[index]);",
          "",
          "[Added Lines]",
          "676:         return SparseArraySegment<T>::IsMissingItem(&SparseArraySegment<T>::From(head)->elements[index]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "770:         JavascriptArray *arr = scriptContext->GetLibrary()->CreateArrayLiteral(elementCount);",
          "773:         Assert(elementCount <= head->length);",
          "774:         CopyArray(head->elements, head->length, elements, elementCount);",
          "",
          "[Removed Lines]",
          "772:         SparseArraySegment<Var> *head = (SparseArraySegment<Var>*)arr->head;",
          "",
          "[Added Lines]",
          "772:         SparseArraySegment<Var> *head = SparseArraySegment<Var>::From(arr->head);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "786:         JavascriptArray *const array = static_cast<JavascriptArray *>(OP_NewScArray(elementCount, scriptContext));",
          "787:         array->SetHasNoMissingValues(false);",
          "789:         head->FillSegmentBuffer(0, elementCount);",
          "791:         return array;",
          "",
          "[Removed Lines]",
          "788:         SparseArraySegment<Var> *head = (SparseArraySegment<Var>*)array->head;",
          "",
          "[Added Lines]",
          "788:         SparseArraySegment<Var> *head = SparseArraySegment<Var>::From(array->head);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "816:     {",
          "817:         uint32 count = ints->count;",
          "818:         JavascriptArray *arr = scriptContext->GetLibrary()->CreateArrayLiteral(count);",
          "820:         Assert(count > 0 && count == head->length);",
          "821:         for (uint i = 0; i < count; i++)",
          "822:         {",
          "",
          "[Removed Lines]",
          "819:         SparseArraySegment<Var> *head = (SparseArraySegment<Var>*)arr->head;",
          "",
          "[Added Lines]",
          "819:         SparseArraySegment<Var> *head = SparseArraySegment<Var>::From(arr->head);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "848: #endif",
          "849:             {",
          "850:                 arr = scriptContext->GetLibrary()->CreateNativeIntArrayLiteral(count);",
          "852:                 Assert(count > 0 && count == head->length);",
          "853:                 CopyArray(head->elements, head->length, ints->elements, count);",
          "854:             }",
          "",
          "[Removed Lines]",
          "851:                 SparseArraySegment<int32> *head = static_cast<SparseArraySegment<int32>*>(arr->head);",
          "",
          "[Added Lines]",
          "851:                 SparseArraySegment<int32> *head = SparseArraySegment<int32>::From(arr->head);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "861:         if (arrayInfo->IsNativeFloatArray())",
          "862:         {",
          "863:             JavascriptNativeFloatArray *arr = scriptContext->GetLibrary()->CreateNativeFloatArrayLiteral(count);",
          "865:             Assert(count > 0 && count == head->length);",
          "866:             for (uint i = 0; i < count; i++)",
          "867:             {",
          "",
          "[Removed Lines]",
          "864:             SparseArraySegment<double> *head = (SparseArraySegment<double>*)arr->head;",
          "",
          "[Added Lines]",
          "864:             SparseArraySegment<double> *head = SparseArraySegment<double>::From(arr->head);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "880:     {",
          "881:         uint32 count = doubles->count;",
          "882:         JavascriptArray *arr = scriptContext->GetLibrary()->CreateArrayLiteral(count);",
          "884:         Assert(count > 0 && count == head->length);",
          "885:         for (uint i = 0; i < count; i++)",
          "886:         {",
          "",
          "[Removed Lines]",
          "883:         SparseArraySegment<Var> *head = (SparseArraySegment<Var>*)arr->head;",
          "",
          "[Added Lines]",
          "883:         SparseArraySegment<Var> *head = SparseArraySegment<Var>::From(arr->head);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "907:             arrayInfo->SetIsNotNativeIntArray();",
          "908:             uint32 count = doubles->count;",
          "909:             JavascriptNativeFloatArray *arr = scriptContext->GetLibrary()->CreateNativeFloatArrayLiteral(count);",
          "911:             Assert(count > 0 && count == head->length);",
          "912:             CopyArray(head->elements, head->length, doubles->elements, count);",
          "913:             arr->SetArrayProfileInfo(weakFuncRef, arrayInfo);",
          "",
          "[Removed Lines]",
          "910:             SparseArraySegment<double> *head = (SparseArraySegment<double>*)arr->head;",
          "",
          "[Added Lines]",
          "910:             SparseArraySegment<double> *head = SparseArraySegment<double>::From(arr->head);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2279:     template<typename T>",
          "2280:     void JavascriptArray::SetArrayLiteralItem(uint32 index, T value)",
          "2281:     {",
          "2284:         Assert(segment->left == 0);",
          "2285:         Assert(index < segment->length);",
          "",
          "[Removed Lines]",
          "2282:         SparseArraySegment<T> * segment = (SparseArraySegment<T>*)this->head;",
          "",
          "[Added Lines]",
          "2282:         SparseArraySegment<T> * segment = SparseArraySegment<T>::From(this->head);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2543:         SegmentBTreeRoot * segmentMap = GetSegmentMap();",
          "2544:         if(!useSegmentMap || !segmentMap)",
          "2545:         {",
          "2547:         }",
          "2549:         if(seg)",
          "",
          "[Removed Lines]",
          "2546:             return seg ? seg : this->head;",
          "",
          "[Added Lines]",
          "2546:             return seg ? seg : PointerValue(this->head);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2611:                     }",
          "2612:                 }",
          "2613:             }",
          "2615:             if (current != NULL)",
          "2616:             {",
          "2617:                 if (candidateIndex < current->left)",
          "",
          "[Removed Lines]",
          "2614:             current = (SparseArraySegment<T>*)current->next;",
          "",
          "[Added Lines]",
          "2614:             current = SparseArraySegment<T>::From(current->next);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2660:             SparseArraySegmentBase* next = GetBeginLookupSegment(newLength - 1); // head, or next.left < newLength",
          "2663:             while(next != nullptr)",
          "2664:             {",
          "",
          "[Removed Lines]",
          "2661:             SparseArraySegmentBase** prev = &head;",
          "",
          "[Added Lines]",
          "2661:             Field(SparseArraySegmentBase*)* prev = AddressOf(head);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2683:                 }",
          "2684:                 else",
          "2685:                 {",
          "2687:                     next = next->next;",
          "2688:                 }",
          "2689:             }",
          "",
          "[Removed Lines]",
          "2686:                     prev = &next->next;",
          "",
          "[Added Lines]",
          "2686:                     prev = AddressOf(next->next);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2877:                 }",
          "2878:                 break;",
          "2879:             }",
          "2881:         }",
          "2882: #ifdef VALIDATE_ARRAY",
          "2883:         ValidateArray();",
          "",
          "[Removed Lines]",
          "2880:             next = (SparseArraySegment<T>*)next->next;",
          "",
          "[Added Lines]",
          "2880:             next = SparseArraySegment<T>::From(next->next);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5278:             {",
          "5279:                 if (pArr->head && pArr->head->next && SparseArraySegmentBase::IsLeafSegment(pArr->head, recycler))",
          "5280:                 {",
          "5282:                 }",
          "5283:                 pArr->EnsureHeadStartsFromZero<int32>(recycler);",
          "5284:             }",
          "",
          "[Removed Lines]",
          "5281:                     pArr->ReallocNonLeafSegment((SparseArraySegment<int32>*)pArr->head, pArr->head->next);",
          "",
          "[Added Lines]",
          "5281:                     pArr->ReallocNonLeafSegment(SparseArraySegment<int32>::From(pArr->head), pArr->head->next);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5286:             {",
          "5287:                 if (pArr->head && pArr->head->next && SparseArraySegmentBase::IsLeafSegment(pArr->head, recycler))",
          "5288:                 {",
          "5290:                 }",
          "5291:                 pArr->EnsureHeadStartsFromZero<double>(recycler);",
          "5292:             }",
          "",
          "[Removed Lines]",
          "5289:                     pArr->ReallocNonLeafSegment((SparseArraySegment<double>*)pArr->head, pArr->head->next);",
          "",
          "[Added Lines]",
          "5289:                     pArr->ReallocNonLeafSegment(SparseArraySegment<double>::From(pArr->head), pArr->head->next);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5406:     {",
          "5407:         Recycler * recycler = scriptContext->GetRecycler();",
          "5410:         while (next)",
          "5411:         {",
          "5412:             next->left--;",
          "5414:         }",
          "5418:         if (next && (pArr->head->size > next->left))",
          "5419:         {",
          "5420:             AssertMsg(pArr->head->left == 0, \"Array always points to a head starting at index 0\");",
          "5421:             AssertMsg(pArr->head->size == next->left + 1, \"Shift next->left overlaps current segment by more than 1 element\");",
          "5425:             if (next->length != 0)",
          "5426:             {",
          "",
          "[Removed Lines]",
          "5409:         SparseArraySegment<T>* next = (SparseArraySegment<T>*)pArr->head->next;",
          "5413:             next = (SparseArraySegment<T>*)next->next;",
          "5417:         next = (SparseArraySegment<T>*)pArr->head->next;",
          "5423:             SparseArraySegment<T> *head = (SparseArraySegment<T>*)pArr->head;",
          "",
          "[Added Lines]",
          "5409:         SparseArraySegment<T>* next = SparseArraySegment<T>::From(pArr->head->next);",
          "5413:             next = SparseArraySegment<T>::From(next->next);",
          "5417:         next = SparseArraySegment<T>::From(pArr->head->next);",
          "5423:             SparseArraySegment<T> *head = SparseArraySegment<T>::From(pArr->head);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5524:             {",
          "5525:                 if(isIntArray)",
          "5526:                 {",
          "5529:                     if(SparseArraySegment<int32>::IsMissingItem(&nativeResult))",
          "5530:                     {",
          "",
          "[Removed Lines]",
          "5527:                     int32 nativeResult = ((SparseArraySegment<int32>*)pArr->head)->GetElement(0);",
          "",
          "[Added Lines]",
          "5527:                     int32 nativeResult = SparseArraySegment<int32>::From(pArr->head)->GetElement(0);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5534:                     {",
          "5535:                         res = Js::JavascriptNumber::ToVar(nativeResult, scriptContext);",
          "5536:                     }",
          "5538:                 }",
          "5539:                 else if (isFloatArray)",
          "5540:                 {",
          "5543:                     if(SparseArraySegment<double>::IsMissingItem(&nativeResult))",
          "5544:                     {",
          "",
          "[Removed Lines]",
          "5537:                     ((SparseArraySegment<int32>*)pArr->head)->RemoveElement(recycler, 0);",
          "5541:                     double nativeResult = ((SparseArraySegment<double>*)pArr->head)->GetElement(0);",
          "",
          "[Added Lines]",
          "5537:                     SparseArraySegment<int32>::From(pArr->head)->RemoveElement(recycler, 0);",
          "5541:                     double nativeResult = SparseArraySegment<double>::From(pArr->head)->GetElement(0);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5548:                     {",
          "5549:                         res = Js::JavascriptNumber::ToVarNoCheck(nativeResult, scriptContext);",
          "5550:                     }",
          "5552:                 }",
          "5553:                 else",
          "5554:                 {",
          "5557:                     if(SparseArraySegment<Var>::IsMissingItem(&res))",
          "5558:                     {",
          "",
          "[Removed Lines]",
          "5551:                     ((SparseArraySegment<double>*)pArr->head)->RemoveElement(recycler, 0);",
          "5555:                     res = ((SparseArraySegment<Var>*)pArr->head)->GetElement(0);",
          "",
          "[Added Lines]",
          "5551:                     SparseArraySegment<double>::From(pArr->head)->RemoveElement(recycler, 0);",
          "5555:                     res = SparseArraySegment<Var>::From(pArr->head)->GetElement(0);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5562:                     {",
          "5563:                         res = CrossSite::MarshalVar(scriptContext, res);",
          "5564:                     }",
          "5566:                 }",
          "5567:             }",
          "",
          "[Removed Lines]",
          "5565:                     ((SparseArraySegment<Var>*)pArr->head)->RemoveElement(recycler, 0);",
          "",
          "[Added Lines]",
          "5565:                     SparseArraySegment<Var>::From(pArr->head)->RemoveElement(recycler, 0);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5684:     template<typename T>",
          "5685:     void JavascriptArray::SliceHelper(JavascriptArray* pArr,  JavascriptArray* pnewArr, uint32 start, uint32 newLen)",
          "5686:     {",
          "5691:         CopyArray(pnewHeadSeg->elements, newLen, headSeg->elements + start, newLen);",
          "",
          "[Removed Lines]",
          "5687:         SparseArraySegment<T>* headSeg = (SparseArraySegment<T>*)pArr->head;",
          "5688:         SparseArraySegment<T>* pnewHeadSeg = (SparseArraySegment<T>*)pnewArr->head;",
          "",
          "[Added Lines]",
          "5687:         SparseArraySegment<T>* headSeg = SparseArraySegment<T>::From(pArr->head);",
          "5688:         SparseArraySegment<T>* pnewHeadSeg = SparseArraySegment<T>::From(pnewArr->head);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6223:         ClearSegmentMap();",
          "6225:         uint32 countUndefined = 0;",
          "6229:         uint32 saveLength = length;",
          "",
          "[Removed Lines]",
          "6226:         SparseArraySegment<Var>* startSeg = (SparseArraySegment<Var>*)head;",
          "",
          "[Added Lines]",
          "6226:         SparseArraySegment<Var>* startSeg = SparseArraySegment<Var>::From(head);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6267:                     {",
          "6268:                         allElements = SparseArraySegment<Var>::CopySegment(recycler, allElements, nextIndex, next, next->left, next->length);",
          "6269:                     }",
          "6271:                     nextIndex = allElements->length;",
          "6273: #ifdef VALIDATE_ARRAY",
          "",
          "[Removed Lines]",
          "6270:                     next = (SparseArraySegment<Var>*)next->next;",
          "",
          "[Added Lines]",
          "6270:                     next = SparseArraySegment<Var>::From(next->next);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6305:             uint32 index = head->length - 1;",
          "6306:             while (countNull < head->length)",
          "6307:             {",
          "6309:                 {",
          "6310:                     break;",
          "6311:                 }",
          "",
          "[Removed Lines]",
          "6308:                 if (((SparseArraySegment<Var>*)head)->elements[index] != NULL)",
          "",
          "[Added Lines]",
          "6308:                 if (SparseArraySegment<Var>::From(head)->elements[index] != NULL)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6322:             uint32 newLength = head->length + countUndefined;",
          "6323:             if (newLength > head->size)",
          "6324:             {",
          "6326:             }",
          "6328:             Var undefined = scriptContext->GetLibrary()->GetUndefined();",
          "6329:             for (uint32 i = head->length; i < newLength; i++)",
          "6330:             {",
          "6332:             }",
          "6333:             head->length = newLength;",
          "6334:         }",
          "",
          "[Removed Lines]",
          "6325:                 head = ((SparseArraySegment<Var>*)head)->GrowByMin(recycler, newLength - head->size);",
          "6331:                 ((SparseArraySegment<Var>*)head)->elements[i] = undefined;",
          "",
          "[Added Lines]",
          "6325:                 head = SparseArraySegment<Var>::From(head)->GrowByMin(recycler, newLength - head->size);",
          "6331:                 SparseArraySegment<Var>::From(head)->elements[i] = undefined;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6524:                     uint32 removeIndex = sortArray->head->length;",
          "6525:                     for (uint32 i = 0; i < removeIndex; i++)",
          "6526:                     {",
          "6529:                     }",
          "6530:                     for (int i = 0; i < indexList->Count(); i++)",
          "6531:                     {",
          "",
          "[Removed Lines]",
          "6527:                         AssertMsg(!SparseArraySegment<Var>::IsMissingItem(&((SparseArraySegment<Var>*)sortArray->head)->elements[i]), \"No gaps expected in sorted array\");",
          "6528:                         h.ThrowTypeErrorOnFailure(JavascriptOperators::SetItem(pObj, pObj, i, ((SparseArraySegment<Var>*)sortArray->head)->elements[i], scriptContext));",
          "",
          "[Added Lines]",
          "6527:                         AssertMsg(!SparseArraySegment<Var>::IsMissingItem(&SparseArraySegment<Var>::From(sortArray->head)->elements[i]), \"No gaps expected in sorted array\");",
          "6528:                         h.ThrowTypeErrorOnFailure(JavascriptOperators::SetItem(pObj, pObj, i, SparseArraySegment<Var>::From(sortArray->head)->elements[i], scriptContext));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6747:                 {",
          "6748:                     if (isIntArray)",
          "6749:                     {",
          "6751:                     }",
          "6752:                     else if (isFloatArray)",
          "6753:                     {",
          "6755:                     }",
          "6756:                     else",
          "6757:                     {",
          "6759:                     }",
          "",
          "[Removed Lines]",
          "6750:                         ArraySegmentSpliceHelper<int32>(newArr, (SparseArraySegment<int32>*)pArr->head, (SparseArraySegment<int32>**)&pArr->head, start, deleteLen, insertArgs, insertLen, recycler);",
          "6754:                         ArraySegmentSpliceHelper<double>(newArr, (SparseArraySegment<double>*)pArr->head, (SparseArraySegment<double>**)&pArr->head, start, deleteLen, insertArgs, insertLen, recycler);",
          "6758:                         ArraySegmentSpliceHelper<Var>(newArr, (SparseArraySegment<Var>*)pArr->head, (SparseArraySegment<Var>**)&pArr->head, start, deleteLen, insertArgs, insertLen, recycler);",
          "",
          "[Added Lines]",
          "6750:                         ArraySegmentSpliceHelper<int32>(newArr, SparseArraySegment<int32>::From(pArr->head), (SparseArraySegment<int32>**)AddressOf(pArr->head), start, deleteLen, insertArgs, insertLen, recycler);",
          "6754:                         ArraySegmentSpliceHelper<double>(newArr, SparseArraySegment<double>::From(pArr->head), (SparseArraySegment<double>**)AddressOf(pArr->head), start, deleteLen, insertArgs, insertLen, recycler);",
          "6758:                         ArraySegmentSpliceHelper<Var>(newArr, SparseArraySegment<Var>::From(pArr->head), (SparseArraySegment<Var>**)AddressOf(pArr->head), start, deleteLen, insertArgs, insertLen, recycler);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6874:         if (headDeleteLen != 0)",
          "6875:         {",
          "6876:             pnewArr->InvalidateLastUsedSegment();",
          "6878:         }",
          "6880:         if (newHeadLen != 0)",
          "",
          "[Removed Lines]",
          "6877:             pnewArr->head = SparseArraySegment<T>::CopySegment(recycler, (SparseArraySegment<T>*)pnewArr->head, 0, seg, start, headDeleteLen);",
          "",
          "[Added Lines]",
          "6877:             pnewArr->head = SparseArraySegment<T>::CopySegment(recycler, SparseArraySegment<T>::From(pnewArr->head), 0, seg, start, headDeleteLen);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "6933:         Recycler *recycler  = scriptContext->GetRecycler();",
          "6937:         SparseArraySegmentBase* savePrev = nullptr;",
          "6939:         Assert(pArr->head); // We should never have a null head.",
          "6940:         pArr->EnsureHead<T>();",
          "6943:         const uint32 limit = start + deleteLen;",
          "6944:         uint32 rightLimit;",
          "",
          "[Removed Lines]",
          "6935:         SparseArraySegmentBase** prevSeg  = &pArr->head;        // holds the next pointer of previous",
          "6936:         SparseArraySegmentBase** prevPrevSeg  = &pArr->head;    // this holds the previous pointer to prevSeg dirty trick.",
          "6941:         SparseArraySegment<T>* startSeg = (SparseArraySegment<T>*)pArr->head;",
          "",
          "[Added Lines]",
          "6935:         Field(SparseArraySegmentBase*)* prevSeg  = AddressOf(pArr->head);        // holds the next pointer of previous",
          "6936:         Field(SparseArraySegmentBase*)* prevPrevSeg  = AddressOf(pArr->head);    // this holds the previous pointer to prevSeg dirty trick.",
          "6941:         SparseArraySegment<T>* startSeg = SparseArraySegment<T>::From(pArr->head);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6952:         {",
          "6953:             savePrev = startSeg;",
          "6954:             prevPrevSeg = prevSeg;",
          "6958:             if (startSeg)",
          "6959:             {",
          "",
          "[Removed Lines]",
          "6955:             prevSeg = &startSeg->next;",
          "6956:             startSeg = (SparseArraySegment<T>*)startSeg->next;",
          "",
          "[Added Lines]",
          "6955:             prevSeg = AddressOf(startSeg->next);",
          "6956:             startSeg = SparseArraySegment<T>::From(startSeg->next);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "7019:             else",
          "7020:             {",
          "7021:                 SparseArraySegment<T>* newHeadSeg = nullptr; // pnewArr->head is null",
          "",
          "[Removed Lines]",
          "7022:                 SparseArraySegmentBase** prevNewHeadSeg = &(pnewArr->head);",
          "",
          "[Added Lines]",
          "7022:                 Field(SparseArraySegmentBase*)* prevNewHeadSeg = AddressOf(pnewArr->head);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "7046:                         newHeadSeg = SparseArraySegment<T>::CopySegment(recycler, newHeadSeg, 0, startSeg, start, headDeleteLen);",
          "7047:                         newHeadSeg->next = nullptr;",
          "7050:                         startSeg->Truncate(start);",
          "7051:                     }",
          "7052:                     savePrev = startSeg;",
          "7053:                     prevPrevSeg = prevSeg;",
          "7056:                 }",
          "",
          "[Removed Lines]",
          "7049:                         prevNewHeadSeg = &newHeadSeg->next;",
          "7054:                     prevSeg = &startSeg->next;",
          "7055:                     startSeg = (SparseArraySegment<T>*)startSeg->next;",
          "",
          "[Added Lines]",
          "7049:                         prevNewHeadSeg = AddressOf(newHeadSeg->next);",
          "7054:                     prevSeg = AddressOf(startSeg->next);",
          "7055:                     startSeg = SparseArraySegment<T>::From(startSeg->next);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "7073:                         }",
          "7074:                         newHeadSeg = SparseArraySegment<T>::CopySegment(recycler, newHeadSeg, 0, startSeg, start, headDeleteLen);",
          "7081:                     }",
          "7083:                     else if (startSeg->left == 0 && startSeg->length == 0)",
          "7084:                     {",
          "7085:                         Assert(startSeg->size != 0);",
          "7088:                     }",
          "7089:                 }",
          "",
          "[Removed Lines]",
          "7076:                         prevNewHeadSeg = &newHeadSeg->next;",
          "7080:                         startSeg = (SparseArraySegment<T>*)startSeg->next;",
          "7087:                         startSeg = (SparseArraySegment<T>*)startSeg->next;",
          "",
          "[Added Lines]",
          "7076:                         prevNewHeadSeg = AddressOf(newHeadSeg->next);",
          "7080:                         startSeg = SparseArraySegment<T>::From(startSeg->next);",
          "7087:                         startSeg = SparseArraySegment<T>::From(startSeg->next);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "7097:                     startSeg->left = startSeg->left - start;",
          "7098:                     startSeg->next = nullptr;",
          "",
          "[Removed Lines]",
          "7100:                     prevNewHeadSeg = &startSeg->next;",
          "",
          "[Added Lines]",
          "7100:                     prevNewHeadSeg = AddressOf(startSeg->next);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "7117:                     savePrev = pArr->head;",
          "7118:                     prevPrevSeg = prevSeg;",
          "7120:                     dummyHeadNodeInserted = true;",
          "7121:                 }",
          "",
          "[Removed Lines]",
          "7119:                     prevSeg = &pArr->head->next;",
          "",
          "[Added Lines]",
          "7119:                     prevSeg = AddressOf(pArr->head->next);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "7130:                     newHeadSeg = SparseArraySegment<T>::CopySegment(recycler, newHeadSeg, startSeg->left -  start, startSeg, startSeg->left, headDeleteLen);",
          "7131:                     newHeadSeg->next = nullptr;",
          "7136:                     MoveArray(startSeg->elements, startSeg->elements + headDeleteLen, startSeg->length - headDeleteLen);",
          "",
          "[Removed Lines]",
          "7133:                     prevNewHeadSeg = &newHeadSeg->next;",
          "",
          "[Added Lines]",
          "7133:                     prevNewHeadSeg = AddressOf(newHeadSeg->next);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "7147:                     pArr->head = startSeg;",
          "7148:                     savePrev = nullptr;",
          "7150:                 }",
          "7152:                 while (startSeg)",
          "",
          "[Removed Lines]",
          "7149:                     prevSeg = &pArr->head;",
          "",
          "[Added Lines]",
          "7149:                     prevSeg = AddressOf(pArr->head);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "7156:                     {",
          "7157:                         startSeg->EnsureSizeInBound();",
          "7158:                     }",
          "7160:                 }",
          "7161:             }",
          "7162:         }",
          "",
          "[Removed Lines]",
          "7159:                     startSeg = (SparseArraySegment<T>*)startSeg->next;",
          "",
          "[Added Lines]",
          "7159:                     startSeg = SparseArraySegment<T>::From(startSeg->next);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "7413:         if (nextToHeadSeg == nullptr)",
          "7414:         {",
          "7415:             pArr->EnsureHead<T>();",
          "7417:         }",
          "7418:         else",
          "7419:         {",
          "7421:         }",
          "7423:     }",
          "",
          "[Removed Lines]",
          "7416:             pArr->head = ((SparseArraySegment<T>*)pArr->head)->GrowByMin(recycler, unshiftElements);",
          "7420:             pArr->head = ((SparseArraySegment<T>*)pArr->head)->GrowByMinMax(recycler, unshiftElements, ((nextToHeadSeg->left + unshiftElements) - pArr->head->left - pArr->head->size));",
          "",
          "[Added Lines]",
          "7416:             pArr->head = SparseArraySegment<T>::From(pArr->head)->GrowByMin(recycler, unshiftElements);",
          "7420:             pArr->head = SparseArraySegment<T>::From(pArr->head)->GrowByMinMax(recycler, unshiftElements, ((nextToHeadSeg->left + unshiftElements) - pArr->head->left - pArr->head->size));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "7425:     template<typename T>",
          "7426:     void JavascriptArray::UnshiftHelper(JavascriptArray* pArr, uint32 unshiftElements, Js::Var * elements)",
          "7427:     {",
          "7430:         MoveArray(head->elements + unshiftElements, head->elements, pArr->head->length);",
          "7431:         uint32 oldHeadLength = head->length;",
          "",
          "[Removed Lines]",
          "7428:         SparseArraySegment<T>* head = (SparseArraySegment<T>*)pArr->head;",
          "",
          "[Added Lines]",
          "7428:         SparseArraySegment<T>* head = SparseArraySegment<T>::From(pArr->head);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "10033:             SparseArraySegment<T>* savedLastUsedSegment = (SparseArraySegment<T>*)this->GetLastUsedSegment();",
          "10034:             SetHeadAndLastUsedSegment(const_cast<SparseArraySegmentBase*>(EmptySegment));",
          "",
          "[Removed Lines]",
          "10032:             SparseArraySegment<T>* savedHead = (SparseArraySegment<T>*)this->head;",
          "",
          "[Added Lines]",
          "10032:             SparseArraySegment<T>* savedHead = SparseArraySegment<T>::From(this->head);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "11172:         }",
          "11173:         ValidateArrayCommon();",
          "11176:     }",
          "11178:     void JavascriptNativeIntArray::ValidateArray()",
          "",
          "[Removed Lines]",
          "11175:         JavascriptArray::ValidateVarSegment((SparseArraySegment<Var>*)head);",
          "",
          "[Added Lines]",
          "11175:         JavascriptArray::ValidateVarSegment(SparseArraySegment<Var>::From(head));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "11194:         }",
          "11195:         ValidateArrayCommon();",
          "11198:     }",
          "11200:     void JavascriptNativeFloatArray::ValidateArray()",
          "",
          "[Removed Lines]",
          "11197:         JavascriptArray::ValidateSegment<int32>((SparseArraySegment<int32>*)head);",
          "",
          "[Added Lines]",
          "11197:         JavascriptArray::ValidateSegment<int32>(SparseArraySegment<int32>::From(head));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "11216:         }",
          "11217:         ValidateArrayCommon();",
          "11220:     }",
          "",
          "[Removed Lines]",
          "11219:         JavascriptArray::ValidateSegment<double>((SparseArraySegment<double>*)head);",
          "",
          "[Added Lines]",
          "11219:         JavascriptArray::ValidateSegment<double>(SparseArraySegment<double>::From(head));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "11253:             }",
          "11254:             ValidateSegment(seg);",
          "11257:         }",
          "11258:     }",
          "",
          "[Removed Lines]",
          "11256:             seg = (SparseArraySegment<Var>*)seg->next;",
          "",
          "[Added Lines]",
          "11256:             seg = SparseArraySegment<Var>::From(seg->next);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "11274:                 i++;",
          "11275:             }",
          "11278:         }",
          "11279:     }",
          "11280: #endif",
          "",
          "[Removed Lines]",
          "11277:             seg = (SparseArraySegment<T>*)seg->next;",
          "",
          "[Added Lines]",
          "11277:             seg = SparseArraySegment<T>::From(seg->next);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "11300:     {",
          "11301:         if (boxHead)",
          "11302:         {",
          "11304:         }",
          "11305:         else",
          "11306:         {",
          "",
          "[Removed Lines]",
          "11303:             InitBoxedInlineHeadSegment(DetermineInlineHeadSegmentPointer<JavascriptArray, 0, true>(this), (SparseArraySegment<Var>*)instance->head);",
          "",
          "[Added Lines]",
          "11303:             InitBoxedInlineHeadSegment(DetermineInlineHeadSegmentPointer<JavascriptArray, 0, true>(this), SparseArraySegment<Var>::From(instance->head));",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "11424:     {",
          "11425:         if (boxHead)",
          "11426:         {",
          "11428:         }",
          "11429:         else",
          "11430:         {",
          "",
          "[Removed Lines]",
          "11427:             InitBoxedInlineHeadSegment(DetermineInlineHeadSegmentPointer<JavascriptNativeIntArray, 0, true>(this), (SparseArraySegment<int>*)instance->head);",
          "",
          "[Added Lines]",
          "11427:             InitBoxedInlineHeadSegment(DetermineInlineHeadSegmentPointer<JavascriptNativeIntArray, 0, true>(this), SparseArraySegment<int>::From(instance->head));",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "11470:     {",
          "11471:         if (boxHead)",
          "11472:         {",
          "11474:         }",
          "11475:         else",
          "11476:         {",
          "",
          "[Removed Lines]",
          "11473:             InitBoxedInlineHeadSegment(DetermineInlineHeadSegmentPointer<JavascriptNativeFloatArray, 0, true>(this), (SparseArraySegment<double>*)instance->head);",
          "",
          "[Added Lines]",
          "11473:             InitBoxedInlineHeadSegment(DetermineInlineHeadSegmentPointer<JavascriptNativeFloatArray, 0, true>(this), SparseArraySegment<double>::From(instance->head));",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     protected:",
          "29:     public:",
          "30:         static const uint MinDegree = 20; // Degree is the minimum branching factor. (If non-root, and non-leaf.)",
          "",
          "[Removed Lines]",
          "24:         uint32*              keys;           // keys[i] == segments[i]->left",
          "25:         SparseArraySegmentBase** segments;   // Length of segmentCount.",
          "26:         SegmentBTree*        children;       // Length of segmentCount+1.",
          "27:         uint32               segmentCount;   // number of sparseArray segments in the Node",
          "",
          "[Added Lines]",
          "24:         Field(uint32*)              keys;           // keys[i] == segments[i]->left",
          "25:         Field(SparseArraySegmentBase**) segments;   // Length of segmentCount.",
          "26:         Field(SegmentBTree*)        children;       // Length of segmentCount+1.",
          "27:         Field(uint32)               segmentCount;   // number of sparseArray segments in the Node",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         DEFINE_VTABLE_CTOR(JavascriptArray, ArrayObject);",
          "100:         DEFINE_MARSHAL_OBJECT_TO_SCRIPT_CONTEXT(JavascriptArray);",
          "101:     private:",
          "103:     protected:",
          "105:         union SegmentUnionType",
          "106:         {",
          "107:             SparseArraySegmentBase* lastUsedSegment;",
          "108:             SegmentBTreeRoot* segmentBTreeRoot;",
          "109:         };",
          "112:     public:",
          "113:         typedef Var TElement;",
          "",
          "[Removed Lines]",
          "102:         bool isInitialized;",
          "104:         SparseArraySegmentBase* head;",
          "111:         SegmentUnionType segmentUnion;",
          "",
          "[Added Lines]",
          "102:         Field(bool) isInitialized;",
          "104:         Field(SparseArraySegmentBase*) head;",
          "111:         Field(SegmentUnionType) segmentUnion;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl": [
          "File: lib/Runtime/Library/JavascriptArray.inl -> lib/Runtime/Library/JavascriptArray.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:         const T newValue,",
          "441:         StElemInfo *const stElemInfo)",
          "442:     {",
          "444:         Assert(seg);",
          "445:         Assert(offset < seg->size);",
          "446:         Assert(!(HasNoMissingValues() &&",
          "",
          "[Removed Lines]",
          "443:         SparseArraySegment<T> *const seg = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "443:         SparseArraySegment<T> *const seg = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "650:         {",
          "651:             if (endIndex >= current->left + current->size)",
          "652:             {",
          "654:             }",
          "655:             else",
          "656:             {",
          "",
          "[Removed Lines]",
          "653:                 current = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "653:                 current = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "695:                     }",
          "696:                 }",
          "697:                 prev = current;",
          "699:             }",
          "700:             if (!startSeg && !endSeg)",
          "701:             {",
          "",
          "[Removed Lines]",
          "698:                 current = (SparseArraySegment<T>*)current->next;",
          "",
          "[Added Lines]",
          "698:                 current = SparseArraySegment<T>::From(current->next);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "713:                 && startIndex - head->size <= MergeSegmentsLengthHeuristics     // Distance to next index is relatively small",
          "714:                 )",
          "715:             {",
          "717:                 current->length = endIndex + 1;",
          "718:                 head = current;",
          "719:                 SetHasNoMissingValues(false);",
          "",
          "[Removed Lines]",
          "716:                 current = ((Js::SparseArraySegment<T>*)head)->GrowByMin(recycler, startIndex + length - head->size);",
          "",
          "[Added Lines]",
          "716:                 current = SparseArraySegment<T>::From(head)->GrowByMin(recycler, startIndex + length - head->size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "790:             {",
          "791:                 if (startIndex + 1 == startSeg->left && startPrev == head)",
          "792:                 {",
          "794:                     current->length = endIndex + 1;",
          "795:                     head = current;",
          "796:                 }",
          "",
          "[Removed Lines]",
          "793:                     current = ((Js::SparseArraySegment<T>*)head)->GrowByMin(recycler, startIndex + length - head->size);",
          "",
          "[Added Lines]",
          "793:                     current = SparseArraySegment<T>::From(head)->GrowByMin(recycler, startIndex + length - head->size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1027:         if (startIndex == 0 && head != EmptySegment && length < head->size)",
          "1028:         {",
          "1031:             if (length > this->length)",
          "1032:             {",
          "",
          "[Removed Lines]",
          "1029:             CopyValueToSegmentBuferNoCheck(((Js::SparseArraySegment<T>*)head)->elements, length, newValue);",
          "",
          "[Added Lines]",
          "1029:             CopyValueToSegmentBuferNoCheck(SparseArraySegment<T>::From(head)->elements, length, newValue);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1136:         if (current->left + current->size > current->left || itemIndex >= current->left + current->size)",
          "1137:         {",
          "1139:         }",
          "1140:         SparseArraySegmentBase* prev = nullptr;",
          "",
          "[Removed Lines]",
          "1138:             current = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "1138:             current = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1160:                 bool extendPrevSeg = itemIndex <= prevSeg->left + prevSeg->size;",
          "1161:                 if (noExactMatch && extendPrevSeg)",
          "1162:                 {",
          "1164:                     prev = nullptr;",
          "1165:                     if (prevSeg != head)",
          "1166:                     {",
          "",
          "[Removed Lines]",
          "1163:                     current = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "1163:                     current = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1194:             if (current->left + current->size > current->left || itemIndex >= current->left + current->size)",
          "1195:             {",
          "1197:             }",
          "1198:             prev = nullptr;",
          "1199:         }",
          "",
          "[Removed Lines]",
          "1196:                 current = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "1196:                 current = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1215:                 }",
          "1216:             }",
          "1217:             prev = current;",
          "1219:             Assert(segmentMap == GetSegmentMap());",
          "1220:             if (!segmentMap)",
          "1221:             {",
          "",
          "[Removed Lines]",
          "1218:             current = (SparseArraySegment<T>*)current->next;",
          "",
          "[Added Lines]",
          "1218:             current = SparseArraySegment<T>::From(current->next);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1237:                         bool extendPrevSeg = itemIndex <= prevSeg->left + prevSeg->size;",
          "1238:                         if (noExactMatch && extendPrevSeg)",
          "1239:                         {",
          "1241:                             prev = nullptr;",
          "1242:                             if (prevSeg != head)",
          "1243:                             {",
          "",
          "[Removed Lines]",
          "1240:                             current = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "1240:                             current = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1323:                 Assert((itemIndex == current->left + current->size) || (itemIndex + 1 == current->left));",
          "1327:                 Assert(segmentMap == GetSegmentMap());",
          "1328:                 if (!segmentMap && next != nullptr && (itemIndex + 1) == next->left)",
          "",
          "[Removed Lines]",
          "1325:                 SparseArraySegment<T>* next = (SparseArraySegment<T>*)current->next;",
          "",
          "[Added Lines]",
          "1325:                 SparseArraySegment<T>* next = SparseArraySegment<T>::From(current->next);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1393:                 && itemIndex - head->size <= MergeSegmentsLengthHeuristics  // Distance to next index is relatively small",
          "1394:                )",
          "1395:             {",
          "1397:                 current->elements[itemIndex] = newValue;",
          "1398:                 current->length =  itemIndex + 1;",
          "",
          "[Removed Lines]",
          "1396:                 current = ((Js::SparseArraySegment<T>*)head)->GrowByMin(recycler, itemIndex + 1 - head->size);",
          "",
          "[Added Lines]",
          "1396:                 current = SparseArraySegment<T>::From(head)->GrowByMin(recycler, itemIndex + 1 - head->size);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1446:         Assert(head);",
          "1447:         Assert(!HasNoMissingValues());",
          "1450:         const uint segmentLength = segment->length;",
          "1451:         const Field(T) * const segmentElements = segment->elements;",
          "1452:         for(uint i = startIndex; i < segmentLength; ++i)",
          "",
          "[Removed Lines]",
          "1449:         SparseArraySegment<T> *const segment = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "1449:         SparseArraySegment<T> *const segment = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1466:         Assert(head);",
          "1470:         const Field(T) *const segmentElements = segment->elements;",
          "1471:         for (uint i = startIndex; i < endIndex; ++i)",
          "1472:         {",
          "",
          "[Removed Lines]",
          "1469:         SparseArraySegment<T> *const segment = (SparseArraySegment<T>*)head;",
          "",
          "[Added Lines]",
          "1469:         SparseArraySegment<T> *const segment = SparseArraySegment<T>::From(head);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1492:     template<typename unitType, typename classname>",
          "1493:     inline BOOL JavascriptArray::TryGrowHeadSegmentAndSetItem(uint32 indexInt, unitType iValue)",
          "1494:     {",
          "1497:         if (indexInt == current->length               // index is at the boundary of size & length",
          "1498:             && current->size                          // Make sure its not empty segment.",
          "",
          "[Removed Lines]",
          "1495:         SparseArraySegment<unitType> *current = (SparseArraySegment<unitType> *)this->head;",
          "",
          "[Added Lines]",
          "1495:         SparseArraySegment<unitType> *current = SparseArraySegment<unitType>::From(head);",
          "",
          "---------------"
        ],
        "tools/RecyclerChecker/RecyclerChecker.cpp||tools/RecyclerChecker/RecyclerChecker.cpp": [
          "File: tools/RecyclerChecker/RecyclerChecker.cpp -> tools/RecyclerChecker/RecyclerChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:             continue;",
          "199:         }",
          "203:         {",
          "204:             continue;",
          "205:         }",
          "208:         if (*p == '[')",
          "",
          "[Removed Lines]",
          "201:         if (SkipPrefix(p, \"class \") || SkipPrefix(p, \"struct \") ||",
          "202:             SkipPrefix(p, \"union \") || SkipPrefix(p, \"enum \"))",
          "",
          "[Added Lines]",
          "201: #define SKIP_EITHER_PREFIX(prefix) \\",
          "202:             (SkipPrefix(p, prefix) || SkipPrefix(source, prefix))",
          "203:         if (SKIP_EITHER_PREFIX(\"const \") ||",
          "204:             SKIP_EITHER_PREFIX(\"class \") ||",
          "205:             SKIP_EITHER_PREFIX(\"struct \") ||",
          "206:             SKIP_EITHER_PREFIX(\"union \") ||",
          "207:             SKIP_EITHER_PREFIX(\"enum \"))",
          "211: #undef SKIP_EITHER_PREFIX",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cd2bb07244b1c7cc41124d56e4f95eb92dc8438",
      "candidate_info": {
        "commit_hash": "0cd2bb07244b1c7cc41124d56e4f95eb92dc8438",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/0cd2bb07244b1c7cc41124d56e4f95eb92dc8438",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "test/es6/ES6ArrayAPI.js"
        ],
        "message": "Array API Fix to make it spec compliant.\n\nBunch of array APIs do not do obsevable has property calls during the iteration. Since all those API will anyway\ngo to the user code by calling a function in each iteration, so any optimization could lead to spec deviation. Fixed that by taking the slow path.\nIn future when we implement these APIs using the javascript built-in framework we can probably do better optimization.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "test/es6/ES6ArrayAPI.js||test/es6/ES6ArrayAPI.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8680:         CallFlags flags = CallFlags_Value;",
          "8714:         {",
          "8715:             AssertAndFailFast(TypedArrayBase::Is(typedArrayBase));",
          "8716:             uint32 end = (uint32)min(length, (T)typedArrayBase->GetLength());",
          "",
          "[Removed Lines]",
          "8682:         if (pArr)",
          "8683:         {",
          "8684:             Assert(length <= UINT_MAX);",
          "8685:             for (uint32 k = 0; k < (uint32)length; k++)",
          "8686:             {",
          "8687:                 JS_REENTRANT(jsReentLock, BOOL gotItem = pArr->DirectGetItemAtFull(k, &element));",
          "8688:                 if (!gotItem)",
          "8689:                 {",
          "8690:                     continue;",
          "8691:                 }",
          "8693:                 JS_REENTRANT(jsReentLock,",
          "8694:                     testResult = CALL_FUNCTION(scriptContext->GetThreadContext(), callBackFn, CallInfo(flags, 4), thisArg,",
          "8695:                         element,",
          "8696:                         JavascriptNumber::ToVar(k, scriptContext),",
          "8697:                         pArr));",
          "8699:                 if (!JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8700:                 {",
          "8701:                     return scriptContext->GetLibrary()->GetFalse();",
          "8702:                 }",
          "8706:                 if (!JavascriptArray::Is(obj))",
          "8707:                 {",
          "8708:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "8709:                     JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::EveryObjectHelper<T>(obj, length, k + 1, callBackFn, thisArg, scriptContext));",
          "8710:                 }",
          "8711:             }",
          "8712:         }",
          "8713:         else if (typedArrayBase)",
          "",
          "[Added Lines]",
          "8682:         if (typedArrayBase)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8852:         Var element = nullptr;",
          "8853:         Var testResult = nullptr;",
          "8887:         {",
          "8888:             AssertAndFailFast(TypedArrayBase::Is(typedArrayBase));",
          "8889:             uint32 end = (uint32)min(length, (T)typedArrayBase->GetLength());",
          "",
          "[Removed Lines]",
          "8855:         if (pArr)",
          "8856:         {",
          "8857:             Assert(length <= UINT_MAX);",
          "8858:             for (uint32 k = 0; k < (uint32)length; k++)",
          "8859:             {",
          "8860:                 JS_REENTRANT(jsReentLock, BOOL gotItem = pArr->DirectGetItemAtFull(k, &element));",
          "8861:                 if (!gotItem)",
          "8862:                 {",
          "8863:                     continue;",
          "8864:                 }",
          "8866:                 JS_REENTRANT_UNLOCK(jsReentLock,",
          "8867:                     testResult = CALL_FUNCTION(scriptContext->GetThreadContext(), callBackFn, CallInfo(flags, 4), thisArg,",
          "8868:                         element,",
          "8869:                         JavascriptNumber::ToVar(k, scriptContext),",
          "8870:                         pArr));",
          "8872:                 if (JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8873:                 {",
          "8874:                     return scriptContext->GetLibrary()->GetTrue();",
          "8875:                 }",
          "8879:                 if (!JavascriptArray::Is(obj))",
          "8880:                 {",
          "8881:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "8882:                     JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::SomeObjectHelper<T>(obj, length, k + 1, callBackFn, thisArg, scriptContext));",
          "8883:                 }",
          "8884:             }",
          "8885:         }",
          "8886:         else if (typedArrayBase)",
          "",
          "[Added Lines]",
          "8824:         if (typedArrayBase)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9706:             }",
          "9707:         }",
          "9778:     }",
          "9780:     template <typename T>",
          "",
          "[Removed Lines]",
          "9711:         if (pArr && !JavascriptArray::Is(obj))",
          "9712:         {",
          "9713:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9714:             pArr = nullptr;",
          "9715:         }",
          "9717:         Var element = nullptr;",
          "9718:         Var selected = nullptr;",
          "9720:         if (pArr)",
          "9721:         {",
          "9722:             Assert(length <= MaxArrayLength);",
          "9723:             uint32 i = 0;",
          "9725:             Assert(length <= UINT_MAX);",
          "9726:             for (uint32 k = 0; k < (uint32)length; k++)",
          "9727:             {",
          "9728:                 JS_REENTRANT(jsReentLock, BOOL gotItem = pArr->DirectGetItemAtFull(k, &element));",
          "9729:                 if (!gotItem)",
          "9730:                 {",
          "9731:                     continue;",
          "9732:                 }",
          "9734:                 JS_REENTRANT(jsReentLock,",
          "9735:                     selected = CALL_ENTRYPOINT(scriptContext->GetThreadContext(),",
          "9736:                         callBackFn->GetEntryPoint(), callBackFn, CallInfo(CallFlags_Value, 4),",
          "9737:                         thisArg,",
          "9738:                         element,",
          "9739:                         JavascriptNumber::ToVar(k, scriptContext),",
          "9740:                         pArr));",
          "9742:                 if (JavascriptConversion::ToBoolean(selected, scriptContext))",
          "9743:                 {",
          "9745:                     if (newArr && isBuiltinArrayCtor)",
          "9746:                     {",
          "9747:                         newArr->DirectSetItemAt(i, element);",
          "9748:                     }",
          "9749:                     else",
          "9750:                     {",
          "9751:                         JS_REENTRANT(jsReentLock, ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, i, element), scriptContext, i));",
          "9752:                     }",
          "9753:                     ++i;",
          "9754:                 }",
          "9758:                 if (!JavascriptArray::Is(obj))",
          "9759:                 {",
          "9760:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9761:                     JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::FilterObjectHelper<T>(obj, length, k + 1, newArr, newObj, i, callBackFn, thisArg, scriptContext));",
          "9762:                 }",
          "9763:             }",
          "9764:         }",
          "9765:         else",
          "9766:         {",
          "9767:             JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::FilterObjectHelper<T>(obj, length, 0u, newArr, newObj, 0u, callBackFn, thisArg, scriptContext));",
          "9768:         }",
          "9770: #ifdef VALIDATE_ARRAY",
          "9771:         if (newArr)",
          "9772:         {",
          "9773:             newArr->ValidateArray();",
          "9774:         }",
          "9775: #endif",
          "9777:         return newObj;",
          "",
          "[Added Lines]",
          "9647:         JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::FilterObjectHelper<T>(obj, length, 0u, newArr, newObj, 0u, callBackFn, thisArg, scriptContext));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9904:             bool bPresent = false;",
          "9929:             {",
          "9930:                 AssertAndFailFast(TypedArrayBase::Is(typedArrayBase));",
          "9931:                 uint32 end = (uint32)min(length, (T)typedArrayBase->GetLength());",
          "",
          "[Removed Lines]",
          "9906:             if (pArr)",
          "9907:             {",
          "9908:                 for (; k < length && bPresent == false; k++)",
          "9909:                 {",
          "9910:                     JS_REENTRANT(jsReentLock, BOOL gotItem = pArr->DirectGetItemAtFull((uint32)k, &element));",
          "9911:                     if (!gotItem)",
          "9912:                     {",
          "9913:                         continue;",
          "9914:                     }",
          "9916:                     bPresent = true;",
          "9917:                     accumulator = element;",
          "9918:                 }",
          "9922:                 if (!JavascriptArray::Is(obj))",
          "9923:                 {",
          "9924:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9925:                     pArr = nullptr;",
          "9926:                 }",
          "9927:             }",
          "9928:             else if (typedArrayBase)",
          "",
          "[Added Lines]",
          "9776:             if (typedArrayBase)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9966:         CallFlags flags = CallFlags_Value;",
          "9997:         {",
          "9998:             AssertAndFailFast(TypedArrayBase::Is(typedArrayBase));",
          "9999:             uint32 end = (uint32)min(length, (T)typedArrayBase->GetLength());",
          "",
          "[Removed Lines]",
          "9968:         if (pArr)",
          "9969:         {",
          "9970:             for (; k < length; k++)",
          "9971:             {",
          "9972:                 JS_REENTRANT(jsReentLock, BOOL gotItem = pArr->DirectGetItemAtFull((uint32)k, &element));",
          "9973:                 if (!gotItem)",
          "9974:                 {",
          "9975:                     continue;",
          "9976:                 }",
          "9978:                 JS_REENTRANT(jsReentLock,",
          "9979:                     accumulator = CALL_FUNCTION(scriptContext->GetThreadContext(), callBackFn, CallInfo(flags, 5),",
          "9980:                         undefinedValue,",
          "9981:                         accumulator,",
          "9982:                         element,",
          "9983:                         JavascriptNumber::ToVar(k, scriptContext),",
          "9984:                         pArr",
          "9985:                 ));",
          "9989:                 if (!JavascriptArray::Is(obj))",
          "9990:                 {",
          "9991:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9992:                     JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::ReduceObjectHelper<T>(obj, length, k + 1, callBackFn, accumulator, scriptContext));",
          "9993:                 }",
          "9994:             }",
          "9995:         }",
          "9996:         else if (typedArrayBase)",
          "",
          "[Added Lines]",
          "9816:         if (typedArrayBase)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "10123:             }",
          "10125:             bool bPresent = false;",
          "10149:             {",
          "10150:                 AssertAndFailFast(TypedArrayBase::Is(typedArrayBase));",
          "10151:                 uint32 end = (uint32)min(length, (T)typedArrayBase->GetLength());",
          "",
          "[Removed Lines]",
          "10126:             if (pArr)",
          "10127:             {",
          "10128:                 for (; k < length && bPresent == false; k++)",
          "10129:                 {",
          "10130:                     index = length - k - 1;",
          "10131:                     JS_REENTRANT(jsReentLock, BOOL gotItem = pArr->DirectGetItemAtFull((uint32)index, &element));",
          "10132:                     if (!gotItem)",
          "10133:                     {",
          "10134:                         continue;",
          "10135:                     }",
          "10136:                     bPresent = true;",
          "10137:                     accumulator = element;",
          "10138:                 }",
          "10142:                 if (!JavascriptArray::Is(obj))",
          "10143:                 {",
          "10144:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "10145:                     pArr = nullptr;",
          "10146:                 }",
          "10147:             }",
          "10148:             else if (typedArrayBase)",
          "",
          "[Added Lines]",
          "9946:             if (typedArrayBase)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10183:         CallFlags flags = CallFlags_Value;",
          "10184:         Var undefinedValue = scriptContext->GetLibrary()->GetUndefined();",
          "10214:         {",
          "10215:             AssertAndFailFast(TypedArrayBase::Is(typedArrayBase));",
          "10216:             uint32 end = (uint32)min(length, (T)typedArrayBase->GetLength());",
          "",
          "[Removed Lines]",
          "10186:         if (pArr)",
          "10187:         {",
          "10188:             for (; k < length; k++)",
          "10189:             {",
          "10190:                 index = length - k - 1;",
          "10191:                 JS_REENTRANT(jsReentLock, BOOL gotItem = pArr->DirectGetItemAtFull((uint32)index, &element));",
          "10192:                 if (!gotItem)",
          "10193:                 {",
          "10194:                     continue;",
          "10195:                 }",
          "10197:                 JS_REENTRANT(jsReentLock,",
          "10198:                     accumulator = CALL_FUNCTION(scriptContext->GetThreadContext(), callBackFn, CallInfo(flags, 5), undefinedValue,",
          "10199:                         accumulator,",
          "10200:                         element,",
          "10201:                         JavascriptNumber::ToVar(index, scriptContext),",
          "10202:                         pArr));",
          "10206:                 if (!JavascriptArray::Is(obj))",
          "10207:                 {",
          "10208:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "10209:                     JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::ReduceRightObjectHelper<T>(obj, length, k + 1, callBackFn, accumulator, scriptContext));",
          "10210:                 }",
          "10211:             }",
          "10212:         }",
          "10213:         else if (typedArrayBase)",
          "",
          "[Added Lines]",
          "9984:         if (typedArrayBase)",
          "",
          "---------------"
        ],
        "test/es6/ES6ArrayAPI.js||test/es6/ES6ArrayAPI.js": [
          "File: test/es6/ES6ArrayAPI.js -> test/es6/ES6ArrayAPI.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: WScript.LoadScriptFile(\"..\\\\UnitTestFramework\\\\UnitTestFramework.js\");",
          "10: var tests = [",
          "11:     {",
          "12:         name: \"Array constructor has correct functions\",",
          "13:         body: function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: var getCount = 0;",
          "10: var hasCount = 0;",
          "12: var proxyHandler = {",
          "13:     get: function (oTarget, sKey) {",
          "14:         if (sKey == \"constructor\") {",
          "15:             return Reflect.get(oTarget, sKey);",
          "16:         } else if (Number(sKey.toString()) != NaN) {",
          "17:             getCount++;",
          "18:             return 2222;",
          "19:         }",
          "20:         return Reflect.get(oTarget, sKey);",
          "21:     },",
          "22:     has: function (oTarget, sKey) {",
          "23:         hasCount++;",
          "24:         return Reflect.has(oTarget, sKey);",
          "25:     },",
          "26: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:             }",
          "662:         }",
          "663:     },",
          "664:     {",
          "665:         name: \"Array methods trying to create a data property on non-configurable slot and fail\",",
          "666:         body: function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683:     {",
          "684:         name: \"Array.prototype.filter calls has trap when proxy in the prototype\",",
          "685:         body: function () {",
          "686:             getCount = 0;",
          "687:             hasCount = 0;",
          "689:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "690:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "692:             var p = new Proxy(arr1, proxyHandler);",
          "693:             arr2.__proto__ = p;",
          "694:             arr2.length = 10;",
          "696:             var ret = [].filter.call(arr2, function(item){",
          "697:                 return item > 200;",
          "698:             });",
          "700:             assert.areEqual(0, ret.length);",
          "701:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "702:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "703:         }",
          "704:     },",
          "705:     {",
          "706:         name: \"Array.prototype.filter calls has trap when proxy as a prototype added during the call\",",
          "707:         body: function () {",
          "708:             getCount = 0;",
          "709:             hasCount = 0;",
          "711:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "712:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "714:             arr2.length = 10;",
          "716:             var first = true;",
          "717:             var ret = [].filter.call(arr2, function(item){",
          "718:                 if (first) {",
          "719:                     first = false;",
          "720:                     var p = new Proxy(arr1, proxyHandler);",
          "721:                     arr2.__proto__ = p;",
          "722:                 }",
          "723:                 return item > 200;",
          "724:             });",
          "726:             assert.areEqual(0, ret.length);",
          "727:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "728:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "729:         }",
          "730:     },",
          "731:     {",
          "732:         name: \"Array.prototype.every calls has trap when proxy in the prototype\",",
          "733:         body: function () {",
          "734:             getCount = 0;",
          "735:             hasCount = 0;",
          "737:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "738:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "740:             var p = new Proxy(arr1, proxyHandler);",
          "741:             arr2.__proto__ = p;",
          "742:             arr2.length = 10;",
          "744:             [].every.call(arr2, function(item){",
          "745:                 return true;",
          "746:             });",
          "748:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "749:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "750:         }",
          "751:     },",
          "752:     {",
          "753:         name: \"Array.prototype.every calls has trap when proxy as a prototype added during the call\",",
          "754:         body: function () {",
          "755:             getCount = 0;",
          "756:             hasCount = 0;",
          "758:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "759:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "761:             arr2.length = 10;",
          "763:             var first = true;",
          "764:             [].every.call(arr2, function(item){",
          "765:                 if (first) {",
          "766:                     first = false;",
          "767:                     var p = new Proxy(arr1, proxyHandler);",
          "768:                     arr2.__proto__ = p;",
          "769:                 }",
          "770:                 return true;",
          "771:             });",
          "773:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "774:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "775:         }",
          "776:     },",
          "777:     {",
          "778:         name: \"Array.prototype.some calls has trap when proxy in the prototype\",",
          "779:         body: function () {",
          "780:             getCount = 0;",
          "781:             hasCount = 0;",
          "783:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "784:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "786:             var p = new Proxy(arr1, proxyHandler);",
          "787:             arr2.__proto__ = p;",
          "788:             arr2.length = 10;",
          "790:             [].some.call(arr2, function(item){",
          "791:                 return false;",
          "792:             });",
          "794:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "795:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "796:         }",
          "797:     },",
          "798:     {",
          "799:         name: \"Array.prototype.some calls has trap when proxy as a prototype added during the call\",",
          "800:         body: function () {",
          "801:             getCount = 0;",
          "802:             hasCount = 0;",
          "804:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "805:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "807:             arr2.length = 10;",
          "809:             var first = true;",
          "810:             [].some.call(arr2, function(item){",
          "811:                 if (first) {",
          "812:                     first = false;",
          "813:                     var p = new Proxy(arr1, proxyHandler);",
          "814:                     arr2.__proto__ = p;",
          "815:                 }",
          "816:                 return false;",
          "817:             });",
          "819:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "820:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "821:         }",
          "822:     },",
          "823:     {",
          "824:         name: \"Array.prototype.reduce calls has trap when proxy in the prototype\",",
          "825:         body: function () {",
          "826:             getCount = 0;",
          "827:             hasCount = 0;",
          "829:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "830:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "832:             var p = new Proxy(arr1, proxyHandler);",
          "833:             arr2.__proto__ = p;",
          "834:             arr2.length = 10;",
          "836:             var ret = [].reduce.call(arr2, function(a, c){",
          "837:                 return a + c;",
          "838:             });",
          "840:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "841:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "842:             assert.areEqual(231, ret);",
          "843:         }",
          "844:     },",
          "845:     {",
          "846:         name: \"Array.prototype.reduce calls has trap when proxy as a prototype added during the call\",",
          "847:         body: function () {",
          "848:             getCount = 0;",
          "849:             hasCount = 0;",
          "851:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "852:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "854:             arr2.length = 10;",
          "856:             var first = true;",
          "857:             var ret = [].reduce.call(arr2, function(a, c){",
          "858:                 if (first) {",
          "859:                     first = false;",
          "860:                     var p = new Proxy(arr1, proxyHandler);",
          "861:                     arr2.__proto__ = p;",
          "862:                 }",
          "863:                 return a + c;",
          "864:             });",
          "866:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "867:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "868:             assert.areEqual(231, ret);",
          "869:         }",
          "870:     },",
          "871:     {",
          "872:         name: \"Array.prototype.reduceRight calls has trap when proxy in the prototype\",",
          "873:         body: function () {",
          "874:             getCount = 0;",
          "875:             hasCount = 0;",
          "877:             var arr1 = [11, 22, 33, 44, 55, 66];",
          "878:             var arr2 = [11, 22, 33, 44, 55, 66];",
          "880:             var p = new Proxy(arr1, proxyHandler);",
          "881:             arr2.__proto__ = p;",
          "882:             arr2.length = 10;",
          "884:             var ret = [].reduceRight.call(arr2, function(a, c){",
          "885:                 return a + c;",
          "886:             });",
          "888:             assert.areEqual(4, hasCount, \"Validate that has trap is called 4 times\");",
          "889:             assert.areEqual(0, getCount, \"Validate that get trap is not called\");",
          "890:             assert.areEqual(231, ret);",
          "891:         }",
          "892:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "698:             assert.throws(function () { Array.of.call(Arr, \"a\"); }, TypeError, \"of constructs an array with non-config property\", \"Cannot redefine property '0'\");",
          "699:             assert.throws(function () { Array.from.call(Arr, \"a\"); }, TypeError, \"of constructs an array with non-config property\", \"Cannot redefine property '0'\");",
          "700:         }",
          "702: ];",
          "704: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
          "",
          "[Removed Lines]",
          "701:     }",
          "",
          "[Added Lines]",
          "930:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d0b0d5e86210c9ce17290e1f48f9693c879cacf",
      "candidate_info": {
        "commit_hash": "7d0b0d5e86210c9ce17290e1f48f9693c879cacf",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/7d0b0d5e86210c9ce17290e1f48f9693c879cacf",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "test/es6/ES6ArrayAPI.js",
          "test/es6/toPrimitive.js"
        ],
        "message": "Look up prototype properties when running Array.prototype.copyWithin.\n\nBy calling JavascriptOperators::HasItem instead of\nJavascriptArray:HasItem, we will fetch properties from the prototype if\nthe given index doesn't exist in the array. This change also adds a\nfaster path that avoids HasItem calls when running on typed arrays.\n\nFixes OS:10747539",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "test/es6/ES6ArrayAPI.js||test/es6/ES6ArrayAPI.js",
          "test/es6/toPrimitive.js||test/es6/toPrimitive.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9152:             uint32 fromIndex = static_cast<uint32>(fromVal);",
          "9153:             uint32 toIndex = static_cast<uint32>(toVal);",
          "9156:             {",
          "9159:                 {",
          "9167:                     {",
          "9172:                         {",
          "9175:                         }",
          "9176:                     }",
          "9177:                     else",
          "9178:                     {",
          "9183:                     }",
          "9193:             }",
          "9194:         }",
          "",
          "[Removed Lines]",
          "9155:             while (count > 0)",
          "9157:                 JS_REENTRANT(jsReentLock, BOOL hasItem = obj->HasItem(fromIndex));",
          "9158:                 if (hasItem)",
          "9160:                     if (typedArrayBase)",
          "9161:                     {",
          "9162:                         Var val = typedArrayBase->DirectGetItem(fromIndex);",
          "9164:                         JS_REENTRANT(jsReentLock, typedArrayBase->DirectSetItem(toIndex, val));",
          "9165:                     }",
          "9166:                     else if (pArr)",
          "9168:                         JS_REENTRANT(jsReentLock, Var val = pArr->DirectGetItem(fromIndex));",
          "9169:                         pArr->SetItem(toIndex, val, Js::PropertyOperation_ThrowIfNotExtensible);",
          "9171:                         if (!JavascriptArray::Is(obj))",
          "9173:                             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9174:                             pArr = nullptr;",
          "9179:                         Var val = nullptr;",
          "9180:                         JS_REENTRANT(jsReentLock,",
          "9181:                             val = JavascriptOperators::OP_GetElementI_UInt32(obj, fromIndex, scriptContext),",
          "9182:                             JavascriptOperators::OP_SetElementI_UInt32(obj, toIndex, val, scriptContext, PropertyOperation_ThrowIfNotExtensible));",
          "9184:                 }",
          "9185:                 else",
          "9186:                 {",
          "9187:                     JS_REENTRANT(jsReentLock, obj->DeleteItem(toIndex, PropertyOperation_ThrowOnDeleteIfNotConfig));",
          "9188:                 }",
          "9190:                 fromIndex += direction;",
          "9191:                 toIndex += direction;",
          "9192:                 count--;",
          "",
          "[Added Lines]",
          "9155:             if (typedArrayBase && length <= typedArrayBase->GetLength())",
          "9160:                 while (count > 0)",
          "9162:                     Var val = typedArrayBase->DirectGetItem(fromIndex);",
          "9164:                     JS_REENTRANT(jsReentLock, typedArrayBase->DirectSetItem(toIndex, val));",
          "9166:                     fromIndex += direction;",
          "9167:                     toIndex += direction;",
          "9168:                     count--;",
          "9169:                 }",
          "9170:             }",
          "9171:             else",
          "9172:             {",
          "9173:                 while (count > 0)",
          "9174:                 {",
          "9175:                     JS_REENTRANT(jsReentLock, BOOL hasItem = JavascriptOperators::HasItem(obj, fromIndex));",
          "9176:                     if (hasItem)",
          "9178:                         if (typedArrayBase)",
          "9179:                         {",
          "9180:                             Var val = typedArrayBase->DirectGetItem(fromIndex);",
          "9182:                             JS_REENTRANT(jsReentLock, typedArrayBase->DirectSetItem(toIndex, val));",
          "9183:                         }",
          "9184:                         else if (pArr)",
          "9186:                             JS_REENTRANT(jsReentLock, Var val = pArr->DirectGetItem(fromIndex));",
          "9187:                             pArr->SetItem(toIndex, val, Js::PropertyOperation_ThrowIfNotExtensible);",
          "9189:                             if (!JavascriptArray::Is(obj))",
          "9190:                             {",
          "9191:                                 AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9192:                                 pArr = nullptr;",
          "9193:                             }",
          "9194:                         }",
          "9195:                         else",
          "9196:                         {",
          "9197:                             Var val = nullptr;",
          "9198:                             JS_REENTRANT(jsReentLock,",
          "9199:                                 val = JavascriptOperators::OP_GetElementI_UInt32(obj, fromIndex, scriptContext),",
          "9200:                                 JavascriptOperators::OP_SetElementI_UInt32(obj, toIndex, val, scriptContext, PropertyOperation_ThrowIfNotExtensible));",
          "9205:                         JS_REENTRANT(jsReentLock, obj->DeleteItem(toIndex, PropertyOperation_ThrowOnDeleteIfNotConfig));",
          "9208:                     fromIndex += direction;",
          "9209:                     toIndex += direction;",
          "9210:                     count--;",
          "9211:                 }",
          "",
          "---------------"
        ],
        "test/es6/ES6ArrayAPI.js||test/es6/ES6ArrayAPI.js": [
          "File: test/es6/ES6ArrayAPI.js -> test/es6/ES6ArrayAPI.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:         body: function () {",
          "574:             var x = [1,2,3,4,5];",
          "575:             Object.freeze(x);",
          "577:         }",
          "578:     },",
          "579:     {",
          "",
          "[Removed Lines]",
          "576:             assert.throws(function() { Array.prototype.fill.copyWithin(x, 1, 2) }, TypeError, \"We should get a TypeError when fill is applied to a frozen array\");",
          "",
          "[Added Lines]",
          "576:             assert.throws(function() { Array.prototype.copyWithin.call(x, 1, 2) }, TypeError, \"We should get a TypeError when copyWithin is applied to a frozen array\");",
          "577:         }",
          "578:     },",
          "579:     {",
          "580:         name: \"Array.copyWithin() should call [[HasProperty]] and [[Get]] in the correct order\",",
          "581:         body: function () {",
          "582:             var ops = [];",
          "583:             var handlers = {",
          "584:                 get: function (target, name) {",
          "585:                     ops.push(`get:${name}`);",
          "586:                     return target[name];",
          "587:                 },",
          "588:                 has: function (target, name) {",
          "589:                     ops.push(`has:${name}`);",
          "590:                     return name in target;",
          "591:                 }",
          "592:             };",
          "595:             var p = new Proxy([1,2,3,4,5], handlers);",
          "596:             p.copyWithin(3);",
          "597:             assert.areEqual(\"get:copyWithin,get:length,has:0,get:0,has:1,get:1\", ops.toString());",
          "598:             ops.length = 0;",
          "601:             p.copyWithin(3, 2);",
          "602:             assert.areEqual(\"get:copyWithin,get:length,has:3,get:3,has:2,get:2\", ops.toString());",
          "603:             ops.length = 0;",
          "606:             var proto = new Proxy({ \"1\": 2, \"3\": 4 }, handlers);",
          "607:             var a = [,,3,,,];",
          "608:             Object.setPrototypeOf(a, proto);",
          "609:             Array.prototype.copyWithin.call(a, 0, 1);",
          "610:             assert.areEqual(\"has:1,get:1,has:3,get:3,has:4\", ops.toString());",
          "611:             ops.length = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633:             Object.defineProperty(returnedArr, '1', { configurable: false});",
          "635:             var arr = [11, 21];",
          "638:             } } } );",
          "640:             function test(arr, desc) {",
          "",
          "[Removed Lines]",
          "636:             Object.defineProperty(arr.constructor, Symbol.species, { get : function () {  return function() {",
          "637:                 return returnedArr;",
          "",
          "[Added Lines]",
          "671:             Object.defineProperty(arr.constructor, Symbol.species, { get : function () {  return function() {",
          "672:                 return returnedArr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646:                 assert.throws(function () { Array.prototype.concat.call(arr, [1, 2]); }, TypeError, desc + \"concat\", error);",
          "647:             }",
          "648:             test(arr, \"var array\");",
          "650:             var arr2 = [11];",
          "651:             Object.defineProperty(arr2, '1', {get : function () { return 33; } });",
          "654:             } } } );",
          "655:             test(arr2, \"es5 var array\");",
          "657:             function Arr() {",
          "658:                 Object.defineProperty(this, \"0\", {",
          "659:                     configurable: false",
          "",
          "[Removed Lines]",
          "652:             Object.defineProperty(arr2.constructor, Symbol.species, { get : function () {  return function() {",
          "653:                 return returnedArr;",
          "",
          "[Added Lines]",
          "687:             Object.defineProperty(arr2.constructor, Symbol.species, { get : function () {  return function() {",
          "688:                 return returnedArr;",
          "",
          "---------------"
        ],
        "test/es6/toPrimitive.js||test/es6/toPrimitive.js": [
          "File: test/es6/toPrimitive.js -> test/es6/toPrimitive.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:             var a3_species = [1, 2, 3, 4, 5];",
          "570:             a3_species['constructor'] = a3_constructor;",
          "571:             var c3_species = a3_species.splice(0);",
          "573:             assert.areEqual(\"30,2,3,4,5\", [].join.call(c3_species, \",\"), \"The splice() method returned incorrect result as array was converted to an ES5Array.\");",
          "574:        }",
          "575:    },",
          "",
          "[Removed Lines]",
          "572:             assert.areEqual(30, c3_species[\"0\"], \"The splice() method returned incorrect result as array was converted to an ES5Array.\");",
          "",
          "[Added Lines]",
          "572:             assert.areEqual(30, c3_species[\"0\"], \"The splice() method returned incorrect result as array was converted to an ES5Array.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:             var a4_species = [1, 2, 3, 4, 5];",
          "610:             a4_species['constructor'] = a4_constructor;",
          "611:             var c4_species = a4_species.slice(0);",
          "613:             assert.areEqual(\"30,2,3,4,5\", [].join.call(c4_species, \",\"), \"The slice() method returned incorrect result as array was converted to an ES5Array.\");",
          "614:        }",
          "615:    },",
          "",
          "[Removed Lines]",
          "612:             assert.areEqual(30, c4_species[\"0\"], \"The slice() method returned incorrect result as array was converted to an ES5Array.\");",
          "",
          "[Added Lines]",
          "612:             assert.areEqual(30, c4_species[\"0\"], \"The slice() method returned incorrect result as array was converted to an ES5Array.\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1042:             var c21 = a21.copyWithin(p21);",
          "1043:             assert.areEqual([30,2,3,30,2], c21, \"ToPrimitive: The copyWithin() method returned incorrect result as array type changed to ES5 array.\");",
          "1060:             var p21_typedarray = {",
          "1061:                 [Symbol.toPrimitive] (hint) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045:             var a21_proto = {};",
          "1046:             Object.defineProperty(a21_proto, \"0\", {",
          "1047:                   get: function(){",
          "1048:                         Object.defineProperty(a21_prototest, \"1\", {configurable : true, get: function(){ return 2;}});",
          "1049:                         return 30;",
          "1050:                   }",
          "1051:             });",
          "1053:             var a21_prototest = [,,3,4,5];",
          "1054:             a21_prototest.__proto__ = a21_proto;",
          "1055:             var c21_prototest = [].copyWithin.call(a21_prototest, -2);",
          "1056:             assert.areEqual(\"30,2,3,30,2\", [].join.call(c21_prototest, \",\"), \"ToPrimitive: The copyWithin() method returned incorrect result as array type changed to ES5Array in the property getter of the prototype.\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}