{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
      "candidate_info": {
        "commit_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6117a17323148469048563ff740c8ee4eb9ffaa3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/affinity2.test"
        ],
        "message": "Avoid running a couple of tests in affinity2.test as part of the valgrind permutations, as the way floating point computations are simulated by valgrind causes them to fail.\n\nFossilOrigin-Name: 7f9a4b6015ac332a04d3e394a6b3210fc95253d8786a261178a5639cb8d9d987",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a561a656ff50efc0103da3988626cea3ef05757403b83960f2aa6c0a48c2765e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: # 2019-08-30 ticket https://www.sqlite.org/src/info/40812aea1fde9594",
          "120: #",
          "131: finish_test",
          "",
          "[Removed Lines]",
          "121: do_execsql_test 600 {",
          "122:   DROP TABLE IF EXISTS t0;",
          "123:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "124:   INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "125:   SELECT 3175546974276630385 < c0 FROM t0;",
          "126: } {1}",
          "127: do_execsql_test 601 {",
          "128:   SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "129: } {1}",
          "",
          "[Added Lines]",
          "121: # Due to some differences in floating point computations, these tests do not",
          "122: # work under valgrind.",
          "123: #",
          "124: if {![info exists ::G(valgrind)]} {",
          "125:   do_execsql_test 600 {",
          "126:     DROP TABLE IF EXISTS t0;",
          "127:     CREATE TABLE t0(c0 REAL UNIQUE);",
          "128:     INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "129:     SELECT 3175546974276630385 < c0 FROM t0;",
          "130:   } {1}",
          "131:   do_execsql_test 601 {",
          "132:     SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "133:   } {1}",
          "134: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d29448114c5d99e1e187bf3adcdce7d6479d6f8",
      "candidate_info": {
        "commit_hash": "4d29448114c5d99e1e187bf3adcdce7d6479d6f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d29448114c5d99e1e187bf3adcdce7d6479d6f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Reorder two comparisons for a small performance gain in OP_Transaction.\n\nFossilOrigin-Name: d7667f6560318272c8b35b478e29b0ed134105dfd119a2fd53ef0490442c60cc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 17ce1c49cb0ed6fdd8c7c33431bc2afa217f1092c99b8dd608890a8e7aec7fb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3456:       goto abort_due_to_error;",
          "3457:     }",
          "3460:      && (db->autoCommit==0 || db->nVdbeRead>1)",
          "3461:     ){",
          "3462:       assert( sqlite3BtreeIsInTrans(pBt) );",
          "",
          "[Removed Lines]",
          "3459:     if( pOp->p2 && p->usesStmtJournal",
          "",
          "[Added Lines]",
          "3459:     if( p->usesStmtJournal",
          "3460:      && pOp->p2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b86e51eea956e5b3532f4042d8a314556746bef",
      "candidate_info": {
        "commit_hash": "6b86e51eea956e5b3532f4042d8a314556746bef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6b86e51eea956e5b3532f4042d8a314556746bef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/vdbe.c"
        ],
        "message": "If the OP_ParseSchema opcode with a non-NULL P4 operand does not parse any rows out of the sqlite_master table, that indicates that the sqlite_master table is corrupt, so raise an SQLITE_CORRUPT error.\n\nFossilOrigin-Name: 598d7358e7329f0de6e3defc217665909e46874258ac29592ee2fd53e6411cda",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 444c7c99beb9f8b82963e9784aa2be54124c7011f4771122b4f608c02aa26408",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   UNUSED_PARAMETER2(NotUsed, argc);",
          "66:   assert( sqlite3_mutex_held(db->mutex) );",
          "67:   DbClearProperty(db, iDb, DB_Empty);",
          "68:   if( db->mallocFailed ){",
          "69:     corruptSchema(pData, argv[0], 0);",
          "70:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   pData->nInitRow++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   initData.rc = SQLITE_OK;",
          "177:   initData.pzErrMsg = pzErrMsg;",
          "178:   initData.mInitFlags = mFlags;",
          "179:   sqlite3InitCallback(&initData, 3, (char **)azArg, 0);",
          "180:   if( initData.rc ){",
          "181:     rc = initData.rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:   initData.nInitRow = 0;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5799:       assert( db->init.busy==0 );",
          "5800:       db->init.busy = 1;",
          "5801:       initData.rc = SQLITE_OK;",
          "5802:       assert( !db->mallocFailed );",
          "5803:       rc = sqlite3_exec(db, zSql, sqlite3InitCallback, &initData, 0);",
          "5804:       if( rc==SQLITE_OK ) rc = initData.rc;",
          "5805:       sqlite3DbFreeNN(db, zSql);",
          "5806:       db->init.busy = 0;",
          "5807:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5802:       initData.nInitRow = 0;",
          "5806:       if( rc==SQLITE_OK && initData.nInitRow==0 ){",
          "5810:         rc = SQLITE_CORRUPT_BKPT;",
          "5811:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
      "candidate_info": {
        "commit_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf9ff256fe17526a995ac3e470aa120c3c173414",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/sqliteInt.h",
          "test/without_rowid1.test"
        ],
        "message": "Disable index seek optimizations on REINDEX when the order of primary keys in the index differs from the main table. Fix for ticket [bba7b69f9849b5bf11b4].\n\nFossilOrigin-Name: f7aadfab3bb8eb8eb2cd62dc8a6823538387b3329f1efc23ef75482488109478",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f158c048be1dc7c80d38787a20495caa55b86416967efd57f4888548d42b4819",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1928:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1929:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1930:         pIdx->azColl[j] = pPk->azColl[i];",
          "1931:         j++;",
          "1932:       }",
          "1933:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1931:         if( pPk->aSortOrder[i] ){",
          "1933:           pIdx->bAscKeyBug = 1;",
          "1934:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3049:     addr2 = sqlite3VdbeCurrentAddr(v);",
          "3050:   }",
          "3051:   sqlite3VdbeAddOp3(v, OP_SorterData, iSorter, regRecord, iIdx);",
          "3053:   sqlite3VdbeAddOp2(v, OP_IdxInsert, iIdx, regRecord);",
          "3054:   sqlite3VdbeChangeP5(v, OPFLAG_USESEEKRESULT);",
          "3055:   sqlite3ReleaseTempReg(pParse, regRecord);",
          "",
          "[Removed Lines]",
          "3052:   sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "",
          "[Added Lines]",
          "3056:   if( !pIndex->bAscKeyBug ){",
          "3064:     sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "3065:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "403: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: # 2019-05-13 ticket https://www.sqlite.org/src/info/bba7b69f9849b5b",
          "404: do_execsql_test 12.1 {",
          "405:   DROP TABLE IF EXISTS t0;",
          "406:   CREATE TABLE t0 (c0 INTEGER PRIMARY KEY DESC, c1 UNIQUE DEFAULT NULL) WITHOUT ROWID;",
          "407:   INSERT INTO t0(c0) VALUES (1), (2), (3), (4), (5);",
          "408:   REINDEX;",
          "409:   PRAGMA integrity_check;",
          "410: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "971194aca3cfdaedd78a8498f553628fca3cc899",
      "candidate_info": {
        "commit_hash": "971194aca3cfdaedd78a8498f553628fca3cc899",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/971194aca3cfdaedd78a8498f553628fca3cc899",
        "files": [
          "ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix RBU so that it does not write rows that should be excluded into partial indexes (corrupting the database).\n\nFossilOrigin-Name: 31eb27f438ad727b095a518bfe0f7ed37cb806fc1e6929b821eddcc6cc9de260",
        "before_after_code_files": [
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 11",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbupartial",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "20: foreach {tn without_rowid a b c d} {",
          "21:   1 \"\"              a b c d",
          "22:   2 \"WITHOUT ROWID\" aaa bbb ccc ddd",
          "23:   3 \"WITHOUT ROWID\" \"\\\"hello\\\"\" {\"one'two\"}  {[c]} ddd",
          "24:   4 \"WITHOUT ROWID\" {`a b`} {\"one'two\"}  {[c c c]} ddd",
          "25:   5 \"\" a b c {\"d\"\"d\"}",
          "26:   6 \"\" {'one''two'} b {\"c\"\"c\"} {\"d\"\"d\"}",
          "27: } {",
          "28:   eval [string map [list \\",
          "29:     %WITHOUT_ROWID% $without_rowid %A% $a %B% $b %C% $c %D% $d",
          "30:   ] {",
          "31:   reset_db",
          "32:   do_execsql_test $tn.1.0 {",
          "33:     CREATE TABLE t1(%A% PRIMARY KEY, %B%, %C%, %D%) %WITHOUT_ROWID% ;",
          "34:     CREATE INDEX i1b  ON t1(%B%);",
          "35:     CREATE INDEX i1b2 ON t1(%B%) WHERE %C%<5;",
          "36:     CREATE INDEX i1b3 ON t1(%B%) WHERE %C%>=5;",
          "38:     CREATE INDEX i1c  ON t1(%C%);",
          "39:     CREATE INDEX i1c2 ON t1(%C%) WHERE %C% IS NULL;",
          "40:     CREATE INDEX i1c3 ON t1(%C%) WHERE %C% IS NOT NULL;",
          "42:     CREATE INDEX i1c4 ON t1(%C%) WHERE %D% < 'd';",
          "43:   }",
          "45:   do_execsql_test $tn.1.1 {",
          "46:     INSERT INTO t1 VALUES(0, NULL, NULL, 'a');",
          "47:     INSERT INTO t1 VALUES(1, 2, 3, 'b');",
          "48:     INSERT INTO t1 VALUES(4, 5, 6, 'c');",
          "49:     INSERT INTO t1 VALUES(7, 8, 9, 'd');",
          "50:   }",
          "52:   forcedelete rbu.db",
          "53:   do_test $tn.1.2 {",
          "54:     sqlite3 rbu rbu.db",
          "55:     rbu eval {",
          "56:       CREATE TABLE data_t1(%A%, %B%, %C%, %D%, rbu_control);",
          "58:       INSERT INTO data_t1 VALUES(10, 11, 12, 'e', 0);",
          "59:       INSERT INTO data_t1 VALUES(13, 14, NULL, 'f', 0);",
          "61:       INSERT INTO data_t1 VALUES(0, NULL, NULL, NULL, 1);",
          "62:       INSERT INTO data_t1 VALUES(4, NULL, NULL, NULL, 1);",
          "64:       INSERT INTO data_t1 VALUES(7, NULL, 4, NULL, '..x.');",
          "65:       INSERT INTO data_t1 VALUES(1, 10, NULL, NULL, '.xx.');",
          "66:     }",
          "67:     rbu close",
          "68:   } {}",
          "70:   do_test $tn.1.3 {",
          "71:     run_rbu test.db rbu.db",
          "72:     execsql { PRAGMA integrity_check }",
          "73:   } {ok}",
          "75:   do_execsql_test $tn.1.4 {",
          "76:     SELECT * FROM t1 ORDER BY %A%;",
          "77:   } {",
          "78:     1 10 {} b   7 8 4 d   10 11 12 e   13 14 {} f",
          "79:   }",
          "81:   set step 0",
          "82:   do_rbu_vacuum_test $tn.1.5 0",
          "83:   }]",
          "84: }",
          "86: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1250:   pIter->nIndex = 0;",
          "1251:   while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pList) ){",
          "1252:     const char *zIdx = (const char*)sqlite3_column_text(pList, 1);",
          "1253:     sqlite3_stmt *pXInfo = 0;",
          "1254:     if( zIdx==0 ) break;",
          "1255:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1256:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", zIdx)",
          "1257:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1258:     int bPartial = sqlite3_column_int(pList, 4);",
          "1261:     if( bPartial ){",
          "1262:       memset(pIter->abIndexed, 0x01, sizeof(u8)*pIter->nTblCol);",
          "1263:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1958:   }",
          "1959: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1970: static char *rbuObjIterGetIndexWhere(sqlite3rbu *p, RbuObjIter *pIter){",
          "1971:   sqlite3_stmt *pStmt = 0;",
          "1972:   int rc = p->rc;",
          "1973:   char *zRet = 0;",
          "1975:   if( rc==SQLITE_OK ){",
          "1976:     rc = prepareAndCollectError(p->dbMain, &pStmt, &p->zErrmsg,",
          "1977:         \"SELECT trim(sql) FROM sqlite_master WHERE type='index' AND name=?\"",
          "1978:     );",
          "1979:   }",
          "1980:   if( rc==SQLITE_OK ){",
          "1981:     int rc2;",
          "1982:     rc = sqlite3_bind_text(pStmt, 1, pIter->zIdx, -1, SQLITE_STATIC);",
          "1983:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "1984:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "1985:       if( zSql ){",
          "1987:         int i;",
          "1988:         for(i=0; zSql[i]; i++){",
          "1989:           char c = zSql[i];",
          "1990:           if( c=='(' ){",
          "1991:             nParen++;",
          "1992:           }",
          "1993:           else if( c==')' ){",
          "1994:             nParen--;",
          "1995:             if( nParen==0 ){",
          "1996:               i++;",
          "1997:               break;",
          "1998:             }",
          "1999:           }else if( c=='\"' || c=='\\'' || c=='`' ){",
          "2000:             for(i++; 1; i++){",
          "2001:               if( zSql[i]==c ){",
          "2002:                 if( zSql[i+1]!=c ) break;",
          "2003:                 i++;",
          "2004:               }",
          "2005:             }",
          "2006:           }else if( c=='[' ){",
          "2007:             for(i++; 1; i++){",
          "2008:               if( zSql[i]==']' ) break;",
          "2009:             }",
          "2010:           }",
          "2011:         }",
          "2012:         if( zSql[i] ){",
          "2013:           zRet = rbuStrndup(&zSql[i], &rc);",
          "2014:         }",
          "2015:       }",
          "2016:     }",
          "2018:     rc2 = sqlite3_finalize(pStmt);",
          "2019:     if( rc==SQLITE_OK ) rc = rc2;",
          "2020:   }",
          "2022:   p->rc = rc;",
          "2023:   return zRet;",
          "2024: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1989:       char *zBind = 0;",
          "1990:       int nBind = 0;",
          "1992:       assert( pIter->eType!=RBU_PK_VTAB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2055:       char *zPart = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1994:           p, pIter, &zImposterCols, &zImposterPK, &zWhere, &nBind",
          "1995:       );",
          "1996:       zBind = rbuObjIterGetBindlist(p, nBind);",
          "1999:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->dbMain, \"main\", 0, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2063:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2026:         char *zSql;",
          "2027:         if( rbuIsVacuum(p) ){",
          "2028:           zSql = sqlite3_mprintf(",
          "2030:               zCollist,",
          "2031:               pIter->zDataTbl,",
          "2033:           );",
          "2034:         }else",
          "2036:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "2037:           zSql = sqlite3_mprintf(",
          "2039:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "2041:           );",
          "2042:         }else{",
          "2043:           zSql = sqlite3_mprintf(",
          "2045:               \"UNION ALL \"",
          "2046:               \"SELECT %s, rbu_control FROM '%q' \"",
          "2048:               \"ORDER BY %s%s\",",
          "2050:               zCollist, pIter->zDataTbl,",
          "2051:               zCollist, zLimit",
          "2052:           );",
          "2053:         }",
          "",
          "[Removed Lines]",
          "2029:               \"SELECT %s, 0 AS rbu_control FROM '%q' ORDER BY %s%s\",",
          "2032:               zCollist, zLimit",
          "2038:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' ORDER BY %s%s\",",
          "2040:               zCollist, zLimit",
          "2044:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' \"",
          "2047:               \"WHERE typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2049:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "",
          "[Added Lines]",
          "2096:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2099:               zPart, zCollist, zLimit",
          "2105:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s ORDER BY %s%s\",",
          "2107:               zPart, zCollist, zLimit",
          "2111:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s \"",
          "2114:               \"%s %s typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2116:               zCollist, p->zStateDb, pIter->zDataTbl, zPart,",
          "2118:               zPart,",
          "2119:               (zPart ? \"AND\" : \"WHERE\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2058:       sqlite3_free(zImposterPK);",
          "2059:       sqlite3_free(zWhere);",
          "2060:       sqlite3_free(zBind);",
          "2061:     }else{",
          "2062:       int bRbuRowid = (pIter->eType==RBU_PK_VTAB)",
          "2063:                     ||(pIter->eType==RBU_PK_NONE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2130:       sqlite3_free(zPart);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f294cfc173c5653ef161dbff63b7838dbccdcad797f5163c49b3173f9f35ab0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}