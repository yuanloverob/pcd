{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "39b3bcf8ef3a069a9b98bf0ea52d5ad658ef05cd",
      "candidate_info": {
        "commit_hash": "39b3bcf8ef3a069a9b98bf0ea52d5ad658ef05cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39b3bcf8ef3a069a9b98bf0ea52d5ad658ef05cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Enhance the fuzzcheck test program so that it is able to simulate OOM errors in the same way that dbsqlfuzz does.\n\nFossilOrigin-Name: a65c8d4e26b2428ecb8232a4a6a44443aa1701319223397e61a823a5aa1827de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 219c296cc8cab13fa12b64c297bc4a98d8e21491309d97a031edf89ae77fce75",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522: static sqlite3_int64 maxDbSize = 104857600;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532: void oomFault(void){",
          "533:   if( eVerbosity ){",
          "534:     printf(\"Simulated OOM fault\\n\");",
          "535:   }",
          "536:   if( oomRepeat>0 ){",
          "537:     oomRepeat--;",
          "538:   }else{",
          "539:     oomCounter--;",
          "540:   }",
          "541: }",
          "546: static void *oomMalloc(int nByte){",
          "547:   if( oomCounter ){",
          "548:     if( oomCounter==1 ){",
          "549:       oomFault();",
          "550:       return 0;",
          "551:     }else{",
          "552:       oomCounter--;",
          "553:     }",
          "554:   }",
          "555:   return defaultMalloc(nByte);",
          "556: }",
          "560: static void registerOomSimulator(void){",
          "561:   sqlite3_mem_methods mem;",
          "562:   sqlite3_shutdown();",
          "563:   sqlite3_config(SQLITE_CONFIG_GETMALLOC, &mem);",
          "564:   defaultMalloc = mem.xMalloc;",
          "565:   mem.xMalloc = oomMalloc;",
          "566:   sqlite3_config(SQLITE_CONFIG_MALLOC, &mem);",
          "567: }",
          "570: static void disableOom(void){",
          "571:   oomCounter = 0;",
          "572:   oomRepeat = 0;",
          "573: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700:     ){",
          "701:       return SQLITE_DENY;",
          "702:     }",
          "703:   }else if( (eCode==SQLITE_ATTACH || eCode==SQLITE_DETACH)",
          "704:             && zArg1 && zArg1[0] ){",
          "705:     return SQLITE_DENY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     if( sqlite3_stricmp(\"oom\",zArg1)==0 && zArg2!=0 && zArg2[0]!=0 ){",
          "755:       oomCounter = atoi(zArg2);",
          "756:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1424:   sqlite3_initialize();",
          "1425:   iBegin = timeOfDay();",
          "1426: #ifdef __unix__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478:   registerOomSimulator();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1836:         runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "1837:         nTest++;",
          "1838:         g.zTestName[0] = 0;",
          "1839:         continue;",
          "1840:       }",
          "1841:       for(pDb=g.pFirstDb; pDb; pDb=pDb->pNext){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1895:         disableOom();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2b61bb61f4fd7d57a8469cb5a706166e0a0a40e",
      "candidate_info": {
        "commit_hash": "b2b61bb61f4fd7d57a8469cb5a706166e0a0a40e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2b61bb61f4fd7d57a8469cb5a706166e0a0a40e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Back out another NEVER added by check-in [7b62555e285f32d3] - the test case was already in test/fuzzdata3.db, but it only occurs if compiled without SQLITE_ENABLE_PREUPDATE_HOOK.\n\nFossilOrigin-Name: 61f873b14c2c835f3d10b018b357cb8b1f041e97e05709d7ab5a8055e5e05349",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 74ef6f2b6d9f50ff1d455e2263ba77707c1e8394b25b3f8a3a2a7b6e7f2c481e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6951:     u16 sz = pCArray->szCell[i];",
          "6952:     assert( sz>0 );",
          "6953:     if( SQLITE_WITHIN(pCell,aData,pEnd) ){",
          "6955:       pCell = &pTmp[pCell - aData];",
          "6956:     }else if( (uptr)(pCell+sz)>(uptr)pSrcEnd",
          "6957:            && (uptr)(pCell)<(uptr)pSrcEnd",
          "",
          "[Removed Lines]",
          "6954:       if( NEVER(((uptr)(pCell+sz))>(uptr)pEnd) ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "6954:       if( ((uptr)(pCell+sz))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a344ad47f3d059f9571b024b4e65258cfb44d321",
      "candidate_info": {
        "commit_hash": "a344ad47f3d059f9571b024b4e65258cfb44d321",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a344ad47f3d059f9571b024b4e65258cfb44d321",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "test/affinity3.test",
          "test/cast.test"
        ],
        "message": "Do not apply affinities when creating entries for automatic indexes on views. Fix for [95302bdb].\n\nFossilOrigin-Name: df12f097224ebc9473d9e2a8933bd7efed6490d09af2c012c9b59a7892369b7f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "test/affinity3.test||test/affinity3.test",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e72a08de764077f2bba6f7e3b99ea29001941671a971f2ccf7ceeb9c682fb1a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "942:   }",
          "943:   if( regOut ){",
          "944:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regBase, nCol, regOut);",
          "949:   }",
          "950:   sqlite3ReleaseTempRange(pParse, regBase, nCol);",
          "951:   return regBase;",
          "",
          "[Removed Lines]",
          "945:     if( pIdx->pTable->pSelect ){",
          "946:       const char *zAff = sqlite3IndexAffinityStr(pParse->db, pIdx);",
          "947:       sqlite3VdbeChangeP4(v, -1, zAff, P4_TRANSIENT);",
          "948:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/affinity3.test||test/affinity3.test": [
          "File: test/affinity3.test -> test/affinity3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   CREATE TABLE mzed AS SELECT * FROM idmap;",
          "73: }",
          "79: do_execsql_test affinity3-220 {",
          "80:   SELECT * FROM data JOIN mzed USING(id);",
          "81: } {1 abc a 4 xyz e}",
          "",
          "[Removed Lines]",
          "75: do_execsql_test affinity3-210 {",
          "76:   PRAGMA automatic_index=ON;",
          "77:   SELECT * FROM data JOIN idmap USING(id);",
          "78: } {1 abc a 4 xyz e}",
          "",
          "[Added Lines]",
          "75: #do_execsql_test affinity3-210 {",
          "76:   #PRAGMA automatic_index=ON;",
          "77:   #SELECT * FROM data JOIN idmap USING(id);",
          "78: #} {1 abc a 4 xyz e}",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:   } 1",
          "475: }",
          "478: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477: reset_db",
          "478: do_execsql_test cast-9.0 {",
          "479:   CREATE TABLE t0(c0);",
          "480:   INSERT INTO t0(c0) VALUES (0);",
          "481:   CREATE VIEW v1(c0, c1) AS",
          "482:     SELECT CAST(0.0 AS NUMERIC), COUNT(*) OVER () FROM t0;",
          "483:   SELECT v1.c0 FROM v1, t0 WHERE v1.c0=0;",
          "484: } {0.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59a8cb79316815f4eeb48e17252723df39589dda",
      "candidate_info": {
        "commit_hash": "59a8cb79316815f4eeb48e17252723df39589dda",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/59a8cb79316815f4eeb48e17252723df39589dda",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Add the SQLITE_ANALYZE_LIMIT compile-time option (expected to be temporary) that sets a threshold at which ANALYZE starts to use approximations during the analysis process.\n\nFossilOrigin-Name: a773fd4698d474fda5e57bc77ed66a79cf74efee2706f43f6def6f450bfd1fc0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 714419fe85cfdad22979183a94e4569c87740652758ab76b646753cf2b013b54",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "408: #ifdef SQLITE_ENABLE_STAT4",
          "411: #endif",
          "",
          "[Removed Lines]",
          "410:   int mxSample = sqlite3_value_int64(argv[2]) ? SQLITE_STAT4_SAMPLES : 0;",
          "",
          "[Added Lines]",
          "411:   int mxSample = OptimizationEnabled(db,SQLITE_Stat4) ?SQLITE_STAT4_SAMPLES :0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:   p->nRow = 0;",
          "443:   p->nCol = nCol;",
          "444:   p->nKeyCol = nKeyCol;",
          "445:   p->current.anDLt = (tRowcnt*)&p[1];",
          "446:   p->current.anEq = &p->current.anDLt[nColUp];",
          "448: #ifdef SQLITE_ENABLE_STAT4",
          "449:   if( mxSample ){",
          "453:     p->iGet = -1;",
          "455:     p->nPSample = (tRowcnt)(p->nEst/(mxSample/3+1) + 1);",
          "456:     p->current.anLt = &p->current.anEq[nColUp];",
          "457:     p->iPrn = 0x689e962d*(u32)nCol ^ 0xd0944565*(u32)sqlite3_value_int(argv[2]);",
          "",
          "[Removed Lines]",
          "454:     p->mxSample = mxSample;",
          "",
          "[Added Lines]",
          "446:   p->nSkipAhead = 0;",
          "451:   p->mxSample = mxSample;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "675: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685: #ifndef SQLITE_ANALYZE_LIMIT",
          "686: # define SQLITE_ANALYZE_LIMIT 0",
          "687: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "757:         sampleCopy(p, &p->aBest[i], &p->current);",
          "758:       }",
          "759:     }",
          "760:   }",
          "761: #endif",
          "762: }",
          "763: static const FuncDef statPushFuncdef = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   }else",
          "776: #endif",
          "777: #if SQLITE_ANALYZE_LIMIT",
          "778:   if( p->nRow>SQLITE_ANALYZE_LIMIT*(p->nSkipAhead+1) ){",
          "779:     p->nSkipAhead++;",
          "780:     sqlite3_result_int(context, p->current.anDLt[0]>0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "847:       return;",
          "848:     }",
          "851:     z = zRet + sqlite3Strlen30(zRet);",
          "852:     for(i=0; i<p->nKeyCol; i++){",
          "853:       u64 nDistinct = p->current.anDLt[i] + 1;",
          "",
          "[Removed Lines]",
          "850:     sqlite3_snprintf(24, zRet, \"%llu\", (u64)p->nRow);",
          "",
          "[Added Lines]",
          "872:     sqlite3_snprintf(24, zRet, \"%llu\",",
          "873:         p->nSkipAhead ? (u64)p->nEst : (u64)p->nRow);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1204:     }",
          "1205: #endif",
          "1206:     assert( regChng==(regStat+1) );",
          "1212:     callStatGet(pParse, regStat, STAT_GET_STAT1, regStat1);",
          "",
          "[Removed Lines]",
          "1207:     sqlite3VdbeAddFunctionCall(pParse, 1, regStat, regTemp, 2+IsStat4,",
          "1208:                                &statPushFuncdef, 0);",
          "1209:     sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1230:     {",
          "1231:       int j1, j2, j3;",
          "1232:       sqlite3VdbeAddFunctionCall(pParse, 1, regStat, regTemp, 2+IsStat4,",
          "1233:                                  &statPushFuncdef, 0);",
          "1234:       j1 = sqlite3VdbeAddOp1(v, OP_IsNull, regTemp);",
          "1235:       j2 = sqlite3VdbeAddOp1(v, OP_If, regTemp);",
          "1236:       j3 = sqlite3VdbeAddOp4Int(v, OP_SeekGT, iIdxCur, 0, regPrev, 1);",
          "1237:       sqlite3VdbeJumpHere(v, j1);",
          "1238:       sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "1239:       sqlite3VdbeJumpHere(v, j2);",
          "1240:       sqlite3VdbeJumpHere(v, j3);",
          "1241:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef9f719d0b2dfe76284be2a87e54b2ada07e3f0a",
      "candidate_info": {
        "commit_hash": "ef9f719d0b2dfe76284be2a87e54b2ada07e3f0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ef9f719d0b2dfe76284be2a87e54b2ada07e3f0a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/insert.c",
          "src/main.c",
          "src/select.c",
          "src/util.c",
          "src/vdbemem.c",
          "tool/omittest.tcl"
        ],
        "message": "Fix #ifdefs so it compiles cleanly with all SQLITE_OMIT compile-time options. Update compile-time option testing.\n\nFossilOrigin-Name: 7584e4b649d57767aac3906da6b06549d5b772aaa69f469c623ae5da834d54d5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/insert.c||src/insert.c",
          "src/main.c||src/main.c",
          "src/select.c||src/select.c",
          "src/util.c||src/util.c",
          "src/vdbemem.c||src/vdbemem.c",
          "tool/omittest.tcl||tool/omittest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9abf1bd2d2496ced9ef4619cd997933cd58452e6ab527ba70746c9975104b6a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"sqliteInt.h\"",
          "17: #include <stdlib.h>",
          "18: #include <assert.h>",
          "19: #include <math.h>",
          "20: #include \"vdbeInt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "21: #endif",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1640:       }",
          "1642:       b2ndPass = 1;",
          "1643:       if( nSeenReplace>0 && (pTab->tabFlags & TF_HasGenerated)!=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1643: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1648:         sqlite3ComputeGeneratedColumns(pParse, regNewData+1, pTab);",
          "1649:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1651: #endif",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3907:     case SQLITE_TESTCTRL_PRNG_SEED: {",
          "3908:       int x = va_arg(ap, int);",
          "3909:       int y;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3907: #ifndef SQLITE_OMIT_WSD",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3914:       sqlite3_randomness(0,0);",
          "3915:       break;",
          "3916:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3918: #endif",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2496:     assert( p->selFlags & SF_Values );",
          "2497:     assert( p->op==TK_ALL || (p->op==TK_SELECT && p->pPrior==0) );",
          "2498:     assert( p->pNext==0 || p->pEList->nExpr==p->pNext->pEList->nExpr );",
          "2499:     if( p->pWin ) return -1;",
          "2500:     if( p->pPrior==0 ) break;",
          "2501:     assert( p->pPrior->pNext==p );",
          "2502:     p = p->pPrior;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2499: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2501: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3863:       ){",
          "3864:         return 0;",
          "3865:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3864: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "3866: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4966:       if( !IsVirtual(pTab) && cannotBeFunction(pParse, pFrom) ){",
          "4967:         return WRC_Abort;",
          "4968:       }",
          "4970:       if( IsVirtual(pTab) || pTab->pSelect ){",
          "4971:         i16 nCol;",
          "4972:         u8 eCodeOrig = pWalker->eCode;",
          "",
          "[Removed Lines]",
          "4969: #if !defined(SQLITE_OMIT_VIEW) || !defined (SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "[Added Lines]",
          "4973: #if !defined(SQLITE_OMIT_VIEW) && !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6119:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
          "6120:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
          "6121:    && p->pWin==0",
          "6122:   ){",
          "6123:     p->selFlags &= ~SF_Distinct;",
          "6124:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6125: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6127: #endif",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"sqliteInt.h\"",
          "19: #include <stdarg.h>",
          "20: #include <math.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "22: #endif",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1559:       if( pVal->flags & MEM_Real ){",
          "1560:         pVal->u.r = -pVal->u.r;",
          "1561:       }else if( pVal->u.i==SMALLEST_INT64 ){",
          "1562:         pVal->u.r = -(double)SMALLEST_INT64;",
          "1563:         MemSetTypeFlag(pVal, MEM_Real);",
          "1564:       }else{",
          "1565:         pVal->u.i = -pVal->u.i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "1564: #else",
          "1565:         pVal->u.r = LARGEST_INT64;",
          "1566: #endif",
          "",
          "---------------"
        ],
        "tool/omittest.tcl||tool/omittest.tcl": [
          "File: tool/omittest.tcl -> tool/omittest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   }",
          "100:   if {$::SKIP_RUN} {",
          "102:   } else {",
          "103:     # Run the test suite.",
          "104:     puts -nonewline \"Testing $dir...\"",
          "",
          "[Removed Lines]",
          "101:       puts \"Skip testing $dir.\"",
          "",
          "[Added Lines]",
          "101:     #  puts \"Skip testing $dir.\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   } else {",
          "128:     set ::MAKEFILE ./Makefile.linux-gcc     ;# Default value",
          "129:   }",
          "131:   set ::TARGET testfixture                  ;# Default thing to build",
          "133:   for {set i 0} {$i < [llength $argv]} {incr i} {",
          "",
          "[Removed Lines]",
          "130:   set ::SKIP_RUN 0                          ;# Default to attempt test",
          "",
          "[Added Lines]",
          "130:   set ::SKIP_RUN 1                          ;# Default to attempt test",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:       -{1,2}skip_run {",
          "151:         set ::SKIP_RUN 1",
          "152:       }",
          "154:       -{1,2}help {",
          "155:         puts $::USAGE_MESSAGE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:       -{1,2}run {",
          "154:         set ::SKIP_RUN 0",
          "155:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:     SQLITE_OMIT_BETWEEN_OPTIMIZATION \\",
          "193:     SQLITE_OMIT_BLOB_LITERAL \\",
          "194:     SQLITE_OMIT_BTREECOUNT \\",
          "195:     SQLITE_OMIT_CAST \\",
          "196:     SQLITE_OMIT_CHECK \\",
          "197:     SQLITE_OMIT_COMPILEOPTION_DIAGS \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:     SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "207:     SQLITE_OMIT_FLAG_PRAGMAS \\",
          "208:     SQLITE_OMIT_FLOATING_POINT \\",
          "209:     SQLITE_OMIT_FOREIGN_KEY \\",
          "210:     SQLITE_OMIT_GET_TABLE \\",
          "211:     SQLITE_OMIT_HEX_INTEGER \\",
          "212:     SQLITE_OMIT_INCRBLOB \\",
          "213:     SQLITE_OMIT_INTEGRITY_CHECK \\",
          "214:     SQLITE_OMIT_LIKE_OPTIMIZATION \\",
          "215:     SQLITE_OMIT_LOAD_EXTENSION \\",
          "216:     SQLITE_OMIT_LOCALTIME \\",
          "217:     SQLITE_OMIT_LOOKASIDE \\",
          "218:     SQLITE_OMIT_MEMORYDB \\",
          "220:     SQLITE_OMIT_OR_OPTIMIZATION \\",
          "221:     SQLITE_OMIT_PAGER_PRAGMAS \\",
          "222:     SQLITE_OMIT_PARSER_TRACE \\",
          "",
          "[Removed Lines]",
          "219:     SQLITE_OMIT_MEMORY_ALLOCATION \\",
          "",
          "[Added Lines]",
          "214:     SQLITE_OMIT_GENERATED_COLUMNS \\",
          "219:     SQLITE_OMIT_INTROSPECTION_PRAGMAS \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}