{
  "cve_id": "CVE-2016-3672",
  "cve_desc": "The arch_pick_mmap_layout function in arch/x86/mm/mmap.c in the Linux kernel through 4.5.2 does not properly randomize the legacy base address, which makes it easier for local users to defeat the intended restrictions on the ADDR_NO_RANDOMIZE flag, and bypass the ASLR protection mechanism for a setuid or setgid program, by disabling stack-consumption resource limits.",
  "repo": "torvalds/linux",
  "patch_hash": "8b8addf891de8a00e4d39fc32f93f7c5eb8feceb",
  "patch_info": {
    "commit_hash": "8b8addf891de8a00e4d39fc32f93f7c5eb8feceb",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/8b8addf891de8a00e4d39fc32f93f7c5eb8feceb",
    "files": [
      "arch/x86/mm/mmap.c"
    ],
    "message": "x86/mm/32: Enable full randomization on i386 and X86_32\n\nCurrently on i386 and on X86_64 when emulating X86_32 in legacy mode, only\nthe stack and the executable are randomized but not other mmapped files\n(libraries, vDSO, etc.). This patch enables randomization for the\nlibraries, vDSO and mmap requests on i386 and in X86_32 in legacy mode.\n\nBy default on i386 there are 8 bits for the randomization of the libraries,\nvDSO and mmaps which only uses 1MB of VA.\n\nThis patch preserves the original randomness, using 1MB of VA out of 3GB or\n4GB. We think that 1MB out of 3GB is not a big cost for having the ASLR.\n\nThe first obvious security benefit is that all objects are randomized (not\nonly the stack and the executable) in legacy mode which highly increases\nthe ASLR effectiveness, otherwise the attackers may use these\nnon-randomized areas. But also sensitive setuid/setgid applications are\nmore secure because currently, attackers can disable the randomization of\nthese applications by setting the ulimit stack to \"unlimited\". This is a\nvery old and widely known trick to disable the ASLR in i386 which has been\nallowed for too long.\n\nAnother trick used to disable the ASLR was to set the ADDR_NO_RANDOMIZE\npersonality flag, but fortunately this doesn't work on setuid/setgid\napplications because there is security checks which clear Security-relevant\nflags.\n\nThis patch always randomizes the mmap_legacy_base address, removing the\npossibility to disable the ASLR by setting the stack to \"unlimited\".\n\nSigned-off-by: Hector Marco-Gisbert <hecmargi@upv.es>\nAcked-by: Ismael Ripoll Ripoll <iripoll@upv.es>\nAcked-by: Kees Cook <keescook@chromium.org>\nAcked-by: Arjan van de Ven <arjan@linux.intel.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: akpm@linux-foundation.org\nCc: kees Cook <keescook@chromium.org>\nLink: http://lkml.kernel.org/r/1457639460-5242-1-git-send-email-hecmargi@upv.es\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
    "before_after_code_files": [
      "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
    ]
  },
  "patch_diff": {
    "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c": [
      "File: arch/x86/mm/mmap.c -> arch/x86/mm/mmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "93:  return PAGE_ALIGN(TASK_SIZE - gap - rnd);",
      "94: }",
      "",
      "[Removed Lines]",
      "100: static unsigned long mmap_legacy_base(unsigned long rnd)",
      "101: {",
      "102:  if (mmap_is_ia32())",
      "103:   return TASK_UNMAPPED_BASE;",
      "104:  else",
      "105:   return TASK_UNMAPPED_BASE + rnd;",
      "106: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "116:  if (current->flags & PF_RANDOMIZE)",
      "117:   random_factor = arch_mmap_rnd();",
      "121:  if (mmap_is_legacy()) {",
      "122:   mm->mmap_base = mm->mmap_legacy_base;",
      "",
      "[Removed Lines]",
      "119:  mm->mmap_legacy_base = mmap_legacy_base(random_factor);",
      "",
      "[Added Lines]",
      "107:  mm->mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a89652769470d12cd484ee3d3f7bde0742be8d96",
      "candidate_info": {
        "commit_hash": "a89652769470d12cd484ee3d3f7bde0742be8d96",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a89652769470d12cd484ee3d3f7bde0742be8d96",
        "files": [
          "arch/x86/mm/mmap.c",
          "arch/x86/mm/mpx.c"
        ],
        "message": "x86/mpx: Do not set ->vm_ops on MPX VMAs\n\nMPX setups private anonymous mapping, but uses vma->vm_ops too.\nThis can confuse core VM, as it relies on vm->vm_ops to\ndistinguish file VMAs from anonymous.\n\nAs result we will get SIGBUS, because handle_pte_fault() thinks\nit's file VMA without vm_ops->fault and it doesn't know how to\nhandle the situation properly.\n\nLet's fix that by not setting ->vm_ops.\n\nWe don't really need ->vm_ops here: MPX VMA can be detected with\nVM_MPX flag. And vma_merge() will not merge MPX VMA with non-MPX\nVMA, because ->vm_flags won't match.\n\nThe only thing left is name of VMA. I'm not sure if it's part of\nABI, or we can just drop it. The patch keep it by providing\narch_vma_name() on x86.\n\nSigned-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nSigned-off-by: Dave Hansen <dave.hansen@linux.intel.com>\nCc: <stable@vger.kernel.org> # Fixes: 6b7339f4 (mm: avoid setting up anonymous pages into file mapping)\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: dave@sr71.net\nLink: http://lkml.kernel.org/r/20150720212958.305CC3E9@viggo.jf.intel.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c",
          "arch/x86/mm/mpx.c||arch/x86/mm/mpx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
          ],
          "candidate": [
            "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c": [
          "File: arch/x86/mm/mmap.c -> arch/x86/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   mm->get_unmapped_area = arch_get_unmapped_area_topdown;",
          "127:  }",
          "128: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: const char *arch_vma_name(struct vm_area_struct *vma)",
          "131: {",
          "132:  if (vma->vm_flags & VM_MPX)",
          "133:   return \"[mpx]\";",
          "134:  return NULL;",
          "135: }",
          "",
          "---------------"
        ],
        "arch/x86/mm/mpx.c||arch/x86/mm/mpx.c": [
          "File: arch/x86/mm/mpx.c -> arch/x86/mm/mpx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define CREATE_TRACE_POINTS",
          "21: #include <asm/trace/mpx.h>",
          "37: static inline unsigned long mpx_bd_size_bytes(struct mm_struct *mm)",
          "38: {",
          "39:  if (is_64bit_mm(mm))",
          "",
          "[Removed Lines]",
          "23: static const char *mpx_mapping_name(struct vm_area_struct *vma)",
          "24: {",
          "25:  return \"[mpx]\";",
          "26: }",
          "28: static struct vm_operations_struct mpx_vma_ops = {",
          "29:  .name = mpx_mapping_name,",
          "30: };",
          "32: static int is_mpx_vma(struct vm_area_struct *vma)",
          "33: {",
          "34:  return (vma->vm_ops == &mpx_vma_ops);",
          "35: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:   ret = -ENOMEM;",
          "102:   goto out;",
          "103:  }",
          "106:  if (vm_flags & VM_LOCKED) {",
          "107:   up_write(&mm->mmap_sem);",
          "",
          "[Removed Lines]",
          "104:  vma->vm_ops = &mpx_vma_ops;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "816:    return -EINVAL;",
          "818:   len = min(vma->vm_end, end) - addr;",
          "",
          "[Removed Lines]",
          "815:   if (!is_mpx_vma(vma))",
          "",
          "[Added Lines]",
          "797:   if (!(vma->vm_flags & VM_MPX))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "949:   next = next->vm_next;",
          "951:   prev = prev->vm_prev;",
          "",
          "[Removed Lines]",
          "948:  while (next && is_mpx_vma(next))",
          "950:  while (prev && is_mpx_vma(prev))",
          "",
          "[Added Lines]",
          "930:  while (next && (next->vm_flags & VM_MPX))",
          "932:  while (prev && (prev->vm_flags & VM_MPX))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82168140bc4cec7ec9bad39705518541149ff8b7",
      "candidate_info": {
        "commit_hash": "82168140bc4cec7ec9bad39705518541149ff8b7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/82168140bc4cec7ec9bad39705518541149ff8b7",
        "files": [
          "arch/x86/mm/mmap.c"
        ],
        "message": "x86: standardize mmap_rnd() usage\n\nIn preparation for splitting out ET_DYN ASLR, this refactors the use of\nmmap_rnd() to be used similarly to arm, and extracts the checking of\nPF_RANDOMIZE.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nReviewed-by: Ingo Molnar <mingo@kernel.org>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Andy Lutomirski <luto@amacapital.net>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
          ],
          "candidate": [
            "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c": [
          "File: arch/x86/mm/mmap.c -> arch/x86/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: static unsigned long mmap_rnd(void)",
          "69: {",
          "82:  return rnd << PAGE_SHIFT;",
          "83: }",
          "86: {",
          "87:  unsigned long gap = rlimit(RLIMIT_STACK);",
          "",
          "[Removed Lines]",
          "70:  unsigned long rnd = 0;",
          "76:  if (current->flags & PF_RANDOMIZE) {",
          "77:   if (mmap_is_ia32())",
          "78:    rnd = get_random_int() % (1<<8);",
          "79:   else",
          "80:    rnd = get_random_int() % (1<<28);",
          "81:  }",
          "85: static unsigned long mmap_base(void)",
          "",
          "[Added Lines]",
          "70:  unsigned long rnd;",
          "76:  if (mmap_is_ia32())",
          "77:   rnd = (unsigned long)get_random_int() % (1<<8);",
          "78:  else",
          "79:   rnd = (unsigned long)get_random_int() % (1<<28);",
          "84: static unsigned long mmap_base(unsigned long rnd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:  else if (gap > MAX_GAP)",
          "92:   gap = MAX_GAP;",
          "95: }",
          "102: {",
          "103:  if (mmap_is_ia32())",
          "104:   return TASK_UNMAPPED_BASE;",
          "105:  else",
          "107: }",
          "",
          "[Removed Lines]",
          "94:  return PAGE_ALIGN(TASK_SIZE - gap - mmap_rnd());",
          "101: static unsigned long mmap_legacy_base(void)",
          "106:   return TASK_UNMAPPED_BASE + mmap_rnd();",
          "",
          "[Added Lines]",
          "93:  return PAGE_ALIGN(TASK_SIZE - gap - rnd);",
          "100: static unsigned long mmap_legacy_base(unsigned long rnd)",
          "105:   return TASK_UNMAPPED_BASE + rnd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113: void arch_pick_mmap_layout(struct mm_struct *mm)",
          "114: {",
          "118:  if (mmap_is_legacy()) {",
          "119:   mm->mmap_base = mm->mmap_legacy_base;",
          "120:   mm->get_unmapped_area = arch_get_unmapped_area;",
          "121:  } else {",
          "122:   mm->get_unmapped_area = arch_get_unmapped_area_topdown;",
          "123:  }",
          "124: }",
          "",
          "[Removed Lines]",
          "115:  mm->mmap_legacy_base = mmap_legacy_base();",
          "116:  mm->mmap_base = mmap_base();",
          "",
          "[Added Lines]",
          "114:  unsigned long random_factor = 0UL;",
          "116:  if (current->flags & PF_RANDOMIZE)",
          "117:   random_factor = mmap_rnd();",
          "119:  mm->mmap_legacy_base = mmap_legacy_base(random_factor);",
          "125:   mm->mmap_base = mmap_base(random_factor);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b68f6caeac271620cd2f9362aeaed360e317df0",
      "candidate_info": {
        "commit_hash": "2b68f6caeac271620cd2f9362aeaed360e317df0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2b68f6caeac271620cd2f9362aeaed360e317df0",
        "files": [
          "arch/Kconfig",
          "arch/arm/Kconfig",
          "arch/arm/mm/mmap.c",
          "arch/arm64/Kconfig",
          "arch/arm64/mm/mmap.c",
          "arch/mips/Kconfig",
          "arch/mips/mm/mmap.c",
          "arch/powerpc/Kconfig",
          "arch/powerpc/mm/mmap.c",
          "arch/s390/Kconfig",
          "arch/s390/mm/mmap.c",
          "arch/x86/Kconfig",
          "arch/x86/mm/mmap.c",
          "include/linux/elf-randomize.h"
        ],
        "message": "mm: expose arch_mmap_rnd when available\n\nWhen an architecture fully supports randomizing the ELF load location,\na per-arch mmap_rnd() function is used to find a randomized mmap base.\nIn preparation for randomizing the location of ET_DYN binaries\nseparately from mmap, this renames and exports these functions as\narch_mmap_rnd(). Additionally introduces CONFIG_ARCH_HAS_ELF_RANDOMIZE\nfor describing this feature on architectures that support it\n(which is a superset of ARCH_BINFMT_ELF_RANDOMIZE_PIE, since s390\nalready supports a separated ET_DYN ASLR from mmap ASLR without the\nARCH_BINFMT_ELF_RANDOMIZE_PIE logic).\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: Hector Marco-Gisbert <hecmargi@upv.es>\nCc: Russell King <linux@arm.linux.org.uk>\nReviewed-by: Ingo Molnar <mingo@kernel.org>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: Will Deacon <will.deacon@arm.com>\nCc: Ralf Baechle <ralf@linux-mips.org>\nCc: Benjamin Herrenschmidt <benh@kernel.crashing.org>\nCc: Paul Mackerras <paulus@samba.org>\nCc: Michael Ellerman <mpe@ellerman.id.au>\nCc: Martin Schwidefsky <schwidefsky@de.ibm.com>\nCc: Heiko Carstens <heiko.carstens@de.ibm.com>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: \"David A. Long\" <dave.long@linaro.org>\nCc: Andrey Ryabinin <a.ryabinin@samsung.com>\nCc: Arun Chandran <achandran@mvista.com>\nCc: Yann Droneaud <ydroneaud@opteya.com>\nCc: Min-Hua Chen <orca.chen@gmail.com>\nCc: Paul Burton <paul.burton@imgtec.com>\nCc: Alex Smith <alex@alex-smith.me.uk>\nCc: Markos Chandras <markos.chandras@imgtec.com>\nCc: Vineeth Vijayan <vvijayan@mvista.com>\nCc: Jeff Bailey <jeffbailey@google.com>\nCc: Michael Holzheu <holzheu@linux.vnet.ibm.com>\nCc: Ben Hutchings <ben@decadent.org.uk>\nCc: Behan Webster <behanw@converseincode.com>\nCc: Ismael Ripoll <iripoll@upv.es>\nCc: Jan-Simon Mller <dl9pf@gmx.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "arch/arm/mm/mmap.c||arch/arm/mm/mmap.c",
          "arch/arm64/mm/mmap.c||arch/arm64/mm/mmap.c",
          "arch/mips/mm/mmap.c||arch/mips/mm/mmap.c",
          "arch/powerpc/mm/mmap.c||arch/powerpc/mm/mmap.c",
          "arch/s390/mm/mmap.c||arch/s390/mm/mmap.c",
          "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c",
          "include/linux/elf-randomize.h||include/linux/elf-randomize.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
          ],
          "candidate": [
            "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm/mm/mmap.c||arch/arm/mm/mmap.c": [
          "File: arch/arm/mm/mmap.c -> arch/arm/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:  return addr;",
          "170: }",
          "173: {",
          "174:  unsigned long rnd;",
          "",
          "[Removed Lines]",
          "172: static unsigned long mmap_rnd(void)",
          "",
          "[Added Lines]",
          "172: unsigned long arch_mmap_rnd(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:  unsigned long random_factor = 0UL;",
          "186:  if (current->flags & PF_RANDOMIZE)",
          "189:  if (mmap_is_legacy()) {",
          "190:   mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;",
          "",
          "[Removed Lines]",
          "187:   random_factor = mmap_rnd();",
          "",
          "[Added Lines]",
          "187:   random_factor = arch_mmap_rnd();",
          "",
          "---------------"
        ],
        "arch/arm64/mm/mmap.c||arch/arm64/mm/mmap.c": [
          "File: arch/arm64/mm/mmap.c -> arch/arm64/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  return sysctl_legacy_va_layout;",
          "48: }",
          "51: {",
          "52:  unsigned long rnd;",
          "",
          "[Removed Lines]",
          "50: static unsigned long mmap_rnd(void)",
          "",
          "[Added Lines]",
          "50: unsigned long arch_mmap_rnd(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  unsigned long random_factor = 0UL;",
          "79:  if (current->flags & PF_RANDOMIZE)",
          "",
          "[Removed Lines]",
          "80:   random_factor = mmap_rnd();",
          "",
          "[Added Lines]",
          "80:   random_factor = arch_mmap_rnd();",
          "",
          "---------------"
        ],
        "arch/mips/mm/mmap.c||arch/mips/mm/mmap.c": [
          "File: arch/mips/mm/mmap.c -> arch/mips/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:    addr0, len, pgoff, flags, DOWN);",
          "143: }",
          "146: {",
          "147:  unsigned long rnd;",
          "",
          "[Removed Lines]",
          "145: static unsigned long mmap_rnd(void)",
          "",
          "[Added Lines]",
          "145: unsigned long arch_mmap_rnd(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:  unsigned long random_factor = 0UL;",
          "163:  if (current->flags & PF_RANDOMIZE)",
          "166:  if (mmap_is_legacy()) {",
          "167:   mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;",
          "",
          "[Removed Lines]",
          "164:   random_factor = mmap_rnd();",
          "",
          "[Added Lines]",
          "164:   random_factor = arch_mmap_rnd();",
          "",
          "---------------"
        ],
        "arch/powerpc/mm/mmap.c||arch/powerpc/mm/mmap.c": [
          "File: arch/powerpc/mm/mmap.c -> arch/powerpc/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:  return sysctl_legacy_va_layout;",
          "54: }",
          "57: {",
          "58:  unsigned long rnd;",
          "",
          "[Removed Lines]",
          "56: static unsigned long mmap_rnd(void)",
          "",
          "[Added Lines]",
          "56: unsigned long arch_mmap_rnd(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:  unsigned long random_factor = 0UL;",
          "89:  if (current->flags & PF_RANDOMIZE)",
          "",
          "[Removed Lines]",
          "90:   random_factor = mmap_rnd();",
          "",
          "[Added Lines]",
          "90:   random_factor = arch_mmap_rnd();",
          "",
          "---------------"
        ],
        "arch/s390/mm/mmap.c||arch/s390/mm/mmap.c": [
          "File: arch/s390/mm/mmap.c -> arch/s390/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  return sysctl_legacy_va_layout;",
          "61: }",
          "64: {",
          "65:  if (is_32bit_task())",
          "66:   return (get_random_int() & 0x7ff) << PAGE_SHIFT;",
          "",
          "[Removed Lines]",
          "63: static unsigned long mmap_rnd(void)",
          "",
          "[Added Lines]",
          "63: unsigned long arch_mmap_rnd(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:   base &= ~((1UL << 32) - 1);",
          "189:  if (current->flags & PF_RANDOMIZE)",
          "192:  return base;",
          "193: }",
          "",
          "[Removed Lines]",
          "190:   base += mmap_rnd();",
          "",
          "[Added Lines]",
          "190:   base += arch_mmap_rnd();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:  unsigned long random_factor = 0UL;",
          "205:  if (current->flags & PF_RANDOMIZE)",
          "",
          "[Removed Lines]",
          "206:   random_factor = mmap_rnd();",
          "",
          "[Added Lines]",
          "206:   random_factor = arch_mmap_rnd();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "283:  unsigned long random_factor = 0UL;",
          "285:  if (current->flags & PF_RANDOMIZE)",
          "",
          "[Removed Lines]",
          "286:   random_factor = mmap_rnd();",
          "",
          "[Added Lines]",
          "286:   random_factor = arch_mmap_rnd();",
          "",
          "---------------"
        ],
        "arch/x86/mm/mmap.c||arch/x86/mm/mmap.c": [
          "File: arch/x86/mm/mmap.c -> arch/x86/mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  return sysctl_legacy_va_layout;",
          "66: }",
          "69: {",
          "70:  unsigned long rnd;",
          "",
          "[Removed Lines]",
          "68: static unsigned long mmap_rnd(void)",
          "",
          "[Added Lines]",
          "68: unsigned long arch_mmap_rnd(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:  unsigned long random_factor = 0UL;",
          "116:  if (current->flags & PF_RANDOMIZE)",
          "119:  mm->mmap_legacy_base = mmap_legacy_base(random_factor);",
          "",
          "[Removed Lines]",
          "117:   random_factor = mmap_rnd();",
          "",
          "[Added Lines]",
          "117:   random_factor = arch_mmap_rnd();",
          "",
          "---------------"
        ],
        "include/linux/elf-randomize.h||include/linux/elf-randomize.h": [
          "File: include/linux/elf-randomize.h -> include/linux/elf-randomize.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef _ELF_RANDOMIZE_H",
          "2: #define _ELF_RANDOMIZE_H",
          "4: #ifndef CONFIG_ARCH_HAS_ELF_RANDOMIZE",
          "5: static inline unsigned long arch_mmap_rnd(void) { return 0; }",
          "6: #else",
          "7: extern unsigned long arch_mmap_rnd(void);",
          "8: #endif",
          "10: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}