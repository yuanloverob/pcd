{
  "cve_id": "CVE-2018-1000195",
  "cve_desc": "A server-side request forgery vulnerability exists in Jenkins 2.120 and older, LTS 2.107.2 and older in ZipExtractionInstaller.java that allows users with Overall/Read permission to have Jenkins submit a HTTP GET request to an arbitrary URL and learn whether the response is successful (200) or not.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "6eea1e97840b5623829b2c1fd2e363c045bdc230",
  "patch_info": {
    "commit_hash": "6eea1e97840b5623829b2c1fd2e363c045bdc230",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/6eea1e97840b5623829b2c1fd2e363c045bdc230",
    "files": [
      "core/src/main/java/hudson/tools/ZipExtractionInstaller.java",
      "core/src/main/resources/hudson/tools/ZipExtractionInstaller/config.jelly",
      "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java"
    ],
    "message": "[SECURITY-794]",
    "before_after_code_files": [
      "core/src/main/java/hudson/tools/ZipExtractionInstaller.java||core/src/main/java/hudson/tools/ZipExtractionInstaller.java",
      "core/src/main/resources/hudson/tools/ZipExtractionInstaller/config.jelly||core/src/main/resources/hudson/tools/ZipExtractionInstaller/config.jelly",
      "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java||test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/tools/ZipExtractionInstaller.java||core/src/main/java/hudson/tools/ZipExtractionInstaller.java": [
      "File: core/src/main/java/hudson/tools/ZipExtractionInstaller.java -> core/src/main/java/hudson/tools/ZipExtractionInstaller.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: import java.net.URL;",
      "43: import java.net.URLConnection;",
      "45: import org.jenkinsci.Symbol;",
      "46: import org.kohsuke.stapler.DataBoundConstructor;",
      "47: import org.kohsuke.stapler.QueryParameter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: import jenkins.model.Jenkins;",
      "49: import org.kohsuke.stapler.interceptor.RequirePOST;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95:             return Messages.ZipExtractionInstaller_DescriptorImpl_displayName();",
      "96:         }",
      "98:         public FormValidation doCheckUrl(@QueryParameter String value) {",
      "99:             try {",
      "100:                 URLConnection conn = ProxyConfiguration.open(new URL(value));",
      "101:                 conn.connect();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:         @RequirePOST",
      "102:             Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);",
      "",
      "---------------"
    ],
    "core/src/main/resources/hudson/tools/ZipExtractionInstaller/config.jelly||core/src/main/resources/hudson/tools/ZipExtractionInstaller/config.jelly": [
      "File: core/src/main/resources/hudson/tools/ZipExtractionInstaller/config.jelly -> core/src/main/resources/hudson/tools/ZipExtractionInstaller/config.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: <j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\" xmlns:st=\"jelly:stapler\" xmlns:t=\"/hudson/tools\">",
      "26:     <t:label />",
      "27:     <f:entry title=\"${%Download URL for binary archive}\" field=\"url\">",
      "29:     </f:entry>",
      "30:     <f:entry title=\"${%Subdirectory of extracted archive}\" field=\"subdir\">",
      "31:         <f:textbox/>",
      "",
      "[Removed Lines]",
      "28:         <f:textbox/>",
      "",
      "[Added Lines]",
      "28:         <f:textbox checkMethod=\"post\"/>",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java||test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java": [
      "File: test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java -> test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.tools;",
      "26: import com.gargoylesoftware.htmlunit.HttpMethod;",
      "27: import com.gargoylesoftware.htmlunit.InteractivePage;",
      "28: import com.gargoylesoftware.htmlunit.WebRequest;",
      "29: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "30: import com.gargoylesoftware.htmlunit.html.HtmlTextInput;",
      "31: import com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine;",
      "32: import com.gargoylesoftware.htmlunit.javascript.host.xml.XMLHttpRequest;",
      "33: import hudson.model.JDK;",
      "34: import hudson.model.User;",
      "35: import hudson.util.FormValidation;",
      "36: import jenkins.model.Jenkins;",
      "37: import net.sourceforge.htmlunit.corejs.javascript.Function;",
      "38: import net.sourceforge.htmlunit.corejs.javascript.Scriptable;",
      "39: import org.junit.Rule;",
      "40: import org.junit.Test;",
      "41: import org.junit.rules.TemporaryFolder;",
      "42: import org.jvnet.hudson.test.Issue;",
      "43: import org.jvnet.hudson.test.JenkinsRule;",
      "44: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
      "46: import javax.annotation.Nonnull;",
      "47: import javax.annotation.Nullable;",
      "48: import java.lang.reflect.Field;",
      "49: import java.net.URL;",
      "50: import java.net.URLDecoder;",
      "51: import java.net.URLEncoder;",
      "52: import java.nio.charset.StandardCharsets;",
      "53: import java.util.ArrayList;",
      "54: import java.util.Arrays;",
      "55: import java.util.List;",
      "57: import static org.hamcrest.Matchers.containsString;",
      "58: import static org.junit.Assert.assertEquals;",
      "59: import static org.junit.Assert.assertThat;",
      "60: import static org.junit.Assert.fail;",
      "62: public class ZipExtractionInstallerTest {",
      "64:     @Rule",
      "65:     public JenkinsRule j = new JenkinsRule();",
      "67:     @Rule",
      "68:     public TemporaryFolder tmp = new TemporaryFolder();",
      "70:     @Test",
      "71:     @Issue(\"SECURITY-794\")",
      "72:     public void onlyAdminCanReachTheDoCheck() throws Exception {",
      "73:         final String ADMIN = \"admin\";",
      "74:         final String USER = \"user\";",
      "76:         j.jenkins.setCrumbIssuer(null);",
      "77:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
      "78:         j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()",
      "79:                 .grant(Jenkins.ADMINISTER).everywhere().to(ADMIN)",
      "80:                 .grant(Jenkins.READ).everywhere().to(USER)",
      "81:         );",
      "83:         User.getById(ADMIN, true);",
      "84:         User.getById(USER, true);",
      "86:         WebRequest request = new WebRequest(new URL(j.getURL() + \"descriptorByName/hudson.tools.ZipExtractionInstaller/checkUrl\"), HttpMethod.POST);",
      "87:         request.setRequestBody(URLEncoder.encode(\"value=https://www.google.com\", StandardCharsets.UTF_8.name()));",
      "89:         JenkinsRule.WebClient adminWc = j.createWebClient();",
      "90:         adminWc.login(ADMIN);",
      "91:         assertEquals(200, adminWc.getPage(request).getWebResponse().getStatusCode());",
      "93:         JenkinsRule.WebClient userWc = j.createWebClient();",
      "94:         userWc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "95:         userWc.login(USER);",
      "96:         assertEquals(403, userWc.getPage(request).getWebResponse().getStatusCode());",
      "97:     }",
      "99:     @Test",
      "100:     @Issue(\"SECURITY-794\")",
      "101:     public void roundtrip() throws Exception {",
      "102:         final String VALID_URL = \"https://www.google.com\";",
      "103:         final String INVALID_URL = \"only-crappy-letters\";",
      "105:         ZipExtractionInstaller installer = new ZipExtractionInstaller(\"\", VALID_URL, \"\");",
      "107:         j.jenkins.getJDKs().add(new JDK(\"test\", tmp.getRoot().getAbsolutePath(), Arrays.asList(",
      "108:                 new InstallSourceProperty(Arrays.<ToolInstaller>asList(installer)))));",
      "110:         JenkinsRule.WebClient wc = j.createWebClient();",
      "112:         SpyingJavaScriptEngine jsEngine = new SpyingJavaScriptEngine(wc, \"ZipExtractionInstaller/checkUrl\", HttpMethod.POST);",
      "113:         wc.setJavaScriptEngine(jsEngine);",
      "115:         HtmlPage page = wc.goTo(\"configureTools\");",
      "117:         XMLHttpRequest lastRequest = jsEngine.getLastRequest();",
      "118:         String body = URLDecoder.decode(getPrivateWebRequestField(lastRequest).getRequestBody(), \"UTF-8\");",
      "119:         assertThat(body, containsString(VALID_URL));",
      "120:         assertEquals(FormValidation.ok().renderHtml(), lastRequest.getResponseText());",
      "122:         HtmlTextInput urlInput = page.getDocumentElement().getOneHtmlElementByAttribute(\"input\", \"value\", VALID_URL);",
      "123:         urlInput.setAttribute(\"value\", INVALID_URL);",
      "124:         j.submit(page.getFormByName(\"config\"));",
      "126:         JDK jdk = j.jenkins.getJDK(\"test\");",
      "127:         InstallSourceProperty isp = jdk.getProperties().get(InstallSourceProperty.class);",
      "128:         assertEquals(1, isp.installers.size());",
      "129:         assertEquals(INVALID_URL, isp.installers.get(ZipExtractionInstaller.class).getUrl());",
      "131:         wc.goTo(\"configureTools\");",
      "133:         lastRequest = jsEngine.getLastRequest();",
      "134:         body = URLDecoder.decode(getPrivateWebRequestField(lastRequest).getRequestBody(), \"UTF-8\");",
      "135:         assertThat(body, containsString(INVALID_URL));",
      "136:         assertThat(lastRequest.getResponseText(), containsString(Messages.ZipExtractionInstaller_malformed_url()));",
      "137:     }",
      "139:     private class SpyingJavaScriptEngine extends JavaScriptEngine {",
      "140:         private List<XMLHttpRequest> storedRequests = new ArrayList<>();",
      "141:         private String urlToMatch;",
      "142:         private HttpMethod method;",
      "144:         SpyingJavaScriptEngine(JenkinsRule.WebClient wc, @Nullable String urlToMatch, @Nullable HttpMethod method) {",
      "145:             super(wc);",
      "146:             this.urlToMatch = urlToMatch;",
      "147:             this.method = method;",
      "148:         }",
      "150:         @Override",
      "151:         public Object callFunction(InteractivePage page, Function function, Scriptable scope, Scriptable thisObject, Object[] args) {",
      "152:             if (thisObject instanceof XMLHttpRequest) {",
      "153:                 try {",
      "154:                     WebRequest request = getPrivateWebRequestField((XMLHttpRequest) thisObject);",
      "155:                     boolean correctUrl = urlToMatch == null || request.getUrl().toString().contains(urlToMatch);",
      "156:                     boolean correctMethod = method == null || request.getHttpMethod().equals(method);",
      "157:                     if (correctUrl && correctMethod) {",
      "158:                         if (((XMLHttpRequest) thisObject).getReadyState() == 4) {",
      "159:                             storedRequests.add((XMLHttpRequest) thisObject);",
      "160:                         }",
      "161:                     }",
      "162:                 } catch (NoSuchFieldException | IllegalAccessException e) {",
      "163:                     e.printStackTrace();",
      "164:                 }",
      "165:             }",
      "166:             return super.callFunction(page, function, scope, thisObject, args);",
      "167:         }",
      "169:         @Nonnull",
      "170:         public XMLHttpRequest getLastRequest() {",
      "171:             if (storedRequests.isEmpty()) {",
      "172:                 fail(\"There is no available requests for the proposed url/method\");",
      "173:             }",
      "174:             return storedRequests.get(storedRequests.size() - 1);",
      "175:         }",
      "176:     }",
      "178:     private static WebRequest getPrivateWebRequestField(XMLHttpRequest xmlHttpRequest) throws NoSuchFieldException, IllegalAccessException {",
      "179:         Field webRequest_Field = XMLHttpRequest.class.getDeclaredField(\"webRequest_\");",
      "180:         webRequest_Field.setAccessible(true);",
      "181:         return (WebRequest) webRequest_Field.get(xmlHttpRequest);",
      "182:     }",
      "183: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3bb56b81e1bf586cd075f691f9981a2166fa7660",
      "candidate_info": {
        "commit_hash": "3bb56b81e1bf586cd075f691f9981a2166fa7660",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/3bb56b81e1bf586cd075f691f9981a2166fa7660",
        "files": [
          "test-pom/pom.xml",
          "test/src/test/java/hudson/model/ComputerTest.java",
          "test/src/test/java/hudson/model/ProjectTest.java",
          "test/src/test/java/hudson/model/ViewTest.java",
          "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java",
          "test/src/test/java/jenkins/bugs/Jenkins19124Test.java",
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "test/src/test/java/lib/form/PasswordTest.java"
        ],
        "message": "[JENKINS-53511] Bump of JTH to include new methods in WebClient - And thus, adapt the code due to the breaking changes in JTH sub-lib",
        "before_after_code_files": [
          "test/src/test/java/hudson/model/ComputerTest.java||test/src/test/java/hudson/model/ComputerTest.java",
          "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java",
          "test/src/test/java/hudson/model/ViewTest.java||test/src/test/java/hudson/model/ViewTest.java",
          "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java||test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java",
          "test/src/test/java/jenkins/bugs/Jenkins19124Test.java||test/src/test/java/jenkins/bugs/Jenkins19124Test.java",
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java||test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java||test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/model/ComputerTest.java||test/src/test/java/hudson/model/ComputerTest.java": [
          "File: test/src/test/java/hudson/model/ComputerTest.java -> test/src/test/java/hudson/model/ComputerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
          "36: import java.io.File;",
          "38: import jenkins.model.Jenkins;",
          "39: import hudson.slaves.DumbSlave;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     private void verifyOfflineCause(Computer computer) throws Exception {",
          "111:         XmlPage page = j.createWebClient().goToXml(\"computer/\" + computer.getName() + \"/config.xml\");",
          "113:         assertThat(content, containsString(\"temporaryOfflineCause\"));",
          "114:         assertThat(content, containsString(\"<userId>username</userId>\"));",
          "115:         assertThat(content, not(containsString(\"ApiTokenProperty\")));",
          "",
          "[Removed Lines]",
          "112:         String content = page.getWebResponse().getContentAsString(\"UTF-8\");",
          "",
          "[Added Lines]",
          "113:         String content = page.getWebResponse().getContentAsString(StandardCharsets.UTF_8);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java": [
          "File: test/src/test/java/hudson/model/ProjectTest.java -> test/src/test/java/hudson/model/ProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "27: import com.gargoylesoftware.htmlunit.WebRequest;",
          "28: import hudson.*;",
          "29: import hudson.model.queue.QueueTaskFuture;",
          "30: import hudson.security.AccessDeniedException2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import com.gargoylesoftware.htmlunit.javascript.host.event.Event;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:         assertEquals(\"Scm retry count should be the same as global scm retry count.\", 6, p.getScmCheckoutRetryCount());",
          "253:         HtmlForm form = j.createWebClient().goTo(p.getUrl() + \"/configure\").getFormByName(\"config\");",
          "254:         ((HtmlElement)form.getByXPath(\"//div[@class='advancedLink']//button\").get(0)).click();",
          "256:         form.getInputByName(\"scmCheckoutRetryCount\").setValueAttribute(\"7\");",
          "257:         j.submit(form);",
          "258:         assertEquals(\"Scm retry count was set.\", 7, p.getScmCheckoutRetryCount());",
          "",
          "[Removed Lines]",
          "255:         form.getInputByName(\"hasCustomScmCheckoutRetryCount\").click();",
          "",
          "[Added Lines]",
          "257:         form.getInputByName(\"hasCustomScmCheckoutRetryCount\").click(new Event(), true);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ViewTest.java||test/src/test/java/hudson/model/ViewTest.java": [
          "File: test/src/test/java/hudson/model/ViewTest.java -> test/src/test/java/hudson/model/ViewTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:         ListView view = listView(\"v\");",
          "247:         view.description = \"one\";",
          "248:         WebClient wc = j.createWebClient();",
          "250:         assertTrue(xml, xml.contains(\"<description>one</description>\"));",
          "251:         xml = xml.replace(\"<description>one</description>\", \"<description>two</description>\");",
          "252:         WebRequest req = new WebRequest(wc.createCrumbedUrl(\"view/v/config.xml\"), HttpMethod.POST);",
          "",
          "[Removed Lines]",
          "249:         String xml = wc.goToXml(\"view/v/config.xml\").getContent();",
          "",
          "[Added Lines]",
          "249:         String xml = wc.goToXml(\"view/v/config.xml\").getWebResponse().getContentAsString();",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java||test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java": [
          "File: test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java -> test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.tools;",
          "26: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "28: import com.gargoylesoftware.htmlunit.WebRequest;",
          "29: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "30: import com.gargoylesoftware.htmlunit.html.HtmlTextInput;",
          "",
          "[Removed Lines]",
          "27: import com.gargoylesoftware.htmlunit.InteractivePage;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:         }",
          "150:         @Override",
          "152:             if (thisObject instanceof XMLHttpRequest) {",
          "153:                 try {",
          "154:                     WebRequest request = getPrivateWebRequestField((XMLHttpRequest) thisObject);",
          "",
          "[Removed Lines]",
          "151:         public Object callFunction(InteractivePage page, Function function, Scriptable scope, Scriptable thisObject, Object[] args) {",
          "",
          "[Added Lines]",
          "150:         public Object callFunction(HtmlPage page, Function function, Scriptable scope, Scriptable thisObject, Object[] args) {",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/bugs/Jenkins19124Test.java||test/src/test/java/jenkins/bugs/Jenkins19124Test.java": [
          "File: test/src/test/java/jenkins/bugs/Jenkins19124Test.java -> test/src/test/java/jenkins/bugs/Jenkins19124Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         JenkinsRule.WebClient wc = j.createWebClient();",
          "42:         HtmlPage c = wc.getPage(p, \"configure\");",
          "43:         HtmlTextInput alpha = c.getElementByName(\"_.alpha\");",
          "44:         alpha.setValueAttribute(\"hello\");",
          "45:         WebClientUtil.waitForJSExec(wc);",
          "46:         assertEquals(\"hello\", d.alpha);",
          "47:         assertEquals(\"2\", d.bravo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         alpha.fireEvent(\"change\");",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java": [
          "File: test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java -> test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import hudson.util.Secret;",
          "12: import hudson.util.SecretHelper;",
          "13: import org.apache.commons.io.FileUtils;",
          "15: import org.jvnet.hudson.test.HudsonTestCase;",
          "16: import org.jvnet.hudson.test.recipes.Recipe.Runner;",
          "17: import org.xml.sax.SAXException;",
          "",
          "[Removed Lines]",
          "14: import org.hamcrest.CoreMatchers;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: import java.io.IOException;",
          "23: import java.lang.annotation.Annotation;",
          "24: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "26: import static org.junit.Assert.assertThat;",
          "",
          "[Added Lines]",
          "24: import java.util.stream.Stream;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     }",
          "134:     private HtmlButton getButton(HtmlForm form, int index) {",
          "136:     }",
          "138:     public void testScanOnBoot() throws Exception {",
          "",
          "[Removed Lines]",
          "135:         return form.<HtmlButton>getHtmlElementsByTagName(\"button\").get(index);",
          "",
          "[Added Lines]",
          "134:         Stream<HtmlButton> buttonStream = form.getElementsByTagName(\"button\").stream()",
          "135:                 .filter(HtmlButton.class::isInstance)",
          "136:                 .map(HtmlButton.class::cast);",
          "138:         if (index > 0) {",
          "139:             buttonStream = buttonStream.skip(index - 1);",
          "140:         }",
          "142:         return buttonStream",
          "143:                 .findFirst()",
          "144:                 .orElse(null);",
          "",
          "---------------"
        ],
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:             ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "149:             String pName = p.getFullName();",
          "150:             getJobCommand.main(Collections.singletonList(pName), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "152:             CopyJobCommand copyJobCommand = new CopyJobCommand();",
          "153:             copyJobCommand.setTransportAuth(adminAuth);",
          "154:             String pAdminName = pName + \"-admin\";",
          "",
          "[Removed Lines]",
          "151:             assertEquals(xmlAdmin, baos.toString(configXml.getWebResponse().getContentCharset()));",
          "",
          "[Added Lines]",
          "151:             assertEquals(xmlAdmin, baos.toString(configXml.getWebResponse().getContentCharset().name()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:             getJobCommand.setTransportAuth(devAuth);",
          "172:             baos = new ByteArrayOutputStream();",
          "173:             getJobCommand.main(Collections.singletonList(pName), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "175:             copyJobCommand = new CopyJobCommand();",
          "176:             copyJobCommand.setTransportAuth(devAuth);",
          "177:             String pDevName = pName + \"-dev\";",
          "",
          "[Removed Lines]",
          "174:             assertEquals(xmlDev, baos.toString(configXml.getWebResponse().getContentCharset()));",
          "",
          "[Added Lines]",
          "174:             assertEquals(xmlDev, baos.toString(configXml.getWebResponse().getContentCharset().name()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:         }",
          "195:         VulnerableProperty.DescriptorImpl.incomingURL = null;",
          "196:         String secret = \"s3cr3t\";",
          "197:         field.setText(secret);",
          "198:         while (VulnerableProperty.DescriptorImpl.incomingURL == null) {",
          "199:             Thread.sleep(100); // form validation of edited value",
          "200:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:         field.fireEvent(\"change\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}