{
  "cve_id": "CVE-2014-3572",
  "cve_desc": "The ssl3_get_key_exchange function in s3_clnt.c in OpenSSL before 0.9.8zd, 1.0.0 before 1.0.0p, and 1.0.1 before 1.0.1k allows remote SSL servers to conduct ECDHE-to-ECDH downgrade attacks and trigger a loss of forward secrecy by omitting the ServerKeyExchange message.",
  "repo": "openssl/openssl",
  "patch_hash": "b15f8769644b00ef7283521593360b7b2135cb63",
  "patch_info": {
    "commit_hash": "b15f8769644b00ef7283521593360b7b2135cb63",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/b15f8769644b00ef7283521593360b7b2135cb63",
    "files": [
      "CHANGES",
      "ssl/s3_clnt.c"
    ],
    "message": "ECDH downgrade bug fix.\n\nFix bug where an OpenSSL client would accept a handshake using an\nephemeral ECDH ciphersuites with the server key exchange message omitted.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n\nCVE-2014-3572\nReviewed-by: Matt Caswell <matt@openssl.org>",
    "before_after_code_files": [
      "ssl/s3_clnt.c||ssl/s3_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1376:  int encoded_pt_len = 0;",
      "1377: #endif",
      "1381:  n=s->method->ssl_get_message(s,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1379:  EVP_MD_CTX_init(&md_ctx);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1386:   &ok);",
      "1387:  if (!ok) return((int)n);",
      "1389:  if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)",
      "1390:   {",
      "1391: #ifndef OPENSSL_NO_PSK",
      "1393:      omitted if no identity hint is sent. Set",
      "1394:      session->sess_cert anyway to avoid problems",
      "1397:    {",
      "1398:    s->session->sess_cert=ssl_sess_cert_new();",
      "1399:    if (s->ctx->psk_identity_hint)",
      "",
      "[Removed Lines]",
      "1396:   if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)",
      "",
      "[Added Lines]",
      "1391:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
      "1399:   if (alg_k & (SSL_kDHE|SSL_kECDHE))",
      "1400:    {",
      "1401:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
      "1402:    al = SSL_AD_UNEXPECTED_MESSAGE;",
      "1403:    goto f_err;",
      "1404:    }",
      "1410:   if (alg_k & SSL_kPSK)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1439:  param_len=0;",
      "1442:  alg_a=s->s3->tmp.new_cipher->algorithm_auth;",
      "1445:  al=SSL_AD_DECODE_ERROR;",
      "",
      "[Removed Lines]",
      "1441:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
      "1443:  EVP_MD_CTX_init(&md_ctx);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9908bf9b8d6d609736b537f4ecda720ff5dc078",
      "candidate_info": {
        "commit_hash": "b9908bf9b8d6d609736b537f4ecda720ff5dc078",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b9908bf9b8d6d609736b537f4ecda720ff5dc078",
        "files": [
          "include/openssl/ssl.h",
          "ssl/s3_both.c",
          "ssl/s3_clnt.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Split client message reading and writing functions\n\nThe new state machine code will split up the reading and writing of\nhanshake messages into discrete phases. In order to facilitate that the\nexisting \"get\" type functions will be split into two halves: one to get\nthe message and one to process it. The \"send\" type functions will also have\nall work relating to constructing the message split out into a separate\nfunction just for that. For some functions there will also be separate\npre and post \"work\" phases to prepare or update state.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2101: # define SSL_F_TLS1_PROCESS_HEARTBEAT                     341",
          "2102: # define SSL_F_TLS1_SETUP_KEY_BLOCK                       211",
          "2103: # define SSL_F_TLS1_SET_SERVER_SIGALGS                    335",
          "2104: # define SSL_F_TLS_GET_MESSAGE_BODY                       351",
          "2105: # define SSL_F_TLS_GET_MESSAGE_HEADER                     350",
          "2106: # define SSL_F_USE_CERTIFICATE_CHAIN_FILE                 220",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2104: # define SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK          354",
          "2105: # define SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE           355",
          "2106: # define SSL_F_TLS_CONSTRUCT_CLIENT_HELLO                 356",
          "2107: # define SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE          357",
          "2108: # define SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY                358",
          "2109: # define SSL_F_TLS_CONSTRUCT_FINISHED                     359",
          "2112: # define SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE             360",
          "2113: # define SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST            361",
          "2114: # define SSL_F_TLS_PROCESS_CERT_STATUS                    362",
          "2115: # define SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC             363",
          "2116: # define SSL_F_TLS_PROCESS_FINISHED                       364",
          "2117: # define SSL_F_TLS_PROCESS_KEY_EXCHANGE                   365",
          "2118: # define SSL_F_TLS_PROCESS_NEW_SESSION_TICKET             366",
          "2119: # define SSL_F_TLS_PROCESS_SERVER_CERTIFICATE             367",
          "2120: # define SSL_F_TLS_PROCESS_SERVER_DONE                    368",
          "2121: # define SSL_F_TLS_PROCESS_SERVER_HELLO                   369",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: }",
          "159: int ssl3_send_finished(SSL *s, int a, int b, const char *sender, int slen)",
          "160: {",
          "161:     unsigned char *p;",
          "162:     int i;",
          "163:     unsigned long l;",
          "195:     }",
          "199: }",
          "201: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "165:     if (s->state == a) {",
          "166:         p = ssl_handshake_start(s);",
          "168:         i = s->method->ssl3_enc->final_finish_mac(s,",
          "169:                                                   sender, slen,",
          "170:                                                   s->s3->tmp.finish_md);",
          "171:         if (i <= 0)",
          "172:             return 0;",
          "173:         s->s3->tmp.finish_md_len = i;",
          "174:         memcpy(p, s->s3->tmp.finish_md, i);",
          "175:         l = i;",
          "180:         if (s->type == SSL_ST_CONNECT) {",
          "181:             OPENSSL_assert(i <= EVP_MAX_MD_SIZE);",
          "182:             memcpy(s->s3->previous_client_finished, s->s3->tmp.finish_md, i);",
          "183:             s->s3->previous_client_finished_len = i;",
          "184:         } else {",
          "185:             OPENSSL_assert(i <= EVP_MAX_MD_SIZE);",
          "186:             memcpy(s->s3->previous_server_finished, s->s3->tmp.finish_md, i);",
          "187:             s->s3->previous_server_finished_len = i;",
          "188:         }",
          "190:         if (!ssl_set_handshake_header(s, SSL3_MT_FINISHED, l)) {",
          "191:             SSLerr(SSL_F_SSL3_SEND_FINISHED, ERR_R_INTERNAL_ERROR);",
          "192:             return -1;",
          "193:         }",
          "194:         s->state = b;",
          "198:     return ssl_do_write(s);",
          "",
          "[Added Lines]",
          "160: {",
          "161:     if (s->state == a) {",
          "162:         if (tls_construct_finished(s, sender, slen) == 0) {",
          "163:             statem_set_error(s);",
          "164:             return -1;",
          "165:         }",
          "166:         s->state = b;",
          "167:     }",
          "170:     return ssl_do_write(s);",
          "171: }",
          "173: int tls_construct_finished(SSL *s, const char *sender, int slen)",
          "179:     p = ssl_handshake_start(s);",
          "181:     i = s->method->ssl3_enc->final_finish_mac(s,",
          "182:                                               sender, slen,",
          "183:                                               s->s3->tmp.finish_md);",
          "184:     if (i <= 0)",
          "185:         return 0;",
          "186:     s->s3->tmp.finish_md_len = i;",
          "187:     memcpy(p, s->s3->tmp.finish_md, i);",
          "188:     l = i;",
          "193:     if (s->type == SSL_ST_CONNECT) {",
          "194:         OPENSSL_assert(i <= EVP_MAX_MD_SIZE);",
          "195:         memcpy(s->s3->previous_client_finished, s->s3->tmp.finish_md, i);",
          "196:         s->s3->previous_client_finished_len = i;",
          "197:     } else {",
          "198:         OPENSSL_assert(i <= EVP_MAX_MD_SIZE);",
          "199:         memcpy(s->s3->previous_server_finished, s->s3->tmp.finish_md, i);",
          "200:         s->s3->previous_server_finished_len = i;",
          "201:     }",
          "203:     if (!ssl_set_handshake_header(s, SSL3_MT_FINISHED, l)) {",
          "204:         SSLerr(SSL_F_TLS_CONSTRUCT_FINISHED, ERR_R_INTERNAL_ERROR);",
          "205:         return 0;",
          "208:     return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231: int ssl3_get_change_cipher_spec(SSL *s, int a, int b)",
          "232: {",
          "234:     long n;",
          "236:     n = s->method->ssl_get_message(s, a, b, SSL3_MT_CHANGE_CIPHER_SPEC, 1, &ok);",
          "",
          "[Removed Lines]",
          "233:     int ok, al;",
          "",
          "[Added Lines]",
          "243:     int ok;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:     if (!ok)",
          "239:         return ((int)n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     if (tls_process_change_cipher_spec(s, n) == 0) {",
          "252:         statem_set_error(s);",
          "253:         return -1;",
          "254:     }",
          "256:     return 1;",
          "257: }",
          "259: enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n)",
          "260: {",
          "261:     int al;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:                     || (s->version != DTLS1_BAD_VER",
          "249:                         && n != DTLS1_CCS_HEADER_LENGTH - 1)) {",
          "250:                 al = SSL_AD_ILLEGAL_PARAMETER;",
          "252:                 goto f_err;",
          "253:         }",
          "254:     } else {",
          "255:         if (n != 0) {",
          "256:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "258:             goto f_err;",
          "259:         }",
          "260:     }",
          "",
          "[Removed Lines]",
          "251:                 SSLerr(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC, SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "257:             SSLerr(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC, SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "",
          "[Added Lines]",
          "273:                 SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "274:                        SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "280:             SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "281:                    SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "263:     if (s->s3->tmp.new_cipher == NULL) {",
          "264:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "266:         goto f_err;",
          "267:     }",
          "269:     s->s3->change_cipher_spec = 1;",
          "270:     if (!ssl3_do_change_cipher_spec(s)) {",
          "271:         al = SSL_AD_INTERNAL_ERROR;",
          "273:         goto f_err;",
          "274:     }",
          "",
          "[Removed Lines]",
          "265:         SSLerr(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC, SSL_R_CCS_RECEIVED_EARLY);",
          "272:         SSLerr(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "289:         SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, SSL_R_CCS_RECEIVED_EARLY);",
          "296:         SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "289: #endif",
          "290:     }",
          "293:  f_err:",
          "294:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "296: }",
          "299: int ssl3_get_finished(SSL *s, int a, int b)",
          "300: {",
          "302:     long n;",
          "305: #ifdef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "292:     return 1;",
          "295:     return 0;",
          "301:     int al, i, ok;",
          "303:     unsigned char *p;",
          "",
          "[Added Lines]",
          "316:     return MSG_PROCESS_CONTINUE_READING;",
          "319:     statem_set_error(s);",
          "320:     return MSG_PROCESS_ERROR;",
          "326:     int ok;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "315:     if (!ok)",
          "316:         return ((int)n);",
          "319:     if (!s->s3->change_cipher_spec) {",
          "320:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "322:         goto f_err;",
          "323:     }",
          "324:     s->s3->change_cipher_spec = 0;",
          "",
          "[Removed Lines]",
          "321:         SSLerr(SSL_F_SSL3_GET_FINISHED, SSL_R_GOT_A_FIN_BEFORE_A_CCS);",
          "",
          "[Added Lines]",
          "342:     return tls_process_finished(s, (unsigned long)n);",
          "343: }",
          "345: enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n)",
          "346: {",
          "347:     int al, i;",
          "348:     unsigned char *p;",
          "353:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_GOT_A_FIN_BEFORE_A_CCS);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "326:     p = (unsigned char *)s->init_msg;",
          "327:     i = s->s3->tmp.peer_finish_md_len;",
          "330:         al = SSL_AD_DECODE_ERROR;",
          "332:         goto f_err;",
          "333:     }",
          "335:     if (CRYPTO_memcmp(p, s->s3->tmp.peer_finish_md, i) != 0) {",
          "336:         al = SSL_AD_DECRYPT_ERROR;",
          "338:         goto f_err;",
          "339:     }",
          "",
          "[Removed Lines]",
          "329:     if (i != n) {",
          "331:         SSLerr(SSL_F_SSL3_GET_FINISHED, SSL_R_BAD_DIGEST_LENGTH);",
          "337:         SSLerr(SSL_F_SSL3_GET_FINISHED, SSL_R_DIGEST_CHECK_FAILED);",
          "",
          "[Added Lines]",
          "361:     if (i < 0 || (unsigned long)i != n) {",
          "363:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_BAD_DIGEST_LENGTH);",
          "369:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_DIGEST_CHECK_FAILED);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "351:         s->s3->previous_server_finished_len = i;",
          "352:     }",
          "355:  f_err:",
          "356:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "358: }",
          "",
          "[Removed Lines]",
          "354:     return (1);",
          "357:     return (0);",
          "",
          "[Added Lines]",
          "386:     return MSG_PROCESS_CONTINUE_PROCESSING;",
          "389:     statem_set_error(s);",
          "390:     return MSG_PROCESS_ERROR;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "369: int ssl3_send_change_cipher_spec(SSL *s, int a, int b)",
          "370: {",
          "373:     if (s->state == a) {",
          "379:         s->state = b;",
          "380:     }",
          "",
          "[Removed Lines]",
          "371:     unsigned char *p;",
          "374:         p = (unsigned char *)s->init_buf->data;",
          "376:         s->init_num = 1;",
          "377:         s->init_off = 0;",
          "",
          "[Added Lines]",
          "405:         if(tls_construct_change_cipher_spec(s) == 0) {",
          "406:             statem_set_error(s);",
          "407:             return 0;",
          "408:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "383:     return (ssl3_do_write(s, SSL3_RT_CHANGE_CIPHER_SPEC));",
          "384: }",
          "386: unsigned long ssl3_output_cert_chain(SSL *s, CERT_PKEY *cpk)",
          "387: {",
          "388:     unsigned char *p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417: int tls_construct_change_cipher_spec(SSL *s)",
          "418: {",
          "419:     unsigned char *p;",
          "421:     p = (unsigned char *)s->init_buf->data;",
          "423:     s->init_num = 1;",
          "424:     s->init_off = 0;",
          "426:     return 1;",
          "427: }",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:             ret = ssl3_get_server_done(s);",
          "380:             if (ret <= 0)",
          "381:                 goto end;",
          "392:             if (s->s3->tmp.cert_req)",
          "393:                 s->state = SSL3_ST_CW_CERT_A;",
          "394:             else",
          "",
          "[Removed Lines]",
          "382: #ifndef OPENSSL_NO_SRP",
          "383:             if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) {",
          "384:                 if ((ret = SRP_Calc_A_param(s)) <= 0) {",
          "385:                     SSLerr(SSL_F_SSL3_CONNECT, SSL_R_SRP_A_CALC);",
          "386:                     ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "387:                     s->state = SSL_ST_ERR;",
          "388:                     goto end;",
          "389:                 }",
          "390:             }",
          "391: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740: }",
          "742: int ssl3_client_hello(SSL *s)",
          "743: {",
          "744:     unsigned char *buf;",
          "745:     unsigned char *p, *d;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "734: {",
          "735:     if (s->state == SSL3_ST_CW_CLNT_HELLO_A) {",
          "736:         if(tls_construct_client_hello(s) == 0)",
          "737:             goto err;",
          "739:         s->state = SSL3_ST_CW_CLNT_HELLO_B;",
          "740:     }",
          "743:     return ssl_do_write(s);",
          "744:  err:",
          "745:     s->state = SSL_ST_ERR;",
          "746:     return -1;",
          "748: }",
          "750: int tls_construct_client_hello(SSL *s)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "750:     int j;",
          "751:     SSL_COMP *comp;",
          "752: #endif",
          "754:     buf = (unsigned char *)s->init_buf->data;",
          "794:             goto err;",
          "846:             }",
          "849:         }",
          "860:         }",
          "866:             goto err;",
          "867:         }",
          "868: #ifdef OPENSSL_MAX_TLS1_2_CIPHER_LENGTH",
          "877: #endif",
          "882: #ifdef OPENSSL_NO_COMP",
          "884: #else",
          "895: #endif",
          "918:     }",
          "922:  err:",
          "925: }",
          "927: int ssl3_get_server_hello(SSL *s)",
          "928: {",
          "936:     long n;",
          "",
          "[Removed Lines]",
          "755:     if (s->state == SSL3_ST_CW_CLNT_HELLO_A) {",
          "756:         SSL_SESSION *sess = s->session;",
          "759:         if (ssl_set_version(s) == 0)",
          "760:             goto err;",
          "762:         if ((sess == NULL) || (sess->ssl_version != s->version) ||",
          "767:             (!sess->session_id_length && !sess->tlsext_tick) ||",
          "768:             (sess->not_resumable)) {",
          "769:             if (!ssl_get_new_session(s, 0))",
          "770:                 goto err;",
          "771:         }",
          "774:         p = s->s3->client_random;",
          "780:         if (SSL_IS_DTLS(s)) {",
          "781:             size_t idx;",
          "782:             i = 1;",
          "783:             for (idx = 0; idx < sizeof(s->s3->client_random); idx++) {",
          "784:                 if (p[idx]) {",
          "785:                     i = 0;",
          "786:                     break;",
          "787:                 }",
          "788:             }",
          "789:         } else",
          "790:             i = 1;",
          "792:         if (i && ssl_fill_hello_random(s, 0, p,",
          "793:                                        sizeof(s->s3->client_random)) <= 0)",
          "797:         d = p = ssl_handshake_start(s);",
          "833:         memcpy(p, s->s3->client_random, SSL3_RANDOM_SIZE);",
          "834:         p += SSL3_RANDOM_SIZE;",
          "837:         if (s->new_session)",
          "838:             i = 0;",
          "839:         else",
          "840:             i = s->session->session_id_length;",
          "842:         if (i != 0) {",
          "843:             if (i > (int)sizeof(s->session->session_id)) {",
          "844:                 SSLerr(SSL_F_SSL3_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "845:                 goto err;",
          "847:             memcpy(p, s->session->session_id, i);",
          "848:             p += i;",
          "852:         if (SSL_IS_DTLS(s)) {",
          "853:             if (s->d1->cookie_len > sizeof(s->d1->cookie)) {",
          "854:                 SSLerr(SSL_F_SSL3_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "855:                 goto err;",
          "856:             }",
          "858:             memcpy(p, s->d1->cookie, s->d1->cookie_len);",
          "859:             p += s->d1->cookie_len;",
          "863:         i = ssl_cipher_list_to_bytes(s, SSL_get_ciphers(s), &(p[2]));",
          "864:         if (i == 0) {",
          "865:             SSLerr(SSL_F_SSL3_CLIENT_HELLO, SSL_R_NO_CIPHERS_AVAILABLE);",
          "874:         if (TLS1_get_version(s) >= TLS1_2_VERSION",
          "875:             && i > OPENSSL_MAX_TLS1_2_CIPHER_LENGTH)",
          "876:             i = OPENSSL_MAX_TLS1_2_CIPHER_LENGTH & ~1;",
          "878:         s2n(i, p);",
          "879:         p += i;",
          "886:         if (!ssl_allow_compression(s) || !s->ctx->comp_methods)",
          "887:             j = 0;",
          "888:         else",
          "889:             j = sk_SSL_COMP_num(s->ctx->comp_methods);",
          "891:         for (i = 0; i < j; i++) {",
          "892:             comp = sk_SSL_COMP_value(s->ctx->comp_methods, i);",
          "894:         }",
          "899:         if (ssl_prepare_clienthello_tlsext(s) <= 0) {",
          "900:             SSLerr(SSL_F_SSL3_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "901:             goto err;",
          "902:         }",
          "903:         if ((p =",
          "904:              ssl_add_clienthello_tlsext(s, p, buf + SSL3_RT_MAX_PLAIN_LENGTH,",
          "905:                                         &al)) == NULL) {",
          "906:             ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "907:             SSLerr(SSL_F_SSL3_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "908:             goto err;",
          "909:         }",
          "911:         l = p - d;",
          "912:         if (!ssl_set_handshake_header(s, SSL3_MT_CLIENT_HELLO, l)) {",
          "913:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "914:             SSLerr(SSL_F_SSL3_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "915:             goto err;",
          "916:         }",
          "917:         s->state = SSL3_ST_CW_CLNT_HELLO_B;",
          "921:     return ssl_do_write(s);",
          "923:     s->state = SSL_ST_ERR;",
          "924:     return (-1);",
          "929:     STACK_OF(SSL_CIPHER) *sk;",
          "930:     const SSL_CIPHER *c;",
          "931:     PACKET pkt, session_id;",
          "932:     size_t session_id_len;",
          "933:     unsigned char *cipherchars;",
          "934:     int i, al = SSL_AD_INTERNAL_ERROR, ok;",
          "935:     unsigned int compression;",
          "937: #ifndef OPENSSL_NO_COMP",
          "938:     SSL_COMP *comp;",
          "939: #endif",
          "",
          "[Added Lines]",
          "761:     SSL_SESSION *sess = s->session;",
          "766:     if (ssl_set_version(s) == 0)",
          "767:         goto err;",
          "769:     if ((sess == NULL) || (sess->ssl_version != s->version) ||",
          "774:         (!sess->session_id_length && !sess->tlsext_tick) ||",
          "775:         (sess->not_resumable)) {",
          "776:         if (!ssl_get_new_session(s, 0))",
          "778:     }",
          "781:     p = s->s3->client_random;",
          "787:     if (SSL_IS_DTLS(s)) {",
          "788:         size_t idx;",
          "789:         i = 1;",
          "790:         for (idx = 0; idx < sizeof(s->s3->client_random); idx++) {",
          "791:             if (p[idx]) {",
          "792:                 i = 0;",
          "793:                 break;",
          "796:     } else",
          "797:         i = 1;",
          "799:     if (i && ssl_fill_hello_random(s, 0, p,",
          "800:                                    sizeof(s->s3->client_random)) <= 0)",
          "801:         goto err;",
          "804:     d = p = ssl_handshake_start(s);",
          "840:     memcpy(p, s->s3->client_random, SSL3_RANDOM_SIZE);",
          "841:     p += SSL3_RANDOM_SIZE;",
          "844:     if (s->new_session)",
          "845:         i = 0;",
          "846:     else",
          "847:         i = s->session->session_id_length;",
          "849:     if (i != 0) {",
          "850:         if (i > (int)sizeof(s->session->session_id)) {",
          "851:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "852:             goto err;",
          "854:         memcpy(p, s->session->session_id, i);",
          "855:         p += i;",
          "856:     }",
          "859:     if (SSL_IS_DTLS(s)) {",
          "860:         if (s->d1->cookie_len > sizeof(s->d1->cookie)) {",
          "861:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "865:         memcpy(p, s->d1->cookie, s->d1->cookie_len);",
          "866:         p += s->d1->cookie_len;",
          "867:     }",
          "870:     i = ssl_cipher_list_to_bytes(s, SSL_get_ciphers(s), &(p[2]));",
          "871:     if (i == 0) {",
          "872:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, SSL_R_NO_CIPHERS_AVAILABLE);",
          "873:         goto err;",
          "874:     }",
          "881:     if (TLS1_get_version(s) >= TLS1_2_VERSION",
          "882:         && i > OPENSSL_MAX_TLS1_2_CIPHER_LENGTH)",
          "883:         i = OPENSSL_MAX_TLS1_2_CIPHER_LENGTH & ~1;",
          "885:     s2n(i, p);",
          "886:     p += i;",
          "893:     if (!ssl_allow_compression(s) || !s->ctx->comp_methods)",
          "894:         j = 0;",
          "895:     else",
          "896:         j = sk_SSL_COMP_num(s->ctx->comp_methods);",
          "898:     for (i = 0; i < j; i++) {",
          "899:         comp = sk_SSL_COMP_value(s->ctx->comp_methods, i);",
          "901:     }",
          "906:     if (ssl_prepare_clienthello_tlsext(s) <= 0) {",
          "907:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "908:         goto err;",
          "909:     }",
          "910:     if ((p =",
          "911:          ssl_add_clienthello_tlsext(s, p, buf + SSL3_RT_MAX_PLAIN_LENGTH,",
          "912:                                     &al)) == NULL) {",
          "913:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "914:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "915:         goto err;",
          "916:     }",
          "918:     l = p - d;",
          "919:     if (!ssl_set_handshake_header(s, SSL3_MT_CLIENT_HELLO, l)) {",
          "920:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "921:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "922:         goto err;",
          "925:     return 1;",
          "927:     statem_set_error(s);",
          "928:     return 0;",
          "933:     int ok, al;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "971:         goto f_err;",
          "972:     }",
          "974:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "975:         al = SSL_AD_INTERNAL_ERROR;",
          "977:         goto f_err;",
          "978:     }",
          "",
          "[Removed Lines]",
          "976:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "969:     return tls_process_server_hello(s, (unsigned long)n);",
          "970:  f_err:",
          "971:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "972:     s->state = SSL_ST_ERR;",
          "973:     return (-1);",
          "974: }",
          "976: enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s, unsigned long n)",
          "977: {",
          "978:     STACK_OF(SSL_CIPHER) *sk;",
          "979:     const SSL_CIPHER *c;",
          "980:     PACKET pkt, session_id;",
          "981:     size_t session_id_len;",
          "982:     unsigned char *cipherchars;",
          "983:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "984:     unsigned int compression;",
          "985: #ifndef OPENSSL_NO_COMP",
          "986:     SSL_COMP *comp;",
          "987: #endif",
          "991:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "983:         if (!PACKET_get_net_2(&pkt, &sversion)) {",
          "984:             al = SSL_AD_DECODE_ERROR;",
          "986:             goto f_err;",
          "987:         }",
          "",
          "[Removed Lines]",
          "985:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "1000:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "992: #ifndef OPENSSL_NO_SSL3",
          "993:         if ((sversion == SSL3_VERSION) && !(s->options & SSL_OP_NO_SSLv3)) {",
          "994:             if (FIPS_mode()) {",
          "996:                        SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);",
          "997:                 al = SSL_AD_PROTOCOL_VERSION;",
          "998:                 goto f_err;",
          "",
          "[Removed Lines]",
          "995:                 SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1010:                 SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1009:                    !(s->options & SSL_OP_NO_TLSv1_2)) {",
          "1010:             s->method = TLSv1_2_client_method();",
          "1011:         } else {",
          "1013:             al = SSL_AD_PROTOCOL_VERSION;",
          "1014:             goto f_err;",
          "1015:         }",
          "1016:         s->session->ssl_version = s->version = s->method->version;",
          "1018:         if (!ssl_security(s, SSL_SECOP_VERSION, 0, s->version, NULL)) {",
          "1020:             al = SSL_AD_PROTOCOL_VERSION;",
          "1021:             goto f_err;",
          "1022:         }",
          "",
          "[Removed Lines]",
          "1012:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_UNSUPPORTED_PROTOCOL);",
          "1019:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_VERSION_TOO_LOW);",
          "",
          "[Added Lines]",
          "1027:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_UNSUPPORTED_PROTOCOL);",
          "1034:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_VERSION_TOO_LOW);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1028:         if (!PACKET_get_net_2(&pkt, &hversion)) {",
          "1029:             al = SSL_AD_DECODE_ERROR;",
          "1031:             goto f_err;",
          "1032:         }",
          "",
          "[Removed Lines]",
          "1030:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "1045:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1035:         if (hversion == DTLS1_2_VERSION && !(options & SSL_OP_NO_DTLSv1_2))",
          "1036:             s->method = DTLSv1_2_client_method();",
          "1037:         else if (tls1_suiteb(s)) {",
          "1039:                    SSL_R_ONLY_DTLS_1_2_ALLOWED_IN_SUITEB_MODE);",
          "1040:             s->version = hversion;",
          "1041:             al = SSL_AD_PROTOCOL_VERSION;",
          "",
          "[Removed Lines]",
          "1038:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1053:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1043:         } else if (hversion == DTLS1_VERSION && !(options & SSL_OP_NO_DTLSv1))",
          "1044:             s->method = DTLSv1_client_method();",
          "1045:         else {",
          "1047:             s->version = hversion;",
          "1048:             al = SSL_AD_PROTOCOL_VERSION;",
          "1049:             goto f_err;",
          "",
          "[Removed Lines]",
          "1046:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_WRONG_SSL_VERSION);",
          "",
          "[Added Lines]",
          "1061:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_WRONG_SSL_VERSION);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1055:         if (!PACKET_get_bytes(&pkt, &vers, 2)) {",
          "1056:             al = SSL_AD_DECODE_ERROR;",
          "1058:             goto f_err;",
          "1059:         }",
          "1060:         if ((vers[0] != (s->version >> 8))",
          "1061:                 || (vers[1] != (s->version & 0xff))) {",
          "1063:             s->version = (s->version & 0xff00) | vers[1];",
          "1064:             al = SSL_AD_PROTOCOL_VERSION;",
          "1065:             goto f_err;",
          "",
          "[Removed Lines]",
          "1057:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "1062:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_WRONG_SSL_VERSION);",
          "",
          "[Added Lines]",
          "1072:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "1077:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_WRONG_SSL_VERSION);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1071:     if (!PACKET_copy_bytes(&pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "1072:         al = SSL_AD_DECODE_ERROR;",
          "1074:         goto f_err;",
          "1075:     }",
          "",
          "[Removed Lines]",
          "1073:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "1088:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1086:     if (session_id_len > sizeof s->session->session_id",
          "1087:         || session_id_len > SSL3_SESSION_ID_SIZE) {",
          "1088:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1090:         goto f_err;",
          "1091:     }",
          "",
          "[Removed Lines]",
          "1089:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_SSL3_SESSION_ID_TOO_LONG);",
          "",
          "[Added Lines]",
          "1104:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_SSL3_SESSION_ID_TOO_LONG);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1119:             s->session->cipher = pref_cipher ?",
          "1120:                 pref_cipher : ssl_get_cipher_by_char(s, cipherchars);",
          "1121:         } else {",
          "1123:             al = SSL_AD_INTERNAL_ERROR;",
          "1124:             goto f_err;",
          "1125:         }",
          "",
          "[Removed Lines]",
          "1122:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "1137:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1132:             || memcmp(s->session->sid_ctx, s->sid_ctx, s->sid_ctx_length)) {",
          "1134:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "1136:                    SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);",
          "1137:             goto f_err;",
          "1138:         }",
          "",
          "[Removed Lines]",
          "1135:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1150:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1161:     if (c == NULL) {",
          "1163:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1165:         goto f_err;",
          "1166:     }",
          "",
          "[Removed Lines]",
          "1164:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_UNKNOWN_CIPHER_RETURNED);",
          "",
          "[Added Lines]",
          "1179:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_UNKNOWN_CIPHER_RETURNED);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1176:     if (ssl_cipher_disabled(s, c, SSL_SECOP_CIPHER_CHECK)) {",
          "1177:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1179:         goto f_err;",
          "1180:     }",
          "",
          "[Removed Lines]",
          "1178:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_WRONG_CIPHER_RETURNED);",
          "",
          "[Added Lines]",
          "1193:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_WRONG_CIPHER_RETURNED);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1184:     if (i < 0) {",
          "1186:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1188:         goto f_err;",
          "1189:     }",
          "",
          "[Removed Lines]",
          "1187:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_WRONG_CIPHER_RETURNED);",
          "",
          "[Added Lines]",
          "1202:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_WRONG_CIPHER_RETURNED);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1197:         s->session->cipher_id = s->session->cipher->id;",
          "1198:     if (s->hit && (s->session->cipher_id != c->id)) {",
          "1199:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1201:                SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED);",
          "1202:         goto f_err;",
          "1203:     }",
          "",
          "[Removed Lines]",
          "1200:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1215:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1218: #ifdef OPENSSL_NO_COMP",
          "1219:     if (compression != 0) {",
          "1220:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1222:                SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM);",
          "1223:         goto f_err;",
          "1224:     }",
          "",
          "[Removed Lines]",
          "1221:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1236:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1229:     if (s->session->compress_meth != 0) {",
          "1231:         goto f_err;",
          "1232:     }",
          "1233: #else",
          "1234:     if (s->hit && compression != s->session->compress_meth) {",
          "1235:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1237:                SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED);",
          "1238:         goto f_err;",
          "1239:     }",
          "",
          "[Removed Lines]",
          "1230:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_INCONSISTENT_COMPRESSION);",
          "1236:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1245:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_INCONSISTENT_COMPRESSION);",
          "1251:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1241:         comp = NULL;",
          "1242:     else if (!ssl_allow_compression(s)) {",
          "1243:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1245:         goto f_err;",
          "1246:     } else {",
          "1247:         comp = ssl3_comp_find(s->ctx->comp_methods, compression);",
          "",
          "[Removed Lines]",
          "1244:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_COMPRESSION_DISABLED);",
          "",
          "[Added Lines]",
          "1259:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_COMPRESSION_DISABLED);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1250:     if (compression != 0 && comp == NULL) {",
          "1251:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1253:                SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM);",
          "1254:         goto f_err;",
          "1255:     } else {",
          "",
          "[Removed Lines]",
          "1252:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,",
          "",
          "[Added Lines]",
          "1267:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1261:     if (!ssl_parse_serverhello_tlsext(s, &pkt)) {",
          "1263:         goto err;",
          "1264:     }",
          "1266:     if (PACKET_remaining(&pkt) != 0) {",
          "1268:         al = SSL_AD_DECODE_ERROR;",
          "1270:         goto f_err;",
          "1271:     }",
          "1274:  f_err:",
          "1275:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1276:  err:",
          "1279: }",
          "1281: int ssl3_get_server_certificate(SSL *s)",
          "1282: {",
          "1291:     n = s->method->ssl_get_message(s,",
          "1292:                                    SSL3_ST_CR_CERT_A,",
          "",
          "[Removed Lines]",
          "1262:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_PARSE_TLSEXT);",
          "1269:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_BAD_PACKET_LENGTH);",
          "1273:     return (1);",
          "1277:     s->state = SSL_ST_ERR;",
          "1278:     return (-1);",
          "1283:     int al, i, ok, ret = -1, exp_idx;",
          "1284:     unsigned long n, cert_list_len, cert_len;",
          "1285:     X509 *x = NULL;",
          "1286:     unsigned char *certstart, *certbytes;",
          "1287:     STACK_OF(X509) *sk = NULL;",
          "1288:     EVP_PKEY *pkey = NULL;",
          "1289:     PACKET pkt;",
          "",
          "[Added Lines]",
          "1277:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_PARSE_TLSEXT);",
          "1284:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_PACKET_LENGTH);",
          "1288:     return MSG_PROCESS_CONTINUE_READING;",
          "1292:     statem_set_error(s);",
          "1293:     return MSG_PROCESS_ERROR;",
          "1298:     long n;",
          "1299:     int ok, al;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1307:         goto f_err;",
          "1308:     }",
          "1310:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1311:         al = SSL_AD_INTERNAL_ERROR;",
          "1313:         goto f_err;",
          "1314:     }",
          "1316:     if ((sk = sk_X509_new_null()) == NULL) {",
          "1318:         goto err;",
          "1319:     }",
          "1321:     if (!PACKET_get_net_3(&pkt, &cert_list_len)",
          "1322:             || PACKET_remaining(&pkt) != cert_list_len) {",
          "1323:         al = SSL_AD_DECODE_ERROR;",
          "1325:         goto f_err;",
          "1326:     }",
          "1327:     while (PACKET_remaining(&pkt)) {",
          "1328:         if (!PACKET_get_net_3(&pkt, &cert_len)",
          "1329:                 || !PACKET_get_bytes(&pkt, &certbytes, cert_len)) {",
          "1330:             al = SSL_AD_DECODE_ERROR;",
          "1332:                    SSL_R_CERT_LENGTH_MISMATCH);",
          "1333:             goto f_err;",
          "1334:         }",
          "",
          "[Removed Lines]",
          "1312:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "1317:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "1324:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "1331:             SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,",
          "",
          "[Added Lines]",
          "1320:     return tls_process_server_certificate(s, (unsigned long)n);",
          "1321:  f_err:",
          "1322:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1323:     s->state = SSL_ST_ERR;",
          "1324:     return -1;",
          "1325: }",
          "1327: enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s, unsigned long n)",
          "1328: {",
          "1329:     int al, i, ret = MSG_PROCESS_ERROR, exp_idx;",
          "1330:     unsigned long cert_list_len, cert_len;",
          "1331:     X509 *x = NULL;",
          "1332:     unsigned char *certstart, *certbytes;",
          "1333:     STACK_OF(X509) *sk = NULL;",
          "1334:     EVP_PKEY *pkey = NULL;",
          "1335:     PACKET pkt;",
          "1339:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "1344:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "1351:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "1358:             SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1337:         x = d2i_X509(NULL, (const unsigned char **)&certbytes, cert_len);",
          "1338:         if (x == NULL) {",
          "1339:             al = SSL_AD_BAD_CERTIFICATE;",
          "1341:             goto f_err;",
          "1342:         }",
          "1343:         if (certbytes != (certstart + cert_len)) {",
          "1344:             al = SSL_AD_DECODE_ERROR;",
          "1346:                    SSL_R_CERT_LENGTH_MISMATCH);",
          "1347:             goto f_err;",
          "1348:         }",
          "1349:         if (!sk_X509_push(sk, x)) {",
          "1351:             goto err;",
          "1352:         }",
          "1353:         x = NULL;",
          "",
          "[Removed Lines]",
          "1340:             SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE, ERR_R_ASN1_LIB);",
          "1345:             SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,",
          "1350:             SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "1367:             SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_ASN1_LIB);",
          "1372:             SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "1377:             SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1356:     i = ssl_verify_cert_chain(s, sk);",
          "1357:     if (s->verify_mode != SSL_VERIFY_NONE && i <= 0) {",
          "1358:         al = ssl_verify_alarm_type(s->verify_result);",
          "1360:                SSL_R_CERTIFICATE_VERIFY_FAILED);",
          "1361:         goto f_err;",
          "1362:     }",
          "1364:     if (i > 1) {",
          "1366:         al = SSL_AD_HANDSHAKE_FAILURE;",
          "1367:         goto f_err;",
          "1368:     }",
          "",
          "[Removed Lines]",
          "1359:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,",
          "1365:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE, i);",
          "",
          "[Added Lines]",
          "1386:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "1392:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, i);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1383:     if (pkey == NULL || EVP_PKEY_missing_parameters(pkey)) {",
          "1384:         x = NULL;",
          "1385:         al = SSL3_AL_FATAL;",
          "1387:                SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS);",
          "1388:         goto f_err;",
          "1389:     }",
          "",
          "[Removed Lines]",
          "1386:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,",
          "",
          "[Added Lines]",
          "1413:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1392:     if (i < 0) {",
          "1393:         x = NULL;",
          "1394:         al = SSL3_AL_FATAL;",
          "1396:                SSL_R_UNKNOWN_CERTIFICATE_TYPE);",
          "1397:         goto f_err;",
          "1398:     }",
          "",
          "[Removed Lines]",
          "1395:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,",
          "",
          "[Added Lines]",
          "1422:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1401:     if (exp_idx >= 0 && i != exp_idx) {",
          "1402:         x = NULL;",
          "1403:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "1405:                SSL_R_WRONG_CERTIFICATE_TYPE);",
          "1406:         goto f_err;",
          "1407:     }",
          "",
          "[Removed Lines]",
          "1404:         SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,",
          "",
          "[Added Lines]",
          "1431:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1413:     s->session->verify_result = s->verify_result;",
          "1415:     x = NULL;",
          "1417:     goto done;",
          "1419:  f_err:",
          "1420:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1421:  err:",
          "1423:  done:",
          "1424:     EVP_PKEY_free(pkey);",
          "1425:     X509_free(x);",
          "1426:     sk_X509_pop_free(sk, X509_free);",
          "1428: }",
          "1430: int ssl3_get_key_exchange(SSL *s)",
          "1431: {",
          "",
          "[Removed Lines]",
          "1416:     ret = 1;",
          "1422:     s->state = SSL_ST_ERR;",
          "1427:     return (ret);",
          "1432: #ifndef OPENSSL_NO_RSA",
          "1433:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "1434: #endif",
          "1435:     EVP_MD_CTX md_ctx;",
          "1436:     int al, j, verify_ret, ok;",
          "1437:     long n, alg_k, alg_a;",
          "1438:     EVP_PKEY *pkey = NULL;",
          "1439:     const EVP_MD *md = NULL;",
          "1440: #ifndef OPENSSL_NO_RSA",
          "1441:     RSA *rsa = NULL;",
          "1442: #endif",
          "1443: #ifndef OPENSSL_NO_DH",
          "1444:     DH *dh = NULL;",
          "1445: #endif",
          "1446: #ifndef OPENSSL_NO_EC",
          "1447:     EC_KEY *ecdh = NULL;",
          "1448:     BN_CTX *bn_ctx = NULL;",
          "1449:     EC_POINT *srvr_ecpoint = NULL;",
          "1450:     int curve_nid = 0;",
          "1451: #endif",
          "1452:     PACKET pkt, save_param_start, signature;",
          "1454:     EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Added Lines]",
          "1443:     ret = MSG_PROCESS_CONTINUE_READING;",
          "1449:     statem_set_error(s);",
          "1454:     return ret;",
          "1459:     long n;",
          "1460:     int ok;",
          "1461:     long alg_k;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1474:         if (alg_k & (SSL_kDHE | SSL_kECDHE | SSL_kDHEPSK | SSL_kECDHEPSK)) {",
          "1475:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1478:         }",
          "1480:         s->s3->tmp.reuse_message = 1;",
          "1482:     }",
          "1484:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1485:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1486:             al = SSL_AD_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "1476:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1477:             goto f_err;",
          "1481:         return (1);",
          "",
          "[Added Lines]",
          "1483:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_UNEXPECTED_MESSAGE);",
          "1484:             return -1;",
          "1488:         return 1;",
          "1491:     return tls_process_key_exchange(s, (unsigned long)n);",
          "1492: }",
          "1494: enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s, unsigned long n)",
          "1495: {",
          "1496: #ifndef OPENSSL_NO_RSA",
          "1497:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "1498: #endif",
          "1499:     EVP_MD_CTX md_ctx;",
          "1500:     int al, j, verify_ret;",
          "1501:     long alg_k, alg_a;",
          "1502:     EVP_PKEY *pkey = NULL;",
          "1503:     const EVP_MD *md = NULL;",
          "1504: #ifndef OPENSSL_NO_RSA",
          "1505:     RSA *rsa = NULL;",
          "1506: #endif",
          "1507: #ifndef OPENSSL_NO_DH",
          "1508:     DH *dh = NULL;",
          "1509: #endif",
          "1510: #ifndef OPENSSL_NO_EC",
          "1511:     EC_KEY *ecdh = NULL;",
          "1512:     BN_CTX *bn_ctx = NULL;",
          "1513:     EC_POINT *srvr_ecpoint = NULL;",
          "1514:     int curve_nid = 0;",
          "1515: #endif",
          "1516:     PACKET pkt, save_param_start, signature;",
          "1518:     EVP_MD_CTX_init(&md_ctx);",
          "1520:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1523:         if (PACKET_remaining(&psk_identity_hint) > PSK_MAX_IDENTITY_LEN) {",
          "1524:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1526:             goto f_err;",
          "1527:         }",
          "",
          "[Removed Lines]",
          "1525:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DATA_LENGTH_TOO_LONG);",
          "",
          "[Added Lines]",
          "1563:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_DATA_LENGTH_TOO_LONG);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1565:         }",
          "1567:         if (!srp_verify_server_param(s, &al)) {",
          "1569:             goto f_err;",
          "1570:         }",
          "",
          "[Removed Lines]",
          "1568:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_PARAMETERS);",
          "",
          "[Added Lines]",
          "1606:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_BAD_SRP_PARAMETERS);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1581:         if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher)) {",
          "1582:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1584:             goto f_err;",
          "1585:         }",
          "",
          "[Removed Lines]",
          "1583:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "[Added Lines]",
          "1621:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1607:         if (alg_a & SSL_aRSA)",
          "1608:             pkey = X509_get_pubkey(s->session->peer);",
          "1609:         else {",
          "1611:             goto err;",
          "1612:         }",
          "1614:         if (EVP_PKEY_bits(pkey) <= SSL_C_EXPORT_PKEYLENGTH(s->s3->tmp.new_cipher)) {",
          "1615:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1617:             goto f_err;",
          "1618:         }",
          "",
          "[Removed Lines]",
          "1610:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1616:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "[Added Lines]",
          "1648:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1654:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1658:         if (!ssl_security(s, SSL_SECOP_TMP_DH, DH_security_bits(dh), 0, dh)) {",
          "1659:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1661:             goto f_err;",
          "1662:         }",
          "1663:         if (alg_a & (SSL_aRSA|SSL_aDSS))",
          "",
          "[Removed Lines]",
          "1660:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DH_KEY_TOO_SMALL);",
          "",
          "[Added Lines]",
          "1698:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_DH_KEY_TOO_SMALL);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1677:         unsigned char *ecparams;",
          "1679:         if ((ecdh = EC_KEY_new()) == NULL) {",
          "1681:             goto err;",
          "1682:         }",
          "",
          "[Removed Lines]",
          "1680:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "1718:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1702:         if ((curve_nid = tls1_ec_curve_id2nid(*(ecparams + 2))) == 0) {",
          "1703:             al = SSL_AD_INTERNAL_ERROR;",
          "1705:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "1706:             goto f_err;",
          "1707:         }",
          "1709:         ngroup = EC_GROUP_new_by_curve_name(curve_nid);",
          "1710:         if (ngroup == NULL) {",
          "1712:             goto err;",
          "1713:         }",
          "1714:         if (EC_KEY_set_group(ecdh, ngroup) == 0) {",
          "1716:             goto err;",
          "1717:         }",
          "1718:         EC_GROUP_free(ngroup);",
          "",
          "[Removed Lines]",
          "1704:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1711:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "1715:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "",
          "[Added Lines]",
          "1742:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE,",
          "1749:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "1753:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1722:         if (SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&",
          "1723:             (EC_GROUP_get_degree(group) > 163)) {",
          "1724:             al = SSL_AD_EXPORT_RESTRICTION;",
          "1726:                    SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER);",
          "1727:             goto f_err;",
          "1728:         }",
          "",
          "[Removed Lines]",
          "1725:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "",
          "[Added Lines]",
          "1763:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1731:         if (((srvr_ecpoint = EC_POINT_new(group)) == NULL) ||",
          "1732:             ((bn_ctx = BN_CTX_new()) == NULL)) {",
          "1734:             goto err;",
          "1735:         }",
          "",
          "[Removed Lines]",
          "1733:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "1771:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1769:         srvr_ecpoint = NULL;",
          "1770:     } else if (alg_k) {",
          "1771:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1773:         goto f_err;",
          "1774:     }",
          "",
          "[Removed Lines]",
          "1772:         SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "[Added Lines]",
          "1810:         SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1816:         }",
          "1817:         j = EVP_PKEY_size(pkey);",
          "1818:         if (j < 0) {",
          "1820:             goto f_err;",
          "1821:         }",
          "",
          "[Removed Lines]",
          "1819:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "1857:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1826:         if (PACKET_remaining(&signature) > (size_t)j) {",
          "1829:             goto f_err;",
          "1830:         }",
          "1831: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "1828:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "",
          "[Added Lines]",
          "1866:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1854:                            PACKET_remaining(&signature), pkey->pkey.rsa);",
          "1855:             if (verify_ret < 0) {",
          "1856:                 al = SSL_AD_DECRYPT_ERROR;",
          "1858:                 goto f_err;",
          "1859:             }",
          "1860:             if (verify_ret == 0) {",
          "1862:                 al = SSL_AD_DECRYPT_ERROR;",
          "1864:                 goto f_err;",
          "1865:             }",
          "1866:         } else",
          "",
          "[Removed Lines]",
          "1857:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_DECRYPT);",
          "1863:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Added Lines]",
          "1895:                 SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_BAD_RSA_DECRYPT);",
          "1901:                 SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1877:                                 PACKET_remaining(&signature), pkey) <= 0) {",
          "1879:                 al = SSL_AD_DECRYPT_ERROR;",
          "1881:                 goto f_err;",
          "1882:             }",
          "1883:         }",
          "",
          "[Removed Lines]",
          "1880:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Added Lines]",
          "1918:                 SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1888:             if (ssl3_check_cert_and_algorithm(s))",
          "1891:             goto err;",
          "1892:         }",
          "1894:         if (PACKET_remaining(&pkt) != 0) {",
          "1896:             goto f_err;",
          "1897:         }",
          "1898:     }",
          "1899:     EVP_PKEY_free(pkey);",
          "1900:     EVP_MD_CTX_cleanup(&md_ctx);",
          "1902:  f_err:",
          "1903:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1904:  err:",
          "",
          "[Removed Lines]",
          "1890:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1895:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "1901:     return (1);",
          "",
          "[Added Lines]",
          "1928:                 SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1933:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "1939:     return MSG_PROCESS_CONTINUE_READING;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1915:     EC_KEY_free(ecdh);",
          "1916: #endif",
          "1917:     EVP_MD_CTX_cleanup(&md_ctx);",
          "1920: }",
          "1922: int ssl3_get_certificate_request(SSL *s)",
          "1923: {",
          "1933:     n = s->method->ssl_get_message(s,",
          "1934:                                    SSL3_ST_CR_CERT_REQ_A,",
          "",
          "[Removed Lines]",
          "1918:     s->state = SSL_ST_ERR;",
          "1919:     return (-1);",
          "1924:     int ok, ret = 0;",
          "1925:     unsigned long n;",
          "1926:     unsigned int list_len, ctype_num, i, name_len;",
          "1927:     X509_NAME *xn = NULL;",
          "1928:     unsigned char *data;",
          "1929:     unsigned char *namestart, *namebytes;",
          "1930:     STACK_OF(X509_NAME) *ca_sk = NULL;",
          "1931:     PACKET pkt;",
          "",
          "[Added Lines]",
          "1956:     statem_set_error(s);",
          "1957:     return MSG_PROCESS_ERROR;",
          "1962:     long n;",
          "1963:     int ok;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1967:         }",
          "1968:     }",
          "1970:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1971:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "1973:         goto err;",
          "1974:     }",
          "1976:     if ((ca_sk = sk_X509_NAME_new(ca_dn_cmp)) == NULL) {",
          "1978:         goto err;",
          "1979:     }",
          "",
          "[Removed Lines]",
          "1972:         SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);",
          "1977:         SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2002:     return tls_process_certificate_request(s, (unsigned long)n);",
          "2003:  err:",
          "2004:     s->state = SSL_ST_ERR;",
          "2005:     return -1;",
          "2006: }",
          "2009: enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s, unsigned long n)",
          "2010: {",
          "2011:     int ret = MSG_PROCESS_ERROR;",
          "2012:     unsigned int list_len, ctype_num, i, name_len;",
          "2013:     X509_NAME *xn = NULL;",
          "2014:     unsigned char *data;",
          "2015:     unsigned char *namestart, *namebytes;",
          "2016:     STACK_OF(X509_NAME) *ca_sk = NULL;",
          "2017:     PACKET pkt;",
          "2021:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);",
          "2026:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1982:     if (!PACKET_get_1(&pkt, &ctype_num)",
          "1983:             || !PACKET_get_bytes(&pkt, &data, ctype_num)) {",
          "1984:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1986:         goto err;",
          "1987:     }",
          "1988:     OPENSSL_free(s->cert->ctypes);",
          "",
          "[Removed Lines]",
          "1985:         SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "2034:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1992:         s->cert->ctypes = OPENSSL_malloc(ctype_num);",
          "1993:         if (s->cert->ctypes == NULL) {",
          "1995:             goto err;",
          "1996:         }",
          "1997:         memcpy(s->cert->ctypes, data, ctype_num);",
          "",
          "[Removed Lines]",
          "1994:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2043:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2005:         if (!PACKET_get_net_2(&pkt, &list_len)",
          "2006:                 || !PACKET_get_bytes(&pkt, &data, list_len)) {",
          "2007:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "2009:             goto err;",
          "2010:         }",
          "",
          "[Removed Lines]",
          "2008:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "2057:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "2058:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2016:         }",
          "2017:         if ((list_len & 1) || !tls1_save_sigalgs(s, data, list_len)) {",
          "2018:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "2020:                    SSL_R_SIGNATURE_ALGORITHMS_ERROR);",
          "2021:             goto err;",
          "2022:         }",
          "2023:         if (!tls1_process_sigalgs(s)) {",
          "2024:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2026:             goto err;",
          "2027:         }",
          "2028:     }",
          "",
          "[Removed Lines]",
          "2019:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST,",
          "2025:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2069:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "2075:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2031:     if (!PACKET_get_net_2(&pkt, &list_len)",
          "2032:             || PACKET_remaining(&pkt) != list_len) {",
          "2033:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "2035:         goto err;",
          "2036:     }",
          "",
          "[Removed Lines]",
          "2034:         SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "2084:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2039:         if (!PACKET_get_net_2(&pkt, &name_len)",
          "2040:                 || !PACKET_get_bytes(&pkt, &namebytes, name_len)) {",
          "2041:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "2043:             goto err;",
          "2044:         }",
          "",
          "[Removed Lines]",
          "2042:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "2092:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "2093:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2048:         if ((xn = d2i_X509_NAME(NULL, (const unsigned char **)&namebytes,",
          "2049:                                 name_len)) == NULL) {",
          "2050:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "2052:             goto err;",
          "2053:         }",
          "2055:         if (namebytes != (namestart + name_len)) {",
          "2056:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "2058:                    SSL_R_CA_DN_LENGTH_MISMATCH);",
          "2059:             goto err;",
          "2060:         }",
          "2061:         if (!sk_X509_NAME_push(ca_sk, xn)) {",
          "2063:             goto err;",
          "2064:         }",
          "2065:     }",
          "",
          "[Removed Lines]",
          "2051:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, ERR_R_ASN1_LIB);",
          "2057:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST,",
          "2062:             SSLerr(SSL_F_SSL3_GET_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2102:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_ASN1_LIB);",
          "2108:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "2113:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2071:     s->s3->tmp.ca_names = ca_sk;",
          "2072:     ca_sk = NULL;",
          "2075:     goto done;",
          "2076:  err:",
          "2078:  done:",
          "2079:     sk_X509_NAME_pop_free(ca_sk, X509_NAME_free);",
          "2081: }",
          "2083: static int ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b)",
          "",
          "[Removed Lines]",
          "2074:     ret = 1;",
          "2077:     s->state = SSL_ST_ERR;",
          "2080:     return (ret);",
          "",
          "[Added Lines]",
          "2125:     ret = MSG_PROCESS_CONTINUE_READING;",
          "2128:     statem_set_error(s);",
          "2131:     return ret;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2088: int ssl3_get_new_session_ticket(SSL *s)",
          "2089: {",
          "2093:     long n;",
          "2096:     n = s->method->ssl_get_message(s,",
          "2097:                                    SSL3_ST_CR_SESSION_TICKET_A,",
          "",
          "[Removed Lines]",
          "2090:     int ok, al, ret = 0;",
          "2091:     unsigned int ticklen;",
          "2092:     unsigned long ticket_lifetime_hint;",
          "2094:     PACKET pkt;",
          "",
          "[Added Lines]",
          "2142:     int ok;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2101:     if (!ok)",
          "2102:         return ((int)n);",
          "2104:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2105:         al = SSL_AD_INTERNAL_ERROR;",
          "2107:         goto f_err;",
          "2108:     }",
          "",
          "[Removed Lines]",
          "2106:         SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "2152:     return tls_process_new_session_ticket(s, (unsigned long)n);",
          "2153: }",
          "2155: enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s, unsigned long n)",
          "2156: {",
          "2157:     int al;",
          "2158:     unsigned int ticklen;",
          "2159:     unsigned long ticket_lifetime_hint;",
          "2160:     PACKET pkt;",
          "2164:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2143:         if ((new_sess = ssl_session_dup(s->session, 0)) == 0) {",
          "2144:             al = SSL_AD_INTERNAL_ERROR;",
          "2146:             goto f_err;",
          "2147:         }",
          "",
          "[Removed Lines]",
          "2145:             SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2203:             SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2156:     s->session->tlsext_tick = OPENSSL_malloc(ticklen);",
          "2157:     if (!s->session->tlsext_tick) {",
          "2159:         goto err;",
          "2160:     }",
          "2161:     if (!PACKET_copy_bytes(&pkt, s->session->tlsext_tick, ticklen)) {",
          "2162:         al = SSL_AD_DECODE_ERROR;",
          "2164:         goto f_err;",
          "2165:     }",
          "",
          "[Removed Lines]",
          "2158:         SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "2163:         SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "2216:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "2221:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2180:     EVP_Digest(s->session->tlsext_tick, ticklen,",
          "2181:                s->session->session_id, &s->session->session_id_length,",
          "2182:                EVP_sha256(), NULL);",
          "2185:  f_err:",
          "2186:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2187:  err:",
          "2190: }",
          "2192: int ssl3_get_cert_status(SSL *s)",
          "2193: {",
          "2199:     n = s->method->ssl_get_message(s,",
          "2200:                                    SSL3_ST_CR_CERT_STATUS_A,",
          "",
          "[Removed Lines]",
          "2183:     ret = 1;",
          "2184:     return (ret);",
          "2188:     s->state = SSL_ST_ERR;",
          "2189:     return (-1);",
          "2194:     int ok, al;",
          "2195:     unsigned long resplen, n;",
          "2196:     unsigned int type;",
          "2197:     PACKET pkt;",
          "",
          "[Added Lines]",
          "2241:     return MSG_PROCESS_CONTINUE_READING;",
          "2245:     statem_set_error(s);",
          "2246:     return MSG_PROCESS_ERROR;",
          "2251:     long n;",
          "2252:     int ok;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2204:     if (!ok)",
          "2205:         return ((int)n);",
          "2207:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2208:         al = SSL_AD_INTERNAL_ERROR;",
          "2210:         goto f_err;",
          "2211:     }",
          "2212:     if (!PACKET_get_1(&pkt, &type)",
          "2213:             || type != TLSEXT_STATUSTYPE_ocsp) {",
          "2214:         al = SSL_AD_DECODE_ERROR;",
          "2216:         goto f_err;",
          "2217:     }",
          "2218:     if (!PACKET_get_net_3(&pkt, &resplen)",
          "2219:             || PACKET_remaining(&pkt) != resplen) {",
          "2220:         al = SSL_AD_DECODE_ERROR;",
          "2222:         goto f_err;",
          "2223:     }",
          "2224:     OPENSSL_free(s->tlsext_ocsp_resp);",
          "2225:     s->tlsext_ocsp_resp = OPENSSL_malloc(resplen);",
          "2226:     if (!s->tlsext_ocsp_resp) {",
          "2227:         al = SSL_AD_INTERNAL_ERROR;",
          "2229:         goto f_err;",
          "2230:     }",
          "2231:     if (!PACKET_copy_bytes(&pkt, s->tlsext_ocsp_resp, resplen)) {",
          "2232:         al = SSL_AD_DECODE_ERROR;",
          "2234:         goto f_err;",
          "2235:     }",
          "2236:     s->tlsext_ocsp_resplen = resplen;",
          "",
          "[Removed Lines]",
          "2209:         SSLerr(SSL_F_SSL3_GET_CERT_STATUS, ERR_R_INTERNAL_ERROR);",
          "2215:         SSLerr(SSL_F_SSL3_GET_CERT_STATUS, SSL_R_UNSUPPORTED_STATUS_TYPE);",
          "2221:         SSLerr(SSL_F_SSL3_GET_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "2228:         SSLerr(SSL_F_SSL3_GET_CERT_STATUS, ERR_R_MALLOC_FAILURE);",
          "2233:         SSLerr(SSL_F_SSL3_GET_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Added Lines]",
          "2262:     return tls_process_cert_status(s, (unsigned long)n);",
          "2263: }",
          "2265: enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n)",
          "2266: {",
          "2267:     int al;",
          "2268:     unsigned long resplen;",
          "2269:     unsigned int type;",
          "2270:     PACKET pkt;",
          "2274:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_INTERNAL_ERROR);",
          "2280:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_UNSUPPORTED_STATUS_TYPE);",
          "2286:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "2293:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_MALLOC_FAILURE);",
          "2298:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2239:         ret = s->ctx->tlsext_status_cb(s, s->ctx->tlsext_status_arg);",
          "2240:         if (ret == 0) {",
          "2241:             al = SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE;",
          "2243:             goto f_err;",
          "2244:         }",
          "2245:         if (ret < 0) {",
          "2246:             al = SSL_AD_INTERNAL_ERROR;",
          "2248:             goto f_err;",
          "2249:         }",
          "2250:     }",
          "2252:  f_err:",
          "2253:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2256: }",
          "2258: int ssl3_get_server_done(SSL *s)",
          "2259: {",
          "2261:     long n;",
          "2264:     n = s->method->ssl_get_message(s,",
          "",
          "[Removed Lines]",
          "2242:             SSLerr(SSL_F_SSL3_GET_CERT_STATUS, SSL_R_INVALID_STATUS_RESPONSE);",
          "2247:             SSLerr(SSL_F_SSL3_GET_CERT_STATUS, ERR_R_MALLOC_FAILURE);",
          "2251:     return 1;",
          "2254:     s->state = SSL_ST_ERR;",
          "2255:     return (-1);",
          "2260:     int ok, ret = 0;",
          "",
          "[Added Lines]",
          "2307:             SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_INVALID_STATUS_RESPONSE);",
          "2312:             SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_MALLOC_FAILURE);",
          "2316:     return MSG_PROCESS_CONTINUE_READING;",
          "2319:     statem_set_error(s);",
          "2320:     return MSG_PROCESS_ERROR;",
          "2326:     int ok;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2269:     if (!ok)",
          "2270:         return ((int)n);",
          "2271:     if (n > 0) {",
          "2273:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "2277:     }",
          "2280: }",
          "2282: int ssl3_send_client_key_exchange(SSL *s)",
          "2283: {",
          "2284:     unsigned char *p;",
          "2285:     int n;",
          "",
          "[Removed Lines]",
          "2274:         SSLerr(SSL_F_SSL3_GET_SERVER_DONE, SSL_R_LENGTH_MISMATCH);",
          "2275:         s->state = SSL_ST_ERR;",
          "2276:         return -1;",
          "2278:     ret = 1;",
          "2279:     return (ret);",
          "",
          "[Added Lines]",
          "2337:     return tls_process_server_done(s, (unsigned long)n);",
          "2338: }",
          "2340: enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n)",
          "2341: {",
          "2345:         SSLerr(SSL_F_TLS_PROCESS_SERVER_DONE, SSL_R_LENGTH_MISMATCH);",
          "2346:         statem_set_error(s);",
          "2347:         return MSG_PROCESS_ERROR;",
          "2350: #ifndef OPENSSL_NO_SRP",
          "2351:     if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) {",
          "2352:         if (SRP_Calc_A_param(s) <= 0) {",
          "2353:             SSLerr(SSL_F_TLS_PROCESS_SERVER_DONE, SSL_R_SRP_A_CALC);",
          "2354:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2355:             statem_set_error(s);",
          "2356:             return MSG_PROCESS_ERROR;",
          "2357:         }",
          "2358:     }",
          "2359: #endif",
          "2361:     return MSG_PROCESS_FINISHED_READING;",
          "2365: {",
          "2366:     int n;",
          "2368:     if (s->state == SSL3_ST_CW_KEY_EXCH_A) {",
          "2369:         if(tls_construct_client_key_exchange(s) == 0)",
          "2370:             goto err;",
          "2372:         s->state = SSL3_ST_CW_KEY_EXCH_B;",
          "2373:     }",
          "2376:     n = ssl_do_write(s);",
          "2378:     if (n > 0) {",
          "2379:         if (tls_client_key_exchange_post_work(s) == 0)",
          "2380:             goto err;",
          "2381:         }",
          "2383:     return n;",
          "2384:  err:",
          "2385:     s->state = SSL_ST_ERR;",
          "2386:     return -1;",
          "2388: }",
          "2390: int tls_construct_client_key_exchange(SSL *s)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2303:     size_t pmslen = 0;",
          "2304:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "2310: #ifndef OPENSSL_NO_PSK",
          "2375:             OPENSSL_cleanse(identity, sizeof(identity));",
          "2380:         }",
          "2388:         }",
          "2389: #ifndef OPENSSL_NO_RSA",
          "2418:                 EVP_PKEY_free(pkey);",
          "2419:             }",
          "2431: # ifdef PKCS1_CHECK",
          "2436: # endif",
          "2448:         }",
          "2449: #endif",
          "2450: #ifndef OPENSSL_NO_DH",
          "2492:             }",
          "2511:                 goto err;",
          "2512:             }",
          "2526:         }",
          "2584:                        ERR_R_INTERNAL_ERROR);",
          "2585:                 goto err;",
          "2586:             }",
          "2591:                 goto err;",
          "2592:             }",
          "2596:                 goto err;",
          "2597:             }",
          "2687:         }",
          "2730:                        ERR_R_INTERNAL_ERROR);",
          "2731:                 goto err;",
          "2745:             }",
          "2764:                 goto err;",
          "2765:             }",
          "2775:                 goto err;",
          "2776:             }",
          "2791:             }",
          "2795:         }",
          "2813:                        ERR_R_MALLOC_FAILURE);",
          "2814:                 goto err;",
          "2815:             }",
          "2822:         }",
          "2831:             goto err;",
          "2832:         }",
          "2851:             }",
          "2852:         }",
          "2864:         }",
          "2868:             goto err;",
          "2869:         }",
          "2873:             goto err;",
          "2874:         }",
          "2875:     }",
          "2877:  memerr:",
          "2878:     ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2880:  err:",
          "2881:     OPENSSL_clear_free(pms, pmslen);",
          "2882:     s->s3->tmp.pms = NULL;",
          "",
          "[Removed Lines]",
          "2306:     if (s->state == SSL3_ST_CW_KEY_EXCH_A) {",
          "2307:         p = ssl_handshake_start(s);",
          "2311:         if (alg_k & SSL_PSK) {",
          "2312:             int psk_err = 1;",
          "2318:             char identity[PSK_MAX_IDENTITY_LEN + 1];",
          "2319:             size_t identitylen;",
          "2320:             unsigned char psk[PSK_MAX_PSK_LEN];",
          "2321:             size_t psklen;",
          "2323:             if (s->psk_client_callback == NULL) {",
          "2324:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2325:                        SSL_R_PSK_NO_CLIENT_CB);",
          "2326:                 goto err;",
          "2327:             }",
          "2329:             memset(identity, 0, sizeof(identity));",
          "2331:             psklen = s->psk_client_callback(s, s->session->psk_identity_hint,",
          "2332:                                             identity, sizeof(identity) - 1,",
          "2333:                                             psk, sizeof(psk));",
          "2335:             if (psklen > PSK_MAX_PSK_LEN) {",
          "2336:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2337:                        ERR_R_INTERNAL_ERROR);",
          "2338:                 goto psk_err;",
          "2339:             } else if (psklen == 0) {",
          "2340:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2341:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "2342:                 goto psk_err;",
          "2343:             }",
          "2345:             OPENSSL_free(s->s3->tmp.psk);",
          "2346:             s->s3->tmp.psk = BUF_memdup(psk, psklen);",
          "2347:             OPENSSL_cleanse(psk, psklen);",
          "2349:             if (s->s3->tmp.psk == NULL) {",
          "2350:                 OPENSSL_cleanse(identity, sizeof(identity));",
          "2351:                 goto memerr;",
          "2352:             }",
          "2354:             s->s3->tmp.psklen = psklen;",
          "2356:             identitylen = strlen(identity);",
          "2357:             if (identitylen > PSK_MAX_IDENTITY_LEN) {",
          "2358:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2359:                        ERR_R_INTERNAL_ERROR);",
          "2360:                 goto psk_err;",
          "2361:             }",
          "2362:             OPENSSL_free(s->session->psk_identity);",
          "2363:             s->session->psk_identity = BUF_strdup(identity);",
          "2364:             if (s->session->psk_identity == NULL) {",
          "2365:                 OPENSSL_cleanse(identity, sizeof(identity));",
          "2366:                 goto memerr;",
          "2367:             }",
          "2369:             s2n(identitylen, p);",
          "2370:             memcpy(p, identity, identitylen);",
          "2371:             pskhdrlen = 2 + identitylen;",
          "2372:             p += identitylen;",
          "2373:             psk_err = 0;",
          "2374:  psk_err:",
          "2376:             if (psk_err != 0) {",
          "2377:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2378:                 goto err;",
          "2379:             }",
          "2381:         if (alg_k & SSL_kPSK) {",
          "2382:             n = 0;",
          "2383:         } else",
          "2384: #endif",
          "2387:         if (0) {",
          "2390:         else if (alg_k & (SSL_kRSA | SSL_kRSAPSK)) {",
          "2391:             RSA *rsa;",
          "2392:             pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2393:             pms = OPENSSL_malloc(pmslen);",
          "2394:             if (!pms)",
          "2395:                 goto memerr;",
          "2397:             if (s->session->peer == NULL) {",
          "2401:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2402:                        ERR_R_INTERNAL_ERROR);",
          "2403:                 goto err;",
          "2404:             }",
          "2406:             if (s->s3->peer_rsa_tmp != NULL)",
          "2407:                 rsa = s->s3->peer_rsa_tmp;",
          "2408:             else {",
          "2409:                 pkey = X509_get_pubkey(s->session->peer);",
          "2410:                 if ((pkey == NULL) || (pkey->type != EVP_PKEY_RSA)",
          "2411:                     || (pkey->pkey.rsa == NULL)) {",
          "2412:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2413:                            ERR_R_INTERNAL_ERROR);",
          "2414:                     EVP_PKEY_free(pkey);",
          "2415:                     goto err;",
          "2416:                 }",
          "2417:                 rsa = pkey->pkey.rsa;",
          "2421:             pms[0] = s->client_version >> 8;",
          "2422:             pms[1] = s->client_version & 0xff;",
          "2423:             if (RAND_bytes(pms + 2, pmslen - 2) <= 0)",
          "2424:                 goto err;",
          "2426:             q = p;",
          "2428:             if (s->version > SSL3_VERSION)",
          "2429:                 p += 2;",
          "2430:             n = RSA_public_encrypt(pmslen, pms, p, rsa, RSA_PKCS1_PADDING);",
          "2432:             if (s->options & SSL_OP_PKCS1_CHECK_1)",
          "2433:                 p[1]++;",
          "2434:             if (s->options & SSL_OP_PKCS1_CHECK_2)",
          "2435:                 tmp_buf[0] = 0x70;",
          "2437:             if (n <= 0) {",
          "2438:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2439:                        SSL_R_BAD_RSA_ENCRYPT);",
          "2440:                 goto err;",
          "2441:             }",
          "2444:             if (s->version > SSL3_VERSION) {",
          "2445:                 s2n(n, q);",
          "2446:                 n += 2;",
          "2447:             }",
          "2451:         else if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "2452:             DH *dh_srvr, *dh_clnt;",
          "2453:             if (s->s3->peer_dh_tmp != NULL)",
          "2454:                 dh_srvr = s->s3->peer_dh_tmp;",
          "2455:             else {",
          "2457:                 EVP_PKEY *spkey = NULL;",
          "2458:                 dh_srvr = NULL;",
          "2459:                 spkey = X509_get_pubkey(s->session->peer);",
          "2460:                 if (spkey) {",
          "2461:                     dh_srvr = EVP_PKEY_get1_DH(spkey);",
          "2462:                     EVP_PKEY_free(spkey);",
          "2463:                 }",
          "2464:                 if (dh_srvr == NULL) {",
          "2465:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2466:                            ERR_R_INTERNAL_ERROR);",
          "2467:                     goto err;",
          "2468:                 }",
          "2469:             }",
          "2470:             if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY) {",
          "2472:                 EVP_PKEY *clkey = s->cert->key->privatekey;",
          "2473:                 dh_clnt = NULL;",
          "2474:                 if (clkey)",
          "2475:                     dh_clnt = EVP_PKEY_get1_DH(clkey);",
          "2476:                 if (dh_clnt == NULL) {",
          "2477:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2478:                            ERR_R_INTERNAL_ERROR);",
          "2479:                     goto err;",
          "2480:                 }",
          "2481:             } else {",
          "2483:                 if ((dh_clnt = DHparams_dup(dh_srvr)) == NULL) {",
          "2484:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "2485:                     goto err;",
          "2486:                 }",
          "2487:                 if (!DH_generate_key(dh_clnt)) {",
          "2488:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "2489:                     DH_free(dh_clnt);",
          "2490:                     goto err;",
          "2491:                 }",
          "2494:             pmslen = DH_size(dh_clnt);",
          "2495:             pms = OPENSSL_malloc(pmslen);",
          "2496:             if (!pms)",
          "2497:                 goto memerr;",
          "2504:             n = DH_compute_key(pms, dh_srvr->pub_key, dh_clnt);",
          "2505:             if (s->s3->peer_dh_tmp == NULL)",
          "2506:                 DH_free(dh_srvr);",
          "2508:             if (n <= 0) {",
          "2509:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "2510:                 DH_free(dh_clnt);",
          "2513:             pmslen = n;",
          "2515:             if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY)",
          "2516:                 n = 0;",
          "2517:             else {",
          "2519:                 n = BN_num_bytes(dh_clnt->pub_key);",
          "2520:                 s2n(n, p);",
          "2521:                 BN_bn2bin(dh_clnt->pub_key, p);",
          "2522:                 n += 2;",
          "2523:             }",
          "2525:             DH_free(dh_clnt);",
          "2527: #endif",
          "2529: #ifndef OPENSSL_NO_EC",
          "2530:         else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe | SSL_kECDHEPSK)) {",
          "2531:             const EC_GROUP *srvr_group = NULL;",
          "2532:             EC_KEY *tkey;",
          "2533:             int ecdh_clnt_cert = 0;",
          "2534:             int field_size = 0;",
          "2540:             if ((alg_k & (SSL_kECDHr | SSL_kECDHe)) && (s->cert != NULL)) {",
          "2561:             }",
          "2563:             if (s->s3->peer_ecdh_tmp != NULL) {",
          "2564:                 tkey = s->s3->peer_ecdh_tmp;",
          "2565:             } else {",
          "2567:                 srvr_pub_pkey = X509_get_pubkey(s->session->peer);",
          "2568:                 if ((srvr_pub_pkey == NULL)",
          "2569:                     || (srvr_pub_pkey->type != EVP_PKEY_EC)",
          "2570:                     || (srvr_pub_pkey->pkey.ec == NULL)) {",
          "2571:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2572:                            ERR_R_INTERNAL_ERROR);",
          "2573:                     goto err;",
          "2574:                 }",
          "2576:                 tkey = srvr_pub_pkey->pkey.ec;",
          "2577:             }",
          "2579:             srvr_group = EC_KEY_get0_group(tkey);",
          "2580:             srvr_ecpoint = EC_KEY_get0_public_key(tkey);",
          "2582:             if ((srvr_group == NULL) || (srvr_ecpoint == NULL)) {",
          "2583:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2588:             if ((clnt_ecdh = EC_KEY_new()) == NULL) {",
          "2589:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2590:                        ERR_R_MALLOC_FAILURE);",
          "2594:             if (!EC_KEY_set_group(clnt_ecdh, srvr_group)) {",
          "2595:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2598:             if (ecdh_clnt_cert) {",
          "2603:                 const BIGNUM *priv_key;",
          "2604:                 tkey = s->cert->key->privatekey->pkey.ec;",
          "2605:                 priv_key = EC_KEY_get0_private_key(tkey);",
          "2606:                 if (priv_key == NULL) {",
          "2607:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2608:                            ERR_R_MALLOC_FAILURE);",
          "2609:                     goto err;",
          "2610:                 }",
          "2611:                 if (!EC_KEY_set_private_key(clnt_ecdh, priv_key)) {",
          "2612:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2613:                     goto err;",
          "2614:                 }",
          "2615:             } else {",
          "2617:                 if (!(EC_KEY_generate_key(clnt_ecdh))) {",
          "2618:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2619:                            ERR_R_ECDH_LIB);",
          "2620:                     goto err;",
          "2621:                 }",
          "2622:             }",
          "2629:             field_size = EC_GROUP_get_degree(srvr_group);",
          "2630:             if (field_size <= 0) {",
          "2631:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2632:                 goto err;",
          "2633:             }",
          "2634:             pmslen = (field_size + 7) / 8;",
          "2635:             pms = OPENSSL_malloc(pmslen);",
          "2636:             if (!pms)",
          "2637:                 goto memerr;",
          "2638:             n = ECDH_compute_key(pms, pmslen, srvr_ecpoint, clnt_ecdh, NULL);",
          "2639:             if (n <= 0 || pmslen != (size_t)n) {",
          "2640:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2641:                 goto err;",
          "2642:             }",
          "2644:             if (ecdh_clnt_cert) {",
          "2646:                 n = 0;",
          "2647:             } else {",
          "2652:                 encoded_pt_len =",
          "2653:                     EC_POINT_point2oct(srvr_group,",
          "2654:                                        EC_KEY_get0_public_key(clnt_ecdh),",
          "2655:                                        POINT_CONVERSION_UNCOMPRESSED,",
          "2656:                                        NULL, 0, NULL);",
          "2658:                 encodedPoint = (unsigned char *)",
          "2659:                     OPENSSL_malloc(encoded_pt_len * sizeof(unsigned char));",
          "2660:                 bn_ctx = BN_CTX_new();",
          "2661:                 if ((encodedPoint == NULL) || (bn_ctx == NULL)) {",
          "2662:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2663:                            ERR_R_MALLOC_FAILURE);",
          "2664:                     goto err;",
          "2665:                 }",
          "2668:                 n = EC_POINT_point2oct(srvr_group,",
          "2669:                                        EC_KEY_get0_public_key(clnt_ecdh),",
          "2670:                                        POINT_CONVERSION_UNCOMPRESSED,",
          "2671:                                        encodedPoint, encoded_pt_len, bn_ctx);",
          "2675:                 p += 1;",
          "2677:                 memcpy(p, encodedPoint, n);",
          "2679:                 n += 1;",
          "2680:             }",
          "2683:             BN_CTX_free(bn_ctx);",
          "2684:             OPENSSL_free(encodedPoint);",
          "2685:             EC_KEY_free(clnt_ecdh);",
          "2686:             EVP_PKEY_free(srvr_pub_pkey);",
          "2689:         else if (alg_k & SSL_kGOST) {",
          "2691:             EVP_PKEY_CTX *pkey_ctx;",
          "2692:             X509 *peer_cert;",
          "2693:             size_t msglen;",
          "2694:             unsigned int md_len;",
          "2695:             unsigned char shared_ukm[32], tmp[256];",
          "2696:             EVP_MD_CTX *ukm_hash;",
          "2697:             EVP_PKEY *pub_key;",
          "2699:             pmslen = 32;",
          "2700:             pms = OPENSSL_malloc(pmslen);",
          "2701:             if (!pms)",
          "2702:                 goto memerr;",
          "2707:             peer_cert = s->session->peer;",
          "2708:             if (!peer_cert) {",
          "2709:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2710:                        SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER);",
          "2711:                 goto err;",
          "2712:             }",
          "2714:             pkey_ctx = EVP_PKEY_CTX_new(pub_key =",
          "2715:                                         X509_get_pubkey(peer_cert), NULL);",
          "2725:             EVP_PKEY_encrypt_init(pkey_ctx);",
          "2727:             if (RAND_bytes(pms, pmslen) <= 0) {",
          "2728:                 EVP_PKEY_CTX_free(pkey_ctx);",
          "2729:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2732:             };",
          "2736:             if (s->s3->tmp.cert_req && s->cert->key->privatekey) {",
          "2737:                 if (EVP_PKEY_derive_set_peer",
          "2738:                     (pkey_ctx, s->cert->key->privatekey) <= 0) {",
          "2743:                     ERR_clear_error();",
          "2744:                 }",
          "2750:             ukm_hash = EVP_MD_CTX_create();",
          "2751:             EVP_DigestInit(ukm_hash,",
          "2752:                            EVP_get_digestbynid(NID_id_GostR3411_94));",
          "2753:             EVP_DigestUpdate(ukm_hash, s->s3->client_random,",
          "2754:                              SSL3_RANDOM_SIZE);",
          "2755:             EVP_DigestUpdate(ukm_hash, s->s3->server_random,",
          "2756:                              SSL3_RANDOM_SIZE);",
          "2757:             EVP_DigestFinal_ex(ukm_hash, shared_ukm, &md_len);",
          "2758:             EVP_MD_CTX_destroy(ukm_hash);",
          "2759:             if (EVP_PKEY_CTX_ctrl",
          "2760:                 (pkey_ctx, -1, EVP_PKEY_OP_ENCRYPT, EVP_PKEY_CTRL_SET_IV, 8,",
          "2761:                  shared_ukm) < 0) {",
          "2762:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2763:                        SSL_R_LIBRARY_BUG);",
          "2771:             msglen = 255;",
          "2772:             if (EVP_PKEY_encrypt(pkey_ctx, tmp, &msglen, pms, pmslen) < 0) {",
          "2773:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2774:                        SSL_R_LIBRARY_BUG);",
          "2777:             if (msglen >= 0x80) {",
          "2780:                 n = msglen + 3;",
          "2781:             } else {",
          "2783:                 n = msglen + 2;",
          "2784:             }",
          "2785:             memcpy(p, tmp, msglen);",
          "2787:             if (EVP_PKEY_CTX_ctrl",
          "2788:                 (pkey_ctx, -1, -1, EVP_PKEY_CTRL_PEER_KEY, 2, NULL) > 0) {",
          "2790:                 s->s3->flags |= TLS1_FLAGS_SKIP_CERT_VERIFY;",
          "2792:             EVP_PKEY_CTX_free(pkey_ctx);",
          "2793:             EVP_PKEY_free(pub_key);",
          "2796: #ifndef OPENSSL_NO_SRP",
          "2797:         else if (alg_k & SSL_kSRP) {",
          "2798:             if (s->srp_ctx.A != NULL) {",
          "2800:                 n = BN_num_bytes(s->srp_ctx.A);",
          "2801:                 s2n(n, p);",
          "2802:                 BN_bn2bin(s->srp_ctx.A, p);",
          "2803:                 n += 2;",
          "2804:             } else {",
          "2805:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2806:                        ERR_R_INTERNAL_ERROR);",
          "2807:                 goto err;",
          "2808:             }",
          "2809:             OPENSSL_free(s->session->srp_username);",
          "2810:             s->session->srp_username = BUF_strdup(s->srp_ctx.login);",
          "2811:             if (s->session->srp_username == NULL) {",
          "2812:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2816:         }",
          "2817: #endif",
          "2818:         else {",
          "2819:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2820:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2821:             goto err;",
          "2824: #ifndef OPENSSL_NO_PSK",
          "2825:         n += pskhdrlen;",
          "2826: #endif",
          "2828:         if (!ssl_set_handshake_header(s, SSL3_MT_CLIENT_KEY_EXCHANGE, n)) {",
          "2829:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2830:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2834:         s->state = SSL3_ST_CW_KEY_EXCH_B;",
          "2835:     }",
          "2838:     n = ssl_do_write(s);",
          "2839: #ifndef OPENSSL_NO_SRP",
          "2841:     if (alg_k & SSL_kSRP) {",
          "2846:         if (n > 0) {",
          "2847:             if (!srp_generate_client_master_secret(s)) {",
          "2848:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2849:                        ERR_R_INTERNAL_ERROR);",
          "2850:                 goto err;",
          "2853:     } else",
          "2854: #endif",
          "2856:     if (n <= 0) {",
          "2857:         s->s3->tmp.pms = pms;",
          "2858:         s->s3->tmp.pmslen = pmslen;",
          "2859:     } else {",
          "2861:         if (pms == NULL) {",
          "2862:             pms = s->s3->tmp.pms;",
          "2863:             pmslen = s->s3->tmp.pmslen;",
          "2865:         if (pms == NULL && !(alg_k & SSL_kPSK)) {",
          "2866:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2867:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "2870:         if (!ssl_generate_master_secret(s, pms, pmslen, 1)) {",
          "2871:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2872:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2876:     return n;",
          "2879:     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Added Lines]",
          "2414:     p = ssl_handshake_start(s);",
          "2418:     if (alg_k & SSL_PSK) {",
          "2419:         int psk_err = 1;",
          "2425:         char identity[PSK_MAX_IDENTITY_LEN + 1];",
          "2426:         size_t identitylen;",
          "2427:         unsigned char psk[PSK_MAX_PSK_LEN];",
          "2428:         size_t psklen;",
          "2430:         if (s->psk_client_callback == NULL) {",
          "2431:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2432:                    SSL_R_PSK_NO_CLIENT_CB);",
          "2433:             goto err;",
          "2434:         }",
          "2436:         memset(identity, 0, sizeof(identity));",
          "2438:         psklen = s->psk_client_callback(s, s->session->psk_identity_hint,",
          "2439:                                         identity, sizeof(identity) - 1,",
          "2440:                                         psk, sizeof(psk));",
          "2442:         if (psklen > PSK_MAX_PSK_LEN) {",
          "2443:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2444:                    ERR_R_INTERNAL_ERROR);",
          "2445:             goto psk_err;",
          "2446:         } else if (psklen == 0) {",
          "2447:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2448:                    SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "2449:             goto psk_err;",
          "2450:         }",
          "2452:         OPENSSL_free(s->s3->tmp.psk);",
          "2453:         s->s3->tmp.psk = BUF_memdup(psk, psklen);",
          "2454:         OPENSSL_cleanse(psk, psklen);",
          "2456:         if (s->s3->tmp.psk == NULL) {",
          "2457:             OPENSSL_cleanse(identity, sizeof(identity));",
          "2458:             goto memerr;",
          "2459:         }",
          "2461:         s->s3->tmp.psklen = psklen;",
          "2463:         identitylen = strlen(identity);",
          "2464:         if (identitylen > PSK_MAX_IDENTITY_LEN) {",
          "2465:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2466:                    ERR_R_INTERNAL_ERROR);",
          "2467:             goto psk_err;",
          "2468:         }",
          "2469:         OPENSSL_free(s->session->psk_identity);",
          "2470:         s->session->psk_identity = BUF_strdup(identity);",
          "2471:         if (s->session->psk_identity == NULL) {",
          "2473:             goto memerr;",
          "2476:         s2n(identitylen, p);",
          "2477:         memcpy(p, identity, identitylen);",
          "2478:         pskhdrlen = 2 + identitylen;",
          "2479:         p += identitylen;",
          "2480:         psk_err = 0;",
          "2481: psk_err:",
          "2482:         OPENSSL_cleanse(identity, sizeof(identity));",
          "2483:         if (psk_err != 0) {",
          "2484:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2485:             goto err;",
          "2487:     }",
          "2488:     if (alg_k & SSL_kPSK) {",
          "2489:         n = 0;",
          "2490:     } else",
          "2491: #endif",
          "2494:     if (0) {",
          "2495:     }",
          "2497:     else if (alg_k & (SSL_kRSA | SSL_kRSAPSK)) {",
          "2498:         RSA *rsa;",
          "2499:         pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2500:         pms = OPENSSL_malloc(pmslen);",
          "2501:         if (!pms)",
          "2502:             goto memerr;",
          "2504:         if (s->session->peer == NULL) {",
          "2508:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2509:                    ERR_R_INTERNAL_ERROR);",
          "2510:             goto err;",
          "2511:         }",
          "2513:         if (s->s3->peer_rsa_tmp != NULL)",
          "2514:             rsa = s->s3->peer_rsa_tmp;",
          "2515:         else {",
          "2516:             pkey = X509_get_pubkey(s->session->peer);",
          "2517:             if ((pkey == NULL) || (pkey->type != EVP_PKEY_RSA)",
          "2518:                 || (pkey->pkey.rsa == NULL)) {",
          "2519:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2520:                        ERR_R_INTERNAL_ERROR);",
          "2522:                 goto err;",
          "2524:             rsa = pkey->pkey.rsa;",
          "2525:             EVP_PKEY_free(pkey);",
          "2526:         }",
          "2528:         pms[0] = s->client_version >> 8;",
          "2529:         pms[1] = s->client_version & 0xff;",
          "2530:         if (RAND_bytes(pms + 2, pmslen - 2) <= 0)",
          "2531:             goto err;",
          "2533:         q = p;",
          "2535:         if (s->version > SSL3_VERSION)",
          "2536:             p += 2;",
          "2537:         n = RSA_public_encrypt(pmslen, pms, p, rsa, RSA_PKCS1_PADDING);",
          "2539:         if (s->options & SSL_OP_PKCS1_CHECK_1)",
          "2540:             p[1]++;",
          "2541:         if (s->options & SSL_OP_PKCS1_CHECK_2)",
          "2542:             tmp_buf[0] = 0x70;",
          "2544:         if (n <= 0) {",
          "2545:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2546:                    SSL_R_BAD_RSA_ENCRYPT);",
          "2547:             goto err;",
          "2548:         }",
          "2551:         if (s->version > SSL3_VERSION) {",
          "2552:             s2n(n, q);",
          "2553:             n += 2;",
          "2555:     }",
          "2558:     else if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "2559:         DH *dh_srvr, *dh_clnt;",
          "2560:         if (s->s3->peer_dh_tmp != NULL)",
          "2561:             dh_srvr = s->s3->peer_dh_tmp;",
          "2562:         else {",
          "2564:             EVP_PKEY *spkey = NULL;",
          "2565:             dh_srvr = NULL;",
          "2566:             spkey = X509_get_pubkey(s->session->peer);",
          "2567:             if (spkey) {",
          "2568:                 dh_srvr = EVP_PKEY_get1_DH(spkey);",
          "2569:                 EVP_PKEY_free(spkey);",
          "2571:             if (dh_srvr == NULL) {",
          "2572:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2573:                        ERR_R_INTERNAL_ERROR);",
          "2577:         if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY) {",
          "2579:             EVP_PKEY *clkey = s->cert->key->privatekey;",
          "2580:             dh_clnt = NULL;",
          "2581:             if (clkey)",
          "2582:                 dh_clnt = EVP_PKEY_get1_DH(clkey);",
          "2583:             if (dh_clnt == NULL) {",
          "2584:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2588:         } else {",
          "2590:             if ((dh_clnt = DHparams_dup(dh_srvr)) == NULL) {",
          "2591:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "2594:             if (!DH_generate_key(dh_clnt)) {",
          "2595:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "2596:                 DH_free(dh_clnt);",
          "2599:         }",
          "2601:         pmslen = DH_size(dh_clnt);",
          "2602:         pms = OPENSSL_malloc(pmslen);",
          "2603:         if (!pms)",
          "2604:             goto memerr;",
          "2611:         n = DH_compute_key(pms, dh_srvr->pub_key, dh_clnt);",
          "2612:         if (s->s3->peer_dh_tmp == NULL)",
          "2613:             DH_free(dh_srvr);",
          "2615:         if (n <= 0) {",
          "2616:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "2617:             DH_free(dh_clnt);",
          "2618:             goto err;",
          "2619:         }",
          "2620:         pmslen = n;",
          "2622:         if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY)",
          "2623:             n = 0;",
          "2624:         else {",
          "2626:             n = BN_num_bytes(dh_clnt->pub_key);",
          "2627:             s2n(n, p);",
          "2628:             BN_bn2bin(dh_clnt->pub_key, p);",
          "2629:             n += 2;",
          "2632:         DH_free(dh_clnt);",
          "2633:     }",
          "2634: #endif",
          "2636: #ifndef OPENSSL_NO_EC",
          "2637:     else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe | SSL_kECDHEPSK)) {",
          "2638:         const EC_GROUP *srvr_group = NULL;",
          "2639:         EC_KEY *tkey;",
          "2640:         int ecdh_clnt_cert = 0;",
          "2641:         int field_size = 0;",
          "2647:         if ((alg_k & (SSL_kECDHr | SSL_kECDHe)) && (s->cert != NULL)) {",
          "2668:         }",
          "2670:         if (s->s3->peer_ecdh_tmp != NULL) {",
          "2671:             tkey = s->s3->peer_ecdh_tmp;",
          "2672:         } else {",
          "2674:             srvr_pub_pkey = X509_get_pubkey(s->session->peer);",
          "2675:             if ((srvr_pub_pkey == NULL)",
          "2676:                 || (srvr_pub_pkey->type != EVP_PKEY_EC)",
          "2677:                 || (srvr_pub_pkey->pkey.ec == NULL)) {",
          "2678:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2683:             tkey = srvr_pub_pkey->pkey.ec;",
          "2684:         }",
          "2686:         srvr_group = EC_KEY_get0_group(tkey);",
          "2687:         srvr_ecpoint = EC_KEY_get0_public_key(tkey);",
          "2689:         if ((srvr_group == NULL) || (srvr_ecpoint == NULL)) {",
          "2690:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2691:                    ERR_R_INTERNAL_ERROR);",
          "2692:             goto err;",
          "2693:         }",
          "2695:         if ((clnt_ecdh = EC_KEY_new()) == NULL) {",
          "2696:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2697:                    ERR_R_MALLOC_FAILURE);",
          "2698:             goto err;",
          "2699:         }",
          "2701:         if (!EC_KEY_set_group(clnt_ecdh, srvr_group)) {",
          "2702:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2703:             goto err;",
          "2704:         }",
          "2705:         if (ecdh_clnt_cert) {",
          "2710:             const BIGNUM *priv_key;",
          "2711:             tkey = s->cert->key->privatekey->pkey.ec;",
          "2712:             priv_key = EC_KEY_get0_private_key(tkey);",
          "2713:             if (priv_key == NULL) {",
          "2714:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2715:                        ERR_R_MALLOC_FAILURE);",
          "2718:             if (!EC_KEY_set_private_key(clnt_ecdh, priv_key)) {",
          "2719:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "2722:         } else {",
          "2724:             if (!(EC_KEY_generate_key(clnt_ecdh))) {",
          "2725:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2726:                        ERR_R_ECDH_LIB);",
          "2727:                 goto err;",
          "2729:         }",
          "2736:         field_size = EC_GROUP_get_degree(srvr_group);",
          "2737:         if (field_size <= 0) {",
          "2738:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2739:             goto err;",
          "2741:         pmslen = (field_size + 7) / 8;",
          "2742:         pms = OPENSSL_malloc(pmslen);",
          "2743:         if (!pms)",
          "2744:             goto memerr;",
          "2745:         n = ECDH_compute_key(pms, pmslen, srvr_ecpoint, clnt_ecdh, NULL);",
          "2746:         if (n <= 0 || pmslen != (size_t)n) {",
          "2747:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2748:             goto err;",
          "2749:         }",
          "2751:         if (ecdh_clnt_cert) {",
          "2753:             n = 0;",
          "2754:         } else {",
          "2759:             encoded_pt_len =",
          "2760:                 EC_POINT_point2oct(srvr_group,",
          "2761:                                    EC_KEY_get0_public_key(clnt_ecdh),",
          "2762:                                    POINT_CONVERSION_UNCOMPRESSED,",
          "2763:                                    NULL, 0, NULL);",
          "2765:             encodedPoint = (unsigned char *)",
          "2766:                 OPENSSL_malloc(encoded_pt_len * sizeof(unsigned char));",
          "2767:             bn_ctx = BN_CTX_new();",
          "2768:             if ((encodedPoint == NULL) || (bn_ctx == NULL)) {",
          "2769:                 SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2775:             n = EC_POINT_point2oct(srvr_group,",
          "2776:                                    EC_KEY_get0_public_key(clnt_ecdh),",
          "2777:                                    POINT_CONVERSION_UNCOMPRESSED,",
          "2778:                                    encodedPoint, encoded_pt_len, bn_ctx);",
          "2782:             p += 1;",
          "2784:             memcpy(p, encodedPoint, n);",
          "2786:             n += 1;",
          "2790:         BN_CTX_free(bn_ctx);",
          "2791:         OPENSSL_free(encodedPoint);",
          "2792:         EC_KEY_free(clnt_ecdh);",
          "2793:         EVP_PKEY_free(srvr_pub_pkey);",
          "2794:     }",
          "2796:     else if (alg_k & SSL_kGOST) {",
          "2798:         EVP_PKEY_CTX *pkey_ctx;",
          "2799:         X509 *peer_cert;",
          "2800:         size_t msglen;",
          "2801:         unsigned int md_len;",
          "2802:         unsigned char shared_ukm[32], tmp[256];",
          "2803:         EVP_MD_CTX *ukm_hash;",
          "2804:         EVP_PKEY *pub_key;",
          "2806:         pmslen = 32;",
          "2807:         pms = OPENSSL_malloc(pmslen);",
          "2808:         if (!pms)",
          "2809:             goto memerr;",
          "2814:         peer_cert = s->session->peer;",
          "2815:         if (!peer_cert) {",
          "2816:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2817:                    SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER);",
          "2821:         pkey_ctx = EVP_PKEY_CTX_new(pub_key =",
          "2822:                                     X509_get_pubkey(peer_cert), NULL);",
          "2832:         EVP_PKEY_encrypt_init(pkey_ctx);",
          "2834:         if (RAND_bytes(pms, pmslen) <= 0) {",
          "2835:             EVP_PKEY_CTX_free(pkey_ctx);",
          "2836:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2837:                    ERR_R_INTERNAL_ERROR);",
          "2838:             goto err;",
          "2839:         };",
          "2843:         if (s->s3->tmp.cert_req && s->cert->key->privatekey) {",
          "2844:             if (EVP_PKEY_derive_set_peer",
          "2845:                 (pkey_ctx, s->cert->key->privatekey) <= 0) {",
          "2850:                 ERR_clear_error();",
          "2857:         ukm_hash = EVP_MD_CTX_create();",
          "2858:         EVP_DigestInit(ukm_hash,",
          "2859:                        EVP_get_digestbynid(NID_id_GostR3411_94));",
          "2860:         EVP_DigestUpdate(ukm_hash, s->s3->client_random,",
          "2861:                          SSL3_RANDOM_SIZE);",
          "2862:         EVP_DigestUpdate(ukm_hash, s->s3->server_random,",
          "2863:                          SSL3_RANDOM_SIZE);",
          "2864:         EVP_DigestFinal_ex(ukm_hash, shared_ukm, &md_len);",
          "2865:         EVP_MD_CTX_destroy(ukm_hash);",
          "2866:         if (EVP_PKEY_CTX_ctrl",
          "2867:             (pkey_ctx, -1, EVP_PKEY_OP_ENCRYPT, EVP_PKEY_CTRL_SET_IV, 8,",
          "2868:              shared_ukm) < 0) {",
          "2869:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2870:                    SSL_R_LIBRARY_BUG);",
          "2871:             goto err;",
          "2878:         msglen = 255;",
          "2879:         if (EVP_PKEY_encrypt(pkey_ctx, tmp, &msglen, pms, pmslen) < 0) {",
          "2880:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2881:                    SSL_R_LIBRARY_BUG);",
          "2884:         if (msglen >= 0x80) {",
          "2887:             n = msglen + 3;",
          "2888:         } else {",
          "2890:             n = msglen + 2;",
          "2891:         }",
          "2892:         memcpy(p, tmp, msglen);",
          "2894:         if (EVP_PKEY_CTX_ctrl",
          "2895:             (pkey_ctx, -1, -1, EVP_PKEY_CTRL_PEER_KEY, 2, NULL) > 0) {",
          "2897:             s->s3->flags |= TLS1_FLAGS_SKIP_CERT_VERIFY;",
          "2898:         }",
          "2899:         EVP_PKEY_CTX_free(pkey_ctx);",
          "2900:         EVP_PKEY_free(pub_key);",
          "2902:     }",
          "2903: #ifndef OPENSSL_NO_SRP",
          "2904:     else if (alg_k & SSL_kSRP) {",
          "2905:         if (s->srp_ctx.A != NULL) {",
          "2907:             n = BN_num_bytes(s->srp_ctx.A);",
          "2908:             s2n(n, p);",
          "2909:             BN_bn2bin(s->srp_ctx.A, p);",
          "2910:             n += 2;",
          "2911:         } else {",
          "2912:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2913:                    ERR_R_INTERNAL_ERROR);",
          "2914:             goto err;",
          "2915:         }",
          "2916:         OPENSSL_free(s->session->srp_username);",
          "2917:         s->session->srp_username = BUF_strdup(s->srp_ctx.login);",
          "2918:         if (s->session->srp_username == NULL) {",
          "2919:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE,",
          "2920:                    ERR_R_MALLOC_FAILURE);",
          "2924: #endif",
          "2925:     else {",
          "2926:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2927:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2928:         goto err;",
          "2929:     }",
          "2931: #ifndef OPENSSL_NO_PSK",
          "2932:     n += pskhdrlen;",
          "2933: #endif",
          "2935:     if (!ssl_set_handshake_header(s, SSL3_MT_CLIENT_KEY_EXCHANGE, n)) {",
          "2936:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2937:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2938:         goto err;",
          "2939:     }",
          "2941:     s->s3->tmp.pms = pms;",
          "2942:     s->s3->tmp.pmslen = pmslen;",
          "2944:     return 1;",
          "2947:     SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2890:     OPENSSL_clear_free(s->s3->tmp.psk, s->s3->tmp.psklen);",
          "2891:     s->s3->tmp.psk = NULL;",
          "2892: #endif",
          "2895: }",
          "2897: int ssl3_send_client_verify(SSL *s)",
          "2898: {",
          "2899:     unsigned char *p;",
          "2900:     unsigned char data[MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH];",
          "",
          "[Removed Lines]",
          "2893:     s->state = SSL_ST_ERR;",
          "2894:     return (-1);",
          "",
          "[Added Lines]",
          "2961:     statem_set_error(s);",
          "2962:     return 0;",
          "2963: }",
          "2965: int tls_client_key_exchange_post_work(SSL *s)",
          "2966: {",
          "2967:     unsigned char *pms = NULL;",
          "2968:     size_t pmslen = 0;",
          "2970: #ifndef OPENSSL_NO_SRP",
          "2972:     if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) {",
          "2973:         if (!srp_generate_client_master_secret(s)) {",
          "2974:             SSLerr(SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK,",
          "2975:                    ERR_R_INTERNAL_ERROR);",
          "2976:             goto err;",
          "2977:         }",
          "2978:         return 1;",
          "2979:     }",
          "2980: #endif",
          "2981:     pms = s->s3->tmp.pms;",
          "2982:     pmslen = s->s3->tmp.pmslen;",
          "2984:     if (pms == NULL && !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)) {",
          "2985:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2986:         SSLerr(SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK, ERR_R_MALLOC_FAILURE);",
          "2987:         goto err;",
          "2988:     }",
          "2989:     if (!ssl_generate_master_secret(s, pms, pmslen, 1)) {",
          "2990:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2991:         SSLerr(SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK, ERR_R_INTERNAL_ERROR);",
          "2992:         goto err;",
          "2993:     }",
          "2994:     return 1;",
          "2995:  err:",
          "2996:     OPENSSL_clear_free(pms, pmslen);",
          "2997:     s->s3->tmp.pms = NULL;",
          "2998:     return 0;",
          "3002: {",
          "3003:     if (s->state == SSL3_ST_CW_CERT_VRFY_A) {",
          "3004:         if(tls_construct_client_verify(s) == 0)",
          "3005:             goto err;",
          "3007:         s->state = SSL3_ST_CW_CERT_VRFY_B;",
          "3008:     }",
          "3011:     return ssl_do_write(s);",
          "3012:  err:",
          "3013:     s->state = SSL_ST_ERR;",
          "3014:     return -1;",
          "3016: }",
          "3018: int tls_construct_client_verify(SSL *s)",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2908:     EVP_MD_CTX_init(&mctx);",
          "2924:         }",
          "2939: #ifdef SSL_DEBUG",
          "2942: #endif",
          "2955: #ifndef OPENSSL_NO_RSA",
          "2967: #endif",
          "2968: #ifndef OPENSSL_NO_DSA",
          "2980: #endif",
          "2981: #ifndef OPENSSL_NO_EC",
          "3011:             goto err;",
          "3012:         }",
          "3015:             goto err;",
          "3016:         }",
          "3018:     }",
          "3019:     EVP_MD_CTX_cleanup(&mctx);",
          "3020:     EVP_PKEY_CTX_free(pctx);",
          "3022:  err:",
          "3023:     EVP_MD_CTX_cleanup(&mctx);",
          "3024:     EVP_PKEY_CTX_free(pctx);",
          "3027: }",
          "",
          "[Removed Lines]",
          "2910:     if (s->state == SSL3_ST_CW_CERT_VRFY_A) {",
          "2911:         p = ssl_handshake_start(s);",
          "2912:         pkey = s->cert->key->privatekey;",
          "2914:         pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "2915:         EVP_PKEY_sign_init(pctx);",
          "2916:         if (EVP_PKEY_CTX_set_signature_md(pctx, EVP_sha1()) > 0) {",
          "2917:             if (!SSL_USE_SIGALGS(s))",
          "2918:                 s->method->ssl3_enc->cert_verify_mac(s,",
          "2919:                                                      NID_sha1,",
          "2920:                                                      &(data",
          "2921:                                                        [MD5_DIGEST_LENGTH]));",
          "2922:         } else {",
          "2923:             ERR_clear_error();",
          "2929:         if (SSL_USE_SIGALGS(s)) {",
          "2930:             long hdatalen = 0;",
          "2931:             void *hdata;",
          "2932:             const EVP_MD *md = s->s3->tmp.md[s->cert->key - s->cert->pkeys];",
          "2933:             hdatalen = BIO_get_mem_data(s->s3->handshake_buffer, &hdata);",
          "2934:             if (hdatalen <= 0 || !tls12_get_sigandhash(p, pkey, md)) {",
          "2935:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "2936:                 goto err;",
          "2937:             }",
          "2938:             p += 2;",
          "2940:             fprintf(stderr, \"Using TLS 1.2 with client alg %s\\n\",",
          "2941:                     EVP_MD_name(md));",
          "2943:             if (!EVP_SignInit_ex(&mctx, md, NULL)",
          "2944:                 || !EVP_SignUpdate(&mctx, hdata, hdatalen)",
          "2945:                 || !EVP_SignFinal(&mctx, p + 2, &u, pkey)) {",
          "2946:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_EVP_LIB);",
          "2947:                 goto err;",
          "2948:             }",
          "2949:             s2n(u, p);",
          "2950:             n = u + 4;",
          "2952:             if (!ssl3_digest_cached_records(s, 0))",
          "2953:                 goto err;",
          "2954:         } else",
          "2956:         if (pkey->type == EVP_PKEY_RSA) {",
          "2957:             s->method->ssl3_enc->cert_verify_mac(s, NID_md5, &(data[0]));",
          "2958:             if (RSA_sign(NID_md5_sha1, data,",
          "2959:                          MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH,",
          "2960:                          &(p[2]), &u, pkey->pkey.rsa) <= 0) {",
          "2961:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_RSA_LIB);",
          "2962:                 goto err;",
          "2963:             }",
          "2964:             s2n(u, p);",
          "2965:             n = u + 2;",
          "2966:         } else",
          "2969:         if (pkey->type == EVP_PKEY_DSA) {",
          "2970:             if (!DSA_sign(pkey->save_type,",
          "2971:                           &(data[MD5_DIGEST_LENGTH]),",
          "2972:                           SHA_DIGEST_LENGTH, &(p[2]),",
          "2973:                           (unsigned int *)&j, pkey->pkey.dsa)) {",
          "2974:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_DSA_LIB);",
          "2975:                 goto err;",
          "2976:             }",
          "2977:             s2n(j, p);",
          "2978:             n = j + 2;",
          "2979:         } else",
          "2982:         if (pkey->type == EVP_PKEY_EC) {",
          "2983:             if (!ECDSA_sign(pkey->save_type,",
          "2984:                             &(data[MD5_DIGEST_LENGTH]),",
          "2985:                             SHA_DIGEST_LENGTH, &(p[2]),",
          "2986:                             (unsigned int *)&j, pkey->pkey.ec)) {",
          "2987:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_ECDSA_LIB);",
          "2988:                 goto err;",
          "2989:             }",
          "2990:             s2n(j, p);",
          "2991:             n = j + 2;",
          "2992:         } else",
          "2993: #endif",
          "2994:         if (pkey->type == NID_id_GostR3410_2001) {",
          "2995:             unsigned char signbuf[64];",
          "2996:             int i;",
          "2997:             size_t sigsize = 64;",
          "2998:             s->method->ssl3_enc->cert_verify_mac(s,",
          "2999:                                                  NID_id_GostR3411_94, data);",
          "3000:             if (EVP_PKEY_sign(pctx, signbuf, &sigsize, data, 32) <= 0) {",
          "3001:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3002:                 goto err;",
          "3003:             }",
          "3004:             for (i = 63, j = 0; i >= 0; j++, i--) {",
          "3005:                 p[2 + j] = signbuf[i];",
          "3006:             }",
          "3007:             s2n(j, p);",
          "3008:             n = j + 2;",
          "3009:         } else {",
          "3010:             SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3013:         if (!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE_VERIFY, n)) {",
          "3014:             SSLerr(SSL_F_SSL3_SEND_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3017:         s->state = SSL3_ST_CW_CERT_VRFY_B;",
          "3021:     return ssl_do_write(s);",
          "3025:     s->state = SSL_ST_ERR;",
          "3026:     return (-1);",
          "",
          "[Added Lines]",
          "3031:     p = ssl_handshake_start(s);",
          "3032:     pkey = s->cert->key->privatekey;",
          "3034:     pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "3035:     EVP_PKEY_sign_init(pctx);",
          "3036:     if (EVP_PKEY_CTX_set_signature_md(pctx, EVP_sha1()) > 0) {",
          "3037:         if (!SSL_USE_SIGALGS(s))",
          "3038:             s->method->ssl3_enc->cert_verify_mac(s,",
          "3039:                                                  NID_sha1,",
          "3040:                                                  &(data",
          "3041:                                                    [MD5_DIGEST_LENGTH]));",
          "3042:     } else {",
          "3043:         ERR_clear_error();",
          "3044:     }",
          "3049:     if (SSL_USE_SIGALGS(s)) {",
          "3050:         long hdatalen = 0;",
          "3051:         void *hdata;",
          "3052:         const EVP_MD *md = s->s3->tmp.md[s->cert->key - s->cert->pkeys];",
          "3053:         hdatalen = BIO_get_mem_data(s->s3->handshake_buffer, &hdata);",
          "3054:         if (hdatalen <= 0 || !tls12_get_sigandhash(p, pkey, md)) {",
          "3055:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3056:             goto err;",
          "3058:         p += 2;",
          "3060:         fprintf(stderr, \"Using TLS 1.2 with client alg %s\\n\",",
          "3061:                 EVP_MD_name(md));",
          "3063:         if (!EVP_SignInit_ex(&mctx, md, NULL)",
          "3064:             || !EVP_SignUpdate(&mctx, hdata, hdatalen)",
          "3065:             || !EVP_SignFinal(&mctx, p + 2, &u, pkey)) {",
          "3066:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_EVP_LIB);",
          "3067:             goto err;",
          "3068:         }",
          "3069:         s2n(u, p);",
          "3070:         n = u + 4;",
          "3072:         if (!ssl3_digest_cached_records(s, 0))",
          "3073:             goto err;",
          "3074:     } else",
          "3076:     if (pkey->type == EVP_PKEY_RSA) {",
          "3077:         s->method->ssl3_enc->cert_verify_mac(s, NID_md5, &(data[0]));",
          "3078:         if (RSA_sign(NID_md5_sha1, data,",
          "3079:                      MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH,",
          "3080:                      &(p[2]), &u, pkey->pkey.rsa) <= 0) {",
          "3081:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_RSA_LIB);",
          "3082:             goto err;",
          "3083:         }",
          "3084:         s2n(u, p);",
          "3085:         n = u + 2;",
          "3086:     } else",
          "3089:     if (pkey->type == EVP_PKEY_DSA) {",
          "3090:         if (!DSA_sign(pkey->save_type,",
          "3091:                       &(data[MD5_DIGEST_LENGTH]),",
          "3092:                       SHA_DIGEST_LENGTH, &(p[2]),",
          "3093:                       (unsigned int *)&j, pkey->pkey.dsa)) {",
          "3094:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_DSA_LIB);",
          "3095:             goto err;",
          "3096:         }",
          "3097:         s2n(j, p);",
          "3098:         n = j + 2;",
          "3099:     } else",
          "3102:     if (pkey->type == EVP_PKEY_EC) {",
          "3103:         if (!ECDSA_sign(pkey->save_type,",
          "3104:                         &(data[MD5_DIGEST_LENGTH]),",
          "3105:                         SHA_DIGEST_LENGTH, &(p[2]),",
          "3106:                         (unsigned int *)&j, pkey->pkey.ec)) {",
          "3107:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_ECDSA_LIB);",
          "3110:         s2n(j, p);",
          "3111:         n = j + 2;",
          "3112:     } else",
          "3113: #endif",
          "3114:     if (pkey->type == NID_id_GostR3410_2001) {",
          "3115:         unsigned char signbuf[64];",
          "3116:         int i;",
          "3117:         size_t sigsize = 64;",
          "3118:         s->method->ssl3_enc->cert_verify_mac(s,",
          "3119:                                              NID_id_GostR3411_94, data);",
          "3120:         if (EVP_PKEY_sign(pctx, signbuf, &sigsize, data, 32) <= 0) {",
          "3121:             SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3124:         for (i = 63, j = 0; i >= 0; j++, i--) {",
          "3125:             p[2 + j] = signbuf[i];",
          "3126:         }",
          "3127:         s2n(j, p);",
          "3128:         n = j + 2;",
          "3129:     } else {",
          "3130:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3131:         goto err;",
          "3132:     }",
          "3133:     if (!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE_VERIFY, n)) {",
          "3134:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "3135:         goto err;",
          "3140:     return 1;",
          "3144:     return 0;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3069:     return 1;",
          "3070: }",
          "3072: int ssl3_send_client_certificate(SSL *s)",
          "3073: {",
          "3074:     X509 *x509 = NULL;",
          "3075:     EVP_PKEY *pkey = NULL;",
          "3076:     int i;",
          "3080:         if (s->cert->cert_cb) {",
          "3081:             i = s->cert->cert_cb(s, s->cert->cert_cb_arg);",
          "3082:             if (i < 0) {",
          "3083:                 s->rwstate = SSL_X509_LOOKUP;",
          "3085:             }",
          "3086:             if (i == 0) {",
          "3087:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3089:                 return 0;",
          "3090:             }",
          "3091:             s->rwstate = SSL_NOTHING;",
          "3092:         }",
          "3093:         if (ssl3_check_client_certificate(s))",
          "3097:     }",
          "",
          "[Removed Lines]",
          "3078:     if (s->state == SSL3_ST_CW_CERT_A) {",
          "3084:                 return -1;",
          "3088:                 s->state = SSL_ST_ERR;",
          "3094:             s->state = SSL3_ST_CW_CERT_C;",
          "3095:         else",
          "3096:             s->state = SSL3_ST_CW_CERT_B;",
          "3100:     if (s->state == SSL3_ST_CW_CERT_B) {",
          "",
          "[Added Lines]",
          "3192: {",
          "3193:     enum WORK_STATE wst;",
          "3195:     if (s->state == SSL3_ST_CW_CERT_A || s->state == SSL3_ST_CW_CERT_B) {",
          "3196:         if (s->state == SSL3_ST_CW_CERT_A)",
          "3197:             wst = tls_prepare_client_certificate(s, WORK_MORE_A);",
          "3198:         else",
          "3199:             wst = tls_prepare_client_certificate(s, WORK_MORE_B);",
          "3200:         if (wst == WORK_ERROR)",
          "3201:             goto err;",
          "3202:         if (wst == WORK_MORE_A)",
          "3203:             return -1;",
          "3204:         if (wst == WORK_MORE_B) {",
          "3205:             s->state = SSL3_ST_CW_CERT_B;",
          "3206:             return -1;",
          "3207:         }",
          "3209:         s->state = SSL3_ST_CW_CERT_C;",
          "3210:     }",
          "3212:     if (s->state == SSL3_ST_CW_CERT_B) {",
          "3213:         wst = tls_prepare_client_certificate(s, WORK_MORE_B);",
          "3214:         if (wst == WORK_ERROR)",
          "3215:             goto err;",
          "3216:         if (wst == WORK_MORE_A)",
          "3217:             return -1;",
          "3220:         s->state = SSL3_ST_CW_CERT_D;",
          "3221:     }",
          "3223:     if (tls_construct_client_certificate(s) == 0)",
          "3224:         goto err;",
          "3226:     return ssl_do_write(s);",
          "3227:  err:",
          "3228:     s->state = SSL_ST_ERR;",
          "3229:     return -1;",
          "3231: }",
          "3233: enum WORK_STATE tls_prepare_client_certificate(SSL *s, enum WORK_STATE wst)",
          "3239:     if (wst == WORK_MORE_A) {",
          "3245:                 return WORK_MORE_A;",
          "3249:                 statem_set_error(s);",
          "3255:             return WORK_FINISHED_CONTINUE;",
          "3258:         wst = WORK_MORE_B;",
          "3262:     if (wst == WORK_MORE_B) {",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3105:         i = ssl_do_client_cert_cb(s, &x509, &pkey);",
          "3106:         if (i < 0) {",
          "3107:             s->rwstate = SSL_X509_LOOKUP;",
          "3109:         }",
          "3110:         s->rwstate = SSL_NOTHING;",
          "3111:         if ((i == 1) && (pkey != NULL) && (x509 != NULL)) {",
          "3113:             if (!SSL_use_certificate(s, x509) || !SSL_use_PrivateKey(s, pkey))",
          "3114:                 i = 0;",
          "3115:         } else if (i == 1) {",
          "3116:             i = 0;",
          "3118:                    SSL_R_BAD_DATA_RETURNED_BY_CALLBACK);",
          "3119:         }",
          "",
          "[Removed Lines]",
          "3108:             return (-1);",
          "3112:             s->state = SSL3_ST_CW_CERT_B;",
          "3117:             SSLerr(SSL_F_SSL3_SEND_CLIENT_CERTIFICATE,",
          "",
          "[Added Lines]",
          "3270:             return WORK_MORE_B;",
          "3278:             SSLerr(SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE,",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3126:             if (s->version == SSL3_VERSION) {",
          "3127:                 s->s3->tmp.cert_req = 0;",
          "3128:                 ssl3_send_alert(s, SSL3_AL_WARNING, SSL_AD_NO_CERTIFICATE);",
          "3130:             } else {",
          "3131:                 s->s3->tmp.cert_req = 2;",
          "3132:                 if (!ssl3_digest_cached_records(s, 0)) {",
          "3133:                     ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3135:                     return 0;",
          "3136:                 }",
          "3137:             }",
          "3138:         }",
          "3142:     }",
          "3154:     }",
          "3157: }",
          "3159: #define has_bits(i,m)   (((i)&(m)) == (m))",
          "",
          "[Removed Lines]",
          "3129:                 return (1);",
          "3134:                     s->state = SSL_ST_ERR;",
          "3141:         s->state = SSL3_ST_CW_CERT_C;",
          "3144:     if (s->state == SSL3_ST_CW_CERT_C) {",
          "3145:         s->state = SSL3_ST_CW_CERT_D;",
          "3146:         if (!ssl3_output_cert_chain(s,",
          "3147:                                     (s->s3->tmp.cert_req ==",
          "3148:                                      2) ? NULL : s->cert->key)) {",
          "3149:             SSLerr(SSL_F_SSL3_SEND_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3150:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3151:             s->state = SSL_ST_ERR;",
          "3152:             return 0;",
          "3153:         }",
          "3156:     return ssl_do_write(s);",
          "",
          "[Added Lines]",
          "3290:                 return WORK_FINISHED_CONTINUE;",
          "3295:                     statem_set_error(s);",
          "3301:         return WORK_FINISHED_CONTINUE;",
          "3305:     return WORK_ERROR;",
          "3306: }",
          "3308: int tls_construct_client_certificate(SSL *s)",
          "3309: {",
          "3310:     if (!ssl3_output_cert_chain(s,",
          "3311:                                 (s->s3->tmp.cert_req ==",
          "3312:                                  2) ? NULL : s->cert->key)) {",
          "3313:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "3314:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3315:         statem_set_error(s);",
          "3316:         return 0;",
          "3319:     return 1;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3359: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "3360: int ssl3_send_next_proto(SSL *s)",
          "3361: {",
          "3365:     if (s->state == SSL3_ST_CW_NEXT_PROTO_A) {",
          "3375:         s->state = SSL3_ST_CW_NEXT_PROTO_B;",
          "3378:     }",
          "3380:     return ssl3_do_write(s, SSL3_RT_HANDSHAKE);",
          "3381: }",
          "3382: #endif",
          "3384: int ssl_do_client_cert_cb(SSL *s, X509 **px509, EVP_PKEY **ppkey)",
          "",
          "[Removed Lines]",
          "3362:     unsigned int len, padding_len;",
          "3363:     unsigned char *d;",
          "3366:         len = s->next_proto_negotiated_len;",
          "3367:         padding_len = 32 - ((len + 2) % 32);",
          "3368:         d = (unsigned char *)s->init_buf->data;",
          "3369:         d[4] = len;",
          "3370:         memcpy(d + 5, s->next_proto_negotiated, len);",
          "3371:         d[5 + len] = padding_len;",
          "3372:         memset(d + 6 + len, 0, padding_len);",
          "3374:         l2n3(2 + len + padding_len, d);",
          "3376:         s->init_num = 4 + 2 + len + padding_len;",
          "3377:         s->init_off = 0;",
          "",
          "[Added Lines]",
          "3526:         if (tls_construct_next_proto(s) == 0) {",
          "3527:             s->state = SSL_ST_ERR;",
          "3528:             return -1;",
          "3529:         }",
          "3536: int tls_construct_next_proto(SSL *s)",
          "3537: {",
          "3538:     unsigned int len, padding_len;",
          "3539:     unsigned char *d;",
          "3541:     len = s->next_proto_negotiated_len;",
          "3542:     padding_len = 32 - ((len + 2) % 32);",
          "3543:     d = (unsigned char *)s->init_buf->data;",
          "3544:     d[4] = len;",
          "3545:     memcpy(d + 5, s->next_proto_negotiated, len);",
          "3546:     d[5 + len] = padding_len;",
          "3547:     memset(d + 6 + len, 0, padding_len);",
          "3549:     l2n3(2 + len + padding_len, d);",
          "3550:     s->init_num = 4 + 2 + len + padding_len;",
          "3551:     s->init_off = 0;",
          "3553:     return 1;",
          "3554: }",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:     {ERR_FUNC(SSL_F_TLS1_PROCESS_HEARTBEAT), \"tls1_process_heartbeat\"},",
          "334:     {ERR_FUNC(SSL_F_TLS1_SETUP_KEY_BLOCK), \"tls1_setup_key_block\"},",
          "335:     {ERR_FUNC(SSL_F_TLS1_SET_SERVER_SIGALGS), \"tls1_set_server_sigalgs\"},",
          "336:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_BODY), \"tls_get_message_body\"},",
          "337:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_HEADER), \"tls_get_message_header\"},",
          "338:     {ERR_FUNC(SSL_F_USE_CERTIFICATE_CHAIN_FILE), \"use_certificate_chain_file\"},",
          "339:     {0, NULL}",
          "340: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:     {ERR_FUNC(SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK),",
          "337:      \"tls_client_key_exchange_post_work\"},",
          "338:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE),",
          "339:      \"tls_construct_client_certificate\"},",
          "340:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO), \"tls_construct_client_hello\"},",
          "341:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE),",
          "342:      \"tls_construct_client_key_exchange\"},",
          "343:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY),",
          "344:      \"tls_construct_client_verify\"},",
          "345:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_FINISHED), \"tls_construct_finished\"},",
          "348:     {ERR_FUNC(SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE),",
          "349:      \"tls_prepare_client_certificate\"},",
          "350:     {ERR_FUNC(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST),",
          "351:      \"tls_process_certificate_request\"},",
          "352:     {ERR_FUNC(SSL_F_TLS_PROCESS_CERT_STATUS), \"tls_process_cert_status\"},",
          "353:     {ERR_FUNC(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC),",
          "354:      \"tls_process_change_cipher_spec\"},",
          "355:     {ERR_FUNC(SSL_F_TLS_PROCESS_FINISHED), \"tls_process_finished\"},",
          "356:     {ERR_FUNC(SSL_F_TLS_PROCESS_KEY_EXCHANGE), \"tls_process_key_exchange\"},",
          "357:     {ERR_FUNC(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET),",
          "358:      \"tls_process_new_session_ticket\"},",
          "359:     {ERR_FUNC(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE),",
          "360:      \"tls_process_server_certificate\"},",
          "361:     {ERR_FUNC(SSL_F_TLS_PROCESS_SERVER_DONE), \"tls_process_server_done\"},",
          "362:     {ERR_FUNC(SSL_F_TLS_PROCESS_SERVER_HELLO), \"tls_process_server_hello\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2053: __owur int ssl3_send_cert_status(SSL *s);",
          "2054: __owur int ssl3_get_change_cipher_spec(SSL *s, int a, int b);",
          "2055: __owur int ssl3_get_finished(SSL *s, int state_a, int state_b);",
          "2056: __owur int ssl3_setup_key_block(SSL *s);",
          "2057: __owur int ssl3_send_change_cipher_spec(SSL *s, int state_a, int state_b);",
          "2058: __owur int ssl3_change_cipher_state(SSL *s, int which);",
          "2059: void ssl3_cleanup_key_block(SSL *s);",
          "2060: __owur int ssl3_do_write(SSL *s, int type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2056: __owur int tls_construct_cert_status(SSL *s);",
          "2057: __owur enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n);",
          "2058: __owur enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n);",
          "2061: __owur int tls_construct_change_cipher_spec(SSL *s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2066: __owur int tls_get_message_header(SSL *s, int *mt);",
          "2067: __owur int tls_get_message_body(SSL *s, unsigned long *len);",
          "2068: __owur int ssl3_send_finished(SSL *s, int a, int b, const char *sender, int slen);",
          "2069: __owur int ssl3_num_ciphers(void);",
          "2070: __owur const SSL_CIPHER *ssl3_get_cipher(unsigned int u);",
          "2071: int ssl3_renegotiate(SSL *ssl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2073: __owur int tls_construct_finished(SSL *s, const char *sender, int slen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2147: __owur int ssl3_client_hello(SSL *s);",
          "2148: __owur int ssl3_get_server_hello(SSL *s);",
          "2149: __owur int ssl3_get_certificate_request(SSL *s);",
          "2150: __owur int ssl3_get_new_session_ticket(SSL *s);",
          "2151: __owur int ssl3_get_cert_status(SSL *s);",
          "2152: __owur int ssl3_get_server_done(SSL *s);",
          "2153: __owur int ssl3_send_client_verify(SSL *s);",
          "2155: __owur int ssl_do_client_cert_cb(SSL *s, X509 **px509, EVP_PKEY **ppkey);",
          "2156: __owur int ssl3_send_client_key_exchange(SSL *s);",
          "2157: __owur int ssl3_get_key_exchange(SSL *s);",
          "2158: __owur int ssl3_get_server_certificate(SSL *s);",
          "2159: __owur int ssl3_check_cert_and_algorithm(SSL *s);",
          "2160: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2161: __owur int ssl3_send_next_proto(SSL *s);",
          "2162: #  endif",
          "2164: int dtls1_client_hello(SSL *s);",
          "",
          "[Removed Lines]",
          "2154: __owur int ssl3_send_client_certificate(SSL *s);",
          "",
          "[Added Lines]",
          "2153: __owur int tls_construct_client_hello(SSL *s);",
          "2159: __owur enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s,",
          "2160:                                                         unsigned long n);",
          "2161: __owur enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s,",
          "2162:                                                                unsigned long n);",
          "2163: __owur enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s,",
          "2164:                                                               unsigned long n);",
          "2165: __owur enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n);",
          "2166: __owur enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n);",
          "2168: __owur int tls_construct_client_verify(SSL *s);",
          "2169: __owur int tls_construct_client_verify(SSL *s);",
          "2170: int ssl3_send_client_certificate(SSL *s);",
          "2171: __owur enum WORK_STATE tls_prepare_client_certificate(SSL *s,",
          "2172:                                                       enum WORK_STATE wst);",
          "2173: __owur int tls_construct_client_certificate(SSL *s);",
          "2176: __owur int tls_construct_client_key_exchange(SSL *s);",
          "2177: __owur int tls_client_key_exchange_post_work(SSL *s);",
          "2180: __owur enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s,",
          "2181:                                                         unsigned long n);",
          "2182: __owur enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s,",
          "2183:                                                               unsigned long n);",
          "2187: __owur int tls_construct_next_proto(SSL *s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2167: __owur int ssl3_get_client_hello(SSL *s);",
          "2168: __owur int ssl3_send_server_hello(SSL *s);",
          "2169: __owur int ssl3_send_hello_request(SSL *s);",
          "2170: __owur int ssl3_send_server_key_exchange(SSL *s);",
          "2171: __owur int ssl3_send_certificate_request(SSL *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2195: __owur enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n);",
          "2196: __owur enum WORK_STATE tls_post_process_client_hello(SSL *s,",
          "2197:                                                      enum WORK_STATE wst);",
          "2198: __owur int tls_construct_server_hello(SSL *s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2173: __owur int ssl3_get_client_certificate(SSL *s);",
          "2174: __owur int ssl3_get_client_key_exchange(SSL *s);",
          "2175: __owur int ssl3_get_cert_verify(SSL *s);",
          "2176: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2177: __owur int ssl3_get_next_proto(SSL *s);",
          "2178: #  endif",
          "2180: __owur int tls1_new(SSL *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2206: __owur enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n);",
          "2207: __owur enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n);",
          "2208: __owur enum WORK_STATE tls_post_process_client_key_exchange(SSL *s,",
          "2209:     enum WORK_STATE wst);",
          "2210: __owur enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n);",
          "2213: __owur enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n);",
          "",
          "---------------"
        ]
      }
    }
  ]
}