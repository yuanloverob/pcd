{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
      "candidate_info": {
        "commit_hash": "8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a53ce2ff8a1e7e3fe867662568e13680cbb0e5e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Basic UPDATE functionality working for VIRTUAL tables.\n\nFossilOrigin-Name: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         }else if( pPk && (pTab->aCol[j].colFlags & COLFLAG_PRIMKEY)!=0 ){",
          "309:           chngPk = 1;",
          "310:         }",
          "311:         aXRef[j] = i;",
          "312:         break;",
          "313:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "312:         else if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "313:           sqlite3ErrorMsg(pParse,",
          "314:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "315:              pTab->aCol[j].zName);",
          "316:           goto update_cleanup;",
          "317:         }",
          "318: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:     oldmask |= sqlite3TriggerColmask(pParse,",
          "624:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "625:     );",
          "627:       if( oldmask==0xffffffff",
          "628:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "630:       ){",
          "631:         testcase(  oldmask!=0xffffffff && i==31 );",
          "633:       }else{",
          "635:       }",
          "636:     }",
          "637:     if( chngRowid==0 && pPk==0 ){",
          "",
          "[Removed Lines]",
          "626:     for(i=0; i<pTab->nCol; i++){",
          "629:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "634:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "",
          "[Added Lines]",
          "634:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "635:       u32 colFlags = pTab->aCol[i].colFlags;",
          "636:       if( colFlags & COLFLAG_VIRTUAL ){",
          "637:         k--;",
          "638:         continue;",
          "639:       }",
          "642:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "645:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "647:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655:   newmask = sqlite3TriggerColmask(",
          "656:       pParse, pTrigger, pChanges, 1, TRIGGER_BEFORE, pTab, onError",
          "657:   );",
          "659:     if( i==pTab->iPKey ){",
          "661:     }else{",
          "662:       j = aXRef[i];",
          "663:       if( j>=0 ){",
          "665:       }else if( 0==(tmask&TRIGGER_BEFORE) || i>31 || (newmask & MASKBIT32(i)) ){",
          "",
          "[Removed Lines]",
          "658:   for(i=0; i<pTab->nCol; i++){",
          "660:       sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "664:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, regNew+i);",
          "",
          "[Added Lines]",
          "671:   for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "673:       sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "675:       k--;",
          "679:         sqlite3ExprCode(pParse, pChanges->a[j].pExpr, k);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671:         testcase( i==31 );",
          "672:         testcase( i==32 );",
          "674:       }else{",
          "676:       }",
          "677:     }",
          "678:   }",
          "",
          "[Removed Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "675:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "",
          "[Added Lines]",
          "688:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "690:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "714:       }",
          "715:     }",
          "716:   }",
          "",
          "[Removed Lines]",
          "711:     for(i=0; i<pTab->nCol; i++){",
          "712:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "726:     for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "727:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "728:         k--;",
          "729:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "730:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
      "candidate_info": {
        "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/sqliteInt.h",
          "test/altertab3.test"
        ],
        "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:   Parse *pParse = pWalker->pParse;",
          "761:   int i;",
          "762:   if( pParse->nErr ) return WRC_Abort;",
          "763:   if( ALWAYS(p->pEList) ){",
          "764:     ExprList *pList = p->pEList;",
          "765:     for(i=0; i<pList->nExpr; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
          "854:   renameWalkWith(pWalker, p);",
          "855:   return WRC_Continue;",
          "856: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1316:   if( sParse.pNewTable ){",
          "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
          "1318:     if( pSelect ){",
          "1319:       sParse.rc = SQLITE_OK;",
          "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
          "1322:       if( rc==SQLITE_OK ){",
          "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
          "",
          "[Removed Lines]",
          "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
          "",
          "[Added Lines]",
          "1321:       pSelect->selFlags &= ~SF_View;",
          "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1434:   int i;",
          "1435:   RenameCtx *p = pWalker->u.pRename;",
          "1436:   SrcList *pSrc = pSelect->pSrc;",
          "1437:   if( pSrc==0 ){",
          "1438:     assert( pWalker->pParse->db->mallocFailed );",
          "1439:     return WRC_Abort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1514:         if( pTab->pSelect ){",
          "1515:           if( isLegacy==0 ){",
          "1516:             NameContext sNC;",
          "1517:             memset(&sNC, 0, sizeof(sNC));",
          "1518:             sNC.pParse = &sParse;",
          "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
          "1521:             if( sParse.nErr ) rc = sParse.rc;",
          "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1520:             Select *pSelect = pTab->pSelect;",
          "1525:             assert( pSelect->selFlags & SF_View );",
          "1526:             pSelect->selFlags &= ~SF_View;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2488:   if( IN_RENAME_OBJECT ){",
          "2489:     p->pSelect = pSelect;",
          "2490:     pSelect = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2488:   pSelect->selFlags |= SF_View;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:   ALTER TABLE a RENAME a TO b;",
          "488: }",
          "491: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490: #------------------------------------------------------------------------",
          "491: #",
          "492: reset_db",
          "493: do_execsql_test 22.1 {",
          "494:   CREATE TABLE t1(a);",
          "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
          "496: }",
          "498: do_catchsql_test 22.2 {",
          "499:   ALTER TABLE t1 RENAME TO t4;",
          "500: } {1 {error in view v2: view v2 is circularly defined}}",
          "502: do_execsql_test 22.3 {",
          "503:   DROP VIEW v2;",
          "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
          "505: }",
          "507: breakpoint",
          "508: do_catchsql_test 22.4 {",
          "509:   ALTER TABLE t1 RENAME TO t4;",
          "510: } {1 {error in view v2: view v2 is circularly defined}}",
          "512: do_execsql_test 22.5 {",
          "513:   DROP VIEW v2;",
          "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
          "515: }",
          "517: do_catchsql_test 22.6 {",
          "518:   ALTER TABLE t1 RENAME TO t4;",
          "519: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "993b48e2b7990d615616843224dd994fd4866d99",
      "candidate_info": {
        "commit_hash": "993b48e2b7990d615616843224dd994fd4866d99",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/993b48e2b7990d615616843224dd994fd4866d99",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Call ioctl() with the correct signature on both Android and stock Linux.\n\nFossilOrigin-Name: 2422534908a85a4cd11784e4c23a74ad121404f73dade587bf27efde1e2b982b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 52f463d29407fad691c42b13462880e7605603c9be9f480d18e953a0ef78149a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521: #if defined(__linux__) && defined(SQLITE_ENABLE_BATCH_ATOMIC_WRITE)",
          "522: # ifdef __ANDROID__",
          "523:   { \"ioctl\", (sqlite3_syscall_ptr)(int(*)(int, int, ...))ioctl, 0 },",
          "524: # else",
          "525:   { \"ioctl\",         (sqlite3_syscall_ptr)ioctl,          0 },",
          "526: # endif",
          "527: #else",
          "528:   { \"ioctl\",         (sqlite3_syscall_ptr)0,              0 },",
          "529: #endif",
          "",
          "[Removed Lines]",
          "530: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "",
          "[Added Lines]",
          "524: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "527: #define osIoctl ((int(*)(int,unsigned long,...))aSyscall[28].pCurrent)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "232f278084b4cf54f21882248dcd961fc84c22d7",
      "candidate_info": {
        "commit_hash": "232f278084b4cf54f21882248dcd961fc84c22d7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/232f278084b4cf54f21882248dcd961fc84c22d7",
        "files": [
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the geopoly_svg() function so that it returns NULL when given zero arguments.\n\nFossilOrigin-Name: 120cb1768338eb86412fb69d4c7677247775bb37875ab3a98766cffd535f04cf",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:   int argc,",
          "396:   sqlite3_value **argv",
          "397: ){",
          "399:   if( p ){",
          "400:     sqlite3 *db = sqlite3_context_db_handle(context);",
          "401:     sqlite3_str *x = sqlite3_str_new(db);",
          "",
          "[Removed Lines]",
          "398:   GeoPoly *p = geopolyFuncParam(context, argv[0], 0);",
          "",
          "[Added Lines]",
          "398:   GeoPoly *p;",
          "399:   if( argc<1 ) return;",
          "400:   p = geopolyFuncParam(context, argv[0], 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 703029ac6d24860230a8c30fcbf5e7e1da619e84f1cc9b9e65ebc74879a184d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db5ed35609338f6960975433ed16cb86dfd4fc0f",
      "candidate_info": {
        "commit_hash": "db5ed35609338f6960975433ed16cb86dfd4fc0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db5ed35609338f6960975433ed16cb86dfd4fc0f",
        "files": [
          "ext/fts5/fts5_config.c",
          "ext/fts5/test/fts5eb.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a buffer overread in fts5 that could occur when parsing corrupt configuration records.\n\nFossilOrigin-Name: 355afd77df21a2265871ca6d075f26b1fa121c7c2682cf512281944ff0c2186d",
        "before_after_code_files": [
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/test/fts5eb.test||ext/fts5/test/fts5eb.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   assert( q=='[' || q=='\\'' || q=='\"' || q=='`' );",
          "151:   if( q=='[' ) q = ']';",
          "154:     if( z[iIn]==q ){",
          "155:       if( z[iIn+1]!=q ){",
          "",
          "[Removed Lines]",
          "153:   while( ALWAYS(z[iIn]) ){",
          "",
          "[Added Lines]",
          "153:   while( z[iIn] ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5eb.test||ext/fts5/test/fts5eb.test": [
          "File: ext/fts5/test/fts5eb.test -> ext/fts5/test/fts5eb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   SELECT fts5_expr(NULL, NULL)",
          "76: } {1 {parse error in \"\"}}",
          "79: do_execsql_test 3.0 {",
          "80:   CREATE VIRTUAL TABLE e1 USING fts5(text, tokenize = 'porter unicode61');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: for {set i 0} {$i < 255} {incr i} {",
          "79:   do_test 2.6.$i {",
          "80:     lindex [catchsql {sELECT fts5_expr(NULL, char($i));}] 0",
          "81:   } 1",
          "82: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d47d66e3d360d8aa6203a855228d2bc40d9a00d69c15f5066b7632d8fb1ed2cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}