{
  "cve_id": "CVE-2017-9346",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.6 and 2.0.0 to 2.0.12, the SoulSeek dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-slsk.c by making loop bounds more explicit.",
  "repo": "wireshark/wireshark",
  "patch_hash": "7eab596c0824e6fa20aad6932bcd2fdb94b86edf",
  "patch_info": {
    "commit_hash": "7eab596c0824e6fa20aad6932bcd2fdb94b86edf",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/7eab596c0824e6fa20aad6932bcd2fdb94b86edf",
    "files": [
      "epan/dissectors/packet-slsk.c"
    ],
    "message": "slsk: fix infinite loop\n\nIf check_slsk_format reports that the buffer does not contain the\nexpected data, do not try to find more items (break out of the loop).\n\nIn one case, an infinite loop would occur because the index variable was\nnot incremented when the check fails. In all other cases, it would\nperform up to 2^32 calls to check_slsk_format per loop (with the same\noffset parameter, so no exception is triggered).\n\nChange-Id: I4b7fa10a36fee2551fa46831bcecd6bcd9f342d1\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1200\nBug: 13631\nReviewed-on: https://code.wireshark.org/review/21284\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c": [
      "File: epan/dissectors/packet-slsk.c -> epan/dissectors/packet-slsk.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "489:               add_new_data_source(pinfo, uncompr_tvb, \"Uncompressed SoulSeek data\");",
      "490:               uncompr_tvb_offset = 0;",
      "491:               if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"i*\")) {",
      "493:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_directories, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "494:                 uncompr_tvb_offset += 4;",
      "496:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
      "497:                     start_offset = uncompr_tvb_offset;",
      "498:                     subtree = proto_tree_add_subtree_format(slsk_compr_packet_tree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_directory, &ti_subtree, \"Directory #%d\", i+1);",
      "499:                     proto_tree_add_item_ret_length(subtree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "500:                     uncompr_tvb_offset += str_len;",
      "502:                     proto_tree_add_item_ret_uint(subtree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
      "503:                     uncompr_tvb_offset += 4;",
      "505:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
      "506:                         start_offset2 = uncompr_tvb_offset;",
      "507:                         subtree2 = proto_tree_add_subtree_format(subtree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_file, &ti_subtree2, \"File #%d\", i2+1);",
      "",
      "[Removed Lines]",
      "492:                 i=0;",
      "495:                 while (i<j){",
      "501:                     i2=0;",
      "504:                     while (i2<j2){",
      "",
      "[Added Lines]",
      "494:                 for (i = 0; i < j; i++) {",
      "502:                     for (i2 = 0; i2 < j2; i2++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "515:                         uncompr_tvb_offset += 4;",
      "516:                         proto_tree_add_item_ret_length(subtree2, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "517:                         uncompr_tvb_offset += str_len;",
      "519:                         proto_tree_add_item_ret_uint(subtree2, hf_slsk_file_num_attributes, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j3);",
      "520:                         uncompr_tvb_offset += 4;",
      "522:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
      "523:                             subtree3 = proto_tree_add_subtree_format(subtree2, uncompr_tvb, uncompr_tvb_offset, 8, ett_slsk_file_attribute, NULL, \"Attribute #%d\", i3+1);",
      "524:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_type, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
      "525:                             uncompr_tvb_offset += 4;",
      "526:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_value, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
      "527:                             uncompr_tvb_offset += 4;",
      "529:                           }",
      "530:                         }",
      "531:                         proto_item_set_len(ti_subtree2, uncompr_tvb_offset-start_offset2);",
      "532:                       }",
      "534:                     }",
      "535:                     proto_item_set_len(ti_subtree, uncompr_tvb_offset-start_offset);",
      "536:                   }",
      "538:                 }",
      "539:               }",
      "540:             }",
      "",
      "[Removed Lines]",
      "518:                         i3=0;",
      "521:                         while (i3<j3){",
      "528:                             i3++;",
      "533:                       i2++;",
      "537:                   i++;",
      "",
      "[Added Lines]",
      "518:                         for (i3 = 0; i3 < j3; i3++) {",
      "525:                           } else {",
      "530:                       } else {",
      "535:                   } else {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "607:                 uncompr_tvb_offset += str_len;",
      "608:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_token, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
      "609:                 uncompr_tvb_offset += 4;",
      "611:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "612:                 uncompr_tvb_offset += 4;",
      "614:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
      "615:                     start_offset2 = uncompr_tvb_offset;",
      "616:                     subtree2 = proto_tree_add_subtree_format(slsk_compr_packet_tree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_file, &ti_subtree2, \"File #%d\", i+1);",
      "",
      "[Removed Lines]",
      "610:                 i=0;",
      "613:                 while (i<j){",
      "",
      "[Added Lines]",
      "612:                 for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "624:                     uncompr_tvb_offset += 4;",
      "625:                     proto_tree_add_item_ret_length(subtree2, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "626:                     uncompr_tvb_offset += str_len;",
      "628:                     proto_tree_add_item_ret_uint(subtree2, hf_slsk_file_num_attributes, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
      "629:                     uncompr_tvb_offset += 4;",
      "631:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
      "632:                         subtree3 = proto_tree_add_subtree_format(subtree2, uncompr_tvb, uncompr_tvb_offset, 8, ett_slsk_file_attribute, NULL, \"Attribute #%d\", i2+1);",
      "633:                         proto_tree_add_item(subtree3, hf_slsk_file_attribute_type, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
      "634:                         uncompr_tvb_offset += 4;",
      "635:                         proto_tree_add_item(subtree3, hf_slsk_file_attribute_value, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
      "636:                         uncompr_tvb_offset += 4;",
      "637:                       }",
      "639:                     }",
      "640:                     proto_item_set_len(ti_subtree2, uncompr_tvb_offset-start_offset2);",
      "641:                   }",
      "643:                 }",
      "645:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_free_upload_slots, uncompr_tvb, uncompr_tvb_offset, 1, ENC_LITTLE_ENDIAN);",
      "",
      "[Removed Lines]",
      "627:                     i2=0;",
      "630:                     while (i2<j2){",
      "638:                       i2++;",
      "642:                   i++;",
      "",
      "[Added Lines]",
      "628:                     for (i2 = 0; i2 < j2; i2++) {",
      "635:                       } else {",
      "640:                   } else {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "700:           offset += 4;",
      "701:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "702:           offset += str_len;",
      "704:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "705:           offset += 4;",
      "706:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "707:             break;",
      "709:             if (check_slsk_format(tvb, offset, \"s*\")) {",
      "710:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "711:               offset += str_len;",
      "712:             }",
      "714:           }",
      "715:           if (check_slsk_format(tvb, offset, \"i*\")) {",
      "717:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "718:             offset += 4;",
      "719:             if (j > tvb_reported_length_remaining(tvb, offset))",
      "720:               break;",
      "722:               if (check_slsk_format(tvb, offset, \"i*\")) {",
      "723:                 proto_tree_add_item(slsk_tree, hf_slsk_status_code, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "724:                 offset += 4;",
      "725:               }",
      "727:             }",
      "728:           }",
      "729:           if (check_slsk_format(tvb, offset, \"i*\")) {",
      "731:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "732:             offset += 4;",
      "733:             if (j > tvb_reported_length_remaining(tvb, offset))",
      "734:               break;",
      "736:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
      "737:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 20, ett_slsk_user, NULL, \"User #%d\", i+1);",
      "738:                 proto_tree_add_item(subtree, hf_slsk_average_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "",
      "[Removed Lines]",
      "703:           i=0;",
      "708:           while (i<j){",
      "713:             i++;",
      "716:             i=0;",
      "721:             while (i<j){",
      "726:               i++;",
      "730:             i=0;",
      "735:             while (i<j){",
      "",
      "[Added Lines]",
      "707:           for (i = 0; i < j; i++) {",
      "711:             } else {",
      "720:             for (i = 0; i < j; i++) {",
      "724:               } else {",
      "734:             for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "745:                 offset += 4;",
      "746:                 proto_tree_add_item(subtree, hf_slsk_directories, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "747:                 offset += 4;",
      "748:               }",
      "750:             }",
      "751:           }",
      "752:           if (check_slsk_format(tvb, offset, \"i*\")) {",
      "754:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_slotsfull_records, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "755:             offset += 4;",
      "756:             if (j > tvb_reported_length_remaining(tvb, offset))",
      "757:               break;",
      "759:               if (check_slsk_format(tvb, offset, \"i*\")) {",
      "760:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_user, NULL, \"User #%d\", i+1);",
      "761:                 proto_tree_add_item(subtree, hf_slsk_slotsfull, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "762:                 offset += 4;",
      "763:               }",
      "765:             }",
      "766:           }",
      "767:         }",
      "",
      "[Removed Lines]",
      "749:               i++;",
      "753:             i=0;",
      "758:             while (i<j){",
      "764:               i++;",
      "",
      "[Added Lines]",
      "747:               } else {",
      "757:             for (i = 0; i < j; i++) {",
      "762:               } else {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1063:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &len);",
      "1064:                 uncompr_tvb_offset += 4+len;",
      "1067:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_directories, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1068:                 uncompr_tvb_offset += 4;",
      "1070:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
      "1071:                     start_offset = uncompr_tvb_offset;",
      "1072:                     subtree = proto_tree_add_subtree_format(slsk_compr_packet_tree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_directory, &ti_subtree, \"Directory #%d\", i+1);",
      "1073:                     proto_tree_add_item_ret_length(subtree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1074:                     uncompr_tvb_offset += str_len;",
      "1076:                     proto_tree_add_item_ret_uint(subtree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
      "1077:                     uncompr_tvb_offset += 4;",
      "1079:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
      "1080:                         start_offset2 = uncompr_tvb_offset;",
      "1081:                         subtree2 = proto_tree_add_subtree_format(subtree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_file, &ti_subtree2, \"File #%d\", i2+1);",
      "",
      "[Removed Lines]",
      "1066:                 i=0;",
      "1069:                 while (i<j){",
      "1075:                     i2 = 0;",
      "1078:                     while (i2<j2){",
      "",
      "[Added Lines]",
      "1068:                 for (i = 0; i < j; i++) {",
      "1076:                     for (i2 = 0; i2 < j2; i2++) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1089:                         uncompr_tvb_offset += 4;",
      "1090:                         proto_tree_add_item_ret_length(subtree2, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1091:                         uncompr_tvb_offset += str_len;",
      "1093:                         proto_tree_add_item_ret_uint(subtree2, hf_slsk_file_num_attributes, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j3);",
      "1094:                         uncompr_tvb_offset += 4;",
      "1096:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
      "1097:                             subtree3 = proto_tree_add_subtree_format(subtree2, uncompr_tvb, uncompr_tvb_offset, 8, ett_slsk_file_attribute, NULL, \"Attribute #%d\", i3+1);",
      "1098:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_type, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
      "1099:                             uncompr_tvb_offset += 4;",
      "1100:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_value, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
      "1101:                             uncompr_tvb_offset += 4;",
      "1103:                           }",
      "1104:                         }",
      "1105:                         proto_item_set_len(ti_subtree2, uncompr_tvb_offset-start_offset2);",
      "1106:                       }",
      "1108:                     }",
      "1109:                     proto_item_set_len(ti_subtree, uncompr_tvb_offset-start_offset);",
      "1110:                   }",
      "1112:                 }",
      "1113:               }",
      "1114:             }",
      "",
      "[Removed Lines]",
      "1092:                         i3=0;",
      "1095:                         while (i3<j3){",
      "1102:                             i3++;",
      "1107:                       i2++;",
      "1111:                   i++;",
      "",
      "[Added Lines]",
      "1092:                         for (i3 = 0; i3 < j3; i3++) {",
      "1099:                           } else {",
      "1104:                       } else {",
      "1109:                   } else {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1291:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
      "1292:                      \"Get Recommendations Reply (Code: %02d)\", msg_code);",
      "1293:           offset += 4;",
      "1295:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1296:           offset += 4;",
      "1297:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1298:             break;",
      "1300:             if (check_slsk_format(tvb, offset, \"si*\")) {",
      "1301:               start_offset = offset;",
      "1302:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
      "",
      "[Removed Lines]",
      "1294:           i=0;",
      "1299:           while (i<j){",
      "",
      "[Added Lines]",
      "1298:           for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1305:               proto_tree_add_item(subtree, hf_slsk_ranking, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1306:               offset += 4;",
      "1307:               proto_item_set_len(ti_subtree, offset-start_offset);",
      "1308:             }",
      "1310:           }",
      "1311:         }",
      "1312:       break;",
      "",
      "[Removed Lines]",
      "1309:             i++;",
      "",
      "[Added Lines]",
      "1307:             } else {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1332:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
      "1333:                      \"Get Global Rankings Reply (Code: %02d)\", msg_code);",
      "1334:           offset += 4;",
      "1336:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1337:           offset += 4;",
      "1338:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1339:             break;",
      "1341:             if (check_slsk_format(tvb, offset, \"si*\")) {",
      "1342:               start_offset = offset;",
      "1343:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
      "",
      "[Removed Lines]",
      "1335:           i=0;",
      "1340:           while (i<j){",
      "",
      "[Added Lines]",
      "1339:           for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1346:               proto_tree_add_item(subtree, hf_slsk_ranking, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1347:               offset += 4;",
      "1348:               proto_item_set_len(ti_subtree, offset-start_offset);",
      "1349:             }",
      "1351:           }",
      "1352:         }",
      "1353:       break;",
      "",
      "[Removed Lines]",
      "1350:             i++;",
      "",
      "[Added Lines]",
      "1348:             } else {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1368:           offset += 4;",
      "1369:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1370:           offset += str_len;",
      "1372:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1373:           offset += 4;",
      "1374:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1375:             break;",
      "1377:             if (check_slsk_format(tvb, offset, \"s*\")) {",
      "1378:               start_offset = offset;",
      "1379:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
      "1380:               proto_tree_add_item_ret_length(subtree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1381:               offset += str_len;",
      "1382:               proto_item_set_len(ti_subtree, offset-start_offset);",
      "1383:             }",
      "1385:           }",
      "1386:         }",
      "1387:       break;",
      "",
      "[Removed Lines]",
      "1371:           i=0;",
      "1376:           while (i<j){",
      "1384:             i++;",
      "",
      "[Added Lines]",
      "1375:           for (i = 0; i < j; i++) {",
      "1382:             } else {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1394:           offset += 4;",
      "1395:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_string, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1396:           offset += str_len;",
      "1398:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_strings, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1399:           offset += 4;",
      "1400:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1401:             break;",
      "1403:             if (check_slsk_format(tvb, offset, \"s*\")) {",
      "1404:               start_offset = offset;",
      "1405:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_string, &ti_subtree, \"String #%d\", i+1);",
      "1406:               proto_tree_add_item_ret_length(subtree, hf_slsk_string, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1407:               offset += str_len;",
      "1408:               proto_item_set_len(ti_subtree, offset-start_offset);",
      "1409:             }",
      "1411:           }",
      "1412:         }",
      "1413:       break;",
      "",
      "[Removed Lines]",
      "1397:           i=0; j = tvb_get_letohl(tvb, offset);",
      "1402:           while (i<j){",
      "1410:             i++;",
      "",
      "[Added Lines]",
      "1401:           for (i = 0; i < j; i++) {",
      "1408:             } else {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1461:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
      "1462:                      \"Room List (Code: %02d)\", msg_code);",
      "1463:           offset += 4;",
      "1465:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_number_of_rooms, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1466:           offset += 4;",
      "1467:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1468:             break;",
      "1470:             if (check_slsk_format(tvb, offset, \"s*\")) {",
      "1471:               start_offset = offset;",
      "1472:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_room, &ti_subtree, \"Room #%d\", i+1);",
      "1473:               proto_tree_add_item_ret_length(subtree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1474:               offset += str_len;",
      "1475:               proto_item_set_len(ti_subtree, offset-start_offset);",
      "1476:             }",
      "1478:           }",
      "1479:           if (check_slsk_format(tvb, offset, \"i*\")) {",
      "1481:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1482:             offset += 4;",
      "1484:               if (check_slsk_format(tvb, offset, \"i*\")) {",
      "1485:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_room, &ti_subtree, \"Room #%d\", i+1);",
      "1486:                 proto_tree_add_item(subtree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1487:                 offset += 4;",
      "1488:               }",
      "1490:             }",
      "1491:           }",
      "1492:         }",
      "",
      "[Removed Lines]",
      "1464:           i=0;",
      "1469:           while (i<j){",
      "1477:             i++;",
      "1480:             i=0;",
      "1483:             while (i<j){",
      "1489:               i++;",
      "",
      "[Added Lines]",
      "1468:           for (i = 0; i < j; i++) {",
      "1475:             } else {",
      "1482:             for (i = 0; i < j; i++) {",
      "1487:               } else {",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1550:           offset += 4;",
      "1551:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1552:           offset += str_len;",
      "1554:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1555:           offset += 4;",
      "1556:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1557:             break;",
      "1559:             if (check_slsk_format(tvb, offset, \"s*\")) {",
      "1560:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1561:               offset += str_len;",
      "1562:             }",
      "1564:           }",
      "1565:           if (check_slsk_format(tvb, offset, \"i*\")) {",
      "1567:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1568:             offset += 4;",
      "1570:               if (check_slsk_format(tvb, offset, \"i*\")) {",
      "1571:                 proto_tree_add_item(slsk_tree, hf_slsk_status_code, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1572:                 offset += 4;",
      "1573:               }",
      "1575:             }",
      "1576:           }",
      "1577:           if (check_slsk_format(tvb, offset, \"i*\")) {",
      "1579:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1580:             offset += 4;",
      "1581:             if (j > tvb_reported_length_remaining(tvb, offset))",
      "1582:               break;",
      "1584:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
      "1585:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 20, ett_slsk_user, NULL, \"User #%d\", i+1);",
      "1586:                 proto_tree_add_item(subtree, hf_slsk_average_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "",
      "[Removed Lines]",
      "1553:           i=0;",
      "1558:           while (i<j){",
      "1563:             i++;",
      "1566:             i=0;",
      "1569:             while (i<j){",
      "1574:               i++;",
      "1578:             i=0;",
      "1583:             while (i<j){",
      "",
      "[Added Lines]",
      "1557:           for (i = 0; i < j; i++) {",
      "1561:             } else {",
      "1568:             for (i = 0; i < j; i++) {",
      "1572:               } else {",
      "1582:             for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1593:                 offset += 4;",
      "1594:                 proto_tree_add_item(subtree, hf_slsk_directories, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1595:                 offset += 4;",
      "1596:               }",
      "1598:             }",
      "1599:           }",
      "1600:           if (check_slsk_format(tvb, offset, \"i*\")) {",
      "1602:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_slotsfull_records, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1603:             offset += 4;",
      "1604:             if (j > tvb_reported_length_remaining(tvb, offset))",
      "1605:               break;",
      "1607:               if (check_slsk_format(tvb, offset, \"i*\")) {",
      "1608:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_user, NULL, \"User #%d\", i+1);",
      "1609:                 proto_tree_add_item(subtree, hf_slsk_slotsfull, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1610:                 offset += 4;",
      "1611:               }",
      "1613:             }",
      "1614:           }",
      "1615:         }",
      "",
      "[Removed Lines]",
      "1597:               i++;",
      "1601:             i=0;",
      "1606:             while (i<j){",
      "1612:               i++;",
      "",
      "[Added Lines]",
      "1595:               } else {",
      "1605:             for (i = 0; i < j; i++) {",
      "1610:               } else {",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1647:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
      "1648:                      \"Privileged User List (Code: %02d)\", msg_code);",
      "1649:           offset += 4;",
      "1651:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_number_of_priv_users, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1652:           offset += 4;",
      "1653:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1654:             break;",
      "1656:             if (check_slsk_format(tvb, offset, \"s*\")) {",
      "1657:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1658:               offset += str_len;",
      "1659:             }",
      "1661:           }",
      "1662:         }",
      "1663:       break;",
      "",
      "[Removed Lines]",
      "1650:           i=0;",
      "1655:           while (i<j){",
      "1660:             i++;",
      "",
      "[Added Lines]",
      "1654:           for (i = 0; i < j; i++) {",
      "1658:             } else {",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1818:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
      "1819:                      \"Random Parent Addresses (Code: %02d)\", msg_code);",
      "1820:           offset += 4;",
      "1822:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_parent_address, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1823:           offset += 4;",
      "1824:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1825:             break;",
      "1827:             if (check_slsk_format(tvb, offset, \"sii*\")) {",
      "1829:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "",
      "[Removed Lines]",
      "1821:           i=0;",
      "1826:           while (i<j){",
      "",
      "[Added Lines]",
      "1825:           for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1832:               offset += 4;",
      "1833:               proto_tree_add_item(slsk_tree, hf_slsk_port, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1834:               offset += 4;",
      "1835:             }",
      "1837:           }",
      "1838:         }",
      "1839:       break;",
      "",
      "[Removed Lines]",
      "1836:             i++;",
      "",
      "[Added Lines]",
      "1834:             } else {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1874:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
      "1875:                      \"Get Similar Users Reply (Code: %02d)\", msg_code);",
      "1876:           offset += 4;",
      "1879:           offset += 4;",
      "1880:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1881:             break;",
      "1883:             if (check_slsk_format(tvb, offset, \"si*\")) {",
      "1884:               start_offset = offset;",
      "1885:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_user, &ti_subtree, \"User #%d\", i+1);",
      "",
      "[Removed Lines]",
      "1877:           i=0; j = tvb_get_letohl(tvb, offset);",
      "1878:           proto_tree_add_item(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1882:           while (i<j){",
      "",
      "[Added Lines]",
      "1877:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1881:           for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1888:               proto_tree_add_item(subtree, hf_slsk_same_recommendation, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1889:               offset += 4;",
      "1890:               proto_item_set_len(ti_subtree, offset-start_offset);",
      "1891:             }",
      "1893:           }",
      "1894:         }",
      "1895:       break;",
      "",
      "[Removed Lines]",
      "1892:             i++;",
      "",
      "[Added Lines]",
      "1890:             } else {",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1910:           offset += 4;",
      "1911:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1912:           offset += str_len;",
      "1914:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1915:           offset += 4;",
      "1916:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1917:             break;",
      "1919:             if (check_slsk_format(tvb, offset, \"si*\")) {",
      "1920:               start_offset = offset;",
      "1921:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
      "",
      "[Removed Lines]",
      "1913:           i=0;",
      "1918:           while (i<j){",
      "",
      "[Added Lines]",
      "1917:           for (i = 0; i < j; i++) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1924:               proto_tree_add_item(subtree, hf_slsk_ranking, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
      "1925:               offset += 4;",
      "1926:               proto_item_set_len(ti_subtree, offset-start_offset);",
      "1927:             }",
      "1929:           }",
      "1930:         }",
      "1931:       break;",
      "",
      "[Removed Lines]",
      "1928:             i++;",
      "",
      "[Added Lines]",
      "1926:             } else {",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1946:           offset += 4;",
      "1947:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1948:           offset += str_len;",
      "1950:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
      "1951:           offset += 4;",
      "1952:           if (j > tvb_reported_length_remaining(tvb, offset))",
      "1953:             break;",
      "1955:             if (check_slsk_format(tvb, offset, \"s*\")) {",
      "1956:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
      "1957:               offset += str_len;",
      "1958:             }",
      "1960:           }",
      "1961:         }",
      "1962:       break;",
      "",
      "[Removed Lines]",
      "1949:           i=0;",
      "1954:           while (i<j){",
      "1959:             i++;",
      "",
      "[Added Lines]",
      "1953:           for (i = 0; i < j; i++) {",
      "1957:             } else {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c0bd15bd46a95c5b7dce02fe23c594429bb6c7e",
      "candidate_info": {
        "commit_hash": "6c0bd15bd46a95c5b7dce02fe23c594429bb6c7e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6c0bd15bd46a95c5b7dce02fe23c594429bb6c7e",
        "files": [
          "epan/dissectors/packet-slsk.c"
        ],
        "message": "slsk: fix infinite loop\n\nIf check_slsk_format reports that the buffer does not contain the\nexpected data, do not try to find more items (break out of the loop).\n\nIn one case, an infinite loop would occur because the index variable was\nnot incremented when the check fails. In all other cases, it would\nperform up to 2^32 calls to check_slsk_format per loop (with the same\noffset parameter, so no exception is triggered).\n\nChange-Id: I4b7fa10a36fee2551fa46831bcecd6bcd9f342d1\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1200\nBug: 13631\nReviewed-on: https://code.wireshark.org/review/21284\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 7eab596c0824e6fa20aad6932bcd2fdb94b86edf)\n [ Conflicts: manually resolved, skipped removal of \"i = 0\" from lines\n   where \"j = tvb_get_letohl(...)\" occurs ]\nReviewed-on: https://code.wireshark.org/review/21296\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 8525318ec4babcd946bd34c68dd2aed4d7089162)\nReviewed-on: https://code.wireshark.org/review/21309\nPetri-Dish: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ],
          "candidate": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c": [
          "File: epan/dissectors/packet-slsk.c -> epan/dissectors/packet-slsk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "493:                   \"Uncompressed SoulSeek data\");",
          "494:               uncompr_tvb_offset = 0;",
          "495:               if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"i*\")) {",
          "497:                 j = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "498:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, j,",
          "499:                   \"Number of directories: %u\", j);",
          "500:                 uncompr_tvb_offset += 4;",
          "502:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
          "503:                     guint32 len;",
          "",
          "[Removed Lines]",
          "496:                 i=0;",
          "501:                 while (i<j){",
          "",
          "[Added Lines]",
          "500:                 for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "511:                       \"Directory #%d Name: %s\", i+1, str);",
          "512:                     uncompr_tvb_offset += 4+len;",
          "514:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "515:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "516:                       uncompr_tvb_offset, 4, j2,",
          "517:                       \"Directory #%d Number of files: %u\", i+1, j2);",
          "518:                     uncompr_tvb_offset += 4;",
          "520:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "521:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb,",
          "522:                           uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "",
          "[Removed Lines]",
          "513:                     i2=0;",
          "519:                     while (i2<j2){",
          "",
          "[Added Lines]",
          "517:                     for (i2 = 0; i2 < j2; i2++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "548:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "549:                           \"Dir #%d File #%d ext: %s\", i+1, i2+1, str);",
          "550:                         uncompr_tvb_offset += 4+len;",
          "552:                         j3 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "553:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "554:                           uncompr_tvb, uncompr_tvb_offset, 4,",
          "555:                           tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "556:                           \"Dir #%d File #%d Number of attributes: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "557:                         uncompr_tvb_offset += 4;",
          "559:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "560:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "561:                               hf_slsk_integer, uncompr_tvb,",
          "",
          "[Removed Lines]",
          "551:                         i3=0;",
          "558:                         while (i3<j3){",
          "",
          "[Added Lines]",
          "555:                         for (i3 = 0; i3 < j3; i3++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "569:                               tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "570:                               \"Dir #%d File #%d Attr #%d value: %d\", i+1, i2+1, i3+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "571:                             uncompr_tvb_offset += 4;",
          "573:                           }",
          "574:                         }",
          "575:                       }",
          "577:                     }",
          "578:                   }",
          "580:                 }",
          "581:               }",
          "582:             }",
          "",
          "[Removed Lines]",
          "572:                             i3++;",
          "576:                       i2++;",
          "579:                   i++;",
          "",
          "[Added Lines]",
          "569:                           } else {",
          "573:                       } else {",
          "577:                   } else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "664:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, j,",
          "665:                   \"Number of files: %d\", j);",
          "666:                 uncompr_tvb_offset += 4;",
          "668:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "669:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb, 0, 0, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "670:                       \"File #%d Code: %d\", i+1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "",
          "[Removed Lines]",
          "667:                 while (i<j){",
          "",
          "[Added Lines]",
          "667:                 for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "693:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "694:                       \"File #%d ext: %s\", i+1, str);",
          "695:                     uncompr_tvb_offset += 4+len;",
          "697:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "698:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "699:                       uncompr_tvb_offset, 4, j,",
          "700:                       \"File #%d Number of attributes: %d\", i+1, j);",
          "701:                     uncompr_tvb_offset += 4;",
          "703:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "704:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "705:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "",
          "[Removed Lines]",
          "696:                     i2=0;",
          "702:                     while (i2<j2){",
          "",
          "[Added Lines]",
          "701:                     for (i2 = 0; i2 < j2; i2++) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "709:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "710:                           \"File #%d Attr #%d value: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "711:                         uncompr_tvb_offset += 4;",
          "712:                       }",
          "714:                     }",
          "715:                   }",
          "717:                 }",
          "718:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb, uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "719:                   \"Free upload slots: %s (Byte: %d)\", val_to_str_const(tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "",
          "[Removed Lines]",
          "713:                       i2++;",
          "716:                   i++;",
          "",
          "[Added Lines]",
          "711:                       } else {",
          "715:                   } else {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "792:           offset += 4;",
          "793:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "794:             break;",
          "796:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "797:               guint32 len;",
          "",
          "[Removed Lines]",
          "795:           while (i<j){",
          "",
          "[Added Lines]",
          "796:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "802:               str = tvb_format_text(tvb, offset+4, len);",
          "803:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str, \"User #%d: %s\", i+1, str);",
          "804:               offset += 4+len;",
          "805:             }",
          "807:           }",
          "808:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "809:             i=0; j = tvb_get_letohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "806:             i++;",
          "",
          "[Added Lines]",
          "806:             } else {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "811:             offset += 4;",
          "812:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "813:               break;",
          "815:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "816:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "817:                   \"Status of User #%d: %s (Code: %d)\", i+1, val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "818:                 offset += 4;",
          "819:               }",
          "821:             }",
          "822:           }",
          "823:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "814:             while (i<j){",
          "820:               i++;",
          "",
          "[Added Lines]",
          "816:             for (i = 0; i < j; i++) {",
          "821:               } else {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "826:             offset += 4;",
          "827:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "828:               break;",
          "830:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
          "831:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "832:                   \"Average Speed of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Removed Lines]",
          "829:             while (i<j){",
          "",
          "[Added Lines]",
          "832:             for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "843:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "844:                   \"Folders of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "845:                 offset += 4;",
          "846:               }",
          "848:             }",
          "849:           }",
          "850:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "847:               i++;",
          "",
          "[Added Lines]",
          "849:               } else {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "854:             offset += 4;",
          "855:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "856:               break;",
          "858:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "859:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "860:                   \"Slots full of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "861:                 offset += 4;",
          "862:               }",
          "864:             }",
          "865:           }",
          "866:         }",
          "",
          "[Removed Lines]",
          "857:             while (i<j){",
          "863:               i++;",
          "",
          "[Added Lines]",
          "861:             for (i = 0; i < j; i++) {",
          "866:               } else {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1218:                   uncompr_tvb_offset, 4, j,",
          "1219:                   \"Number of directories: %d\", j);",
          "1220:                 uncompr_tvb_offset += 4;",
          "1222:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
          "1223:                     len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1224:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "",
          "[Removed Lines]",
          "1221:                 while (i<j){",
          "",
          "[Added Lines]",
          "1226:                 for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1228:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset+4, len,",
          "1229:                       str, \"Directory #%d Name: %s\", i+1, str);",
          "1230:                     uncompr_tvb_offset += 4+len;",
          "1232:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1233:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1234:                       uncompr_tvb_offset, 4, j2,",
          "1235:                       \"Directory #%d Number of files: %d\", i+1, j2);",
          "1236:                     uncompr_tvb_offset += 4;",
          "1238:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "1239:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte,",
          "1240:                           uncompr_tvb, uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "",
          "[Removed Lines]",
          "1231:                     i2 = 0;",
          "1237:                     while (i2<j2){",
          "",
          "[Added Lines]",
          "1241:                     for (i2 = 0; i2 < j2; i2++) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1264:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "1265:                           \"Dir #%d File #%d ext: %s\", i+1, i2+1, str);",
          "1266:                         uncompr_tvb_offset += 4+len;",
          "1268:                         j3 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1269:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1270:                           uncompr_tvb_offset, 4, j3,",
          "1271:                           \"Dir #%d File #%d Number of attributes: %d\", i+1, i2+1, j3);",
          "1272:                         uncompr_tvb_offset += 4;",
          "1274:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "1275:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "1276:                               hf_slsk_integer, uncompr_tvb,",
          "",
          "[Removed Lines]",
          "1267:                         i3 = 0;",
          "1273:                         while (i3<j3){",
          "",
          "[Added Lines]",
          "1276:                         for (i3 = 0; i3 < j3; i3++) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1282:                               uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "1283:                               \"Dir #%d File #%d Attr #%d value: %d\", i+1, i2+1, i3+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "1284:                             uncompr_tvb_offset += 4;",
          "1285:                           }",
          "1287:                         }",
          "1288:                       }",
          "1290:                     }",
          "1291:                   }",
          "1293:                 }",
          "1294:               }",
          "1295:             }",
          "",
          "[Removed Lines]",
          "1286:                           i3++;",
          "1289:                       i2++;",
          "1292:                   i++;",
          "",
          "[Added Lines]",
          "1288:                           } else {",
          "1292:                       } else {",
          "1296:                   } else {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1508:           offset += 4;",
          "1509:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1510:             break;",
          "1512:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "1513:               guint32 len;",
          "",
          "[Removed Lines]",
          "1511:           while (i<j){",
          "",
          "[Added Lines]",
          "1517:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1522:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1523:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1524:               offset += 4;",
          "1525:             }",
          "1527:           }",
          "1528:         }",
          "1529:       break;",
          "",
          "[Removed Lines]",
          "1526:             i++;",
          "",
          "[Added Lines]",
          "1531:             } else {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1558:           offset += 4;",
          "1559:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1560:             break;",
          "1562:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "1563:               guint32 len;",
          "",
          "[Removed Lines]",
          "1561:           while (i<j){",
          "",
          "[Added Lines]",
          "1568:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1572:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1573:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1574:               offset += 4;",
          "1575:             }",
          "1577:           }",
          "1578:         }",
          "1579:       break;",
          "",
          "[Removed Lines]",
          "1576:             i++;",
          "",
          "[Added Lines]",
          "1582:             } else {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1604:           offset += 4;",
          "1605:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1606:             break;",
          "1608:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1609:               guint32 len;",
          "",
          "[Removed Lines]",
          "1607:           while (i<j){",
          "",
          "[Added Lines]",
          "1615:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1615:               proto_tree_add_string_format(slsk_tree, hf_slsk_recommendation, tvb, offset+4, len, str,",
          "1616:                 \"Recommendation #%d: %s\", i+1, str);",
          "1617:               offset += 4+len;",
          "1618:             }",
          "1620:           }",
          "1621:         }",
          "1622:       break;",
          "",
          "[Removed Lines]",
          "1619:             i++;",
          "",
          "[Added Lines]",
          "1626:             } else {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1637:           offset += 4;",
          "1638:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1639:             break;",
          "1641:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1642:               guint32 len;",
          "",
          "[Removed Lines]",
          "1640:           while (i<j){",
          "",
          "[Added Lines]",
          "1649:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1648:               proto_tree_add_string_format(slsk_tree, hf_slsk_string, tvb, offset+4, len, str,",
          "1649:                 \"String #%d: %s\", i+1, str);",
          "1650:               offset += 4+len;",
          "1651:             }",
          "1653:           }",
          "1654:         }",
          "1655:       break;",
          "",
          "[Removed Lines]",
          "1652:             i++;",
          "",
          "[Added Lines]",
          "1660:             } else {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1716:           offset += 4;",
          "1717:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1718:             break;",
          "1720:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1721:               guint32 len;",
          "",
          "[Removed Lines]",
          "1719:           while (i<j){",
          "",
          "[Added Lines]",
          "1729:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1727:               proto_tree_add_string_format(slsk_tree, hf_slsk_room, tvb, offset+4, len, str,",
          "1728:                 \"Room #%d: %s\", i+1, str);",
          "1729:               offset += 4+len;",
          "1730:             }",
          "1732:           }",
          "1733:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1735:             proto_tree_add_uint(slsk_tree, hf_slsk_number_of_rooms, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1736:             offset += 4;",
          "1738:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1739:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1740:                   \"Users in Room #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1741:                 offset += 4;",
          "1742:               }",
          "1744:             }",
          "1745:           }",
          "1746:         }",
          "",
          "[Removed Lines]",
          "1731:             i++;",
          "1734:             i=0;",
          "1737:             while (i<j){",
          "1743:               i++;",
          "",
          "[Added Lines]",
          "1740:             } else {",
          "1747:             for (i = 0; i < j; i++) {",
          "1752:               } else {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1823:           offset += 4;",
          "1824:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1825:             break;",
          "1827:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1828:               guint32 len;",
          "",
          "[Removed Lines]",
          "1826:           while (i<j){",
          "",
          "[Added Lines]",
          "1837:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1833:               str = tvb_format_text(tvb, offset+4, len);",
          "1834:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str, \"User #%d: %s\", i+1, str);",
          "1835:               offset += 4+len;",
          "1836:             }",
          "1838:           }",
          "1839:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1840:             i=0; j = tvb_get_letohl(tvb, offset);",
          "1841:             proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, j);",
          "1842:             offset += 4;",
          "1844:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1845:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1846:                   \"Status of User #%d: %s (Code: %d)\", i+1, val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "1847:                 offset += 4;",
          "1848:               }",
          "1850:             }",
          "1851:           }",
          "1852:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "1837:             i++;",
          "1843:             while (i<j){",
          "1849:               i++;",
          "",
          "[Added Lines]",
          "1847:             } else {",
          "1855:             for (i = 0; i < j; i++) {",
          "1860:               } else {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1855:             offset += 4;",
          "1856:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "1857:               break;",
          "1859:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
          "1860:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1861:                   \"Average Speed of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Removed Lines]",
          "1858:             while (i<j){",
          "",
          "[Added Lines]",
          "1871:             for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1872:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1873:                   \"Folders of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1874:                 offset += 4;",
          "1875:               }",
          "1877:             }",
          "1878:           }",
          "1879:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "1876:               i++;",
          "",
          "[Added Lines]",
          "1888:               } else {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1883:             offset += 4;",
          "1884:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "1885:               break;",
          "1887:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1888:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1889:                   \"Slots full of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1890:                 offset += 4;",
          "1891:               }",
          "1893:             }",
          "1894:           }",
          "1895:         }",
          "",
          "[Removed Lines]",
          "1886:             while (i<j){",
          "1892:               i++;",
          "",
          "[Added Lines]",
          "1900:             for (i = 0; i < j; i++) {",
          "1905:               } else {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1938:           offset += 4;",
          "1939:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1940:             break;",
          "1942:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1943:               guint32 len;",
          "",
          "[Removed Lines]",
          "1941:           while (i<j){",
          "",
          "[Added Lines]",
          "1956:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1949:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str,",
          "1950:                 \"User #%d: %s\", i+1, str);",
          "1951:               offset += 4+len;",
          "1952:             }",
          "1954:           }",
          "1955:         }",
          "1956:       break;",
          "",
          "[Removed Lines]",
          "1953:             i++;",
          "",
          "[Added Lines]",
          "1967:             } else {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2135:           offset += 4;",
          "2136:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2137:             break;",
          "2139:             if (check_slsk_format(tvb, offset, \"sii*\")) {",
          "2140:               guint32 len;",
          "",
          "[Removed Lines]",
          "2138:           while (i<j){",
          "",
          "[Added Lines]",
          "2154:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2151:               proto_tree_add_uint_format(slsk_tree, hf_slsk_port, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2152:                 \"Port Number #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "2153:               offset += 4;",
          "2154:             }",
          "2156:           }",
          "2157:         }",
          "2158:       break;",
          "",
          "[Removed Lines]",
          "2155:             i++;",
          "",
          "[Added Lines]",
          "2170:             } else {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2198:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2199:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2200:           offset += 4;",
          "2203:           offset += 4;",
          "2204:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2205:             break;",
          "2207:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "2208:               guint32 len;",
          "",
          "[Removed Lines]",
          "2201:           i=0; j = tvb_get_letohl(tvb, offset);",
          "2202:           proto_tree_add_item(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2206:           while (i<j){",
          "",
          "[Added Lines]",
          "2218:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "2222:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2217:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2218:                 \"Same Recommendations #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "2219:               offset += 4;",
          "2220:             }",
          "2222:           }",
          "2223:         }",
          "2224:       break;",
          "",
          "[Removed Lines]",
          "2221:             i++;",
          "",
          "[Added Lines]",
          "2236:             } else {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2249:           offset += 4;",
          "2250:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2251:             break;",
          "2253:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "2254:               guint32 len;",
          "",
          "[Removed Lines]",
          "2252:           while (i<j){",
          "",
          "[Added Lines]",
          "2269:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2263:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2264:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "2265:               offset += 4;",
          "2266:             }",
          "2268:           }",
          "2269:         }",
          "2270:       break;",
          "",
          "[Removed Lines]",
          "2267:             i++;",
          "",
          "[Added Lines]",
          "2283:             } else {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2295:           offset += 4;",
          "2296:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2297:             break;",
          "2299:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "2300:               guint32 len;",
          "",
          "[Removed Lines]",
          "2298:           while (i<j){",
          "",
          "[Added Lines]",
          "2316:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2306:               proto_tree_add_string_format(slsk_tree, hf_slsk_username, tvb, offset+4, len, str,",
          "2307:                 \"Username #%d: %s\", i+1, str);",
          "2308:               offset += 4+len;",
          "2309:             }",
          "2311:           }",
          "2312:         }",
          "2313:       break;",
          "",
          "[Removed Lines]",
          "2310:             i++;",
          "",
          "[Added Lines]",
          "2327:             } else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8525318ec4babcd946bd34c68dd2aed4d7089162",
      "candidate_info": {
        "commit_hash": "8525318ec4babcd946bd34c68dd2aed4d7089162",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8525318ec4babcd946bd34c68dd2aed4d7089162",
        "files": [
          "epan/dissectors/packet-slsk.c"
        ],
        "message": "slsk: fix infinite loop\n\nIf check_slsk_format reports that the buffer does not contain the\nexpected data, do not try to find more items (break out of the loop).\n\nIn one case, an infinite loop would occur because the index variable was\nnot incremented when the check fails. In all other cases, it would\nperform up to 2^32 calls to check_slsk_format per loop (with the same\noffset parameter, so no exception is triggered).\n\nChange-Id: I4b7fa10a36fee2551fa46831bcecd6bcd9f342d1\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1200\nBug: 13631\nReviewed-on: https://code.wireshark.org/review/21284\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 7eab596c0824e6fa20aad6932bcd2fdb94b86edf)\n [ Conflicts: manually resolved, skipped removal of \"i = 0\" from lines\n   where \"j = tvb_get_letohl(...)\" occurs ]\nReviewed-on: https://code.wireshark.org/review/21296\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ],
          "candidate": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c": [
          "File: epan/dissectors/packet-slsk.c -> epan/dissectors/packet-slsk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "493:                   \"Uncompressed SoulSeek data\");",
          "494:               uncompr_tvb_offset = 0;",
          "495:               if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"i*\")) {",
          "497:                 j = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "498:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, j,",
          "499:                   \"Number of directories: %u\", j);",
          "500:                 uncompr_tvb_offset += 4;",
          "502:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
          "503:                     guint32 len;",
          "",
          "[Removed Lines]",
          "496:                 i=0;",
          "501:                 while (i<j){",
          "",
          "[Added Lines]",
          "500:                 for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "511:                       \"Directory #%d Name: %s\", i+1, str);",
          "512:                     uncompr_tvb_offset += 4+len;",
          "514:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "515:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "516:                       uncompr_tvb_offset, 4, j2,",
          "517:                       \"Directory #%d Number of files: %u\", i+1, j2);",
          "518:                     uncompr_tvb_offset += 4;",
          "520:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "521:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb,",
          "522:                           uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "",
          "[Removed Lines]",
          "513:                     i2=0;",
          "519:                     while (i2<j2){",
          "",
          "[Added Lines]",
          "517:                     for (i2 = 0; i2 < j2; i2++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "548:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "549:                           \"Dir #%d File #%d ext: %s\", i+1, i2+1, str);",
          "550:                         uncompr_tvb_offset += 4+len;",
          "552:                         j3 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "553:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "554:                           uncompr_tvb, uncompr_tvb_offset, 4,",
          "555:                           tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "556:                           \"Dir #%d File #%d Number of attributes: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "557:                         uncompr_tvb_offset += 4;",
          "559:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "560:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "561:                               hf_slsk_integer, uncompr_tvb,",
          "",
          "[Removed Lines]",
          "551:                         i3=0;",
          "558:                         while (i3<j3){",
          "",
          "[Added Lines]",
          "555:                         for (i3 = 0; i3 < j3; i3++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "569:                               tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "570:                               \"Dir #%d File #%d Attr #%d value: %d\", i+1, i2+1, i3+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "571:                             uncompr_tvb_offset += 4;",
          "573:                           }",
          "574:                         }",
          "575:                       }",
          "577:                     }",
          "578:                   }",
          "580:                 }",
          "581:               }",
          "582:             }",
          "",
          "[Removed Lines]",
          "572:                             i3++;",
          "576:                       i2++;",
          "579:                   i++;",
          "",
          "[Added Lines]",
          "569:                           } else {",
          "573:                       } else {",
          "577:                   } else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "664:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, j,",
          "665:                   \"Number of files: %d\", j);",
          "666:                 uncompr_tvb_offset += 4;",
          "668:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "669:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb, 0, 0, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "670:                       \"File #%d Code: %d\", i+1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "",
          "[Removed Lines]",
          "667:                 while (i<j){",
          "",
          "[Added Lines]",
          "667:                 for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "693:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "694:                       \"File #%d ext: %s\", i+1, str);",
          "695:                     uncompr_tvb_offset += 4+len;",
          "697:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "698:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "699:                       uncompr_tvb_offset, 4, j,",
          "700:                       \"File #%d Number of attributes: %d\", i+1, j);",
          "701:                     uncompr_tvb_offset += 4;",
          "703:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "704:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "705:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "",
          "[Removed Lines]",
          "696:                     i2=0;",
          "702:                     while (i2<j2){",
          "",
          "[Added Lines]",
          "701:                     for (i2 = 0; i2 < j2; i2++) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "709:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "710:                           \"File #%d Attr #%d value: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "711:                         uncompr_tvb_offset += 4;",
          "712:                       }",
          "714:                     }",
          "715:                   }",
          "717:                 }",
          "718:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb, uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "719:                   \"Free upload slots: %s (Byte: %d)\", val_to_str_const(tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "",
          "[Removed Lines]",
          "713:                       i2++;",
          "716:                   i++;",
          "",
          "[Added Lines]",
          "711:                       } else {",
          "715:                   } else {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "792:           offset += 4;",
          "793:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "794:             break;",
          "796:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "797:               guint32 len;",
          "",
          "[Removed Lines]",
          "795:           while (i<j){",
          "",
          "[Added Lines]",
          "796:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "802:               str = tvb_format_text(tvb, offset+4, len);",
          "803:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str, \"User #%d: %s\", i+1, str);",
          "804:               offset += 4+len;",
          "805:             }",
          "807:           }",
          "808:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "809:             i=0; j = tvb_get_letohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "806:             i++;",
          "",
          "[Added Lines]",
          "806:             } else {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "811:             offset += 4;",
          "812:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "813:               break;",
          "815:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "816:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "817:                   \"Status of User #%d: %s (Code: %d)\", i+1, val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "818:                 offset += 4;",
          "819:               }",
          "821:             }",
          "822:           }",
          "823:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "814:             while (i<j){",
          "820:               i++;",
          "",
          "[Added Lines]",
          "816:             for (i = 0; i < j; i++) {",
          "821:               } else {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "826:             offset += 4;",
          "827:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "828:               break;",
          "830:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
          "831:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "832:                   \"Average Speed of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Removed Lines]",
          "829:             while (i<j){",
          "",
          "[Added Lines]",
          "832:             for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "843:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "844:                   \"Folders of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "845:                 offset += 4;",
          "846:               }",
          "848:             }",
          "849:           }",
          "850:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "847:               i++;",
          "",
          "[Added Lines]",
          "849:               } else {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "854:             offset += 4;",
          "855:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "856:               break;",
          "858:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "859:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "860:                   \"Slots full of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "861:                 offset += 4;",
          "862:               }",
          "864:             }",
          "865:           }",
          "866:         }",
          "",
          "[Removed Lines]",
          "857:             while (i<j){",
          "863:               i++;",
          "",
          "[Added Lines]",
          "861:             for (i = 0; i < j; i++) {",
          "866:               } else {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1218:                   uncompr_tvb_offset, 4, j,",
          "1219:                   \"Number of directories: %d\", j);",
          "1220:                 uncompr_tvb_offset += 4;",
          "1222:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
          "1223:                     len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1224:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "",
          "[Removed Lines]",
          "1221:                 while (i<j){",
          "",
          "[Added Lines]",
          "1226:                 for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1228:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset+4, len,",
          "1229:                       str, \"Directory #%d Name: %s\", i+1, str);",
          "1230:                     uncompr_tvb_offset += 4+len;",
          "1232:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1233:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1234:                       uncompr_tvb_offset, 4, j2,",
          "1235:                       \"Directory #%d Number of files: %d\", i+1, j2);",
          "1236:                     uncompr_tvb_offset += 4;",
          "1238:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "1239:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte,",
          "1240:                           uncompr_tvb, uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "",
          "[Removed Lines]",
          "1231:                     i2 = 0;",
          "1237:                     while (i2<j2){",
          "",
          "[Added Lines]",
          "1241:                     for (i2 = 0; i2 < j2; i2++) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1264:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "1265:                           \"Dir #%d File #%d ext: %s\", i+1, i2+1, str);",
          "1266:                         uncompr_tvb_offset += 4+len;",
          "1268:                         j3 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1269:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1270:                           uncompr_tvb_offset, 4, j3,",
          "1271:                           \"Dir #%d File #%d Number of attributes: %d\", i+1, i2+1, j3);",
          "1272:                         uncompr_tvb_offset += 4;",
          "1274:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "1275:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "1276:                               hf_slsk_integer, uncompr_tvb,",
          "",
          "[Removed Lines]",
          "1267:                         i3 = 0;",
          "1273:                         while (i3<j3){",
          "",
          "[Added Lines]",
          "1276:                         for (i3 = 0; i3 < j3; i3++) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1282:                               uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "1283:                               \"Dir #%d File #%d Attr #%d value: %d\", i+1, i2+1, i3+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "1284:                             uncompr_tvb_offset += 4;",
          "1285:                           }",
          "1287:                         }",
          "1288:                       }",
          "1290:                     }",
          "1291:                   }",
          "1293:                 }",
          "1294:               }",
          "1295:             }",
          "",
          "[Removed Lines]",
          "1286:                           i3++;",
          "1289:                       i2++;",
          "1292:                   i++;",
          "",
          "[Added Lines]",
          "1288:                           } else {",
          "1292:                       } else {",
          "1296:                   } else {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1508:           offset += 4;",
          "1509:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1510:             break;",
          "1512:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "1513:               guint32 len;",
          "",
          "[Removed Lines]",
          "1511:           while (i<j){",
          "",
          "[Added Lines]",
          "1517:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1522:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1523:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1524:               offset += 4;",
          "1525:             }",
          "1527:           }",
          "1528:         }",
          "1529:       break;",
          "",
          "[Removed Lines]",
          "1526:             i++;",
          "",
          "[Added Lines]",
          "1531:             } else {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1558:           offset += 4;",
          "1559:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1560:             break;",
          "1562:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "1563:               guint32 len;",
          "",
          "[Removed Lines]",
          "1561:           while (i<j){",
          "",
          "[Added Lines]",
          "1568:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1572:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1573:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1574:               offset += 4;",
          "1575:             }",
          "1577:           }",
          "1578:         }",
          "1579:       break;",
          "",
          "[Removed Lines]",
          "1576:             i++;",
          "",
          "[Added Lines]",
          "1582:             } else {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1604:           offset += 4;",
          "1605:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1606:             break;",
          "1608:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1609:               guint32 len;",
          "",
          "[Removed Lines]",
          "1607:           while (i<j){",
          "",
          "[Added Lines]",
          "1615:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1615:               proto_tree_add_string_format(slsk_tree, hf_slsk_recommendation, tvb, offset+4, len, str,",
          "1616:                 \"Recommendation #%d: %s\", i+1, str);",
          "1617:               offset += 4+len;",
          "1618:             }",
          "1620:           }",
          "1621:         }",
          "1622:       break;",
          "",
          "[Removed Lines]",
          "1619:             i++;",
          "",
          "[Added Lines]",
          "1626:             } else {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1637:           offset += 4;",
          "1638:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1639:             break;",
          "1641:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1642:               guint32 len;",
          "",
          "[Removed Lines]",
          "1640:           while (i<j){",
          "",
          "[Added Lines]",
          "1649:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1648:               proto_tree_add_string_format(slsk_tree, hf_slsk_string, tvb, offset+4, len, str,",
          "1649:                 \"String #%d: %s\", i+1, str);",
          "1650:               offset += 4+len;",
          "1651:             }",
          "1653:           }",
          "1654:         }",
          "1655:       break;",
          "",
          "[Removed Lines]",
          "1652:             i++;",
          "",
          "[Added Lines]",
          "1660:             } else {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1716:           offset += 4;",
          "1717:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1718:             break;",
          "1720:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1721:               guint32 len;",
          "",
          "[Removed Lines]",
          "1719:           while (i<j){",
          "",
          "[Added Lines]",
          "1729:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1727:               proto_tree_add_string_format(slsk_tree, hf_slsk_room, tvb, offset+4, len, str,",
          "1728:                 \"Room #%d: %s\", i+1, str);",
          "1729:               offset += 4+len;",
          "1730:             }",
          "1732:           }",
          "1733:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1735:             proto_tree_add_uint(slsk_tree, hf_slsk_number_of_rooms, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1736:             offset += 4;",
          "1738:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1739:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1740:                   \"Users in Room #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1741:                 offset += 4;",
          "1742:               }",
          "1744:             }",
          "1745:           }",
          "1746:         }",
          "",
          "[Removed Lines]",
          "1731:             i++;",
          "1734:             i=0;",
          "1737:             while (i<j){",
          "1743:               i++;",
          "",
          "[Added Lines]",
          "1740:             } else {",
          "1747:             for (i = 0; i < j; i++) {",
          "1752:               } else {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1823:           offset += 4;",
          "1824:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1825:             break;",
          "1827:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1828:               guint32 len;",
          "",
          "[Removed Lines]",
          "1826:           while (i<j){",
          "",
          "[Added Lines]",
          "1837:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1833:               str = tvb_format_text(tvb, offset+4, len);",
          "1834:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str, \"User #%d: %s\", i+1, str);",
          "1835:               offset += 4+len;",
          "1836:             }",
          "1838:           }",
          "1839:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1840:             i=0; j = tvb_get_letohl(tvb, offset);",
          "1841:             proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, j);",
          "1842:             offset += 4;",
          "1844:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1845:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1846:                   \"Status of User #%d: %s (Code: %d)\", i+1, val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "1847:                 offset += 4;",
          "1848:               }",
          "1850:             }",
          "1851:           }",
          "1852:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "1837:             i++;",
          "1843:             while (i<j){",
          "1849:               i++;",
          "",
          "[Added Lines]",
          "1847:             } else {",
          "1855:             for (i = 0; i < j; i++) {",
          "1860:               } else {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1855:             offset += 4;",
          "1856:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "1857:               break;",
          "1859:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
          "1860:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1861:                   \"Average Speed of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Removed Lines]",
          "1858:             while (i<j){",
          "",
          "[Added Lines]",
          "1871:             for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1872:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1873:                   \"Folders of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1874:                 offset += 4;",
          "1875:               }",
          "1877:             }",
          "1878:           }",
          "1879:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "",
          "[Removed Lines]",
          "1876:               i++;",
          "",
          "[Added Lines]",
          "1888:               } else {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1883:             offset += 4;",
          "1884:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "1885:               break;",
          "1887:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1888:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1889:                   \"Slots full of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1890:                 offset += 4;",
          "1891:               }",
          "1893:             }",
          "1894:           }",
          "1895:         }",
          "",
          "[Removed Lines]",
          "1886:             while (i<j){",
          "1892:               i++;",
          "",
          "[Added Lines]",
          "1900:             for (i = 0; i < j; i++) {",
          "1905:               } else {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1938:           offset += 4;",
          "1939:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1940:             break;",
          "1942:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1943:               guint32 len;",
          "",
          "[Removed Lines]",
          "1941:           while (i<j){",
          "",
          "[Added Lines]",
          "1956:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1949:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str,",
          "1950:                 \"User #%d: %s\", i+1, str);",
          "1951:               offset += 4+len;",
          "1952:             }",
          "1954:           }",
          "1955:         }",
          "1956:       break;",
          "",
          "[Removed Lines]",
          "1953:             i++;",
          "",
          "[Added Lines]",
          "1967:             } else {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2135:           offset += 4;",
          "2136:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2137:             break;",
          "2139:             if (check_slsk_format(tvb, offset, \"sii*\")) {",
          "2140:               guint32 len;",
          "",
          "[Removed Lines]",
          "2138:           while (i<j){",
          "",
          "[Added Lines]",
          "2154:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2151:               proto_tree_add_uint_format(slsk_tree, hf_slsk_port, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2152:                 \"Port Number #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "2153:               offset += 4;",
          "2154:             }",
          "2156:           }",
          "2157:         }",
          "2158:       break;",
          "",
          "[Removed Lines]",
          "2155:             i++;",
          "",
          "[Added Lines]",
          "2170:             } else {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2198:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2199:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2200:           offset += 4;",
          "2203:           offset += 4;",
          "2204:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2205:             break;",
          "2207:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "2208:               guint32 len;",
          "",
          "[Removed Lines]",
          "2201:           i=0; j = tvb_get_letohl(tvb, offset);",
          "2202:           proto_tree_add_item(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2206:           while (i<j){",
          "",
          "[Added Lines]",
          "2218:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "2222:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2217:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2218:                 \"Same Recommendations #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "2219:               offset += 4;",
          "2220:             }",
          "2222:           }",
          "2223:         }",
          "2224:       break;",
          "",
          "[Removed Lines]",
          "2221:             i++;",
          "",
          "[Added Lines]",
          "2236:             } else {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2249:           offset += 4;",
          "2250:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2251:             break;",
          "2253:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "2254:               guint32 len;",
          "",
          "[Removed Lines]",
          "2252:           while (i<j){",
          "",
          "[Added Lines]",
          "2269:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2263:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2264:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "2265:               offset += 4;",
          "2266:             }",
          "2268:           }",
          "2269:         }",
          "2270:       break;",
          "",
          "[Removed Lines]",
          "2267:             i++;",
          "",
          "[Added Lines]",
          "2283:             } else {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2295:           offset += 4;",
          "2296:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2297:             break;",
          "2299:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "2300:               guint32 len;",
          "",
          "[Removed Lines]",
          "2298:           while (i<j){",
          "",
          "[Added Lines]",
          "2316:           for (i = 0; i < j; i++) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2306:               proto_tree_add_string_format(slsk_tree, hf_slsk_username, tvb, offset+4, len, str,",
          "2307:                 \"Username #%d: %s\", i+1, str);",
          "2308:               offset += 4+len;",
          "2309:             }",
          "2311:           }",
          "2312:         }",
          "2313:       break;",
          "",
          "[Removed Lines]",
          "2310:             i++;",
          "",
          "[Added Lines]",
          "2327:             } else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3743186bcf5cd37b56f40069341565b4e6ad196c",
      "candidate_info": {
        "commit_hash": "3743186bcf5cd37b56f40069341565b4e6ad196c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3743186bcf5cd37b56f40069341565b4e6ad196c",
        "files": [
          "epan/dissectors/packet-slsk.c"
        ],
        "message": "packet-slsk.c: Fix potential uninitialized variable.\n\nChange-Id: Ic1ae372bb50192d4503b1d5ba02684f44a51f968\nReviewed-on: https://code.wireshark.org/review/21113\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ],
          "candidate": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c": [
          "File: epan/dissectors/packet-slsk.c -> epan/dissectors/packet-slsk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_token, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "609:                 uncompr_tvb_offset += 4;",
          "610:                 i=0;",
          "612:                 uncompr_tvb_offset += 4;",
          "613:                 while (i<j){",
          "614:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "",
          "[Removed Lines]",
          "611:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
          "",
          "[Added Lines]",
          "611:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e002ed84f844661159e3584b8ce376e8fd792dc",
      "candidate_info": {
        "commit_hash": "7e002ed84f844661159e3584b8ce376e8fd792dc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7e002ed84f844661159e3584b8ce376e8fd792dc",
        "files": [
          "epan/dissectors/packet-slsk.c"
        ],
        "message": "packet-slsk.c: General cleanup\n\n1. Use FT_UINT_STRING as appropriate\n2. Replace many proto_tree_add_xxx_format with proto_tree_add_item[_xxx]\n\nChange-Id: Id9853c54074c2c033b3494b2d687df8e9fd33881\nReviewed-on: https://code.wireshark.org/review/21098\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ],
          "candidate": [
            "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-slsk.c||epan/dissectors/packet-slsk.c": [
          "File: epan/dissectors/packet-slsk.c -> epan/dissectors/packet-slsk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: static int hf_slsk_byte = -1;",
          "49: static int hf_slsk_message_length = -1;",
          "50: static int hf_slsk_message_code = -1;",
          "51: static int hf_slsk_client_ip = -1;",
          "54: static int hf_slsk_directory_name = -1;",
          "55: static int hf_slsk_username = -1;",
          "56: static int hf_slsk_password = -1;",
          "",
          "[Removed Lines]",
          "53: static int hf_slsk_string_length = -1;",
          "",
          "[Added Lines]",
          "51: static int hf_slsk_embedded_message_type = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: static int hf_slsk_recommendation = -1;",
          "106: static int hf_slsk_user = -1;",
          "107: static int hf_slsk_ranking = -1;",
          "111: static gint ett_slsk = -1;",
          "112: static gint ett_slsk_compr_packet = -1;",
          "114: static expert_field ei_slsk_unknown_data = EI_INIT;",
          "115: static expert_field ei_slsk_zlib_decompression_failed = EI_INIT;",
          "117: #define SLSK_TCP_PORT_RANGE   \"2234,2240,5534\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: static int hf_slsk_compressed_packet_length = -1;",
          "109: static int hf_slsk_uncompressed_packet_length = -1;",
          "110: static int hf_slsk_num_directories = -1;",
          "111: static int hf_slsk_upload_speed = -1;",
          "112: static int hf_slsk_in_queue = -1;",
          "113: static int hf_slsk_num_slotsfull_records = -1;",
          "114: static int hf_slsk_num_recommendations = -1;",
          "115: static int hf_slsk_num_files = -1;",
          "116: static int hf_slsk_num_strings = -1;",
          "117: static int hf_slsk_file_code = -1;",
          "118: static int hf_slsk_file_size1 = -1;",
          "119: static int hf_slsk_file_size2 = -1;",
          "120: static int hf_slsk_file_num_attributes = -1;",
          "121: static int hf_slsk_file_attribute_type = -1;",
          "122: static int hf_slsk_file_attribute_value = -1;",
          "123: static int hf_slsk_free_upload_slots = -1;",
          "124: static int hf_slsk_bytes = -1;",
          "125: static int hf_slsk_same_recommendation = -1;",
          "126: static int hf_slsk_number_of_priv_users = -1;",
          "127: static int hf_slsk_num_parent_address = -1;",
          "132: static gint ett_slsk_directory = -1;",
          "133: static gint ett_slsk_file = -1;",
          "134: static gint ett_slsk_file_attribute = -1;",
          "135: static gint ett_slsk_user = -1;",
          "136: static gint ett_slsk_recommendation = -1;",
          "137: static gint ett_slsk_room = -1;",
          "138: static gint ett_slsk_string = -1;",
          "142: static expert_field ei_slsk_decompression_failed = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306: {",
          "313:   guint32 msg_len, msg_code;",
          "315:   guint8 *str;",
          "332:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"slsk\");",
          "",
          "[Removed Lines]",
          "309:   proto_item *ti, *ti_len=NULL;",
          "310:   proto_tree *slsk_tree;",
          "312:   int offset, i, j;",
          "314:   const gchar *message_type;",
          "317:   int comprlen = 0;",
          "318:   int uncomprlen = 0;",
          "319:   int uncompr_tvb_offset = 0;",
          "320:   int i2 = 0;",
          "321:   int j2 = 0;",
          "322:   int i3 = 0;",
          "323:   int j3 = 0;",
          "325:   offset = 0;",
          "327:   msg_len = tvb_get_letohl(tvb, offset);",
          "328:   msg_code = tvb_get_letohl(tvb, offset+4);",
          "329:   message_type = get_message_type(tvb);",
          "",
          "[Added Lines]",
          "336:   proto_item *ti, *ti_len, *ti_subtree, *ti_subtree2;",
          "337:   proto_tree *slsk_tree, *subtree, *subtree2, *subtree3;",
          "339:   int offset = 0, i, j;",
          "342:   int str_len, start_offset, start_offset2;",
          "344:   int comprlen = 0, uncomprlen = 0, uncompr_tvb_offset = 0;",
          "345:   int i2 = 0, j2 = 0;",
          "346:   int i3 = 0, j3 = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:   col_set_str(pinfo->cinfo, COL_INFO, \"SoulSeek Message\");",
          "343:     ti = proto_tree_add_item(tree, proto_slsk, tvb, 0, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "338:   col_append_fstr(pinfo->cinfo, COL_INFO, \": %s\", message_type);",
          "340:   if (tree) {",
          "",
          "[Added Lines]",
          "355:   col_append_fstr(pinfo->cinfo, COL_INFO, \": %s\", get_message_type(tvb));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349:     offset += 4;",
          "351:     switch (msg_code) {",
          "353:       case  1:",
          "354:         if (check_slsk_format(tvb, offset, \"issi\")) {",
          "359:           offset += 4;",
          "367:           offset += 4;",
          "368:         }",
          "369:         else if (check_slsk_format(tvb, offset, \"ibs\") || check_slsk_format(tvb, offset, \"ibsi\")) {",
          "374:           offset += 4;",
          "375:           i=tvb_get_guint8(tvb, offset);",
          "378:           offset += 1;",
          "382:           if (i == 1){",
          "384:             offset += 4;",
          "385:           }",
          "386:         }",
          "",
          "[Removed Lines]",
          "348:     ti_len = proto_tree_add_uint(slsk_tree, hf_slsk_message_length, tvb, offset, 4, msg_len);",
          "356:           message_type = \"Login\";",
          "357:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "358:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "360:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "361:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "362:           offset += 4+tvb_get_letohl(tvb, offset);",
          "363:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "364:           proto_tree_add_item(slsk_tree, hf_slsk_password, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "365:           offset += 4+tvb_get_letohl(tvb, offset);",
          "366:           proto_tree_add_uint(slsk_tree, hf_slsk_version, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "371:           message_type = \"Login Reply\";",
          "372:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "373:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "376:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_login_successful, tvb, offset, 1, tvb_get_guint8(tvb, offset),",
          "377:             \"%s (Byte: %d)\", val_to_str_const(tvb_get_guint8(tvb, offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(tvb, offset));",
          "379:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "380:           proto_tree_add_item(slsk_tree, hf_slsk_login_message, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "381:           offset += 4+tvb_get_letohl(tvb, offset);",
          "383:             proto_tree_add_ipv4(slsk_tree, hf_slsk_client_ip, tvb, offset, 4, tvb_get_ntohl(tvb, offset));",
          "",
          "[Added Lines]",
          "363:     ti_len = proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_message_length, tvb, offset, 4, ENC_LITTLE_ENDIAN, &msg_len);",
          "365:     msg_code = tvb_get_letohl(tvb, offset);",
          "372:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "373:                      \"Login (Code: %02d)\", msg_code);",
          "375:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "376:           offset += str_len;",
          "377:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_password, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "378:           offset += str_len;",
          "379:           proto_tree_add_item(slsk_tree, hf_slsk_version, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "384:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "385:                      \"Login Reply (Code: %02d)\", msg_code);",
          "388:           proto_tree_add_item(slsk_tree, hf_slsk_login_successful, tvb, offset, 1, ENC_NA);",
          "390:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_login_message, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "391:           offset += str_len;",
          "393:             proto_tree_add_item(slsk_tree, hf_slsk_client_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "389:       case  2:",
          "390:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "395:           offset += 4;",
          "397:           offset += 4;",
          "398:         }",
          "399:       break;",
          "",
          "[Removed Lines]",
          "392:           message_type = \"Set Wait Port\";",
          "393:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "394:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "396:           proto_tree_add_uint(slsk_tree, hf_slsk_port, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "402:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "403:                      \"Set Wait Port (Code: %02d)\", msg_code);",
          "405:           proto_tree_add_item(slsk_tree, hf_slsk_port, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "401:       case  3:",
          "402:         if (check_slsk_format(tvb, offset, \"isii\")) {",
          "407:           offset += 4;",
          "412:           offset += 4;",
          "414:           offset += 4;",
          "415:         }",
          "416:         else if (check_slsk_format(tvb, offset, \"is\")) {",
          "421:           offset += 4;",
          "425:         }",
          "426:       break;",
          "428:       case 4:",
          "429:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "434:           offset += 4;",
          "435:         }",
          "436:       break;",
          "",
          "[Removed Lines]",
          "404:           message_type = \"Get Peer Address Reply\";",
          "405:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "406:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "408:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "409:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "410:           offset += 4+tvb_get_letohl(tvb, offset);",
          "411:           proto_tree_add_ipv4(slsk_tree, hf_slsk_ip, tvb, offset, 4, tvb_get_ntohl(tvb, offset));",
          "413:           proto_tree_add_uint(slsk_tree, hf_slsk_port, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "418:           message_type = \"Get Peer Address\";",
          "419:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "420:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "422:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "423:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "424:           offset += 4+tvb_get_letohl(tvb, offset);",
          "431:           message_type = \"Get Shared File List\";",
          "432:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "433:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "413:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "414:                      \"Get Peer Address Reply (Code: %02d)\", msg_code);",
          "416:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "417:           offset += str_len;",
          "418:           proto_tree_add_item(slsk_tree, hf_slsk_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "420:           proto_tree_add_item(slsk_tree, hf_slsk_port, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "425:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "426:                      \"Get Peer Address (Code: %02d)\", msg_code);",
          "428:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "429:           offset += str_len;",
          "436:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "437:                      \"Get Shared File List (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "438:       case  5:",
          "439:         if (check_slsk_format(tvb, offset, \"isb\")) {",
          "450:           offset += 1;",
          "451:         }",
          "452:         else if (check_slsk_format(tvb, offset, \"is\")) {",
          "457:           offset += 4;",
          "461:         }",
          "462:         else if (check_slsk_format(tvb, offset, \"i*\")) {",
          "467:           offset += 4;",
          "",
          "[Removed Lines]",
          "441:           message_type = \"User Exists Reply\";",
          "442:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "443:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "444:           offset += 4;",
          "445:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "446:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "447:           offset += 4+tvb_get_letohl(tvb, offset);",
          "448:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_user_exists, tvb, offset, 1, tvb_get_guint8(tvb, offset),",
          "449:             \"%s (Byte: %d)\", val_to_str_const(tvb_get_guint8(tvb, offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(tvb, offset));",
          "454:           message_type = \"User Exists Request\";",
          "455:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "456:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "458:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "459:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "460:           offset += 4+tvb_get_letohl(tvb, offset);",
          "464:           message_type = \"Shared File List\";",
          "465:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "466:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "445:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "446:                      \"User Exists Reply (Code: %02d)\", msg_code);",
          "447:           offset += 4;",
          "448:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "449:           offset += str_len;",
          "450:           proto_tree_add_item(slsk_tree, hf_slsk_user_exists, tvb, offset, 1, ENC_NA);",
          "455:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "456:                      \"User Exists Request (Code: %02d)\", msg_code);",
          "458:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "459:           offset += str_len;",
          "463:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "464:                      \"Shared File List (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "481:               proto_item *ti2 = proto_tree_add_item(slsk_tree, hf_slsk_compr_packet, tvb, offset, -1, ENC_NA);",
          "482:               proto_tree *slsk_compr_packet_tree = proto_item_add_subtree(ti2, ett_slsk_compr_packet);",
          "486:               uncomprlen = tvb_reported_length_remaining(uncompr_tvb, 0);",
          "492:               uncompr_tvb_offset = 0;",
          "493:               if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"i*\")) {",
          "494:                 i=0;",
          "498:                 uncompr_tvb_offset += 4;",
          "499:                 while (i<j){",
          "500:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
          "511:                     i2=0;",
          "516:                     uncompr_tvb_offset += 4;",
          "517:                     while (i2<j2){",
          "518:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "522:                         uncompr_tvb_offset += 1;",
          "535:                         uncompr_tvb_offset += 4;",
          "540:                         uncompr_tvb_offset += 4;",
          "549:                         i3=0;",
          "555:                         uncompr_tvb_offset += 4;",
          "556:                         while (i3<j3){",
          "557:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "563:                             uncompr_tvb_offset += 4;",
          "569:                             uncompr_tvb_offset += 4;",
          "570:                             i3++;",
          "571:                           }",
          "572:                         }",
          "573:                       }",
          "574:                       i2++;",
          "575:                     }",
          "576:                   }",
          "577:                   i++;",
          "578:                 }",
          "579:               }",
          "580:             }",
          "581:           }else {",
          "586:             offset += tvb_captured_length_remaining(tvb, offset);",
          "587:           }",
          "588:         }",
          "",
          "[Removed Lines]",
          "484:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "485:                 \"(  compressed packet length: %d)\", comprlen);",
          "487:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "488:                 \"(uncompressed packet length: %d)\", uncomprlen);",
          "490:               add_new_data_source(pinfo, uncompr_tvb,",
          "491:                   \"Uncompressed SoulSeek data\");",
          "495:                 j = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "496:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, j,",
          "497:                   \"Number of directories: %u\", j);",
          "501:                     guint32 len;",
          "503:                     len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "504:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length, uncompr_tvb,",
          "505:                       uncompr_tvb_offset, 4, len,",
          "506:                       \"Directory #%d String Length: %u\", i+1, len);",
          "507:                     str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "508:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "509:                       \"Directory #%d Name: %s\", i+1, str);",
          "510:                     uncompr_tvb_offset += 4+len;",
          "512:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "513:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "514:                       uncompr_tvb_offset, 4, j2,",
          "515:                       \"Directory #%d Number of files: %u\", i+1, j2);",
          "519:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb,",
          "520:                           uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "521:                           \"Dir #%d File #%d Code: %d\", i+1, i2+1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "523:                         len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "524:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "525:                           uncompr_tvb, uncompr_tvb_offset, 4, len,",
          "526:                           \"Dir #%d File #%d String Length: %u\", i+1, i2+1, len);",
          "527:                         str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "528:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "529:                           \"Dir #%d File #%d Filename: %s\", i+1, i2+1, str);",
          "530:                         uncompr_tvb_offset += 4+len;",
          "531:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "532:                           uncompr_tvb, uncompr_tvb_offset, 4,",
          "533:                           tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "534:                           \"Dir #%d File #%d Size1: %u\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "536:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "537:                           uncompr_tvb, uncompr_tvb_offset, 4,",
          "538:                           tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "539:                           \"Dir #%d File #%d Size2: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "541:                         len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "542:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "543:                           uncompr_tvb, uncompr_tvb_offset, 4, len,",
          "544:                           \"Dir #%d File #%d String Length: %u\", i+1, i2+1, len);",
          "545:                         str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "546:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "547:                           \"Dir #%d File #%d ext: %s\", i+1, i2+1, str);",
          "548:                         uncompr_tvb_offset += 4+len;",
          "550:                         j3 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "551:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "552:                           uncompr_tvb, uncompr_tvb_offset, 4,",
          "553:                           tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "554:                           \"Dir #%d File #%d Number of attributes: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "558:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "559:                               hf_slsk_integer, uncompr_tvb,",
          "560:                               uncompr_tvb_offset, 4,",
          "561:                               tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "562:                               \"Dir #%d File #%d Attr #%d type: %s (Code: %d)\", i+1, i2+1, i3+1, val_to_str_const(tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset), slsk_attr_type, \"Unknown\"), tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "564:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "565:                               hf_slsk_integer, uncompr_tvb,",
          "566:                               uncompr_tvb_offset, 4,",
          "567:                               tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "568:                               \"Dir #%d File #%d Attr #%d value: %d\", i+1, i2+1, i3+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "582:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "583:               \"[zlib compressed packet]\");",
          "584:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 0, 0,",
          "585:               \"(  compressed packet length: %d)\", comprlen);",
          "",
          "[Added Lines]",
          "481:               PROTO_ITEM_SET_GENERATED(ti2);",
          "483:               ti = proto_tree_add_uint(slsk_tree, hf_slsk_compressed_packet_length, tvb, offset, 0, comprlen);",
          "484:               PROTO_ITEM_SET_GENERATED(ti);",
          "486:               ti = proto_tree_add_uint(slsk_tree, hf_slsk_uncompressed_packet_length, tvb, offset, 0, uncomprlen);",
          "487:               PROTO_ITEM_SET_GENERATED(ti);",
          "489:               add_new_data_source(pinfo, uncompr_tvb, \"Uncompressed SoulSeek data\");",
          "493:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_directories, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "497:                     start_offset = uncompr_tvb_offset;",
          "498:                     subtree = proto_tree_add_subtree_format(slsk_compr_packet_tree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_directory, &ti_subtree, \"Directory #%d\", i+1);",
          "499:                     proto_tree_add_item_ret_length(subtree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "500:                     uncompr_tvb_offset += str_len;",
          "502:                     proto_tree_add_item_ret_uint(subtree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
          "506:                         start_offset2 = uncompr_tvb_offset;",
          "507:                         subtree2 = proto_tree_add_subtree_format(subtree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_file, &ti_subtree2, \"File #%d\", i2+1);",
          "508:                         proto_tree_add_item(subtree2, hf_slsk_file_code, uncompr_tvb, uncompr_tvb_offset, 1, ENC_NA);",
          "510:                         proto_tree_add_item_ret_length(subtree2, hf_slsk_filename, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "511:                         uncompr_tvb_offset += str_len;",
          "512:                         proto_tree_add_item(subtree2, hf_slsk_file_size1, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "514:                         proto_tree_add_item(subtree2, hf_slsk_file_size2, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "516:                         proto_tree_add_item_ret_length(subtree2, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "517:                         uncompr_tvb_offset += str_len;",
          "519:                         proto_tree_add_item_ret_uint(subtree2, hf_slsk_file_num_attributes, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j3);",
          "523:                             subtree3 = proto_tree_add_subtree_format(subtree2, uncompr_tvb, uncompr_tvb_offset, 8, ett_slsk_file_attribute, NULL, \"Attribute #%d\", i3+1);",
          "524:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_type, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "526:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_value, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "531:                         proto_item_set_len(ti_subtree2, uncompr_tvb_offset-start_offset2);",
          "535:                     proto_item_set_len(ti_subtree, uncompr_tvb_offset-start_offset);",
          "542:             ti = proto_tree_add_item(slsk_tree, hf_slsk_compr_packet, tvb, offset, -1, ENC_NA);",
          "543:             PROTO_ITEM_SET_GENERATED(ti);",
          "544:             ti = proto_tree_add_uint(slsk_tree, hf_slsk_compressed_packet_length, tvb, offset, 0, comprlen);",
          "545:             PROTO_ITEM_SET_GENERATED(ti);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "591:       case  7:",
          "592:         if (check_slsk_format(tvb, offset, \"isi\")) {",
          "597:           offset += 4;",
          "603:           offset += 4;",
          "604:         }",
          "605:         else if (check_slsk_format(tvb, offset, \"is\")) {",
          "610:           offset += 4;",
          "614:         }",
          "615:       break;",
          "617:       case 9:",
          "618:         if (check_slsk_format(tvb, offset, \"i*\")) {",
          "623:           offset += 4;",
          "",
          "[Removed Lines]",
          "594:           message_type = \"Get User Status Reply\";",
          "595:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "596:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "598:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "599:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "600:           offset += 4+tvb_get_letohl(tvb, offset);",
          "601:           proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "602:             \"Status: %s (Code: %d)\", val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "607:           message_type = \"Get User Status\";",
          "608:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "609:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "611:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "612:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "613:           offset += 4+tvb_get_letohl(tvb, offset);",
          "620:           message_type = \"File Search Result\";",
          "621:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "622:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "554:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "555:                      \"Get User Status Reply (Code: %02d)\", msg_code);",
          "557:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "558:           offset += str_len;",
          "559:           proto_tree_add_item(slsk_tree, hf_slsk_status_code, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "564:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "565:                      \"Get User Status (Code: %02d)\", msg_code);",
          "567:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "568:           offset += str_len;",
          "575:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "576:                      \"File Search Result (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "630:             tvbuff_t *uncompr_tvb = tvb_child_uncompress(tvb, tvb, offset, comprlen);",
          "632:             if (uncompr_tvb == NULL) {",
          "635:               offset += tvb_captured_length_remaining(tvb, offset);",
          "638:             } else {",
          "640:               proto_item *ti2 = proto_tree_add_item(slsk_tree, hf_slsk_compr_packet, tvb, offset, -1, ENC_NA);",
          "641:               proto_tree *slsk_compr_packet_tree = proto_item_add_subtree(ti2, ett_slsk_compr_packet);",
          "645:               uncomprlen = tvb_captured_length_remaining(uncompr_tvb, 0);",
          "651:               uncompr_tvb_offset = 0;",
          "652:               if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"sii*\")) {",
          "659:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_token, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "660:                 uncompr_tvb_offset += 4;",
          "664:                 uncompr_tvb_offset += 4;",
          "665:                 while (i<j){",
          "666:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "669:                     uncompr_tvb_offset += 1;",
          "681:                     uncompr_tvb_offset += 4;",
          "685:                     uncompr_tvb_offset += 4;",
          "694:                     i2=0;",
          "699:                     uncompr_tvb_offset += 4;",
          "700:                     while (i2<j2){",
          "701:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "705:                         uncompr_tvb_offset += 4;",
          "709:                         uncompr_tvb_offset += 4;",
          "710:                       }",
          "711:                       i2++;",
          "712:                     }",
          "713:                   }",
          "714:                   i++;",
          "715:                 }",
          "718:                 uncompr_tvb_offset += 1;",
          "721:                 uncompr_tvb_offset += 4;",
          "724:               }",
          "725:             }",
          "726:           }else {",
          "731:             offset += tvb_captured_length_remaining(tvb, offset);",
          "732:           }",
          "733:         }",
          "",
          "[Removed Lines]",
          "633:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, tvb_captured_length_remaining(tvb, offset), 0,",
          "634:                 \"[zlib compressed packet]\");",
          "636:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, 0, 0, 0,",
          "637:                 \"(uncompression failed !)\");",
          "643:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "644:                 \"(  compressed packet length: %d)\", comprlen);",
          "646:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "647:                 \"(uncompressed packet length: %d)\", uncomprlen);",
          "649:               add_new_data_source(pinfo, uncompr_tvb,",
          "650:                   \"Uncompressed SoulSeek data\");",
          "653:                 guint32 len;",
          "655:                 len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "656:                 proto_tree_add_uint(slsk_compr_packet_tree, hf_slsk_string_length, uncompr_tvb, uncompr_tvb_offset, 4, len);",
          "657:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_username, uncompr_tvb, uncompr_tvb_offset+4, len, ENC_ASCII|ENC_NA);",
          "658:                 uncompr_tvb_offset += 4+len;",
          "661:                 i=0; j = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "662:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, j,",
          "663:                   \"Number of files: %d\", j);",
          "667:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb, 0, 0, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "668:                       \"File #%d Code: %d\", i+1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "670:                     len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "671:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length, uncompr_tvb,",
          "672:                       uncompr_tvb_offset, 4, len,",
          "673:                       \"File #%d String Length: %u\", i+1, len);",
          "674:                     str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "675:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "676:                       \"File #%d Filename: %s\", i+1, str);",
          "677:                     uncompr_tvb_offset += 4+len;",
          "678:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "679:                       uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "680:                       \"File #%d Size1: %d\", i+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "682:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "683:                       uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "684:                       \"File #%d Size2: %d\", i+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "686:                     len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "687:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length, uncompr_tvb,",
          "688:                       uncompr_tvb_offset, 4, len,",
          "689:                       \"File #%d String Length: %d\", i+1, len);",
          "690:                     str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "691:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "692:                       \"File #%d ext: %s\", i+1, str);",
          "693:                     uncompr_tvb_offset += 4+len;",
          "695:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "696:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "697:                       uncompr_tvb_offset, 4, j,",
          "698:                       \"File #%d Number of attributes: %d\", i+1, j);",
          "702:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "703:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "704:                           \"File #%d Attr #%d type: %s (Code: %d)\", i+1, i2+1, val_to_str_const(tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset), slsk_attr_type, \"Unknown\"), tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "706:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "707:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "708:                           \"File #%d Attr #%d value: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "716:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte, uncompr_tvb, uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "717:                   \"Free upload slots: %s (Byte: %d)\", val_to_str_const(tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "719:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "720:                   \"Upload speed: %d\", tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "722:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "723:                   \"In Queue: %d\", tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "727:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "728:               \"[zlib compressed packet]\");",
          "729:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "730:               \"(  compressed packet length: %d)\", comprlen);",
          "",
          "[Added Lines]",
          "587:               ti = proto_tree_add_item(slsk_tree, hf_slsk_compr_packet, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA);",
          "588:               PROTO_ITEM_SET_GENERATED(ti);",
          "590:               expert_add_info(pinfo, ti, &ei_slsk_decompression_failed);",
          "595:               PROTO_ITEM_SET_GENERATED(ti2);",
          "597:               ti = proto_tree_add_uint(slsk_tree, hf_slsk_compressed_packet_length, tvb, offset, 0, comprlen);",
          "598:               PROTO_ITEM_SET_GENERATED(ti);",
          "600:               ti = proto_tree_add_uint(slsk_tree, hf_slsk_uncompressed_packet_length, tvb, offset, 0, uncomprlen);",
          "601:               PROTO_ITEM_SET_GENERATED(ti);",
          "603:               add_new_data_source(pinfo, uncompr_tvb, \"Uncompressed SoulSeek data\");",
          "606:                 proto_tree_add_item_ret_length(slsk_compr_packet_tree, hf_slsk_username, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_NA, &str_len);",
          "607:                 uncompr_tvb_offset += str_len;",
          "610:                 i=0;",
          "611:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
          "615:                     start_offset2 = uncompr_tvb_offset;",
          "616:                     subtree2 = proto_tree_add_subtree_format(slsk_compr_packet_tree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_file, &ti_subtree2, \"File #%d\", i+1);",
          "617:                     proto_tree_add_item(subtree2, hf_slsk_file_code, uncompr_tvb, uncompr_tvb_offset, 1, ENC_NA);",
          "619:                     proto_tree_add_item_ret_length(subtree2, hf_slsk_filename, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "620:                     uncompr_tvb_offset += str_len;",
          "621:                     proto_tree_add_item(subtree2, hf_slsk_file_size1, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "623:                     proto_tree_add_item(subtree2, hf_slsk_file_size2, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "625:                     proto_tree_add_item_ret_length(subtree2, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "626:                     uncompr_tvb_offset += str_len;",
          "628:                     proto_tree_add_item_ret_uint(subtree2, hf_slsk_file_num_attributes, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
          "632:                         subtree3 = proto_tree_add_subtree_format(subtree2, uncompr_tvb, uncompr_tvb_offset, 8, ett_slsk_file_attribute, NULL, \"Attribute #%d\", i2+1);",
          "633:                         proto_tree_add_item(subtree3, hf_slsk_file_attribute_type, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "635:                         proto_tree_add_item(subtree3, hf_slsk_file_attribute_value, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "640:                     proto_item_set_len(ti_subtree2, uncompr_tvb_offset-start_offset2);",
          "645:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_free_upload_slots, uncompr_tvb, uncompr_tvb_offset, 1, ENC_LITTLE_ENDIAN);",
          "647:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_upload_speed, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "649:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_in_queue, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "653:             ti = proto_tree_add_item(slsk_tree, hf_slsk_compr_packet, tvb, offset, -1, ENC_NA);",
          "654:             PROTO_ITEM_SET_GENERATED(ti);",
          "655:             ti = proto_tree_add_uint(slsk_tree, hf_slsk_compressed_packet_length, tvb, offset, 0, comprlen);",
          "656:             PROTO_ITEM_SET_GENERATED(ti);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "736:       case 13:",
          "737:         if (check_slsk_format(tvb, offset, \"isss\")) {",
          "752:         }",
          "753:         else if (check_slsk_format(tvb, offset, \"iss\")) {",
          "758:           offset += 4;",
          "765:         }",
          "766:       break;",
          "768:       case 14:",
          "769:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "774:           offset += 4;",
          "778:         }",
          "779:         else if (check_slsk_format(tvb, offset, \"isi*\")) {",
          "784:           offset += 4;",
          "790:           offset += 4;",
          "791:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "792:             break;",
          "793:           while (i<j){",
          "794:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "803:             }",
          "804:             i++;",
          "805:           }",
          "806:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "809:             offset += 4;",
          "810:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "811:               break;",
          "812:             while (i<j){",
          "813:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "816:                 offset += 4;",
          "817:               }",
          "818:               i++;",
          "819:             }",
          "820:           }",
          "821:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "824:             offset += 4;",
          "825:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "826:               break;",
          "827:             while (i<j){",
          "828:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
          "831:                 offset += 4;",
          "834:                 offset += 4;",
          "837:                 offset += 4;",
          "840:                 offset += 4;",
          "843:                 offset += 4;",
          "844:               }",
          "845:               i++;",
          "846:             }",
          "847:           }",
          "848:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "852:             offset += 4;",
          "853:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "854:               break;",
          "855:             while (i<j){",
          "856:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "859:                 offset += 4;",
          "860:               }",
          "861:               i++;",
          "",
          "[Removed Lines]",
          "739:           message_type = \"Say ChatRoom\";",
          "740:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "741:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "742:           offset += 4;",
          "743:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "744:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "745:           offset += 4+tvb_get_letohl(tvb, offset);",
          "746:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "747:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "748:           offset += 4+tvb_get_letohl(tvb, offset);",
          "749:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "750:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "751:           offset += 4+tvb_get_letohl(tvb, offset);",
          "755:           message_type = \"Say ChatRoom\";",
          "756:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "757:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "759:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "760:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "761:           offset += 4+tvb_get_letohl(tvb, offset);",
          "762:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "763:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "764:           offset += 4+tvb_get_letohl(tvb, offset);",
          "771:           message_type = \"Join/Add Room\";",
          "772:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "773:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "775:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "776:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "777:           offset += 4+tvb_get_letohl(tvb, offset);",
          "781:           message_type = \"Join Room User List\";",
          "782:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "783:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "785:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "786:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "787:           offset += 4+tvb_get_letohl(tvb, offset);",
          "788:           i=0; j = tvb_get_letohl(tvb, offset);",
          "789:           proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "795:               guint32 len;",
          "797:               len = tvb_get_letohl(tvb, offset);",
          "798:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "799:                 \"String #%d Length: %d\", i+1, len);",
          "800:               str = tvb_format_text(tvb, offset+4, len);",
          "801:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str, \"User #%d: %s\", i+1, str);",
          "802:               offset += 4+len;",
          "807:             i=0; j = tvb_get_letohl(tvb, offset);",
          "808:             proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "814:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "815:                   \"Status of User #%d: %s (Code: %d)\", i+1, val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "822:             i=0; j = tvb_get_letohl(tvb, offset);",
          "823:             proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "829:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "830:                   \"Average Speed of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "832:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "833:                   \"Downloadnum of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "835:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "836:                   \"Something of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "838:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "839:                   \"Files of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "841:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "842:                   \"Folders of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "849:             i=0; j = tvb_get_letohl(tvb, offset);",
          "850:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "851:               \"Number of Slotsfull Records: %d\", tvb_get_letohl(tvb, offset));",
          "857:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "858:                   \"Slots full of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "665:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "666:                      \"Say ChatRoom (Code: %02d)\", msg_code);",
          "667:           offset += 4;",
          "668:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "669:           offset += str_len;",
          "670:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "671:           offset += str_len;",
          "672:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_chat_message, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "673:           offset += str_len;",
          "677:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "678:                      \"Say ChatRoom (Code: %02d)\", msg_code);",
          "680:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "681:           offset += str_len;",
          "682:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_chat_message, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "683:           offset += str_len;",
          "690:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "691:                      \"Join/Add Room (Code: %02d)\", msg_code);",
          "693:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "694:           offset += str_len;",
          "698:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "699:                      \"Join Room User List (Code: %02d)\", msg_code);",
          "701:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "702:           offset += str_len;",
          "703:           i=0;",
          "704:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "710:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "711:               offset += str_len;",
          "716:             i=0;",
          "717:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "723:                 proto_tree_add_item(slsk_tree, hf_slsk_status_code, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "730:             i=0;",
          "731:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "737:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 20, ett_slsk_user, NULL, \"User #%d\", i+1);",
          "738:                 proto_tree_add_item(subtree, hf_slsk_average_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "740:                 proto_tree_add_item(subtree, hf_slsk_download_number, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "742:                 proto_tree_add_item(subtree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "744:                 proto_tree_add_item(subtree, hf_slsk_files, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "746:                 proto_tree_add_item(subtree, hf_slsk_directories, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "753:             i=0;",
          "754:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_slotsfull_records, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "760:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_user, NULL, \"User #%d\", i+1);",
          "761:                 proto_tree_add_item(subtree, hf_slsk_slotsfull, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "867:       case 15:",
          "868:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "873:           offset += 4;",
          "877:         }",
          "878:         else if (check_slsk_format(tvb, offset, \"i\")) {",
          "883:           offset += 4;",
          "884:         }",
          "885:       break;",
          "",
          "[Removed Lines]",
          "870:           message_type = \"Leave Room\";",
          "871:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "872:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "874:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "875:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "876:           offset += 4+tvb_get_letohl(tvb, offset);",
          "880:           message_type = \"User Info Request\";",
          "881:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "882:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "773:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "774:                      \"Leave Room (Code: %02d)\", msg_code);",
          "776:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "777:           offset += str_len;",
          "781:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "782:                      \"User Info Request (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "887:       case 16:",
          "888:         if (check_slsk_format(tvb, offset, \"issiiiiiii\")) {",
          "893:           offset += 4;",
          "901:           offset += 4;",
          "903:           offset += 4;",
          "905:           offset += 4;",
          "907:           offset += 4;",
          "909:           offset += 4;",
          "911:           offset += 4;",
          "913:           offset += 4;",
          "914:         }",
          "915:         else if (check_slsk_format(tvb, offset, \"isbiib\") || check_slsk_format(tvb, offset, \"isbsiib\")) {",
          "926:           offset += 1;",
          "927:           if ( tvb_get_guint8(tvb, offset -1 ) == 1 ) {",
          "932:           }",
          "934:           offset += 4;",
          "936:           offset += 4;",
          "939:           offset += 1;",
          "940:         }",
          "941:       break;",
          "",
          "[Removed Lines]",
          "890:           message_type = \"User Joined Room\";",
          "891:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "892:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "894:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "895:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "896:           offset += 4+tvb_get_letohl(tvb, offset);",
          "897:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "898:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "899:           offset += 4+tvb_get_letohl(tvb, offset);",
          "900:           proto_tree_add_uint(slsk_tree, hf_slsk_total_uploads, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "902:           proto_tree_add_uint(slsk_tree, hf_slsk_average_speed, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "904:           proto_tree_add_uint(slsk_tree, hf_slsk_download_number, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "906:           proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "908:           proto_tree_add_uint(slsk_tree, hf_slsk_files, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "910:           proto_tree_add_uint(slsk_tree, hf_slsk_directories, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "912:           proto_tree_add_uint(slsk_tree, hf_slsk_slotsfull, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "917:           message_type = \"User Info Reply\";",
          "918:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "919:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "920:           offset += 4;",
          "921:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "922:           proto_tree_add_item(slsk_tree, hf_slsk_user_description, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "923:           offset += 4+tvb_get_letohl(tvb, offset);",
          "924:           proto_tree_add_uint_format(slsk_tree, hf_slsk_picture_exists, tvb, offset, 1, tvb_get_guint8(tvb, offset),",
          "925:             \"Picture exists: %s (Byte: %d)\", val_to_str_const(tvb_get_guint8(tvb, offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(tvb, offset));",
          "928:             proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "929:               \"Picture Size: %d\", tvb_get_letohl(tvb, offset));",
          "930:             proto_tree_add_item(slsk_tree, hf_slsk_picture, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "931:             offset += 4+tvb_get_letohl(tvb, offset);",
          "933:           proto_tree_add_uint(slsk_tree, hf_slsk_total_uploads, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "935:           proto_tree_add_uint(slsk_tree, hf_slsk_queued_uploads, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "937:           proto_tree_add_uint_format(slsk_tree, hf_slsk_slots_available, tvb, offset, 1, tvb_get_guint8(tvb, offset),",
          "938:             \"Upload Slots available: %s (Byte: %d)\", val_to_str_const(tvb_get_guint8(tvb, offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(tvb, offset));",
          "",
          "[Added Lines]",
          "790:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "791:                      \"User Joined Room (Code: %02d)\", msg_code);",
          "793:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "794:           offset += str_len;",
          "795:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "796:           offset += str_len;",
          "797:           proto_tree_add_item(slsk_tree, hf_slsk_total_uploads, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "799:           proto_tree_add_item(slsk_tree, hf_slsk_average_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "801:           proto_tree_add_item(slsk_tree, hf_slsk_download_number, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "803:           proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "805:           proto_tree_add_item(slsk_tree, hf_slsk_files, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "807:           proto_tree_add_item(slsk_tree, hf_slsk_directories, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "809:           proto_tree_add_item(slsk_tree, hf_slsk_slotsfull, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "814:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "815:                      \"User Info Reply (Code: %02d)\", msg_code);",
          "816:           offset += 4;",
          "817:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user_description, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "818:           offset += str_len;",
          "819:           proto_tree_add_item(slsk_tree, hf_slsk_picture_exists, tvb, offset, 1, ENC_NA);",
          "822:             proto_tree_add_item_ret_length(slsk_tree, hf_slsk_picture, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "823:             offset += str_len;",
          "825:           proto_tree_add_item(slsk_tree, hf_slsk_total_uploads, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "827:           proto_tree_add_item(slsk_tree, hf_slsk_queued_uploads, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "829:           proto_tree_add_item(slsk_tree, hf_slsk_slots_available, tvb, offset, 1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "943:       case 17:",
          "944:         if (check_slsk_format(tvb, offset, \"iss\")) {",
          "949:           offset += 4;",
          "956:         }",
          "957:       break;",
          "",
          "[Removed Lines]",
          "946:           message_type = \"User Left Room\";",
          "947:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "948:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "950:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "951:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "952:           offset += 4+tvb_get_letohl(tvb, offset);",
          "953:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "954:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "955:           offset += 4+tvb_get_letohl(tvb, offset);",
          "",
          "[Added Lines]",
          "837:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "838:                      \"User Left Room (Code: %02d)\", msg_code);",
          "840:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "841:           offset += str_len;",
          "842:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "843:           offset += str_len;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "962:           guint32 len;",
          "967:           offset += 4;",
          "968:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "969:           offset += 4;",
          "970:           len = tvb_get_letohl(tvb, offset);",
          "976:           str = tvb_get_string_enc(wmem_packet_scope(), tvb, offset+4, len, ENC_ASCII);",
          "978:             \"%s (Char: %s)\", connection_type(str),",
          "979:             format_text(wmem_packet_scope(), str, len));",
          "980:           offset += 4+len;",
          "",
          "[Removed Lines]",
          "964:           message_type = \"Connect To Peer\";",
          "965:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "966:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "971:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len);",
          "972:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, len, ENC_ASCII|ENC_NA);",
          "973:           offset += 4+len;",
          "974:           len = tvb_get_letohl(tvb, offset);",
          "975:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len);",
          "977:           proto_tree_add_string_format_value(slsk_tree, hf_slsk_connection_type, tvb, offset+4, len, str,",
          "",
          "[Added Lines]",
          "852:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "853:                      \"Connect To Peer (Code: %02d)\", msg_code);",
          "857:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "858:           offset += str_len;",
          "861:           proto_tree_add_string_format_value(slsk_tree, hf_slsk_connection_type, tvb, offset, 4+len, str,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "984:           guint32 len;",
          "989:           offset += 4;",
          "990:           len = tvb_get_letohl(tvb, offset);",
          "996:           str = tvb_get_string_enc(wmem_packet_scope(), tvb, offset+4, len, ENC_ASCII);",
          "998:             \"%s (Char: %s)\", connection_type(str),",
          "999:             format_text(wmem_packet_scope(), str, len));",
          "1000:           offset += 4+len;",
          "",
          "[Removed Lines]",
          "986:           message_type = \"Connect To Peer\";",
          "987:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "988:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "991:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len);",
          "992:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, len, ENC_ASCII|ENC_NA);",
          "993:           offset += 4+len;",
          "994:           len = tvb_get_letohl(tvb, offset);",
          "995:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len);",
          "997:           proto_tree_add_string_format_value(slsk_tree, hf_slsk_connection_type, tvb, offset+4, len, str,",
          "",
          "[Added Lines]",
          "870:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "871:                      \"Connect To Peer (Code: %02d)\", msg_code);",
          "873:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "874:           offset += str_len;",
          "877:           proto_tree_add_string_format_value(slsk_tree, hf_slsk_connection_type, tvb, offset, 4+len, str,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1010:       case 22:",
          "1011:         if (check_slsk_format(tvb, offset, \"iss\")) {",
          "1016:           offset += 4;",
          "1023:         }",
          "1024:         else if (check_slsk_format(tvb, offset, \"iiiss\")) {",
          "1029:           offset += 4;",
          "1031:           offset += 4;",
          "1033:           offset += 4;",
          "1040:         }",
          "1041:       break;",
          "1043:       case 23:",
          "1044:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "1049:           offset += 4;",
          "1051:           offset += 4;",
          "1052:         }",
          "1053:       break;",
          "",
          "[Removed Lines]",
          "1013:           message_type = \"Message User Send\";",
          "1014:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1015:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1017:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1018:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1019:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1020:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1021:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1022:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1026:           message_type = \"Message User Receive\";",
          "1027:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1028:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1030:           proto_tree_add_uint(slsk_tree, hf_slsk_chat_message_id, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1032:           proto_tree_add_uint(slsk_tree, hf_slsk_timestamp, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1034:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1035:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1036:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1037:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1038:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1039:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1046:           message_type = \"Message User Receive Ack\";",
          "1047:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1048:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1050:           proto_tree_add_uint(slsk_tree, hf_slsk_chat_message_id, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "893:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "894:                      \"Message User Send (Code: %02d)\", msg_code);",
          "896:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "897:           offset += str_len;",
          "898:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_chat_message, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "899:           offset += str_len;",
          "903:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "904:                      \"Message User Receive (Code: %02d)\", msg_code);",
          "906:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message_id, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "908:           proto_tree_add_item(slsk_tree, hf_slsk_timestamp, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "910:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "911:           offset += str_len;",
          "912:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_chat_message, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "913:           offset += str_len;",
          "920:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "921:                      \"Message User Receive Ack (Code: %02d)\", msg_code);",
          "923:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message_id, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1055:       case 26:",
          "1056:         if (check_slsk_format(tvb, offset, \"iis\")) {",
          "1061:           offset += 4;",
          "1063:           offset += 4;",
          "1067:         }",
          "1068:       break;",
          "1070:       case 28:",
          "1071:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "1076:           offset += 4;",
          "1079:           offset += 4;",
          "1080:         }",
          "1081:       break;",
          "",
          "[Removed Lines]",
          "1058:           message_type = \"File Search\";",
          "1059:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1060:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1062:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1064:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1065:           proto_tree_add_item(slsk_tree, hf_slsk_search_text, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1066:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1073:           message_type = \"Set Status\";",
          "1074:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1075:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1077:           proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1078:             \"Status: %s (Code: %d)\", val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "931:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "932:                      \"File Search (Code: %02d)\", msg_code);",
          "934:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "936:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_search_text, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "937:           offset += str_len;",
          "944:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "945:                      \"Set Status (Code: %02d)\", msg_code);",
          "947:           proto_tree_add_item(slsk_tree, hf_slsk_status_code, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1083:       case 32:",
          "1084:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "1089:           offset += 4;",
          "1090:         }",
          "1091:       break;",
          "",
          "[Removed Lines]",
          "1086:           message_type = \"Ping\";",
          "1087:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1088:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "955:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "956:                      \"Ping (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1093:       case 34:",
          "1094:         if (check_slsk_format(tvb, offset, \"isi\")) {",
          "1099:           offset += 4;",
          "1104:           offset += 4;",
          "1105:         }",
          "1106:       break;",
          "",
          "[Removed Lines]",
          "1096:           message_type = \"Update Upload Speed\";",
          "1097:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1098:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1100:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1101:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1102:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1103:           proto_tree_add_uint(slsk_tree, hf_slsk_average_speed, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "964:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "965:                      \"Update Upload Speed (Code: %02d)\", msg_code);",
          "967:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "968:           offset += str_len;",
          "969:           proto_tree_add_item(slsk_tree, hf_slsk_average_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1108:       case 35:",
          "1109:         if (check_slsk_format(tvb, offset, \"iii\")) {",
          "1114:           offset += 4;",
          "1116:           offset += 4;",
          "1118:           offset += 4;",
          "1119:         }",
          "1120:       break;",
          "",
          "[Removed Lines]",
          "1111:           message_type = \"Shared Files & Folders \";",
          "1112:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1113:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1115:           proto_tree_add_uint(slsk_tree, hf_slsk_folder_count, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1117:           proto_tree_add_uint(slsk_tree, hf_slsk_file_count, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "977:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "978:                      \"Shared Files & Folders (Code: %02d)\", msg_code);",
          "980:           proto_tree_add_item(slsk_tree, hf_slsk_folder_count, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "982:           proto_tree_add_item(slsk_tree, hf_slsk_file_count, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1122:       case 36:",
          "1123:         if (check_slsk_format(tvb, offset, \"isiiiii\")) {",
          "1128:           offset += 4;",
          "1133:           offset += 4;",
          "1135:           offset += 4;",
          "1137:           offset += 4;",
          "1139:           offset += 4;",
          "1141:           offset += 4;",
          "1142:         }",
          "1143:         else if (check_slsk_format(tvb, offset, \"is\")) {",
          "1149:           offset += 4;",
          "1153:         }",
          "1154:         else if (check_slsk_format(tvb, offset, \"iis\")) {",
          "1159:           offset += 4;",
          "1161:           offset += 4;",
          "1165:         }",
          "1166:       break;",
          "1168:       case 37:",
          "1169:         if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1174:           offset += 4;",
          "",
          "[Removed Lines]",
          "1125:           message_type = \"Get User Stats Reply\";",
          "1126:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1127:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1129:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1130:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1131:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1132:           proto_tree_add_uint(slsk_tree, hf_slsk_average_speed, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1134:           proto_tree_add_uint(slsk_tree, hf_slsk_download_number, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1136:           proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1138:           proto_tree_add_uint(slsk_tree, hf_slsk_files, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1140:           proto_tree_add_uint(slsk_tree, hf_slsk_directories, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1146:           message_type = \"Get User Stats\";",
          "1147:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1148:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1150:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1151:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1152:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1156:           message_type = \"Folder Contents Request\";",
          "1157:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1158:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1160:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1162:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1163:           proto_tree_add_item(slsk_tree, hf_slsk_directory, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1164:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1171:           message_type = \"Folder Contents Response\";",
          "1172:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1173:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "990:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "991:                      \"Get User Stats Reply (Code: %02d)\", msg_code);",
          "993:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "994:           offset += str_len;",
          "995:           proto_tree_add_item(slsk_tree, hf_slsk_average_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "997:           proto_tree_add_item(slsk_tree, hf_slsk_download_number, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "999:           proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1001:           proto_tree_add_item(slsk_tree, hf_slsk_files, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1003:           proto_tree_add_item(slsk_tree, hf_slsk_directories, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1009:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1010:                      \"Get User Stats (Code: %02d)\", msg_code);",
          "1012:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1013:           offset += str_len;",
          "1017:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1018:                      \"Folder Contents Request (Code: %02d)\", msg_code);",
          "1020:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1022:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_directory, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1023:           offset += str_len;",
          "1030:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1031:                      \"Folder Contents Response (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1188:               proto_item *ti2 = proto_tree_add_item(slsk_tree, hf_slsk_compr_packet, tvb, offset, -1, ENC_NA);",
          "1189:               proto_tree *slsk_compr_packet_tree = proto_item_add_subtree(ti2, ett_slsk_compr_packet);",
          "1193:               uncomprlen = tvb_captured_length_remaining(uncompr_tvb, 0);",
          "1199:               uncompr_tvb_offset = 0;",
          "1200:               if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"isi*\")) {",
          "1201:                 guint32 len;",
          "1206:                 uncompr_tvb_offset += 4;",
          "1212:                 uncompr_tvb_offset += 4+len;",
          "1218:                 uncompr_tvb_offset += 4;",
          "1219:                 while (i<j){",
          "1220:                   if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"si*\")) {",
          "1229:                     i2 = 0;",
          "1234:                     uncompr_tvb_offset += 4;",
          "1235:                     while (i2<j2){",
          "1236:                       if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"bsiisi*\")) {",
          "1240:                         uncompr_tvb_offset += 1;",
          "1252:                         uncompr_tvb_offset += 4;",
          "1256:                         uncompr_tvb_offset += 4;",
          "1270:                         uncompr_tvb_offset += 4;",
          "1271:                         while (i3<j3){",
          "1272:                           if (check_slsk_format(uncompr_tvb, uncompr_tvb_offset, \"ii*\")) {",
          "1277:                             uncompr_tvb_offset += 4;",
          "1282:                             uncompr_tvb_offset += 4;",
          "1283:                           }",
          "1285:                         }",
          "1286:                       }",
          "1287:                       i2++;",
          "1288:                     }",
          "1289:                   }",
          "1290:                   i++;",
          "1291:                 }",
          "1292:               }",
          "1293:             }",
          "1294:           }else {",
          "1299:             offset += tvb_captured_length_remaining(tvb, offset);",
          "1300:           }",
          "1301:         }",
          "",
          "[Removed Lines]",
          "1191:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "1192:                 \"[compressed packet length: %d]\", comprlen);",
          "1194:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "1195:                 \"[uncompressed packet length: %d]\", uncomprlen);",
          "1197:               add_new_data_source(pinfo, uncompr_tvb,",
          "1198:                   \"Uncompressed SoulSeek data\");",
          "1203:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1204:                   uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "1205:                   \"Token: %d\", tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "1207:                 len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1208:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "1209:                   uncompr_tvb, uncompr_tvb_offset, 4, len,",
          "1210:                   \"Directory Name String Length: %u\", len);",
          "1211:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset+4, len, ENC_ASCII|ENC_NA);",
          "1214:                 i=0; j = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1215:                 proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1216:                   uncompr_tvb_offset, 4, j,",
          "1217:                   \"Number of directories: %d\", j);",
          "1221:                     len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1222:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "1223:                       uncompr_tvb, uncompr_tvb_offset, 4, len,",
          "1224:                       \"Directory #%d Name String Length: %u\", i+1, len);",
          "1225:                     str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "1226:                     proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset+4, len,",
          "1227:                       str, \"Directory #%d Name: %s\", i+1, str);",
          "1228:                     uncompr_tvb_offset += 4+len;",
          "1230:                     j2 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1231:                     proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1232:                       uncompr_tvb_offset, 4, j2,",
          "1233:                       \"Directory #%d Number of files: %d\", i+1, j2);",
          "1237:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_byte,",
          "1238:                           uncompr_tvb, uncompr_tvb_offset, 1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset),",
          "1239:                           \"Dir #%d File #%d Code: %d\", i+1, i2+1, tvb_get_guint8(uncompr_tvb, uncompr_tvb_offset));",
          "1241:                         len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1242:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "1243:                           uncompr_tvb, uncompr_tvb_offset, 4, len,",
          "1244:                           \"Dir #%d File #%d String Length: %d\", i+1, i2+1, len);",
          "1245:                         str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "1246:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "1247:                           \"Dir #%d File #%d Filename: %s\", i+1, i2+1, str);",
          "1248:                         uncompr_tvb_offset += 4+len;",
          "1249:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "1250:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "1251:                           \"Dir #%d File #%d Size1: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "1253:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer,",
          "1254:                           uncompr_tvb, uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "1255:                           \"Dir #%d File #%d Size2: %d\", i+1, i2+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "1257:                         len = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1258:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_string_length,",
          "1259:                           uncompr_tvb, uncompr_tvb_offset, 4, len,",
          "1260:                           \"Dir #%d File #%d String Length: %d\", i+1, i2+1, len);",
          "1261:                         str = tvb_format_text(uncompr_tvb, uncompr_tvb_offset+4, len);",
          "1262:                         proto_tree_add_string_format(slsk_compr_packet_tree, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset+4, len, str,",
          "1263:                           \"Dir #%d File #%d ext: %s\", i+1, i2+1, str);",
          "1264:                         uncompr_tvb_offset += 4+len;",
          "1265:                         i3 = 0;",
          "1266:                         j3 = tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset);",
          "1267:                         proto_tree_add_uint_format(slsk_compr_packet_tree, hf_slsk_integer, uncompr_tvb,",
          "1268:                           uncompr_tvb_offset, 4, j3,",
          "1269:                           \"Dir #%d File #%d Number of attributes: %d\", i+1, i2+1, j3);",
          "1273:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "1274:                               hf_slsk_integer, uncompr_tvb,",
          "1275:                               uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "1276:                               \"Dir #%d File #%d Attr #%d type: %s (Code: %d)\", i+1, i2+1, i3+1, val_to_str_const(tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset), slsk_attr_type, \"Unknown\"), tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "1278:                             proto_tree_add_uint_format(slsk_compr_packet_tree,",
          "1279:                               hf_slsk_integer, uncompr_tvb,",
          "1280:                               uncompr_tvb_offset, 4, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset),",
          "1281:                               \"Dir #%d File #%d Attr #%d value: %d\", i+1, i2+1, i3+1, tvb_get_letohl(uncompr_tvb, uncompr_tvb_offset));",
          "1284:                           i3++;",
          "1295:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "1296:               \"[zlib compressed packet]\");",
          "1297:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, -1, 0,",
          "1298:               \"(  compressed packet length: %d)\", comprlen);",
          "",
          "[Added Lines]",
          "1048:               PROTO_ITEM_SET_GENERATED(ti2);",
          "1050:               ti = proto_tree_add_uint(slsk_tree, hf_slsk_compressed_packet_length, tvb, offset, 0, comprlen);",
          "1051:               PROTO_ITEM_SET_GENERATED(ti);",
          "1053:               ti = proto_tree_add_uint(slsk_tree, hf_slsk_uncompressed_packet_length, tvb, offset, 0, uncomprlen);",
          "1054:               PROTO_ITEM_SET_GENERATED(ti);",
          "1055:               add_new_data_source(pinfo, uncompr_tvb, \"Uncompressed SoulSeek data\");",
          "1061:                 proto_tree_add_item(slsk_compr_packet_tree, hf_slsk_token, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "1063:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &len);",
          "1066:                 i=0;",
          "1067:                 proto_tree_add_item_ret_uint(slsk_compr_packet_tree, hf_slsk_num_directories, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1071:                     start_offset = uncompr_tvb_offset;",
          "1072:                     subtree = proto_tree_add_subtree_format(slsk_compr_packet_tree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_directory, &ti_subtree, \"Directory #%d\", i+1);",
          "1073:                     proto_tree_add_item_ret_length(subtree, hf_slsk_directory_name, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1074:                     uncompr_tvb_offset += str_len;",
          "1076:                     proto_tree_add_item_ret_uint(subtree, hf_slsk_num_files, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j2);",
          "1080:                         start_offset2 = uncompr_tvb_offset;",
          "1081:                         subtree2 = proto_tree_add_subtree_format(subtree, uncompr_tvb, uncompr_tvb_offset, 1, ett_slsk_file, &ti_subtree2, \"File #%d\", i2+1);",
          "1082:                         proto_tree_add_item(subtree2, hf_slsk_file_code, uncompr_tvb, uncompr_tvb_offset, 1, ENC_NA);",
          "1084:                         proto_tree_add_item_ret_length(subtree2, hf_slsk_filename, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1085:                         uncompr_tvb_offset += str_len;",
          "1086:                         proto_tree_add_item(subtree2, hf_slsk_file_size1, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "1088:                         proto_tree_add_item(subtree2, hf_slsk_file_size2, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "1090:                         proto_tree_add_item_ret_length(subtree2, hf_slsk_filename_ext, uncompr_tvb, uncompr_tvb_offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1091:                         uncompr_tvb_offset += str_len;",
          "1092:                         i3=0;",
          "1093:                         proto_tree_add_item_ret_uint(subtree2, hf_slsk_file_num_attributes, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN, &j3);",
          "1097:                             subtree3 = proto_tree_add_subtree_format(subtree2, uncompr_tvb, uncompr_tvb_offset, 8, ett_slsk_file_attribute, NULL, \"Attribute #%d\", i3+1);",
          "1098:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_type, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "1100:                             proto_tree_add_item(subtree3, hf_slsk_file_attribute_value, uncompr_tvb, uncompr_tvb_offset, 4, ENC_LITTLE_ENDIAN);",
          "1102:                             i3++;",
          "1105:                         proto_item_set_len(ti_subtree2, uncompr_tvb_offset-start_offset2);",
          "1109:                     proto_item_set_len(ti_subtree, uncompr_tvb_offset-start_offset);",
          "1116:             ti = proto_tree_add_item(slsk_tree, hf_slsk_compr_packet, tvb, offset, -1, ENC_NA);",
          "1117:             PROTO_ITEM_SET_GENERATED(ti);",
          "1118:             ti = proto_tree_add_uint(slsk_tree, hf_slsk_compressed_packet_length, tvb, offset, 0, comprlen);",
          "1119:             PROTO_ITEM_SET_GENERATED(ti);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1304:       case 40:",
          "1305:         if (check_slsk_format(tvb, offset, \"isi\")) {",
          "1310:           offset += 4;",
          "1315:           offset += 4;",
          "1316:         }",
          "1317:         else if (check_slsk_format(tvb, offset, \"iiis\") || check_slsk_format(tvb, offset, \"iiisii\")) {",
          "1322:           offset += 4;",
          "1326:           offset += 4;",
          "1328:           offset += 4;",
          "1332:           if (i == 1){",
          "1334:             offset += 4;",
          "1336:             offset += 4;",
          "1337:           }",
          "1338:         }",
          "",
          "[Removed Lines]",
          "1307:           message_type = \"Queued Downloads\";",
          "1308:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1309:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1311:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1312:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1313:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1314:           proto_tree_add_uint(slsk_tree, hf_slsk_slotsfull, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1319:           message_type = \"Transfer Request\";",
          "1320:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1321:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1323:           i = tvb_get_letohl(tvb, offset);",
          "1324:           proto_tree_add_uint_format(slsk_tree, hf_slsk_transfer_direction, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1325:             \"Transfer Direction: %s (Code: %d)\", val_to_str_const(tvb_get_letohl(tvb, offset), slsk_transfer_direction, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "1327:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1329:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1330:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1331:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1333:             proto_tree_add_uint(slsk_tree, hf_slsk_size, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1335:             proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1128:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1129:                      \"Queued Downloads (Code: %02d)\", msg_code);",
          "1131:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1132:           offset += str_len;",
          "1133:           proto_tree_add_item(slsk_tree, hf_slsk_slotsfull, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1138:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1139:                      \"Transfer Request (Code: %02d)\", msg_code);",
          "1141:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_transfer_direction, tvb, offset, 4, ENC_LITTLE_ENDIAN, &i);",
          "1143:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1145:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1146:           offset += str_len;",
          "1148:             proto_tree_add_item(slsk_tree, hf_slsk_size, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1150:             proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1342:       case 41:",
          "1343:         if (check_slsk_format(tvb, offset, \"iibs\") || check_slsk_format(tvb, offset, \"iibii\") || check_slsk_format(tvb, offset, \"iib\")) {",
          "1348:           offset += 4;",
          "1350:           offset += 4;",
          "1351:           i = tvb_get_guint8(tvb, offset);",
          "1354:           offset += 1;",
          "1355:           if ( i == 1 ) {",
          "1356:             if ( tvb_reported_length_remaining(tvb, offset) == 8 ) {",
          "1358:               offset += 4;",
          "1360:               offset += 4;",
          "1361:             }",
          "1362:           } else {",
          "1366:           }",
          "1367:         }",
          "1368:       break;",
          "",
          "[Removed Lines]",
          "1345:           message_type = \"Transfer Response\";",
          "1346:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1347:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1349:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1352:           proto_tree_add_uint_format(slsk_tree, hf_slsk_allowed, tvb, offset, 1, tvb_get_guint8(tvb, offset),",
          "1353:             \"Download allowed: %s (Byte: %d)\", val_to_str_const(tvb_get_guint8(tvb, offset), slsk_yes_no, \"Unknown\"), tvb_get_guint8(tvb, offset));",
          "1357:               proto_tree_add_uint(slsk_tree, hf_slsk_size, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1359:               proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1363:             proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1364:             proto_tree_add_item(slsk_tree, hf_slsk_string, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1365:             offset += 4+tvb_get_letohl(tvb, offset);",
          "",
          "[Added Lines]",
          "1160:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1161:                      \"Transfer Response (Code: %02d)\", msg_code);",
          "1163:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1166:           proto_tree_add_item(slsk_tree, hf_slsk_allowed, tvb, offset, 1, ENC_NA);",
          "1170:               proto_tree_add_item(slsk_tree, hf_slsk_size, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1172:               proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1176:             proto_tree_add_item_ret_length(slsk_tree, hf_slsk_string, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1177:             offset += str_len;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1370:       case 42:",
          "1371:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1376:           offset += 4;",
          "1380:         }",
          "1381:       break;",
          "1383:       case 43:",
          "1384:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1389:           offset += 4;",
          "1393:         }",
          "1394:       break;",
          "1396:       case 44:",
          "1397:         if (check_slsk_format(tvb, offset, \"isi\")) {",
          "1402:           offset += 4;",
          "1407:           offset += 4;",
          "1408:         }",
          "1409:       break;",
          "",
          "[Removed Lines]",
          "1373:           message_type = \"Placehold Upload\";",
          "1374:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1375:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1377:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1378:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1379:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1386:           message_type = \"Queue Upload\";",
          "1387:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1388:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1390:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1391:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1392:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1399:           message_type = \"Place In Queue\";",
          "1400:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1401:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1403:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1404:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1405:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1406:           proto_tree_add_uint(slsk_tree, hf_slsk_place_in_queue, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1185:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1186:                      \"Placehold Upload (Code: %02d)\", msg_code);",
          "1188:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1189:           offset += str_len;",
          "1196:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1197:                      \"Queue Upload (Code: %02d)\", msg_code);",
          "1199:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1200:           offset += str_len;",
          "1207:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1208:                      \"Place In Queue (Code: %02d)\", msg_code);",
          "1210:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1211:           offset += str_len;",
          "1212:           proto_tree_add_item(slsk_tree, hf_slsk_place_in_queue, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1411:       case 46:",
          "1412:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1417:           offset += 4;",
          "1421:         }",
          "1422:       break;",
          "1424:       case 50:",
          "1425:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1430:           offset += 4;",
          "1434:         }",
          "1435:         else if (check_slsk_format(tvb, offset, \"isi\")) {",
          "1440:           offset += 4;",
          "1445:           offset += 4;",
          "1446:         }",
          "1447:         else if (check_slsk_format(tvb, offset, \"iss\")) {",
          "1452:           offset += 4;",
          "1459:         }",
          "1460:       break;",
          "",
          "[Removed Lines]",
          "1414:           message_type = \"Upload Failed\";",
          "1415:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1416:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1418:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1419:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1420:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1427:           message_type = \"Make Own Recommendation\";",
          "1428:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1429:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1431:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1432:           proto_tree_add_item(slsk_tree, hf_slsk_recommendation, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1433:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1437:           message_type = \"Remove Own Recommendation\";",
          "1438:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1439:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1441:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1442:           proto_tree_add_item(slsk_tree, hf_slsk_recommendation, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1443:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1444:           proto_tree_add_uint(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1449:           message_type = \"Queue Failed\";",
          "1450:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1451:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1453:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1454:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1455:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1456:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1457:           proto_tree_add_item(slsk_tree, hf_slsk_string, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1458:           offset += 4+tvb_get_letohl(tvb, offset);",
          "",
          "[Added Lines]",
          "1220:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1221:                      \"Upload Failed (Code: %02d)\", msg_code);",
          "1223:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1224:           offset += str_len;",
          "1231:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1232:                      \"Make Own Recommendation (Code: %02d)\", msg_code);",
          "1234:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1235:           offset += str_len;",
          "1239:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1240:                      \"Remove Own Recommendation (Code: %02d)\", msg_code);",
          "1242:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1243:           offset += str_len;",
          "1244:           proto_tree_add_item(slsk_tree, hf_slsk_ranking, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1249:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1250:                      \"Queue Failed (Code: %02d)\", msg_code);",
          "1252:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1253:           offset += str_len;",
          "1254:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_string, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1255:           offset += str_len;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1463:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1469:           offset += 4;",
          "1473:         }",
          "1474:       break;",
          "1476:       case 52:",
          "1477:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1482:           offset += 4;",
          "1486:         }",
          "1487:       break;",
          "1489:       case 54:",
          "1490:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "1495:           offset += 4;",
          "1496:         }",
          "1497:         else if (check_slsk_format(tvb, offset, \"ii*\")) {",
          "1502:           offset += 4;",
          "1506:           offset += 4;",
          "1507:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1508:             break;",
          "1509:           while (i<j){",
          "1510:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "1522:               offset += 4;",
          "1523:             }",
          "1524:             i++;",
          "1525:           }",
          "",
          "[Removed Lines]",
          "1466:           message_type = \"Add Things I like / Place In Queue Request\";",
          "1467:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1468:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1470:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1471:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1472:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1479:           message_type = \"Remove Things I like\";",
          "1480:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1481:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1483:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1484:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1485:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1492:           message_type = \"Get Recommendations\";",
          "1493:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1494:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1499:           message_type = \"Get Recommendations Reply\";",
          "1500:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1501:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1503:           i=0; j = tvb_get_letohl(tvb, offset);",
          "1504:           proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1505:             \"Number of Recommendations: %d\", tvb_get_letohl(tvb, offset));",
          "1511:               guint32 len;",
          "1513:               len = tvb_get_letohl(tvb, offset);",
          "1514:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "1515:                 \"String #%d Length: %d\", i+1, len);",
          "1516:               str = tvb_format_text(tvb, offset+4, len);",
          "1517:               proto_tree_add_string_format(slsk_tree, hf_slsk_recommendation, tvb, offset+4, len, str,",
          "1518:                 \"Recommendation #%d: %s\", i+1, str);",
          "1519:               offset += 4+len;",
          "1520:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1521:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1263:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1264:                      \"Add Things I like / Place In Queue Request (Code: %02d)\", msg_code);",
          "1266:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1267:           offset += str_len;",
          "1274:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1275:                      \"Remove Things I like (Code: %02d)\", msg_code);",
          "1277:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1278:           offset += str_len;",
          "1285:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1286:                      \"Get Recommendations (Code: %02d)\", msg_code);",
          "1291:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1292:                      \"Get Recommendations Reply (Code: %02d)\", msg_code);",
          "1294:           i=0;",
          "1295:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1301:               start_offset = offset;",
          "1302:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
          "1303:               proto_tree_add_item_ret_length(subtree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1304:               offset += str_len;",
          "1305:               proto_tree_add_item(subtree, hf_slsk_ranking, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1307:               proto_item_set_len(ti_subtree, offset-start_offset);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1529:       case 55:",
          "1530:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "1535:           offset += 4;",
          "1536:         }",
          "1537:       break;",
          "",
          "[Removed Lines]",
          "1532:           message_type = \"Type 55\";",
          "1533:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1534:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "1317:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1318:                      \"Type 55 (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1539:       case 56:",
          "1540:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "1545:           offset += 4;",
          "1546:         }",
          "1547:         else if (check_slsk_format(tvb, offset, \"ii*\")) {",
          "1552:           offset += 4;",
          "1556:           offset += 4;",
          "1557:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1558:             break;",
          "1559:           while (i<j){",
          "1560:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "1572:               offset += 4;",
          "1573:             }",
          "1574:             i++;",
          "1575:           }",
          "",
          "[Removed Lines]",
          "1542:           message_type = \"Get Global Rankings\";",
          "1543:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1544:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1549:           message_type = \"Get Global Rankings Reply\";",
          "1550:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1551:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1553:           i=0; j = tvb_get_letohl(tvb, offset);",
          "1554:           proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1555:             \"Number of Recommendations: %d\", tvb_get_letohl(tvb, offset));",
          "1561:               guint32 len;",
          "1563:               len = tvb_get_letohl(tvb, offset);",
          "1564:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "1565:                 \"String #%d Length: %d\", i+1, len);",
          "1566:               str = tvb_format_text(tvb, offset+4, len);",
          "1567:               proto_tree_add_string_format(slsk_tree, hf_slsk_recommendation, tvb, offset+4, len, str,",
          "1568:                 \"Recommendation #%d: %s\", i+1, str);",
          "1569:               offset += 4+len;",
          "1570:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1571:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1326:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1327:                      \"Get Global Rankings (Code: %02d)\", msg_code);",
          "1332:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1333:                      \"Get Global Rankings Reply (Code: %02d)\", msg_code);",
          "1335:           i=0;",
          "1336:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1342:               start_offset = offset;",
          "1343:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
          "1344:               proto_tree_add_item_ret_length(subtree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1345:               offset += str_len;",
          "1346:               proto_tree_add_item(subtree, hf_slsk_ranking, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1348:               proto_item_set_len(ti_subtree, offset-start_offset);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1579:       case 57:",
          "1580:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1585:           offset += 4;",
          "1589:         }",
          "1590:         else if (check_slsk_format(tvb, offset, \"isi*\")) {",
          "1595:           offset += 4;",
          "1602:           offset += 4;",
          "1603:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1604:             break;",
          "1605:           while (i<j){",
          "1606:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1616:             }",
          "1617:             i++;",
          "1618:           }",
          "",
          "[Removed Lines]",
          "1582:           message_type = \"Get User Recommendations\";",
          "1583:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1584:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1586:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1587:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1588:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1592:           message_type = \"Get User Recommendations Reply\";",
          "1593:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1594:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1596:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1597:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1598:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1599:           i=0; j = tvb_get_letohl(tvb, offset);",
          "1600:           proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1601:             \"Number of Recommendations: %d\", tvb_get_letohl(tvb, offset));",
          "1607:               guint32 len;",
          "1609:               len = tvb_get_letohl(tvb, offset);",
          "1610:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "1611:                 \"String #%d Length: %d\", i+1, len);",
          "1612:               str = tvb_format_text(tvb, offset+4, len);",
          "1613:               proto_tree_add_string_format(slsk_tree, hf_slsk_recommendation, tvb, offset+4, len, str,",
          "1614:                 \"Recommendation #%d: %s\", i+1, str);",
          "1615:               offset += 4+len;",
          "",
          "[Added Lines]",
          "1358:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1359:                      \"Get User Recommendations (Code: %02d)\", msg_code);",
          "1361:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1362:           offset += str_len;",
          "1366:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1367:                      \"Get User Recommendations Reply (Code: %02d)\", msg_code);",
          "1369:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1370:           offset += str_len;",
          "1371:           i=0;",
          "1372:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1378:               start_offset = offset;",
          "1379:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
          "1380:               proto_tree_add_item_ret_length(subtree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1381:               offset += str_len;",
          "1382:               proto_item_set_len(ti_subtree, offset-start_offset);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1622:       case 58:",
          "1623:         if (check_slsk_format(tvb, offset, \"isi*\")) {",
          "1628:           offset += 4;",
          "1632:           i=0; j = tvb_get_letohl(tvb, offset);",
          "1635:           offset += 4;",
          "1636:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1637:             break;",
          "1638:           while (i<j){",
          "1639:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1649:             }",
          "1650:             i++;",
          "1651:           }",
          "",
          "[Removed Lines]",
          "1625:           message_type = \"Admin Command\";",
          "1626:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1627:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1629:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1630:           proto_tree_add_item(slsk_tree, hf_slsk_string, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1631:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1633:           proto_tree_add_uint_format(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1634:             \"Number of Strings: %d\", tvb_get_letohl(tvb, offset));",
          "1640:               guint32 len;",
          "1642:               len = tvb_get_letohl(tvb, offset);",
          "1643:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "1644:                 \"String #%d Length: %d\", i+1, len);",
          "1645:               str = tvb_format_text(tvb, offset+4, len);",
          "1646:               proto_tree_add_string_format(slsk_tree, hf_slsk_string, tvb, offset+4, len, str,",
          "1647:                 \"String #%d: %s\", i+1, str);",
          "1648:               offset += 4+len;",
          "",
          "[Added Lines]",
          "1392:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1393:                      \"Admin Command (Code: %02d)\", msg_code);",
          "1395:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_string, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1396:           offset += str_len;",
          "1398:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_strings, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1404:               start_offset = offset;",
          "1405:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_string, &ti_subtree, \"String #%d\", i+1);",
          "1406:               proto_tree_add_item_ret_length(subtree, hf_slsk_string, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1407:               offset += str_len;",
          "1408:               proto_item_set_len(ti_subtree, offset-start_offset);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1655:       case 60:",
          "1656:         if (check_slsk_format(tvb, offset, \"isii\")) {",
          "1661:           offset += 4;",
          "1666:           offset += 4;",
          "1668:           offset += 4;",
          "1669:         }",
          "1670:       break;",
          "",
          "[Removed Lines]",
          "1658:           message_type = \"Place In Line Response\";",
          "1659:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1660:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1662:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1663:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1664:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1665:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1667:           proto_tree_add_uint(slsk_tree, hf_slsk_place_in_queue, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1418:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1419:                      \"Place In Line Response (Code: %02d)\", msg_code);",
          "1421:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1422:           offset += str_len;",
          "1423:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1425:           proto_tree_add_item(slsk_tree, hf_slsk_place_in_queue, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1672:       case 62:",
          "1673:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1678:           offset += 4;",
          "1682:         }",
          "1683:       break;",
          "1685:       case 63:",
          "1686:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1691:           offset += 4;",
          "1695:         }",
          "1696:       break;",
          "1698:       case 64:",
          "1699:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "1704:           offset += 4;",
          "1705:         }",
          "1706:         else if (check_slsk_format(tvb, offset, \"ii*\")) {",
          "1711:           offset += 4;",
          "1714:           offset += 4;",
          "1715:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1716:             break;",
          "1717:           while (i<j){",
          "1718:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1728:             }",
          "1729:             i++;",
          "1730:           }",
          "1731:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1732:             i=0;",
          "1734:             offset += 4;",
          "1735:             while (i<j){",
          "1736:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1739:                 offset += 4;",
          "1740:               }",
          "1741:               i++;",
          "",
          "[Removed Lines]",
          "1675:           message_type = \"Room Added\";",
          "1676:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1677:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1679:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1680:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1681:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1688:           message_type = \"Room Removed\";",
          "1689:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1690:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1692:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1693:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1694:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1701:           message_type = \"Room List Request\";",
          "1702:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1703:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1708:           message_type = \"Room List\";",
          "1709:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1710:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1712:           i=0; j = tvb_get_letohl(tvb, offset);",
          "1713:           proto_tree_add_uint(slsk_tree, hf_slsk_number_of_rooms, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1719:               guint32 len;",
          "1721:               len = tvb_get_letohl(tvb, offset);",
          "1722:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "1723:                 \"String #%d Length: %d\", i+1, len);",
          "1724:               str = tvb_format_text(tvb, offset+4, len);",
          "1725:               proto_tree_add_string_format(slsk_tree, hf_slsk_room, tvb, offset+4, len, str,",
          "1726:                 \"Room #%d: %s\", i+1, str);",
          "1727:               offset += 4+len;",
          "1733:             proto_tree_add_uint(slsk_tree, hf_slsk_number_of_rooms, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1737:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1738:                   \"Users in Room #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1433:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1434:                      \"Room Added (Code: %02d)\", msg_code);",
          "1436:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1437:           offset += str_len;",
          "1444:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1445:                      \"Room Removed (Code: %02d)\", msg_code);",
          "1447:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1448:           offset += str_len;",
          "1455:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1456:                      \"Room List Request (Code: %02d)\", msg_code);",
          "1461:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1462:                      \"Room List (Code: %02d)\", msg_code);",
          "1464:           i=0;",
          "1465:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_number_of_rooms, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1471:               start_offset = offset;",
          "1472:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_room, &ti_subtree, \"Room #%d\", i+1);",
          "1473:               proto_tree_add_item_ret_length(subtree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1474:               offset += str_len;",
          "1475:               proto_item_set_len(ti_subtree, offset-start_offset);",
          "1481:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1485:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_room, &ti_subtree, \"Room #%d\", i+1);",
          "1486:                 proto_tree_add_item(subtree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1747:       case 65:",
          "1748:         if (check_slsk_format(tvb, offset, \"isissiii\")) {",
          "1767:           offset += 12;",
          "1768:         }",
          "1769:         else if (check_slsk_format(tvb, offset, \"iissiiib\")) {",
          "1785:           offset += 13;",
          "1786:         }",
          "1787:       break;",
          "",
          "[Removed Lines]",
          "1750:           message_type = \"Exact File Search\";",
          "1751:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1752:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1753:           offset += 4;",
          "1754:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1755:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1756:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1757:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1758:           offset += 4;",
          "1759:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1760:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1761:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1762:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1763:           proto_tree_add_item(slsk_tree, hf_slsk_directory, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1764:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1765:           proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 16, 0,",
          "1766:             \"(+12 0 bytes)\");",
          "1771:           message_type = \"Exact File Search\";",
          "1772:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1773:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1774:           offset += 4;",
          "1775:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1776:           offset += 4;",
          "1777:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1778:           proto_tree_add_item(slsk_tree, hf_slsk_filename, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1779:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1780:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1781:           proto_tree_add_item(slsk_tree, hf_slsk_directory, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1782:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1783:           proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 13, 0,",
          "1784:             \"(+13 0 bytes)\");",
          "",
          "[Added Lines]",
          "1498:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1499:                      \"Exact File Search (Code: %02d)\", msg_code);",
          "1500:           offset += 4;",
          "1501:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1502:           offset += str_len;",
          "1503:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1504:           offset += 4;",
          "1505:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1506:           offset += str_len;",
          "1507:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_directory, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1508:           offset += str_len;",
          "1509:           proto_tree_add_item(slsk_tree, hf_slsk_bytes, tvb, offset, 16, ENC_NA);",
          "1514:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1515:                      \"Exact File Search (Code: %02d)\", msg_code);",
          "1516:           offset += 4;",
          "1517:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1518:           offset += 4;",
          "1519:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_filename, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1520:           offset += str_len;",
          "1521:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_directory, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1522:           offset += str_len;",
          "1523:           proto_tree_add_item(slsk_tree, hf_slsk_bytes, tvb, offset, 13, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1789:       case 66:",
          "1790:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "1795:           offset += 4;",
          "1799:         }",
          "1800:       break;",
          "1802:       case 67:",
          "1803:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "1808:           offset += 4;",
          "1809:         }",
          "1815:           offset += 4;",
          "1821:           offset += 4;",
          "1822:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1823:             break;",
          "1824:           while (i<j){",
          "1825:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1834:             }",
          "1835:             i++;",
          "1836:           }",
          "1837:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1840:             offset += 4;",
          "1841:             while (i<j){",
          "1842:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1845:                 offset += 4;",
          "1846:               }",
          "1847:               i++;",
          "1848:             }",
          "1849:           }",
          "1850:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1853:             offset += 4;",
          "1854:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "1855:               break;",
          "1856:             while (i<j){",
          "1857:               if (check_slsk_format(tvb, offset, \"iiiii*\")) {",
          "1860:                 offset += 4;",
          "1863:                 offset += 4;",
          "1866:                 offset += 4;",
          "1869:                 offset += 4;",
          "1872:                 offset += 4;",
          "1873:               }",
          "1874:               i++;",
          "1875:             }",
          "1876:           }",
          "1877:           if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1881:             offset += 4;",
          "1882:             if (j > tvb_reported_length_remaining(tvb, offset))",
          "1883:               break;",
          "1884:             while (i<j){",
          "1885:               if (check_slsk_format(tvb, offset, \"i*\")) {",
          "1888:                 offset += 4;",
          "1889:               }",
          "1890:               i++;",
          "",
          "[Removed Lines]",
          "1792:           message_type = \"Admin Message\";",
          "1793:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1794:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1796:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1797:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1798:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1805:           message_type = \"Global User List Request\";",
          "1806:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1807:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1812:           message_type = \"Global User List\";",
          "1813:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1814:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1816:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1817:           proto_tree_add_item(slsk_tree, hf_slsk_room, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1818:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1819:           i=0; j = tvb_get_letohl(tvb, offset);",
          "1820:           proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1826:               guint32 len;",
          "1828:               len = tvb_get_letohl(tvb, offset);",
          "1829:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "1830:                 \"String #%d Length: %d\", i+1, len);",
          "1831:               str = tvb_format_text(tvb, offset+4, len);",
          "1832:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str, \"User #%d: %s\", i+1, str);",
          "1833:               offset += 4+len;",
          "1838:             i=0; j = tvb_get_letohl(tvb, offset);",
          "1839:             proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, j);",
          "1843:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_status_code, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1844:                   \"Status of User #%d: %s (Code: %d)\", i+1, val_to_str_const(tvb_get_letohl(tvb, offset), slsk_status_codes, \"Unknown\"), tvb_get_letohl(tvb, offset));",
          "1851:             i=0; j = tvb_get_letohl(tvb, offset);",
          "1852:             proto_tree_add_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1858:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1859:                   \"Average Speed of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1861:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1862:                   \"Downloadnum of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1864:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1865:                   \"Something of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1867:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1868:                   \"Files of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1870:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1871:                   \"Folders of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "1878:             i=0; j = tvb_get_letohl(tvb, offset);",
          "1879:             proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1880:               \"Number of Slotsfull Records: %d\", tvb_get_letohl(tvb, offset));",
          "1886:                 proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1887:                   \"Slots full of User #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1531:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1532:                      \"Admin Message (Code: %02d)\", msg_code);",
          "1534:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_chat_message, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1535:           offset += str_len;",
          "1542:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1543:                      \"Global User List Request (Code: %02d)\", msg_code);",
          "1548:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1549:                      \"Global User List (Code: %02d)\", msg_code);",
          "1551:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_room, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1552:           offset += str_len;",
          "1553:           i=0;",
          "1554:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1560:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1561:               offset += str_len;",
          "1566:             i=0;",
          "1567:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1571:                 proto_tree_add_item(slsk_tree, hf_slsk_status_code, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1578:             i=0;",
          "1579:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_users_in_room, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1585:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 20, ett_slsk_user, NULL, \"User #%d\", i+1);",
          "1586:                 proto_tree_add_item(subtree, hf_slsk_average_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1588:                 proto_tree_add_item(subtree, hf_slsk_download_number, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1590:                 proto_tree_add_item(subtree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1592:                 proto_tree_add_item(subtree, hf_slsk_files, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1594:                 proto_tree_add_item(subtree, hf_slsk_directories, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1601:             i=0;",
          "1602:             proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_slotsfull_records, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1608:                 subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_user, NULL, \"User #%d\", i+1);",
          "1609:                 proto_tree_add_item(subtree, hf_slsk_slotsfull, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1896:       case 68:",
          "1897:         if (check_slsk_format(tvb, offset, \"isiiiis\")) {",
          "1901:           offset += 4;",
          "1906:           offset += 4;",
          "1908:           offset += 4;",
          "1910:           offset += 4;",
          "1912:           offset += 4;",
          "1916:         }",
          "1917:       break;",
          "1919:       case 69:",
          "1920:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "1925:           offset += 4;",
          "1926:         }",
          "1927:         else if (check_slsk_format(tvb, offset, \"ii*\")) {",
          "1932:           offset += 4;",
          "1936:           offset += 4;",
          "1937:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "1938:             break;",
          "1939:           while (i<j){",
          "1940:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "1950:             }",
          "1951:             i++;",
          "1952:           }",
          "",
          "[Removed Lines]",
          "1898:           message_type = \"Tunneled Message\";",
          "1899:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1900:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1902:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1903:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1904:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1905:           proto_tree_add_uint(slsk_tree, hf_slsk_code, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1907:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1909:           proto_tree_add_ipv4(slsk_tree, hf_slsk_ip, tvb, offset, 4, tvb_get_ntohl(tvb, offset));",
          "1911:           proto_tree_add_uint(slsk_tree, hf_slsk_port, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1913:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "1914:           proto_tree_add_item(slsk_tree, hf_slsk_chat_message, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "1915:           offset += 4+tvb_get_letohl(tvb, offset);",
          "1922:           message_type = \"Privileged User List Request\";",
          "1923:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1924:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1929:           message_type = \"Privileged User List\";",
          "1930:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1931:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1933:           i=0; j = tvb_get_letohl(tvb, offset);",
          "1934:           proto_tree_add_uint_format(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "1935:             \"Number of Privileged Users: %d\", tvb_get_letohl(tvb, offset));",
          "1941:               guint32 len;",
          "1943:               len = tvb_get_letohl(tvb, offset);",
          "1944:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "1945:                 \"String #%d Length: %d\", i+1, len);",
          "1946:               str = tvb_format_text(tvb, offset+4, len);",
          "1947:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str,",
          "1948:                 \"User #%d: %s\", i+1, str);",
          "1949:               offset += 4+len;",
          "",
          "[Added Lines]",
          "1620:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1621:                      \"Tunneled Message (Code: %02d)\", msg_code);",
          "1623:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1624:           offset += str_len;",
          "1625:           proto_tree_add_item(slsk_tree, hf_slsk_code, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1627:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1629:           proto_tree_add_item(slsk_tree, hf_slsk_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1631:           proto_tree_add_item(slsk_tree, hf_slsk_port, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1633:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_chat_message, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1634:           offset += str_len;",
          "1641:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1642:                      \"Privileged User List Request (Code: %02d)\", msg_code);",
          "1647:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1648:                      \"Privileged User List (Code: %02d)\", msg_code);",
          "1650:           i=0;",
          "1651:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_number_of_priv_users, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1657:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1658:               offset += str_len;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1956:       case 71:",
          "1957:         if (check_slsk_format(tvb, offset, \"ib\")) {",
          "1962:           offset += 4;",
          "1964:           offset += 1;",
          "1965:         }",
          "1966:       break;",
          "",
          "[Removed Lines]",
          "1959:           message_type = \"Get Parent List\";",
          "1960:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1961:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1963:           proto_tree_add_uint(slsk_tree, hf_slsk_byte, tvb, offset, 1, tvb_get_guint8(tvb, offset));",
          "",
          "[Added Lines]",
          "1668:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1669:                      \"Get Parent List (Code: %02d)\", msg_code);",
          "1671:           proto_tree_add_item(slsk_tree, hf_slsk_byte, tvb, offset, 1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1968:       case 73:",
          "1969:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "1974:           offset += 4;",
          "1976:           offset += 4;",
          "1977:         }",
          "1978:       break;",
          "",
          "[Removed Lines]",
          "1971:           message_type = \"Type 73\";",
          "1972:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1973:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1975:           proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1679:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1680:                      \"Type 73 (Code: %02d)\", msg_code);",
          "1682:           proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1980:       case 83:",
          "1981:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "1986:           offset += 4;",
          "1988:           offset += 4;",
          "1989:         }",
          "1990:       break;",
          "",
          "[Removed Lines]",
          "1983:           message_type = \"Parent Min Speed\";",
          "1984:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1985:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1987:           proto_tree_add_uint(slsk_tree, hf_slsk_parent_min_speed, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1690:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1691:                      \"Parent Min Speed (Code: %02d)\", msg_code);",
          "1693:           proto_tree_add_item(slsk_tree, hf_slsk_parent_min_speed, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1992:       case 84:",
          "1993:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "1998:           offset += 4;",
          "2000:           offset += 4;",
          "2001:         }",
          "2002:       break;",
          "",
          "[Removed Lines]",
          "1995:           message_type = \"Parent Speed Connection Ratio\";",
          "1996:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1997:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "1999:           proto_tree_add_uint(slsk_tree, hf_slsk_parent_speed_connection_ratio, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1701:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1702:                      \"Parent Speed Connection Ratio (Code: %02d)\", msg_code);",
          "1704:           proto_tree_add_item(slsk_tree, hf_slsk_parent_speed_connection_ratio, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2004:       case 86:",
          "2005:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "2010:           offset += 4;",
          "2012:           offset += 4;",
          "2013:         }",
          "2014:       break;",
          "",
          "[Removed Lines]",
          "2007:           message_type = \"Parent Inactivity Before Disconnect\";",
          "2008:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2009:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2011:           proto_tree_add_uint(slsk_tree, hf_slsk_seconds_parent_inactivity_before_disconnect, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1712:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1713:                      \"Parent Inactivity Before Disconnect (Code: %02d)\", msg_code);",
          "1715:           proto_tree_add_item(slsk_tree, hf_slsk_seconds_parent_inactivity_before_disconnect, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2016:       case 87:",
          "2017:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "2022:           offset += 4;",
          "2024:           offset += 4;",
          "2025:         }",
          "2026:       break;",
          "",
          "[Removed Lines]",
          "2019:           message_type = \"Server Inactivity Before Disconnect\";",
          "2020:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2021:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2023:           proto_tree_add_uint(slsk_tree, hf_slsk_seconds_server_inactivity_before_disconnect, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1723:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1724:                      \"Server Inactivity Before Disconnect (Code: %02d)\", msg_code);",
          "1726:           proto_tree_add_item(slsk_tree, hf_slsk_seconds_server_inactivity_before_disconnect, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2028:       case 88:",
          "2029:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "2034:           offset += 4;",
          "2036:           offset += 4;",
          "2037:         }",
          "2038:       break;",
          "",
          "[Removed Lines]",
          "2031:           message_type = \"Nodes In Cache Before Disconnect\";",
          "2032:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2033:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2035:           proto_tree_add_uint(slsk_tree, hf_slsk_nodes_in_cache_before_disconnect, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1734:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1735:                      \"Nodes In Cache Before Disconnect (Code: %02d)\", msg_code);",
          "1737:           proto_tree_add_item(slsk_tree, hf_slsk_nodes_in_cache_before_disconnect, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2040:       case 90:",
          "2041:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "2046:           offset += 4;",
          "2048:           offset += 4;",
          "2049:         }",
          "2050:       break;",
          "",
          "[Removed Lines]",
          "2043:           message_type = \"Seconds Before Ping Children\";",
          "2044:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2045:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2047:           proto_tree_add_uint(slsk_tree, hf_slsk_seconds_before_ping_children, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1745:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1746:                      \"Seconds Before Ping Children (Code: %02d)\", msg_code);",
          "1748:           proto_tree_add_item(slsk_tree, hf_slsk_seconds_before_ping_children, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2052:       case 91:",
          "2053:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "2058:           offset += 4;",
          "2062:         }",
          "2063:       break;",
          "2065:       case 92:",
          "2066:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "2071:           offset += 4;",
          "2072:         }",
          "2073:         else if (check_slsk_format(tvb, offset, \"ii\")) {",
          "2078:           offset += 4;",
          "2080:           offset += 4;",
          "2081:         }",
          "2082:       break;",
          "",
          "[Removed Lines]",
          "2055:           message_type = \"Add To Privileged\";",
          "2056:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2057:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2059:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2060:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2061:           offset += 4+tvb_get_letohl(tvb, offset);",
          "2068:           message_type = \"Check Privileges\";",
          "2069:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2070:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2075:           message_type = \"Check Privileges Reply\";",
          "2076:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2077:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2079:           proto_tree_add_uint(slsk_tree, hf_slsk_number_of_days, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1756:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1757:                      \"Add To Privileged (Code: %02d)\", msg_code);",
          "1759:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1760:           offset += str_len;",
          "1767:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1768:                      \"Check Privileges (Code: %02d)\", msg_code);",
          "1773:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1774:                      \"Check Privileges Reply (Code: %02d)\", msg_code);",
          "1776:           proto_tree_add_item(slsk_tree, hf_slsk_number_of_days, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2084:       case 93:",
          "2085:         if (check_slsk_format(tvb, offset, \"ibisis\")) {",
          "2090:           offset += 4;",
          "2091:           if ( tvb_get_guint8(tvb, offset) == 3 ){",
          "2096:             offset += 1;",
          "2098:             offset += 4;",
          "2103:             offset += 4;",
          "2107:           }",
          "2108:         }",
          "2109:       break;",
          "",
          "[Removed Lines]",
          "2087:           message_type = \"Embedded Message\";",
          "2088:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2089:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2093:             message_type = \"Distributed Search\";",
          "2094:             proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 1, msg_code,",
          "2095:                        \"Embedded Message Type: %s (Byte: %d)\", message_type, 3);",
          "2097:             proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2099:             proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2100:             proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2101:             offset += 4+tvb_get_letohl(tvb, offset);",
          "2102:             proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2104:             proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2105:             proto_tree_add_item(slsk_tree, hf_slsk_search_text, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2106:             offset += 4+tvb_get_letohl(tvb, offset);",
          "",
          "[Added Lines]",
          "1784:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1785:                      \"Embedded Message (Code: %02d)\", msg_code);",
          "1789:             proto_tree_add_uint_format_value(slsk_tree, hf_slsk_embedded_message_type, tvb, offset, 1, msg_code,",
          "1790:                        \"Distributed Search (Byte: %d)\", 3);",
          "1792:             proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1794:             proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1795:             offset += str_len;",
          "1796:             proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1798:             proto_tree_add_item_ret_length(slsk_tree, hf_slsk_search_text, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1799:             offset += str_len;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2111:       case 100:",
          "2112:         if (check_slsk_format(tvb, offset, \"ib\")) {",
          "2117:           offset += 4;",
          "2119:           offset += 1;",
          "2120:         }",
          "2121:       break;",
          "",
          "[Removed Lines]",
          "2114:           message_type = \"Become Parent\";",
          "2115:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2116:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2118:           proto_tree_add_uint(slsk_tree, hf_slsk_byte, tvb, offset, 1, tvb_get_guint8(tvb, offset));",
          "",
          "[Added Lines]",
          "1807:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1808:                      \"Become Parent (Code: %02d)\", msg_code);",
          "1810:           proto_tree_add_item(slsk_tree, hf_slsk_byte, tvb, offset, 1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2123:       case 102:",
          "2124:         if (check_slsk_format(tvb, offset, \"ii*\")) {",
          "2129:           offset += 4;",
          "2133:           offset += 4;",
          "2134:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2135:             break;",
          "2136:           while (i<j){",
          "2137:             if (check_slsk_format(tvb, offset, \"sii*\")) {",
          "2147:               proto_tree_add_item(slsk_tree, hf_slsk_ip, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2148:               offset += 4;",
          "2151:               offset += 4;",
          "2152:             }",
          "2153:             i++;",
          "",
          "[Removed Lines]",
          "2126:           message_type = \"Random Parent Addresses\";",
          "2127:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2128:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2130:           i=0; j = tvb_get_letohl(tvb, offset);",
          "2131:           proto_tree_add_uint_format(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2132:             \"Number of Parent Addresses: %d\", tvb_get_letohl(tvb, offset));",
          "2138:               guint32 len;",
          "2140:               len = tvb_get_letohl(tvb, offset);",
          "2141:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "2142:                 \"String #%d Length: %d\", i+1, len);",
          "2143:               str = tvb_format_text(tvb, offset+4, len);",
          "2144:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str,",
          "2145:                 \"User #%d: %s\", i+1, str);",
          "2146:               offset += 4+len;",
          "2149:               proto_tree_add_uint_format(slsk_tree, hf_slsk_port, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2150:                 \"Port Number #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1818:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1819:                      \"Random Parent Addresses (Code: %02d)\", msg_code);",
          "1821:           i=0;",
          "1822:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_parent_address, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1829:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1830:               offset += str_len;",
          "1833:               proto_tree_add_item(slsk_tree, hf_slsk_port, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2158:       case 103:",
          "2159:         if (check_slsk_format(tvb, offset, \"iis\")) {",
          "2164:           offset += 4;",
          "2166:           offset += 4;",
          "2170:         }",
          "2171:       break;",
          "2173:       case 104:",
          "2174:         if (check_slsk_format(tvb, offset, \"ii\")) {",
          "2179:           offset += 4;",
          "2181:           offset += 4;",
          "2182:         }",
          "2183:       break;",
          "",
          "[Removed Lines]",
          "2161:           message_type = \"Send Wishlist Entry\";",
          "2162:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2163:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2165:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2167:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2168:           proto_tree_add_item(slsk_tree, hf_slsk_search_text, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2169:           offset += 4+tvb_get_letohl(tvb, offset);",
          "2176:           message_type = \"Type 104\";",
          "2177:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2178:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2180:           proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1844:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1845:                      \"Send Wishlist Entry (Code: %02d)\", msg_code);",
          "1847:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1849:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_search_text, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1850:           offset += str_len;",
          "1857:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1858:                      \"Type 104 (Code: %02d)\", msg_code);",
          "1860:           proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2185:       case 110:",
          "2186:         if (check_slsk_format(tvb, offset, \"i\")) {",
          "2191:           offset += 4;",
          "2192:         }",
          "2193:         else if (check_slsk_format(tvb, offset, \"ii*\")) {",
          "2198:           offset += 4;",
          "2199:           i=0; j = tvb_get_letohl(tvb, offset);",
          "2200:           proto_tree_add_item(slsk_tree, hf_slsk_number_of_users, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "2188:           message_type = \"Get Similar Users\";",
          "2189:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2190:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2195:           message_type = \"Get Similar Users Reply\";",
          "2196:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2197:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "",
          "[Added Lines]",
          "1868:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1869:                      \"Get Similar Users (Code: %02d)\", msg_code);",
          "1874:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1875:                      \"Get Similar Users Reply (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2203:             break;",
          "2204:           while (i<j){",
          "2205:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "2217:               offset += 4;",
          "2218:             }",
          "2219:             i++;",
          "2220:           }",
          "",
          "[Removed Lines]",
          "2206:               guint32 len;",
          "2208:               len = tvb_get_letohl(tvb, offset);",
          "2209:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "2210:                 \"String #%d Length: %d\", i+1, len);",
          "2211:               str = tvb_format_text(tvb, offset+4, len);",
          "2212:               proto_tree_add_string_format(slsk_tree, hf_slsk_user, tvb, offset+4, len, str,",
          "2213:                 \"User #%d: %s\", i+1, str);",
          "2214:               offset += 4+len;",
          "2215:               proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2216:                 \"Same Recommendations #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1884:               start_offset = offset;",
          "1885:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 4, ett_slsk_user, &ti_subtree, \"User #%d\", i+1);",
          "1886:               proto_tree_add_item_ret_length(subtree, hf_slsk_user, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1887:               offset += str_len;",
          "1888:               proto_tree_add_item(subtree, hf_slsk_same_recommendation, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1890:               proto_item_set_len(ti_subtree, offset-start_offset);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2224:       case 111:",
          "2225:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "2230:           offset += 4;",
          "2234:         }",
          "2235:         else if (check_slsk_format(tvb, offset, \"isi*\")) {",
          "2240:           offset += 4;",
          "2247:           offset += 4;",
          "2248:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2249:             break;",
          "2250:           while (i<j){",
          "2251:             if (check_slsk_format(tvb, offset, \"si*\")) {",
          "2263:               offset += 4;",
          "2264:             }",
          "2265:             i++;",
          "2266:           }",
          "",
          "[Removed Lines]",
          "2227:           message_type = \"Get Recommendations for Item\";",
          "2228:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2229:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2231:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2232:           proto_tree_add_item(slsk_tree, hf_slsk_recommendation, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2233:           offset += 4+tvb_get_letohl(tvb, offset);",
          "2237:           message_type = \"Get Recommendations for Item Reply\";",
          "2238:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2239:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2241:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2242:           proto_tree_add_item(slsk_tree, hf_slsk_recommendation, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2243:           offset += 4+tvb_get_letohl(tvb, offset);",
          "2244:           i=0; j = tvb_get_letohl(tvb, offset);",
          "2245:           proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2246:             \"Number of Recommendations: %d\", tvb_get_letohl(tvb, offset));",
          "2252:               guint32 len;",
          "2254:               len = tvb_get_letohl(tvb, offset);",
          "2255:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "2256:                 \"String #%d Length: %d\", i+1, len);",
          "2257:               str = tvb_format_text(tvb, offset+4, len);",
          "2258:               proto_tree_add_string_format(slsk_tree, hf_slsk_recommendation, tvb, offset+4, len, str,",
          "2259:                 \"Recommendation #%d: %s\", i+1, str);",
          "2260:               offset += 4+len;",
          "2261:               proto_tree_add_uint_format(slsk_tree, hf_slsk_ranking, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2262:                 \"Ranking #%d: %d\", i+1, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1900:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1901:                      \"Get Recommendations for Item (Code: %02d)\", msg_code);",
          "1903:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1904:           offset += str_len;",
          "1908:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1909:                      \"Get Recommendations for Item Reply (Code: %02d)\", msg_code);",
          "1911:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1912:           offset += str_len;",
          "1913:           i=0;",
          "1914:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1920:               start_offset = offset;",
          "1921:               subtree = proto_tree_add_subtree_format(slsk_tree, tvb, offset, 1, ett_slsk_recommendation, &ti_subtree, \"Recommendation #%d\", i+1);",
          "1922:               proto_tree_add_item_ret_length(subtree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1923:               offset += str_len;",
          "1924:               proto_tree_add_item(subtree, hf_slsk_ranking, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1926:               proto_item_set_len(ti_subtree, offset-start_offset);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2270:       case 112:",
          "2271:         if (check_slsk_format(tvb, offset, \"is\")) {",
          "2276:           offset += 4;",
          "2280:         }",
          "2281:         else if (check_slsk_format(tvb, offset, \"isi*\")) {",
          "2286:           offset += 4;",
          "2293:           offset += 4;",
          "2294:           if (j > tvb_reported_length_remaining(tvb, offset))",
          "2295:             break;",
          "2296:           while (i<j){",
          "2297:             if (check_slsk_format(tvb, offset, \"s*\")) {",
          "2307:             }",
          "2308:             i++;",
          "2309:           }",
          "",
          "[Removed Lines]",
          "2273:           message_type = \"Get Similar Users for Item\";",
          "2274:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2275:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2277:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2278:           proto_tree_add_item(slsk_tree, hf_slsk_recommendation, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2279:           offset += 4+tvb_get_letohl(tvb, offset);",
          "2283:           message_type = \"Get Similar Users for Item Reply\";",
          "2284:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2285:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2287:           proto_tree_add_item(slsk_tree, hf_slsk_string_length, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2288:           proto_tree_add_item(slsk_tree, hf_slsk_recommendation, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2289:           offset += 4+tvb_get_letohl(tvb, offset);",
          "2290:           i=0; j = tvb_get_letohl(tvb, offset);",
          "2291:           proto_tree_add_uint_format(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset),",
          "2292:             \"Number of Recommendations: %d\", tvb_get_letohl(tvb, offset));",
          "2298:               guint32 len;",
          "2300:               len = tvb_get_letohl(tvb, offset);",
          "2301:               proto_tree_add_uint_format(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len,",
          "2302:                 \"String #%d Length: %d\", i+1, len);",
          "2303:               str = tvb_format_text(tvb, offset+4, len);",
          "2304:               proto_tree_add_string_format(slsk_tree, hf_slsk_username, tvb, offset+4, len, str,",
          "2305:                 \"Username #%d: %s\", i+1, str);",
          "2306:               offset += 4+len;",
          "",
          "[Added Lines]",
          "1936:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1937:                      \"Get Similar Users for Item (Code: %02d)\", msg_code);",
          "1939:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1940:           offset += str_len;",
          "1944:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1945:                      \"Get Similar Users for Item Reply (Code: %02d)\", msg_code);",
          "1947:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_recommendation, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1948:           offset += str_len;",
          "1949:           i=0;",
          "1950:           proto_tree_add_item_ret_uint(slsk_tree, hf_slsk_num_recommendations, tvb, offset, 4, ENC_LITTLE_ENDIAN, &j);",
          "1956:               proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1957:               offset += str_len;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2313:       case 1001:",
          "2314:         if (check_slsk_format(tvb, offset, \"iis\")) {",
          "2319:           offset += 4;",
          "2321:           offset += 4;",
          "2325:         }",
          "2326:         else if (check_slsk_format(tvb, offset, \"ii\")) {",
          "2331:           offset += 4;",
          "2333:           offset += 4;",
          "2334:         }",
          "2335:       break;",
          "",
          "[Removed Lines]",
          "2316:           message_type = \"Can't Connect To Peer\";",
          "2317:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2318:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2320:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2322:           proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2323:           proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2324:           offset += 4+tvb_get_letohl(tvb, offset);",
          "2328:           message_type = \"Can't Connect To Peer\";",
          "2329:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2330:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2332:           proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "",
          "[Added Lines]",
          "1967:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1968:                      \"Can't Connect To Peer (Code: %02d)\", msg_code);",
          "1970:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1972:           proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1973:           offset += str_len;",
          "1977:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "1978:                      \"Can't Connect To Peer (Code: %02d)\", msg_code);",
          "1980:           proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2338:         if (check_slsk_format(tvb, offset, \"bisis\")) {",
          "2339:           if ( tvb_get_guint8(tvb, offset) == 3 ){",
          "2344:             offset += 1;",
          "2346:             offset += 4;",
          "2351:             offset += 4;",
          "2355:           }",
          "2356:         }",
          "2357:         else if (check_slsk_format(tvb, offset, \"bssi\")) {",
          "",
          "[Removed Lines]",
          "2341:             message_type = \"Distributed Search\";",
          "2342:             proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 1, msg_code,",
          "2343:                        \"Message Type: %s (Byte: %d)\", message_type, 3);",
          "2345:             proto_tree_add_uint(slsk_tree, hf_slsk_integer, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2347:             proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2348:             proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2349:             offset += 4+tvb_get_letohl(tvb, offset);",
          "2350:             proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2352:             proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2353:             proto_tree_add_item(slsk_tree, hf_slsk_search_text, tvb, offset+4, tvb_get_letohl(tvb, offset), ENC_ASCII|ENC_NA);",
          "2354:             offset += 4+tvb_get_letohl(tvb, offset);",
          "",
          "[Added Lines]",
          "1989:             proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 1, msg_code,",
          "1990:                        \"Distributed Search (Byte: %d)\", 3);",
          "1992:             proto_tree_add_item(slsk_tree, hf_slsk_integer, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1994:             proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1995:             offset += str_len;",
          "1996:             proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1998:             proto_tree_add_item_ret_length(slsk_tree, hf_slsk_search_text, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "1999:             offset += str_len;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2360:             guint32 len;",
          "2365:             offset += 1;",
          "2366:             len = tvb_get_letohl(tvb, offset);",
          "2372:             str = tvb_get_string_enc(wmem_packet_scope(), tvb, offset+4, len, ENC_ASCII);",
          "2374:               \"%s (Char: %s)\", connection_type(str),",
          "2375:               format_text(wmem_packet_scope(), str, len));",
          "2376:             offset += 4+len;",
          "2378:             offset += 4;",
          "2379:           }",
          "2380:         }",
          "2381:         else if (check_slsk_format(tvb, offset, \"bi\")) {",
          "2382:           if ( tvb_get_guint8(tvb, offset) == 0 ){",
          "2387:             offset += 1;",
          "2389:             offset += 4;",
          "2390:           }",
          "2391:         }",
          "2392:         else {",
          "2396:           offset += 4;",
          "2397:         }",
          "2398:       break;",
          "2400:     }",
          "2403:   if(offset < (int)msg_len){",
          "2404:    expert_add_info(pinfo, ti_len, &ei_slsk_unknown_data);",
          "2405:   }",
          "",
          "[Removed Lines]",
          "2362:             message_type = \"Peer Init\";",
          "2363:             proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 1, msg_code,",
          "2364:                        \"Message Type: %s (Byte: %d)\", message_type, 1);",
          "2367:             proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len);",
          "2368:             proto_tree_add_item(slsk_tree, hf_slsk_username, tvb, offset+4, len, ENC_ASCII|ENC_NA);",
          "2369:             offset += 4+len;",
          "2370:             len = tvb_get_letohl(tvb, offset);",
          "2371:             proto_tree_add_uint(slsk_tree, hf_slsk_string_length, tvb, offset, 4, len);",
          "2373:             proto_tree_add_string_format_value(slsk_tree, hf_slsk_connection_type, tvb, offset+4, len, str,",
          "2377:             proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2384:             message_type = \"Pierce Fw\";",
          "2385:             proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 1, msg_code,",
          "2386:                        \"Message Type: %s (Byte: %d)\", message_type, 0);",
          "2388:             proto_tree_add_uint(slsk_tree, hf_slsk_token, tvb, offset, 4, tvb_get_letohl(tvb, offset));",
          "2393:           message_type = \"Unknown\";",
          "2394:           proto_tree_add_uint_format(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2395:                      \"Message Type: %s (Code: %02d)\", message_type, msg_code);",
          "2402:   }",
          "",
          "[Added Lines]",
          "2007:             proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 1, msg_code,",
          "2008:                        \"Peer Init (Byte: %d)\", 1);",
          "2010:             proto_tree_add_item_ret_length(slsk_tree, hf_slsk_username, tvb, offset, 4, ENC_ASCII|ENC_LITTLE_ENDIAN, &str_len);",
          "2011:             offset += str_len;",
          "2014:             proto_tree_add_string_format_value(slsk_tree, hf_slsk_connection_type, tvb, offset, 4+len, str,",
          "2018:             proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2025:             proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 1, msg_code,",
          "2026:                        \"Pierce Fw (Byte: %d)\", 0);",
          "2028:             proto_tree_add_item(slsk_tree, hf_slsk_token, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2033:           proto_tree_add_uint_format_value(slsk_tree, hf_slsk_message_code, tvb, offset, 4, msg_code,",
          "2034:                      \"Unknown (Code: %02d)\", msg_code);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2428:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2429:     { &hf_slsk_string,",
          "2430:       { \"String\", \"slsk.string\",",
          "2432:     { &hf_slsk_byte,",
          "2433:       { \"Byte\", \"slsk.byte\",",
          "2434:       FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "2431:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "[Added Lines]",
          "2069:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2436:       { \"Message Length\", \"slsk.message.length\",",
          "2437:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2438:     { &hf_slsk_message_code,",
          "2440:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2441:     { &hf_slsk_client_ip,",
          "2442:       { \"Client IP\", \"slsk.client.ip\",",
          "",
          "[Removed Lines]",
          "2439:       { \"Message Code\", \"slsk.message.code\",",
          "",
          "[Added Lines]",
          "2077:       { \"Message Type\", \"slsk.message.code\",",
          "2078:       FT_UINT32, BASE_DEC, NULL, 0, \"Message Code with type string\", HFILL } },",
          "2079:     { &hf_slsk_embedded_message_type,",
          "2080:       { \"Embedded Message Type\", \"slsk.embedded_message.code\",",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2446:       { \"SoulSeek Server IP\", \"slsk.server.ip\",",
          "2447:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2448: #endif",
          "2452:     { &hf_slsk_directory_name,",
          "2453:       { \"Directory name\", \"slsk.directory_name\",",
          "2455:     { &hf_slsk_username,",
          "2456:       { \"Username\", \"slsk.username\",",
          "2458:     { &hf_slsk_password,",
          "2459:       { \"Password\", \"slsk.password\",",
          "2461:     { &hf_slsk_version,",
          "2462:       { \"Version\", \"slsk.version\",",
          "2463:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2464:     { &hf_slsk_login_successful,",
          "2465:       { \"Login successful\", \"slsk.login.successful\",",
          "2467:     { &hf_slsk_login_message,",
          "2468:       { \"Login Message\", \"slsk.login.message\",",
          "2470:     { &hf_slsk_port,",
          "2471:       { \"Port Number\", \"slsk.port.number\",",
          "2472:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "2449:     { &hf_slsk_string_length,",
          "2450:       { \"String Length\", \"slsk.string.length\",",
          "2451:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2454:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2457:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2460:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2466:       FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2469:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "[Added Lines]",
          "2092:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2095:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2098:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2104:       FT_UINT8, BASE_DEC, VALS(slsk_yes_no), 0, NULL, HFILL } },",
          "2107:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2475:       FT_IPv4, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2476:     { &hf_slsk_user_exists,",
          "2477:       { \"User exists\", \"slsk.user.exists\",",
          "2479:     { &hf_slsk_status_code,",
          "2480:       { \"Status Code\", \"slsk.status.code\",",
          "2482:     { &hf_slsk_room,",
          "2483:       { \"Room\", \"slsk.room\",",
          "2485:     { &hf_slsk_chat_message,",
          "2486:       { \"Chat Message\", \"slsk.chat.message\",",
          "2488:     { &hf_slsk_users_in_room,",
          "2489:       { \"Users in Room\", \"slsk.room.users\",",
          "2490:       FT_UINT32, BASE_DEC, NULL, 0, \"Number of Users in Room\", HFILL } },",
          "",
          "[Removed Lines]",
          "2478:       FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2481:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2484:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2487:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "[Added Lines]",
          "2116:       FT_UINT8, BASE_DEC, VALS(slsk_yes_no), 0, NULL, HFILL } },",
          "2119:       FT_UINT32, BASE_DEC, VALS(slsk_status_codes), 0, NULL, HFILL } },",
          "2122:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2125:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2502:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2503:     { &hf_slsk_search_text,",
          "2504:       { \"Search Text\", \"slsk.search.text\",",
          "2506:     { &hf_slsk_folder_count,",
          "2507:       { \"Folder Count\", \"slsk.folder.count\",",
          "2508:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "2505:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "[Added Lines]",
          "2143:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2532:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2533:     { &hf_slsk_filename,",
          "2534:       { \"Filename\", \"slsk.filename\",",
          "2536:     { &hf_slsk_filename_ext,",
          "2537:       { \"Filename ext\", \"slsk.filename_ext\",",
          "2539:     { &hf_slsk_directory,",
          "2540:       { \"Directory\", \"slsk.directory\",",
          "2542:     { &hf_slsk_size,",
          "2543:       { \"Size\", \"slsk.size\",",
          "2544:       FT_UINT32, BASE_DEC, NULL, 0, \"File Size\", HFILL } },",
          "",
          "[Removed Lines]",
          "2535:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2538:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2541:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "[Added Lines]",
          "2173:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2176:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2179:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2558:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2559:     { &hf_slsk_transfer_direction,",
          "2560:       { \"Transfer Direction\", \"slsk.transfer.direction\",",
          "2562:     { &hf_slsk_user_description,",
          "2563:       { \"User Description\", \"slsk.user.description\",",
          "2565:     { &hf_slsk_picture_exists,",
          "2566:       { \"Picture exists\", \"slsk.user.picture.exists\",",
          "2568:     { &hf_slsk_picture,",
          "2571: #if 0",
          "2572:     { &hf_slsk_user_uploads,",
          "2573:       { \"User uploads\", \"slsk.uploads.user\",",
          "",
          "[Removed Lines]",
          "2561:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2564:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2567:       FT_UINT8, BASE_DEC, NULL, 0, \"User has a picture\", HFILL } },",
          "2569:       { \"Picture\", \"slsk.user.picture\",",
          "2570:       FT_STRING, BASE_NONE, NULL, 0, \"User Picture\", HFILL } },",
          "",
          "[Added Lines]",
          "2199:       FT_UINT32, BASE_DEC, VALS(slsk_transfer_direction), 0, NULL, HFILL } },",
          "2202:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2205:       FT_UINT8, BASE_DEC, VALS(slsk_yes_no), 0, \"User has a picture\", HFILL } },",
          "2207:       { \"User Picture\", \"slsk.user.picture\",",
          "2208:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2581:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2582:     { &hf_slsk_slots_available,",
          "2583:       { \"Upload Slots available\", \"slsk.uploads.available\",",
          "2585:     { &hf_slsk_allowed,",
          "2586:       { \"Download allowed\", \"slsk.user.allowed\",",
          "2588:     { &hf_slsk_compr_packet,",
          "2591:     { &hf_slsk_parent_min_speed,",
          "2592:       { \"Parent Min Speed\", \"slsk.parent.min.speed\",",
          "2593:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "2584:       FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2587:       FT_UINT8, BASE_DEC, NULL, 0, \"allowed\", HFILL } },",
          "2589:       { \"[zlib compressed packet]\", \"slsk.compr.packet\",",
          "2590:       FT_NONE, BASE_NONE, NULL, 0, \"zlib compressed packet\", HFILL } },",
          "",
          "[Added Lines]",
          "2222:       FT_UINT8, BASE_DEC, VALS(slsk_yes_no), 0, NULL, HFILL } },",
          "2225:       FT_UINT8, BASE_DEC, VALS(slsk_yes_no), 0, NULL, HFILL } },",
          "2227:       { \"zlib compressed packet\", \"slsk.compr.packet\",",
          "2228:       FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2608:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2609:     { &hf_slsk_recommendation,",
          "2610:       { \"Recommendation\", \"slsk.recommendation\",",
          "2612:     { &hf_slsk_user,",
          "2613:       { \"User\", \"slsk.user\",",
          "2615:     { &hf_slsk_ranking,",
          "2616:       { \"Ranking\", \"slsk.ranking\",",
          "2617:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2618:   };",
          "2621:   static gint *ett[] = {",
          "2622:     &ett_slsk,",
          "2623:     &ett_slsk_compr_packet,",
          "2624:   };",
          "2626:   static ei_register_info ei[] = {",
          "2627:      { &ei_slsk_unknown_data, { \"slsk.unknown_data\", PI_UNDECODED, PI_WARN, \"Unknown Data (not interpreted)\", EXPFILL }},",
          "2628:      { &ei_slsk_zlib_decompression_failed, { \"slsk.zlib_decompression_failed\", PI_PROTOCOL, PI_WARN, \"zlib compressed packet failed to decompress\", EXPFILL }},",
          "2629:   };",
          "2631:   module_t *slsk_module;",
          "",
          "[Removed Lines]",
          "2611:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2614:       FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "",
          "[Added Lines]",
          "2249:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2252:       FT_UINT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2256:     { &hf_slsk_compressed_packet_length,",
          "2257:       { \"Compressed packet length\", \"slsk.compressed_packet_length\",",
          "2258:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2259:     { &hf_slsk_uncompressed_packet_length,",
          "2260:       { \"Uncompressed packet length\", \"slsk.uncompressed_packet_length\",",
          "2261:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2262:     { &hf_slsk_num_directories,",
          "2263:       { \"Number of directories\", \"slsk.num_directories\",",
          "2264:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2265:     { &hf_slsk_upload_speed,",
          "2266:       { \"Upload speed\", \"slsk.upload_speed\",",
          "2267:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2268:     { &hf_slsk_in_queue,",
          "2269:       { \"In Queue\", \"slsk.in_queue\",",
          "2270:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2271:     { &hf_slsk_num_slotsfull_records,",
          "2272:       { \"Number of Slotsfull Records\", \"slsk.num_slotsfull_records\",",
          "2273:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2274:     { &hf_slsk_num_recommendations,",
          "2275:       { \"Number of Recommendations\", \"slsk.num_recommendations\",",
          "2276:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2277:     { &hf_slsk_num_files,",
          "2278:       { \"Number of Files\", \"slsk.num_files\",",
          "2279:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2280:     { &hf_slsk_num_strings,",
          "2281:       { \"Number of Files\", \"slsk.num_strings\",",
          "2282:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2283:     { &hf_slsk_file_code,",
          "2284:       { \"Code\", \"slsk.file_code\",",
          "2285:       FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2286:     { &hf_slsk_file_size1,",
          "2287:       { \"Size1\", \"slsk.file_size1\",",
          "2288:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2289:     { &hf_slsk_file_size2,",
          "2290:       { \"Size2\", \"slsk.file_size2\",",
          "2291:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2292:     { &hf_slsk_file_num_attributes,",
          "2293:       { \"Number of attributes\", \"slsk.file_num_attributes\",",
          "2294:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2295:     { &hf_slsk_file_attribute_type,",
          "2296:       { \"Number of attributes\", \"slsk.file_attribute_type\",",
          "2297:       FT_UINT32, BASE_DEC, VALS(slsk_attr_type), 0, NULL, HFILL } },",
          "2298:     { &hf_slsk_file_attribute_value,",
          "2299:       { \"Number of attributes\", \"slsk.file_attribute_value\",",
          "2300:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2301:     { &hf_slsk_free_upload_slots,",
          "2302:       { \"Free upload slots\", \"slsk.free_upload_slots\",",
          "2303:       FT_UINT32, BASE_DEC, VALS(slsk_yes_no), 0, NULL, HFILL } },",
          "2304:     { &hf_slsk_bytes,",
          "2305:       { \"Bytes\", \"slsk.bytes\",",
          "2306:       FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "2307:     { &hf_slsk_same_recommendation,",
          "2308:       { \"Same Recommendation\", \"slsk.same_recommendation\",",
          "2309:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2310:     { &hf_slsk_number_of_priv_users,",
          "2311:       { \"Number of Privileged Users\", \"slsk.priv_user.count\",",
          "2312:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2313:     { &hf_slsk_num_parent_address,",
          "2314:       { \"Number of Parent Addresses\", \"slsk.parent_addr.count\",",
          "2315:       FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "2323:     &ett_slsk_directory,",
          "2324:     &ett_slsk_file,",
          "2325:     &ett_slsk_file_attribute,",
          "2326:     &ett_slsk_user,",
          "2327:     &ett_slsk_recommendation,",
          "2328:     &ett_slsk_room,",
          "2329:     &ett_slsk_string,",
          "2335:      { &ei_slsk_decompression_failed, { \"slsk.decompression_failed\", PI_PROTOCOL, PI_WARN, \"decompression failed\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}