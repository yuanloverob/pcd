{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c4ad849921ff0840deca5285d8934e898b1261cd",
      "candidate_info": {
        "commit_hash": "c4ad849921ff0840deca5285d8934e898b1261cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c4ad849921ff0840deca5285d8934e898b1261cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "When UNSAFE_IN_VIEW is disabled, only allow functions in views that are tagged with SQLITE_INNOCUOUS.\n\nFossilOrigin-Name: 9ee79b254e4c51a2a41f7ed49ad389d8d7105e649483adb79772052fa0ade3c0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 002406df22995880d002be2e4cebb4d560283d4e0d7a4b5a34edcb110802b543",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1761:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1762:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1764:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1766: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1763:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|SQLITE_SUBTYPE);",
          "",
          "[Added Lines]",
          "1763:   assert( SQLITE_FUNC_SAFE==SQLITE_INNOCUOUS );",
          "1764:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|",
          "1765:                        SQLITE_SUBTYPE|SQLITE_INNOCUOUS);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:           ExprSetProperty(pExpr,EP_ConstFunc);",
          "879:         }",
          "880:         if( (pDef->funcFlags & SQLITE_FUNC_CONSTANT)==0 ){",
          "",
          "[Removed Lines]",
          "869:         }else{",
          "870:           if( ExprHasProperty(pExpr, EP_Indirect)",
          "871:            && !IN_RENAME_OBJECT",
          "872:            && (pParse->db->flags & SQLITE_UnsafeInView)==0",
          "873:           ){",
          "876:             sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "877:                             pDef->zName);",
          "878:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "896:           no_such_func = 1;",
          "897:           pDef = 0;",
          "898:         }else",
          "900:          && ExprHasProperty(pExpr, EP_Indirect)",
          "901:          && !IN_RENAME_OBJECT",
          "902:         ){",
          "907:         }",
          "908:       }",
          "",
          "[Removed Lines]",
          "899:         if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "905:           sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "906:                           pDef->zName);",
          "",
          "[Added Lines]",
          "889:         if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_SAFE))",
          "890:                != SQLITE_FUNC_SAFE",
          "894:           if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "895:            || (pParse->db->flags & SQLITE_UnsafeInView)==0",
          "896:           ){",
          "902:             sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "903:                             pDef->zName);",
          "904:           }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5050: #define SQLITE_DETERMINISTIC    0x000000800",
          "5051: #define SQLITE_DIRECTONLY       0x000080000",
          "5052: #define SQLITE_SUBTYPE          0x000100000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5067: #define SQLITE_INNOCUOUS        0x000200000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1768: #define INLINEFUNC_coalesce             0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1770: #define SQLITE_FUNC_PURE     (SQLITE_FUNC_CONSTANT|SQLITE_FUNC_SAFE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1838: #define FUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1840:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1841: #define VFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1842:   {nArg, SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "",
          "[Removed Lines]",
          "1839:   {nArg, SQLITE_FUNC_CONSTANT|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "",
          "[Added Lines]",
          "1844:   {nArg, SQLITE_FUNC_PURE|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1845:   {nArg, SQLITE_UTF8|SQLITE_DIRECTONLY, \\",
          "1846:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1847: #define INLINE_FUNC(zName, nArg, iArg, mFlags) \\",
          "1849:    SQLITE_INT_TO_PTR(iArg), 0, noopFunc, 0, 0, 0, #zName, {0} }",
          "1850: #define TEST_FUNC(zName, nArg, iArg, mFlags) \\",
          "1851:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INTERNAL|SQLITE_FUNC_TEST| \\",
          "1853:    SQLITE_INT_TO_PTR(iArg), 0, noopFunc, 0, 0, 0, #zName, {0} }",
          "1854: #define DFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1856:    0, 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1857: #define PURE_DATE(zName, nArg, iArg, bNC, xFunc) \\",
          "1859:    (void*)&sqlite3Config, 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1860: #define FUNCTION2(zName, nArg, iArg, bNC, xFunc, extraFlags) \\",
          "1862:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1863: #define STR_FUNCTION(zName, nArg, pArg, bNC, xFunc) \\",
          "1865:    pArg, 0, xFunc, 0, 0, 0, #zName, }",
          "1866: #define LIKEFUNC(zName, nArg, arg, flags) \\",
          "1868:    (void *)arg, 0, likeFunc, 0, 0, 0, #zName, {0} }",
          "1869: #define WAGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue, xInverse, f) \\",
          "1870:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|f, \\",
          "",
          "[Removed Lines]",
          "1848:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INLINE|SQLITE_FUNC_CONSTANT|(mFlags), \\",
          "1852:          SQLITE_FUNC_INLINE|SQLITE_FUNC_CONSTANT|(mFlags), \\",
          "1855:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8, \\",
          "1858:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8|SQLITE_FUNC_CONSTANT, \\",
          "1861:   {nArg,SQLITE_FUNC_CONSTANT|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL)|extraFlags,\\",
          "1864:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "1867:   {nArg, SQLITE_FUNC_CONSTANT|SQLITE_UTF8|flags, \\",
          "",
          "[Added Lines]",
          "1853:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INLINE|SQLITE_FUNC_PURE|(mFlags), \\",
          "1857:          SQLITE_FUNC_INLINE|(mFlags), \\",
          "1860:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_FUNC_SAFE|SQLITE_UTF8, \\",
          "1863:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8|SQLITE_FUNC_PURE, \\",
          "1866:   {nArg,SQLITE_FUNC_PURE|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL)|extraFlags,\\",
          "1869:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_FUNC_SAFE| \\",
          "1870:            SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "1873:   {nArg, SQLITE_FUNC_PURE|SQLITE_UTF8|flags, \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1ca00edd5e4d8278251d0498b0cf761931d86d2",
      "candidate_info": {
        "commit_hash": "a1ca00edd5e4d8278251d0498b0cf761931d86d2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1ca00edd5e4d8278251d0498b0cf761931d86d2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "When trying to drop a virtual table that has no xDestroy method, invoke the xDisconnect method rather than doing nothing, to avoid a memory leak.\n\nFossilOrigin-Name: 1fa29a5f2a89b6a1ee067f9cb86de1b66455126349efe3502599fc7ad224170c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0457e7d1961ab1f63e31d9028a9064a895f5c3fcfb56ba25e4f37e90197e3a9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:     }",
          "893:     p = vtabDisconnectAll(db, pTab);",
          "894:     xDestroy = p->pMod->pModule->xDestroy;",
          "895:     pTab->nTabRef++;",
          "898:     if( rc==SQLITE_OK ){",
          "899:       assert( pTab->pVTable==p && p->pNext==0 );",
          "",
          "[Removed Lines]",
          "896:     rc = xDestroy ? xDestroy(p->pVtab) : SQLITE_OK;",
          "",
          "[Added Lines]",
          "895:     if( xDestroy==0 ) xDestroy = p->pMod->pModule->xDisconnect;",
          "896:     assert( xDestroy!=0 );",
          "898:     rc = xDestroy(p->pVtab);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "629b88c683056ad69761cc1ae7e8026dbb4f530f",
      "candidate_info": {
        "commit_hash": "629b88c683056ad69761cc1ae7e8026dbb4f530f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/629b88c683056ad69761cc1ae7e8026dbb4f530f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "Use OP_Copy instead of OP_SCopy to move the results of a scalar subquery.\n\nFossilOrigin-Name: 435c272dcf6ed5f3acb564b8f959557145f117b869547b670258cf5a1908ab6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bfd42f1dc0c94f9bb74516e62fec8e39c20f4749f4e0972f66c2886d3c64f73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4492:   inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4493:   assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "4494:   if( inReg!=target && pParse->pVdbe ){",
          "4496:   }",
          "4497: }",
          "",
          "[Removed Lines]",
          "4495:     sqlite3VdbeAddOp2(pParse->pVdbe, OP_SCopy, inReg, target);",
          "",
          "[Added Lines]",
          "4495:     u8 op;",
          "4496:     if( ExprHasProperty(pExpr,EP_Subquery) ){",
          "4497:       op = OP_Copy;",
          "4498:     }else{",
          "4499:       op = OP_SCopy;",
          "4500:     }",
          "4501:     sqlite3VdbeAddOp2(pParse->pVdbe, op, inReg, target);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95b395901a3b34c9b26b42da80ead52d02f0e54a",
      "candidate_info": {
        "commit_hash": "95b395901a3b34c9b26b42da80ead52d02f0e54a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95b395901a3b34c9b26b42da80ead52d02f0e54a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y"
        ],
        "message": "Reinstate the optimization that converts \"x IN (y)\" into \"x==y\".\n\nFossilOrigin-Name: 27936e6884e77093533719c7955a17f051cfb359872e51a6d1481152e6256443",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 029ceea612f5c7a1420939d8a772eefcc6f9550d24d57b52ae1729ea9d85fae9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2941:     affinity = sqlite3ExprAffinity(pLeft);",
          "2942:     if( affinity<=SQLITE_AFF_NONE ){",
          "2943:       affinity = SQLITE_AFF_BLOB;",
          "2944:     }",
          "2945:     if( pKeyInfo ){",
          "2946:       assert( sqlite3KeyInfoIsWriteable(pKeyInfo) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2944:     }else if( affinity==SQLITE_AFF_REAL ){",
          "2945:       affinity = SQLITE_AFF_NUMERIC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3250:     int r2, regToFree;",
          "3251:     int regCkNull = 0;",
          "3252:     int ii;",
          "3254:     assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "3255:     if( destIfNull!=destIfFalse ){",
          "3256:       regCkNull = sqlite3GetTempReg(pParse);",
          "3257:       sqlite3VdbeAddOp3(v, OP_BitAnd, rLhs, rLhs, regCkNull);",
          "3258:     }",
          "3260:     for(ii=0; ii<pList->nExpr; ii++){",
          "3268:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3269:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3270:       }",
          "",
          "[Removed Lines]",
          "3259:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3261:       if( bLhsReal ){",
          "3262:         r2 = regToFree = sqlite3GetTempReg(pParse);",
          "3263:         sqlite3ExprCode(pParse, pList->a[ii].pExpr, r2);",
          "3264:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3265:       }else{",
          "3266:         r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "3267:       }",
          "",
          "[Added Lines]",
          "3261:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1196:       A = sqlite3Expr(pParse->db, TK_INTEGER, N ? \"1\" : \"0\");",
          "1198:       Expr *pRHS = Y->a[0].pExpr;",
          "1199:       Y->a[0].pExpr = 0;",
          "1200:       sqlite3ExprListDelete(pParse->db, Y);",
          "1201:       A = sqlite3PExpr(pParse, TK_EQ, A, pRHS);",
          "1202:       if( N ) A = sqlite3PExpr(pParse, TK_NOT, A, 0);",
          "1203:     }else{",
          "",
          "[Removed Lines]",
          "1197:     }else if( 0 && Y->nExpr==1 && sqlite3ExprIsConstant(Y->a[0].pExpr) ){",
          "",
          "[Added Lines]",
          "1197:     }else if( Y->nExpr==1 && sqlite3ExprIsConstant(Y->a[0].pExpr) ){",
          "1201:       pRHS = sqlite3PExpr(pParse, TK_UPLUS, pRHS, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
      "candidate_info": {
        "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:     int nInit = pList ? pList->nExpr : 0;",
          "896:     for(i=0; i<pAppend->nExpr; i++){",
          "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
          "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
          "899:         pDup->op = TK_NULL;",
          "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "901:       }",
          "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
          "902:         pDup->u.zToken = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}