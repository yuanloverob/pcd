{
  "cve_id": "CVE-2021-29591",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. TFlite graphs must not have loops between nodes. However, this condition was not checked and an attacker could craft models that would result in infinite loop during evaluation. In certain cases, the infinite loop would be replaced by stack overflow due to too many recursive calls. For example, the `While` implementation(https://github.com/tensorflow/tensorflow/blob/106d8f4fb89335a2c52d7c895b7a7485465ca8d9/tensorflow/lite/kernels/while.cc) could be tricked into a scneario where both the body and the loop subgraphs are the same. Evaluating one of the subgraphs means calling the `Eval` function for the other and this quickly exhaust all stack space. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range. Please consult our security guide(https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "c6173f5fe66cdbab74f4f869311fe6aae2ba35f4",
  "patch_info": {
    "commit_hash": "c6173f5fe66cdbab74f4f869311fe6aae2ba35f4",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/c6173f5fe66cdbab74f4f869311fe6aae2ba35f4",
    "files": [
      "tensorflow/lite/BUILD",
      "tensorflow/lite/core/subgraph.cc",
      "tensorflow/lite/core/subgraph.h",
      "tensorflow/lite/kernels/while.cc",
      "tensorflow/lite/model_test.cc",
      "tensorflow/lite/testdata/unsupported_recursion.bin"
    ],
    "message": "TFLite: Error out when the graph has a recurion.\n\nRecursion is currently unsupported.\n\nPiperOrigin-RevId: 371708957\nChange-Id: I8dfad0d85cbfe08e39ae8ea7bad21254ddee5003",
    "before_after_code_files": [
      "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
      "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
      "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
      "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc": [
      "File: tensorflow/lite/core/subgraph.cc -> tensorflow/lite/core/subgraph.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "156:   return tflite::EnumNamesBuiltinOperator()[op_reg.builtin_code];",
      "157: }",
      "159: }  // namespace",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: class SubgraphGuard {",
      "167:  public:",
      "168:   SubgraphGuard(TfLiteContext* context, bool* is_subgraph_in_use)",
      "169:       : is_subgraph_in_use_(is_subgraph_in_use) {",
      "170:     if (*is_subgraph_in_use_) {",
      "171:       TF_LITE_KERNEL_LOG(",
      "172:           context,",
      "173:           \"Subgraph is already in use. Using an interpreter or a subgraph in \"",
      "174:           \"multiple threads is not supported. Recursion in the graph is not \"",
      "175:           \"supported.\");",
      "176:       status_ = kTfLiteError;",
      "177:     } else {",
      "179:     }",
      "180:   }",
      "181:   ~SubgraphGuard() {",
      "183:     if (status_ == kTfLiteOk) {",
      "185:     }",
      "186:   }",
      "188:   TfLiteStatus status() const { return status_; }",
      "190:  private:",
      "191:   TfLiteStatus status_ = kTfLiteOk;",
      "192:   bool* is_subgraph_in_use_;",
      "193: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "678:     return kTfLiteOk;",
      "679:   }",
      "681:   next_execution_plan_index_to_prepare_ = 0;",
      "682:   next_execution_plan_index_to_plan_allocation_ = 0;",
      "683:   next_original_execution_plan_index_to_prepare_ = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "721:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
      "722:   TF_LITE_ENSURE_OK(&context_, guard.status());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1014: }",
      "1016: TfLiteStatus Subgraph::Invoke() {",
      "1017:   if (!consistent_) {",
      "1018:     ReportError(\"Invoke called on model that is not consistent.\");",
      "1019:     return kTfLiteError;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1060:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
      "1061:   TF_LITE_ENSURE_OK(&context_, guard.status());",
      "",
      "---------------"
    ],
    "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h": [
      "File: tensorflow/lite/core/subgraph.h -> tensorflow/lite/core/subgraph.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "761:   bool preserve_all_tensors_ = false;",
      "762: };",
      "764: }  // namespace tflite",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "765:   bool is_subgraph_in_use_ = false;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc": [
      "File: tensorflow/lite/kernels/while.cc -> tensorflow/lite/kernels/while.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "138:   auto* subgraphs = this_subgraph->GetSubgraphs();",
      "139:   TF_LITE_ENSURE(context, op_data->cond_subgraph_index < subgraphs->size());",
      "140:   TF_LITE_ENSURE(context, op_data->body_subgraph_index < subgraphs->size());",
      "144:   Subgraph* cond_subgraph = (*subgraphs)[op_data->cond_subgraph_index].get();",
      "145:   Subgraph* body_subgraph = (*subgraphs)[op_data->body_subgraph_index].get();",
      "",
      "[Removed Lines]",
      "141:   TF_LITE_ENSURE(context,",
      "142:                  op_data->cond_subgraph_index != op_data->body_subgraph_index);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc": [
      "File: tensorflow/lite/model_test.cc -> tensorflow/lite/model_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "600:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
      "601: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "606: TEST(BasicFlatBufferModel, TestUnsupportedRecursion) {",
      "607:   const auto model_path =",
      "608:       \"tensorflow/lite/testdata/unsupported_recursion.bin\";",
      "610:   std::unique_ptr<tflite::FlatBufferModel> model =",
      "611:       FlatBufferModel::BuildFromFile(model_path);",
      "612:   ASSERT_NE(model, nullptr);",
      "614:   tflite::ops::builtin::BuiltinOpResolver resolver;",
      "615:   InterpreterBuilder builder(*model, resolver);",
      "616:   std::unique_ptr<Interpreter> interpreter;",
      "617:   ASSERT_EQ(builder(&interpreter), kTfLiteOk);",
      "618:   ASSERT_NE(interpreter, nullptr);",
      "619:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
      "620: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a38deb6f26b088f22a7eceb6425805ee293bf10",
      "candidate_info": {
        "commit_hash": "2a38deb6f26b088f22a7eceb6425805ee293bf10",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2a38deb6f26b088f22a7eceb6425805ee293bf10",
        "files": [
          "tensorflow/lite/BUILD",
          "tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc",
          "tensorflow/lite/testdata/unsupported_recursion.bin"
        ],
        "message": "Cherrypick2.3 TFLite: Error out when the graph has a recurion.",
        "before_after_code_files": [
          "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc": [
          "File: tensorflow/lite/core/subgraph.cc -> tensorflow/lite/core/subgraph.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   return tflite::EnumNamesBuiltinOperator()[op_reg.builtin_code];",
          "142: }",
          "144: }  // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: class SubgraphGuard {",
          "152:  public:",
          "153:   SubgraphGuard(TfLiteContext* context, bool* is_subgraph_in_use)",
          "154:       : is_subgraph_in_use_(is_subgraph_in_use) {",
          "155:     if (*is_subgraph_in_use_) {",
          "156:       TF_LITE_KERNEL_LOG(",
          "157:           context,",
          "158:           \"Subgraph is already in use. Using an interpreter or a subgraph in \"",
          "159:           \"multiple threads is not supported. Recursion in the graph is not \"",
          "160:           \"supported.\");",
          "161:       status_ = kTfLiteError;",
          "162:     } else {",
          "164:     }",
          "165:   }",
          "166:   ~SubgraphGuard() {",
          "168:     if (status_ == kTfLiteOk) {",
          "170:     }",
          "171:   }",
          "173:   TfLiteStatus status() const { return status_; }",
          "175:  private:",
          "176:   TfLiteStatus status_ = kTfLiteOk;",
          "177:   bool* is_subgraph_in_use_;",
          "178: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:     return kTfLiteOk;",
          "661:   }",
          "663:   next_execution_plan_index_to_prepare_ = 0;",
          "664:   next_execution_plan_index_to_plan_allocation_ = 0;",
          "665:   if (memory_planner_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "704:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "917: }",
          "919: TfLiteStatus Subgraph::Invoke() {",
          "920:   if (!consistent_) {",
          "921:     ReportError(\"Invoke called on model that is not consistent.\");",
          "922:     return kTfLiteError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "963:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "964:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------"
        ],
        "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h": [
          "File: tensorflow/lite/core/subgraph.h -> tensorflow/lite/core/subgraph.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: using Subgraph = impl::Subgraph;",
          "722: #endif",
          "724: }  // namespace tflite",
          "725: #endif  // TENSORFLOW_LITE_CORE_SUBGRAPH_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:   bool is_subgraph_in_use_ = false;",
          "727: };",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc": [
          "File: tensorflow/lite/kernels/while.cc -> tensorflow/lite/kernels/while.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   auto* subgraphs = this_subgraph->GetSubgraphs();",
          "136:   TF_LITE_ENSURE(context, op_data->cond_subgraph_index < subgraphs->size());",
          "137:   TF_LITE_ENSURE(context, op_data->body_subgraph_index < subgraphs->size());",
          "141:   Subgraph* cond_subgraph = (*subgraphs)[op_data->cond_subgraph_index].get();",
          "142:   Subgraph* body_subgraph = (*subgraphs)[op_data->body_subgraph_index].get();",
          "",
          "[Removed Lines]",
          "138:   TF_LITE_ENSURE(context,",
          "139:                  op_data->cond_subgraph_index != op_data->body_subgraph_index);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc": [
          "File: tensorflow/lite/model_test.cc -> tensorflow/lite/model_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "438: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444: TEST(BasicFlatBufferModel, TestUnsupportedRecursion) {",
          "445:   const auto model_path =",
          "446:       \"tensorflow/lite/testdata/unsupported_recursion.bin\";",
          "448:   std::unique_ptr<tflite::FlatBufferModel> model =",
          "449:       FlatBufferModel::BuildFromFile(model_path);",
          "450:   ASSERT_NE(model, nullptr);",
          "452:   tflite::ops::builtin::BuiltinOpResolver resolver;",
          "453:   InterpreterBuilder builder(*model, resolver);",
          "454:   std::unique_ptr<Interpreter> interpreter;",
          "455:   ASSERT_EQ(builder(&interpreter), kTfLiteOk);",
          "456:   ASSERT_NE(interpreter, nullptr);",
          "457:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
          "458: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48fd9067219a49e7ccf8765782b3732869ddbdc6",
      "candidate_info": {
        "commit_hash": "48fd9067219a49e7ccf8765782b3732869ddbdc6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/48fd9067219a49e7ccf8765782b3732869ddbdc6",
        "files": [
          "tensorflow/lite/BUILD",
          "tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc",
          "tensorflow/lite/testdata/unsupported_recursion.bin"
        ],
        "message": "TFLite: Error out when the graph has a recurion.\n\nRecursion is currently unsupported.\n\nPiperOrigin-RevId: 371708957\nChange-Id: I8dfad0d85cbfe08e39ae8ea7bad21254ddee5003",
        "before_after_code_files": [
          "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc": [
          "File: tensorflow/lite/core/subgraph.cc -> tensorflow/lite/core/subgraph.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   return tflite::EnumNamesBuiltinOperator()[op_reg.builtin_code];",
          "156: }",
          "158: }  // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: class SubgraphGuard {",
          "166:  public:",
          "167:   SubgraphGuard(TfLiteContext* context, bool* is_subgraph_in_use)",
          "168:       : is_subgraph_in_use_(is_subgraph_in_use) {",
          "169:     if (*is_subgraph_in_use_) {",
          "170:       TF_LITE_KERNEL_LOG(",
          "171:           context,",
          "172:           \"Subgraph is already in use. Using an interpreter or a subgraph in \"",
          "173:           \"multiple threads is not supported. Recursion in the graph is not \"",
          "174:           \"supported.\");",
          "175:       status_ = kTfLiteError;",
          "176:     } else {",
          "178:     }",
          "179:   }",
          "180:   ~SubgraphGuard() {",
          "182:     if (status_ == kTfLiteOk) {",
          "184:     }",
          "185:   }",
          "187:   TfLiteStatus status() const { return status_; }",
          "189:  private:",
          "190:   TfLiteStatus status_ = kTfLiteOk;",
          "191:   bool* is_subgraph_in_use_;",
          "192: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "678:     return kTfLiteOk;",
          "679:   }",
          "681:   next_execution_plan_index_to_prepare_ = 0;",
          "682:   next_execution_plan_index_to_plan_allocation_ = 0;",
          "683:   next_original_execution_plan_index_to_prepare_ = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "722:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "987: }",
          "989: TfLiteStatus Subgraph::Invoke() {",
          "990:   if (!consistent_) {",
          "991:     ReportError(\"Invoke called on model that is not consistent.\");",
          "992:     return kTfLiteError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "1034:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------"
        ],
        "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h": [
          "File: tensorflow/lite/core/subgraph.h -> tensorflow/lite/core/subgraph.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:   bool preserve_all_tensors_ = false;",
          "756: };",
          "758: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:   bool is_subgraph_in_use_ = false;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc": [
          "File: tensorflow/lite/kernels/while.cc -> tensorflow/lite/kernels/while.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   auto* subgraphs = this_subgraph->GetSubgraphs();",
          "139:   TF_LITE_ENSURE(context, op_data->cond_subgraph_index < subgraphs->size());",
          "140:   TF_LITE_ENSURE(context, op_data->body_subgraph_index < subgraphs->size());",
          "144:   Subgraph* cond_subgraph = (*subgraphs)[op_data->cond_subgraph_index].get();",
          "145:   Subgraph* body_subgraph = (*subgraphs)[op_data->body_subgraph_index].get();",
          "",
          "[Removed Lines]",
          "141:   TF_LITE_ENSURE(context,",
          "142:                  op_data->cond_subgraph_index != op_data->body_subgraph_index);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc": [
          "File: tensorflow/lite/model_test.cc -> tensorflow/lite/model_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
          "533: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: TEST(BasicFlatBufferModel, TestUnsupportedRecursion) {",
          "539:   const auto model_path =",
          "540:       \"tensorflow/lite/testdata/unsupported_recursion.bin\";",
          "542:   std::unique_ptr<tflite::FlatBufferModel> model =",
          "543:       FlatBufferModel::BuildFromFile(model_path);",
          "544:   ASSERT_NE(model, nullptr);",
          "546:   tflite::ops::builtin::BuiltinOpResolver resolver;",
          "547:   InterpreterBuilder builder(*model, resolver);",
          "548:   std::unique_ptr<Interpreter> interpreter;",
          "549:   ASSERT_EQ(builder(&interpreter), kTfLiteOk);",
          "550:   ASSERT_NE(interpreter, nullptr);",
          "551:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
          "552: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f94559f9a64f5dd86c4032ebd6efd6c908c777e",
      "candidate_info": {
        "commit_hash": "1f94559f9a64f5dd86c4032ebd6efd6c908c777e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1f94559f9a64f5dd86c4032ebd6efd6c908c777e",
        "files": [
          "tensorflow/lite/BUILD",
          "tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc",
          "tensorflow/lite/testdata/unsupported_recursion.bin"
        ],
        "message": "Cherry pick 2.4 TFLite: Error out when the graph has a recurion.",
        "before_after_code_files": [
          "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc": [
          "File: tensorflow/lite/core/subgraph.cc -> tensorflow/lite/core/subgraph.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   TF_LITE_ENSURE(context, data_ptr_value % kDefaultTensorAlignment == 0);",
          "152:   return kTfLiteOk;",
          "153: }",
          "155: }  // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: class SubgraphGuard {",
          "162:  public:",
          "163:   SubgraphGuard(TfLiteContext* context, bool* is_subgraph_in_use)",
          "164:       : is_subgraph_in_use_(is_subgraph_in_use) {",
          "165:     if (*is_subgraph_in_use_) {",
          "166:       TF_LITE_KERNEL_LOG(",
          "167:           context,",
          "168:           \"Subgraph is already in use. Using an interpreter or a subgraph in \"",
          "169:           \"multiple threads is not supported. Recursion in the graph is not \"",
          "170:           \"supported.\");",
          "171:       status_ = kTfLiteError;",
          "172:     } else {",
          "174:     }",
          "175:   }",
          "176:   ~SubgraphGuard() {",
          "178:     if (status_ == kTfLiteOk) {",
          "180:     }",
          "181:   }",
          "183:   TfLiteStatus status() const { return status_; }",
          "185:  private:",
          "186:   TfLiteStatus status_ = kTfLiteOk;",
          "187:   bool* is_subgraph_in_use_;",
          "188: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:     return kTfLiteOk;",
          "676:   }",
          "678:   next_execution_plan_index_to_prepare_ = 0;",
          "679:   next_execution_plan_index_to_plan_allocation_ = 0;",
          "680:   next_original_execution_plan_index_to_prepare_ = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "718:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977: }",
          "979: TfLiteStatus Subgraph::Invoke() {",
          "980:   if (!consistent_) {",
          "981:     ReportError(\"Invoke called on model that is not consistent.\");",
          "982:     return kTfLiteError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1022:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "1023:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------"
        ],
        "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h": [
          "File: tensorflow/lite/core/subgraph.h -> tensorflow/lite/core/subgraph.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:   resource::ResourceMap* resources_ = nullptr;",
          "744: };",
          "746: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   bool is_subgraph_in_use_ = false;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc": [
          "File: tensorflow/lite/kernels/while.cc -> tensorflow/lite/kernels/while.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   auto* subgraphs = this_subgraph->GetSubgraphs();",
          "136:   TF_LITE_ENSURE(context, op_data->cond_subgraph_index < subgraphs->size());",
          "137:   TF_LITE_ENSURE(context, op_data->body_subgraph_index < subgraphs->size());",
          "141:   Subgraph* cond_subgraph = (*subgraphs)[op_data->cond_subgraph_index].get();",
          "142:   Subgraph* body_subgraph = (*subgraphs)[op_data->body_subgraph_index].get();",
          "",
          "[Removed Lines]",
          "138:   TF_LITE_ENSURE(context,",
          "139:                  op_data->cond_subgraph_index != op_data->body_subgraph_index);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc": [
          "File: tensorflow/lite/model_test.cc -> tensorflow/lite/model_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
          "461: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: TEST(BasicFlatBufferModel, TestUnsupportedRecursion) {",
          "467:   const auto model_path =",
          "468:       \"tensorflow/lite/testdata/unsupported_recursion.bin\";",
          "470:   std::unique_ptr<tflite::FlatBufferModel> model =",
          "471:       FlatBufferModel::BuildFromFile(model_path);",
          "472:   ASSERT_NE(model, nullptr);",
          "474:   tflite::ops::builtin::BuiltinOpResolver resolver;",
          "475:   InterpreterBuilder builder(*model, resolver);",
          "476:   std::unique_ptr<Interpreter> interpreter;",
          "477:   ASSERT_EQ(builder(&interpreter), kTfLiteOk);",
          "478:   ASSERT_NE(interpreter, nullptr);",
          "479:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
          "480: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1003fb44af0a12f335a364f73de8b81ad5d9a324",
      "candidate_info": {
        "commit_hash": "1003fb44af0a12f335a364f73de8b81ad5d9a324",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1003fb44af0a12f335a364f73de8b81ad5d9a324",
        "files": [
          "tensorflow/lite/BUILD",
          "tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc",
          "tensorflow/lite/testdata/unsupported_recursion.bin"
        ],
        "message": "Cherry pick 2.1 TFLite: Error out when the graph has a recurion.",
        "before_after_code_files": [
          "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc": [
          "File: tensorflow/lite/core/subgraph.cc -> tensorflow/lite/core/subgraph.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   return legacy_quantization;",
          "118: }",
          "120: }  // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: class SubgraphGuard {",
          "128:  public:",
          "129:   SubgraphGuard(TfLiteContext* context, bool* is_subgraph_in_use)",
          "130:       : is_subgraph_in_use_(is_subgraph_in_use) {",
          "131:     if (*is_subgraph_in_use_) {",
          "132:       TF_LITE_KERNEL_LOG(",
          "133:           context,",
          "134:           \"Subgraph is already in use. Using an interpreter or a subgraph in \"",
          "135:           \"multiple threads is not supported. Recursion in the graph is not \"",
          "136:           \"supported.\");",
          "137:       status_ = kTfLiteError;",
          "138:     } else {",
          "140:     }",
          "141:   }",
          "142:   ~SubgraphGuard() {",
          "144:     if (status_ == kTfLiteOk) {",
          "146:     }",
          "147:   }",
          "149:   TfLiteStatus status() const { return status_; }",
          "151:  private:",
          "152:   TfLiteStatus status_ = kTfLiteOk;",
          "153:   bool* is_subgraph_in_use_;",
          "154: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:     return kTfLiteOk;",
          "525:   }",
          "527:   next_execution_plan_index_to_prepare_ = 0;",
          "528:   next_execution_plan_index_to_plan_allocation_ = 0;",
          "529:   if (memory_planner_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "568:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "744: }",
          "746: TfLiteStatus Subgraph::Invoke() {",
          "747:   if (!consistent_) {",
          "748:     ReportError(\"Invoke called on model that is not consistent.\");",
          "749:     return kTfLiteError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "790:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "791:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------"
        ],
        "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h": [
          "File: tensorflow/lite/core/subgraph.h -> tensorflow/lite/core/subgraph.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:   ResourceVariableMap* resource_variables_ = nullptr;",
          "645: };",
          "647: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:   bool is_subgraph_in_use_ = false;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc": [
          "File: tensorflow/lite/kernels/while.cc -> tensorflow/lite/kernels/while.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   auto* subgraphs = this_subgraph->GetSubgraphs();",
          "133:   TF_LITE_ENSURE(context, op_data->cond_subgraph_index < subgraphs->size());",
          "134:   TF_LITE_ENSURE(context, op_data->body_subgraph_index < subgraphs->size());",
          "138:   Subgraph* cond_subgraph = (*subgraphs)[op_data->cond_subgraph_index].get();",
          "139:   Subgraph* body_subgraph = (*subgraphs)[op_data->body_subgraph_index].get();",
          "",
          "[Removed Lines]",
          "135:   TF_LITE_ENSURE(context,",
          "136:                  op_data->cond_subgraph_index != op_data->body_subgraph_index);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc": [
          "File: tensorflow/lite/model_test.cc -> tensorflow/lite/model_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:   ASSERT_EQ(model2->GetMinimumRuntime(), \"1.10.0\");",
          "332: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: TEST(BasicFlatBufferModel, TestUnsupportedRecursion) {",
          "338:   const auto model_path =",
          "339:       \"third_party/tensorflow/lite/testdata/unsupported_recursion.bin\";",
          "341:   std::unique_ptr<tflite::FlatBufferModel> model =",
          "342:       FlatBufferModel::BuildFromFile(model_path);",
          "343:   ASSERT_NE(model, nullptr);",
          "345:   tflite::ops::builtin::BuiltinOpResolver resolver;",
          "346:   InterpreterBuilder builder(*model, resolver);",
          "347:   std::unique_ptr<Interpreter> interpreter;",
          "348:   ASSERT_EQ(builder(&interpreter), kTfLiteOk);",
          "349:   ASSERT_NE(interpreter, nullptr);",
          "350:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
          "351: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9181ba90e8e9bbfa65785ab064216c8e16796bd",
      "candidate_info": {
        "commit_hash": "c9181ba90e8e9bbfa65785ab064216c8e16796bd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c9181ba90e8e9bbfa65785ab064216c8e16796bd",
        "files": [
          "tensorflow/lite/BUILD",
          "tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc",
          "tensorflow/lite/testdata/unsupported_recursion.bin"
        ],
        "message": "Cherry pick 2.2 TFLite: Error out when the graph has a recurion.",
        "before_after_code_files": [
          "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
          "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
          "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
          "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc",
            "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h",
            "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc",
            "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/core/subgraph.cc||tensorflow/lite/core/subgraph.cc": [
          "File: tensorflow/lite/core/subgraph.cc -> tensorflow/lite/core/subgraph.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:   return tflite::EnumNamesBuiltinOperator()[op_reg.builtin_code];",
          "140: }",
          "142: }  // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: class SubgraphGuard {",
          "150:  public:",
          "151:   SubgraphGuard(TfLiteContext* context, bool* is_subgraph_in_use)",
          "152:       : is_subgraph_in_use_(is_subgraph_in_use) {",
          "153:     if (*is_subgraph_in_use_) {",
          "154:       TF_LITE_KERNEL_LOG(",
          "155:           context,",
          "156:           \"Subgraph is already in use. Using an interpreter or a subgraph in \"",
          "157:           \"multiple threads is not supported. Recursion in the graph is not \"",
          "158:           \"supported.\");",
          "159:       status_ = kTfLiteError;",
          "160:     } else {",
          "162:     }",
          "163:   }",
          "164:   ~SubgraphGuard() {",
          "166:     if (status_ == kTfLiteOk) {",
          "168:     }",
          "169:   }",
          "171:   TfLiteStatus status() const { return status_; }",
          "173:  private:",
          "174:   TfLiteStatus status_ = kTfLiteOk;",
          "175:   bool* is_subgraph_in_use_;",
          "176: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:     return kTfLiteOk;",
          "654:   }",
          "656:   next_execution_plan_index_to_prepare_ = 0;",
          "657:   next_execution_plan_index_to_plan_allocation_ = 0;",
          "658:   if (memory_planner_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "697:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "880: }",
          "882: TfLiteStatus Subgraph::Invoke() {",
          "883:   if (!consistent_) {",
          "884:     ReportError(\"Invoke called on model that is not consistent.\");",
          "885:     return kTfLiteError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "926:   SubgraphGuard guard(&context_, &is_subgraph_in_use_);",
          "927:   TF_LITE_ENSURE_OK(&context_, guard.status());",
          "",
          "---------------"
        ],
        "tensorflow/lite/core/subgraph.h||tensorflow/lite/core/subgraph.h": [
          "File: tensorflow/lite/core/subgraph.h -> tensorflow/lite/core/subgraph.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:   resource::ResourceMap* resources_ = nullptr;",
          "685: };",
          "687: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:   bool is_subgraph_in_use_ = false;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/while.cc||tensorflow/lite/kernels/while.cc": [
          "File: tensorflow/lite/kernels/while.cc -> tensorflow/lite/kernels/while.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   auto* subgraphs = this_subgraph->GetSubgraphs();",
          "133:   TF_LITE_ENSURE(context, op_data->cond_subgraph_index < subgraphs->size());",
          "134:   TF_LITE_ENSURE(context, op_data->body_subgraph_index < subgraphs->size());",
          "138:   Subgraph* cond_subgraph = (*subgraphs)[op_data->cond_subgraph_index].get();",
          "139:   Subgraph* body_subgraph = (*subgraphs)[op_data->body_subgraph_index].get();",
          "",
          "[Removed Lines]",
          "135:   TF_LITE_ENSURE(context,",
          "136:                  op_data->cond_subgraph_index != op_data->body_subgraph_index);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/lite/model_test.cc||tensorflow/lite/model_test.cc": [
          "File: tensorflow/lite/model_test.cc -> tensorflow/lite/model_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448: TEST(BasicFlatBufferModel, TestUnsupportedRecursion) {",
          "449:   const auto model_path =",
          "450:       \"tensorflow/lite/testdata/unsupported_recursion.bin\";",
          "452:   std::unique_ptr<tflite::FlatBufferModel> model =",
          "453:       FlatBufferModel::BuildFromFile(model_path);",
          "454:   ASSERT_NE(model, nullptr);",
          "456:   tflite::ops::builtin::BuiltinOpResolver resolver;",
          "457:   InterpreterBuilder builder(*model, resolver);",
          "458:   std::unique_ptr<Interpreter> interpreter;",
          "459:   ASSERT_EQ(builder(&interpreter), kTfLiteOk);",
          "460:   ASSERT_NE(interpreter, nullptr);",
          "461:   ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);",
          "462: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}