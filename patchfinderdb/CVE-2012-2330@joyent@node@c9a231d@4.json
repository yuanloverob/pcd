{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2fc528ce009a455a69f5984e62c881a05cd4ca37",
      "candidate_info": {
        "commit_hash": "2fc528ce009a455a69f5984e62c881a05cd4ca37",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2fc528ce009a455a69f5984e62c881a05cd4ca37",
        "files": [
          "lib/http.js"
        ],
        "message": "http: Clean up parser usage\n\nMove parsers.free(parser) to a single function, which also\nnulls all of the various references we hang on them.\n\nAlso, move the parser.on* methods out of the closure, so that\nthere's one shared definition of each, instead of re-defining\nfor each parser in a spot where they can close over references\nto other request-specific objects.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   debug = function() { };",
          "36: }",
          "103:     }",
          "146:   return parser;",
          "147: });",
          "",
          "[Removed Lines]",
          "39: var parsers = new FreeList('parsers', 1000, function() {",
          "40:   var parser = new HTTPParser(HTTPParser.REQUEST);",
          "42:   parser._headers = [];",
          "43:   parser._url = '';",
          "50:   parser.onHeaders = function(headers, url) {",
          "51:     parser._headers = parser._headers.concat(headers);",
          "52:     parser._url += url;",
          "53:   };",
          "60:   parser.onHeadersComplete = function(info) {",
          "61:     var headers = info.headers;",
          "62:     var url = info.url;",
          "64:     if (!headers) {",
          "65:       headers = parser._headers;",
          "66:       parser._headers = [];",
          "67:     }",
          "69:     if (!url) {",
          "70:       url = parser._url;",
          "71:       parser._url = '';",
          "72:     }",
          "74:     parser.incoming = new IncomingMessage(parser.socket);",
          "75:     parser.incoming.httpVersionMajor = info.versionMajor;",
          "76:     parser.incoming.httpVersionMinor = info.versionMinor;",
          "77:     parser.incoming.httpVersion = info.versionMajor + '.' + info.versionMinor;",
          "78:     parser.incoming.url = url;",
          "80:     for (var i = 0, n = headers.length; i < n; i += 2) {",
          "81:       var k = headers[i];",
          "82:       var v = headers[i + 1];",
          "83:       parser.incoming._addHeaderLine(k.toLowerCase(), v);",
          "84:     }",
          "86:     if (info.method) {",
          "88:       parser.incoming.method = info.method;",
          "89:     } else {",
          "91:       parser.incoming.statusCode = info.statusCode;",
          "93:     }",
          "95:     parser.incoming.upgrade = info.upgrade;",
          "97:     var isHeadResponse = false;",
          "99:     if (!info.upgrade) {",
          "102:       isHeadResponse = parser.onIncoming(parser.incoming, info.shouldKeepAlive);",
          "105:     return isHeadResponse;",
          "106:   };",
          "108:   parser.onBody = function(b, start, len) {",
          "110:     var slice = b.slice(start, start + len);",
          "111:     if (parser.incoming._decoder) {",
          "112:       var string = parser.incoming._decoder.write(slice);",
          "113:       if (string.length) parser.incoming.emit('data', string);",
          "114:     } else {",
          "115:       parser.incoming.emit('data', slice);",
          "116:     }",
          "117:   };",
          "119:   parser.onMessageComplete = function() {",
          "120:     parser.incoming.complete = true;",
          "123:     var headers = parser._headers;",
          "124:     if (headers) {",
          "125:       for (var i = 0, n = headers.length; i < n; i += 2) {",
          "126:         var k = headers[i];",
          "127:         var v = headers[i + 1];",
          "128:         parser.incoming._addHeaderLine(k.toLowerCase(), v);",
          "129:       }",
          "130:       parser._headers = [];",
          "131:       parser._url = '';",
          "132:     }",
          "134:     if (!parser.incoming.upgrade) {",
          "136:       parser.incoming.readable = false;",
          "137:       parser.incoming.emit('end');",
          "138:     }",
          "140:     if (parser.socket.readable) {",
          "142:       parser.socket.resume();",
          "143:     }",
          "144:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:   return error;",
          "1111: }",
          "1114: ClientRequest.prototype.onSocket = function(socket) {",
          "1115:   var req = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1127:     httpSocketSetup(socket);",
          "1144:     var errorListener = function(err) {",
          "1145:       debug('HTTP SOCKET ERROR: ' + err.message + '\\n' + err.stack);",
          "1146:       req.emit('error', err);",
          "",
          "[Removed Lines]",
          "1129:     var freeParser = function() {",
          "1130:       if (parser) {",
          "1131:         parser.onIncoming = null;",
          "1132:         parser.socket.onend = null;",
          "1133:         parser.socket.ondata = null;",
          "1134:         parser.socket = null;",
          "1135:         parser.incoming = null;",
          "1136:         parsers.free(parser);",
          "1137:         parser = null;",
          "1138:       }",
          "1139:       if (req) {",
          "1140:         req.parser = null;",
          "1141:       }",
          "1142:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1149:       req._hadError = true;",
          "1150:       if (parser) {",
          "1151:         parser.finish();",
          "1153:       }",
          "1154:       socket.destroy();",
          "1155:     }",
          "",
          "[Removed Lines]",
          "1152:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1159:       var ret = parser.execute(d, start, end - start);",
          "1160:       if (ret instanceof Error) {",
          "1161:         debug('parse error');",
          "1163:         socket.destroy(ret);",
          "1164:       } else if (parser.incoming && parser.incoming.upgrade) {",
          "1165:         var bytesParsed = ret;",
          "",
          "[Removed Lines]",
          "1162:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1181:           socket.destroy();",
          "1182:         }",
          "1184:       } else if (parser.incoming && parser.incoming.complete &&",
          "1188:                  parser.incoming.statusCode !== 100) {",
          "1190:       }",
          "1191:     };",
          "",
          "[Removed Lines]",
          "1183:         freeParser();",
          "1189:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1199:       }",
          "1200:       if (parser) {",
          "1201:         parser.finish();",
          "1203:       }",
          "1204:       socket.destroy();",
          "1205:     };",
          "",
          "[Removed Lines]",
          "1202:         freeParser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1495:   socket.addListener('close', function() {",
          "1496:     debug('server socket close');",
          "1500:     abortIncoming();",
          "1501:   });",
          "",
          "[Removed Lines]",
          "1498:     parsers.free(parser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c97da82f5e23beb3f78258bb1340e63895e5125",
      "candidate_info": {
        "commit_hash": "2c97da82f5e23beb3f78258bb1340e63895e5125",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2c97da82f5e23beb3f78258bb1340e63895e5125",
        "files": [
          "benchmark/url.js"
        ],
        "message": "bench: correct time calculation in url.js",
        "before_after_code_files": [
          "benchmark/url.js||benchmark/url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/url.js||benchmark/url.js": [
          "File: benchmark/url.js -> benchmark/url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   timestamp = process.hrtime(timestamp);",
          "35:   var seconds = timestamp[0];",
          "40:   process.stdout.write(util.format('%s sec\\n', time.toFixed(3)));",
          "41: }",
          "",
          "[Removed Lines]",
          "36:   var millis = timestamp[1]; // actually nanoseconds",
          "37:   while (millis > 1000) millis /= 10;",
          "38:   var time = (seconds * 1000 + millis) / 1000;",
          "",
          "[Added Lines]",
          "36:   var nanos = timestamp[1];",
          "37:   var time = seconds + nanos / 1e9;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df2c5fa81dbc8c584a1e3f6310b89385bca097bb",
      "candidate_info": {
        "commit_hash": "df2c5fa81dbc8c584a1e3f6310b89385bca097bb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/df2c5fa81dbc8c584a1e3f6310b89385bca097bb",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-sync-fd-leak.js"
        ],
        "message": "fs: fix file descriptor leak in sync functions\n\nFixes #3202. This is a back-port of commit 4e290e4.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-sync-fd-leak.js||test/simple/test-fs-sync-fd-leak.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   var nread = 0;",
          "132:   var lastRead = 0;",
          "146:   if (buffers.length > 1) {",
          "147:     var offset = 0;",
          "",
          "[Removed Lines]",
          "134:   do {",
          "135:     if (lastRead) {",
          "136:       buffer._bytesRead = lastRead;",
          "137:       nread += lastRead;",
          "138:       buffers.push(buffer);",
          "139:     }",
          "140:     var buffer = new Buffer(4048);",
          "141:     lastRead = fs.readSync(fd, buffer, 0, buffer.length, null);",
          "142:   } while (lastRead > 0);",
          "144:   fs.closeSync(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "629:   }",
          "630:   var written = 0;",
          "631:   var length = data.length;",
          "635:   }",
          "637: };",
          "",
          "[Removed Lines]",
          "633:   while (written < length) {",
          "634:     written += fs.writeSync(fd, data, written, length - written, written);",
          "636:   fs.closeSync(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-sync-fd-leak.js||test/simple/test-fs-sync-fd-leak.js": [
          "File: test/simple/test-fs-sync-fd-leak.js -> test/simple/test-fs-sync-fd-leak.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var fs = require('fs');",
          "27: fs.openSync = function() {",
          "28:   return 42;",
          "29: };",
          "30: fs.closeSync = function(fd) {",
          "31:   assert.equal(fd, 42);",
          "32:   close_called++;",
          "33: };",
          "34: fs.readSync = function() {",
          "35:   throw new Error('BAM');",
          "36: };",
          "37: fs.writeSync = function() {",
          "38:   throw new Error('BAM');",
          "39: };",
          "41: ensureThrows(function() {",
          "42:   fs.readFileSync('dummy');",
          "43: });",
          "44: ensureThrows(function() {",
          "45:   fs.writeFileSync('dummy', 'xxx');",
          "46: });",
          "48: var close_called = 0;",
          "49: function ensureThrows(cb) {",
          "50:   var got_exception = false;",
          "52:   close_called = 0;",
          "53:   try {",
          "54:     cb();",
          "55:   } catch (e) {",
          "56:     assert.equal(e.message, 'BAM');",
          "57:     got_exception = true;",
          "58:   }",
          "60:   assert.equal(close_called, 1);",
          "61:   assert.equal(got_exception, true);",
          "62: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "549443a7cc600e93cc1d1d1630108e7d0a035500",
      "candidate_info": {
        "commit_hash": "549443a7cc600e93cc1d1d1630108e7d0a035500",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/549443a7cc600e93cc1d1d1630108e7d0a035500",
        "files": [
          "src/v8_typed_array.cc",
          "test/simple/test-typed-arrays-typenames.js"
        ],
        "message": "typed arrays: set class name\n\nMake obj.toString and Object.prototype.toString work correctly for typed arrays.",
        "before_after_code_files": [
          "src/v8_typed_array.cc||src/v8_typed_array.cc",
          "test/simple/test-typed-arrays-typenames.js||test/simple/test-typed-arrays-typenames.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/v8_typed_array.cc||src/v8_typed_array.cc": [
          "File: src/v8_typed_array.cc -> src/v8_typed_array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     v8::HandleScope scope;",
          "141:     ft_cache = v8::Persistent<v8::FunctionTemplate>::New(",
          "142:         v8::FunctionTemplate::New(&TypedArray<TBytes, TEAType>::V8New));",
          "143:     v8::Local<v8::ObjectTemplate> instance = ft_cache->InstanceTemplate();",
          "144:     instance->SetInternalFieldCount(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     ft_cache->SetClassName(v8::String::New(TypeName()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:     return TypedArray<TBytes, TEAType>::GetTemplate()->",
          "377:         GetFunction()->NewInstance(3, argv);",
          "378:   }",
          "379: };",
          "381: class Int8Array : public TypedArray<1, v8::kExternalByteArray> { };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   static const char* TypeName() {",
          "382:     switch (TEAType) {",
          "383:       case v8::kExternalByteArray: return \"Int8Array\";",
          "384:       case v8::kExternalUnsignedByteArray: return \"Uint8Array\";",
          "385:       case v8::kExternalShortArray: return \"Int16Array\";",
          "386:       case v8::kExternalUnsignedShortArray: return \"Uint16Array\";",
          "387:       case v8::kExternalIntArray: return \"Int32Array\";",
          "388:       case v8::kExternalUnsignedIntArray: return \"Uint32Array\";",
          "389:       case v8::kExternalFloatArray: return \"Float32Array\";",
          "390:       case v8::kExternalDoubleArray: return \"Float64Array\";",
          "391:     }",
          "392:     abort();",
          "393:   }",
          "",
          "---------------"
        ],
        "test/simple/test-typed-arrays-typenames.js||test/simple/test-typed-arrays-typenames.js": [
          "File: test/simple/test-typed-arrays-typenames.js -> test/simple/test-typed-arrays-typenames.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "27: [",
          "28:   'ArrayBuffer',",
          "29:   'Int8Array',",
          "30:   'Uint8Array',",
          "31:   'Int16Array',",
          "32:   'Uint16Array',",
          "33:   'Int32Array',",
          "34:   'Uint32Array',",
          "35:   'Float32Array',",
          "36:   'Float64Array'",
          "37: ].forEach(function(name) {",
          "38:   var expected = '[object ' + name + ']';",
          "39:   var clazz = global[name];",
          "40:   var obj = new clazz(1);",
          "42:   assert.equal(obj.toString(), expected);",
          "43:   assert.equal(Object.prototype.toString.call(obj), expected);",
          "45:   obj = new DataView(obj);",
          "46:   assert.equal(obj.toString(), '[object DataView]');",
          "47:   assert.equal(Object.prototype.toString.call(obj), '[object DataView]');",
          "48: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "891f9defeb9713d8da9428195ad594a6d3627400",
      "candidate_info": {
        "commit_hash": "891f9defeb9713d8da9428195ad594a6d3627400",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/891f9defeb9713d8da9428195ad594a6d3627400",
        "files": [
          "lib/module.js"
        ],
        "message": "No need to have NativeModule.require('fs') in Module._findPath()",
        "before_after_code_files": [
          "lib/module.js||limodule.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: Module._findPath = function(request, paths) {",
          "162:   var exts = Object.keys(Module._extensions);",
          "164:   if (request.charAt(0) === '/') {",
          "",
          "[Removed Lines]",
          "161:   var fs = NativeModule.require('fs');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}