{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "189cd8c5f641369c29fd44d385490f0e43940a5d",
      "candidate_info": {
        "commit_hash": "189cd8c5f641369c29fd44d385490f0e43940a5d",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/189cd8c5f641369c29fd44d385490f0e43940a5d",
        "files": [
          "docs/c-api/uri.h/intro.md",
          "docs/c-api/uri.h/mg_assemble_uri.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Add mg_assemble_uri\n\nPUBLISHED_FROM=533e134a48e0fca55509c3eb16b0a6b64c1188e8",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5021:   out->len = d - cp;",
          "5022:   return 1;",
          "5023: }",
          "5024: #ifdef MG_MODULE_LINES",
          "5025: #line 1 \"mongoose/src/http.c\"",
          "5026: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5025: int mg_assemble_uri(const struct mg_str *scheme, const struct mg_str *user_info,",
          "5026:                     const struct mg_str *host, unsigned int port,",
          "5027:                     const struct mg_str *path, const struct mg_str *query,",
          "5028:                     const struct mg_str *fragment, int normalize_path,",
          "5029:                     struct mg_str *uri) {",
          "5030:   int result = -1;",
          "5031:   struct mbuf out;",
          "5032:   mbuf_init(&out, 0);",
          "5034:   if (scheme != NULL && scheme->len > 0) {",
          "5035:     mbuf_append(&out, scheme->p, scheme->len);",
          "5036:     mbuf_append(&out, \"://\", 3);",
          "5037:   }",
          "5039:   if (user_info != NULL && user_info->len > 0) {",
          "5040:     mbuf_append(&out, user_info->p, user_info->len);",
          "5041:     mbuf_append(&out, \"@\", 1);",
          "5042:   }",
          "5044:   if (host != NULL && host->len > 0) {",
          "5045:     mbuf_append(&out, host->p, host->len);",
          "5046:   }",
          "5048:   if (port != 0) {",
          "5049:     char port_str[20];",
          "5050:     int port_str_len = sprintf(port_str, \":%u\", port);",
          "5051:     mbuf_append(&out, port_str, port_str_len);",
          "5052:   }",
          "5054:   if (path != NULL && path->len > 0) {",
          "5055:     if (normalize_path) {",
          "5056:       struct mg_str npath = mg_strdup(*path);",
          "5057:       if (npath.len != path->len) goto out;",
          "5058:       if (!mg_normalize_uri_path(path, &npath)) {",
          "5059:         free((void *) npath.p);",
          "5060:         goto out;",
          "5061:       }",
          "5062:       mbuf_append(&out, npath.p, npath.len);",
          "5063:       free((void *) npath.p);",
          "5064:     } else {",
          "5065:       mbuf_append(&out, path->p, path->len);",
          "5066:     }",
          "5067:   } else if (normalize_path) {",
          "5068:     mbuf_append(&out, \"/\", 1);",
          "5069:   }",
          "5071:   if (query != NULL && query->len > 0) {",
          "5072:     mbuf_append(&out, \"?\", 1);",
          "5073:     mbuf_append(&out, query->p, query->len);",
          "5074:   }",
          "5076:   if (fragment != NULL && fragment->len > 0) {",
          "5077:     mbuf_append(&out, \"#\", 1);",
          "5078:     mbuf_append(&out, fragment->p, fragment->len);",
          "5079:   }",
          "5081:   result = 0;",
          "5083: out:",
          "5084:   if (result == 0) {",
          "5085:     uri->p = out.buf;",
          "5086:     uri->len = out.len;",
          "5087:   } else {",
          "5088:     mbuf_free(&out);",
          "5089:     uri->p = NULL;",
          "5090:     uri->len = 0;",
          "5091:   }",
          "5092:   return result;",
          "5093: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3843:                  unsigned int *port, struct mg_str *path, struct mg_str *query,",
          "3844:                  struct mg_str *fragment);",
          "3846: int mg_normalize_uri_path(const struct mg_str *in, struct mg_str *out);",
          "3848: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3855: int mg_assemble_uri(const struct mg_str *scheme, const struct mg_str *user_info,",
          "3856:                     const struct mg_str *host, unsigned int port,",
          "3857:                     const struct mg_str *path, const struct mg_str *query,",
          "3858:                     const struct mg_str *fragment, int normalize_path,",
          "3859:                     struct mg_str *uri);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "874b5bfdbff2a4f47aa2629211ef9360b32d04fd",
      "candidate_info": {
        "commit_hash": "874b5bfdbff2a4f47aa2629211ef9360b32d04fd",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/874b5bfdbff2a4f47aa2629211ef9360b32d04fd",
        "files": [
          "docs/c-api/http_server.h/mg_register_http_endpoint.md",
          "mongoose.h"
        ],
        "message": "Fix comment in mongoose.h\n\nPUBLISHED_FROM=35e8f18aa611b45c271d0178d9197291bfa9726d",
        "before_after_code_files": [
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h"
        ]
      }
    },
    {
      "candidate_hash": "7632a5e4afa41d8fc876d50da2a87349dc917fcb",
      "candidate_info": {
        "commit_hash": "7632a5e4afa41d8fc876d50da2a87349dc917fcb",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/7632a5e4afa41d8fc876d50da2a87349dc917fcb",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix ignoring DhcpNameServer\n\nPUBLISHED_FROM=73d6767e4aaa7249eeb5d76f9e7160be041292ca",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10952:         break;",
          "10953:       }",
          "10954:       if (RegOpenKeyExW(hKey, subkey, 0, KEY_READ, &hSub) == ERROR_SUCCESS &&",
          "",
          "[Removed Lines]",
          "10955:           (RegQueryValueExW(hSub, L\"NameServer\", 0, &type, (void *) value,",
          "10956:                             &len) == ERROR_SUCCESS ||",
          "10957:            RegQueryValueExW(hSub, L\"DhcpNameServer\", 0, &type, (void *) value,",
          "10958:                             &len) == ERROR_SUCCESS)) {",
          "",
          "[Added Lines]",
          "10955:           ((RegQueryValueExW(hSub, L\"NameServer\", 0, &type, (void *) value,",
          "10956:                              &len) == ERROR_SUCCESS &&",
          "10957:             value[0] != '\\0') ||",
          "10958:            (RegQueryValueExW(hSub, L\"DhcpNameServer\", 0, &type, (void *) value,",
          "10959:                              &len) == ERROR_SUCCESS &&",
          "10960:             value[0] != '\\0'))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10966:         wchar_t *comma = wcschr(value, ',');",
          "10970:         if (comma != NULL) {",
          "10972:         }",
          "",
          "[Removed Lines]",
          "10967:         if (value[0] == '\\0') {",
          "10968:           continue;",
          "10969:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "066be0fe3099e8bb0aee540881c4793988d18fbd",
      "candidate_info": {
        "commit_hash": "066be0fe3099e8bb0aee540881c4793988d18fbd",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/066be0fe3099e8bb0aee540881c4793988d18fbd",
        "files": [
          "examples/ajax_upload/Makefile",
          "examples/ajax_upload/ajax_upload.c",
          "examples/ajax_upload/index.html"
        ],
        "message": "Add ajax_upload example\n\nPUBLISHED_FROM=c5691d4321fff2e03f689b0195abd1ec6a188418",
        "before_after_code_files": [
          "examples/ajax_upload/ajax_upload.c||examples/ajax_upload/ajax_upload.c",
          "examples/ajax_upload/index.html||examples/ajax_upload/index.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/ajax_upload/ajax_upload.c||examples/ajax_upload/ajax_upload.c": [
          "File: examples/ajax_upload/ajax_upload.c -> examples/ajax_upload/ajax_upload.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"mongoose.h\"",
          "6: static const char *s_http_port = \"8000\";",
          "7: static struct mg_serve_http_opts s_http_server_opts;",
          "9: static void ev_handler(struct mg_connection *nc, int ev, void *p) {",
          "10:   if (ev == MG_EV_HTTP_REQUEST) {",
          "11:     mg_serve_http(nc, (struct http_message *) p, s_http_server_opts);",
          "12:   }",
          "13: }",
          "15: static void upload_handler(struct mg_connection *nc, int ev, void *p) {",
          "16:   (void) nc;",
          "17:   struct http_message *hm = (struct http_message *) p;",
          "18:   if (ev == MG_EV_HTTP_REQUEST) {",
          "19:     char file_name[256];",
          "20:     FILE *f = NULL;",
          "21:     if (mg_get_http_var(&hm->query_string, \"file_name\", file_name,",
          "22:                         sizeof(file_name)) <= 0) {",
          "23:       mg_printf(nc, \"%s\",",
          "24:                 \"HTTP/1.1 500 File name is not specified\\r\\n\"",
          "25:                 \"Content-Length: 0\\r\\n\\r\\n\");",
          "26:       nc->flags |= MG_F_SEND_AND_CLOSE;",
          "27:       goto cleanup;",
          "28:     }",
          "29:     printf(\"Saving file %s, size %d bytes\\n\", file_name, (int) hm->body.len);",
          "30:     f = fopen(file_name, \"w\");",
          "31:     if (f == NULL) {",
          "32:       mg_printf(nc, \"%s\",",
          "33:                 \"HTTP/1.1 500 Failed to open a file\\r\\n\"",
          "34:                 \"Content-Length: 0\\r\\n\\r\\n\");",
          "35:       nc->flags |= MG_F_SEND_AND_CLOSE;",
          "36:       goto cleanup;",
          "37:     }",
          "38:     if (fwrite(hm->body.p, 1, hm->body.len, f) != hm->body.len) {",
          "39:       mg_printf(nc, \"%s\",",
          "40:                 \"HTTP/1.1 500 Failed to write to a file\\r\\n\"",
          "41:                 \"Content-Length: 0\\r\\n\\r\\n\");",
          "42:       nc->flags |= MG_F_SEND_AND_CLOSE;",
          "43:       goto cleanup;",
          "44:     }",
          "45:     mg_printf(nc, \"%s\",",
          "46:               \"HTTP/1.1 200 OK\\r\\n\"",
          "47:               \"Content-Type: text/html\\r\\n\"",
          "48:               \"Connection: close\\r\\n\"",
          "49:               \"\\r\\n\"",
          "50:               \"File upload successfully\");",
          "51:     nc->flags |= MG_F_SEND_AND_CLOSE;",
          "52:     printf(\"Done.\\n\");",
          "53:   cleanup:",
          "54:     if (f != NULL) {",
          "55:       fclose(f);",
          "56:     }",
          "57:   }",
          "58: }",
          "60: int main(void) {",
          "61:   struct mg_mgr mgr;",
          "62:   struct mg_connection *nc;",
          "64:   mg_mgr_init(&mgr, NULL);",
          "65:   printf(\"Starting web server on port %s\\n\", s_http_port);",
          "66:   nc = mg_bind(&mgr, s_http_port, ev_handler);",
          "67:   if (nc == NULL) {",
          "68:     printf(\"Failed to create listener\\n\");",
          "69:     return 1;",
          "70:   }",
          "72:   mg_register_http_endpoint(nc, \"/upload\", upload_handler MG_UD_ARG(NULL));",
          "75:   mg_set_protocol_http_websocket(nc);",
          "76:   s_http_server_opts.document_root = \".\";  // Serve current directory",
          "77:   s_http_server_opts.enable_directory_listing = \"yes\";",
          "79:   for (;;) {",
          "80:     mg_mgr_poll(&mgr, 1000);",
          "81:   }",
          "82:   mg_mgr_free(&mgr);",
          "84:   return 0;",
          "85: }",
          "",
          "---------------"
        ],
        "examples/ajax_upload/index.html||examples/ajax_upload/index.html": [
          "File: examples/ajax_upload/index.html -> examples/ajax_upload/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!DOCTYPE html>",
          "2: <html>",
          "3: <head>",
          "4:   <title>AJAX Upload Example</title>",
          "5:   <script src=\"//code.jquery.com/jquery-1.9.1.js\"></script>",
          "6:   <script type=\"text/javascript\">",
          "7:     function updateProgress(evt) {",
          "8:       if (evt.lengthComputable) {",
          "9:         document.getElementById(\"output\").textContent =",
          "10:               \"Uploaded \" + evt.loaded + \" of \" + evt.total + \" bytes\";",
          "11:       }",
          "12:     }",
          "13:     function uploadFile() {",
          "14:       var file_name = $('input[type=file]').val().split('\\\\').pop();",
          "15:       console.log(\"uploadFile: \", file_name)",
          "16:       var file_data = document.getElementById('file').files[0];",
          "17:       $.ajax({",
          "18:         url: \"/upload?file_name=\" + file_name,",
          "19:         type: \"POST\",",
          "20:         data: file_data,",
          "21:         processData: false,",
          "22:         contentType: false,",
          "23:         cache: false,",
          "24:         xhr: function() {",
          "25:           myXhr = $.ajaxSettings.xhr();",
          "26:           if(myXhr.upload){",
          "27:             myXhr.upload.addEventListener('progress',updateProgress, false); // for handling the progress of the upload",
          "28:           }",
          "29:           return myXhr;",
          "30:         },",
          "31:       }).done(function(data) {",
          "32:           document.getElementById(\"output\").textContent = \"Result: \" + data;",
          "33:       });",
          "34:       return false;",
          "35:     }",
          "36:   </script>",
          "37: </head>",
          "39: <body>",
          "40:   <form method=\"post\" id=\"filename\" name=\"filename\" onsubmit=\"return uploadFile();\">",
          "41:     <label>Select a file:</label><br>",
          "42:     <input type=\"file\" id=\"file\" name=\"file\" required />",
          "43:     <input type=\"submit\" value=\"Upload\" />",
          "44:   </form>",
          "45:   <br><br><div id=\"output\"></div>",
          "46: </body>",
          "47: </html>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0fc3370859365deddc8b0f757b68e94ea6ddbc48",
      "candidate_info": {
        "commit_hash": "0fc3370859365deddc8b0f757b68e94ea6ddbc48",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/0fc3370859365deddc8b0f757b68e94ea6ddbc48",
        "files": [
          "docs/c-api/http.h/mg_connect_ws.md",
          "docs/c-api/http.h/mg_connect_ws_opt.md",
          "docs/c-api/http_client.h/mg_connect_http.md",
          "docs/c-api/http_client.h/mg_connect_http_opt.md",
          "docs/c-api/http_server.h/mg_file_upload_handler.md",
          "docs/c-api/net.h/mg_add_sock.md",
          "docs/c-api/net.h/mg_add_sock_opt.md",
          "docs/c-api/net.h/mg_bind.md",
          "docs/c-api/net.h/mg_bind_opt.md",
          "docs/c-api/net.h/mg_broadcast.md",
          "docs/c-api/net.h/mg_connect.md",
          "docs/c-api/net.h/mg_connect_opt.md",
          "docs/c-api/net.h/mg_event_handler_t.md",
          "docs/c-api/net.h/mg_next.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "First step towards separate userdata argument\n\nPUBLISHED_FROM=93fe1cc2c5e2513509511a81e5919cbd37056b10",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:                                struct http_message *hm);",
          "156: #endif",
          "157: #if MG_ENABLE_HTTP_WEBSOCKET",
          "159: MG_INTERNAL void mg_ws_handshake(struct mg_connection *nc,",
          "160:                                  const struct mg_str *key);",
          "161: #endif",
          "",
          "[Removed Lines]",
          "158: MG_INTERNAL void mg_ws_handler(struct mg_connection *nc, int ev, void *ev_data);",
          "",
          "[Added Lines]",
          "158: MG_INTERNAL void mg_ws_handler(struct mg_connection *nc, int ev,",
          "159:                                void *ev_data MG_UD_ARG(void *user_data));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1935: struct mg_connection *mg_tun_bind_opt(struct mg_mgr *mgr,",
          "1936:                                       const char *dispatcher,",
          "1938:                                       struct mg_bind_opts opts);",
          "1940: int mg_tun_parse_frame(void *data, size_t len, struct mg_tun_frame *frame);",
          "",
          "[Removed Lines]",
          "1937:                                       mg_event_handler_t handler,",
          "",
          "[Added Lines]",
          "1938:                                       MG_CB(mg_event_handler_t handler,",
          "1939:                                             void *user_data),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2049:   if (ev_handler != NULL) {",
          "2050:     unsigned long flags_before = nc->flags;",
          "2051:     size_t recv_mbuf_before = nc->recv_mbuf.len, recved;",
          "2053:     recved = (recv_mbuf_before - nc->recv_mbuf.len);",
          "2055:     if (ev_handler == nc->handler && nc->flags != flags_before) {",
          "",
          "[Removed Lines]",
          "2052:     ev_handler(nc, ev, ev_data);",
          "",
          "[Added Lines]",
          "2054:     ev_handler(nc, ev, ev_data MG_UD_ARG(nc->user_data));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2643: #endif",
          "2645: struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *address,",
          "2647:   struct mg_connect_opts opts;",
          "2648:   memset(&opts, 0, sizeof(opts));",
          "2650: }",
          "2652: struct mg_connection *mg_connect_opt(struct mg_mgr *mgr, const char *address,",
          "2654:                                      struct mg_connect_opts opts) {",
          "2655:   struct mg_connection *nc = NULL;",
          "2656:   int proto, rc;",
          "",
          "[Removed Lines]",
          "2646:                                  mg_event_handler_t callback) {",
          "2649:   return mg_connect_opt(mgr, address, callback, opts);",
          "2653:                                      mg_event_handler_t callback,",
          "",
          "[Added Lines]",
          "2648:                                  MG_CB(mg_event_handler_t callback,",
          "2649:                                        void *user_data)) {",
          "2652:   return mg_connect_opt(mgr, address, MG_CB(callback, user_data), opts);",
          "2656:                                      MG_CB(mg_event_handler_t callback,",
          "2657:                                            void *user_data),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2674:   nc->flags |= opts.flags & _MG_ALLOWED_CONNECT_FLAGS_MASK;",
          "2675:   nc->flags |= (proto == SOCK_DGRAM) ? MG_F_UDP : 0;",
          "2676:   nc->user_data = opts.user_data;",
          "2678: #if MG_ENABLE_SSL",
          "2679:   DBG((\"%p %s %s,%s,%s\", nc, address, (opts.ssl_cert ? opts.ssl_cert : \"-\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2680: #if MG_ENABLE_CALLBACK_USERDATA",
          "2681:   nc->user_data = user_data;",
          "2682: #else",
          "2684: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2745: }",
          "2747: struct mg_connection *mg_bind(struct mg_mgr *srv, const char *address,",
          "2749:   struct mg_bind_opts opts;",
          "2750:   memset(&opts, 0, sizeof(opts));",
          "2752: }",
          "2754: struct mg_connection *mg_bind_opt(struct mg_mgr *mgr, const char *address,",
          "2756:                                   struct mg_bind_opts opts) {",
          "2757:   union socket_address sa;",
          "2758:   struct mg_connection *nc = NULL;",
          "",
          "[Removed Lines]",
          "2748:                               mg_event_handler_t event_handler) {",
          "2751:   return mg_bind_opt(srv, address, event_handler, opts);",
          "2755:                                   mg_event_handler_t callback,",
          "",
          "[Added Lines]",
          "2756:                               MG_CB(mg_event_handler_t event_handler,",
          "2757:                                     void *user_data)) {",
          "2760:   return mg_bind_opt(srv, address, MG_CB(event_handler, user_data), opts);",
          "2764:                                   MG_CB(mg_event_handler_t callback,",
          "2765:                                         void *user_data),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2765: #if MG_ENABLE_TUN",
          "2766:   if (mg_strncmp(mg_mk_str(address), mg_mk_str(\"ws://\"), 5) == 0 ||",
          "2767:       mg_strncmp(mg_mk_str(address), mg_mk_str(\"wss://\"), 6) == 0) {",
          "2769:   }",
          "2770: #endif",
          "",
          "[Removed Lines]",
          "2768:     return mg_tun_bind_opt(mgr, address, callback, opts);",
          "",
          "[Added Lines]",
          "2778:     return mg_tun_bind_opt(mgr, address, MG_CB(callback, user_data), opts);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2823:   }",
          "2824:   mg_add_conn(nc->mgr, nc);",
          "2826:   return nc;",
          "2827: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2836: #if MG_ENABLE_CALLBACK_USERDATA",
          "2837:   (void) user_data;",
          "2838: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2934: }",
          "2936: struct mg_connection *mg_add_sock_opt(struct mg_mgr *s, sock_t sock,",
          "2938:                                       struct mg_add_sock_opts opts) {",
          "2939:   struct mg_connection *nc = mg_create_connection_base(s, callback, opts);",
          "2940:   if (nc != NULL) {",
          "2941:     mg_sock_set(nc, sock);",
          "",
          "[Removed Lines]",
          "2937:                                       mg_event_handler_t callback,",
          "",
          "[Added Lines]",
          "2950:                                       MG_CB(mg_event_handler_t callback,",
          "2951:                                             void *user_data),",
          "2953: #if MG_ENABLE_CALLBACK_USERDATA",
          "2954:   opts.user_data = user_data;",
          "2955: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2945: }",
          "2947: struct mg_connection *mg_add_sock(struct mg_mgr *s, sock_t sock,",
          "2949:   struct mg_add_sock_opts opts;",
          "2950:   memset(&opts, 0, sizeof(opts));",
          "2952: }",
          "2954: double mg_time(void) {",
          "",
          "[Removed Lines]",
          "2948:                                   mg_event_handler_t callback) {",
          "2951:   return mg_add_sock_opt(s, sock, callback, opts);",
          "",
          "[Added Lines]",
          "2966:                                   MG_CB(mg_event_handler_t callback,",
          "2967:                                         void *user_data)) {",
          "2970:   return mg_add_sock_opt(s, sock, MG_CB(callback, user_data), opts);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3525:   if (len >= (int) sizeof(ctl_msg.callback) && ctl_msg.callback != NULL) {",
          "3526:     struct mg_connection *nc;",
          "3527:     for (nc = mg_next(mgr, NULL); nc != NULL; nc = mg_next(mgr, nc)) {",
          "3529:     }",
          "3530:   }",
          "3531: }",
          "",
          "[Removed Lines]",
          "3528:       ctl_msg.callback(nc, MG_EV_POLL, ctl_msg.message);",
          "",
          "[Added Lines]",
          "3547:       ctl_msg.callback(nc, MG_EV_POLL,",
          "3548:                        ctl_msg.message MG_UD_ARG(nc->user_data));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5047: static void mg_http_conn_destructor(void *proto_data);",
          "5048: struct mg_connection *mg_connect_http_base(",
          "5050:     struct mg_connect_opts opts, const char *schema, const char *schema_ssl,",
          "5051:     const char *url, const char **path, char **user, char **pass, char **addr);",
          "",
          "[Removed Lines]",
          "5049:     struct mg_mgr *mgr, mg_event_handler_t ev_handler,",
          "",
          "[Added Lines]",
          "5069:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5563: #ifdef __xtensa__",
          "5565:                              struct http_message *hm) __attribute__((noinline));",
          "5568:   struct http_message hm;",
          "5570: }",
          "5573:                              struct http_message *hm) {",
          "5576:   struct http_message shm;",
          "5577:   struct http_message *hm = &shm;",
          "",
          "[Removed Lines]",
          "5564: static void mg_http_handler2(struct mg_connection *nc, int ev, void *ev_data,",
          "5567: void mg_http_handler(struct mg_connection *nc, int ev, void *ev_data) {",
          "5569:   mg_http_handler2(nc, ev, ev_data, &hm);",
          "5572: static void mg_http_handler2(struct mg_connection *nc, int ev, void *ev_data,",
          "5575: void mg_http_handler(struct mg_connection *nc, int ev, void *ev_data) {",
          "",
          "[Added Lines]",
          "5584: static void mg_http_handler2(struct mg_connection *nc, int ev,",
          "5585:                              void *ev_data MG_UD_ARG(void *user_data),",
          "5588: void mg_http_handler(struct mg_connection *nc, int ev,",
          "5589:                      void *ev_data MG_UD_ARG(void *user_data)) {",
          "5591:   mg_http_handler2(nc, ev, ev_data MG_UD_ARG(user_data), &hm);",
          "5594: static void mg_http_handler2(struct mg_connection *nc, int ev,",
          "5595:                              void *ev_data MG_UD_ARG(void *user_data),",
          "5598: void mg_http_handler(struct mg_connection *nc, int ev,",
          "5599:                      void *ev_data MG_UD_ARG(void *user_data)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5674:       nc->proto_handler = mg_ws_handler;",
          "5675:       nc->flags |= MG_F_IS_WEBSOCKET;",
          "5676:       mg_call(nc, nc->handler, MG_EV_WEBSOCKET_HANDSHAKE_DONE, NULL);",
          "5678:     } else if (nc->listener != NULL &&",
          "5679:                (vec = mg_get_http_header(hm, \"Sec-WebSocket-Key\")) != NULL) {",
          "5680:       mg_event_handler_t handler;",
          "",
          "[Removed Lines]",
          "5677:       mg_ws_handler(nc, MG_EV_RECV, ev_data);",
          "",
          "[Added Lines]",
          "5701:       mg_ws_handler(nc, MG_EV_RECV, ev_data MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5701:           mg_ws_handshake(nc, vec);",
          "5702:         }",
          "5703:         mg_call(nc, nc->handler, MG_EV_WEBSOCKET_HANDSHAKE_DONE, NULL);",
          "5705:       }",
          "5706:     }",
          "",
          "[Removed Lines]",
          "5704:         mg_ws_handler(nc, MG_EV_RECV, ev_data);",
          "",
          "[Added Lines]",
          "5728:         mg_ws_handler(nc, MG_EV_RECV, ev_data MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6950: }",
          "6952: static void mg_reverse_proxy_handler(struct mg_connection *nc, int ev,",
          "6954:   struct http_message *hm = (struct http_message *) ev_data;",
          "6955:   struct mg_http_proto_data *pd = mg_http_get_proto_data(nc);",
          "",
          "[Removed Lines]",
          "6953:                                      void *ev_data) {",
          "",
          "[Added Lines]",
          "6977:                                      void *ev_data MG_UD_ARG(void *user_data)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6976:       pd->reverse_proxy_data.linked_conn->flags |= MG_F_SEND_AND_CLOSE;",
          "6977:       break;",
          "6978:   }",
          "6979: }",
          "6981: void mg_http_reverse_proxy(struct mg_connection *nc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7004: #if MG_ENABLE_CALLBACK_USERDATA",
          "7005:   (void) user_data;",
          "7006: #endif",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6994:   mg_asprintf(&purl, sizeof(burl), \"%.*s%.*s\", (int) upstream.len, upstream.p,",
          "6995:               (int) (hm->uri.len - mount.len), hm->uri.p + mount.len);",
          "7000:   LOG(LL_DEBUG, (\"Proxying %.*s to %s (rule: %.*s)\", (int) hm->uri.len,",
          "7001:                  hm->uri.p, purl, (int) mount.len, mount.p));",
          "",
          "[Removed Lines]",
          "6997:   be = mg_connect_http_base(nc->mgr, mg_reverse_proxy_handler, opts, \"http://\",",
          "6998:                             \"https://\", purl, &path, NULL /* user */,",
          "6999:                             NULL /* pass */, &addr);",
          "",
          "[Added Lines]",
          "7025:   be = mg_connect_http_base(nc->mgr, MG_CB(mg_reverse_proxy_handler, NULL),",
          "7026:                             opts, \"http://\", \"https://\", purl, &path,",
          "7027:                             NULL /* user */, NULL /* pass */, &addr);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7475: #if MG_ENABLE_HTTP_STREAMING_MULTIPART",
          "7476: void mg_file_upload_handler(struct mg_connection *nc, int ev, void *ev_data,",
          "7478:   switch (ev) {",
          "7479:     case MG_EV_HTTP_PART_BEGIN: {",
          "7480:       struct mg_http_multipart_part *mp =",
          "",
          "[Removed Lines]",
          "7477:                             mg_fu_fname_fn local_name_fn) {",
          "",
          "[Added Lines]",
          "7505:                             mg_fu_fname_fn local_name_fn",
          "7506:                                 MG_UD_ARG(void *user_data)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7586:       break;",
          "7587:     }",
          "7588:   }",
          "7589: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7619: #if MG_ENABLE_CALLBACK_USERDATA",
          "7620:   (void) user_data;",
          "7621: #endif",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7674: }",
          "7676: struct mg_connection *mg_connect_http_base(",
          "7678:     struct mg_connect_opts opts, const char *schema, const char *schema_ssl,",
          "7679:     const char *url, const char **path, char **user, char **pass, char **addr) {",
          "7680:   struct mg_connection *nc = NULL;",
          "",
          "[Removed Lines]",
          "7677:     struct mg_mgr *mgr, mg_event_handler_t ev_handler,",
          "",
          "[Added Lines]",
          "7710:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7707: #endif",
          "7708:   }",
          "7711:     mg_set_protocol_http_websocket(nc);",
          "7713:     if (port_i >= 0) (*addr)[port_i] = '\\0';",
          "",
          "[Removed Lines]",
          "7710:   if ((nc = mg_connect_opt(mgr, *addr, ev_handler, opts)) != NULL) {",
          "",
          "[Added Lines]",
          "7743:   if ((nc = mg_connect_opt(mgr, *addr, MG_CB(ev_handler, user_data), opts)) !=",
          "7744:       NULL) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7716:   return nc;",
          "7717: }",
          "7725:   char *user = NULL, *pass = NULL, *addr = NULL;",
          "7726:   const char *path = NULL;",
          "7727:   struct mbuf auth;",
          "7728:   struct mg_connection *nc =",
          "7732:   if (nc == NULL) {",
          "7733:     return NULL;",
          "",
          "[Removed Lines]",
          "7719: struct mg_connection *mg_connect_http_opt(struct mg_mgr *mgr,",
          "7720:                                           mg_event_handler_t ev_handler,",
          "7721:                                           struct mg_connect_opts opts,",
          "7722:                                           const char *url,",
          "7723:                                           const char *extra_headers,",
          "7724:                                           const char *post_data) {",
          "7729:       mg_connect_http_base(mgr, ev_handler, opts, \"http://\", \"https://\", url,",
          "7730:                            &path, &user, &pass, &addr);",
          "",
          "[Added Lines]",
          "7753: struct mg_connection *mg_connect_http_opt(",
          "7754:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "7755:     struct mg_connect_opts opts, const char *url, const char *extra_headers,",
          "7756:     const char *post_data) {",
          "7761:       mg_connect_http_base(mgr, MG_CB(ev_handler, user_data), opts, \"http://\",",
          "7762:                            \"https://\", url, &path, &user, &pass, &addr);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7754:   return nc;",
          "7755: }",
          "7762:   struct mg_connect_opts opts;",
          "7763:   memset(&opts, 0, sizeof(opts));",
          "7766: }",
          "7768: size_t mg_parse_multipart(const char *buf, size_t buf_len, char *var_name,",
          "",
          "[Removed Lines]",
          "7757: struct mg_connection *mg_connect_http(struct mg_mgr *mgr,",
          "7758:                                       mg_event_handler_t ev_handler,",
          "7759:                                       const char *url,",
          "7760:                                       const char *extra_headers,",
          "7761:                                       const char *post_data) {",
          "7764:   return mg_connect_http_opt(mgr, ev_handler, opts, url, extra_headers,",
          "7765:                              post_data);",
          "",
          "[Added Lines]",
          "7789: struct mg_connection *mg_connect_http(",
          "7790:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "7791:     const char *url, const char *extra_headers, const char *post_data) {",
          "7794:   return mg_connect_http_opt(mgr, MG_CB(ev_handler, user_data), opts, url,",
          "7795:                              extra_headers, post_data);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "8196: }",
          "8198: static void mg_cgi_ev_handler(struct mg_connection *cgi_nc, int ev,",
          "8201:   (void) ev_data;",
          "8203:   if (nc == NULL) {",
          "",
          "[Removed Lines]",
          "8199:                               void *ev_data) {",
          "8200:   struct mg_connection *nc = (struct mg_connection *) cgi_nc->user_data;",
          "",
          "[Added Lines]",
          "8229:                               void *ev_data MG_UD_ARG(void *user_data)) {",
          "8230: #if !MG_ENABLE_CALLBACK_USERDATA",
          "8231:   void *user_data = cgi_nc->user_data;",
          "8232: #endif",
          "8233:   struct mg_connection *nc = (struct mg_connection *) user_data;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "8289:                        fds[1]) != 0) {",
          "8290:     size_t n = nc->recv_mbuf.len - (hm->message.len - hm->body.len);",
          "8291:     struct mg_connection *cgi_nc =",
          "8293:     struct mg_http_proto_data *cgi_pd = mg_http_get_proto_data(nc);",
          "8294:     cgi_pd->cgi.cgi_nc = cgi_nc;",
          "8295:     cgi_pd->cgi.cgi_nc->user_data = nc;",
          "8296:     nc->flags |= MG_F_USER_1;",
          "8298:     if (n > 0 && n < nc->recv_mbuf.len) {",
          "",
          "[Removed Lines]",
          "8292:         mg_add_sock(nc->mgr, fds[0], mg_cgi_ev_handler);",
          "",
          "[Added Lines]",
          "8325:         mg_add_sock(nc->mgr, fds[0], mg_cgi_ev_handler MG_UD_ARG(nc));",
          "8328: #if !MG_ENABLE_CALLBACK_USERDATA",
          "8330: #endif",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "9035: }",
          "9037: MG_INTERNAL void mg_ws_handler(struct mg_connection *nc, int ev,",
          "9039:   mg_call(nc, nc->handler, ev, ev_data);",
          "9041:   switch (ev) {",
          "",
          "[Removed Lines]",
          "9038:                                void *ev_data) {",
          "",
          "[Added Lines]",
          "9073:                                void *ev_data MG_UD_ARG(void *user_data)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "9056:     default:",
          "9057:       break;",
          "9058:   }",
          "9059: }",
          "9061: #ifndef MG_EXT_SHA1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9094: #if MG_ENABLE_CALLBACK_USERDATA",
          "9095:   (void) user_data;",
          "9096: #endif",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "9154:                                extra_headers);",
          "9155: }",
          "9162:   char *user = NULL, *pass = NULL, *addr = NULL;",
          "9163:   const char *path = NULL;",
          "9164:   struct mg_connection *nc =",
          "9168:   if (nc != NULL) {",
          "9169:     mg_send_websocket_handshake3(nc, path, addr, protocol, extra_headers, user,",
          "",
          "[Removed Lines]",
          "9157: struct mg_connection *mg_connect_ws_opt(struct mg_mgr *mgr,",
          "9158:                                         mg_event_handler_t ev_handler,",
          "9159:                                         struct mg_connect_opts opts,",
          "9160:                                         const char *url, const char *protocol,",
          "9161:                                         const char *extra_headers) {",
          "9165:       mg_connect_http_base(mgr, ev_handler, opts, \"ws://\", \"wss://\", url, &path,",
          "9166:                            &user, &pass, &addr);",
          "",
          "[Added Lines]",
          "9195: struct mg_connection *mg_connect_ws_opt(",
          "9196:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "9197:     struct mg_connect_opts opts, const char *url, const char *protocol,",
          "9198:     const char *extra_headers) {",
          "9202:       mg_connect_http_base(mgr, MG_CB(ev_handler, user_data), opts, \"ws://\",",
          "9203:                            \"wss://\", url, &path, &user, &pass, &addr);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "9176:   return nc;",
          "9177: }",
          "9183:   struct mg_connect_opts opts;",
          "9184:   memset(&opts, 0, sizeof(opts));",
          "9186: }",
          "9188: #ifdef MG_MODULE_LINES",
          "",
          "[Removed Lines]",
          "9179: struct mg_connection *mg_connect_ws(struct mg_mgr *mgr,",
          "9180:                                     mg_event_handler_t ev_handler,",
          "9181:                                     const char *url, const char *protocol,",
          "9182:                                     const char *extra_headers) {",
          "9185:   return mg_connect_ws_opt(mgr, ev_handler, opts, url, protocol, extra_headers);",
          "",
          "[Added Lines]",
          "9216: struct mg_connection *mg_connect_ws(",
          "9217:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "9218:     const char *url, const char *protocol, const char *extra_headers) {",
          "9221:   return mg_connect_ws_opt(mgr, MG_CB(ev_handler, user_data), opts, url,",
          "9222:                            protocol, extra_headers);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "9694:   return end - io->buf;",
          "9695: }",
          "9698:   int len;",
          "9699:   struct mbuf *io = &nc->recv_mbuf;",
          "9700:   struct mg_mqtt_message mm;",
          "9701:   memset(&mm, 0, sizeof(mm));",
          "9705:   switch (ev) {",
          "9706:     case MG_EV_RECV:",
          "9707:       len = parse_mqtt(io, &mm);",
          "9710:       mbuf_remove(io, len);",
          "9711:       break;",
          "9712:   }",
          "",
          "[Removed Lines]",
          "9697: static void mqtt_handler(struct mg_connection *nc, int ev, void *ev_data) {",
          "9703:   nc->handler(nc, ev, ev_data);",
          "9709:       nc->handler(nc, MG_MQTT_EVENT_BASE + mm.cmd, &mm);",
          "",
          "[Added Lines]",
          "9734: static void mqtt_handler(struct mg_connection *nc, int ev,",
          "9735:                          void *ev_data MG_UD_ARG(void *user_data)) {",
          "9741:   nc->handler(nc, ev, ev_data MG_UD_ARG(user_data));",
          "9747:       nc->handler(nc, MG_MQTT_EVENT_BASE + mm.cmd, &mm MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "10479:   return dst - old_dst;",
          "10480: }",
          "10483:   struct mbuf *io = &nc->recv_mbuf;",
          "10484:   struct mg_dns_message msg;",
          "10489:   switch (ev) {",
          "10490:     case MG_EV_RECV:",
          "",
          "[Removed Lines]",
          "10482: static void dns_handler(struct mg_connection *nc, int ev, void *ev_data) {",
          "10487:   nc->handler(nc, ev, ev_data);",
          "",
          "[Added Lines]",
          "10520: static void dns_handler(struct mg_connection *nc, int ev,",
          "10521:                         void *ev_data MG_UD_ARG(void *user_data)) {",
          "10526:   nc->handler(nc, ev, ev_data MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "10503:         mg_send(nc, io->buf, io->len);",
          "10504:       } else {",
          "10507:       }",
          "10508:       mbuf_remove(io, io->len);",
          "10509:       break;",
          "",
          "[Removed Lines]",
          "10506:         nc->handler(nc, MG_DNS_MESSAGE, &msg);",
          "",
          "[Added Lines]",
          "10545:         nc->handler(nc, MG_DNS_MESSAGE, &msg MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "10741:   return -1;",
          "10742: }",
          "10745:   time_t now = (time_t) mg_time();",
          "10746:   struct mg_resolve_async_request *req;",
          "10747:   struct mg_dns_message *msg;",
          "10748:   int first = 0;",
          "10754:   if (req == NULL) {",
          "10755:     return;",
          "",
          "[Removed Lines]",
          "10744: static void mg_resolve_async_eh(struct mg_connection *nc, int ev, void *data) {",
          "10750:   if (ev != MG_EV_POLL) DBG((\"ev=%d user_data=%p\", ev, nc->user_data));",
          "10752:   req = (struct mg_resolve_async_request *) nc->user_data;",
          "",
          "[Added Lines]",
          "10783: static void mg_resolve_async_eh(struct mg_connection *nc, int ev,",
          "10784:                                 void *data MG_UD_ARG(void *user_data)) {",
          "10789: #if !MG_ENABLE_CALLBACK_USERDATA",
          "10790:   void *user_data = nc->user_data;",
          "10791: #endif",
          "10793:   if (ev != MG_EV_POLL) DBG((\"ev=%d user_data=%p\", ev, user_data));",
          "10795:   req = (struct mg_resolve_async_request *) user_data;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "10849:     nameserver = mg_dns_server;",
          "10850:   }",
          "10853:   if (dns_nc == NULL) {",
          "10854:     free(req);",
          "10855:     return -1;",
          "",
          "[Removed Lines]",
          "10852:   dns_nc = mg_connect(mgr, nameserver, mg_resolve_async_eh);",
          "",
          "[Added Lines]",
          "10895:   dns_nc = mg_connect(mgr, nameserver, MG_CB(mg_resolve_async_eh, NULL));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "11523: }",
          "11525: static void mg_tun_client_handler(struct mg_connection *nc, int ev,",
          "11529:   switch (ev) {",
          "11530:     case MG_EV_CONNECT: {",
          "",
          "[Removed Lines]",
          "11526:                                   void *ev_data) {",
          "11527:   struct mg_tun_client *client = (struct mg_tun_client *) nc->user_data;",
          "",
          "[Added Lines]",
          "11569:                                   void *ev_data MG_UD_ARG(void *user_data)) {",
          "11570: #if !MG_ENABLE_CALLBACK_USERDATA",
          "11571:   void *user_data = nc->user_data;",
          "11572: #else",
          "11573:   (void) nc;",
          "11574: #endif",
          "11575:   struct mg_tun_client *client = (struct mg_tun_client *) user_data;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "11611:   opts.ssl_ca_cert = client->ssl.ssl_ca_cert;",
          "11612: #endif",
          "11617:     LOG(LL_ERROR,",
          "11618:         (\"Cannot connect to WS server on addr [%s]\\n\", client->disp_url));",
          "11619:     return;",
          "11620:   }",
          "11622:   client->disp = dc;",
          "11623:   dc->user_data = client;",
          "11624: }",
          "11626: void mg_tun_reconnect_ev_handler(struct mg_connection *nc, int ev,",
          "11629:   (void) ev_data;",
          "11631:   switch (ev) {",
          "",
          "[Removed Lines]",
          "11614:   if ((dc = mg_connect_ws_opt(client->mgr, mg_tun_client_handler, opts,",
          "11615:                               client->disp_url, MG_TUN_PROTO_NAME, NULL)) ==",
          "11616:       NULL) {",
          "11627:                                  void *ev_data) {",
          "11628:   struct mg_tun_client *client = (struct mg_tun_client *) nc->user_data;",
          "",
          "[Added Lines]",
          "11662:   if ((dc = mg_connect_ws_opt(client->mgr, MG_CB(mg_tun_client_handler, client),",
          "11663:                               opts, client->disp_url, MG_TUN_PROTO_NAME,",
          "11664:                               NULL)) == NULL) {",
          "11671: #if !MG_ENABLE_CALLBACK_USERDATA",
          "11673: #endif",
          "11677:                                  void *ev_data MG_UD_ARG(void *user_data)) {",
          "11678: #if !MG_ENABLE_CALLBACK_USERDATA",
          "11679:   void *user_data = nc->user_data;",
          "11680: #else",
          "11681:   (void) nc;",
          "11682: #endif",
          "11683:   struct mg_tun_client *client = (struct mg_tun_client *) user_data;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "11643: static void mg_tun_reconnect(struct mg_tun_client *client, int timeout) {",
          "11644:   if (client->reconnect == NULL) {",
          "11647:     client->reconnect->user_data = client;",
          "11648:   }",
          "11649:   client->reconnect->ev_timer_time = mg_time() + timeout;",
          "11650: }",
          "",
          "[Removed Lines]",
          "11645:     client->reconnect =",
          "11646:         mg_add_sock(client->mgr, INVALID_SOCKET, mg_tun_reconnect_ev_handler);",
          "",
          "[Added Lines]",
          "11700:     client->reconnect = mg_add_sock(client->mgr, INVALID_SOCKET,",
          "11701:                                     MG_CB(mg_tun_reconnect_ev_handler, client));",
          "11702: #if !MG_ENABLE_CALLBACK_USERDATA",
          "11704: #endif",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "11700: }",
          "11702: static struct mg_connection *mg_tun_do_bind(struct mg_tun_client *client,",
          "11704:                                             struct mg_bind_opts opts) {",
          "11705:   struct mg_connection *lc;",
          "11706:   opts.iface = client->iface;",
          "11708:   client->listener = lc;",
          "11709:   return lc;",
          "11710: }",
          "11712: struct mg_connection *mg_tun_bind_opt(struct mg_mgr *mgr,",
          "11713:                                       const char *dispatcher,",
          "11715:                                       struct mg_bind_opts opts) {",
          "11716: #if MG_ENABLE_SSL",
          "11717:   struct mg_tun_ssl_opts ssl = {opts.ssl_cert, opts.ssl_key, opts.ssl_ca_cert};",
          "",
          "[Removed Lines]",
          "11703:                                             mg_event_handler_t handler,",
          "11707:   lc = mg_bind_opt(client->mgr, \":1234\" /* dummy port */, handler, opts);",
          "11714:                                       mg_event_handler_t handler,",
          "",
          "[Added Lines]",
          "11760:                                             MG_CB(mg_event_handler_t handler,",
          "11761:                                                   void *user_data),",
          "11765:   lc = mg_bind_opt(client->mgr, \":1234\" /* dummy port */,",
          "11766:                    MG_CB(handler, user_data), opts);",
          "11773:                                       MG_CB(mg_event_handler_t handler,",
          "11774:                                             void *user_data),",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "11728:   opts.ssl_key = NULL;",
          "11729:   opts.ssl_ca_cert = NULL;",
          "11730: #endif",
          "11732: }",
          "11734: int mg_tun_parse_frame(void *data, size_t len, struct mg_tun_frame *frame) {",
          "",
          "[Removed Lines]",
          "11731:   return mg_tun_do_bind(client, handler, opts);",
          "",
          "[Added Lines]",
          "11791:   return mg_tun_do_bind(client, MG_CB(handler, user_data), opts);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "11909:   return 0;",
          "11910: }",
          "11913:   struct mbuf *io = &c->recv_mbuf;",
          "11914:   struct mg_sntp_message msg;",
          "11918:   switch (ev) {",
          "11919:     case MG_EV_RECV: {",
          "11920:       if (mg_sntp_parse_reply(io->buf, io->len, &msg) < 0) {",
          "11921:         DBG((\"Invalid SNTP packet received (%d)\", (int) io->len));",
          "11923:       } else {",
          "11925:       }",
          "11927:       mbuf_remove(io, io->len);",
          "",
          "[Removed Lines]",
          "11912: static void mg_sntp_handler(struct mg_connection *c, int ev, void *ev_data) {",
          "11916:   c->handler(c, ev, ev_data);",
          "11922:         c->handler(c, MG_SNTP_MALFORMED_REPLY, NULL);",
          "11924:         c->handler(c, MG_SNTP_REPLY, (void *) &msg);",
          "",
          "[Added Lines]",
          "11972: static void mg_sntp_handler(struct mg_connection *c, int ev,",
          "11973:                             void *ev_data MG_UD_ARG(void *user_data)) {",
          "11977:   c->handler(c, ev, ev_data MG_UD_ARG(user_data));",
          "11983:         c->handler(c, MG_SNTP_MALFORMED_REPLY, NULL MG_UD_ARG(user_data));",
          "11985:         c->handler(c, MG_SNTP_REPLY, (void *) &msg MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "11941: }",
          "11943: struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr,",
          "11945:                                       const char *sntp_server_name) {",
          "11946:   struct mg_connection *c = NULL;",
          "11947:   char url[100], *p_url = url;",
          "",
          "[Removed Lines]",
          "11944:                                       mg_event_handler_t event_handler,",
          "",
          "[Added Lines]",
          "12005:                                       MG_CB(mg_event_handler_t event_handler,",
          "12006:                                             void *user_data),",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "11965:   mg_asprintf(&p_url, sizeof(url), \"%s%s%s\", proto, sntp_server_name, port);",
          "11969:   if (c == NULL) {",
          "11970:     goto cleanup;",
          "",
          "[Removed Lines]",
          "11967:   c = mg_connect(mgr, p_url, event_handler);",
          "",
          "[Added Lines]",
          "12029:   c = mg_connect(mgr, p_url, event_handler MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "11986: };",
          "11988: static void mg_sntp_util_ev_handler(struct mg_connection *c, int ev,",
          "11992:   switch (ev) {",
          "11993:     case MG_EV_CONNECT:",
          "",
          "[Removed Lines]",
          "11989:                                     void *ev_data) {",
          "11990:   struct sntp_data *sd = (struct sntp_data *) c->user_data;",
          "",
          "[Added Lines]",
          "12051:                                     void *ev_data MG_UD_ARG(void *user_data)) {",
          "12052: #if !MG_ENABLE_CALLBACK_USERDATA",
          "12053:   void *user_data = c->user_data;",
          "12054: #endif",
          "12055:   struct sntp_data *sd = (struct sntp_data *) user_data;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "12015:       c->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "12016:       break;",
          "12017:     case MG_EV_CLOSE:",
          "12019:       c->user_data = NULL;",
          "12020:       break;",
          "12021:   }",
          "",
          "[Removed Lines]",
          "12018:       MG_FREE(c->user_data);",
          "",
          "[Added Lines]",
          "12083:       MG_FREE(user_data);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "12030:     return NULL;",
          "12031:   }",
          "12034:   if (c == NULL) {",
          "12035:     MG_FREE(sd);",
          "12036:     return NULL;",
          "12037:   }",
          "12039:   sd->hander = event_handler;",
          "12040:   c->user_data = sd;",
          "12042:   return c;",
          "12043: }",
          "",
          "[Removed Lines]",
          "12033:   c = mg_sntp_connect(mgr, mg_sntp_util_ev_handler, sntp_server_name);",
          "",
          "[Added Lines]",
          "12098:   c = mg_sntp_connect(mgr, MG_CB(mg_sntp_util_ev_handler, sd),",
          "12099:                       sntp_server_name);",
          "12106: #if !MG_ENABLE_CALLBACK_USERDATA",
          "12108: #endif",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2963: #define MG_ENABLE_EXTRA_ERRORS_DESC 0",
          "2964: #endif",
          "2967: #ifdef MG_MODULE_LINES",
          "2968: #line 1 \"mongoose/src/net_if.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2966: #ifndef MG_ENABLE_CALLBACK_USERDATA",
          "2967: #define MG_ENABLE_CALLBACK_USERDATA 0",
          "2968: #endif",
          "2970: #if MG_ENABLE_CALLBACK_USERDATA",
          "2971: #define MG_UD_ARG(ud) , ud",
          "2972: #define MG_CB(cb, ud) cb, ud",
          "2973: #else",
          "2974: #define MG_UD_ARG(ud)",
          "2975: #define MG_CB(cb, ud) cb",
          "2976: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3231: typedef void (*mg_event_handler_t)(struct mg_connection *nc, int ev,",
          "",
          "[Removed Lines]",
          "3232:                                    void *ev_data);",
          "",
          "[Added Lines]",
          "3244:                                    void *ev_data MG_UD_ARG(void *user_data));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3396: #endif",
          "",
          "[Removed Lines]",
          "3395: void mg_broadcast(struct mg_mgr *, mg_event_handler_t func, void *, size_t);",
          "",
          "[Added Lines]",
          "3407: void mg_broadcast(struct mg_mgr *mgr, mg_event_handler_t cb, void *data,",
          "3408:                   size_t len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3411: struct mg_connection *mg_next(struct mg_mgr *, struct mg_connection *);",
          "",
          "[Added Lines]",
          "3424: struct mg_connection *mg_next(struct mg_mgr *mgr, struct mg_connection *c);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3432: struct mg_connection *mg_add_sock(struct mg_mgr *, sock_t, mg_event_handler_t);",
          "",
          "[Added Lines]",
          "3445: struct mg_connection *mg_add_sock(struct mg_mgr *mgr, sock_t sock,",
          "3446:                                   MG_CB(mg_event_handler_t handler,",
          "3447:                                         void *user_data));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3440: struct mg_connection *mg_add_sock_opt(struct mg_mgr *, sock_t,",
          "3441:                                       mg_event_handler_t,",
          "3442:                                       struct mg_add_sock_opts);",
          "",
          "[Added Lines]",
          "3455: struct mg_connection *mg_add_sock_opt(struct mg_mgr *mgr, sock_t sock,",
          "3456:                                       MG_CB(mg_event_handler_t handler,",
          "3457:                                             void *user_data),",
          "3458:                                       struct mg_add_sock_opts opts);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3488: struct mg_connection *mg_bind(struct mg_mgr *, const char *,",
          "3489:                               mg_event_handler_t);",
          "",
          "[Added Lines]",
          "3504: struct mg_connection *mg_bind(struct mg_mgr *mgr, const char *address,",
          "3505:                               MG_CB(mg_event_handler_t handler,",
          "3506:                                     void *user_data));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3508: struct mg_connection *mg_bind_opt(struct mg_mgr *mgr, const char *address,",
          "3510:                                   struct mg_bind_opts opts);",
          "",
          "[Removed Lines]",
          "3509:                                   mg_event_handler_t handler,",
          "",
          "[Added Lines]",
          "3526:                                   MG_CB(mg_event_handler_t handler,",
          "3527:                                         void *user_data),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3571: struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *address,",
          "",
          "[Removed Lines]",
          "3572:                                  mg_event_handler_t handler);",
          "",
          "[Added Lines]",
          "3590:                                  MG_CB(mg_event_handler_t handler,",
          "3591:                                        void *user_data));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3622: struct mg_connection *mg_connect_opt(struct mg_mgr *mgr, const char *address,",
          "3624:                                      struct mg_connect_opts opts);",
          "3626: #if MG_ENABLE_SSL && MG_NET_IF != MG_NET_IF_SIMPLELINK",
          "",
          "[Removed Lines]",
          "3623:                                      mg_event_handler_t handler,",
          "",
          "[Added Lines]",
          "3642:                                      MG_CB(mg_event_handler_t handler,",
          "3643:                                            void *user_data),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4276: struct mg_connection *mg_connect_ws(struct mg_mgr *mgr,",
          "4278:                                     const char *url, const char *protocol,",
          "4279:                                     const char *extra_headers);",
          "",
          "[Removed Lines]",
          "4277:                                     mg_event_handler_t event_handler,",
          "",
          "[Added Lines]",
          "4297:                                     MG_CB(mg_event_handler_t event_handler,",
          "4298:                                           void *user_data),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4287: struct mg_connection *mg_connect_ws_opt(struct mg_mgr *mgr,",
          "4288:                                         mg_event_handler_t ev_handler,",
          "4289:                                         struct mg_connect_opts opts,",
          "4290:                                         const char *url, const char *protocol,",
          "4291:                                         const char *extra_headers);",
          "",
          "[Added Lines]",
          "4308: struct mg_connection *mg_connect_ws_opt(",
          "4309:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "4310:     struct mg_connect_opts opts, const char *url, const char *protocol,",
          "4311:     const char *extra_headers);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4741: void mg_file_upload_handler(struct mg_connection *nc, int ev, void *ev_data,",
          "",
          "[Removed Lines]",
          "4742:                             mg_fu_fname_fn local_name_fn);",
          "",
          "[Added Lines]",
          "4762:                             mg_fu_fname_fn local_name_fn",
          "4763:                                 MG_UD_ARG(void *user_data));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4929: struct mg_connection *mg_connect_http(struct mg_mgr *mgr,",
          "4930:                                       mg_event_handler_t event_handler,",
          "4931:                                       const char *url,",
          "4932:                                       const char *extra_headers,",
          "4933:                                       const char *post_data);",
          "",
          "[Added Lines]",
          "4950: struct mg_connection *mg_connect_http(",
          "4951:     struct mg_mgr *mgr,",
          "4952:     MG_CB(mg_event_handler_t event_handler, void *user_data), const char *url,",
          "4953:     const char *extra_headers, const char *post_data);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4950: int mg_http_create_digest_auth_header(char *buf, size_t buf_len,",
          "",
          "[Removed Lines]",
          "4942: struct mg_connection *mg_connect_http_opt(struct mg_mgr *mgr,",
          "4943:                                           mg_event_handler_t ev_handler,",
          "4944:                                           struct mg_connect_opts opts,",
          "4945:                                           const char *url,",
          "4946:                                           const char *extra_headers,",
          "4947:                                           const char *post_data);",
          "",
          "[Added Lines]",
          "4962: struct mg_connection *mg_connect_http_opt(",
          "4963:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "4964:     struct mg_connect_opts opts, const char *url, const char *extra_headers,",
          "4965:     const char *post_data);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5839: struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr,",
          "5841:                                       const char *sntp_server_name);",
          "",
          "[Removed Lines]",
          "5840:                                       mg_event_handler_t event_handler,",
          "",
          "[Added Lines]",
          "5858:                                       MG_CB(mg_event_handler_t event_handler,",
          "5859:                                             void *user_data),",
          "",
          "---------------"
        ]
      }
    }
  ]
}