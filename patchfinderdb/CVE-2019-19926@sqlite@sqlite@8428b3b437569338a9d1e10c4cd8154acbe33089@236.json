{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55f66b341a55f418fac2e6ce4554dc9702309616",
      "candidate_info": {
        "commit_hash": "55f66b341a55f418fac2e6ce4554dc9702309616",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55f66b341a55f418fac2e6ce4554dc9702309616",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c",
          "src/btree.c",
          "src/build.c",
          "src/fkey.c",
          "src/parse.y",
          "src/pcache.c",
          "src/pcache1.c",
          "src/select.c",
          "src/trigger.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/wal.c",
          "src/where.c",
          "src/window.c",
          "tool/lempar.c"
        ],
        "message": "Add new assert() statements in an attempt to help static analyzers avoid false-positives.\n\nFossilOrigin-Name: 9e66458592d40fbd96ea5f21339573110ca1cfe328238a020c9420a87d35dd72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/pcache.c||src/pcache.c",
          "src/pcache1.c||src/pcache1.c",
          "src/select.c||src/select.c",
          "src/trigger.c||src/trigger.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/wal.c||src/wal.c",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 22a7c15b262376fb0ce4dd3d044373380d86c5ccd96e2f24576cf04318597c33",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:   }",
          "620:   if( p->isAttached ){",
          "621:     pp = sqlite3PagerBackupPtr(sqlite3BtreePager(p->pSrc));",
          "622:     while( *pp!=p ){",
          "623:       pp = &(*pp)->pNext;",
          "624:     }",
          "626:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "622:     assert( pp!=0 );",
          "625:       assert( pp!=0 );",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7962:   ));",
          "7964:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "7965:   put4byte(pRight, apNew[nNew-1]->pgno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7965:   assert( nNew>=1 && nNew<=ArraySize(apNew) );",
          "7966:   assert( apNew[nNew-1]!=0 );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3632:       if( pStart ){",
          "3633:         int n = (int)(pParse->sLastToken.z - pName->z) + pParse->sLastToken.n;",
          "3634:         if( pName->z[n-1]==';' ) n--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3632:       assert( pName!=0 || pStart==0 );",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:       return 0;",
          "1333:     }",
          "1334:     assert( pStep!=0 );",
          "1336:     switch( action ){",
          "1337:       case OE_Restrict:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1335:     assert( pTrigger!=0 );",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:   static void parserDoubleLinkSelect(Parse *pParse, Select *p){",
          "461:     if( p->pPrior ){",
          "462:       Select *pNext = 0, *pLoop;",
          "463:       int mxSelect, cnt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:     assert( p!=0 );",
          "",
          "---------------"
        ],
        "src/pcache.c||src/pcache.c": [
          "File: src/pcache.c -> src/pcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:     sqlite3PCacheSetDefault();",
          "265:   }",
          "266:   return sqlite3GlobalConfig.pcache2.xInit(sqlite3GlobalConfig.pcache2.pArg);",
          "267: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     assert( sqlite3GlobalConfig.pcache2.xInit!=0 );",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   assert( sqlite3_mutex_held(pCache->pGroup->mutex) );",
          "426:   if( pCache->pFree || (pCache->nPage==0 && pcache1InitBulk(pCache)) ){",
          "427:     p = pCache->pFree;",
          "428:     pCache->pFree = p->pNext;",
          "429:     p->pNext = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     assert( pCache->pFree!=0 );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3949:   for(pParent=p; pParent; pParent=pParent->pPrior, pSub=pSub->pPrior){",
          "3950:     int nSubSrc;",
          "3951:     u8 jointype = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3952:     assert( pSub!=0 );",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     Trigger *pLink = pTrig;",
          "341:     Hash *pHash = &db->aDb[iDb].pSchema->trigHash;",
          "342:     assert( sqlite3SchemaMutexHeld(db, iDb, 0) );",
          "343:     pTrig = sqlite3HashInsert(pHash, zName, pTrig);",
          "344:     if( pTrig ){",
          "345:       sqlite3OomFault(db);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     assert( pLink!=0 );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908:       int j;",
          "1909:       i -= p->nOp;",
          "1910:       for(j=0; i>=apSub[j]->nOp; j++){",
          "1911:         i -= apSub[j]->nOp;",
          "1912:       }",
          "1913:       pOp = &apSub[j]->aOp[i];",
          "1914:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1910:       assert( apSub!=0 );",
          "1911:       assert( nSub>0 );",
          "1914:         assert( i<apSub[j]->nOp || j+1<nSub );",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1728:       rc = vdbeSorterListToPMA(&pSorter->aTask[nWorker], &pSorter->list);",
          "1729:     }else{",
          "1734:       assert( pTask->pThread==0 && pTask->bDone==0 );",
          "1735:       assert( pTask->list.pList==0 );",
          "1736:       assert( pTask->list.aMemory==0 || pSorter->list.aMemory!=0 );",
          "1738:       pSorter->iPrev = (u8)(pTask - pSorter->aTask);",
          "1739:       pTask->list = pSorter->list;",
          "1740:       pSorter->list.pList = 0;",
          "",
          "[Removed Lines]",
          "1731:       u8 *aMem = pTask->list.aMemory;",
          "1732:       void *pCtx = (void*)pTask;",
          "",
          "[Added Lines]",
          "1731:       u8 *aMem;",
          "1732:       void *pCtx;",
          "1734:       assert( pTask!=0 );",
          "1739:       aMem = pTask->list.aMemory;",
          "1740:       pCtx = (void*)pTask;",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         if( rc ) return rc;",
          "3479:         iOffset += szFrame;",
          "3480:         nExtra++;",
          "3481:       }",
          "3482:     }",
          "3483:     if( bSync ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3481:         assert( pLast!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3510:     iFrame++;",
          "3511:     rc = walIndexAppend(pWal, iFrame, p->pgno);",
          "3512:   }",
          "3513:   while( rc==SQLITE_OK && nExtra>0 ){",
          "3514:     iFrame++;",
          "3515:     nExtra--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3514:   assert( pLast!=0 || nExtra==0 );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2271:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "2272:   for(i=pWC->nTerm, pTerm=pWC->a; i>0; i--, pTerm++){",
          "2273:     if( (pTerm->wtFlags & TERM_VIRTUAL)!=0 ) break;",
          "2274:     if( (pTerm->prereqAll & pLoop->maskSelf)==0 ) continue;",
          "2275:     if( (pTerm->prereqAll & notAllowed)!=0 ) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2273:     assert( pTerm!=0 );",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "748: static int selectWindowRewriteExprCb(Walker *pWalker, Expr *pExpr){",
          "749:   struct WindowRewrite *p = pWalker->u.pRewrite;",
          "750:   Parse *pParse = pWalker->pParse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751:   assert( p!=0 );",
          "752:   assert( p->pWin!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "847:   Walker sWalker;",
          "848:   WindowRewrite sRewrite;",
          "850:   memset(&sWalker, 0, sizeof(Walker));",
          "851:   memset(&sRewrite, 0, sizeof(WindowRewrite));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:   assert( pWin!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1567:   int lblNext;",
          "1568:   int lblBrk;",
          "1569:   int addrNext;",
          "1572:   nPeer = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1574:   lblNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "1570:   int csr = pMWin->csrApp;",
          "",
          "[Added Lines]",
          "1573:   int csr;",
          "1575:   assert( pMWin!=0 );",
          "1576:   csr = pMWin->csrApp;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:       return yy_default[stateno];",
          "569:     }else{",
          "570:       return yy_action[i];",
          "571:     }",
          "572:   }while(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:       assert( i>=0 && i<sizeof(yy_action)/sizeof(yy_action[0]) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1722baaf80218bcad87597803510c4e214a5811",
      "candidate_info": {
        "commit_hash": "f1722baaf80218bcad87597803510c4e214a5811",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f1722baaf80218bcad87597803510c4e214a5811",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/wherecode.c",
          "tool/addopcodes.tcl"
        ],
        "message": "Eliminate the tool/addopcodes.tcl script.  The purpose of that script was to keep the number of parser codes below 256 in order to save parser table space. But we have long since blown through that ceiling so the addopcodes.tcl script was just needless complexity. There is no longer any reason to keep it around.\n\nFossilOrigin-Name: d272819298083ebbde57962a2938925b1aaa1caf03e48bb3ea26ad91e0461d84",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/wherecode.c||src/wherecode.c",
          "tool/addopcodes.tcl||tool/addopcodes.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051: #",
          "1052: parse.h: parse.c",
          "1055:  cp $(TOP)/src/parse.y .",
          "1057:  ./lemon$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) parse.y",
          "1061: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid$(BEXE) $(TOP)/VERSION",
          "1062:  $(TCLSH_CMD) $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "1054: parse.c: $(TOP)/src/parse.y lemon$(BEXE) $(TOP)/tool/addopcodes.tcl",
          "1056:  rm -f parse.h",
          "1058:  mv parse.h parse.h.temp",
          "1059:  $(TCLSH_CMD) $(TOP)/tool/addopcodes.tcl parse.h.temp >parse.h",
          "",
          "[Added Lines]",
          "1054: parse.c: $(TOP)/src/parse.y lemon$(BEXE)",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: #",
          "2140: parse.h: parse.c",
          "2143:  del /Q parse.y parse.h parse.h.temp 2>NUL",
          "2144:  copy $(TOP)\\src\\parse.y .",
          "2145:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) parse.y",
          "2149: $(SQLITE3H): $(TOP)\\src\\sqlite.h.in $(TOP)\\manifest mksourceid.exe $(TOP)\\VERSION",
          "2150:  $(TCLSH_CMD) $(TOP)\\tool\\mksqlite3h.tcl $(TOP:\\=/) > $(SQLITE3H) $(MKSQLITE3H_ARGS)",
          "",
          "[Removed Lines]",
          "2142: parse.c: $(TOP)\\src\\parse.y lemon.exe $(TOP)\\tool\\addopcodes.tcl",
          "2146:  move parse.h parse.h.temp",
          "2147:  $(TCLSH_CMD) $(TOP)\\tool\\addopcodes.tcl parse.h.temp > parse.h",
          "",
          "[Added Lines]",
          "2142: parse.c: $(TOP)\\src\\parse.y lemon.exe",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "716: #",
          "717: parse.h: parse.c",
          "720:  cp $(TOP)/src/parse.y .",
          "722:  ./lemon -s $(OPTS) parse.y",
          "726: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid $(TOP)/VERSION $(TOP)/ext/rtree/sqlite3rtree.h",
          "727:  tclsh $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "719: parse.c: $(TOP)/src/parse.y lemon $(TOP)/tool/addopcodes.tcl",
          "721:  rm -f parse.h",
          "723:  mv parse.h parse.h.temp",
          "724:  tclsh $(TOP)/tool/addopcodes.tcl parse.h.temp >parse.h",
          "",
          "[Added Lines]",
          "719: parse.c: $(TOP)/src/parse.y lemon",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbc67de5a3937fa65811ed7c13e870699c895660dc2132cf9d3cf5d83364e344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:     p = sqlite3DbMallocRawNN(pParse->db, sizeof(Expr));",
          "858:     if( p ){",
          "859:       memset(p, 0, sizeof(Expr));",
          "861:       p->iAgg = -1;",
          "862:     }",
          "863:     sqlite3ExprAttachSubtrees(pParse->db, p, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "860:       p->op = op & TKFLG_MASK;",
          "",
          "[Added Lines]",
          "860:       p->op = op & 0xff;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1744: filter_opt(A) ::= .                            { A = 0; }",
          "1745: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1752: %token",
          "1768: .",
          "1774: %include {",
          "1775: #if TK_SPAN>255",
          "1776: # error too many tokens in the grammar",
          "1777: #endif",
          "1778: }",
          "1786: %token SPACE ILLEGAL.",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1967:         pAndExpr = sqlite3ExprAnd(db, pAndExpr, pExpr);",
          "1968:       }",
          "1969:       if( pAndExpr ){",
          "1971:       }",
          "1972:     }",
          "",
          "[Removed Lines]",
          "1970:         pAndExpr = sqlite3PExpr(pParse, TK_AND|TKFLG_DONTFOLD, 0, pAndExpr);",
          "",
          "[Added Lines]",
          "1975:         pAndExpr = sqlite3PExpr(pParse, TK_AND|0x10000, 0, pAndExpr);",
          "",
          "---------------"
        ],
        "tool/addopcodes.tcl||tool/addopcodes.tcl": [
          "File: tool/addopcodes.tcl -> tool/addopcodes.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
      "candidate_info": {
        "commit_hash": "38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Fixes for the \".recover\" shell command.\n\nFossilOrigin-Name: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f193ca587f9e4f925f4f2343b0b07053bd6f93dd87fc6f8f41cf4479e90cf562",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6113:     sqlite3_stmt *pStmt = 0;",
          "6115:     rc = sqlite3_open(\"\", &dbtmp);",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, zSql, 0, 0, 0);",
          "6118:       if( rc==SQLITE_ERROR ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "6118:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6361:   if( rc==SQLITE_OK ){",
          "6362:     sqlite3_stmt *pStmt = 0;",
          "6363:     raw_printf(pState->out, \"BEGIN;\\n\");",
          "6365:         \"SELECT sql FROM recovery.schema \"",
          "6370:     );",
          "6371:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6372:       const char *zCreateTable = (const char*)sqlite3_column_text(pStmt, 0);",
          "6374:     }",
          "6375:     shellFinalize(&rc, pStmt);",
          "6376:   }",
          "",
          "[Removed Lines]",
          "6364:     shellPrepare(pState->db, &rc,",
          "6366:         \"WHERE type='table' \"",
          "6367:         \"  AND length(sql)>6\"",
          "6368:         \"  AND sql LIKE 'create table%'\"",
          "6369:         \"  AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'\", &pStmt",
          "6373:       raw_printf(pState->out, \"%s;\\n\", zCreateTable);",
          "",
          "[Added Lines]",
          "6367:     raw_printf(pState->out, \"PRAGMA writable_schema = on;\\n\");",
          "6368:     shellPrepare(pState->db, &rc,",
          "6370:         \"WHERE type='table' AND sql LIKE 'create table%'\", &pStmt",
          "6374:       raw_printf(pState->out, \"CREATE TABLE IF NOT EXISTS %s;\\n\",",
          "6375:           &zCreateTable[12]",
          "6376:       );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6379:   shellPrepare(pState->db, &rc,",
          "6380:       \"SELECT root, intkey, max(maxlen) FROM recovery.map\"",
          "6382:   );",
          "6383:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6384:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "",
          "[Removed Lines]",
          "6381:       \" WHERE root>1 GROUP BY root, intkey\", &pLoop",
          "",
          "[Added Lines]",
          "6384:       \" WHERE root>1 GROUP BY root, intkey ORDER BY root=(\"",
          "6385:       \"  SELECT rootpage FROM recovery.schema WHERE name='sqlite_sequence'\"",
          "6386:       \")\", &pLoop",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6389:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6390:     if( pTab ){",
          "6391:       sqlite3_stmt *pData = 0;",
          "6392:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6393:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "6394:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6397:       if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6410:   }",
          "6411:   shellFinalize(&rc, pLoop);",
          "6413:   if( rc==SQLITE_OK ){",
          "6414:     raw_printf(pState->out, \"COMMIT;\\n\");",
          "6415:   }",
          "6416:   sqlite3_exec(pState->db, \"DETACH recovery\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6422:   if( rc==SQLITE_OK ){",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "6430:       if( sqlite3_strnicmp(zSql, \"create virt\", 11)==0 ){",
          "6431:         const char *zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6432:         char *zPrint = shellMPrintf(&rc,",
          "6433:           \"INSERT INTO sqlite_master VALUES('table', %Q, %Q, 0, %Q)\",",
          "6434:           zName, zName, zSql",
          "6435:         );",
          "6436:         raw_printf(pState->out, \"%s;\\n\", zPrint);",
          "6437:         sqlite3_free(zPrint);",
          "6438:       }else{",
          "6439:         raw_printf(pState->out, \"%s;\\n\", zSql);",
          "6440:       }",
          "6441:     }",
          "6442:     shellFinalize(&rc, pStmt);",
          "6443:   }",
          "6446:     raw_printf(pState->out, \"PRAGMA writable_schema = off;\\n\");",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test the shell tool \".ar\" command.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix recover",
          "19: ifcapable !vtab {",
          "20:   finish_test; return",
          "21: }",
          "22: set CLI [test_find_cli]",
          "24: proc compare_result {db1 db2 sql} {",
          "25:   set r1 [$db1 eval $sql]",
          "26:   set r2 [$db2 eval $sql]",
          "27:   if {$r1 != $r2} {",
          "28:   puts \"r1: $r1\"",
          "29:   puts \"r2: $r2\"",
          "30:     error \"mismatch for $sql\"",
          "31:   }",
          "32:   return \"\"",
          "33: }",
          "35: proc compare_dbs {db1 db2} {",
          "36:   compare_result $db1 $db2 \"SELECT sql FROM sqlite_master ORDER BY 1\"",
          "37:   foreach tbl [$db1 eval {SELECT name FROM sqlite_master WHERE type='table'}] {",
          "38:     compare_result $db1 $db2 \"SELECT * FROM $tbl\"",
          "39:   }",
          "40: }",
          "42: proc do_recover_test {tn} {",
          "43:   set fd [open \"|$::CLI test.db .recover\"]",
          "44:   fconfigure $fd -encoding binary",
          "45:   fconfigure $fd -translation binary",
          "46:   set sql [read $fd]",
          "47:   close $fd",
          "49:   forcedelete test.db2",
          "50:   sqlite3 db2 test.db2",
          "51:   breakpoint",
          "52:   execsql $sql db2",
          "53:   uplevel [list do_test $tn [list compare_dbs db db2] {}]",
          "54:   db2 close",
          "55: }",
          "57: set doc {",
          "58:   hello",
          "59:   world",
          "60: }",
          "61: do_execsql_test 1.1.1 {",
          "62:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "63:   INSERT INTO t1 VALUES(1, 4, X'1234567800');",
          "64:   INSERT INTO t1 VALUES(2, 'test', 8.1);",
          "65:   INSERT INTO t1 VALUES(3, $doc, 8.4);",
          "66: }",
          "67: do_recover_test 1.1.2",
          "69: do_execsql_test 1.2.1 \"",
          "70:   DELETE FROM t1;",
          "71:   INSERT INTO t1 VALUES(13, 'hello\\r\\nworld', 13);",
          "72: \"",
          "73: do_recover_test 1.2.2",
          "75: do_execsql_test 1.3.1 \"",
          "76:   CREATE TABLE t2(i INTEGER PRIMARY KEY AUTOINCREMENT, b, c);",
          "77:   INSERT INTO t2 VALUES(NULL, 1, 2);",
          "78:   INSERT INTO t2 VALUES(NULL, 3, 4);",
          "79:   INSERT INTO t2 VALUES(NULL, 5, 6);",
          "80:   CREATE TABLE t3(i INTEGER PRIMARY KEY AUTOINCREMENT, b, c);",
          "81:   INSERT INTO t3 VALUES(NULL, 1, 2);",
          "82:   INSERT INTO t3 VALUES(NULL, 3, 4);",
          "83:   INSERT INTO t3 VALUES(NULL, 5, 6);",
          "84:   DELETE FROM t2;",
          "85: \"",
          "86: do_recover_test 1.3.2",
          "88: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4485ac1a25e9919b5911a0db2ad7bed58be143d6",
      "candidate_info": {
        "commit_hash": "4485ac1a25e9919b5911a0db2ad7bed58be143d6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4485ac1a25e9919b5911a0db2ad7bed58be143d6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "The previous fix was incomplete.  It is also necessary to disable the Expr.y.pTab field when making the translation.\n\nFossilOrigin-Name: b99d5701312f7472e6b606bd824f9273617e2655920485bf50aa96d408064721",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0f7e321eca91c49102649f70728de69347cbd7b16599b854203c24cfdc348e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1139:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
          "1140:       pExpr->iTable = pX->iIdxCur;",
          "1141:       pExpr->iColumn = pX->iIdxCol;",
          "1142:     }",
          "1143:   }",
          "1144:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1142:       pExpr->y.pTab = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0b42437ab69d01daa61bd77f74badb95c82bd40",
      "candidate_info": {
        "commit_hash": "c0b42437ab69d01daa61bd77f74badb95c82bd40",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c0b42437ab69d01daa61bd77f74badb95c82bd40",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a locking-page related problem with the \".recover\" command.\n\nFossilOrigin-Name: afdae10424f0f3d0f10a4b73e9732aa55c5ee664814d8ca0edd372cfb17c2445",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   sqlite3_int64 iRowid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   int szDb;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:   sqlite3_bind_int64(pStmt, 2, pgno);",
          "304:   if( SQLITE_ROW==sqlite3_step(pStmt) ){",
          "305:     int nCopy = sqlite3_column_bytes(pStmt, 0);",
          "314:     }",
          "315:   }",
          "316:   rc2 = sqlite3_reset(pStmt);",
          "319:   return rc;",
          "320: }",
          "",
          "[Removed Lines]",
          "306:     u8 *pPage = (u8*)sqlite3_malloc64(nCopy);",
          "307:     if( pPage==0 ){",
          "308:       rc = SQLITE_NOMEM;",
          "309:     }else{",
          "310:       const u8 *pCopy = sqlite3_column_blob(pStmt, 0);",
          "311:       memcpy(pPage, pCopy, nCopy);",
          "317:   if( *ppPage==0 ) rc = rc2;",
          "",
          "[Added Lines]",
          "307:     if( nCopy>0 ){",
          "308:       u8 *pPage;",
          "309:       pPage = (u8*)sqlite3_malloc64(nCopy);",
          "310:       if( pPage==0 ){",
          "311:         rc = SQLITE_NOMEM;",
          "312:       }else{",
          "313:         const u8 *pCopy = sqlite3_column_blob(pStmt, 0);",
          "314:         memcpy(pPage, pCopy, nCopy);",
          "315:       }",
          "321:   if( rc==SQLITE_OK ) rc = rc2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "419:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "421:     if( pCsr->aPage==0 ){",
          "424:       pCsr->iCell = pTab->bPtr ? -2 : 0;",
          "425:       pCsr->nCell = get_uint16(&pCsr->aPage[iOff+3]);",
          "426:     }",
          "",
          "[Removed Lines]",
          "422:       rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);",
          "423:       if( rc!=SQLITE_OK || pCsr->aPage==0 ) return rc;",
          "",
          "[Added Lines]",
          "426:       while( 1 ){",
          "427:         if( pCsr->bOnePage==0 && pCsr->iPgno>pCsr->szDb ) return SQLITE_OK;",
          "428:         rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);",
          "429:         if( rc!=SQLITE_OK ) return rc;",
          "430:         if( pCsr->aPage ) break;",
          "431:         pCsr->iPgno++;",
          "432:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "574:   return pCsr->aPage==0;",
          "575: }",
          "579: static int dbdataFilter(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586: static int dbdataDbsize(DbdataCursor *pCsr, const char *zSchema){",
          "587:   DbdataTable *pTab = (DbdataTable*)pCsr->base.pVtab;",
          "588:   char *zSql = 0;",
          "589:   int rc, rc2;",
          "590:   sqlite3_stmt *pStmt = 0;",
          "592:   zSql = sqlite3_mprintf(\"PRAGMA %Q.page_count\", zSchema);",
          "593:   if( zSql==0 ) return SQLITE_NOMEM;",
          "594:   rc = sqlite3_prepare_v2(pTab->db, zSql, -1, &pStmt, 0);",
          "595:   sqlite3_free(zSql);",
          "596:   if( rc==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "597:     pCsr->szDb = sqlite3_column_int(pStmt, 0);",
          "598:   }",
          "599:   rc2 = sqlite3_finalize(pStmt);",
          "600:   if( rc==SQLITE_OK ) rc = rc2;",
          "601:   return rc;",
          "602: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "594:   if( idxNum & 0x02 ){",
          "595:     pCsr->iPgno = sqlite3_value_int(argv[(idxNum & 0x01)]);",
          "596:     pCsr->bOnePage = 1;",
          "597:   }",
          "607:   }",
          "608:   if( rc==SQLITE_OK ){",
          "609:     rc = sqlite3_bind_text(pCsr->pStmt, 1, zSchema, -1, SQLITE_TRANSIENT);",
          "",
          "[Removed Lines]",
          "599:   if( pTab->pStmt ){",
          "600:     pCsr->pStmt = pTab->pStmt;",
          "601:     pTab->pStmt = 0;",
          "602:   }else{",
          "603:     rc = sqlite3_prepare_v2(pTab->db,",
          "604:         \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "605:         &pCsr->pStmt, 0",
          "606:     );",
          "",
          "[Added Lines]",
          "624:   }else{",
          "625:     pCsr->nPage = dbdataDbsize(pCsr, zSchema);",
          "626:     rc = dbdataDbsize(pCsr, zSchema);",
          "629:   if( rc==SQLITE_OK ){",
          "630:     if( pTab->pStmt ){",
          "631:       pCsr->pStmt = pTab->pStmt;",
          "632:       pTab->pStmt = 0;",
          "633:     }else{",
          "634:       rc = sqlite3_prepare_v2(pTab->db,",
          "635:           \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "636:           &pCsr->pStmt, 0",
          "637:       );",
          "638:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1da302d85d7ad4ba54f877117a45d667439fd2ef31dc70ea1d54dc1fba196e68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6165:   }",
          "6166: }",
          "6168: static void *shellMalloc(int *pRc, sqlite3_int64 nByte){",
          "6169:   void *pRet = 0;",
          "6170:   if( *pRc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6168: static void shellExecPrintf(sqlite3 *db, int *pRc, const char *zFmt, ...){",
          "6169:   char *z = 0;",
          "6170:   if( *pRc==SQLITE_OK ){",
          "6171:     va_list ap;",
          "6172:     va_start(ap, zFmt);",
          "6173:     z = sqlite3_vmprintf(zFmt, ap);",
          "6174:     va_end(ap);",
          "6175:     if( z==0 ){",
          "6177:     }else{",
          "6178:       shellExec(db, pRc, z);",
          "6179:     }",
          "6180:     sqlite3_free(z);",
          "6181:   }",
          "6182: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6416:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6417:       bFreelist = 0;",
          "6418:     }",
          "6419:     else{",
          "6424:       return 1;",
          "6425:     }",
          "6426:   }",
          "6432:     \"CREATE TABLE recovery.dbptr(\"",
          "6433:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "6434:     \") WITHOUT ROWID;\"",
          "",
          "[Removed Lines]",
          "6420:       raw_printf(stderr,",
          "6421:         \"unexpected option: %s - expected \\\"--freelist-corrupt\\\"\\n\",",
          "6422:         azArg[i]",
          "6423:       );",
          "6428:   shellExec(pState->db, &rc,",
          "6431:     \"ATTACH '' AS recovery;\"",
          "6435:     \"INSERT OR IGNORE INTO dbptr(pgno, child) SELECT * FROM sqlite_dbptr;\"",
          "",
          "[Added Lines]",
          "6436:     if( n<=12 && memcmp(\"-recovery-db\", z, n)==0 && i<(nArg-1) ){",
          "6437:       i++;",
          "6438:       zRecoveryDb = azArg[i];",
          "6439:     }",
          "6441:       raw_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6442:       raw_printf(stderr, \"options are:\\n\");",
          "6443:       raw_printf(stderr, \"    --freelist-corrupt\\n\");",
          "6444:       raw_printf(stderr, \"    --recovery-db DATABASE\\n\");",
          "6449:   shellExecPrintf(pState->db, &rc,",
          "6452:     \"ATTACH %Q AS recovery;\"",
          "6453:     \"DROP TABLE IF EXISTS recovery.dbptr;\"",
          "6454:     \"DROP TABLE IF EXISTS recovery.freelist;\"",
          "6455:     \"DROP TABLE IF EXISTS recovery.map;\"",
          "6456:     \"DROP TABLE IF EXISTS recovery.schema;\"",
          "6460:     \"INSERT OR IGNORE INTO recovery.dbptr(pgno, child) \"",
          "6461:     \"    SELECT * FROM sqlite_dbptr;\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6445:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6446:     \");\"",
          "6449:   );",
          "6451:   if( bFreelist ){",
          "",
          "[Removed Lines]",
          "6448:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\"",
          "",
          "[Added Lines]",
          "6474:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\", zRecoveryDb",
          "",
          "---------------"
        ]
      }
    }
  ]
}