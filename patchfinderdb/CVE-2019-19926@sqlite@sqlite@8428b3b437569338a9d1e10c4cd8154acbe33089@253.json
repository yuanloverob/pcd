{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "375afb8bda4d6583ba600a7716406bfcb6d53014",
      "candidate_info": {
        "commit_hash": "375afb8bda4d6583ba600a7716406bfcb6d53014",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/375afb8bda4d6583ba600a7716406bfcb6d53014",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select1.test",
          "test/with1.test"
        ],
        "message": "Fix a problem in the code generator for sorting results with SRT_EphemTab and a LIMIT clause.\n\nFossilOrigin-Name: 49fcde2f1f981ac0c75728bed3444e7c1d3167311db282d3375c96ce090b2210",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select1.test||test/select1.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b4b5741366578b25ec6e4c415ab8239215e53b1c900be613575f40a826cfccc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1457:     regRow = pDest->iSdst;",
          "1458:   }else{",
          "1459:     regRowid = sqlite3GetTempReg(pParse);",
          "1461:   }",
          "1462:   nKey = pOrderBy->nExpr - pSort->nOBSat;",
          "1463:   if( pSort->sortFlags & SORTFLAG_UseSorter ){",
          "",
          "[Removed Lines]",
          "1460:     regRow = sqlite3GetTempRange(pParse, nColumn);",
          "",
          "[Added Lines]",
          "1460:     if( eDest==SRT_EphemTab || eDest==SRT_Table ){",
          "1461:       regRow = sqlite3GetTempReg(pParse);",
          "1462:       nColumn = 0;",
          "1463:     }else{",
          "1464:       regRow = sqlite3GetTempRange(pParse, nColumn);",
          "1465:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1537:   switch( eDest ){",
          "1538:     case SRT_Table:",
          "1539:     case SRT_EphemTab: {",
          "1540:       sqlite3VdbeAddOp2(v, OP_NewRowid, iParm, regRowid);",
          "1541:       sqlite3VdbeAddOp3(v, OP_Insert, iParm, regRow, regRowid);",
          "1542:       sqlite3VdbeChangeP5(v, OPFLAG_APPEND);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1545:       sqlite3VdbeAddOp3(v, OP_Column, iSortTab, nKey+bSeq, regRow);",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1080: do_catchsql_test select1-16.2 {",
          "1081:   SELECT 1 FROM sqlite_master LIMIT 1,#1;",
          "1082: } {1 {near \"#1\": syntax error}}",
          "1084: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084: # 2019-01-16 Chromium bug 922312",
          "1085: # Sorting with a LIMIT clause using SRT_EphemTab and SRT_Table",
          "1086: #",
          "1087: do_execsql_test select1-17.1 {",
          "1088:   DROP TABLE IF EXISTS t1;",
          "1089:   DROP TABLE IF EXISTS t2;",
          "1090:   CREATE TABLE t1(x);   INSERT INTO t1 VALUES(1);",
          "1091:   CREATE TABLE t2(y,z); INSERT INTO t2 VALUES(2,3);",
          "1092:   CREATE INDEX t2y ON t2(y);",
          "1093:   SELECT * FROM t1,(SELECT * FROM t2 WHERE y=2 ORDER BY y,z);",
          "1094: } {1 2 3}",
          "1095: do_execsql_test select1-17.2 {",
          "1096:   SELECT * FROM t1,(SELECT * FROM t2 WHERE y=2 ORDER BY y,z LIMIT 4);",
          "1097: } {1 2 3}",
          "1098: do_execsql_test select1-17.3 {",
          "1099:   SELECT * FROM t1,(SELECT * FROM t2 WHERE y=2",
          "1100:          UNION ALL SELECT * FROM t2 WHERE y=3 ORDER BY y,z LIMIT 4);",
          "1101: } {1 2 3}",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:   )",
          "1057:   SELECT * FROM t21 AS tA, t21 AS tB",
          "1058: } {1 1 1 1}",
          "1059: do_execsql_test 21.2 {",
          "1060:   SELECT printf('',",
          "1061:      EXISTS (WITH RECURSIVE Table0 AS (WITH Table0 AS (SELECT DISTINCT 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1059: do_execsql_test 21.1b {",
          "1061:    WITH RECURSIVE t21(a,b) AS (",
          "1062:     WITH t21(x) AS (VALUES(1))",
          "1063:     SELECT x, x FROM t21 ORDER BY 1 LIMIT 5",
          "1064:   )",
          "1065:   SELECT * FROM t21 AS tA, t21 AS tB",
          "1066: } {1 1 1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
      "candidate_info": {
        "commit_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4baa75b32f61727693ff2468ab927124e85c0e36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/without_rowid1.test"
        ],
        "message": "Do not de-duplicate columns index columns associated with a WITHOUT ROWID table if the columns have different collating sequences.  This is the fix for ticket [3182d3879020ef3b2].  There is one test case added, but most of the tests are done in TH3.\n\nFossilOrigin-Name: 1b1dd4d48cd79a585e1fa7ee79128e9f2a9ee9846339dc56bbd67b75112dcad5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92facbc73a940d2844ac88fafd2d2dadb10886fb0b7c53e23f346d18fa6d6327",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:   pIdx->szIdxRow = sqlite3LogEst(wIndex*4);",
          "1727: }",
          "1731: static int hasColumn(const i16 *aiCol, int nCol, int x){",
          "1733:   return 0;",
          "1734: }",
          "",
          "[Removed Lines]",
          "1732:   while( nCol-- > 0 ) if( x==*(aiCol++) ) return 1;",
          "",
          "[Added Lines]",
          "1734:   while( nCol-- > 0 ){",
          "1735:     assert( aiCol[0]>=0 );",
          "1736:     if( x==*(aiCol++) ){",
          "1737:       return 1;",
          "1738:     }",
          "1739:   }",
          "1740:   return 0;",
          "1741: }",
          "1756: static int isDupColumn(Index *pIdx, int nKey, Index *pPk, int iCol){",
          "1757:   int i, j;",
          "1758:   assert( nKey<=pIdx->nColumn );",
          "1759:   assert( iCol<MAX(pPk->nColumn,pPk->nKeyCol) );",
          "1760:   assert( pPk->idxType==SQLITE_IDXTYPE_PRIMARYKEY );",
          "1761:   assert( pPk->pTable->tabFlags & TF_WithoutRowid );",
          "1762:   assert( pPk->pTable==pIdx->pTable );",
          "1763:   testcase( pPk==pIdx );",
          "1764:   j = pPk->aiColumn[iCol];",
          "1765:   assert( j!=XN_ROWID && j!=XN_EXPR );",
          "1766:   for(i=0; i<nKey; i++){",
          "1767:     assert( pIdx->aiColumn[i]>=0 || j>=0 );",
          "1768:     if( pIdx->aiColumn[i]==j",
          "1769:      && sqlite3StrICmp(pIdx->azColl[i], pPk->azColl[iCol])==0",
          "1770:     ){",
          "1771:       return 1;",
          "1772:     }",
          "1773:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1837:     for(i=j=1; i<pPk->nKeyCol; i++){",
          "1839:         pPk->nColumn--;",
          "1840:       }else{",
          "1841:         pPk->aiColumn[j++] = pPk->aiColumn[i];",
          "1842:       }",
          "1843:     }",
          "",
          "[Removed Lines]",
          "1838:       if( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1879:       if( isDupColumn(pPk, j, pPk, i) ){",
          "1882:         testcase( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1867:     int n;",
          "1868:     if( IsPrimaryKeyIndex(pIdx) ) continue;",
          "1869:     for(i=n=0; i<nPk; i++){",
          "1871:     }",
          "1872:     if( n==0 ){",
          "",
          "[Removed Lines]",
          "1870:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ) n++;",
          "",
          "[Added Lines]",
          "1912:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1913:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1914:         n++;",
          "1915:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1876:     }",
          "1877:     if( resizeIndexObject(db, pIdx, pIdx->nKeyCol+n) ) return;",
          "1878:     for(i=0, j=pIdx->nKeyCol; i<nPk; i++){",
          "1880:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1881:         pIdx->azColl[j] = pPk->azColl[i];",
          "1882:         j++;",
          "",
          "[Removed Lines]",
          "1879:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1924:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1925:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3392:     for(j=0; j<pPk->nKeyCol; j++){",
          "3393:       int x = pPk->aiColumn[j];",
          "3394:       assert( x>=0 );",
          "3396:         pIndex->nColumn--;",
          "3397:       }else{",
          "3398:         pIndex->aiColumn[i] = x;",
          "3399:         pIndex->azColl[i] = pPk->azColl[j];",
          "3400:         pIndex->aSortOrder[i] = pPk->aSortOrder[j];",
          "",
          "[Removed Lines]",
          "3395:       if( hasColumn(pIndex->aiColumn, pIndex->nKeyCol, x) ){",
          "",
          "[Added Lines]",
          "3441:       if( isDupColumn(pIndex, pIndex->nKeyCol, pPk, j) ){",
          "3444:         testcase( hasColumn(pIndex->aiColumn,pIndex->nKeyCol,x) );",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   SELECT * FROM t1;",
          "392: } {b a 3  b b 4}",
          "395: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394: # 2019-04-29 ticket https://www.sqlite.org/src/info/3182d3879020ef3",
          "395: do_execsql_test 11.1 {",
          "396:   CREATE TABLE t11(a TEXT PRIMARY KEY, b INT) WITHOUT ROWID;",
          "397:   CREATE INDEX t11a ON t11(a COLLATE NOCASE);",
          "398:   INSERT INTO t11(a,b) VALUES ('A',1),('a',2);",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
      "candidate_info": {
        "commit_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json101.test"
        ],
        "message": "Proper surrogate pair decoding added to JSON functions.  See the mailing list bug report and [https://bugs.python.org/issue38749].  More test cases needed here, but it seems to work so far.\n\nFossilOrigin-Name: 51027f08c0478f1bf9d7545d9e268c772c0a5cd5dda4b03d78f16c7d94f2f50d",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json101.test||test/json101.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:   sqlite3_result_subtype(pCtx, JSON_SUBTYPE);",
          "523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: static u8 jsonHexToInt(int h){",
          "531:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "532: #ifdef SQLITE_EBCDIC",
          "533:   h += 9*(1&~(h>>4));",
          "534: #else",
          "535:   h += 9*(1&(h>>6));",
          "536: #endif",
          "537:   return (u8)(h & 0xf);",
          "538: }",
          "543: static u32 jsonHexToInt4(const char *z){",
          "544:   u32 v;",
          "545:   assert( safe_isxdigit(z[0]) );",
          "546:   assert( safe_isxdigit(z[1]) );",
          "547:   assert( safe_isxdigit(z[2]) );",
          "548:   assert( safe_isxdigit(z[3]) );",
          "549:   v = (jsonHexToInt(z[0])<<12)",
          "550:     + (jsonHexToInt(z[1])<<8)",
          "551:     + (jsonHexToInt(z[2])<<4)",
          "552:     + jsonHexToInt(z[3]);",
          "553:   return v;",
          "554: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615:           }else{",
          "616:             c = z[++i];",
          "617:             if( c=='u' ){",
          "627:               if( v==0 ) break;",
          "628:               if( v<=0x7f ){",
          "629:                 zOut[j++] = (char)v;",
          "",
          "[Removed Lines]",
          "618:               u32 v = 0, k;",
          "619:               for(k=0; k<4; i++, k++){",
          "620:                 assert( i<n-2 );",
          "621:                 c = z[i+1];",
          "622:                 assert( safe_isxdigit(c) );",
          "623:                 if( c<='9' ) v = v*16 + c - '0';",
          "624:                 else if( c<='F' ) v = v*16 + c - 'A' + 10;",
          "625:                 else v = v*16 + c - 'a' + 10;",
          "626:               }",
          "",
          "[Added Lines]",
          "649:               u32 v = jsonHexToInt4(z+i+1);",
          "650:               i += 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "631:                 zOut[j++] = (char)(0xc0 | (v>>6));",
          "632:                 zOut[j++] = 0x80 | (v&0x3f);",
          "633:               }else{",
          "637:               }",
          "638:             }else{",
          "639:               if( c=='b' ){",
          "",
          "[Removed Lines]",
          "634:                 zOut[j++] = (char)(0xe0 | (v>>12));",
          "635:                 zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "636:                 zOut[j++] = 0x80 | (v&0x3f);",
          "",
          "[Added Lines]",
          "658:                 u32 vlo;",
          "659:                 if( (v&0xfc00)==0xd800",
          "660:                   && i<n-6",
          "661:                   && z[i+1]=='\\\\'",
          "662:                   && z[i+2]=='u'",
          "663:                   && ((vlo = jsonHexToInt4(z+i+3))&0xfc00)==0xdc00",
          "664:                 ){",
          "666:                   v = ((v&0x3ff)<<10) + (vlo&0x3ff) + 0x10000;",
          "667:                   i += 6;",
          "668:                   zOut[j++] = 0xf0 | (v>>18);",
          "669:                   zOut[j++] = 0x80 | ((v>>12)&0x3f);",
          "670:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "671:                   zOut[j++] = 0x80 | (v&0x3f);",
          "672:                 }else{",
          "673:                   zOut[j++] = 0xe0 | (v>>12);",
          "674:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "675:                   zOut[j++] = 0x80 | (v&0x3f);",
          "676:                 }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7a74f89dbd58b47bbcb58ea2af71fbe1eb5ec2dbe36d90685c39cb28ecf5250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json101.test||test/json101.test": [
          "File: test/json101.test -> test/json101.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "832:   SELECT xyz.* FROM (JSON_EACH('{\"a\":1, \"b\":2}')) AS xyz;",
          "833: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "835: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: # 2019-11-10",
          "836: # Mailing list bug report on the handling of surrogate pairs",
          "837: # in JSON.",
          "838: #",
          "839: do_execsql_test json-16.10 {",
          "840:   SELECT length(json_extract('\"abc\\uD834\\uDD1Exyz\"','$'));",
          "841: } {7}",
          "842: do_execsql_test json-16.20 {",
          "843:   SELECT length(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "844: } {1}",
          "845: do_execsql_test json-16.30 {",
          "846:   SELECT unicode(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "847: } {119070}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
      "candidate_info": {
        "commit_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a NEVER() comparison from sqlite3ExprCompare().\n\nFossilOrigin-Name: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e1ba9145049491c593ac70d9e05149662d34770129c270d702f284cd19a481",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5030:     ){",
          "5031:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op2!=pB->op2 ) return 2;",
          "5036:     }",
          "5037:   }",
          "5038:   return 0;",
          "",
          "[Removed Lines]",
          "5033:       if( pA->op!=TK_IN",
          "5034:        && pA->iTable!=pB->iTable",
          "5035:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "",
          "[Added Lines]",
          "5033:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5034:         return 2;",
          "5035:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
      "candidate_info": {
        "commit_hash": "4ded26a53c4df312e9fd06facbbf70377e969983",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ded26a53c4df312e9fd06facbbf70377e969983",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Prevent aliases of window functions expressions from being used as arguments to aggregate or other window functions.\n\nFossilOrigin-Name: 1e16d3e8fc60d39ca3899759ff15d355fdd7d3e23b325d8d2b0f954e11ce8dce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ae70ad2ffd36c27b154940126c5e3ed00c05c0d8761d9320a65a03b1b4e4dc6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:             sqlite3ErrorMsg(pParse, \"misuse of aliased aggregate %s\", zAs);",
          "436:             return WRC_Abort;",
          "437:           }",
          "438:           if( sqlite3ExprVectorSize(pOrig)!=1 ){",
          "439:             sqlite3ErrorMsg(pParse, \"row value misused\");",
          "440:             return WRC_Abort;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:           if( (pNC->ncFlags&NC_AllowWin)==0 && ExprHasProperty(pOrig, EP_Win) ){",
          "439:             sqlite3ErrorMsg(pParse, \"misuse of aliased window function %s\",zAs);",
          "440:             return WRC_Abort;",
          "441:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "730:       zId = pExpr->u.zToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "732:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:           pNC->nErr++;",
          "847:         }",
          "848:         if( is_agg ){",
          "849: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "851: #else",
          "852:           pNC->ncFlags &= ~NC_AllowAgg;",
          "853: #endif",
          "",
          "[Removed Lines]",
          "850:           pNC->ncFlags &= ~(pExpr->y.pWin ? NC_AllowWin : NC_AllowAgg);",
          "",
          "[Added Lines]",
          "858:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "868:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "869:             pSel->pWin = pExpr->y.pWin;",
          "870:           }",
          "872:         }else",
          "874:         {",
          "",
          "[Removed Lines]",
          "871:           pNC->ncFlags |= NC_AllowWin;",
          "",
          "[Added Lines]",
          "879:           pNC->ncFlags |= NC_HasWin;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "886:             pNC2->ncFlags |= NC_HasAgg | (pDef->funcFlags & SQLITE_FUNC_MINMAX);",
          "888:           }",
          "890:         }",
          "891:       }",
          "",
          "[Removed Lines]",
          "889:           pNC->ncFlags |= NC_AllowAgg;",
          "",
          "[Added Lines]",
          "898:         pNC->ncFlags |= savedAllowFlags;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1648:   Walker w;",
          "1650:   if( pExpr==0 ) return SQLITE_OK;",
          "1653:   w.pParse = pNC->pParse;",
          "1654:   w.xExprCallback = resolveExprStep;",
          "1655:   w.xSelectCallback = resolveSelectStep;",
          "",
          "[Removed Lines]",
          "1651:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg);",
          "1652:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg);",
          "",
          "[Added Lines]",
          "1659:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1660:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1668:   if( pNC->ncFlags & NC_HasAgg ){",
          "1669:     ExprSetProperty(pExpr, EP_Agg);",
          "1670:   }",
          "1671:   pNC->ncFlags |= savedHasAgg;",
          "1672:   return pNC->nErr>0 || w.pParse->nErr>0;",
          "1673: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:   if( pNC->ncFlags & NC_HasWin ){",
          "1680:     ExprSetProperty(pExpr, EP_Win);",
          "1681:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   ) FROM t1 ORDER BY 1",
          "48:   \"",
          "49: }",
          "51: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: errorsql_test 2.1 {",
          "51:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "52: }",
          "54: errorsql_test 2.2 {",
          "55:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "56: }",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   ) FROM t1 ORDER BY 1",
          "87: } } } 1",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: # PG says ERROR:  aggregate function calls cannot contain window function calls",
          "90: do_test 2.1 { catch { execsql {",
          "91:   SELECT sum( sum(a) OVER () ) FROM t1;",
          "92: } } } 1",
          "94: # PG says ERROR:  column \"xyz\" does not exist",
          "95: do_test 2.2 { catch { execsql {",
          "96:   SELECT sum(a) OVER () AS xyz FROM t1 ORDER BY sum(xyz);",
          "97: } } } 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}