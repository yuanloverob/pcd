{
  "cve_id": "CVE-2018-14368",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.1, 2.4.0 to 2.4.7, and 2.2.0 to 2.2.15, the Bazaar protocol dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-bzr.c by properly handling items that are too long.",
  "repo": "wireshark/wireshark",
  "patch_hash": "a03eacc7aabd04a6fd0db978e0d7597220ac0515",
  "patch_info": {
    "commit_hash": "a03eacc7aabd04a6fd0db978e0d7597220ac0515",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/a03eacc7aabd04a6fd0db978e0d7597220ac0515",
    "files": [
      "epan/dissectors/packet-bzr.c"
    ],
    "message": "Clean up handling of counted blobs of bytes.\n\nDon't treat the count+blob as itself a blob of bytes; use FT_NONE.\nCreate it with an unknown length (-1, meaning \"to end of packet, for\nnow\"), and set its length once we've finished dissecting it.  Dissect\nthe raw bytes of a prefixed-bytes item regardless of whether we're\nbuilding a protocol tree or not.\n\nThis means we do a better job of handling a too-large length; instead of\noverflowing the offset, we throw an exception and stop dissecting, so we\ndon't run the risk of looping infinitely.\n\nBug: 14841\nChange-Id: I593be9b6ba9aa15d8529f96458e53b85ace6402a\nReviewed-on: https://code.wireshark.org/review/28228\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c": [
      "File: epan/dissectors/packet-bzr.c -> epan/dissectors/packet-bzr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:     plen = tvb_get_ntohl(tvb, offset);",
      "130:     prefixed_bencode_tree = proto_item_add_subtree(ti, ett_prefixed_bencode);",
      "132:     proto_tree_add_item(prefixed_bencode_tree, hf_bzr_prefixed_bencode_len,",
      "135:     subtvb = tvb_new_subset_length(tvb, offset+4, plen);",
      "136:     call_dissector(bencode_handle, subtvb, pinfo, prefixed_bencode_tree);",
      "138:     return 4 + plen;",
      "139: }",
      "",
      "[Removed Lines]",
      "128:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, 4 +",
      "129:                              plen, ENC_NA);",
      "133:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "128:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, -1,",
      "129:                              ENC_NA);",
      "133:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
      "138:     proto_item_set_len(ti, 4 + plen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "149:     plen = tvb_get_ntohl(tvb, offset);",
      "153:     prefixed_bytes_tree = proto_item_add_subtree(ti, ett_prefixed_bytes);",
      "164:     return 4 + plen;",
      "165: }",
      "",
      "[Removed Lines]",
      "151:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, 4 +",
      "152:                              plen, ENC_NA);",
      "155:     if (prefixed_bytes_tree)",
      "156:     {",
      "157:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
      "158:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
      "160:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
      "161:                             tvb, offset+4, plen, ENC_NA);",
      "162:     }",
      "",
      "[Added Lines]",
      "153:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, -1, ENC_NA);",
      "156:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
      "157:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
      "159:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
      "160:                         tvb, offset+4, plen, ENC_NA);",
      "162:     proto_item_set_len(ti, 4 + plen);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "261:             NULL, 0x0, NULL, HFILL },",
      "262:         },",
      "263:         { &hf_bzr_prefixed_bencode,",
      "265:             \"Serialized structure of integers, dictionaries, strings and \"",
      "266:             \"lists.\", HFILL },",
      "267:         },",
      "",
      "[Removed Lines]",
      "264:           { \"Bencode packet\", \"bzr.bencode\", FT_BYTES, BASE_NONE, NULL, 0x0,",
      "",
      "[Added Lines]",
      "264:           { \"Bencode packet\", \"bzr.bencode\", FT_NONE, BASE_NONE, NULL, 0x0,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "270:             BASE_HEX, NULL, 0x0, NULL, HFILL },",
      "271:         },",
      "272:         { &hf_bzr_bytes,",
      "274:             \"Bytes field with prefixed 32-bit length\", HFILL },",
      "275:         },",
      "276:         { &hf_bzr_bytes_data,",
      "",
      "[Removed Lines]",
      "273:           { \"Prefixed bytes\", \"bzr.bytes\", FT_BYTES, BASE_NONE, NULL, 0x0,",
      "",
      "[Added Lines]",
      "273:           { \"Prefixed bytes\", \"bzr.bytes\", FT_NONE, BASE_NONE, NULL, 0x0,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c44312f465014eb409d766a9828b7f101f6251c",
      "candidate_info": {
        "commit_hash": "6c44312f465014eb409d766a9828b7f101f6251c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6c44312f465014eb409d766a9828b7f101f6251c",
        "files": [
          "epan/dissectors/packet-bzr.c"
        ],
        "message": "Clean up handling of counted blobs of bytes.\n\nDon't treat the count+blob as itself a blob of bytes; use FT_NONE.\nCreate it with an unknown length (-1, meaning \"to end of packet, for\nnow\"), and set its length once we've finished dissecting it.  Dissect\nthe raw bytes of a prefixed-bytes item regardless of whether we're\nbuilding a protocol tree or not.\n\nThis means we do a better job of handling a too-large length; instead of\noverflowing the offset, we throw an exception and stop dissecting, so we\ndon't run the risk of looping infinitely.\n\nBug: 14841\nChange-Id: I593be9b6ba9aa15d8529f96458e53b85ace6402a\nReviewed-on: https://code.wireshark.org/review/28228\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit a03eacc7aabd04a6fd0db978e0d7597220ac0515)\nReviewed-on: https://code.wireshark.org/review/28231",
        "before_after_code_files": [
          "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c": [
          "File: epan/dissectors/packet-bzr.c -> epan/dissectors/packet-bzr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     plen = tvb_get_ntohl(tvb, offset);",
          "141:     prefixed_bencode_tree = proto_item_add_subtree(ti, ett_prefixed_bencode);",
          "143:     proto_tree_add_item(prefixed_bencode_tree, hf_bzr_prefixed_bencode_len,",
          "146:     subtvb = tvb_new_subset_length(tvb, offset+4, plen);",
          "147:     call_dissector(bencode_handle, subtvb, pinfo, prefixed_bencode_tree);",
          "149:     return 4 + plen;",
          "150: }",
          "",
          "[Removed Lines]",
          "139:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, 4 +",
          "140:                              plen, ENC_NA);",
          "144:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "139:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, -1,",
          "140:                              ENC_NA);",
          "144:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "149:     proto_item_set_len(ti, 4 + plen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:     plen = tvb_get_ntohl(tvb, offset);",
          "164:     prefixed_bytes_tree = proto_item_add_subtree(ti, ett_prefixed_bytes);",
          "175:     return 4 + plen;",
          "176: }",
          "",
          "[Removed Lines]",
          "162:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, 4 +",
          "163:                              plen, ENC_NA);",
          "166:     if (prefixed_bytes_tree)",
          "167:     {",
          "168:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
          "169:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "171:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
          "172:                             tvb, offset+4, plen, ENC_NA);",
          "173:     }",
          "",
          "[Added Lines]",
          "164:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, -1, ENC_NA);",
          "167:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
          "168:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "170:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
          "171:                         tvb, offset+4, plen, ENC_NA);",
          "173:     proto_item_set_len(ti, 4 + plen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:             NULL, 0x0, NULL, HFILL },",
          "273:         },",
          "274:         { &hf_bzr_prefixed_bencode,",
          "276:             \"Serialized structure of integers, dictionaries, strings and \"",
          "277:             \"lists.\", HFILL },",
          "278:         },",
          "",
          "[Removed Lines]",
          "275:           { \"Bencode packet\", \"bzr.bencode\", FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "275:           { \"Bencode packet\", \"bzr.bencode\", FT_NONE, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:             BASE_HEX, NULL, 0x0, NULL, HFILL },",
          "282:         },",
          "283:         { &hf_bzr_bytes,",
          "285:             \"Bytes field with prefixed 32-bit length\", HFILL },",
          "286:         },",
          "287:         { &hf_bzr_bytes_data,",
          "",
          "[Removed Lines]",
          "284:           { \"Prefixed bytes\", \"bzr.bytes\", FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "284:           { \"Prefixed bytes\", \"bzr.bytes\", FT_NONE, BASE_NONE, NULL, 0x0,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d626dc5466b59bfe8a0fb92b2c9f935f1f6bb4c",
      "candidate_info": {
        "commit_hash": "8d626dc5466b59bfe8a0fb92b2c9f935f1f6bb4c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8d626dc5466b59bfe8a0fb92b2c9f935f1f6bb4c",
        "files": [
          "epan/dissectors/packet-bzr.c"
        ],
        "message": "Clean up handling of counted blobs of bytes.\n\nDon't treat the count+blob as itself a blob of bytes; use FT_NONE.\nCreate it with an unknown length (-1, meaning \"to end of packet, for\nnow\"), and set its length once we've finished dissecting it.  Dissect\nthe raw bytes of a prefixed-bytes item regardless of whether we're\nbuilding a protocol tree or not.\n\nThis means we do a better job of handling a too-large length; instead of\noverflowing the offset, we throw an exception and stop dissecting, so we\ndon't run the risk of looping infinitely.\n\nBug: 14841\nChange-Id: I593be9b6ba9aa15d8529f96458e53b85ace6402a\nReviewed-on: https://code.wireshark.org/review/28228\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit a03eacc7aabd04a6fd0db978e0d7597220ac0515)\nReviewed-on: https://code.wireshark.org/review/28230",
        "before_after_code_files": [
          "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c": [
          "File: epan/dissectors/packet-bzr.c -> epan/dissectors/packet-bzr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     plen = tvb_get_ntohl(tvb, offset);",
          "142:     prefixed_bencode_tree = proto_item_add_subtree(ti, ett_prefixed_bencode);",
          "144:     proto_tree_add_item(prefixed_bencode_tree, hf_bzr_prefixed_bencode_len,",
          "147:     subtvb = tvb_new_subset_length(tvb, offset+4, plen);",
          "148:     call_dissector(bencode_handle, subtvb, pinfo, prefixed_bencode_tree);",
          "150:     return 4 + plen;",
          "151: }",
          "",
          "[Removed Lines]",
          "140:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, 4 +",
          "141:                              plen, ENC_NA);",
          "145:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "140:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, -1,",
          "141:                              ENC_NA);",
          "145:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "150:     proto_item_set_len(ti, 4 + plen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     plen = tvb_get_ntohl(tvb, offset);",
          "165:     prefixed_bytes_tree = proto_item_add_subtree(ti, ett_prefixed_bytes);",
          "176:     return 4 + plen;",
          "177: }",
          "",
          "[Removed Lines]",
          "163:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, 4 +",
          "164:                              plen, ENC_NA);",
          "167:     if (prefixed_bytes_tree)",
          "168:     {",
          "169:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
          "170:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "172:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
          "173:                             tvb, offset+4, plen, ENC_NA);",
          "174:     }",
          "",
          "[Added Lines]",
          "165:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, -1, ENC_NA);",
          "168:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
          "169:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "171:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
          "172:                         tvb, offset+4, plen, ENC_NA);",
          "174:     proto_item_set_len(ti, 4 + plen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273:             NULL, 0x0, NULL, HFILL },",
          "274:         },",
          "275:         { &hf_bzr_prefixed_bencode,",
          "277:             \"Serialized structure of integers, dictionaries, strings and \"",
          "278:             \"lists.\", HFILL },",
          "279:         },",
          "",
          "[Removed Lines]",
          "276:           { \"Bencode packet\", \"bzr.bencode\", FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "276:           { \"Bencode packet\", \"bzr.bencode\", FT_NONE, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282:             BASE_HEX, NULL, 0x0, NULL, HFILL },",
          "283:         },",
          "284:         { &hf_bzr_bytes,",
          "286:             \"Bytes field with prefixed 32-bit length\", HFILL },",
          "287:         },",
          "288:         { &hf_bzr_bytes_data,",
          "",
          "[Removed Lines]",
          "285:           { \"Prefixed bytes\", \"bzr.bytes\", FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "285:           { \"Prefixed bytes\", \"bzr.bytes\", FT_NONE, BASE_NONE, NULL, 0x0,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "470d59e651619c3698071b045056fcb5787a3bff",
      "candidate_info": {
        "commit_hash": "470d59e651619c3698071b045056fcb5787a3bff",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/470d59e651619c3698071b045056fcb5787a3bff",
        "files": [
          "epan/dissectors/packet-bzr.c"
        ],
        "message": "Clean up handling of counted blobs of bytes.\n\nDon't treat the count+blob as itself a blob of bytes; use FT_NONE.\nCreate it with an unknown length (-1, meaning \"to end of packet, for\nnow\"), and set its length once we've finished dissecting it.  Dissect\nthe raw bytes of a prefixed-bytes item regardless of whether we're\nbuilding a protocol tree or not.\n\nThis means we do a better job of handling a too-large length; instead of\noverflowing the offset, we throw an exception and stop dissecting, so we\ndon't run the risk of looping infinitely.\n\nBug: 14841\nChange-Id: I593be9b6ba9aa15d8529f96458e53b85ace6402a\nReviewed-on: https://code.wireshark.org/review/28228\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit a03eacc7aabd04a6fd0db978e0d7597220ac0515)\nReviewed-on: https://code.wireshark.org/review/28229",
        "before_after_code_files": [
          "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bzr.c||epan/dissectors/packet-bzr.c": [
          "File: epan/dissectors/packet-bzr.c -> epan/dissectors/packet-bzr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     plen = tvb_get_ntohl(tvb, offset);",
          "130:     prefixed_bencode_tree = proto_item_add_subtree(ti, ett_prefixed_bencode);",
          "132:     proto_tree_add_item(prefixed_bencode_tree, hf_bzr_prefixed_bencode_len,",
          "135:     subtvb = tvb_new_subset_length(tvb, offset+4, plen);",
          "136:     call_dissector(bencode_handle, subtvb, pinfo, prefixed_bencode_tree);",
          "138:     return 4 + plen;",
          "139: }",
          "",
          "[Removed Lines]",
          "128:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, 4 +",
          "129:                              plen, ENC_NA);",
          "133:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "128:     ti = proto_tree_add_item(tree, hf_bzr_prefixed_bencode, tvb, offset, -1,",
          "129:                              ENC_NA);",
          "133:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "138:     proto_item_set_len(ti, 4 + plen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     plen = tvb_get_ntohl(tvb, offset);",
          "153:     prefixed_bytes_tree = proto_item_add_subtree(ti, ett_prefixed_bytes);",
          "164:     return 4 + plen;",
          "165: }",
          "",
          "[Removed Lines]",
          "151:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, 4 +",
          "152:                              plen, ENC_NA);",
          "155:     if (prefixed_bytes_tree)",
          "156:     {",
          "157:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
          "158:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "160:         proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
          "161:                             tvb, offset+4, plen, ENC_NA);",
          "162:     }",
          "",
          "[Added Lines]",
          "153:     ti = proto_tree_add_item(tree, hf_bzr_bytes, tvb, offset, -1, ENC_NA);",
          "156:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_length,",
          "157:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "159:     proto_tree_add_item(prefixed_bytes_tree, hf_bzr_bytes_data,",
          "160:                         tvb, offset+4, plen, ENC_NA);",
          "162:     proto_item_set_len(ti, 4 + plen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:             NULL, 0x0, NULL, HFILL },",
          "262:         },",
          "263:         { &hf_bzr_prefixed_bencode,",
          "265:             \"Serialized structure of integers, dictionaries, strings and \"",
          "266:             \"lists.\", HFILL },",
          "267:         },",
          "",
          "[Removed Lines]",
          "264:           { \"Bencode packet\", \"bzr.bencode\", FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "264:           { \"Bencode packet\", \"bzr.bencode\", FT_NONE, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:             BASE_HEX, NULL, 0x0, NULL, HFILL },",
          "271:         },",
          "272:         { &hf_bzr_bytes,",
          "274:             \"Bytes field with prefixed 32-bit length\", HFILL },",
          "275:         },",
          "276:         { &hf_bzr_bytes_data,",
          "",
          "[Removed Lines]",
          "273:           { \"Prefixed bytes\", \"bzr.bytes\", FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "273:           { \"Prefixed bytes\", \"bzr.bytes\", FT_NONE, BASE_NONE, NULL, 0x0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}