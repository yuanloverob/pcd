{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
      "candidate_info": {
        "commit_hash": "feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts4aa.test"
        ],
        "message": "Better detection of corruption in the %_stat and %_docsize shadow tables of FTS3.\n\nFossilOrigin-Name: 1e449687881f4d388e54a0e51bcabba41ab10cf7e596ff65e31e88a23c70d497",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   return (int)(p - pStart);",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: int sqlite3Fts3GetVarintBounded(",
          "401:   const char *pBuf,",
          "402:   const char *pEnd,",
          "403:   sqlite_int64 *v",
          "404: ){",
          "405:   const unsigned char *p = (const unsigned char*)pBuf;",
          "406:   const unsigned char *pStart = p;",
          "407:   const unsigned char *pX = (const unsigned char*)pEnd;",
          "408:   u64 b = 0;",
          "409:   int shift;",
          "410:   for(shift=0; shift<=63; shift+=7){",
          "411:     u64 c = p<pX ? *p : 0;",
          "412:     p++;",
          "413:     b += (c&0x7F) << shift;",
          "414:     if( (c & 0x80)==0 ) break;",
          "415:   }",
          "417:   return (int)(p - pStart);",
          "418: }",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: void sqlite3Fts3ErrMsg(char**,const char*,...);",
          "578: int sqlite3Fts3PutVarint(char *, sqlite3_int64);",
          "579: int sqlite3Fts3GetVarint(const char *, sqlite_int64 *);",
          "580: int sqlite3Fts3GetVarint32(const char *, int *);",
          "581: int sqlite3Fts3VarintLen(sqlite3_uint64);",
          "582: void sqlite3Fts3Dequote(char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580: int sqlite3Fts3GetVarintBounded(const char*,const char*,sqlite3_int64*);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:   Fts3Table *pTab,",
          "1039:   sqlite3_stmt **ppStmt,",
          "1040:   sqlite3_int64 *pnDoc,",
          "1042: ){",
          "1043:   sqlite3_stmt *pStmt;",
          "1044:   const char *a;",
          "1045:   sqlite3_int64 nDoc;",
          "1047:   if( !*ppStmt ){",
          "1048:     int rc = sqlite3Fts3SelectDoctotal(pTab, ppStmt);",
          "",
          "[Removed Lines]",
          "1041:   const char **paLen",
          "",
          "[Added Lines]",
          "1041:   const char **paLen,",
          "1042:   const char **ppEnd",
          "1046:   const char *pEnd;",
          "1048:   int n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1051:   pStmt = *ppStmt;",
          "1052:   assert( sqlite3_data_count(pStmt)==1 );",
          "1054:   a = sqlite3_column_blob(pStmt, 0);",
          "1059:   if( paLen ) *paLen = a;",
          "1060:   return SQLITE_OK;",
          "1061: }",
          "",
          "[Removed Lines]",
          "1055:   a += sqlite3Fts3GetVarint(a, &nDoc);",
          "1056:   if( nDoc==0 ) return FTS_CORRUPT_VTAB;",
          "",
          "[Added Lines]",
          "1058:   n = sqlite3_column_bytes(pStmt, 0);",
          "1059:   if( n==0 ){",
          "1060:     return FTS_CORRUPT_VTAB;",
          "1061:   }",
          "1063:   if( a==0 ){",
          "1064:     return SQLITE_NOMEM;",
          "1065:   }",
          "1066:   pEnd = a + n;",
          "1067:   a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "1068:   if( nDoc==0 || a>pEnd ){",
          "1069:     return FTS_CORRUPT_VTAB;",
          "1070:   }",
          "1074:   if( ppEnd ) *ppEnd = pEnd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1237:       case FTS3_MATCHINFO_NDOC:",
          "1238:         if( bGlobal ){",
          "1239:           sqlite3_int64 nDoc = 0;",
          "1241:           pInfo->aMatchinfo[0] = (u32)nDoc;",
          "1242:         }",
          "1243:         break;",
          "",
          "[Removed Lines]",
          "1240:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, 0);",
          "",
          "[Added Lines]",
          "1255:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, 0, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1246:         if( bGlobal ){",
          "1251:           if( rc==SQLITE_OK ){",
          "1252:             int iCol;",
          "1253:             for(iCol=0; iCol<pInfo->nCol; iCol++){",
          "1254:               u32 iVal;",
          "1255:               sqlite3_int64 nToken;",
          "1256:               a += sqlite3Fts3GetVarint(a, &nToken);",
          "1257:               iVal = (u32)(((u32)(nToken&0xffffffff)+nDoc/2)/nDoc);",
          "1258:               pInfo->aMatchinfo[iCol] = iVal;",
          "1259:             }",
          "",
          "[Removed Lines]",
          "1250:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, &a);",
          "",
          "[Added Lines]",
          "1266:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, &a, &pEnd);",
          "1273:               if( a>pEnd ){",
          "1274:                 rc = SQLITE_CORRUPT_VTAB;",
          "1275:                 break;",
          "1276:               }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1267:         if( rc==SQLITE_OK ){",
          "1268:           int iCol;",
          "1269:           const char *a = sqlite3_column_blob(pSelectDocsize, 0);",
          "1270:           for(iCol=0; iCol<pInfo->nCol; iCol++){",
          "1271:             sqlite3_int64 nToken;",
          "1273:             pInfo->aMatchinfo[iCol] = (u32)nToken;",
          "1274:           }",
          "1275:         }",
          "",
          "[Removed Lines]",
          "1272:             a += sqlite3Fts3GetVarint(a, &nToken);",
          "",
          "[Added Lines]",
          "1290:           const char *pEnd = a + sqlite3_column_bytes(pSelectDocsize, 0);",
          "1293:             a += sqlite3Fts3GetVarintBounded(a, pEnd, &nToken);",
          "1294:             if( a>pEnd ){",
          "1295:               rc = SQLITE_CORRUPT_VTAB;",
          "1296:               break;",
          "1297:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1300:         if( rc!=SQLITE_OK ) break;",
          "1301:         if( bGlobal ){",
          "1302:           if( pCsr->pDeferred ){",
          "1304:             if( rc!=SQLITE_OK ) break;",
          "1305:           }",
          "1306:           rc = fts3ExprIterate(pExpr, fts3ExprGlobalHitsCb,(void*)pInfo);",
          "",
          "[Removed Lines]",
          "1303:             rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &pInfo->nDoc, 0);",
          "",
          "[Added Lines]",
          "1328:             rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &pInfo->nDoc,0,0);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8bd75bf636f72f32d66c6c38e1918f27daf2f13290f00a001f41d50838bbda47",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   } $r",
          "192: }",
          "194: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: # 2019-11-16 https://bugs.chromium.org/p/chromium/issues/detail?id=1025472",
          "195: #",
          "196: db close",
          "197: sqlite3 db :memory:",
          "198: do_execsql_test fts4aa-5.10 {",
          "199:   CREATE VIRTUAL TABLE t1 USING fts4(a, b, c, d, e,f,g,h,i,j,k,l,m,n,o,p,q,r);",
          "200:   INSERT INTO t1 VALUES('X Y', '2', '3', '4', '5', '6', '7', '8', '9', '0',",
          "201:                         'a','b','c','d','e','f','g','h');",
          "202:   UPDATE t1_docsize SET size=x'88' WHERE docid=1;",
          "203: } {}",
          "204: do_catchsql_test fts4aa-5.20 {",
          "205:   SELECT quote(matchinfo(t1, 'l')) FROM t1 WHERE t1 MATCH 'X Y';",
          "206: } {1 {database disk image is malformed}}",
          "207: do_execsql_test fts4aa-5.30 {",
          "208:   DROP TABLE t1;",
          "209:   CREATE VIRTUAL TABLE t1 USING fts4(a,b,c,d);",
          "210:   INSERT INTO t1 VALUES('one two','three four','five six','seven eight');",
          "211: } {}",
          "212: do_catchsql_test fts4aa-5.40 {",
          "213:   UPDATE t1_stat SET value=x'01010101' WHERE id=0;",
          "214:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "215: } {1 {database disk image is malformed}}",
          "216: do_catchsql_test fts4aa-5.50 {",
          "217:   UPDATE t1_stat SET value=x'010101' WHERE id=0;",
          "218:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "219: } {1 {database disk image is malformed}}",
          "220: do_catchsql_test fts4aa-5.60 {",
          "221:   UPDATE t1_stat SET value=x'01' WHERE id=0;",
          "222:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "223: } {1 {database disk image is malformed}}",
          "224: do_catchsql_test fts4aa-5.70 {",
          "225:   UPDATE t1_stat SET value=x'' WHERE id=0;",
          "226:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "227: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d99950310ff4477be8df292744e91d783897263e",
      "candidate_info": {
        "commit_hash": "d99950310ff4477be8df292744e91d783897263e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d99950310ff4477be8df292744e91d783897263e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/walker.c",
          "test/altertab2.test",
          "test/altertab3.test",
          "test/window1.test"
        ],
        "message": "Fix problems with sub-selects in WINDOW definitions. Also rename-column operations when the column being renamed appears in a WINDOW definition that is part of a VIEW or TRIGGER.\n\nFossilOrigin-Name: 0387cb3add992b2028efe4f2100188d8f9fdfdcb233329857aa4b46a293cfc97",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/walker.c||src/walker.c",
          "test/altertab2.test||test/altertab2.test",
          "test/altertab3.test||test/altertab3.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d8172a94bce2d067027685e5aa1dc8f5d5d55b5da0832ad2836f6939de68c8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5366:   w.xSelectCallback2 = analyzeAggregatesInSelectEnd;",
          "5367:   w.walkerDepth = 0;",
          "5368:   w.u.pNC = pNC;",
          "5369:   assert( pNC->pSrcList!=0 );",
          "5370:   sqlite3WalkExpr(&w, pExpr);",
          "5371: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5369:   w.pParse = 0;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "858: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "859:         if( pExpr->y.pWin ){",
          "860:           Select *pSel = pNC->pWinSelect;",
          "861:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "862:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "863:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "865:           if( 0==pSel->pWin",
          "866:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "867:           ){",
          "",
          "[Removed Lines]",
          "864:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Added Lines]",
          "861:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1536:       }",
          "1537:     }",
          "1541:     if( p->pNext && p->pEList->nExpr!=p->pNext->pEList->nExpr ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1539:     if( IN_RENAME_OBJECT ){",
          "1540:       Window *pWin;",
          "1541:       for(pWin=p->pWinDefn; pWin; pWin=pWin->pNextWin){",
          "1542:         if( sqlite3ResolveExprListNames(&sNC, pWin->pOrderBy)",
          "1543:          || sqlite3ResolveExprListNames(&sNC, pWin->pPartition)",
          "1544:         ){",
          "1545:           return WRC_Abort;",
          "1546:         }",
          "1547:       }",
          "1548:     }",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #if !defined(SQLITE_OMIT_WINDOWFUNC)",
          "25: static int walkWindowList(Walker *pWalker, Window *pList){",
          "26:   Window *pWin;",
          "27:   for(pWin=pList; pWin; pWin=pWin->pNextWin){",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:   }",
          "32:   return WRC_Continue;",
          "33: }",
          "34: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:       }",
          "57: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "58:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "63:       }",
          "64: #endif",
          "65:     }",
          "",
          "[Removed Lines]",
          "59:         Window *pWin = pExpr->y.pWin;",
          "60:         if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "61:         if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "62:         if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   if( sqlite3WalkExpr(pWalker, p->pHaving) ) return WRC_Abort;",
          "100:   if( sqlite3WalkExprList(pWalker, p->pOrderBy) ) return WRC_Abort;",
          "101:   if( sqlite3WalkExpr(pWalker, p->pLimit) ) return WRC_Abort;",
          "102:   return WRC_Continue;",
          "103: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #if !defined(SQLITE_OMIT_WINDOWFUNC) && !defined(SQLITE_OMIT_ALTERTABLE)",
          "116:   {",
          "117:     Parse *pParse = pWalker->pParse;",
          "118:     if( pParse && IN_RENAME_OBJECT ){",
          "119:       if( walkWindowList(pWalker, p->pWinDefn) ) return WRC_Abort;",
          "120:     }",
          "121:   }",
          "122: #endif",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: do_execsql_test 5.0 {",
          "183:   CREATE TABLE t2(a);",
          "184:   CREATE TRIGGER r2 AFTER INSERT ON t2 WHEN new.a NOT NULL BEGIN",
          "186:       WINDOW w1 AS (",
          "188:       ),",
          "189:       w2 AS (",
          "192:       );",
          "193:   END;",
          "194: } {}",
          "197:   INSERT INTO t2 VALUES(1);",
          "200: do_execsql_test 5.1 {",
          "201:   ALTER TABLE t2 RENAME TO t2x;",
          "202:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "203: } {",
          "204:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.a NOT NULL BEGIN",
          "206:       WINDOW w1 AS (",
          "208:       ),",
          "209:       w2 AS (",
          "212:       );",
          "213:   END}",
          "214: }",
          "",
          "[Removed Lines]",
          "185:     SELECT a, rank() OVER w1 FROM t2",
          "187:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "190:         PARTITION BY b",
          "191:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "196: do_catchsql_test 5.0.1 {",
          "198: } {1 {no such column: b}}",
          "205:     SELECT a, rank() OVER w1 FROM \"t2x\"",
          "207:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "210:         PARTITION BY b",
          "211:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "",
          "[Added Lines]",
          "185:     SELECT a, sum(a) OVER w1 FROM t2",
          "187:         PARTITION BY a ORDER BY a",
          "188:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "191:         PARTITION BY a",
          "192:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "197: do_execsql_test 5.0.1 {",
          "199: } {}",
          "206:     SELECT a, sum(a) OVER w1 FROM \"t2x\"",
          "208:         PARTITION BY a ORDER BY a",
          "209:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "212:         PARTITION BY a",
          "213:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "219: } {",
          "220:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.aaaa NOT NULL BEGIN",
          "222:       WINDOW w1 AS (",
          "224:       ),",
          "225:       w2 AS (",
          "228:       );",
          "229:   END}",
          "230: }",
          "233:   INSERT INTO t2x VALUES(1);",
          "236: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "221:     SELECT aaaa, rank() OVER w1 FROM \"t2x\"",
          "223:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "226:         PARTITION BY b",
          "227:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "232: do_catchsql_test 5.3 {",
          "234: } {1 {no such column: b}}",
          "",
          "[Added Lines]",
          "223:     SELECT aaaa, sum(aaaa) OVER w1 FROM \"t2x\"",
          "225:         PARTITION BY aaaa ORDER BY aaaa",
          "226:         ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING",
          "229:         PARTITION BY aaaa",
          "230:         ORDER BY rowid ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "235: do_execsql_test 5.3 {",
          "237: } {}",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 January 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix altertab3",
          "17: # If SQLITE_OMIT_ALTERTABLE is defined, omit this file.",
          "18: ifcapable !altertable {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "26:     SELECT sum(b) OVER w FROM t1 WINDOW w AS (ORDER BY a);",
          "27:   END;",
          "28: }",
          "30: do_execsql_test 1.1 {",
          "31:   ALTER TABLE t1 RENAME a TO aaa;",
          "32: }",
          "34: do_execsql_test 1.2 {",
          "35:   SELECT sql FROM sqlite_master WHERE name='tr1'",
          "36: } {{CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "37:     SELECT sum(b) OVER w FROM t1 WINDOW w AS (ORDER BY aaa);",
          "38:   END}}",
          "40: do_execsql_test 1.3 {",
          "41:   INSERT INTO t1 VALUES(1, 2);",
          "42: }",
          "45: finish_test",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:   ) x WHERE x+x;",
          "674: } {}",
          "676: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676: #-------------------------------------------------------------------------",
          "678: do_execsql_test 16.0 {",
          "679:   CREATE TABLE t7(a,b);",
          "680:   INSERT INTO t7(rowid, a, b) VALUES",
          "681:       (1, 1, 3),",
          "682:       (2, 10, 4),",
          "683:       (3, 100, 2);",
          "684: }",
          "686: do_execsql_test 16.1 {",
          "687:   SELECT rowid, sum(a) OVER (PARTITION BY b IN (SELECT rowid FROM t7)) FROM t7;",
          "688: } {",
          "689:   2 10",
          "690:   1 101",
          "691:   3 101",
          "692: }",
          "694: do_execsql_test 16.2 {",
          "695:   SELECT rowid, sum(a) OVER w1 FROM t7",
          "696:   WINDOW w1 AS (PARTITION BY b IN (SELECT rowid FROM t7));",
          "697: } {",
          "698:   2 10",
          "699:   1 101",
          "700:   3 101",
          "701: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc5979dbd384049c1efef847e5cc22082191024b",
      "candidate_info": {
        "commit_hash": "cc5979dbd384049c1efef847e5cc22082191024b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cc5979dbd384049c1efef847e5cc22082191024b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/vtab.c",
          "test/intarray.test",
          "test/vtab1.test"
        ],
        "message": "Add the ability to unregister a virtual table module by invoking sqlite3_create_module() with a NULL sqlite3_module pointer.\n\nFossilOrigin-Name: 31e34fa3390196cdc3178bf120224b08df5ec58fa2c77079ede6e9461a430dad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vtab.c||src/vtab.c",
          "test/intarray.test||test/intarray.test",
          "test/vtab1.test||test/vtab1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f17e72291f197a92b3e15e054271b997d45211a5a31ca4ea6c7fbb33026d5f1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1236: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "1237:   for(i=sqliteHashFirst(&db->aModule); i; i=sqliteHashNext(i)){",
          "1238:     Module *pMod = (Module *)sqliteHashData(i);",
          "1242:     sqlite3VtabEponymousTableClear(db, pMod);",
          "1244:   }",
          "1245:   sqlite3HashClear(&db->aModule);",
          "1246: #endif",
          "",
          "[Removed Lines]",
          "1239:     if( pMod->xDestroy ){",
          "1240:       pMod->xDestroy(pMod->pAux);",
          "1241:     }",
          "1243:     sqlite3DbFree(db, pMod);",
          "",
          "[Added Lines]",
          "1240:     sqlite3VtabModuleUnref(db, pMod);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3649:   \"    --row                   Trace each row (SQLITE_TRACE_ROW)\",",
          "3650:   \"    --close                 Trace connection close (SQLITE_TRACE_CLOSE)\",",
          "3652:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3653:   \".vfslist                 List all available VFSes\",",
          "3654:   \".vfsname ?AUX?           Print the name of the VFS stack\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9401:   }else",
          "9404: #if SQLITE_USER_AUTHENTICATION",
          "9405:   if( c=='u' && strncmp(azArg[0], \"user\", n)==0 ){",
          "9406:     if( nArg<2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4438: #  define sqlite3VtabInSync(db) 0",
          "4439: #  define sqlite3VtabLock(X)",
          "4440: #  define sqlite3VtabUnlock(X)",
          "4441: #  define sqlite3VtabUnlockList(X)",
          "4442: #  define sqlite3VtabSavepoint(X, Y, Z) SQLITE_OK",
          "4443: #  define sqlite3GetVTable(X,Y)  ((VTable*)0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4442: #  define sqlite3VtabModuleUnref(D,X)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4449:    int sqlite3VtabCommit(sqlite3 *db);",
          "4450:    void sqlite3VtabLock(VTable *);",
          "4451:    void sqlite3VtabUnlock(VTable *);",
          "4452:    void sqlite3VtabUnlockList(sqlite3*);",
          "4453:    int sqlite3VtabSavepoint(sqlite3 *, int, int);",
          "4454:    void sqlite3VtabImportErrmsg(Vdbe*, sqlite3_vtab*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4454:    void sqlite3VtabModuleUnref(sqlite3*,Module*);",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: ){",
          "43:   Module *pMod;",
          "48:   }else{",
          "51:     memcpy(zCopy, zName, nName+1);",
          "52:     pMod->zName = zCopy;",
          "53:     pMod->pModule = pModule;",
          "54:     pMod->pAux = pAux;",
          "55:     pMod->xDestroy = xDestroy;",
          "56:     pMod->pEpoTab = 0;",
          "60:       sqlite3OomFault(db);",
          "61:       sqlite3DbFree(db, pDel);",
          "62:       pMod = 0;",
          "63:     }",
          "64:   }",
          "65:   return pMod;",
          "",
          "[Removed Lines]",
          "44:   int nName = sqlite3Strlen30(zName);",
          "45:   pMod = (Module *)sqlite3Malloc(sizeof(Module) + nName + 1);",
          "46:   if( pMod==0 ){",
          "47:     sqlite3OomFault(db);",
          "49:     Module *pDel;",
          "50:     char *zCopy = (char *)(&pMod[1]);",
          "57:     pDel = (Module *)sqlite3HashInsert(&db->aModule,zCopy,(void*)pMod);",
          "58:     assert( pDel==0 || pDel==pMod );",
          "59:     if( pDel ){",
          "",
          "[Added Lines]",
          "47:   Module *pDel;",
          "48:   char *zCopy;",
          "49:   if( pModule==0 ){",
          "50:     zCopy = (char*)zName;",
          "51:     pMod = 0;",
          "53:     int nName = sqlite3Strlen30(zName);",
          "54:     pMod = (Module *)sqlite3Malloc(sizeof(Module) + nName + 1);",
          "55:     if( pMod==0 ){",
          "56:       sqlite3OomFault(db);",
          "57:       return 0;",
          "58:     }",
          "59:     zCopy = (char *)(&pMod[1]);",
          "66:     pMod->nRefModule = 1;",
          "67:   }",
          "68:   pDel = (Module *)sqlite3HashInsert(&db->aModule,zCopy,(void*)pMod);",
          "69:   if( pDel ){",
          "70:     if( pDel==pMod ){",
          "74:     }else{",
          "75:       sqlite3VtabModuleUnref(db, pDel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   int rc = SQLITE_OK;",
          "82:   sqlite3_mutex_enter(db->mutex);",
          "88:   rc = sqlite3ApiExit(db, rc);",
          "89:   if( rc!=SQLITE_OK && xDestroy ) xDestroy(pAux);",
          "90:   sqlite3_mutex_leave(db->mutex);",
          "",
          "[Removed Lines]",
          "83:   if( sqlite3HashFind(&db->aModule, zName) ){",
          "84:     rc = SQLITE_MISUSE_BKPT;",
          "85:   }else{",
          "86:     (void)sqlite3VtabCreateModule(db, zName, pModule, pAux, xDestroy);",
          "87:   }",
          "",
          "[Added Lines]",
          "96:   (void)sqlite3VtabCreateModule(db, zName, pModule, pAux, xDestroy);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "124: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: void sqlite3VtabModuleUnref(sqlite3 *db, Module *pMod){",
          "140:   assert( pMod->nRefModule>0 );",
          "141:   pMod->nRefModule--;",
          "142:   if( pMod->nRefModule==0 ){",
          "143:     if( pMod->xDestroy ){",
          "144:       pMod->xDestroy(pMod->pAux);",
          "145:     }",
          "146:     assert( pMod->pEpoTab==0 );",
          "147:     sqlite3DbFree(db, pMod);",
          "148:   }",
          "149: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:   pVTab->nRef--;",
          "163:   if( pVTab->nRef==0 ){",
          "164:     sqlite3_vtab *p = pVTab->pVtab;",
          "165:     if( p ){",
          "166:       p->pModule->xDisconnect(p);",
          "167:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:     sqlite3VtabModuleUnref(pVTab->db, pVTab->pMod);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "567:     memset(pVTable->pVtab, 0, sizeof(pVTable->pVtab[0]));",
          "568:     pVTable->pVtab->pModule = pMod->pModule;",
          "569:     pVTable->nRef = 1;",
          "570:     if( sCtx.bDeclared==0 ){",
          "571:       const char *zFormat = \"vtable constructor did not declare schema: %s\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:     pMod->nRefModule++;",
          "",
          "---------------"
        ],
        "test/intarray.test||test/intarray.test": [
          "File: test/intarray.test -> test/intarray.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   }",
          "48: } {table ia1 table ia2 table ia3 table ia4}",
          "51: do_test intarray-1.1b {",
          "52:   db eval {DROP TABLE ia1}",
          "57: do_test intarray-1.2 {",
          "58:   db eval {",
          "",
          "[Removed Lines]",
          "50: # Verify the inability to DROP and recreate an intarray virtual table.",
          "53:   set rc [catch {sqlite3_intarray_create db ia1} msg]",
          "54:   lappend rc $msg",
          "55: } {1 SQLITE_MISUSE}",
          "",
          "[Added Lines]",
          "50: # Verify the ability to DROP and recreate an intarray virtual table.",
          "53:   set rc [catch {sqlite3_intarray_create db ia1} ia1]",
          "54:   lappend rc $ia1",
          "55: } {/0 [0-9A-Z]+/}",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1352: do_execsql_test 18.2.x {  PRAGMA case_sensitive_like = OFF }",
          "1354: #-------------------------------------------------------------------------",
          "1356: #",
          "1357: do_test 19.1 {",
          "1358:   sqlite3 db2 test.db",
          "",
          "[Removed Lines]",
          "1355: # Test that an existing module may not be overridden.",
          "",
          "[Added Lines]",
          "1355: # Test that it is ok to override and existing module.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1360: } SQLITE_OK",
          "1361: do_test 19.2 {",
          "1362:   register_echo_module [sqlite3_connection_pointer db2]",
          "1364: do_test 19.3 {",
          "1365:   db2 close",
          "1366: } {}",
          "",
          "[Removed Lines]",
          "1363: } SQLITE_MISUSE",
          "",
          "[Added Lines]",
          "1363: } SQLITE_OK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2c40e931083dba2367a46ba4b6f2e460d62cf07",
      "candidate_info": {
        "commit_hash": "d2c40e931083dba2367a46ba4b6f2e460d62cf07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d2c40e931083dba2367a46ba4b6f2e460d62cf07",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "For for the previous check-in:  Always enable the nUri variable, even when debugging is turned off.\n\nFossilOrigin-Name: f84a15394c369cbdb6fba87c603a609722cf1f499626c7f20699060273ab5081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df51ae19c1aa4c26f2dcd427eddc1c9cc24b698e1ab0a948b198a57432e25e1e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4764: #ifdef SQLITE_DEBUG",
          "4766: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4802:     while( *z ){",
          "4803:       z += strlen(z)+1;",
          "4804:       z += strlen(z)+1;",
          "4806:       nUri++;",
          "4808:     }",
          "4809:     nUriByte = (int)(&z[2] - zUri);",
          "4810:     assert( nUriByte>=1 );",
          "",
          "[Removed Lines]",
          "4805: #ifdef SQLITE_DEBUG",
          "4807: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58eaf763551db55e78bce1c9f99ba291e29b92eb",
      "candidate_info": {
        "commit_hash": "58eaf763551db55e78bce1c9f99ba291e29b92eb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58eaf763551db55e78bce1c9f99ba291e29b92eb",
        "files": [
          "README.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Simplify the \"Verifying Code Authenticity\" section of the README.md file. No code changes.\n\nFossilOrigin-Name: adebffc18e6165672947a6bda5ca23ea7723cca7ab8da4feb81fca8f83e4fcaf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc7d2c1656396bb4f5f1f814e60dbf816cc91c5a521b54ad593cd3da0fe8dcb4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}