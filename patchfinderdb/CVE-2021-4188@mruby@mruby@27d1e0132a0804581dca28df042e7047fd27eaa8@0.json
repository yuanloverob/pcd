{
  "cve_id": "CVE-2021-4188",
  "cve_desc": "mruby is vulnerable to NULL Pointer Dereference",
  "repo": "mruby/mruby",
  "patch_hash": "27d1e0132a0804581dca28df042e7047fd27eaa8",
  "patch_info": {
    "commit_hash": "27d1e0132a0804581dca28df042e7047fd27eaa8",
    "repo": "mruby/mruby",
    "commit_url": "https://github.com/mruby/mruby/commit/27d1e0132a0804581dca28df042e7047fd27eaa8",
    "files": [
      "src/array.c"
    ],
    "message": "array.c: fix `mrb_ary_shift_m` initialization bug.\n\nThe `ARY_PTR` and `ARY_LEN` may be modified in `mrb_get_args`.",
    "before_after_code_files": [
      "src/array.c||src/array.c"
    ]
  },
  "patch_diff": {
    "src/array.c||src/array.c": [
      "File: src/array.c -> src/array.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: static mrb_value",
      "582: mrb_ary_shift_m(mrb_state *mrb, mrb_value self)",
      "583: {",
      "586:   mrb_int n;",
      "589:   if (mrb_get_args(mrb, \"|i\", &n) == 0) {",
      "590:     return mrb_ary_shift(mrb, self);",
      "592:   ary_modify_check(mrb, a);",
      "593:   if (len == 0 || n == 0) return mrb_ary_new(mrb);",
      "594:   if (n < 0) mrb_raise(mrb, E_ARGUMENT_ERROR, \"negative array shift\");",
      "",
      "[Removed Lines]",
      "584:   struct RArray *a = mrb_ary_ptr(self);",
      "585:   mrb_int len = ARY_LEN(a);",
      "587:   mrb_value val;",
      "591:   };",
      "",
      "[Added Lines]",
      "588:   }",
      "590:   struct RArray *a = mrb_ary_ptr(self);",
      "591:   mrb_int len = ARY_LEN(a);",
      "592:   mrb_value val;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f77232b71597dbef3907ae4aaae1a5530889e56",
      "candidate_info": {
        "commit_hash": "9f77232b71597dbef3907ae4aaae1a5530889e56",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/9f77232b71597dbef3907ae4aaae1a5530889e56",
        "files": [
          "src/array.c",
          "test/t/array.rb"
        ],
        "message": "array.c: update `Array#shift` to take optional argument; close #5428",
        "before_after_code_files": [
          "src/array.c||src/array.c",
          "test/t/array.rb||test/t/array.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/array.c||src/array.c"
          ],
          "candidate": [
            "src/array.c||src/array.c"
          ]
        }
      },
      "candidate_diff": {
        "src/array.c||src/array.c": [
          "File: src/array.c -> src/array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:   return val;",
          "579: }",
          "582:    item = 0",
          "583:    self.unshift item",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581: MRB_API mrb_value",
          "582: mrb_ary_shift_m(mrb_state *mrb, mrb_value self)",
          "583: {",
          "584:   struct RArray *a = mrb_ary_ptr(self);",
          "585:   mrb_int len = ARY_LEN(a);",
          "586:   mrb_int n;",
          "587:   mrb_value val;",
          "589:   if (mrb_get_args(mrb, \"|i\", &n) == 0) {",
          "590:     return mrb_ary_shift(mrb, self);",
          "591:   };",
          "592:   ary_modify_check(mrb, a);",
          "593:   if (len == 0 || n == 0) return mrb_ary_new(mrb);",
          "594:   if (n > len) n = len;",
          "595:   val = mrb_ary_new_from_values(mrb, n, ARY_PTR(a));",
          "596:   if (ARY_SHARED_P(a)) {",
          "597:   L_SHIFT:",
          "598:     a->as.heap.ptr+=n;",
          "599:     a->as.heap.len-=n;",
          "600:     return val;",
          "601:   }",
          "602:   if (len > ARY_SHIFT_SHARED_MIN) {",
          "603:     ary_make_shared(mrb, a);",
          "604:     goto L_SHIFT;",
          "605:   }",
          "606:   else if (len == n) {",
          "607:     ARY_SET_LEN(a, 0);",
          "608:   }",
          "609:   else {",
          "610:     mrb_value *ptr = ARY_PTR(a);",
          "611:     mrb_int size = len-n;",
          "613:     while (size--) {",
          "615:       ++ptr;",
          "616:     }",
          "617:     ARY_SET_LEN(a, len-n);",
          "618:   }",
          "619:   return val;",
          "620: }",
          "",
          "---------------"
        ],
        "test/t/array.rb||test/t/array.rb": [
          "File: test/t/array.rb -> test/t/array.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   assert_equal(1, b)",
          "297:   assert_raise(FrozenError) { [].freeze.shift }",
          "298: end",
          "300: assert('Array#size', '15.2.12.5.28') do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:   # Array#shift with argument",
          "300:   assert_equal([], [].shift(1))",
          "302:   a = [1,2,3]",
          "303:   b = a.shift(1)",
          "304:   assert_equal([2,3], a)",
          "305:   assert_equal([1], b)",
          "307:   a = [1,2,3,4]",
          "308:   b = a.shift(3)",
          "309:   assert_equal([4], a)",
          "310:   assert_equal([1,2,3], b)",
          "312:   a = [1,2,3]",
          "313:   b = a.shift(4)",
          "314:   assert_equal([], a)",
          "315:   assert_equal([1,2,3], b)",
          "",
          "---------------"
        ]
      }
    }
  ]
}