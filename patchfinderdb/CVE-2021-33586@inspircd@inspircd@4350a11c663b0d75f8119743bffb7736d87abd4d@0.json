{
  "cve_id": "CVE-2021-33586",
  "cve_desc": "InspIRCd 3.8.0 through 3.9.x before 3.10.0 allows any user (able to connect to the server) to access recently deallocated memory, aka the \"malformed PONG\" issue.",
  "repo": "inspircd/inspircd",
  "patch_hash": "4350a11c663b0d75f8119743bffb7736d87abd4d",
  "patch_info": {
    "commit_hash": "4350a11c663b0d75f8119743bffb7736d87abd4d",
    "repo": "inspircd/inspircd",
    "commit_url": "https://github.com/inspircd/inspircd/commit/4350a11c663b0d75f8119743bffb7736d87abd4d",
    "files": [
      "include/clientprotocolmsg.h",
      "src/coremods/core_user/core_user.cpp"
    ],
    "message": "Fix sending malformed pong messages in some cases.",
    "before_after_code_files": [
      "include/clientprotocolmsg.h||include/clientprotocolmsg.h",
      "src/coremods/core_user/core_user.cpp||src/coremods/core_user/core_user.cpp"
    ]
  },
  "patch_diff": {
    "include/clientprotocolmsg.h||include/clientprotocolmsg.h": [
      "File: include/clientprotocolmsg.h -> include/clientprotocolmsg.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "668:  Pong(const std::string& cookie, const std::string& server = \"\")",
      "669:   : ClientProtocol::Message(\"PONG\", ServerInstance->Config->GetServerName())",
      "670:  {",
      "674:   PushParamRef(cookie);",
      "675:  }",
      "676: };",
      "",
      "[Removed Lines]",
      "671:   PushParamRef(ServerInstance->Config->GetServerName());",
      "672:   if (!server.empty())",
      "673:    PushParamRef(server);",
      "",
      "[Added Lines]",
      "671:   if (server.empty())",
      "672:    PushParamRef(ServerInstance->Config->GetServerName());",
      "673:   else",
      "674:    PushParam(server);",
      "",
      "---------------"
    ],
    "src/coremods/core_user/core_user.cpp||src/coremods/core_user/core_user.cpp": [
      "File: src/coremods/core_user/core_user.cpp -> src/coremods/core_user/core_user.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:    return CMD_FAILURE;",
      "84:   }",
      "87:   user->Send(ServerInstance->GetRFCEvents().pong, pong);",
      "88:   return CMD_SUCCESS;",
      "89:  }",
      "",
      "[Removed Lines]",
      "86:   ClientProtocol::Messages::Pong pong(parameters[0], origin ? parameters[1] : \"\");",
      "",
      "[Added Lines]",
      "86:   ClientProtocol::Messages::Pong pong(parameters[0], origin ? parameters[1] : ServerInstance->Config->GetServerName());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "581d1d8fa0ef62e20409543570390613c78e6f5b",
      "candidate_info": {
        "commit_hash": "581d1d8fa0ef62e20409543570390613c78e6f5b",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/581d1d8fa0ef62e20409543570390613c78e6f5b",
        "files": [
          "include/clientprotocolmsg.h",
          "src/coremods/core_user/core_user.cpp",
          "src/coremods/core_user/core_user.h"
        ],
        "message": "Fix the behaviour of multi-value PING and PONG messages.",
        "before_after_code_files": [
          "include/clientprotocolmsg.h||include/clientprotocolmsg.h",
          "src/coremods/core_user/core_user.cpp||src/coremods/core_user/core_user.cpp",
          "src/coremods/core_user/core_user.h||src/coremods/core_user/core_user.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/clientprotocolmsg.h||include/clientprotocolmsg.h",
            "src/coremods/core_user/core_user.cpp||src/coremods/core_user/core_user.cpp"
          ],
          "candidate": [
            "include/clientprotocolmsg.h||include/clientprotocolmsg.h",
            "src/coremods/core_user/core_user.cpp||src/coremods/core_user/core_user.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/clientprotocolmsg.h||include/clientprotocolmsg.h": [
          "File: include/clientprotocolmsg.h -> include/clientprotocolmsg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "663: {",
          "668:   : ClientProtocol::Message(\"PONG\", ServerInstance->Config->ServerName)",
          "669:  {",
          "670:   PushParamRef(ServerInstance->Config->ServerName);",
          "671:   PushParamRef(cookie);",
          "672:  }",
          "673: };",
          "",
          "[Removed Lines]",
          "667:  Pong(const std::string& cookie)",
          "",
          "[Added Lines]",
          "668:  Pong(const std::string& cookie, const std::string& server = \"\")",
          "672:   if (!server.empty())",
          "673:    PushParamRef(server);",
          "",
          "---------------"
        ],
        "src/coremods/core_user/core_user.cpp||src/coremods/core_user/core_user.cpp": [
          "File: src/coremods/core_user/core_user.cpp -> src/coremods/core_user/core_user.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  CommandPing(Module* parent)",
          "68:  {",
          "70:  }",
          "",
          "[Removed Lines]",
          "67:   : SplitCommand(parent, \"PING\", 1, 2)",
          "69:   syntax = \"<servername> [:<servername>]\";",
          "",
          "[Added Lines]",
          "67:   : SplitCommand(parent, \"PING\", 1)",
          "69:   syntax = \"<cookie> [<servername>]\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  CmdResult HandleLocal(LocalUser* user, const Params& parameters) CXX11_OVERRIDE",
          "78:  {",
          "80:   user->Send(ServerInstance->GetRFCEvents().pong, pong);",
          "81:   return CMD_SUCCESS;",
          "82:  }",
          "",
          "[Removed Lines]",
          "79:   ClientProtocol::Messages::Pong pong(parameters[0]);",
          "",
          "[Added Lines]",
          "79:   size_t origin = parameters.size() > 1 ? 1 : 0;",
          "80:   if (parameters[origin].empty())",
          "81:   {",
          "82:    user->WriteNumeric(ERR_NOORIGIN, \"No origin specified\");",
          "83:    return CMD_FAILURE;",
          "84:   }",
          "86:   ClientProtocol::Messages::Pong pong(parameters[0], origin ? parameters[1] : \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:  CommandPong(Module* parent)",
          "94:  {",
          "95:   Penalty = 0;",
          "97:  }",
          "",
          "[Removed Lines]",
          "93:   : Command(parent, \"PONG\", 0, 1)",
          "96:   syntax = \"<ping-text>\";",
          "",
          "[Added Lines]",
          "100:   : Command(parent, \"PONG\", 1)",
          "103:   syntax = \"<cookie> [<servername>]\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:  CmdResult Handle(User* user, const Params& parameters) CXX11_OVERRIDE",
          "105:  {",
          "107:   LocalUser* localuser = IS_LOCAL(user);",
          "108:   if (localuser)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   size_t origin = parameters.size() > 1 ? 1 : 0;",
          "114:   if (parameters[origin].empty())",
          "115:   {",
          "116:    user->WriteNumeric(ERR_NOORIGIN, \"No origin specified\");",
          "117:    return CMD_FAILURE;",
          "118:   }",
          "",
          "---------------"
        ],
        "src/coremods/core_user/core_user.h||src/coremods/core_user/core_user.h": [
          "File: src/coremods/core_user/core_user.h -> src/coremods/core_user/core_user.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"listmode.h\"",
          "25: #include \"modules/away.h\"",
          "27: class MessageWrapper",
          "28: {",
          "29:  std::string prefix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: enum",
          "28: {",
          "30:  ERR_NOORIGIN = 409",
          "31: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cfabb0064cab52bbbab59974e53dc0fa1954da7",
      "candidate_info": {
        "commit_hash": "6cfabb0064cab52bbbab59974e53dc0fa1954da7",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/6cfabb0064cab52bbbab59974e53dc0fa1954da7",
        "files": [
          "include/clientprotocolmsg.h",
          "include/configreader.h",
          "include/modules/cap.h",
          "include/modules/ircv3_replies.h",
          "include/numericbuilder.h",
          "src/configreader.cpp",
          "src/coremods/core_info/cmd_admin.cpp",
          "src/coremods/core_info/cmd_motd.cpp",
          "src/coremods/core_info/cmd_time.cpp",
          "src/coremods/core_info/core_info.cpp",
          "src/coremods/core_stub.cpp",
          "src/modules/m_ircv3_batch.cpp",
          "src/modules/m_permchannels.cpp",
          "src/modules/m_spanningtree/main.cpp",
          "src/modules/m_sslinfo.cpp",
          "src/server.cpp",
          "src/usermanager.cpp"
        ],
        "message": "Hide the server name/desc better when <options:hideserver> is set.",
        "before_after_code_files": [
          "include/clientprotocolmsg.h||include/clientprotocolmsg.h",
          "include/configreader.h||include/configreader.h",
          "include/modules/cap.h||include/modules/cap.h",
          "include/modules/ircv3_replies.h||include/modules/ircv3_replies.h",
          "include/numericbuilder.h||include/numericbuilder.h",
          "src/configreader.cpp||src/configreader.cpp",
          "src/coremods/core_info/cmd_admin.cpp||src/coremods/core_info/cmd_admin.cpp",
          "src/coremods/core_info/cmd_motd.cpp||src/coremods/core_info/cmd_motd.cpp",
          "src/coremods/core_info/cmd_time.cpp||src/coremods/core_info/cmd_time.cpp",
          "src/coremods/core_info/core_info.cpp||src/coremods/core_info/core_info.cpp",
          "src/coremods/core_stub.cpp||src/coremods/core_stub.cpp",
          "src/modules/m_ircv3_batch.cpp||src/modules/m_ircv3_batch.cpp",
          "src/modules/m_permchannels.cpp||src/modules/m_permchannels.cpp",
          "src/modules/m_spanningtree/main.cpp||src/modules/m_spanningtree/main.cpp",
          "src/modules/m_sslinfo.cpp||src/modules/m_sslinfo.cpp",
          "src/server.cpp||src/server.cpp",
          "src/usermanager.cpp||src/usermanager.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/clientprotocolmsg.h||include/clientprotocolmsg.h"
          ],
          "candidate": [
            "include/clientprotocolmsg.h||include/clientprotocolmsg.h"
          ]
        }
      },
      "candidate_diff": {
        "include/clientprotocolmsg.h||include/clientprotocolmsg.h": [
          "File: include/clientprotocolmsg.h -> include/clientprotocolmsg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  Numeric(const ::Numeric::Numeric& num, User* user)",
          "72:  {",
          "73:   if (user->registered & REG_NICK)",
          "74:    PushParamRef(user->nick);",
          "",
          "[Removed Lines]",
          "71:   : ClientProtocol::Message(NULL, (num.GetServer() ? num.GetServer()->GetName() : ServerInstance->Config->ServerName))",
          "",
          "[Added Lines]",
          "71:   : ClientProtocol::Message(NULL, (num.GetServer() ? num.GetServer() : ServerInstance->FakeClient->server)->GetName())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:  Numeric(const ::Numeric::Numeric& num, const std::string& target)",
          "86:  {",
          "87:   PushParamRef(target);",
          "88:   InitFromNumeric(num);",
          "",
          "[Removed Lines]",
          "85:   : ClientProtocol::Message(NULL, (num.GetServer() ? num.GetServer()->GetName() : ServerInstance->Config->ServerName))",
          "",
          "[Added Lines]",
          "85:   : ClientProtocol::Message(NULL, (num.GetServer() ? num.GetServer() : ServerInstance->FakeClient->server)->GetName())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:  Numeric(unsigned int num)",
          "96:  {",
          "97:   InitCommand(num);",
          "98:   PushParam(\"*\");",
          "",
          "[Removed Lines]",
          "95:   : ClientProtocol::Message(NULL, ServerInstance->Config->ServerName)",
          "",
          "[Added Lines]",
          "95:   : ClientProtocol::Message(NULL, ServerInstance->Config->GetServerName())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "643:  Ping()",
          "644:   : ClientProtocol::Message(\"PING\")",
          "645:  {",
          "647:  }",
          "",
          "[Removed Lines]",
          "646:   PushParamRef(ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "646:   PushParamRef(ServerInstance->Config->GetServerName());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "668:  Pong(const std::string& cookie, const std::string& server = \"\")",
          "670:  {",
          "672:   if (!server.empty())",
          "673:    PushParamRef(server);",
          "674:   PushParamRef(cookie);",
          "",
          "[Removed Lines]",
          "669:   : ClientProtocol::Message(\"PONG\", ServerInstance->Config->ServerName)",
          "671:   PushParamRef(ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "669:   : ClientProtocol::Message(\"PONG\", ServerInstance->Config->GetServerName())",
          "671:   PushParamRef(ServerInstance->Config->GetServerName());",
          "",
          "---------------"
        ],
        "include/configreader.h||include/configreader.h": [
          "File: include/configreader.h -> include/configreader.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:  const std::string& GetSID() const { return sid; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:  const std::string& GetServerName() const { return HideServer.empty() ? ServerName : HideServer; }",
          "458:  const std::string& GetServerDesc() const { return HideServer.empty() ? ServerDesc : HideServer; }",
          "",
          "---------------"
        ],
        "include/modules/cap.h||include/modules/cap.h": [
          "File: include/modules/cap.h -> include/modules/cap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:  {",
          "321:   public:",
          "322:   MessageBase(const std::string& subcmd)",
          "324:   {",
          "325:    PushParamPlaceholder();",
          "326:    PushParam(subcmd);",
          "",
          "[Removed Lines]",
          "323:    : ClientProtocol::Message(\"CAP\", ServerInstance->Config->ServerName)",
          "",
          "[Added Lines]",
          "323:    : ClientProtocol::Message(\"CAP\", ServerInstance->Config->GetServerName())",
          "",
          "---------------"
        ],
        "include/modules/ircv3_replies.h||include/modules/ircv3_replies.h": [
          "File: include/modules/ircv3_replies.h -> include/modules/ircv3_replies.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  void Send(LocalUser* user, Command* command, const std::string& code, const std::string& description)",
          "92:  {",
          "94:   msg.PushParamRef(command->name);",
          "95:   msg.PushParam(code);",
          "96:   msg.PushParam(description);",
          "",
          "[Removed Lines]",
          "93:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "93:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->GetServerName());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:  template<typename T1>",
          "101:  void Send(LocalUser* user, Command* command, const std::string& code, const T1& p1, const std::string& description)",
          "102:  {",
          "104:   msg.PushParamRef(command->name);",
          "105:   msg.PushParam(code);",
          "106:   msg.PushParam(ConvToStr(p1));",
          "",
          "[Removed Lines]",
          "103:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "103:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->GetServerName());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:  void Send(LocalUser* user, Command* command, const std::string& code, const T1& p1, const T2& p2,",
          "113:   const std::string& description)",
          "114:  {",
          "116:   msg.PushParamRef(command->name);",
          "117:   msg.PushParam(code);",
          "118:   msg.PushParam(ConvToStr(p1));",
          "",
          "[Removed Lines]",
          "115:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "115:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->GetServerName());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:  void Send(LocalUser* user, Command* command, const std::string& code, const T1& p1, const T2& p2,",
          "126:   const T3& p3, const std::string& description)",
          "127:  {",
          "129:   msg.PushParamRef(command->name);",
          "130:   msg.PushParam(code);",
          "131:   msg.PushParam(ConvToStr(p1));",
          "",
          "[Removed Lines]",
          "128:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "128:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->GetServerName());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:  void Send(LocalUser* user, Command* command, const std::string& code, const T1& p1, const T2& p2,",
          "140:   const T3& p3, const T4& p4, const std::string& description)",
          "141:  {",
          "143:   msg.PushParamRef(command->name);",
          "144:   msg.PushParam(code);",
          "145:   msg.PushParam(ConvToStr(p1));",
          "",
          "[Removed Lines]",
          "142:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "142:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->GetServerName());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:  void Send(LocalUser* user, Command* command, const std::string& code, const T1& p1, const T2& p2,",
          "155:   const T3& p3, const T4& p4, const T5& p5, const std::string& description)",
          "156:  {",
          "158:   if (command)",
          "159:    msg.PushParamRef(command->name);",
          "160:   else",
          "",
          "[Removed Lines]",
          "157:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "157:   ClientProtocol::Message msg(cmd.c_str(), ServerInstance->Config->GetServerName());",
          "",
          "---------------"
        ],
        "include/numericbuilder.h||include/numericbuilder.h": [
          "File: include/numericbuilder.h -> include/numericbuilder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  GenericBuilder(Sink s, unsigned int num, bool addparam = true, size_t additionalsize = 0)",
          "87:   : sink(s)",
          "88:   , numeric(num)",
          "90:  {",
          "91:   if (addparam)",
          "92:    numeric.push(std::string());",
          "",
          "[Removed Lines]",
          "89:   , max(ServerInstance->Config->Limits.MaxLine - ServerInstance->Config->ServerName.size() - additionalsize - 10)",
          "",
          "[Added Lines]",
          "89:   , max(ServerInstance->Config->Limits.MaxLine - ServerInstance->Config->GetServerName().size() - additionalsize - 10)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   : sink(s)",
          "157:   , numeric(num)",
          "158:   , currlen(0)",
          "160:  {",
          "161:  }",
          "",
          "[Removed Lines]",
          "159:   , max(ServerInstance->Config->Limits.MaxLine - ServerInstance->Config->ServerName.size() - additionalsize - 10)",
          "",
          "[Added Lines]",
          "159:   , max(ServerInstance->Config->Limits.MaxLine - ServerInstance->Config->GetServerName().size() - additionalsize - 10)",
          "",
          "---------------"
        ],
        "src/configreader.cpp||src/configreader.cpp": [
          "File: src/configreader.cpp -> src/configreader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:  }",
          "336: }",
          "339: {",
          "340: #ifndef _WIN32",
          "341:  char hostname[256];",
          "",
          "[Removed Lines]",
          "338: static std::string GetServerName()",
          "",
          "[Added Lines]",
          "338: static std::string GetServerHost()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:  ConfigTag* server = ConfValue(\"server\");",
          "360:  if (sid.empty())",
          "361:  {",
          "364:   sid = server->getString(\"id\");",
          "365:   if (!sid.empty() && !InspIRCd::IsSID(sid))",
          "",
          "[Removed Lines]",
          "362:   ServerName = server->getString(\"name\", GetServerName(), InspIRCd::IsHost);",
          "",
          "[Added Lines]",
          "362:   ServerName = server->getString(\"name\", GetServerHost(), InspIRCd::IsHost);",
          "",
          "---------------"
        ],
        "src/coremods/core_info/cmd_admin.cpp||src/coremods/core_info/cmd_admin.cpp": [
          "File: src/coremods/core_info/cmd_admin.cpp -> src/coremods/core_info/cmd_admin.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: {",
          "40:  if (parameters.size() > 0 && !irc::equals(parameters[0], ServerInstance->Config->ServerName))",
          "41:   return CMD_SUCCESS;",
          "43:  if (!AdminName.empty())",
          "44:   user->WriteRemoteNumeric(RPL_ADMINLOC1, InspIRCd::Format(\"Name: %s\", AdminName.c_str()));",
          "45:  user->WriteRemoteNumeric(RPL_ADMINLOC2, InspIRCd::Format(\"Nickname: %s\", AdminNick.c_str()));",
          "",
          "[Removed Lines]",
          "42:  user->WriteRemoteNumeric(RPL_ADMINME, ServerInstance->Config->ServerName, \"Administrative info\");",
          "",
          "[Added Lines]",
          "42:  user->WriteRemoteNumeric(RPL_ADMINME, ServerInstance->Config->GetServerName(), \"Administrative info\");",
          "",
          "---------------"
        ],
        "src/coremods/core_info/cmd_motd.cpp||src/coremods/core_info/cmd_motd.cpp": [
          "File: src/coremods/core_info/cmd_motd.cpp -> src/coremods/core_info/cmd_motd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return CMD_SUCCESS;",
          "58:  }",
          "62:  for (file_cache::iterator i = motd->second.begin(); i != motd->second.end(); i++)",
          "63:   user->WriteRemoteNumeric(RPL_MOTD, InspIRCd::Format(\" %s\", i->c_str()));",
          "",
          "[Removed Lines]",
          "60:  user->WriteRemoteNumeric(RPL_MOTDSTART, InspIRCd::Format(\"%s message of the day\", ServerInstance->Config->ServerName.c_str()));",
          "",
          "[Added Lines]",
          "60:  user->WriteRemoteNumeric(RPL_MOTDSTART, InspIRCd::Format(\"%s message of the day\", ServerInstance->Config->GetServerName().c_str()));",
          "",
          "---------------"
        ],
        "src/coremods/core_info/cmd_time.cpp||src/coremods/core_info/cmd_time.cpp": [
          "File: src/coremods/core_info/cmd_time.cpp -> src/coremods/core_info/cmd_time.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  if (parameters.size() > 0 && !irc::equals(parameters[0], ServerInstance->Config->ServerName))",
          "38:   return CMD_SUCCESS;",
          "42:  return CMD_SUCCESS;",
          "43: }",
          "",
          "[Removed Lines]",
          "40:  user->WriteRemoteNumeric(RPL_TIME, ServerInstance->Config->ServerName, InspIRCd::TimeString(ServerInstance->Time()));",
          "",
          "[Added Lines]",
          "40:  user->WriteRemoteNumeric(RPL_TIME, ServerInstance->Config->GetServerName(), InspIRCd::TimeString(ServerInstance->Time()));",
          "",
          "---------------"
        ],
        "src/coremods/core_info/core_info.cpp||src/coremods/core_info/core_info.cpp": [
          "File: src/coremods/core_info/core_info.cpp -> src/coremods/core_info/core_info.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:  void OnUserConnect(LocalUser* user) CXX11_OVERRIDE",
          "135:  {",
          "136:   user->WriteNumeric(RPL_WELCOME, InspIRCd::Format(\"Welcome to the %s IRC Network %s\", ServerInstance->Config->Network.c_str(), user->GetFullRealHost().c_str()));",
          "138:   user->WriteNumeric(RPL_CREATED, InspIRCd::TimeString(ServerInstance->startup_time, \"This server was created %H:%M:%S %b %d %Y\"));",
          "139:   user->WriteNumeric(numeric004);",
          "",
          "[Removed Lines]",
          "137:   user->WriteNumeric(RPL_YOURHOST, InspIRCd::Format(\"Your host is %s, running version %s\", ServerInstance->Config->ServerName.c_str(), INSPIRCD_BRANCH));",
          "",
          "[Added Lines]",
          "137:   user->WriteNumeric(RPL_YOURHOST, InspIRCd::Format(\"Your host is %s, running version %s\", ServerInstance->Config->GetServerName().c_str(), INSPIRCD_BRANCH));",
          "",
          "---------------"
        ],
        "src/coremods/core_stub.cpp||src/coremods/core_stub.cpp": [
          "File: src/coremods/core_stub.cpp -> src/coremods/core_stub.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  CmdResult Handle(User* user, const Params& parameters) CXX11_OVERRIDE",
          "79:  {",
          "81:   user->WriteNumeric(RPL_ENDOFLINKS, '*', \"End of /LINKS list.\");",
          "82:   return CMD_SUCCESS;",
          "83:  }",
          "",
          "[Removed Lines]",
          "80:   user->WriteNumeric(RPL_LINKS, ServerInstance->Config->ServerName, ServerInstance->Config->ServerName, InspIRCd::Format(\"0 %s\", ServerInstance->Config->ServerDesc.c_str()));",
          "",
          "[Added Lines]",
          "80:   user->WriteNumeric(RPL_LINKS, ServerInstance->Config->GetServerName(), ServerInstance->Config->GetServerName(), InspIRCd::Format(\"0 %s\", ServerInstance->Config->GetServerDesc().c_str()));",
          "",
          "---------------"
        ],
        "src/modules/m_ircv3_batch.cpp||src/modules/m_ircv3_batch.cpp": [
          "File: src/modules/m_ircv3_batch.cpp -> src/modules/m_ircv3_batch.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: {",
          "27:  public:",
          "28:  BatchMessage(const IRCv3::Batch::Batch& batch, bool start)",
          "30:  {",
          "31:   char c = (start ? '+' : '-');",
          "32:   PushParam(std::string(1, c) + batch.GetRefTagStr());",
          "",
          "[Removed Lines]",
          "29:   : ClientProtocol::Message(\"BATCH\", ServerInstance->Config->ServerName)",
          "",
          "[Added Lines]",
          "29:   : ClientProtocol::Message(\"BATCH\", ServerInstance->Config->GetServerName())",
          "",
          "---------------"
        ],
        "src/modules/m_permchannels.cpp||src/modules/m_permchannels.cpp": [
          "File: src/modules/m_permchannels.cpp -> src/modules/m_permchannels.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:       topicset = ServerInstance->Time();",
          "229:      std::string topicsetby = tag->getString(\"topicsetby\");",
          "230:      if (topicsetby.empty())",
          "232:      c->SetTopic(ServerInstance->FakeClient, topic, topicset, &topicsetby);",
          "233:     }",
          "",
          "[Removed Lines]",
          "231:       topicsetby = ServerInstance->Config->ServerName;",
          "",
          "[Added Lines]",
          "231:       topicsetby = ServerInstance->Config->GetServerName();",
          "",
          "---------------"
        ],
        "src/modules/m_spanningtree/main.cpp||src/modules/m_spanningtree/main.cpp": [
          "File: src/modules/m_spanningtree/main.cpp -> src/modules/m_spanningtree/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   return;",
          "146:  user->WriteNumeric(RPL_LINKS, Current->GetName(),",
          "148:    InspIRCd::Format(\"%d %s\", (((Utils->FlatLinks) && (!user->IsOper())) ? 0 : hops), Current->GetDesc().c_str()));",
          "149: }",
          "",
          "[Removed Lines]",
          "147:    (((Utils->FlatLinks) && (!user->IsOper())) ? ServerInstance->Config->ServerName : Parent),",
          "",
          "[Added Lines]",
          "147:    (((Utils->FlatLinks) && (!user->IsOper())) ? ServerInstance->Config->GetServerName() : Parent),",
          "",
          "---------------"
        ],
        "src/modules/m_sslinfo.cpp||src/modules/m_sslinfo.cpp": [
          "File: src/modules/m_sslinfo.cpp -> src/modules/m_sslinfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   std::string text = \"*** You are connected to \";",
          "296:   if (!ssliohook->GetServerName(text))",
          "298:   text.append(\" using TLS (SSL) cipher '\");",
          "299:   ssliohook->GetCiphersuite(text);",
          "300:   text.push_back('\\'');",
          "",
          "[Removed Lines]",
          "297:    text.append(ServerInstance->Config->ServerName);",
          "",
          "[Added Lines]",
          "297:    text.append(ServerInstance->Config->GetServerName());",
          "",
          "---------------"
        ],
        "src/server.cpp||src/server.cpp": [
          "File: src/server.cpp -> src/server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: {",
          "73:  if (getFullVersion)",
          "74:   return INSPIRCD_VERSION \". \" + Config->ServerName + \" :[\" + Config->sid + \"] \" + Config->CustomVersion;",
          "76: }",
          "78: std::string UIDGenerator::GenerateSID(const std::string& servername, const std::string& serverdesc)",
          "",
          "[Removed Lines]",
          "75:  return INSPIRCD_BRANCH \". \" + Config->ServerName + \" :\" + Config->CustomVersion;",
          "",
          "[Added Lines]",
          "75:  return INSPIRCD_BRANCH \". \" + Config->GetServerName() + \" :\" + Config->CustomVersion;",
          "",
          "---------------"
        ],
        "src/usermanager.cpp||src/usermanager.cpp": [
          "File: src/usermanager.cpp -> src/usermanager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "369: {",
          "370:  std::string message;",
          "371:  VAFORMAT(message, text, text);",
          "373:  ClientProtocol::Event msgevent(ServerInstance->GetRFCEvents().privmsg, msg);",
          "375:  for (LocalList::const_iterator i = local_users.begin(); i != local_users.end(); ++i)",
          "",
          "[Removed Lines]",
          "372:  ClientProtocol::Messages::Privmsg msg(ClientProtocol::Messages::Privmsg::nocopy, ServerInstance->FakeClient, ServerInstance->Config->ServerName, message, MSG_NOTICE);",
          "",
          "[Added Lines]",
          "372:  ClientProtocol::Messages::Privmsg msg(ClientProtocol::Messages::Privmsg::nocopy, ServerInstance->FakeClient, ServerInstance->Config->GetServerName(), message, MSG_NOTICE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}