{
  "cve_id": "CVE-2022-0943",
  "cve_desc": "Heap-based Buffer Overflow occurs in vim in GitHub repository vim/vim prior to 8.2.4563.",
  "repo": "vim/vim",
  "patch_hash": "5c68617d395f9d7b824f68475b24ce3e38d653a3",
  "patch_info": {
    "commit_hash": "5c68617d395f9d7b824f68475b24ce3e38d653a3",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/5c68617d395f9d7b824f68475b24ce3e38d653a3",
    "files": [
      "src/spellsuggest.c",
      "src/testdir/test_spell.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4563: \"z=\" in Visual mode may go beyond the end of the line\n\nProblem:    \"z=\" in Visual mode may go beyond the end of the line.\nSolution:   Adjust \"badlen\".",
    "before_after_code_files": [
      "src/spellsuggest.c||src/spellsuggest.c",
      "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/spellsuggest.c||src/spellsuggest.c": [
      "File: src/spellsuggest.c -> src/spellsuggest.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "506:      curwin->w_cursor.col = VIsual.col;",
      "507:  ++badlen;",
      "508:  end_visual_mode();",
      "509:     }",
      "511:     else if (spell_move_to(curwin, FORWARD, TRUE, TRUE, NULL) == 0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "510:  line = ml_get_curline();",
      "511:  if (badlen > STRLEN(line) - curwin->w_cursor.col)",
      "512:      badlen = STRLEN(line) - curwin->w_cursor.col;",
      "",
      "---------------"
    ],
    "src/testdir/test_spell.vim||src/testdir/test_spell.vim": [
      "File: src/testdir/test_spell.vim -> src/testdir/test_spell.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "456:   call assert_fails('set spellsuggest=timeout:--9', 'E474:')",
      "457: endfunc",
      "459: func Test_spellinfo()",
      "460:   new",
      "461:   let runtime = substitute($VIMRUNTIME, '\\\\', '/', 'g')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "459: func Test_spellsuggest_visual_end_of_line()",
      "460:   let enc_save = &encoding",
      "461:   set encoding=iso8859",
      "463:   \" This was reading beyond the end of the line.",
      "464:   norm R00000000000",
      "465:   sil norm \u00160",
      "466:   sil! norm \u0016i00000)",
      "467:   sil! norm \u0016i00000)",
      "468:   call feedkeys(\"\\<CR>\")",
      "469:   norm z=",
      "471:   let &encoding = enc_save",
      "472: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4562,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4563,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5cffa8df7e3c28681b9e5deef6df395784359b6b",
      "candidate_info": {
        "commit_hash": "5cffa8df7e3c28681b9e5deef6df395784359b6b",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/5cffa8df7e3c28681b9e5deef6df395784359b6b",
        "files": [
          "src/cmdexpand.c",
          "src/ex_getln.c",
          "src/spellsuggest.c",
          "src/testdir/dumps/Test_wildmenu_pum_42.dump",
          "src/testdir/dumps/Test_wildmenu_pum_43.dump",
          "src/testdir/dumps/Test_wildmenu_pum_44.dump",
          "src/testdir/dumps/Test_wildmenu_pum_45.dump",
          "src/testdir/dumps/Test_wildmenu_pum_46.dump",
          "src/testdir/dumps/Test_wildmenu_pum_47.dump",
          "src/testdir/dumps/Test_wildmenu_pum_48.dump",
          "src/testdir/dumps/Test_wildmenu_pum_49.dump",
          "src/testdir/dumps/Test_wildmenu_pum_50.dump",
          "src/testdir/test_cmdline.vim",
          "src/version.c",
          "src/vim.h"
        ],
        "message": "patch 8.2.4579: cannot use page-up and page-down in the cmdline popup menu\n\nProblem:    Cannot use page-up and page-down in the command line completion\n            popup menu.\nSolution:   Check for to page-up and page-down keys. (Yegappan Lakshmanan,\n            closes #9960)",
        "before_after_code_files": [
          "src/cmdexpand.c||src/cmdexpand.c",
          "src/ex_getln.c||src/ex_getln.c",
          "src/spellsuggest.c||src/spellsuggest.c",
          "src/testdir/dumps/Test_wildmenu_pum_42.dump||src/testdir/dumps/Test_wildmenu_pum_42.dump",
          "src/testdir/dumps/Test_wildmenu_pum_43.dump||src/testdir/dumps/Test_wildmenu_pum_43.dump",
          "src/testdir/dumps/Test_wildmenu_pum_44.dump||src/testdir/dumps/Test_wildmenu_pum_44.dump",
          "src/testdir/dumps/Test_wildmenu_pum_45.dump||src/testdir/dumps/Test_wildmenu_pum_45.dump",
          "src/testdir/dumps/Test_wildmenu_pum_46.dump||src/testdir/dumps/Test_wildmenu_pum_46.dump",
          "src/testdir/dumps/Test_wildmenu_pum_47.dump||src/testdir/dumps/Test_wildmenu_pum_47.dump",
          "src/testdir/dumps/Test_wildmenu_pum_48.dump||src/testdir/dumps/Test_wildmenu_pum_48.dump",
          "src/testdir/dumps/Test_wildmenu_pum_49.dump||src/testdir/dumps/Test_wildmenu_pum_49.dump",
          "src/testdir/dumps/Test_wildmenu_pum_50.dump||src/testdir/dumps/Test_wildmenu_pum_50.dump",
          "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim",
          "src/version.c||src/version.c",
          "src/vim.h||src/vim.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cmdexpand.c||src/cmdexpand.c": [
          "File: src/cmdexpand.c -> src/cmdexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     i = (int)(xp->xp_pattern - ccline->cmdbuff);",
          "225:     xp->xp_pattern_len = ccline->cmdpos - i;",
          "228:     {",
          "230:  p2 = ExpandOne(xp, NULL, NULL, 0, type);",
          "",
          "[Removed Lines]",
          "227:     if (type == WILD_NEXT || type == WILD_PREV)",
          "",
          "[Added Lines]",
          "227:     if (type == WILD_NEXT || type == WILD_PREV",
          "228:      || type == WILD_PAGEUP || type == WILD_PAGEDOWN)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:  char_u  *orig_save)",
          "415: {",
          "416:     int findex = *p_findex;",
          "418:     if (xp->xp_numfiles <= 0)",
          "419:  return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:     int ht;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:      findex = xp->xp_numfiles;",
          "425:  --findex;",
          "426:     }",
          "428:  ++findex;",
          "432:     if (findex < 0)",
          "433:     {",
          "434:  if (orig_save == NULL)",
          "",
          "[Removed Lines]",
          "427:     else    // mode == WILD_NEXT",
          "",
          "[Added Lines]",
          "429:     else if (mode == WILD_NEXT)",
          "431:     else if (mode == WILD_PAGEUP)",
          "432:     {",
          "433:  if (findex == 0)",
          "435:      findex = -1;",
          "436:  else if (findex == -1)",
          "438:      findex = xp->xp_numfiles - 1;",
          "439:  else",
          "440:  {",
          "442:      ht = pum_get_height();",
          "443:      if (ht > 3)",
          "444:   ht -= 2;",
          "445:      findex -= ht;",
          "446:      if (findex < 0)",
          "448:   findex = 0;",
          "449:  }",
          "450:     }",
          "451:     else   // mode == WILD_PAGEDOWN",
          "452:     {",
          "453:  if (findex == xp->xp_numfiles - 1)",
          "455:      findex = -1;",
          "456:  else if (findex == -1)",
          "458:      findex = 0;",
          "459:  else",
          "460:  {",
          "462:      ht = pum_get_height();",
          "463:      if (ht > 3)",
          "464:   ht -= 2;",
          "465:      findex += ht;",
          "466:      if (findex >= xp->xp_numfiles)",
          "468:   findex = xp->xp_numfiles - 1;",
          "469:  }",
          "470:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "639:     long_u len;",
          "643:  return get_next_or_prev_match(mode, xp, &findex, orig_save);",
          "645:     if (mode == WILD_CANCEL)",
          "",
          "[Removed Lines]",
          "642:     if (mode == WILD_NEXT || mode == WILD_PREV)",
          "",
          "[Added Lines]",
          "683:     if (mode == WILD_NEXT || mode == WILD_PREV",
          "684:      || mode == WILD_PAGEUP || mode == WILD_PAGEDOWN)",
          "",
          "---------------"
        ],
        "src/ex_getln.c||src/ex_getln.c": [
          "File: src/ex_getln.c -> src/ex_getln.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1757:     for (;;)",
          "1758:     {",
          "1759:  int trigger_cmdlinechanged = TRUE;",
          "1761:  redir_off = TRUE; // Don't redirect the typed command.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1760:  int end_wildmenu;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1878:  }",
          "1879: #endif",
          "1885:  {",
          "1886: #ifdef FEAT_WILDMENU",
          "1887:      if (cmdline_pum_active())",
          "",
          "[Removed Lines]",
          "1882:  if (!(c == p_wc && KeyTyped) && c != p_wcm",
          "1883:   && c != Ctrl_N && c != Ctrl_P && c != Ctrl_A",
          "1884:   && c != Ctrl_L)",
          "",
          "[Added Lines]",
          "1887:  end_wildmenu = (!(c == p_wc && KeyTyped) && c != p_wcm",
          "1888:   && c != Ctrl_N && c != Ctrl_P && c != Ctrl_A && c != Ctrl_L);",
          "1889: #ifdef FEAT_WILDMENU",
          "1890:  end_wildmenu = end_wildmenu && (!cmdline_pum_active() ||",
          "1891:        (c != K_PAGEDOWN && c != K_PAGEUP",
          "1892:         && c != K_KPAGEDOWN && c != K_KPAGEUP));",
          "1893: #endif",
          "1896:  if (end_wildmenu)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2306:  case K_KPAGEUP:",
          "2307:  case K_PAGEDOWN:",
          "2308:  case K_KPAGEDOWN:",
          "2315:   goto cmdline_not_changed;",
          "2317: #ifdef FEAT_SEARCH_EXTRA",
          "",
          "[Removed Lines]",
          "2309:   res = cmdline_browse_history(c, firstc, &lookfor, histype,",
          "2310:    &hiscnt, &xpc);",
          "2311:   if (res == CMDLINE_CHANGED)",
          "2312:       goto cmdline_changed;",
          "2313:   else if (res == GOTO_NORMAL_MODE)",
          "2314:       goto returncmd;",
          "",
          "[Added Lines]",
          "2321: #ifdef FEAT_WILDMENU",
          "2322:   if (cmdline_pum_active()",
          "2323:    && (c == K_PAGEUP || c == K_PAGEDOWN ||",
          "2324:        c == K_KPAGEUP || c == K_KPAGEDOWN))",
          "2325:   {",
          "2328:       if (nextwild(&xpc,",
          "2329:     (c == K_PAGEUP) ? WILD_PAGEUP : WILD_PAGEDOWN,",
          "2330:     0, firstc != '@') == FAIL)",
          "2331:    break;",
          "2332:       goto cmdline_not_changed;",
          "2333:   }",
          "2334:   else",
          "2335: #endif",
          "2336:   {",
          "2337:       res = cmdline_browse_history(c, firstc, &lookfor, histype,",
          "2338:        &hiscnt, &xpc);",
          "2339:       if (res == CMDLINE_CHANGED)",
          "2340:    goto cmdline_changed;",
          "2341:       else if (res == GOTO_NORMAL_MODE)",
          "2342:    goto returncmd;",
          "2343:   }",
          "",
          "---------------"
        ],
        "src/spellsuggest.c||src/spellsuggest.c": [
          "File: src/spellsuggest.c -> src/spellsuggest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:  line = ml_get_curline();",
          "511:  if (badlen > (int)STRLEN(line) - (int)curwin->w_cursor.col)",
          "513:     }",
          "515:     else if (spell_move_to(curwin, FORWARD, TRUE, TRUE, NULL) == 0",
          "",
          "[Removed Lines]",
          "512:      badlen = STRLEN(line) - curwin->w_cursor.col;",
          "",
          "[Added Lines]",
          "512:      badlen = (int)STRLEN(line) - (int)curwin->w_cursor.col;",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_42.dump||src/testdir/dumps/Test_wildmenu_pum_42.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_42.dump -> src/testdir/dumps/Test_wildmenu_pum_42.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#ffd7ff255|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#e0e0e08|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#ffd7ff255|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| |u|n|d|e|f|i|n|e> @60",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_43.dump||src/testdir/dumps/Test_wildmenu_pum_43.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_43.dump -> src/testdir/dumps/Test_wildmenu_pum_43.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#ffd7ff255|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#e0e0e08|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| |u|n|p|l|a|c|e> @61",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_44.dump||src/testdir/dumps/Test_wildmenu_pum_44.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_44.dump -> src/testdir/dumps/Test_wildmenu_pum_44.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#ffd7ff255|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#ffd7ff255|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| > @68",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_45.dump||src/testdir/dumps/Test_wildmenu_pum_45.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_45.dump -> src/testdir/dumps/Test_wildmenu_pum_45.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#e0e0e08|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#ffd7ff255|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| |d|e|f|i|n|e> @62",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_46.dump||src/testdir/dumps/Test_wildmenu_pum_46.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_46.dump -> src/testdir/dumps/Test_wildmenu_pum_46.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#ffd7ff255|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#e0e0e08|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| |u|n|p|l|a|c|e> @61",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_47.dump||src/testdir/dumps/Test_wildmenu_pum_47.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_47.dump -> src/testdir/dumps/Test_wildmenu_pum_47.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#ffd7ff255|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#ffd7ff255|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| > @68",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_48.dump||src/testdir/dumps/Test_wildmenu_pum_48.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_48.dump -> src/testdir/dumps/Test_wildmenu_pum_48.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#ffd7ff255|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#e0e0e08|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| |u|n|p|l|a|c|e> @61",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_49.dump||src/testdir/dumps/Test_wildmenu_pum_49.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_49.dump -> src/testdir/dumps/Test_wildmenu_pum_49.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#ffd7ff255|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#e0e0e08|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#ffd7ff255|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| |j|u|m|p> @64",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_wildmenu_pum_50.dump||src/testdir/dumps/Test_wildmenu_pum_50.dump": [
          "File: src/testdir/dumps/Test_wildmenu_pum_50.dump -> src/testdir/dumps/Test_wildmenu_pum_50.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0&#ffffff0@74",
          "2: |~+0#4040ff13&| @73",
          "3: |~| @73",
          "4: |~| @3| +0#0000001#e0e0e08|d|e|f|i|n|e| @8| +0#4040ff13#ffffff0@53",
          "5: |~| @3| +0#0000001#ffd7ff255|j|u|m|p| @10| +0#4040ff13#ffffff0@53",
          "6: |~| @3| +0#0000001#ffd7ff255|l|i|s|t| @10| +0#4040ff13#ffffff0@53",
          "7: |~| @3| +0#0000001#ffd7ff255|p|l|a|c|e| @9| +0#4040ff13#ffffff0@53",
          "8: |~| @3| +0#0000001#ffd7ff255|u|n|d|e|f|i|n|e| @6| +0#4040ff13#ffffff0@53",
          "9: |~| @3| +0#0000001#ffd7ff255|u|n|p|l|a|c|e| @7| +0#4040ff13#ffffff0@53",
          "10: |:+0#0000000&|s|i|g|n| |d|e|f|i|n|e> @62",
          "",
          "---------------"
        ],
        "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim": [
          "File: src/testdir/test_cmdline.vim -> src/testdir/test_cmdline.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   call assert_equal('\"e Xdir1/Xdir2/1', @:)",
          "153:   cunmap <F2>",
          "155:   \" cleanup",
          "156:   %bwipe",
          "157:   call delete('Xdir1', 'rf')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   \" Test for canceling the wild menu by pressing <PageDown> or <PageUp>.",
          "156:   \" After this pressing <Left> or <Right> should not change the selection.",
          "157:   call feedkeys(\":sign \\<Tab>\\<PageDown>\\<Left>\\<Right>\\<C-A>\\<C-B>\\\"\\<CR>\", 'tx')",
          "158:   call assert_equal('\"sign define', @:)",
          "159:   call histadd('cmd', 'TestWildMenu')",
          "160:   call feedkeys(\":sign \\<Tab>\\<PageUp>\\<Left>\\<Right>\\<C-A>\\<C-B>\\\"\\<CR>\", 'tx')",
          "161:   call assert_equal('\"TestWildMenu', @:)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2416:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_41', {})",
          "2417:   call term_sendkeys(buf, \"\\<Esc>\")",
          "2419:   call term_sendkeys(buf, \"\\<C-U>\\<CR>\")",
          "2420:   call StopVimInTerminal(buf)",
          "2421:   call delete('Xtest')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2427:   \" Pressing <PageDown> should scroll the menu downward",
          "2428:   call term_sendkeys(buf, \":sign \\<Tab>\\<PageDown>\")",
          "2429:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_42', {})",
          "2430:   call term_sendkeys(buf, \"\\<PageDown>\")",
          "2431:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_43', {})",
          "2432:   call term_sendkeys(buf, \"\\<PageDown>\")",
          "2433:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_44', {})",
          "2434:   call term_sendkeys(buf, \"\\<PageDown>\")",
          "2435:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_45', {})",
          "2436:   call term_sendkeys(buf, \"\\<C-U>sign \\<Tab>\\<Down>\\<Down>\\<PageDown>\")",
          "2437:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_46', {})",
          "2439:   \" Pressing <PageUp> should scroll the menu upward",
          "2440:   call term_sendkeys(buf, \"\\<C-U>sign \\<Tab>\\<PageUp>\")",
          "2441:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_47', {})",
          "2442:   call term_sendkeys(buf, \"\\<PageUp>\")",
          "2443:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_48', {})",
          "2444:   call term_sendkeys(buf, \"\\<PageUp>\")",
          "2445:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_49', {})",
          "2446:   call term_sendkeys(buf, \"\\<PageUp>\")",
          "2447:   call VerifyScreenDump(buf, 'Test_wildmenu_pum_50', {})",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4578,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4579,",
          "",
          "---------------"
        ],
        "src/vim.h||src/vim.h": [
          "File: src/vim.h -> src/vim.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "818: #define WILD_ALL_KEEP  8",
          "819: #define WILD_CANCEL  9",
          "820: #define WILD_APPLY  10",
          "822: #define WILD_LIST_NOTFOUND     0x01",
          "823: #define WILD_HOME_REPLACE     0x02",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821: #define WILD_PAGEUP  11",
          "822: #define WILD_PAGEDOWN  12",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e2e2cc95b913e33145047e0fade5193da6e4379",
      "candidate_info": {
        "commit_hash": "6e2e2cc95b913e33145047e0fade5193da6e4379",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/6e2e2cc95b913e33145047e0fade5193da6e4379",
        "files": [
          "runtime/doc/builtin.txt",
          "src/cmdexpand.c",
          "src/spellsuggest.c",
          "src/testdir/test_cmdline.vim",
          "src/testdir/test_writefile.vim",
          "src/usercmd.c",
          "src/version.c",
          "src/vim.h"
        ],
        "message": "patch 8.2.4565: no command line completion for :breakadd and :breakdel\n\nProblem:    No command line completion for :breakadd and :breakdel.\nSolution:   Add completion for :breakadd and :breakdel. (Yegappan Lakshmanan,\n            closes #9950)",
        "before_after_code_files": [
          "src/cmdexpand.c||src/cmdexpand.c",
          "src/spellsuggest.c||src/spellsuggest.c",
          "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim",
          "src/testdir/test_writefile.vim||src/testdir/test_writefile.vim",
          "src/usercmd.c||src/usercmd.c",
          "src/version.c||src/version.c",
          "src/vim.h||src/vim.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/spellsuggest.c||src/spellsuggest.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cmdexpand.c||src/cmdexpand.c": [
          "File: src/cmdexpand.c -> src/cmdexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1602: }",
          "1603: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605: #ifdef FEAT_EVAL",
          "1606: static enum",
          "1607: {",
          "1608:     EXP_BREAKPT_ADD, // expand \":breakadd\" sub-commands",
          "1609:     EXP_BREAKPT_DEL // expand \":breakdel\" sub-commands",
          "1610: } breakpt_expand_what;",
          "1615:     static char_u *",
          "1616: set_context_in_breakadd_cmd(expand_T *xp, char_u *arg, cmdidx_T cmdidx)",
          "1617: {",
          "1618:     char_u *p;",
          "1619:     char_u *subcmd_start;",
          "1621:     xp->xp_context = EXPAND_BREAKPOINT;",
          "1622:     xp->xp_pattern = arg;",
          "1624:     if (cmdidx == CMD_breakadd)",
          "1625:  breakpt_expand_what = EXP_BREAKPT_ADD;",
          "1626:     else",
          "1627:  breakpt_expand_what = EXP_BREAKPT_DEL;",
          "1629:     p = skipwhite(arg);",
          "1630:     if (*p == NUL)",
          "1631:  return NULL;",
          "1632:     subcmd_start = p;",
          "1634:     if (STRNCMP(\"file \", p, 5) == 0 ||",
          "1635:      STRNCMP(\"func \", p, 5) == 0)",
          "1636:     {",
          "1639:  p += 4;",
          "1640:  p = skipwhite(p);",
          "1643:  if (VIM_ISDIGIT(*p))",
          "1644:  {",
          "1645:      p = skipdigits(p);",
          "1646:      if (*p != ' ')",
          "1647:      {",
          "1648:   xp->xp_context = EXPAND_NOTHING;",
          "1649:   return NULL;",
          "1650:      }",
          "1651:      p = skipwhite(p);",
          "1652:  }",
          "1653:  if (STRNCMP(\"file\", subcmd_start, 4) == 0)",
          "1654:      xp->xp_context = EXPAND_FILES;",
          "1655:  else",
          "1656:      xp->xp_context = EXPAND_USER_FUNC;",
          "1657:  xp->xp_pattern = p;",
          "1658:     }",
          "1659:     else if (STRNCMP(\"expr \", p, 5) == 0)",
          "1660:     {",
          "1662:  xp->xp_context = EXPAND_EXPRESSION;",
          "1663:  xp->xp_pattern = skipwhite(p + 5);",
          "1664:     }",
          "1666:     return NULL;",
          "1667: }",
          "1668: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1958:      xp->xp_pattern = arg;",
          "1959:      break;",
          "1961:  default:",
          "1962:      break;",
          "1963:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2026: #ifdef FEAT_EVAL",
          "2027:  case CMD_breakadd:",
          "2028:  case CMD_breakdel:",
          "2029:      return set_context_in_breakadd_cmd(xp, arg, cmdidx);",
          "2030: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2348:     return NULL;",
          "2349: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2422: # ifdef FEAT_EVAL",
          "2428:     static char_u *",
          "2429: get_breakadd_arg(expand_T *xp UNUSED, int idx)",
          "2430: {",
          "2431:     char *opts[] = {\"expr\", \"file\", \"func\", \"here\"};",
          "2433:     if (idx >=0 && idx <= 3)",
          "2434:     {",
          "2435:  if (breakpt_expand_what == EXP_BREAKPT_ADD)",
          "2436:      return (char_u *)opts[idx];",
          "2437:  else",
          "2438:  {",
          "2439:      if (idx <= 2)",
          "2440:   return (char_u *)opts[idx + 1];",
          "2441:  }",
          "2442:     }",
          "2443:     return NULL;",
          "2444: }",
          "2445: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2397:  {EXPAND_USER_CMD_FLAGS, get_user_cmd_flags, FALSE, TRUE},",
          "2398:  {EXPAND_USER_NARGS, get_user_cmd_nargs, FALSE, TRUE},",
          "2399:  {EXPAND_USER_COMPLETE, get_user_cmd_complete, FALSE, TRUE},",
          "2401:  {EXPAND_USER_VARS, get_user_var_name, FALSE, TRUE},",
          "2402:  {EXPAND_FUNCTIONS, get_function_name, FALSE, TRUE},",
          "2403:  {EXPAND_USER_FUNC, get_user_func_name, FALSE, TRUE},",
          "2404:  {EXPAND_DISASSEMBLE, get_disassemble_argument, FALSE, TRUE},",
          "2405:  {EXPAND_EXPRESSION, get_expr_name, FALSE, TRUE},",
          "2408:  {EXPAND_MENUS, get_menu_name, FALSE, TRUE},",
          "2409:  {EXPAND_MENUNAMES, get_menu_names, FALSE, TRUE},",
          "2412:  {EXPAND_SYNTAX, get_syntax_name, TRUE, TRUE},",
          "2415:  {EXPAND_SYNTIME, get_syntime_arg, TRUE, TRUE},",
          "2417:  {EXPAND_HIGHLIGHT, get_highlight_name, TRUE, TRUE},",
          "2418:  {EXPAND_EVENTS, get_event_name, TRUE, FALSE},",
          "2419:  {EXPAND_AUGROUP, get_augroup_name, TRUE, FALSE},",
          "2421:  {EXPAND_CSCOPE, get_cscope_name, TRUE, TRUE},",
          "2424:  {EXPAND_SIGN, get_sign_name, TRUE, TRUE},",
          "2427:  {EXPAND_PROFILE, get_profile_name, TRUE, TRUE},",
          "2430:  {EXPAND_LANGUAGE, get_lang_arg, TRUE, FALSE},",
          "2431:  {EXPAND_LOCALES, get_locales, TRUE, FALSE},",
          "2433:  {EXPAND_ENV_VARS, get_env_name, TRUE, TRUE},",
          "2434:  {EXPAND_USER, get_users, TRUE, FALSE},",
          "2435:  {EXPAND_ARGLIST, get_arglist_name, TRUE, FALSE},",
          "2436:     };",
          "2437:     int i;",
          "2438:     int ret = FAIL;",
          "",
          "[Removed Lines]",
          "2400: # ifdef FEAT_EVAL",
          "2406: # endif",
          "2407: # ifdef FEAT_MENU",
          "2410: # endif",
          "2411: # ifdef FEAT_SYN_HL",
          "2413: # endif",
          "2414: # ifdef FEAT_PROFILE",
          "2416: # endif",
          "2420: # ifdef FEAT_CSCOPE",
          "2422: # endif",
          "2423: # ifdef FEAT_SIGNS",
          "2425: # endif",
          "2426: # ifdef FEAT_PROFILE",
          "2428: # endif",
          "2429: # if defined(HAVE_LOCALE_H) || defined(X_LOCALE)",
          "2432: # endif",
          "",
          "[Added Lines]",
          "2496: #ifdef FEAT_EVAL",
          "2502: #endif",
          "2503: #ifdef FEAT_MENU",
          "2506: #endif",
          "2507: #ifdef FEAT_SYN_HL",
          "2509: #endif",
          "2510: #ifdef FEAT_PROFILE",
          "2512: #endif",
          "2516: #ifdef FEAT_CSCOPE",
          "2518: #endif",
          "2519: #ifdef FEAT_SIGNS",
          "2521: #endif",
          "2522: #ifdef FEAT_PROFILE",
          "2524: #endif",
          "2525: #if defined(HAVE_LOCALE_H) || defined(X_LOCALE)",
          "2528: #endif",
          "2532: #ifdef FEAT_EVAL",
          "2533:  {EXPAND_BREAKPOINT, get_breakadd_arg, TRUE, TRUE},",
          "2534: #endif",
          "",
          "---------------"
        ],
        "src/spellsuggest.c||src/spellsuggest.c": [
          "File: src/spellsuggest.c -> src/spellsuggest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "508:  end_visual_mode();",
          "510:  line = ml_get_curline();",
          "512:      badlen = STRLEN(line) - curwin->w_cursor.col;",
          "513:     }",
          "",
          "[Removed Lines]",
          "511:  if (badlen > STRLEN(line) - curwin->w_cursor.col)",
          "",
          "[Added Lines]",
          "511:  if (badlen > (int)STRLEN(line) - (int)curwin->w_cursor.col)",
          "",
          "---------------"
        ],
        "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim": [
          "File: src/testdir/test_cmdline.vim -> src/testdir/test_cmdline.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "3007:   set wildoptions&",
          "3008: endfunc",
          "3010: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3010: \" Test for :breakadd argument completion",
          "3011: func Test_cmdline_complete_breakadd()",
          "3012:   call feedkeys(\":breakadd \\<C-A>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3013:   call assert_equal(\"\\\"breakadd expr file func here\", @:)",
          "3014:   call feedkeys(\":breakadd \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3015:   call assert_equal(\"\\\"breakadd expr\", @:)",
          "3016:   call feedkeys(\":breakadd    \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3017:   call assert_equal(\"\\\"breakadd    expr\", @:)",
          "3018:   call feedkeys(\":breakadd he\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3019:   call assert_equal(\"\\\"breakadd here\", @:)",
          "3020:   call feedkeys(\":breakadd    he\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3021:   call assert_equal(\"\\\"breakadd    here\", @:)",
          "3022:   call feedkeys(\":breakadd abc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3023:   call assert_equal(\"\\\"breakadd abc\", @:)",
          "3024:   call assert_equal(['expr', 'file', 'func', 'here'], getcompletion('', 'breakpoint'))",
          "3025:   let l = getcompletion('not', 'breakpoint')",
          "3026:   call assert_equal([], l)",
          "3028:   \" Test for :breakadd file [lnum] <file>",
          "3029:   call writefile([], 'Xscript')",
          "3030:   call feedkeys(\":breakadd file Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3031:   call assert_equal(\"\\\"breakadd file Xscript\", @:)",
          "3032:   call feedkeys(\":breakadd   file   Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3033:   call assert_equal(\"\\\"breakadd   file   Xscript\", @:)",
          "3034:   call feedkeys(\":breakadd file 20 Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3035:   call assert_equal(\"\\\"breakadd file 20 Xscript\", @:)",
          "3036:   call feedkeys(\":breakadd   file   20   Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3037:   call assert_equal(\"\\\"breakadd   file   20   Xscript\", @:)",
          "3038:   call feedkeys(\":breakadd file 20x Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3039:   call assert_equal(\"\\\"breakadd file 20x Xsc\\t\", @:)",
          "3040:   call feedkeys(\":breakadd file 20\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3041:   call assert_equal(\"\\\"breakadd file 20\\t\", @:)",
          "3042:   call feedkeys(\":breakadd file 20x\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3043:   call assert_equal(\"\\\"breakadd file 20x\\t\", @:)",
          "3044:   call feedkeys(\":breakadd file Xscript  \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3045:   call assert_equal(\"\\\"breakadd file Xscript  \", @:)",
          "3046:   call feedkeys(\":breakadd file X1B2C3\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3047:   call assert_equal(\"\\\"breakadd file X1B2C3\", @:)",
          "3048:   call delete('Xscript')",
          "3050:   \" Test for :breakadd func [lnum] <function>",
          "3051:   func Xbreak_func()",
          "3052:   endfunc",
          "3053:   call feedkeys(\":breakadd func Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3054:   call assert_equal(\"\\\"breakadd func Xbreak_func\", @:)",
          "3055:   call feedkeys(\":breakadd    func    Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3056:   call assert_equal(\"\\\"breakadd    func    Xbreak_func\", @:)",
          "3057:   call feedkeys(\":breakadd func 20 Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3058:   call assert_equal(\"\\\"breakadd func 20 Xbreak_func\", @:)",
          "3059:   call feedkeys(\":breakadd   func   20   Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3060:   call assert_equal(\"\\\"breakadd   func   20   Xbreak_func\", @:)",
          "3061:   call feedkeys(\":breakadd func 20x Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3062:   call assert_equal(\"\\\"breakadd func 20x Xbr\\t\", @:)",
          "3063:   call feedkeys(\":breakadd func 20\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3064:   call assert_equal(\"\\\"breakadd func 20\\t\", @:)",
          "3065:   call feedkeys(\":breakadd func 20x\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3066:   call assert_equal(\"\\\"breakadd func 20x\\t\", @:)",
          "3067:   call feedkeys(\":breakadd func Xbreak_func  \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3068:   call assert_equal(\"\\\"breakadd func Xbreak_func  \", @:)",
          "3069:   call feedkeys(\":breakadd func X1B2C3\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3070:   call assert_equal(\"\\\"breakadd func X1B2C3\", @:)",
          "3071:   delfunc Xbreak_func",
          "3073:   \" Test for :breakadd expr <expression>",
          "3074:   let g:Xtest_var = 10",
          "3075:   call feedkeys(\":breakadd expr Xtest\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3076:   call assert_equal(\"\\\"breakadd expr Xtest_var\", @:)",
          "3077:   call feedkeys(\":breakadd    expr    Xtest\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3078:   call assert_equal(\"\\\"breakadd    expr    Xtest_var\", @:)",
          "3079:   call feedkeys(\":breakadd expr Xtest_var  \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3080:   call assert_equal(\"\\\"breakadd expr Xtest_var  \", @:)",
          "3081:   call feedkeys(\":breakadd expr X1B2C3\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3082:   call assert_equal(\"\\\"breakadd expr X1B2C3\", @:)",
          "3083:   unlet g:Xtest_var",
          "3085:   \" Test for :breakadd here",
          "3086:   call feedkeys(\":breakadd here Xtest\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3087:   call assert_equal(\"\\\"breakadd here Xtest\", @:)",
          "3088:   call feedkeys(\":breakadd   here   Xtest\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3089:   call assert_equal(\"\\\"breakadd   here   Xtest\", @:)",
          "3090:   call feedkeys(\":breakadd here \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3091:   call assert_equal(\"\\\"breakadd here \", @:)",
          "3092: endfunc",
          "3094: \" Test for :breakdel argument completion",
          "3095: func Test_cmdline_complete_breakdel()",
          "3096:   call feedkeys(\":breakdel \\<C-A>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3097:   call assert_equal(\"\\\"breakdel file func here\", @:)",
          "3098:   call feedkeys(\":breakdel \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3099:   call assert_equal(\"\\\"breakdel file\", @:)",
          "3100:   call feedkeys(\":breakdel    \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3101:   call assert_equal(\"\\\"breakdel    file\", @:)",
          "3102:   call feedkeys(\":breakdel he\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3103:   call assert_equal(\"\\\"breakdel here\", @:)",
          "3104:   call feedkeys(\":breakdel    he\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3105:   call assert_equal(\"\\\"breakdel    here\", @:)",
          "3106:   call feedkeys(\":breakdel abc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3107:   call assert_equal(\"\\\"breakdel abc\", @:)",
          "3109:   \" Test for :breakdel file [lnum] <file>",
          "3110:   call writefile([], 'Xscript')",
          "3111:   call feedkeys(\":breakdel file Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3112:   call assert_equal(\"\\\"breakdel file Xscript\", @:)",
          "3113:   call feedkeys(\":breakdel   file   Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3114:   call assert_equal(\"\\\"breakdel   file   Xscript\", @:)",
          "3115:   call feedkeys(\":breakdel file 20 Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3116:   call assert_equal(\"\\\"breakdel file 20 Xscript\", @:)",
          "3117:   call feedkeys(\":breakdel   file   20   Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3118:   call assert_equal(\"\\\"breakdel   file   20   Xscript\", @:)",
          "3119:   call feedkeys(\":breakdel file 20x Xsc\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3120:   call assert_equal(\"\\\"breakdel file 20x Xsc\\t\", @:)",
          "3121:   call feedkeys(\":breakdel file 20\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3122:   call assert_equal(\"\\\"breakdel file 20\\t\", @:)",
          "3123:   call feedkeys(\":breakdel file 20x\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3124:   call assert_equal(\"\\\"breakdel file 20x\\t\", @:)",
          "3125:   call feedkeys(\":breakdel file Xscript  \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3126:   call assert_equal(\"\\\"breakdel file Xscript  \", @:)",
          "3127:   call feedkeys(\":breakdel file X1B2C3\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3128:   call assert_equal(\"\\\"breakdel file X1B2C3\", @:)",
          "3129:   call delete('Xscript')",
          "3131:   \" Test for :breakdel func [lnum] <function>",
          "3132:   func Xbreak_func()",
          "3133:   endfunc",
          "3134:   call feedkeys(\":breakdel func Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3135:   call assert_equal(\"\\\"breakdel func Xbreak_func\", @:)",
          "3136:   call feedkeys(\":breakdel   func   Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3137:   call assert_equal(\"\\\"breakdel   func   Xbreak_func\", @:)",
          "3138:   call feedkeys(\":breakdel func 20 Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3139:   call assert_equal(\"\\\"breakdel func 20 Xbreak_func\", @:)",
          "3140:   call feedkeys(\":breakdel   func   20   Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3141:   call assert_equal(\"\\\"breakdel   func   20   Xbreak_func\", @:)",
          "3142:   call feedkeys(\":breakdel func 20x Xbr\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3143:   call assert_equal(\"\\\"breakdel func 20x Xbr\\t\", @:)",
          "3144:   call feedkeys(\":breakdel func 20\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3145:   call assert_equal(\"\\\"breakdel func 20\\t\", @:)",
          "3146:   call feedkeys(\":breakdel func 20x\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3147:   call assert_equal(\"\\\"breakdel func 20x\\t\", @:)",
          "3148:   call feedkeys(\":breakdel func Xbreak_func  \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3149:   call assert_equal(\"\\\"breakdel func Xbreak_func  \", @:)",
          "3150:   call feedkeys(\":breakdel func X1B2C3\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3151:   call assert_equal(\"\\\"breakdel func X1B2C3\", @:)",
          "3152:   delfunc Xbreak_func",
          "3154:   \" Test for :breakdel here",
          "3155:   call feedkeys(\":breakdel here Xtest\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3156:   call assert_equal(\"\\\"breakdel here Xtest\", @:)",
          "3157:   call feedkeys(\":breakdel   here   Xtest\\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3158:   call assert_equal(\"\\\"breakdel   here   Xtest\", @:)",
          "3159:   call feedkeys(\":breakdel here \\<Tab>\\<C-B>\\\"\\<CR>\", 'tx')",
          "3160:   call assert_equal(\"\\\"breakdel here \", @:)",
          "3162: endfunc",
          "",
          "---------------"
        ],
        "src/testdir/test_writefile.vim||src/testdir/test_writefile.vim": [
          "File: src/testdir/test_writefile.vim -> src/testdir/test_writefile.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "890: \" link to the original file. The backup file should not be modified.",
          "891: func Test_write_backup_symlink()",
          "892:   CheckUnix",
          "893:   call writefile(['1111'], 'Xfile')",
          "894:   silent !ln -s Xfile Xfile.bak",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:   call mkdir('Xbackup')",
          "894:   let save_backupdir = &backupdir",
          "895:   set backupdir=.,./Xbackup",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "898:   write",
          "899:   call assert_equal('link', getftype('Xfile.bak'))",
          "900:   call assert_equal('Xfile', resolve('Xfile.bak'))",
          "901:   set backup& backupcopy& backupext&",
          "904:   call delete('Xfile')",
          "905:   call delete('Xfile.bak')",
          "906: endfunc",
          "908: \" Test for ':write ++bin' and ':write ++nobin'",
          "",
          "[Removed Lines]",
          "902:   close",
          "",
          "[Added Lines]",
          "904:   \" backup file should be created in the 'backup' directory",
          "905:   if !has('bsd')",
          "906:     \" This check fails on FreeBSD",
          "907:     call assert_true(filereadable('./Xbackup/Xfile.bak'))",
          "908:   endif",
          "910:   %bw",
          "914:   call delete('Xbackup', 'rf')",
          "915:   let &backupdir = save_backupdir",
          "",
          "---------------"
        ],
        "src/usercmd.c||src/usercmd.c": [
          "File: src/usercmd.c -> src/usercmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     {EXPAND_TAGS_LISTFILES, \"tag_listfiles\"},",
          "91:     {EXPAND_USER, \"user\"},",
          "92:     {EXPAND_USER_VARS, \"var\"},",
          "93:     {0, NULL}",
          "94: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: #if defined(FEAT_EVAL)",
          "94:     {EXPAND_BREAKPOINT, \"breakpoint\"},",
          "95: #endif",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4564,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4565,",
          "",
          "---------------"
        ],
        "src/vim.h||src/vim.h": [
          "File: src/vim.h -> src/vim.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "801: #define EXPAND_ARGLIST  48",
          "802: #define EXPAND_DIFF_BUFFERS 49",
          "803: #define EXPAND_DISASSEMBLE 50",
          "806: #define EXMODE_NORMAL  1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804: #define EXPAND_BREAKPOINT 51",
          "",
          "---------------"
        ]
      }
    }
  ]
}