{
  "cve_id": "CVE-2015-1791",
  "cve_desc": "Race condition in the ssl3_get_new_session_ticket function in ssl/s3_clnt.c in OpenSSL before 0.9.8zg, 1.0.0 before 1.0.0s, 1.0.1 before 1.0.1n, and 1.0.2 before 1.0.2b, when used for a multi-threaded client, allows remote attackers to cause a denial of service (double free and application crash) or possibly have unspecified other impact by providing a NewSessionTicket during an attempt to reuse a ticket that had been obtained earlier.",
  "repo": "openssl/openssl",
  "patch_hash": "98ece4eebfb6cd45cc8d550c6ac0022965071afc",
  "patch_info": {
    "commit_hash": "98ece4eebfb6cd45cc8d550c6ac0022965071afc",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/98ece4eebfb6cd45cc8d550c6ac0022965071afc",
    "files": [
      "include/openssl/ssl.h",
      "ssl/s3_clnt.c",
      "ssl/ssl_err.c",
      "ssl/ssl_locl.h",
      "ssl/ssl_sess.c"
    ],
    "message": "Fix race condition in NewSessionTicket\n\nIf a NewSessionTicket is received by a multi-threaded client when\nattempting to reuse a previous ticket then a race condition can occur\npotentially leading to a double free of the ticket data.\n\nCVE-2015-1791\n\nThis also fixes RT#3808 where a session ID is changed for a session already\nin the client session cache. Since the session ID is the key to the cache\nthis breaks the cache access.\n\nParts of this patch were inspired by this Akamai change:\nhttps://github.com/akamai/openssl/commit/c0bf69a791239ceec64509f9f19fcafb2461b0d3\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl.h||include/openssl/ssl.h",
      "ssl/s3_clnt.c||ssl/s3_clnt.c",
      "ssl/ssl_err.c||ssl/ssl_err.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/ssl_sess.c||ssl/ssl_sess.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl.h||include/openssl/ssl.h": [
      "File: include/openssl/ssl.h -> include/openssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2048: # define SSL_F_SSL_READ                                   223",
      "2049: # define SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT                320",
      "2050: # define SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT                321",
      "2051: # define SSL_F_SSL_SESSION_NEW                            189",
      "2052: # define SSL_F_SSL_SESSION_PRINT_FP                       190",
      "2053: # define SSL_F_SSL_SESSION_SET1_ID_CONTEXT                312",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2051: # define SSL_F_SSL_SESSION_DUP                            348",
      "",
      "---------------"
    ],
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2238:     }",
      "2240:     p = d = (unsigned char *)s->init_msg;",
      "2241:     n2l(p, s->session->tlsext_tick_lifetime_hint);",
      "2242:     n2s(p, ticklen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2242:     if (s->session->session_id_length > 0) {",
      "2243:         int i = s->session_ctx->session_cache_mode;",
      "2244:         SSL_SESSION *new_sess;",
      "2249:         if (i & SSL_SESS_CACHE_CLIENT) {",
      "2253:             if (i & SSL_SESS_CACHE_NO_INTERNAL_STORE) {",
      "2254:                 if (s->session_ctx->remove_session_cb != NULL)",
      "2255:                     s->session_ctx->remove_session_cb(s->session_ctx,",
      "2256:                                                       s->session);",
      "2257:             } else {",
      "2259:                 SSL_CTX_remove_session(s->session_ctx, s->session);",
      "2260:             }",
      "2261:         }",
      "2263:         if ((new_sess = ssl_session_dup(s->session, 0)) == 0) {",
      "2264:             al = SSL_AD_INTERNAL_ERROR;",
      "2265:             SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
      "2266:             goto f_err;",
      "2267:         }",
      "2269:         SSL_SESSION_free(s->session);",
      "2270:         s->session = new_sess;",
      "2271:     }",
      "",
      "---------------"
    ],
    "ssl/ssl_err.c||ssl/ssl_err.c": [
      "File: ssl/ssl_err.c -> ssl/ssl_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "274:      \"SSL_SCAN_CLIENTHELLO_TLSEXT\"},",
      "275:     {ERR_FUNC(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT),",
      "276:      \"SSL_SCAN_SERVERHELLO_TLSEXT\"},",
      "277:     {ERR_FUNC(SSL_F_SSL_SESSION_NEW), \"SSL_SESSION_new\"},",
      "278:     {ERR_FUNC(SSL_F_SSL_SESSION_PRINT_FP), \"SSL_SESSION_print_fp\"},",
      "279:     {ERR_FUNC(SSL_F_SSL_SESSION_SET1_ID_CONTEXT),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "277:     {ERR_FUNC(SSL_F_SSL_SESSION_DUP), \"ssl_session_dup\"},",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1860: __owur int ssl_get_new_session(SSL *s, int session);",
      "1861: __owur int ssl_get_prev_session(SSL *s, unsigned char *session, int len,",
      "1862:                          const unsigned char *limit);",
      "1863: __owur int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);",
      "1864: DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN(SSL_CIPHER, SSL_CIPHER, ssl_cipher_id);",
      "1865: __owur int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1863: __owur SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket);",
      "",
      "---------------"
    ],
    "ssl/ssl_sess.c||ssl/ssl_sess.c": [
      "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:     return (ss);",
      "226: }",
      "228: const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,",
      "229:                                         unsigned int *len)",
      "230: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232: SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket)",
      "233: {",
      "234:     SSL_SESSION *dest;",
      "236:     dest = OPENSSL_malloc(sizeof(*src));",
      "237:     if (dest == NULL) {",
      "238:         goto err;",
      "239:     }",
      "240:     memcpy(dest, src, sizeof(*dest));",
      "242: #ifndef OPENSSL_NO_PSK",
      "243:     if (src->psk_identity_hint) {",
      "244:         dest->psk_identity_hint = BUF_strdup(src->psk_identity_hint);",
      "245:         if (dest->psk_identity_hint == NULL) {",
      "246:             goto err;",
      "247:         }",
      "248:     } else {",
      "249:         dest->psk_identity_hint = NULL;",
      "250:     }",
      "251:     if (src->psk_identity) {",
      "252:         dest->psk_identity = BUF_strdup(src->psk_identity);",
      "253:         if (dest->psk_identity == NULL) {",
      "254:             goto err;",
      "255:         }",
      "256:     } else {",
      "257:         dest->psk_identity = NULL;",
      "258:     }",
      "259: #endif",
      "261:     if (src->sess_cert != NULL)",
      "262:         CRYPTO_add(&src->sess_cert->references, 1, CRYPTO_LOCK_SSL_SESS_CERT);",
      "264:     if (src->peer != NULL)",
      "265:         CRYPTO_add(&src->peer->references, 1, CRYPTO_LOCK_X509);",
      "267:     dest->references = 1;",
      "269:     if(src->ciphers != NULL) {",
      "270:         dest->ciphers = sk_SSL_CIPHER_dup(src->ciphers);",
      "271:         if (dest->ciphers == NULL)",
      "272:             goto err;",
      "273:     } else {",
      "274:         dest->ciphers = NULL;",
      "275:     }",
      "277:     if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_SSL_SESSION,",
      "278:                                             &dest->ex_data, &src->ex_data)) {",
      "279:         goto err;",
      "280:     }",
      "283:     dest->prev = NULL;",
      "284:     dest->next = NULL;",
      "286: #ifndef OPENSSL_NO_TLSEXT",
      "287:     if (src->tlsext_hostname) {",
      "288:         dest->tlsext_hostname = BUF_strdup(src->tlsext_hostname);",
      "289:         if (dest->tlsext_hostname == NULL) {",
      "290:             goto err;",
      "291:         }",
      "292:     } else {",
      "293:         dest->tlsext_hostname = NULL;",
      "294:     }",
      "295: # ifndef OPENSSL_NO_EC",
      "296:     if (src->tlsext_ecpointformatlist) {",
      "297:         dest->tlsext_ecpointformatlist =",
      "298:             BUF_memdup(src->tlsext_ecpointformatlist,",
      "299:                        src->tlsext_ecpointformatlist_length);",
      "300:         if (dest->tlsext_ecpointformatlist == NULL)",
      "301:             goto err;",
      "302:         dest->tlsext_ecpointformatlist_length =",
      "303:             src->tlsext_ecpointformatlist_length;",
      "304:     }",
      "305:     if (src->tlsext_ellipticcurvelist) {",
      "306:         dest->tlsext_ellipticcurvelist =",
      "307:             BUF_memdup(src->tlsext_ellipticcurvelist,",
      "308:                        src->tlsext_ellipticcurvelist_length);",
      "309:         if (dest->tlsext_ellipticcurvelist == NULL)",
      "310:             goto err;",
      "311:         dest->tlsext_ellipticcurvelist_length =",
      "312:             src->tlsext_ellipticcurvelist_length;",
      "313:     }",
      "314: # endif",
      "315: #endif",
      "317:     if (ticket != 0) {",
      "318:         dest->tlsext_tick_lifetime_hint = src->tlsext_tick_lifetime_hint;",
      "319:         dest->tlsext_ticklen = src->tlsext_ticklen;",
      "320:         if((dest->tlsext_tick = OPENSSL_malloc(src->tlsext_ticklen)) == NULL) {",
      "321:             goto err;",
      "322:         }",
      "323:     }",
      "325: #ifndef OPENSSL_NO_SRP",
      "326:     dest->srp_username = NULL;",
      "327:     if (src->srp_username) {",
      "328:         dest->srp_username = BUF_strdup(src->srp_username);",
      "329:         if (dest->srp_username == NULL) {",
      "330:             goto err;",
      "331:         }",
      "332:     } else {",
      "333:         dest->srp_username = NULL;",
      "334:     }",
      "335: #endif",
      "337:     return dest;",
      "338: err:",
      "339:     SSLerr(SSL_F_SSL_SESSION_DUP, ERR_R_MALLOC_FAILURE);",
      "340:     SSL_SESSION_free(dest);",
      "341:     return NULL;",
      "342: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "467daf6b6ef0753ccfc5c024c2f63c948354d698",
      "candidate_info": {
        "commit_hash": "467daf6b6ef0753ccfc5c024c2f63c948354d698",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/467daf6b6ef0753ccfc5c024c2f63c948354d698",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/ssl_sess.c"
        ],
        "message": "Fix race condition in NewSessionTicket\n\nIf a NewSessionTicket is received by a multi-threaded client when\nattempting to reuse a previous ticket then a race condition can occur\npotentially leading to a double free of the ticket data.\n\nCVE-2015-1791\n\nThis also fixes RT#3808 where a session ID is changed for a session already\nin the client session cache. Since the session ID is the key to the cache\nthis breaks the cache access.\n\nParts of this patch were inspired by this Akamai change:\nhttps://github.com/akamai/openssl/commit/c0bf69a791239ceec64509f9f19fcafb2461b0d3\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 27c76b9b8010b536687318739c6f631ce4194688)\n\nConflicts:\n\tssl/ssl.h\n\tssl/ssl_err.c",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssl_sess.c||ssl/ssl_sess.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/ssl_sess.c||ssl/ssl_sess.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/ssl_err.c||ssl/ssl_err.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/ssl_sess.c||ssl/ssl_sess.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1722:     }",
          "1724:     p = d = (unsigned char *)s->init_msg;",
          "1725:     n2l(p, s->session->tlsext_tick_lifetime_hint);",
          "1726:     n2s(p, ticklen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1726:     if (s->session->session_id_length > 0) {",
          "1727:         int i = s->session_ctx->session_cache_mode;",
          "1728:         SSL_SESSION *new_sess;",
          "1733:         if (i & SSL_SESS_CACHE_CLIENT) {",
          "1737:             if (i & SSL_SESS_CACHE_NO_INTERNAL_STORE) {",
          "1738:                 if (s->session_ctx->remove_session_cb != NULL)",
          "1739:                     s->session_ctx->remove_session_cb(s->session_ctx,",
          "1740:                                                       s->session);",
          "1741:             } else {",
          "1743:                 SSL_CTX_remove_session(s->session_ctx, s->session);",
          "1744:             }",
          "1745:         }",
          "1747:         if ((new_sess = ssl_session_dup(s->session, 0)) == 0) {",
          "1748:             al = SSL_AD_INTERNAL_ERROR;",
          "1749:             SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "1750:             goto f_err;",
          "1751:         }",
          "1753:         SSL_SESSION_free(s->session);",
          "1754:         s->session = new_sess;",
          "1755:     }",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1945: # define SSL_F_SSL_READ                                   223",
          "1946: # define SSL_F_SSL_RSA_PRIVATE_DECRYPT                    187",
          "1947: # define SSL_F_SSL_RSA_PUBLIC_ENCRYPT                     188",
          "1948: # define SSL_F_SSL_SESSION_NEW                            189",
          "1949: # define SSL_F_SSL_SESSION_PRINT_FP                       190",
          "1950: # define SSL_F_SSL_SESS_CERT_NEW                          225",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1948: # define SSL_F_SSL_SESSION_DUP                            348",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     {ERR_FUNC(SSL_F_SSL_READ), \"SSL_read\"},",
          "280:     {ERR_FUNC(SSL_F_SSL_RSA_PRIVATE_DECRYPT), \"SSL_RSA_PRIVATE_DECRYPT\"},",
          "281:     {ERR_FUNC(SSL_F_SSL_RSA_PUBLIC_ENCRYPT), \"SSL_RSA_PUBLIC_ENCRYPT\"},",
          "282:     {ERR_FUNC(SSL_F_SSL_SESSION_NEW), \"SSL_SESSION_new\"},",
          "283:     {ERR_FUNC(SSL_F_SSL_SESSION_PRINT_FP), \"SSL_SESSION_print_fp\"},",
          "284:     {ERR_FUNC(SSL_F_SSL_SESS_CERT_NEW), \"SSL_SESS_CERT_NEW\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     {ERR_FUNC(SSL_F_SSL_SESSION_DUP), \"ssl_session_dup\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "760: int ssl_get_new_session(SSL *s, int session);",
          "761: int ssl_get_prev_session(SSL *s, unsigned char *session, int len,",
          "762:                          const unsigned char *limit);",
          "763: int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);",
          "764: int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,",
          "765:                           const SSL_CIPHER *const *bp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763: SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket);",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     return (ss);",
          "136: }",
          "138: const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,",
          "139:                                         unsigned int *len)",
          "140: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket)",
          "143: {",
          "144:     SSL_SESSION *dest;",
          "146:     dest = OPENSSL_malloc(sizeof(*src));",
          "147:     if (dest == NULL) {",
          "148:         goto err;",
          "149:     }",
          "150:     memcpy(dest, src, sizeof(*dest));",
          "152: #ifndef OPENSSL_NO_KRB5",
          "153:     dest->krb5_client_princ_len = dest->krb5_client_princ_len;",
          "154:     if (src->krb5_client_princ_len > 0)",
          "155:         memcpy(dest->krb5_client_princ, src->krb5_client_princ,",
          "156:                src->krb5_client_princ_len);",
          "157: #endif",
          "159:     if (src->sess_cert != NULL)",
          "160:         CRYPTO_add(&src->sess_cert->references, 1, CRYPTO_LOCK_SSL_SESS_CERT);",
          "162:     if (src->peer != NULL)",
          "163:         CRYPTO_add(&src->peer->references, 1, CRYPTO_LOCK_X509);",
          "165:     dest->references = 1;",
          "167:     if(src->ciphers != NULL) {",
          "168:         dest->ciphers = sk_SSL_CIPHER_dup(src->ciphers);",
          "169:         if (dest->ciphers == NULL)",
          "170:             goto err;",
          "171:     } else {",
          "172:         dest->ciphers = NULL;",
          "173:     }",
          "175:     if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_SSL_SESSION,",
          "176:                                             &dest->ex_data, &src->ex_data)) {",
          "177:         goto err;",
          "178:     }",
          "181:     dest->prev = NULL;",
          "182:     dest->next = NULL;",
          "184: #ifndef OPENSSL_NO_TLSEXT",
          "185:     if (src->tlsext_hostname) {",
          "186:         dest->tlsext_hostname = BUF_strdup(src->tlsext_hostname);",
          "187:         if (dest->tlsext_hostname == NULL) {",
          "188:             goto err;",
          "189:         }",
          "190:     } else {",
          "191:         dest->tlsext_hostname = NULL;",
          "192:     }",
          "193: #endif",
          "195:     if (ticket != 0) {",
          "196:         dest->tlsext_tick_lifetime_hint = src->tlsext_tick_lifetime_hint;",
          "197:         dest->tlsext_ticklen = src->tlsext_ticklen;",
          "198:         if((dest->tlsext_tick = OPENSSL_malloc(src->tlsext_ticklen)) == NULL) {",
          "199:             goto err;",
          "200:         }",
          "201:     }",
          "203:     return dest;",
          "204: err:",
          "205:     SSLerr(SSL_F_SSL_SESSION_DUP, ERR_R_MALLOC_FAILURE);",
          "206:     SSL_SESSION_free(dest);",
          "207:     return NULL;",
          "208: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}