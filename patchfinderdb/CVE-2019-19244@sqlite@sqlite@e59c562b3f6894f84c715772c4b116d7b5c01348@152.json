{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "76f8318e315e24ebd22e25e6222bb9df8bc2e401",
      "candidate_info": {
        "commit_hash": "76f8318e315e24ebd22e25e6222bb9df8bc2e401",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76f8318e315e24ebd22e25e6222bb9df8bc2e401",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the \"fastfuzztest\" makefile target.  Use only \"fuzztest\".\n\nFossilOrigin-Name: e17571c789db31123642d0ed1f3d8764e070019e0deb8b88cce58d2183551cdf",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1263: # This is the common case.  Run many tests that do not take too long,",
          "1264: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "1265: #",
          "1268: # Run a test using valgrind.  This can take a really long time",
          "1269: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "1266: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "1262: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2416: # This is the common case.  Run many tests that do not take too long,",
          "2417: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "2418: #",
          "2420:  @set PATH=$(LIBTCLPATH);$(PATH)",
          "2421:  .\\testfixture.exe $(TOP)\\test\\veryquick.test $(TESTOPTS)",
          "",
          "[Removed Lines]",
          "2419: test: $(TESTPROGS) sourcetest fastfuzztest",
          "",
          "[Added Lines]",
          "2416: test: $(TESTPROGS) sourcetest fuzztest",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "956: # The default test case.  Runs most of the faster standard TCL tests,",
          "957: # and fuzz tests, and sqlite3_analyzer and sqldiff tests.",
          "960: # Run a test using valgrind.  This can take a really long time",
          "961: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "958: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "954: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b68d21e93a0839b42f49845918df7738ee7fa2a05c7f4ae2f89fdbb5e47ad8eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
      "candidate_info": {
        "commit_hash": "2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the delta_parse(DELTA) table-valued function to the fossildelta extension.\n\nFossilOrigin-Name: d91fcc267bf1be795dfdb1fbfb40c2aea79ddff247a51d26462136c325b7a6d3",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   static const signed char zValue[] = {",
          "139:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "140:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "",
          "[Removed Lines]",
          "137: static unsigned int getInt(const char **pz, int *pLen){",
          "",
          "[Added Lines]",
          "137: static unsigned int deltaGetInt(const char **pz, int *pLen){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485: static int delta_output_size(const char *zDelta, int lenDelta){",
          "486:   int size;",
          "488:   if( *zDelta!='\\n' ){",
          "490:     return -1;",
          "",
          "[Removed Lines]",
          "487:   size = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "487:   size = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526:   char *zOrigOut = zOut;",
          "527: #endif",
          "530:   if( *zDelta!='\\n' ){",
          "532:     return -1;",
          "",
          "[Removed Lines]",
          "529:   limit = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "529:   limit = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "534:   zDelta++; lenDelta--;",
          "535:   while( *zDelta && lenDelta>0 ){",
          "536:     unsigned int cnt, ofst;",
          "538:     switch( zDelta[0] ){",
          "539:       case '@': {",
          "540:         zDelta++; lenDelta--;",
          "542:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "544:           return -1;",
          "",
          "[Removed Lines]",
          "537:     cnt = getInt(&zDelta, &lenDelta);",
          "541:         ofst = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "537:     cnt = deltaGetInt(&zDelta, &lenDelta);",
          "541:         ofst = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "599:   return -1;",
          "600: }",
          "",
          "[Removed Lines]",
          "607: static int delta_analyze(",
          "612: ){",
          "613:   unsigned int nInsert = 0;",
          "614:   unsigned int nCopy = 0;",
          "616:   (void)getInt(&zDelta, &lenDelta);",
          "617:   if( *zDelta!='\\n' ){",
          "619:     return -1;",
          "620:   }",
          "621:   zDelta++; lenDelta--;",
          "622:   while( *zDelta && lenDelta>0 ){",
          "623:     unsigned int cnt;",
          "624:     cnt = getInt(&zDelta, &lenDelta);",
          "625:     switch( zDelta[0] ){",
          "626:       case '@': {",
          "627:         zDelta++; lenDelta--;",
          "628:         (void)getInt(&zDelta, &lenDelta);",
          "629:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "631:           return -1;",
          "632:         }",
          "633:         zDelta++; lenDelta--;",
          "634:         nCopy += cnt;",
          "635:         break;",
          "636:       }",
          "637:       case ':': {",
          "638:         zDelta++; lenDelta--;",
          "639:         nInsert += cnt;",
          "640:         if( cnt>lenDelta ){",
          "642:           return -1;",
          "643:         }",
          "644:         zDelta += cnt;",
          "645:         lenDelta -= cnt;",
          "646:         break;",
          "647:       }",
          "648:       case ';': {",
          "651:         return 0;",
          "652:       }",
          "653:       default: {",
          "655:         return -1;",
          "656:       }",
          "657:     }",
          "658:   }",
          "660:   return -1;",
          "661: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "765:   }",
          "766: }",
          "769: #ifdef _WIN32",
          "770: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710: typedef struct deltaparsevtab_vtab deltaparsevtab_vtab;",
          "711: typedef struct deltaparsevtab_cursor deltaparsevtab_cursor;",
          "712: struct deltaparsevtab_vtab {",
          "715: };",
          "716: struct deltaparsevtab_cursor {",
          "724: };",
          "728: static const char *azOp[] = {",
          "729:   \"SIZE\", \"COPY\", \"INSERT\", \"CHECKSUM\", \"ERROR\", \"EOF\"",
          "730: };",
          "731: #define DELTAPARSE_OP_SIZE         0",
          "732: #define DELTAPARSE_OP_COPY         1",
          "733: #define DELTAPARSE_OP_INSERT       2",
          "734: #define DELTAPARSE_OP_CHECKSUM     3",
          "735: #define DELTAPARSE_OP_ERROR        4",
          "736: #define DELTAPARSE_OP_EOF          5",
          "751: static int deltaparsevtabConnect(",
          "752:   sqlite3 *db,",
          "753:   void *pAux,",
          "754:   int argc, const char *const*argv,",
          "755:   sqlite3_vtab **ppVtab,",
          "756:   char **pzErr",
          "757: ){",
          "758:   deltaparsevtab_vtab *pNew;",
          "759:   int rc;",
          "761:   rc = sqlite3_declare_vtab(db,",
          "762:            \"CREATE TABLE x(op,a1,a2,delta HIDDEN)\"",
          "763:        );",
          "765: #define DELTAPARSEVTAB_OP     0",
          "766: #define DELTAPARSEVTAB_A1     1",
          "767: #define DELTAPARSEVTAB_A2     2",
          "768: #define DELTAPARSEVTAB_DELTA  3",
          "769:   if( rc==SQLITE_OK ){",
          "770:     pNew = sqlite3_malloc64( sizeof(*pNew) );",
          "772:     if( pNew==0 ) return SQLITE_NOMEM;",
          "773:     memset(pNew, 0, sizeof(*pNew));",
          "774:   }",
          "775:   return rc;",
          "776: }",
          "781: static int deltaparsevtabDisconnect(sqlite3_vtab *pVtab){",
          "782:   deltaparsevtab_vtab *p = (deltaparsevtab_vtab*)pVtab;",
          "783:   sqlite3_free(p);",
          "784:   return SQLITE_OK;",
          "785: }",
          "790: static int deltaparsevtabOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){",
          "791:   deltaparsevtab_cursor *pCur;",
          "792:   pCur = sqlite3_malloc( sizeof(*pCur) );",
          "793:   if( pCur==0 ) return SQLITE_NOMEM;",
          "794:   memset(pCur, 0, sizeof(*pCur));",
          "796:   return SQLITE_OK;",
          "797: }",
          "802: static int deltaparsevtabClose(sqlite3_vtab_cursor *cur){",
          "803:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "804:   sqlite3_free(pCur);",
          "805:   return SQLITE_OK;",
          "806: }",
          "812: static int deltaparsevtabNext(sqlite3_vtab_cursor *cur){",
          "813:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "814:   const char *z;",
          "815:   int i = 0;",
          "817:   pCur->iCursor = pCur->iNext;",
          "818:   z = pCur->aDelta + pCur->iCursor;",
          "819:   pCur->a1 = deltaGetInt(&z, &i);",
          "820:   switch( z[0] ){",
          "821:     case '@': {",
          "822:       z++;",
          "823:       pCur->a2 = deltaGetInt(&z, &i);",
          "824:       pCur->eOp = DELTAPARSE_OP_COPY;",
          "825:       pCur->iNext = (int)(&z[1] - pCur->aDelta);",
          "826:       break;",
          "827:     }",
          "828:     case ':': {",
          "829:       z++;",
          "830:       pCur->a2 = (unsigned int)(z - pCur->aDelta);",
          "831:       pCur->eOp = DELTAPARSE_OP_INSERT;",
          "832:       pCur->iNext = (int)(&z[pCur->a1] - pCur->aDelta);",
          "833:       break;",
          "834:     }",
          "835:     case ';': {",
          "836:       pCur->eOp = DELTAPARSE_OP_CHECKSUM;",
          "837:       pCur->iNext = pCur->nDelta;",
          "838:       break;",
          "839:     }",
          "840:     default: {",
          "841:       if( pCur->iNext==pCur->nDelta ){",
          "842:         pCur->eOp = DELTAPARSE_OP_EOF;",
          "843:       }else{",
          "844:         pCur->eOp = DELTAPARSE_OP_ERROR;",
          "845:         pCur->iNext = pCur->nDelta;",
          "846:       }",
          "847:       break;",
          "848:     }",
          "849:   }",
          "850:   return SQLITE_OK;",
          "851: }",
          "857: static int deltaparsevtabColumn(",
          "861: ){",
          "862:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "863:   switch( i ){",
          "864:     case DELTAPARSEVTAB_OP: {",
          "865:       sqlite3_result_text(ctx, azOp[pCur->eOp], -1, SQLITE_STATIC);",
          "866:       break;",
          "867:     }",
          "868:     case DELTAPARSEVTAB_A1: {",
          "869:       sqlite3_result_int(ctx, pCur->a1);",
          "870:       break;",
          "871:     }",
          "872:     case DELTAPARSEVTAB_A2: {",
          "873:       if( pCur->eOp==DELTAPARSE_OP_COPY ){",
          "874:         sqlite3_result_int(ctx, pCur->a2);",
          "875:       }else if( pCur->eOp==DELTAPARSE_OP_INSERT ){",
          "876:         sqlite3_result_blob(ctx, pCur->aDelta+pCur->a2, pCur->a1,",
          "877:                             SQLITE_TRANSIENT);",
          "878:       }",
          "879:       break;",
          "880:     }",
          "881:     case DELTAPARSEVTAB_DELTA: {",
          "882:       sqlite3_result_blob(ctx, pCur->aDelta, pCur->nDelta, SQLITE_TRANSIENT);",
          "883:       break;",
          "884:     }",
          "885:   }",
          "886:   return SQLITE_OK;",
          "887: }",
          "893: static int deltaparsevtabRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){",
          "894:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "896:   return SQLITE_OK;",
          "897: }",
          "903: static int deltaparsevtabEof(sqlite3_vtab_cursor *cur){",
          "904:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "905:   return pCur->eOp==DELTAPARSE_OP_EOF;",
          "906: }",
          "914: static int deltaparsevtabFilter(",
          "915:   sqlite3_vtab_cursor *pVtabCursor,",
          "916:   int idxNum, const char *idxStr,",
          "917:   int argc, sqlite3_value **argv",
          "918: ){",
          "919:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor *)pVtabCursor;",
          "920:   const char *a;",
          "921:   int i = 0;",
          "922:   pCur->eOp = DELTAPARSE_OP_ERROR;",
          "923:   if( idxNum!=1 ){",
          "924:     return SQLITE_OK;",
          "925:   }",
          "926:   pCur->nDelta = sqlite3_value_bytes(argv[0]);",
          "927:   a = (const char*)sqlite3_value_blob(argv[0]);",
          "928:   if( pCur->nDelta==0 || a==0 ){",
          "929:     return SQLITE_OK;",
          "930:   }",
          "931:   pCur->aDelta = sqlite3_malloc64( pCur->nDelta+1 );",
          "932:   if( pCur->aDelta==0 ){",
          "933:     pCur->nDelta = 0;",
          "934:     return SQLITE_NOMEM;",
          "935:   }",
          "936:   memcpy(pCur->aDelta, a, pCur->nDelta);",
          "937:   pCur->aDelta[pCur->nDelta] = 0;",
          "938:   a = pCur->aDelta;",
          "939:   pCur->eOp = DELTAPARSE_OP_SIZE;",
          "940:   pCur->a1 = deltaGetInt(&a, &i);",
          "941:   if( a[0]!='\\n' ){",
          "942:     pCur->eOp = DELTAPARSE_OP_ERROR;",
          "943:     pCur->a1 = pCur->a2 = 0;",
          "944:     pCur->iNext = pCur->nDelta;",
          "945:     return SQLITE_OK;",
          "946:   }",
          "947:   a++;",
          "948:   pCur->iNext = (unsigned int)(a - pCur->aDelta);",
          "949:   return SQLITE_OK;",
          "950: }",
          "958: static int deltaparsevtabBestIndex(",
          "959:   sqlite3_vtab *tab,",
          "960:   sqlite3_index_info *pIdxInfo",
          "961: ){",
          "962:   int i;",
          "963:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "964:     if( pIdxInfo->aConstraint[i].iColumn != DELTAPARSEVTAB_DELTA ) continue;",
          "965:     if( pIdxInfo->aConstraint[i].usable==0 ) continue;",
          "966:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "967:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "968:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "969:     pIdxInfo->estimatedCost = (double)1;",
          "970:     pIdxInfo->estimatedRows = 10;",
          "971:     pIdxInfo->idxNum = 1;",
          "972:     return SQLITE_OK;",
          "973:   }",
          "974:   pIdxInfo->idxNum = 0;",
          "975:   pIdxInfo->estimatedCost = (double)0x7fffffff;",
          "976:   pIdxInfo->estimatedRows = 0x7fffffff;",
          "977:   return SQLITE_OK;",
          "978: }",
          "984: static sqlite3_module deltaparsevtabModule = {",
          "1009: };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "787:     rc = sqlite3_create_function(db, \"delta_output_size\", 1, SQLITE_UTF8, 0,",
          "788:                                  deltaOutputSizeFunc, 0, 0);",
          "789:   }",
          "790:   return rc;",
          "791: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:   if( rc==SQLITE_OK ){",
          "1035:     rc = sqlite3_create_module(db, \"delta_parse\", &deltaparsevtabModule, 0);",
          "1036:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b80cafa6f8a5c6ff1dc9efd2f670777ab131ace2df1eb431cedc8cfa901baf18",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7c44f9bd227bac1d9f8599f1a74bf0e0a5d30b8",
      "candidate_info": {
        "commit_hash": "f7c44f9bd227bac1d9f8599f1a74bf0e0a5d30b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f7c44f9bd227bac1d9f8599f1a74bf0e0a5d30b8",
        "files": [
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the name of the trig function approximation in geopoly.  No functional changes to the code.\n\nFossilOrigin-Name: 33576b12b450a37b467ba012e77b297eb80d7147b12a5b23302009bb32455720",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545: #define GEOPOLY_PI 3.1415926535897932385",
          "550:   assert( r>=-0.5*GEOPOLY_PI && r<=2.0*GEOPOLY_PI );",
          "551:   if( r>=1.5*GEOPOLY_PI ){",
          "552:     r -= 2.0*GEOPOLY_PI;",
          "553:   }",
          "554:   if( r>=0.5*GEOPOLY_PI ){",
          "556:   }else{",
          "557:     double r2 = r*r;",
          "558:     double r3 = r2*r;",
          "",
          "[Removed Lines]",
          "549: static double geopolyCosine(double r){",
          "555:     return -geopolyCosine(r-GEOPOLY_PI);",
          "",
          "[Added Lines]",
          "549: static double geopolySine(double r){",
          "555:     return -geopolySine(r-GEOPOLY_PI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:   p->hdr[3] = n&0xff;",
          "594:   for(i=0; i<n; i++){",
          "595:     double rAngle = 2.0*GEOPOLY_PI*i/n;",
          "598:   }",
          "599:   sqlite3_result_blob(context, p->hdr, 4+8*n, SQLITE_TRANSIENT);",
          "600:   sqlite3_free(p);",
          "",
          "[Removed Lines]",
          "596:     p->a[i*2] = x - r*geopolyCosine(rAngle-0.5*GEOPOLY_PI);",
          "597:     p->a[i*2+1] = y + r*geopolyCosine(rAngle);",
          "",
          "[Added Lines]",
          "596:     p->a[i*2] = x - r*geopolySine(rAngle-0.5*GEOPOLY_PI);",
          "597:     p->a[i*2+1] = y + r*geopolySine(rAngle);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62360ceae9d2321003c49cfac3e9f915969a0da12d02c3e633cfa898c0a68566",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0968b6b140d415e2ebac0583d9b323913d6ad16",
      "candidate_info": {
        "commit_hash": "b0968b6b140d415e2ebac0583d9b323913d6ad16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0968b6b140d415e2ebac0583d9b323913d6ad16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Add an assert() as an additional test for fix in check-in [523b42371122d9e1b3].\n\nFossilOrigin-Name: f9e85e6c79162081f8f512d22951931a89d157a32b24afdc48b7eb865379abe7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 523b42371122d9e1b3185425745f1490138bff7f7cc941ee26ee81df7ade5bf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2542:   assert( (p->selFlags & SF_Recursive)==0 || p->op==TK_ALL || p->op==TK_UNION );",
          "2543:   db = pParse->db;",
          "2544:   pPrior = p->pPrior;",
          "2545:   dest = *pDest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2543:   assert( p->selFlags & SF_Compound );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
      "candidate_info": {
        "commit_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e893759cac17443c63fd0bc0bfce198985da7aa5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "The ALWAYS() added by the previous check-in was incorrect.  Take it back out.\n\nFossilOrigin-Name: 336235db2b1167cdb2feb64b47eb6368c97c43ee9641b7bfccc5775a41dd0d0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aff209804722ac902c7abfde80ad2677e0f51beb2c7f28f65d51105d984a1640",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "805:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------"
        ]
      }
    }
  ]
}