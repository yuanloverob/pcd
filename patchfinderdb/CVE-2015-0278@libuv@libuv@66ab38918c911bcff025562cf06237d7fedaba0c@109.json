{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ec4c234388c0548db149772b2b8fd510a6dd843",
      "candidate_info": {
        "commit_hash": "1ec4c234388c0548db149772b2b8fd510a6dd843",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1ec4c234388c0548db149772b2b8fd510a6dd843",
        "files": [
          "src/win/core.c",
          "src/win/fs.c",
          "src/win/internal.h",
          "src/win/pipe.c",
          "src/win/poll.c",
          "src/win/process-stdio.c",
          "src/win/process.c",
          "src/win/signal.c",
          "src/win/tty.c",
          "src/win/util.c",
          "src/win/winsock.c"
        ],
        "message": "windows: fix warnings of MinGW -Wall -O3",
        "before_after_code_files": [
          "src/win/core.c||src/win/core.c",
          "src/win/fs.c||src/win/fs.c",
          "src/win/internal.h||src/win/internal.h",
          "src/win/pipe.c||src/win/pipe.c",
          "src/win/poll.c||src/win/poll.c",
          "src/win/process-stdio.c||src/win/process-stdio.c",
          "src/win/process.c||src/win/process.c",
          "src/win/signal.c||src/win/signal.c",
          "src/win/tty.c||src/win/tty.c",
          "src/win/util.c||src/win/util.c",
          "src/win/winsock.c||src/win/winsock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: #endif",
          "73: static void uv__crt_invalid_parameter_handler(const wchar_t* expression,",
          "74:     const wchar_t* function, const wchar_t * file, unsigned int line,",
          "75:     uintptr_t reserved) {",
          "77: }",
          "80: static void uv_init(void) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #if !defined(__MINGW32__) || __MSVCRT_VERSION__ >= 0x800",
          "79: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:       return UV_EBUSY;",
          "193:   }",
          "194:   if (loop != &uv_default_loop_) {",
          "196:     for (i = 0; i < ARRAY_SIZE(loop->poll_peer_sockets); i++) {",
          "197:       SOCKET sock = loop->poll_peer_sockets[i];",
          "198:       if (sock != 0 && sock != INVALID_SOCKET)",
          "",
          "[Removed Lines]",
          "195:     int i;",
          "",
          "[Added Lines]",
          "197:     size_t i;",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: #define TIME_T_TO_FILETIME(time, filetime_ptr)                              \\",
          "99:   do {                                                                      \\",
          "101:                                   116444736000000000ULL;                    \\",
          "102:   } while(0)",
          "104: #define IS_SLASH(c) ((c) == L'\\\\' || (c) == L'/')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     uint64_t bigtime = ((int64_t) (time) * 10000000LL) +                    \\",
          "102:     (filetime_ptr)->dwLowDateTime = bigtime & 0xFFFFFFFF;                   \\",
          "103:     (filetime_ptr)->dwHighDateTime = bigtime >> 32;                         \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     const char* path, const char* new_path, const int copy_path) {",
          "122:   char* buf;",
          "123:   char* pos;",
          "127:   assert(new_path == NULL || path != NULL);",
          "",
          "[Removed Lines]",
          "124:   ssize_t buf_sz = 0, path_len, pathw_len, new_pathw_len;",
          "",
          "[Added Lines]",
          "126:   ssize_t buf_sz = 0, path_len, pathw_len = 0, new_pathw_len = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:                                   -1,",
          "182:                                   (WCHAR*) pos,",
          "183:                                   pathw_len);",
          "185:     req->pathw = (WCHAR*) pos;",
          "186:     pos += r * sizeof(WCHAR);",
          "187:   } else {",
          "",
          "[Removed Lines]",
          "184:     assert(r == pathw_len);",
          "",
          "[Added Lines]",
          "186:     assert(r == (DWORD) pathw_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:                                   -1,",
          "196:                                   (WCHAR*) pos,",
          "197:                                   new_pathw_len);",
          "199:     req->new_pathw = (WCHAR*) pos;",
          "200:     pos += r * sizeof(WCHAR);",
          "201:   } else {",
          "",
          "[Removed Lines]",
          "198:     assert(r == new_pathw_len);",
          "",
          "[Added Lines]",
          "200:     assert(r == (DWORD) new_pathw_len);",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "323: void uv__util_init();",
          "325: int uv_parent_pid();",
          "",
          "[Removed Lines]",
          "326: void uv_fatal_error(const int errorno, const char* syscall);",
          "",
          "[Added Lines]",
          "326: __declspec(noreturn) void uv_fatal_error(const int errorno, const char* syscall);",
          "",
          "---------------"
        ],
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1077:   int err;",
          "1078:   int result;",
          "1079:   uv_tcp_t* tcp_send_handle;",
          "1081:   uv_ipc_frame_uv_stream ipc_frame;",
          "1083:   if (nbufs != 1 && (nbufs != 0 || !send_handle)) {",
          "",
          "[Removed Lines]",
          "1080:   uv_write_t* ipc_header_req;",
          "",
          "[Added Lines]",
          "1080:   uv_write_t* ipc_header_req = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1257:       req->queued_bytes = 0;",
          "1258:     } else {",
          "1260:       if (WaitForSingleObject(ipc_header_req->overlapped.hEvent, INFINITE) !=",
          "1261:           WAIT_OBJECT_0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259:       assert(ipc_header_req != NULL);",
          "",
          "---------------"
        ],
        "src/win/poll.c||src/win/poll.c": [
          "File: src/win/poll.c -> src/win/poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     handle->mask_events_2 = 0;",
          "86:   } else {",
          "87:     assert(0);",
          "88:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120: static int uv__fast_poll_cancel_poll_req(uv_loop_t* loop, uv_poll_t* handle) {",
          "121:   AFD_POLL_INFO afd_poll_info;",
          "124:   afd_poll_info.Exclusive = TRUE;",
          "125:   afd_poll_info.NumberOfHandles = 1;",
          "",
          "[Removed Lines]",
          "122:   DWORD result;",
          "",
          "[Added Lines]",
          "123:   int result;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:     mask_events = handle->mask_events_2;",
          "159:   } else {",
          "160:     assert(0);",
          "161:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:   SOCKET peer_socket;",
          "283:   index = -1;",
          "285:     if (memcmp((void*) &protocol_info->ProviderId,",
          "286:                (void*) &uv_msafd_provider_ids[i],",
          "287:                sizeof protocol_info->ProviderId) == 0) {",
          "",
          "[Removed Lines]",
          "284:   for (i = 0; i < ARRAY_SIZE(uv_msafd_provider_ids); i++) {",
          "",
          "[Added Lines]",
          "286:   for (i = 0; (size_t) i < ARRAY_SIZE(uv_msafd_provider_ids); i++) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392:     handle->mask_events_2 = 0;",
          "393:   } else {",
          "394:     assert(0);",
          "395:   }",
          "397:   if (!QueueUserWorkItem(uv__slow_poll_thread_proc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:     return;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "418:     mask_events = handle->mask_events_2;",
          "419:   } else {",
          "420:     assert(0);",
          "421:   }",
          "423:   if (!REQ_SUCCESS(req)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:     return;",
          "",
          "---------------"
        ],
        "src/win/process-stdio.c||src/win/process-stdio.c": [
          "File: src/win/process-stdio.c -> src/win/process-stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:         uv_pipe_t* parent_pipe = (uv_pipe_t*) fdopt.data.stream;",
          "",
          "[Removed Lines]",
          "330:         HANDLE child_pipe;",
          "",
          "[Added Lines]",
          "330:         HANDLE child_pipe = INVALID_HANDLE_VALUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390:           default:",
          "391:             assert(0);",
          "392:         }",
          "394:         CHILD_STDIO_HANDLE(buffer, i) = child_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:             return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:         }",
          "429:           goto error;",
          "432:         CHILD_STDIO_HANDLE(buffer, i) = child_handle;",
          "433:         CHILD_STDIO_CRT_FLAGS(buffer, i) = crt_flags;",
          "",
          "[Removed Lines]",
          "426:         if (uv__duplicate_handle(loop,",
          "427:                              stream_handle,",
          "428:                              &child_handle) < 0) {",
          "430:         }",
          "",
          "[Added Lines]",
          "427:         err = uv__duplicate_handle(loop, stream_handle, &child_handle);",
          "428:         if (err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437:       default:",
          "438:         assert(0);",
          "439:     }",
          "440:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:         return -1;",
          "",
          "---------------"
        ],
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   char** env;",
          "626:   int len;",
          "628:   DWORD var_size;",
          "630:   env_var_t required_vars[] = {",
          "",
          "[Removed Lines]",
          "627:   int i;",
          "",
          "[Added Lines]",
          "627:   size_t i;",
          "",
          "---------------"
        ],
        "src/win/signal.c||src/win/signal.c": [
          "File: src/win/signal.c -> src/win/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   for (handle = RB_NFIND(uv_signal_tree_s, &uv__signal_tree, &lookup);",
          "79:        handle != NULL && handle->signum == signum;",
          "80:        handle = RB_NEXT(uv_signal_tree_s, &uv__signal_tree, handle)) {",
          "83:     if (!previous) {",
          "84:       POST_COMPLETION_FOR_REQ(handle->loop, &handle->signal_req);",
          "",
          "[Removed Lines]",
          "81:     unsigned long previous = InterlockedExchange(&handle->pending_signum, signum);",
          "",
          "[Added Lines]",
          "81:     unsigned long previous = InterlockedExchange(",
          "82:             (volatile LONG*) &handle->pending_signum, signum);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308: void uv_process_signal_req(uv_loop_t* loop, uv_signal_t* handle,",
          "309:     uv_req_t* req) {",
          "312:   assert(handle->type == UV_SIGNAL);",
          "313:   assert(req->type == UV_SIGNAL_REQ);",
          "316:   assert(dispatched_signum != 0);",
          "",
          "[Removed Lines]",
          "310:   unsigned long dispatched_signum;",
          "315:   dispatched_signum = InterlockedExchange(&handle->pending_signum, 0);",
          "",
          "[Added Lines]",
          "311:   long dispatched_signum;",
          "316:   dispatched_signum = InterlockedExchange(",
          "317:           (volatile LONG*) &handle->pending_signum, 0);",
          "",
          "---------------"
        ],
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:         buf.base[buf_used++] = handle->last_key[handle->last_key_offset++];",
          "702:           handle->read_cb((uv_stream_t*) handle, buf_used, &buf);",
          "703:           buf = uv_null_buf_;",
          "704:           buf_used = 0;",
          "",
          "[Removed Lines]",
          "701:         if (buf_used == buf.len) {",
          "",
          "[Added Lines]",
          "701:         if ((size_t) buf_used == buf.len) {",
          "",
          "---------------"
        ],
        "src/win/util.c||src/win/util.c": [
          "File: src/win/util.c -> src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:   int parent_pid = -1;",
          "341:   HANDLE handle;",
          "342:   PROCESSENTRY32 pe;",
          "345:   pe.dwSize = sizeof(PROCESSENTRY32);",
          "346:   handle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);",
          "",
          "[Removed Lines]",
          "343:   int current_pid = GetCurrentProcessId();",
          "",
          "[Added Lines]",
          "343:   DWORD current_pid = GetCurrentProcessId();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:     DWORD cpu_speed_size = sizeof(cpu_speed);",
          "656:     WCHAR cpu_brand[256];",
          "657:     DWORD cpu_brand_size = sizeof(cpu_brand);",
          "660:     len = _snwprintf(key_name,",
          "661:                      ARRAY_SIZE(key_name),",
          "",
          "[Removed Lines]",
          "658:     int len;",
          "",
          "[Added Lines]",
          "658:     size_t len;",
          "",
          "---------------"
        ],
        "src/win/winsock.c||src/win/winsock.c": [
          "File: src/win/winsock.c -> src/win/winsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: static BOOL uv_get_extension_function(SOCKET socket, GUID guid,",
          "42:     void **target) {",
          "45:   result = WSAIoctl(socket,",
          "46:                     SIO_GET_EXTENSION_FUNCTION_POINTER,",
          "",
          "[Removed Lines]",
          "43:   DWORD result, bytes;",
          "",
          "[Added Lines]",
          "43:   int result;",
          "44:   DWORD bytes;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff6a718dfceda3d134e021db2e2dc6d9cdeb0039",
      "candidate_info": {
        "commit_hash": "ff6a718dfceda3d134e021db2e2dc6d9cdeb0039",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ff6a718dfceda3d134e021db2e2dc6d9cdeb0039",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "Now working on v0.11.28",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.27], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.28], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3c63ff1627a14e96f54c1c62b0d68b446d8425b",
      "candidate_info": {
        "commit_hash": "e3c63ff1627a14e96f54c1c62b0d68b446d8425b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e3c63ff1627a14e96f54c1c62b0d68b446d8425b",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.06.27, Version 0.11.5 (Unstable)\n\nChanges since version 0.11.4:\n\n* build: remove CSTDFLAG, use only CFLAGS (Ben Noordhuis)\n\n* unix: support for android builds (Linus M\u00e5rtensson)\n\n* unix: avoid extra read, short-circuit on POLLHUP (Ben Noordhuis)\n\n* uv: support android libuv standalone build (Linus M\u00e5rtensson)\n\n* src: make queue.h c++ compatible (Ben Noordhuis)\n\n* unix: s/ngx-queue.h/queue.h/ in checksparse.sh (Ben Noordhuis)\n\n* unix: unconditionally stop handle on close (Ben Noordhuis)\n\n* freebsd: don't enable dtrace if it's not available (Brian White)\n\n* build: make HAVE_DTRACE=0 should disable dtrace (Timothy J. Fontaine)\n\n* unix: remove overzealous assert (Ben Noordhuis)\n\n* unix: remove unused function uv_fatal_error() (Ben Noordhuis)\n\n* unix, windows: clean up uv_thread_create() (Ben Noordhuis)\n\n* queue: fix pointer truncation on LLP64 platforms (Bert Belder)\n\n* build: set OS==\"android\" for android builds (Linus M\u00e5rtensson)\n\n* windows: don't use uppercase in include filename (Ben Noordhuis)\n\n* stream: add an API to make streams do blocking writes (Henry Rawas)\n\n* windows: use WSAGetLastError(), not errno (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 5",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c766dfe81585ed6861e9172a365f485b73c3a97c",
      "candidate_info": {
        "commit_hash": "c766dfe81585ed6861e9172a365f485b73c3a97c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c766dfe81585ed6861e9172a365f485b73c3a97c",
        "files": [
          "src/queue.h"
        ],
        "message": "src: make queue.h c++ compatible\n\nSquelch a warning about a cast from void* to another pointer type.\nIt's legal C but not legal C++. Makes queue.h usable in node.js.",
        "before_after_code_files": [
          "src/queue.h||src/queue.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/queue.h||src/queue.h": [
          "File: src/queue.h -> src/queue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   ((type *) ((char *) (ptr) - ((long) &((type *) 0)->field)))",
          "31: #define QUEUE_FOREACH(q, h)                                                   \\",
          "34: #define QUEUE_EMPTY(q)                                                        \\",
          "35:   (QUEUE_NEXT(q) == (q))",
          "",
          "[Removed Lines]",
          "32:   for ((q) = (*(h))[0]; (q) != (h); (q) = (*(q))[0])",
          "",
          "[Added Lines]",
          "32:   for ((q) = (QUEUE *) (*(h))[0]; (q) != (h); (q) = (QUEUE *) (*(q))[0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30a8b44c4c1b13b21e6f8064f4f0e2e0fc9bfc05",
      "candidate_info": {
        "commit_hash": "30a8b44c4c1b13b21e6f8064f4f0e2e0fc9bfc05",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/30a8b44c4c1b13b21e6f8064f4f0e2e0fc9bfc05",
        "files": [
          "src/win/tcp.c"
        ],
        "message": "windows: use WSAGetLastError(), not errno\n\nsetsockopt() doesn't touch errno on failure. Use WSAGetLastError()\ninstead.",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                  TCP_NODELAY,",
          "51:                  (const char*)&enable,",
          "52:                  sizeof enable) == -1) {",
          "54:     return -1;",
          "55:   }",
          "56:   return 0;",
          "",
          "[Removed Lines]",
          "53:     uv__set_sys_error(handle->loop, errno);",
          "",
          "[Added Lines]",
          "53:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:                  SO_KEEPALIVE,",
          "64:                  (const char*)&enable,",
          "65:                  sizeof enable) == -1) {",
          "67:     return -1;",
          "68:   }",
          "",
          "[Removed Lines]",
          "66:     uv__set_sys_error(handle->loop, errno);",
          "",
          "[Added Lines]",
          "66:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:                            TCP_KEEPALIVE,",
          "73:                            (const char*)&delay,",
          "74:                            sizeof delay) == -1) {",
          "76:     return -1;",
          "77:   }",
          "",
          "[Removed Lines]",
          "75:     uv__set_sys_error(handle->loop, errno);",
          "",
          "[Added Lines]",
          "75:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "",
          "---------------"
        ]
      }
    }
  ]
}