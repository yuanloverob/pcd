{
  "cve_id": "CVE-2019-19959",
  "cve_desc": "ext/misc/zipfile.c in SQLite 3.30.1 mishandles certain uses of INSERT INTO in situations involving embedded '\\0' characters in filenames, leading to a memory-management error that can be detected by (for example) valgrind.",
  "repo": "sqlite/sqlite",
  "patch_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
  "patch_info": {
    "commit_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Fix the zipfile() function in the zipfile extension so that it is able to deal with goofy filenames that contain embedded zeros.\n\nFossilOrigin-Name: cc0fb00a128fd0773db5ff7891f7aa577a3671d570166d2cbb30df922344adcf",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1632:         zFree = sqlite3_mprintf(\"%s/\", zPath);",
      "1633:         if( zFree==0 ){ rc = SQLITE_NOMEM; }",
      "1634:         zPath = (const char*)zFree;",
      "1636:       }",
      "1637:     }",
      "",
      "[Removed Lines]",
      "1635:         nPath++;",
      "",
      "[Added Lines]",
      "1635:         nPath = (int)strlen(zPath);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2033:   }else{",
      "2034:     if( zName[nName-1]!='/' ){",
      "2035:       zName = zFree = sqlite3_mprintf(\"%s/\", zName);",
      "2037:       if( zName==0 ){",
      "2038:         rc = SQLITE_NOMEM;",
      "2039:         goto zipfile_step_out;",
      "2040:       }",
      "2041:     }else{",
      "2042:       while( nName>1 && zName[nName-2]=='/' ) nName--;",
      "2043:     }",
      "",
      "[Removed Lines]",
      "2036:       nName++;",
      "",
      "[Added Lines]",
      "2040:       nName = (int)strlen(zName);",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4c50afafce8416369f89477ba7fe7d9b047399a5ee5754c73d0e67bbea8d877c",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0af6ddd3ca07064f529b3b1349a76f466fed1d63",
      "candidate_info": {
        "commit_hash": "0af6ddd3ca07064f529b3b1349a76f466fed1d63",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0af6ddd3ca07064f529b3b1349a76f466fed1d63",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c"
        ],
        "message": "Fix the OP_Cast operator so that when casting to TEXT, it always leaves the result in the encoding of the database.  Ticket [0911b5d161b039c6]. Test cases in TH3.\n\nFossilOrigin-Name: f347744e0d576f0250c29259cca755e57afded8956224114c01603c1bca5b3a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c44c73499154bc57634a54cb743642d0aacc93a1336fbb8bb3eb5dbbf616357",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866:   pIn1 = &aMem[pOp->p1];",
          "1867:   memAboutToChange(p, pIn1);",
          "1868:   rc = ExpandBlob(pIn1);",
          "1871:   if( rc ) goto abort_due_to_error;",
          "1872:   REGISTER_TRACE(pOp->p1, pIn1);",
          "1873:   break;",
          "1874: }",
          "",
          "[Removed Lines]",
          "1869:   sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);",
          "1870:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "",
          "[Added Lines]",
          "1870:   rc = sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);",
          "1871:   if( rc ) goto abort_due_to_error;",
          "1872:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "529: void sqlite3VdbeIntegerAffinity(Mem*);",
          "530: int sqlite3VdbeMemRealify(Mem*);",
          "531: int sqlite3VdbeMemNumerify(Mem*);",
          "533: int sqlite3VdbeMemFromBtree(BtCursor*,u32,u32,Mem*);",
          "534: void sqlite3VdbeMemRelease(Mem *p);",
          "535: int sqlite3VdbeMemFinalize(Mem*, FuncDef*);",
          "",
          "[Removed Lines]",
          "532: void sqlite3VdbeMemCast(Mem*,u8,u8);",
          "",
          "[Added Lines]",
          "532: int sqlite3VdbeMemCast(Mem*,u8,u8);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   switch( aff ){",
          "754:       if( (pMem->flags & MEM_Blob)==0 ){",
          "",
          "[Removed Lines]",
          "750: void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){",
          "751:   if( pMem->flags & MEM_Null ) return;",
          "",
          "[Added Lines]",
          "750: int sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){",
          "751:   if( pMem->flags & MEM_Null ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:       sqlite3ValueApplyAffinity(pMem, SQLITE_AFF_TEXT, encoding);",
          "780:       assert( pMem->flags & MEM_Str || pMem->db->mallocFailed );",
          "781:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);",
          "783:     }",
          "784:   }",
          "785: }",
          "",
          "[Removed Lines]",
          "782:       break;",
          "",
          "[Added Lines]",
          "782:       return sqlite3VdbeChangeEncoding(pMem, encoding);",
          "785:   return SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a1d7c39682f332bd3660ea6a4ae079b9d0a8041",
      "candidate_info": {
        "commit_hash": "7a1d7c39682f332bd3660ea6a4ae079b9d0a8041",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a1d7c39682f332bd3660ea6a4ae079b9d0a8041",
        "files": [
          "ext/fts5/test/fts5integrity.test",
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "test/pragma3.test"
        ],
        "message": "Fix \"PRAGMA data_version\" so that it works the same way with locking_mode=PERSIST and journal_mode=PERSIST configured. Fix for 7a458c2a5f.\n\nFossilOrigin-Name: 45748e2db028ffbda5d3e747493721a5a89af3fbc06823081a2f27f570e40e73",
        "before_after_code_files": [
          "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test",
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "test/pragma3.test||test/pragma3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test": [
          "File: ext/fts5/test/fts5integrity.test -> ext/fts5/test/fts5integrity.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: }",
          "213: #-------------------------------------------------------------------------",
          "214: reset_db",
          "215: do_execsql_test 7.0 {",
          "216:   PRAGMA encoding = 'UTF-16';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "235: }",
          "237: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238: #-------------------------------------------------------------------------",
          "239: # Ticket 7a458c2a5f4",
          "240: #",
          "241: reset_db",
          "242: do_execsql_test 8.0 {",
          "243:   PRAGMA locking_mode = EXCLUSIVE;",
          "244:   PRAGMA journal_mode = PERSIST;",
          "245:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "246: } {exclusive persist}",
          "247: do_execsql_test 8.1 {",
          "248:   PRAGMA data_version",
          "249: } {1}",
          "250: do_execsql_test 8.2 {",
          "251:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "252:   PRAGMA data_version;",
          "253: } {1}",
          "254: do_execsql_test 8.1 {",
          "255:   INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2);",
          "256: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70815e273f511481c310dc33b3b49079901d891078fad49b663fbce06c77ecc2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6629:   if( NEVER(pPager->errCode) ) return pPager->errCode;",
          "6631:   assert( pPager->eState==PAGER_WRITER_LOCKED",
          "6632:        || pPager->eState==PAGER_WRITER_FINISHED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6630:   pPager->iDataVersion++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6655:   }",
          "6657:   PAGERTRACE((\"COMMIT %d\\n\", PAGERID(pPager)));",
          "6659:   rc = pager_end_transaction(pPager, pPager->setMaster, 1);",
          "6660:   return pager_error(pPager, rc);",
          "6661: }",
          "",
          "[Removed Lines]",
          "6658:   pPager->iDataVersion++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pragma3.test||test/pragma3.test": [
          "File: test/pragma3.test -> test/pragma3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "255: }",
          "256: }",
          "258: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #-------------------------------------------------------------------------",
          "259: # Check that empty write transactions do not cause the return of \"PRAGMA",
          "260: # data_version\" to be decremented with journal_mode=PERSIST and",
          "261: # locking_mode=EXCLUSIVE",
          "262: #",
          "263: foreach {tn sql} {",
          "264:   A {",
          "265:   }",
          "266:   B {",
          "267:     PRAGMA journal_mode = PERSIST;",
          "268:     PRAGMA locking_mode = EXCLUSIVE;",
          "269:   }",
          "270: } {",
          "271:   reset_db",
          "272:   execsql $sql",
          "274:   do_execsql_test pragma3-510$tn {",
          "275:     CREATE TABLE t1(x, y);",
          "276:     INSERT INTO t1 VALUES(1, 2);",
          "277:     PRAGMA data_version;",
          "278:   } {1}",
          "280:   do_execsql_test pragma3-520$tn {",
          "281:     BEGIN EXCLUSIVE;",
          "282:     COMMIT;",
          "283:     PRAGMA data_version;",
          "284:   } {1}",
          "285: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e827fa27de5aa52bff6067e8051f01c019e5d27",
      "candidate_info": {
        "commit_hash": "6e827fa27de5aa52bff6067e8051f01c019e5d27",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e827fa27de5aa52bff6067e8051f01c019e5d27",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/join.test"
        ],
        "message": "When constructing the virtual MATCH term of the WHERE clause for a virtual table that is in a LEFT JOIN, be sure to set the correct Expr.iRightJoinTable value.  This value does not appear to ever be used, except inside of a single assert().  But it is good to set it correctly, nevertheless.  This fixes ticket [7929c1efb2d67e98], which as far as I can tell is completely harmless.\n\nFossilOrigin-Name: ef604882a275d3d5ebd4d5a08e3fe43e148f169b7d5c3a81464fbe7f54f3582a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7fc733328c5914c747e048c830522ec13e433c0a86388bae47b198a3e220c6c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1298:             0, sqlite3ExprDup(db, pRight, 0));",
          "1299:         if( ExprHasProperty(pExpr, EP_FromJoin) && pNewExpr ){",
          "1300:           ExprSetProperty(pNewExpr, EP_FromJoin);",
          "1301:         }",
          "1302:         idxNew = whereClauseInsert(pWC, pNewExpr, TERM_VIRTUAL|TERM_DYNAMIC);",
          "1303:         testcase( idxNew==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1301:           pNewExpr->iRightJoinTable = pExpr->iRightJoinTable;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
          "989: } {11}",
          "991: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991: # 2019-12-22 ticket 7929c1efb2d67e98",
          "992: #",
          "993: reset_db",
          "994: do_execsql_test join-23.10 {",
          "995:   CREATE TABLE t0(c0);",
          "996:   INSERT INTO t0(c0) VALUES(123);",
          "997:   CREATE VIEW v0(c0) AS SELECT 0 GROUP BY 1;",
          "998:   SELECT t0.c0, v0.c0, vt0.name",
          "999:    FROM v0, t0 LEFT JOIN pragma_table_info('t0') AS vt0",
          "1000:      ON vt0.name LIKE 'c0'",
          "1001:    WHERE v0.c0 == 0;",
          "1002: } {123 0 c0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4799488e163c02508894a7c71f256605f45d9645",
      "candidate_info": {
        "commit_hash": "4799488e163c02508894a7c71f256605f45d9645",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4799488e163c02508894a7c71f256605f45d9645",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vdbe.c"
        ],
        "message": "Change the code generator for the IN operator so that it avoids creating OP_Eq and OP_Ne opcode with the same P1 and P3 arguments.  This enables us to back out check-in [ddb17d92df194337] and also fix ticket [188f912b51cd802].\n\nFossilOrigin-Name: 9ab985a9c8160b905730678f40ed440a246cdec549c798bafefaed5abbc0437f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 89a9dad6330270a4c3b962f86a208088d2ea9883c7d291351a77f058e0ed8b0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3187:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3188:       }",
          "3189:       if( ii<pList->nExpr-1 || destIfNull!=destIfFalse ){",
          "3191:                           (void*)pColl, P4_COLLSEQ);",
          "3194:         sqlite3VdbeChangeP5(v, zAff[0]);",
          "3195:       }else{",
          "3196:         assert( destIfNull==destIfFalse );",
          "3199:         sqlite3VdbeChangeP5(v, zAff[0] | SQLITE_JUMPIFNULL);",
          "3200:       }",
          "3201:       sqlite3ReleaseTempReg(pParse, regToFree);",
          "",
          "[Removed Lines]",
          "3190:         sqlite3VdbeAddOp4(v, OP_Eq, rLhs, labelOk, r2,",
          "3192:         VdbeCoverageIf(v, ii<pList->nExpr-1);",
          "3193:         VdbeCoverageIf(v, ii==pList->nExpr-1);",
          "3197:         sqlite3VdbeAddOp4(v, OP_Ne, rLhs, destIfFalse, r2,",
          "3198:                           (void*)pColl, P4_COLLSEQ); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "3190:         int op = rLhs!=r2 ? OP_Eq : OP_NotNull;",
          "3191:         sqlite3VdbeAddOp4(v, op, rLhs, labelOk, r2,",
          "3193:         VdbeCoverageIf(v, ii<pList->nExpr-1 && op==OP_Eq);",
          "3194:         VdbeCoverageIf(v, ii==pList->nExpr-1 && op==OP_Eq);",
          "3195:         VdbeCoverageIf(v, ii<pList->nExpr-1 && op==OP_NotNull);",
          "3196:         VdbeCoverageIf(v, ii==pList->nExpr-1 && op==OP_NotNull);",
          "3199:         int op = rLhs!=r2 ? OP_Ne : OP_IsNull;",
          "3201:         sqlite3VdbeAddOp4(v, op, rLhs, destIfFalse, r2,",
          "3202:                           (void*)pColl, P4_COLLSEQ);",
          "3203:         VdbeCoverageIf(v, op==OP_Ne);",
          "3204:         VdbeCoverageIf(v, op==OP_IsNull);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:       if( (flags1 | flags3)&MEM_Str ){",
          "2029:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2030:           applyNumericAffinity(pIn1,0);",
          "2032:           flags3 = pIn3->flags;",
          "2033:         }",
          "2034:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2031:           testcase( flags3!=pIn3->flags );",
          "",
          "[Added Lines]",
          "2031:           assert( flags3==pIn3->flags );",
          "",
          "---------------"
        ]
      }
    }
  ]
}