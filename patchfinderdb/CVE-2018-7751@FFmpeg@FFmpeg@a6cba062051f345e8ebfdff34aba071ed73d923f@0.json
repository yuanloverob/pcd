{
  "cve_id": "CVE-2018-7751",
  "cve_desc": "The svg_probe function in libavformat/img2dec.c in FFmpeg through 3.4.2 allows remote attackers to cause a denial of service (Infinite Loop) via a crafted XML file.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "a6cba062051f345e8ebfdff34aba071ed73d923f",
  "patch_info": {
    "commit_hash": "a6cba062051f345e8ebfdff34aba071ed73d923f",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/a6cba062051f345e8ebfdff34aba071ed73d923f",
    "files": [
      "libavformat/img2dec.c"
    ],
    "message": "avformat/img2dec: fix infinite loop\n\nFixes: kira-poc\n\nFound-by: Kira <kira_cxy@foxmail.com>\nChange suggested by Kira\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavformat/img2dec.c||libavformat/img2dec.c"
    ]
  },
  "patch_diff": {
    "libavformat/img2dec.c||libavformat/img2dec.c": [
      "File: libavformat/img2dec.c -> libavformat/img2dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "878: {",
      "879:     const uint8_t *b = p->buf;",
      "880:     const uint8_t *end = p->buf + p->buf_size;",
      "881:     if (memcmp(p->buf, \"<?xml\", 5))",
      "882:         return 0;",
      "883:     while (b < end) {",
      "885:         if (b >= end - 4)",
      "886:             return 0;",
      "887:         if (!memcmp(b, \"<svg\", 4))",
      "",
      "[Removed Lines]",
      "884:         b += ff_subtitles_next_line(b);",
      "",
      "[Added Lines]",
      "885:         int inc = ff_subtitles_next_line(b);",
      "886:         if (!inc)",
      "887:             break;",
      "888:         b += inc;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3fa6e594a0f2575ddb6b2183961fde42ab5ab37b",
      "candidate_info": {
        "commit_hash": "3fa6e594a0f2575ddb6b2183961fde42ab5ab37b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3fa6e594a0f2575ddb6b2183961fde42ab5ab37b",
        "files": [
          "libavformat/img2dec.c"
        ],
        "message": "avformat/img2dec: fix infinite loop\n\nFixes: kira-poc\n\nFound-by: Kira <kira_cxy@foxmail.com>\nChange suggested by Kira\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit a6cba062051f345e8ebfdff34aba071ed73d923f)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavformat/img2dec.c||libavformat/img2dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ],
          "candidate": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/img2dec.c||libavformat/img2dec.c": [
          "File: libavformat/img2dec.c -> libavformat/img2dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "878: {",
          "879:     const uint8_t *b = p->buf;",
          "880:     const uint8_t *end = p->buf + p->buf_size;",
          "881:     if (memcmp(p->buf, \"<?xml\", 5))",
          "882:         return 0;",
          "883:     while (b < end) {",
          "885:         if (b >= end - 4)",
          "886:             return 0;",
          "887:         if (!memcmp(b, \"<svg\", 4))",
          "",
          "[Removed Lines]",
          "884:         b += ff_subtitles_next_line(b);",
          "",
          "[Added Lines]",
          "885:         int inc = ff_subtitles_next_line(b);",
          "886:         if (!inc)",
          "887:             break;",
          "888:         b += inc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a20f64bee235042f6e35c8e7ae65ccfddbf7343b",
      "candidate_info": {
        "commit_hash": "a20f64bee235042f6e35c8e7ae65ccfddbf7343b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/a20f64bee235042f6e35c8e7ae65ccfddbf7343b",
        "files": [
          "libavformat/img2dec.c"
        ],
        "message": "lavf/img2dec: Auto-detect svg images.",
        "before_after_code_files": [
          "libavformat/img2dec.c||libavformat/img2dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ],
          "candidate": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/img2dec.c||libavformat/img2dec.c": [
          "File: libavformat/img2dec.c -> libavformat/img2dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"internal.h\"",
          "35: #include \"img2.h\"",
          "36: #include \"libavcodec/mjpeg.h\"",
          "38: #if HAVE_GLOB",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"subtitles.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "876: static int svg_probe(AVProbeData *p)",
          "877: {",
          "880:     return 0;",
          "881: }",
          "",
          "[Removed Lines]",
          "878:     if (av_match_ext(p->filename, \"svg\") || av_match_ext(p->filename, \"svgz\"))",
          "879:         return AVPROBE_SCORE_EXTENSION + 1;",
          "",
          "[Added Lines]",
          "879:     const uint8_t *b = p->buf;",
          "880:     const uint8_t *end = p->buf + p->buf_size;",
          "881:     if (memcmp(p->buf, \"<?xml\", 5))",
          "882:         return 0;",
          "883:     while (b < end) {",
          "884:         b += ff_subtitles_next_line(b);",
          "885:         if (b >= end - 4)",
          "886:             return 0;",
          "887:         if (!memcmp(b, \"<svg\", 4))",
          "888:             return AVPROBE_SCORE_EXTENSION + 1;",
          "889:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f60dc03a0b88de78298bb57834d9fbc68926b64",
      "candidate_info": {
        "commit_hash": "7f60dc03a0b88de78298bb57834d9fbc68926b64",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/7f60dc03a0b88de78298bb57834d9fbc68926b64",
        "files": [
          "libavformat/img2.c",
          "libavformat/img2dec.c"
        ],
        "message": "lavf/img2: Add svg and svgz to allow reading image sequences.\n\nIncrease the return value for svg_probe() to make it != AVPROBE_SCORE_EXTENSION.",
        "before_after_code_files": [
          "libavformat/img2.c||libavformat/img2.c",
          "libavformat/img2dec.c||libavformat/img2dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ],
          "candidate": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/img2.c||libavformat/img2.c": [
          "File: libavformat/img2.c -> libavformat/img2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     { AV_CODEC_ID_SUNRAST,    \"im24\"     },",
          "66:     { AV_CODEC_ID_SUNRAST,    \"im32\"     },",
          "67:     { AV_CODEC_ID_SUNRAST,    \"sunras\"   },",
          "68:     { AV_CODEC_ID_JPEG2000,   \"j2c\"      },",
          "69:     { AV_CODEC_ID_JPEG2000,   \"jp2\"      },",
          "70:     { AV_CODEC_ID_JPEG2000,   \"jpc\"      },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     { AV_CODEC_ID_SVG,        \"svg\"      },",
          "69:     { AV_CODEC_ID_SVG,        \"svgz\"     },",
          "",
          "---------------"
        ],
        "libavformat/img2dec.c||libavformat/img2dec.c": [
          "File: libavformat/img2dec.c -> libavformat/img2dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "876: static int svg_probe(AVProbeData *p)",
          "877: {",
          "878:     if (av_match_ext(p->filename, \"svg\") || av_match_ext(p->filename, \"svgz\"))",
          "880:     return 0;",
          "881: }",
          "",
          "[Removed Lines]",
          "879:         return AVPROBE_SCORE_EXTENSION;",
          "",
          "[Added Lines]",
          "879:         return AVPROBE_SCORE_EXTENSION + 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fefaeaa0b85a183a1266b97b37315a7815e6dbb",
      "candidate_info": {
        "commit_hash": "3fefaeaa0b85a183a1266b97b37315a7815e6dbb",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3fefaeaa0b85a183a1266b97b37315a7815e6dbb",
        "files": [
          "libavformat/img2dec.c"
        ],
        "message": "img2dec: use standard way to probe for svg/svgz files",
        "before_after_code_files": [
          "libavformat/img2dec.c||libavformat/img2dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ],
          "candidate": [
            "libavformat/img2dec.c||libavformat/img2dec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/img2dec.c||libavformat/img2dec.c": [
          "File: libavformat/img2dec.c -> libavformat/img2dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:     return 0;",
          "874: }",
          "876: static int tiff_probe(AVProbeData *p)",
          "877: {",
          "878:     const uint8_t *b = p->buf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876: static int svg_probe(AVProbeData *p)",
          "877: {",
          "878:     if (av_match_ext(p->filename, \"svg\") || av_match_ext(p->filename, \"svgz\"))",
          "879:         return AVPROBE_SCORE_EXTENSION;",
          "880:     return 0;",
          "881: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "971:     .raw_codec_id   = codecid,\\",
          "972: };",
          "994: IMAGEAUTO_DEMUXER(bmp,     AV_CODEC_ID_BMP)",
          "995: IMAGEAUTO_DEMUXER(dds,     AV_CODEC_ID_DDS)",
          "996: IMAGEAUTO_DEMUXER(dpx,     AV_CODEC_ID_DPX)",
          "",
          "[Removed Lines]",
          "974: static const AVClass svg_class = {",
          "975:     .class_name = \"svg demuxer\",",
          "976:     .item_name  = av_default_item_name,",
          "977:     .option     = ff_img_options,",
          "978:     .version    = LIBAVUTIL_VERSION_INT,",
          "979: };",
          "981: AVInputFormat ff_image_svg_pipe_demuxer = {",
          "982:     .name           = \"svg_pipe\",",
          "983:     .long_name      = NULL_IF_CONFIG_SMALL(\"piped svg sequence\"),",
          "984:     .priv_data_size = sizeof(VideoDemuxData),",
          "985:     .read_header    = ff_img_read_header,",
          "986:     .read_packet    = ff_img_read_packet,",
          "987:     .priv_class     = &svg_class,",
          "988:     .mime_type      = \"image/svg+xml\",",
          "989:     .extensions     = \"svg,svgz\",",
          "990:     .flags          = AVFMT_GENERIC_INDEX,",
          "991:     .raw_codec_id   = AV_CODEC_ID_SVG,",
          "992: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1010: IMAGEAUTO_DEMUXER(qdraw,   AV_CODEC_ID_QDRAW)",
          "1011: IMAGEAUTO_DEMUXER(sgi,     AV_CODEC_ID_SGI)",
          "1012: IMAGEAUTO_DEMUXER(sunrast, AV_CODEC_ID_SUNRAST)",
          "1013: IMAGEAUTO_DEMUXER(tiff,    AV_CODEC_ID_TIFF)",
          "1014: IMAGEAUTO_DEMUXER(webp,    AV_CODEC_ID_WEBP)",
          "1015: IMAGEAUTO_DEMUXER(xpm,     AV_CODEC_ID_XPM)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1000: IMAGEAUTO_DEMUXER(svg,     AV_CODEC_ID_SVG)",
          "",
          "---------------"
        ]
      }
    }
  ]
}