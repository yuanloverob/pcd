{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "960eefb31965c3e9cd94c1c3119570302fe15bcd",
      "candidate_info": {
        "commit_hash": "960eefb31965c3e9cd94c1c3119570302fe15bcd",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/960eefb31965c3e9cd94c1c3119570302fe15bcd",
        "files": [
          "Makefile.am",
          "src/unix/stream.c",
          "test/test-list.h",
          "test/test-tcp-write-queue-order.c",
          "uv.gyp"
        ],
        "message": "unix: guarantee write queue cb execution order in streams\n\nThe problem was that the canceled write callbacks\nwere being called before the already written callbacks, even\nthough they were queued after them.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/stream.c||src/unix/stream.c",
          "test/test-list.h||test/test-list.h",
          "test/test-tcp-write-queue-order.c||test/test-tcp-write-queue-order.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:                          test/test-tcp-write-to-half-open-connection.c \\",
          "197:                          test/test-tcp-writealot.c \\",
          "198:                          test/test-tcp-try-write.c \\",
          "199:                          test/test-thread.c \\",
          "200:                          test/test-threadpool-cancel.c \\",
          "201:                          test/test-threadpool.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:                          test/test-tcp-write-queue-order.c \\",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: static void uv__write(uv_stream_t* stream);",
          "61: static void uv__read(uv_stream_t* stream);",
          "62: static void uv__stream_io(uv_loop_t* loop, uv__io_t* w, unsigned int events);",
          "63: static size_t uv__write_req_size(uv_write_t* req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: static void uv__write_callbacks(uv_stream_t* stream);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     QUEUE_REMOVE(q);",
          "380:     req = QUEUE_DATA(q, uv_write_t, queue);",
          "389:   }",
          "409:   if (stream->shutdown_req) {",
          "",
          "[Removed Lines]",
          "381:     uv__req_unregister(stream->loop, req);",
          "383:     if (req->bufs != req->bufsml)",
          "384:       free(req->bufs);",
          "385:     req->bufs = NULL;",
          "387:     if (req->cb != NULL)",
          "388:       req->cb(req, -ECANCELED);",
          "391:   while (!QUEUE_EMPTY(&stream->write_completed_queue)) {",
          "392:     q = QUEUE_HEAD(&stream->write_completed_queue);",
          "393:     QUEUE_REMOVE(q);",
          "395:     req = QUEUE_DATA(q, uv_write_t, queue);",
          "396:     uv__req_unregister(stream->loop, req);",
          "398:     if (req->bufs != NULL) {",
          "399:       stream->write_queue_size -= uv__write_req_size(req);",
          "400:       if (req->bufs != req->bufsml)",
          "401:         free(req->bufs);",
          "402:       req->bufs = NULL;",
          "403:     }",
          "405:     if (req->cb)",
          "406:       req->cb(req, req->error);",
          "407:   }",
          "",
          "[Added Lines]",
          "382:     req->error = -ECANCELED;",
          "384:     QUEUE_INSERT_TAIL(&stream->write_completed_queue, &req->queue);",
          "387:   uv__write_callbacks(stream);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "416:     stream->shutdown_req->cb(stream->shutdown_req, -ECANCELED);",
          "417:     stream->shutdown_req = NULL;",
          "418:   }",
          "419: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:   assert(stream->write_queue_size == 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "891:   }",
          "893:   assert(QUEUE_EMPTY(&stream->write_completed_queue));",
          "898: }",
          "",
          "[Removed Lines]",
          "896:   if (QUEUE_EMPTY(&stream->write_queue))",
          "897:     uv__drain(stream);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1211:   if (events & (UV__POLLOUT | UV__POLLERR | UV__POLLHUP)) {",
          "1212:     uv__write(stream);",
          "1213:     uv__write_callbacks(stream);",
          "1214:   }",
          "1215: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:     if (QUEUE_EMPTY(&stream->write_queue))",
          "1195:       uv__drain(stream);",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: TEST_DECLARE   (multiple_listen)",
          "57: TEST_DECLARE   (tcp_writealot)",
          "58: TEST_DECLARE   (tcp_try_write)",
          "59: TEST_DECLARE   (tcp_open)",
          "60: TEST_DECLARE   (tcp_connect_error_after_write)",
          "61: TEST_DECLARE   (tcp_shutdown_after_write)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: TEST_DECLARE   (tcp_write_queue_order)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:   TEST_ENTRY  (tcp_try_write)",
          "335:   TEST_ENTRY  (tcp_open)",
          "336:   TEST_HELPER (tcp_open, tcp4_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   TEST_ENTRY  (tcp_write_queue_order)",
          "",
          "---------------"
        ],
        "test/test-tcp-write-queue-order.c||test/test-tcp-write-queue-order.c": [
          "File: test/test-tcp-write-queue-order.c -> test/test-tcp-write-queue-order.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <stdio.h>",
          "23: #include <stdlib.h>",
          "24: #include <string.h>",
          "26: #include \"uv.h\"",
          "27: #include \"task.h\"",
          "29: #define REQ_COUNT 100000",
          "31: static uv_timer_t timer;",
          "32: static uv_tcp_t server;",
          "33: static uv_tcp_t client;",
          "34: static uv_tcp_t incoming;",
          "35: static int connect_cb_called;",
          "36: static int close_cb_called;",
          "37: static int connection_cb_called;",
          "38: static int write_callbacks;",
          "39: static int write_cancelled_callbacks;",
          "40: static int write_error_callbacks;",
          "42: static uv_write_t write_requests[REQ_COUNT];",
          "45: static void close_cb(uv_handle_t* handle) {",
          "46:   close_cb_called++;",
          "47: }",
          "49: void timer_cb(uv_timer_t* handle) {",
          "50:   uv_close((uv_handle_t*) &client, close_cb);",
          "51:   uv_close((uv_handle_t*) &server, close_cb);",
          "52:   uv_close((uv_handle_t*) &incoming, close_cb);",
          "53: }",
          "55: void write_cb(uv_write_t* req, int status) {",
          "56:   if (status == 0)",
          "57:     write_callbacks++;",
          "58:   else if (status == UV_ECANCELED)",
          "59:     write_cancelled_callbacks++;",
          "60:   else",
          "61:     write_error_callbacks++;",
          "62: }",
          "64: static void connect_cb(uv_connect_t* req, int status) {",
          "65:   static char base[1024];",
          "66:   int r;",
          "67:   int i;",
          "68:   uv_buf_t buf;",
          "70:   ASSERT(status == 0);",
          "71:   connect_cb_called++;",
          "73:   buf = uv_buf_init(base, sizeof(base));",
          "75:   for (i = 0; i < REQ_COUNT; i++) {",
          "76:     r = uv_write(&write_requests[i],",
          "77:                  req->handle,",
          "78:                  &buf,",
          "79:                  1,",
          "80:                  write_cb);",
          "81:     ASSERT(r == 0);",
          "82:   }",
          "83: }",
          "86: static void connection_cb(uv_stream_t* tcp, int status) {",
          "87:   ASSERT(status == 0);",
          "89:   ASSERT(0 == uv_tcp_init(tcp->loop, &incoming));",
          "90:   ASSERT(0 == uv_accept(tcp, (uv_stream_t*) &incoming));",
          "92:   connection_cb_called++;",
          "93: }",
          "96: static void start_server(void) {",
          "97:   struct sockaddr_in addr;",
          "99:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "101:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &server));",
          "102:   ASSERT(0 == uv_tcp_bind(&server, (struct sockaddr*) &addr, 0));",
          "103:   ASSERT(0 == uv_listen((uv_stream_t*) &server, 128, connection_cb));",
          "104: }",
          "107: TEST_IMPL(tcp_write_queue_order) {",
          "108:   uv_connect_t connect_req;",
          "109:   struct sockaddr_in addr;",
          "111:   start_server();",
          "113:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "115:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &client));",
          "116:   ASSERT(0 == uv_tcp_connect(&connect_req,",
          "117:                              &client,",
          "118:                              (struct sockaddr*) &addr,",
          "119:                              connect_cb));",
          "121:   ASSERT(0 == uv_timer_init(uv_default_loop(), &timer));",
          "122:   ASSERT(0 == uv_timer_start(&timer, timer_cb, 100, 0));",
          "124:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));",
          "126:   ASSERT(connect_cb_called == 1);",
          "127:   ASSERT(connection_cb_called == 1);",
          "128:   ASSERT(write_callbacks > 0);",
          "129: #ifndef _WIN32",
          "131:   ASSERT(write_cancelled_callbacks > 0);",
          "132: #endif",
          "133:   ASSERT(write_callbacks +",
          "134:          write_error_callbacks +",
          "135:          write_cancelled_callbacks == REQ_COUNT);",
          "136:   ASSERT(close_cb_called == 3);",
          "138:   MAKE_VALGRIND_HAPPY();",
          "139:   return 0;",
          "140: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:         'test/test-tcp-try-write.c',",
          "379:         'test/test-tcp-unexpected-read.c',",
          "380:         'test/test-tcp-read-stop.c',",
          "381:         'test/test-threadpool.c',",
          "382:         'test/test-threadpool-cancel.c',",
          "383:         'test/test-mutexes.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:         'test/test-tcp-write-queue-order.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ca9a363897cfa60f4e2229e4f15ac5abd7fd103",
      "candidate_info": {
        "commit_hash": "4ca9a363897cfa60f4e2229e4f15ac5abd7fd103",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4ca9a363897cfa60f4e2229e4f15ac5abd7fd103",
        "files": [
          "Makefile.am",
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/unix/core.c",
          "src/win/core.c",
          "test/test-handle-fileno.c",
          "test/test-list.h",
          "uv.gyp"
        ],
        "message": "unix, windows: add uv_fileno\n\nReturns the platform specific file descriptor for handles that are\nbacked by one. The datatype is abstracted as uv_os_fd_t, which maps to\nint on Unices and HANDLE on Windows.\n\nUsers can use this function to set specific socket options, for example,\nin a non portable way.\n\nThis function is essentially a shotgun, you better be careful with\nwhatever you do with it, don't blame me if you used it to get the fd of\na stream, close it yourself and expect things to Just Work.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/unix/core.c||src/unix/core.c",
          "src/win/core.c||src/win/core.c",
          "test/test-handle-fileno.c||test/test-handle-fileno.c",
          "test/test-list.h||test/test-list.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:                          test/test-getaddrinfo.c \\",
          "143:                          test/test-getnameinfo.c \\",
          "144:                          test/test-getsockname.c \\",
          "145:                          test/test-hrtime.c \\",
          "146:                          test/test-idle.c \\",
          "147:                          test/test-ip4-addr.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:                          test/test-handle-fileno.c \\",
          "",
          "---------------"
        ],
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: typedef int uv_file;",
          "127: typedef int uv_os_sock_t;",
          "129: #define UV_ONCE_INIT PTHREAD_ONCE_INIT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: typedef int uv_os_fd_t;",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: } uv_buf_t;",
          "231: typedef int uv_file;",
          "233: typedef SOCKET uv_os_sock_t;",
          "235: typedef HANDLE uv_thread_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: typedef HANDLE uv_os_fd_t;",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "616: UV_EXTERN int uv_recv_buffer_size(uv_handle_t* handle, int* value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618: UV_EXTERN int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd);",
          "",
          "---------------"
        ],
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662: }",
          "665: static void uv__run_pending(uv_loop_t* loop) {",
          "666:   QUEUE* q;",
          "667:   uv__io_t* w;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665: int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd) {",
          "666:   int fd_out;",
          "668:   switch (handle->type) {",
          "669:   case UV_TCP:",
          "670:   case UV_NAMED_PIPE:",
          "671:   case UV_TTY:",
          "672:     fd_out = uv__stream_fd((uv_stream_t*) handle);",
          "673:     break;",
          "675:   case UV_UDP:",
          "676:     fd_out = ((uv_udp_t *) handle)->io_watcher.fd;",
          "677:     break;",
          "679:   case UV_POLL:",
          "680:     fd_out = ((uv_poll_t *) handle)->io_watcher.fd;",
          "681:     break;",
          "683:   default:",
          "684:     return -EINVAL;",
          "685:   }",
          "687:   if (uv__is_closing(handle) || fd_out == -1)",
          "688:     return -EBADF;",
          "691:   return 0;",
          "692: }",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   return r;",
          "430: }",
          "432: int uv__socket_sockopt(uv_handle_t* handle, int optname, int* value) {",
          "433:   int r;",
          "434:   int len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd) {",
          "434:   uv_os_fd_t fd_out;",
          "436:   switch (handle->type) {",
          "437:   case UV_TCP:",
          "438:     fd_out = (uv_os_fd_t)((uv_tcp_t*) handle)->socket;",
          "439:     break;",
          "441:   case UV_NAMED_PIPE:",
          "442:     fd_out = ((uv_pipe_t*) handle)->handle;",
          "443:     break;",
          "445:   case UV_TTY:",
          "446:     fd_out = ((uv_tty_t*) handle)->handle;",
          "447:     break;",
          "449:   case UV_UDP:",
          "450:     fd_out = (uv_os_fd_t)((uv_udp_t*) handle)->socket;",
          "451:     break;",
          "453:   case UV_POLL:",
          "454:     fd_out = (uv_os_fd_t)((uv_poll_t*) handle)->socket;",
          "455:     break;",
          "457:   default:",
          "458:     return UV_EINVAL;",
          "459:   }",
          "461:   if (uv_is_closing(handle) || fd_out == INVALID_HANDLE_VALUE)",
          "462:     return UV_EBADF;",
          "465:   return 0;",
          "466: }",
          "",
          "---------------"
        ],
        "test/test-handle-fileno.c||test/test-handle-fileno.c": [
          "File: test/test-handle-fileno.c -> test/test-handle-fileno.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "26: static int get_tty_fd(void) {",
          "28: #ifdef _WIN32",
          "29:   HANDLE handle;",
          "30:   handle = CreateFileA(\"conout$\",",
          "31:                        GENERIC_READ | GENERIC_WRITE,",
          "32:                        FILE_SHARE_READ | FILE_SHARE_WRITE,",
          "33:                        NULL,",
          "34:                        OPEN_EXISTING,",
          "35:                        FILE_ATTRIBUTE_NORMAL,",
          "36:                        NULL);",
          "37:   if (handle == INVALID_HANDLE_VALUE)",
          "38:     return -1;",
          "39:   return _open_osfhandle((intptr_t) handle, 0);",
          "41:   return open(\"/dev/tty\", O_RDONLY, 0);",
          "42: #endif",
          "43: }",
          "46: TEST_IMPL(handle_fileno) {",
          "47:   int r;",
          "48:   int tty_fd;",
          "49:   struct sockaddr_in addr;",
          "50:   uv_os_fd_t fd;",
          "51:   uv_tcp_t tcp;",
          "52:   uv_udp_t udp;",
          "53:   uv_pipe_t pipe;",
          "54:   uv_tty_t tty;",
          "55:   uv_idle_t idle;",
          "56:   uv_loop_t* loop;",
          "58:   loop = uv_default_loop();",
          "59:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "61:   r = uv_idle_init(loop, &idle);",
          "62:   ASSERT(r == 0);",
          "63:   r = uv_fileno((uv_handle_t*) &idle, &fd);",
          "64:   ASSERT(r == UV_EINVAL);",
          "65:   uv_close((uv_handle_t*) &idle, NULL);",
          "67:   r = uv_tcp_init(loop, &tcp);",
          "68:   ASSERT(r == 0);",
          "69:   r = uv_fileno((uv_handle_t*) &tcp, &fd);",
          "70:   ASSERT(r == UV_EBADF);",
          "71:   r = uv_tcp_bind(&tcp, (const struct sockaddr*) &addr, 0);",
          "72:   ASSERT(r == 0);",
          "73:   r = uv_fileno((uv_handle_t*) &tcp, &fd);",
          "74:   ASSERT(r == 0);",
          "75:   uv_close((uv_handle_t*) &tcp, NULL);",
          "76:   r = uv_fileno((uv_handle_t*) &tcp, &fd);",
          "77:   ASSERT(r == UV_EBADF);",
          "79:   r = uv_udp_init(loop, &udp);",
          "80:   ASSERT(r == 0);",
          "81:   r = uv_fileno((uv_handle_t*) &udp, &fd);",
          "82:   ASSERT(r == UV_EBADF);",
          "83:   r = uv_udp_bind(&udp, (const struct sockaddr*) &addr, 0);",
          "84:   ASSERT(r == 0);",
          "85:   r = uv_fileno((uv_handle_t*) &udp, &fd);",
          "86:   ASSERT(r == 0);",
          "87:   uv_close((uv_handle_t*) &udp, NULL);",
          "88:   r = uv_fileno((uv_handle_t*) &udp, &fd);",
          "89:   ASSERT(r == UV_EBADF);",
          "91:   r = uv_pipe_init(loop, &pipe, 0);",
          "92:   ASSERT(r == 0);",
          "93:   r = uv_fileno((uv_handle_t*) &pipe, &fd);",
          "94:   ASSERT(r == UV_EBADF);",
          "95:   r = uv_pipe_bind(&pipe, TEST_PIPENAME);",
          "96:   ASSERT(r == 0);",
          "97:   r = uv_fileno((uv_handle_t*) &pipe, &fd);",
          "98:   ASSERT(r == 0);",
          "99:   uv_close((uv_handle_t*) &pipe, NULL);",
          "100:   r = uv_fileno((uv_handle_t*) &pipe, &fd);",
          "101:   ASSERT(r == UV_EBADF);",
          "103:   tty_fd = get_tty_fd();",
          "104:   if (tty_fd < 0) {",
          "105:     LOGF(\"Cannot open a TTY fd\");",
          "106:   } else {",
          "107:     r = uv_tty_init(loop, &tty, tty_fd, 0);",
          "108:     ASSERT(r == 0);",
          "109:     r = uv_fileno((uv_handle_t*) &tty, &fd);",
          "110:     ASSERT(r == 0);",
          "111:     uv_close((uv_handle_t*) &tty, NULL);",
          "112:     r = uv_fileno((uv_handle_t*) &tty, &fd);",
          "113:     ASSERT(r == UV_EBADF);",
          "114:   }",
          "116:   uv_run(loop, UV_RUN_DEFAULT);",
          "118:   MAKE_VALGRIND_HAPPY();",
          "119:   return 0;",
          "120: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: TEST_DECLARE   (process_title)",
          "173: TEST_DECLARE   (cwd_and_chdir)",
          "174: TEST_DECLARE   (get_memory)",
          "175: TEST_DECLARE   (hrtime)",
          "176: TEST_DECLARE   (getaddrinfo_fail)",
          "177: TEST_DECLARE   (getaddrinfo_basic)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: TEST_DECLARE   (handle_fileno)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:   TEST_ENTRY  (get_loadavg)",
          "506:   TEST_ENTRY  (hrtime)",
          "508:   TEST_ENTRY_CUSTOM (getaddrinfo_fail, 0, 0, 10000)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:   TEST_ENTRY  (handle_fileno)",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:         'test/test-getaddrinfo.c',",
          "322:         'test/test-getnameinfo.c',",
          "323:         'test/test-getsockname.c',",
          "324:         'test/test-hrtime.c',",
          "325:         'test/test-idle.c',",
          "326:         'test/test-ip6-addr.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:         'test/test-handle-fileno.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ff6f85f5872c5096d05d7da52900f68383b8f90",
      "candidate_info": {
        "commit_hash": "5ff6f85f5872c5096d05d7da52900f68383b8f90",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5ff6f85f5872c5096d05d7da52900f68383b8f90",
        "files": [
          "src/unix/darwin-proctitle.c"
        ],
        "message": "darwin: call pthread_setname_np() if available\n\nWhen setting the process title, also call pthread_setname_np() when\nsupported (OS X >= 10.6 and iOS >= 3.2.)",
        "before_after_code_files": [
          "src/unix/darwin-proctitle.c||src/unix/darwin-proctitle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/darwin-proctitle.c||src/unix/darwin-proctitle.c": [
          "File: src/unix/darwin-proctitle.c -> src/unix/darwin-proctitle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <TargetConditionals.h>",
          "23: #if !TARGET_OS_IPHONE",
          "24: # include <CoreFoundation/CoreFoundation.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <dlfcn.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: #endif",
          "29: int uv__set_process_title(const char* title) {",
          "30: #if TARGET_OS_IPHONE",
          "32: #else",
          "33:   typedef CFTypeRef (*LSGetCurrentApplicationASNType)(void);",
          "34:   typedef OSStatus (*LSSetApplicationInformationItemType)(int,",
          "",
          "[Removed Lines]",
          "31:   return -ENOSYS;",
          "",
          "[Added Lines]",
          "30: static int uv__pthread_setname_np(const char* name) {",
          "31:   int (*dynamic_pthread_setname_np)(const char* name);",
          "33:   int err;",
          "36:   dynamic_pthread_setname_np = dlsym(RTLD_DEFAULT, \"pthread_setname_np\");",
          "37:   if (dynamic_pthread_setname_np == NULL)",
          "38:     return -ENOSYS;",
          "40:   strncpy(namebuf, name, sizeof(namebuf) - 1);",
          "41:   namebuf[sizeof(namebuf) - 1] = '\\0';",
          "43:   err = dynamic_pthread_setname_np(namebuf);",
          "44:   if (err)",
          "45:     return -err;",
          "47:   return 0;",
          "48: }",
          "53:   return uv__pthread_setname_np(title);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "886e2bcd55f974198832cb0887f9521fdd7a8b9e",
      "candidate_info": {
        "commit_hash": "886e2bcd55f974198832cb0887f9521fdd7a8b9e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/886e2bcd55f974198832cb0887f9521fdd7a8b9e",
        "files": [
          "include/uv.h",
          "src/unix/tcp.c",
          "src/win/tcp.c"
        ],
        "message": "unix, windows: pass const handle ptr to uv_tcp_get*name\n\nuv_tcp_getsockname and uv_tcp_getpeername do not modify passed handle\npointer, so there is no need to keep this parameter non-const.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/tcp.c||src/unix/tcp.c",
          "src/win/tcp.c||src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "809: UV_EXTERN int uv_tcp_bind(uv_tcp_t* handle,",
          "810:                           const struct sockaddr* addr,",
          "811:                           unsigned int flags);",
          "",
          "[Removed Lines]",
          "812: UV_EXTERN int uv_tcp_getsockname(uv_tcp_t* handle, struct sockaddr* name,",
          "813:     int* namelen);",
          "814: UV_EXTERN int uv_tcp_getpeername(uv_tcp_t* handle, struct sockaddr* name,",
          "815:     int* namelen);",
          "",
          "[Added Lines]",
          "812: UV_EXTERN int uv_tcp_getsockname(const uv_tcp_t* handle,",
          "813:                                  struct sockaddr* name,",
          "814:                                  int* namelen);",
          "815: UV_EXTERN int uv_tcp_getpeername(const uv_tcp_t* handle,",
          "816:                                  struct sockaddr* name,",
          "817:                                  int* namelen);",
          "",
          "---------------"
        ],
        "src/unix/tcp.c||src/unix/tcp.c": [
          "File: src/unix/tcp.c -> src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: }",
          "162:                        struct sockaddr* name,",
          "163:                        int* namelen) {",
          "164:   socklen_t socklen;",
          "",
          "[Removed Lines]",
          "161: int uv_tcp_getsockname(uv_tcp_t* handle,",
          "",
          "[Added Lines]",
          "161: int uv_tcp_getsockname(const uv_tcp_t* handle,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180: }",
          "184:                        struct sockaddr* name,",
          "185:                        int* namelen) {",
          "186:   socklen_t socklen;",
          "",
          "[Removed Lines]",
          "183: int uv_tcp_getpeername(uv_tcp_t* handle,",
          "",
          "[Added Lines]",
          "183: int uv_tcp_getpeername(const uv_tcp_t* handle,",
          "",
          "---------------"
        ],
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: }",
          "752:   int result;",
          "754:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "",
          "[Removed Lines]",
          "750: int uv_tcp_getsockname(uv_tcp_t* handle, struct sockaddr* name,",
          "751:     int* namelen) {",
          "",
          "[Added Lines]",
          "750: int uv_tcp_getsockname(const uv_tcp_t* handle,",
          "751:                        struct sockaddr* name,",
          "752:                        int* namelen) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "768: }",
          "773:   int result;",
          "775:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "",
          "[Removed Lines]",
          "771: int uv_tcp_getpeername(uv_tcp_t* handle, struct sockaddr* name,",
          "772:     int* namelen) {",
          "",
          "[Added Lines]",
          "772: int uv_tcp_getpeername(const uv_tcp_t* handle,",
          "773:                        struct sockaddr* name,",
          "774:                        int* namelen) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "342e8c0dac61b955be605ed5f26a8bb52d0774fd",
      "candidate_info": {
        "commit_hash": "342e8c0dac61b955be605ed5f26a8bb52d0774fd",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/342e8c0dac61b955be605ed5f26a8bb52d0774fd",
        "files": [
          "src/unix/tty.c"
        ],
        "message": "unix: fallback to blocking writes if reopening a tty fails\n\nIn case reopening the file descriptor fails, fallback to the old\nbehavior where we do blocking writes, to avoid disrupting other\nprocesses potentially using the file descriptor.",
        "before_after_code_files": [
          "src/unix/tty.c||src/unix/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/tty.c||src/unix/tty.c": [
          "File: src/unix/tty.c -> src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   int newfd;",
          "40:   int r;",
          "42:   newfd = -1;",
          "44:   uv__stream_init(loop, (uv_stream_t*) tty, UV_TTY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   flags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   if (isatty(fd)) {",
          "62:     r = uv__dup2_cloexec(newfd, fd);",
          "63:     if (r < 0 && r != -EINVAL) {",
          "",
          "[Removed Lines]",
          "57:     newfd = uv__open_cloexec(\"/dev/tty\", O_RDWR);",
          "59:     if (newfd < 0)",
          "",
          "[Added Lines]",
          "58:     r = uv__open_cloexec(\"/dev/tty\", O_RDWR);",
          "60:     if (r < 0) {",
          "62:       if (!readable)",
          "63:         flags |= UV_STREAM_BLOCKING;",
          "64:       goto skip;",
          "65:     }",
          "67:     newfd = r;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     fd = newfd;",
          "73:   }",
          "75: #if defined(__APPLE__)",
          "76:   r = uv__stream_try_select((uv_stream_t*) tty, &fd);",
          "77:   if (r) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: skip:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82: #endif",
          "84:   if (readable)",
          "86:   else",
          "90:   uv__stream_open((uv_stream_t*) tty, fd, flags);",
          "91:   tty->mode = 0;",
          "",
          "[Removed Lines]",
          "85:     flags = UV_STREAM_READABLE;",
          "87:     flags = UV_STREAM_WRITABLE;",
          "89:   uv__nonblock(fd, 1);",
          "",
          "[Added Lines]",
          "93:     flags |= UV_STREAM_READABLE;",
          "95:     flags |= UV_STREAM_WRITABLE;",
          "97:   if (!(flags & UV_STREAM_BLOCKING))",
          "98:     uv__nonblock(fd, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}