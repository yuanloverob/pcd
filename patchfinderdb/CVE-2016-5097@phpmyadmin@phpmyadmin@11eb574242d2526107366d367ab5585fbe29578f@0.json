{
  "cve_id": "CVE-2016-5097",
  "cve_desc": "phpMyAdmin before 4.6.2 places tokens in query strings and does not arrange for them to be stripped before external navigation, which allows remote attackers to obtain sensitive information by reading (1) HTTP requests or (2) server logs.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "11eb574242d2526107366d367ab5585fbe29578f",
  "patch_info": {
    "commit_hash": "11eb574242d2526107366d367ab5585fbe29578f",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/11eb574242d2526107366d367ab5585fbe29578f",
    "files": [
      "ChangeLog",
      "libraries/navigation/NavigationHeader.php",
      "libraries/plugins/AuthenticationPlugin.php",
      "libraries/plugins/auth/AuthenticationCookie.php",
      "libraries/plugins/auth/AuthenticationHttp.php",
      "libraries/plugins/auth/AuthenticationSignon.php",
      "logout.php",
      "test/classes/plugin/auth/AuthenticationCookieTest.php",
      "test/classes/plugin/auth/AuthenticationHttpTest.php",
      "test/classes/plugin/auth/AuthenticationSignonTest.php"
    ],
    "message": "Improve handling of logout\n\n- add separate script for handling logout\n- no longer require old_usr for all authentication methods\n  (this avoids potential information leak)\n- require valid token for logout\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
    "before_after_code_files": [
      "libraries/navigation/NavigationHeader.php||libraries/navigation/NavigationHeader.php",
      "libraries/plugins/AuthenticationPlugin.php||libraries/plugins/AuthenticationPlugin.php",
      "libraries/plugins/auth/AuthenticationCookie.php||libraries/plugins/auth/AuthenticationCookie.php",
      "libraries/plugins/auth/AuthenticationHttp.php||libraries/plugins/auth/AuthenticationHttp.php",
      "libraries/plugins/auth/AuthenticationSignon.php||libraries/plugins/auth/AuthenticationSignon.php",
      "logout.php||logout.php",
      "test/classes/plugin/auth/AuthenticationCookieTest.php||test/classes/plugin/auth/AuthenticationCookieTest.php",
      "test/classes/plugin/auth/AuthenticationHttpTest.php||test/classes/plugin/auth/AuthenticationHttpTest.php",
      "test/classes/plugin/auth/AuthenticationSignonTest.php||test/classes/plugin/auth/AuthenticationSignonTest.php"
    ]
  },
  "patch_diff": {
    "libraries/navigation/NavigationHeader.php||libraries/navigation/NavigationHeader.php": [
      "File: libraries/navigation/NavigationHeader.php -> libraries/navigation/NavigationHeader.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "167:         if ($GLOBALS['server'] != 0) {",
      "169:             if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {",
      "172:                 $retval .= PMA\\libraries\\Util::getNavigationLink(",
      "173:                     $link,",
      "174:                     $showText,",
      "",
      "[Removed Lines]",
      "170:                 $link = 'index.php' . $GLOBALS['url_query'];",
      "171:                 $link .= '&amp;old_usr=' . urlencode($GLOBALS['PHP_AUTH_USER']);",
      "",
      "[Added Lines]",
      "170:                 $link = 'logout.php' . $GLOBALS['url_query'];",
      "",
      "---------------"
    ],
    "libraries/plugins/AuthenticationPlugin.php||libraries/plugins/AuthenticationPlugin.php": [
      "File: libraries/plugins/AuthenticationPlugin.php -> libraries/plugins/AuthenticationPlugin.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     abstract public function authFails();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60:     public function logOut()",
      "61:     {",
      "62:         global $PHP_AUTH_USER, $PHP_AUTH_PW;",
      "65:         if (! empty($GLOBALS['cfg']['Server']['LogoutURL'])) {",
      "66:             $redirect_url = $GLOBALS['cfg']['Server']['LogoutURL'];",
      "67:         } else {",
      "68:             $redirect_url = $this->getLoginFormURL();",
      "69:         }",
      "72:         $PHP_AUTH_USER = '';",
      "73:         $PHP_AUTH_PW = '';",
      "76:         $_SESSION = array();",
      "77:         if (!defined('TESTSUITE')) {",
      "78:             session_destroy();",
      "79:         }",
      "82:         PMA_sendHeaderLocation($redirect_url);",
      "83:     }",
      "90:     public function getLoginFormURL()",
      "91:     {",
      "92:         return './index.php';",
      "93:     }",
      "",
      "---------------"
    ],
    "libraries/plugins/auth/AuthenticationCookie.php||libraries/plugins/auth/AuthenticationCookie.php": [
      "File: libraries/plugins/auth/AuthenticationCookie.php -> libraries/plugins/auth/AuthenticationCookie.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:             }",
      "68:         }",
      "84:         if ($GLOBALS['cfg']['LoginCookieRecall']",
      "",
      "[Removed Lines]",
      "71:         if (! empty($_REQUEST['old_usr'])",
      "72:             && ! empty($GLOBALS['cfg']['Server']['LogoutURL'])",
      "73:         ) {",
      "74:             PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);",
      "75:             if (defined('TESTSUITE')) {",
      "76:                 return true;",
      "77:             } else {",
      "78:                 exit;",
      "79:             }",
      "80:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         }",
      "326:         if (! empty($_REQUEST['pma_username'])) {",
      "",
      "[Removed Lines]",
      "298:         if (! empty($_REQUEST['old_usr'])) {",
      "305:             if (! defined('TESTSUITE')) {",
      "306:                 session_destroy();",
      "307:             }",
      "309:             if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {",
      "310:                 foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {",
      "311:                     $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);",
      "312:                     if (isset($_COOKIE['pmaPass-' . $key])) {",
      "313:                         unset($_COOKIE['pmaPass-' . $key]);",
      "314:                     }",
      "315:                 }",
      "316:             } else {",
      "317:                 $GLOBALS['PMA_Config']->removeCookie(",
      "318:                     'pmaPass-' . $GLOBALS['server']",
      "319:                 );",
      "320:                 if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {",
      "321:                     unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);",
      "322:                 }",
      "323:             }",
      "324:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "831:     {",
      "832:         $this->storePasswordCookie($password);",
      "833:     }",
      "834: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "800:     public function logOut()",
      "801:     {",
      "803:         if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {",
      "804:             foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {",
      "805:                 $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);",
      "806:                 if (isset($_COOKIE['pmaPass-' . $key])) {",
      "807:                     unset($_COOKIE['pmaPass-' . $key]);",
      "808:                 }",
      "809:             }",
      "810:         } else {",
      "811:             $GLOBALS['PMA_Config']->removeCookie(",
      "812:                 'pmaPass-' . $GLOBALS['server']",
      "813:             );",
      "814:             if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {",
      "815:                 unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);",
      "816:             }",
      "817:         }",
      "818:         parent::logOut();",
      "819:     }",
      "",
      "---------------"
    ],
    "libraries/plugins/auth/AuthenticationHttp.php||libraries/plugins/auth/AuthenticationHttp.php": [
      "File: libraries/plugins/auth/AuthenticationHttp.php -> libraries/plugins/auth/AuthenticationHttp.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:     public function authForm()",
      "51:     {",
      "64:         if (empty($GLOBALS['cfg']['Server']['auth_http_realm'])) {",
      "65:             if (empty($GLOBALS['cfg']['Server']['verbose'])) {",
      "66:                 $server_message = $GLOBALS['cfg']['Server']['host'];",
      "",
      "[Removed Lines]",
      "53:         if (!empty($_REQUEST['old_usr'])",
      "54:             && !empty($GLOBALS['cfg']['Server']['LogoutURL'])",
      "55:         ) {",
      "56:             PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);",
      "57:             if (!defined('TESTSUITE')) {",
      "58:                 exit;",
      "59:             } else {",
      "60:                 return false;",
      "61:             }",
      "62:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "263:         return true;",
      "264:     }",
      "265: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "259:     public function getLoginFormURL()",
      "260:     {",
      "261:         return './index.php?old_usr=' . $GLOBALS['PHP_AUTH_USER'];",
      "262:     }",
      "",
      "---------------"
    ],
    "libraries/plugins/auth/AuthenticationSignon.php||libraries/plugins/auth/AuthenticationSignon.php": [
      "File: libraries/plugins/auth/AuthenticationSignon.php -> libraries/plugins/auth/AuthenticationSignon.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:         unset($_SESSION['LAST_SIGNON_URL']);",
      "29:         if (empty($GLOBALS['cfg']['Server']['SignonURL'])) {",
      "30:             PMA_fatalError('You must set SignonURL!');",
      "36:         } else {",
      "37:             PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['SignonURL']);",
      "38:         }",
      "",
      "[Removed Lines]",
      "31:         } elseif (!empty($_REQUEST['old_usr'])",
      "32:             && !empty($GLOBALS['cfg']['Server']['LogoutURL'])",
      "33:         ) {",
      "35:             PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:         $single_signon_cfgupdate = array();",
      "89:         if (!empty($script_name)) {",
      "90:             if (!file_exists($script_name)) {",
      "",
      "[Removed Lines]",
      "86:         $do_logout = !empty($_REQUEST['old_usr']);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "119:             if (isset($_SESSION['PMA_single_signon_user'])) {",
      "125:             }",
      "126:             if (isset($_SESSION['PMA_single_signon_password'])) {",
      "132:             }",
      "133:             if (isset($_SESSION['PMA_single_signon_host'])) {",
      "134:                 $single_signon_host = $_SESSION['PMA_single_signon_host'];",
      "",
      "[Removed Lines]",
      "120:                 if ($do_logout) {",
      "121:                     $PHP_AUTH_USER = '';",
      "122:                 } else {",
      "123:                     $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];",
      "124:                 }",
      "127:                 if ($do_logout) {",
      "128:                     $PHP_AUTH_PW = '';",
      "129:                 } else {",
      "130:                     $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];",
      "131:                 }",
      "",
      "[Added Lines]",
      "112:                 $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];",
      "115:                 $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];",
      "",
      "---------------"
    ],
    "logout.php||logout.php": [
      "File: logout.php -> logout.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "8: require_once 'libraries/common.inc.php';",
      "10: if ($token_mismatch) {",
      "11:     PMA_sendHeaderLocation('./index.php');",
      "12: } else {",
      "13:     $auth_plugin->logOut();",
      "14: }",
      "",
      "---------------"
    ],
    "test/classes/plugin/auth/AuthenticationCookieTest.php||test/classes/plugin/auth/AuthenticationCookieTest.php": [
      "File: test/classes/plugin/auth/AuthenticationCookieTest.php -> test/classes/plugin/auth/AuthenticationCookieTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "374:     public function testAuthHeader()",
      "375:     {",
      "376:         $restoreInstance = PMA\\libraries\\Response::getInstance();",
      "378:         $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "376:         $GLOBALS['cfg']['LoginCookieDeleteAll'] = false;",
      "377:         $GLOBALS['cfg']['Servers'] = array(1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "380:             ->setMethods(array('isAjax', 'headersSent', 'header'))",
      "381:             ->getMock();",
      "388:         $mockResponse->expects($this->any())",
      "389:             ->method('headersSent')",
      "390:             ->with()",
      "",
      "[Removed Lines]",
      "383:         $mockResponse->expects($this->once())",
      "384:             ->method('isAjax')",
      "385:             ->with()",
      "386:             ->will($this->returnValue(false));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "398:         $attrInstance->setAccessible(true);",
      "399:         $attrInstance->setValue($mockResponse);",
      "402:         $GLOBALS['cfg']['Server']['LogoutURL'] = 'http://www.phpmyadmin.net/logout';",
      "408:         $attrInstance->setValue($restoreInstance);",
      "409:     }",
      "",
      "[Removed Lines]",
      "401:         $_REQUEST['old_usr'] = 'user1';",
      "404:         $this->assertTrue(",
      "405:             $this->object->auth()",
      "406:         );",
      "",
      "[Added Lines]",
      "401:         $this->object->logOut();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "455:     public function testLogoutDelete()",
      "456:     {",
      "457:         $GLOBALS['cfg']['Server']['auth_swekey_config'] = '';",
      "458:         $GLOBALS['cfg']['CaptchaLoginPrivateKey'] = '';",
      "459:         $GLOBALS['cfg']['CaptchaLoginPublicKey'] = '';",
      "461:         $GLOBALS['cfg']['LoginCookieDeleteAll'] = true;",
      "462:         $GLOBALS['cfg']['Servers'] = array(1);",
      "464:         $_COOKIE['pmaPass-0'] = 'test';",
      "468:         $this->assertFalse(",
      "469:             isset($_COOKIE['pmaPass-0'])",
      "470:         );",
      "471:     }",
      "",
      "[Removed Lines]",
      "460:         $_REQUEST['old_usr'] = 'pmaolduser';",
      "466:         $this->object->authCheck();",
      "",
      "[Added Lines]",
      "452:         $restoreInstance = PMA\\libraries\\Response::getInstance();",
      "454:         $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')",
      "455:             ->disableOriginalConstructor()",
      "456:             ->setMethods(array('isAjax', 'headersSent', 'header'))",
      "457:             ->getMock();",
      "459:         $mockResponse->expects($this->any())",
      "460:             ->method('headersSent')",
      "461:             ->with()",
      "462:             ->will($this->returnValue(false));",
      "464:         $mockResponse->expects($this->once())",
      "465:             ->method('header')",
      "466:             ->with('Location: ./index.php' . ((SID) ? '?' . SID : ''));",
      "468:         $attrInstance = new ReflectionProperty('PMA\\libraries\\Response', '_instance');",
      "469:         $attrInstance->setAccessible(true);",
      "470:         $attrInstance->setValue($mockResponse);",
      "480:         $this->object->logOut();",
      "485:         $attrInstance->setValue($restoreInstance);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "478:     public function testLogout()",
      "479:     {",
      "480:         $GLOBALS['cfg']['Server']['auth_swekey_config'] = '';",
      "481:         $GLOBALS['cfg']['CaptchaLoginPrivateKey'] = '';",
      "482:         $GLOBALS['cfg']['CaptchaLoginPublicKey'] = '';",
      "484:         $GLOBALS['cfg']['LoginCookieDeleteAll'] = false;",
      "485:         $GLOBALS['cfg']['Servers'] = array(1);",
      "486:         $GLOBALS['server'] = 1;",
      "488:         $_COOKIE['pmaPass-1'] = 'test';",
      "492:         $this->assertFalse(",
      "493:             isset($_COOKIE['pmaPass-1'])",
      "494:         );",
      "495:     }",
      "",
      "[Removed Lines]",
      "483:         $_REQUEST['old_usr'] = 'pmaolduser';",
      "490:         $this->object->authCheck();",
      "",
      "[Added Lines]",
      "495:         $restoreInstance = PMA\\libraries\\Response::getInstance();",
      "497:         $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')",
      "498:             ->disableOriginalConstructor()",
      "499:             ->setMethods(array('isAjax', 'headersSent', 'header'))",
      "500:             ->getMock();",
      "502:         $mockResponse->expects($this->any())",
      "503:             ->method('headersSent')",
      "504:             ->with()",
      "505:             ->will($this->returnValue(false));",
      "507:         $mockResponse->expects($this->once())",
      "508:             ->method('header')",
      "509:             ->with('Location: ./index.php' . ((SID) ? '?' . SID : ''));",
      "511:         $attrInstance = new ReflectionProperty('PMA\\libraries\\Response', '_instance');",
      "512:         $attrInstance->setAccessible(true);",
      "513:         $attrInstance->setValue($mockResponse);",
      "523:         $this->object->logOut();",
      "528:         $attrInstance->setValue($restoreInstance);",
      "",
      "---------------"
    ],
    "test/classes/plugin/auth/AuthenticationHttpTest.php||test/classes/plugin/auth/AuthenticationHttpTest.php": [
      "File: test/classes/plugin/auth/AuthenticationHttpTest.php -> test/classes/plugin/auth/AuthenticationHttpTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "123:         call_user_func_array(array($header_method, 'withConsecutive'), $headers);",
      "125:         try {",
      "129:         } finally {",
      "130:             $attrInstance->setValue($restoreInstance);",
      "131:         }",
      "",
      "[Removed Lines]",
      "126:             $this->assertFalse(",
      "127:                 $this->object->auth()",
      "128:             );",
      "",
      "[Added Lines]",
      "126:             if (!empty($_REQUEST['old_usr'])) {",
      "127:                 $this->object->logOut();",
      "128:             } else {",
      "129:                 $this->assertFalse(",
      "130:                     $this->object->auth()",
      "131:                 );",
      "132:             }",
      "",
      "---------------"
    ],
    "test/classes/plugin/auth/AuthenticationSignonTest.php||test/classes/plugin/auth/AuthenticationSignonTest.php": [
      "File: test/classes/plugin/auth/AuthenticationSignonTest.php -> test/classes/plugin/auth/AuthenticationSignonTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:         $GLOBALS['cfg']['Server']['SignonURL'] = 'http://phpmyadmin.net/SignonURL';",
      "77:         $GLOBALS['cfg']['Server']['LogoutURL'] = 'http://phpmyadmin.net/logoutURL';",
      "81:         $this->assertContains(",
      "82:             'Location: http://phpmyadmin.net/logoutURL?PHPSESSID=',",
      "",
      "[Removed Lines]",
      "76:         $_REQUEST['old_usr'] = 'oldUser';",
      "79:         $this->object->auth();",
      "",
      "[Added Lines]",
      "78:         $this->object->logOut();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:         $GLOBALS['header'] = array();",
      "89:         $GLOBALS['cfg']['Server']['SignonURL'] = 'http://phpmyadmin.net/SignonURL';",
      "91:         $GLOBALS['cfg']['Server']['LogoutURL'] = '';",
      "95:         $this->assertContains(",
      "96:             'Location: http://phpmyadmin.net/SignonURL?PHPSESSID=',",
      "",
      "[Removed Lines]",
      "90:         $_REQUEST['old_usr'] = '';",
      "93:         $this->object->auth();",
      "",
      "[Added Lines]",
      "91:         $this->object->logOut();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "156:     public function testAuthCheckToken()",
      "157:     {",
      "158:         $GLOBALS['cfg']['Server']['SignonURL'] = 'http://phpmyadmin.net/SignonURL';",
      "159:         $GLOBALS['cfg']['Server']['SignonSession'] = 'session123';",
      "160:         $GLOBALS['cfg']['Server']['host'] = 'localhost';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156:         $restoreInstance = PMA\\libraries\\Response::getInstance();",
      "158:         $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')",
      "159:             ->disableOriginalConstructor()",
      "160:             ->setMethods(array('isAjax', 'headersSent', 'header'))",
      "161:             ->getMock();",
      "163:         $mockResponse->expects($this->any())",
      "164:             ->method('headersSent')",
      "165:             ->with()",
      "166:             ->will($this->returnValue(false));",
      "168:         $mockResponse->expects($this->once())",
      "169:             ->method('header')",
      "170:             ->with('Location: ./index.php' . ((SID) ? '?' . SID : ''));",
      "172:         $attrInstance = new ReflectionProperty('PMA\\libraries\\Response', '_instance');",
      "173:         $attrInstance->setAccessible(true);",
      "174:         $attrInstance->setValue($mockResponse);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "162:         $GLOBALS['cfg']['Server']['user'] = 'user';",
      "163:         $GLOBALS['cfg']['Server']['SignonScript'] = '';",
      "164:         $_COOKIE['session123'] = true;",
      "166:         $_SESSION['PMA_single_signon_user'] = 'user123';",
      "167:         $_SESSION['PMA_single_signon_password'] = 'pass123';",
      "168:         $_SESSION['PMA_single_signon_host'] = 'local';",
      "",
      "[Removed Lines]",
      "165:         $_REQUEST['old_usr'] = 'oldUser';",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "172:         $sessionName = session_name();",
      "173:         $sessionID = session_id();",
      "179:         $this->assertEquals(",
      "180:             array(",
      "181:                 'SignonURL' => 'http://phpmyadmin.net/SignonURL',",
      "182:                 'SignonScript' => '',",
      "183:                 'SignonSession' => 'session123',",
      "186:                 'user' => 'user',",
      "188:             ),",
      "189:             $GLOBALS['cfg']['Server']",
      "190:         );",
      "197:         $this->assertEquals(",
      "198:             $sessionName,",
      "199:             session_name()",
      "",
      "[Removed Lines]",
      "175:         $this->assertFalse(",
      "176:             $this->object->authCheck()",
      "177:         );",
      "184:                 'host' => 'local',",
      "185:                 'port' => '12',",
      "187:                 'foo' => 'bar'",
      "192:         $this->assertEquals(",
      "193:             'pmaToken',",
      "194:             $_SESSION[' PMA_token ']",
      "195:         );",
      "",
      "[Added Lines]",
      "192:         $this->object->logOut();",
      "199:                 'host' => 'localhost',",
      "200:                 'port' => '80',",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "207:         $this->assertFalse(",
      "208:             isset($_SESSION['LAST_SIGNON_URL'])",
      "209:         );",
      "210:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219:         $attrInstance->setValue($restoreInstance);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "761281f70ca82a83174d0d50ce57155bd33f75f5",
      "candidate_info": {
        "commit_hash": "761281f70ca82a83174d0d50ce57155bd33f75f5",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/761281f70ca82a83174d0d50ce57155bd33f75f5",
        "files": [
          "logout.php"
        ],
        "message": "Logout only on POST request\n\nIssue #12524\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
        "before_after_code_files": [
          "logout.php||logout.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "logout.php||logout.php"
          ],
          "candidate": [
            "logout.php||logout.php"
          ]
        }
      },
      "candidate_diff": {
        "logout.php||logout.php": [
          "File: logout.php -> logout.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: require_once 'libraries/common.inc.php';",
          "11:     PMA_sendHeaderLocation('./index.php');",
          "12: } else {",
          "13:     $auth_plugin->logOut();",
          "",
          "[Removed Lines]",
          "10: if ($token_mismatch) {",
          "",
          "[Added Lines]",
          "10: if ($_SERVER['REQUEST_METHOD'] != 'POST' || $token_mismatch) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}