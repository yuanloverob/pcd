{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fc4fc96339bdfd47146749c5434e62fac5f7df9a",
      "candidate_info": {
        "commit_hash": "fc4fc96339bdfd47146749c5434e62fac5f7df9a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/fc4fc96339bdfd47146749c5434e62fac5f7df9a",
        "files": [
          "main/SQLHelper.cpp",
          "main/WebServer.cpp",
          "main/WebServer.h",
          "www/app/UserVariablesController.js",
          "www/views/uservariables.html"
        ],
        "message": "UserVariable refactoring",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/WebServer.h||main/WebServer.h",
          "www/app/UserVariablesController.js||www/app/UserVariablesController.js",
          "www/views/uservariables.html||www/views/uservariables.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7916:  safe_query(\"INSERT INTO UserVariables (Name,ValueType,Value) VALUES ('%q','%d','%q')\", varname.c_str(), typei, szVarValue.c_str());",
          "7918:  if (m_bEnableEventSystem)",
          "7920:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7922:  return \"OK\";",
          "7923: }",
          "",
          "[Removed Lines]",
          "7919:  {",
          "7921:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:    RegisterCommandCode(\"getdevicevalueoptions\", boost::bind(&CWebServer::Cmd_GetDeviceValueOptions, this, _1, _2, _3));",
          "476:    RegisterCommandCode(\"getdevicevalueoptionwording\", boost::bind(&CWebServer::Cmd_GetDeviceValueOptionWording, this, _1, _2, _3));",
          "480:    RegisterCommandCode(\"updateuservariable\", boost::bind(&CWebServer::Cmd_UpdateUserVariable, this, _1, _2, _3));",
          "481:    RegisterCommandCode(\"getuservariables\", boost::bind(&CWebServer::Cmd_GetUserVariables, this, _1, _2, _3));",
          "482:    RegisterCommandCode(\"getuservariable\", boost::bind(&CWebServer::Cmd_GetUserVariable, this, _1, _2, _3));",
          "",
          "[Removed Lines]",
          "478:    RegisterCommandCode(\"deleteuservariable\", boost::bind(&CWebServer::Cmd_DeleteUserVariable, this, _1, _2, _3));",
          "479:    RegisterCommandCode(\"saveuservariable\", boost::bind(&CWebServer::Cmd_SaveUserVariable, this, _1, _2, _3));",
          "",
          "[Added Lines]",
          "478:    RegisterCommandCode(\"adduservariable\", boost::bind(&CWebServer::Cmd_AddUserVariable, this, _1, _2, _3));",
          "480:    RegisterCommandCode(\"deleteuservariable\", boost::bind(&CWebServer::Cmd_DeleteUserVariable, this, _1, _2, _3));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1888:    root[\"title\"] = \"DeleteUserVariable\";",
          "1889:   }",
          "1892:   {",
          "1893:    if (session.rights != 2)",
          "1894:    {",
          "",
          "[Removed Lines]",
          "1891:   void CWebServer::Cmd_SaveUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "",
          "[Added Lines]",
          "1891:   void CWebServer::Cmd_AddUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1916:     session.reply_status = reply::forbidden;",
          "1917:     return; //Only admin user allowed",
          "1918:    }",
          "1919:    std::string idx = request::findValue(&req, \"idx\");",
          "1920:    std::string variablename = request::findValue(&req, \"vname\");",
          "1921:    std::string variablevalue = request::findValue(&req, \"vvalue\");",
          "1922:    std::string variabletype = request::findValue(&req, \"vtype\");",
          "1935:    if (",
          "1936:     (idx.empty()) ||",
          "1937:     (variablename.empty()) ||",
          "",
          "[Removed Lines]",
          "1924:    if (idx.empty())",
          "1925:    {",
          "1927:     std::vector<std::vector<std::string> > result;",
          "1928:     result = m_sql.safe_query(\"SELECT ID FROM UserVariables WHERE Name='%q'\",",
          "1929:      variablename.c_str());",
          "1930:     if (result.empty())",
          "1931:      return;",
          "1932:     idx = result[0][0];",
          "1933:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     )",
          "1941:     return;",
          "1944:    root[\"title\"] = \"UpdateUserVariable\";",
          "1945:   }",
          "",
          "[Removed Lines]",
          "1943:    root[\"status\"] = m_sql.UpdateUserVariable(idx, variablename, variabletype, variablevalue, true);",
          "",
          "[Added Lines]",
          "1933:    std::vector<std::vector<std::string> > result;",
          "1934:    result = m_sql.safe_query(\"SELECT Name, ValueType FROM UserVariables WHERE Name='%q'\", variablename.c_str());",
          "1935:    if (result.empty())",
          "1936:     return;",
          "1938:    bool bTypeNameChanged = false;",
          "1939:    if (variablename != result[0][0])",
          "1940:     bTypeNameChanged = true; //new name",
          "1941:    else if (variabletype != result[0][1])",
          "1942:     bTypeNameChanged = true; //new type",
          "1944:    root[\"status\"] = m_sql.UpdateUserVariable(idx, variablename, variabletype, variablevalue, !bTypeNameChanged);",
          "1947:    if (bTypeNameChanged)",
          "1948:    {",
          "1949:     if (m_sql.m_bEnableEventSystem)",
          "1950:      m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "1951:    }",
          "",
          "---------------"
        ],
        "main/WebServer.h||main/WebServer.h": [
          "File: main/WebServer.h -> main/WebServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:  void Cmd_GetDeviceValueOptions(WebEmSession & session, const request& req, Json::Value &root);",
          "164:  void Cmd_GetDeviceValueOptionWording(WebEmSession & session, const request& req, Json::Value &root);",
          "165:  void Cmd_DeleteUserVariable(WebEmSession & session, const request& req, Json::Value &root);",
          "167:  void Cmd_UpdateUserVariable(WebEmSession & session, const request& req, Json::Value &root);",
          "168:  void Cmd_GetUserVariables(WebEmSession & session, const request& req, Json::Value &root);",
          "169:  void Cmd_GetUserVariable(WebEmSession & session, const request& req, Json::Value &root);",
          "",
          "[Removed Lines]",
          "166:  void Cmd_SaveUserVariable(WebEmSession & session, const request& req, Json::Value &root);",
          "",
          "[Added Lines]",
          "166:  void Cmd_AddUserVariable(WebEmSession & session, const request& req, Json::Value &root);",
          "",
          "---------------"
        ],
        "www/app/UserVariablesController.js||www/app/UserVariablesController.js": [
          "File: www/app/UserVariablesController.js -> www/app/UserVariablesController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: define(['app'], function (app) {",
          "2:  app.controller('UserVariablesController', ['$scope', '$rootScope', '$location', '$http', '$interval', function ($scope, $rootScope, $location, $http, $interval) {",
          "5:   $scope.varNames = [];",
          "7:   DeleteVariable = function (idx) {",
          "",
          "[Removed Lines]",
          "4:   $scope.userVariableIdx = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:    });",
          "20:   }",
          "24:    var uservariablename = $('#uservariablesedittable #uservariablename').val();",
          "25:    var uservariabletype = $('#uservariablesedittable #uservariabletype option:selected').val();",
          "26:    var uservariablevalue = $('#uservariablesedittable #uservariablevalue').val();",
          "",
          "[Removed Lines]",
          "22:   AddVariable = function (type) {",
          "23:    var idx = $scope.userVariableIdx;",
          "",
          "[Added Lines]",
          "21:   AddUpdateVariable = function (type, idx) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:    }",
          "31:    else {",
          "32:     if (type == \"a\") {",
          "34:     }",
          "35:     else if (type == \"u\") {",
          "36:      var url = \"json.htm?type=command&param=updateuservariable&idx=\" + idx + \"&vname=\" + uservariablename + \"&vtype=\" + uservariabletype + \"&vvalue=\" + uservariablevalue;",
          "",
          "[Removed Lines]",
          "33:      var url = \"json.htm?type=command&param=saveuservariable&vname=\" + uservariablename + \"&vtype=\" + uservariabletype + \"&vvalue=\" + uservariablevalue;",
          "",
          "[Added Lines]",
          "31:      var url = \"json.htm?type=command&param=adduservariable&vname=\" + uservariablename + \"&vtype=\" + uservariabletype + \"&vvalue=\" + uservariablevalue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:   $scope.RefreshUserVariablesTable = function () {",
          "66:    $('#modal').show();",
          "68:    $('#uservariableupdate').attr(\"class\", \"btnstyle3-dis\");",
          "69:    $('#uservariabledelete').attr(\"class\", \"btnstyle3-dis\");",
          "70:    $(\"#uservariableupdate\").attr(\"href\", \"\");",
          "",
          "[Removed Lines]",
          "67:    $scope.userVariableIdx = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:      if (anSelected.length !== 0) {",
          "136:       var data = oTable.fnGetData(anSelected[0]);",
          "137:       var idx = data[\"DT_RowId\"];",
          "140:       $(\"#uservariabledelete\").attr(\"href\", \"javascript:DeleteVariable(\" + idx + \")\");",
          "141:       $('#uservariableupdate').attr(\"class\", \"btnstyle3\");",
          "142:       $('#uservariabledelete').attr(\"class\", \"btnstyle3\");",
          "",
          "[Removed Lines]",
          "138:       $scope.userVariableIdx = idx;",
          "139:       $(\"#uservariableupdate\").attr(\"href\", \"javascript:AddVariable('u')\");",
          "",
          "[Added Lines]",
          "135:       $(\"#uservariableupdate\").attr(\"href\", \"javascript:AddUpdateVariable('u', \" + idx + \")\");",
          "",
          "---------------"
        ],
        "www/views/uservariables.html||www/views/uservariables.html": [
          "File: www/views/uservariables.html -> www/views/uservariables.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   </tr>",
          "44:   <tr>",
          "45:    <td colspan=\"2\">",
          "47:    </td>",
          "48:   </tr>",
          "49:  </table>",
          "",
          "[Removed Lines]",
          "46:     <a class=\"btnstyle3\" onclick=\"AddVariable('a');\" data-i18n=\"Add\">Add</a>",
          "",
          "[Added Lines]",
          "46:     <a class=\"btnstyle3\" onclick=\"AddUpdateVariable('a',0);\" data-i18n=\"Add\">Add</a>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1926b1b3d4ae9582c0a564e0af509ef48117351d",
      "candidate_info": {
        "commit_hash": "1926b1b3d4ae9582c0a564e0af509ef48117351d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/1926b1b3d4ae9582c0a564e0af509ef48117351d",
        "files": [
          "plugins/examples/Mutli-Threaded.py"
        ],
        "message": "Added Multi-Threaded example to plugins directory",
        "before_after_code_files": [
          "plugins/examples/Mutli-Threaded.py||plugins/examples/Mutli-Threaded.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "plugins/examples/Mutli-Threaded.py||plugins/examples/Mutli-Threaded.py": [
          "File: plugins/examples/Mutli-Threaded.py -> plugins/examples/Mutli-Threaded.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Multi-threaded example",
          "2: #",
          "3: # Starts a Queue on a thread to write log messages and shuts down properly",
          "4: #",
          "5: # Author: Dnpwwo, 2019",
          "6: #",
          "7: \"\"\"",
          "8: <plugin key=\"MultiThread\" name=\"Multi-threaded example\" author=\"dnpwwo\" version=\"1.0.0\" >",
          "9:     <description>",
          "10:         <h2>Multi-threaded example</h2><br/>",
          "11:         Starts a Queue on a thread to write log messages and shuts down properly<br/>",
          "12:     </description>",
          "13:     <params>",
          "14:         <param field=\"Mode6\" label=\"Debug\" width=\"150px\">",
          "15:             <options>",
          "16:                 <option label=\"None\" value=\"0\"  default=\"true\" />",
          "17:                 <option label=\"Python Only\" value=\"2\"/>",
          "18:                 <option label=\"Basic Debugging\" value=\"62\"/>",
          "19:                 <option label=\"Basic+Messages\" value=\"126\"/>",
          "20:                 <option label=\"Connections Only\" value=\"16\"/>",
          "21:                 <option label=\"Connections+Queue\" value=\"144\"/>",
          "22:                 <option label=\"All\" value=\"-1\"/>",
          "23:             </options>",
          "24:         </param>",
          "25:     </params>",
          "26: </plugin>",
          "27: \"\"\"",
          "28: import Domoticz",
          "29: import sys,os",
          "30: import threading",
          "31: import queue",
          "33: class BasePlugin:",
          "35:     def __init__(self):",
          "36:         self.messageQueue = queue.Queue()",
          "37:         self.messageThread = threading.Thread(name=\"QueueThread\", target=BasePlugin.handleMessage, args=(self,))",
          "39:     def handleMessage(self):",
          "40:         try:",
          "41:             Domoticz.Debug(\"Entering message handler\")",
          "42:             while True:",
          "43:                 Message = self.messageQueue.get(block=True)",
          "44:                 if Message is None:",
          "45:                     Domoticz.Debug(\"Exiting message handler\")",
          "46:                     self.messageQueue.task_done()",
          "47:                     break",
          "49:                 if (Message[\"Type\"] == \"Log\"):",
          "50:                     Domoticz.Log(\"handleMessage: '\"+Message[\"Text\"]+\"'.\")",
          "51:                 elif (Message[\"Status\"] == \"Error\"):",
          "52:                     Domoticz.Status(\"handleMessage: '\"+Message[\"Text\"]+\"'.\")",
          "53:                 elif (Message[\"Type\"] == \"Error\"):",
          "54:                     Domoticz.Error(\"handleMessage: '\"+Message[\"Text\"]+\"'.\")",
          "55:                 self.messageQueue.task_done()",
          "56:         except Exception as err:",
          "57:             Domoticz.Error(\"handleMessage: \"+str(err))",
          "59:     def onStart(self):",
          "60:         if Parameters[\"Mode6\"] != \"0\":",
          "61:             Domoticz.Debugging(int(Parameters[\"Mode6\"]))",
          "62:             DumpConfigToLog()",
          "63:         self.messageThread.start()",
          "64:         Domoticz.Heartbeat(2)",
          "66:     def onHeartbeat(self):",
          "67:         self.messageQueue.put({\"Type\":\"Log\", \"Text\":\"Heartbeat test message\"})",
          "69:     def onStop(self):",
          "70:         # Not needed in an actual plugin",
          "71:         for thread in threading.enumerate():",
          "72:             if (thread.name != threading.current_thread().name):",
          "73:                 Domoticz.Log(\"'\"+thread.name+\"' is running, it must be shutdown otherwise Domoticz will abort on plugin exit.\")",
          "75:         # signal queue thread to exit",
          "76:         self.messageQueue.put(None)",
          "77:         Domoticz.Log(\"Clearing message queue...\")",
          "78:         self.messageQueue.join()",
          "80:         # Wait until queue thread has exited",
          "81:         Domoticz.Log(\"Threads still active: \"+str(threading.active_count())+\", should be 1.\")",
          "82:         while (threading.active_count() > 1):",
          "83:             for thread in threading.enumerate():",
          "84:                 if (thread.name != threading.current_thread().name):",
          "85:                     Domoticz.Log(\"'\"+thread.name+\"' is still running, waiting otherwise Domoticz will abort on plugin exit.\")",
          "86:             time.sleep(1.0)",
          "88: global _plugin",
          "89: _plugin = BasePlugin()",
          "91: def onStart():",
          "92:     global _plugin",
          "93:     _plugin.onStart()",
          "95: def onStop():",
          "96:     global _plugin",
          "97:     _plugin.onStop()",
          "99: def onHeartbeat():",
          "100:     global _plugin",
          "101:     _plugin.onHeartbeat()",
          "103: # Generic helper functions",
          "104: def stringOrBlank(input):",
          "105:     if (input == None): return \"\"",
          "106:     else: return str(input)",
          "108: def DumpConfigToLog():",
          "109:     for x in Parameters:",
          "110:         if Parameters[x] != \"\":",
          "111:             Domoticz.Debug( \"'\" + x + \"':'\" + str(Parameters[x]) + \"'\")",
          "112:     Domoticz.Debug(\"Device count: \" + str(len(Devices)))",
          "113:     for x in Devices:",
          "114:         Domoticz.Debug(\"Device:           \" + str(x) + \" - \" + str(Devices[x]))",
          "115:         Domoticz.Debug(\"Device ID:       '\" + str(Devices[x].ID) + \"'\")",
          "116:         Domoticz.Debug(\"Device Name:     '\" + Devices[x].Name + \"'\")",
          "117:         Domoticz.Debug(\"Device nValue:    \" + str(Devices[x].nValue))",
          "118:         Domoticz.Debug(\"Device sValue:   '\" + Devices[x].sValue + \"'\")",
          "119:         Domoticz.Debug(\"Device LastLevel: \" + str(Devices[x].LastLevel))",
          "120:     return",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8dd6677b3669228809744cd54c4d68b2581da7ff",
      "candidate_info": {
        "commit_hash": "8dd6677b3669228809744cd54c4d68b2581da7ff",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/8dd6677b3669228809744cd54c4d68b2581da7ff",
        "files": [
          "www/app/log/DeviceLog.js"
        ],
        "message": "Fixing lighting log for dimmers",
        "before_after_code_files": [
          "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js": [
          "File: www/app/log/DeviceLog.js -> www/app/log/DeviceLog.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:             var isLightSwitchType = [",
          "53:                 'Contact', 'Door Contact', 'Dusk Sensor', 'Motion Sensor',",
          "55:             ].includes(vm.device.SwitchType);",
          "57:             return isLightType || isLightSwitchType;",
          "",
          "[Removed Lines]",
          "54:                 'Smoke Detector', 'On/Off'",
          "",
          "[Added Lines]",
          "54:                 'Smoke Detector', 'On/Off', 'Dimmer'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf9de9be9580702eb9d0a6ed473d59d0ba7f3e84",
      "candidate_info": {
        "commit_hash": "bf9de9be9580702eb9d0a6ed473d59d0ba7f3e84",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/bf9de9be9580702eb9d0a6ed473d59d0ba7f3e84",
        "files": [
          "hardware/Wunderground.cpp"
        ],
        "message": "WU, fixed possible chillsign error",
        "before_after_code_files": [
          "hardware/Wunderground.cpp||hardware/Wunderground.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Wunderground.cpp||hardware/Wunderground.cpp": [
          "File: hardware/Wunderground.cpp -> hardware/Wunderground.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:   at10-=(tsen.WIND.temperatureh*256);",
          "383:   tsen.WIND.temperaturel=(BYTE)(at10);",
          "386:   at10=round(std::abs(wind_chill*10.0f));",
          "387:   tsen.WIND.chillh=(BYTE)(at10/256);",
          "388:   at10-=(tsen.WIND.chillh*256);",
          "",
          "[Removed Lines]",
          "385:   tsen.WIND.chillsign=(wind_temp>=0)?0:1;",
          "",
          "[Added Lines]",
          "385:   tsen.WIND.chillsign=(wind_chill>=0)?0:1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bebb985dd213010e73f78174db7a40345af866e",
      "candidate_info": {
        "commit_hash": "4bebb985dd213010e73f78174db7a40345af866e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4bebb985dd213010e73f78174db7a40345af866e",
        "files": [
          "History.txt",
          "hardware/OpenZWave.cpp",
          "hardware/ZWaveBase.h"
        ],
        "message": "- Implemented: OpenZWave, support for Seismic Intensity sensor",
        "before_after_code_files": [
          "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp",
          "hardware/ZWaveBase.h||hardware/ZWaveBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp": [
          "File: hardware/OpenZWave.cpp -> hardware/OpenZWave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  SCALEID_MOISTRUE,",
          "59:  SCALEID_TANK_CAPACITY,",
          "60:  SCALEID_RAIN_RATE,",
          "61: };",
          "63: struct _tAlarmNameToIndexMapping",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:  SCALEID_SEISMIC_INTENSITY,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1757:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1758:     {",
          "1759:      _device.floatValue = fValue;",
          "1761:      _device.scaleMultiply = 1;",
          "1762:      _device.devType = ZDTYPE_SENSOR_VOLTAGE;",
          "1763:      InsertDevice(_device);",
          "1764:     }",
          "",
          "[Removed Lines]",
          "1760:      _device.scaleID = SCALEID_VOLTAGE;",
          "",
          "[Added Lines]",
          "1762:      _device.scaleID = SCALEID_VOLTAGE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1772:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1773:     {",
          "1774:      _device.floatValue = fValue;",
          "1776:      _device.scaleMultiply = 1;",
          "1777:      _device.devType = ZDTYPE_SENSOR_AMPERE;",
          "1778:      InsertDevice(_device);",
          "1779:     }",
          "",
          "[Removed Lines]",
          "1775:      _device.scaleID = SCALEID_CURRENT;",
          "",
          "[Added Lines]",
          "1777:      _device.scaleID = SCALEID_CURRENT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1786:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1787:     {",
          "1788:      _device.floatValue = fValue;",
          "1790:      _device.scaleMultiply = 1;",
          "1791:      _device.devType = ZDTYPE_SENSOR_PERCENTAGE;",
          "1792:      InsertDevice(_device);",
          "1793:     }",
          "",
          "[Removed Lines]",
          "1789:      _device.scaleID = SCALEID_POWERFACTOR;",
          "",
          "[Added Lines]",
          "1791:      _device.scaleID = SCALEID_POWERFACTOR;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1800:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1801:     {",
          "1802:      _device.floatValue = fValue;",
          "1804:      _device.scaleMultiply = 1;",
          "1805:      _device.devType = ZDTYPE_SENSOR_GAS;",
          "1806:      InsertDevice(_device);",
          "1807:     }",
          "",
          "[Removed Lines]",
          "1803:      _device.scaleID = SCALEID_GAS;",
          "",
          "[Added Lines]",
          "1805:      _device.scaleID = SCALEID_GAS;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1814:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1815:     {",
          "1816:      _device.floatValue = fValue;",
          "1818:      _device.scaleMultiply = 1;",
          "1819:      _device.devType = ZDTYPE_SENSOR_WATER;",
          "1820:      InsertDevice(_device);",
          "1821:     }",
          "",
          "[Removed Lines]",
          "1817:      _device.scaleID = SCALEID_WATER;",
          "",
          "[Added Lines]",
          "1819:      _device.scaleID = SCALEID_WATER;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1984:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1985:     {",
          "1986:      _device.floatValue = fValue;",
          "1988:      _device.scaleMultiply = 1;",
          "1989:      _device.devType = ZDTYPE_SENSOR_GAS;",
          "1990:      InsertDevice(_device);",
          "1991:     }",
          "",
          "[Removed Lines]",
          "1987:      _device.scaleID = SCALEID_GAS;",
          "",
          "[Added Lines]",
          "1989:      _device.scaleID = SCALEID_GAS;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1998:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1999:     {",
          "2000:      _device.floatValue = fValue;",
          "2002:      _device.scaleMultiply = 1;",
          "2003:      _device.devType = ZDTYPE_SENSOR_WATER;",
          "2004:      InsertDevice(_device);",
          "2005:     }",
          "",
          "[Removed Lines]",
          "2001:      _device.scaleID = SCALEID_WATER;",
          "",
          "[Added Lines]",
          "2003:      _device.scaleID = SCALEID_WATER;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2012:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2013:     {",
          "2014:      _device.floatValue = fValue;",
          "2016:      _device.scaleMultiply = 1;",
          "2017:      _device.devType = ZDTYPE_SENSOR_CO2;",
          "2018:      InsertDevice(_device);",
          "2019:     }",
          "",
          "[Removed Lines]",
          "2015:      _device.scaleID = SCALEID_CO2;",
          "",
          "[Added Lines]",
          "2017:      _device.scaleID = SCALEID_CO2;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2026:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2027:     {",
          "2028:      _device.floatValue = fValue;",
          "2030:      _device.scaleMultiply = 1;",
          "2031:      _device.devType = ZDTYPE_SENSOR_MOISTURE;",
          "2032:      InsertDevice(_device);",
          "2033:     }",
          "",
          "[Removed Lines]",
          "2029:      _device.scaleID = SCALEID_MOISTRUE;",
          "",
          "[Added Lines]",
          "2031:      _device.scaleID = SCALEID_MOISTRUE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2040:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2041:     {",
          "2042:      _device.floatValue = fValue;",
          "2044:      _device.scaleMultiply = 1;",
          "2045:      _device.devType = ZDTYPE_SENSOR_TANK_CAPACITY;",
          "2046:      InsertDevice(_device);",
          "2047:     }",
          "",
          "[Removed Lines]",
          "2043:      _device.scaleID = SCALEID_TANK_CAPACITY;",
          "",
          "[Added Lines]",
          "2045:      _device.scaleID = SCALEID_TANK_CAPACITY;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2054:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2055:     {",
          "2056:      _device.floatValue = fValue;",
          "2057:      _device.devType = ZDTYPE_SWITCH_NORMAL;",
          "2058:      InsertDevice(_device);",
          "2059:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2058:      _device.scaleMultiply = 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2066:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2067:     {",
          "2068:      _device.floatValue = fValue;",
          "2070:      _device.scaleMultiply = 1;",
          "2071:      _device.devType = ZDTYPE_SENSOR_CUSTOM;",
          "2072:      _device.custom_label = \"mm/h\";",
          "2073:      InsertDevice(_device);",
          "2074:     }",
          "2075:    }",
          "2076:   }",
          "2077:   else",
          "2078:   {",
          "2079:    _log.Log(LOG_STATUS, \"OpenZWave: Value_Added: Unhandled Label: %s, Unit: %s\", vLabel.c_str(), vUnits.c_str());",
          "",
          "[Removed Lines]",
          "2069:      _device.scaleID = SCALEID_RAIN_RATE;",
          "",
          "[Added Lines]",
          "2072:      _device.scaleID = SCALEID_RAIN_RATE;",
          "2079:   else if (vLabel == \"Seismic Intensity\")",
          "2080:   {",
          "2081:    if (vType == OpenZWave::ValueID::ValueType_Decimal)",
          "2082:    {",
          "2083:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2084:     {",
          "2085:      _device.floatValue = fValue;",
          "2086:      _device.scaleMultiply = 1;",
          "2087:      _device.scaleID = SCALEID_SEISMIC_INTENSITY;",
          "2088:      _device.devType = ZDTYPE_SENSOR_PERCENTAGE;",
          "2089:      InsertDevice(_device);",
          "2090:     }",
          "2091:    }",
          "2092:   }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2577:    scaleID = SCALEID_TANK_CAPACITY;",
          "2578:   else if (vLabel == \"Rain Rate\")",
          "2579:    scaleID = SCALEID_RAIN_RATE;",
          "2581:   sstr << \".\" << scaleID;",
          "2582:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2596:   else if (vLabel == \"Seismic Intensity\")",
          "2597:    scaleID = SCALEID_SEISMIC_INTENSITY;",
          "",
          "---------------"
        ],
        "hardware/ZWaveBase.h||hardware/ZWaveBase.h": [
          "File: hardware/ZWaveBase.h -> hardware/ZWaveBase.h"
        ]
      }
    }
  ]
}