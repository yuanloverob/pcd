{
  "cve_id": "CVE-2019-8460",
  "cve_desc": "OpenBSD kernel version <= 6.5 can be forced to create long chains of TCP SACK holes that causes very expensive calls to tcp_sack_option() for every incoming SACK packet which can lead to a denial of service.",
  "repo": "openbsd/src",
  "patch_hash": "ed8fdce754a5d8d14c09e989d8877707bd43906f",
  "patch_info": {
    "commit_hash": "ed8fdce754a5d8d14c09e989d8877707bd43906f",
    "repo": "openbsd/src",
    "commit_url": "https://github.com/openbsd/src/commit/ed8fdce754a5d8d14c09e989d8877707bd43906f",
    "files": [
      "sys/netinet/tcp.h",
      "sys/netinet/tcp_input.c"
    ],
    "message": "Received SACK options are managed by a linked list at the TCP socket. There is a global tunable limit net.inet.tcp.sackholelimit, default is 32768.  If an attacker manages to attach all these sack holes to a few TCP connections, the lists may grow long.  Traversing them might cause higher CPU consumption on the victim machine.  In practice such a situation is hard to create as the TCP retransmit and 2*msl timer flush the list periodically.  For additional protection, enforce a per connection limit of 128 SACK holes in the list. reported by Reuven Plevinsky and Tal Vainshtein discussed with claudio@ and procter@; OK deraadt@",
    "before_after_code_files": [
      "sys/netinet/tcp.h||sys/netinet/tcp.h",
      "sys/netinet/tcp_input.c||sys/netinet/tcp_input.c"
    ]
  },
  "patch_diff": {
    "sys/netinet/tcp.h||sys/netinet/tcp.h": [
      "File: sys/netinet/tcp.h -> sys/netinet/tcp.h"
    ],
    "sys/netinet/tcp_input.c||sys/netinet/tcp_input.c": [
      "File: sys/netinet/tcp_input.c -> sys/netinet/tcp_input.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2495:     temp = (struct sackhole *)",
      "2496:         pool_get(&sackhl_pool, PR_NOWAIT);",
      "2497:     if (temp == NULL)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2495:     if (tp->snd_numholes >= TCP_SACKHOLE_LIMIT)",
      "2496:      goto done;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2522:    temp = (struct sackhole *)",
      "2523:        pool_get(&sackhl_pool, PR_NOWAIT);",
      "2524:    if (temp == NULL)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2524:    if (tp->snd_numholes >= TCP_SACKHOLE_LIMIT)",
      "2525:     goto done;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c04e3b6d529d6955faf3e86aabe4172550afff8",
      "candidate_info": {
        "commit_hash": "0c04e3b6d529d6955faf3e86aabe4172550afff8",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/0c04e3b6d529d6955faf3e86aabe4172550afff8",
        "files": [
          "sys/netinet/tcp_input.c",
          "sys/netinet/tcp_usrreq.c",
          "sys/netinet/tcp_var.h",
          "usr.bin/netstat/inet.c"
        ],
        "message": "Count the number of TCP SACK options that were dropped due to the sack hole list length or pool limit. OK claudio@",
        "before_after_code_files": [
          "sys/netinet/tcp_input.c||sys/netinet/tcp_input.c",
          "sys/netinet/tcp_usrreq.c||sys/netinet/tcp_usrreq.c",
          "sys/netinet/tcp_var.h||sys/netinet/tcp_var.h",
          "usr.bin/netstat/inet.c||usr.bin/netstat/inet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sys/netinet/tcp_input.c||sys/netinet/tcp_input.c"
          ],
          "candidate": [
            "sys/netinet/tcp_input.c||sys/netinet/tcp_input.c"
          ]
        }
      },
      "candidate_diff": {
        "sys/netinet/tcp_input.c||sys/netinet/tcp_input.c": [
          "File: sys/netinet/tcp_input.c -> sys/netinet/tcp_input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2414:    tp->snd_holes = (struct sackhole *)",
          "2415:        pool_get(&sackhl_pool, PR_NOWAIT);",
          "2416:    if (tp->snd_holes == NULL) {",
          "2419:    }",
          "2420:    cur = tp->snd_holes;",
          "2421:    cur->start = th->th_ack;",
          "",
          "[Removed Lines]",
          "2418:     goto done;",
          "",
          "[Added Lines]",
          "2418:     goto dropped;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2495:     if (tp->snd_numholes >= TCP_SACKHOLE_LIMIT)",
          "2497:     temp = (struct sackhole *)",
          "2498:         pool_get(&sackhl_pool, PR_NOWAIT);",
          "2499:     if (temp == NULL)",
          "2501:     temp->next = cur->next;",
          "2502:     temp->start = sack.end;",
          "2503:     temp->end = cur->end;",
          "",
          "[Removed Lines]",
          "2496:      goto done;",
          "",
          "[Added Lines]",
          "2496:      goto dropped;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2524:    if (tp->snd_numholes >= TCP_SACKHOLE_LIMIT)",
          "2526:    temp = (struct sackhole *)",
          "2527:        pool_get(&sackhl_pool, PR_NOWAIT);",
          "2528:    if (temp == NULL)",
          "2530:    temp->start = tp->rcv_lastsack;",
          "2531:    temp->end = sack.start;",
          "2532:    temp->dups = min(tcprexmtthresh,",
          "",
          "[Removed Lines]",
          "2525:     goto done;",
          "",
          "[Added Lines]",
          "2525:     goto dropped;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2540:    tp->snd_numholes++;",
          "2541:   }",
          "2542:  }",
          "2544:  return;",
          "2545: }",
          "",
          "[Removed Lines]",
          "2543: done:",
          "",
          "[Added Lines]",
          "2544: dropped:",
          "2545:  tcpstat_inc(tcps_sack_drop_opts);",
          "",
          "---------------"
        ],
        "sys/netinet/tcp_usrreq.c||sys/netinet/tcp_usrreq.c": [
          "File: sys/netinet/tcp_usrreq.c -> sys/netinet/tcp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "945:  ASSIGN(tcps_sack_rexmit_bytes);",
          "946:  ASSIGN(tcps_sack_rcv_opts);",
          "947:  ASSIGN(tcps_sack_snd_opts);",
          "949: #undef ASSIGN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948:  ASSIGN(tcps_sack_drop_opts);",
          "",
          "---------------"
        ],
        "sys/netinet/tcp_var.h||sys/netinet/tcp_var.h": [
          "File: sys/netinet/tcp_var.h -> sys/netinet/tcp_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "632:  tcps_sack_rexmit_bytes,",
          "633:  tcps_sack_rcv_opts,",
          "634:  tcps_sack_snd_opts,",
          "635:  tcps_ncounters,",
          "636: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:  tcps_sack_drop_opts,",
          "",
          "---------------"
        ],
        "usr.bin/netstat/inet.c||usr.bin/netstat/inet.c": [
          "File: usr.bin/netstat/inet.c -> usr.bin/netstat/inet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:   \"\\t\\t%llu segment rexmit%s in SACK recovery episodes\\n\");",
          "497:  p(tcps_sack_rexmit_bytes,",
          "498:   \"\\t\\t%llu byte rexmit%s in SACK recovery episodes\\n\");",
          "501:  p(tcps_sack_snd_opts, \"\\t%llu SACK option%s sent\\n\");",
          "503: #undef p",
          "504: #undef p1",
          "",
          "[Removed Lines]",
          "499:  p(tcps_sack_rcv_opts,",
          "500:   \"\\t%llu SACK option%s received\\n\");",
          "",
          "[Added Lines]",
          "499:  p(tcps_sack_rcv_opts, \"\\t%llu SACK option%s received\\n\");",
          "501:  p(tcps_sack_drop_opts, \"\\t%llu SACK option%s dropped\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}