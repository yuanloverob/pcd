{
  "cve_id": "CVE-2018-11354",
  "cve_desc": "In Wireshark 2.6.0, the IEEE 1905.1a dissector could crash. This was addressed in epan/dissectors/packet-ieee1905.c by making a certain correction to string handling.",
  "repo": "wireshark/wireshark",
  "patch_hash": "5cc6cd3ae6f2ae763a47d3f3cb1c5433f9635c1f",
  "patch_info": {
    "commit_hash": "5cc6cd3ae6f2ae763a47d3f3cb1c5433f9635c1f",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/5cc6cd3ae6f2ae763a47d3f3cb1c5433f9635c1f",
    "files": [
      "epan/dissectors/packet-ieee1905.c"
    ],
    "message": "IEEE 1905.1a: use col_add_str to add non const strings\n\nBug: 14647\nChange-Id: I112d47e459e71648dccf331d56b8c70f44d01134\nReviewed-on: https://code.wireshark.org/review/27250\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c": [
      "File: epan/dissectors/packet-ieee1905.c -> epan/dissectors/packet-ieee1905.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4518:     message_type = tvb_get_ntohs(tvb, 2);",
      "4521:                 val_to_str_ext(message_type, &ieee1905_message_type_vals_ext,",
      "4522:                         \"Unknown: %u\"));",
      "",
      "[Removed Lines]",
      "4520:     col_set_str(pinfo->cinfo, COL_INFO,",
      "",
      "[Added Lines]",
      "4520:     col_add_str(pinfo->cinfo, COL_INFO,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb517a4a434387e74a2f75ebb106ee3c3893251c",
      "candidate_info": {
        "commit_hash": "cb517a4a434387e74a2f75ebb106ee3c3893251c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/cb517a4a434387e74a2f75ebb106ee3c3893251c",
        "files": [
          "epan/dissectors/packet-ieee1905.c"
        ],
        "message": "IEEE 1905.1a: use col_add_str to add non const strings\n\nBug: 14647\nChange-Id: I112d47e459e71648dccf331d56b8c70f44d01134\nReviewed-on: https://code.wireshark.org/review/27250\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 5cc6cd3ae6f2ae763a47d3f3cb1c5433f9635c1f)\nReviewed-on: https://code.wireshark.org/review/27252",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c": [
          "File: epan/dissectors/packet-ieee1905.c -> epan/dissectors/packet-ieee1905.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4518:     message_type = tvb_get_ntohs(tvb, 2);",
          "4521:                 val_to_str_ext(message_type, &ieee1905_message_type_vals_ext,",
          "4522:                         \"Unknown: %u\"));",
          "",
          "[Removed Lines]",
          "4520:     col_set_str(pinfo->cinfo, COL_INFO,",
          "",
          "[Added Lines]",
          "4520:     col_add_str(pinfo->cinfo, COL_INFO,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05b1d35586aee37dad7d84fa27531fc9794a41c9",
      "candidate_info": {
        "commit_hash": "05b1d35586aee37dad7d84fa27531fc9794a41c9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/05b1d35586aee37dad7d84fa27531fc9794a41c9",
        "files": [
          "docbook/release-notes.asciidoc",
          "epan/dissectors/CMakeLists.txt",
          "epan/dissectors/Makefile.am",
          "epan/dissectors/packet-ethertype.c",
          "epan/dissectors/packet-ieee1905.c",
          "epan/etypes.h"
        ],
        "message": "Initial coding of the ieee1905 dissector with Multi-AP support.\n\nChange-Id: I94da228cba6baf20a2cd02bafc9704492f2cfc9f\nReviewed-on: https://code.wireshark.org/review/23956\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Richard Sharpe <realrichardsharpe@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "epan/dissectors/Makefile.am||epan/dissectors/Makefile.am",
          "epan/dissectors/packet-ethertype.c||epan/dissectors/packet-ethertype.c",
          "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c",
          "epan/etypes.h||epan/etypes.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: Protobuf (Protocol Buffers)",
          "77: FP Mux",
          "78: Network Functional Application Platform Interface (NFAPI) Protocol",
          "79: --sort-and-group--",
          "81: === Updated Protocol Support",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: IEEE 1905.1a",
          "",
          "---------------"
        ],
        "epan/dissectors/Makefile.am||epan/dissectors/Makefile.am": [
          "File: epan/dissectors/Makefile.am -> epan/dissectors/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "739:  packet-iec104.c  \\",
          "740:  packet-ieee1722.c \\",
          "741:  packet-ieee17221.c \\",
          "742:  packet-ieee80211-netmon.c \\",
          "743:  packet-ieee80211-prism.c \\",
          "744:  packet-ieee80211-radio.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:  packet-ieee1905.c \\",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ethertype.c||epan/dissectors/packet-ethertype.c": [
          "File: epan/dissectors/packet-ethertype.c -> epan/dissectors/packet-ethertype.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  { ETHERTYPE_MRP,                  \"MRP\" },",
          "89:  { ETHERTYPE_IEEE_802_1AD,         \"802.1ad Provider Bridge (Q-in-Q)\" },",
          "90:  { ETHERTYPE_MACSEC,               \"802.1AE (MACsec)\" },",
          "91:  { ETHERTYPE_IEEE_802_1AH,         \"802.1ah Provider Backbone Bridge (mac-in-mac)\" },",
          "92:  { ETHERTYPE_IEEE_802_1BR,         \"802.1br Bridge Port Extension E-Tag\" },",
          "93:  { ETHERTYPE_EAPOL,                \"802.1X Authentication\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  { ETHERTYPE_IEEE_1905,    \"1905.1a Convergent Digital Home Network for Heterogenous Technologies\" },",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ieee1905.c||epan/dissectors/packet-ieee1905.c": [
          "File: epan/dissectors/packet-ieee1905.c -> epan/dissectors/packet-ieee1905.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <config.h>",
          "37: #include <epan/packet.h>",
          "38: #include <epan/etypes.h>",
          "39: #include <epan/addr_resolv.h>",
          "40: #include <epan/expert.h>",
          "41: #include \"packet-wps.h\"",
          "44: void proto_reg_handoff_ieee1905(void);",
          "45: void proto_register_ieee1905(void);",
          "48: static int proto_ieee1905 = -1;",
          "49: static int hf_ieee1905_message_version = -1;",
          "50: static int hf_ieee1905_message_reserved = -1;",
          "51: static int hf_ieee1905_message_type = -1;",
          "52: static int hf_ieee1905_message_id = -1;",
          "53: static int hf_ieee1905_fragment_id = -1;",
          "54: static int hf_ieee1905_flags = -1;",
          "55: static int hf_ieee1905_last_fragment = -1;",
          "56: static int hf_ieee1905_relay_indicator = -1;",
          "57: static int hf_ieee1905_tlv_types = -1;",
          "58: static int hf_ieee1905_tlv_len = -1;",
          "59: static int hf_ieee1905_tlv_data = -1;",
          "60: static int hf_ieee1905_al_mac_address_type = -1;",
          "61: static int hf_ieee1905_mac_address_type = -1;",
          "62: static int hf_ieee1905_link_metric_query_type = -1;",
          "63: static int hf_ieee1905_link_metrics_requested = -1;",
          "64: static int hf_ieee1905_responder_al_mac_addr = -1;",
          "65: static int hf_ieee1905_neighbor_al_mac_addr = -1;",
          "66: static int hf_ieee1905_receiving_al_mac_addr = -1;",
          "67: static int hf_ieee1905_bridge_flag = -1;",
          "68: static int hf_ieee1905_packet_errors = -1;",
          "69: static int hf_ieee1905_transmitted_packets = -1;",
          "70: static int hf_ieee1905_mac_throughput_capacity = -1;",
          "71: static int hf_ieee1905_link_availability = -1;",
          "72: static int hf_ieee1905_phy_rate = -1;",
          "73: static int hf_ieee1905_packets_received = -1;",
          "74: static int hf_ieee1905_rssi = -1;",
          "75: static int hf_ieee1905_data = -1;",
          "76: static int hf_ieee1905_local_interface_count = -1;",
          "77: static int hf_ieee1905_media_type = -1;",
          "78: static int hf_ieee1905_media_spec_info_len = -1;",
          "79: static int hf_ieee1905_media_spec_info = -1;",
          "80: static int hf_ieee1905_media_type_high = -1;",
          "81: static int hf_ieee1905_media_type_low = -1;",
          "82: static int hf_ieee1905_bridging_tuples_cnt = -1;",
          "83: static int hf_ieee1905_bridging_mac_address_cnt = -1;",
          "84: static int hf_ieee1905_bridging_mac_address = -1;",
          "85: static int hf_ieee1905_local_interface_mac = -1;",
          "86: static int hf_ieee1905_non_1905_neighbor_mac = -1;",
          "87: static int hf_ieee1905_neighbor_flags = -1;",
          "88: static int hf_ieee1905_bridges_flag = -1;",
          "89: static int hf_ieee1905_link_metric_result_code = -1;",
          "90: static int hf_ieee1905_vendor_specific_oui = -1;",
          "91: static int hf_ieee1905_vendor_specific_info = -1;",
          "92: static int hf_ieee1905_searched_role = -1;",
          "93: static int hf_ieee1905_supported_role = -1;",
          "94: static int hf_ieee1905_auto_config_freq_band = -1;",
          "95: static int hf_ieee1905_supported_freq_band = -1;",
          "96: static int hf_ieee1905_wsc_frame = -1;",
          "97: static int hf_ieee1905_event_notification_media_types = -1;",
          "98: static int hf_ieee1905_sender_al_id = -1;",
          "99: static int hf_ieee1905_push_button_event_msg_id = -1;",
          "100: static int hf_ieee1905_sender_joining_interface = -1;",
          "101: static int hf_ieee1905_new_device_interface = -1;",
          "102: static int hf_ieee1905_device_al_mac = -1;",
          "103: static int hf_ieee1905_local_intf_oui = -1;",
          "104: static int hf_ieee1905_local_intf_variant = -1;",
          "105: static int hf_ieee1905_local_intf_variant_name = -1;",
          "106: static int hf_ieee1905_local_intf_url_count = -1;",
          "107: static int hf_ieee1905_local_intf_spec_count = -1;",
          "108: static int hf_ieee1905_local_intf_url = -1;",
          "109: static int hf_ieee1905_local_intf_spec = -1;",
          "110: static int hf_ieee1905_dev_id_friendly_name = -1;",
          "111: static int hf_ieee1905_dev_id_manuf_name = -1;",
          "112: static int hf_ieee1905_dev_id_manuf_model = -1;",
          "113: static int hf_ieee1905_control_url = -1;",
          "114: static int hf_ieee1905_ipv4_type_count = -1;",
          "115: static int hf_ieee1905_mac_address = -1;",
          "116: static int hf_ieee1905_ipv4_addr_count = -1;",
          "117: static int hf_ieee1905_addr_type = -1;",
          "118: static int hf_ieee1905_ipv4_addr = -1;",
          "119: static int hf_ieee1905_dhcp_server = -1;",
          "120: static int hf_ieee1905_ipv6_type_count = -1;",
          "121: static int hf_ieee1905_ipv6_addr_count = -1;",
          "122: static int hf_ieee1905_ipv6_addr_type = -1;",
          "123: static int hf_ieee1905_ipv6_addr = -1;",
          "124: static int hf_ieee1905_ipv6_dhcp_server = -1;",
          "125: static int hf_ieee1905_generic_phy_media_types = -1;",
          "126: static int hf_ieee1905_profile_version = -1;",
          "127: static int hf_ieee1905_power_off_intf_count = -1;",
          "128: static int hf_ieee1905_power_change_intf_count = -1;",
          "129: static int hf_ieee1905_power_change_mac_addr = -1;",
          "130: static int hf_ieee1905_power_change_state = -1;",
          "131: static int hf_ieee1905_power_status_intf_count = -1;",
          "132: static int hf_ieee1905_power_status_mac_addr = -1;",
          "133: static int hf_ieee1905_power_status_state = -1;",
          "134: static int hf_ieee1905_l2_neighbor_intf_count = -1;",
          "135: static int hf_ieee1905_l2_local_intf_mac_addr = -1;",
          "136: static int hf_ieee1905_l2_neighbor_dev_count = -1;",
          "137: static int hf_ieee1905_l2_neighbor_mac_addr = -1;",
          "138: static int hf_ieee1905_l2_behind_mac_addr_count = -1;",
          "139: static int hf_ieee1905_l2_behind_mac_addr = -1;",
          "140: static int hf_ieee1905_supported_service_count = -1;",
          "141: static int hf_ieee1905_supported_service = -1;",
          "142: static int hf_ieee1905_searched_service_count = -1;",
          "143: static int hf_ieee1905_searched_service = -1;",
          "144: static int hf_ieee1905_ap_radio_identifier = -1;",
          "145: static int hf_ieee1905_operatonal_bss_radio_count = -1;",
          "146: static int hf_ieee1905_ap_operational_intf_count = -1;",
          "147: static int hf_ieee1905_ap_local_intf_mac_addr = -1;",
          "148: static int hf_ieee1905_ap_local_intf_ssid_len = -1;",
          "149: static int hf_ieee1905_ap_local_intf_ssid = -1;",
          "150: static int hf_ieee1905_ap_capabilities_flags = -1;",
          "151: static int hf_ieee1905_unassoc_sta_metrics_oper_flag = -1;",
          "152: static int hf_ieee1905_unassoc_sta_metrics_non_oper_flag = -1;",
          "153: static int hf_ieee1905_agent_init_steering = -1;",
          "154: static int hf_ieee1905_higher_layer_protocol = -1;",
          "155: static int hf_ieee1905_higher_layer_data = -1;",
          "156: static int hf_ieee1905_assoc_backhaul_station_mac = -1;",
          "157: static int hf_ieee1905_backhaul_target_bssid = -1;",
          "158: static int hf_ieee1905_backhaul_steering_status = -1;",
          "159: static int hf_ieee1905_backhaul_operating_class = -1;",
          "160: static int hf_ieee1905_backhaul_channel_number = -1;",
          "161: static int hf_ieee1905_client_assoc_bssid = -1;",
          "162: static int hf_ieee1905_association_control = -1;",
          "163: static int hf_ieee1905_association_control_validity = -1;",
          "164: static int hf_ieee1905_client_assoc_sta_count = -1;",
          "165: static int hf_ieee1905_client_assoc_mac_addr = -1;",
          "166: static int hf_ieee1905_btm_reporter_bssid = -1;",
          "167: static int hf_ieee1905_btm_sta_mac_addr = -1;",
          "168: static int hf_ieee1905_btm_report_status = -1;",
          "169: static int hf_iee1905_btm_report_bssid = -1;",
          "170: static int hf_ieee1905_source_bss_bssid = -1;",
          "171: static int hf_ieee1905_steering_request_flags = -1;",
          "172: static int hf_ieee1905_steering_req_op_window = -1;",
          "173: static int hf_ieee1905_steering_request_mode_flag = -1;",
          "174: static int hf_ieee1905_btm_disassoc_imminent_flag = -1;",
          "175: static int hf_ieee1905_btm_abridged_flag = -1;",
          "176: static int hf_ieee1905_steering_btm_disass_timer = -1;",
          "177: static int hf_ieee1905_steering_req_sta_count = -1;",
          "178: static int hf_ieee1905_steering_req_sta_mac = -1;",
          "179: static int hf_ieee1905_steering_req_target_bssid_count = -1;",
          "180: static int hf_ieee1905_steering_req_target_bssid = -1;",
          "181: static int hf_ieee1905_steering_req_oper_class = -1;",
          "182: static int hf_ieee1905_steering_req_target_channel = -1;",
          "183: static int hf_ieee1905_client_bssid = -1;",
          "184: static int hf_ieee1905_client_mac_addr = -1;",
          "185: static int hf_ieee1905_client_capability_result = -1;",
          "186: static int hf_ieee1905_client_capability_frame = -1;",
          "187: static int hf_ieee1905_association_flag = -1;",
          "188: static int hf_ieee1905_association_client_mac_addr = -1;",
          "189: static int hf_ieee1905_association_agent_bssid = -1;",
          "190: static int hf_ieee1905_association_event_flags = -1;",
          "191: static int hf_ieee1905_ap_radio_max_bss = -1;",
          "192: static int hf_ieee1905_ap_radio_classes = -1;",
          "193: static int hf_ieee1905_ap_radio_class = -1;",
          "194: static int hf_ieee1905_ap_radio_eirp = -1;",
          "195: static int hf_ieee1905_ap_radio_non_op_count = -1;",
          "196: static int hf_ieee1905_radio_basic_non_op_channel = -1;",
          "197: static int hf_ieee1905_max_supported_tx_streams = -1;",
          "198: static int hf_ieee1905_max_supported_rx_streams = -1;",
          "199: static int hf_ieee1905_short_gi_20mhz_flag = -1;",
          "200: static int hf_ieee1905_short_gi_40mhz_flag = -1;",
          "201: static int hf_ieee1905_ht_support_40mhz_flag = -1;",
          "202: static int hf_ieee1905_ap_ht_capabilities_radio_id = -1;",
          "203: static int hf_ieee1905_ht_cap_flags = -1;",
          "204: static int hf_ieee1905_vht_max_supported_tx_streams = -1;",
          "205: static int hf_ieee1905_vht_max_supported_rx_streams = -1;",
          "206: static int hf_ieee1905_short_gi_80mhz_flag = -1;",
          "207: static int hf_ieee1905_short_gi_160mhz_flag = -1;",
          "208: static int hf_ieee1905_vht_support_80plus_mhz_flag = -1;",
          "209: static int hf_ieee1905_vht_support_160_mhz_flag = -1;",
          "210: static int hf_ieee1905_su_beamformer_capable_flag = -1;",
          "211: static int hf_ieee1905_mu_beamformer_capable_flag = -1;",
          "212: static int hf_ieee1905_ap_vht_capabilities_radio_id = -1;",
          "213: static int hf_ieee1905_vht_cap_flags = -1;",
          "214: static int hf_ieee1905_assoc_clients_bss_count = -1;",
          "215: static int hf_ieee1905_assoc_bssid = -1;",
          "216: static int hf_ieee1905_bss_client_count = -1;",
          "217: static int hf_ieee1905_bss_client_mac = -1;",
          "218: static int hf_ieee1905_bss_client_last_assoc = -1;",
          "219: static int hf_ieee1905_ap_vht_supported_vht_tx_mcs = -1;",
          "220: static int hf_ieee1905_ap_vht_supported_vht_rx_mcs = -1;",
          "221: static int hf_ieee1905_channel_pref_preference = -1;",
          "222: static int hf_ieee1905_channel_pref_reason = -1;",
          "223: static int hf_ieee1905_channel_preference_radio_id = -1;",
          "224: static int hf_ieee1905_channel_preference_class_count = -1;",
          "225: static int hf_ieee1905_channel_pref_class = -1;",
          "226: static int hf_ieee1905_channel_pref_channel_count = -1;",
          "227: static int hf_ieee1905_channel_pref_channel = -1;",
          "228: static int hf_ieee1905_channel_prefs_flags = -1;",
          "229: static int hf_ieee1905_trans_power_limit_radio_id = -1;",
          "230: static int hf_ieee1905_trans_power_limit_eirp = -1;",
          "231: static int hf_ieee1905_channel_select_resp_radio_id = -1;",
          "232: static int hf_ieee1905_channel_select_resp_code = -1;",
          "233: static int hf_ieee1905_op_channel_report_radio_id = -1;",
          "234: static int hf_ieee1905_op_channel_report_classes = -1;",
          "235: static int hf_ieee1905_op_channel_class = -1;",
          "236: static int hf_ieee1905_op_channel_number = -1;",
          "237: static int hf_ieee1905_op_channel_eirp = -1;",
          "238: static int hf_ieee1905_ap_he_cap_radio_id = -1;",
          "239: static int hf_ieee1905_ap_he_cap_mcs_count = -1;",
          "240: static int hf_ieee1905_unassoc_link_metrics_query_mac = -1;",
          "241: static int hf_ieee1905_unassoc_sta_link_metrics_class = -1;",
          "242: static int hf_ieee1905_sta_metrics_reporting_interval = -1;",
          "243: static int hf_ieee1905_ap_metrics_reporting_interval = -1;",
          "244: static int hf_ieee1905_metric_reporting_policy_radio_id = -1;",
          "245: static int hf_ieee1905_metric_reporting_radio_count = -1;",
          "246: static int hf_ieee1905_metrics_rssi_threshold = -1;",
          "247: static int hf_ieee1905_metrics_channel_util_threshold = -1;",
          "248: static int hf_ieee1905_ap_metric_query_bssid = -1;",
          "249: static int hf_ieee1905_sta_mac_address_type = -1;",
          "250: static int hf_ieee1905_assoc_sta_mac_addr = -1;",
          "251: static int hf_ieee1905_assoc_sta_link_metric_bss_count = -1;",
          "252: static int hf_ieee1905_assoc_sta_link_metrics_bssid = -1;",
          "253: static int hf_ieee1905_assoc_sta_link_metrics_time_delta = -1;",
          "254: static int hf_ieee1905_assoc_sta_link_metrics_dwn_rate = -1;",
          "255: static int hf_ieee1905_assoc_sta_link_metrics_up_rate = -1;",
          "256: static int hf_ieee1905_assoc_sta_link_metrics_rssi = -1;",
          "257: static int hf_ieee1905_unassoc_sta_link_channel_count = -1;",
          "258: static int hf_ieee1905_unassoc_metrics_channel = -1;",
          "259: static int hf_ieee1905_he_max_supported_tx_streams = -1;",
          "260: static int hf_ieee1905_he_max_supported_rx_streams = -1;",
          "261: static int hf_ieee1905_he_support_80plus_mhz_flag = -1;",
          "262: static int hf_ieee1905_he_support_160mhz_flag = -1;",
          "263: static int hf_ieee1905_he_su_beamformer_capable_flag = -1;",
          "264: static int hf_ieee1905_he_mu_beamformer_capable_flag = -1;",
          "265: static int hf_ieee1905_ul_mu_mimo_capable_flag = -1;",
          "266: static int hf_ieee1905_ul_mu_mimo_ofdma_capable_flag = -1;",
          "267: static int hf_ieee1905_dl_mu_mimo_ofdma_capable_flag = -1;",
          "268: static int hf_ieee1905_ul_ofdma_capable = -1;",
          "269: static int hf_ieee1905_dl_ofdma_capable = -1;",
          "270: static int hf_ieee1905_he_cap_flags = -1;",
          "271: static int hf_ieee1905_steering_policy_local_disallowed_count = -1;",
          "272: static int hf_ieee1905_steering_disallowed_mac_addr = -1;",
          "273: static int hf_ieee1905_btm_steering_disallowed_count = -1;",
          "274: static int hf_ieee1905_btm_steering_disallowed_mac_addr = -1;",
          "275: static int hf_ieee1905_steering_policy_radio_count = -1;",
          "276: static int hf_ieee1905_steering_policy_radio_id = -1;",
          "277: static int hf_ieee1905_steering_policy_policy = -1;",
          "278: static int hf_ieee1905_steering_policy_util = -1;",
          "279: static int hf_ieee1905_steering_policy_rssi_threshold = -1;",
          "280: static int hf_ieee1905_radio_restriction_radio_id = -1;",
          "281: static int hf_ieee1905_radio_restriction_op_class_count = -1;",
          "282: static int hf_ieee1905_radio_restriction_op_class = -1;",
          "283: static int hf_ieee1905_radio_restriction_chan_count = -1;",
          "284: static int hf_ieee1905_radio_restriction_channel = -1;",
          "285: static int hf_ieee1905_radio_restriction_min_separation = -1;",
          "286: static int hf_ieee1905_ap_metrics_agent_bssid = -1;",
          "287: static int hf_ieee1905_ap_metrics_channel_utilization = -1;",
          "288: static int hf_ieee1905_ap_metrics_sta_count = -1;",
          "289: static int hf_ieee1905_ap_metrics_service_params_be = -1;",
          "290: static int hf_ieee1905_ap_metrics_service_params_bk = -1;",
          "291: static int hf_ieee1905_ap_metrics_service_params_vo = -1;",
          "292: static int hf_ieee1905_ap_metrics_service_params_vi = -1;",
          "293: static int hf_ieee1905_unassoc_sta_link_metric_op_class = -1;",
          "294: static int hf_ieee1905_unassoc_sta_link_metric_sta_count = -1;",
          "295: static int hf_ieee1905_unassoc_link_metric_mac_addr = -1;",
          "296: static int hf_ieee1905_unassoc_link_metric_channel = -1;",
          "297: static int hf_ieee1905_unassoc_link_metric_delta = -1;",
          "298: static int hf_ieee1905_unassoc_link_metric_uplink_rssi = -1;",
          "299: static int hf_ieee1905_beacon_metrics_query_mac_addr = -1;",
          "300: static int hf_ieee1905_beacon_metrics_query_op_class = -1;",
          "301: static int hf_ieee1905_beacon_metrics_query_channel = -1;",
          "302: static int hf_ieee1905_beacon_metrics_query_bssid = -1;",
          "303: static int hf_ieee1905_beacon_metrics_query_detail = -1;",
          "304: static int hf_ieee1905_beacon_metrics_query_ssid_len = -1;",
          "305: static int hf_ieee1905_beacon_metrics_query_ssid = -1;",
          "306: static int hf_ieee1905_beacon_metrics_channel_count = -1;",
          "307: static int hf_ieee1905_beacon_metrics_report_len = -1;",
          "308: static int hf_ieee1905_beacon_metrics_report_op_class = -1;",
          "309: static int hf_ieee1905_beacon_metrics_report_channel_id = -1;",
          "310: static int hf_ieee1905_phy_type_flag = -1;",
          "311: static int hf_ieee1905_reported_frame_type_flag = -1;",
          "312: static int hf_ieee1905_beacon_report_op_class = -1;",
          "313: static int hf_ieee1905_beacon_report_channel_no = -1;",
          "314: static int hf_ieee1905_beacon_report_meas_start_time = -1;",
          "315: static int hf_ieee1905_beacon_report_meas_duration = -1;",
          "316: static int hf_ieee1905_beacon_reported_frame_flags = -1;",
          "317: static int hf_ieee1905_beacon_report_rcpi = -1;",
          "318: static int hf_ieee1905_beacon_report_rsni = -1;",
          "319: static int hf_ieee1905_beacon_report_bssid = -1;",
          "320: static int hf_ieee1905_beacon_report_ant_id = -1;",
          "321: static int hf_ieee1905_beacon_report_tsf = -1;",
          "322: static int hf_ieee1905_beacon_report_sub_elt = -1;",
          "323: static int hf_ieee1905_beacon_report_sub_elt_len = -1;",
          "324: static int hf_ieee1905_beacon_report_sub_elt_body = -1;",
          "325: static int hf_ieee1905_beacon_metrics_response_mac_addr = -1;",
          "326: static int hf_ieee1905_beacon_metrics_response_status = -1;",
          "328: static gint ett_ieee1905 = -1;",
          "329: static gint ett_ieee1905_flags = -1;",
          "330: static gint ett_tlv = -1;",
          "331: static gint ett_device_information_list = -1;",
          "332: static gint ett_device_information_tree = -1;",
          "333: static gint ett_media_type = -1;",
          "334: static gint ett_bridging_tuples_list = -1;",
          "335: static gint ett_bridging_mac_list = -1;",
          "336: static gint ett_non_1905_neighbor_list = -1;",
          "337: static gint ett_1905_neighbor_list = -1;",
          "338: static gint ett_ieee1905_neighbor_flags = -1;",
          "339: static gint ett_media_type_list = -1;",
          "340: static gint ett_media_item = -1;",
          "341: static gint ett_local_interface_list = -1;",
          "342: static gint ett_local_interface_info = -1;",
          "343: static gint ett_ipv4_list = -1;",
          "344: static gint ett_ipv4_info = -1;",
          "345: static gint ett_ipv4_type_addr_list = -1;",
          "346: static gint ett_ipv4_addr_info = -1;",
          "347: static gint ett_ipv6_list = -1;",
          "348: static gint ett_ipv6_info = -1;",
          "349: static gint ett_ipv6_type_addr_list = -1;",
          "350: static gint ett_ipv6_addr_info = -1;",
          "351: static gint ett_push_button_phy_list = -1;",
          "352: static gint ett_push_button_phy_info = -1;",
          "353: static gint ett_power_off_info = -1;",
          "354: static gint ett_power_change_list = -1;",
          "355: static gint ett_power_change_info = -1;",
          "356: static gint ett_power_status_list = -1;",
          "357: static gint ett_power_status_info = -1;",
          "358: static gint ett_l2_local_intf_list = -1;",
          "359: static gint ett_l2_neighbor_device_info = -1;",
          "360: static gint ett_l2_neighbor_dev_list = -1;",
          "361: static gint ett_l2_neighbor_dev_tree = -1;",
          "362: static gint ett_supported_service_list = -1;",
          "363: static gint ett_searched_service_list = -1;",
          "364: static gint ett_ap_operational_bss_list = -1;",
          "365: static gint ett_ap_operational_bss_tree = -1;",
          "366: static gint ett_ap_operational_bss_intf = -1;",
          "367: static gint ett_ap_operational_bss_intf_list = -1;",
          "368: static gint ett_ap_operational_bss_intf_tree = -1;",
          "369: static gint ett_ieee1905_capabilities_flags = -1;",
          "370: static gint ett_assoc_control_list = -1;",
          "371: static gint ett_ieee1905_steering_request_flags = -1;",
          "372: static gint ett_ieee1905_association_event_flags = -1;",
          "373: static gint ett_radio_basic_class_list = -1;",
          "374: static gint ett_ap_radio_basic_cap_class_tree = -1;",
          "375: static gint ett_radio_basic_non_op_list = -1;",
          "376: static gint ett_ht_cap_flags = -1;",
          "377: static gint ett_vht_cap_flags = -1;",
          "378: static gint ett_assoc_clients_bss_list = -1;",
          "379: static gint ett_assoc_client_bss_tree = -1;",
          "380: static gint ett_assoc_client_list = -1;",
          "381: static gint ett_assoc_client_tree = -1;",
          "382: static gint ett_channel_preference_class_list = -1;",
          "383: static gint ett_ap_channel_preference_class_tree = -1;",
          "384: static gint ett_channel_pref_channel_list = -1;",
          "385: static gint ett_ieee1905_channel_prefs_flags = -1;",
          "386: static gint ett_op_channel_report_class_tree = -1;",
          "387: static gint ett_op_channel_report_class_list = -1;",
          "388: static gint ett_sta_link_metrics_query_channel_list = -1;",
          "389: static gint ett_sta_link_link_mac_addr_list = -1;",
          "390: static gint ett_metric_reporting_policy_list = -1;",
          "391: static gint ett_metric_reporting_policy_tree = -1;",
          "392: static gint ett_ap_metric_query_bssid_list = -1;",
          "393: static gint ett_sta_list_metrics_bss_list = -1;",
          "394: static gint ett_sta_list_metrics_bss_tree = -1;",
          "395: static gint ett_he_mcs_list = -1;",
          "396: static gint ett_he_cap_flags = -1;",
          "397: static gint ett_steering_policy_disallowed_list = -1;",
          "398: static gint ett_btm_steering_policy_disallowed_list = -1;",
          "399: static gint ett_btm_steering_radio_list = -1;",
          "400: static gint ett_radio_restriction_op_class_list = -1;",
          "401: static gint ett_radio_restriction_op_class_tree = -1;",
          "402: static gint ett_radio_restriction_channel_list = -1;",
          "403: static gint ett_radio_restriction_channel_tree = -1;",
          "404: static gint ett_unassoc_sta_link_metric_list = -1;",
          "405: static gint ett_unassoc_sta_link_metric_tree = -1;",
          "406: static gint ett_beacon_metrics_query_list = -1;",
          "407: static gint ett_beacon_metrics_query_tree = -1;",
          "408: static gint ett_beacon_metrics_query_channel_list = -1;",
          "409: static gint ett_beacon_report_subelement_list = -1;",
          "410: static gint ett_beacon_report_sub_element_tree = -1;",
          "411: static gint ett_beacon_metrics_response_report_list = -1;",
          "412: static gint ett_beacon_metrics_response_report_tree = -1;",
          "413: static gint ett_ieee1905_beacon_reported_flags = -1;",
          "415: static expert_field ei_ieee1905_malformed_tlv = EI_INIT;",
          "416: static expert_field ei_ieee1905_extraneous_data_after_eom = EI_INIT;",
          "418: #define TOPOLOGY_DISCOVERY_MESSAGE                     0x0000",
          "419: #define TOPOLOGY_NOTIFICATION_MESSAGE                  0x0001",
          "420: #define TOPOLOGY_QUERY_MESSAGE                         0x0002",
          "421: #define TOPOLOGY_RESPONSE_MESSAGE                      0x0003",
          "422: #define VENDOR_SPECIFIC_MESSAGE                        0x0004",
          "423: #define LINK_METRIC_QUERY_MESSAGE                      0x0005",
          "424: #define LINK_METRIC_RESPONSE_MESSAGE                   0x0006",
          "425: #define AP_AUTOCONFIGURATION_SEARCH_MESSAGE            0x0007",
          "426: #define AP_AUTOCONFIGURATION_RESPONSE_MESSAGE          0x0008",
          "427: #define AP_AUTOCONFIGURATION_WSC_MESSAGE               0x0009",
          "428: #define AP_AUTOCONFIGURATION_RENEW_MESSAGE             0x000A",
          "429: #define IEEE1905_PUSH_BUTTON_EVENT_NOTIFICATION_MESSAGE 0x000B",
          "430: #define IEEE1905_PUSH_BUTTON_JOIN_NOTIFICATION_MESSAGE  0x000C",
          "431: #define HIGHER_LAYER_QUERY_MESSAGE                     0x000D",
          "432: #define HIGHER_LAYER_RESPONSE_MESSAGE                  0x000E",
          "433: #define INTERFACE_POWER_CHANGE_REQUEST_MESSAGE         0x000F",
          "434: #define INTERFACE_POWER_CHANGE_RESPONSE_MESSAGE        0x0010",
          "435: #define GENERIC_PHY_QUERY_MESSAGE                      0x0011",
          "436: #define GENERIC_PHY_RESPONSE_MESSAGE                   0x0012",
          "437: #define IEEE1905_ACK_MESSAGE                           0x8000",
          "438: #define AP_CAPABILITY_QUERY_MESSAGE                    0x8001",
          "439: #define AP_CAPABILITY_REPORT_MESSAGE                   0x8002",
          "440: #define MULTI_AP_POLICY_CONFIG_REQUEST_MESSAGE         0x8003",
          "441: #define CHANNEL_PREFERENCE_QUERY_MESSAGE               0x8004",
          "442: #define CHANNEL_PREFERENCE_REPORT_MESSAGE              0x8005",
          "443: #define CHANNEL_SELECTION_REQUEST_MESSAGE              0x8006",
          "444: #define CHANNEL_SELECTION_RESPONSE_MESSAGE             0x8007",
          "445: #define OPERATING_CHANNEL_REPORT_MESSAGE               0x8008",
          "446: #define CLIENT_CAPABILITIES_QUERY_MESSAGE              0x8009",
          "447: #define CLIENT_CAPABILITIES_REPORT_MESSAGE             0x800A",
          "448: #define AP_METRICS_QUERY_MESSAGE                       0x800B",
          "449: #define AP_METRICS_RESPONSE_MESSAGE                    0x800C",
          "450: #define ASSOCIATED_STA_LINK_METRICS_QUERY_MESSAGE      0x800D",
          "451: #define ASSOCIATED_STA_LINK_METRICS_RESPONSE_MESSAGE   0x800E",
          "452: #define UNASSOCIATED_STA_LINK_METRICS_QUERY_MESSAGE    0x800F",
          "453: #define UNASSOCIATED_STA_LINK_METRICS_RESPONSE_MESSAGE 0x8010",
          "454: #define BEACON_METRICS_QUERY_MESSAGE                   0x8011",
          "455: #define BEACON_METRICS_REPONSE_METRICS                 0x8012",
          "456: #define COMBINED_INFRASTRUCTURE_METRICS_MESSAGE        0x8013",
          "457: #define CLIENT_STEERING_REQUEST_MESSAGE                0x8014",
          "458: #define CLIENT_STEERING_BTM_REPORT_MESSAGE             0x8015",
          "459: #define CLIENT_ASSOCIATION_CONTROL_REQUEST_MESSAGE     0x8016",
          "460: #define STEERING_COMPLETED_MESSAGE                     0x8017",
          "461: #define HIGHER_LAYER_DATA_MESSAGE                      0x8018",
          "463: static const value_string ieee1905_message_type_vals[] = {",
          "464:   { TOPOLOGY_DISCOVERY_MESSAGE,                  \"Topology discovery\" },",
          "465:   { TOPOLOGY_NOTIFICATION_MESSAGE,               \"Topology response\" },",
          "466:   { TOPOLOGY_QUERY_MESSAGE,                      \"Topology query\" },",
          "467:   { TOPOLOGY_RESPONSE_MESSAGE,                   \"Topology response\" },",
          "468:   { VENDOR_SPECIFIC_MESSAGE,                     \"Vendor specific\" },",
          "469:   { LINK_METRIC_QUERY_MESSAGE,                   \"Link metric query\" },",
          "470:   { LINK_METRIC_RESPONSE_MESSAGE,                \"Link metric response\" },",
          "471:   { AP_AUTOCONFIGURATION_SEARCH_MESSAGE,         \"AP autoconfiguration search\" },",
          "472:   { AP_AUTOCONFIGURATION_RESPONSE_MESSAGE,       \"AP autoconfiguration response\" },",
          "473:   { AP_AUTOCONFIGURATION_WSC_MESSAGE,            \"AP autoconfiguration Wi-Fi simple configuration (WSC)\" },",
          "474:   { AP_AUTOCONFIGURATION_RENEW_MESSAGE,          \"AP autoconfiguration renew\" },",
          "475:   { IEEE1905_PUSH_BUTTON_EVENT_NOTIFICATION_MESSAGE, \"1905 push button event notification\" },",
          "476:   { IEEE1905_PUSH_BUTTON_JOIN_NOTIFICATION_MESSAGE,  \"1905 push button join notificaton\" },",
          "477:   { HIGHER_LAYER_QUERY_MESSAGE,                  \"Higher layer query\" },",
          "478:   { HIGHER_LAYER_RESPONSE_MESSAGE,               \"Higher layer response\" },",
          "479:   { INTERFACE_POWER_CHANGE_REQUEST_MESSAGE,      \"Interface power change request\" },",
          "480:   { INTERFACE_POWER_CHANGE_RESPONSE_MESSAGE,     \"Interface power change response\" },",
          "481:   { GENERIC_PHY_QUERY_MESSAGE,                   \"Generic phy query\" },",
          "482:   { GENERIC_PHY_RESPONSE_MESSAGE,                \"Generic phy response\" },",
          "483:   { IEEE1905_ACK_MESSAGE,                        \"1905 Ack\" },",
          "484:   { AP_CAPABILITY_QUERY_MESSAGE,                 \"AP Capability Query\" },",
          "485:   { AP_CAPABILITY_REPORT_MESSAGE,                \"AP Capability Report\" },",
          "486:   { MULTI_AP_POLICY_CONFIG_REQUEST_MESSAGE,      \"Multi-AP Policy Config Request\" },",
          "487:   { CHANNEL_PREFERENCE_QUERY_MESSAGE,            \"Channel Preference Query\" },",
          "488:   { CHANNEL_PREFERENCE_REPORT_MESSAGE,           \"Channel Preference Report\" },",
          "489:   { CHANNEL_SELECTION_REQUEST_MESSAGE,           \"Channel Selection Request\" },",
          "490:   { CHANNEL_SELECTION_RESPONSE_MESSAGE,          \"Channel Selection Response\" },",
          "491:   { OPERATING_CHANNEL_REPORT_MESSAGE,            \"Operating Channel Report\" },",
          "492:   { CLIENT_CAPABILITIES_QUERY_MESSAGE,           \"Client Capability Query\"  },",
          "493:   { CLIENT_CAPABILITIES_REPORT_MESSAGE,          \"Client Capability Report\" },",
          "494:   { AP_METRICS_QUERY_MESSAGE,                    \"AP Metrics Query\" },",
          "495:   { AP_METRICS_RESPONSE_MESSAGE,                 \"AP Metrics Response\" },",
          "496:   { ASSOCIATED_STA_LINK_METRICS_QUERY_MESSAGE,   \"Associated STA Link Metrics Query\" },",
          "497:   { ASSOCIATED_STA_LINK_METRICS_RESPONSE_MESSAGE, \"Associated STA Link Metrics Resonse\" },",
          "498:   { UNASSOCIATED_STA_LINK_METRICS_QUERY_MESSAGE, \"Unassociated STA Link Metrics Query\" },",
          "499:   { UNASSOCIATED_STA_LINK_METRICS_RESPONSE_MESSAGE, \"Unassociated STA Link Metrics Resonse\" },",
          "500:   { BEACON_METRICS_QUERY_MESSAGE,                \"Beacon Metrics Query\" },",
          "501:   { BEACON_METRICS_REPONSE_METRICS,              \"Beacon Metrics Response\" },",
          "502:   { COMBINED_INFRASTRUCTURE_METRICS_MESSAGE,     \"Combined Infrastructure Metrics\" },",
          "503:   { CLIENT_STEERING_REQUEST_MESSAGE,             \"Client Steering Request\" },",
          "504:   { CLIENT_STEERING_BTM_REPORT_MESSAGE,          \"Client Steering BTM Report\" },",
          "505:   { CLIENT_ASSOCIATION_CONTROL_REQUEST_MESSAGE,  \"Client Association Control Request\" },",
          "506:   { STEERING_COMPLETED_MESSAGE,                  \"Steering Completed\" },",
          "507:   { HIGHER_LAYER_DATA_MESSAGE,                   \"Higher Layer Data\" },",
          "508:   { 0, NULL }",
          "509: };",
          "510: static value_string_ext ieee1905_message_type_vals_ext = VALUE_STRING_EXT_INIT(ieee1905_message_type_vals);",
          "512: #define EOM_TLV                                 0x00",
          "513: #define AL_MAC_ADDRESS_TYPE_TLV                 1",
          "514: #define MAC_ADDRESS_TYPE_TLV                    2",
          "515: #define DEVICE_INFORMATION_TYPE_TLV             3",
          "516: #define DEVICE_BRIDGING_CAPABILITY_TLV          4",
          "517: #define NON_1905_NEIGHBOR_DEVICE_LIST_TLV       6",
          "518: #define NEIGHBOR_DEVICE_TLV                     7",
          "519: #define LINK_METRIC_QUERY_TLV                   8",
          "520: #define TRANSMITTER_LINK_METRIC_TLV             9",
          "521: #define RECEIVER_LINK_METRIC_TLV                10",
          "522: #define VENDOR_SPECIFIC_TLV                     11",
          "523: #define LINK_METRIC_RESULT_CODE_TLV             12",
          "524: #define SEARCHED_ROLE_TLV                       13",
          "525: #define AUTO_CONFIG_FREQ_BAND_TLV               14",
          "526: #define SUPPORTED_ROLE_TLV                      15",
          "527: #define SUPPORTED_FREQ_BAND_TLV                 16",
          "528: #define WSC_TLV                                 17",
          "529: #define PUSH_BUTTON_EVENT_NOTIFICATION_TLV      18",
          "530: #define PUSH_BUTTON_JOIN_NOTIFICATION_TLV       19",
          "531: #define GENERIC_PHY_DEVICE_INFORMATION_TLV      20",
          "532: #define DEVICE_IDENTIFICATION_TYPE_TLV          21",
          "533: #define CONTROL_URL_TYPE_TLV                    22",
          "534: #define IPV4_TYPE_TLV                           23",
          "535: #define IPV6_TYPE_TLV                           24",
          "536: #define PUSH_BUTTON_EVENT_TYPE_NOTIFICATION_TLV 25",
          "537: #define IEEE1905_PROFILE_VERSION_TLV            26",
          "538: #define POWER_OFF_INTERFACE_TLV                 27",
          "539: #define INTERFACE_POWER_CHANGE_INFORMATION_TLV  28",
          "540: #define INTERFACE_POWER_CHANGE_STATUS_TLV       29",
          "541: #define L2_NEIGHBOR_DEVICE_TLV                  30",
          "542: #define SUPPORTED_SERVICE_TLV                   0x80",
          "543: #define SEARCHED_SERVICE_TLV                    0x81",
          "544: #define AP_RADIO_IDENTIFIER_TLV                 0x82",
          "545: #define AP_OPERATIONAL_BSS_TLV                  0x83",
          "546: #define ASSOCIATED_CLIENTS_TLV                  0x84",
          "547: #define AP_RADIO_BASIC_CAPABILITIES_TLV         0x85",
          "548: #define AP_HT_CAPABILITIES_TLV                  0x86",
          "549: #define AP_VHT_CAPABILITIES_TLV                 0x87",
          "550: #define AP_HE_CAPABILITIES_TLV                  0x88",
          "551: #define STEERING_POLICY_TLV                     0x89",
          "552: #define METRIC_REPORTING_POLICY_TLV             0x8A",
          "553: #define CHANNEL_PREFERENCE_TLV                  0x8B",
          "554: #define RADIO_OPERATION_RESTRICTION_TLV         0x8C",
          "555: #define TRANSMIT_POWER_LIMIT_TLV                0x8D",
          "556: #define CHANNEL_SELECTION_RESPONSE_TLV          0x8E",
          "557: #define OPERATING_CHANNEL_REPORT_TLV            0x8F",
          "558: #define CLIENT_INFO_TLV                         0x90",
          "559: #define CLIENT_CAPABILITY_REPORT_TLV            0x91",
          "560: #define CLIENT_ASSOCIATION_EVENT_TLV            0x92",
          "561: #define AP_METRIC_QUERY_TLV                     0x93",
          "562: #define AP_METRICS_TLV                          0x94",
          "563: #define STA_MAC_ADDRESS_TYPE_TLV                0x95",
          "564: #define ASSOCIATED_STA_LINK_METRICS_TLV         0x96",
          "565: #define UNASSOCIATED_STA_LINK_METRICS_QUERY_TLV    0x97",
          "566: #define UNASSOCIATED_STA_LINK_METRICS_RESPONSE_TLV 0x98",
          "567: #define BEACON_METRICS_QUERY_TLV                0x99",
          "568: #define BEACON_METRICS_RESPONSE_TLV             0x9A",
          "569: #define STEERING_REQUEST_TLV                    0x9B",
          "570: #define STEERING_BTM_REPORT_TLV                 0x9C",
          "571: #define CLIENT_ASSOCIATION_CONTROL_REQUEST_TLV  0x9D",
          "572: #define BACKHAUL_STEERING_REQUEST_TLV           0x9E",
          "573: #define BACKHAUL_STEERING_RESPONSE_TLV          0x9F",
          "574: #define HIGHER_LAYER_DATA_TLV                   0xA0",
          "575: #define AP_CAPABILITY_TLV                       0xA1",
          "577: static const value_string ieee1905_tlv_types_vals[] = {",
          "578:   { EOM_TLV,                                 \"End of message\" },",
          "579:   { AL_MAC_ADDRESS_TYPE_TLV,                 \"1905 AL MAC address type\" },",
          "580:   { MAC_ADDRESS_TYPE_TLV,                    \"MAC addres type\" },",
          "581:   { DEVICE_INFORMATION_TYPE_TLV,             \"1905 device information type\" },",
          "582:   { DEVICE_BRIDGING_CAPABILITY_TLV,          \"Device bridging capability\" },",
          "583:   { NON_1905_NEIGHBOR_DEVICE_LIST_TLV,       \"Non-1905 neighbor device list\" },",
          "584:   { NEIGHBOR_DEVICE_TLV,                     \"1905 neighbor device\" },",
          "585:   { LINK_METRIC_QUERY_TLV,                   \"Link metric query\" },",
          "586:   { TRANSMITTER_LINK_METRIC_TLV,             \"1905 transmitter link metric\" },",
          "587:   { RECEIVER_LINK_METRIC_TLV,                \"1905 receiver link metric\" },",
          "588:   { VENDOR_SPECIFIC_TLV,                     \"Vendor specific\" },",
          "589:   { LINK_METRIC_RESULT_CODE_TLV,             \"1905 link metric result code\" },",
          "590:   { SEARCHED_ROLE_TLV,                       \"SearchedRole\" },",
          "591:   { AUTO_CONFIG_FREQ_BAND_TLV,               \"AutoconfigFreqBand\" },",
          "592:   { SUPPORTED_ROLE_TLV,                      \"SupportedRole\" },",
          "593:   { SUPPORTED_FREQ_BAND_TLV,                 \"SupportedFreqBand\" },",
          "594:   { WSC_TLV,                                 \"WSC\" },",
          "595:   { PUSH_BUTTON_EVENT_NOTIFICATION_TLV,      \"Push_Button_Event notification\" },",
          "596:   { PUSH_BUTTON_JOIN_NOTIFICATION_TLV,       \"Push_Button_Join notification\" },",
          "597:   { GENERIC_PHY_DEVICE_INFORMATION_TLV,      \"Generic Phy device information\" },",
          "598:   { DEVICE_IDENTIFICATION_TYPE_TLV,          \"Device identificaton type\" },",
          "599:   { CONTROL_URL_TYPE_TLV,                    \"Control URL type\" },",
          "600:   { IPV4_TYPE_TLV,                           \"IPv4 type\" },",
          "601:   { IPV6_TYPE_TLV,                           \"IPv6 type\" },",
          "602:   { PUSH_BUTTON_EVENT_TYPE_NOTIFICATION_TLV, \"Push_Button_Generic_Phy_Event notification\" },",
          "603:   { IEEE1905_PROFILE_VERSION_TLV,            \"1905 profile version\" },",
          "604:   { POWER_OFF_INTERFACE_TLV,                 \"Power off interface\" },",
          "605:   { INTERFACE_POWER_CHANGE_INFORMATION_TLV,  \"Interface power change information\" },",
          "606:   { INTERFACE_POWER_CHANGE_STATUS_TLV,       \"Interface power change status\" },",
          "607:   { L2_NEIGHBOR_DEVICE_TLV,                  \"L2 neighbor device\" },",
          "608:   { SUPPORTED_SERVICE_TLV,                   \"Supported service information\" },",
          "609:   { SEARCHED_SERVICE_TLV,                    \"Searched service information\" },",
          "610:   { AP_RADIO_IDENTIFIER_TLV,                 \"AP radio identifier\" },",
          "611:   { AP_OPERATIONAL_BSS_TLV,                  \"AP operational BSS\" },",
          "612:   { ASSOCIATED_CLIENTS_TLV,                  \"Associated clients\" },",
          "613:   { AP_RADIO_BASIC_CAPABILITIES_TLV,         \"AP radio basic capabilities\" },",
          "614:   { AP_HT_CAPABILITIES_TLV,                  \"AP HT capabilities\" },",
          "615:   { AP_VHT_CAPABILITIES_TLV,                 \"AP VHT capabilities\" },",
          "616:   { AP_HE_CAPABILITIES_TLV,                  \"AP HE capabilities\" },",
          "617:   { STEERING_POLICY_TLV,                     \"Steering policy\" },",
          "618:   { METRIC_REPORTING_POLICY_TLV,             \"Metric reporting policy\" },",
          "619:   { CHANNEL_PREFERENCE_TLV,                  \"Channel preference\" },",
          "620:   { RADIO_OPERATION_RESTRICTION_TLV,         \"Radio operation restriction\" },",
          "621:   { TRANSMIT_POWER_LIMIT_TLV,                \"Transmit power limit\" },",
          "622:   { CHANNEL_SELECTION_RESPONSE_TLV,          \"Channel selection response\" },",
          "623:   { OPERATING_CHANNEL_REPORT_TLV,            \"Operating channel report\" },",
          "624:   { CLIENT_INFO_TLV,                         \"Client info\" },",
          "625:   { CLIENT_CAPABILITY_REPORT_TLV,            \"Client capability report\" },",
          "626:   { CLIENT_ASSOCIATION_EVENT_TLV,            \"Client association event\" },",
          "627:   { AP_METRIC_QUERY_TLV,                     \"AP metric query\" },",
          "628:   { AP_METRICS_TLV,                          \"AP metrics\" },",
          "629:   { STA_MAC_ADDRESS_TYPE_TLV,                \"STA MAC address type\" },",
          "630:   { ASSOCIATED_STA_LINK_METRICS_TLV,         \"Associated STA link metrics\" },",
          "631:   { UNASSOCIATED_STA_LINK_METRICS_QUERY_TLV,       \"Unassociated STA link metrics query\" },",
          "632:   { UNASSOCIATED_STA_LINK_METRICS_RESPONSE_TLV, \"Unassociated STA link metrics response\" },",
          "633:   { BEACON_METRICS_QUERY_TLV,                \"Beacon metrics query\" },",
          "634:   { BEACON_METRICS_RESPONSE_TLV,             \"Beacon metrics response\" },",
          "635:   { STEERING_REQUEST_TLV,                    \"Steering request\" },",
          "636:   { STEERING_BTM_REPORT_TLV,                 \"Steering BTM report\" },",
          "637:   { CLIENT_ASSOCIATION_CONTROL_REQUEST_TLV,  \"Client association control request\" },",
          "638:   { BACKHAUL_STEERING_REQUEST_TLV,           \"Backhaul steering request\" },",
          "639:   { BACKHAUL_STEERING_RESPONSE_TLV,          \"Backhaul steering response\" },",
          "640:   { HIGHER_LAYER_DATA_TLV,                   \"Higher layer data\" },",
          "641:   { AP_CAPABILITY_TLV,                       \"AP capability\" },",
          "642:   { 0, NULL }",
          "643: };",
          "644: static value_string_ext ieee1905_tlv_types_vals_ext = VALUE_STRING_EXT_INIT(ieee1905_tlv_types_vals);",
          "646: static const true_false_string tfs_last_fragment = {",
          "647:   \"This is the last fragment\",",
          "648:   \"This is not the last fragment\"",
          "649: };",
          "651: static const true_false_string tfs_relay_indicator = {",
          "652:   \"Relayed multicast\",",
          "653:   \"Neighbor multicast or unicast\"",
          "654: };",
          "656: static const value_string ieee1905_link_metric_query_type_vals[] = {",
          "657:   { 0x00, \"All neighbors\" },",
          "658:   { 0x01, \"Specific neighbor\" },",
          "659:   { 0, NULL }",
          "660: };",
          "662: static const value_string ieee1905_link_metrics_requested_vals[] = {",
          "663:   { 0x00, \"Tx link metrics only\" },",
          "664:   { 0x01, \"Rx link metrics only\" },",
          "665:   { 0x02, \"Both Tx and Rx link metrics\" },",
          "666:   { 0, NULL }",
          "667: };",
          "669: static const value_string ieee1905_bridge_flag_vals[] = {",
          "670:   { 0x00, \"1905 link does not include an IEEE 802.1 bridge\" },",
          "671:   { 0x01, \"1905 link includes one or more IEEE 802.1 bridges\" },",
          "672:   { 0, NULL }",
          "673: };",
          "675: static const value_string ieee1905_media_type_0_vals[] = {",
          "676:   { 0, \"IEEE 802.3u fast Ethernet\" },",
          "677:   { 1, \"IEEE 802.3ab gigabit\" },",
          "678:   { 0, NULL }",
          "679: };",
          "681: static const value_string ieee1905_media_type_1_vals[] = {",
          "682:   { 0, \"IEEE 802.11b (2.4 GHz)\" },",
          "683:   { 1, \"IEEE 802.11g (2.4 GHz)\" },",
          "684:   { 2, \"IEEE 802.11a (5 GHz)\" },",
          "685:   { 3, \"IEEE 802.11n (2.4 GHz)\" },",
          "686:   { 4, \"IEEE 802.11n (5 GHz)\" },",
          "687:   { 5, \"IEEE 802.11ac (5 GHz)\" },",
          "688:   { 6, \"IEEE 802.11ad (60 GHz)\" },",
          "689:   { 7, \"IEEE 802.11ax (2.4 GHz)\" },",
          "690:   { 8, \"IEEE 802.11ax (5 GHz)\" },",
          "691:   { 0, NULL }",
          "692: };",
          "694: static const value_string ieee1905_media_type_2_vals[] = {",
          "695:   { 0, \"IEEE 1901 wavelet\" },",
          "696:   { 1, \"IEEE 1901 FFT\" },",
          "697:   { 0, NULL }",
          "698: };",
          "700: static const value_string ieee1905_media_type_3_vals[] = {",
          "701:   { 0, \"MoCA v1.1\" },",
          "702:   { 0, NULL }",
          "703: };",
          "705: static const value_string ieee1905_link_metric_result_vals[] = {",
          "706:   { 0, \"Invalid neighbor\" },",
          "707:   { 0, NULL }",
          "708: };",
          "710: static const true_false_string tfs_bridges_flag = {",
          "711:   \"At least one IEEE 802.1 bridge exists between this device and the neighbor\",",
          "712:   \"No IEEE 802.1 bridges exist\"",
          "713: };",
          "715: static const value_string ieee1905_searched_role_vals[] = {",
          "716:   { 0, \"Registrar\" },",
          "717:   { 0, NULL }",
          "718: };",
          "720: static const value_string ieee1905_freq_band_vals[] = {",
          "721:   { 0, \"802.11 2.4 GHz\" },",
          "722:   { 1, \"802.11 5 GHz\" },",
          "723:   { 2, \"802.11 60 GHz\" },",
          "724:   { 0, NULL }",
          "725: };",
          "727: static const value_string ieee1905_ipv4_addr_type_vals[] = {",
          "728:   { 0, \"Unknown\" },",
          "729:   { 1, \"DHCP\" },",
          "730:   { 2, \"Static\" },",
          "731:   { 3, \"Auto-IP\" },",
          "732:   { 0, NULL }",
          "733: };",
          "735: static const value_string ieee1905_ipv6_addr_type_vals[] = {",
          "736:   { 0, \"Unknown\" },",
          "737:   { 1, \"DHCP\" },",
          "738:   { 2, \"Static\" },",
          "739:   { 3, \"SLAAC\" },",
          "740:   { 0, NULL}",
          "741: };",
          "743: static const value_string ieee1905_profile_version_vals[] = {",
          "744:   { 0, \"1905.1\" },",
          "745:   { 1, \"1905.1a\" },",
          "746:   { 0, NULL }",
          "747: };",
          "749: static const value_string ieee1905_power_state_vals[] = {",
          "750:   { 0, \"PWR_OFF\" },",
          "751:   { 1, \"PWR_ON\" },",
          "752:   { 2, \"PWR_SAVE\" },",
          "753:   { 0, NULL }",
          "754: };",
          "756: static const value_string ieee1905_power_status_vals[] = {",
          "757:   { 0, \"Request completed\" },",
          "758:   { 1, \"No change made\" },",
          "759:   { 2, \"Alternate change made\" },",
          "760:   { 0, NULL }",
          "761: };",
          "763: static const value_string ieee1905_supported_service_vals[] = {",
          "764:   { 0x00, \"Multi-AP Controller\" },",
          "765:   { 0x01, \"Multi-AP Agent\" },",
          "766:   { 0, NULL }",
          "767: };",
          "769: static const value_string ieee1905_higher_layer_protocol_vals[] = {",
          "770:   { 0x00, \"Reserved\" },",
          "771:   { 0x01, \"TR-181 transport protocol\" },",
          "772:   { 0, NULL }",
          "773: };",
          "775: static const value_string ieee1905_backhaul_status_vals[] = {",
          "776:   { 0x00, \"Success\" },",
          "777:   { 0x01, \"Rejected because the backhaul station cannot operate on the channel specified\" },",
          "778:   { 0x02, \"Rejected because the target BSS signal is too weak or not found\" },",
          "779:   { 0x03, \"Authentication or association rejected by the target BSS\" },",
          "780:   { 0, NULL },",
          "781: };",
          "783: static const value_string ieee1905_association_control_vals[] = {",
          "784:   { 0x00, \"Block\" },",
          "785:   { 0x01, \"Unblock\" },",
          "786:   { 0, NULL }",
          "787: };",
          "789: static const true_false_string tfs_ieee1905_steering_request_mode_flag = {",
          "790:   \"Request is a steering mandate to trigger steering for specific client STA(s)\",",
          "791:   \"Request is a steering opportunity\",",
          "792: };",
          "794: static const true_false_string tfs_ieee1905_btm_disassoc_imminent_flag = {",
          "795:   \"BTM disassociation imminent\",",
          "796:   \"BTM disassociation not imminent\"",
          "797: };",
          "799: static const true_false_string tfs_ieee1905_btm_abridged_flag = {",
          "800:   \"BTM abridged\",",
          "801:   \"BTM not abridged\"",
          "802: };",
          "804: static const value_string ieee1905_client_capability_result_vals[] = {",
          "805:   { 0x00, \"Success\" },",
          "806:   { 0x01, \"Unspecified failure\" },",
          "807:   { 0x02, \"Client not associated with specified BSSID\" },",
          "808:   { 0, NULL }",
          "809: };",
          "811: static const true_false_string tfs_ieee1905_association_event_flag = {",
          "812:   \"Client has joined the BSS\",",
          "813:   \"Client has left the BSS\"",
          "814: };",
          "816: static const value_string max_supported_tx_streams_vals[] = {",
          "817:   { 0x00, \"1 Tx spatial stream\" },",
          "818:   { 0x01, \"2 Tx spatial streams\" },",
          "819:   { 0x02, \"3 Tx spatial streams\" },",
          "820:   { 0x03, \"4 Tx spatial streams\" },",
          "821:   { 0, NULL },",
          "822: };",
          "824: static const value_string max_supported_rx_streams_vals[] = {",
          "825:   { 0x00, \"1 Rx spatial stream\" },",
          "826:   { 0x01, \"2 Rx spatial streams\" },",
          "827:   { 0x02, \"3 Rx spatial streams\" },",
          "828:   { 0x03, \"4 Rx spatial streams\" },",
          "829:   { 0, NULL },",
          "830: };",
          "832: static const value_string vht_he_max_supported_tx_streams_vals[] = {",
          "833:   { 0x00, \"1 Tx spatial stream\" },",
          "834:   { 0x01, \"2 Tx spatial streams\" },",
          "835:   { 0x02, \"3 Tx spatial streams\" },",
          "836:   { 0x03, \"4 Tx spatial streams\" },",
          "837:   { 0x04, \"5 Tx spatial streams\" },",
          "838:   { 0x05, \"6 Tx spatial streams\" },",
          "839:   { 0x06, \"7 Tx spatial streams\" },",
          "840:   { 0x07, \"8 Tx spatial streams\" },",
          "841:   { 0, NULL },",
          "842: };",
          "844: static const value_string vht_he_max_supported_rx_streams_vals[] = {",
          "845:   { 0x00, \"1 Rx spatial stream\" },",
          "846:   { 0x01, \"2 Rx spatial streams\" },",
          "847:   { 0x02, \"3 Rx spatial streams\" },",
          "848:   { 0x03, \"4 Rx spatial streams\" },",
          "849:   { 0x04, \"5 Rx spatial streams\" },",
          "850:   { 0x05, \"6 Rx spatial streams\" },",
          "851:   { 0x06, \"7 Rx spatial streams\" },",
          "852:   { 0x07, \"8 Rx spatial streams\" },",
          "853:   { 0, NULL },",
          "854: };",
          "856: static const value_string  channel_preference_prefs_vals[] = {",
          "857:   { 0x0, \"Non-operable\" },",
          "858:   { 0x1, \"Operable with preference score 1\" },",
          "859:   { 0x2, \"Operable with preference score 2\" },",
          "860:   { 0x3, \"Operable with preference score 3\" },",
          "861:   { 0x4, \"Operable with preference score 4\" },",
          "862:   { 0x5, \"Operable with preference score 5\" },",
          "863:   { 0x6, \"Operable with preference score 6\" },",
          "864:   { 0x7, \"Operable with preference score 7\" },",
          "865:   { 0x8, \"Operable with preference score 8\" },",
          "866:   { 0x9, \"Operable with preference score 9\" },",
          "867:   { 0xA, \"Operable with preference score 10\" },",
          "868:   { 0xB, \"Operable with preference score 11\" },",
          "869:   { 0xC, \"Operable with preference score 12\" },",
          "870:   { 0xD, \"Operable with preference score 13\" },",
          "871:   { 0xE, \"Operable with preference score 14\" },",
          "872:   { 0, NULL }",
          "873: };",
          "875: static const value_string channel_preference_reason_vals[] = {",
          "876:   { 0x0, \"Unspecified\" },",
          "877:   { 0x1, \"Proximate non-802.11 interference in local environment\" },",
          "878:   { 0x2, \"Intra-network 802.11 OBSS interfernece management\" },",
          "879:   { 0x3, \"External network 802.11 OBSS interference management\" },",
          "880:   { 0x4, \"Reduced coverage (e.g. due to limited transmit power\" },",
          "881:   { 0x5, \"Reduced throughput (e.g. due to limited channel bandwith...\" },",
          "882:   { 0x6, \"In-device interference within AP\" },",
          "883:   { 0x7, \"Operation disallowed due to radar detection on a DFS channel\" },",
          "884:   { 0x8, \"Operation would prevent backhaul operatoon uding shared radio\" },",
          "885:   { 0x9, \"Immediate operation possible on a DFS channel\" },",
          "886:   { 0xA, \"DFS channel state unknown\" },",
          "887:   { 0, NULL }",
          "888: };",
          "890: static const value_string ieee1905_channel_select_resp_code_vals[] = {",
          "891:   { 0x00, \"Accept\" },",
          "892:   { 0x01, \"Declined because request violates current preferences\" },",
          "893:   { 0x02, \"Declined because request violates most recently reported preferencs\" },",
          "894:   { 0x02, \"Declined because request would prevent operation of a current backhaul link\" },",
          "895:   { 0, NULL }",
          "896: };",
          "898: static const value_string ieee1905_steering_policy_vals[] = {",
          "899:   { 0x0, \"Agent initiated steering disallowed\" },",
          "900:   { 0x1, \"Agent initiated RSSI-based steering mandated\" },",
          "901:   { 0x2, \"Agent initiated RSSI-based steering allowed\" },",
          "902:   { 0, NULL}",
          "903: };",
          "905: static const value_string beacon_metrics_status_vals[] = {",
          "906:   { 0x00, \"Success - Beacon report received from STA\" },",
          "907:   { 0x40, \"Failure - STA supports but no beacon report received\" },",
          "908:   { 0x80, \"Failure - STA does not support beacon reports\" },",
          "909:   { 0xC0, \"Failure - unspecified\" },",
          "910:   { 0, NULL }",
          "911: };",
          "913: static const value_string condensed_phy_type_vals[] = {",
          "914:   { 0, \"phy_type_any\" },",
          "915:   { 1, \"phy_type_fhss\" },",
          "916:   { 2, \"phy_type_dsss\" },",
          "917:   { 3, \"phy_type_irbaseband\" },",
          "918:   { 4, \"phy_type_ofdm\" },",
          "919:   { 5, \"phy_type_hrdsss\" },",
          "920:   { 6, \"phy_type_erp\" },",
          "921:   { 7, \"phy_type_ht\" },",
          "922:   { 8, \"phy_type_vht\" },",
          "923:   { 0, NULL }",
          "924: };",
          "926: static const value_string reported_frame_type_vals[] = {",
          "927:   { 0, \"Beacon or Probe Response frame\" },",
          "928:   { 1, \"Measurement Pilot frame\" },",
          "929:   { 0, NULL }",
          "930: };",
          "932: static const value_string beacon_report_sub_element_vals[] = {",
          "933:   { 1, \"Reported Frame Body\" },",
          "934:   { 163, \"Wite Bandwidth Channel Switch\" },",
          "935:   { 221, \"Vendor Specific\" },",
          "936:   { 0, NULL }",
          "937: };",
          "943: #define IEEE1905_MIN_LENGTH 11",
          "945: static int",
          "946: dissect_media_type(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "947:         proto_tree *tree, guint offset)",
          "948: {",
          "949:     proto_item *pi = NULL;",
          "950:     proto_tree *media_type = NULL;",
          "951:     guint8 bits_15_to_8 = 0, bits_7_to_0 = 0;",
          "953:     pi = proto_tree_add_item(tree, hf_ieee1905_media_type, tvb, offset,",
          "954:                              2, ENC_BIG_ENDIAN);",
          "956:     media_type = proto_item_add_subtree(pi, ett_media_type);",
          "961:     bits_15_to_8 = tvb_get_guint8(tvb, offset);",
          "962:     bits_7_to_0 = tvb_get_guint8(tvb, offset + 1);",
          "964:     proto_tree_add_item(media_type, hf_ieee1905_media_type_high, tvb, offset,",
          "965:                         1, ENC_NA);",
          "966:     offset++;",
          "968:     proto_tree_add_item(media_type, hf_ieee1905_media_type_low, tvb, offset,",
          "969:                         1, ENC_NA);",
          "970:     offset++;",
          "972:     switch (bits_15_to_8) {",
          "973:     case 0:",
          "974:         proto_item_append_text(pi, \", %s\",",
          "975:                         val_to_str(bits_7_to_0,",
          "976:                             ieee1905_media_type_0_vals,",
          "977:                             \"Reserved\"));",
          "978:         break;",
          "980:     case 1:",
          "981:         proto_item_append_text(pi, \", %s\",",
          "982:                         val_to_str(bits_7_to_0,",
          "983:                             ieee1905_media_type_1_vals,",
          "984:                             \"Reserved\"));",
          "985:         break;",
          "987:     case 2:",
          "988:         proto_item_append_text(pi, \", %s\",",
          "989:                         val_to_str(bits_7_to_0,",
          "990:                             ieee1905_media_type_2_vals,",
          "991:                             \"Reserved\"));",
          "992:         break;",
          "994:     case 3:",
          "995:         proto_item_append_text(pi, \", %s\",",
          "996:                         val_to_str(bits_7_to_0,",
          "997:                             ieee1905_media_type_3_vals,",
          "998:                             \"Reserved\"));",
          "999:         break;",
          "1001:     case 0xff:",
          "1002:         proto_item_append_text(pi, \", Unknown media\");",
          "1003:         break;",
          "1005:     default:",
          "1006:         proto_item_append_text(pi, \", Reserved\");",
          "1007:         break;",
          "1008:     }",
          "1010:     return offset;",
          "1011: }",
          "1017: static int",
          "1018: dissect_local_interface_list(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1019:         proto_tree *tree, guint offset, guint16 len)",
          "1020: {",
          "1021:     guint count = 0;",
          "1022:     guint media_type_offset = 0;",
          "1023:     proto_item *pi = NULL;",
          "1024:     proto_tree *dev_tree = NULL;",
          "1026:     while (len > 0) {",
          "1027:         guint8 spec_info_len = 0;",
          "1029:         dev_tree = proto_tree_add_subtree_format(tree, tvb, offset, 8,",
          "1030:                                 ett_device_information_tree,",
          "1031:                                 &pi, \"Local interface %u device info\",",
          "1032:                                 count);",
          "1034:         proto_tree_add_item(dev_tree, hf_ieee1905_mac_address_type, tvb,",
          "1035:                             offset, 6, ENC_NA);",
          "1036:         offset += 6;",
          "1037:         len -= 6;",
          "1039:         media_type_offset = offset;",
          "1041:         offset = dissect_media_type(tvb, pinfo, dev_tree, offset);",
          "1043:         spec_info_len = tvb_get_guint8(tvb, offset);",
          "1045:         proto_tree_add_item(dev_tree, hf_ieee1905_media_spec_info_len,",
          "1046:                             tvb, offset, 1, ENC_NA);",
          "1047:         offset++;",
          "1049:         if (spec_info_len) {",
          "1051:             proto_tree_add_item(dev_tree, hf_ieee1905_media_spec_info,",
          "1052:                                 tvb, offset, spec_info_len, ENC_NA);",
          "1053:             offset += spec_info_len;",
          "1054:         }",
          "1056:         proto_item_set_len(pi, 6 + (offset - media_type_offset));",
          "1058:         len -= (offset - media_type_offset);",
          "1060:         count++;",
          "1061:     }",
          "1063:     return offset;",
          "1064: }",
          "1069: static int",
          "1070: dissect_device_bridging_capabilities(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1071:         proto_tree *tree, guint offset, guint16 len)",
          "1072: {",
          "1073:     guint8 tuple_no = 0;",
          "1074:     guint8 mac_addresses = 0;",
          "1075:     guint start = 0;",
          "1076:     proto_tree *tuple_list = NULL;",
          "1077:     proto_tree *bridging_list = NULL;",
          "1078:     proto_item *tpi = NULL, *mpi = NULL;",
          "1080:     proto_tree_add_item(tree, hf_ieee1905_bridging_tuples_cnt, tvb, offset,",
          "1081:                         1, ENC_NA);",
          "1082:     tuple_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1083:                                 ett_bridging_tuples_list,",
          "1084:                                 &tpi, \"Bridging tuples list\");",
          "1087:     offset++;",
          "1088:     len--;",
          "1090:     while (len > 0) {",
          "1091:         guint bl_start = offset;",
          "1092:         mac_addresses = tvb_get_guint8(tvb, offset);",
          "1094:         bridging_list = proto_tree_add_subtree_format(tuple_list, tvb, offset,",
          "1095:                                 -1, ett_bridging_mac_list,",
          "1096:                                 &mpi, \"Bridging tuple %u\", tuple_no);",
          "1098:         proto_tree_add_item(bridging_list,",
          "1099:                             hf_ieee1905_bridging_mac_address_cnt,",
          "1100:                             tvb, offset, 1, ENC_NA);",
          "1102:         offset++;",
          "1103:         tuple_no++;",
          "1104:         len--;",
          "1106:         while (mac_addresses) {",
          "1107:            proto_tree_add_item(bridging_list,",
          "1108:                                hf_ieee1905_bridging_mac_address, tvb,",
          "1109:                                offset, 6, ENC_NA);",
          "1110:            len -= 6;",
          "1111:            offset += 6;",
          "1112:            mac_addresses--;",
          "1114:         }",
          "1116:         proto_item_set_len(mpi, offset - bl_start);",
          "1117:     }",
          "1119:     proto_item_set_len(tpi, offset - start);",
          "1120:     return offset;",
          "1121: }",
          "1126: static int",
          "1127: dissect_non_1905_neighbor_device_list(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1128:         proto_tree *tree, guint offset, guint16 len)",
          "1129: {",
          "1130:     proto_tree *neighbor_list = NULL;",
          "1131:     proto_item *pi = NULL;",
          "1132:     guint start;",
          "1134:     proto_tree_add_item(tree, hf_ieee1905_local_interface_mac, tvb,",
          "1135:                         offset, 6, ENC_NA);",
          "1137:     len -= 6;",
          "1138:     offset += 6;",
          "1140:     start = offset;",
          "1141:     neighbor_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1142:                                 ett_non_1905_neighbor_list,",
          "1143:                                 &pi, \"Non IEEE1905 neighbor devices\");",
          "1145:     while (len > 0) {",
          "1147:         proto_tree_add_item(neighbor_list, hf_ieee1905_non_1905_neighbor_mac,",
          "1148:                         tvb, offset, 6, ENC_NA);",
          "1150:         len -= 6;",
          "1151:         offset += 6;",
          "1153:     }",
          "1155:     proto_item_set_len(pi, offset - start);",
          "1157:     return offset;",
          "1158: }",
          "1163: static int",
          "1164: dissect_1905_neighbor_device(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1165:         proto_tree *tree, guint offset, guint16 len)",
          "1166: {",
          "1167:     proto_item *pi = NULL;",
          "1168:     proto_item *neighbor_list = NULL;",
          "1169:     guint start;",
          "1170:     static const int *flags[] = {",
          "1171:       &hf_ieee1905_bridges_flag,",
          "1172:       NULL,",
          "1173:     };",
          "1175:     proto_tree_add_item(tree, hf_ieee1905_local_interface_mac, tvb,",
          "1176:                         offset, 6, ENC_NA);",
          "1178:     len -= 6;",
          "1179:     offset += 6;",
          "1181:     neighbor_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1182:                                 ett_1905_neighbor_list, &pi,",
          "1183:                                 \"IEEE1905 neighbor devices\");",
          "1185:     start = offset;",
          "1186:     while (len > 0) {",
          "1187:         proto_tree_add_item(neighbor_list, hf_ieee1905_neighbor_al_mac_addr,",
          "1188:                             tvb, offset, 6, ENC_NA);",
          "1190:         len -= 6;",
          "1191:         offset += 6;",
          "1193:         proto_tree_add_bitmask(neighbor_list, tvb, offset,",
          "1194:                                hf_ieee1905_neighbor_flags,",
          "1195:                                ett_ieee1905_neighbor_flags, flags, ENC_NA);",
          "1197:         len--;",
          "1198:         offset++;",
          "1200:     }",
          "1202:     proto_item_set_len(pi, offset - start);",
          "1204:     return offset;",
          "1205: }",
          "1210: static int",
          "1211: dissect_link_metric_result_code(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1212:         proto_tree *tree, guint offset)",
          "1213: {",
          "1214:     proto_item *pi = NULL;",
          "1215:     guint8 code = tvb_get_guint8(tvb, offset);",
          "1217:     pi = proto_tree_add_item(tree, hf_ieee1905_link_metric_result_code,",
          "1218:                              tvb, offset, 1, ENC_NA);",
          "1220:     proto_item_append_text(pi, \", %s\",",
          "1221:                         val_to_str(code, ieee1905_link_metric_result_vals,",
          "1222:                                 \"Reserved\"));",
          "1224:     offset++;",
          "1226:     return offset;",
          "1227: }",
          "1232: static int",
          "1233: dissect_vendor_specific(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1234:         proto_tree *tree, guint offset, guint16 len)",
          "1235: {",
          "1237:     proto_tree_add_item(tree, hf_ieee1905_vendor_specific_oui, tvb, offset,",
          "1238:                         3, ENC_NA);",
          "1239:     offset += 3;",
          "1241:     proto_tree_add_item(tree, hf_ieee1905_vendor_specific_info, tvb, offset,",
          "1242:                         len - 3, ENC_NA);",
          "1243:     offset += (len - 3);",
          "1245:     return offset;",
          "1246: }",
          "1251: static int",
          "1252: dissect_searched_role(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1253:         proto_tree *tree, guint offset)",
          "1254: {",
          "1255:     proto_item *pi = NULL;",
          "1256:     guint8 role = tvb_get_guint8(tvb, offset);",
          "1258:     pi = proto_tree_add_item(tree, hf_ieee1905_searched_role, tvb, offset,",
          "1259:                              1, ENC_NA);",
          "1261:     proto_item_append_text(pi, \", %s\",",
          "1262:                         val_to_str(role, ieee1905_searched_role_vals,",
          "1263:                                 \"Reserved\"));",
          "1265:     offset++;",
          "1267:     return offset;",
          "1268: }",
          "1273: static int",
          "1274: dissect_supported_role(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1275:         proto_tree *tree, guint offset)",
          "1276: {",
          "1277:     proto_item *pi = NULL;",
          "1278:     guint8 role = tvb_get_guint8(tvb, offset);",
          "1280:     pi = proto_tree_add_item(tree, hf_ieee1905_supported_role, tvb, offset,",
          "1281:                              1, ENC_NA);",
          "1286:     proto_item_append_text(pi, \", %s\",",
          "1287:                         val_to_str(role, ieee1905_searched_role_vals,",
          "1288:                                 \"Reserved\"));",
          "1290:     offset++;",
          "1292:     return offset;",
          "1293: }",
          "1298: static int",
          "1299: dissect_auto_config_freq_band(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1300:         proto_tree *tree, guint offset)",
          "1301: {",
          "1302:     proto_item *pi = NULL;",
          "1303:     guint8 freq = tvb_get_guint8(tvb, offset);",
          "1305:     pi = proto_tree_add_item(tree, hf_ieee1905_auto_config_freq_band, tvb,",
          "1306:                              offset, 1, ENC_NA);",
          "1308:     proto_item_append_text(pi, \", %s\",",
          "1309:                         val_to_str(freq, ieee1905_freq_band_vals,",
          "1310:                                 \"Reserved\"));",
          "1312:     offset++;",
          "1314:     return offset;",
          "1315: }",
          "1320: static int",
          "1321: dissect_supported_freq_band(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1322:         proto_tree *tree, guint offset)",
          "1323: {",
          "1324:     proto_item *pi = NULL;",
          "1325:     guint8 freq = tvb_get_guint8(tvb, offset);",
          "1327:     pi = proto_tree_add_item(tree, hf_ieee1905_supported_freq_band, tvb,",
          "1328:                              offset, 1, ENC_NA);",
          "1330:     proto_item_append_text(pi, \", %s\",",
          "1331:                         val_to_str(freq, ieee1905_freq_band_vals,",
          "1332:                                 \"Reserved\"));",
          "1334:     offset++;",
          "1336:     return offset;",
          "1337: }",
          "1342: static int",
          "1343: dissect_wsc(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "1344:         guint offset, guint16 len)",
          "1345: {",
          "1346:     dissect_wps_tlvs(tree, tvb, offset, len, pinfo);",
          "1347:     offset += len;",
          "1349:     return offset;",
          "1350: }",
          "1355: static int",
          "1356: dissect_push_button_event_notification(tvbuff_t *tvb, packet_info *pinfo,",
          "1357:         proto_tree *tree, guint offset)",
          "1358: {",
          "1359:     proto_item *pi = NULL, *mpi = NULL;",
          "1360:     proto_tree *media_type_list = NULL, *media_item = NULL;",
          "1361:     guint list_offset = 0, media_type_offset = 0;",
          "1362:     guint8 media_types = tvb_get_guint8(tvb, offset);",
          "1363:     guint8 media_type_index = 0;",
          "1365:     proto_tree_add_item(tree, hf_ieee1905_event_notification_media_types,",
          "1366:                         tvb, offset, 1, ENC_NA);",
          "1367:     offset++;",
          "1370:     if (media_types == 0)",
          "1371:         return offset;",
          "1373:     media_type_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1374:                                              ett_media_type_list,",
          "1375:                                              &pi, \"Media type list\");",
          "1376:     list_offset = offset;",
          "1378:     while (media_type_index < media_types) {",
          "1379:         guint8 spec_info_len = 0;",
          "1381:         media_item = proto_tree_add_subtree_format(media_type_list,",
          "1382:                                 tvb, offset, -1,",
          "1383:                                 ett_media_item, &mpi,",
          "1384:                                 \"Media type %u\", media_type_index);",
          "1386:         media_type_offset = offset;",
          "1388:         offset = dissect_media_type(tvb, pinfo, media_item, offset);",
          "1390:         spec_info_len = tvb_get_guint8(tvb, offset);",
          "1392:         proto_tree_add_item(media_item, hf_ieee1905_media_spec_info_len,",
          "1393:                             tvb, offset, 1, ENC_NA);",
          "1394:         offset++;",
          "1396:         if (spec_info_len) {",
          "1398:             proto_tree_add_item(media_item, hf_ieee1905_media_spec_info,",
          "1399:                                 tvb, offset, spec_info_len, ENC_NA);",
          "1400:             offset += spec_info_len;",
          "1401:         }",
          "1403:         proto_item_set_len(mpi, offset - media_type_offset);",
          "1405:         media_type_index++;",
          "1406:     }",
          "1408:     proto_item_set_len(pi, offset - list_offset);",
          "1410:     return offset;",
          "1411: }",
          "1416: static int",
          "1417: dissect_push_button_join_notification(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1418:         proto_tree *tree, guint offset)",
          "1419: {",
          "1420:     proto_tree_add_item(tree, hf_ieee1905_sender_al_id, tvb, offset, 6,",
          "1421:                         ENC_NA);",
          "1422:     offset += 6;",
          "1424:     proto_tree_add_item(tree, hf_ieee1905_push_button_event_msg_id, tvb,",
          "1425:                         offset, 2, ENC_LITTLE_ENDIAN);",
          "1426:     offset += 2;",
          "1428:     proto_tree_add_item(tree, hf_ieee1905_sender_joining_interface, tvb,",
          "1429:                         offset, 2, ENC_NA);",
          "1430:     offset += 6;",
          "1432:     proto_tree_add_item(tree, hf_ieee1905_new_device_interface, tvb,",
          "1433:                         offset, 2, ENC_NA);",
          "1435:     return offset;",
          "1436: }",
          "1441: static int",
          "1442: dissect_generic_phy_device_info(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1443:         proto_tree *tree, guint offset)",
          "1444: {",
          "1445:     proto_item *pi = NULL;",
          "1446:     proto_tree *local_interface_list = NULL;",
          "1447:     guint8 local_intf_count, local_intf_index = 0;",
          "1448:     gint saved_offset = 0;",
          "1450:     proto_tree_add_item(tree, hf_ieee1905_device_al_mac, tvb, offset,",
          "1451:                         6, ENC_NA);",
          "1452:     offset += 6;",
          "1454:     local_intf_count = tvb_get_guint8(tvb, offset);",
          "1456:     proto_tree_add_item(tree, hf_ieee1905_local_interface_count, tvb,",
          "1457:                         offset, 1, ENC_NA);",
          "1459:     offset++;",
          "1461:     if (local_intf_count == 0)",
          "1462:         return offset;",
          "1464:     local_interface_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1465:                                         ett_local_interface_list,",
          "1466:                                         &pi, \"Local interface list\");",
          "1467:     saved_offset = 0;",
          "1469:     while (local_intf_index < local_intf_count) {",
          "1470:         proto_tree *intf_tree = NULL;",
          "1471:         proto_item *ipi = NULL;",
          "1472:         guint start_offset = offset;",
          "1473:         guint8 url_field_count, media_spec_count;",
          "1475:         intf_tree = proto_tree_add_subtree_format(local_interface_list,",
          "1476:                                         tvb, offset, -1,",
          "1477:                                         ett_local_interface_info,",
          "1478:                                         &ipi, \"Local interface %u generic info\",",
          "1479:                                         local_intf_index);",
          "1481:         proto_tree_add_item(intf_tree, hf_ieee1905_local_interface_mac,",
          "1482:                             tvb, offset, 6, ENC_NA);",
          "1483:         offset += 6;",
          "1485:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_oui,",
          "1486:                             tvb, offset, 3, ENC_NA);",
          "1487:         offset+= 3;",
          "1489:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_variant,",
          "1490:                             tvb, offset, 1, ENC_NA);",
          "1491:         offset++;",
          "1493:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_variant_name,",
          "1494:                             tvb, offset, 32, ENC_UTF_8|ENC_NA);",
          "1495:         offset += 32;",
          "1497:         url_field_count = tvb_get_guint8(tvb, offset);",
          "1498:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_url_count,",
          "1499:                             tvb, offset, 1, ENC_NA);",
          "1500:         offset++;",
          "1502:         media_spec_count = tvb_get_guint8(tvb, offset);",
          "1503:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_spec_count,",
          "1504:                             tvb, offset, 1, ENC_NA);",
          "1505:         offset++;",
          "1507:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_url, tvb,",
          "1508:                             offset, url_field_count, ENC_ASCII|ENC_NA);",
          "1509:         offset += url_field_count;",
          "1511:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_spec, tvb,",
          "1512:                             offset, media_spec_count, ENC_NA);",
          "1513:         offset+= media_spec_count;",
          "1515:         proto_item_set_len(ipi, offset - start_offset);",
          "1517:         local_intf_index++;",
          "1518:     }",
          "1520:     proto_item_set_len(pi, offset - saved_offset);",
          "1522:     return offset;",
          "1523: }",
          "1528: static int",
          "1529: dissect_device_identification(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1530:         proto_tree *tree, guint offset)",
          "1531: {",
          "1532:     proto_tree_add_item(tree, hf_ieee1905_dev_id_friendly_name, tvb,",
          "1533:                         offset, 64, ENC_UTF_8|ENC_NA);",
          "1534:     offset += 64;",
          "1536:     proto_tree_add_item(tree, hf_ieee1905_dev_id_manuf_name, tvb,",
          "1537:                         offset, 64, ENC_UTF_8|ENC_NA);",
          "1538:     offset += 64;",
          "1540:     proto_tree_add_item(tree, hf_ieee1905_dev_id_manuf_model, tvb,",
          "1541:                         offset, 64, ENC_UTF_8|ENC_NA);",
          "1542:     offset += 64;",
          "1544:     return offset;",
          "1545: }",
          "1550: static int",
          "1551: dissect_control_url_type(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1552:         proto_tree *tree, guint offset, guint16 len)",
          "1553: {",
          "1554:     proto_tree_add_item(tree, hf_ieee1905_control_url, tvb, offset,",
          "1555:                         len, ENC_ASCII|ENC_NA);",
          "1556:     offset += len;",
          "1558:     return offset;",
          "1559: }",
          "1564: static int",
          "1565: dissect_ipv4_type(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1566:         proto_tree *tree, guint offset)",
          "1567: {",
          "1568:     guint8 entry_count = tvb_get_guint8(tvb, offset);",
          "1569:     guint8 entry_index = 0;",
          "1570:     proto_item *pi = NULL;",
          "1571:     proto_tree *ipv4_list = NULL;",
          "1572:     guint saved_offset = 0;",
          "1574:     proto_tree_add_item(tree, hf_ieee1905_ipv4_type_count, tvb, offset,",
          "1575:                         1, ENC_NA);",
          "1576:     offset++;",
          "1578:     if (entry_count == 0)",
          "1579:         return offset;",
          "1581:     ipv4_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1582:                                        ett_ipv4_list,",
          "1583:                                        &pi, \"IPv4 type list\");",
          "1584:     saved_offset = offset;",
          "1586:     while (entry_index < entry_count) {",
          "1587:         proto_tree *ipv4_tree = NULL, *addr_list = NULL;",
          "1588:         proto_item *ipi = NULL;",
          "1589:         guint start_offset = offset;",
          "1590:         guint8 addr_count = 0, addr_index = 0;",
          "1592:         ipv4_tree = proto_tree_add_subtree_format(ipv4_list,",
          "1593:                                         tvb, offset, -1,",
          "1594:                                         ett_ipv4_info,",
          "1595:                                         &ipi, \"IPv4 type %u info\",",
          "1596:                                         entry_index);",
          "1598:         proto_tree_add_item(ipv4_tree, hf_ieee1905_mac_address, tvb,",
          "1599:                             offset, 6, ENC_NA);",
          "1600:         offset += 6;",
          "1602:         addr_count = tvb_get_guint8(tvb, offset);",
          "1603:         proto_tree_add_item(ipv4_tree, hf_ieee1905_ipv4_addr_count,",
          "1604:                             tvb, offset, 1, ENC_NA);",
          "1605:         offset++;",
          "1607:         if (addr_count == 0)",
          "1608:             continue;",
          "1610:         addr_list = proto_tree_add_subtree(ipv4_tree, tvb, offset,",
          "1611:                                         addr_count * 9,",
          "1612:                                         ett_ipv4_type_addr_list,",
          "1613:                                         NULL, \"IPv4 address list\");",
          "1615:         while (addr_index < addr_count) {",
          "1616:             proto_tree *addr_tree = NULL;",
          "1617:             proto_item *atpi = NULL;",
          "1618:             guint8 addr_type = tvb_get_guint8(tvb, offset);",
          "1620:             addr_tree = proto_tree_add_subtree_format(addr_list, tvb,",
          "1621:                                         offset, 9, ett_ipv4_addr_info,",
          "1622:                                         NULL, \"IPv4 address %u info\",",
          "1623:                                         addr_index);",
          "1625:             atpi = proto_tree_add_item(addr_tree, hf_ieee1905_addr_type,",
          "1626:                         tvb, offset, 1, ENC_NA);",
          "1627:             proto_item_append_text(atpi, \", %s\",",
          "1628:                         val_to_str(addr_type, ieee1905_ipv4_addr_type_vals,",
          "1629:                                 \"Reserved\"));",
          "1630:             offset++;",
          "1632:             proto_tree_add_item(addr_tree, hf_ieee1905_ipv4_addr, tvb,",
          "1633:                         offset, 4, ENC_LITTLE_ENDIAN);",
          "1634:             offset += 4;",
          "1636:             proto_tree_add_item(addr_tree, hf_ieee1905_dhcp_server, tvb,",
          "1637:                         offset, 4, ENC_LITTLE_ENDIAN);",
          "1638:             offset += 4;",
          "1640:             addr_index++;",
          "1641:         }",
          "1643:         proto_item_set_len(ipi, offset - start_offset);",
          "1645:         entry_index++;",
          "1646:     }",
          "1648:     proto_item_set_len(pi, offset - saved_offset);",
          "1650:     return offset;",
          "1651: }",
          "1656: static int",
          "1657: dissect_ipv6_type(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1658:         proto_tree *tree, guint offset)",
          "1659: {",
          "1660:     guint8 entry_count = tvb_get_guint8(tvb, offset);",
          "1661:     guint8 entry_index = 0;",
          "1662:     proto_item *pi = NULL;",
          "1663:     proto_tree *ipv6_list = NULL;",
          "1664:     guint saved_offset = 0;",
          "1666:     proto_tree_add_item(tree, hf_ieee1905_ipv6_type_count, tvb, offset,",
          "1667:                         1, ENC_NA);",
          "1668:     offset++;",
          "1670:     if (entry_count == 0)",
          "1671:         return offset;",
          "1673:     ipv6_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1674:                                        ett_ipv6_list,",
          "1675:                                        &pi, \"IPv6 type list\");",
          "1676:     saved_offset = offset;",
          "1678:     while (entry_index < entry_count) {",
          "1679:         proto_tree *ipv6_tree = NULL, *addr_list = NULL;",
          "1680:         proto_item *ipi = NULL;",
          "1681:         guint start_offset = offset;",
          "1682:         guint8 addr_count = 0, addr_index = 0;",
          "1684:         ipv6_tree = proto_tree_add_subtree_format(ipv6_list,",
          "1685:                                         tvb, offset, -1,",
          "1686:                                         ett_ipv6_info,",
          "1687:                                         &ipi, \"IPv6 type %u info\",",
          "1688:                                         entry_index);",
          "1690:         proto_tree_add_item(ipv6_tree, hf_ieee1905_mac_address, tvb,",
          "1691:                             offset, 6, ENC_NA);",
          "1692:         offset += 6;",
          "1694:         addr_count = tvb_get_guint8(tvb, offset);",
          "1695:         proto_tree_add_item(ipv6_tree, hf_ieee1905_ipv6_addr_count,",
          "1696:                             tvb, offset, 1, ENC_NA);",
          "1697:         offset++;",
          "1699:         if (addr_count == 0)",
          "1700:             continue;",
          "1702:         addr_list = proto_tree_add_subtree(ipv6_tree, tvb, offset,",
          "1703:                                         addr_count * 9,",
          "1704:                                         ett_ipv6_type_addr_list,",
          "1705:                                         NULL, \"IPv6 address list\");",
          "1707:         while (addr_index < addr_count) {",
          "1708:             proto_tree *addr_tree = NULL;",
          "1709:             proto_item *atpi = NULL;",
          "1710:             guint8 addr_type = tvb_get_guint8(tvb, offset);",
          "1712:             addr_tree = proto_tree_add_subtree_format(addr_list, tvb,",
          "1713:                                         offset, 9, ett_ipv6_addr_info,",
          "1714:                                         NULL, \"IPv6 address %u info\",",
          "1715:                                         addr_index);",
          "1717:             atpi = proto_tree_add_item(addr_tree, hf_ieee1905_ipv6_addr_type,",
          "1718:                         tvb, offset, 1, ENC_NA);",
          "1719:             proto_item_append_text(atpi, \", %s\",",
          "1720:                         val_to_str(addr_type, ieee1905_ipv6_addr_type_vals,",
          "1721:                                 \"Reserved\"));",
          "1722:             offset++;",
          "1724:             proto_tree_add_item(addr_tree, hf_ieee1905_ipv6_addr, tvb,",
          "1725:                         offset, 16, ENC_NA);",
          "1726:             offset += 16;",
          "1728:             proto_tree_add_item(addr_tree, hf_ieee1905_ipv6_dhcp_server, tvb,",
          "1729:                         offset, 16, ENC_NA);",
          "1730:             offset += 16;",
          "1732:             addr_index++;",
          "1733:         }",
          "1735:         proto_item_set_len(ipi, offset - start_offset);",
          "1737:         entry_index++;",
          "1738:     }",
          "1740:     proto_item_set_len(pi, offset - saved_offset);",
          "1742:     return offset;",
          "1743: }",
          "1748: static int",
          "1749: dissect_push_button_event_type_notification(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1750:         proto_tree *tree, guint offset)",
          "1751: {",
          "1752:     guint8 media_type_count = tvb_get_guint8(tvb, offset);",
          "1753:     guint8 media_type_index = 0;",
          "1754:     guint saved_offset;",
          "1755:     proto_item *pi = NULL;",
          "1756:     proto_tree *phy_list = NULL;",
          "1758:     proto_tree_add_item(tree, hf_ieee1905_generic_phy_media_types,",
          "1759:                         tvb, offset, 1, ENC_NA);",
          "1760:     offset++;",
          "1762:     phy_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1763:                                        ett_push_button_phy_list,",
          "1764:                                        &pi, \"Generic Phy media type list\");",
          "1765:     saved_offset = offset;",
          "1767:     while (media_type_index < media_type_count) {",
          "1768:         proto_item *ppi = NULL;",
          "1769:         proto_tree *phy_tree;",
          "1770:         guint start_offset = offset;",
          "1771:         guint8 media_specific_len;",
          "1773:         phy_tree = proto_tree_add_subtree_format(phy_list, tvb,",
          "1774:                                     offset, -1, ett_push_button_phy_info,",
          "1775:                                     &ppi, \"Generic Phy media type %u info\",",
          "1776:                                     media_type_index);",
          "1778:         proto_tree_add_item(phy_tree, hf_ieee1905_local_intf_oui,",
          "1779:                             tvb, offset, 3, ENC_NA);",
          "1780:         offset+= 3;",
          "1782:         proto_tree_add_item(phy_tree, hf_ieee1905_local_intf_variant,",
          "1783:                             tvb, offset, 1, ENC_NA);",
          "1784:         offset++;",
          "1786:         media_specific_len = tvb_get_guint8(tvb, offset);",
          "1788:         proto_tree_add_item(phy_tree, hf_ieee1905_local_intf_spec_count,",
          "1789:                             tvb, offset, 1, ENC_NA);",
          "1790:         offset++;",
          "1792:         proto_tree_add_item(phy_tree, hf_ieee1905_local_intf_spec, tvb,",
          "1793:                             offset, media_specific_len, ENC_NA);",
          "1794:         offset += media_specific_len;",
          "1796:         proto_item_set_len(ppi, offset - start_offset);",
          "1798:         media_type_index++;",
          "1799:     }",
          "1801:     proto_item_set_len(pi, offset - saved_offset);",
          "1803:     return offset;",
          "1804: }",
          "1809: static int",
          "1810: dissect_profile_version(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1811:         proto_tree *tree, guint offset)",
          "1812: {",
          "1813:     guint8 profile_version = tvb_get_guint8(tvb, offset);",
          "1814:     proto_item *pi = NULL;",
          "1816:     pi = proto_tree_add_item(tree, hf_ieee1905_profile_version, tvb,",
          "1817:                 offset, 1, ENC_NA);",
          "1818:     proto_item_append_text(pi, \", %s\",",
          "1819:                 val_to_str(profile_version, ieee1905_profile_version_vals,",
          "1820:                            \"Reserved\"));",
          "1821:     offset++;",
          "1823:     return offset;",
          "1824: }",
          "1829: static int",
          "1830: dissect_power_off_interface(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1831:         proto_tree *tree, guint offset)",
          "1832: {",
          "1833:     guint8 local_intf_count = tvb_get_guint8(tvb, offset);",
          "1834:     guint8 local_intf_index = 0;",
          "1835:     proto_item *pi = NULL;",
          "1836:     proto_tree *intf_list = NULL;",
          "1837:     guint saved_offset = 0;",
          "1839:     proto_tree_add_item(tree, hf_ieee1905_power_off_intf_count, tvb,",
          "1840:                         offset, 1, ENC_NA);",
          "1841:     offset++;",
          "1843:     if (local_intf_count == 0)",
          "1844:         return offset;",
          "1846:     intf_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1847:                                        ett_push_button_phy_list,",
          "1848:                                        &pi, \"Generic Phy media type list\");",
          "1849:     saved_offset = offset;",
          "1851:     while (local_intf_index < local_intf_count) {",
          "1852:         proto_tree *intf_tree = NULL;",
          "1853:         proto_item *ppi = NULL;",
          "1854:         guint8 media_specific_len = 0;",
          "1856:         intf_tree = proto_tree_add_subtree_format(intf_list, tvb,",
          "1857:                                     offset, -1, ett_power_off_info,",
          "1858:                                     &ppi, \"Powered off interface %u info\",",
          "1859:                                     local_intf_index);",
          "1861:         proto_tree_add_item(intf_tree, hf_ieee1905_mac_address, tvb,",
          "1862:                             offset, 6, ENC_NA);",
          "1863:         offset += 6;",
          "1865:         offset = dissect_media_type(tvb, pinfo, intf_tree, offset);",
          "1867:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_oui,",
          "1868:                             tvb, offset, 3, ENC_NA);",
          "1869:         offset+= 3;",
          "1871:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_variant,",
          "1872:                             tvb, offset, 1, ENC_NA);",
          "1873:         offset++;",
          "1875:         media_specific_len = tvb_get_guint8(tvb, offset);",
          "1877:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_spec_count,",
          "1878:                             tvb, offset, 1, ENC_NA);",
          "1879:         offset++;",
          "1881:         proto_tree_add_item(intf_tree, hf_ieee1905_local_intf_spec, tvb,",
          "1882:                             offset, media_specific_len, ENC_NA);",
          "1883:         offset += media_specific_len;",
          "1885:         local_intf_index++;",
          "1886:     }",
          "1888:     proto_item_set_len(pi, offset - saved_offset);",
          "1890:     return offset;",
          "1891: }",
          "1896: static int",
          "1897: dissect_interface_power_change_info(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1898:         proto_tree *tree, guint offset)",
          "1899: {",
          "1900:     guint intf_count = tvb_get_guint8(tvb, offset);",
          "1901:     guint intf_index = 0;",
          "1902:     proto_tree *intf_list = NULL;",
          "1904:     proto_tree_add_item(tree, hf_ieee1905_power_change_intf_count, tvb,",
          "1905:                         offset, 1, ENC_NA);",
          "1907:     intf_list = proto_tree_add_subtree(tree, tvb, offset, intf_count * 7,",
          "1908:                         ett_power_change_list, NULL,",
          "1909:                         \"Interface power change list\");",
          "1911:     while (intf_index < intf_count) {",
          "1912:         proto_tree *intf_tree = NULL;",
          "1913:         proto_item *pi = NULL;",
          "1914:         guint8 power_state = 0;",
          "1916:         intf_tree = proto_tree_add_subtree_format(intf_list, tvb,",
          "1917:                         offset, 7, ett_power_change_info,",
          "1918:                         NULL, \"Power change interface %u info\",",
          "1919:                         intf_index);",
          "1921:         proto_tree_add_item(intf_tree, hf_ieee1905_power_change_mac_addr,",
          "1922:                         tvb, offset, 6, ENC_NA);",
          "1923:         offset += 6;",
          "1925:         power_state = tvb_get_guint8(tvb, offset);",
          "1926:         pi = proto_tree_add_item(tree, hf_ieee1905_power_change_state, tvb,",
          "1927:                         offset, 1, ENC_NA);",
          "1928:         proto_item_append_text(pi, \", %s\",",
          "1929:                         val_to_str(power_state,",
          "1930:                                    ieee1905_power_state_vals,",
          "1931:                                    \"Reserved\"));",
          "1932:         offset++;",
          "1934:         intf_index++;",
          "1935:     }",
          "1937:     return offset;",
          "1938: }",
          "1943: static int",
          "1944: dissect_interface_power_change_status(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1945:         proto_tree *tree, guint offset)",
          "1946: {",
          "1947:     guint intf_count = tvb_get_guint8(tvb, offset);",
          "1948:     guint intf_index = 0;",
          "1949:     proto_tree *intf_list = NULL;",
          "1951:     proto_tree_add_item(tree, hf_ieee1905_power_status_intf_count, tvb,",
          "1952:                         offset, 1, ENC_NA);",
          "1954:     intf_list = proto_tree_add_subtree(tree, tvb, offset, intf_count * 7,",
          "1955:                         ett_power_status_list, NULL,",
          "1956:                         \"Interface power status list\");",
          "1958:     while (intf_index < intf_count) {",
          "1959:         proto_tree *intf_tree = NULL;",
          "1960:         proto_item *pi = NULL;",
          "1961:         guint8 power_state = 0;",
          "1963:         intf_tree = proto_tree_add_subtree_format(intf_list, tvb,",
          "1964:                         offset, 7, ett_power_status_info,",
          "1965:                         NULL, \"Power status interface %u info\",",
          "1966:                         intf_index);",
          "1968:         proto_tree_add_item(intf_tree, hf_ieee1905_power_status_mac_addr,",
          "1969:                         tvb, offset, 6, ENC_NA);",
          "1970:         offset += 6;",
          "1972:         power_state = tvb_get_guint8(tvb, offset);",
          "1973:         pi = proto_tree_add_item(tree, hf_ieee1905_power_status_state, tvb,",
          "1974:                         offset, 1, ENC_NA);",
          "1975:         proto_item_append_text(pi, \", %s\",",
          "1976:                         val_to_str(power_state,",
          "1977:                                    ieee1905_power_status_vals,",
          "1978:                                    \"Reserved\"));",
          "1979:         offset++;",
          "1981:         intf_index++;",
          "1982:     }",
          "1984:     return offset;",
          "1985: }",
          "1987: static int",
          "1988: dissect_l2_neighbor_device(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1989:         proto_tree *tree, guint offset)",
          "1990: {",
          "1991:     guint intf_count = tvb_get_guint8(tvb, offset);",
          "1992:     guint intf_index = 0;",
          "1993:     proto_tree *intf_list = NULL;",
          "1994:     proto_item *pi = NULL;",
          "1995:     guint saved_offset = 0;",
          "1997:     proto_tree_add_item(tree, hf_ieee1905_l2_neighbor_intf_count, tvb,",
          "1998:                         offset, 1, ENC_NA);",
          "1999:     offset++;",
          "2001:     if (intf_count == 0)",
          "2002:         return offset;",
          "2004:     intf_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2005:                         ett_l2_local_intf_list, &pi,",
          "2006:                         \"L2 local interface list\");",
          "2008:     saved_offset = offset;",
          "2010:     while (intf_index < intf_count) {",
          "2011:         proto_tree *intf_tree = NULL, *neighbor_list = NULL;",
          "2012:         proto_item *ipi = NULL, *mpi = NULL;",
          "2013:         guint16 neighbor_device_count = 0, neighbor_device_index = 0;",
          "2014:         guint start_offset = offset, ndl_start_offset = 0;",
          "2016:         intf_tree = proto_tree_add_subtree_format(intf_list, tvb, offset, -1,",
          "2017:                             ett_l2_neighbor_device_info, &ipi,",
          "2018:                             \"L2 neighbor device %u info\", intf_count);",
          "2020:         proto_tree_add_item(intf_tree, hf_ieee1905_l2_local_intf_mac_addr, tvb,",
          "2021:                             offset, 6, ENC_NA);",
          "2022:         offset += 6;",
          "2024:         neighbor_device_count = tvb_get_ntohs(tvb, offset);",
          "2025:         proto_tree_add_item(intf_tree, hf_ieee1905_l2_neighbor_dev_count, tvb,",
          "2026:                             offset, 2, ENC_LITTLE_ENDIAN);",
          "2027:         offset += 2;",
          "2029:         neighbor_list = proto_tree_add_subtree(intf_tree, tvb, offset, -1,",
          "2030:                             ett_l2_neighbor_dev_list, &mpi,",
          "2031:                             \"Neighbor device list\");",
          "2033:         ndl_start_offset = offset;",
          "2035:         while (neighbor_device_index < neighbor_device_count) {",
          "2036:             proto_tree *neighbor_dev_tree = NULL;",
          "2037:             proto_item *bmpi = NULL;",
          "2038:             guint16 behind_mac_addr_count = 0, behind_mac_addr_index = 0;",
          "2039:             guint ndt_start_offset = offset;",
          "2041:             neighbor_dev_tree = proto_tree_add_subtree_format(neighbor_list,",
          "2042:                                         tvb, offset, -1,",
          "2043:                                         ett_l2_neighbor_dev_tree, &bmpi,",
          "2044:                                         \"Neighbor device %u info\",",
          "2045:                                         neighbor_device_index);",
          "2047:             proto_tree_add_item(neighbor_dev_tree,",
          "2048:                                 hf_ieee1905_l2_neighbor_mac_addr, tvb,",
          "2049:                                 offset, 6, ENC_NA);",
          "2050:             offset += 6;",
          "2052:             behind_mac_addr_count = tvb_get_ntohs(tvb, offset);",
          "2053:             proto_tree_add_item(neighbor_dev_tree,",
          "2054:                                 hf_ieee1905_l2_behind_mac_addr_count,",
          "2055:                                 tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2056:             offset += 2;",
          "2058:             while(behind_mac_addr_index < behind_mac_addr_count) {",
          "2059:                 proto_tree_add_item(neighbor_dev_tree,",
          "2060:                                     hf_ieee1905_l2_behind_mac_addr, tvb,",
          "2061:                                     offset, 6, ENC_NA);",
          "2062:                 offset += 6;",
          "2064:                 behind_mac_addr_index++;",
          "2065:             }",
          "2067:             proto_item_set_len(bmpi, offset - ndt_start_offset);",
          "2069:         }",
          "2071:         proto_item_set_len(mpi, offset - ndl_start_offset);",
          "2072:         proto_item_set_len(ipi, offset - start_offset);",
          "2074:         intf_index++;",
          "2075:     }",
          "2077:     proto_item_set_len(pi, offset - saved_offset);",
          "2079:     return offset;",
          "2080: }",
          "2082: static int",
          "2083: dissect_supported_service(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2084:         proto_tree *tree, guint offset)",
          "2085: {",
          "2086:     guint service_count = tvb_get_guint8(tvb, offset);",
          "2087:     guint service_index = 0;",
          "2088:     proto_tree *service_list = NULL;",
          "2090:     proto_tree_add_item(tree, hf_ieee1905_supported_service_count, tvb,",
          "2091:                         offset, 1, ENC_NA);",
          "2092:     offset++;",
          "2094:     service_list = proto_tree_add_subtree(tree, tvb, offset, service_count,",
          "2095:                         ett_supported_service_list, NULL,",
          "2096:                         \"Supported service list\");",
          "2098:     while (service_index < service_count) {",
          "2099:         proto_item *pi = NULL;",
          "2100:         guint8 service = tvb_get_guint8(tvb, offset);",
          "2102:         pi = proto_tree_add_item(service_list, hf_ieee1905_supported_service,",
          "2103:                                 tvb, offset, 1, ENC_NA);",
          "2105:         proto_item_append_text(pi, \", %s\",",
          "2106:                         val_to_str(service,",
          "2107:                                    ieee1905_supported_service_vals,",
          "2108:                                    \"Reserved\"));",
          "2109:         offset++;",
          "2111:         service_index++;",
          "2112:     }",
          "2114:     return offset;",
          "2115: }",
          "2120: static int",
          "2121: dissect_searched_service(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2122:         proto_tree *tree, guint offset)",
          "2123: {",
          "2124:     guint service_count = tvb_get_guint8(tvb, offset);",
          "2125:     guint service_index = 0;",
          "2126:     proto_tree *service_list = NULL;",
          "2128:     proto_tree_add_item(tree, hf_ieee1905_searched_service_count, tvb,",
          "2129:                         offset, 1, ENC_NA);",
          "2130:     offset++;",
          "2132:     service_list = proto_tree_add_subtree(tree, tvb, offset, service_count,",
          "2133:                         ett_searched_service_list, NULL,",
          "2134:                         \"Searched service list\");",
          "2136:     while (service_index < service_count) {",
          "2137:         proto_item *pi = NULL;",
          "2138:         guint8 service = tvb_get_guint8(tvb, offset);",
          "2140:         pi = proto_tree_add_item(service_list, hf_ieee1905_searched_service,",
          "2141:                                 tvb, offset, 1, ENC_NA);",
          "2147:         proto_item_append_text(pi, \", %s\",",
          "2148:                         val_to_str(service,",
          "2149:                                    ieee1905_supported_service_vals,",
          "2150:                                    \"Reserved\"));",
          "2151:         offset++;",
          "2153:         service_index++;",
          "2154:     }",
          "2156:     return offset;",
          "2157: }",
          "2162: static int",
          "2163: dissect_ap_radio_identifier(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2164:         proto_tree *tree, guint offset)",
          "2165: {",
          "2166:     proto_tree_add_item(tree, hf_ieee1905_ap_radio_identifier, tvb,",
          "2167:                         offset, 6, ENC_NA);",
          "2168:     offset += 6;",
          "2170:     return offset;",
          "2171: }",
          "2176: static int",
          "2177: dissect_ap_operational_bss(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2178:         proto_tree *tree, guint offset)",
          "2179: {",
          "2180:     proto_item *rpi = NULL;",
          "2181:     proto_tree *radio_list = NULL;",
          "2182:     guint8 radio_count = tvb_get_guint8(tvb, offset);",
          "2183:     guint8 radio_index = 0;",
          "2184:     guint saved_offset = 0;",
          "2186:     proto_tree_add_item(tree, hf_ieee1905_operatonal_bss_radio_count,",
          "2187:                         tvb, offset, 1, ENC_NA);",
          "2188:     offset++;",
          "2190:     if (radio_count == 0)",
          "2191:         return offset;",
          "2193:     radio_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2194:                         ett_ap_operational_bss_list, &rpi,",
          "2195:                         \"AP operational BSS radio list\");",
          "2196:     saved_offset = offset;",
          "2198:     while (radio_index < radio_count) {",
          "2199:         proto_tree *radio_tree = NULL, *local_intf_list = NULL;",
          "2200:         proto_item *opi = NULL, *ipi = NULL;",
          "2201:         guint start_offset = offset, list_start_offset;",
          "2202:         guint8 local_intf_count = 0;",
          "2203:         guint8 local_intf_index = 0;",
          "2205:         radio_tree = proto_tree_add_subtree_format(radio_list,",
          "2206:                                     tvb, offset, -1,",
          "2207:                                     ett_ap_operational_bss_tree, &opi,",
          "2208:                                     \"AP operational BSS %u info\",",
          "2209:                                     radio_index);",
          "2211:         proto_tree_add_item(radio_tree, hf_ieee1905_ap_radio_identifier,",
          "2212:                             tvb, offset, 6, ENC_NA);",
          "2213:         offset += 6;",
          "2215:         local_intf_count = tvb_get_guint8(tvb, offset);",
          "2217:         proto_tree_add_item(radio_tree, hf_ieee1905_ap_operational_intf_count,",
          "2218:                             tvb, offset, 1, ENC_NA);",
          "2219:         offset++;",
          "2221:         list_start_offset = offset;",
          "2223:         local_intf_list = proto_tree_add_subtree(radio_tree, tvb, offset, -1,",
          "2224:                                 ett_ap_operational_bss_intf_list, &ipi,",
          "2225:                                 \"AP operational BSS local interface list\");",
          "2227:         while (local_intf_index < local_intf_count) {",
          "2228:             guint8 ssid_len = 0;",
          "2229:             proto_tree *local_intf_tree = NULL;",
          "2230:             proto_item *itpi = NULL;",
          "2231:             guint local_intf_offset = offset;",
          "2233:             local_intf_tree = proto_tree_add_subtree_format(local_intf_list,",
          "2234:                                 tvb, offset, -1,",
          "2235:                                 ett_ap_operational_bss_intf_tree, &itpi,",
          "2236:                                 \"AP operational BSS Interface %u\",",
          "2237:                                 local_intf_index);",
          "2239:             proto_tree_add_item(local_intf_tree, hf_ieee1905_ap_local_intf_mac_addr,",
          "2240:                                 tvb, offset, 6, ENC_NA);",
          "2241:             offset += 6;",
          "2243:             ssid_len = tvb_get_guint8(tvb, offset);",
          "2245:             proto_tree_add_item(local_intf_tree, hf_ieee1905_ap_local_intf_ssid_len,",
          "2246:                                 tvb, offset, 1, ENC_NA);",
          "2247:             offset++;",
          "2249:             proto_tree_add_item(local_intf_tree, hf_ieee1905_ap_local_intf_ssid,",
          "2250:                                 tvb, offset, ssid_len, ENC_ASCII|ENC_NA);",
          "2251:             offset += ssid_len;",
          "2253:             proto_item_set_len(itpi, offset - local_intf_offset);",
          "2255:             local_intf_index++;",
          "2256:         }",
          "2258:         proto_item_set_len(ipi, offset - list_start_offset);",
          "2259:         proto_item_set_len(opi, offset - start_offset);",
          "2260:         radio_index++;",
          "2261:     }",
          "2263:     proto_item_set_len(rpi, offset - saved_offset);",
          "2265:     return offset;",
          "2266: }",
          "2271: static int",
          "2272: dissect_associated_clients(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2273:         proto_tree *tree, guint offset)",
          "2274: {",
          "2275:     guint8 bss_count = tvb_get_guint8(tvb, offset);",
          "2276:     guint8 bss_index = 0;",
          "2277:     proto_tree *bss_list = NULL;",
          "2278:     proto_item *pi = NULL;",
          "2279:     guint saved_offset = 0;",
          "2281:     proto_tree_add_item(tree, hf_ieee1905_assoc_clients_bss_count,",
          "2282:                         tvb, offset, 1, ENC_NA);",
          "2283:     offset++;",
          "2285:     bss_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2286:                                 ett_assoc_clients_bss_list, &pi,",
          "2287:                                 \"Associated BSS list\");",
          "2288:     saved_offset = offset;",
          "2290:     while (bss_index < bss_count) {",
          "2291:         proto_tree *bss_tree = NULL, *client_list = NULL;",
          "2292:         proto_item *bpi = NULL;",
          "2293:         guint start_offset = offset;",
          "2294:         guint16 client_count = 0, client_index = 0;",
          "2297:         bss_tree = proto_tree_add_subtree_format(bss_list,",
          "2298:                                 tvb, offset, -1,",
          "2299:                                 ett_assoc_client_bss_tree, &bpi,",
          "2300:                                 \"Associated BSS %u\",",
          "2301:                                 bss_index);",
          "2303:         proto_tree_add_item(bss_tree, hf_ieee1905_assoc_bssid, tvb,",
          "2304:                             offset, 6, ENC_NA);",
          "2305:         offset += 6;",
          "2307:         client_count = tvb_get_ntohs(tvb, offset);",
          "2308:         proto_tree_add_item(bss_tree, hf_ieee1905_bss_client_count,",
          "2309:                             tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2310:         offset += 2;",
          "2312:         client_list = proto_tree_add_subtree(bss_tree, tvb, offset,",
          "2313:                             client_count * 8, ett_assoc_client_list,",
          "2314:                             NULL, \"Associated BSS clients list\");",
          "2316:         while (client_index < client_count) {",
          "2317:             proto_tree *client_tree = NULL;",
          "2319:             client_tree = proto_tree_add_subtree_format(client_list, tvb,",
          "2320:                                 offset, 8, ett_assoc_client_tree,",
          "2321:                                 NULL, \"Client %u\", client_index);",
          "2323:             proto_tree_add_item(client_tree, hf_ieee1905_bss_client_mac,",
          "2324:                                 tvb, offset, 6, ENC_NA);",
          "2325:             offset += 6;",
          "2327:             proto_tree_add_item(client_tree, hf_ieee1905_bss_client_last_assoc,",
          "2328:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2329:             offset += 2;",
          "2331:             client_index++;",
          "2332:         }",
          "2334:         proto_item_set_len(bpi, offset - start_offset);",
          "2335:         bss_index++;",
          "2336:     }",
          "2338:     proto_item_set_len(pi, offset - saved_offset);",
          "2340:     return offset;",
          "2341: }",
          "2346: static int",
          "2347: dissect_ap_capability(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2348:         proto_tree *tree, guint offset)",
          "2349: {",
          "2350:     static const int *capabilities[] = {",
          "2351:       &hf_ieee1905_unassoc_sta_metrics_oper_flag,",
          "2352:       &hf_ieee1905_unassoc_sta_metrics_non_oper_flag,",
          "2353:       &hf_ieee1905_agent_init_steering,",
          "2354:       NULL,",
          "2355:     };",
          "2357:     proto_tree_add_bitmask(tree, tvb, offset,",
          "2358:                            hf_ieee1905_ap_capabilities_flags,",
          "2359:                            ett_ieee1905_capabilities_flags,",
          "2360:                            capabilities, ENC_NA);",
          "2361:     offset++;",
          "2363:     return offset;",
          "2364: }",
          "2369: static int",
          "2370: dissect_ap_radio_basic_capabilities(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2371:         proto_tree *tree, guint offset)",
          "2372: {",
          "2373:     guint8 classes = 0, class_index = 0;",
          "2374:     proto_tree *class_list = NULL;",
          "2375:     proto_item *pi = NULL;",
          "2376:     guint saved_offset = 0;",
          "2378:     proto_tree_add_item(tree, hf_ieee1905_ap_radio_identifier, tvb,",
          "2379:                         offset, 6, ENC_NA);",
          "2380:     offset += 6;",
          "2382:     proto_tree_add_item(tree, hf_ieee1905_ap_radio_max_bss, tvb,",
          "2383:                         offset, 1, ENC_NA);",
          "2384:     offset++;",
          "2386:     classes = tvb_get_guint8(tvb, offset);",
          "2387:     proto_tree_add_item(tree, hf_ieee1905_ap_radio_classes, tvb,",
          "2388:                         offset, 1, ENC_NA);",
          "2389:     offset++;",
          "2391:     class_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2392:                         ett_radio_basic_class_list, &pi,",
          "2393:                         \"Supported operating classes list\");",
          "2394:     saved_offset = offset;",
          "2396:     while (class_index < classes) {",
          "2397:         proto_tree *class_tree = NULL;",
          "2398:         proto_tree *non_op_channel_list = NULL;",
          "2399:         proto_item *cpi = NULL, *lpi = NULL;",
          "2400:         guint class_offset = offset;",
          "2401:         guint8 non_op_channel_count = 0;",
          "2403:         class_tree = proto_tree_add_subtree_format(class_list,",
          "2404:                                 tvb, offset, -1,",
          "2405:                                 ett_ap_radio_basic_cap_class_tree, &cpi,",
          "2406:                                 \"Operating class %u\",",
          "2407:                                 class_index);",
          "2409:         proto_tree_add_item(class_tree, hf_ieee1905_ap_radio_class, tvb,",
          "2410:                             offset, 1, ENC_NA);",
          "2411:         offset++;",
          "2413:         lpi = proto_tree_add_item(class_tree, hf_ieee1905_ap_radio_eirp,",
          "2414:                             tvb, offset, 1, ENC_NA);",
          "2415:         proto_item_append_text(lpi, \"dBm\");",
          "2416:         offset++;",
          "2418:         non_op_channel_count = tvb_get_guint8(tvb, offset);",
          "2419:         proto_tree_add_item(class_tree, hf_ieee1905_ap_radio_non_op_count,",
          "2420:                             tvb, offset, 1, ENC_NA);",
          "2421:         offset++;",
          "2423:         if (non_op_channel_count > 0) {",
          "2425:             non_op_channel_list = proto_tree_add_subtree(class_tree, tvb, offset,",
          "2426:                                     non_op_channel_count,",
          "2427:                                     ett_radio_basic_non_op_list, NULL,",
          "2428:                                     \"Non-operating channel list\");",
          "2430:             while (non_op_channel_count > 0) {",
          "2431:                 proto_tree_add_item(non_op_channel_list,",
          "2432:                                     hf_ieee1905_radio_basic_non_op_channel,",
          "2433:                                     tvb, offset, 1, ENC_NA);",
          "2434:                 offset++;",
          "2436:                 non_op_channel_count--;",
          "2437:             }",
          "2438:         }",
          "2440:         proto_item_set_len(cpi, offset - class_offset);",
          "2441:         class_index++;",
          "2442:     }",
          "2444:     proto_item_set_len(pi, offset - saved_offset);",
          "2445:     return offset;",
          "2446: }",
          "2451: static int",
          "2452: dissect_ap_ht_capabilities(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2453:         proto_tree *tree, guint offset)",
          "2454: {",
          "2455:     static const int *capabilities[] = {",
          "2456:       &hf_ieee1905_max_supported_tx_streams,",
          "2457:       &hf_ieee1905_max_supported_rx_streams,",
          "2458:       &hf_ieee1905_short_gi_20mhz_flag,",
          "2459:       &hf_ieee1905_short_gi_40mhz_flag,",
          "2460:       &hf_ieee1905_ht_support_40mhz_flag,",
          "2461:       NULL,",
          "2462:     };",
          "2464:     proto_tree_add_item(tree, hf_ieee1905_ap_ht_capabilities_radio_id,",
          "2465:                         tvb, offset, 6, ENC_NA);",
          "2466:     offset += 6;",
          "2468:     proto_tree_add_bitmask(tree, tvb, offset, hf_ieee1905_ht_cap_flags,",
          "2469:                            ett_ht_cap_flags, capabilities, ENC_NA);",
          "2470:     offset++;",
          "2472:     return offset;",
          "2473: }",
          "2478: static int",
          "2479: dissect_ap_vht_capabilities(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2480:         proto_tree *tree, guint offset)",
          "2481: {",
          "2482:     static const int *capabilities[] = {",
          "2483:       &hf_ieee1905_vht_max_supported_tx_streams,",
          "2484:       &hf_ieee1905_vht_max_supported_rx_streams,",
          "2485:       &hf_ieee1905_short_gi_80mhz_flag,",
          "2486:       &hf_ieee1905_short_gi_160mhz_flag,",
          "2487:       &hf_ieee1905_vht_support_80plus_mhz_flag,",
          "2488:       &hf_ieee1905_vht_support_160_mhz_flag,",
          "2489:       &hf_ieee1905_su_beamformer_capable_flag,",
          "2490:       &hf_ieee1905_mu_beamformer_capable_flag,",
          "2491:       NULL,",
          "2492:     };",
          "2494:     proto_tree_add_item(tree, hf_ieee1905_ap_vht_capabilities_radio_id,",
          "2495:                         tvb, offset, 6, ENC_NA);",
          "2496:     offset += 6;",
          "2498:     proto_tree_add_item(tree, hf_ieee1905_ap_vht_supported_vht_tx_mcs,",
          "2499:                         tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2500:     offset += 2;",
          "2502:     proto_tree_add_item(tree, hf_ieee1905_ap_vht_supported_vht_rx_mcs,",
          "2503:                         tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2504:     offset += 2;",
          "2506:     proto_tree_add_bitmask(tree, tvb, offset, hf_ieee1905_vht_cap_flags,",
          "2507:                            ett_vht_cap_flags, capabilities, ENC_NA);",
          "2508:     offset += 2;",
          "2510:     return offset;",
          "2511: }",
          "2516: static int",
          "2517: dissect_ap_he_capabilities(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2518:         proto_tree *tree, guint offset)",
          "2519: {",
          "2520:     guint8 he_mcs_count = 0, he_mcs_index = 0;",
          "2521:     proto_tree *he_mcs_list = NULL;",
          "2522:     static const int *he_capabilities[] = {",
          "2523:       &hf_ieee1905_he_max_supported_tx_streams,",
          "2524:       &hf_ieee1905_he_max_supported_rx_streams,",
          "2525:       &hf_ieee1905_he_support_80plus_mhz_flag,",
          "2526:       &hf_ieee1905_he_support_160mhz_flag,",
          "2527:       &hf_ieee1905_he_su_beamformer_capable_flag,",
          "2528:       &hf_ieee1905_he_mu_beamformer_capable_flag,",
          "2529:       &hf_ieee1905_ul_mu_mimo_capable_flag,",
          "2530:       &hf_ieee1905_ul_mu_mimo_ofdma_capable_flag,",
          "2531:       &hf_ieee1905_dl_mu_mimo_ofdma_capable_flag,",
          "2532:       &hf_ieee1905_ul_ofdma_capable,",
          "2533:       &hf_ieee1905_dl_ofdma_capable,",
          "2534:       NULL,",
          "2535:     };",
          "2537:     proto_tree_add_item(tree, hf_ieee1905_ap_he_cap_radio_id, tvb,",
          "2538:                         offset, 6, ENC_NA);",
          "2539:     offset += 6;",
          "2541:     he_mcs_count = tvb_get_guint8(tvb, offset);",
          "2542:     proto_tree_add_item(tree, hf_ieee1905_ap_he_cap_mcs_count, tvb,",
          "2543:                         offset, 1, ENC_NA);",
          "2544:     offset++;",
          "2546:     he_mcs_list = proto_tree_add_subtree(tree, tvb, offset, he_mcs_count * 2,",
          "2547:                         ett_he_mcs_list, NULL,",
          "2548:                         \"HE MCS list\");",
          "2549:     while (he_mcs_index < he_mcs_count) {",
          "2550:         proto_tree_add_bitmask(he_mcs_list, tvb, offset, hf_ieee1905_he_cap_flags,",
          "2551:                            ett_he_cap_flags, he_capabilities, ENC_NA);",
          "2552:         offset += 2;",
          "2554:         he_mcs_index++;",
          "2555:     }",
          "2557:     return offset;",
          "2558: }",
          "2563: static int",
          "2564: dissect_steering_policy(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2565:         proto_tree *tree, guint offset, guint16 len _U_)",
          "2566: {",
          "2567:     guint8 steering_disallowed_count = tvb_get_guint8(tvb, offset);",
          "2568:     guint8 btm_steering_disallowed_count = 0;",
          "2569:     guint8 radio_count = 0, radio_index = 0;",
          "2571:     proto_tree_add_item(tree, hf_ieee1905_steering_policy_local_disallowed_count,",
          "2572:                         tvb, offset, 1, ENC_NA);",
          "2573:     offset++;",
          "2575:     if (steering_disallowed_count) {",
          "2576:         proto_tree *disallowed_list = NULL;",
          "2578:         disallowed_list = proto_tree_add_subtree(tree, tvb, offset,",
          "2579:                         steering_disallowed_count * 6,",
          "2580:                         ett_steering_policy_disallowed_list, NULL,",
          "2581:                         \"Steering disallowed STA list\");",
          "2583:         while (steering_disallowed_count > 0) {",
          "2584:             proto_tree_add_item(disallowed_list,",
          "2585:                         hf_ieee1905_steering_disallowed_mac_addr,",
          "2586:                         tvb, offset, 6, ENC_NA);",
          "2587:             offset += 6;",
          "2588:             steering_disallowed_count--;",
          "2589:         }",
          "2590:     }",
          "2592:     btm_steering_disallowed_count = tvb_get_guint8(tvb, offset);",
          "2593:     proto_tree_add_item(tree, hf_ieee1905_btm_steering_disallowed_count,",
          "2594:                         tvb, offset, 1, ENC_NA);",
          "2595:     offset++;",
          "2597:     if (btm_steering_disallowed_count > 0) {",
          "2598:         proto_tree *btm_disallowed_list = NULL;",
          "2600:         btm_disallowed_list = proto_tree_add_subtree(tree, tvb, offset,",
          "2601:                         btm_steering_disallowed_count * 6,",
          "2602:                         ett_btm_steering_policy_disallowed_list, NULL,",
          "2603:                         \"BTM steering disallowed STA list\");",
          "2605:         while (btm_steering_disallowed_count > 0) {",
          "2607:             proto_tree_add_item(btm_disallowed_list,",
          "2608:                         hf_ieee1905_btm_steering_disallowed_mac_addr,",
          "2609:                         tvb, offset, 6, ENC_NA);",
          "2610:             offset += 6;",
          "2612:             btm_steering_disallowed_count--;",
          "2613:         }",
          "2614:     }",
          "2616:     radio_count = tvb_get_guint8(tvb, offset);",
          "2617:     proto_tree_add_item(tree, hf_ieee1905_steering_policy_radio_count,",
          "2618:                         tvb, offset, 1, ENC_NA);",
          "2619:     offset++;",
          "2621:     if (radio_count > 0) {",
          "2622:         proto_tree *policy_list = NULL;",
          "2624:         policy_list = proto_tree_add_subtree(tree, tvb, offset,",
          "2625:                         radio_count * 9,",
          "2626:                         ett_btm_steering_radio_list, NULL,",
          "2627:                         \"BTM steering policy radio list\");",
          "2629:         while (radio_index < radio_count) {",
          "2630:             proto_tree *policy_tree = NULL;",
          "2631:             proto_item *pi = NULL;",
          "2632:             guint8 policy = 0;",
          "2634:             policy_tree = proto_tree_add_subtree_format(policy_list,",
          "2635:                                 tvb, offset, 9,",
          "2636:                                 ett_ap_operational_bss_intf_tree, NULL,",
          "2637:                                 \"Radio %u\", radio_index);",
          "2639:             proto_tree_add_item(policy_tree, hf_ieee1905_steering_policy_radio_id,",
          "2640:                                 tvb, offset, 6, ENC_NA);",
          "2641:             offset += 6;",
          "2643:             policy = tvb_get_guint8(tvb, offset);",
          "2644:             pi = proto_tree_add_item(policy_tree, hf_ieee1905_steering_policy_policy,",
          "2645:                                 tvb, offset, 1, ENC_NA);",
          "2646:             proto_item_append_text(pi, \", %s\",",
          "2647:                                 val_to_str(policy,",
          "2648:                                         ieee1905_steering_policy_vals,",
          "2649:                                         \"Reserved\"));",
          "2650:             offset++;",
          "2652:             proto_tree_add_item(policy_tree, hf_ieee1905_steering_policy_util,",
          "2653:                                 tvb, offset, 1, ENC_NA);",
          "2654:             offset++;",
          "2656:             pi = proto_tree_add_item(policy_tree,",
          "2657:                                 hf_ieee1905_steering_policy_rssi_threshold,",
          "2658:                                 tvb, offset, 1, ENC_NA);",
          "2659:             proto_item_append_text(pi, \"dBm\");",
          "2660:             offset++;",
          "2662:             radio_index++;",
          "2663:         }",
          "2665:     }",
          "2667:     return offset;",
          "2668: }",
          "2673: static int",
          "2674: dissect_metric_reporting_policy(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2675:         proto_tree *tree, guint offset)",
          "2676: {",
          "2677:     guint8 radio_count = 0, radio_index = 0;",
          "2678:     proto_tree *radio_list = NULL;",
          "2679:     proto_tree *radio_tree = NULL;",
          "2680:     proto_item *pi = NULL;",
          "2681:     guint saved_offset = 0;",
          "2683:     proto_tree_add_item(tree, hf_ieee1905_sta_metrics_reporting_interval,",
          "2684:                         tvb, offset, 1, ENC_NA);",
          "2685:     offset++;",
          "2687:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_reporting_interval,",
          "2688:                         tvb, offset, 1, ENC_NA);",
          "2689:     offset++;",
          "2691:     radio_count = tvb_get_guint8(tvb, offset);",
          "2692:     proto_tree_add_item(tree, hf_ieee1905_metric_reporting_radio_count,",
          "2693:                         tvb, offset, 1, ENC_NA);",
          "2694:     offset++;",
          "2696:     if (radio_count == 0)",
          "2697:         return offset;",
          "2699:     radio_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2700:                         ett_metric_reporting_policy_list, &pi,",
          "2701:                         \"Metric reporting policy list\");",
          "2702:     saved_offset = offset;",
          "2704:     while (radio_index < radio_count) {",
          "2705:         proto_item *lpi = NULL;",
          "2707:         radio_tree = proto_tree_add_subtree_format(radio_list,",
          "2708:                                 tvb, offset, 8,",
          "2709:                                 ett_metric_reporting_policy_tree, NULL,",
          "2710:                                 \"Reporting policy for radio %u\",",
          "2711:                                 radio_index);",
          "2713:         proto_tree_add_item(radio_tree, hf_ieee1905_metric_reporting_policy_radio_id,",
          "2714:                             tvb, offset, 6, ENC_NA);",
          "2715:         offset += 6;",
          "2717:         lpi = proto_tree_add_item(radio_tree, hf_ieee1905_metrics_rssi_threshold, tvb,",
          "2718:                             offset, 1, ENC_NA);",
          "2719:         proto_item_append_text(lpi, \"dBm\");",
          "2720:         offset++;",
          "2722:         proto_tree_add_item(radio_tree, hf_ieee1905_metrics_channel_util_threshold,",
          "2723:                             tvb, offset, 1, ENC_NA);",
          "2724:         offset++;",
          "2726:         radio_index++;",
          "2727:     }",
          "2729:     proto_item_set_len(pi, offset - saved_offset);",
          "2731:     return offset;",
          "2732: }",
          "2737: static int",
          "2738: dissect_channel_preference(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2739:         proto_tree *tree, guint offset, guint16 len _U_)",
          "2740: {",
          "2741:     guint8 operating_classes = 0, operating_index = 0;",
          "2742:     proto_tree *class_list = NULL;",
          "2743:     proto_item *pi = NULL;",
          "2744:     guint saved_offset = 0;",
          "2745:     static const int *preference[] = {",
          "2746:       &hf_ieee1905_channel_pref_preference,",
          "2747:       &hf_ieee1905_channel_pref_reason,",
          "2748:       NULL,",
          "2749:     };",
          "2751:     if (len < 6) {",
          "2752:         expert_add_info(pinfo, tree, &ei_ieee1905_malformed_tlv);",
          "2753:         return offset + len;",
          "2754:     }",
          "2756:     proto_tree_add_item(tree, hf_ieee1905_channel_preference_radio_id,",
          "2757:                         tvb, offset, 6, ENC_NA);",
          "2758:     offset += 6;",
          "2760:     if (len < 7) {",
          "2761:         expert_add_info(pinfo, tree, &ei_ieee1905_malformed_tlv);",
          "2762:         return offset;",
          "2763:     }",
          "2765:     operating_classes = tvb_get_guint8(tvb, offset);",
          "2766:     proto_tree_add_item(tree, hf_ieee1905_channel_preference_class_count,",
          "2767:                         tvb, offset, 1, ENC_NA);",
          "2768:     offset++;",
          "2770:     if (operating_classes == 0)",
          "2771:         return offset;",
          "2773:     class_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2774:                         ett_channel_preference_class_list, &pi,",
          "2775:                         \"Supported operating classes list\");",
          "2776:     saved_offset = offset;",
          "2783:     while (operating_index < operating_classes) {",
          "2784:         proto_tree *class_tree = NULL;",
          "2785:         proto_item *cpi = NULL;",
          "2786:         guint8 channels = 0;",
          "2787:         guint start_offset = offset;",
          "2789:         class_tree = proto_tree_add_subtree_format(class_list,",
          "2790:                                 tvb, offset, -1,",
          "2791:                                 ett_ap_channel_preference_class_tree, &cpi,",
          "2792:                                 \"Operating class %u\",",
          "2793:                                 operating_index);",
          "2795:         proto_tree_add_item(class_tree, hf_ieee1905_channel_pref_class,",
          "2796:                             tvb, offset, 1, ENC_NA);",
          "2797:         offset++;",
          "2799:         channels = tvb_get_guint8(tvb, offset);",
          "2800:         proto_tree_add_item(class_tree, hf_ieee1905_channel_pref_channel_count,",
          "2801:                             tvb, offset, 1, ENC_NA);",
          "2802:         offset++;",
          "2804:         if (channels > 0) {",
          "2805:             proto_tree *channel_list = NULL;",
          "2807:             channel_list = proto_tree_add_subtree(class_tree, tvb, offset,",
          "2808:                                     channels,",
          "2809:                                     ett_channel_pref_channel_list, NULL,",
          "2810:                                     \"Channel list\");",
          "2812:             while (channels > 0) {",
          "2813:                 proto_tree_add_item(channel_list,",
          "2814:                                     hf_ieee1905_channel_pref_channel,",
          "2815:                                     tvb, offset, 1, ENC_NA);",
          "2816:                 offset++;",
          "2818:                 channels--;",
          "2819:             }",
          "2821:         }",
          "2823:         proto_tree_add_bitmask(class_tree, tvb, offset,",
          "2824:                            hf_ieee1905_channel_prefs_flags,",
          "2825:                            ett_ieee1905_channel_prefs_flags,",
          "2826:                            preference, ENC_NA);",
          "2827:         offset++;",
          "2829:         proto_item_set_len(cpi, offset - start_offset);",
          "2831:         operating_index++;",
          "2832:     }",
          "2834:     proto_item_set_len(pi, offset - saved_offset);",
          "2836:     return offset;",
          "2837: }",
          "2842: static int",
          "2843: dissect_radio_operation_restriction(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2844:         proto_tree *tree, guint offset, guint16 len _U_)",
          "2845: {",
          "2846:     guint8 op_class_count = 0, op_class_index = 0;",
          "2847:     guint8 channel_count = 0, channel_index = 0;",
          "2848:     proto_tree *op_class_list = NULL, *op_class_tree = NULL;",
          "2849:     proto_item *pi = NULL;",
          "2850:     guint saved_offset = 0;",
          "2852:     proto_tree_add_item(tree, hf_ieee1905_radio_restriction_radio_id,",
          "2853:                         tvb, offset, 6, ENC_NA);",
          "2854:     offset += 6;",
          "2856:     op_class_count = tvb_get_guint8(tvb, offset);",
          "2857:     proto_tree_add_item(tree, hf_ieee1905_radio_restriction_op_class_count,",
          "2858:                         tvb, offset, 1, ENC_NA);",
          "2859:     offset++;",
          "2861:     op_class_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2862:                         ett_radio_restriction_op_class_list, &pi,",
          "2863:                         \"Restricted operating class list\");",
          "2864:     saved_offset = offset;",
          "2866:     while (op_class_index < op_class_count) {",
          "2867:         proto_item *ocpi = NULL;",
          "2868:         proto_tree *channel_list = NULL, *channel_tree = NULL;",
          "2870:         op_class_tree = proto_tree_add_subtree_format(op_class_list,",
          "2871:                                 tvb, offset, -1,",
          "2872:                                 ett_radio_restriction_op_class_tree, &ocpi,",
          "2873:                                 \"Operating class %u\",",
          "2874:                                 op_class_index);",
          "2876:         proto_tree_add_item(op_class_tree, hf_ieee1905_radio_restriction_op_class,",
          "2877:                             tvb, offset, 1, ENC_NA);",
          "2878:         offset++;",
          "2880:         channel_count = tvb_get_guint8(tvb, offset);",
          "2881:         proto_tree_add_item(op_class_tree, hf_ieee1905_radio_restriction_chan_count,",
          "2882:                             tvb, offset, 1, ENC_NA);",
          "2883:         offset++;",
          "2886:         channel_list = proto_tree_add_subtree(tree, tvb, offset, channel_count * 2,",
          "2887:                         ett_radio_restriction_channel_list, NULL,",
          "2888:                         \"Restricted channel(s) list\");",
          "2890:         while (channel_index < channel_count) {",
          "2891:             guint8 separation = 0;",
          "2892:             guint sep_mhz = 0;",
          "2894:             channel_tree = proto_tree_add_subtree_format(channel_list,",
          "2895:                                 tvb, offset, 2,",
          "2896:                                 ett_radio_restriction_channel_tree, NULL,",
          "2897:                                 \"Operating class %u\",",
          "2898:                                 op_class_index);",
          "2900:             proto_tree_add_item(channel_tree, hf_ieee1905_radio_restriction_channel,",
          "2901:                                 tvb, offset, 1, ENC_NA);",
          "2902:             offset++;",
          "2904:             separation = tvb_get_guint8(tvb, offset);",
          "2905:             sep_mhz = separation * 10;",
          "2906:             proto_tree_add_uint_format(channel_tree,",
          "2907:                                 hf_ieee1905_radio_restriction_min_separation,",
          "2908:                                 tvb, offset, 1, separation,",
          "2909:                                 \"Min frequency separation: %dMHz\", sep_mhz);",
          "2910:             offset++;",
          "2912:             channel_index++;",
          "2913:         }",
          "2915:         op_class_index++;",
          "2916:     }",
          "2918:     proto_item_set_len(pi, offset - saved_offset);",
          "2920:     return offset;",
          "2921: }",
          "2926: static int",
          "2927: dissect_transmit_power_limit(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2928:         proto_tree *tree, guint offset)",
          "2929: {",
          "2930:     proto_item *pi = NULL;",
          "2932:     proto_tree_add_item(tree, hf_ieee1905_trans_power_limit_radio_id,",
          "2933:                         tvb, offset, 6, ENC_NA);",
          "2934:     offset += 6;",
          "2936:     pi = proto_tree_add_item(tree, hf_ieee1905_trans_power_limit_eirp,",
          "2937:                         tvb, offset, 1, ENC_NA);",
          "2938:     proto_item_append_text(pi, \"dBm\");",
          "2939:     offset++;",
          "2941:     return offset;",
          "2942: }",
          "2947: static int",
          "2948: dissect_channel_selection_response(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2949:         proto_tree *tree, guint offset)",
          "2950: {",
          "2951:     guint8 response_code = 0;",
          "2952:     proto_item *pi = NULL;",
          "2954:     proto_tree_add_item(tree, hf_ieee1905_channel_select_resp_radio_id,",
          "2955:                         tvb, offset, 6, ENC_NA);",
          "2956:     offset += 6;",
          "2958:     response_code = tvb_get_guint8(tvb, offset);",
          "2959:     pi = proto_tree_add_item(tree, hf_ieee1905_channel_select_resp_code, tvb,",
          "2960:                         offset, 1, ENC_NA);",
          "2961:     proto_item_append_text(pi, \", %s\",",
          "2962:                         val_to_str(response_code,",
          "2963:                             ieee1905_channel_select_resp_code_vals,",
          "2964:                             \"Reserved\"));",
          "2965:     offset++;",
          "2967:     return offset;",
          "2968: }",
          "2973: static int",
          "2974: dissect_operating_channel_report(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "2975:         proto_tree *tree, guint offset)",
          "2976: {",
          "2977:     guint8 class_count = 0, class_index = 0;",
          "2978:     proto_tree *class_list = NULL, *class_tree = NULL;",
          "2979:     proto_item *pi = NULL;",
          "2981:     proto_tree_add_item(tree, hf_ieee1905_op_channel_report_radio_id,",
          "2982:                         tvb, offset, 6, ENC_NA);",
          "2983:     offset += 6;",
          "2985:     class_count = tvb_get_guint8(tvb, offset);",
          "2986:     proto_tree_add_item(tree, hf_ieee1905_op_channel_report_classes,",
          "2987:                         tvb, offset, 1, ENC_NA);",
          "2988:     offset++;",
          "2990:     if (class_count > 0) {",
          "2992:         class_list = proto_tree_add_subtree(tree, tvb, offset, 2 * class_count,",
          "2993:                                 ett_op_channel_report_class_list, &pi,",
          "2994:                                 \"Operating classes list\");",
          "2996:         while (class_index < class_count) {",
          "2997:             class_tree = proto_tree_add_subtree_format(class_list, tvb,",
          "2998:                                 offset, 2, ett_op_channel_report_class_tree,",
          "2999:                                 NULL, \"Operating class %u\", class_index);",
          "3001:             proto_tree_add_item(class_tree, hf_ieee1905_op_channel_class,",
          "3002:                                 tvb, offset, 1, ENC_NA);",
          "3003:             offset++;",
          "3005:             proto_tree_add_item(class_tree, hf_ieee1905_op_channel_number,",
          "3006:                                 tvb, offset, 1, ENC_NA);",
          "3007:             offset++;",
          "3009:             class_index++;",
          "3010:         }",
          "3011:     }",
          "3013:     pi = proto_tree_add_item(tree, hf_ieee1905_op_channel_eirp, tvb,",
          "3014:                              offset, 1, ENC_NA);",
          "3015:     proto_item_append_text(pi, \"dBm\");",
          "3016:     offset++;",
          "3018:     return offset;",
          "3019: }",
          "3024: static int",
          "3025: dissect_higher_layer_data(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3026:         proto_tree *tree, guint offset, guint16 len)",
          "3027: {",
          "3028:     guint8 protocol = tvb_get_guint8(tvb, offset);",
          "3029:     proto_item *pi = NULL;",
          "3031:     pi = proto_tree_add_item(tree, hf_ieee1905_higher_layer_protocol,",
          "3032:                              tvb, offset, 1, ENC_NA);",
          "3034:     proto_item_append_text(pi, \", %s\",",
          "3035:                     val_to_str(protocol,",
          "3036:                                ieee1905_higher_layer_protocol_vals,",
          "3037:                                \"Reserved\"));",
          "3038:     offset++;",
          "3040:     proto_tree_add_item(tree, hf_ieee1905_higher_layer_data, tvb,",
          "3041:                         offset, len - 1, ENC_NA);",
          "3042:     offset += len;",
          "3044:     return offset;",
          "3045: }",
          "3050: static int",
          "3051: dissect_unassociated_sta_link_metric_response(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3052:         proto_tree *tree, guint offset, guint16 len _U_)",
          "3053: {",
          "3054:     guint8 sta_count = 0, sta_index = 0;",
          "3055:     proto_tree *sta_list = NULL;",
          "3057:     proto_tree_add_item(tree, hf_ieee1905_unassoc_sta_link_metric_op_class,",
          "3058:                         tvb, offset, 1, ENC_NA);",
          "3059:     offset++;",
          "3061:     sta_count = tvb_get_guint8(tvb, offset);",
          "3062:     proto_tree_add_item(tree, hf_ieee1905_unassoc_sta_link_metric_sta_count,",
          "3063:                         tvb, offset, 1, ENC_NA);",
          "3065:     sta_list = proto_tree_add_subtree(tree, tvb, offset, sta_count * 12,",
          "3066:                         ett_unassoc_sta_link_metric_list, NULL,",
          "3067:                         \"Unassociated STA list\");",
          "3069:     while (sta_index < sta_count) {",
          "3070:         proto_tree *sta_tree = NULL;",
          "3071:         proto_item *pi = NULL;",
          "3073:         sta_tree = proto_tree_add_subtree_format(sta_list, tvb,",
          "3074:                                 offset, 12, ett_unassoc_sta_link_metric_tree,",
          "3075:                                 NULL, \"STA %u\", sta_index);",
          "3077:         proto_tree_add_item(sta_tree, hf_ieee1905_unassoc_link_metric_mac_addr,",
          "3078:                             tvb, offset, 6, ENC_NA);",
          "3079:         offset += 6;",
          "3081:         proto_tree_add_item(sta_tree, hf_ieee1905_unassoc_link_metric_channel,",
          "3082:                             tvb, offset, 1, ENC_NA);",
          "3083:         offset++;",
          "3085:         proto_tree_add_item(sta_tree, hf_ieee1905_unassoc_link_metric_delta,",
          "3086:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3087:         offset += 4;",
          "3089:         pi = proto_tree_add_item(sta_tree, hf_ieee1905_unassoc_link_metric_uplink_rssi,",
          "3090:                             tvb, offset, 1, ENC_NA);",
          "3091:         proto_item_append_text(pi, \"dBm\");",
          "3092:         offset++;",
          "3094:         sta_index++;",
          "3095:     }",
          "3097:     return offset;",
          "3098: }",
          "3103: static int",
          "3104: dissect_steering_request(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3105:         proto_tree *tree, guint offset)",
          "3106: {",
          "3107:     guint8 mode = 0;",
          "3108:     guint8 steering_count = 0;",
          "3109:     static const int *steering_flags[] = {",
          "3110:       &hf_ieee1905_steering_request_mode_flag,",
          "3111:       &hf_ieee1905_btm_disassoc_imminent_flag,",
          "3112:       &hf_ieee1905_btm_abridged_flag,",
          "3113:       NULL,",
          "3114:     };",
          "3115:     proto_item *pi = NULL;",
          "3116:     proto_tree *sta_list = NULL, *bssid_list = NULL;",
          "3117:     guint8 target_bssid_count = 0;",
          "3119:     proto_tree_add_item(tree, hf_ieee1905_source_bss_bssid, tvb, offset,",
          "3120:                         6, ENC_NA);",
          "3121:     offset += 6;",
          "3123:     mode = tvb_get_guint8(tvb, offset);",
          "3124:     proto_tree_add_bitmask(tree, tvb, offset,",
          "3125:                            hf_ieee1905_steering_request_flags,",
          "3126:                            ett_ieee1905_steering_request_flags,",
          "3127:                            steering_flags, ENC_NA);",
          "3128:     offset++;",
          "3130:     proto_tree_add_item(tree, hf_ieee1905_steering_req_op_window,",
          "3131:                         tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3132:     offset += 2;",
          "3134:     proto_tree_add_item(tree, hf_ieee1905_steering_btm_disass_timer,",
          "3135:                         tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3136:     offset += 2;",
          "3138:     steering_count = tvb_get_guint8(tvb, offset);",
          "3139:     pi = proto_tree_add_item(tree, hf_ieee1905_steering_req_sta_count,",
          "3140:                         tvb, offset, 1, ENC_NA);",
          "3141:     offset++;",
          "3143:     if (steering_count > 0) {",
          "3144:         sta_list = proto_tree_add_subtree(tree, tvb, offset, steering_count * 6,",
          "3145:                             ett_assoc_control_list, NULL,",
          "3146:                             \"Steering request MAC list\");",
          "3148:         while (steering_count > 0) {",
          "3149:             proto_tree_add_item(sta_list, hf_ieee1905_steering_req_sta_mac,",
          "3150:                             tvb, offset, 6, ENC_NA);",
          "3151:             offset += 6;",
          "3153:             steering_count--;",
          "3154:         }",
          "3157:     } else {",
          "3158:         proto_item_append_text(pi, \" (Request applies to all STA(s) in BSS)\");",
          "3159:     }",
          "3164:     if (mode & 0x80) {",
          "3165:         target_bssid_count = tvb_get_guint8(tvb, offset);",
          "3166:         proto_tree_add_item(tree, hf_ieee1905_steering_req_target_bssid_count,",
          "3167:                             tvb, offset, 1, ENC_NA);",
          "3168:         offset++;",
          "3170:         bssid_list = proto_tree_add_subtree(tree, tvb, offset,",
          "3171:                             target_bssid_count * 8,",
          "3172:                             ett_assoc_control_list, NULL,",
          "3173:                             \"Target BSSID list\");",
          "3175:         while (target_bssid_count > 0) {",
          "3177:             proto_tree_add_item(bssid_list,",
          "3178:                             hf_ieee1905_steering_req_target_bssid,",
          "3179:                             tvb, offset, 6, ENC_NA);",
          "3180:             offset += 6;",
          "3182:             proto_tree_add_item(bssid_list,",
          "3183:                             hf_ieee1905_steering_req_oper_class,",
          "3184:                             tvb, offset, 1, ENC_NA);",
          "3185:             offset++;",
          "3187:             proto_tree_add_item(bssid_list,",
          "3188:                             hf_ieee1905_steering_req_target_channel,",
          "3189:                             tvb, offset, 1, ENC_NA);",
          "3190:             offset++;",
          "3192:             target_bssid_count--;",
          "3193:         }",
          "3194:     }",
          "3196:     return offset;",
          "3197: }",
          "3202: static int",
          "3203: dissect_steering_btm_report(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3204:         proto_tree *tree, guint offset, guint16 len)",
          "3205: {",
          "3206:     proto_tree_add_item(tree, hf_ieee1905_btm_reporter_bssid, tvb, offset,",
          "3207:                         6, ENC_NA);",
          "3208:     offset += 6;",
          "3210:     proto_tree_add_item(tree, hf_ieee1905_btm_sta_mac_addr, tvb, offset,",
          "3211:                         6, ENC_NA);",
          "3212:     offset += 6;",
          "3214:     proto_tree_add_item(tree, hf_ieee1905_btm_report_status, tvb, offset,",
          "3215:                         1, ENC_NA);",
          "3216:     offset++;",
          "3222:     if (len >= 13 + 6) {",
          "3223:         proto_tree_add_item(tree, hf_iee1905_btm_report_bssid, tvb, offset,",
          "3224:                             len - 13, ENC_NA);",
          "3226:     }",
          "3228:     return offset;",
          "3229: }",
          "3234: static int",
          "3235: dissect_client_association_control_request(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3236:         proto_tree *tree, guint offset)",
          "3237: {",
          "3238:     guint sta_list_count = 0;",
          "3239:     guint control = 0;",
          "3240:     proto_tree *sta_list = NULL;",
          "3241:     proto_item *pi = NULL;",
          "3243:     proto_tree_add_item(tree, hf_ieee1905_client_assoc_bssid, tvb, offset,",
          "3244:                         6, ENC_NA);",
          "3245:     offset += 6;",
          "3247:     control = tvb_get_guint8(tvb, offset);",
          "3248:     pi = proto_tree_add_item(tree, hf_ieee1905_association_control, tvb,",
          "3249:                              offset, 1, ENC_NA);",
          "3250:     proto_item_append_text(pi, \", %s\",",
          "3251:                         val_to_str(control,",
          "3252:                            ieee1905_association_control_vals,",
          "3253:                            \"Reserved\"));",
          "3254:     offset++;",
          "3256:     pi = proto_tree_add_item(tree, hf_ieee1905_association_control_validity,",
          "3257:                         tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3258:     proto_item_append_text(pi, \" seconds\");",
          "3259:     offset += 2;",
          "3261:     sta_list_count = tvb_get_guint8(tvb, offset);",
          "3262:     proto_tree_add_item(tree, hf_ieee1905_client_assoc_sta_count, tvb,",
          "3263:                         offset, 1, ENC_NA);",
          "3264:     offset++;",
          "3266:     sta_list = proto_tree_add_subtree(tree, tvb, offset, sta_list_count * 6,",
          "3267:                             ett_assoc_control_list, NULL,",
          "3268:                             \"Client association control MAC list\");",
          "3270:     while (sta_list_count > 0) {",
          "3271:         proto_tree_add_item(sta_list, hf_ieee1905_client_assoc_mac_addr,",
          "3272:                             tvb, offset, 6, ENC_NA);",
          "3273:         offset += 6;",
          "3275:         sta_list_count--;",
          "3276:     }",
          "3278:     return offset;",
          "3279: }",
          "3284: static int",
          "3285: dissect_beacon_metrics_query(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3286:         proto_tree *tree, guint offset, guint16 len _U_)",
          "3287: {",
          "3288:     guint8 ssid_len = 0;",
          "3289:     guint8 channel_count = 0, channel_index = 0;",
          "3290:     guint saved_offset = 0;",
          "3291:     proto_tree *channel_report_list = NULL;",
          "3292:     proto_item *pi = NULL;",
          "3294:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_query_mac_addr,",
          "3295:                         tvb, offset, 6, ENC_NA);",
          "3296:     offset += 6;",
          "3298:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_query_op_class,",
          "3299:                         tvb, offset, 1, ENC_NA);",
          "3300:     offset++;",
          "3302:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_query_channel,",
          "3303:                         tvb, offset, 1, ENC_NA);",
          "3304:     offset++;",
          "3306:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_query_bssid,",
          "3307:                         tvb, offset, 6, ENC_NA);",
          "3308:     offset += 6;",
          "3310:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_query_detail,",
          "3311:                         tvb, offset, 1, ENC_NA);",
          "3312:     offset++;",
          "3314:     ssid_len = tvb_get_guint8(tvb, offset);",
          "3315:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_query_ssid_len,",
          "3316:                         tvb, offset, 1, ENC_NA);",
          "3317:     offset++;",
          "3319:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_query_ssid,",
          "3320:                         tvb, offset, ssid_len, ENC_ASCII|ENC_NA);",
          "3321:     offset += ssid_len;",
          "3327:     channel_count = tvb_get_guint8(tvb, offset);",
          "3328:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_channel_count,",
          "3329:                         tvb, offset, 1, ENC_NA);",
          "3330:     offset++;",
          "3332:     channel_report_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3333:                             ett_beacon_metrics_query_list, &pi,",
          "3334:                             \"Channel report list\");",
          "3335:     saved_offset = offset;",
          "3337:     while (channel_index < channel_count) {",
          "3338:         guint8 report_len = 0, report_index = 0;",
          "3339:         proto_tree *channel_report_tree = NULL;",
          "3340:         proto_item *lpi = NULL;",
          "3341:         guint start_offset = offset;",
          "3342:         proto_tree *channel_list = NULL;",
          "3344:         channel_report_tree = proto_tree_add_subtree_format(channel_report_list, tvb,",
          "3345:                                 offset, -1, ett_beacon_metrics_query_tree,",
          "3346:                                 &lpi, \"Channel report %u\", channel_index);",
          "3348:         report_len = tvb_get_guint8(tvb, offset);",
          "3349:         proto_tree_add_item(channel_report_tree,",
          "3350:                             hf_ieee1905_beacon_metrics_report_len,",
          "3351:                             tvb, offset, 1, ENC_NA);",
          "3352:         offset++;",
          "3354:         proto_tree_add_item(channel_report_tree,",
          "3355:                             hf_ieee1905_beacon_metrics_report_op_class,",
          "3356:                             tvb, offset, 1, ENC_NA);",
          "3357:         offset++;",
          "3359:         channel_list = proto_tree_add_subtree(channel_report_tree, tvb, offset,",
          "3360:                             report_len - 1,",
          "3361:                             ett_beacon_metrics_query_channel_list, NULL,",
          "3362:                             \"Channel report list\");",
          "3363:         while (report_index < report_len - 1) {",
          "3364:             proto_tree_add_item(channel_list,",
          "3365:                                 hf_ieee1905_beacon_metrics_report_channel_id,",
          "3366:                                 tvb, offset, 1, ENC_NA);",
          "3367:             offset++;",
          "3369:             report_index++;",
          "3370:         }",
          "3372:         proto_item_set_len(lpi, offset - start_offset);",
          "3374:         channel_index++;",
          "3375:     }",
          "3377:     proto_item_set_len(pi, offset - saved_offset);",
          "3379:     return offset;",
          "3380: }",
          "3385: static gint16",
          "3386: dissect_beacon_report(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3387:         proto_tree *tree, guint offset, guint16 len)",
          "3388: {",
          "3389:     guint16 start_len = len;",
          "3390:     guint16 start_offset = 0;",
          "3391:     proto_tree *sub_element_list = NULL;",
          "3392:     proto_item *pi = NULL;",
          "3393:     static const int *reported_frame_info_flags[] = {",
          "3394:       &hf_ieee1905_phy_type_flag,",
          "3395:       &hf_ieee1905_reported_frame_type_flag,",
          "3396:       NULL,",
          "3397:     };",
          "3400:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_op_class, tvb,",
          "3401:                         offset, 1, ENC_NA);",
          "3402:     offset++; len--;",
          "3406:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_channel_no, tvb,",
          "3407:                         offset, 1, ENC_NA);",
          "3408:     offset++; len--;",
          "3414:     if (len < 8) return start_len;",
          "3416:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_meas_start_time, tvb,",
          "3417:                         offset, 8, ENC_BIG_ENDIAN);",
          "3418:     offset += 8; len -= 8;",
          "3420:     if (len < 2) return start_len;",
          "3422:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_meas_duration, tvb,",
          "3423:                         offset, 2, ENC_BIG_ENDIAN);",
          "3424:     offset += 2; len -= 2;",
          "3426:     if (len == 0) return start_len;",
          "3428:     proto_tree_add_bitmask(tree, tvb, offset,",
          "3429:                            hf_ieee1905_beacon_reported_frame_flags,",
          "3430:                            ett_ieee1905_beacon_reported_flags,",
          "3431:                            reported_frame_info_flags, ENC_NA);",
          "3432:     offset++; len--;",
          "3434:     if (len == 0) return start_len;",
          "3436:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_rcpi, tvb,",
          "3437:                         offset, 1, ENC_NA);",
          "3438:     offset++; len--;",
          "3440:     if (len == 0) return start_len;",
          "3442:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_rsni, tvb,",
          "3443:                         offset, 1, ENC_NA);",
          "3444:     offset++; len--;",
          "3446:     if (len < 6) return start_len;",
          "3448:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_bssid, tvb,",
          "3449:                         offset, 6, ENC_NA);",
          "3450:     offset += 6; len -= 6;",
          "3452:     if (len == 0) return start_len;",
          "3454:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_ant_id, tvb,",
          "3455:                         offset, 1, ENC_NA);",
          "3456:     offset++; len--;",
          "3458:     if (len < 4) return start_len;",
          "3460:     proto_tree_add_item(tree, hf_ieee1905_beacon_report_tsf, tvb,",
          "3461:                         offset, 4, ENC_BIG_ENDIAN);",
          "3462:     offset += 4; len -= 4;",
          "3464:     if (len < 2) return start_len;",
          "3466:     sub_element_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3467:                             ett_beacon_report_subelement_list, &pi,",
          "3468:                             \"Sub-element list\");",
          "3469:     start_offset = offset;",
          "3471:     while (len >= 2) {",
          "3472:         proto_tree *sub_elt_tree = NULL;",
          "3473:         proto_item *lpi = NULL;",
          "3474:         guint8 sub_elt_len = 0;",
          "3475:         guint8 sub_element = tvb_get_guint8(tvb, offset);",
          "3477:         sub_elt_tree = proto_tree_add_subtree_format(sub_element_list, tvb,",
          "3478:                                 offset, -1,",
          "3479:                                 ett_beacon_report_sub_element_tree,",
          "3480:                                 &lpi, \"%s\", val_to_str(sub_element,",
          "3481:                                                 beacon_report_sub_element_vals,",
          "3482:                                                 \"Reserved\"));",
          "3483:         proto_tree_add_item(sub_elt_tree, hf_ieee1905_beacon_report_sub_elt,",
          "3484:                             tvb, offset, 1, ENC_NA);",
          "3485:         offset++; len--;",
          "3487:         sub_elt_len = tvb_get_guint8(tvb, offset);",
          "3488:         proto_tree_add_item(sub_elt_tree, hf_ieee1905_beacon_report_sub_elt_len,",
          "3489:                             tvb, offset, 1, ENC_NA);",
          "3490:         offset++; len--;",
          "3493:         if (len > 0) {",
          "3494:             guint8 insert_len = len > sub_elt_len ? sub_elt_len : len;",
          "3496:             proto_tree_add_item(sub_elt_tree, hf_ieee1905_beacon_report_sub_elt_body,",
          "3497:                                 tvb, offset, insert_len, ENC_NA);",
          "3498:             offset += insert_len; len -= insert_len;",
          "3500:             proto_item_set_len(lpi, insert_len + 2);",
          "3501:         }",
          "3503:     }",
          "3505:     proto_item_set_len(pi, offset - start_offset);",
          "3509:     return start_len - len;",
          "3510: }",
          "3515: static int",
          "3516: dissect_beacon_metrics_response(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3517:         proto_tree *tree, guint offset, guint16 len _U_)",
          "3518: {",
          "3519:     guint8 response = 0, report_index = 0;",
          "3520:     proto_item *pi = NULL;",
          "3521:     proto_tree *report_list = NULL;",
          "3522:     guint saved_offset = 0;",
          "3524:     proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_response_mac_addr,",
          "3525:                         tvb, offset, 6, ENC_NA);",
          "3526:     offset += 6;",
          "3528:     response = tvb_get_guint8(tvb, offset);",
          "3529:     pi = proto_tree_add_item(tree, hf_ieee1905_beacon_metrics_response_status,",
          "3530:                         tvb, offset, 1, ENC_NA);",
          "3531:     proto_item_append_text(pi, \", %s\",",
          "3532:                         val_to_str(response,",
          "3533:                            beacon_metrics_status_vals,",
          "3534:                            \"Reserved\"));",
          "3535:     offset++;",
          "3537:     len -= 7;",
          "3540:     report_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3541:                             ett_beacon_metrics_response_report_list, &pi,",
          "3542:                             \"Measurement report list\");",
          "3543:     saved_offset = offset;",
          "3545:     while (len > 0) {",
          "3546:         guint16 amount = 0;",
          "3547:         proto_tree *report_tree = NULL;",
          "3548:         proto_item *lpi = NULL;",
          "3550:         report_tree = proto_tree_add_subtree_format(report_list, tvb,",
          "3551:                                 offset, -1,",
          "3552:                                 ett_beacon_metrics_response_report_tree,",
          "3553:                                 &lpi, \"Beacon report %u\", report_index);",
          "3555:         amount = dissect_beacon_report(tvb, pinfo, report_tree, offset, len);",
          "3557:         proto_item_set_len(pi, amount);",
          "3559:         len =- amount;",
          "3560:         offset += amount;",
          "3561:         report_index++;",
          "3562:     }",
          "3564:     proto_item_set_len(pi, offset - saved_offset);",
          "3566:     return offset;",
          "3567: }",
          "3572: static int",
          "3573: dissect_backhaul_steering_request(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3574:         proto_tree *tree, guint offset)",
          "3575: {",
          "3576:     proto_tree_add_item(tree, hf_ieee1905_assoc_backhaul_station_mac, tvb,",
          "3577:                         offset, 6, ENC_NA);",
          "3578:     offset += 6;",
          "3580:     proto_tree_add_item(tree, hf_ieee1905_backhaul_target_bssid, tvb, offset,",
          "3581:                         6, ENC_NA);",
          "3582:     offset += 6;",
          "3584:     proto_tree_add_item(tree, hf_ieee1905_backhaul_operating_class, tvb,",
          "3585:                         offset, 1, ENC_NA);",
          "3586:     offset++;",
          "3588:     proto_tree_add_item(tree, hf_ieee1905_backhaul_channel_number, tvb,",
          "3589:                         offset, 1, ENC_NA);",
          "3590:     offset++;",
          "3592:     return offset;",
          "3593: }",
          "3598: static int",
          "3599: dissect_backhaul_steering_response(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3600:         proto_tree *tree, guint offset)",
          "3601: {",
          "3602:     proto_item *pi = NULL;",
          "3603:     guint8 status = 0;",
          "3605:     proto_tree_add_item(tree, hf_ieee1905_assoc_backhaul_station_mac, tvb,",
          "3606:                         offset, 6, ENC_NA);",
          "3607:     offset += 6;",
          "3609:     proto_tree_add_item(tree, hf_ieee1905_backhaul_target_bssid, tvb, offset,",
          "3610:                         6, ENC_NA);",
          "3611:     offset += 6;",
          "3613:     status = tvb_get_guint8(tvb, offset);",
          "3614:     pi = proto_tree_add_item(tree, hf_ieee1905_backhaul_steering_status,",
          "3615:                         tvb, offset, 1, ENC_NA);",
          "3616:     proto_item_append_text(pi, \", %s\",",
          "3617:                         val_to_str(status,",
          "3618:                                    ieee1905_backhaul_status_vals,",
          "3619:                                    \"Reserved\"));",
          "3620:     offset++;",
          "3622:     return offset;",
          "3623: }",
          "3628: static int",
          "3629: dissect_client_info(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3630:         proto_tree *tree, guint offset)",
          "3631: {",
          "3632:     proto_tree_add_item(tree, hf_ieee1905_client_bssid, tvb, offset,",
          "3633:                         6, ENC_NA);",
          "3634:     offset += 6;",
          "3636:     proto_tree_add_item(tree, hf_ieee1905_client_mac_addr, tvb, offset,",
          "3637:                         6, ENC_NA);",
          "3638:     offset += 6;",
          "3639:     return offset;",
          "3640: }",
          "3645: static int",
          "3646: dissect_client_capability_report(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3647:         proto_tree *tree, guint offset, guint16 len)",
          "3648: {",
          "3649:     guint8 result = tvb_get_guint8(tvb, offset);",
          "3650:     proto_item *pi = NULL;",
          "3652:     pi = proto_tree_add_item(tree, hf_ieee1905_client_capability_result, tvb,",
          "3653:                         offset, 1, ENC_NA);",
          "3654:     proto_item_append_text(pi, \", %s\",",
          "3655:                         val_to_str(result,",
          "3656:                                    ieee1905_client_capability_result_vals,",
          "3657:                                    \"Reserved\"));",
          "3658:     offset++;",
          "3661:         proto_tree_add_item(tree, hf_ieee1905_client_capability_frame, tvb,",
          "3662:                             offset, len - 1, ENC_NA);",
          "3663:         offset += len - 1;",
          "3664:     }",
          "3666:     return offset;",
          "3667: }",
          "3672: static int",
          "3673: dissect_client_association_event(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3674:         proto_tree *tree, guint offset)",
          "3675: {",
          "3676:     static const int *association_flags[] = {",
          "3677:       &hf_ieee1905_association_flag,",
          "3678:       NULL,",
          "3679:     };",
          "3681:     proto_tree_add_item(tree, hf_ieee1905_association_client_mac_addr,",
          "3682:                         tvb, offset, 6, ENC_NA);",
          "3683:     offset += 6;",
          "3685:     proto_tree_add_item(tree, hf_ieee1905_association_agent_bssid,",
          "3686:                         tvb, offset, 6, ENC_NA);",
          "3687:     offset += 6;",
          "3689:     proto_tree_add_bitmask(tree, tvb, offset,",
          "3690:                            hf_ieee1905_association_event_flags,",
          "3691:                            ett_ieee1905_association_event_flags,",
          "3692:                            association_flags, ENC_NA);",
          "3693:     offset++;",
          "3695:     return offset;",
          "3696: }",
          "3701: static int",
          "3702: dissect_ap_metric_query(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3703:         proto_tree *tree, guint offset, guint16 len)",
          "3704: {",
          "3705:     proto_tree *bssid_list = NULL;",
          "3706:     proto_item *pi = NULL;",
          "3707:     guint saved_offset;",
          "3709:     bssid_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3710:                             ett_ap_metric_query_bssid_list, &pi,",
          "3711:                             \"AP BSSID list\");",
          "3712:     saved_offset = offset;",
          "3714:     while (len >= 6) {",
          "3715:         proto_tree_add_item(bssid_list, hf_ieee1905_ap_metric_query_bssid,",
          "3716:                             tvb, offset, 6, ENC_NA);",
          "3717:         offset += 6;",
          "3718:         len -= 6;",
          "3719:     }",
          "3721:     proto_item_set_len(pi, offset - saved_offset);",
          "3723:     return offset;",
          "3724: }",
          "3729: static int",
          "3730: dissect_ap_metrics(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3731:         proto_tree *tree, guint offset, guint16 len _U_)",
          "3732: {",
          "3733:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_agent_bssid,",
          "3734:                         tvb, offset, 6, ENC_NA);",
          "3735:     offset += 6;",
          "3737:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_channel_utilization,",
          "3738:                         tvb, offset, 1, ENC_NA);",
          "3739:     offset++;",
          "3741:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_sta_count,",
          "3742:                         tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3743:     offset += 2;",
          "3745:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_service_params_be,",
          "3746:                         tvb, offset, 3, ENC_NA);",
          "3747:     offset += 3;",
          "3754:         return offset + len - 12;",
          "3756:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_service_params_bk,",
          "3757:                         tvb, offset, 3, ENC_NA);",
          "3758:     offset += 3;",
          "3761:         return offset + len - 15;",
          "3763:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_service_params_vo,",
          "3764:                         tvb, offset, 3, ENC_NA);",
          "3765:     offset += 3;",
          "3768:         return offset + len - 18;",
          "3770:     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_service_params_vi,",
          "3771:                         tvb, offset, 3, ENC_NA);",
          "3772:     offset += 3;",
          "3774:     return offset;",
          "3775: }",
          "3780: static int",
          "3781: dissect_sta_mac_address_type(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3782:         proto_tree *tree, guint offset, guint16 len _U_)",
          "3783: {",
          "3784:     proto_tree_add_item(tree, hf_ieee1905_sta_mac_address_type, tvb,",
          "3785:                         offset, 6, ENC_NA);",
          "3786:     offset += 6;",
          "3788:     return offset;",
          "3789: }",
          "3794: static int",
          "3795: dissect_associated_sta_link_metrics(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3796:         proto_tree *tree, guint offset, guint16 len _U_)",
          "3797: {",
          "3798:     proto_tree *bss_list = NULL;",
          "3799:     proto_tree *bss_tree = NULL;",
          "3800:     guint8 bss_list_count = 0, bss_list_index = 0;",
          "3802:     proto_tree_add_item(tree, hf_ieee1905_assoc_sta_mac_addr, tvb, offset,",
          "3803:                         6, ENC_NA);",
          "3804:     offset += 6;",
          "3811:     bss_list_count = tvb_get_guint8(tvb, offset);",
          "3812:     proto_tree_add_item(tree, hf_ieee1905_assoc_sta_link_metric_bss_count, tvb,",
          "3813:                         offset, 1, ENC_NA);",
          "3814:     offset++;",
          "3817:         return offset;",
          "3819:     bss_list = proto_tree_add_subtree(tree, tvb, offset, 19 * bss_list_count,",
          "3820:                             ett_sta_list_metrics_bss_list, NULL,",
          "3821:                             \"BSS list\");",
          "3823:     while (bss_list_index < bss_list_count) {",
          "3824:         proto_item *pi = NULL;",
          "3826:         bss_tree = proto_tree_add_subtree_format(bss_list, tvb,",
          "3827:                                 offset, 19, ett_sta_list_metrics_bss_tree,",
          "3828:                                 NULL, \"BSS %u\", bss_list_index);",
          "3830:         proto_tree_add_item(bss_tree, hf_ieee1905_assoc_sta_link_metrics_bssid,",
          "3831:                             tvb, offset, 6, ENC_NA);",
          "3832:         offset++;",
          "3834:         proto_tree_add_item(bss_tree, hf_ieee1905_assoc_sta_link_metrics_time_delta,",
          "3835:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3836:         offset += 4;",
          "3838:         proto_tree_add_item(bss_tree, hf_ieee1905_assoc_sta_link_metrics_dwn_rate,",
          "3839:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3840:         offset += 4;",
          "3842:         proto_tree_add_item(bss_tree, hf_ieee1905_assoc_sta_link_metrics_up_rate,",
          "3843:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3844:         offset += 4;",
          "3846:         pi = proto_tree_add_item(bss_tree, hf_ieee1905_assoc_sta_link_metrics_rssi,",
          "3847:                             tvb, offset, 1, ENC_NA);",
          "3848:         proto_item_append_text(pi, \"dBm\");",
          "3849:         offset++;",
          "3851:         bss_list_index++;",
          "3852:     }",
          "3854:     return offset;",
          "3855: }",
          "3860: static int",
          "3861: dissect_unassociated_sta_link_metrics_query(tvbuff_t *tvb,",
          "3862:         packet_info *pinfo _U_, proto_tree *tree, guint offset, guint16 len)",
          "3863: {",
          "3864:     guint8 channel_count = 0;",
          "3865:     proto_tree *channel_list = NULL;",
          "3866:     proto_tree *sta_mac_list = NULL;",
          "3867:     proto_item *pi = NULL;",
          "3868:     guint saved_offset = 0;",
          "3870:     proto_tree_add_item(tree, hf_ieee1905_unassoc_sta_link_metrics_class,",
          "3871:                         tvb, offset, 1, ENC_NA);",
          "3872:     offset++;",
          "3873:     len--;",
          "3875:     channel_count = tvb_get_guint8(tvb, offset);",
          "3876:     proto_tree_add_item(tree, hf_ieee1905_unassoc_sta_link_channel_count,",
          "3877:                         tvb, offset, 1, ENC_NA);",
          "3878:     offset++;",
          "3879:     len--;",
          "3881:     if (channel_count > 0) {",
          "3882:         channel_list = proto_tree_add_subtree(tree, tvb, offset, channel_count,",
          "3883:                             ett_sta_link_metrics_query_channel_list, NULL,",
          "3884:                             \"Channel list\");",
          "3886:         while (channel_count > 0) {",
          "3887:             proto_tree_add_item(channel_list,",
          "3888:                             hf_ieee1905_unassoc_metrics_channel,",
          "3889:                             tvb, offset, 1, ENC_NA);",
          "3890:             channel_count--;",
          "3891:             len--;",
          "3892:         }",
          "3893:     }",
          "3896:         return offset;",
          "3899:     sta_mac_list = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3900:                             ett_sta_link_link_mac_addr_list, &pi,",
          "3901:                             \"MAC address list\");",
          "3902:     saved_offset = offset;",
          "3904:     while (len >= 6) {",
          "3905:         proto_tree_add_item(sta_mac_list, hf_ieee1905_unassoc_link_metrics_query_mac,",
          "3906:                             tvb, offset, 6, ENC_NA);",
          "3907:         offset += 6;",
          "3908:     }",
          "3910:     proto_item_set_len(pi, offset - saved_offset);",
          "3912:     return offset;",
          "3913: }",
          "3918: static int",
          "3919: dissect_device_information_type(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3920:         proto_tree *tree, guint offset, guint16 len)",
          "3921: {",
          "3922:     proto_item *pi = NULL;",
          "3923:     proto_tree *sub_tree = NULL;",
          "3925:     proto_tree_add_item(tree, hf_ieee1905_al_mac_address_type, tvb,",
          "3926:                         offset, 6, ENC_NA);",
          "3927:     offset += 6;",
          "3929:     proto_tree_add_item(tree, hf_ieee1905_local_interface_count, tvb,",
          "3930:                         offset, 1, ENC_NA);",
          "3931:     offset++;",
          "3933:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3934:                             ett_device_information_list,",
          "3935:                             &pi, \"Local interface list\");",
          "3937:     offset = dissect_local_interface_list(tvb, pinfo, sub_tree,",
          "3938:                             offset, len - (6 + 1));",
          "3940:     proto_item_set_len(pi, offset - (6 + 1));",
          "3942:     return offset;",
          "3943: }",
          "3948: static int",
          "3949: dissect_transmitter_link_metric(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "3950:         proto_tree *tree, guint offset, guint16 len)",
          "3951: {",
          "3952:     guint remaining;",
          "3954:     proto_tree_add_item(tree, hf_ieee1905_responder_al_mac_addr, tvb,",
          "3955:                         offset, 6, ENC_NA);",
          "3956:     offset += 6;",
          "3958:     proto_tree_add_item(tree, hf_ieee1905_neighbor_al_mac_addr, tvb,",
          "3959:                         offset, 6, ENC_NA);",
          "3960:     offset += 6;",
          "3962:     remaining = len - 12;",
          "3963:     while (remaining) {",
          "3964:         proto_tree_add_item(tree, hf_ieee1905_receiving_al_mac_addr,",
          "3965:                             tvb, offset, 6, ENC_NA);",
          "3966:         offset += 6;",
          "3968:         proto_tree_add_item(tree, hf_ieee1905_neighbor_al_mac_addr,",
          "3969:                             tvb, offset, 6, ENC_NA);",
          "3970:         offset += 6;",
          "3972:         offset = dissect_media_type(tvb, pinfo, tree, offset);",
          "3974:         proto_tree_add_item(tree, hf_ieee1905_bridge_flag, tvb, offset,",
          "3975:                             1, ENC_NA);",
          "3976:         offset += 1;",
          "3978:         proto_tree_add_item(tree, hf_ieee1905_packet_errors, tvb, offset,",
          "3979:                             4, ENC_BIG_ENDIAN);",
          "3980:         offset += 4;",
          "3982:         proto_tree_add_item(tree, hf_ieee1905_transmitted_packets, tvb,",
          "3983:                             offset, 4, ENC_BIG_ENDIAN);",
          "3984:         offset += 4;",
          "3986:         proto_tree_add_item(tree, hf_ieee1905_mac_throughput_capacity, tvb,",
          "3987:                             offset, 2, ENC_BIG_ENDIAN);",
          "3988:         offset += 2;",
          "3990:         proto_tree_add_item(tree, hf_ieee1905_link_availability, tvb,",
          "3991:                             offset, 2, ENC_BIG_ENDIAN);",
          "3992:         offset += 2;",
          "3994:         proto_tree_add_item(tree, hf_ieee1905_phy_rate, tvb, offset,",
          "3995:                             2, ENC_BIG_ENDIAN);",
          "3996:         offset += 2;",
          "3998:         remaining -= 29;",
          "3999:     }",
          "4001:     return offset;",
          "4002: }",
          "4007: static int",
          "4008: dissect_receiver_link_metric(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "4009:         proto_tree *tree, guint offset, guint16 len)",
          "4010: {",
          "4011:     guint remaining;",
          "4013:     proto_tree_add_item(tree, hf_ieee1905_responder_al_mac_addr, tvb,",
          "4014:                         offset, 6, ENC_NA);",
          "4015:     offset += 6;",
          "4016:     proto_tree_add_item(tree, hf_ieee1905_neighbor_al_mac_addr, tvb,",
          "4017:                         offset, 6, ENC_NA);",
          "4018:     offset += 6;",
          "4020:     remaining = len - 12;",
          "4021:     while (remaining) {",
          "4022:         proto_tree_add_item(tree, hf_ieee1905_receiving_al_mac_addr,",
          "4023:                             tvb, offset, 6, ENC_NA);",
          "4024:         offset += 6;",
          "4026:         proto_tree_add_item(tree, hf_ieee1905_neighbor_al_mac_addr,",
          "4027:                             tvb, offset, 6, ENC_NA);",
          "4028:         offset += 6;",
          "4030:         offset = dissect_media_type(tvb, pinfo, tree, offset);",
          "4032:         proto_tree_add_item(tree, hf_ieee1905_packet_errors, tvb, offset,",
          "4033:                             4, ENC_BIG_ENDIAN);",
          "4034:         offset += 4;",
          "4036:         proto_tree_add_item(tree, hf_ieee1905_packets_received, tvb,",
          "4037:                             offset, 4, ENC_BIG_ENDIAN);",
          "4038:         offset += 4;",
          "4040:         proto_tree_add_item(tree, hf_ieee1905_rssi, tvb, offset, 1, ENC_NA);",
          "4041:         offset++;",
          "4043:         remaining -= 23;",
          "4044:     }",
          "4045:     return offset;",
          "4046: }",
          "4051: static int",
          "4052: dissect_ieee1905_tlv_data(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "4053:         proto_tree *tree, guint offset, guint8 tlv_type, guint16 tlv_len)",
          "4054: {",
          "4055:     guint link_metric_query;",
          "4057:     switch (tlv_type) {",
          "4059:     case AL_MAC_ADDRESS_TYPE_TLV:",
          "4060:         proto_tree_add_item(tree, hf_ieee1905_al_mac_address_type, tvb,",
          "4061:                             offset, 6, ENC_NA);",
          "4062:         offset += 6;",
          "4063:         break;",
          "4065:     case MAC_ADDRESS_TYPE_TLV:",
          "4066:         proto_tree_add_item(tree, hf_ieee1905_mac_address_type, tvb,",
          "4067:                             offset, 6, ENC_NA);",
          "4068:         offset += 6;",
          "4069:         break;",
          "4071:     case DEVICE_INFORMATION_TYPE_TLV:",
          "4072:         offset = dissect_device_information_type(tvb, pinfo, tree, offset,",
          "4073:                                 tlv_len);",
          "4074:         break;",
          "4076:     case DEVICE_BRIDGING_CAPABILITY_TLV:",
          "4077:         offset = dissect_device_bridging_capabilities(tvb, pinfo, tree,",
          "4078:                                 offset, tlv_len);",
          "4079:         break;",
          "4081:     case NON_1905_NEIGHBOR_DEVICE_LIST_TLV:",
          "4082:         offset = dissect_non_1905_neighbor_device_list(tvb, pinfo, tree,",
          "4083:                                 offset, tlv_len);",
          "4084:         break;",
          "4086:     case NEIGHBOR_DEVICE_TLV:",
          "4087:         offset = dissect_1905_neighbor_device(tvb, pinfo, tree, offset,",
          "4088:                                 tlv_len);",
          "4089:         break;",
          "4091:     case LINK_METRIC_QUERY_TLV:",
          "4092:         proto_tree_add_item_ret_uint(tree,",
          "4093:                                       hf_ieee1905_link_metric_query_type,",
          "4094:                                       tvb, offset, 1, ENC_NA,",
          "4095:                                       &link_metric_query);",
          "4096:         offset++;",
          "4098:         if (link_metric_query) {",
          "4099:             proto_tree_add_item(tree, hf_ieee1905_al_mac_address_type, tvb,",
          "4100:                                 offset, 6, ENC_NA);",
          "4101:             offset += 6;",
          "4102:         }",
          "4104:         proto_tree_add_item(tree, hf_ieee1905_link_metrics_requested, tvb,",
          "4105:                             offset, 1, ENC_NA);",
          "4106:         offset++;",
          "4107:         break;",
          "4109:     case TRANSMITTER_LINK_METRIC_TLV:",
          "4110:         offset = dissect_transmitter_link_metric(tvb, pinfo, tree, offset,",
          "4111:                                         tlv_len);",
          "4112:         break;",
          "4114:     case RECEIVER_LINK_METRIC_TLV:",
          "4115:         offset = dissect_receiver_link_metric(tvb, pinfo, tree, offset,",
          "4116:                                         tlv_len);",
          "4117:         break;",
          "4119:     case VENDOR_SPECIFIC_TLV:",
          "4120:         offset = dissect_vendor_specific(tvb, pinfo, tree, offset, tlv_len);",
          "4121:         break;",
          "4123:     case LINK_METRIC_RESULT_CODE_TLV:",
          "4124:         offset = dissect_link_metric_result_code(tvb, pinfo, tree, offset);",
          "4125:         break;",
          "4127:     case SEARCHED_ROLE_TLV:",
          "4128:         offset = dissect_searched_role(tvb, pinfo, tree, offset);",
          "4129:         break;",
          "4131:     case AUTO_CONFIG_FREQ_BAND_TLV:",
          "4132:         offset = dissect_auto_config_freq_band(tvb, pinfo, tree, offset);",
          "4133:         break;",
          "4135:     case SUPPORTED_ROLE_TLV:",
          "4136:         offset = dissect_supported_role(tvb, pinfo, tree, offset);",
          "4137:         break;",
          "4139:     case SUPPORTED_FREQ_BAND_TLV:",
          "4140:         offset = dissect_supported_freq_band(tvb, pinfo, tree, offset);",
          "4141:         break;",
          "4143:     case WSC_TLV:",
          "4144:         offset = dissect_wsc(tvb, pinfo, tree, offset, tlv_len);",
          "4145:         break;",
          "4147:     case PUSH_BUTTON_EVENT_NOTIFICATION_TLV:",
          "4148:         offset = dissect_push_button_event_notification(tvb, pinfo,",
          "4149:                                 tree, offset);",
          "4150:         break;",
          "4152:     case PUSH_BUTTON_JOIN_NOTIFICATION_TLV:",
          "4153:         offset = dissect_push_button_join_notification(tvb, pinfo,",
          "4154:                                 tree, offset);",
          "4155:         break;",
          "4157:     case GENERIC_PHY_DEVICE_INFORMATION_TLV:",
          "4158:         offset = dissect_generic_phy_device_info(tvb, pinfo, tree,",
          "4159:                                 offset);",
          "4160:         break;",
          "4162:     case DEVICE_IDENTIFICATION_TYPE_TLV:",
          "4163:         offset = dissect_device_identification(tvb, pinfo, tree,",
          "4164:                                 offset);",
          "4165:         break;",
          "4167:     case CONTROL_URL_TYPE_TLV:",
          "4168:         offset = dissect_control_url_type(tvb, pinfo, tree, offset, tlv_len);",
          "4169:         break;",
          "4171:     case IPV4_TYPE_TLV:",
          "4172:         offset = dissect_ipv4_type(tvb, pinfo, tree, offset);",
          "4173:         break;",
          "4175:     case IPV6_TYPE_TLV:",
          "4176:         offset = dissect_ipv6_type(tvb, pinfo, tree, offset);",
          "4177:         break;",
          "4179:     case PUSH_BUTTON_EVENT_TYPE_NOTIFICATION_TLV:",
          "4180:         offset = dissect_push_button_event_type_notification(tvb, pinfo, tree,",
          "4181:                                 offset);",
          "4182:         break;",
          "4184:     case IEEE1905_PROFILE_VERSION_TLV:",
          "4185:         offset = dissect_profile_version(tvb, pinfo, tree, offset);",
          "4186:         break;",
          "4188:     case POWER_OFF_INTERFACE_TLV:",
          "4189:         offset = dissect_power_off_interface(tvb, pinfo, tree, offset);",
          "4190:         break;",
          "4192:     case INTERFACE_POWER_CHANGE_INFORMATION_TLV:",
          "4193:         offset = dissect_interface_power_change_info(tvb, pinfo, tree, offset);",
          "4194:         break;",
          "4196:     case INTERFACE_POWER_CHANGE_STATUS_TLV:",
          "4197:         offset = dissect_interface_power_change_status(tvb, pinfo, tree, offset);",
          "4198:         break;",
          "4200:     case L2_NEIGHBOR_DEVICE_TLV:",
          "4201:         offset = dissect_l2_neighbor_device(tvb, pinfo, tree, offset);",
          "4202:         break;",
          "4204:     case SUPPORTED_SERVICE_TLV:",
          "4205:         offset = dissect_supported_service(tvb, pinfo, tree, offset);",
          "4206:         break;",
          "4208:     case SEARCHED_SERVICE_TLV:",
          "4209:         offset = dissect_searched_service(tvb, pinfo, tree, offset);",
          "4210:         break;",
          "4212:     case AP_RADIO_IDENTIFIER_TLV:",
          "4213:         offset = dissect_ap_radio_identifier(tvb, pinfo, tree, offset);",
          "4214:         break;",
          "4216:     case AP_OPERATIONAL_BSS_TLV:",
          "4217:         offset = dissect_ap_operational_bss(tvb, pinfo, tree, offset);",
          "4218:         break;",
          "4220:     case ASSOCIATED_CLIENTS_TLV:",
          "4221:         offset = dissect_associated_clients(tvb, pinfo, tree, offset);",
          "4222:         break;",
          "4224:     case AP_RADIO_BASIC_CAPABILITIES_TLV:",
          "4225:         offset = dissect_ap_radio_basic_capabilities(tvb, pinfo, tree, offset);",
          "4226:         break;",
          "4228:     case AP_HT_CAPABILITIES_TLV:",
          "4229:         offset = dissect_ap_ht_capabilities(tvb, pinfo, tree, offset);",
          "4230:         break;",
          "4232:     case AP_VHT_CAPABILITIES_TLV:",
          "4233:         offset = dissect_ap_vht_capabilities(tvb, pinfo, tree, offset);",
          "4234:         break;",
          "4236:     case AP_HE_CAPABILITIES_TLV:",
          "4237:         offset = dissect_ap_he_capabilities(tvb, pinfo, tree, offset);",
          "4238:         break;",
          "4240:     case STEERING_POLICY_TLV:",
          "4241:         offset = dissect_steering_policy(tvb, pinfo, tree, offset, tlv_len);",
          "4242:         break;",
          "4244:     case METRIC_REPORTING_POLICY_TLV:",
          "4245:         offset = dissect_metric_reporting_policy(tvb, pinfo, tree, offset);",
          "4246:         break;",
          "4248:     case CHANNEL_PREFERENCE_TLV:",
          "4249:         offset = dissect_channel_preference(tvb, pinfo, tree, offset, tlv_len);",
          "4250:         break;",
          "4252:     case RADIO_OPERATION_RESTRICTION_TLV:",
          "4253:         offset = dissect_radio_operation_restriction(tvb, pinfo, tree, offset,",
          "4254:                                 tlv_len);",
          "4255:         break;",
          "4257:     case TRANSMIT_POWER_LIMIT_TLV:",
          "4258:         offset = dissect_transmit_power_limit(tvb, pinfo, tree, offset);",
          "4259:         break;",
          "4261:     case CHANNEL_SELECTION_RESPONSE_TLV:",
          "4262:         offset = dissect_channel_selection_response(tvb, pinfo, tree, offset);",
          "4263:         break;",
          "4265:     case OPERATING_CHANNEL_REPORT_TLV:",
          "4266:         offset = dissect_operating_channel_report(tvb, pinfo, tree, offset);",
          "4267:         break;",
          "4269:     case CLIENT_INFO_TLV:",
          "4270:         offset = dissect_client_info(tvb, pinfo, tree, offset);",
          "4271:         break;",
          "4273:     case CLIENT_CAPABILITY_REPORT_TLV:",
          "4274:         offset = dissect_client_capability_report(tvb, pinfo, tree, offset, tlv_len);",
          "4275:         break;",
          "4277:     case CLIENT_ASSOCIATION_EVENT_TLV:",
          "4278:         offset = dissect_client_association_event(tvb, pinfo, tree, offset);",
          "4279:         break;",
          "4281:     case AP_METRIC_QUERY_TLV:",
          "4282:         offset = dissect_ap_metric_query(tvb, pinfo, tree, offset, tlv_len);",
          "4283:         break;",
          "4285:     case AP_METRICS_TLV:",
          "4286:         offset = dissect_ap_metrics(tvb, pinfo, tree, offset, tlv_len);",
          "4287:         break;",
          "4289:     case STA_MAC_ADDRESS_TYPE_TLV:",
          "4290:         offset = dissect_sta_mac_address_type(tvb, pinfo, tree, offset, tlv_len);",
          "4291:         break;",
          "4293:     case ASSOCIATED_STA_LINK_METRICS_TLV:",
          "4294:         offset = dissect_associated_sta_link_metrics(tvb, pinfo, tree, offset,",
          "4295:                                                      tlv_len);",
          "4296:         break;",
          "4298:     case UNASSOCIATED_STA_LINK_METRICS_QUERY_TLV:",
          "4299:         offset = dissect_unassociated_sta_link_metrics_query(tvb, pinfo, tree,",
          "4300:                                                         offset, tlv_len);",
          "4301:         break;",
          "4303:     case UNASSOCIATED_STA_LINK_METRICS_RESPONSE_TLV:",
          "4304:         offset = dissect_unassociated_sta_link_metric_response(tvb, pinfo, tree,",
          "4305:                                                         offset, tlv_len);",
          "4306:         break;",
          "4308:     case BEACON_METRICS_QUERY_TLV:",
          "4309:         offset = dissect_beacon_metrics_query(tvb, pinfo, tree, offset, tlv_len);",
          "4310:         break;",
          "4312:     case BEACON_METRICS_RESPONSE_TLV:",
          "4313:         offset = dissect_beacon_metrics_response(tvb, pinfo, tree, offset, tlv_len);",
          "4314:         break;",
          "4316:     case STEERING_REQUEST_TLV:",
          "4317:         offset = dissect_steering_request(tvb, pinfo, tree, offset);",
          "4319:     case STEERING_BTM_REPORT_TLV:",
          "4320:         offset = dissect_steering_btm_report(tvb, pinfo, tree, offset, tlv_len);",
          "4321:         break;",
          "4323:     case CLIENT_ASSOCIATION_CONTROL_REQUEST_TLV:",
          "4324:         offset = dissect_client_association_control_request(tvb, pinfo, tree, offset);",
          "4325:         break;",
          "4327:     case BACKHAUL_STEERING_REQUEST_TLV:",
          "4328:         offset = dissect_backhaul_steering_request(tvb, pinfo, tree, offset);",
          "4329:         break;",
          "4331:     case BACKHAUL_STEERING_RESPONSE_TLV:",
          "4332:         offset = dissect_backhaul_steering_response(tvb, pinfo, tree, offset);",
          "4334:     case HIGHER_LAYER_DATA_TLV:",
          "4335:         offset = dissect_higher_layer_data(tvb, pinfo, tree, offset, tlv_len);",
          "4336:         break;",
          "4338:     case AP_CAPABILITY_TLV:",
          "4339:         offset = dissect_ap_capability(tvb, pinfo, tree, offset);",
          "4340:         break;",
          "4342:     default:",
          "4343:         proto_tree_add_item(tree, hf_ieee1905_tlv_data, tvb, offset, tlv_len, ENC_NA);",
          "4344:         offset += tlv_len;",
          "4345:     }",
          "4347:   return offset;",
          "4348: }",
          "4350: static int",
          "4351: dissect_ieee1905(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4352:         void *data _U_)",
          "4353: {",
          "4354:     proto_item *ti;",
          "4355:     proto_tree *ieee1905_tree;",
          "4356:     guint16    message_type;",
          "4357:     guint       offset = 0;",
          "4358:     static const int *flags[] = {",
          "4359:       &hf_ieee1905_last_fragment,",
          "4360:       &hf_ieee1905_relay_indicator,",
          "4361:       NULL",
          "4362:     };",
          "4363:     gboolean eom_seen = 0;",
          "4365:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"ieee1905\");",
          "4367:     col_clear(pinfo->cinfo, COL_INFO);",
          "4369:     message_type = tvb_get_ntohs(tvb, 2);",
          "4371:     col_set_str(pinfo->cinfo, COL_INFO,",
          "4372:                 val_to_str_ext(message_type, &ieee1905_message_type_vals_ext,",
          "4373:                         \"Unknown: %u\"));",
          "4375:     ti = proto_tree_add_item(tree, proto_ieee1905, tvb, 0, -1, ENC_NA);",
          "4377:     ieee1905_tree = proto_item_add_subtree(ti, ett_ieee1905);",
          "4379:     proto_tree_add_item(ieee1905_tree, hf_ieee1905_message_version, tvb, offset, 1, ENC_NA);",
          "4380:     offset++;",
          "4382:     proto_tree_add_item(ieee1905_tree, hf_ieee1905_message_reserved, tvb, offset, 1, ENC_NA);",
          "4383:     offset++;",
          "4385:     proto_tree_add_item(ieee1905_tree, hf_ieee1905_message_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4386:     offset += 2;",
          "4388:     proto_tree_add_item(ieee1905_tree, hf_ieee1905_message_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4389:     offset += 2;",
          "4391:     proto_tree_add_item(ieee1905_tree, hf_ieee1905_fragment_id, tvb, offset, 1, ENC_NA);",
          "4392:     offset++;",
          "4394:     proto_tree_add_bitmask(ieee1905_tree, tvb, offset, hf_ieee1905_flags,",
          "4395:                            ett_ieee1905_flags, flags, ENC_NA);",
          "4396:     offset++;",
          "4401:     while (!eom_seen) {",
          "4402:       guint8 tlv_type;",
          "4403:       guint16 tlv_len;",
          "4404:       proto_item *tlv_tree;",
          "4406:       tlv_type = tvb_get_guint8(tvb, offset);",
          "4407:       eom_seen = (tlv_type == EOM_TLV);",
          "4408:       tlv_len = tvb_get_ntohs(tvb, offset + 1);",
          "4410:       tlv_tree = proto_tree_add_subtree(ieee1905_tree, tvb, offset, tlv_len + 3,",
          "4411:                                         ett_tlv, NULL, val_to_str_ext(tlv_type,",
          "4412:                                                 &ieee1905_tlv_types_vals_ext,",
          "4413:                                                 \"Unknown: %u\"));",
          "4415:       proto_tree_add_item(tlv_tree, hf_ieee1905_tlv_types, tvb, offset, 1, ENC_NA);",
          "4416:       offset++;",
          "4418:       proto_tree_add_item(tlv_tree, hf_ieee1905_tlv_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4419:       offset += 2;",
          "4421:       if (tlv_len)",
          "4422:         offset = dissect_ieee1905_tlv_data(tvb, pinfo, tlv_tree, offset, tlv_type, tlv_len);",
          "4423:     }",
          "4425:     if (tvb_reported_length_remaining(tvb, offset)) {",
          "4426:       proto_item *pi = NULL;",
          "4429:       pi = proto_tree_add_item(ieee1905_tree, hf_ieee1905_data, tvb, offset, -1, ENC_NA);",
          "4430:       expert_add_info(pinfo, pi, &ei_ieee1905_extraneous_data_after_eom);",
          "4431:     }",
          "4433:     return tvb_captured_length(tvb);",
          "4434: }",
          "4436: void",
          "4437: proto_register_ieee1905(void)",
          "4438: {",
          "4439:     static hf_register_info hf[] = {",
          "4440:         { &hf_ieee1905_message_version,",
          "4441:           { \"Message version\", \"ieee1905.message_version\",",
          "4442:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4444:         { &hf_ieee1905_message_reserved,",
          "4445:           { \"Message reserved\", \"ieee1905.message_reserved\",",
          "4446:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4448:         { &hf_ieee1905_message_type,",
          "4449:           { \"Message type\", \"ieee1905.message_type\",",
          "4450:             FT_UINT16, BASE_HEX|BASE_EXT_STRING, &ieee1905_message_type_vals_ext, 0, NULL, HFILL }},",
          "4452:         { &hf_ieee1905_message_id,",
          "4453:           { \"Message id\", \"ieee1905.message_id\",",
          "4454:             FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4456:         { &hf_ieee1905_fragment_id,",
          "4457:           { \"Fragment id\", \"ieee1905.fragment_id\",",
          "4458:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4460:         { &hf_ieee1905_flags,",
          "4461:           { \"Flags\", \"ieee1905.flags\",",
          "4462:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4464:         { &hf_ieee1905_last_fragment,",
          "4465:           { \"Last fragment\", \"ieee1905.last_fragment\",",
          "4466:             FT_BOOLEAN, 8, TFS(&tfs_last_fragment), 0x80, NULL, HFILL }},",
          "4468:         { &hf_ieee1905_relay_indicator,",
          "4469:           { \"Relay indicator\", \"ieee1905.relay_indicator\",",
          "4470:             FT_BOOLEAN, 8, TFS(&tfs_relay_indicator), 0x40, NULL, HFILL }},",
          "4472:         { &hf_ieee1905_tlv_types,",
          "4473:           { \"TLV type\", \"ieee1905.tlv_type\",",
          "4474:             FT_UINT8, BASE_DEC|BASE_EXT_STRING, &ieee1905_tlv_types_vals_ext, 0, NULL, HFILL }},",
          "4476:         { &hf_ieee1905_tlv_len,",
          "4477:           { \"TLV length\", \"ieee1905.tlv_length\",",
          "4478:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4480:         { &hf_ieee1905_tlv_data,",
          "4481:           { \"TLV data\", \"ieee1905.tlv_data\",",
          "4482:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4484:         { &hf_ieee1905_al_mac_address_type,",
          "4485:           { \"1905 AL MAC address type\", \"ieee1905.1905_al_mac_addr\",",
          "4486:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4488:         { &hf_ieee1905_mac_address_type,",
          "4489:           { \"MAC address type\", \"ieee1905.mac_addr\",",
          "4490:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4492:         { &hf_ieee1905_link_metric_query_type,",
          "4493:           { \"Link metric query type\", \"ieee1905.link_metric_query_type\",",
          "4494:             FT_UINT8, BASE_DEC, VALS(ieee1905_link_metric_query_type_vals),",
          "4495:             0, NULL, HFILL }},",
          "4497:         { &hf_ieee1905_link_metrics_requested,",
          "4498:           { \"Link metrics requested\", \"ieee1905.link_metrics_requested\",",
          "4499:             FT_UINT8, BASE_DEC, VALS(ieee1905_link_metrics_requested_vals),",
          "4500:             0, NULL, HFILL }},",
          "4502:         { &hf_ieee1905_responder_al_mac_addr,",
          "4503:           { \"Responder MAC address\", \"ieee1905.responder_mac_addr\",",
          "4504:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4506:         { &hf_ieee1905_neighbor_al_mac_addr,",
          "4507:           { \"Neighbor MAC address\", \"ieee1905.responder_mac_addr\",",
          "4508:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4510:         { &hf_ieee1905_receiving_al_mac_addr,",
          "4511:           { \"Receiving AL MAC address\", \"ieee1905.receiving_al_mac_addr\",",
          "4512:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4514:         { &hf_ieee1905_bridge_flag,",
          "4515:           { \"IEEE 802.1 bridge flag\", \"ieee1905.bridgeFlag\",",
          "4516:             FT_UINT8, BASE_DEC, VALS(ieee1905_bridge_flag_vals), 0, NULL, HFILL }},",
          "4518:         { &hf_ieee1905_packet_errors,",
          "4519:           { \"Packet errors\", \"ieee1905.packetErrors\",",
          "4520:             FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4522:         { &hf_ieee1905_transmitted_packets,",
          "4523:           { \"Transmitted packets\", \"ieee1905.transmittedPackets\",",
          "4524:             FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4526:         { &hf_ieee1905_mac_throughput_capacity,",
          "4527:           { \"MAC througput capacity\", \"ieee1905.macThroughputCapacity\",",
          "4528:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4530:         { &hf_ieee1905_link_availability,",
          "4531:           { \"Link availability\", \"ieee1905.linkAvailability\",",
          "4532:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4534:         { &hf_ieee1905_phy_rate,",
          "4535:           { \"Phy rate\", \"ieee1905.phyRate\",",
          "4536:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4538:         { &hf_ieee1905_packets_received,",
          "4539:           { \"Packets received\", \"ieee1905.packets_received\",",
          "4540:             FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4542:         { &hf_ieee1905_rssi,",
          "4543:           { \"RSSI\", \"ieee1905.rssi\",",
          "4544:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4546:         { &hf_ieee1905_local_interface_count,",
          "4547:           { \"Local interface count\", \"ieee1905.dev_info.local_int_cnt\",",
          "4548:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4550:         { &hf_ieee1905_media_type,",
          "4551:           { \"Media type\", \"ieee1905.dev_info.media_type\",",
          "4552:             FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4554:         { &hf_ieee1905_media_type_high,",
          "4555:           { \"Media type bits 15 to 8\", \"ieee1905.media_type.bits_15_to_8\",",
          "4556:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4558:         { &hf_ieee1905_media_type_low,",
          "4559:           { \"Media type bits 7 to 0\", \"ieee1905.media_type.bits_7_to_0\",",
          "4560:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4562:         { &hf_ieee1905_media_spec_info_len,",
          "4563:           { \"Special info length\", \"ieee1905.dev_info.spec_info_len\",",
          "4564:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4566:         { &hf_ieee1905_media_spec_info,",
          "4567:           { \"Special info\", \"ieee1905.dev_info.spec_info\",",
          "4568:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4570:         { &hf_ieee1905_bridging_tuples_cnt,",
          "4571:           { \"Bridging tuples count\", \"ieee1905.bridging_info.tuples_count\",",
          "4572:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4574:         { &hf_ieee1905_bridging_mac_address_cnt,",
          "4575:           { \"Bridging MAC address count\", \"ieee1905.bridging_info.mac_addr_count\",",
          "4576:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4578:         { &hf_ieee1905_bridging_mac_address,",
          "4579:           { \"Bridging MAC address\", \"ieee1905.bridging_info.mac_address\",",
          "4580:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4582:         { &hf_ieee1905_local_interface_mac,",
          "4583:           { \"Local interface MAC address\", \"ieee1905.local_intf.mac_address\",",
          "4584:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4586:         { &hf_ieee1905_non_1905_neighbor_mac,",
          "4587:           { \"Non 1905 neighbor MAC address\", \"ieee1905.non_1905_neighbor.mac_address\",",
          "4588:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4590:         { &hf_ieee1905_neighbor_flags,",
          "4591:           { \"IEEE1905 neighbor flags\", \"ieee1905.neighbor_flags\",",
          "4592:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4594:         { &hf_ieee1905_bridges_flag,",
          "4595:           { \"IEEE1905 bridges\", \"ieee1905.bridges\",",
          "4596:             FT_BOOLEAN, 8, TFS(&tfs_bridges_flag), 0x80, NULL, HFILL }},",
          "4598:         { &hf_ieee1905_link_metric_result_code,",
          "4599:           { \"IEEE1905 link metric result code\", \"ieee1905.link_metric.result_code\",",
          "4600:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4602:         { &hf_ieee1905_vendor_specific_oui,",
          "4603:           { \"Vendor specific OUI\", \"ieee1905.vendor_specific.oui\",",
          "4604:             FT_UINT24, BASE_OUI, NULL, 0, NULL, HFILL }},",
          "4606:         { &hf_ieee1905_vendor_specific_info,",
          "4607:           { \"Vendor specific information\", \"ieee1905.vendor_specific.info\",",
          "4608:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4610:         { &hf_ieee1905_searched_role,",
          "4611:           { \"Searched role\", \"ieee1905.searched_role\",",
          "4612:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4614:         { &hf_ieee1905_supported_role,",
          "4615:           { \"Supported role\", \"ieee1905.supported_role\",",
          "4616:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4618:         { &hf_ieee1905_auto_config_freq_band,",
          "4619:           { \"Auto config frequency band\", \"ieee1905.auto_config.freq_band\",",
          "4620:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4622:         { &hf_ieee1905_supported_freq_band,",
          "4623:           { \"Supported frequency band\", \"ieee1905.supported.freq_band\",",
          "4624:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4626:         { &hf_ieee1905_wsc_frame,",
          "4627:           { \"WSC frame\", \"ieee1905.wsc_frame\",",
          "4628:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4630:         { &hf_ieee1905_event_notification_media_types,",
          "4631:           { \"Media types\", \"ieee1905.event_notif.media_types\",",
          "4632:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4634:         { &hf_ieee1905_sender_al_id,",
          "4635:           { \"Sender AL ID\", \"ieee1905.sender.al_id\",",
          "4636:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4638:         { &hf_ieee1905_push_button_event_msg_id,",
          "4639:           { \"Push button event message ID\", \"ieee1905.sender.msg_id\",",
          "4640:             FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4642:         { &hf_ieee1905_sender_joining_interface,",
          "4643:           { \"Joining MAC address of sender\", \"ieee1905.sender.joining_intf\",",
          "4644:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4646:         { &hf_ieee1905_new_device_interface,",
          "4647:           { \"New device MAC address\", \"ieee1905.new_device.intf\",",
          "4648:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4650:         { &hf_ieee1905_device_al_mac,",
          "4651:           { \"1905 device AL MAC address\", \"ieee1905.device_al_mac_addr\",",
          "4652:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4654:         { &hf_ieee1905_local_intf_oui,",
          "4655:           { \"Local interface OUI\", \"ieee1905.local_intf.oui\",",
          "4656:             FT_UINT24, BASE_OUI, NULL, 0, NULL, HFILL }},",
          "4658:         { &hf_ieee1905_local_intf_variant,",
          "4659:           { \"Local interface variant index\", \"ieee1905.local_intf.variant\",",
          "4660:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4662:         { &hf_ieee1905_local_intf_variant_name,",
          "4663:           { \"Local interface variant name\", \"ieee1905.local_intf.variant_name\",",
          "4664:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4666:         { &hf_ieee1905_local_intf_url_count,",
          "4667:           { \"Local interface URL octet count\", \"ieee1905.local_intf.url_byte_count\",",
          "4668:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4670:         { &hf_ieee1905_local_intf_spec_count,",
          "4671:           { \"Local interface media specific count\", \"ieee1905.local_intf.media_count\",",
          "4672:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4674:         { &hf_ieee1905_local_intf_url,",
          "4675:           { \"Local interface XML description URL\", \"ieee1905.local_intf.url\",",
          "4676:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4678:         { &hf_ieee1905_local_intf_spec,",
          "4679:           { \"Local interface media specific info\", \"ieee1905.local_intf.spec_info\",",
          "4680:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4682:         { &hf_ieee1905_dev_id_friendly_name,",
          "4683:           { \"Device Id Friendly name\", \"ieee1905.device_id.friendly_name\",",
          "4684:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4686:         { &hf_ieee1905_dev_id_manuf_name,",
          "4687:           { \"Device Id Manufacturer name\", \"ieee1905.device_id.manuf_name\",",
          "4688:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4690:         { &hf_ieee1905_dev_id_manuf_model,",
          "4691:           { \"Device Id Manufacturer model\", \"ieee1905.device_id.manuf_model\",",
          "4692:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4694:         { &hf_ieee1905_control_url,",
          "4695:           { \"Device control URL\", \"ieee1905.device.control_url\",",
          "4696:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4698:         { &hf_ieee1905_ipv4_type_count,",
          "4699:           { \"Count of IPv4 entries\", \"ieee1905.ipv4_type.count\",",
          "4700:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4702:         { &hf_ieee1905_mac_address,",
          "4703:           { \"MAC address\", \"ieee1905.ipv4_type.mac_address\",",
          "4704:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4706:         { &hf_ieee1905_ipv4_addr_count,",
          "4707:           { \"IPv4 address count\", \"ieee1905.ipv4_type.addr_count\",",
          "4708:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4710:         { &hf_ieee1905_addr_type,",
          "4711:           { \"IPv4 address type\", \"ieee1905.ipv4_type.addr_type\",",
          "4712:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4714:         { &hf_ieee1905_ipv4_addr,",
          "4715:           { \"IPv4 address\", \"ieee1905.ipv4_type.ipv4_addr\",",
          "4716:             FT_IPv4, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4718:         { &hf_ieee1905_dhcp_server,",
          "4719:           { \"DHCP server\", \"ieee1905.ipv4_type.dhcp_server\",",
          "4720:             FT_IPv4, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4722:         { &hf_ieee1905_ipv6_type_count,",
          "4723:           { \"Count of IPv6 entries\", \"ieee1905.ipv6_type.count\",",
          "4724:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4726:         { &hf_ieee1905_ipv6_addr_count,",
          "4727:           { \"IPv4 address count\", \"ieee1905.ipv6_type.addr_count\",",
          "4728:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4730:         { &hf_ieee1905_ipv6_addr_type,",
          "4731:           { \"IPv6 address type\", \"ieee1905.ipv6_type.addr_type\",",
          "4732:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4734:         { &hf_ieee1905_ipv6_addr,",
          "4735:           { \"IPv6 address\", \"ieee1905.ipv6_type.ipv6_addr\",",
          "4736:             FT_IPv6, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4738:         { &hf_ieee1905_ipv6_dhcp_server,",
          "4739:           { \"DHCP server\", \"ieee1905.ipv6_type.dhcp_server\",",
          "4740:             FT_IPv6, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4742:         { &hf_ieee1905_generic_phy_media_types,",
          "4743:           { \"Generic Phy media type count\", \"ieee1905.button_push.phy_count\",",
          "4744:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4746:         { &hf_ieee1905_profile_version,",
          "4747:           { \"1905 profile version type\", \"ieee1905.profile.version\",",
          "4748:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4750:         { &hf_ieee1905_power_off_intf_count,",
          "4751:           { \"Powered off interface count\", \"ieee1905.power_off.intf_count\",",
          "4752:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4754:         { &hf_ieee1905_power_change_intf_count,",
          "4755:           { \"Power change local interface count\", \"ieee1905.power_chg.intf_count\",",
          "4756:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4758:         { &hf_ieee1905_power_change_mac_addr,",
          "4759:           { \"Power change interface MAc addr\", \"ieee1905.power_chg.mac_addr\",",
          "4760:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4762:         { &hf_ieee1905_power_change_state,",
          "4763:           { \"Power change requested state\", \"ieee1905.power_chg.state\",",
          "4764:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4766:         { &hf_ieee1905_power_status_intf_count,",
          "4767:           { \"Power status local interface count\", \"ieee1905.power_sts.intf_count\",",
          "4768:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4770:         { &hf_ieee1905_power_status_mac_addr,",
          "4771:           { \"Power status interface MAc addr\", \"ieee1905.power_sts.mac_addr\",",
          "4772:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4774:         { &hf_ieee1905_power_status_state,",
          "4775:           { \"Power change status\", \"ieee1905.power_sts.state\",",
          "4776:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4778:         { &hf_ieee1905_l2_neighbor_intf_count,",
          "4779:           { \"L2 neighbor interfae count\", \"ieee1905.l2_neighbor.intf_count\",",
          "4780:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4782:         { &hf_ieee1905_l2_local_intf_mac_addr,",
          "4783:           { \"L2 neighbor local interface MAC addr\", \"ieee1905.l2_neighbor.mac_addr\",",
          "4784:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4786:         { &hf_ieee1905_l2_neighbor_dev_count,",
          "4787:           { \"L2 neighbor device count\", \"ieee1905.l2_neighbor.dev_count\",",
          "4788:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4790:         { &hf_ieee1905_l2_neighbor_mac_addr,",
          "4791:           { \"L2 neighbor interface MAC address\", \"ieee1905.l2_neighbor.neighbor_mac_addr\",",
          "4792:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4794:         { &hf_ieee1905_l2_behind_mac_addr_count,",
          "4795:           { \"L2 neighbor behind MAC addr count\", \"ieee1905.l2_neighbor.neighbor_behind_count\",",
          "4796:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4798:         { &hf_ieee1905_l2_behind_mac_addr,",
          "4799:           { \"L2 neighbor behind MAC addr\", \"ieee1905.l2_neighbor.neighbor_behind_mac_addr\",",
          "4800:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4802:         { &hf_ieee1905_supported_service_count,",
          "4803:           { \"Supported service count\", \"ieee1905.supported_service.service_count\",",
          "4804:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4806:         { &hf_ieee1905_supported_service,",
          "4807:           { \"Supported service\", \"ieee1905.supported_service.service\",",
          "4808:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4810:         { &hf_ieee1905_searched_service_count,",
          "4811:           { \"Searched service count\", \"ieee1905.searched_service.service_count\",",
          "4812:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4814:         { &hf_ieee1905_searched_service,",
          "4815:           { \"Searched service\", \"ieee1905.searched_service.service\",",
          "4816:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4818:         { &hf_ieee1905_ap_radio_identifier,",
          "4819:           { \"AP radio identifier\", \"ieee1905.ap_radio_identifier\",",
          "4820:            FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4822:         { &hf_ieee1905_operatonal_bss_radio_count,",
          "4823:           { \"AP operational BSS radio count\", \"ieee1905.ap_bss_radio_count\",",
          "4824:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4826:         { &hf_ieee1905_ap_operational_intf_count,",
          "4827:           { \"AP operational interface count\", \"ieee1905.ap_bss_intf_count\",",
          "4828:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4830:         { &hf_ieee1905_ap_local_intf_mac_addr,",
          "4831:           { \"AP operational local interface MAC addr\", \"ieee1905.ap_bss_local_intf_addr\",",
          "4832:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4834:         { &hf_ieee1905_ap_local_intf_ssid_len,",
          "4835:           { \"AP operational BSS local interface SSID len\", \"ieee1905.ap_bss_local_intf_ssid_len\",",
          "4836:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4838:         { &hf_ieee1905_ap_local_intf_ssid,",
          "4839:           { \"AP operational BSS local interfase SSID\", \"ieee1905.ap_bss_local_intf_ssid\",",
          "4840:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4842:         { &hf_ieee1905_ap_capabilities_flags,",
          "4843:           { \"AP capabilities flags\", \"ieee1905.ap_capability_flags\",",
          "4844:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4846:         { &hf_ieee1905_unassoc_sta_metrics_oper_flag,",
          "4847:           { \"STA link metric reporting operational channels\", \"ieee1905.link_metric_oper\",",
          "4848:             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80, NULL, HFILL }},",
          "4850:         { &hf_ieee1905_unassoc_sta_metrics_non_oper_flag,",
          "4851:           { \"STA link metric reporting non-operational channels\", \"ieee1905.link_metric_non_oper\",",
          "4852:             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40, NULL, HFILL }},",
          "4854:         { &hf_ieee1905_agent_init_steering,",
          "4855:           { \"Agent-initiated RSSI-based Steering\", \"ieee1905.agent_init_steering\",",
          "4856:             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20, NULL, HFILL }},",
          "4858:         { &hf_ieee1905_higher_layer_protocol,",
          "4859:           { \"Higher layer protocol\", \"ieee1905.higher_layer_proto\",",
          "4860:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4862:         { &hf_ieee1905_higher_layer_data,",
          "4863:           { \"Higher layer data\", \"ieee1905.higher_layer_data\",",
          "4864:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4866:         { &hf_ieee1905_assoc_backhaul_station_mac,",
          "4867:           { \"Associated backhaul station MAC address\", \"ieee1905.assoc.mac_addr\",",
          "4868:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4870:         { &hf_ieee1905_backhaul_target_bssid,",
          "4871:           { \"Target BSS BSSID\", \"ieee1905.assoc.target_bssid\",",
          "4872:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4874:         { &hf_ieee1905_backhaul_steering_status,",
          "4875:           { \"Status code\", \"ieee1905.assoc.status\",",
          "4876:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4878:         { &hf_ieee1905_backhaul_operating_class,",
          "4879:           { \"Backhaul operating class\", \"ieee1905.assoc.operating_class\",",
          "4880:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4882:         { &hf_ieee1905_backhaul_channel_number,",
          "4883:           { \"Backhaul beacon channel number\", \"ieee1905.assoc.channel_num\",",
          "4884:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4886:         { &hf_ieee1905_client_assoc_bssid,",
          "4887:           { \"Target BSSID\", \"ieee1905.assoc_ctrl.bssid\",",
          "4888:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4890:         { &hf_ieee1905_association_control,",
          "4891:           { \"Association control\", \"ieee1905.assoc_ctrl.control\",",
          "4892:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4894:         { &hf_ieee1905_association_control_validity,",
          "4895:           { \"Request validity period\", \"ieee1905.assoc_ctrl.validity\",",
          "4896:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4898:         { &hf_ieee1905_client_assoc_sta_count,",
          "4899:           { \"STA control list count\", \"ieee1905.assoc_ctrl.sta_list_count\",",
          "4900:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4902:         { &hf_ieee1905_client_assoc_mac_addr,",
          "4903:           { \"Target STA MAC address\", \"ieee1905.assoc_ctrl.target_mac_addr\",",
          "4904:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4906:         { &hf_ieee1905_btm_reporter_bssid,",
          "4907:           { \"BTM report source BSSID\", \"ieee1905.btm_report.source_bssid\",",
          "4908:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4910:         { &hf_ieee1905_btm_sta_mac_addr,",
          "4911:           { \"BTM report target MAC address\", \"ieee1905.btm_report.mac_addr\",",
          "4912:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4914:         { &hf_ieee1905_btm_report_status,",
          "4915:           { \"BTM status code\", \"ieee1905.btm_report.status\",",
          "4916:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4918:         { &hf_iee1905_btm_report_bssid,",
          "4919:           { \"BTM target BSSID\", \"ieee1905.btm_report.target_bssid\",",
          "4920:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4922:         { &hf_ieee1905_source_bss_bssid,",
          "4923:           { \"Source BSS BSSID\", \"ieee1905.steering_req.source_bssid\",",
          "4924:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4926:         { &hf_ieee1905_steering_request_flags,",
          "4927:           { \"Steering request flags\", \"ieee1905.steering_req.flags\",",
          "4928:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4930:         { &hf_ieee1905_steering_req_op_window,",
          "4931:           { \"Steering opportunity window\", \"ieee1905.steering_req.window\",",
          "4932:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4934:         { &hf_ieee1905_steering_request_mode_flag,",
          "4935:           { \"Mode\", \"ieee1905.steering_req.mode\",",
          "4936:             FT_BOOLEAN, 8, TFS(&tfs_ieee1905_steering_request_mode_flag), 0x80, NULL, HFILL }},",
          "4938:         { &hf_ieee1905_btm_disassoc_imminent_flag,",
          "4939:           { \"BTM disassociation imminent\", \"ieee1905.steering_req.disassoc_imminent\",",
          "4940:             FT_BOOLEAN, 8, TFS(&tfs_ieee1905_btm_disassoc_imminent_flag), 0x40, NULL, HFILL }},",
          "4942:         { &hf_ieee1905_btm_abridged_flag,",
          "4943:           { \"BTM abridged\", \"ieee1905.steering_req.btm_abridged\",",
          "4944:             FT_BOOLEAN, 8, TFS(&tfs_ieee1905_btm_abridged_flag), 0x20, NULL, HFILL }},",
          "4946:         { &hf_ieee1905_steering_btm_disass_timer,",
          "4947:           { \"BTM disassociation timer\", \"ieee1905.steering_req.disass_timer\",",
          "4948:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4950:         { &hf_ieee1905_steering_req_sta_count,",
          "4951:           { \"STA list count\", \"ieee1905.steering_req.sta_count\",",
          "4952:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4954:         { &hf_ieee1905_steering_req_target_bssid_count,",
          "4955:           { \"Target BSSID list count\", \"ieee1905.steering_req.bssid_count\",",
          "4956:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4958:         { &hf_ieee1905_steering_req_sta_mac,",
          "4959:           { \"Target MAC address\", \"ieee1905.steering_req.target_mac\",",
          "4960:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4962:         { &hf_ieee1905_steering_req_target_bssid,",
          "4963:           { \"Target BSSID\", \"ieee1905.steering_req.target_bssid\",",
          "4964:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4966:         { &hf_ieee1905_steering_req_oper_class,",
          "4967:           { \"Target BSS operating class\", \"ieee1905.steering_req.oper_class\",",
          "4968:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4970:         { &hf_ieee1905_steering_req_target_channel,",
          "4971:           { \"Target BSS channel number\", \"ieee1905.steering_req.target_channel\",",
          "4972:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "4974:         { &hf_ieee1905_client_bssid,",
          "4975:           { \"Client BSSID\", \"ieee1905.client_info.bssid\",",
          "4976:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4978:         { &hf_ieee1905_client_mac_addr,",
          "4979:           { \"Client MAC address\", \"ieee1905.client_info.mac_addr\",",
          "4980:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4982:         { &hf_ieee1905_client_capability_result,",
          "4983:           { \"Result code\", \"ieee1905.client_capability.result\",",
          "4984:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "4986:         { &hf_ieee1905_client_capability_frame,",
          "4987:           { \"(Re)Association frame body\", \"ieee1905.client_capability.frame\",",
          "4988:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4990:         { &hf_ieee1905_association_flag,",
          "4991:           { \"Association event\", \"ieee1905.assoc_event.assoc_event\",",
          "4992:             FT_BOOLEAN, 8, TFS(&tfs_ieee1905_association_event_flag), 0x20, NULL, HFILL }},",
          "4994:         { &hf_ieee1905_association_client_mac_addr,",
          "4995:           { \"Client mac address\", \"ieee1905.assoc_event.client_mac\",",
          "4996:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "4998:         { &hf_ieee1905_association_agent_bssid,",
          "4999:           { \"Multi-AP agent BSSID\", \"ieee1905.assoc_event.agent_bssid\",",
          "5000:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5002:         { &hf_ieee1905_association_event_flags,",
          "5003:           { \"Association event flags\", \"ieee1905.assoc_event.flags\",",
          "5004:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5006:         { &hf_ieee1905_ap_radio_max_bss,",
          "5007:           { \"Maximum BSS support\", \"ieee1905.radio_basic_cap.max_bss\",",
          "5008:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5010:         { &hf_ieee1905_ap_radio_classes,",
          "5011:           { \"Operating class count\", \"ieee1905.radio_basic.op_classes\",",
          "5012:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5014:         { &hf_ieee1905_ap_radio_class,",
          "5015:           { \"Operating class\", \"ieee1905.radio_basic.op_class\",",
          "5016:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5018:         { &hf_ieee1905_ap_radio_eirp,",
          "5019:           { \"Maximum transmit power EIRP\", \"ieee1905.radio_basic.max_power\",",
          "5020:             FT_INT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5022:         { &hf_ieee1905_ap_radio_non_op_count,",
          "5023:           { \"Number of non-operable channels\", \"ieee1905.radio_basic.non_op_channels\",",
          "5024:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5026:         { &hf_ieee1905_radio_basic_non_op_channel,",
          "5027:           { \"Statically non-operable channel\", \"ieee1905.radio_basic.non_op_channel\",",
          "5028:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5030:         { &hf_ieee1905_max_supported_tx_streams,",
          "5031:           { \"Maximum supported Tx spatial streams\", \"ieee1905.ap_ht.max_tx_streams\",",
          "5032:             FT_UINT8, BASE_HEX, VALS(max_supported_tx_streams_vals), 0xC0, NULL, HFILL}},",
          "5034:         { &hf_ieee1905_max_supported_rx_streams,",
          "5035:           { \"Maximum supported Rx spatial streams\", \"ieee1905.ap_ht.max_rx_streams\",",
          "5036:             FT_UINT8, BASE_HEX, VALS(max_supported_rx_streams_vals), 0x30, NULL, HFILL}},",
          "5038:         { &hf_ieee1905_short_gi_20mhz_flag,",
          "5039:           { \"Short GI support for 20 MHz\", \"ieee1905.ap_ht.short_gi_20mhz\",",
          "5040:             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08, NULL, HFILL}},",
          "5042:         { &hf_ieee1905_short_gi_40mhz_flag,",
          "5043:           { \"Short GI support for 40 MHz\", \"ieee1905.ap_ht.short_gi_40mhz\",",
          "5044:             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04, NULL, HFILL}},",
          "5046:         { &hf_ieee1905_ht_support_40mhz_flag,",
          "5047:           { \"HT support for 40MHz\", \"ieee1905.ap_ht.ht_support_40mhz\",",
          "5048:             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02, NULL, HFILL}},",
          "5050:         { &hf_ieee1905_ap_ht_capabilities_radio_id,",
          "5051:           { \"Radio unique ID\", \"ieee1905.ap_ht.radio_id\",",
          "5052:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5054:         { &hf_ieee1905_ht_cap_flags,",
          "5055:           { \"Capabilities\", \"ieee1905.ap_ht.caps\",",
          "5056:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5058:         { &hf_ieee1905_vht_max_supported_tx_streams,",
          "5059:           { \"Maximum supported Tx spatial streams\", \"ieee1905.ap_vht.max_tx_streams\",",
          "5060:             FT_UINT16, BASE_HEX, VALS(vht_he_max_supported_tx_streams_vals), 0xE000, NULL, HFILL}},",
          "5062:         { &hf_ieee1905_vht_max_supported_rx_streams,",
          "5063:           { \"Maximum supported Rx spatial streams\", \"ieee1905.ap_vht.max_rx_streams\",",
          "5064:             FT_UINT16, BASE_HEX, VALS(vht_he_max_supported_rx_streams_vals), 0x1C00, NULL, HFILL}},",
          "5066:         { &hf_ieee1905_short_gi_80mhz_flag,",
          "5067:           { \"Short GI support for 80 MHz\", \"ieee1905.ap_vht.short_gi_80mhz\",",
          "5068:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0200, NULL, HFILL}},",
          "5070:         { &hf_ieee1905_short_gi_160mhz_flag,",
          "5071:           { \"Short GI support for 160 and 80+80 MHz\", \"ieee1905.ap_ht.short_gi_160mhz\",",
          "5072:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x0100, NULL, HFILL}},",
          "5074:         { &hf_ieee1905_vht_support_80plus_mhz_flag,",
          "5075:           { \"VHT support for 80+80 MHz\", \"ieee1905.ap_ht.vht_80plus_mhz\",",
          "5076:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x80, NULL, HFILL}},",
          "5078:         { &hf_ieee1905_vht_support_160_mhz_flag,",
          "5079:           { \"VHT support for 160 MHz\", \"ieee1905.ap_ht.vht_160mhz\",",
          "5080:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x40, NULL, HFILL}},",
          "5082:         { &hf_ieee1905_su_beamformer_capable_flag,",
          "5083:           { \"SU beamformer capable\", \"ieee1905.ap_ht.su_beamformer\",",
          "5084:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x20, NULL, HFILL}},",
          "5086:         { &hf_ieee1905_mu_beamformer_capable_flag,",
          "5087:           { \"MU beamformer capable\", \"ieee1905.ap_ht.mu_beamformer\",",
          "5088:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5090:         { &hf_ieee1905_ap_vht_capabilities_radio_id,",
          "5091:           { \"Radio unique ID\", \"ieee1905.ap_vht.radio_id\",",
          "5092:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5094:         { &hf_ieee1905_vht_cap_flags,",
          "5095:           { \"Capabilities\", \"ieee1905.ap_vht.caps\",",
          "5096:             FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5098:         { &hf_ieee1905_ap_vht_supported_vht_tx_mcs,",
          "5099:           { \"Supported VHY Tx MCS\", \"ieee1905.vht.supported_tx_mcs\",",
          "5100:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5102:         { &hf_ieee1905_ap_vht_supported_vht_rx_mcs,",
          "5103:           { \"Supported VHY Rx MCS\", \"ieee1905.vht.supported_rx_mcs\",",
          "5104:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5106:         { &hf_ieee1905_assoc_clients_bss_count,",
          "5107:           { \"Included BSS count\", \"ieee1905.assoc_client.bss_count\",",
          "5108:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5110:         { &hf_ieee1905_assoc_bssid,",
          "5111:           { \"Associated BSS\", \"ieee1905.assoc_client.bss\",",
          "5112:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5114:         { &hf_ieee1905_bss_client_count,",
          "5115:           { \"Associated client count\", \"ieee1905.assoc_client.client_count\",",
          "5116:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5118:         { &hf_ieee1905_bss_client_mac,",
          "5119:           { \"Associated client MAC address\", \"ieee1905.assoc_client.mac_addr\",",
          "5120:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5122:         { &hf_ieee1905_bss_client_last_assoc,",
          "5123:           { \"Time since last association\", \"ieee1905.assoc_client.time_since\",",
          "5124:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5126:         { &hf_ieee1905_channel_pref_preference,",
          "5127:           { \"Preference\", \"ieee1905.channel_pref.pref\",",
          "5128:             FT_UINT8, BASE_HEX, VALS(channel_preference_prefs_vals), 0xF0, NULL, HFILL}},",
          "5129:         { &hf_ieee1905_channel_pref_reason,",
          "5130:           { \"Reason code\", \"ieee1905.channel_pref.reason\",",
          "5131:             FT_UINT8, BASE_HEX, VALS(channel_preference_reason_vals), 0xF0, NULL, HFILL}},",
          "5133:         { &hf_ieee1905_channel_preference_radio_id,",
          "5134:           { \"Radio unique ID\", \"ieee1905.channel_pref.radio_id\",",
          "5135:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5137:         { &hf_ieee1905_channel_preference_class_count,",
          "5138:           { \"Operating class count\", \"ieee1905.channel_prefs.class_count\",",
          "5139:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5141:         { &hf_ieee1905_channel_pref_class,",
          "5142:           { \"Operating class\", \"ieee1905.channel_prefs.class\",",
          "5143:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5145:         { &hf_ieee1905_channel_pref_channel_count,",
          "5146:           { \"Channel list count\", \"ieee1905.channel_prefs.channel_count\",",
          "5147:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5149:         { &hf_ieee1905_channel_pref_channel,",
          "5150:           { \"Channel number\", \"ieee1905.channel_prefs.channel_no\",",
          "5151:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5153:         { &hf_ieee1905_channel_prefs_flags,",
          "5154:           { \"Channel preference flags\", \"ieee1905.channel_prefs.flags\",",
          "5155:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5157:         { &hf_ieee1905_trans_power_limit_radio_id,",
          "5158:           { \"Radio unique ID\", \"ieee1905.transmit_power.radio_id\",",
          "5159:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5161:         { &hf_ieee1905_trans_power_limit_eirp,",
          "5162:           { \"Transmit power limit EIRP per 20MHz\", \"ieee1905.transmit_power.eirp\",",
          "5163:             FT_INT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5165:         { &hf_ieee1905_channel_select_resp_radio_id,",
          "5166:           { \"Radio unique ID\", \"ieee1905.channel_select.radio_id\",",
          "5167:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5169:         { &hf_ieee1905_channel_select_resp_code,",
          "5170:           { \"Response coce\", \"ieee1905.channel_select.response_code\",",
          "5171:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5173:         { &hf_ieee1905_op_channel_report_radio_id,",
          "5174:           { \"Radio unique ID\", \"ieee1905.operating_channel.radio_id\",",
          "5175:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5177:         { &hf_ieee1905_op_channel_report_classes,",
          "5178:           { \"Currently operating classes\", \"ieee1905.operating_channel.classes\",",
          "5179:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5181:         { &hf_ieee1905_op_channel_class,",
          "5182:           { \"Operating class\", \"ieee1905.operating_channel.op_class\",",
          "5183:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5185:         { &hf_ieee1905_op_channel_number,",
          "5186:           { \"Operating channel number\", \"ieee1905.operating_channel.chan_num\",",
          "5187:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5189:         { &hf_ieee1905_op_channel_eirp,",
          "5190:           { \"Current transmit power EIRP\", \"ieee1905.operating_channel.eirp\",",
          "5191:             FT_INT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5193:         { &hf_ieee1905_ap_he_cap_radio_id,",
          "5194:           { \"Radio unique ID\", \"ieee1905.ap_he_capability.radio_id\",",
          "5195:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5197:         { &hf_ieee1905_ap_he_cap_mcs_count,",
          "5198:           { \"Supported HE MCS count\", \"ieee1905.ap_he_capability.he_mcs_count\",",
          "5199:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5201:         { &hf_ieee1905_unassoc_link_metrics_query_mac,",
          "5202:           { \"STA MAC address\", \"ieee1905.unassoc_sta_link_metrics.mac_addr\",",
          "5203:             FT_ETHER, FT_NONE, NULL, 0, NULL, HFILL }},",
          "5205:         { &hf_ieee1905_sta_metrics_reporting_interval,",
          "5206:           { \"STA metrics reporting interval\", \"ieee1905.sta_metric_policy.sta_interval\",",
          "5207:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5209:         { &hf_ieee1905_ap_metrics_reporting_interval,",
          "5210:           { \"AP metrics reporting interval\", \"ieee1905.sta_metric_policy.ap_interval\",",
          "5211:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5213:         { &hf_ieee1905_metric_reporting_policy_radio_id,",
          "5214:           { \"Radio ID\", \"ieee1905.metric_reporing_policy.radio_id\",",
          "5215:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5217:         { &hf_ieee1905_metric_reporting_radio_count,",
          "5218:           { \"Radio count\", \"ieee1905.sta_metric_policy.radio_count\",",
          "5219:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5221:         { &hf_ieee1905_metrics_rssi_threshold,",
          "5222:           { \"RSSI reporting threshold\", \"ieee1905.sta_metric_policy.rssi_threshold\",",
          "5223:             FT_INT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5225:         { &hf_ieee1905_metrics_channel_util_threshold,",
          "5226:           { \"Utilization threshold\", \"ieee1905.sta_metric_policy.utilization_threshold\",",
          "5227:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5229:         { &hf_ieee1905_ap_metric_query_bssid,",
          "5230:           { \"Query BSSID\", \"ieee1905.ap_metrics_query.bssid\",",
          "5231:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5233:         { &hf_ieee1905_sta_mac_address_type,",
          "5234:           { \"MAC address\", \"ieee1905.sta_mac_addr_type.mac_addr\",",
          "5235:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5237:         { &hf_ieee1905_assoc_sta_mac_addr,",
          "5238:           { \"MAC address\", \"ieee1905.assoc_sta_link_metrics.mac_addr\",",
          "5239:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5241:         { &hf_ieee1905_assoc_sta_link_metric_bss_count,",
          "5242:           {\"BSS count\", \"ieee1905.assoc_sta_link_metrics.bss_count\",",
          "5243:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5245:         { &hf_ieee1905_assoc_sta_link_metrics_bssid,",
          "5246:           { \"STA BSSID\", \"ieee1905.assoc_sta_link_metrics.bssid\",",
          "5247:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5249:         { &hf_ieee1905_assoc_sta_link_metrics_time_delta,",
          "5250:           { \"Measuremet time delta\", \"ieee1905.assoc_sta_link_metrics.time_delta\",",
          "5251:             FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5253:         { &hf_ieee1905_assoc_sta_link_metrics_dwn_rate,",
          "5254:           { \"Downlink data rate\", \"ieee1905.assoc_sta_link_metrics.down_rate\",",
          "5255:             FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5257:         { &hf_ieee1905_assoc_sta_link_metrics_up_rate,",
          "5258:           { \"Uplink data rate\", \"ieee1905.assoc_sta_link_metrics.up_rate\",",
          "5259:             FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5261:         { &hf_ieee1905_assoc_sta_link_metrics_rssi,",
          "5262:           { \"Uplink RSSI\", \"ieee1905.assoc_sta_link_metrics.rssi\",",
          "5263:             FT_INT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5265:         { &hf_ieee1905_unassoc_sta_link_metrics_class,",
          "5266:           { \"Operating class\", \"ieee1905.unassoc_sta_link_metrics.operaring_class\",",
          "5267:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5269:         { &hf_ieee1905_unassoc_sta_link_channel_count,",
          "5270:           { \"Channel count\", \"ieee1905.unassoc_sta_link_metrics.channel_count\",",
          "5271:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5273:         { &hf_ieee1905_unassoc_metrics_channel,",
          "5274:           { \"Channel number\", \"ieee1905.unassoc_sta_link_metrics.channel\",",
          "5275:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5277:         { &hf_ieee1905_he_max_supported_tx_streams,",
          "5278:           { \"Maximum supported Tx spatial streams\", \"ieee1905.he_cap.max_tx_streams\",",
          "5279:             FT_UINT16, BASE_HEX, VALS(vht_he_max_supported_tx_streams_vals), 0xE000, NULL, HFILL}},",
          "5281:         { &hf_ieee1905_he_max_supported_rx_streams,",
          "5282:           { \"Maximum supported Rx spatial streams\", \"ieee1905.he_cap.max_rx_streams\",",
          "5283:             FT_UINT16, BASE_HEX, VALS(vht_he_max_supported_rx_streams_vals), 0x1C00, NULL, HFILL}},",
          "5285:         { &hf_ieee1905_he_support_80plus_mhz_flag,",
          "5286:           { \"HE support for 80+80 MHz\", \"ieee1905.ap_he.he_80plus_mhz\",",
          "5287:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x20, NULL, HFILL}},",
          "5289:         { &hf_ieee1905_he_support_160mhz_flag,",
          "5290:           { \"HE support for 160 MHz\", \"ieee1905.ap_he.he_160_mhz\",",
          "5291:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5293:         { &hf_ieee1905_he_su_beamformer_capable_flag,",
          "5294:           { \"SU beanformer capable\", \"ieee1905.ap_he.su_beamformer\",",
          "5295:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5297:         { &hf_ieee1905_he_mu_beamformer_capable_flag,",
          "5298:           { \"MU beamformer capable\", \"ieee1905.ap_he.mu_beamformer\",",
          "5299:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5301:         { &hf_ieee1905_ul_mu_mimo_capable_flag,",
          "5302:           { \"UL MU-MIMO capable\", \"ieee1905.ap_he.ul_mu_mimo\",",
          "5303:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5305:         { &hf_ieee1905_ul_mu_mimo_ofdma_capable_flag,",
          "5306:           { \"UL MU-MIMO OFDMA capable\", \"ieee1905.ap_he.he_ul_mu_mimo_ofdma\",",
          "5307:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5309:         { &hf_ieee1905_dl_mu_mimo_ofdma_capable_flag,",
          "5310:           { \"DL MU-MIMO OFDMA capable\", \"ieee1905.ap_he.he_dl_mu_mimo_ofdma\",",
          "5311:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5313:         { &hf_ieee1905_ul_ofdma_capable,",
          "5314:           { \"UL OFDMA capable\", \"ieee1905.ap_he.he_ul_ofdma\",",
          "5315:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5317:         { &hf_ieee1905_dl_ofdma_capable,",
          "5318:           { \"DL OFDMA capable\", \"ieee1905.ap_he.he_dl_ofdma\",",
          "5319:             FT_BOOLEAN, 16, TFS(&tfs_supported_not_supported), 0x10, NULL, HFILL}},",
          "5321:         { &hf_ieee1905_he_cap_flags,",
          "5322:           { \"Capabilities\", \"ieee1905.ap_he.caps\",",
          "5323:             FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5325:         { &hf_ieee1905_steering_policy_local_disallowed_count,",
          "5326:           { \"Local steering disallowed STA count\", \"ieee1905.steering_policy.local_disallow_sta\",",
          "5327:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5329:         { &hf_ieee1905_steering_disallowed_mac_addr,",
          "5330:           { \"Local steering disallowed MAC address\", \"ieee1905.steering_policy.local_disallow_mac\",",
          "5331:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5333:         { &hf_ieee1905_btm_steering_disallowed_count,",
          "5334:           { \"BTM steering disallowed count\", \"ieee1905.steering_policy.btm_disall_count\",",
          "5335:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5337:         { &hf_ieee1905_btm_steering_disallowed_mac_addr,",
          "5338:           { \"Local steering disallowed MAC address\", \"ieee1905.steering_policy.local_disalow_mac_addr\",",
          "5339:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5341:         { &hf_ieee1905_steering_policy_radio_count,",
          "5342:           { \"Steering policy radio count\", \"ieee1905.steering_policy.radio_count\",",
          "5343:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5345:         { &hf_ieee1905_steering_policy_radio_id,",
          "5346:           { \"Radio unique ID\", \"ieee1905.steering_policy.radio_id\",",
          "5347:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5349:         { &hf_ieee1905_steering_policy_policy,",
          "5350:           { \"Steering policy\", \"ieee1905.steering_polocy.policy\",",
          "5351:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5353:         { &hf_ieee1905_steering_policy_util,",
          "5354:           { \"Channel utilization threshold\", \"ieee1905.steering_policy.utilization_threshold\",",
          "5355:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5357:         { &hf_ieee1905_steering_policy_rssi_threshold,",
          "5358:           { \"RSSI steering threshold\", \"ieee1905.steering_policy.rssi_threshold\",",
          "5359:             FT_INT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5361:         { &hf_ieee1905_radio_restriction_radio_id,",
          "5362:           { \"Radio unique ID\", \"ieee1905.radio_restriction.radio_id\",",
          "5363:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5365:         { &hf_ieee1905_radio_restriction_op_class_count,",
          "5366:           { \"Restricted operating classes\", \"ieee1905.radio_restriction.classes\",",
          "5367:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5369:         { &hf_ieee1905_radio_restriction_op_class,",
          "5370:           { \"Restricted operating class\", \"ieee1905.radio_restriction.class\",",
          "5371:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5373:         { &hf_ieee1905_radio_restriction_chan_count,",
          "5374:           { \"Channel count\", \"ieee1905.radio_restriction.channel_count\",",
          "5375:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5377:         { &hf_ieee1905_radio_restriction_channel,",
          "5378:           { \"Restricted channel\", \"ieee1905.radio_restriction.channel\",",
          "5379:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5381:         { &hf_ieee1905_radio_restriction_min_separation,",
          "5382:           { \"Minimum separation\", \"ieee1905.radio_restriction.min_sep\",",
          "5383:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5385:         { &hf_ieee1905_ap_metrics_agent_bssid,",
          "5386:           { \"Multi-AP agent BSSID\", \"ieee1905.ap_metrics.bssid\",",
          "5387:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5389:         { &hf_ieee1905_ap_metrics_channel_utilization,",
          "5390:           { \"Channel utilization\", \"ieee1905.ap_metrics.channel_util\",",
          "5391:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5393:         { &hf_ieee1905_ap_metrics_sta_count,",
          "5394:           { \"BSS STA count\", \"ieee1905.ap_metrics.sta_count\",",
          "5395:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5397:         { &hf_ieee1905_ap_metrics_service_params_be,",
          "5398:           { \"Estimated service parameters AC=BE\", \"ieee1905.ap_metrics.est_param_be\",",
          "5399:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5401:         { &hf_ieee1905_ap_metrics_service_params_bk,",
          "5402:           { \"Estimated service parameters AC=BK\", \"ieee1905.ap_metrics.est_param_bk\",",
          "5403:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5405:         { &hf_ieee1905_ap_metrics_service_params_vo,",
          "5406:           { \"Estimated service parameters AC=VO\", \"ieee1905.ap_metrics.est_param_vo\",",
          "5407:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5409:         { &hf_ieee1905_ap_metrics_service_params_vi,",
          "5410:           { \"Estimated service parameters AC=VI\", \"ieee1905.ap_metrics.est_param_vi\",",
          "5411:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5413:         { &hf_ieee1905_unassoc_sta_link_metric_op_class,",
          "5414:           { \"Operating class\", \"ieee1905.unassoc_sta_link_metrics.op_class\",",
          "5415:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5417:         { &hf_ieee1905_unassoc_sta_link_metric_sta_count,",
          "5418:           { \"STA count\", \"ieee1905.unassoc_sta_link_metrics.sta_count\",",
          "5419:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5421:         { &hf_ieee1905_unassoc_link_metric_mac_addr,",
          "5422:           { \"STA MAC address\", \"ieee1905.unassoc_sta_link_metrics.mac_addr\",",
          "5423:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5425:         { &hf_ieee1905_unassoc_link_metric_channel,",
          "5426:           { \"Channel number\", \"ieee1905.unassoc_sta_link_metrics.channel\",",
          "5427:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5429:         { &hf_ieee1905_unassoc_link_metric_delta,",
          "5430:           { \"Time delta (ms)\", \"ieee1905.unassoc_sta_link_metrics.delta\",",
          "5431:             FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5433:         { &hf_ieee1905_unassoc_link_metric_uplink_rssi,",
          "5434:           { \"Uplink RSSI\", \"ieee1905.unassoc_sta_link_metrics.rssi\",",
          "5435:             FT_INT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5437:         { &hf_ieee1905_beacon_metrics_query_mac_addr,",
          "5438:           { \"Associated STA MAC address\", \"ieee1905.beacon_metrics.assoc_sta_mac\",",
          "5439:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5441:         { &hf_ieee1905_beacon_metrics_query_op_class,",
          "5442:           { \"Operating class\", \"ieee1905.beacon_metrics.op_class\",",
          "5443:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5445:         { &hf_ieee1905_beacon_metrics_query_channel,",
          "5446:           { \"Channel number\", \"ieee1905.beacon_metrics.channel_number\",",
          "5447:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5449:         { &hf_ieee1905_beacon_metrics_query_bssid,",
          "5450:           { \"BSSID\", \"ieee1905.beacon_metrics.bssid\",",
          "5451:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5453:         { &hf_ieee1905_beacon_metrics_query_detail,",
          "5454:           { \"Reporting detail\", \"ieee1905.beacon_metrics.detail\",",
          "5455:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5457:         { &hf_ieee1905_beacon_metrics_query_ssid_len,",
          "5458:           { \"SSID length\", \"ieee1905.beacon_metrics.ssid_len\",",
          "5459:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5461:         { &hf_ieee1905_beacon_metrics_query_ssid,",
          "5462:           { \"SSID\", \"ieee1905.beacon_metrics.ssid\",",
          "5463:             FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5465:         { &hf_ieee1905_beacon_metrics_channel_count,",
          "5466:           { \"Channel reports number\", \"ieee1905.beacon_metrics.report_number\",",
          "5467:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5469:         { &hf_ieee1905_beacon_metrics_report_len,",
          "5470:           { \"Channel report length\", \"ieee1905.beacon_metrics.report_length\",",
          "5471:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5473:         { &hf_ieee1905_beacon_metrics_report_op_class,",
          "5474:           { \"Channel report operating class\", \"ieee1905.beacon_metrics.op_class\",",
          "5475:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5477:         { &hf_ieee1905_beacon_metrics_report_channel_id,",
          "5478:           { \"Channel number\", \"ieee1905.beacon_metrics.channel_number\",",
          "5479:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5481:         { &hf_ieee1905_phy_type_flag,",
          "5482:           { \"Condensed PHY type\", \"ieee1905.beacon_report.phy_type\",",
          "5483:             FT_UINT8, BASE_HEX, VALS(condensed_phy_type_vals), 0xFE, NULL, HFILL }},",
          "5485:         { &hf_ieee1905_reported_frame_type_flag,",
          "5486:           { \"Reportted frame type\", \"ieee1905.beacon_report.rep_frame_type\",",
          "5487:             FT_UINT8, BASE_HEX, VALS(reported_frame_type_vals), 0x01, NULL, HFILL }},",
          "5489:         { &hf_ieee1905_beacon_report_op_class,",
          "5490:           { \"Operating class\", \"ieee1905.beacon_report.op_class\",",
          "5491:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5493:         { &hf_ieee1905_beacon_report_channel_no,",
          "5494:           { \"Channel number\", \"ieee1905.beacon_report.channel_no\",",
          "5495:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5497:         { &hf_ieee1905_beacon_report_meas_start_time,",
          "5498:           { \"Measurement start time\", \"ieee1905.beacon_report.start_time\",",
          "5499:             FT_UINT64, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5501:         { &hf_ieee1905_beacon_report_meas_duration,",
          "5502:           { \"Measurement duration\", \"ieee1905.beacon_report.meas_duration\",",
          "5503:             FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5505:         { &hf_ieee1905_beacon_reported_frame_flags,",
          "5506:           { \"Reported frame information\", \"ieee1905.beacon_report.rfi\",",
          "5507:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5509:         { &hf_ieee1905_beacon_report_rcpi,",
          "5510:           { \"RCPI\", \"ieee1905.beacon_report.rcpi\",",
          "5511:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5513:         { &hf_ieee1905_beacon_report_rsni,",
          "5514:           { \"RSNI\", \"ieee1905.beacon_report.rsni\",",
          "5515:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5517:         { &hf_ieee1905_beacon_report_bssid,",
          "5518:           { \"BSSID\", \"ieee1905.beacon_report.bssid\",",
          "5519:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5521:         { &hf_ieee1905_beacon_report_ant_id,",
          "5522:           { \"Antenna ID\", \"ieee1905.beacon_report.antenna_id\",",
          "5523:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5525:         { &hf_ieee1905_beacon_report_tsf,",
          "5526:           { \"Parent TSF\", \"ieee1905.beacon_report.parent_tsf\",",
          "5527:             FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5529:         { &hf_ieee1905_beacon_report_sub_elt,",
          "5530:           { \"Sub-element ID\", \"ieee1905.beacon_report.sub_elt_id\",",
          "5531:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5533:         { &hf_ieee1905_beacon_report_sub_elt_len,",
          "5534:           { \"Sub-element length\", \"ieee1905.beacon_report.sub_elt_len\",",
          "5535:             FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "5537:         { &hf_ieee1905_beacon_report_sub_elt_body,",
          "5538:           { \"Sub-element body\", \"ieee1905.beacon_report.sub_elt_body\",",
          "5539:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5541:         { &hf_ieee1905_beacon_metrics_response_mac_addr,",
          "5542:           { \"STA MAC address\", \"ieee1905.beacon_metrics.mac_addr\",",
          "5543:             FT_ETHER, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5545:         { &hf_ieee1905_beacon_metrics_response_status,",
          "5546:           { \"Response status\", \"ieee1905.beacon_metrics.status\",",
          "5547:             FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL }},",
          "5549:         { &hf_ieee1905_data,",
          "5550:           { \"Extraneous message data\", \"ieee1905.data\",",
          "5551:             FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},",
          "5552:     };",
          "5554:     static gint *ett[] = {",
          "5555:         &ett_ieee1905,",
          "5556:         &ett_ieee1905_flags,",
          "5557:         &ett_tlv,",
          "5558:         &ett_device_information_list,",
          "5559:         &ett_device_information_tree,",
          "5560:         &ett_media_type,",
          "5561:         &ett_bridging_tuples_list,",
          "5562:         &ett_bridging_mac_list,",
          "5563:         &ett_non_1905_neighbor_list,",
          "5564:         &ett_1905_neighbor_list,",
          "5565:         &ett_ieee1905_neighbor_flags,",
          "5566:         &ett_media_type_list,",
          "5567:         &ett_media_item,",
          "5568:         &ett_local_interface_list,",
          "5569:         &ett_local_interface_info,",
          "5570:         &ett_ipv4_list,",
          "5571:         &ett_ipv4_info,",
          "5572:         &ett_ipv4_type_addr_list,",
          "5573:         &ett_ipv4_addr_info,",
          "5574:         &ett_ipv6_list,",
          "5575:         &ett_ipv6_info,",
          "5576:         &ett_ipv6_type_addr_list,",
          "5577:         &ett_ipv6_addr_info,",
          "5578:         &ett_push_button_phy_list,",
          "5579:         &ett_push_button_phy_info,",
          "5580:         &ett_power_off_info,",
          "5581:         &ett_power_change_list,",
          "5582:         &ett_power_change_info,",
          "5583:         &ett_power_status_list,",
          "5584:         &ett_power_status_info,",
          "5585:         &ett_l2_local_intf_list,",
          "5586:         &ett_l2_neighbor_device_info,",
          "5587:         &ett_l2_neighbor_dev_list,",
          "5588:         &ett_l2_neighbor_dev_tree,",
          "5589:         &ett_supported_service_list,",
          "5590:         &ett_searched_service_list,",
          "5591:         &ett_ap_operational_bss_list,",
          "5592:         &ett_ap_operational_bss_tree,",
          "5593:         &ett_ap_operational_bss_intf,",
          "5594:         &ett_ap_operational_bss_intf_list,",
          "5595:         &ett_ap_operational_bss_intf_tree,",
          "5596:         &ett_ieee1905_capabilities_flags,",
          "5597:         &ett_assoc_control_list,",
          "5598:         &ett_ieee1905_steering_request_flags,",
          "5599:         &ett_ieee1905_association_event_flags,",
          "5600:         &ett_radio_basic_class_list,",
          "5601:         &ett_ap_radio_basic_cap_class_tree,",
          "5602:         &ett_radio_basic_non_op_list,",
          "5603:         &ett_ht_cap_flags,",
          "5604:         &ett_vht_cap_flags,",
          "5605:         &ett_assoc_clients_bss_list,",
          "5606:         &ett_assoc_client_bss_tree,",
          "5607:         &ett_assoc_client_list,",
          "5608:         &ett_assoc_client_tree,",
          "5609:         &ett_channel_preference_class_list,",
          "5610:         &ett_ap_channel_preference_class_tree,",
          "5611:         &ett_channel_pref_channel_list,",
          "5612:         &ett_ieee1905_channel_prefs_flags,",
          "5613:         &ett_op_channel_report_class_tree,",
          "5614:         &ett_op_channel_report_class_list,",
          "5615:         &ett_sta_link_metrics_query_channel_list,",
          "5616:         &ett_sta_link_link_mac_addr_list,",
          "5617:         &ett_metric_reporting_policy_list,",
          "5618:         &ett_metric_reporting_policy_tree,",
          "5619:         &ett_ap_metric_query_bssid_list,",
          "5620:         &ett_sta_list_metrics_bss_list,",
          "5621:         &ett_he_mcs_list,",
          "5622:         &ett_he_cap_flags,",
          "5623:         &ett_steering_policy_disallowed_list,",
          "5624:         &ett_btm_steering_policy_disallowed_list,",
          "5625:         &ett_btm_steering_radio_list,",
          "5626:         &ett_radio_restriction_op_class_list,",
          "5627:         &ett_radio_restriction_op_class_tree,",
          "5628:         &ett_radio_restriction_channel_list,",
          "5629:         &ett_radio_restriction_channel_tree,",
          "5630:         &ett_unassoc_sta_link_metric_list,",
          "5631:         &ett_unassoc_sta_link_metric_tree,",
          "5632:         &ett_beacon_metrics_query_list,",
          "5633:         &ett_beacon_metrics_query_tree,",
          "5634:         &ett_beacon_metrics_query_channel_list,",
          "5635:         &ett_beacon_report_subelement_list,",
          "5636:         &ett_beacon_report_sub_element_tree,",
          "5637:         &ett_beacon_metrics_response_report_list,",
          "5638:         &ett_beacon_metrics_response_report_tree,",
          "5639:         &ett_ieee1905_beacon_reported_flags,",
          "5640:     };",
          "5642:     static ei_register_info ei[] = {",
          "5643:       { &ei_ieee1905_malformed_tlv,",
          "5644:         { \"ieee1905.tlv.too_short\", PI_PROTOCOL, PI_WARN,",
          "5645:           \"TLV is too short\", EXPFILL }},",
          "5647:       { &ei_ieee1905_extraneous_data_after_eom,",
          "5648:         { \"ieee1905.tlv.extraneous_data\", PI_PROTOCOL, PI_WARN,",
          "5649:           \"Extraneous data after EOM TLV\", EXPFILL }},",
          "5650:     };",
          "5652:     expert_module_t *expert_ieee1905 = NULL;",
          "5654:     proto_ieee1905 = proto_register_protocol(\"IEEE 1905.1a\",",
          "5655:             \"ieee1905\", \"ieee1905\");",
          "5657:     proto_register_field_array(proto_ieee1905, hf, array_length(hf));",
          "5658:     proto_register_subtree_array(ett, array_length(ett));",
          "5660:     expert_ieee1905 = expert_register_protocol(proto_ieee1905);",
          "5661:     expert_register_field_array(expert_ieee1905, ei, array_length(ei));",
          "5662: }",
          "5664: void",
          "5665: proto_reg_handoff_ieee1905(void)",
          "5666: {",
          "5667:     static dissector_handle_t ieee1905_handle;",
          "5669:     ieee1905_handle = create_dissector_handle(dissect_ieee1905,",
          "5670:                 proto_ieee1905);",
          "5672:     dissector_add_uint(\"ethertype\", ETHERTYPE_IEEE_1905, ieee1905_handle);",
          "5673: }",
          "",
          "---------------"
        ],
        "epan/etypes.h||epan/etypes.h": [
          "File: epan/etypes.h -> epan/etypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "570: #endif",
          "572: #ifndef ETHERTYPE_IEEE_802_1BR",
          "574: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572: #ifndef ETHERTYPE_IEEE_1905",
          "574: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}