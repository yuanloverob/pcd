{
  "cve_id": "CVE-2017-9608",
  "cve_desc": "The dnxhd decoder in FFmpeg before 3.2.6, and 3.3.x before 3.3.3 allows remote attackers to cause a denial of service (NULL pointer dereference) via a crafted mov file.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "611b35627488a8d0763e75c25ee0875c5b7987dd",
  "patch_info": {
    "commit_hash": "611b35627488a8d0763e75c25ee0875c5b7987dd",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/611b35627488a8d0763e75c25ee0875c5b7987dd",
    "files": [
      "libavcodec/dnxhd_parser.c"
    ],
    "message": "avcodec/dnxhd_parser: Do not return invalid value from dnxhd_find_frame_end() on error\n\nFixes: Null pointer dereference\n\nFixes: CVE-2017-9608\nFound-by: Yihan Lian\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
    ]
  },
  "patch_diff": {
    "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c": [
      "File: libavcodec/dnxhd_parser.c -> libavcodec/dnxhd_parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:                 dctx->w = (state >> 32) & 0xFFFF;",
      "69:             } else if (dctx->cur_byte == 42) {",
      "70:                 int cid = (state >> 32) & 0xFFFFFFFF;",
      "72:                 if (cid <= 0)",
      "73:                     continue;",
      "80:                 }",
      "81:                 if (buf_size - i + 47 >= dctx->remaining) {",
      "82:                     int remaining = dctx->remaining;",
      "",
      "[Removed Lines]",
      "75:                 dctx->remaining = avpriv_dnxhd_get_frame_size(cid);",
      "76:                 if (dctx->remaining <= 0) {",
      "77:                     dctx->remaining = ff_dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
      "78:                     if (dctx->remaining <= 0)",
      "79:                         return dctx->remaining;",
      "",
      "[Added Lines]",
      "71:                 int remaining;",
      "76:                 remaining = avpriv_dnxhd_get_frame_size(cid);",
      "77:                 if (remaining <= 0) {",
      "78:                     remaining = ff_dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
      "79:                     if (remaining <= 0)",
      "80:                         continue;",
      "82:                 dctx->remaining = remaining;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31c1c0b46a7021802c3d1d18039fca30dba5a14e",
      "candidate_info": {
        "commit_hash": "31c1c0b46a7021802c3d1d18039fca30dba5a14e",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/31c1c0b46a7021802c3d1d18039fca30dba5a14e",
        "files": [
          "libavcodec/dnxhd_parser.c"
        ],
        "message": "avcodec/dnxhd_parser: Do not return invalid value from dnxhd_find_frame_end() on error\n\nFixes: Null pointer dereference\n\nFixes: CVE-2017-9608\nFound-by: Yihan Lian\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 611b35627488a8d0763e75c25ee0875c5b7987dd)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ],
          "candidate": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c": [
          "File: libavcodec/dnxhd_parser.c -> libavcodec/dnxhd_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:                 dctx->w = (state >> 32) & 0xFFFF;",
          "88:             } else if (dctx->cur_byte == 42) {",
          "89:                 int cid = (state >> 32) & 0xFFFFFFFF;",
          "91:                 if (cid <= 0)",
          "92:                     continue;",
          "99:                 }",
          "100:                 if (buf_size - i >= dctx->remaining && (!dctx->interlaced || dctx->cur_field)) {",
          "101:                     int remaining = dctx->remaining;",
          "",
          "[Removed Lines]",
          "94:                 dctx->remaining = avpriv_dnxhd_get_frame_size(cid);",
          "95:                 if (dctx->remaining <= 0) {",
          "96:                     dctx->remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
          "97:                     if (dctx->remaining <= 0)",
          "98:                         return dctx->remaining;",
          "",
          "[Added Lines]",
          "90:                 int remaining;",
          "95:                 remaining = avpriv_dnxhd_get_frame_size(cid);",
          "96:                 if (remaining <= 0) {",
          "97:                     remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
          "98:                     if (remaining <= 0)",
          "99:                         continue;",
          "101:                 dctx->remaining = remaining;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a709e2a10b8288a0cc383547924ecfe285cef89",
      "candidate_info": {
        "commit_hash": "0a709e2a10b8288a0cc383547924ecfe285cef89",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/0a709e2a10b8288a0cc383547924ecfe285cef89",
        "files": [
          "libavcodec/dnxhd_parser.c"
        ],
        "message": "avcodec/dnxhd_parser: Do not return invalid value from dnxhd_find_frame_end() on error\n\nFixes: Null pointer dereference\n\nFixes: CVE-2017-9608\nFound-by: Yihan Lian\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 611b35627488a8d0763e75c25ee0875c5b7987dd)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ],
          "candidate": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c": [
          "File: libavcodec/dnxhd_parser.c -> libavcodec/dnxhd_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:                 dctx->w = (state >> 32) & 0xFFFF;",
          "82:             } else if (dctx->cur_byte == 42) {",
          "83:                 int cid = (state >> 32) & 0xFFFFFFFF;",
          "85:                 if (cid <= 0)",
          "86:                     continue;",
          "93:                 }",
          "94:                 if (buf_size - i + 47 >= dctx->remaining) {",
          "95:                     int remaining = dctx->remaining;",
          "",
          "[Removed Lines]",
          "88:                 dctx->remaining = avpriv_dnxhd_get_frame_size(cid);",
          "89:                 if (dctx->remaining <= 0) {",
          "90:                     dctx->remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
          "91:                     if (dctx->remaining <= 0)",
          "92:                         return dctx->remaining;",
          "",
          "[Added Lines]",
          "84:                 int remaining;",
          "89:                 remaining = avpriv_dnxhd_get_frame_size(cid);",
          "90:                 if (remaining <= 0) {",
          "91:                     remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
          "92:                     if (remaining <= 0)",
          "93:                         continue;",
          "95:                 dctx->remaining = remaining;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5dedb2afd64e27ad08308487e185f7e3a5bea1b9",
      "candidate_info": {
        "commit_hash": "5dedb2afd64e27ad08308487e185f7e3a5bea1b9",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/5dedb2afd64e27ad08308487e185f7e3a5bea1b9",
        "files": [
          "libavcodec/dnxhd_parser.c",
          "libavcodec/dnxhddata.h",
          "libavcodec/dnxhdenc.c"
        ],
        "message": "avcodec/dnxhd*: add ff_dnxhd_get_hr_frame_size()\n\nSigned-off-by: Paul B Mahol <onemda@gmail.com>",
        "before_after_code_files": [
          "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c",
          "libavcodec/dnxhddata.h||libavcodec/dnxhddata.h",
          "libavcodec/dnxhdenc.c||libavcodec/dnxhdenc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ],
          "candidate": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c": [
          "File: libavcodec/dnxhd_parser.c -> libavcodec/dnxhd_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     int w, h;",
          "37: } DNXHDParserContext;",
          "52: static int dnxhd_find_frame_end(DNXHDParserContext *dctx,",
          "53:                                 const uint8_t *buf, int buf_size)",
          "54: {",
          "",
          "[Removed Lines]",
          "39: static int dnxhd_get_hr_frame_size(int cid, int w, int h)",
          "40: {",
          "41:     int result, i = ff_dnxhd_get_cid_table(cid);",
          "43:     if (i < 0)",
          "44:         return i;",
          "46:     result = ((h + 15) / 16) * ((w + 15) / 16) * (int64_t)ff_dnxhd_cid_table[i].packet_scale.num / ff_dnxhd_cid_table[i].packet_scale.den;",
          "47:     result = (result + 2048) / 4096 * 4096;",
          "49:     return FFMAX(result, 8192);",
          "50: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:                 dctx->remaining = avpriv_dnxhd_get_frame_size(cid);",
          "95:                 if (dctx->remaining <= 0) {",
          "97:                     if (dctx->remaining <= 0)",
          "98:                         return dctx->remaining;",
          "99:                 }",
          "",
          "[Removed Lines]",
          "96:                     dctx->remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
          "",
          "[Added Lines]",
          "83:                     dctx->remaining = ff_dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
          "",
          "---------------"
        ],
        "libavcodec/dnxhddata.h||libavcodec/dnxhddata.h": [
          "File: libavcodec/dnxhddata.h -> libavcodec/dnxhddata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     return ff_dnxhd_check_header_prefix(prefix);",
          "92: }",
          "94: int avpriv_dnxhd_get_frame_size(int cid);",
          "95: int avpriv_dnxhd_get_interlaced(int cid);",
          "96: #if LIBAVCODEC_VERSION_MAJOR < 58",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: static av_always_inline int ff_dnxhd_get_hr_frame_size(int cid, int w, int h)",
          "95: {",
          "96:     int result, i = ff_dnxhd_get_cid_table(cid);",
          "98:     if (i < 0)",
          "99:         return i;",
          "101:     result = ((h + 15) / 16) * ((w + 15) / 16) * (int64_t)ff_dnxhd_cid_table[i].packet_scale.num / ff_dnxhd_cid_table[i].packet_scale.den;",
          "102:     result = (result + 2048) / 4096 * 4096;",
          "104:     return FFMAX(result, 8192);",
          "105: }",
          "",
          "---------------"
        ],
        "libavcodec/dnxhdenc.c||libavcodec/dnxhdenc.c": [
          "File: libavcodec/dnxhdenc.c -> libavcodec/dnxhdenc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     return AVERROR(ENOMEM);",
          "363: }",
          "372: static av_cold int dnxhd_encode_init(AVCodecContext *avctx)",
          "373: {",
          "374:     DNXHDEncContext *ctx = avctx->priv_data;",
          "",
          "[Removed Lines]",
          "365: static int dnxhd_get_hr_frame_size(const CIDEntry* profile, int mb_num)",
          "366: {",
          "367:     int result = mb_num * profile->packet_scale.num / profile->packet_scale.den;",
          "368:     result = (result + 2048) / 4096 * 4096;",
          "369:     return FFMAX(result, 8192);",
          "370: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:     ctx->m.mb_num = ctx->m.mb_height * ctx->m.mb_width;",
          "485:     if (ctx->cid_table->frame_size == DNXHD_VARIABLE) {",
          "488:         ctx->coding_unit_size = ctx->frame_size;",
          "489:     } else {",
          "490:         ctx->frame_size = ctx->cid_table->frame_size;",
          "",
          "[Removed Lines]",
          "486:         ctx->frame_size = dnxhd_get_hr_frame_size(ctx->cid_table,",
          "487:                                                   ctx->m.mb_num);",
          "",
          "[Added Lines]",
          "479:         ctx->frame_size = ff_dnxhd_get_hr_frame_size(ctx->cid,",
          "480:                                                      ctx->m.mb_width, ctx->m.mb_height);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1940d2458353943e2fab6bdb87d2278077e22a5",
      "candidate_info": {
        "commit_hash": "e1940d2458353943e2fab6bdb87d2278077e22a5",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e1940d2458353943e2fab6bdb87d2278077e22a5",
        "files": [
          "libavcodec/dnxhd_parser.c",
          "tests/ref/vsynth/vsynth1-dnxhd-720p-hr-lb"
        ],
        "message": "avcodec/dnxhd_parser: take into account compressed frame size and skip it\n\nFixes #6214 and vsynth1-dnxhd-720p-hr-lb.\n\nSigned-off-by: Paul B Mahol <onemda@gmail.com>",
        "before_after_code_files": [
          "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ],
          "candidate": [
            "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/dnxhd_parser.c||libavcodec/dnxhd_parser.c": [
          "File: libavcodec/dnxhd_parser.c -> libavcodec/dnxhd_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     ParseContext pc;",
          "32:     int interlaced;",
          "34: } DNXHDParserContext;",
          "36: static int dnxhd_find_frame_end(DNXHDParserContext *dctx,",
          "37:                                 const uint8_t *buf, int buf_size)",
          "38: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     int cur_byte;",
          "35:     int remaining;",
          "36:     int w, h;",
          "39: static int dnxhd_get_hr_frame_size(int cid, int w, int h)",
          "40: {",
          "41:     int result, i = ff_dnxhd_get_cid_table(cid);",
          "43:     if (i < 0)",
          "44:         return i;",
          "46:     result = ((h + 15) / 16) * ((w + 15) / 16) * ff_dnxhd_cid_table[i].packet_scale.num / ff_dnxhd_cid_table[i].packet_scale.den;",
          "47:     result = (result + 2048) / 4096 * 4096;",
          "49:     return FFMAX(result, 8192);",
          "50: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:                 pic_found = 1;",
          "53:                 cur_field = state&1;",
          "54:                 break;",
          "55:             }",
          "56:         }",
          "57:     }",
          "61:             return 0;",
          "62:         for (; i < buf_size; i++) {",
          "63:             state = (state << 8) | buf[i];",
          "66:                     pc->frame_start_found = 0;",
          "67:                     pc->state64 = -1;",
          "68:                     dctx->interlaced = interlaced;",
          "69:                     dctx->cur_field = 0;",
          "71:                 } else {",
          "75:                 }",
          "76:             }",
          "77:         }",
          "78:     }",
          "79:     pc->frame_start_found = pic_found;",
          "80:     pc->state64 = state;",
          "",
          "[Removed Lines]",
          "59:     if (pic_found) {",
          "64:             if (ff_dnxhd_check_header_prefix(state & 0xffffffffff00LL) != 0) {",
          "65:                 if (!interlaced || dctx->cur_field) {",
          "70:                     return i - 5;",
          "73:                     dctx->interlaced = interlaced = (state&2)>>1;",
          "74:                     dctx->cur_field = cur_field = state&1;",
          "",
          "[Added Lines]",
          "70:                 dctx->cur_byte = 0;",
          "71:                 dctx->remaining = 0;",
          "77:     if (pic_found && !dctx->remaining) {",
          "81:             dctx->cur_byte++;",
          "84:             if (dctx->cur_byte == 24) {",
          "85:                 dctx->h = (state >> 32) & 0xFFFF;",
          "86:             } else if (dctx->cur_byte == 26) {",
          "87:                 dctx->w = (state >> 32) & 0xFFFF;",
          "88:             } else if (dctx->cur_byte == 42) {",
          "89:                 int cid = (state >> 32) & 0xFFFFFFFF;",
          "91:                 if (cid <= 0)",
          "92:                     continue;",
          "94:                 dctx->remaining = avpriv_dnxhd_get_frame_size(cid);",
          "95:                 if (dctx->remaining <= 0) {",
          "96:                     dctx->remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);",
          "97:                     if (dctx->remaining <= 0)",
          "98:                         return dctx->remaining;",
          "99:                 }",
          "100:                 if (buf_size - i >= dctx->remaining && (!dctx->interlaced || dctx->cur_field)) {",
          "101:                     int remaining = dctx->remaining;",
          "107:                     dctx->cur_byte = 0;",
          "108:                     dctx->remaining = 0;",
          "109:                     return remaining;",
          "111:                     dctx->remaining -= buf_size;",
          "115:     } else if (pic_found) {",
          "116:         if (dctx->remaining > buf_size) {",
          "117:             dctx->remaining -= buf_size;",
          "118:         } else {",
          "119:             int remaining = dctx->remaining;",
          "121:             pc->frame_start_found = 0;",
          "122:             pc->state64 = -1;",
          "123:             dctx->interlaced = interlaced;",
          "124:             dctx->cur_field = 0;",
          "125:             dctx->cur_byte = 0;",
          "126:             dctx->remaining = 0;",
          "127:             return remaining;",
          "128:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}