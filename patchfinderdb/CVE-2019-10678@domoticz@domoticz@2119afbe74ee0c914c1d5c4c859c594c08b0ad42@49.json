{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3aab2b2b42e417b442f559a3854e6bccf8ed00dd",
      "candidate_info": {
        "commit_hash": "3aab2b2b42e417b442f559a3854e6bccf8ed00dd",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3aab2b2b42e417b442f559a3854e6bccf8ed00dd",
        "files": [
          "main/SQLHelper.cpp"
        ],
        "message": "Removed unneeded uservariable event trigger call (There could be no event if the variable has just been created)",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7918:  if (m_bEnableEventSystem)",
          "7919:  {",
          "7920:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7929:  }",
          "7930:  return \"OK\";",
          "7931: }",
          "",
          "[Removed Lines]",
          "7921:   result = safe_query(\"SELECT ID, LastUpdate FROM UserVariables WHERE (Name == '%q')\", varname.c_str());",
          "7922:   if (!result.empty())",
          "7923:   {",
          "7924:    std::vector<std::string> sd = result[0];",
          "7925:    uint64_t vId = std::strtoull(sd[0].c_str(), nullptr, 10);",
          "7926:    m_mainworker.m_eventsystem.SetEventTrigger(vId, m_mainworker.m_eventsystem.REASON_USERVARIABLE, 0);",
          "7927:    m_mainworker.m_eventsystem.UpdateUserVariable(vId, \"\", szVarValue, typei, sd[1]);",
          "7928:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd312856a12cbba86142b2751d4e197e83788cac",
      "candidate_info": {
        "commit_hash": "fd312856a12cbba86142b2751d4e197e83788cac",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/fd312856a12cbba86142b2751d4e197e83788cac",
        "files": [
          "hardware/plugins/DelayedLink.h",
          "hardware/plugins/PythonObjects.cpp"
        ],
        "message": "Bugfix: Device.Update: Convert Options values to strings explicitly and resolve SuppressTriggers crash on Windows",
        "before_after_code_files": [
          "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h",
          "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h": [
          "File: hardware/plugins/DelayedLink.h -> hardware/plugins/DelayedLink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   DECLARE_PYTHON_SYMBOL(PyObject*, PyImport_AddModule, const char*);",
          "124:   DECLARE_PYTHON_SYMBOL(void, PyEval_SetProfile, Py_tracefunc COMMA PyObject*);",
          "125:   DECLARE_PYTHON_SYMBOL(void, PyEval_SetTrace, Py_tracefunc COMMA PyObject*);",
          "127: #ifdef _DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:   DECLARE_PYTHON_SYMBOL(PyObject*, PyObject_Str, PyObject*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:      RESOLVE_PYTHON_SYMBOL(PyImport_AddModule);",
          "247:      RESOLVE_PYTHON_SYMBOL(PyEval_SetProfile);",
          "248:      RESOLVE_PYTHON_SYMBOL(PyEval_SetTrace);",
          "249:     }",
          "250:    }",
          "251:    _Py_NoneStruct.ob_refcnt = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:      RESOLVE_PYTHON_SYMBOL(PyObject_Str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426: #define PyImport_AddModule  pythonLib->PyImport_AddModule",
          "427: #define PyEval_SetProfile  pythonLib->PyEval_SetProfile",
          "428: #define PyEval_SetTrace   pythonLib->PyEval_SetTrace",
          "429: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "431: #define PyObject_Str   pythonLib->PyObject_Str",
          "",
          "---------------"
        ],
        "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp": [
          "File: hardware/plugins/PythonObjects.cpp -> hardware/plugins/PythonObjects.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:         std::map<std::string, std::string> mpOptions;",
          "759:         while (PyDict_Next(self->Options, &pos, &pKeyDict, &pValueDict)) {",
          "760:          std::string sOptionName = PyUnicode_AsUTF8(pKeyDict);",
          "762:          mpOptions.insert(std::pair<std::string, std::string>(sOptionName, sOptionValue));",
          "763:         }",
          "764:         m_sql.SetDeviceOptions(self->ID, mpOptions);",
          "",
          "[Removed Lines]",
          "761:          std::string sOptionValue = PyUnicode_AsUTF8(pValueDict);",
          "",
          "[Added Lines]",
          "761:          PyObject* pStr = PyObject_Str(pValueDict);",
          "762:          std::string sOptionValue = PyUnicode_AsUTF8(pStr);",
          "763:          Py_XDECREF(pStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "811:    int   iSubType = self->SubType;",
          "812:    int   iSwitchType = self->SwitchType;",
          "813:    int   iUsed = self->Used;",
          "815:    char*  Description = NULL;",
          "816:    char*  Color = NULL;",
          "819:    std::string sName = PyUnicode_AsUTF8(self->Name);",
          "820:    std::string sDeviceID = PyUnicode_AsUTF8(self->DeviceID);",
          "",
          "[Removed Lines]",
          "814:    uint64_t   DevRowIdx;",
          "817:    bool  SuppressTriggers = false;",
          "",
          "[Added Lines]",
          "816:    uint64_t  DevRowIdx;",
          "819:    int   SuppressTriggers = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "951:      PyObject *pKeyDict, *pValueDict;",
          "952:      Py_ssize_t pos = 0;",
          "953:      std::map<std::string, std::string> mpOptions;",
          "955:       std::string sOptionName = PyUnicode_AsUTF8(pKeyDict);",
          "957:       mpOptions.insert(std::pair<std::string, std::string>(sOptionName, sOptionValue));",
          "958:      }",
          "959:      m_sql.SetDeviceOptions(self->ID, mpOptions);",
          "",
          "[Removed Lines]",
          "954:      while (PyDict_Next(pOptionsDict, &pos, &pKeyDict, &pValueDict)) {",
          "956:       std::string sOptionValue = PyUnicode_AsUTF8(pValueDict);",
          "",
          "[Added Lines]",
          "956:      while (PyDict_Next(pOptionsDict, &pos, &pKeyDict, &pValueDict))",
          "957:      {",
          "959:       PyObject* pStr = PyObject_Str(pValueDict);",
          "960:       std::string sOptionValue = PyUnicode_AsUTF8(pStr);",
          "961:       Py_XDECREF(pStr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b2f7a6c1cee14ec21019a893a35d015584531e6",
      "candidate_info": {
        "commit_hash": "1b2f7a6c1cee14ec21019a893a35d015584531e6",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/1b2f7a6c1cee14ec21019a893a35d015584531e6",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Don't abort while debugging (and using breakpoints)",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12859:    _log.Log(LOG_ERROR, \"%s thread seems to have ended unexpectedly (last update %f seconds ago)\", itt.first.c_str(), diff);",
          "12860:    if (itt.second.second) // If the stalled component is marked as critical, call abort / raise signal",
          "12861:    {",
          "12862: #ifdef WIN32",
          "12863:     abort();",
          "12864: #else",
          "12865:     raise(SIGUSR1);",
          "12866: #endif",
          "12867:    }",
          "12868:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12862: #ifndef _DEBUG",
          "12867: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c7c769e540e6edd810a9425b96fcadf83c14ac8",
      "candidate_info": {
        "commit_hash": "6c7c769e540e6edd810a9425b96fcadf83c14ac8",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/6c7c769e540e6edd810a9425b96fcadf83c14ac8",
        "files": [
          "hardware/HEOS.cpp",
          "hardware/Kodi.cpp",
          "hardware/PanasonicTV.cpp"
        ],
        "message": "Corrected some logging",
        "before_after_code_files": [
          "hardware/HEOS.cpp||hardware/HEOS.cpp",
          "hardware/Kodi.cpp||hardware/Kodi.cpp",
          "hardware/PanasonicTV.cpp||hardware/PanasonicTV.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/HEOS.cpp||hardware/HEOS.cpp": [
          "File: hardware/HEOS.cpp -> hardware/HEOS.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <iostream>",
          "18: #define RETRY_DELAY 30",
          "20: CHEOS::CHEOS(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const std::string &User, const std::string &Pwd, const int PollIntervalsec, const int PingTimeoutms) :",
          "",
          "[Removed Lines]",
          "17: #define DEBUG_LOGGING false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   Json::Reader jReader;",
          "46:   Json::Value root;",
          "50:   bool bRetVal = jReader.parse(sLine, root);",
          "51:   if ((!bRetVal) || (!root.isObject()))",
          "",
          "[Removed Lines]",
          "48:   if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"DENON by HEOS: Handling message: '%s'.\", sLine.c_str());",
          "",
          "[Added Lines]",
          "47:   _log.Debug(DEBUG_HARDWARE, \"DENON by HEOS: Handling message: '%s'.\", sLine.c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:           }",
          "82:           else",
          "83:           {",
          "85:           }",
          "86:           key++;",
          "87:          }",
          "88:         }",
          "89:         else",
          "90:         {",
          "92:         }",
          "93:        }",
          "94:        else if (root[\"heos\"][\"command\"] == \"player/get_play_state\" || root[\"heos\"][\"command\"] == \"player/set_play_state\")",
          "",
          "[Removed Lines]",
          "84:            if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"DENON by HEOS: No players found.\");",
          "91:          if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"DENON by HEOS: No players found (No Payload).\");",
          "",
          "[Added Lines]",
          "83:            _log.Debug(DEBUG_HARDWARE, \"DENON by HEOS: No players found.\");",
          "90:          _log.Debug(DEBUG_HARDWARE, \"DENON by HEOS: No players found (No Payload).\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:      {",
          "186:       if (root[\"heos\"].isMember(\"command\"))",
          "187:       {",
          "189:       }",
          "190:      }",
          "191:     }",
          "",
          "[Removed Lines]",
          "188:        if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"DENON by HEOS: Failed: '%s'.\", root[\"heos\"][\"command\"].asCString());",
          "",
          "[Added Lines]",
          "187:        _log.Debug(DEBUG_HARDWARE, \"DENON by HEOS: Failed: '%s'.\", root[\"heos\"][\"command\"].asCString());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269:    }",
          "270:    else",
          "271:    {",
          "273:    }",
          "275:   }",
          "",
          "[Removed Lines]",
          "272:     if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"DENON by HEOS: Message not generated by HEOS System.\");",
          "",
          "[Added Lines]",
          "271:     _log.Debug(DEBUG_HARDWARE, \"DENON by HEOS: Message not generated by HEOS System.\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "333:   {",
          "334:    if (systemCall)",
          "335:    {",
          "337:    }",
          "338:    else",
          "339:    {",
          "",
          "[Removed Lines]",
          "336:     if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"HEOS by DENON: Sent command: '%s'.\", sMessage.c_str());",
          "",
          "[Added Lines]",
          "335:     _log.Debug(DEBUG_HARDWARE, \"HEOS by DENON: Sent command: '%s'.\", sMessage.c_str());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "474:  }",
          "479:  if (sMessage.length())",
          "480:  {",
          "",
          "[Removed Lines]",
          "477:  if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"DENON by HEOS: Debug: '%s'.\", sMessage.c_str());",
          "",
          "[Added Lines]",
          "476:  _log.Debug(DEBUG_HARDWARE, \"DENON by HEOS: Debug: '%s'.\", sMessage.c_str());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "482:   {",
          "483:    if (systemCall)",
          "484:    {",
          "486:    }",
          "487:    else",
          "488:    {",
          "",
          "[Removed Lines]",
          "485:     if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"HEOS by DENON: Sent command: '%s'.\", sMessage.c_str());",
          "",
          "[Added Lines]",
          "484:     _log.Debug(DEBUG_HARDWARE, \"HEOS by DENON: Sent command: '%s'.\", sMessage.c_str());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "491:   }",
          "492:   else",
          "493:   {",
          "495:   }",
          "496:  }",
          "497:  else",
          "",
          "[Removed Lines]",
          "494:    if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"HEOS by DENON: Not Connected - Message not sent: '%s'.\", sMessage.c_str());",
          "",
          "[Added Lines]",
          "493:    _log.Debug(DEBUG_HARDWARE, \"HEOS by DENON: Not Connected - Message not sent: '%s'.\", sMessage.c_str());",
          "",
          "---------------"
        ],
        "hardware/Kodi.cpp||hardware/Kodi.cpp": [
          "File: hardware/Kodi.cpp -> hardware/Kodi.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   std::string sMessage;",
          "192:   std::stringstream ssMessage;",
          "195:   bool bRet = jReader.parse(pMessage, root);",
          "196:   if ((!bRet) || (!root.isObject()))",
          "197:   {",
          "",
          "[Removed Lines]",
          "194:   _log.Log(LOG_NORM, \"Kodi: (%s) Handling message: '%s'.\", m_Name.c_str(), pMessage.c_str());",
          "",
          "[Added Lines]",
          "194:   _log.Debug(DEBUG_HARDWARE, \"Kodi: (%s) Handling message: '%s'.\", m_Name.c_str(), pMessage.c_str());",
          "",
          "---------------"
        ],
        "hardware/PanasonicTV.cpp||hardware/PanasonicTV.cpp": [
          "File: hardware/PanasonicTV.cpp -> hardware/PanasonicTV.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <iostream>",
          "14: #define round(a) ( int ) ( a + .5 )",
          "",
          "[Removed Lines]",
          "15: #define DEBUG_LOGGING (m_Port[0] == '-')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:  m_iPollIntSec = PollIntervalsec;",
          "264:  m_iMissedPongs = 0;",
          "268:  std::vector<std::vector<std::string> > result2;",
          "269:  result2 = m_sql.safe_query(\"SELECT ID,nValue,sValue FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID=='%q') AND (Unit == 1)\", m_HwdID, m_szDevID);",
          "270:  if (result2.size() == 1)",
          "",
          "[Removed Lines]",
          "266:  if (DEBUG_LOGGING) _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Created.\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279: CPanasonicNode::~CPanasonicNode(void)",
          "280: {",
          "281:  StopThread();",
          "283: }",
          "285: void CPanasonicNode::UpdateStatus(bool forceupdate)",
          "",
          "[Removed Lines]",
          "282:  if (DEBUG_LOGGING) _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Destroyed.\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:    socket.connect(endpoint, ec);",
          "336:    if (!ec)",
          "337:    {",
          "339:     return true;",
          "340:    }",
          "341:    else",
          "342:    {",
          "357:    }",
          "358:   }",
          "359:  }",
          "",
          "[Removed Lines]",
          "338:     if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Connected to '%s:%s'.\", m_Name.c_str(), m_IP.c_str(), (m_Port[0] != '-' ? m_Port.c_str() : m_Port.substr(1).c_str()));",
          "343:     if (DEBUG_LOGGING)",
          "344:      if ((",
          "345:       (ec.value() != 113) &&",
          "346:       (ec.value() != 111) &&",
          "347:       (ec.value() != 10060) &&",
          "348:       (ec.value() != 10061) &&",
          "349:       (ec.value() != 10064) //&&",
          "351:       )",
          "352:       ) // Connection failed due to no response, no route or active refusal",
          "353:      {",
          "354:       _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Connect to '%s:%s' failed: (%d) %s\", m_Name.c_str(), m_IP.c_str(), (m_Port[0] != '-' ? m_Port.c_str() : m_Port.substr(1).c_str()), ec.value(), ec.message().c_str());",
          "355:      }",
          "356:     return false;",
          "",
          "[Added Lines]",
          "334:     _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Connected to '%s:%s'.\", m_Name.c_str(), m_IP.c_str(), (m_Port[0] != '-' ? m_Port.c_str() : m_Port.substr(1).c_str()));",
          "339:     if ((",
          "340:      (ec.value() != 113) &&",
          "341:      (ec.value() != 111) &&",
          "342:      (ec.value() != 10060) &&",
          "343:      (ec.value() != 10061) &&",
          "344:      (ec.value() != 10064) //&&",
          "346:      )",
          "347:      ) // Connection failed due to no response, no route or active refusal",
          "348:     {",
          "349:      _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) Connect to '%s:%s' failed: (%d) %s\", m_Name.c_str(), m_IP.c_str(), (m_Port[0] != '-' ? m_Port.c_str() : m_Port.substr(1).c_str()), ec.value(), ec.message().c_str());",
          "350:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "371: std::string CPanasonicNode::handleWriteAndRead(std::string pMessageToSend)",
          "372: {",
          "375:  boost::asio::io_service io_service;",
          "377:  boost::asio::ip::tcp::resolver resolver(io_service);",
          "",
          "[Removed Lines]",
          "374:  if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Handling message: '%s'.\", m_Name.c_str(), pMessageToSend.c_str());",
          "",
          "[Added Lines]",
          "368:  _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) Handling message: '%s'.\", m_Name.c_str(), pMessageToSend.c_str());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "388:   socket.close();",
          "389:   if (handleConnect(socket, *iter, error))",
          "390:   {",
          "392:    break;",
          "393:   }",
          "394:   else",
          "",
          "[Removed Lines]",
          "391:    if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Connected.\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "385:    _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) Connected.\", m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:  }",
          "397:  if (error)",
          "398:  {",
          "400:   socket.close();",
          "401:   return \"ERROR\";",
          "402:  }",
          "404:  boost::array<char, 512> _Buffer;",
          "405:  size_t request_length = std::strlen(pMessageToSend.c_str());",
          "408:  try",
          "409:  {",
          "410:   boost::asio::write(socket, boost::asio::buffer(pMessageToSend.c_str(), request_length));",
          "412:   size_t reply_length = boost::asio::read(socket, boost::asio::buffer(_Buffer, request_length));",
          "414:   socket.close();",
          "",
          "[Removed Lines]",
          "399:   if (DEBUG_LOGGING) _log.Log(LOG_ERROR, \"Panasonic Plugin: (%s) Error trying to connect.\", m_Name.c_str());",
          "406:  if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Attemping write.\", m_Name.c_str());",
          "411:   if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Attemping read.\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "393:   _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) Error trying to connect.\", m_Name.c_str());",
          "400:  _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) Attemping write.\", m_Name.c_str());",
          "405:   _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) Attemping read.\", m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "443:  iPosBegin = pMessage.find(ResponseOK);",
          "444:  if (iPosBegin != std::string::npos)",
          "445:  {",
          "447:  }",
          "449:  iPosBegin = 0;",
          "",
          "[Removed Lines]",
          "446:   if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Last command response OK\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "440:   _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) Last command response OK\", m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "454:  {",
          "455:   if (!m_PowerOnSupported)",
          "456:   {",
          "458:    m_PowerOnSupported = true;",
          "459:   }",
          "460:  }",
          "",
          "[Removed Lines]",
          "457:    if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) TV Supports Powering on by Network\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "451:    _log.Debug(DEBUG_HARDWARE, \"Panasonic Plugin: (%s) TV Supports Powering on by Network\", m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "548: void CPanasonicNode::Do_Work()",
          "549: {",
          "550:  m_Busy = true;",
          "552:  int iPollCount = 9;",
          "554:  while (!m_stoprequested)",
          "",
          "[Removed Lines]",
          "551:  if (DEBUG_LOGGING) _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Entering work loop.\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "545:  _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) started.\", m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "596:    }",
          "597:   }",
          "598:  }",
          "600:  m_Busy = false;",
          "601: }",
          "",
          "[Removed Lines]",
          "599:  _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Exiting work loop.\", m_Name.c_str());",
          "",
          "[Added Lines]",
          "593:  _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Stopped.\", m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "702:    sPanasonicCall = buildXMLStringNetCtl(\"POWER-ONOFF\");",
          "703:   else",
          "704:   {",
          "707:    m_CurrentStatus.Clear();",
          "708:    m_CurrentStatus.Status(MSTAT_UNKNOWN);",
          "",
          "[Removed Lines]",
          "705:    _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Can't use command: '%s'.\", m_Name.c_str(), command.c_str());",
          "",
          "[Added Lines]",
          "699:    _log.Log(LOG_ERROR, \"Panasonic Plugin: (%s) Can't use command: '%s'.\", m_Name.c_str(), command.c_str());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "710:   }",
          "711:  }",
          "712:  else",
          "715:  if (sPanasonicCall.length())",
          "716:  {",
          "717:   if (handleWriteAndRead(sPanasonicCall) != \"ERROR\")",
          "721:  }",
          "",
          "[Removed Lines]",
          "713:   _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Unknown command: '%s'.\", m_Name.c_str(), command.c_str());",
          "718:    _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Sent command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "",
          "[Added Lines]",
          "707:   _log.Log(LOG_ERROR, \"Panasonic Plugin: (%s) Unknown command: '%s'.\", m_Name.c_str(), command.c_str());",
          "712:    _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Sent command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "733:  if (sPanasonicCall.length())",
          "734:  {",
          "735:   if (handleWriteAndRead(sPanasonicCall) != \"ERROR\")",
          "737:   else",
          "739:  }",
          "741: }",
          "",
          "[Removed Lines]",
          "736:    _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Sent command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "738:    _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) can't send command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "",
          "[Added Lines]",
          "730:    _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Sent command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "732:    _log.Log(LOG_ERROR, \"Panasonic Plugin: (%s) can't send command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "744: {",
          "745:  std::string sPanasonicCall = buildXMLStringNetCtl(\"POWER-ONOFF\");",
          "746:  if (handleWriteAndRead(sPanasonicCall) != \"ERROR\") {",
          "748:   return true;",
          "749:  }",
          "750:  else",
          "752:  return false;",
          "753: }",
          "",
          "[Removed Lines]",
          "747:   _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Sent command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "751:   _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) can't send command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "",
          "[Added Lines]",
          "741:   _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Sent command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "745:   _log.Log(LOG_ERROR, \"Panasonic Plugin: (%s) can't send command: '%s'.\", m_Name.c_str(), sPanasonicCall.c_str());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "834:    {",
          "835:     if (!(*itt)->IsBusy())",
          "836:     {",
          "838:      (*itt)->StartThread();",
          "839:     }",
          "840:     if ((*itt)->IsOn()) bWorkToDo = true;",
          "",
          "[Removed Lines]",
          "837:      _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) - Restarting thread.\", (*itt)->m_Name.c_str());",
          "",
          "[Added Lines]",
          "831:      _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) - Restarting thread.\", (*itt)->m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1010:   for (std::vector<std::shared_ptr<CPanasonicNode> >::iterator itt = m_pNodes.begin(); itt != m_pNodes.end(); ++itt)",
          "1011:   {",
          "1013:    (*itt)->StartThread();",
          "1014:   }",
          "1015:   sleep_milliseconds(100);",
          "",
          "[Removed Lines]",
          "1012:    _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Starting thread.\", (*itt)->m_Name.c_str());",
          "",
          "[Added Lines]",
          "1006:    _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Starting thread.\", (*itt)->m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1031:    (*itt)->StopThread();",
          "1032:    if (!(*itt)->IsBusy())",
          "1033:    {",
          "1035:     m_pNodes.erase(itt);",
          "1036:     break;",
          "1037:    }",
          "",
          "[Removed Lines]",
          "1034:     _log.Log(LOG_NORM, \"Panasonic Plugin: (%s) Removing device.\", (*itt)->m_Name.c_str());",
          "",
          "[Added Lines]",
          "1028:     _log.Log(LOG_STATUS, \"Panasonic Plugin: (%s) Removing device.\", (*itt)->m_Name.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41a2a5311da23eed7848a0a35c034a007e572d39",
      "candidate_info": {
        "commit_hash": "41a2a5311da23eed7848a0a35c034a007e572d39",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/41a2a5311da23eed7848a0a35c034a007e572d39",
        "files": [
          "msbuild/domoticz.rc"
        ],
        "message": "Corrected win32 version information",
        "before_after_code_files": [
          "msbuild/domoticz.rc||msbuild/domoticz.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msbuild/domoticz.rc||msbuild/domoticz.rc": [
          "File: msbuild/domoticz.rc -> msbuild/domoticz.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"windows.h\"",
          "13: #undef APSTUDIO_READONLY_SYMBOLS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include \"version.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: 1 VERSIONINFO",
          "",
          "[Removed Lines]",
          "54:  FILEVERSION 4,0,0,9722",
          "55:  PRODUCTVERSION 4,0,0,9722",
          "56:  FILEFLAGSMASK 0x0L",
          "57: #ifdef _DEBUG",
          "58:  FILEFLAGS 0x1L",
          "59: #else",
          "60:  FILEFLAGS 0x0L",
          "61: #endif",
          "62:  FILEOS 0x0L",
          "63:  FILETYPE 0x1L",
          "64:  FILESUBTYPE 0x0L",
          "65: BEGIN",
          "66:     BLOCK \"StringFileInfo\"",
          "67:     BEGIN",
          "68:         BLOCK \"040704e4\"",
          "69:         BEGIN",
          "70:             VALUE \"CompanyName\", \"Domoticz\"",
          "71:             VALUE \"FileDescription\", \"Domoticz Home Automation\"",
          "72:             VALUE \"FileVersion\", \"4.0.0.9722\"",
          "73:             VALUE \"InternalName\", \"Domoticz\"",
          "74:             VALUE \"LegalCopyright\", \"GNU Version 2 or later\"",
          "75:             VALUE \"LegalTrademarks\", \"GNU Version 2 or later\"",
          "76:             VALUE \"OriginalFilename\", \"Domoticz.exe\"",
          "77:             VALUE \"ProductName\", \"Domoticz\"",
          "78:             VALUE \"ProductVersion\", \"4.0.0.9722\"",
          "79:         END",
          "80:     END",
          "81:     BLOCK \"VarFileInfo\"",
          "82:     BEGIN",
          "83:         VALUE \"Translation\", 0x407, 1252",
          "84:     END",
          "85: END",
          "",
          "[Added Lines]",
          "58: FILEVERSION VER_FILE_VERSION",
          "59: PRODUCTVERSION VER_FILE_VERSION",
          "60: FILETYPE VFT_APP",
          "61: {",
          "62:   BLOCK \"StringFileInfo\"",
          "63:     {",
          "64:        BLOCK \"040704E4\"",
          "65:        {",
          "66:           VALUE \"CompanyName\", \"Domoticz\"",
          "67:           VALUE \"FileVersion\", VER_FILE_VERSION_STR",
          "68:           VALUE \"FileDescription\", \"Domoticz Home Automation\"",
          "69:           VALUE \"InternalName\", \"Domoticz\"",
          "70:           VALUE \"LegalCopyright\", \"GNU Version 2 or later\"",
          "71:           VALUE \"LegalTrademarks\", \"GNU Version 2 or later\"",
          "72:           VALUE \"OriginalFilename\", \"Domoticz.exe\"",
          "73:           VALUE \"ProductName\", \"Domoticz\"",
          "74:           VALUE \"ProductVersion\", VER_FILE_VERSION_STR",
          "75:        }",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}