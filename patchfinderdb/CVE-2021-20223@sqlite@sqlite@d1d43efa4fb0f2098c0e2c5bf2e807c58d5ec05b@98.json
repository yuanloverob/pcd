{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "043c8f60a8f54bae188e6ec70ceb5a91821b5863",
      "candidate_info": {
        "commit_hash": "043c8f60a8f54bae188e6ec70ceb5a91821b5863",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/043c8f60a8f54bae188e6ec70ceb5a91821b5863",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test",
          "test/fts3snippet2.test"
        ],
        "message": "Move some new test cases from fts3snippet.test into fts3snippet2.test.\n\nFossilOrigin-Name: fa203999944133941a38e5c858f1f66fc1ef4d2f33222ab81cbf4e3fc1539f1c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test",
          "test/fts3snippet2.test||test/fts3snippet2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c49a33db954f1a3fbc1889bbe9f3f3fdb8fb00e31aafb91cd6f5d1602db5c2b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:   {[a70] [a71] [a72]}",
          "589: }",
          "604: set sqlite_fts3_enable_parentheses 0",
          "605: finish_test",
          "",
          "[Removed Lines]",
          "591: #-------------------------------------------------------------------------",
          "592: # Request a snippet from a query with more than 64 phrases.",
          "593: #",
          "594: reset_db",
          "595: do_execsql_test 6.0 {",
          "596:   CREATE VIRTUAL TABLE f USING fts3(b);",
          "597:   INSERT INTO f VALUES ( x'746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218');",
          "598: }",
          "600: do_execsql_test 6.1 {",
          "601:   SELECT  length(snippet(f))>0  FROM f WHERE b MATCH x'1065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a010f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c2a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e0f42';",
          "602: } {1}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet2.test||test/fts3snippet2.test": [
          "File: test/fts3snippet2.test -> test/fts3snippet2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020-05-14",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "12: # The tests in this file test the FTS3 auxillary functions offsets(),",
          "13: # snippet() and matchinfo() work. At time of writing, running this file",
          "14: # provides full coverage of fts3_snippet.c.",
          "15: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: set testprefix fts3snippet",
          "21: # If SQLITE_ENABLE_FTS3 is not defined, omit this file.",
          "22: ifcapable !fts3 { finish_test ; return }",
          "23: source $testdir/fts3_common.tcl",
          "25: set sqlite_fts3_enable_parentheses 1",
          "26: #-------------------------------------------------------------------------",
          "27: # Request a snippet from a query with more than 64 phrases.",
          "28: #",
          "29: reset_db",
          "30: do_execsql_test 1.0 {",
          "31:   CREATE VIRTUAL TABLE f USING fts3(b);",
          "32:   INSERT INTO f VALUES ( x'746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218');",
          "33: }",
          "35: do_execsql_test 1.1 {",
          "36:   SELECT  length(snippet(f))>0  FROM f WHERE b MATCH x'1065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a010f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c2a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e082a011065616e656d655a616c702a2f65732e0f42014001380230018218021001081e0a3d746e6e6d64612e0f42';",
          "37: } {1}",
          "39: reset_db",
          "40: do_execsql_test 2.0 {",
          "41:   CREATE VIRTUAL TABLE t0 USING fts3(col0 INTEGER PRIMARY KEY,col1 VARCHAR(8),col2 BINARY,col3 BINARY);",
          "42:   INSERT INTO t0 VALUES (1, '1234','aaaa','bbbb');",
          "43:   SELECT snippet(t0)  FROM t0 WHERE t0 MATCH x'0a4d4d4d4d320a4f52d70a310a310a4e4541520a0a31f6ce0a4f520a0a310a310a310a4f520a75fc2a242424' ;",
          "44: } {<b>1</b>}",
          "46: set sqlite_fts3_enable_parentheses 0",
          "47: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9670abb582fc32dcce08fa143abef5f19029e56",
      "candidate_info": {
        "commit_hash": "d9670abb582fc32dcce08fa143abef5f19029e56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d9670abb582fc32dcce08fa143abef5f19029e56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/vdbe.c",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "When an INSERT is receiving content from a SELECT, run an OP_ReleaseReg opcode at the top of each iteration of the loop in order to prevent spurious OP_SCopy misuse complaints.  Ticket [de4b04149b9fdeae]\n\nFossilOrigin-Name: 6afadd3b3a40b0ef29fd14fb24c2a4b9479483e5f8b9125ce02d8daae662207f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cc12c18860bc4801a407cf45e88e23d3d40391f01a461fbac2cac5f102100e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:     addrInsTop = addrCont = sqlite3VdbeAddOp1(v, OP_Yield, dest.iSDParm);",
          "1024:     VdbeCoverage(v);",
          "1025:     if( ipkColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023:     sqlite3VdbeReleaseRegisters(pParse, regData, pTab->nCol, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1280:     sqlite3VdbeAddOp1(v, OP_Close, srcTab);",
          "1281:   }else if( pSelect ){",
          "1282:     sqlite3VdbeGoto(v, addrCont);",
          "1283:     sqlite3VdbeJumpHere(v, addrInsTop);",
          "1284:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1284: #ifdef SQLITE_DEBUG",
          "1288:     if( sqlite3VdbeGetOp(v, addrCont-1)->opcode==OP_ReleaseReg ){",
          "1289:       assert( sqlite3VdbeGetOp(v, addrCont)->opcode==OP_Yield );",
          "1290:       sqlite3VdbeChangeP5(v, 1);",
          "1291:     }",
          "1292: #endif",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "848: jump_to_p2_and_check_for_interrupt:",
          "849:   pOp = &aOp[pOp->p2 - 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849: #ifdef SQLITE_DEBUG",
          "853:   if( pOp->p5 ){",
          "854:     assert( pOp->p2 < (int)(pOp - aOp) );",
          "855:     assert( pOp->p2 > 1 );",
          "856:     pOp = &aOp[pOp->p2 - 2];",
          "857:     assert( pOp[1].opcode==OP_ReleaseReg );",
          "858:     goto check_for_interrupt;",
          "859:   }",
          "860: #endif",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:     pTabItem->fg.viaCoroutine = 0;",
          "871:   }else{",
          "872:     sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1); VdbeCoverage(v);",
          "873:   }",
          "875:   sqlite3VdbeJumpHere(v, addrTop);",
          "876:   sqlite3ReleaseTempReg(pParse, regRecord);",
          "",
          "[Removed Lines]",
          "874:   sqlite3VdbeChangeP5(v, SQLITE_STMTSTATUS_AUTOINDEX);",
          "",
          "[Added Lines]",
          "873:     sqlite3VdbeChangeP5(v, SQLITE_STMTSTATUS_AUTOINDEX);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:   SELECT * FROM t0;",
          "549: } {0 0 0}",
          "554: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551: # 2019-12-27 ticket de4b04149b9fdeae",
          "552: #",
          "553: reset_db",
          "554: do_catchsql_test gencol1-19.10 {",
          "555:   CREATE TABLE t0(",
          "556:     c0 INT AS(2) UNIQUE,",
          "557:     c1 TEXT UNIQUE,",
          "558:     FOREIGN KEY(c0) REFERENCES t0(c1)",
          "559:   );",
          "560:   INSERT INTO t0(c1) VALUES(0.16334143182538696), (0);",
          "561: } {1 {UNIQUE constraint failed: t0.c0}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92e21ef0796e797b831a9f6b2e5edb0bd5c21442",
      "candidate_info": {
        "commit_hash": "92e21ef0796e797b831a9f6b2e5edb0bd5c21442",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92e21ef0796e797b831a9f6b2e5edb0bd5c21442",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "test/check.test",
          "test/conflict.test",
          "test/conflict2.test",
          "test/date2.test",
          "test/e_createtable.test",
          "test/fkey2.test",
          "test/func4.test",
          "test/in.test",
          "test/insert4.test",
          "test/istrue.test",
          "test/pager1.test",
          "test/quote.test",
          "test/without_rowid1.test",
          "test/without_rowid3.test"
        ],
        "message": "Include the original text of the CHECK constraint in the error message for anonymous CHECK constraints.\n\nFossilOrigin-Name: 5ce34a955bb36d77edc9951cb7ac2ef9c876d7d3ff5852af682f558e248f428c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/check.test||test/check.test",
          "test/conflict.test||test/conflict.test",
          "test/conflict2.test||test/conflict2.test",
          "test/date2.test||test/date2.test",
          "test/e_createtable.test||test/e_createtable.test",
          "test/fkey2.test||test/fkey2.test",
          "test/func4.test||test/func4.test",
          "test/in.test||test/in.test",
          "test/insert4.test||test/insert4.test",
          "test/istrue.test||test/istrue.test",
          "test/pager1.test||test/pager1.test",
          "test/quote.test||test/quote.test",
          "test/without_rowid1.test||test/without_rowid1.test",
          "test/without_rowid3.test||test/without_rowid3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aafb7a21041090e529491b0ce30c3902420be0551b1b2c55840a5fbb9105fb7d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1629:     pTab->pCheck = sqlite3ExprListAppend(pParse, pTab->pCheck, pCheckExpr);",
          "1630:     if( pParse->constraintName.n ){",
          "1631:       sqlite3ExprListSetName(pParse, pTab->pCheck, &pParse->constraintName, 1);",
          "1632:     }",
          "1633:   }else",
          "1634: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1634:     }else{",
          "1635:       Token t;",
          "1636:       for(zStart++; sqlite3Isspace(zStart[0]); zStart++){}",
          "1637:       while( sqlite3Isspace(zEnd[-1]) ){ zEnd--; }",
          "1638:       t.z = zStart;",
          "1639:       t.n = (int)(zEnd - t.z);",
          "1640:       sqlite3ExprListSetName(pParse, pTab->pCheck, &t, 1);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:                                  {sqlite3AddPrimaryKey(pParse,0,R,I,Z);}",
          "367: ccons ::= UNIQUE onconf(R).      {sqlite3CreateIndex(pParse,0,0,0,0,R,0,0,0,0,",
          "368:                                    SQLITE_IDXTYPE_UNIQUE);}",
          "370: ccons ::= REFERENCES nm(T) eidlist_opt(TA) refargs(R).",
          "371:                                  {sqlite3CreateForeignKey(pParse,0,&T,TA,R);}",
          "372: ccons ::= defer_subclause(D).    {sqlite3DeferForeignKey(pParse,D);}",
          "",
          "[Removed Lines]",
          "369: ccons ::= CHECK LP expr(X) RP.   {sqlite3AddCheckConstraint(pParse,X);}",
          "",
          "[Added Lines]",
          "369: ccons ::= CHECK LP(A) expr(X) RP(B).  {sqlite3AddCheckConstraint(pParse,X,A.z,B.z);}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420: tcons ::= UNIQUE LP sortlist(X) RP onconf(R).",
          "421:                                  {sqlite3CreateIndex(pParse,0,0,0,X,R,0,0,0,0,",
          "422:                                        SQLITE_IDXTYPE_UNIQUE);}",
          "425: tcons ::= FOREIGN KEY LP eidlist(FA) RP",
          "426:           REFERENCES nm(T) eidlist_opt(TA) refargs(R) defer_subclause_opt(D). {",
          "427:     sqlite3CreateForeignKey(pParse, FA, &T, TA, R);",
          "",
          "[Removed Lines]",
          "423: tcons ::= CHECK LP expr(E) RP onconf.",
          "424:                                  {sqlite3AddCheckConstraint(pParse,E);}",
          "",
          "[Added Lines]",
          "423: tcons ::= CHECK LP(A) expr(E) RP(B) onconf.",
          "424:                                  {sqlite3AddCheckConstraint(pParse,E,A.z,B.z);}",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4184: void sqlite3AddColumn(Parse*,Token*,Token*);",
          "4185: void sqlite3AddNotNull(Parse*, int);",
          "4186: void sqlite3AddPrimaryKey(Parse*, ExprList*, int, int, int);",
          "4188: void sqlite3AddDefaultValue(Parse*,Expr*,const char*,const char*);",
          "4189: void sqlite3AddCollateType(Parse*, Token*);",
          "4190: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "",
          "[Removed Lines]",
          "4187: void sqlite3AddCheckConstraint(Parse*, Expr*);",
          "",
          "[Added Lines]",
          "4187: void sqlite3AddCheckConstraint(Parse*, Expr*, const char*, const char*);",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   catchsql {",
          "41:     INSERT INTO t1 VALUES(6,7);",
          "42:   }",
          "44: do_test check-1.4 {",
          "45:   execsql {",
          "46:     SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "43: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "43: } {1 {CHECK constraint failed: x<5}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   catchsql {",
          "51:     INSERT INTO t1 VALUES(4,3);",
          "52:   }",
          "54: do_test check-1.6 {",
          "55:   execsql {",
          "56:     SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "53: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "53: } {1 {CHECK constraint failed: y>x}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:   catchsql {",
          "88:     UPDATE t1 SET x=7 WHERE x==2",
          "89:   }",
          "91: do_test check-1.13 {",
          "92:   execsql {",
          "93:     SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "90: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "90: } {1 {CHECK constraint failed: x<5}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:   catchsql {",
          "98:     UPDATE t1 SET x=5 WHERE x==2",
          "99:   }",
          "101: do_test check-1.15 {",
          "102:   execsql {",
          "103:     SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "100: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "100: } {1 {CHECK constraint failed: x<5}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:   catchsql {",
          "187:     INSERT INTO t2b VALUES('xyzzy','hi',5);",
          "188:   }",
          "190: do_test check-2.12 {",
          "191:   execsql {",
          "192:     CREATE TABLE t2c(",
          "",
          "[Removed Lines]",
          "189: } {1 {CHECK constraint failed: t2b}}",
          "",
          "[Added Lines]",
          "189: } {1 {CHECK constraint failed: typeof(coalesce(x,0))=='integer'}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:   catchsql {",
          "272:     INSERT INTO t3 VALUES(111,222,333);",
          "273:   }",
          "276: do_test check-4.1 {",
          "277:   execsql {",
          "",
          "[Removed Lines]",
          "274: } {1 {CHECK constraint failed: t3}}",
          "",
          "[Added Lines]",
          "274: } {1 {CHECK constraint failed: t3.x<25}}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "313:   catchsql {",
          "314:     UPDATE t4 SET x=0, y=1;",
          "315:   }",
          "317: do_test check-4.7 {",
          "318:   execsql {",
          "319:     SELECT * FROM t4;",
          "",
          "[Removed Lines]",
          "316: } {1 {CHECK constraint failed: t4}}",
          "",
          "[Added Lines]",
          "316: } {1 {CHECK constraint failed: x+y==11",
          "317:         OR x*y==12",
          "318:         OR x/y BETWEEN 5 AND 8",
          "319:         OR -x==y+10}}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "335:   catchsql {",
          "336:     UPDATE t4 SET x=0, y=2;",
          "337:   }",
          "339: ifcapable vacuum {",
          "340:   do_test check_4.10 {",
          "341:     catchsql {",
          "",
          "[Removed Lines]",
          "338: } {1 {CHECK constraint failed: t4}}",
          "",
          "[Added Lines]",
          "341: } {1 {CHECK constraint failed: x+y==11",
          "342:         OR x*y==12",
          "343:         OR x/y BETWEEN 5 AND 8",
          "344:         OR -x==y+10}}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "386:   catchsql {",
          "387:     UPDATE OR FAIL t1 SET x=7-x, y=y+1;",
          "388:   }",
          "390: do_test check-6.6 {",
          "391:   execsql {",
          "392:     SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "389: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "395: } {1 {CHECK constraint failed: x<5}}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "398:     INSERT INTO t1 VALUES(1,30.0);",
          "399:     INSERT OR ROLLBACK INTO t1 VALUES(8,40.0);",
          "400:   }",
          "402: do_test check-6.8 {",
          "403:   catchsql {",
          "404:     COMMIT;",
          "",
          "[Removed Lines]",
          "401: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "407: } {1 {CHECK constraint failed: x<5}}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "417:   catchsql {",
          "418:     REPLACE INTO t1 VALUES(6,7);",
          "419:   }",
          "421: do_test check-6.13 {",
          "422:   execsql {SELECT * FROM t1}",
          "423: } {3 12.0 2 20.0}",
          "",
          "[Removed Lines]",
          "420: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "426: } {1 {CHECK constraint failed: x<5}}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "446: do_execsql_test  7.1 { CREATE TABLE t6(a CHECK (myfunc(a))) }",
          "447: do_execsql_test  7.2 { INSERT INTO t6 VALUES(9)  }",
          "448: do_catchsql_test 7.3 { INSERT INTO t6 VALUES(11) } \\",
          "451: do_test 7.4 {",
          "452:   sqlite3 db2 test.db",
          "",
          "[Removed Lines]",
          "449:           {1 {CHECK constraint failed: t6}}",
          "",
          "[Added Lines]",
          "455:           {1 {CHECK constraint failed: myfunc(a)}}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "469: do_test 7.8 {",
          "470:   db2 func myfunc myfunc",
          "471:   catchsql { INSERT INTO t6 VALUES(12) } db2",
          "474: # 2013-08-02:  Silently ignore database name qualifiers in CHECK constraints.",
          "475: #",
          "",
          "[Removed Lines]",
          "472: } {1 {CHECK constraint failed: t6}}",
          "",
          "[Added Lines]",
          "478: } {1 {CHECK constraint failed: myfunc(a)}}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "550: } {}",
          "551: do_catchsql_test 12.21 {",
          "552:   INSERT INTO t1(a) VALUES('xyz');",
          "554: do_catchsql_test 12.22 {",
          "555:   INSERT INTO t1(a) VALUES(123);",
          "557: do_execsql_test 12.30 {",
          "558:   DROP TABLE t1;",
          "559:   CREATE TABLE t1(a TEXT, CHECK(NOT(a=+a)));",
          "",
          "[Removed Lines]",
          "553: } {1 {CHECK constraint failed: t1}}",
          "556: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "559: } {1 {CHECK constraint failed: a<>+a}}",
          "562: } {1 {CHECK constraint failed: a<>+a}}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "561: } {}",
          "562: do_catchsql_test 12.31 {",
          "563:   INSERT INTO t1(a) VALUES('xyz');",
          "565: do_catchsql_test 12.32 {",
          "566:   INSERT INTO t1(a) VALUES(123);",
          "568: do_execsql_test 12.40 {",
          "569:   DROP TABLE t1;",
          "570:   CREATE TABLE t1(a TEXT, CHECK(NOT(a<>+a)));",
          "",
          "[Removed Lines]",
          "564: } {1 {CHECK constraint failed: t1}}",
          "567: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "570: } {1 {CHECK constraint failed: NOT(a=+a)}}",
          "573: } {1 {CHECK constraint failed: NOT(a=+a)}}",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "585: } {NULL}",
          "586: do_catchsql_test 12.61 {",
          "587:   INSERT INTO t1(a) VALUES(456);",
          "589: do_execsql_test 12.70 {",
          "590:   DROP TABLE t1;",
          "591:   CREATE TABLE t1(a TEXT, CHECK(a BETWEEN +a AND 999999));",
          "",
          "[Removed Lines]",
          "588: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "594: } {1 {CHECK constraint failed: a NOT BETWEEN 0 AND +a}}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "600: } {NULL}",
          "601: do_catchsql_test 12.81 {",
          "602:   INSERT INTO t1(a) VALUES(456);",
          "605: finish_test",
          "",
          "[Removed Lines]",
          "603: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "609: } {1 {CHECK constraint failed: a NOT BETWEEN +a AND 999999}}",
          "",
          "---------------"
        ],
        "test/conflict.test||test/conflict.test": [
          "File: test/conflict.test -> test/conflict.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "813:   catchsql {",
          "814:     REPLACE INTO t13 VALUES(2);",
          "815:   }",
          "817: verify_ex_errcode conflict-13.1b SQLITE_CONSTRAINT_CHECK",
          "818: do_test conflict-13.2 {",
          "819:   execsql {",
          "",
          "[Removed Lines]",
          "816: } {1 {CHECK constraint failed: t13}}",
          "",
          "[Added Lines]",
          "816: } {1 {CHECK constraint failed: a!=2}}",
          "",
          "---------------"
        ],
        "test/conflict2.test||test/conflict2.test": [
          "File: test/conflict2.test -> test/conflict2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:   catchsql {",
          "812:     REPLACE INTO t13 VALUES(2);",
          "813:   }",
          "815: verify_ex_errcode conflict2-13.1b SQLITE_CONSTRAINT_CHECK",
          "816: do_test conflict2-13.2 {",
          "817:   execsql {",
          "",
          "[Removed Lines]",
          "814: } {1 {CHECK constraint failed: t13}}",
          "",
          "[Added Lines]",
          "814: } {1 {CHECK constraint failed: a!=2}}",
          "",
          "---------------"
        ],
        "test/date2.test||test/date2.test": [
          "File: test/date2.test -> test/date2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: } {2017-07-20 one}",
          "37: do_catchsql_test date2-130 {",
          "38:   INSERT INTO t1(x,y) VALUES('2017-08-01','two');",
          "41: do_execsql_test date2-200 {",
          "42:   CREATE TABLE t2(x,y);",
          "",
          "[Removed Lines]",
          "39: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "39: } {1 {CHECK constraint failed: date(x) BETWEEN '2017-07-01' AND '2017-07-31'}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: } {0 {}}",
          "139: do_catchsql_test date2-602 {",
          "140:   INSERT INTO t601(a,b) VALUES(1e100, '1970-01-01');",
          "142: do_catchsql_test date2-603 {",
          "143:   INSERT INTO t601(a,b) VALUES(10, 'now');",
          "144: } {1 {non-deterministic use of julianday() in a CHECK constraint}}",
          "",
          "[Removed Lines]",
          "141: } {1 {CHECK constraint failed: t601}}",
          "",
          "[Added Lines]",
          "141: } {1 {CHECK constraint failed: a<julianday(b)}}",
          "",
          "---------------"
        ],
        "test/e_createtable.test||test/e_createtable.test": [
          "File: test/e_createtable.test -> test/e_createtable.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1433: }",
          "1435: do_createtable_tests 4.11 -error {CHECK constraint failed: %s} {",
          "1450: }",
          "1452: # EVIDENCE-OF: R-34109-39108 If the CHECK expression evaluates to NULL,",
          "",
          "[Removed Lines]",
          "1436:   1a    \"INSERT INTO x1 VALUES('one', 0)\"       {x1}",
          "1437:   1b    \"INSERT INTO t1 VALUES('one', -4.0)\"    {t1}",
          "1439:   2a    \"INSERT INTO x2 VALUES('abc', 1)\"       {x2}",
          "1440:   2b    \"INSERT INTO t2 VALUES('abc', 1)\"       {t2}",
          "1442:   3a    \"INSERT INTO x2 VALUES(0, 'abc')\"       {x2}",
          "1443:   3b    \"INSERT INTO t2 VALUES(0, 'abc')\"       {t2}",
          "1445:   4a    \"UPDATE t1 SET b=-1 WHERE rowid=1\"      {t1}",
          "1446:   4b    \"UPDATE x1 SET b=-1 WHERE rowid=1\"      {x1}",
          "1448:   4a    \"UPDATE x2 SET a='' WHERE rowid=1\"      {x2}",
          "1449:   4b    \"UPDATE t2 SET a='' WHERE rowid=1\"      {t2}",
          "",
          "[Added Lines]",
          "1436:   1a    \"INSERT INTO x1 VALUES('one', 0)\"       {b>0}",
          "1437:   1b    \"INSERT INTO t1 VALUES('one', -4.0)\"    {b>0}",
          "1439:   2a    \"INSERT INTO x2 VALUES('abc', 1)\"       {a||b}",
          "1440:   2b    \"INSERT INTO t2 VALUES('abc', 1)\"       {a||b}",
          "1442:   3a    \"INSERT INTO x2 VALUES(0, 'abc')\"       {a||b}",
          "1443:   3b    \"INSERT INTO t2 VALUES(0, 'abc')\"       {a||b}",
          "1445:   4a    \"UPDATE t1 SET b=-1 WHERE rowid=1\"      {b>0}",
          "1446:   4b    \"UPDATE x1 SET b=-1 WHERE rowid=1\"      {b>0}",
          "1448:   4a    \"UPDATE x2 SET a='' WHERE rowid=1\"      {a||b}",
          "1449:   4b    \"UPDATE t2 SET a='' WHERE rowid=1\"      {a||b}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1639: do_execsql_test  4.18.2 { BEGIN; INSERT INTO t4 VALUES(5, 6) }",
          "1640: do_catchsql_test 4.18.3 {",
          "1641:   INSERT INTO t4 SELECT a+4, b+4 FROM t4",
          "1643: do_test e_createtable-4.18.4 { sqlite3_get_autocommit db } 0",
          "1644: do_execsql_test 4.18.5 { SELECT * FROM t4 } {1 2 3 4 5 6}",
          "",
          "[Removed Lines]",
          "1642: } {1 {CHECK constraint failed: t4}}",
          "",
          "[Added Lines]",
          "1642: } {1 {CHECK constraint failed: b!=10}}",
          "",
          "---------------"
        ],
        "test/fkey2.test||test/fkey2.test": [
          "File: test/fkey2.test -> test/fkey2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "417: } {}",
          "418: do_test fkey2-3.1.3 {",
          "419:   catchsql { UPDATE ab SET a = 5 }",
          "421: do_test fkey2-3.1.4 {",
          "422:   execsql { SELECT * FROM ab }",
          "423: } {1 b}",
          "424: do_test fkey2-3.1.4 {",
          "425:   execsql BEGIN;",
          "426:   catchsql { UPDATE ab SET a = 5 }",
          "428: do_test fkey2-3.1.5 {",
          "429:   execsql COMMIT;",
          "430:   execsql { SELECT * FROM ab; SELECT * FROM cd; SELECT * FROM ef }",
          "",
          "[Removed Lines]",
          "420: } {1 {CHECK constraint failed: ef}}",
          "427: } {1 {CHECK constraint failed: ef}}",
          "",
          "[Added Lines]",
          "420: } {1 {CHECK constraint failed: e!=5}}",
          "427: } {1 {CHECK constraint failed: e!=5}}",
          "",
          "---------------"
        ],
        "test/func4.test||test/func4.test": [
          "File: test/func4.test -> test/func4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:     catchsql {",
          "382:       INSERT INTO t1 (x) VALUES (NULL);",
          "383:     }",
          "385:   do_test func4-3.3 {",
          "386:     catchsql {",
          "387:       INSERT INTO t1 (x) VALUES (NULL);",
          "388:     }",
          "390:   do_test func4-3.4 {",
          "391:     catchsql {",
          "392:       INSERT INTO t1 (x) VALUES ('');",
          "393:     }",
          "395:   do_test func4-3.5 {",
          "396:     catchsql {",
          "397:       INSERT INTO t1 (x) VALUES ('bad');",
          "398:     }",
          "400:   do_test func4-3.6 {",
          "401:     catchsql {",
          "402:       INSERT INTO t1 (x) VALUES ('1234bad');",
          "403:     }",
          "405:   do_test func4-3.7 {",
          "406:     catchsql {",
          "407:       INSERT INTO t1 (x) VALUES ('1234.56bad');",
          "408:     }",
          "410:   do_test func4-3.8 {",
          "411:     catchsql {",
          "412:       INSERT INTO t1 (x) VALUES (1234);",
          "",
          "[Removed Lines]",
          "384:   } {1 {CHECK constraint failed: t1}}",
          "389:   } {1 {CHECK constraint failed: t1}}",
          "394:   } {1 {CHECK constraint failed: t1}}",
          "399:   } {1 {CHECK constraint failed: t1}}",
          "404:   } {1 {CHECK constraint failed: t1}}",
          "409:   } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "384:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "389:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "394:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "399:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "404:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "409:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "416:     catchsql {",
          "417:       INSERT INTO t1 (x) VALUES (1234.56);",
          "418:     }",
          "420:   do_test func4-3.10 {",
          "421:     catchsql {",
          "422:       INSERT INTO t1 (x) VALUES ('1234');",
          "",
          "[Removed Lines]",
          "419:   } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "419:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426:     catchsql {",
          "427:       INSERT INTO t1 (x) VALUES ('1234.56');",
          "428:     }",
          "430:   do_test func4-3.12 {",
          "431:     catchsql {",
          "432:       INSERT INTO t1 (x) VALUES (ZEROBLOB(4));",
          "433:     }",
          "435:   do_test func4-3.13 {",
          "436:     catchsql {",
          "437:       INSERT INTO t1 (x) VALUES (X'');",
          "438:     }",
          "440:   do_test func4-3.14 {",
          "441:     catchsql {",
          "442:       INSERT INTO t1 (x) VALUES (X'1234');",
          "443:     }",
          "445:   do_test func4-3.15 {",
          "446:     catchsql {",
          "447:       INSERT INTO t1 (x) VALUES (X'12345678');",
          "448:     }",
          "450:   do_test func4-3.16 {",
          "451:     catchsql {",
          "452:       INSERT INTO t1 (x) VALUES ('1234.00');",
          "",
          "[Removed Lines]",
          "429:   } {1 {CHECK constraint failed: t1}}",
          "434:   } {1 {CHECK constraint failed: t1}}",
          "439:   } {1 {CHECK constraint failed: t1}}",
          "444:   } {1 {CHECK constraint failed: t1}}",
          "449:   } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "429:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "434:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "439:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "444:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "449:   } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "467:       catchsql {",
          "468:         INSERT INTO t1 (x) VALUES (9223372036854775808);",
          "469:       }",
          "471:   }",
          "472:   do_execsql_test func4-3.20 {",
          "473:     SELECT x FROM t1 WHERE x>0 ORDER BY x;",
          "",
          "[Removed Lines]",
          "470:     } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "470:     } {1 {CHECK constraint failed: tointeger(x) IS NOT NULL}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "483:       catchsql {",
          "484:         INSERT INTO t2 (x) VALUES (NULL);",
          "485:       }",
          "487:     do_test func4-4.3 {",
          "488:       catchsql {",
          "489:         INSERT INTO t2 (x) VALUES (NULL);",
          "490:       }",
          "492:     do_test func4-4.4 {",
          "493:       catchsql {",
          "494:         INSERT INTO t2 (x) VALUES ('');",
          "495:       }",
          "497:     do_test func4-4.5 {",
          "498:       catchsql {",
          "499:         INSERT INTO t2 (x) VALUES ('bad');",
          "500:       }",
          "502:     do_test func4-4.6 {",
          "503:       catchsql {",
          "504:         INSERT INTO t2 (x) VALUES ('1234bad');",
          "505:       }",
          "507:     do_test func4-4.7 {",
          "508:       catchsql {",
          "509:         INSERT INTO t2 (x) VALUES ('1234.56bad');",
          "510:       }",
          "512:     do_test func4-4.8 {",
          "513:       catchsql {",
          "514:         INSERT INTO t2 (x) VALUES (1234);",
          "",
          "[Removed Lines]",
          "486:     } {1 {CHECK constraint failed: t2}}",
          "491:     } {1 {CHECK constraint failed: t2}}",
          "496:     } {1 {CHECK constraint failed: t2}}",
          "501:     } {1 {CHECK constraint failed: t2}}",
          "506:     } {1 {CHECK constraint failed: t2}}",
          "511:     } {1 {CHECK constraint failed: t2}}",
          "",
          "[Added Lines]",
          "486:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "491:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "496:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "501:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "506:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "511:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "533:       catchsql {",
          "534:         INSERT INTO t2 (x) VALUES (ZEROBLOB(4));",
          "535:       }",
          "537:     do_test func4-4.13 {",
          "538:       catchsql {",
          "539:         INSERT INTO t2 (x) VALUES (X'');",
          "540:       }",
          "542:     do_test func4-4.14 {",
          "543:       catchsql {",
          "544:         INSERT INTO t2 (x) VALUES (X'1234');",
          "545:       }",
          "547:     do_test func4-4.15 {",
          "548:       catchsql {",
          "549:         INSERT INTO t2 (x) VALUES (X'12345678');",
          "550:       }",
          "552:     do_execsql_test func4-4.16 {",
          "553:       SELECT x FROM t2 ORDER BY x;",
          "554:     } {1234.0 1234.0 1234.56 1234.56}",
          "",
          "[Removed Lines]",
          "536:     } {1 {CHECK constraint failed: t2}}",
          "541:     } {1 {CHECK constraint failed: t2}}",
          "546:     } {1 {CHECK constraint failed: t2}}",
          "551:     } {1 {CHECK constraint failed: t2}}",
          "",
          "[Added Lines]",
          "536:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "541:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "546:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "551:     } {1 {CHECK constraint failed: toreal(x) IS NOT NULL}}",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:   catchsql {",
          "333:     INSERT INTO t5 VALUES(4);",
          "334:   }",
          "337: # Ticket #1821",
          "338: #",
          "",
          "[Removed Lines]",
          "335: } {1 {CHECK constraint failed: t5}}",
          "",
          "[Added Lines]",
          "335: } {1 {CHECK constraint failed: a IN (111,222,333)}}",
          "",
          "---------------"
        ],
        "test/insert4.test||test/insert4.test": [
          "File: test/insert4.test -> test/insert4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   catchsql {",
          "56:     INSERT INTO t1 SELECT * FROM t2;",
          "57:   }",
          "59: xferopt_test insert4-1.2 0",
          "60: do_test insert4-1.3 {",
          "61:   execsql {",
          "",
          "[Removed Lines]",
          "58: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "58: } {1 {CHECK constraint failed: b>a}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     INSERT INTO t1 SELECT * FROM t2 LIMIT 1;",
          "103:     SELECT * FROM t1;",
          "104:   }",
          "106: xferopt_test insert4-2.3.4 0",
          "108: # Do not run the transfer optimization if there is a DISTINCT",
          "",
          "[Removed Lines]",
          "105: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "105: } {1 {CHECK constraint failed: b>a}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     DELETE FROM t1;",
          "121:     INSERT INTO t1 SELECT DISTINCT * FROM t2;",
          "122:   }",
          "124: xferopt_test insert4-2.4.4 0",
          "126: # The following procedure constructs two tables then tries to transfer",
          "",
          "[Removed Lines]",
          "123: } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "123: } {1 {CHECK constraint failed: b>a}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:   catchsql {",
          "317:     INSERT INTO t6b SELECT * FROM t6a;",
          "318:   }",
          "320: do_test insert4-6.7 {",
          "321:   execsql {",
          "322:     DROP TABLE t6b;",
          "",
          "[Removed Lines]",
          "319: } {1 {CHECK constraint failed: t6b}}",
          "",
          "[Added Lines]",
          "319: } {1 {CHECK constraint failed: x<>'abc' COLLATE nocase}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "325:   catchsql {",
          "326:     INSERT INTO t6b SELECT * FROM t6a;",
          "327:   }",
          "330: # Ticket [6284df89debdfa61db8073e062908af0c9b6118e]",
          "331: # Disable the xfer optimization if the destination table contains",
          "",
          "[Removed Lines]",
          "328: } {1 {CHECK constraint failed: t6b}}",
          "",
          "[Added Lines]",
          "328: } {1 {CHECK constraint failed: x COLLATE nocase <>'abc'}}",
          "",
          "---------------"
        ],
        "test/istrue.test||test/istrue.test": [
          "File: test/istrue.test -> test/istrue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: } {1 1 0 {} {}}",
          "113: do_catchsql_test istrue-521 {",
          "114:   INSERT INTO t2 VALUES(2,false,false,null,null);",
          "116: do_catchsql_test istrue-522 {",
          "117:   INSERT INTO t2 VALUES(2,true,true,null,null);",
          "119: do_catchsql_test istrue-523 {",
          "120:   INSERT INTO t2 VALUES(2,true,false,true,null);",
          "122: do_catchsql_test istrue-524 {",
          "123:   INSERT INTO t2 VALUES(2,true,false,null,false);",
          "126: foreach {tn val} [list 1 NaN 2 -NaN 3 NaN0 4 -NaN0 5 Inf 6 -Inf] {",
          "127:   do_execsql_test istrue-600.$tn.1 {",
          "",
          "[Removed Lines]",
          "115: } {1 {CHECK constraint failed: t2}}",
          "118: } {1 {CHECK constraint failed: t2}}",
          "121: } {1 {CHECK constraint failed: t2}}",
          "124: } {1 {CHECK constraint failed: t2}}",
          "",
          "[Added Lines]",
          "115: } {1 {CHECK constraint failed: b IS TRUE}}",
          "118: } {1 {CHECK constraint failed: c IS FALSE}}",
          "121: } {1 {CHECK constraint failed: d IS NOT TRUE}}",
          "124: } {1 {CHECK constraint failed: e IS NOT FALSE}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: } {}",
          "194: do_catchsql_test istrue-841 {",
          "195:   INSERT INTO False VALUES(5,6,7);",
          "197: do_execsql_test istrue-850 {",
          "198:   SELECT 9 IN (false.false) FROM false;",
          "199: } {0}",
          "",
          "[Removed Lines]",
          "196: } {1 {CHECK constraint failed: false}}",
          "",
          "[Added Lines]",
          "196: } {1 {CHECK constraint failed: 5 IN (false.false)}}",
          "",
          "---------------"
        ],
        "test/pager1.test||test/pager1.test": [
          "File: test/pager1.test -> test/pager1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "276: } {3 0}",
          "277: do_catchsql_test pager1-3.1.3 {",
          "278:     INSERT INTO t1 SELECT a+3, randomblob(1500) FROM t1",
          "280: do_execsql_test pager1-3.4 { SELECT * FROM counter } {3 0}",
          "281: do_execsql_test pager1-3.5 { SELECT a FROM t1 } {1 2 3}",
          "282: do_execsql_test pager1-3.6 { COMMIT } {}",
          "",
          "[Removed Lines]",
          "279: } {1 {CHECK constraint failed: counter}}",
          "",
          "[Added Lines]",
          "279: } {1 {CHECK constraint failed: i<5}}",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: }",
          "123: do_catchsql_test 2.3.2 {",
          "124:   INSERT INTO xyz VALUES(1, 2, 'null');",
          "127: do_execsql_test 2.4 {",
          "128:   INSERT INTO t1 VALUES(1, 2, 3);",
          "",
          "[Removed Lines]",
          "125: } {1 {CHECK constraint failed: xyz}}",
          "",
          "[Added Lines]",
          "125: } {1 {CHECK constraint failed: c!=\"null\"}}",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "341: } {}",
          "342: do_catchsql_test 7.2 {",
          "343:   INSERT INTO t70a(rowid,a,b) VALUES(33,99,'xyzzy');",
          "345: do_catchsql_test 7.3 {",
          "346:   CREATE TABLE t70b(",
          "347:      a INT CHECK( rowid!=33 ),",
          "",
          "[Removed Lines]",
          "344: } {1 {CHECK constraint failed: t70a}}",
          "",
          "[Added Lines]",
          "344: } {1 {CHECK constraint failed: rowid!=33}}",
          "",
          "---------------"
        ],
        "test/without_rowid3.test||test/without_rowid3.test": [
          "File: test/without_rowid3.test -> test/without_rowid3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "417: } {}",
          "418: do_test without_rowid3-3.1.3 {",
          "419:   catchsql { UPDATE ab SET a = 5 }",
          "421: do_test without_rowid3-3.1.4 {",
          "422:   execsql { SELECT * FROM ab }",
          "423: } {1 b}",
          "424: do_test without_rowid3-3.1.4 {",
          "425:   execsql BEGIN;",
          "426:   catchsql { UPDATE ab SET a = 5 }",
          "428: do_test without_rowid3-3.1.5 {",
          "429:   execsql COMMIT;",
          "430:   execsql { SELECT * FROM ab; SELECT * FROM cd; SELECT * FROM ef }",
          "",
          "[Removed Lines]",
          "420: } {1 {CHECK constraint failed: ef}}",
          "427: } {1 {CHECK constraint failed: ef}}",
          "",
          "[Added Lines]",
          "420: } {1 {CHECK constraint failed: e!=5}}",
          "427: } {1 {CHECK constraint failed: e!=5}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f488bc11473d1d869e1670e8c279a914e4d790e3",
      "candidate_info": {
        "commit_hash": "f488bc11473d1d869e1670e8c279a914e4d790e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f488bc11473d1d869e1670e8c279a914e4d790e3",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Avoid a potential buffer overread in fts3 when processing corrupt records.\n\nFossilOrigin-Name: 4d0cfb1236884349168f8e2ec5e18c0232965148af78615e0d5c9b0e13a35422",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2855:   return SQLITE_OK;",
          "2856: }",
          "2859: int sqlite3Fts3SegReaderStep(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2858: static int fts3GrowSegReaderBuffer(Fts3MultiSegReader *pCsr, int nReq){",
          "2859:   if( nReq>pCsr->nBuffer ){",
          "2860:     char *aNew;",
          "2861:     pCsr->nBuffer = nReq*2;",
          "2862:     aNew = sqlite3_realloc(pCsr->aBuffer, pCsr->nBuffer);",
          "2863:     if( !aNew ){",
          "2864:       return SQLITE_NOMEM;",
          "2865:     }",
          "2866:     pCsr->aBuffer = aNew;",
          "2867:   }",
          "2868:   return SQLITE_OK;",
          "2869: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2989:           }",
          "2991:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "3002:           if( isFirst ){",
          "3003:             char *a = &pCsr->aBuffer[nDoclist];",
          "",
          "[Removed Lines]",
          "2992:           if( nDoclist+nByte>pCsr->nBuffer ){",
          "2993:             char *aNew;",
          "2994:             pCsr->nBuffer = (nDoclist+nByte)*2;",
          "2995:             aNew = sqlite3_realloc(pCsr->aBuffer, pCsr->nBuffer);",
          "2996:             if( !aNew ){",
          "2997:               return SQLITE_NOMEM;",
          "2998:             }",
          "2999:             pCsr->aBuffer = aNew;",
          "3000:           }",
          "",
          "[Added Lines]",
          "3006:           rc = fts3GrowSegReaderBuffer(pCsr, nByte+nDoclist);",
          "3007:           if( rc ) return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3022:         fts3SegReaderSort(apSegment, nMerge, j, xCmp);",
          "3023:       }",
          "3024:       if( nDoclist>0 ){",
          "3025:         pCsr->aDoclist = pCsr->aBuffer;",
          "3026:         pCsr->nDoclist = nDoclist;",
          "3027:         rc = SQLITE_ROW;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3032:         rc = fts3GrowSegReaderBuffer(pCsr, nDoclist+FTS3_NODE_PADDING);",
          "3033:         if( rc ) return rc;",
          "3034:         memset(&pCsr->aBuffer[nDoclist], 0, FTS3_NODE_PADDING);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa9d93cf32fac4b86044acf5d1b9ea2f36e964ed7142cf1d270986c9ef3fb766",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6151: set sqlite_fts3_enable_parentheses $saved",
          "6153: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6153: #-------------------------------------------------------------------------",
          "6154: reset_db",
          "6155: do_execsql_test 44.1 {",
          "6156:   CREATE VIRTUAL TABLE t0 USING fts3(col0 INTEGER PRIMARY KEY,col1 VARCHAR(8),col2 BINARY,col3 BINARY);",
          "6157:   INSERT INTO t0_content VALUES(0,NULL,NULL,NULL,NULL);",
          "6158:   INSERT INTO t0_segdir VALUES(0,0,0,0,'0 42',X'00013103010200010332333405010201ba00000461616161050101020200000462626262050101030200');",
          "6159: }",
          "6161: do_execsql_test 44.2 {",
          "6162:   SELECT matchinfo(t0, t0) IS NULL FROM t0 WHERE t0 MATCH '1*'",
          "6163: } {0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02c17a4da7f86f7076eb2a91d1afc959df3ec0b6",
      "candidate_info": {
        "commit_hash": "02c17a4da7f86f7076eb2a91d1afc959df3ec0b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/02c17a4da7f86f7076eb2a91d1afc959df3ec0b6",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the \"shelltest\" target to the MSVC makefile as well.\n\nFossilOrigin-Name: 9924c0456bfcd2058c9620a93dfbfd4c7d960c68910ce6aed7364dff42baba5c",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2452:  @set PATH=$(LIBTCLPATH);$(PATH)",
          "2453:  .\\testfixture.exe $(TOP)\\test\\main.test $(TESTOPTS)",
          "2455: sqlite3_analyzer.c: $(SQLITE3C) $(SQLITE3H) $(TOP)\\src\\tclsqlite.c $(TOP)\\tool\\spaceanal.tcl $(TOP)\\tool\\mkccode.tcl $(TOP)\\tool\\sqlite3_analyzer.c.in $(SQLITE_TCL_DEP)",
          "2456:  $(TCLSH_CMD) $(TOP)\\tool\\mkccode.tcl $(TOP)\\tool\\sqlite3_analyzer.c.in > $@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2455: shelltest: $(TESTPROGS)",
          "2456:  .\\testfixture.exe $(TOP)\\test\\permutations.test shell",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 50d4ddf1330b88551de51439eb535f385dee6b53013802dd62f832d16b3025b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}