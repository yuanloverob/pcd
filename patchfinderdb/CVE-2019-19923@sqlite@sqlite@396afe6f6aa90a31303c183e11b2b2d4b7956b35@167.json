{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a79bcf358bcf84f0d42f091da132be82412ca120",
      "candidate_info": {
        "commit_hash": "a79bcf358bcf84f0d42f091da132be82412ca120",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a79bcf358bcf84f0d42f091da132be82412ca120",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Prevent unsigned 32-bit integer overflow from leading to a buffer overread inside of an assert().  The problem fixed here is no reachable in production code.\n\nFossilOrigin-Name: 0f850a25d67a752fe1e9059c0c3f78e00c222113e556a7605fd3c50817b573cb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 726e398b9ddc15ea1b67c40e2a12ddf5d04428a866699588c5fa1af75af846e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3888:     ){",
          "3889:       break;",
          "3890:     }",
          "",
          "[Removed Lines]",
          "3886:     if( d1+serial_type1+2>(u32)nKey1",
          "3887:      && d1+sqlite3VdbeSerialTypeLen(serial_type1)>(u32)nKey1",
          "",
          "[Added Lines]",
          "3886:     if( d1+(u64)serial_type1+2>(u64)nKey1",
          "3887:      && d1+(u64)sqlite3VdbeSerialTypeLen(serial_type1)>(u64)nKey1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
      "candidate_info": {
        "commit_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix another potential \"jump depends on uninitialized value\" warning.\n\nFossilOrigin-Name: 633b214e9b9d99788ed72ab4823a69a43c7c40ed07fb76c7d56c50453c0e58ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b6751cd90601a1e2744a7d233c973291ecb783801b9327c3b99734dd22bcd27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2268: ){",
          "2269:   WhereTerm *pTerm, *pX;",
          "2270:   Bitmask notAllowed = ~(pLoop->prereq|pLoop->maskSelf);",
          "2274:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "",
          "[Removed Lines]",
          "2271:   int i, j, k;",
          "",
          "[Added Lines]",
          "2271:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2294:         pLoop->nOut--;",
          "2295:         if( pTerm->eOperator&(WO_EQ|WO_IS) ){",
          "2296:           Expr *pRight = pTerm->pExpr->pRight;",
          "2297:           testcase( pTerm->pExpr->op==TK_IS );",
          "2298:           if( sqlite3ExprIsInteger(pRight, &k) && k>=(-1) && k<=1 ){",
          "2299:             k = 10;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2297:           int k = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e691dcb506e01077e8d3af90e19714eac1373eb4",
      "candidate_info": {
        "commit_hash": "e691dcb506e01077e8d3af90e19714eac1373eb4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e691dcb506e01077e8d3af90e19714eac1373eb4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/instr.test"
        ],
        "message": "Test cases for ticket [587791f92620090e]\n\nFossilOrigin-Name: ca0e3a83a1c015b346a791e6de03904d17a769c52dad0e3d71316c6e2e3f43c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/instr.test||test/instr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3fb40f518086c1e8d11eb1f4134e965450dbedfa4277bce39ef1e969fc747d38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/instr.test||test/instr.test": [
          "File: test/instr.test -> test/instr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:   SELECT instr(a, b) FROM x1;",
          "258: } 0",
          "260: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: # 2019-09-16 ticket https://www.sqlite.org/src/info/587791f92620090e",
          "261: #",
          "262: do_execsql_test instr-2.0 {",
          "263:   DROP TABLE IF EXISTS t0;",
          "264:   CREATE TABLE t0(c0 PRIMARY KEY, c1);",
          "265:   INSERT INTO t0(c0) VALUES (x'bb'), (0);",
          "266:   SELECT COUNT(*) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1;",
          "267: } {1}",
          "268: do_execsql_test instr-2.1 {",
          "269:   SELECT quote(c0) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1;",
          "270: } {X'BB'}",
          "271: do_execsql_test instr-2.2 {",
          "272:   DROP TABLE IF EXISTS t1;",
          "273:   CREATE TABLE t1(x);",
          "274:   INSERT INTO t1(x) VALUES('text'),(x'bb');",
          "275:   SELECT quote(x) FROM t1 WHERE instr(x'aabb',x);",
          "276: } {X'BB'}",
          "277: do_execsql_test instr-2.3 {",
          "278:   SELECT quote(x) FROM t1 WHERE x>'zzz' AND instr(x'aabb',x);",
          "279: } {X'BB'}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "378a7d356b954de44ea5274422d0ba5dfaf11501",
      "candidate_info": {
        "commit_hash": "378a7d356b954de44ea5274422d0ba5dfaf11501",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/378a7d356b954de44ea5274422d0ba5dfaf11501",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c",
          "test/cast.test"
        ],
        "message": "A string consisting of a single '.' is not a floating point literal with extra text at the end.  Fix for ticket [412bba9b22c677da]\n\nFossilOrigin-Name: 57050162294efec90caa5cc3c2f8c1a85215526adcf57b284ce2d2e799286b78",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 71643deb6bbad4b4a511bfd43b32245b50a555b508b90f33adf0656ae53292c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   if( z==zEnd && nDigit>0 && eValid && eType>0 ){",
          "562:     return eType;",
          "564:     return -1;",
          "565:   }else{",
          "566:     return 0;",
          "",
          "[Removed Lines]",
          "563:   }else if( eType>=2 && (eType==3 || eValid) ){",
          "",
          "[Added Lines]",
          "563:   }else if( eType>=2 && (eType==3 || eValid) && nDigit>0 ){",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:   SELECT CAST(c0 AS NUMERIC) FROM t0;",
          "432: } {1}",
          "434: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434: # 2019-06-10",
          "435: # https://sqlite.org/src/info/27de823723a41df45af3",
          "436: #",
          "437: do_execsql_test cast-7.30 {",
          "438:   SELECT -'.';",
          "439: } 0",
          "440: do_execsql_test cast-7.31 {",
          "441:   SELECT '.'+0;",
          "442: } 0",
          "443: do_execsql_test cast-7.32 {",
          "444:   SELECT CAST('.' AS numeric);",
          "445: } 0",
          "446: do_execsql_test cast-7.33 {",
          "447:   SELECT -CAST('.' AS numeric);",
          "448: } 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d00ad9a6561174ec7214af82e21b7a9a313ae156",
      "candidate_info": {
        "commit_hash": "d00ad9a6561174ec7214af82e21b7a9a313ae156",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d00ad9a6561174ec7214af82e21b7a9a313ae156",
        "files": [
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Typecasts added to the GeoPoly extension to avoid harmless UBSAN warnings.\n\nFossilOrigin-Name: a1f6a093ac4a2de8c5b02c30fe57e09770460fd5bdddfe9c7a9a24fb83a6b491",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: #define GEOPOLY_SZ(N)  (sizeof(GeoPoly) + sizeof(GeoCoord)*2*((N)-4))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: #define GeoX(P,I)  (((GeoCoord*)(P)->a)[(I)*2])",
          "132: #define GeoY(P,I)  (((GeoCoord*)(P)->a)[(I)*2+1])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:         memcpy(p->hdr, a, nByte);",
          "317:         if( a[0] != *(unsigned char*)&x ){",
          "318:           int ii;",
          "321:           }",
          "322:           p->hdr[0] ^= 1;",
          "323:         }",
          "",
          "[Removed Lines]",
          "319:           for(ii=0; ii<nVertex*2; ii++){",
          "320:             geopolySwab32((unsigned char*)&p->a[ii]);",
          "",
          "[Added Lines]",
          "327:           for(ii=0; ii<nVertex; ii++){",
          "328:             geopolySwab32((unsigned char*)&GeoX(p,ii));",
          "329:             geopolySwab32((unsigned char*)&GeoY(p,ii));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:     int i;",
          "377:     sqlite3_str_append(x, \"[\", 1);",
          "378:     for(i=0; i<p->nVertex; i++){",
          "380:     }",
          "382:     sqlite3_result_text(context, sqlite3_str_finish(x), -1, sqlite3_free);",
          "383:     sqlite3_free(p);",
          "384:   }",
          "",
          "[Removed Lines]",
          "379:       sqlite3_str_appendf(x, \"[%!g,%!g],\", p->a[i*2], p->a[i*2+1]);",
          "381:     sqlite3_str_appendf(x, \"[%!g,%!g]]\", p->a[0], p->a[1]);",
          "",
          "[Added Lines]",
          "388:       sqlite3_str_appendf(x, \"[%!g,%!g],\", GeoX(p,i), GeoY(p,i));",
          "390:     sqlite3_str_appendf(x, \"[%!g,%!g]]\", GeoX(p,0), GeoY(p,0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:     char cSep = '\\'';",
          "406:     sqlite3_str_appendf(x, \"<polyline points=\");",
          "407:     for(i=0; i<p->nVertex; i++){",
          "409:       cSep = ' ';",
          "410:     }",
          "412:     for(i=1; i<argc; i++){",
          "413:       const char *z = (const char*)sqlite3_value_text(argv[i]);",
          "414:       if( z && z[0] ){",
          "",
          "[Removed Lines]",
          "408:       sqlite3_str_appendf(x, \"%c%g,%g\", cSep, p->a[i*2], p->a[i*2+1]);",
          "411:     sqlite3_str_appendf(x, \" %g,%g'\", p->a[0], p->a[1]);",
          "",
          "[Added Lines]",
          "417:       sqlite3_str_appendf(x, \"%c%g,%g\", cSep, GeoX(p,i), GeoY(p,i));",
          "420:     sqlite3_str_appendf(x, \" %g,%g'\", GeoX(p,0), GeoY(p,0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "453:   int ii;",
          "454:   if( p ){",
          "455:     for(ii=0; ii<p->nVertex; ii++){",
          "458:       x1 = (GeoCoord)(A*x0 + B*y0 + E);",
          "459:       y1 = (GeoCoord)(C*x0 + D*y0 + F);",
          "462:     }",
          "463:     sqlite3_result_blob(context, p->hdr,",
          "464:        4+8*p->nVertex, SQLITE_TRANSIENT);",
          "",
          "[Removed Lines]",
          "456:       x0 = p->a[ii*2];",
          "457:       y0 = p->a[ii*2+1];",
          "460:       p->a[ii*2] = x1;",
          "461:       p->a[ii*2+1] = y1;",
          "",
          "[Added Lines]",
          "465:       x0 = GeoX(p,ii);",
          "466:       y0 = GeoY(p,ii);",
          "469:       GeoX(p,ii) = x1;",
          "470:       GeoY(p,ii) = y1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:   if( p ){",
          "530:     if( geopolyArea(p)<0.0 ){",
          "531:       int ii, jj;",
          "539:       }",
          "540:     }",
          "541:     sqlite3_result_blob(context, p->hdr,",
          "",
          "[Removed Lines]",
          "532:       for(ii=2, jj=p->nVertex*2 - 2; ii<jj; ii+=2, jj-=2){",
          "533:         GeoCoord t = p->a[ii];",
          "534:         p->a[ii] = p->a[jj];",
          "535:         p->a[jj] = t;",
          "536:         t = p->a[ii+1];",
          "537:         p->a[ii+1] = p->a[jj+1];",
          "538:         p->a[jj+1] = t;",
          "",
          "[Added Lines]",
          "541:       for(ii=1, jj=p->nVertex-1; ii<jj; ii++, jj--){",
          "542:         GeoCoord t = GeoX(p,ii);",
          "543:         GeoX(p,ii) = GeoX(p,jj);",
          "544:         GeoX(p,jj) = t;",
          "545:         t = GeoY(p,ii);",
          "546:         GeoY(p,ii) = GeoY(p,jj);",
          "547:         GeoY(p,jj) = t;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "595:   p->hdr[3] = n&0xff;",
          "596:   for(i=0; i<n; i++){",
          "597:     double rAngle = 2.0*GEOPOLY_PI*i/n;",
          "600:   }",
          "601:   sqlite3_result_blob(context, p->hdr, 4+8*n, SQLITE_TRANSIENT);",
          "602:   sqlite3_free(p);",
          "",
          "[Removed Lines]",
          "598:     p->a[i*2] = x - r*geopolySine(rAngle-0.5*GEOPOLY_PI);",
          "599:     p->a[i*2+1] = y + r*geopolySine(rAngle);",
          "",
          "[Added Lines]",
          "607:     GeoX(p,i) = x - r*geopolySine(rAngle-0.5*GEOPOLY_PI);",
          "608:     GeoY(p,i) = y + r*geopolySine(rAngle);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "633:   }",
          "634:   if( p ){",
          "635:     int ii;",
          "638:     for(ii=1; ii<p->nVertex; ii++){",
          "640:       if( r<mnX ) mnX = (float)r;",
          "641:       else if( r>mxX ) mxX = (float)r;",
          "643:       if( r<mnY ) mnY = (float)r;",
          "644:       else if( r>mxY ) mxY = (float)r;",
          "645:     }",
          "",
          "[Removed Lines]",
          "636:     mnX = mxX = p->a[0];",
          "637:     mnY = mxY = p->a[1];",
          "639:       double r = p->a[ii*2];",
          "642:       r = p->a[ii*2+1];",
          "",
          "[Added Lines]",
          "645:     mnX = mxX = GeoX(p,0);",
          "646:     mnY = mxY = GeoY(p,0);",
          "648:       double r = GeoX(p,ii);",
          "651:       r = GeoY(p,ii);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "659:       pOut->hdr[1] = 0;",
          "660:       pOut->hdr[2] = 0;",
          "661:       pOut->hdr[3] = 4;",
          "670:     }else{",
          "671:       sqlite3_free(p);",
          "672:       aCoord[0].f = mnX;",
          "",
          "[Removed Lines]",
          "662:       pOut->a[0] = mnX;",
          "663:       pOut->a[1] = mnY;",
          "664:       pOut->a[2] = mxX;",
          "665:       pOut->a[3] = mnY;",
          "666:       pOut->a[4] = mxX;",
          "667:       pOut->a[5] = mxY;",
          "668:       pOut->a[6] = mnX;",
          "669:       pOut->a[7] = mxY;",
          "",
          "[Added Lines]",
          "671:       GeoX(pOut,0) = mnX;",
          "672:       GeoY(pOut,0) = mnY;",
          "673:       GeoX(pOut,1) = mxX;",
          "674:       GeoY(pOut,1) = mnY;",
          "675:       GeoX(pOut,2) = mxX;",
          "676:       GeoY(pOut,2) = mxY;",
          "677:       GeoX(pOut,3) = mnX;",
          "678:       GeoY(pOut,3) = mxY;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "804:   int ii;",
          "805:   if( p1==0 ) return;",
          "806:   for(ii=0; ii<p1->nVertex-1; ii++){",
          "809:     if( v==2 ) break;",
          "810:     cnt += v;",
          "811:   }",
          "812:   if( v!=2 ){",
          "815:   }",
          "816:   if( v==2 ){",
          "817:     sqlite3_result_int(context, 1);",
          "",
          "[Removed Lines]",
          "807:     v = pointBeneathLine(x0,y0,p1->a[ii*2],p1->a[ii*2+1],",
          "808:                                p1->a[ii*2+2],p1->a[ii*2+3]);",
          "813:     v = pointBeneathLine(x0,y0,p1->a[ii*2],p1->a[ii*2+1],",
          "814:                                p1->a[0],p1->a[1]);",
          "",
          "[Added Lines]",
          "816:     v = pointBeneathLine(x0,y0,GeoX(p1,ii), GeoY(p1,ii),",
          "817:                                GeoX(p1,ii+1),GeoY(p1,ii+1));",
          "822:     v = pointBeneathLine(x0,y0,GeoX(p1,ii), GeoY(p1,ii),",
          "823:                                GeoX(p1,0),  GeoY(p1,0));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "933:   unsigned int i;",
          "934:   GeoCoord *x;",
          "935:   for(i=0; i<(unsigned)pPoly->nVertex-1; i++){",
          "937:     geopolyAddOneSegment(p, x[0], x[1], x[2], x[3], side, i);",
          "938:   }",
          "940:   geopolyAddOneSegment(p, x[0], x[1], pPoly->a[0], pPoly->a[1], side, i);",
          "941: }",
          "",
          "[Removed Lines]",
          "936:     x = pPoly->a + (i*2);",
          "939:   x = pPoly->a + (i*2);",
          "",
          "[Added Lines]",
          "945:     x = &GeoX(pPoly,i);",
          "948:   x = &GeoX(pPoly,i);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b90dbaed3092236e97f9796fa63989a3648060e16189e1267c430f4a7e799fac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}