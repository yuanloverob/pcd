{
  "cve_id": "CVE-2011-2493",
  "cve_desc": "The ext4_fill_super function in fs/ext4/super.c in the Linux kernel before 2.6.39 does not properly initialize a certain error-report data structure, which allows local users to cause a denial of service (OOPS) by attempting to mount a crafted ext4 filesystem.",
  "repo": "torvalds/linux",
  "patch_hash": "0449641130f5652b344ef6fa39fa019d7e94660a",
  "patch_info": {
    "commit_hash": "0449641130f5652b344ef6fa39fa019d7e94660a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/0449641130f5652b344ef6fa39fa019d7e94660a",
    "files": [
      "fs/ext4/super.c"
    ],
    "message": "ext4: init timer earlier to avoid a kernel panic in __save_error_info\n\nDuring mount, when we fail to open journal inode or root inode, the\n__save_error_info will mod_timer. But actually s_err_report isn't\ninitialized yet and the kernel oops. The detailed information can\nbe found https://bugzilla.kernel.org/show_bug.cgi?id=32082.\n\nThe best way is to check whether the timer s_err_report is initialized\nor not. But it seems that in include/linux/timer.h, we can't find a\ngood function to check the status of this timer, so this patch just\nmove the initializtion of s_err_report earlier so that we can avoid\nthe kernel panic. The corresponding del_timer is also added in the\nerror path.\n\nReported-by: Sami Liedes <sliedes@cc.hut.fi>\nSigned-off-by: Tao Ma <boyu.mt@taobao.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
    "before_after_code_files": [
      "fs/ext4/super.c||fs/ext4/super.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/super.c||fs/ext4/super.c": [
      "File: fs/ext4/super.c -> fs/ext4/super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3391:  get_random_bytes(&sbi->s_next_generation, sizeof(u32));",
      "3392:  spin_lock_init(&sbi->s_next_gen_lock);",
      "3394:  err = percpu_counter_init(&sbi->s_freeblocks_counter,",
      "3395:    ext4_count_free_blocks(sb));",
      "3396:  if (!err) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3394:  init_timer(&sbi->s_err_report);",
      "3395:  sbi->s_err_report.function = print_daily_error_info;",
      "3396:  sbi->s_err_report.data = (unsigned long) sb;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3652:    \"Opts: %s%s%s\", descr, sbi->s_es->s_mount_opts,",
      "3658:  if (es->s_error_count)",
      "",
      "[Removed Lines]",
      "3655:  init_timer(&sbi->s_err_report);",
      "3656:  sbi->s_err_report.function = print_daily_error_info;",
      "3657:  sbi->s_err_report.data = (unsigned long) sb;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3678:   sbi->s_journal = NULL;",
      "3679:  }",
      "3680: failed_mount3:",
      "3681:  if (sbi->s_flex_groups) {",
      "3682:   if (is_vmalloc_addr(sbi->s_flex_groups))",
      "3683:    vfree(sbi->s_flex_groups);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3682:  del_timer(&sbi->s_err_report);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b67f04ab9de5d8f3a71aef72bf02c995a506db5",
      "candidate_info": {
        "commit_hash": "8b67f04ab9de5d8f3a71aef72bf02c995a506db5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8b67f04ab9de5d8f3a71aef72bf02c995a506db5",
        "files": [
          "fs/ext4/ext4.h",
          "fs/ext4/super.c"
        ],
        "message": "ext4: Add mount options in superblock\n\nAllow mount options to be stored in the superblock.  Also add default\nmount option bits for nobarrier, block_validity, discard, and nodelalloc.\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/super.c||fs/ext4/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/super.c||fs/ext4/super.c"
          ],
          "candidate": [
            "fs/ext4/super.c||fs/ext4/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1030: };",
          "1032: #define EXT4_S_ERR_LEN (EXT4_S_ERR_END - EXT4_S_ERR_START)",
          "",
          "[Removed Lines]",
          "1028: #define EXT4_S_ERR_END offsetof(struct ext4_super_block, s_reserved)",
          "",
          "[Added Lines]",
          "1028: #define EXT4_S_ERR_END offsetof(struct ext4_super_block, s_mount_opts)",
          "1029:  __u8 s_mount_opts[64];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1341: #define EXT4_DEFM_JMODE_DATA 0x0020",
          "1342: #define EXT4_DEFM_JMODE_ORDERED 0x0040",
          "1343: #define EXT4_DEFM_JMODE_WBACK 0x0060",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1345: #define EXT4_DEFM_NOBARRIER 0x0100",
          "1346: #define EXT4_DEFM_BLOCK_VALIDITY 0x0200",
          "1347: #define EXT4_DEFM_DISCARD 0x0400",
          "1348: #define EXT4_DEFM_NODELALLOC 0x0800",
          "",
          "---------------"
        ],
        "fs/ext4/super.c||fs/ext4/super.c": [
          "File: fs/ext4/super.c -> fs/ext4/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1003:   seq_puts(seq, \",journal_checksum\");",
          "1004:  if (test_opt(sb, I_VERSION))",
          "1005:   seq_puts(seq, \",i_version\");",
          "1007:   seq_puts(seq, \",nodelalloc\");",
          "1010:  if (sbi->s_stripe)",
          "1011:   seq_printf(seq, \",stripe=%lu\", sbi->s_stripe);",
          "",
          "[Removed Lines]",
          "1006:  if (!test_opt(sb, DELALLOC))",
          "",
          "[Added Lines]",
          "1006:  if (!test_opt(sb, DELALLOC) &&",
          "1007:      !(def_mount_opts & EXT4_DEFM_NODELALLOC))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:  if (test_opt(sb, NO_AUTO_DA_ALLOC))",
          "1031:   seq_puts(seq, \",noauto_da_alloc\");",
          "1034:   seq_puts(seq, \",discard\");",
          "1036:  if (test_opt(sb, NOLOAD))",
          "",
          "[Removed Lines]",
          "1033:  if (test_opt(sb, DISCARD))",
          "",
          "[Added Lines]",
          "1033:  if (test_opt(sb, DISCARD) && !(def_mount_opts & EXT4_DEFM_DISCARD))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1039:  if (test_opt(sb, DIOREAD_NOLOCK))",
          "1040:   seq_puts(seq, \",dioread_nolock\");",
          "1042:  ext4_show_quota_options(seq, sb);",
          "1044:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1042:  if (test_opt(sb, BLOCK_VALIDITY) &&",
          "1043:      !(def_mount_opts & EXT4_DEFM_BLOCK_VALIDITY))",
          "1044:   seq_puts(seq, \",block_validity\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2655:   set_opt(sbi->s_mount_opt, ERRORS_CONT);",
          "2656:  else",
          "2657:   set_opt(sbi->s_mount_opt, ERRORS_RO);",
          "2659:  sbi->s_resuid = le16_to_cpu(es->s_def_resuid);",
          "2660:  sbi->s_resgid = le16_to_cpu(es->s_def_resgid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2662:  if (def_mount_opts & EXT4_DEFM_BLOCK_VALIDITY)",
          "2663:   set_opt(sbi->s_mount_opt, BLOCK_VALIDITY);",
          "2664:  if (def_mount_opts & EXT4_DEFM_DISCARD)",
          "2665:   set_opt(sbi->s_mount_opt, DISCARD);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2662:  sbi->s_min_batch_time = EXT4_DEF_MIN_BATCH_TIME;",
          "2663:  sbi->s_max_batch_time = EXT4_DEF_MAX_BATCH_TIME;",
          "2672:   set_opt(sbi->s_mount_opt, DELALLOC);",
          "2674:  if (!parse_options((char *) data, sb, &journal_devnum,",
          "2675:       &journal_ioprio, NULL, 0))",
          "2676:   goto failed_mount;",
          "",
          "[Removed Lines]",
          "2665:  set_opt(sbi->s_mount_opt, BARRIER);",
          "2671:  if (!IS_EXT3_SB(sb))",
          "",
          "[Added Lines]",
          "2673:  if ((def_mount_opts & EXT4_DEFM_NOBARRIER) == 0)",
          "2674:   set_opt(sbi->s_mount_opt, BARRIER);",
          "2680:  if (!IS_EXT3_SB(sb) &&",
          "2681:      ((def_mount_opts & EXT4_DEFM_NODELALLOC) == 0))",
          "2684:  if (!parse_options((char *) sbi->s_es->s_mount_opts, sb,",
          "2685:       &journal_devnum, &journal_ioprio, NULL, 0)) {",
          "2686:   ext4_msg(sb, KERN_WARNING,",
          "2687:     \"failed to parse options in superblock: %s\",",
          "2688:     sbi->s_es->s_mount_opts);",
          "2689:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3141:   descr = \"out journal\";",
          "3143:  ext4_msg(sb, KERN_INFO, \"mounted filesystem with%s. \"",
          "3146:  init_timer(&sbi->s_err_report);",
          "3147:  sbi->s_err_report.function = print_daily_error_info;",
          "",
          "[Removed Lines]",
          "3144:   \"Opts: %s\", descr, orig_data);",
          "",
          "[Added Lines]",
          "3160:    \"Opts: %s%s%s\", descr, sbi->s_es->s_mount_opts,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4c402d9fd97a54bb7ed89f9e9869897eb4f6e1f",
      "candidate_info": {
        "commit_hash": "d4c402d9fd97a54bb7ed89f9e9869897eb4f6e1f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d4c402d9fd97a54bb7ed89f9e9869897eb4f6e1f",
        "files": [
          "fs/ext4/super.c"
        ],
        "message": "ext4: Print mount options in when mounting and add a remount message\n\nThis adds a \"re-mounted\" message to ext4_remount(), and both it and\nthe mount message in ext4_fill_super() now have the original mount\noptions data string.\n\nSigned-off-by: Curt Wohlgemuth <curtw@google.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/super.c||fs/ext4/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/super.c||fs/ext4/super.c"
          ],
          "candidate": [
            "fs/ext4/super.c||fs/ext4/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/super.c||fs/ext4/super.c": [
          "File: fs/ext4/super.c -> fs/ext4/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2431:     __releases(kernel_lock)",
          "2432:     __acquires(kernel_lock)",
          "2433: {",
          "2434:  struct buffer_head *bh;",
          "2435:  struct ext4_super_block *es = NULL;",
          "2436:  struct ext4_sb_info *sbi;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2434:  char *orig_data = kstrdup(data, GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3037:  } else",
          "3038:   descr = \"out journal\";",
          "3042:  lock_kernel();",
          "3043:  return 0;",
          "3045: cantfind_ext4:",
          "",
          "[Removed Lines]",
          "3040:  ext4_msg(sb, KERN_INFO, \"mounted filesystem with%s\", descr);",
          "",
          "[Added Lines]",
          "3041:  ext4_msg(sb, KERN_INFO, \"mounted filesystem with%s. \"",
          "3042:   \"Opts: %s\", descr, orig_data);",
          "3045:  kfree(orig_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3086:  kfree(sbi->s_blockgroup_lock);",
          "3087:  kfree(sbi);",
          "3088:  lock_kernel();",
          "3089:  return ret;",
          "3090: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3092:  kfree(orig_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3576: #ifdef CONFIG_QUOTA",
          "3577:  int i;",
          "3578: #endif",
          "3580:  lock_kernel();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3583:  char *orig_data = kstrdup(data, GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3709: #endif",
          "3710:  unlock_super(sb);",
          "3711:  unlock_kernel();",
          "3712:  return 0;",
          "3714: restore_opts:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3718:  ext4_msg(sb, KERN_INFO, \"re-mounted. Opts: %s\", orig_data);",
          "3719:  kfree(orig_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3730: #endif",
          "3731:  unlock_super(sb);",
          "3732:  unlock_kernel();",
          "3733:  return err;",
          "3734: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3741:  kfree(orig_data);",
          "",
          "---------------"
        ]
      }
    }
  ]
}