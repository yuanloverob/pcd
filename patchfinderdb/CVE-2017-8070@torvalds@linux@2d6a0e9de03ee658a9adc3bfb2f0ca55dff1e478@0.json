{
  "cve_id": "CVE-2017-8070",
  "cve_desc": "drivers/net/usb/catc.c in the Linux kernel 4.9.x before 4.9.11 interacts incorrectly with the CONFIG_VMAP_STACK option, which allows local users to cause a denial of service (system crash or memory corruption) or possibly have unspecified other impact by leveraging use of more than one virtual page for a DMA scatterlist.",
  "repo": "torvalds/linux",
  "patch_hash": "2d6a0e9de03ee658a9adc3bfb2f0ca55dff1e478",
  "patch_info": {
    "commit_hash": "2d6a0e9de03ee658a9adc3bfb2f0ca55dff1e478",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/2d6a0e9de03ee658a9adc3bfb2f0ca55dff1e478",
    "files": [
      "drivers/net/usb/catc.c"
    ],
    "message": "catc: Use heap buffer for memory size test\n\nAllocating USB buffers on the stack is not portable, and no longer\nworks on x86_64 (with VMAP_STACK enabled as per default).\n\nFixes: 1da177e4c3f4 (\"Linux-2.6.12-rc2\")\nSigned-off-by: Ben Hutchings <ben@decadent.org.uk>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "drivers/net/usb/catc.c||drivers/net/uscatc.c"
    ]
  },
  "patch_diff": {
    "drivers/net/usb/catc.c||drivers/net/uscatc.c": [
      "File: drivers/net/usb/catc.c -> drivers/net/uscatc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "776:  struct net_device *netdev;",
      "777:  struct catc *catc;",
      "778:  u8 broadcast[ETH_ALEN];",
      "781:  if (usb_set_interface(usbdev,",
      "782:    intf->altsetting->desc.bInterfaceNumber, 1)) {",
      "",
      "[Removed Lines]",
      "779:  int i, pktsz, ret;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "840:                 catc->irq_buf, 2, catc_irq_done, catc, 1);",
      "842:  if (!catc->is_f5u011) {",
      "843:   dev_dbg(dev, \"Checking memory size\\n\");",
      "852:   case 0x12345678:",
      "853:    catc_set_reg(catc, TxBufCount, 8);",
      "854:    catc_set_reg(catc, RxBufCount, 32);",
      "",
      "[Removed Lines]",
      "845:   i = 0x12345678;",
      "846:   catc_write_mem(catc, 0x7a80, &i, 4);",
      "847:   i = 0x87654321;",
      "848:   catc_write_mem(catc, 0xfa80, &i, 4);",
      "849:   catc_read_mem(catc, 0x7a80, &i, 4);",
      "851:   switch (i) {",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "863:    dev_dbg(dev, \"32k Memory\\n\");",
      "864:    break;",
      "865:   }",
      "867:   dev_dbg(dev, \"Getting MAC from SEEROM.\\n\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d41149145f98fe26dcd0bfd1d6cc095e6e041418",
      "candidate_info": {
        "commit_hash": "d41149145f98fe26dcd0bfd1d6cc095e6e041418",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d41149145f98fe26dcd0bfd1d6cc095e6e041418",
        "files": [
          "drivers/net/usb/catc.c"
        ],
        "message": "catc: Combine failure cleanup code in catc_probe()\n\nSigned-off-by: Ben Hutchings <ben@decadent.org.uk>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/usb/catc.c||drivers/net/uscatc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/usb/catc.c||drivers/net/uscatc.c"
          ],
          "candidate": [
            "drivers/net/usb/catc.c||drivers/net/uscatc.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/usb/catc.c||drivers/net/uscatc.c": [
          "File: drivers/net/usb/catc.c -> drivers/net/uscatc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "776:  struct net_device *netdev;",
          "777:  struct catc *catc;",
          "778:  u8 broadcast[ETH_ALEN];",
          "781:  if (usb_set_interface(usbdev,",
          "782:    intf->altsetting->desc.bInterfaceNumber, 1)) {",
          "",
          "[Removed Lines]",
          "779:  int i, pktsz;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "811:  if ((!catc->ctrl_urb) || (!catc->tx_urb) ||",
          "812:      (!catc->rx_urb) || (!catc->irq_urb)) {",
          "813:   dev_err(&intf->dev, \"No free urbs available.\\n\");",
          "820:  }",
          "",
          "[Removed Lines]",
          "814:   usb_free_urb(catc->ctrl_urb);",
          "815:   usb_free_urb(catc->tx_urb);",
          "816:   usb_free_urb(catc->rx_urb);",
          "817:   usb_free_urb(catc->irq_urb);",
          "818:   free_netdev(netdev);",
          "819:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "913:  usb_set_intfdata(intf, catc);",
          "915:  SET_NETDEV_DEV(netdev, &intf->dev);",
          "925:  return 0;",
          "926: }",
          "928: static void catc_disconnect(struct usb_interface *intf)",
          "",
          "[Removed Lines]",
          "916:  if (register_netdev(netdev) != 0) {",
          "917:   usb_set_intfdata(intf, NULL);",
          "918:   usb_free_urb(catc->ctrl_urb);",
          "919:   usb_free_urb(catc->tx_urb);",
          "920:   usb_free_urb(catc->rx_urb);",
          "921:   usb_free_urb(catc->irq_urb);",
          "922:   free_netdev(netdev);",
          "923:   return -EIO;",
          "924:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}