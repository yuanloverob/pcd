{
  "cve_id": "CVE-2014-7834",
  "cve_desc": "mod/forum/externallib.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 does not verify group permissions, which allows remote authenticated users to access a forum via the forum_get_discussions web service.",
  "repo": "moodle/moodle",
  "patch_hash": "40afeb4044c9718bf175c347f0f9099a037ce9f0",
  "patch_info": {
    "commit_hash": "40afeb4044c9718bf175c347f0f9099a037ce9f0",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/40afeb4044c9718bf175c347f0f9099a037ce9f0",
    "files": [
      "mod/forum/externallib.php",
      "mod/forum/tests/externallib_test.php"
    ],
    "message": "MDL-45303 Web Services: forum_discussions not checking groups",
    "before_after_code_files": [
      "mod/forum/externallib.php||mod/forum/externallib.php",
      "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
    ]
  },
  "patch_diff": {
    "mod/forum/externallib.php||mod/forum/externallib.php": [
      "File: mod/forum/externallib.php -> mod/forum/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "209:         $arrdiscussions = array();",
      "215:         $arrusers = array();",
      "",
      "[Removed Lines]",
      "211:         $arrcourseschecked = array();",
      "213:         $arrcoursesforuminfo = array();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "218:         foreach ($forumids as $id) {",
      "220:             $forum = $DB->get_record('forum', array('id' => $id), '*', MUST_EXIST);",
      "244:             $modcontext = context_module::instance($cm->id);",
      "246:             require_capability('mod/forum:viewdiscussion', $modcontext);",
      "254:                 }",
      "255:             }",
      "261:                 foreach ($discussions as $discussion) {",
      "266:                     }",
      "267:                     $usernamefields = user_picture::fields();",
      "269:                     if (empty($arrusers[$discussion->userid])) {",
      "",
      "[Removed Lines]",
      "222:             if (!in_array($forum->course, $arrcourseschecked)) {",
      "224:                 self::validate_context(context_course::instance($forum->course));",
      "226:                 $arrcourseschecked[] = $forum->course;",
      "227:             }",
      "229:             if (!isset($arrcoursesforuminfo[$forum->course])) {",
      "230:                 $modinfo = get_fast_modinfo($forum->course);",
      "231:                 $arrcoursesforuminfo[$forum->course] = $modinfo->get_instances_of('forum');",
      "232:             }",
      "234:             if (empty($arrcoursesforuminfo[$forum->course][$forum->id])) {",
      "235:                 throw new moodle_exception('invalidmodule', 'error');",
      "236:             }",
      "238:             $cm = $arrcoursesforuminfo[$forum->course][$forum->id];",
      "240:             if (!$cm->uservisible) {",
      "241:                 throw new moodle_exception('nopermissiontoshow', 'error');",
      "242:             }",
      "248:             $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
      "250:             $unreads = array();",
      "251:             if ($cantrack = forum_tp_can_track_forums($forum)) {",
      "252:                 if ($forumtracked = forum_tp_is_tracked($forum)) {",
      "253:                     $unreads = forum_get_discussions_unread($cm);",
      "257:             $replies = forum_count_discussion_replies($id);",
      "259:             $order = 'timemodified DESC';",
      "260:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id), $order, '*', $limitfrom, $limitnum)) {",
      "264:                     if ($forum->type == 'qanda' && !forum_user_has_posted($discussion->forum, $discussion->id, $USER->id)) {",
      "265:                         require_capability('mod/forum:viewqandawithoutposting', $modcontext);",
      "",
      "[Added Lines]",
      "217:             $course = get_course($forum->course);",
      "219:             $modinfo = get_fast_modinfo($course);",
      "220:             $forums  = $modinfo->get_instances_of('forum');",
      "221:             $cm = $forums[$forum->id];",
      "227:             self::validate_context($modcontext);",
      "232:             $params = array();",
      "234:             $groupselect = \"\";",
      "235:             $groupmode = groups_get_activity_groupmode($cm, $course);",
      "237:             if ($groupmode and $groupmode != VISIBLEGROUPS and !has_capability('moodle/site:accessallgroups', $modcontext)) {",
      "239:                 $usergroups = groups_get_user_groups($course->id);",
      "240:                 if (!empty($usergroups['0'])) {",
      "241:                     list($sql, $params) = $DB->get_in_or_equal($usergroups['0']);",
      "242:                     $groupselect = \"AND (groupid $sql OR groupid = -1)\";",
      "245:             array_unshift($params, $id);",
      "246:             $select = \"forum = ? $groupselect\";",
      "248:             if ($discussions = $DB->get_records_select('forum_discussions', $select, $params, 'timemodified DESC', '*',",
      "249:                                                             $limitfrom, $limitnum)) {",
      "252:                 $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
      "254:                 $unreads = array();",
      "255:                 if ($cantrack = forum_tp_can_track_forums($forum)) {",
      "256:                     if ($forumtracked = forum_tp_is_tracked($forum)) {",
      "257:                         $unreads = forum_get_discussions_unread($cm);",
      "258:                     }",
      "259:                 }",
      "261:                 $replies = forum_count_discussion_replies($id);",
      "265:                     if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
      "266:                         continue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "301:                     if (!empty($replies[$discussion->id])) {",
      "302:                          $return->numreplies = (int) $replies[$discussion->id]->replies;",
      "303:                          $return->lastpost = (int) $replies[$discussion->id]->lastpostid;",
      "305:                         $return->numreplies = 0;",
      "306:                         $return->lastpost = (int) $discussion->firstpost;",
      "309:                     $lastpost = $DB->get_record('forum_posts', array('id' => $return->lastpost), '*', MUST_EXIST);",
      "310:                     if (empty($arrusers[$lastpost->userid])) {",
      "",
      "[Removed Lines]",
      "304:                      } else { // No replies, so the last post will be the first post.",
      "307:                      }",
      "",
      "[Added Lines]",
      "306:                     } else { // No replies, so the last post will be the first post.",
      "309:                     }",
      "",
      "---------------"
    ],
    "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
      "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "205:         $record->trackingtype = FORUM_TRACKING_FORCED;",
      "206:         $forum2 = self::getDataGenerator()->create_module('forum', $record);",
      "214:         $record = new stdClass();",
      "215:         $record->course = $course1->id;",
      "",
      "[Removed Lines]",
      "209:         $record = new stdClass();",
      "210:         $record->course = $course2->id;",
      "211:         $forum3 = self::getDataGenerator()->create_module('forum', $record);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "223:         $record->forum = $forum2->id;",
      "224:         $discussion2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
      "233:         $record = new stdClass();",
      "234:         $record->discussion = $discussion1->id;",
      "",
      "[Removed Lines]",
      "226:         $record = new stdClass();",
      "227:         $record->course = $course2->id;",
      "228:         $record->userid = $user2->id;",
      "229:         $record->forum = $forum3->id;",
      "230:         $discussion3 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:         $discussion2reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
      "266:         $this->assertEquals(7, $DB->count_records_select('forum_posts', 'discussion = :discussion1 OR discussion = :discussion2',",
      "",
      "[Removed Lines]",
      "258:         $this->assertEquals(3, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2 OR id = :forum3',",
      "259:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
      "262:         $this->assertEquals(3, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2",
      "263:                 OR forum = :forum3', array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
      "",
      "[Added Lines]",
      "247:         $this->assertEquals(2, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2',",
      "248:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
      "251:         $this->assertEquals(2, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2',",
      "252:                                                             array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "289:         $newrole = create_role('Role 2', 'role2', 'Role 2 description');",
      "290:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
      "298:         $expecteddiscussions = array();",
      "299:         $expecteddiscussions[$discussion1->id] = array(",
      "",
      "[Removed Lines]",
      "293:         $cm = get_coursemodule_from_id('forum', $forum3->cmid, 0, false, MUST_EXIST);",
      "294:         $context = context_module::instance($cm->id);",
      "295:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "350:                 'lastuserpicture' => $user3->picture,",
      "351:                 'lastuseremail' => $user3->email",
      "352:             );",
      "383:         external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
      "384:         $this->assertEquals($expecteddiscussions, $discussions);",
      "387:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
      "396:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
      "",
      "[Removed Lines]",
      "353:             $expecteddiscussions[$discussion3->id] = array(",
      "354:                 'id' => $discussion3->id,",
      "355:                 'course' => $discussion3->course,",
      "356:                 'forum' => $discussion3->forum,",
      "357:                 'name' => $discussion3->name,",
      "358:                 'firstpost' => $discussion3->firstpost,",
      "359:                 'userid' => $discussion3->userid,",
      "360:                 'groupid' => $discussion3->groupid,",
      "361:                 'assessed' => $discussion3->assessed,",
      "362:                 'timemodified' => $discussion3->timemodified,",
      "363:                 'usermodified' => $discussion3->usermodified,",
      "364:                 'timestart' => $discussion3->timestart,",
      "365:                 'timeend' => $discussion3->timeend,",
      "366:                 'firstuserfullname' => fullname($user2),",
      "367:                 'firstuserimagealt' => $user2->imagealt,",
      "368:                 'firstuserpicture' => $user2->picture,",
      "369:                 'firstuseremail' => $user2->email,",
      "370:                 'subject' => $discussion3->name,",
      "371:                 'numreplies' => 0,",
      "372:                 'numunread' => 1,",
      "373:                 'lastpost' => $discussion3->firstpost,",
      "374:                 'lastuserid' => $user2->id,",
      "375:                 'lastuserfullname' => fullname($user2),",
      "376:                 'lastuserimagealt' => $user2->imagealt,",
      "377:                 'lastuserpicture' => $user2->picture,",
      "378:                 'lastuseremail' => $user2->email",
      "379:             );",
      "382:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id, $forum3->id));",
      "388:         try {",
      "389:             mod_forum_external::get_forum_discussions(array($forum2->id));",
      "390:             $this->fail('Exception expected due to attempting to access qanda forum without posting.');",
      "391:         } catch (moodle_exception $e) {",
      "392:             $this->assertEquals('nopermissions', $e->errorcode);",
      "393:         }",
      "",
      "[Added Lines]",
      "339:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id));",
      "345:         $this->assertDebuggingCalled();",
      "349:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
      "350:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
      "351:         $this->assertEquals(0, count($discussions));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "400:         } catch (moodle_exception $e) {",
      "401:             $this->assertEquals('nopermissions', $e->errorcode);",
      "402:         }",
      "405:         $enrol->unenrol_user($instance2, $user1->id);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "361:         $this->assertDebuggingCalled();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "411:         } catch (moodle_exception $e) {",
      "412:             $this->assertEquals('requireloginerror', $e->errorcode);",
      "413:         }",
      "414:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "373:         $this->assertDebuggingCalled();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e2b7ee6662848bb93840b8e379304f5dc8d2a532",
      "candidate_info": {
        "commit_hash": "e2b7ee6662848bb93840b8e379304f5dc8d2a532",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e2b7ee6662848bb93840b8e379304f5dc8d2a532",
        "files": [
          "mod/forum/externallib.php",
          "mod/forum/lib.php",
          "mod/forum/tests/externallib_test.php"
        ],
        "message": "MDL-50489 forum: Handle qanda forums in get_forum_discussions_paginated\n\nI removed the last qanda checks in forum_user_can_see_discussion because they are not necessary and\nthey make the external function fail.\n\nA user in a qanda forum can always see a discussion (he needs to see the discussion to be able to reply).\nWhat he cannot see are the other user posts unless he has replied to the discussion once and the edition period\n(usually 30 minutes) has ended.\n\nNote also that forum_user_can_see_discussion was originally only used when displaying forums in blog format\nin order to display the button show more or not, this is the reason this wasn't detected before.",
        "before_after_code_files": [
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/lib.php||mod/forum/lib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:         require_once($CFG->dirroot . \"/mod/forum/lib.php\");",
          "627:         $warnings = array();",
          "629:         $params = self::validate_parameters(self::get_forum_discussions_paginated_parameters(),",
          "630:             array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:         $discussions = array();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "668:         require_capability('mod/forum:viewdiscussion', $modcontext, null, true, 'noviewdiscussionspermission', 'forum');",
          "670:         $sort = 'd.' . $sortby . ' ' . $sortdirection;",
          "674:             $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "",
          "[Removed Lines]",
          "671:         $discussions = forum_get_discussions($cm, $sort, true, -1, -1, true, $page, $perpage);",
          "673:         if ($discussions) {",
          "",
          "[Added Lines]",
          "672:         $alldiscussions = forum_get_discussions($cm, $sort, true, -1, -1, true, $page, $perpage);",
          "674:         if ($alldiscussions) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:             $replies = forum_count_discussion_replies($forumid, $sort, -1, $page, $perpage);",
          "689:                     $warning = array();",
          "691:                     $warning['item'] = 'post';",
          "",
          "[Removed Lines]",
          "686:             foreach ($discussions as $did => $discussion) {",
          "688:                 if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
          "",
          "[Added Lines]",
          "687:             foreach ($alldiscussions as $discussion) {",
          "691:                 $discussionrec = clone $discussion;",
          "692:                 $discussionrec->id = $discussion->discussion;",
          "693:                 if (!forum_user_can_see_discussion($forum, $discussionrec, $modcontext)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "762:                     }",
          "763:                 }",
          "766:             }",
          "767:         }",
          "",
          "[Removed Lines]",
          "765:                 $discussions[$did] = (array) $discussion;",
          "",
          "[Added Lines]",
          "770:                 $discussions[] = $discussion;",
          "",
          "---------------"
        ],
        "mod/forum/lib.php||mod/forum/lib.php": [
          "File: mod/forum/lib.php -> mod/forum/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5134:         return false;",
          "5135:     }",
          "5142:     return true;",
          "5143: }",
          "",
          "[Removed Lines]",
          "5137:     if ($forum->type == 'qanda' &&",
          "5138:             !forum_user_has_posted($forum->id, $discussion->id, $user->id) &&",
          "5139:             !has_capability('mod/forum:viewqandawithoutposting', $context)) {",
          "5140:         return false;",
          "5141:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         $this->assertDebuggingCalled();",
          "346:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
          "347:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
          "348:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "352:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
          "",
          "[Removed Lines]",
          "349:         $this->assertEquals(0, count($discussions));",
          "",
          "[Added Lines]",
          "349:         $this->assertEquals(1, count($discussions));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652:             $this->assertEquals('requireloginerror', $e->errorcode);",
          "653:         }",
          "654:     }",
          "655: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:     public function test_mod_forum_get_forum_discussions_paginated_qanda() {",
          "661:         $this->resetAfterTest(true);",
          "664:         $course = self::getDataGenerator()->create_course();",
          "666:         $user1 = self::getDataGenerator()->create_user();",
          "667:         $user2 = self::getDataGenerator()->create_user();",
          "670:         $record = new stdClass();",
          "671:         $record->course = $course->id;",
          "672:         $record->type = 'qanda';",
          "673:         $forum = self::getDataGenerator()->create_module('forum', $record);",
          "676:         $discussionrecord = new stdClass();",
          "677:         $discussionrecord->course = $course->id;",
          "678:         $discussionrecord->userid = $user2->id;",
          "679:         $discussionrecord->forum = $forum->id;",
          "680:         $discussion = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($discussionrecord);",
          "682:         self::setAdminUser();",
          "683:         $discussions = mod_forum_external::get_forum_discussions_paginated($forum->id);",
          "684:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_paginated_returns(), $discussions);",
          "686:         $this->assertCount(1, $discussions['discussions']);",
          "687:         $this->assertCount(0, $discussions['warnings']);",
          "689:         self::setUser($user1);",
          "690:         $this->getDataGenerator()->enrol_user($user1->id, $course->id);",
          "692:         $discussions = mod_forum_external::get_forum_discussions_paginated($forum->id);",
          "693:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_paginated_returns(), $discussions);",
          "695:         $this->assertCount(1, $discussions['discussions']);",
          "696:         $this->assertCount(0, $discussions['warnings']);",
          "698:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79eda0e9a0d15ba1d87187ec712f96abd62748c1",
      "candidate_info": {
        "commit_hash": "79eda0e9a0d15ba1d87187ec712f96abd62748c1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/79eda0e9a0d15ba1d87187ec712f96abd62748c1",
        "files": [
          "mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php"
        ],
        "message": "MDL-45303 Web Services: forum_get_discussions web service misses group permissions check",
        "before_after_code_files": [
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:         $arrdiscussions = array();",
          "192:         $arrusers = array();",
          "",
          "[Removed Lines]",
          "188:         $arrcourseschecked = array();",
          "190:         $arrcoursesforuminfo = array();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         foreach ($forumids as $id) {",
          "197:             $forum = $DB->get_record('forum', array('id' => $id), '*', MUST_EXIST);",
          "221:             $modcontext = context_module::instance($cm->id);",
          "223:             require_capability('mod/forum:viewdiscussion', $modcontext);",
          "231:                 }",
          "232:             }",
          "237:                 foreach ($discussions as $discussion) {",
          "242:                     }",
          "243:                     $usernamefields = user_picture::fields();",
          "245:                     if (empty($arrusers[$discussion->userid])) {",
          "",
          "[Removed Lines]",
          "199:             if (!in_array($forum->course, $arrcourseschecked)) {",
          "201:                 self::validate_context(context_course::instance($forum->course));",
          "203:                 $arrcourseschecked[] = $forum->course;",
          "204:             }",
          "206:             if (!isset($arrcoursesforuminfo[$forum->course])) {",
          "207:                 $modinfo = get_fast_modinfo($forum->course);",
          "208:                 $arrcoursesforuminfo[$forum->course] = $modinfo->get_instances_of('forum');",
          "209:             }",
          "211:             if (empty($arrcoursesforuminfo[$forum->course][$forum->id])) {",
          "212:                 throw new moodle_exception('invalidmodule', 'error');",
          "213:             }",
          "215:             $cm = $arrcoursesforuminfo[$forum->course][$forum->id];",
          "217:             if (!$cm->uservisible) {",
          "218:                 throw new moodle_exception('nopermissiontoshow', 'error');",
          "219:             }",
          "225:             $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "227:             $unreads = array();",
          "228:             if ($cantrack = forum_tp_can_track_forums($forum)) {",
          "229:                 if ($forumtracked = forum_tp_is_tracked($forum)) {",
          "230:                     $unreads = forum_get_discussions_unread($cm);",
          "234:             $replies = forum_count_discussion_replies($id);",
          "236:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id))) {",
          "240:                     if ($forum->type == 'qanda' && !forum_user_has_posted($discussion->forum, $discussion->id, $USER->id)) {",
          "241:                         require_capability('mod/forum:viewqandawithoutposting', $modcontext);",
          "",
          "[Added Lines]",
          "194:             $course = get_course($forum->course);",
          "196:             $modinfo = get_fast_modinfo($course);",
          "197:             $forums  = $modinfo->get_instances_of('forum');",
          "198:             $cm = $forums[$forum->id];",
          "204:             self::validate_context($modcontext);",
          "209:             $params = array();",
          "211:             $groupselect = \"\";",
          "212:             $groupmode = groups_get_activity_groupmode($cm, $course);",
          "214:             if ($groupmode and $groupmode != VISIBLEGROUPS and !has_capability('moodle/site:accessallgroups', $modcontext)) {",
          "216:                 $usergroups = groups_get_user_groups($course->id);",
          "217:                 if (!empty($usergroups['0'])) {",
          "218:                     list($sql, $params) = $DB->get_in_or_equal($usergroups['0']);",
          "219:                     $groupselect = \"AND (groupid $sql OR groupid = -1)\";",
          "222:             array_unshift($params, $id);",
          "224:             $select = \"forum = ? $groupselect\";",
          "226:             if ($discussions = $DB->get_records_select('forum_discussions', $select, $params, 'timemodified DESC')) {",
          "229:                 $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "231:                 $unreads = array();",
          "232:                 if ($cantrack = forum_tp_can_track_forums($forum)) {",
          "233:                     if ($forumtracked = forum_tp_is_tracked($forum)) {",
          "234:                         $unreads = forum_get_discussions_unread($cm);",
          "235:                     }",
          "236:                 }",
          "238:                 $replies = forum_count_discussion_replies($id);",
          "242:                     if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
          "243:                         continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:                     if (!empty($replies[$discussion->id])) {",
          "278:                          $return->numreplies = (int) $replies[$discussion->id]->replies;",
          "279:                          $return->lastpost = (int) $replies[$discussion->id]->lastpostid;",
          "281:                         $return->numreplies = 0;",
          "282:                         $return->lastpost = (int) $discussion->firstpost;",
          "285:                     $lastpost = $DB->get_record('forum_posts', array('id' => $return->lastpost), '*', MUST_EXIST);",
          "286:                     if (empty($arrusers[$lastpost->userid])) {",
          "",
          "[Removed Lines]",
          "280:                      } else { // No replies, so the last post will be the first post.",
          "283:                      }",
          "",
          "[Added Lines]",
          "283:                     } else { // No replies, so the last post will be the first post.",
          "286:                     }",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:         $record->trackingtype = FORUM_TRACKING_FORCED;",
          "178:         $forum2 = self::getDataGenerator()->create_module('forum', $record);",
          "186:         $record = new stdClass();",
          "187:         $record->course = $course1->id;",
          "",
          "[Removed Lines]",
          "181:         $record = new stdClass();",
          "182:         $record->course = $course2->id;",
          "183:         $forum3 = self::getDataGenerator()->create_module('forum', $record);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         $record->forum = $forum2->id;",
          "196:         $discussion2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "205:         $record = new stdClass();",
          "206:         $record->discussion = $discussion1->id;",
          "",
          "[Removed Lines]",
          "198:         $record = new stdClass();",
          "199:         $record->course = $course2->id;",
          "200:         $record->userid = $user2->id;",
          "201:         $record->forum = $forum3->id;",
          "202:         $discussion3 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         $discussion2reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "238:         $this->assertEquals(7, $DB->count_records_select('forum_posts', 'discussion = :discussion1 OR discussion = :discussion2',",
          "",
          "[Removed Lines]",
          "230:         $this->assertEquals(3, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2 OR id = :forum3',",
          "231:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
          "234:         $this->assertEquals(3, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2",
          "235:                 OR id = :forum3', array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
          "",
          "[Added Lines]",
          "219:         $this->assertEquals(2, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2',",
          "220:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
          "223:         $this->assertEquals(2, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2',",
          "224:                                                             array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:         $newrole = create_role('Role 2', 'role2', 'Role 2 description');",
          "262:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
          "270:         $expecteddiscussions = array();",
          "271:         $expecteddiscussions[$discussion1->id] = array(",
          "",
          "[Removed Lines]",
          "265:         $cm = get_coursemodule_from_id('forum', $forum3->cmid, 0, false, MUST_EXIST);",
          "266:         $context = context_module::instance($cm->id);",
          "267:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322:                 'lastuserpicture' => $user3->picture,",
          "323:                 'lastuseremail' => $user3->email",
          "324:             );",
          "355:         external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "356:         $this->assertEquals($expecteddiscussions, $discussions);",
          "359:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
          "368:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
          "",
          "[Removed Lines]",
          "325:             $expecteddiscussions[$discussion3->id] = array(",
          "326:                 'id' => $discussion3->id,",
          "327:                 'course' => $discussion3->course,",
          "328:                 'forum' => $discussion3->forum,",
          "329:                 'name' => $discussion3->name,",
          "330:                 'firstpost' => $discussion3->firstpost,",
          "331:                 'userid' => $discussion3->userid,",
          "332:                 'groupid' => $discussion3->groupid,",
          "333:                 'assessed' => $discussion3->assessed,",
          "334:                 'timemodified' => $discussion3->timemodified,",
          "335:                 'usermodified' => $discussion3->usermodified,",
          "336:                 'timestart' => $discussion3->timestart,",
          "337:                 'timeend' => $discussion3->timeend,",
          "338:                 'firstuserfullname' => fullname($user2),",
          "339:                 'firstuserimagealt' => $user2->imagealt,",
          "340:                 'firstuserpicture' => $user2->picture,",
          "341:                 'firstuseremail' => $user2->email,",
          "342:                 'subject' => $discussion3->name,",
          "343:                 'numreplies' => 0,",
          "344:                 'numunread' => 1,",
          "345:                 'lastpost' => $discussion3->firstpost,",
          "346:                 'lastuserid' => $user2->id,",
          "347:                 'lastuserfullname' => fullname($user2),",
          "348:                 'lastuserimagealt' => $user2->imagealt,",
          "349:                 'lastuserpicture' => $user2->picture,",
          "350:                 'lastuseremail' => $user2->email",
          "351:             );",
          "354:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id, $forum3->id));",
          "360:         try {",
          "361:             mod_forum_external::get_forum_discussions(array($forum2->id));",
          "362:             $this->fail('Exception expected due to attempting to access qanda forum without posting.');",
          "363:         } catch (moodle_exception $e) {",
          "364:             $this->assertEquals('nopermissions', $e->errorcode);",
          "365:         }",
          "",
          "[Added Lines]",
          "311:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id));",
          "317:         $this->assertDebuggingCalled();",
          "321:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
          "322:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "323:         $this->assertEquals(0, count($discussions));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:         } catch (moodle_exception $e) {",
          "373:             $this->assertEquals('nopermissions', $e->errorcode);",
          "374:         }",
          "377:         $enrol->unenrol_user($instance2, $user1->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:         $this->assertDebuggingCalled();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "383:         } catch (moodle_exception $e) {",
          "384:             $this->assertEquals('requireloginerror', $e->errorcode);",
          "385:         }",
          "386:     }",
          "387: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:         $this->assertDebuggingCalled();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aa9d93c7a78d14fa30e2afbfd8fa7e09bc9cb41",
      "candidate_info": {
        "commit_hash": "3aa9d93c7a78d14fa30e2afbfd8fa7e09bc9cb41",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3aa9d93c7a78d14fa30e2afbfd8fa7e09bc9cb41",
        "files": [
          "mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php"
        ],
        "message": "MDL-45303 Web Services: forum_get_discussions ws misses permissions check",
        "before_after_code_files": [
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:         $arrdiscussions = array();",
          "204:         $arrusers = array();",
          "",
          "[Removed Lines]",
          "200:         $arrcourseschecked = array();",
          "202:         $arrcoursesforuminfo = array();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:         foreach ($forumids as $id) {",
          "209:             $forum = $DB->get_record('forum', array('id' => $id), '*', MUST_EXIST);",
          "233:             $modcontext = context_module::instance($cm->id);",
          "235:             require_capability('mod/forum:viewdiscussion', $modcontext);",
          "243:                 }",
          "244:             }",
          "250:                 foreach ($discussions as $discussion) {",
          "255:                     }",
          "256:                     $usernamefields = user_picture::fields();",
          "258:                     if (empty($arrusers[$discussion->userid])) {",
          "",
          "[Removed Lines]",
          "211:             if (!in_array($forum->course, $arrcourseschecked)) {",
          "213:                 self::validate_context(context_course::instance($forum->course));",
          "215:                 $arrcourseschecked[] = $forum->course;",
          "216:             }",
          "218:             if (!isset($arrcoursesforuminfo[$forum->course])) {",
          "219:                 $modinfo = get_fast_modinfo($forum->course);",
          "220:                 $arrcoursesforuminfo[$forum->course] = $modinfo->get_instances_of('forum');",
          "221:             }",
          "223:             if (empty($arrcoursesforuminfo[$forum->course][$forum->id])) {",
          "224:                 throw new moodle_exception('invalidmodule', 'error');",
          "225:             }",
          "227:             $cm = $arrcoursesforuminfo[$forum->course][$forum->id];",
          "229:             if (!$cm->uservisible) {",
          "230:                 throw new moodle_exception('nopermissiontoshow', 'error');",
          "231:             }",
          "237:             $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "239:             $unreads = array();",
          "240:             if ($cantrack = forum_tp_can_track_forums($forum)) {",
          "241:                 if ($forumtracked = forum_tp_is_tracked($forum)) {",
          "242:                     $unreads = forum_get_discussions_unread($cm);",
          "246:             $replies = forum_count_discussion_replies($id);",
          "248:             $order = 'timemodified DESC';",
          "249:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id), $order, '*', $limitfrom, $limitnum)) {",
          "253:                     if ($forum->type == 'qanda' && !forum_user_has_posted($discussion->forum, $discussion->id, $USER->id)) {",
          "254:                         require_capability('mod/forum:viewqandawithoutposting', $modcontext);",
          "",
          "[Added Lines]",
          "206:             $course = get_course($forum->course);",
          "208:             $modinfo = get_fast_modinfo($course);",
          "209:             $forums  = $modinfo->get_instances_of('forum');",
          "210:             $cm = $forums[$forum->id];",
          "216:             self::validate_context($modcontext);",
          "221:             $params = array();",
          "223:             $groupselect = \"\";",
          "224:             $groupmode = groups_get_activity_groupmode($cm, $course);",
          "226:             if ($groupmode and $groupmode != VISIBLEGROUPS and !has_capability('moodle/site:accessallgroups', $modcontext)) {",
          "228:                 $usergroups = groups_get_user_groups($course->id);",
          "229:                 if (!empty($usergroups['0'])) {",
          "230:                     list($sql, $params) = $DB->get_in_or_equal($usergroups['0']);",
          "231:                     $groupselect = \"AND (groupid $sql OR groupid = -1)\";",
          "234:             array_unshift($params, $id);",
          "235:             $select = \"forum = ? $groupselect\";",
          "237:             if ($discussions = $DB->get_records_select('forum_discussions', $select, $params, 'timemodified DESC', '*',",
          "238:                                                             $limitfrom, $limitnum)) {",
          "241:                 $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "243:                 $unreads = array();",
          "244:                 if ($cantrack = forum_tp_can_track_forums($forum)) {",
          "245:                     if ($forumtracked = forum_tp_is_tracked($forum)) {",
          "246:                         $unreads = forum_get_discussions_unread($cm);",
          "247:                     }",
          "248:                 }",
          "250:                 $replies = forum_count_discussion_replies($id);",
          "254:                     if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
          "255:                         continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:                     if (!empty($replies[$discussion->id])) {",
          "291:                          $return->numreplies = (int) $replies[$discussion->id]->replies;",
          "292:                          $return->lastpost = (int) $replies[$discussion->id]->lastpostid;",
          "294:                         $return->numreplies = 0;",
          "295:                         $return->lastpost = (int) $discussion->firstpost;",
          "298:                     $lastpost = $DB->get_record('forum_posts', array('id' => $return->lastpost), '*', MUST_EXIST);",
          "299:                     if (empty($arrusers[$lastpost->userid])) {",
          "",
          "[Removed Lines]",
          "293:                      } else { // No replies, so the last post will be the first post.",
          "296:                      }",
          "",
          "[Added Lines]",
          "295:                     } else { // No replies, so the last post will be the first post.",
          "298:                     }",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:         $record->trackingtype = FORUM_TRACKING_FORCED;",
          "178:         $forum2 = self::getDataGenerator()->create_module('forum', $record);",
          "186:         $record = new stdClass();",
          "187:         $record->course = $course1->id;",
          "",
          "[Removed Lines]",
          "181:         $record = new stdClass();",
          "182:         $record->course = $course2->id;",
          "183:         $forum3 = self::getDataGenerator()->create_module('forum', $record);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         $record->forum = $forum2->id;",
          "196:         $discussion2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "205:         $record = new stdClass();",
          "206:         $record->discussion = $discussion1->id;",
          "",
          "[Removed Lines]",
          "198:         $record = new stdClass();",
          "199:         $record->course = $course2->id;",
          "200:         $record->userid = $user2->id;",
          "201:         $record->forum = $forum3->id;",
          "202:         $discussion3 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         $discussion2reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "238:         $this->assertEquals(7, $DB->count_records_select('forum_posts', 'discussion = :discussion1 OR discussion = :discussion2',",
          "",
          "[Removed Lines]",
          "230:         $this->assertEquals(3, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2 OR id = :forum3',",
          "231:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
          "234:         $this->assertEquals(3, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2",
          "235:                 OR id = :forum3', array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
          "",
          "[Added Lines]",
          "219:         $this->assertEquals(2, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2',",
          "220:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
          "223:         $this->assertEquals(2, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2',",
          "224:                                                             array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:         $newrole = create_role('Role 2', 'role2', 'Role 2 description');",
          "262:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
          "270:         $expecteddiscussions = array();",
          "271:         $expecteddiscussions[$discussion1->id] = array(",
          "",
          "[Removed Lines]",
          "265:         $cm = get_coursemodule_from_id('forum', $forum3->cmid, 0, false, MUST_EXIST);",
          "266:         $context = context_module::instance($cm->id);",
          "267:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322:                 'lastuserpicture' => $user3->picture,",
          "323:                 'lastuseremail' => $user3->email",
          "324:             );",
          "355:         external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "356:         $this->assertEquals($expecteddiscussions, $discussions);",
          "359:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
          "368:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
          "",
          "[Removed Lines]",
          "325:             $expecteddiscussions[$discussion3->id] = array(",
          "326:                 'id' => $discussion3->id,",
          "327:                 'course' => $discussion3->course,",
          "328:                 'forum' => $discussion3->forum,",
          "329:                 'name' => $discussion3->name,",
          "330:                 'firstpost' => $discussion3->firstpost,",
          "331:                 'userid' => $discussion3->userid,",
          "332:                 'groupid' => $discussion3->groupid,",
          "333:                 'assessed' => $discussion3->assessed,",
          "334:                 'timemodified' => $discussion3->timemodified,",
          "335:                 'usermodified' => $discussion3->usermodified,",
          "336:                 'timestart' => $discussion3->timestart,",
          "337:                 'timeend' => $discussion3->timeend,",
          "338:                 'firstuserfullname' => fullname($user2),",
          "339:                 'firstuserimagealt' => $user2->imagealt,",
          "340:                 'firstuserpicture' => $user2->picture,",
          "341:                 'firstuseremail' => $user2->email,",
          "342:                 'subject' => $discussion3->name,",
          "343:                 'numreplies' => 0,",
          "344:                 'numunread' => 1,",
          "345:                 'lastpost' => $discussion3->firstpost,",
          "346:                 'lastuserid' => $user2->id,",
          "347:                 'lastuserfullname' => fullname($user2),",
          "348:                 'lastuserimagealt' => $user2->imagealt,",
          "349:                 'lastuserpicture' => $user2->picture,",
          "350:                 'lastuseremail' => $user2->email",
          "351:             );",
          "354:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id, $forum3->id));",
          "360:         try {",
          "361:             mod_forum_external::get_forum_discussions(array($forum2->id));",
          "362:             $this->fail('Exception expected due to attempting to access qanda forum without posting.');",
          "363:         } catch (moodle_exception $e) {",
          "364:             $this->assertEquals('nopermissions', $e->errorcode);",
          "365:         }",
          "",
          "[Added Lines]",
          "311:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id));",
          "317:         $this->assertDebuggingCalled();",
          "321:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
          "322:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "323:         $this->assertEquals(0, count($discussions));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:         } catch (moodle_exception $e) {",
          "373:             $this->assertEquals('nopermissions', $e->errorcode);",
          "374:         }",
          "377:         $enrol->unenrol_user($instance2, $user1->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:         $this->assertDebuggingCalled();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "383:         } catch (moodle_exception $e) {",
          "384:             $this->assertEquals('requireloginerror', $e->errorcode);",
          "385:         }",
          "386:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:         $this->assertDebuggingCalled();",
          "",
          "---------------"
        ]
      }
    }
  ]
}