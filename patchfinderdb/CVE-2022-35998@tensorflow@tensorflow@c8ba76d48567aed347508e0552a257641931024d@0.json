{
  "cve_id": "CVE-2022-35998",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `EmptyTensorList` receives an input `element_shape` with more than one dimension, it gives a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit c8ba76d48567aed347508e0552a257641931024d. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "c8ba76d48567aed347508e0552a257641931024d",
  "patch_info": {
    "commit_hash": "c8ba76d48567aed347508e0552a257641931024d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/c8ba76d48567aed347508e0552a257641931024d",
    "files": [
      "tensorflow/core/kernels/list_kernels.cc",
      "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
    ],
    "message": "Fix tf.raw_ops.EmptyTensorList vulnerability with invalid `element_shape`.\n\nCheck that given `element_shape` is valid.\nAdd graph/eager unit tests. Graph mode was already ok but eager mode was not.\n\nPiperOrigin-RevId: 461906461",
    "before_after_code_files": [
      "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
      "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc": [
      "File: tensorflow/core/kernels/list_kernels.cc -> tensorflow/core/kernels/list_kernels.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: #include \"tensorflow/core/kernels/list_kernels.h\"",
      "24: #include <limits>",
      "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "27: #include \"tensorflow/core/framework/allocator.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include <algorithm>",
      "25: #include <iterator>",
      "27: #include <memory>",
      "28: #include <utility>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: #include \"tensorflow/core/framework/tensor_types.h\"",
      "31: #include \"tensorflow/core/framework/variant.h\"",
      "32: #include \"tensorflow/core/framework/variant_op_registry.h\"",
      "38: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "33: #include \"tensorflow/core/kernels/concat_lib.h\"",
      "34: #include \"tensorflow/core/lib/core/coding.h\"",
      "35: #include \"tensorflow/core/lib/core/errors.h\"",
      "36: #include \"tensorflow/core/util/util.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "49:     return errors::InvalidArgument(",
      "50:         \"The only valid scalar shape tensor is the fully unknown shape \"",
      "51:         \"specified as -1.\");",
      "52:   }",
      "53:   if (t.dtype() == DT_INT32) {",
      "54:     return PartialTensorShape::MakePartialShape(t.vec<int32>().data(),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:   } else if (t.shape().dims() != 1) {",
      "53:     return errors::InvalidArgument(\"Shape must be at most rank 1 but is rank \",",
      "54:                                    t.shape().dims());",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
      "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1458:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
      "1459:       self.evaluate(t)",
      "1461:   def testEvenSplit(self):",
      "1463:     def RunTest(input_tensor, lengths, expected_stacked_output):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1461:   def testEmptyTensorListInvalidShape(self):",
      "1462:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "1463:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
      "1464:       t = gen_list_ops.EmptyTensorList(",
      "1465:           element_shape=array_ops.ones(dtype=dtypes.int32, shape=[1, 0]),",
      "1466:           max_num_elements=constant_op.constant(1),",
      "1467:           element_dtype=dtypes.int32)",
      "1468:       self.evaluate(t)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7cd08bbacb12b63715c062346c29e0b5d2e7ba5f",
      "candidate_info": {
        "commit_hash": "7cd08bbacb12b63715c062346c29e0b5d2e7ba5f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7cd08bbacb12b63715c062346c29e0b5d2e7ba5f",
        "files": [
          "tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/python/kernel_tests/list_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.EmptyTensorList vulnerability with invalid `element_shape`.\n\nCheck that given `element_shape` is valid.\nAdd graph/eager unit tests. Graph mode was already ok but eager mode was not.\n\nPiperOrigin-RevId: 461906461",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/python/kernel_tests/list_ops_test.py||tensorflow/python/kernel_tests/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc": [
          "File: tensorflow/core/kernels/list_kernels.cc -> tensorflow/core/kernels/list_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/kernels/list_kernels.h\"",
          "24: #include <limits>",
          "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "27: #include \"tensorflow/core/framework/allocator.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <algorithm>",
          "25: #include <iterator>",
          "27: #include <memory>",
          "28: #include <utility>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: #include \"tensorflow/core/framework/tensor_types.h\"",
          "31: #include \"tensorflow/core/framework/variant.h\"",
          "32: #include \"tensorflow/core/framework/variant_op_registry.h\"",
          "38: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "33: #include \"tensorflow/core/kernels/concat_lib.h\"",
          "34: #include \"tensorflow/core/lib/core/coding.h\"",
          "35: #include \"tensorflow/core/lib/core/errors.h\"",
          "36: #include \"tensorflow/core/util/util.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     return errors::InvalidArgument(",
          "50:         \"The only valid scalar shape tensor is the fully unknown shape \"",
          "51:         \"specified as -1.\");",
          "52:   }",
          "53:   if (t.dtype() == DT_INT32) {",
          "54:     return PartialTensorShape::MakePartialShape(t.vec<int32>().data(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   } else if (t.shape().dims() != 1) {",
          "53:     return errors::InvalidArgument(\"Shape must be at most rank 1 but is rank \",",
          "54:                                    t.shape().dims());",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/list_ops_test.py||tensorflow/python/kernel_tests/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/list_ops_test.py -> tensorflow/python/kernel_tests/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1462:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
          "1463:       self.evaluate(t)",
          "1465:   def testEvenSplit(self):",
          "1467:     def RunTest(input_tensor, lengths, expected_stacked_output):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1465:   def testEmptyTensorListInvalidShape(self):",
          "1466:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1467:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
          "1468:       t = gen_list_ops.EmptyTensorList(",
          "1469:           element_shape=array_ops.ones(dtype=dtypes.int32, shape=[1, 0]),",
          "1470:           max_num_elements=constant_op.constant(1),",
          "1471:           element_dtype=dtypes.int32)",
          "1472:       self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "720b705476c46c07256c2558a83516c72a4ac9b6",
      "candidate_info": {
        "commit_hash": "720b705476c46c07256c2558a83516c72a4ac9b6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/720b705476c46c07256c2558a83516c72a4ac9b6",
        "files": [
          "tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.EmptyTensorList vulnerability with invalid `element_shape`.\n\nCheck that given `element_shape` is valid.\nAdd graph/eager unit tests. Graph mode was already ok but eager mode was not.\n\nPiperOrigin-RevId: 461906461",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc": [
          "File: tensorflow/core/kernels/list_kernels.cc -> tensorflow/core/kernels/list_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/kernels/list_kernels.h\"",
          "24: #include <limits>",
          "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "27: #include \"tensorflow/core/framework/allocator.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <algorithm>",
          "25: #include <iterator>",
          "27: #include <memory>",
          "28: #include <utility>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: #include \"tensorflow/core/framework/tensor_types.h\"",
          "31: #include \"tensorflow/core/framework/variant.h\"",
          "32: #include \"tensorflow/core/framework/variant_op_registry.h\"",
          "38: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "33: #include \"tensorflow/core/kernels/concat_lib.h\"",
          "34: #include \"tensorflow/core/lib/core/coding.h\"",
          "35: #include \"tensorflow/core/lib/core/errors.h\"",
          "36: #include \"tensorflow/core/util/util.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     return errors::InvalidArgument(",
          "50:         \"The only valid scalar shape tensor is the fully unknown shape \"",
          "51:         \"specified as -1.\");",
          "52:   }",
          "53:   if (t.dtype() == DT_INT32) {",
          "54:     return PartialTensorShape::MakePartialShape(t.vec<int32>().data(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   } else if (t.shape().dims() != 1) {",
          "53:     return errors::InvalidArgument(\"Shape must be at most rank 1 but is rank \",",
          "54:                                    t.shape().dims());",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1458:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
          "1459:       self.evaluate(t)",
          "1461:   def testEvenSplit(self):",
          "1463:     def RunTest(input_tensor, lengths, expected_stacked_output):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1461:   def testEmptyTensorListInvalidShape(self):",
          "1462:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1463:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
          "1464:       t = gen_list_ops.EmptyTensorList(",
          "1465:           element_shape=array_ops.ones(dtype=dtypes.int32, shape=[1, 0]),",
          "1466:           max_num_elements=constant_op.constant(1),",
          "1467:           element_dtype=dtypes.int32)",
          "1468:       self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13d1f32fa497dba1a6fc025bf2fb70d4530b86c3",
      "candidate_info": {
        "commit_hash": "13d1f32fa497dba1a6fc025bf2fb70d4530b86c3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/13d1f32fa497dba1a6fc025bf2fb70d4530b86c3",
        "files": [
          "tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.EmptyTensorList vulnerability with invalid `element_shape`.\n\nCheck that given `element_shape` is valid.\nAdd graph/eager unit tests. Graph mode was already ok but eager mode was not.\n\nPiperOrigin-RevId: 461906461",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.cc||tensorflow/core/kernels/list_kernels.cc": [
          "File: tensorflow/core/kernels/list_kernels.cc -> tensorflow/core/kernels/list_kernels.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/kernels/list_kernels.h\"",
          "24: #include <limits>",
          "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "27: #include \"tensorflow/core/framework/allocator.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <algorithm>",
          "25: #include <iterator>",
          "27: #include <memory>",
          "28: #include <utility>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: #include \"tensorflow/core/framework/tensor_types.h\"",
          "31: #include \"tensorflow/core/framework/variant.h\"",
          "32: #include \"tensorflow/core/framework/variant_op_registry.h\"",
          "38: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "33: #include \"tensorflow/core/kernels/concat_lib.h\"",
          "34: #include \"tensorflow/core/lib/core/coding.h\"",
          "35: #include \"tensorflow/core/lib/core/errors.h\"",
          "36: #include \"tensorflow/core/util/util.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     return errors::InvalidArgument(",
          "50:         \"The only valid scalar shape tensor is the fully unknown shape \"",
          "51:         \"specified as -1.\");",
          "52:   }",
          "53:   if (t.dtype() == DT_INT32) {",
          "54:     return PartialTensorShape::MakePartialShape(t.vec<int32>().data(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   } else if (t.shape().dims() != 1) {",
          "53:     return errors::InvalidArgument(\"Shape must be at most rank 1 but is rank \",",
          "54:                                    t.shape().dims());",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1458:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
          "1459:       self.evaluate(t)",
          "1461:   def testEvenSplit(self):",
          "1463:     def RunTest(input_tensor, lengths, expected_stacked_output):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1461:   def testEmptyTensorListInvalidShape(self):",
          "1462:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1463:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
          "1464:       t = gen_list_ops.EmptyTensorList(",
          "1465:           element_shape=array_ops.ones(dtype=dtypes.int32, shape=[1, 0]),",
          "1466:           max_num_elements=constant_op.constant(1),",
          "1467:           element_dtype=dtypes.int32)",
          "1468:       self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    }
  ]
}