{
  "cve_id": "CVE-2016-10168",
  "cve_desc": "Integer overflow in gd_io.c in the GD Graphics Library (aka libgd) before 2.2.4 allows remote attackers to have unspecified impact via vectors involving the number of horizontal and vertical chunks in an image.",
  "repo": "libgd/libgd",
  "patch_hash": "69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6",
  "patch_info": {
    "commit_hash": "69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6",
    "files": [
      "src/gd_gd2.c",
      "tests/gd2/.gitignore",
      "tests/gd2/CMakeLists.txt",
      "tests/gd2/Makemodule.am",
      "tests/gd2/bug00354.c",
      "tests/gd2/bug00354a.gd2",
      "tests/gd2/bug00354b.gd2"
    ],
    "message": "Fix #354: Signed Integer Overflow gd_io.c\n\nGD2 stores the number of horizontal and vertical chunks as words (i.e. 2\nbyte unsigned). These values are multiplied and assigned to an int when\nreading the image, what can cause integer overflows. We have to avoid\nthat, and also make sure that either chunk count is actually greater\nthan zero. If illegal chunk counts are detected, we bail out from\nreading the image.",
    "before_after_code_files": [
      "src/gd_gd2.c||src/gd_gd2.c",
      "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
      "tests/gd2/bug00354.c||tests/gd2/bug00354.c"
    ]
  },
  "patch_diff": {
    "src/gd_gd2.c||src/gd_gd2.c": [
      "File: src/gd_gd2.c -> src/gd_gd2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "209:  GD2_DBG (printf (\"%d Chunks vertically\\n\", *ncy));",
      "211:  if (gd2_compressed (*fmt)) {",
      "212:   nc = (*ncx) * (*ncy);",
      "214:   GD2_DBG (printf (\"Reading %d chunk index entries\\n\", nc));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "212:   if (*ncx <= 0 || *ncy <= 0 || *ncx > INT_MAX / *ncy) {",
      "213:    GD2_DBG(printf (\"Illegal chunk counts: %d * %d\\n\", *ncx, *ncy));",
      "214:    goto fail1;",
      "215:   }",
      "",
      "---------------"
    ],
    "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
      "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: libgd_test_programs += \\",
      "2:  gd2/bug_289 \\",
      "3:  gd2/bug00309 \\",
      "4:  gd2/gd2_empty_file \\",
      "5:  gd2/php_bug_72339 \\",
      "6:  gd2/gd2_read_corrupt \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4:  gd2/bug00354 \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20: EXTRA_DIST += \\",
      "21:  gd2/CMakeLists.txt \\",
      "22:  gd2/conv_gd2_exp.gd2 \\",
      "23:  gd2/conv_test.gd2 \\",
      "24:  gd2/conv_test_exp.png \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:  gd2/bug00354a.gd2 \\",
      "24:  gd2/bug00354b.gd2 \\",
      "",
      "---------------"
    ],
    "tests/gd2/bug00354.c||tests/gd2/bug00354.c": [
      "File: tests/gd2/bug00354.c -> tests/gd2/bug00354.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: #include \"gd.h\"",
      "11: #include \"gdtest.h\"",
      "14: int main()",
      "15: {",
      "16:     gdImagePtr im;",
      "17:     FILE *fp;",
      "19:     fp = gdTestFileOpen2(\"gd2\", \"bug00354a.gd2\");",
      "20:     gdTestAssert(fp != NULL);",
      "21:     im = gdImageCreateFromGd2(fp);",
      "22:     gdTestAssert(im == NULL);",
      "23:     fclose(fp);",
      "25:     fp = gdTestFileOpen2(\"gd2\", \"bug00354b.gd2\");",
      "26:     gdTestAssert(fp != NULL);",
      "27:     im = gdImageCreateFromGd2(fp);",
      "28:     gdTestAssert(im == NULL);",
      "29:     fclose(fp);",
      "31:     return gdNumFailures();",
      "32: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0dfcab53f9bd8c71825fe981b3342601663cd42f",
      "candidate_info": {
        "commit_hash": "0dfcab53f9bd8c71825fe981b3342601663cd42f",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/0dfcab53f9bd8c71825fe981b3342601663cd42f",
        "files": [
          "src/gd_gd2.c",
          "tests/gd2/.gitignore",
          "tests/gd2/CMakeLists.txt",
          "tests/gd2/Makemodule.am",
          "tests/gd2/bug00354.c",
          "tests/gd2/bug00354a.gd2",
          "tests/gd2/bug00354b.gd2"
        ],
        "message": "Fix #354: Signed Integer Overflow gd_io.c\n\nGD2 stores the number of horizontal and vertical chunks as words (i.e. 2\nbyte unsigned). These values are multiplied and assigned to an int when\nreading the image, what can cause integer overflows. We have to avoid\nthat, and also make sure that either chunk count is actually greater\nthan zero. If illegal chunk counts are detected, we bail out from\nreading the image.",
        "before_after_code_files": [
          "src/gd_gd2.c||src/gd_gd2.c",
          "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
          "tests/gd2/bug00354.c||tests/gd2/bug00354.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_gd2.c||src/gd_gd2.c",
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
            "tests/gd2/bug00354.c||tests/gd2/bug00354.c"
          ],
          "candidate": [
            "src/gd_gd2.c||src/gd_gd2.c",
            "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
            "tests/gd2/bug00354.c||tests/gd2/bug00354.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_gd2.c||src/gd_gd2.c": [
          "File: src/gd_gd2.c -> src/gd_gd2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  GD2_DBG (printf (\"%d Chunks vertically\\n\", *ncy));",
          "211:  if (gd2_compressed (*fmt)) {",
          "212:   nc = (*ncx) * (*ncy);",
          "214:   GD2_DBG (printf (\"Reading %d chunk index entries\\n\", nc));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:   if (*ncx <= 0 || *ncy <= 0 || *ncx > INT_MAX / *ncy) {",
          "213:    GD2_DBG(printf (\"Illegal chunk counts: %d * %d\\n\", *ncx, *ncy));",
          "214:    goto fail1;",
          "215:   }",
          "",
          "---------------"
        ],
        "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
          "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: libgd_test_programs += \\",
          "2:  gd2/bug_289 \\",
          "3:  gd2/bug00309 \\",
          "4:  gd2/gd2_empty_file \\",
          "5:  gd2/php_bug_72339 \\",
          "6:  gd2/gd2_read_corrupt \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:  gd2/bug00354 \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: EXTRA_DIST += \\",
          "21:  gd2/CMakeLists.txt \\",
          "22:  gd2/conv_gd2_exp.gd2 \\",
          "23:  gd2/conv_test.gd2 \\",
          "24:  gd2/conv_test_exp.png \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  gd2/bug00354a.gd2 \\",
          "24:  gd2/bug00354b.gd2 \\",
          "",
          "---------------"
        ],
        "tests/gd2/bug00354.c||tests/gd2/bug00354.c": [
          "File: tests/gd2/bug00354.c -> tests/gd2/bug00354.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"gd.h\"",
          "11: #include \"gdtest.h\"",
          "14: int main()",
          "15: {",
          "16:     gdImagePtr im;",
          "17:     FILE *fp;",
          "19:     fp = gdTestFileOpen2(\"gd2\", \"bug00354a.gd2\");",
          "20:     gdTestAssert(fp != NULL);",
          "21:     im = gdImageCreateFromGd2(fp);",
          "22:     gdTestAssert(im == NULL);",
          "23:     fclose(fp);",
          "25:     fp = gdTestFileOpen2(\"gd2\", \"bug00354b.gd2\");",
          "26:     gdTestAssert(fp != NULL);",
          "27:     im = gdImageCreateFromGd2(fp);",
          "28:     gdTestAssert(im == NULL);",
          "29:     fclose(fp);",
          "31:     return gdNumFailures();",
          "32: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}