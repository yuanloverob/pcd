{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e427337fe5df62439b980e2e091a89b36001d79",
      "candidate_info": {
        "commit_hash": "7e427337fe5df62439b980e2e091a89b36001d79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e427337fe5df62439b980e2e091a89b36001d79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Faster and smaller implementation of sqlite3StrICmp().\n\nFossilOrigin-Name: 7ac500fb5abfe1ad60f2ffdcc8fbe5ccc1c641bbeed53f00940e9ff78788e53d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322: }",
          "323: int sqlite3StrICmp(const char *zLeft, const char *zRight){",
          "324:   unsigned char *a, *b;",
          "326:   a = (unsigned char *)zLeft;",
          "327:   b = (unsigned char *)zRight;",
          "328:   for(;;){",
          "331:     a++;",
          "332:     b++;",
          "333:   }",
          "",
          "[Removed Lines]",
          "325:   int c;",
          "329:     c = (int)UpperToLower[*a] - (int)UpperToLower[*b];",
          "330:     if( c || *a==0 ) break;",
          "",
          "[Added Lines]",
          "325:   int c, x;",
          "329:     c = *a;",
          "330:     x = *b;",
          "331:     if( c==x ){",
          "332:       if( c==0 ) break;",
          "333:     }else{",
          "334:       c = (int)UpperToLower[c] - (int)UpperToLower[x];",
          "335:       if( c ) break;",
          "336:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
      "candidate_info": {
        "commit_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94febb3a77a8c79bc090119585fc7878f44bbf38",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Improved detection of corrupt shadow tables in FTS3.  Enable the debugging special-inserts for FTS3 for both SQLITE_DEBUG and SQLITE_TEST.\n\nFossilOrigin-Name: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4337:   int bIncrOk = (bOptOk",
          "4338:    && pCsr->bDesc==pTab->bDescIdx",
          "4339:    && p->nToken<=MAX_INCR_PHRASE_TOKENS && p->nToken>0",
          "4341:    && pTab->bNoIncrDoclist==0",
          "4342: #endif",
          "4343:   );",
          "",
          "[Removed Lines]",
          "4340: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "4340: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: #endif",
          "303:   int bNoIncrDoclist;",
          "",
          "[Removed Lines]",
          "300: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "300: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <string.h>",
          "24: #include <assert.h>",
          "25: #include <stdlib.h>",
          "28: #define FTS_MAX_APPENDABLE_HEIGHT 16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2030:     nPrefix = fts3PrefixCompress(pTree->zTerm, pTree->nTerm, zTerm, nTerm);",
          "2031:     nSuffix = nTerm-nPrefix;",
          "2033:     nReq += sqlite3Fts3VarintLen(nPrefix)+sqlite3Fts3VarintLen(nSuffix)+nSuffix;",
          "2034:     if( nReq<=p->nNodeSize || !pTree->zTerm ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2036:     if( nSuffix<=0 ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2324:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nPrefix);",
          "2325:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nSuffix);",
          "2326:   memcpy(&pWriter->aData[nData], &zTerm[nPrefix], nSuffix);",
          "2327:   nData += nSuffix;",
          "2328:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nDoclist);",
          "2329:   memcpy(&pWriter->aData[nData], aDoclist, nDoclist);",
          "2330:   pWriter->nData = nData + nDoclist;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331:   assert( nSuffix>0 );",
          "2335:   assert( nDoclist>0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2345:       pWriter->zTerm = zNew;",
          "2346:     }",
          "2347:     assert( pWriter->zTerm==pWriter->zMalloc );",
          "2348:     memcpy(pWriter->zTerm, zTerm, nTerm);",
          "2349:   }else{",
          "2350:     pWriter->zTerm = (char *)zTerm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:     assert( nTerm>0 );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2653:     pMsr->aBuffer = pNew;",
          "2654:   }",
          "2656:   memcpy(pMsr->aBuffer, pList, nList);",
          "2657:   return SQLITE_OK;",
          "2658: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2664:   assert( nList>0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3842:     nPrefix = fts3PrefixCompress(pNode->key.a, pNode->key.n, zTerm, nTerm);",
          "3843:     nSuffix = nTerm - nPrefix;",
          "3844:     nSpace  = sqlite3Fts3VarintLen(nPrefix);",
          "3845:     nSpace += sqlite3Fts3VarintLen(nSuffix) + nSuffix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3853:     if( NEVER(nSuffix<=0) ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5360:     rc = fts3DoIncrmerge(p, &zVal[6]);",
          "5361:   }else if( nVal>10 && 0==sqlite3_strnicmp(zVal, \"automerge=\", 10) ){",
          "5362:     rc = fts3DoAutoincrmerge(p, &zVal[10]);",
          "5374:   }else{",
          "5376:   }",
          "5378:   return rc;",
          "5379: }",
          "",
          "[Removed Lines]",
          "5363: #ifdef SQLITE_TEST",
          "5364:   }else if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5365:     p->nNodeSize = atoi(&zVal[9]);",
          "5366:     rc = SQLITE_OK;",
          "5367:   }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5368:     p->nMaxPendingData = atoi(&zVal[11]);",
          "5369:     rc = SQLITE_OK;",
          "5370:   }else if( nVal>21 && 0==sqlite3_strnicmp(zVal, \"test-no-incr-doclist=\", 21) ){",
          "5371:     p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5372:     rc = SQLITE_OK;",
          "5373: #endif",
          "5375:     rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "5373: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "5375:     int v;",
          "5376:     if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5377:       v = atoi(&zVal[9]);",
          "5378:       if( v>=24 && v<=p->nPgsz-35 ) p->nNodeSize = v;",
          "5379:       rc = SQLITE_OK;",
          "5380:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5381:       v = atoi(&zVal[11]);",
          "5382:       if( v>=64 && v<=FTS3_MAX_PENDING_DATA ) p->nMaxPendingData = v;",
          "5383:       rc = SQLITE_OK;",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bae76a5c40703871e5ce4cd23d6fae5a3836606f524a63b01ac828c7a602c5e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "119e1ffc5eb7783dbee1553f0239c3fea587a11d",
      "candidate_info": {
        "commit_hash": "119e1ffc5eb7783dbee1553f0239c3fea587a11d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/119e1ffc5eb7783dbee1553f0239c3fea587a11d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "The defragmentPage() routine detects corruption in the first-free-slot fields at offset 1 in the header and throws an error, rather than asserting.\n\nFossilOrigin-Name: fb125bd338ab32b33d02fe61b76497b6d4a2a160056d6e759e15c94903e61a41",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3fde56da46e9592143b8beeee5eba4d74b8ef67edb7bf73a85edd2e0f7a8d21",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1433:   if( (int)data[hdr+7]<=nMaxFrag ){",
          "1434:     int iFree = get2byte(&data[hdr+1]);",
          "1440:     if( iFree ){",
          "1441:       int iFree2 = get2byte(&data[iFree]);",
          "1442:       if( iFree2>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1439:     assert( iFree<=usableSize-4 );",
          "",
          "[Added Lines]",
          "1435:     if( iFree>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcb02429ecf97820b363f4ad505afa2f3d779dc5",
      "candidate_info": {
        "commit_hash": "fcb02429ecf97820b363f4ad505afa2f3d779dc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcb02429ecf97820b363f4ad505afa2f3d779dc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "test/corruptL.test",
          "test/memdb1.test"
        ],
        "message": "When deserializing a database (sqlite3_deserialize()), do not attempt to parse the schema before the data is loaded.\n\nFossilOrigin-Name: 4e1b005e8b397a22161a6b89cbd3f17bda70a6e0a86d8abdc61856edf2a74da4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "test/corruptL.test||test/corruptL.test",
          "test/memdb1.test||test/memdb1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4f0568fde1d4070e7522ec36c0958be7426076002a7fa2da12a46411ab2e92d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     sqlite3BtreeEnterAll(db);",
          "235:     db->init.iDb = 0;",
          "236:     db->mDbFlags &= ~(DBFLAG_SchemaKnownOk);",
          "238:     sqlite3BtreeLeaveAll(db);",
          "239:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     rc = sqlite3Init(db, &zErrDyn);",
          "",
          "[Added Lines]",
          "237:     if( !REOPEN_AS_MEMDB(db) ){",
          "238:       rc = sqlite3Init(db, &zErrDyn);",
          "239:     }",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: do_catchsql_test 1.1 {",
          "124:   PRAGMA cell_size_check = off;",
          "125:   DROP INDEX t1x1;",
          "128: do_catchsql_test 1.2 {",
          "129:   SELECT sum(s+length(b)) FROM t1 WHERE a IN (110,10,150) AND q IS NULL;",
          "132: do_catchsql_test 1.3 {",
          "133:   REINDEX t1;",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "",
          "[Removed Lines]",
          "126: } {1 {no such index: t1x1}}",
          "130: } {1 {no such table: t1}}",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "",
          "[Added Lines]",
          "126: } {1 {database disk image is malformed}}",
          "130: } {1 {database disk image is malformed}}",
          "134: } {1 {database disk image is malformed}}",
          "136: do_catchsql_test 1.4 {",
          "137:   PRAGMA integrity_check",
          "138: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   lappend rc $msg",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #-------------------------------------------------------------------------",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "201:   }",
          "202: } {1 {table t1 already exists}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
      "candidate_info": {
        "commit_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Performance optimizations in the rtreeStepToLeaf() routine of RTree.\n\nFossilOrigin-Name: 4e34e3615ff31f4a6432033797b2e1a6604007ea0e501d714ecb362632776150",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1565:   eInt = pRtree->eCoordType==RTREE_COORD_INT32;",
          "1566:   while( (p = rtreeSearchPointFirst(pCur))!=0 && p->iLevel>0 ){",
          "1567:     pNode = rtreeNodeOfFirstSearchPoint(pCur, &rc);",
          "1568:     if( rc ) return rc;",
          "1569:     nCell = NCELL(pNode);",
          "1570:     assert( nCell<200 );",
          "1571:     while( p->iCell<nCell ){",
          "1572:       sqlite3_rtree_dbl rScore = (sqlite3_rtree_dbl)-1;",
          "1574:       eWithin = FULLY_WITHIN;",
          "1575:       for(ii=0; ii<nConstraint; ii++){",
          "1576:         RtreeConstraint *pConstraint = pCur->aConstraint + ii;",
          "",
          "[Removed Lines]",
          "1573:       u8 *pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "[Added Lines]",
          "1567:     u8 *pCellData;",
          "1572:     pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1583:         }else{",
          "1584:           rtreeNonleafConstraint(pConstraint, eInt, pCellData, &eWithin);",
          "1585:         }",
          "1587:       }",
          "1589:       if( eWithin==NOT_WITHIN ) continue;",
          "1590:       x.iLevel = p->iLevel - 1;",
          "1591:       if( x.iLevel ){",
          "1592:         x.id = readInt64(pCellData);",
          "",
          "[Removed Lines]",
          "1586:         if( eWithin==NOT_WITHIN ) break;",
          "1588:       p->iCell++;",
          "",
          "[Added Lines]",
          "1587:         if( eWithin==NOT_WITHIN ){",
          "1588:           p->iCell++;",
          "1589:           pCellData += pRtree->nBytesPerCell;",
          "1590:           break;",
          "1591:         }",
          "1594:       p->iCell++;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39be3c61bd809cc89bdfdba90afc391ac9c2f81dfd8bb68a9b085b0ca8cd1fba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}