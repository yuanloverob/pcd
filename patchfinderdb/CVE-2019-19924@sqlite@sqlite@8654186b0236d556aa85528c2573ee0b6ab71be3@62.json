{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
      "candidate_info": {
        "commit_hash": "f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f467744d5fc68f64f051d7e3a8ba8e4a67b006bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with running ALTER TABLE on a schema that contains expressions of the type \"col IN ()\" (empty set on RHS of IN operator).\n\nFossilOrigin-Name: 2d9cd06715092c312c8c0ec392696a0e90ed090b074e2082e0b830f1399aa941",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 008112bcef561a8a3ebfb007cbef36cbc0071f547e6ebdba3d3bbb39e2c48c7a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1171:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1169:       sqlite3ExprDelete(pParse->db, A);",
          "1170:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "[Added Lines]",
          "1169:       if( IN_RENAME_OBJECT==0 ){",
          "1170:         sqlite3ExprDelete(pParse->db, A);",
          "1171:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1172:       }",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     SELECT a,b,c FROM \"t1x\" WHERE b>='d' ORDER BY name;",
          "64:     SELECT new.c;",
          "65:   END}}",
          "66: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #-------------------------------------------------------------------------",
          "68: reset_db",
          "69: do_execsql_test 3.0 {",
          "70:   CREATE TABLE t1(a, b, c, d);",
          "71:   CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (b IN ());",
          "72: }",
          "74: do_execsql_test 3.1 {",
          "75:   ALTER TABLE t1 RENAME b TO bbb;",
          "76: }",
          "78: do_execsql_test 3.2 {",
          "79:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "80: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3af1b60e3a3963b70399320cdf59286537004f69",
      "candidate_info": {
        "commit_hash": "3af1b60e3a3963b70399320cdf59286537004f69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3af1b60e3a3963b70399320cdf59286537004f69",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/oserror.test"
        ],
        "message": "Changes to oserror.test so that it works even on systems that allow an unusually large number of file descriptors.\n\nFossilOrigin-Name: a27b0b880d76c6838c0365f66bcd69b1b49b7594470993b608f4e490cbdc4882",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/oserror.test||test/oserror.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b1dd4d48cd79a585e1fa7ee79128e9f2a9ee9846339dc56bbd67b75112dcad5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/oserror.test||test/oserror.test": [
          "File: test/oserror.test -> test/oserror.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: # an error may be reported for either open() or getcwd() here.",
          "53: #",
          "54: if {![clang_sanitize_address]} {",
          "55:   do_test 1.1.1 {",
          "56:     set ::log [list]",
          "61:   do_test 1.1.2 {",
          "67: }",
          "",
          "[Removed Lines]",
          "57:     list [catch {",
          "58:       for {set i 0} {$i < 20000} {incr i} { sqlite3 dbh_$i test.db -readonly 1 }",
          "59:     } msg] $msg",
          "60:   } {1 {unable to open database file}}",
          "62:     catch { for {set i 0} {$i < 20000} {incr i} { dbh_$i close } }",
          "63:   } {1}",
          "64:   do_re_test 1.1.3 {",
          "65:     lindex $::log 0",
          "66:   } {^os_unix.c:\\d+: \\(\\d+\\) (open|getcwd)\\(.*test.db\\) - }",
          "",
          "[Added Lines]",
          "55:   unset -nocomplain rc",
          "56:   unset -nocomplain nOpen",
          "57:   set nOpen 20000",
          "60:     set ::rc [catch {",
          "61:       for {set i 0} {$i < $::nOpen} {incr i} { sqlite3 dbh_$i test.db -readonly 1 }",
          "62:     } msg]",
          "63:     if {$::rc==0} {",
          "64:       # Some system (ex: Debian) are able to create 20000+ file descriptiors",
          "65:       # such systems will not fail here",
          "66:       set x ok",
          "67:     } elseif {$::rc==1 && $msg==\"unable to open database file\"} {",
          "68:       set x ok",
          "69:     } else {",
          "70:       set x [list $::rc $msg]",
          "71:     }",
          "72:   } {ok}",
          "74:     catch { for {set i 0} {$i < $::nOpen} {incr i} { dbh_$i close } }",
          "75:   } $::rc",
          "76:   if {$rc} {",
          "77:     do_re_test 1.1.3 {",
          "78:       lindex $::log 0",
          "79:     } {^os_unix.c:\\d+: \\(\\d+\\) (open|getcwd)\\(.*test.db\\) - }",
          "80:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "211a0857b9bfe094297a0004d0344dcb1d06492e",
      "candidate_info": {
        "commit_hash": "211a0857b9bfe094297a0004d0344dcb1d06492e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/211a0857b9bfe094297a0004d0344dcb1d06492e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "src/window.c"
        ],
        "message": "Window functions that can abort should indicate this, so that if they are used in DML statement, a statement journal will be used.\n\nFossilOrigin-Name: 0ea05a0eb96acb860d8af2e788e29a5ae3b161e7892ab62f1ff2f3e722c0dcb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 004f7d9bbeee049c22a7e1c82c6cc0ea79a237967de3ff57686acea3060d5f45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "639:      || opcode==OP_VDestroy",
          "640:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "642:     ){",
          "643:       hasAbort = 1;",
          "644:       break;",
          "",
          "[Removed Lines]",
          "641:       && ((pOp->p1&0xff)==SQLITE_CONSTRAINT && pOp->p2==OE_Abort))",
          "",
          "[Added Lines]",
          "641:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1076:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "1077:   VdbeCoverageNeverNullIf(v, eCond==2);",
          "1078:   sqlite3VdbeAddOp2(v, OP_Halt, SQLITE_ERROR, OE_Abort);",
          "1079:   sqlite3VdbeAppendP4(v, (void*)azErr[eCond], P4_STATIC);",
          "1080:   sqlite3ReleaseTempReg(pParse, regZero);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:   sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c813750b7b485f00346ff6a2bfde0fcb5786da43",
      "candidate_info": {
        "commit_hash": "c813750b7b485f00346ff6a2bfde0fcb5786da43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c813750b7b485f00346ff6a2bfde0fcb5786da43",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Modify new window functions function so that cursors are stepped immediately after each operation, instead of immediately before.\n\nFossilOrigin-Name: 093d2b25f1b656bba57d665aac68109436861b157a5769432b612176dae3f6eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45cbd3b4498cea8856f189e9d0a192556d4f15212055b8328a1beca6083fc47a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1892:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1893:   }",
          "1902:   switch( op ){",
          "1903:     case WINDOW_RETURN_ROW:",
          "1904:       windowAggFinal(p->pParse, p->pMWin, 0);",
          "",
          "[Removed Lines]",
          "1895:   if( jumpOnEof ){",
          "1896:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1897:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1898:   }else{",
          "1899:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1);",
          "1900:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1914:       break;",
          "1915:   }",
          "1919:   }",
          "1920:   if( regCountdown>0 ){",
          "1921:     sqlite3VdbeJumpHere(v, addrIf);",
          "1922:   }",
          "",
          "[Removed Lines]",
          "1917:   if( ret ){",
          "1918:     sqlite3VdbeJumpHere(v, ret);",
          "",
          "[Added Lines]",
          "1910:   if( jumpOnEof ){",
          "1911:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1912:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1913:   }else{",
          "1914:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2024:   int addrCacheNext;",
          "2026:   int addrShortcut = 0;",
          "2028:   int bCache = windowCachePartition(pMWin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2024:   int addrEmpty = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2137:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "2138:   }",
          "2144:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2145:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "",
          "[Removed Lines]",
          "2140:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "2141:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "2142:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1); sqlite3VdbeChangeP5(v, 1);",
          "",
          "[Added Lines]",
          "2138:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "2139:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "2140:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2152:     sqlite3VdbeJumpHere(v, addrIf);",
          "2153:   }",
          "2154:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2155:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "2156:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2157:   }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2153:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2160:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2161:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2162:   }else{",
          "2164:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2165:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2166:     sqlite3VdbeJumpHere(v, addr);",
          "2167:   }",
          "2168:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "2178:   if( bCache ){",
          "2179:     sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheNext);",
          "2180:     sqlite3VdbeJumpHere(v, addrCacheRewind);",
          "",
          "[Removed Lines]",
          "2163:     int addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2170:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.ALL_ROW_CODE\"));",
          "2171:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2172:   if( pMWin->eEnd!=TK_PRECEDING ){",
          "2173:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2174:   }",
          "2175:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.ALL_ROW_CODE\"));",
          "",
          "[Added Lines]",
          "2162:     int addr;",
          "2163:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2164:     addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2172:   sqlite3VdbeJumpHere(v, addrGoto);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2184:   }",
          "2189:   if( pMWin->pPartition && bCache==0 ){",
          "2190:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2191:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2192:   }",
          "2194:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2197:   }else{",
          "2198:     int addrBreak;",
          "2207:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2208:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2209:   }",
          "2211:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2212:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "2213:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "",
          "[Removed Lines]",
          "2188:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.FLUSH_CODE\"));",
          "2195:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 1);",
          "2196:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2199:     int addrStart = sqlite3VdbeCurrentAddr(v);",
          "2200:     if( pMWin->eStart==TK_FOLLOWING ){",
          "2201:       addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2202:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "2203:     }else{",
          "2204:       addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2205:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2206:     }",
          "",
          "[Added Lines]",
          "2187:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.FLUSH_CODE\"));",
          "2188:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2190:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 0);",
          "2191:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2192:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2193:     int addrStart;",
          "2194:     int addrBreak1;",
          "2195:     int addrBreak2;",
          "2196:     int addrBreak3;",
          "2197:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2198:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2199:     addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2200:     addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "2201:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2202:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "2203:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2204:     addrBreak3 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2205:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2206:     sqlite3VdbeJumpHere(v, addrBreak1);",
          "2207:     sqlite3VdbeJumpHere(v, addrBreak3);",
          "2210:     int addrStart;",
          "2211:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2212:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2213:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2214:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2219:   sqlite3VdbeJumpHere(v, addrEmpty);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2681:   if( pMWin->eType==TK_ROWS",
          "2682:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2683:   ){",
          "2686:     ){",
          "2687:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2688:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "2684:     if( (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2685:      || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "",
          "[Added Lines]",
          "2694:     int bCache = windowCachePartition(pMWin);",
          "2695:     if( (pMWin->eEnd!=TK_FOLLOWING   && pMWin->eEnd!=TK_PRECEDING)",
          "2696:      || (pMWin->eStart!=TK_FOLLOWING && pMWin->eStart!=TK_PRECEDING)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "192418bd499cb1dbd358142cbeb6b2295ec8f060",
      "candidate_info": {
        "commit_hash": "192418bd499cb1dbd358142cbeb6b2295ec8f060",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/192418bd499cb1dbd358142cbeb6b2295ec8f060",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/minmax4.test"
        ],
        "message": "Fix a problem with queries of the form \"SELECT min(<expr>) ... WHERE <expr>=?\" where there is an index on <expr>. Fix for [71e183ca].\n\nFossilOrigin-Name: d465c3eef458c851d97eea6e4117247d9c69386b276168080dbff7bb64070c93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/minmax4.test||test/minmax4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fd598e475d353363e19adc27a671170f11ae9f6d8cad58cb2303fb2ad8ac6bec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3862:             distinctColumns = 1;",
          "3863:           }",
          "3864:           obSat |= MASKBIT(i);",
          "3865:         }else{",
          "3867:           if( j==0 || j<nKeyCol ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3865:           if( (wctrlFlags & WHERE_ORDERBY_MIN) && j==pLoop->u.btree.nEq ){",
          "3866:             pLoop->wsFlags |= WHERE_MIN_ORDERED;",
          "3867:           }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1567:          || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 );",
          "1572:       assert( pLoop->nSkip==0 );",
          "1573:       bSeekPastNull = 1;",
          "1574:       nExtraReg = 1;",
          "",
          "[Removed Lines]",
          "1565:     assert( pWInfo->pOrderBy==0",
          "1566:          || pWInfo->pOrderBy->nExpr==1",
          "1568:     if( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0",
          "1569:      && pWInfo->nOBSat>0",
          "1570:      && (pIdx->nKeyCol>nEq)",
          "1571:     ){",
          "",
          "[Added Lines]",
          "1565:     assert( (pWInfo->pOrderBy!=0 && pWInfo->pOrderBy->nExpr==1)",
          "1567:     if( pLoop->wsFlags & WHERE_MIN_ORDERED ){",
          "1568:       assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN) );",
          "1569:       assert( pWInfo->nOBSat );",
          "1570:       assert( pIdx->nColumn>nEq );",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   } {2 2}",
          "179: }",
          "181: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #-------------------------------------------------------------------------",
          "182: reset_db",
          "183: do_execsql_test 4.0 {",
          "184:   CREATE TABLE t0 (c0, c1);",
          "185:   CREATE INDEX i0 ON t0(c1, c1 + 1 DESC);",
          "186:   INSERT INTO t0(c0) VALUES (1);",
          "187: }",
          "188: do_execsql_test 4.1 {",
          "189:   SELECT MIN(t0.c1), t0.c0 FROM t0 WHERE t0.c1 ISNULL;",
          "190: } {{} 1}",
          "192: #-------------------------------------------------------------------------",
          "193: reset_db",
          "194: do_execsql_test 5.0 {",
          "195:   CREATE TABLE t1 (a, b);",
          "196:   INSERT INTO t1 VALUES(123, NULL);",
          "197:   CREATE INDEX i1 ON t1(a, b DESC);",
          "198: }",
          "199: do_execsql_test 5.1 {",
          "200:   SELECT MIN(a) FROM t1 WHERE a=123;",
          "201: } {123}",
          "",
          "---------------"
        ]
      }
    }
  ]
}