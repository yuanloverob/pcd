{
  "cve_id": "CVE-2022-2231",
  "cve_desc": "NULL Pointer Dereference in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "79481367a457951aabd9501b510fd7e3eb29c3d8",
  "patch_info": {
    "commit_hash": "79481367a457951aabd9501b510fd7e3eb29c3d8",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/79481367a457951aabd9501b510fd7e3eb29c3d8",
    "files": [
      "src/eval.c",
      "src/testdir/test_vimscript.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.5169: nested :source may use NULL pointer\n\nProblem:    Nested :source may use NULL pointer.\nSolution:   Do not use the NULL pointer.",
    "before_after_code_files": [
      "src/eval.c||src/eval.c",
      "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/eval.c||src/eval.c": [
      "File: src/eval.c -> src/eval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2388:     p = skipwhite(arg);",
      "2389:     ret = eval1(&p, rettv, evalarg);",
      "2411:     if (ret == FAIL || end_error)",
      "2412:     {",
      "2413:  if (ret != FAIL)",
      "",
      "[Removed Lines]",
      "2390:     expr_end = p;",
      "2391:     p = skipwhite(p);",
      "2396:     if (in_vim9script() && p > expr_end && retarg == NULL)",
      "2397:  while (*p == '#')",
      "2398:  {",
      "2399:      char_u *nl = vim_strchr(p, NL);",
      "2401:      if (nl == NULL)",
      "2402:   break;",
      "2403:      p = skipwhite(nl + 1);",
      "2404:      if (eap != NULL && *p != NUL)",
      "2405:   eap->nextcmd = p;",
      "2406:      check_for_end = FALSE;",
      "2407:  }",
      "2409:     if (ret != FAIL && check_for_end)",
      "2410:  end_error = !ends_excmd2(arg, p);",
      "",
      "[Added Lines]",
      "2391:     if (ret != FAIL)",
      "2392:     {",
      "2393:  expr_end = p;",
      "2394:  p = skipwhite(p);",
      "2399:  if (in_vim9script() && p > expr_end && retarg == NULL)",
      "2400:      while (*p == '#')",
      "2401:      {",
      "2402:   char_u *nl = vim_strchr(p, NL);",
      "2404:   if (nl == NULL)",
      "2405:       break;",
      "2406:   p = skipwhite(nl + 1);",
      "2407:   if (eap != NULL && *p != NUL)",
      "2408:       eap->nextcmd = p;",
      "2409:   check_for_end = FALSE;",
      "2410:      }",
      "2412:  if (check_for_end)",
      "2413:      end_error = !ends_excmd2(arg, p);",
      "2414:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2437:      eap->nextcmd = check_nextcmd(p);",
      "2438:  return FAIL;",
      "2439:     }",
      "",
      "[Removed Lines]",
      "2436:  if (eap != NULL && skipwhite(p)[0] == '|' && skipwhite(p)[1] != '|')",
      "",
      "[Added Lines]",
      "2441:  if (eap != NULL && p != NULL",
      "2442:      &&  skipwhite(p)[0] == '|' && skipwhite(p)[1] != '|')",
      "",
      "---------------"
    ],
    "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim": [
      "File: src/testdir/test_vimscript.vim -> src/testdir/test_vimscript.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "7528:   call assert_equal('', res)",
      "7529: endfunc",
      "7531: \"-------------------------------------------------------------------------------",
      "7532: \" Modelines            {{{1",
      "7533: \" vim: ts=8 sw=2 sts=2 expandtab tw=80 fdm=marker",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7531: \" Test for deeply nested :source command  {{{1",
      "7532: func Test_deeply_nested_source()",
      "7533:   let lines =<< trim END",
      "7535:       so",
      "7536:       sil 0scr",
      "7537:       delete",
      "7538:       so",
      "7539:       0",
      "7540:   END",
      "7541:   call writefile([\"vim9 silent! @0 \\n/\"] + lines, 'Xnested.vim')",
      "7543:   \" this must not crash",
      "7544:   let cmd = GetVimCommand() .. \" -e -s -S Xnested.vim -c qa!\"",
      "7545:   call system(cmd)",
      "7547:   call delete('Xnested.vim')",
      "7548: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     5168,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     5169,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b148ef2628251b2d79f78c65a614f8aca404329",
      "candidate_info": {
        "commit_hash": "5b148ef2628251b2d79f78c65a614f8aca404329",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/5b148ef2628251b2d79f78c65a614f8aca404329",
        "files": [
          "src/testdir/test_undo.vim",
          "src/testdir/test_user_func.vim",
          "src/testdir/test_usercommands.vim",
          "src/testdir/test_viminfo.vim",
          "src/testdir/test_vimscript.vim",
          "src/testdir/test_visual.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0768: too many delete() calls in tests\n\nProblem:    Too many delete() calls in tests.\nSolution:   Use deferred delete where possible.",
        "before_after_code_files": [
          "src/testdir/test_undo.vim||src/testdir/test_undo.vim",
          "src/testdir/test_user_func.vim||src/testdir/test_user_func.vim",
          "src/testdir/test_usercommands.vim||src/testdir/test_usercommands.vim",
          "src/testdir/test_viminfo.vim||src/testdir/test_viminfo.vim",
          "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim",
          "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_undo.vim||src/testdir/test_undo.vim": [
          "File: src/testdir/test_undo.vim -> src/testdir/test_undo.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:   \" try several sizes",
          "386:   for size in range(20, 500, 33)",
          "388:     call assert_fails('rundo Xundofile', 'E825:')",
          "389:   endfor",
          "391:   bwipe!",
          "393: endfunc",
          "395: func Test_rundo_errors()",
          "396:   call assert_fails('rundo XfileDoesNotExist', 'E822:')",
          "399:   call assert_fails('rundo Xundofile', 'E823:')",
          "402: endfunc",
          "404: func Test_undofile_next()",
          "",
          "[Removed Lines]",
          "387:     call writefile(contents[0:size], 'Xundofile')",
          "392:   call delete('Xundofile')",
          "398:   call writefile(['abc'], 'Xundofile')",
          "401:   call delete('Xundofile')",
          "",
          "[Added Lines]",
          "387:     call writefile(contents[0:size], 'Xundofile', 'D')",
          "397:   call writefile(['abc'], 'Xundofile', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_user_func.vim||src/testdir/test_user_func.vim": [
          "File: src/testdir/test_user_func.vim -> src/testdir/test_user_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   qall!",
          "304:   [CODE]",
          "307:   let res = system(GetVimCommandClean() .. ' -es -X -S Xtest.vim')",
          "308:   call assert_equal(0, v:shell_error)",
          "",
          "[Removed Lines]",
          "306:   call writefile(lines, 'Xtest.vim')",
          "",
          "[Added Lines]",
          "306:   call writefile(lines, 'Xtest.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   let m = matchstr(res, 'function F6()[^[:print:]]*[[:print:]]*')",
          "326:   call assert_match(' line 23$', m)",
          "329: endfunc",
          "331: \" Test for defining a function reference in the global scope",
          "",
          "[Removed Lines]",
          "328:   call delete('Xtest.vim')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:     :qall",
          "382:   [CODE]",
          "384:   if RunVim([], [], '-s Xscript')",
          "385:     call assert_equal([], readfile('Xresult'))",
          "386:   endif",
          "387:   call delete('Xresult')",
          "389: endfunc",
          "391: \" Test for errors in defining new functions",
          "",
          "[Removed Lines]",
          "383:   call writefile(lines, 'Xscript')",
          "388:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "381:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:   call assert_fails('call feedkeys(\":func d.F1()\\<CR>\", \"xt\")', 'E717:')",
          "419:   \" Define an autoload function with an incorrect file name",
          "421:   call assert_fails('source Xscript', 'E746:')",
          "424:   \" Try to list functions using an invalid search pattern",
          "425:   call assert_fails('function /\\%(/', 'E53:')",
          "",
          "[Removed Lines]",
          "420:   call writefile(['func foo#Bar()', 'return 1', 'endfunc'], 'Xscript')",
          "422:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "417:   call writefile(['func foo#Bar()', 'return 1', 'endfunc'], 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "445: \" Test for calling return outside of a function",
          "446: func Test_return_outside_func()",
          "448:   call assert_fails('source Xscript', 'E133:')",
          "450: endfunc",
          "452: \" Test for errors in calling a function",
          "",
          "[Removed Lines]",
          "447:   call writefile(['return 10'], 'Xscript')",
          "449:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "443:   call writefile(['return 10'], 'Xscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_usercommands.vim||src/testdir/test_usercommands.vim": [
          "File: src/testdir/test_usercommands.vim -> src/testdir/test_usercommands.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: endfunc",
          "241: func Test_redefine_on_reload()",
          "243:   call assert_equal(0, exists(':ExistingCommand'))",
          "244:   source Xcommandexists",
          "245:   call assert_equal(2, exists(':ExistingCommand'))",
          "",
          "[Removed Lines]",
          "242:   call writefile(['command ExistingCommand echo \"yes\"'], 'Xcommandexists')",
          "",
          "[Added Lines]",
          "242:   call writefile(['command ExistingCommand echo \"yes\"'], 'Xcommandexists', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:   call assert_equal(2, exists(':ExistingCommand'))",
          "250:   \" But redefining in another script is not OK.",
          "252:   call assert_fails('source Xcommandexists2', 'E174:')",
          "255:   \" And defining twice in one script is not OK.",
          "256:   delcommand ExistingCommand",
          "",
          "[Removed Lines]",
          "251:   call writefile(['command ExistingCommand echo \"yes\"'], 'Xcommandexists2')",
          "253:   call delete('Xcommandexists2')",
          "",
          "[Added Lines]",
          "251:   call writefile(['command ExistingCommand echo \"yes\"'], 'Xcommandexists2', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:   call assert_fails('source Xcommandexists', 'E174:')",
          "263:   call assert_equal(2, exists(':ExistingCommand'))",
          "266:   delcommand ExistingCommand",
          "267: endfunc",
          "",
          "[Removed Lines]",
          "265:   call delete('Xcommandexists')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "849:                      @a = save",
          "850:                 }",
          "851:   END",
          "853:   source Xlegacy",
          "855:   let lines =<< trim END",
          "",
          "[Removed Lines]",
          "852:   call writefile(lines, 'Xlegacy')",
          "",
          "[Added Lines]",
          "850:   call writefile(lines, 'Xlegacy', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "864:       call assert_equal('something', g:someExpr)",
          "865:       call assert_equal('also', @a)",
          "866:   END",
          "868:   source Xother",
          "870:   unlet g:someExpr",
          "873:   delcommand Rename",
          "874: endfunc",
          "",
          "[Removed Lines]",
          "867:   call writefile(lines, 'Xother')",
          "871:   call delete('Xlegacy')",
          "872:   call delete('Xother')",
          "",
          "[Added Lines]",
          "865:   call writefile(lines, 'Xother', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_viminfo.vim||src/testdir/test_viminfo.vim": [
          "File: src/testdir/test_viminfo.vim -> src/testdir/test_viminfo.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \\ '|copied as-is',",
          "21:  \\ '|and one more',",
          "22:  \\ ]",
          "24:   rviminfo Xviminfo",
          "25:   call assert_equal('asdf', @/)",
          "",
          "[Removed Lines]",
          "23:   call writefile(lines, 'Xviminfo')",
          "",
          "[Added Lines]",
          "23:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     endif",
          "41:   endfor",
          "42:   call assert_equal(3, done)",
          "45: endfunc",
          "47: func Test_global_vars()",
          "",
          "[Removed Lines]",
          "44:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:         \\ \"!GLOB_BLOB_3\\tBLO\\t0z1x\",",
          "131:         \\ \"!GLOB_BLOB_4\\tBLO\\t0z12 ab\",",
          "132:         \\ \"!GLOB_LIST_1\\tLIS\\t1 2\",",
          "134:   call assert_fails('rv! Xviminfo', 'E488:')",
          "135:   call assert_equal('123', g:GLOB_BLOB_1)",
          "136:   call assert_equal(1, type(g:GLOB_BLOB_1))",
          "",
          "[Removed Lines]",
          "133:         \\ \"!GLOB_DICT_1\\tDIC\\t1 2\"], 'Xviminfo')",
          "",
          "[Added Lines]",
          "131:         \\ \"!GLOB_DICT_1\\tDIC\\t1 2\"], 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:   call assert_equal('1 2', g:GLOB_DICT_1)",
          "146:   call assert_equal(1, type(g:GLOB_DICT_1))",
          "149:   set viminfo-=!",
          "150: endfunc",
          "",
          "[Removed Lines]",
          "148:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "583:   call add(lines, '|1,\"x\\') \" trailing backslash",
          "584:   call add(lines, '|1,,,,') \"trailing comma",
          "585:   call add(lines, '|1,>234') \" trailing continuation line",
          "587:   rviminfo Xviminfo",
          "589:   call delete('Xviminfo')",
          "",
          "[Removed Lines]",
          "586:   call writefile(lines, 'Xviminfo')",
          "",
          "[Added Lines]",
          "583:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "613:   call add(lines, '|4,20,1,1,1,\"x\"') \" invalid value for file name",
          "614:   call add(lines, '|4,49,0,1,1,\"x\"') \" invalid value for line number",
          "617:   rviminfo Xviminfo",
          "619: endfunc",
          "621: func Test_viminfo_file_marks()",
          "",
          "[Removed Lines]",
          "616:   call writefile(lines, 'Xviminfo')",
          "618:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "613:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "691:  \\ '|4,66,1,0,0,\"/tmp/nothing\"',",
          "692:  \\ \"\",",
          "693:  \\ ]",
          "695:   delmark B",
          "696:   rviminfo Xviminfo",
          "698:   call assert_equal(1, line(\"'B\"))",
          "699:   delmark B",
          "700: endfunc",
          "",
          "[Removed Lines]",
          "694:   call writefile(lines, 'Xviminfo')",
          "697:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "690:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "703: func Test_viminfo_file_mark_unloaded_buf()",
          "704:   let save_viminfo = &viminfo",
          "705:   set viminfo&vim",
          "707:   %bwipe",
          "708:   edit! Xfile1",
          "709:   call setpos(\"'u\", [0, 3, 1, 0])",
          "",
          "[Removed Lines]",
          "706:   call writefile(repeat(['vim'], 10), 'Xfile1')",
          "",
          "[Added Lines]",
          "701:   call writefile(repeat(['vim'], 10), 'Xfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "716:   call assert_equal([0, 3, 1, 0], getpos(\"'u\"))",
          "717:   call assert_equal([0, 5, 1, 0], getpos(\"'v\"))",
          "718:   %bwipe",
          "720:   call delete('Xviminfo')",
          "721:   let &viminfo = save_viminfo",
          "722: endfunc",
          "",
          "[Removed Lines]",
          "719:   call delete('Xfile1')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "745:  \\ \"\\t\\\"\\t11\\t0\",",
          "746:  \\ \"\",",
          "747:  \\ ]",
          "749:   delmark E",
          "750:   edit /tmp/file_two.txt",
          "751:   rviminfo! Xviminfo",
          "754:   call assert_equal('h viminfo', histget(':'))",
          "755:   call assert_equal('session', histget('/'))",
          "",
          "[Removed Lines]",
          "748:   call writefile(lines, 'Xviminfo')",
          "752:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "742:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "839:   call assert_fails('rviminfo xyz', 'E195:')",
          "841:   \" Illegal starting character",
          "843:   call assert_fails('rv Xviminfo', 'E575:')",
          "845:   \" Illegal register name in the viminfo file",
          "",
          "[Removed Lines]",
          "842:   call writefile([\"a 123\"], 'Xviminfo')",
          "",
          "[Added Lines]",
          "835:   call writefile([\"a 123\"], 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "860:   call writefile(repeat(['\"@'], 15), 'Xviminfo')",
          "861:   call assert_fails('rv Xviminfo', 'E577:')",
          "864: endfunc",
          "866: \" Test for saving and restoring last substitute string in viminfo",
          "",
          "[Removed Lines]",
          "863:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "901:  \\ \" :echo 'Hello'\\<CR>\",",
          "902:  \\ \"\",",
          "903:  \\ ]",
          "905:   let @a = 'one'",
          "906:   let @b = 'two'",
          "907:   let @m = 'three'",
          "",
          "[Removed Lines]",
          "904:   call writefile(lines, 'Xviminfo')",
          "",
          "[Added Lines]",
          "895:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "919:   call assert_equal(\":echo 'Hello'\\<CR>\", getreg('m'))",
          "920:   call assert_equal('Vim', getreg('\"'))",
          "921:   call assert_equal(\"\\nHello\", execute('normal @@'))",
          "923:   let @\" = ''",
          "924: endfunc",
          "",
          "[Removed Lines]",
          "922:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "931:   set viminfo+=<200",
          "932:   let lines = ['\"r CHAR 0']",
          "933:   call extend(lines, repeat([\"\\tsun is rising\"], 200))",
          "935:   let @r = ''",
          "936:   rviminfo! Xviminfo",
          "937:   call assert_equal(join(repeat([\"sun is rising\"], 200), \"\\n\"), @r)",
          "939:   let @r = ''",
          "940:   let &viminfo = save_viminfo",
          "941: endfunc",
          "",
          "[Removed Lines]",
          "934:   call writefile(lines, 'Xviminfo')",
          "938:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "925:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "946:   set viminfofile=NONE",
          "947:   wviminfo Xviminfo",
          "948:   call assert_false(filereadable('Xviminfo'))",
          "950:   call assert_fails('rviminfo Xviminfo', 'E195:')",
          "952:   let &viminfofile = save_vif",
          "953: endfunc",
          "",
          "[Removed Lines]",
          "949:   call writefile([''], 'Xviminfo')",
          "951:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "940:   call writefile([''], 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "956: func Test_viminfo_perm()",
          "957:   CheckUnix",
          "958:   CheckNotRoot",
          "960:   call setfperm('Xviminfo', 'r-x------')",
          "961:   call assert_fails('wviminfo Xviminfo', 'E137:')",
          "962:   call setfperm('Xviminfo', '--x------')",
          "963:   call assert_fails('rviminfo Xviminfo', 'E195:')",
          "966:   \" Try to write the viminfo to a directory",
          "968:   call assert_fails('wviminfo Xvifdir', 'E137:')",
          "969:   call assert_fails('rviminfo Xvifdir', 'E195:')",
          "971: endfunc",
          "973: \" Test for writing to an existing viminfo file merges the file marks",
          "",
          "[Removed Lines]",
          "959:   call writefile([''], 'Xviminfo')",
          "964:   call delete('Xviminfo')",
          "967:   call mkdir('Xvifdir')",
          "970:   call delete('Xvifdir', 'rf')",
          "",
          "[Added Lines]",
          "950:   call writefile([''], 'Xviminfo', 'D')",
          "957:   call mkdir('Xvifdir', 'R')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "979:   %argdelete",
          "980:   %bwipe",
          "985:   \" set marks in buffers",
          "986:   call test_settime(10)",
          "",
          "[Removed Lines]",
          "982:   call writefile(repeat(['editor'], 10), 'Xbufa')",
          "983:   call writefile(repeat(['Vim'], 10), 'Xbufb')",
          "",
          "[Added Lines]",
          "971:   call writefile(repeat(['editor'], 10), 'Xbufa', 'D')",
          "972:   call writefile(repeat(['Vim'], 10), 'Xbufb', 'D')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1013:   \" cleanup",
          "1014:   %bwipe",
          "1015:   call delete('Xviminfo')",
          "1018:   call test_settime(0)",
          "1019:   let &viminfo=save_viminfo",
          "1020: endfunc",
          "",
          "[Removed Lines]",
          "1016:   call delete('Xbufa')",
          "1017:   call delete('Xbufb')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1051:     w! Xnew-file.txt",
          "1052:     qall",
          "1053:   [CODE]",
          "1055:   let buf = RunVimInTerminal('-S Xviminfotest', #{wait_for_ruler: 0})",
          "1056:   call WaitForAssert({-> assert_equal(\"finished\", term_getstatus(buf))})",
          "",
          "[Removed Lines]",
          "1054:   call writefile(commands, 'Xviminfotest')",
          "",
          "[Added Lines]",
          "1041:   call writefile(commands, 'Xviminfotest', 'D')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1059:   rviminfo! Xviminfofile",
          "1060:   call assert_match('Xnew-file.txt$', v:oldfiles[0])",
          "1061:   call assert_equal(1, len(v:oldfiles))",
          "1062:   call delete('Xviminfofile')",
          "1064:   call delete('Xnew-file.txt')",
          "1066:   let v:oldfiles = test_null_list()",
          "",
          "[Removed Lines]",
          "1063:   call delete('Xviminfotest')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1262:   call add(lines, '|1,4')",
          "1263:   call add(lines, '> ' .. fnamemodify('a.txt', ':p:~'))",
          "1264:   call add(lines, \"\\tb\\t7\\t0\\n\")",
          "1266:   edit b.txt",
          "1267:   call setline(1, range(1, 20))",
          "1268:   12mark b",
          "",
          "[Removed Lines]",
          "1265:   call writefile(lines, 'Xviminfo')",
          "",
          "[Added Lines]",
          "1252:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1274:   edit b.txt",
          "1275:   rviminfo! Xviminfo",
          "1276:   call assert_equal(12, line(\"'b\"))",
          "1278: endfunc",
          "1280: \" Test for merging the jump list from a old viminfo file",
          "",
          "[Removed Lines]",
          "1277:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1284:   call add(lines, \"-'  20  1  \" .. fnamemodify('a.txt', ':p:~'))",
          "1285:   call add(lines, \"-'  30  1  \" .. fnamemodify('b.txt', ':p:~'))",
          "1286:   call add(lines, \"-'  40  1  \" .. fnamemodify('b.txt', ':p:~'))",
          "1288:   clearjumps",
          "1289:   rviminfo! Xviminfo",
          "1290:   let l = getjumplist()[0]",
          "1291:   call assert_equal([40, 30, 20, 10], [l[0].lnum, l[1].lnum, l[2].lnum,",
          "1292:         \\ l[3].lnum])",
          "1293:   bw!",
          "1295: endfunc",
          "1297: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "1287:   call writefile(lines, 'Xviminfo')",
          "1294:   call delete('Xviminfo')",
          "",
          "[Added Lines]",
          "1273:   call writefile(lines, 'Xviminfo', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim": [
          "File: src/testdir/test_vimscript.vim -> src/testdir/test_vimscript.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     call writefile(v:errors, 'Xtest.out')",
          "34:     qall",
          "35:   END",
          "37:   call writefile(a:test, 'Xtest.vim', 'a')",
          "39:   call writefile(cleanup, 'Xverify.vim', 'a')",
          "40:   call RunVim([], [], \"-S Xtest.vim -S Xverify.vim\")",
          "41:   call assert_equal([], readfile('Xtest.out'))",
          "42:   call delete('Xtest.out')",
          "45: endfunc",
          "47: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "36:   call writefile(init, 'Xtest.vim')",
          "38:   call writefile(a:verify, 'Xverify.vim')",
          "43:   call delete('Xtest.vim')",
          "44:   call delete('Xverify.vim')",
          "",
          "[Added Lines]",
          "36:   call writefile(init, 'Xtest.vim', 'D')",
          "38:   call writefile(a:verify, 'Xverify.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2935:   let code =<< trim END",
          "2936:     endif",
          "2937:   END",
          "2939:   call AssertException(['source Xtest'], 'Vim(endif):E580: :endif without :if')",
          "2941:   \" :endif without :if",
          "",
          "[Removed Lines]",
          "2938:   call writefile(code, 'Xtest')",
          "",
          "[Added Lines]",
          "2936:   call writefile(code, 'Xtest', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3088:   END",
          "3089:   call writefile(code, 'Xtest')",
          "3090:   call AssertException(['source Xtest'], 'Vim(elseif):E584: :elseif after :else')",
          "3093: endfunc",
          "3095: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "3092:   call delete('Xtest')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3118:       endwhile",
          "3119:     endif",
          "3120:   END",
          "3122:   call AssertException(['source Xtest'], 'Vim(endwhile):E588: :endwhile without :while')",
          "3124:   \" Missing :endif",
          "",
          "[Removed Lines]",
          "3121:   call writefile(code, 'Xtest')",
          "",
          "[Added Lines]",
          "3117:   call writefile(code, 'Xtest', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3215:   END",
          "3216:   call writefile(code, 'Xtest')",
          "3217:   call AssertException(['source Xtest'], 'Vim(endwhile):E588: :endwhile without :while')",
          "3220: endfunc",
          "3222: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "3219:   call delete('Xtest')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3236:   let code =<< trim END",
          "3237:     continue",
          "3238:   END",
          "3240:   call AssertException(['source Xtest'], 'Vim(continue):E586: :continue without :while or :for')",
          "3242:   \" :continue without :while",
          "",
          "[Removed Lines]",
          "3239:   call writefile(code, 'Xtest')",
          "",
          "[Added Lines]",
          "3233:   call writefile(code, 'Xtest', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3323:   END",
          "3324:   call writefile(code, 'Xtest')",
          "3325:   call AssertException(['source Xtest'], 'Vim(break):E587: :break without :while or :for')",
          "3328: endfunc",
          "3330: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "3327:   call delete('Xtest')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3344:   let code =<< trim END",
          "3345:     endtry",
          "3346:   END",
          "3348:   call AssertException(['source Xtest'], 'Vim(endtry):E602: :endtry without :try')",
          "3350:   \" :endtry without :try",
          "",
          "[Removed Lines]",
          "3347:   call writefile(code, 'Xtest')",
          "",
          "[Added Lines]",
          "3339:   call writefile(code, 'Xtest', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3424:   END",
          "3425:   call writefile(code, 'Xtest')",
          "3426:   call AssertException(['source Xtest'], 'Vim(endtry):E170: Missing :endwhile')",
          "3429: endfunc",
          "3431: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "3428:   call delete('Xtest')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5891:     endtry",
          "5892:     call assert_report('should not get here')",
          "5893:   [CODE]",
          "5896:   breakadd file 7 Xscript",
          "5897:   try",
          "",
          "[Removed Lines]",
          "5894:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "5884:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5906:   call assert_equal(1, caught_intr)",
          "5907:   call assert_equal('ab', g:Xpath)",
          "5908:   breakdel *",
          "5910: endfunc",
          "5912: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "5909:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5996:     endtry",
          "5997:     call assert_report('should not get here')",
          "5998:   [CODE]",
          "6001:   breakadd file 6 Xscript",
          "6002:   try",
          "",
          "[Removed Lines]",
          "5999:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "5988:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6011:   call assert_equal(1, caught_intr)",
          "6012:   call assert_equal('a', g:Xpath)",
          "6013:   breakdel *",
          "6015: endfunc",
          "6017: \" interrupt right before a catch is invoked inside a function.",
          "",
          "[Removed Lines]",
          "6014:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6104:     endtry",
          "6105:     call assert_report('should not get here')",
          "6106:   [CODE]",
          "6109:   breakadd file 7 Xscript",
          "6110:   try",
          "",
          "[Removed Lines]",
          "6107:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "6095:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6119:   call assert_equal(1, caught_intr)",
          "6120:   call assert_equal('abc', g:Xpath)",
          "6121:   breakdel *",
          "6123: endfunc",
          "6125: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "6122:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6963:     endfunc",
          "6964:     let g:result = s:snr()",
          "6965:   END",
          "6967:   source Xexpand",
          "6968:   call assert_match('<SNR>\\d\\+_snr', g:result)",
          "6969:   source Xexpand",
          "6970:   call assert_match('<SNR>\\d\\+_snr', g:result)",
          "6973:   unlet g:result",
          "6974: endfunc",
          "",
          "[Removed Lines]",
          "6966:   call writefile(lines, 'Xexpand')",
          "6972:   call delete('Xexpand')",
          "",
          "[Added Lines]",
          "6953:   call writefile(lines, 'Xexpand', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "7231: \" Test for missing :endif, :endfor, :endwhile and :endtry           {{{1",
          "7232: func Test_missing_end()",
          "7234:   call assert_fails('source Xscript', 'E171:')",
          "7235:   call writefile(['for i in range(5)', 'echo i'], 'Xscript')",
          "7236:   call assert_fails('source Xscript', 'E170:')",
          "",
          "[Removed Lines]",
          "7233:   call writefile(['if 2 > 1', 'echo \">\"'], 'Xscript')",
          "",
          "[Added Lines]",
          "7219:   call writefile(['if 2 > 1', 'echo \">\"'], 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7238:   call assert_fails('source Xscript', 'E170:')",
          "7239:   call writefile(['try', 'echo \".\"'], 'Xscript')",
          "7240:   call assert_fails('source Xscript', 'E600:')",
          "7243:   \" Using endfor with :while",
          "7244:   let caught_e732 = 0",
          "",
          "[Removed Lines]",
          "7241:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7320:       let @a = ''",
          "7321:     endfunc",
          "7322:   [SCRIPT]",
          "7325:   let buf = RunVimInTerminal('-S Xscript', {'rows': 6})",
          "",
          "[Removed Lines]",
          "7323:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "7308:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7358:   \"call assert_report(l)",
          "7360:   call StopVimInTerminal(buf)",
          "7362: endfunc",
          "7364: \" Test for errors in converting to float from various types         {{{1",
          "",
          "[Removed Lines]",
          "7361:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7429:     call assert_equal(1, exists('Bar'))",
          "7430:     call assert_equal(1, exists('*Bar'))",
          "7431:   END",
          "7433:   source Xscript",
          "7435: endfunc",
          "7437: \" substring and variable name              {{{1",
          "",
          "[Removed Lines]",
          "7432:   call writefile(lines, 'Xscript')",
          "7434:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "7416:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7522:       so",
          "7523:       0",
          "7524:   END",
          "7527:   \" this must not crash",
          "7528:   let cmd = GetVimCommand() .. \" -e -s -S Xnested.vim -c qa!\"",
          "7529:   call system(cmd)",
          "7532: endfunc",
          "7534: \"-------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "7525:   call writefile([\"vim9 silent! @0 \\n/\"] + lines, 'Xnested.vim')",
          "7531:   call delete('Xnested.vim')",
          "",
          "[Added Lines]",
          "7508:   call writefile([\"vim9 silent! @0 \\n/\"] + lines, 'Xnested.vim', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
          "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1274:     set virtualedit=block",
          "1275:     normal G",
          "1276:   END",
          "1279:   let buf = RunVimInTerminal('-S XTest_block', {'rows': 8, 'cols': 50})",
          "1280:   call term_sendkeys(buf, \"\\<C-V>gg$\")",
          "",
          "[Removed Lines]",
          "1277:   call writefile(lines, 'XTest_block')",
          "",
          "[Added Lines]",
          "1277:   call writefile(lines, 'XTest_block', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1286:   \" clean up",
          "1287:   call term_sendkeys(buf, \"\\<Esc>\")",
          "1288:   call StopVimInTerminal(buf)",
          "1290: endfunc",
          "1292: func Test_visual_block_ctrl_w_f()",
          "",
          "[Removed Lines]",
          "1289:   call delete('XTest_block')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1331:       :",
          "1333:       :",
          "1335:   call writefile(lines, 'XvisualReselect')",
          "1336:   source XvisualReselect",
          "1339:   call delete('XvisualReselect')",
          "1340: endfunc",
          "",
          "[Removed Lines]",
          "1334:   END",
          "1338:   bwipe!",
          "",
          "[Added Lines]",
          "1333:   END",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: static int included_patches[] =",
          "699:     767,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     768,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02929a372e5e14db1b85abdc7d4515d6b2d81888",
      "candidate_info": {
        "commit_hash": "02929a372e5e14db1b85abdc7d4515d6b2d81888",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/02929a372e5e14db1b85abdc7d4515d6b2d81888",
        "files": [
          "src/eval.c",
          "src/version.c"
        ],
        "message": "patch 8.2.3836: Vim9: comment after expression not skipped to find NL\n\nProblem:    Vim9: comment after expression not skipped to find NL.\nSolution:   After evaluating an expression look for a newline after a #\n            comment.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2222: {",
          "2223:     int  ret;",
          "2224:     char_u *p;",
          "2225:     int  did_emsg_before = did_emsg;",
          "2226:     int  called_emsg_before = called_emsg;",
          "2227:     int  flags = evalarg == NULL ? 0 : evalarg->eval_flags;",
          "2228:     int  end_error = FALSE;",
          "2230:     p = skipwhite(arg);",
          "2231:     ret = eval1(&p, rettv, evalarg);",
          "2232:     p = skipwhite(p);",
          "2235:  end_error = !ends_excmd2(arg, p);",
          "2236:     if (ret == FAIL || end_error)",
          "2237:     {",
          "",
          "[Removed Lines]",
          "2234:     if (ret != FAIL)",
          "",
          "[Added Lines]",
          "2225:     char_u *expr_end;",
          "2229:     int  check_for_end = TRUE;",
          "2234:     expr_end = p;",
          "2240:     if (in_vim9script() && p > expr_end)",
          "2241:  while (*p == '#')",
          "2242:  {",
          "2243:      char_u *nl = vim_strchr(p, NL);",
          "2245:      if (nl == NULL)",
          "2246:   break;",
          "2247:      p = skipwhite(nl + 1);",
          "2248:      if (eap != NULL && *p != NUL)",
          "2249:   eap->nextcmd = p;",
          "2250:      check_for_end = FALSE;",
          "2251:  }",
          "2253:     if (ret != FAIL && check_for_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2263:  return FAIL;",
          "2264:     }",
          "2267:  set_nextcmd(eap, p);",
          "2269:     return ret;",
          "",
          "[Removed Lines]",
          "2266:     if (eap != NULL)",
          "",
          "[Added Lines]",
          "2285:     if (check_for_end && eap != NULL)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3835,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3836,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2588b6fc90ba85b333ee8f747e8d1ebbc7e6300",
      "candidate_info": {
        "commit_hash": "f2588b6fc90ba85b333ee8f747e8d1ebbc7e6300",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/f2588b6fc90ba85b333ee8f747e8d1ebbc7e6300",
        "files": [
          "src/eval.c",
          "src/testdir/test_trycatch.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1508: catch does not work when lines are joined with a newline\n\nProblem:    Catch does not work when lines are joined with a newline.\nSolution:   Set \"nextcmd\" appropriately. (closes #12348)",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2699:   semsg(_(e_invalid_expression_str), arg);",
          "2700:  }",
          "2708:  return FAIL;",
          "2709:     }",
          "",
          "[Removed Lines]",
          "2705:  if (eap != NULL && p != NULL",
          "2706:      &&  skipwhite(p)[0] == '|' && skipwhite(p)[1] != '|')",
          "2707:      eap->nextcmd = check_nextcmd(p);",
          "",
          "[Added Lines]",
          "2702:  if (eap != NULL && p != NULL)",
          "2703:  {",
          "2707:      char_u *nextcmd = check_nextcmd(p);",
          "2708:      if (nextcmd != NULL && *nextcmd != '|')",
          "2709:   eap->nextcmd = nextcmd;",
          "2710:  }",
          "",
          "---------------"
        ],
        "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim": [
          "File: src/testdir/test_trycatch.vim -> src/testdir/test_trycatch.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2220:   %bwipe!",
          "2221: endfunc",
          "2223: \" Test for using try/catch in a user command with a failing expression    {{{1",
          "2224: func Test_user_command_try_catch()",
          "2225:   let lines =<< trim END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2223: \" Test for using try/catch when lines are joined by \"|\" or \"\\n\"           {{{1",
          "2224: func Test_try_catch_nextcmd()",
          "2225:   func Throw()",
          "2226:     throw \"Failure\"",
          "2227:   endfunc",
          "2229:   let lines =<< trim END",
          "2230:     try",
          "2231:       let s:x = Throw()",
          "2232:     catch",
          "2233:       let g:caught = 1",
          "2234:     endtry",
          "2235:   END",
          "2237:   let g:caught = 0",
          "2238:   call execute(lines)",
          "2239:   call assert_equal(1, g:caught)",
          "2241:   let g:caught = 0",
          "2242:   call execute(join(lines, '|'))",
          "2243:   call assert_equal(1, g:caught)",
          "2245:   let g:caught = 0",
          "2246:   call execute(join(lines, \"\\n\"))",
          "2247:   call assert_equal(1, g:caught)",
          "2249:   unlet g:caught",
          "2250:   delfunc Throw",
          "2251: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: static int included_patches[] =",
          "699:     1507,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     1508,",
          "",
          "---------------"
        ]
      }
    }
  ]
}