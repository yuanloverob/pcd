{
  "cve_id": "CVE-2018-20174",
  "cve_desc": "rdesktop versions up to and including v1.8.3 contain an Out-Of-Bounds Read in the function ui_clip_handle_data() that results in an information leak.",
  "repo": "rdesktop/rdesktop",
  "patch_hash": "4dca546d04321a610c1835010b5dad85163b65e1",
  "patch_info": {
    "commit_hash": "4dca546d04321a610c1835010b5dad85163b65e1",
    "repo": "rdesktop/rdesktop",
    "commit_url": "https://github.com/rdesktop/rdesktop/commit/4dca546d04321a610c1835010b5dad85163b65e1",
    "files": [
      "asn.c",
      "bitmap.c",
      "cliprdr.c",
      "constants.h",
      "cssp.c",
      "lspci.c",
      "mcs.c",
      "orders.c",
      "proto.h",
      "rdp.c",
      "rdpdr.c",
      "rdpsnd.c",
      "seamless.c",
      "secure.c",
      "stream.h",
      "types.h"
    ],
    "message": "Malicious RDP server security fixes\n\nThis commit includes fixes for a set of 21 vulnerabilities in\nrdesktop when a malicious RDP server is used.\n\nAll vulnerabilities was identified and reported by Eyal Itkin.\n\n * Add rdp_protocol_error function that is used in several fixes\n * Refactor of process_bitmap_updates\n * Fix possible integer overflow in s_check_rem() on 32bit arch\n * Fix memory corruption in process_bitmap_data - CVE-2018-8794\n * Fix remote code execution in process_bitmap_data - CVE-2018-8795\n * Fix remote code execution in process_plane - CVE-2018-8797\n * Fix Denial of Service in mcs_recv_connect_response - CVE-2018-20175\n * Fix Denial of Service in mcs_parse_domain_params - CVE-2018-20175\n * Fix Denial of Service in sec_parse_crypt_info - CVE-2018-20176\n * Fix Denial of Service in sec_recv - CVE-2018-20176\n * Fix minor information leak in rdpdr_process - CVE-2018-8791\n * Fix Denial of Service in cssp_read_tsrequest - CVE-2018-8792\n * Fix remote code execution in cssp_read_tsrequest - CVE-2018-8793\n * Fix Denial of Service in process_bitmap_data - CVE-2018-8796\n * Fix minor information leak in rdpsnd_process_ping - CVE-2018-8798\n * Fix Denial of Service in process_secondary_order - CVE-2018-8799\n * Fix remote code execution in in ui_clip_handle_data - CVE-2018-8800\n * Fix major information leak in ui_clip_handle_data - CVE-2018-20174\n * Fix memory corruption in rdp_in_unistr - CVE-2018-20177\n * Fix Denial of Service in process_demand_active - CVE-2018-20178\n * Fix remote code execution in lspci_process - CVE-2018-20179\n * Fix remote code execution in rdpsnddbg_process - CVE-2018-20180\n * Fix remote code execution in seamless_process - CVE-2018-20181\n * Fix remote code execution in seamless_process_line - CVE-2018-20182",
    "before_after_code_files": [
      "asn.c||asn.c",
      "bitmap.c||bitmap.c",
      "cliprdr.c||cliprdr.c",
      "constants.h||constants.h",
      "cssp.c||cssp.c",
      "lspci.c||lspci.c",
      "mcs.c||mcs.c",
      "orders.c||orders.c",
      "proto.h||proto.h",
      "rdp.c||rdp.c",
      "rdpdr.c||rdpdr.c",
      "rdpsnd.c||rdpsnd.c",
      "seamless.c||seamless.c",
      "secure.c||secure.c",
      "stream.h||stream.h",
      "types.h||types.h"
    ]
  },
  "patch_diff": {
    "asn.c||asn.c": [
      "File: asn.c -> asn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: RD_BOOL",
      "26: {",
      "27:  int tag, len;",
      "",
      "[Removed Lines]",
      "25: ber_parse_header(STREAM s, int tagval, int *length)",
      "",
      "[Added Lines]",
      "25: ber_parse_header(STREAM s, int tagval, uint32 *length)",
      "",
      "---------------"
    ],
    "bitmap.c||bitmap.c": [
      "File: bitmap.c -> bitmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:      replen = revcode;",
      "795:      collen = 0;",
      "796:     }",
      "798:     {",
      "799:      color = CVAL(in);",
      "",
      "[Removed Lines]",
      "797:     while (collen > 0)",
      "",
      "[Added Lines]",
      "797:     while (indexw < width && collen > 0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "802:      indexw++;",
      "803:      collen--;",
      "804:     }",
      "806:     {",
      "808:      out += 4;",
      "",
      "[Removed Lines]",
      "805:     while (replen > 0)",
      "",
      "[Added Lines]",
      "805:     while (indexw < width && replen > 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "824:      replen = revcode;",
      "825:      collen = 0;",
      "826:     }",
      "828:     {",
      "829:      x = CVAL(in);",
      "830:      if (x & 1)",
      "",
      "[Removed Lines]",
      "827:     while (collen > 0)",
      "",
      "[Added Lines]",
      "827:     while (indexw < width && collen > 0)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "844:      indexw++;",
      "845:      collen--;",
      "846:     }",
      "848:     {",
      "849:      x = last_line[indexw * 4] + color;",
      "",
      "[Removed Lines]",
      "847:     while (replen > 0)",
      "",
      "[Added Lines]",
      "847:     while (indexw < width && replen > 0)",
      "",
      "---------------"
    ],
    "cliprdr.c||cliprdr.c": [
      "File: cliprdr.c -> cliprdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:  uint16 type, status;",
      "119:  uint32 length, format;",
      "120:  uint8 *data;",
      "122:  in_uint16_le(s, type);",
      "123:  in_uint16_le(s, status);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127:  logger(Clipboard, Debug, \"cliprdr_process(), type=%d, status=%d, length=%d\", type, status,",
      "128:         length);",
      "130:  if (status == CLIPRDR_ERROR)",
      "131:  {",
      "132:   switch (type)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "131:  if (!s_check_rem(s, length))",
      "132:  {",
      "133:   rdp_protocol_error(\"cliprdr_process(), consume of packet from stream would overrun\", &packet);",
      "134:  }",
      "",
      "---------------"
    ],
    "constants.h||constants.h": [
      "File: constants.h -> constants.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: #define ENC_SALTED_CHECKSUM  0x0010",
      "752: #define NO_BITMAP_COMPRESSION_HDR 0x0400",
      "755: #define NEGOTIATEORDERSUPPORT 0x0002",
      "756: #define ZEROBOUNDSDELTASSUPPORT 0x0008",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "755: #define BITMAP_COMPRESSION              0x0001",
      "",
      "---------------"
    ],
    "cssp.c||cssp.c": [
      "File: cssp.c -> cssp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "595:  STREAM s;",
      "596:  int length;",
      "597:  int tagval;",
      "599:  s = tcp_recv(NULL, 4);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "598:  struct stream packet;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "624:  s = tcp_recv(s, length);",
      "627:  if (!ber_in_header(s, &tagval, &length) ||",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "626:  packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "632:  if (!ber_in_header(s, &tagval, &length) ||",
      "633:      tagval != (BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0))",
      "634:   return False;",
      "635:  in_uint8s(s, length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "638:  if (!s_check_rem(s, length))",
      "639:  {",
      "640:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of version from stream would overrun\",",
      "641:         &packet);",
      "642:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "653:   if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)",
      "654:    return False;",
      "657:   out_uint8p(token, s->p, length);",
      "658:   s_mark_end(token);",
      "659:  }",
      "",
      "[Removed Lines]",
      "656:   token->end = token->p = token->data;",
      "",
      "[Added Lines]",
      "664:   if (!s_check_rem(s, length))",
      "665:   {",
      "666:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of token from stream would overrun\",",
      "667:         &packet);",
      "668:   }",
      "670:   s_realloc(token, length);",
      "671:   s_reset(token);",
      "",
      "---------------"
    ],
    "lspci.c||lspci.c": [
      "File: lspci.c -> lspci.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2:    rdesktop: A Remote Desktop Protocol client.",
      "3:    Support for the Matrox \"lspci\" channel",
      "6:    This program is free software: you can redistribute it and/or modify",
      "7:    it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "4:    Copyright (C) 2005 Matrox Graphics Inc.",
      "",
      "[Added Lines]",
      "4:    Copyright (C) 2005 Matrox Graphics Inc.",
      "5:    Copyright 2018 Henrik Andersson <hean01@cendio.se> for Cendio AB",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:  unsigned int pkglen;",
      "135:  static char *rest = NULL;",
      "136:  char *buf;",
      "138:  pkglen = s->end - s->p;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:  struct stream packet = *s;",
      "140:  if (!s_check(s))",
      "141:  {",
      "142:   rdp_protocol_error(\"lspci_process(), stream is in unstable state\", &packet);",
      "143:  }",
      "",
      "---------------"
    ],
    "mcs.c||mcs.c": [
      "File: mcs.c -> mcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: static RD_BOOL",
      "46: mcs_parse_domain_params(STREAM s)",
      "47: {",
      "50:  ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);",
      "51:  in_uint8s(s, length);",
      "53:  return s_check(s);",
      "",
      "[Removed Lines]",
      "48:  int length;",
      "",
      "[Added Lines]",
      "48:  uint32 length;",
      "49:  struct stream packet = *s;",
      "53:  if (!s_check_rem(s, length))",
      "54:  {",
      "55:   rdp_protocol_error(\"mcs_parse_domain_params(), consume domain params from stream would overrun\", &packet);",
      "56:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: {",
      "90:  UNUSED(mcs_data);",
      "91:  uint8 result;",
      "93:  STREAM s;",
      "94:  RD_BOOL is_fastpath;",
      "95:  uint8 fastpath_hdr;",
      "",
      "[Removed Lines]",
      "92:  int length;",
      "",
      "[Added Lines]",
      "99:  uint32 length;",
      "101:  struct stream packet;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "100:  if (s == NULL)",
      "101:   return False;",
      "103:  ber_parse_header(s, MCS_CONNECT_RESPONSE, &length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:  packet = *s;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:  ber_parse_header(s, BER_TAG_INTEGER, &length);",
      "115:  mcs_parse_domain_params(s);",
      "117:  ber_parse_header(s, BER_TAG_OCTET_STRING, &length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:  if (!s_check_rem(s, length))",
      "127:  {",
      "128:   rdp_protocol_error(\"mcs_recv_connect_response(), consume connect id from stream would overrun\", &packet);",
      "129:  }",
      "",
      "---------------"
    ],
    "orders.c||orders.c": [
      "File: orders.c -> orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:  uint16 flags;",
      "1260:  uint8 type;",
      "1261:  uint8 *next_order;",
      "1263:  in_uint16_le(s, length);",
      "1265:  in_uint8(s, type);",
      "1267:  next_order = s->p + (sint16) length + 7;",
      "1269:  switch (type)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1262:  struct stream packet = *s;",
      "1268:  if (!s_check_rem(s, length + 7))",
      "1269:  {",
      "1270:   rdp_protocol_error(\"process_secondary_order(), next order pointer would overrun stream\", &packet);",
      "1271:  }",
      "",
      "---------------"
    ],
    "proto.h||proto.h": [
      "File: proto.h -> proto.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "164:       char *directory, RD_BOOL reconnect);",
      "165: void rdp_reset_state(void);",
      "166: void rdp_disconnect(void);",
      "168: int get_device_index(RD_NTHANDLE handle);",
      "169: void convert_to_unix_filename(char *filename);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167: void rdp_protocol_error(const char *message, STREAM s);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "225: RD_BOOL ber_in_header(STREAM s, int *tagval, int *length);",
      "226: void ber_out_header(STREAM s, int tagval, int length);",
      "228: void ber_out_integer(STREAM s, int value);",
      "229: void ber_out_sequence(STREAM s, STREAM contents);",
      "",
      "[Removed Lines]",
      "227: RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);",
      "",
      "[Added Lines]",
      "228: RD_BOOL ber_parse_header(STREAM s, int tagval, uint32 *length);",
      "",
      "---------------"
    ],
    "rdp.c||rdp.c": [
      "File: rdp.c -> rdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:  size_t ibl, obl;",
      "286:  char *pin, *pout;",
      "289:  if (!icv_utf16_to_local)",
      "290:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:  struct stream packet = *s;",
      "290:  if ((in_len < 0) || ((uint32)in_len >= (RD_UINT32_MAX / 2)))",
      "291:  {",
      "292:   logger(Protocol, Error, \"rdp_in_unistr(), length of unicode data is out of bounds.\");",
      "293:   abort();",
      "294:  }",
      "296:  if (!s_check_rem(s, in_len))",
      "297:  {",
      "298:   rdp_protocol_error(\"rdp_in_unistr(), consume of unicode data from stream would overrun\", &packet);",
      "299:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1211: {",
      "1212:  uint8 type;",
      "1213:  uint16 len_src_descriptor, len_combined_caps;",
      "1216:  rd_create_ui();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1227:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1218:  in_uint32_le(s, g_rdp_shareid);",
      "1219:  in_uint16_le(s, len_src_descriptor);",
      "1220:  in_uint16_le(s, len_combined_caps);",
      "1221:  in_uint8s(s, len_src_descriptor);",
      "1223:  logger(Protocol, Debug, \"process_demand_active(), shareid=0x%x\", g_rdp_shareid);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1236:  if (!s_check_rem(s, len_src_descriptor))",
      "1237:  {",
      "1238:   rdp_protocol_error(\"rdp_demand_active(), consume of source descriptor from stream would overrun\", &packet);",
      "1239:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1390:  }",
      "1391: }",
      "1396: {",
      "1398:  uint16 left, top, right, bottom, width, height;",
      "1400:  uint8 *data, *bmpdata;",
      "1403:  logger(Protocol, Debug, \"%s()\", __func__);",
      "1453:   bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1455:   {",
      "1457:   }",
      "1464:   xfree(bmpdata);",
      "1465:  }",
      "1466: }",
      "",
      "[Removed Lines]",
      "1394: void",
      "1395: process_bitmap_updates(STREAM s)",
      "1397:  uint16 num_updates;",
      "1399:  uint16 cx, cy, bpp, Bpp, compress, bufsize, size;",
      "1401:  int i;",
      "1405:  in_uint16_le(s, num_updates);",
      "1407:  for (i = 0; i < num_updates; i++)",
      "1408:  {",
      "1409:   in_uint16_le(s, left);",
      "1410:   in_uint16_le(s, top);",
      "1411:   in_uint16_le(s, right);",
      "1412:   in_uint16_le(s, bottom);",
      "1413:   in_uint16_le(s, width);",
      "1414:   in_uint16_le(s, height);",
      "1415:   in_uint16_le(s, bpp);",
      "1416:   Bpp = (bpp + 7) / 8;",
      "1417:   in_uint16_le(s, compress);",
      "1418:   in_uint16_le(s, bufsize);",
      "1420:   cx = right - left + 1;",
      "1421:   cy = bottom - top + 1;",
      "1423:   logger(Graphics, Debug,",
      "1424:          \"process_bitmap_updates(), [%d,%d,%d,%d], [%d,%d], bpp=%d, compression=%d\",",
      "1425:          left, top, right, bottom, width, height, Bpp, compress);",
      "1427:   if (!compress)",
      "1428:   {",
      "1429:    int y;",
      "1430:    bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1431:    for (y = 0; y < height; y++)",
      "1432:    {",
      "1433:     in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],",
      "1434:        width * Bpp);",
      "1435:    }",
      "1436:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1437:    xfree(bmpdata);",
      "1438:    continue;",
      "1439:   }",
      "1442:   if (compress & 0x400)",
      "1443:   {",
      "1444:    size = bufsize;",
      "1445:   }",
      "1446:   else",
      "1447:   {",
      "1449:    in_uint16_le(s, size);",
      "1451:   }",
      "1452:   in_uint8p(s, data, size);",
      "1454:   if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
      "1456:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1458:   else",
      "1459:   {",
      "1460:    logger(Graphics, Warning,",
      "1461:           \"process_bitmap_updates(), failed to decompress bitmap\");",
      "1462:   }",
      "",
      "[Added Lines]",
      "1413: static void",
      "1414: process_bitmap_data(STREAM s)",
      "1417:  uint16 cx, cy, bpp, Bpp, flags, bufsize, size;",
      "1422:  struct stream packet = *s;",
      "1431:  Bpp = (bpp + 7) / 8;",
      "1435:  cx = right - left + 1;",
      "1436:  cy = bottom - top + 1;",
      "1439:   this code. The value of bpp is not passed to",
      "1440:   ui_paint_bitmap() which relies on g_server_bpp for drawing",
      "1441:   the bitmap data.",
      "1443:   Does this means that we can sanity check bpp with g_server_bpp ?",
      "1446:  if (Bpp == 0 || width == 0 || height == 0)",
      "1447:  {",
      "1448:         logger(Protocol, Warning, \"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
      "1449:     left, top, right, bottom, width, height, bpp, flags);",
      "1450:   rdp_protocol_error(\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\", &packet);",
      "1451:  }",
      "1453:  if ((RD_UINT32_MAX / Bpp) <= (width * height))",
      "1454:  {",
      "1455:   logger(Protocol, Warning, \"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
      "1456:     left, top, right, bottom, width, height, bpp, flags);",
      "1457:   rdp_protocol_error(\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\", &packet);",
      "1458:  }",
      "1460:  if (flags == 0)",
      "1461:  {",
      "1463:   int y;",
      "1465:   for (y = 0; y < height; y++)",
      "1467:    in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)], width * Bpp);",
      "1470:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1472:   return;",
      "1473:  }",
      "1475:  if (flags & NO_BITMAP_COMPRESSION_HDR)",
      "1476:  {",
      "1477:   size = bufsize;",
      "1478:  }",
      "1479:  else",
      "1480:  {",
      "1486:  }",
      "1489:  if (!s_check_rem(s, size))",
      "1490:  {",
      "1491:   rdp_protocol_error(\"process_bitmap_data(), consume of bitmap data from stream would overrun\", &packet);",
      "1492:  }",
      "1493:  in_uint8p(s, data, size);",
      "1494:  bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1495:  if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
      "1496:  {",
      "1497:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1498:  }",
      "1499:  else",
      "1500:  {",
      "1501:   logger(Protocol, Warning, \"%s(), failed to decompress bitmap\", __func__);",
      "1502:  }",
      "1504:  xfree(bmpdata);",
      "1505: }",
      "1508: void",
      "1509: process_bitmap_updates(STREAM s)",
      "1510: {",
      "1511:  int i;",
      "1512:  uint16 num_updates;",
      "1516:  for (i = 0; i < num_updates; i++)",
      "1517:  {",
      "1518:   process_bitmap_data(s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2013:  logger(Protocol, Debug, \"%s()\", __func__);",
      "2014:  sec_disconnect();",
      "2015: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2073:    A protocol error is defined as:",
      "2075:     - A value is outside specified range for example;",
      "2076:       bpp for a bitmap is not allowed to be greater than the",
      "2077:       value 32 but is represented by a byte in protocol.",
      "2080: void",
      "2081: rdp_protocol_error(const char *message, STREAM s)",
      "2082: {",
      "2083:  logger(Protocol, Error, \"%s(), %s\", __func__, message);",
      "2084:  if (s)",
      "2085:   hexdump(s->p, s_length(s));",
      "2086:  exit(0);",
      "2087: }",
      "",
      "---------------"
    ],
    "rdpdr.c||rdpdr.c": [
      "File: rdpdr.c -> rdpdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "854:  uint16 vmin;",
      "855:  uint16 component;",
      "856:  uint16 pakid;",
      "858:  logger(Protocol, Debug, \"rdpdr_process()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "857:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "880:     if (vmin < 0x000c)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "881:        so lets check that we actually got",
      "882:        valid data from stream to prevent",
      "884:     if (!s_check(s))",
      "885:     {",
      "886:      rdp_protocol_error(\"rdpdr_process(), consume of g_client_id from stream did overrun\", &packet);",
      "887:     }",
      "",
      "---------------"
    ],
    "rdpsnd.c||rdpsnd.c": [
      "File: rdpsnd.c -> rdpsnd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "269:  uint16 tick;",
      "270:  uint16 packsize;",
      "271:  STREAM out;",
      "273:  in_uint16_le(in, tick);",
      "274:  in_uint16_le(in, packsize);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "272:  struct stream packet = *in;",
      "274:  if (!s_check_rem(in, 4))",
      "275:  {",
      "276:   rdp_protocol_error(\"rdpsnd_process_training(), consume of training data from stream would overrun\", &packet);",
      "277:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "445:  static char *rest = NULL;",
      "446:  char *buf;",
      "448:  pkglen = s->end - s->p;",
      "450:  buf = (char *) xmalloc(pkglen + 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "454:  if (!s_check(s))",
      "455:  {",
      "456:   rdp_protocol_error(\"rdpsnddbg_process(), stream is in unstable state\", s);",
      "457:  }",
      "",
      "---------------"
    ],
    "seamless.c||seamless.c": [
      "File: seamless.c -> seamless.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    icon_buf[len] = strtol(byte, NULL, 16);",
      "170:    len++;",
      "171:   }",
      "173:   ui_seamless_seticon(id, tok5, width, height, chunk, icon_buf, len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:    if ((size_t)len >= sizeof(icon_buf))",
      "173:    {",
      "174:     logger(Protocol, Warning, \"seamless_process_line(), icon data would overrun icon_buf\");",
      "175:     break;",
      "176:    }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "370: {",
      "371:  unsigned int pkglen;",
      "372:  char *buf;",
      "374:  pkglen = s->end - s->p;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:  struct stream packet = *s;",
      "381:  if (!s_check(s))",
      "382:  {",
      "383:   rdp_protocol_error(\"seamless_process(), stream is in unstable state\", &packet);",
      "384:  }",
      "",
      "---------------"
    ],
    "secure.c||secure.c": [
      "File: secure.c -> secure.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "296: void",
      "297: sec_decrypt(uint8 * data, int length)",
      "298: {",
      "299:  if (g_sec_decrypt_use_count == 4096)",
      "300:  {",
      "301:   sec_update(g_sec_decrypt_key, g_sec_decrypt_update_key);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "299:  if (length <= 0)",
      "300:   return;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "848:  uint16 sec_flags;",
      "849:  uint16 channel;",
      "850:  STREAM s;",
      "852:  while ((s = mcs_recv(&channel, is_fastpath, &fastpath_hdr)) != NULL)",
      "853:  {",
      "854:   if (*is_fastpath == True)",
      "855:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "854:  struct stream packet;",
      "858:   packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "859:    fastpath_flags = (fastpath_hdr & 0xC0) >> 6;",
      "860:    if (fastpath_flags & FASTPATH_OUTPUT_ENCRYPTED)",
      "861:    {",
      "863:     sec_decrypt(s->p, s->end - s->p);",
      "864:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "867:     if (!s_check_rem(s, 8)) {",
      "868:      rdp_protocol_error(\"sec_recv(), consume fastpath signature from stream would overrun\", &packet);",
      "869:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "875:    {",
      "876:     if (sec_flags & SEC_ENCRYPT)",
      "877:     {",
      "879:      sec_decrypt(s->p, s->end - s->p);",
      "880:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "887:      if (!s_check_rem(s, 8)) {",
      "888:       rdp_protocol_error(\"sec_recv(), consume encrypt signature from stream would overrun\", &packet);",
      "889:      }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "889:     {",
      "890:      uint8 swapbyte;",
      "893:      sec_decrypt(s->p, s->end - s->p);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "905:      if (!s_check_rem(s, 8)) {",
      "906:       rdp_protocol_error(\"sec_recv(), consume redirect signature from stream would overrun\", &packet);",
      "907:      }",
      "",
      "---------------"
    ],
    "stream.h||stream.h": [
      "File: stream.h -> stream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: #define s_pop_layer(s,h) (s)->p = (s)->h;",
      "55: #define s_mark_end(s)  (s)->end = (s)->p;",
      "56: #define s_check(s)  ((s)->p <= (s)->end)",
      "58: #define s_check_end(s)  ((s)->p == (s)->end)",
      "59: #define s_length(s)  ((s)->end - (s)->data)",
      "60: #define s_left(s)               ((s)->size - ((s)->p - (s)->data))",
      "",
      "[Removed Lines]",
      "57: #define s_check_rem(s,n) ((s)->p + n <= (s)->end)",
      "",
      "[Added Lines]",
      "57: #define s_check_rem(s,n) (s_check(s) && (n <= (s)->end - (s)->p))",
      "",
      "---------------"
    ],
    "types.h||types.h": [
      "File: types.h -> types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: typedef unsigned int uint32;",
      "44: typedef signed int sint32;",
      "46: typedef void *RD_HBITMAP;",
      "47: typedef void *RD_HGLYPH;",
      "48: typedef void *RD_HCOLOURMAP;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: #define RD_UINT32_MAX (uint32)(-1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6249a5fec33c4d66113416d882c69cf6d7cff37b",
      "candidate_info": {
        "commit_hash": "6249a5fec33c4d66113416d882c69cf6d7cff37b",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/6249a5fec33c4d66113416d882c69cf6d7cff37b",
        "files": [
          "orders.c"
        ],
        "message": "Fix checking the length of remaining data in stream for very compact orders.",
        "before_after_code_files": [
          "orders.c||orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "orders.c||orders.c"
          ],
          "candidate": [
            "orders.c||orders.c"
          ]
        }
      },
      "candidate_diff": {
        "orders.c||orders.c": [
          "File: orders.c -> orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266:  in_uint8(s, type);",
          "1269:  {",
          "1270:   rdp_protocol_error(\"process_secondary_order(), next order pointer would overrun stream\", &packet);",
          "1271:  }",
          "",
          "[Removed Lines]",
          "1268:  if (!s_check_rem(s, length + 7))",
          "",
          "[Added Lines]",
          "1268:  if (!s_check_rem(s, (sint16) length + 7))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90219aac4118a55536d940241f741687dacdeac8",
      "candidate_info": {
        "commit_hash": "90219aac4118a55536d940241f741687dacdeac8",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/90219aac4118a55536d940241f741687dacdeac8",
        "files": [
          "stream.h"
        ],
        "message": "Add bounds checks to stream handling\n\nProtect against buffer overflow and overrun bugs in the protocol\nhandling.",
        "before_after_code_files": [
          "stream.h||stream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "stream.h||stream.h"
          ],
          "candidate": [
            "stream.h||stream.h"
          ]
        }
      },
      "candidate_diff": {
        "stream.h||stream.h": [
          "File: stream.h -> stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #define s_push_layer(s,h,n) { (s)->h = (s)->p; (s)->p += n; }",
          "56: #define s_pop_layer(s,h) (s)->p = (s)->h;",
          "57: #define s_mark_end(s)  (s)->end = (s)->p;",
          "59: #define s_check_end(s)  ((s)->p == (s)->end)",
          "60: #define s_length(s)  ((s)->end - (s)->data)",
          "63: #if defined(L_ENDIAN) && !defined(NEED_ALIGN)",
          "70: #else",
          "73:     v += *((s)->p++) << 16; v += *((s)->p++) << 24; }",
          "75:     v += *((s)->p++) << 32; v += *((s)->p++) << 40; \\",
          "76:     v += *((s)->p++) << 48; v += *((s)->p++) << 56; }",
          "80: #endif",
          "83: #if defined(B_ENDIAN) && !defined(NEED_ALIGN)",
          "91: #define B_ENDIAN_PREFERRED",
          "92: #define in_uint16(s,v)  in_uint16_be(s,v)",
          "",
          "[Removed Lines]",
          "58: #define s_check_rem(s,n) (((s)->p <= (s)->end) && (n <= (s)->end - (s)->p))",
          "61: #define s_left(s)               ((s)->size - ((s)->p - (s)->data))",
          "64: #define in_uint16_le(s,v) { v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "65: #define in_uint32_le(s,v) { v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "66: #define in_uint64_le(s,v) { v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "67: #define out_uint16_le(s,v) { *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "68: #define out_uint32_le(s,v) { *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "69: #define out_uint64_le(s,v) { *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "71: #define in_uint16_le(s,v) { v = *((s)->p++); v += *((s)->p++) << 8; }",
          "72: #define in_uint32_le(s,v) { in_uint16_le(s,v) \\",
          "74: #define in_uint64_le(s,v) { in_uint32_le(s,v) \\",
          "77: #define out_uint16_le(s,v) { *((s)->p++) = (v) & 0xff; *((s)->p++) = ((v) >> 8) & 0xff; }",
          "78: #define out_uint32_le(s,v) { out_uint16_le(s, (v) & 0xffff); out_uint16_le(s, ((v) >> 16) & 0xffff); }",
          "79: #define out_uint64_le(s,v) { out_uint32_le(s, (v) & 0xffffffff); out_uint32_le(s, ((v) >> 32) & 0xffffffff); }",
          "84: #define in_uint16_be(s,v) { v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "85: #define in_uint32_be(s,v) { v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "86: #define in_uint64_be(s,v) { v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "87: #define out_uint16_be(s,v) { *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "88: #define out_uint32_be(s,v) { *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "89: #define out_uint64_be(s,v) { *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "",
          "[Added Lines]",
          "58: #define s_check_rem(s,n) (((s)->p <= (s)->end) && ((size_t)n <= (size_t)((s)->end - (s)->p)))",
          "61: #define s_left(s)  ((s)->size - (size_t)((s)->p - (s)->data))",
          "64: #define s_assert_r(s,n)  { if (!s_check_rem(s, n)) rdp_protocol_error( \"unexpected stream overrun\", s); }",
          "65: #define s_assert_w(s,n)  { if (s_left(s) < (size_t)n) { logger(Core, Error, \"%s:%d: %s(), %s\", __FILE__, __LINE__, __func__, \"unexpected stream overrun\"); exit(0); } }",
          "68: #define in_uint16_le(s,v) { s_assert_r(s, 2); v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "69: #define in_uint32_le(s,v) { s_assert_r(s, 4); v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "70: #define in_uint64_le(s,v) { s_assert_r(s, 8); v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "71: #define out_uint16_le(s,v) { s_assert_w(s, 2); *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "72: #define out_uint32_le(s,v) { s_assert_w(s, 4); *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "73: #define out_uint64_le(s,v) { s_assert_w(s, 8); *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "75: #define in_uint16_le(s,v) { s_assert_r(s, 2); v = *((s)->p++); v += *((s)->p++) << 8; }",
          "76: #define in_uint32_le(s,v) { s_assert_r(s, 4); in_uint16_le(s,v) \\",
          "78: #define in_uint64_le(s,v) { s_assert_r(s, 8); in_uint32_le(s,v) \\",
          "81: #define out_uint16_le(s,v) { s_assert_w(s, 2); *((s)->p++) = (v) & 0xff; *((s)->p++) = ((v) >> 8) & 0xff; }",
          "82: #define out_uint32_le(s,v) { s_assert_w(s, 4); out_uint16_le(s, (v) & 0xffff); out_uint16_le(s, ((v) >> 16) & 0xffff); }",
          "83: #define out_uint64_le(s,v) { s_assert_w(s, 8); out_uint32_le(s, (v) & 0xffffffff); out_uint32_le(s, ((v) >> 32) & 0xffffffff); }",
          "88: #define in_uint16_be(s,v) { s_assert_r(s, 2); v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "89: #define in_uint32_be(s,v) { s_assert_r(s, 4); v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "90: #define in_uint64_be(s,v) { s_assert_r(s, 8); v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "91: #define out_uint16_be(s,v) { s_assert_w(s, 2); *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "92: #define out_uint32_be(s,v) { s_assert_w(s, 4); *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "93: #define out_uint64_be(s,v) { s_assert_w(s, 8); *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #define out_uint64(s,v)  out_uint64_be(s,v)",
          "100: #else",
          "107: #endif",
          "109: #ifndef B_ENDIAN_PREFERRED",
          "",
          "[Removed Lines]",
          "101: #define in_uint16_be(s,v) { v = *((s)->p++); next_be(s,v); }",
          "102: #define in_uint32_be(s,v) { in_uint16_be(s,v); next_be(s,v); next_be(s,v); }",
          "103: #define in_uint64_be(s,v) { in_uint32_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); }",
          "104: #define out_uint16_be(s,v) { *((s)->p++) = ((v) >> 8) & 0xff; *((s)->p++) = (v) & 0xff; }",
          "105: #define out_uint32_be(s,v) { out_uint16_be(s, ((v) >> 16) & 0xffff); out_uint16_be(s, (v) & 0xffff); }",
          "106: #define out_uint64_be(s,v) { out_uint32_be(s, ((v) >> 32) & 0xffffffff); out_uint32_be(s, (v) & 0xffffffff); }",
          "",
          "[Added Lines]",
          "105: #define in_uint16_be(s,v) { s_assert_r(s, 2); v = *((s)->p++); next_be(s,v); }",
          "106: #define in_uint32_be(s,v) { s_assert_r(s, 4); in_uint16_be(s,v); next_be(s,v); next_be(s,v); }",
          "107: #define in_uint64_be(s,v) { s_assert_r(s, 8); in_uint32_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); }",
          "108: #define out_uint16_be(s,v) { s_assert_w(s, 2); *((s)->p++) = ((v) >> 8) & 0xff; *((s)->p++) = (v) & 0xff; }",
          "109: #define out_uint32_be(s,v) { s_assert_w(s, 4); out_uint16_be(s, ((v) >> 16) & 0xffff); out_uint16_be(s, (v) & 0xffff); }",
          "110: #define out_uint64_be(s,v) { s_assert_w(s, 8); out_uint32_be(s, ((v) >> 32) & 0xffffffff); out_uint32_be(s, (v) & 0xffffffff); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115: #define out_uint64(s,v)  out_uint64_le(s,v)",
          "116: #endif",
          "122: #define in_skip(s,n)  in_uint8s(s,n)",
          "125: #define out_uint8a(s,v,n) out_uint8p(s,v,n);",
          "127: #define out_stream(s, v)        out_uint8p(s, (v)->data, s_length((v)))",
          "",
          "[Removed Lines]",
          "118: #define in_uint8(s,v)  v = *((s)->p++);",
          "119: #define in_uint8p(s,v,n) { v = (s)->p; (s)->p += n; }",
          "120: #define in_uint8a(s,v,n) { memcpy(v,(s)->p,n); (s)->p += n; }",
          "121: #define in_uint8s(s,n)  (s)->p += n;",
          "123: #define out_uint8(s,v)  *((s)->p++) = v;",
          "124: #define out_uint8p(s,v,n) { memcpy((s)->p,v,n); (s)->p += n; }",
          "126: #define out_uint8s(s,n)  { memset((s)->p,0,n); (s)->p += n; }",
          "129: #define next_be(s,v)  v = ((v) << 8) + *((s)->p++);",
          "",
          "[Added Lines]",
          "122: #define in_uint8(s,v)  { s_assert_r(s, 1); v = *((s)->p++); }",
          "123: #define in_uint8p(s,v,n) { s_assert_r(s, n); v = (s)->p; (s)->p += n; }",
          "124: #define in_uint8a(s,v,n) { s_assert_r(s, n); memcpy(v,(s)->p,n); (s)->p += n; }",
          "125: #define in_uint8s(s,n)  { s_assert_r(s, n); (s)->p += n; }",
          "127: #define out_uint8(s,v)  { s_assert_w(s, 1); *((s)->p++) = v; }",
          "128: #define out_uint8p(s,v,n) { s_assert_w(s, n); memcpy((s)->p,v,n); (s)->p += n; }",
          "130: #define out_uint8s(s,n)  { s_assert_w(s, n); memset((s)->p,0,n); (s)->p += n; }",
          "133: #define next_be(s,v)  { s_assert_r(s, 1); v = ((v) << 8) + *((s)->p++); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e099d79879fa3662384d661a25593c661db4f823",
      "candidate_info": {
        "commit_hash": "e099d79879fa3662384d661a25593c661db4f823",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/e099d79879fa3662384d661a25593c661db4f823",
        "files": [
          "asn.c",
          "lspci.c",
          "mcs.c",
          "orders.c",
          "rdp.c",
          "rdp5.c",
          "rdpdr.c",
          "rdpsnd.c",
          "seamless.c",
          "secure.c",
          "stream.h"
        ],
        "message": "Remove dangerous s_check()\n\nThis macro checks if a pointer is valid _after_ we've already used\nthat pointer. So it will only trigger if we're already performed some\nfor of buffer overflow. As such, it provides little to no value and\ncan only server to encourage broken behaviour.\n\nLet's remove it and replace it with proper bounds checking before\naccess instead.",
        "before_after_code_files": [
          "asn.c||asn.c",
          "lspci.c||lspci.c",
          "mcs.c||mcs.c",
          "orders.c||orders.c",
          "rdp.c||rdp.c",
          "rdp5.c||rdp5.c",
          "rdpdr.c||rdpdr.c",
          "rdpsnd.c||rdpsnd.c",
          "seamless.c||seamless.c",
          "secure.c||secure.c",
          "stream.h||stream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn.c||asn.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "rdpsnd.c||rdpsnd.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "stream.h||stream.h"
          ],
          "candidate": [
            "asn.c||asn.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "rdpsnd.c||rdpsnd.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "stream.h||stream.h"
          ]
        }
      },
      "candidate_diff": {
        "asn.c||asn.c": [
          "File: asn.c -> asn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  if (tagval > 0xff)",
          "43:  {",
          "44:   in_uint16_be(s, tag);",
          "45:  }",
          "46:  else",
          "47:  {",
          "48:   in_uint8(s, tag);",
          "49:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:   if (!s_check_rem(s, 2)) {",
          "45:    return False;",
          "46:   }",
          "51:   if (!s_check_rem(s, 1)) {",
          "52:    return False;",
          "53:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:   return False;",
          "55:  }",
          "57:  in_uint8(s, len);",
          "59:  if (len & 0x80)",
          "60:  {",
          "61:   len &= ~0x80;",
          "63:   while (len--)",
          "64:    next_be(s, *length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:  if (!s_check_rem(s, 1)) {",
          "64:   return False;",
          "65:  }",
          "71:   if (!s_check_rem(s, len)) {",
          "72:    return False;",
          "73:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:  else",
          "70: }",
          "72: void",
          "",
          "[Removed Lines]",
          "69:  return s_check(s);",
          "",
          "[Added Lines]",
          "81:  return True;",
          "",
          "---------------"
        ],
        "lspci.c||lspci.c": [
          "File: lspci.c -> lspci.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  unsigned int pkglen;",
          "136:  static char *rest = NULL;",
          "137:  char *buf;",
          "145:  pkglen = s->end - s->p;",
          "",
          "[Removed Lines]",
          "138:  struct stream packet = *s;",
          "140:  if (!s_check(s))",
          "141:  {",
          "142:   rdp_protocol_error(\"lspci_process(), stream is in unstable state\", &packet);",
          "143:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mcs.c||mcs.c": [
          "File: mcs.c -> mcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: }",
          "46: mcs_parse_domain_params(STREAM s)",
          "47: {",
          "48:  uint32 length;",
          "",
          "[Removed Lines]",
          "45: static RD_BOOL",
          "",
          "[Added Lines]",
          "45: static void",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  }",
          "58:  in_uint8s(s, length);",
          "61: }",
          "",
          "[Removed Lines]",
          "60:  return s_check(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "orders.c||orders.c": [
          "File: orders.c -> orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: }",
          "105: rdp_parse_bounds(STREAM s, BOUNDS * bounds)",
          "106: {",
          "107:  uint8 present;",
          "",
          "[Removed Lines]",
          "104: static RD_BOOL",
          "",
          "[Added Lines]",
          "104: static void",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   rdp_in_coord(s, &bounds->bottom, False);",
          "128:  else if (present & 128)",
          "129:   rdp_in_coord(s, &bounds->bottom, True);",
          "132: }",
          "136: rdp_parse_pen(STREAM s, PEN * pen, uint32 present)",
          "137: {",
          "138:  if (present & 1)",
          "",
          "[Removed Lines]",
          "131:  return s_check(s);",
          "135: static RD_BOOL",
          "",
          "[Added Lines]",
          "133: static void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  if (present & 4)",
          "145:   rdp_in_colour(s, &pen->colour);",
          "148: }",
          "150: static void",
          "",
          "[Removed Lines]",
          "147:  return s_check(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176: }",
          "180: rdp_parse_brush(STREAM s, BRUSH * brush, uint32 present)",
          "181: {",
          "182:  if (present & 1)",
          "",
          "[Removed Lines]",
          "179: static RD_BOOL",
          "",
          "[Added Lines]",
          "175: static void",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194:  if (present & 16)",
          "195:   in_uint8a(s, &brush->pattern[1], 7);",
          "198: }",
          "",
          "[Removed Lines]",
          "197:  return s_check(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rdp.c||rdp.c": [
          "File: rdp.c -> rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1417:   case RDP_POINTER_MOVE:",
          "1418:    in_uint16_le(s, x);",
          "1419:    in_uint16_le(s, y);",
          "1422:    break;",
          "1424:   case RDP_POINTER_COLOR:",
          "",
          "[Removed Lines]",
          "1420:    if (s_check(s))",
          "1421:     ui_move_pointer(x, y);",
          "",
          "[Added Lines]",
          "1420:    ui_move_pointer(x, y);",
          "",
          "---------------"
        ],
        "rdp5.c||rdp5.c": [
          "File: rdp5.c -> rdp5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   case FASTPATH_UPDATETYPE_PTR_POSITION:",
          "57:    in_uint16_le(s, x);",
          "58:    in_uint16_le(s, y);",
          "61:    break;",
          "62:   case FASTPATH_UPDATETYPE_COLOR:",
          "63:    process_colour_pointer_pdu(s);",
          "",
          "[Removed Lines]",
          "59:    if (s_check(s))",
          "60:     ui_move_pointer(x, y);",
          "",
          "[Added Lines]",
          "59:    ui_move_pointer(x, y);",
          "",
          "---------------"
        ],
        "rdpdr.c||rdpdr.c": [
          "File: rdpdr.c -> rdpdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:  uint16 vmin;",
          "878:  uint16 component;",
          "879:  uint16 pakid;",
          "882:  logger(Protocol, Debug, \"rdpdr_process()\");",
          "",
          "[Removed Lines]",
          "880:  struct stream packet = *s;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "914:     if (vmin < 0x000c)",
          "",
          "[Removed Lines]",
          "904:        so lets check that we actually got",
          "905:        valid data from stream to prevent",
          "907:     if (!s_check(s))",
          "908:     {",
          "909:      rdp_protocol_error(\"rdpdr_process(), consume of g_client_id from stream did overrun\", &packet);",
          "910:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rdpsnd.c||rdpsnd.c": [
          "File: rdpsnd.c -> rdpsnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:  static char *rest = NULL;",
          "452:  char *buf;",
          "459:  pkglen = s->end - s->p;",
          "461:  buf = (char *) xmalloc(pkglen + 1);",
          "",
          "[Removed Lines]",
          "454:  if (!s_check(s))",
          "455:  {",
          "456:   rdp_protocol_error(\"rdpsnddbg_process(), stream is in unstable state\", s);",
          "457:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "seamless.c||seamless.c": [
          "File: seamless.c -> seamless.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: {",
          "377:  unsigned int pkglen;",
          "378:  char *buf;",
          "386:  pkglen = s->end - s->p;",
          "",
          "[Removed Lines]",
          "379:  struct stream packet = *s;",
          "381:  if (!s_check(s))",
          "382:  {",
          "383:   rdp_protocol_error(\"seamless_process(), stream is in unstable state\", &packet);",
          "384:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure.c||secure.c": [
          "File: secure.c -> secure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "523: {",
          "524:  uint32 magic, modulus_len;",
          "526:  in_uint32_le(s, magic);",
          "527:  if (magic != SEC_RSA_MAGIC)",
          "528:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:  if (!s_check_rem(s, 8)) {",
          "527:   return False;",
          "528:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:   return False;",
          "542:  }",
          "545:  in_uint8a(s, exponent, SEC_EXPONENT_SIZE);",
          "546:  in_uint8a(s, modulus, modulus_len);",
          "547:  in_uint8s(s, SEC_PADDING_SIZE);",
          "548:  g_server_public_key_len = modulus_len;",
          "551: }",
          "",
          "[Removed Lines]",
          "550:  return s_check(s);",
          "",
          "[Added Lines]",
          "548:  if (!s_check_rem(s, 1 + SEC_EXPONENT_SIZE + modulus_len + SEC_PADDING_SIZE)) {",
          "549:   return False;",
          "550:  }",
          "558:  return True;",
          "",
          "---------------"
        ],
        "stream.h||stream.h": [
          "File: stream.h -> stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #define s_push_layer(s,h,n) { (s)->h = (s)->p; (s)->p += n; }",
          "56: #define s_pop_layer(s,h) (s)->p = (s)->h;",
          "57: #define s_mark_end(s)  (s)->end = (s)->p;",
          "60: #define s_check_end(s)  ((s)->p == (s)->end)",
          "61: #define s_length(s)  ((s)->end - (s)->data)",
          "62: #define s_left(s)               ((s)->size - ((s)->p - (s)->data))",
          "",
          "[Removed Lines]",
          "58: #define s_check(s)  ((s)->p <= (s)->end)",
          "59: #define s_check_rem(s,n) (s_check(s) && (n <= (s)->end - (s)->p))",
          "",
          "[Added Lines]",
          "58: #define s_check_rem(s,n) (((s)->p <= (s)->end) && (n <= (s)->end - (s)->p))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de59a100ead9eadc5a2a925124cfb82707ed0360",
      "candidate_info": {
        "commit_hash": "de59a100ead9eadc5a2a925124cfb82707ed0360",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/de59a100ead9eadc5a2a925124cfb82707ed0360",
        "files": [
          "proto.h"
        ],
        "message": "Mark rd_protocol_error() as \"noreturn\"\n\nThis allows the compiler to optimize things better and give better\nwarnings as it knows it will never return from this function.",
        "before_after_code_files": [
          "proto.h||proto.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "proto.h||proto.h"
          ],
          "candidate": [
            "proto.h||proto.h"
          ]
        }
      },
      "candidate_diff": {
        "proto.h||proto.h": [
          "File: proto.h -> proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #endif",
          "27: #define UNUSED(param) ((void)param)",
          "29: RD_BOOL bitmap_decompress(uint8 * output, int width, int height, uint8 * input, int size, int Bpp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #ifdef __GNUC__",
          "29: #  define NORETURN __attribute__((noreturn))",
          "30: #else",
          "31: #  define NORETURN",
          "32: #endif // __GNUC__",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: void rdp_disconnect(void);",
          "168: #define rdp_protocol_error(m, s) _rdp_protocol_error(__FILE__, __LINE__, __func__, m, s)",
          "169: void _rdp_protocol_error(const char *file, int line, const char *func,",
          "172: int get_device_index(RD_NTHANDLE handle);",
          "173: void convert_to_unix_filename(char *filename);",
          "",
          "[Removed Lines]",
          "170:     const char *message, STREAM s);",
          "",
          "[Added Lines]",
          "175:     const char *message, STREAM s) NORETURN;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1537061bf26ecfaee221f52c69db49153650d42",
      "candidate_info": {
        "commit_hash": "e1537061bf26ecfaee221f52c69db49153650d42",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/e1537061bf26ecfaee221f52c69db49153650d42",
        "files": [
          "rdp.c"
        ],
        "message": "Fix packet debug output in rdp_protocol_error()\n\nWe're trying to print the entire packet, not just what's left.",
        "before_after_code_files": [
          "rdp.c||rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rdp.c||rdp.c"
          ],
          "candidate": [
            "rdp.c||rdp.c"
          ]
        }
      },
      "candidate_diff": {
        "rdp.c||rdp.c": [
          "File: rdp.c -> rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2117: {",
          "2118:  logger(Protocol, Error, \"%s:%d: %s(), %s\", file, line, func, message);",
          "2119:  if (s)",
          "2121:  exit(0);",
          "2122: }",
          "",
          "[Removed Lines]",
          "2120:   hexdump(s->p, s_length(s));",
          "",
          "[Added Lines]",
          "2120:   hexdump(s->data, s_length(s));",
          "",
          "---------------"
        ]
      }
    }
  ]
}