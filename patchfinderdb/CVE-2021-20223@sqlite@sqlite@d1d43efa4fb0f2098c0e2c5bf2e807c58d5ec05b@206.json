{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf08f08d2c3f2cd5486444224bd67309a46705b7",
      "candidate_info": {
        "commit_hash": "cf08f08d2c3f2cd5486444224bd67309a46705b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cf08f08d2c3f2cd5486444224bd67309a46705b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbevtab.c"
        ],
        "message": "Fix a memory leak.\n\nFossilOrigin-Name: c9f3405eeac8aff171b5d76bae954f3b51b353d16286a3d2af43ef942c212abc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df893364b7cea07ff2b15b80cb294dccaffe701d51452264599b55304a36fa7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: static void bytecodevtabCursorClear(bytecodevtab_cursor *pCur){",
          "106:   sqlite3_free(pCur->zP4);",
          "107:   pCur->zP4 = 0;",
          "108:   sqlite3VdbeMemSetNull(&pCur->sub);",
          "109:   if( pCur->needFinalize ){",
          "110:     sqlite3_finalize(pCur->pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   sqlite3VdbeMemRelease(&pCur->sub);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58021b237ae7e84069aaa564c0b6834a23296aed",
      "candidate_info": {
        "commit_hash": "58021b237ae7e84069aaa564c0b6834a23296aed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/58021b237ae7e84069aaa564c0b6834a23296aed",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/os_unix.c",
          "src/pager.c",
          "src/pager.h",
          "src/wal.c",
          "src/wal.h",
          "test/wal.test"
        ],
        "message": "Unless upgrading an existing read transaction, have ENABLE_SETLK_TIMEOUT builds attempt to use a blocking lock when opening a write transaction on a wal mode database.\n\nFossilOrigin-Name: d6f819a9e6b35f3fd558bd93255a6a24ad690a0fa15a82b009ca9c641db983c6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/os_unix.c||src/os_unix.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/wal.c||src/wal.c",
          "src/wal.h||src/wal.h",
          "test/wal.test||test/wal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 553423c23142cf0ec219192315d57ce8a0e10c3d8678d28bc110a1a9a7c17cee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3437:   pBt->btsFlags &= ~BTS_INITIALLY_EMPTY;",
          "3438:   if( pBt->nPage==0 ) pBt->btsFlags |= BTS_INITIALLY_EMPTY;",
          "3439:   do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3440:     Pager *pPager = pBt->pPager;",
          "3442: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3445:     if( pBt->pPage1==0 && wrflag ){",
          "3446:       assert( pBt->inTransaction==TRANS_NONE );",
          "3447:       rc = sqlite3PagerWalWriteLock(p->db, pPager, 1);",
          "3448:       if( rc!=SQLITE_OK ) break;",
          "3449:     }",
          "3450: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3450:       if( (pBt->btsFlags & BTS_READ_ONLY)!=0 ){",
          "3451:         rc = SQLITE_READONLY;",
          "3452:       }else{",
          "3454:         if( rc==SQLITE_OK ){",
          "3455:           rc = newDatabase(pBt);",
          "3456:         }else if( rc==SQLITE_BUSY_SNAPSHOT && pBt->inTransaction==TRANS_NONE ){",
          "",
          "[Removed Lines]",
          "3453:         rc = sqlite3PagerBegin(pBt->pPager,wrflag>1,sqlite3TempInMemory(p->db));",
          "",
          "[Added Lines]",
          "3465:         rc = sqlite3PagerBegin(pPager, wrflag>1, sqlite3TempInMemory(p->db));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3463:     }",
          "3465:     if( rc!=SQLITE_OK ){",
          "3466:       unlockBtreeIfUnused(pBt);",
          "3467:     }",
          "3468:   }while( (rc&0xFF)==SQLITE_BUSY && pBt->inTransaction==TRANS_NONE &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3478:       sqlite3PagerWalWriteLock(p->db, pPager, 0);",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4819:   assert( pShmNode->hShm>=0 || pDbFd->pInode->bProcessLock==1 );",
          "4820:   assert( pShmNode->hShm<0 || pDbFd->pInode->bProcessLock==0 );",
          "4833: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "4838: #endif",
          "4840:   mask = (1<<(ofst+n)) - (1<<ofst);",
          "",
          "[Removed Lines]",
          "4834:   assert( pDbFd->iBusyTimeout==0",
          "4835:        || (flags & SQLITE_SHM_UNLOCK) || ofst==0",
          "4836:        || ((p->exclMask|p->sharedMask)&~((1<<ofst)-2))==0",
          "4837:   );",
          "",
          "[Added Lines]",
          "4833:   assert( (flags & SQLITE_SHM_UNLOCK) || pDbFd->iBusyTimeout==0 || (",
          "4836:       && (ofst!=1 || (p->exclMask|p->sharedMask)==0)",
          "4837:       && (ofst!=0 || (p->exclMask|p->sharedMask)<3)",
          "4838:       && (ofst<3  || (p->exclMask|p->sharedMask)<(1<<ofst))",
          "4839:   ));",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7574:   return rc;",
          "7575: }",
          "7579: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7577: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "7584: int sqlite3PagerWalWriteLock(sqlite3 *db, Pager *pPager, int bLock){",
          "7585:   int rc = SQLITE_OK;",
          "7586:   if( pagerUseWal(pPager) && pPager->exclusiveMode==0 ){",
          "7587:     rc = sqlite3WalWriteLock(db, pPager->pWal, bLock);",
          "7588:   }",
          "7589:   return rc;",
          "7590: }",
          "7591: #endif",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: # endif",
          "186: #endif",
          "188: #ifdef SQLITE_DIRECT_OVERFLOW_READ",
          "189:   int sqlite3PagerDirectReadOk(Pager *pPager, Pgno pgno);",
          "190: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #if !defined(SQLITE_OMIT_WAL) && defined(SQLITE_ENABLE_SETLK_TIMEOUT)",
          "189:   int sqlite3PagerWalWriteLock(sqlite3*, Pager*, int);",
          "190: #else",
          "191: # define sqlite3PagerWalWriteLock(x,y,z) SQLITE_OK",
          "192: #endif",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2731: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2734: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2741: static int walEnableBlocking(sqlite3 *db, Wal *pWal){",
          "2742:   int res = 0;",
          "2743:   if( db->busyTimeout ){",
          "2744:     int rc;",
          "2745:     int tmout = db->busyTimeout;",
          "2746:     rc = sqlite3OsFileControl(",
          "2747:         pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout",
          "2748:     );",
          "2749:     res = (rc==SQLITE_OK);",
          "2750:   }",
          "2751:   return res;",
          "2752: }",
          "2757: static void walDisableBlocking(Wal *pWal){",
          "2758:   int tmout = 0;",
          "2759:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2760: }",
          "2771: int sqlite3WalWriteLock(sqlite3 *db, Wal *pWal, int bLock){",
          "2772:   int rc = SQLITE_OK;",
          "2773:   assert( pWal->readLock<0 || bLock==0 );",
          "2774:   if( bLock ){",
          "2775:     if( walEnableBlocking(db, pWal) ){",
          "2776:       rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2777:       if( rc==SQLITE_OK ){",
          "2778:         pWal->writeLock = 1;",
          "2779:       }",
          "2780:       walDisableBlocking(pWal);",
          "2781:     }",
          "2782:   }else if( pWal->writeLock ){",
          "2783:     walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2784:     pWal->writeLock = 0;",
          "2785:   }",
          "2786:   return rc;",
          "2787: }",
          "2788: #else",
          "2789: # define walEnableBlocking(x,y) 0",
          "2790: # define walDisableBlocking(x)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2754:   int bChanged = 0;",
          "2755:   WalIndexHdr *pSnapshot = pWal->pSnapshot;",
          "2756:   if( pSnapshot ){",
          "2765:     if( memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "2766:       bChanged = 1;",
          "2767:     }",
          "",
          "[Removed Lines]",
          "2757: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2758:     int busyTimeout = pWal->dbSnapshot->busyTimeout;",
          "2759:     if( busyTimeout ){",
          "2760:       int tmout = busyTimeout;",
          "2761:       sqlite3OsFileControl(pWal->pDbFd,SQLITE_FCNTL_LOCK_TIMEOUT,(void*)&tmout);",
          "2762:     }",
          "2763: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2777:     rc = walLockShared(pWal, WAL_CKPT_LOCK);",
          "2786:     if( rc!=SQLITE_OK ){",
          "2787:       return rc;",
          "",
          "[Removed Lines]",
          "2779: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2780:     if( busyTimeout ){",
          "2781:       int tmout = 0;",
          "2782:       sqlite3OsFileControl(pWal->pDbFd,SQLITE_FCNTL_LOCK_TIMEOUT,(void*)&tmout);",
          "2783:     }",
          "2784: #endif",
          "",
          "[Added Lines]",
          "2828:     walEnableBlocking(pWal->dbSnapshot, pWal);",
          "2830:     walDisableBlocking(pWal);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2863: void sqlite3WalEndReadTransaction(Wal *pWal){",
          "2865:   if( pWal->readLock>=0 ){",
          "2866:     walUnlockShared(pWal, WAL_READ_LOCK(pWal->readLock));",
          "2867:     pWal->readLock = -1;",
          "2868:   }",
          "",
          "[Removed Lines]",
          "2864:   sqlite3WalEndWriteTransaction(pWal);",
          "",
          "[Added Lines]",
          "2911:     sqlite3WalEndWriteTransaction(pWal);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3022: int sqlite3WalBeginWriteTransaction(Wal *pWal){",
          "3023:   int rc;",
          "3027:   assert( pWal->readLock>=0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3071: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3075:   if( pWal->writeLock ){",
          "3076:     assert( !memcmp(&pWal->hdr,(void *)walIndexHdr(pWal),sizeof(WalIndexHdr)) );",
          "3077:     return SQLITE_OK;",
          "3078:   }",
          "3079: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3594:   assert( pWal->ckptLock==0 );",
          "3595:   assert( pWal->writeLock==0 );",
          "",
          "[Removed Lines]",
          "3590: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3591:   int bSetLk = 0;",
          "3592: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3601:   if( pWal->readOnly ) return SQLITE_READONLY;",
          "3602:   WALTRACE((\"WAL%p: checkpoint begins\\n\", pWal));",
          "3614:   }",
          "",
          "[Removed Lines]",
          "3604: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3605:   if( db->busyTimeout ){",
          "3606:     int tmout = db->busyTimeout;",
          "3607:     sqlite3_file *fd = pWal->pDbFd;",
          "3608:     if( SQLITE_OK==",
          "3609:         sqlite3OsFileControl(fd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout)",
          "3610:     ){",
          "3611:       xBusy2 = 0;",
          "3612:       bSetLk = 1;",
          "3613:     }",
          "3615: #endif",
          "",
          "[Added Lines]",
          "3659:   if( walEnableBlocking(db, pWal) ){",
          "3660:     xBusy2 = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3684:     memset(&pWal->hdr, 0, sizeof(WalIndexHdr));",
          "3685:   }",
          "3696:   sqlite3WalEndWriteTransaction(pWal);",
          "",
          "[Removed Lines]",
          "3687: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3688:   if( bSetLk ){",
          "3689:     int tmout = 0;",
          "3690:     sqlite3_file *fd = pWal->pDbFd;",
          "3691:     sqlite3OsFileControl(fd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "3692:   }",
          "3693: #endif",
          "",
          "[Added Lines]",
          "3733:   walDisableBlocking(pWal);",
          "",
          "---------------"
        ],
        "src/wal.h||src/wal.h": [
          "File: src/wal.h -> src/wal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: sqlite3_file *sqlite3WalFile(Wal *pWal);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "150: int sqlite3WalWriteLock(sqlite3 *db, Wal *pWal, int bLock);",
          "151: #endif",
          "",
          "---------------"
        ],
        "test/wal.test||test/wal.test": [
          "File: test/wal.test -> test/wal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   [lindex $args 0] eval { PRAGMA journal_mode = wal }",
          "44:   [lindex $args 0] eval { PRAGMA synchronous = normal }",
          "45:   [lindex $args 0] function blob blob",
          "46: }",
          "48: proc log_deleted {logfile} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   db timeout 1000",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f573b4fb94e5f40143916b72f1a42c1b1f3a72ee",
      "candidate_info": {
        "commit_hash": "f573b4fb94e5f40143916b72f1a42c1b1f3a72ee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f573b4fb94e5f40143916b72f1a42c1b1f3a72ee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Avoid the possibility of integer overflow on the --pagecache option to the CLI. See [forum:10a2892377|forum post 10a2892377]\n\nFossilOrigin-Name: d3d13df31a97648f952beb2e1a783f947a80ec843227985ad9ebd14452d2f654",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4591ee03d7a1ef3f0f6ad0629493fdb7a1c0ddb3277a9e87aa244cb0ca770593",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "10925:       (void)cmdline_option_value(argc, argv, ++i);",
          "10926: #endif",
          "10927:     }else if( strcmp(z,\"-pagecache\")==0 ){",
          "10930:       if( sz>70000 ) sz = 70000;",
          "10931:       if( sz<0 ) sz = 0;",
          "10933:       sqlite3_config(SQLITE_CONFIG_PAGECACHE,",
          "10934:                     (n>0 && sz>0) ? malloc(n*sz) : 0, sz, n);",
          "10935:       data.shellFlgs |= SHFLG_Pagecache;",
          "",
          "[Removed Lines]",
          "10928:       int n, sz;",
          "10929:       sz = (int)integerValue(cmdline_option_value(argc,argv,++i));",
          "10932:       n = (int)integerValue(cmdline_option_value(argc,argv,++i));",
          "",
          "[Added Lines]",
          "10928:       sqlite3_int64 n, sz;",
          "10929:       sz = integerValue(cmdline_option_value(argc,argv,++i));",
          "10932:       n = integerValue(cmdline_option_value(argc,argv,++i));",
          "10933:       if( sz>0 && n>0 && 0xffffffffffffLL/sz<n ){",
          "10934:         n = 0xffffffffffffLL/sz;",
          "10935:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d7d8c8f74b44fb54fb15539a4191ea68110f471",
      "candidate_info": {
        "commit_hash": "1d7d8c8f74b44fb54fb15539a4191ea68110f471",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d7d8c8f74b44fb54fb15539a4191ea68110f471",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/wal.c"
        ],
        "message": "Add the SQLITE_FCNTL_CKPT_DONE file-control for the use of custom VFSs.\n\nFossilOrigin-Name: 3cc39e5069c8a6a32ecc49c571593615c0f347cadcd3e0325b7f9a11ddc1f546",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1bc783da63d58b05c690468b569cb2787846357b63c1100d11777666c5787bf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1148: #define SQLITE_FCNTL_LOCK_TIMEOUT           34",
          "1149: #define SQLITE_FCNTL_DATA_VERSION           35",
          "1150: #define SQLITE_FCNTL_SIZE_LIMIT             36",
          "1153: #define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1157: #define SQLITE_FCNTL_CKPT_DONE              37",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1913:             rc = sqlite3OsSync(pWal->pDbFd, CKPT_SYNC_FLAGS(sync_flags));",
          "1914:           }",
          "1915:         }",
          "1916:         if( rc==SQLITE_OK ){",
          "1917:           pInfo->nBackfill = mxSafeFrame;",
          "1918:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1916:         if( rc==SQLITE_OK ){",
          "1917:           rc = sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_DONE, 0);",
          "1918:           if( rc==SQLITE_NOTFOUND ) rc = SQLITE_OK;",
          "1919:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03836614148488e8ea5539743b796d557451d630",
      "candidate_info": {
        "commit_hash": "03836614148488e8ea5539743b796d557451d630",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/03836614148488e8ea5539743b796d557451d630",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/e_expr.test",
          "test/trigger2.test"
        ],
        "message": "Fix a problem in VIEW creation that was introduced by the generated columns feature.\n\nFossilOrigin-Name: 9c795c4d2b042d2932774bd1274fa0167ca2dc9838e127e0cf31eb9273a32f2c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/e_expr.test||test/e_expr.test",
          "test/trigger2.test||test/trigger2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 167cd574d6a1d4fe2253f5bc5aaa7b031cbc82853e4d33b8d9b72eaf049003d4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2627:       assert( pTable->aCol==0 );",
          "2629:       pTable->aCol = pSelTab->aCol;",
          "2630:       pSelTab->nCol = 0;",
          "2631:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2628:       pTable->nCol = pTable->nNVCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2628:       pTable->nCol = pSelTab->nCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2634:       pTable->nCol = 0;",
          "2635:       nErr++;",
          "2636:     }",
          "2637:     sqlite3DeleteTable(db, pSelTab);",
          "2638:     sqlite3SelectDelete(db, pSel);",
          "2639:     EnableLookaside;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2637:     pTable->nNVCol = pTable->nCol;",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1909: # EVIDENCE-OF: R-18318-14995 The value of a subquery expression is the",
          "1910: # first row of the result from the enclosed SELECT statement.",
          "1911: #",
          "1915: do_execsql_test e_expr-36.3.1 {",
          "1916:   CREATE TABLE t4(x, y);",
          "1917:   INSERT INTO t4 VALUES(1, 'one');",
          "",
          "[Removed Lines]",
          "1912: # EVIDENCE-OF: R-15900-52156 In other words, an implied \"LIMIT 1\" is",
          "1913: # added to the subquery, overriding an explicitly coded LIMIT.",
          "1914: #",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/trigger2.test||test/trigger2.test": [
          "File: test/trigger2.test -> test/trigger2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   }",
          "753: } {}",
          "755: } ;# ifcapable view",
          "759: finish_test",
          "",
          "[Removed Lines]",
          "757: integrity_check trigger2-9.9",
          "",
          "[Added Lines]",
          "755: integrity_check trigger2-9.99",
          "757: # 2019-11-02 Problem found by TH3, related to generated column support.",
          "758: db close",
          "759: sqlite3 db :memory:",
          "760: do_execsql_test trigger2-10.1 {",
          "761:   CREATE TABLE t1(a,b,c,d);",
          "762:   CREATE VIEW v2(a,b,c,d) AS SELECT * FROM t1;",
          "763:   CREATE TRIGGER v2ins INSTEAD OF INSERT ON v2 BEGIN",
          "764:     INSERT INTO t1(a,b,c,d) VALUES(new.a, new.b, new.c, new.d);",
          "765:   END;",
          "766:   INSERT INTO v2(a,d) VALUES(11,14);",
          "767:   SELECT * FROM t1;",
          "768: } {11 {} {} 14}",
          "772: integrity_check trigger2-999",
          "",
          "---------------"
        ]
      }
    }
  ]
}