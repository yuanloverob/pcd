{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "46766d003666da5f90346da7e6d09e109355f5c6",
      "candidate_info": {
        "commit_hash": "46766d003666da5f90346da7e6d09e109355f5c6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/46766d003666da5f90346da7e6d09e109355f5c6",
        "files": [
          "crypto/bio/b_addr.c"
        ],
        "message": "HP-UX doesn't have hstrerror(), so make our own for that platform\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2092)",
        "before_after_code_files": [
          "crypto/bio/b_addr.c||crypto/bio/b_addr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bio/b_addr.c||crypto/bio/b_addr.c": [
          "File: crypto/bio/b_addr.c -> crypto/bio/b_addr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <internal/thread_once.h>",
          "19: #include <ctype.h>",
          "21: CRYPTO_RWLOCK *bio_lookup_lock;",
          "22: static CRYPTO_ONCE bio_lookup_init = CRYPTO_ONCE_STATIC_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #ifdef _HPUX_SOURCE",
          "22: static const char *ossl_hstrerror(int herr)",
          "23: {",
          "24:     switch (herr) {",
          "25:     case -1:",
          "26:         return strerror(errno);",
          "27:     case 0:",
          "28:         return \"No error\";",
          "29:     case HOST_NOT_FOUND:",
          "30:         return \"Host not found\";",
          "32:         return \"No data\";",
          "33:     case NO_RECOVERY:",
          "34:         return \"Non recoverable error\";",
          "35:     case TRY_AGAIN:",
          "36:         return \"Try again\";",
          "37:     default:",
          "38:         break;",
          "39:     }",
          "40:     return \"unknown error\";",
          "41: }",
          "42: # define hstrerror(e) ossl_hstrerror(e)",
          "43: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f567076cf343cbfe084c133c5bfc59b3d55122ef",
      "candidate_info": {
        "commit_hash": "f567076cf343cbfe084c133c5bfc59b3d55122ef",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f567076cf343cbfe084c133c5bfc59b3d55122ef",
        "files": [
          "crypto/ct/ct_policy.c"
        ],
        "message": "Convert C++ comments to C-style comments\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit 08e588b7d5cefbfd107c88416900165a28a5b59e)",
        "before_after_code_files": [
          "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c": [
          "File: crypto/ct/ct_policy.c -> crypto/ct/ct_policy.c"
        ]
      }
    },
    {
      "candidate_hash": "550e1d07a69db5af9129533ba7983594b3ed3fec",
      "candidate_info": {
        "commit_hash": "550e1d07a69db5af9129533ba7983594b3ed3fec",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/550e1d07a69db5af9129533ba7983594b3ed3fec",
        "files": [
          "ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_buffer.c",
          "test/sslapitest.c"
        ],
        "message": "Fix a leak in SSL_clear()\n\nSSL_clear() was resetting numwpipes to 0, but not freeing any allocated\nmemory for existing write buffers.\n\nFixes #2026\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 4bf086005fe5ebcda5dc4d48ff701b41ab9b07f0)",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "test/sslapitest.c||test/sslapitest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: void RECORD_LAYER_clear(RECORD_LAYER *rl)",
          "41: {",
          "44:     rl->rstate = SSL_ST_READ_HEADER;",
          "",
          "[Removed Lines]",
          "42:     unsigned int pipes;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     rl->wpend_buf = NULL;",
          "64:     SSL3_BUFFER_clear(&rl->rbuf);",
          "68:     rl->numrpipes = 0;",
          "69:     SSL3_RECORD_clear(rl->rrec, SSL_MAX_PIPELINES);",
          "",
          "[Removed Lines]",
          "65:     for (pipes = 0; pipes < rl->numwpipes; pipes++)",
          "66:         SSL3_BUFFER_clear(&rl->wbuf[pipes]);",
          "67:     rl->numwpipes = 0;",
          "",
          "[Added Lines]",
          "63:     ssl3_release_write_buffer(rl->s);",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     wb = RECORD_LAYER_get_wbuf(&s->rlayer);",
          "107:     for (currpipe = 0; currpipe < numwpipes; currpipe++) {",
          "110:                 s->rlayer.numwpipes = currpipe;",
          "111:                 goto err;",
          "112:             }",
          "115:         }",
          "116:     }",
          "",
          "[Removed Lines]",
          "108:         if (wb[currpipe].buf == NULL) {",
          "109:             if ((p = OPENSSL_malloc(len)) == NULL) {",
          "113:             wb[currpipe].buf = p;",
          "114:             wb[currpipe].len = len;",
          "",
          "[Added Lines]",
          "108:         SSL3_BUFFER *thiswb = &wb[currpipe];",
          "110:         if (thiswb->buf == NULL) {",
          "111:             p = OPENSSL_malloc(len);",
          "112:             if (p == NULL) {",
          "116:             memset(thiswb, 0, sizeof(SSL3_BUFFER));",
          "117:             thiswb->buf = p;",
          "118:             thiswb->len = len;",
          "",
          "---------------"
        ],
        "test/sslapitest.c||test/sslapitest.c": [
          "File: test/sslapitest.c -> test/sslapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:         goto end;",
          "102:     }",
          "106:  end:",
          "107:     X509_free(chaincert);",
          "108:     SSL_free(serverssl);",
          "",
          "[Removed Lines]",
          "104:     testresult = 1;",
          "",
          "[Added Lines]",
          "108:     if (!SSL_clear(serverssl)) {",
          "109:         printf(\"Unexpected failure from SSL_clear()\\n\");",
          "110:         goto end;",
          "111:     }",
          "113:     testresult = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "992b3740a1f7b24771ccf29a52b0141c51b95933",
      "candidate_info": {
        "commit_hash": "992b3740a1f7b24771ccf29a52b0141c51b95933",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/992b3740a1f7b24771ccf29a52b0141c51b95933",
        "files": [
          "ssl/statem/statem_lib.c"
        ],
        "message": "Always ensure that init_msg is initialised for a CCS\n\nWe read it later in grow_init_buf(). If CCS is the first thing received in\na flight, then it will use the init_msg from the last flight we received. If\nthe init_buf has been grown in the meantime then it will point to some\narbitrary other memory location. This is likely to result in grow_init_buf()\nattempting to grow to some excessively large amount which is likely to\nfail. In practice this should never happen because the only time we receive\na CCS as the first thing in a flight is in an abbreviated handshake. None\nof the preceding messages from the server flight would be large enough to\ntrigger this.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit c437757466e7bef632b26eaaf429a9e693330999)",
        "before_after_code_files": [
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:                 }",
          "371:                 s->s3->tmp.message_type = *mt = SSL3_MT_CHANGE_CIPHER_SPEC;",
          "372:                 s->init_num = i - 1;",
          "373:                 s->s3->tmp.message_size = i;",
          "374:                 return 1;",
          "375:             } else if (recvd_type != SSL3_RT_HANDSHAKE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:                 s->init_msg = s->init_buf->data;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e6b83f608b7a4b315146895ac911e8c06d40db1",
      "candidate_info": {
        "commit_hash": "2e6b83f608b7a4b315146895ac911e8c06d40db1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2e6b83f608b7a4b315146895ac911e8c06d40db1",
        "files": [
          "crypto/init.c"
        ],
        "message": "Implement GET_MODULE_HANDLE_EX_FLAG_PIN for windows\n\nRather than leaking a reference, just call GetModuleHandleEx and pin the\nmodule on Windows.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit 2b59d1beaad43d9cf8eb916a437db63bc8ce1d3a)",
        "before_after_code_files": [
          "crypto/init.c||crypto/init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     base_inited = 1;",
          "84: #ifndef OPENSSL_USE_NODELETE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: # ifdef DSO_WIN32",
          "86:     {",
          "87:         HMODULE handle = NULL;",
          "88:         BOOL ret;",
          "91:         ret = GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS",
          "92:                                 | GET_MODULE_HANDLE_EX_FLAG_PIN,",
          "93:                                 (void *)&base_inited, &handle);",
          "95:         return (ret == TRUE) ? 1 : 0;",
          "96:     }",
          "97: # else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:         dso = DSO_dsobyaddr(&base_inited, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "93:         DSO_free(dso);",
          "94:     }",
          "95: #endif",
          "97:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "591:     OPENSSL_INIT_STOP *newhand;",
          "593: #ifndef OPENSSL_USE_NODELETE",
          "599:     {",
          "601:         union {",
          "602:             void *sym;",
          "603:             void (*func)(void);",
          "604:         } handlersym;",
          "606:         handlersym.func = handler;",
          "610:     }",
          "611: #endif",
          "",
          "[Removed Lines]",
          "600:         DSO *dso = NULL;",
          "608:         dso = DSO_dsobyaddr(handlersym.sym, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "609:         DSO_free(dso);",
          "",
          "[Added Lines]",
          "615: # ifdef DSO_WIN32",
          "616:         {",
          "617:             HMODULE handle = NULL;",
          "618:             BOOL ret;",
          "624:             ret = GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS",
          "625:                                     | GET_MODULE_HANDLE_EX_FLAG_PIN,",
          "626:                                     handlersym.sym, &handle);",
          "628:             if (!ret)",
          "629:                 return 0;",
          "630:         }",
          "631: # else",
          "638:         {",
          "639:             DSO *dso = NULL;",
          "641:             dso = DSO_dsobyaddr(handlersym.sym, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "642:             DSO_free(dso);",
          "643:         }",
          "644: # endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}