{
  "cve_id": "CVE-2021-37637",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. We have patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "5dc7f6981fdaf74c8c5be41f393df705841fb7c5",
  "patch_info": {
    "commit_hash": "5dc7f6981fdaf74c8c5be41f393df705841fb7c5",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/5dc7f6981fdaf74c8c5be41f393df705841fb7c5",
    "files": [
      "tensorflow/core/data/compression_utils.cc"
    ],
    "message": "Fix accessing possible nullptr in tensorflow::data::CompressElement and UncompressElement which are used in tf.data.service.\n\nPiperOrigin-RevId: 373920841\nChange-Id: Ia88d78aee09fa19bb53a0f163fd19620d0c68743",
    "before_after_code_files": [
      "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc": [
      "File: tensorflow/core/data/compression_utils.cc -> tensorflow/core/data/compression_utils.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:   int64 total_size = 0;",
      "30:   for (auto& component : element) {",
      "31:     if (DataTypeCanUseMemcpy(component.dtype())) {",
      "35:     } else {",
      "36:       non_memcpy_components.emplace_back();",
      "37:       component.AsProtoTensorContent(&non_memcpy_components.back());",
      "",
      "[Removed Lines]",
      "34:       total_size += DMAHelper::buffer(&component)->size();",
      "",
      "[Added Lines]",
      "32:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
      "33:       if (buffer) {",
      "34:         total_size += buffer->size();",
      "35:       }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53:     component.shape().AsProto(metadata->mutable_tensor_shape());",
      "54:     if (DataTypeCanUseMemcpy(component.dtype())) {",
      "55:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
      "58:     } else {",
      "59:       TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];",
      "60:       proto.SerializeToArray(position, proto.ByteSizeLong());",
      "",
      "[Removed Lines]",
      "56:       memcpy(position, buffer->data(), buffer->size());",
      "57:       metadata->set_tensor_size_bytes(buffer->size());",
      "",
      "[Added Lines]",
      "57:       if (buffer) {",
      "58:         memcpy(position, buffer->data(), buffer->size());",
      "59:         metadata->set_tensor_size_bytes(buffer->size());",
      "60:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:     if (DataTypeCanUseMemcpy(metadata.dtype())) {",
      "95:       out->emplace_back(metadata.dtype(), metadata.tensor_shape());",
      "96:       TensorBuffer* buffer = DMAHelper::buffer(&out->back());",
      "99:     } else {",
      "",
      "[Removed Lines]",
      "97:       iov[i].iov_base = buffer->data();",
      "98:       iov[i].iov_len = buffer->size();",
      "",
      "[Added Lines]",
      "100:       if (buffer) {",
      "101:         iov[i].iov_base = buffer->data();",
      "102:         iov[i].iov_len = buffer->size();",
      "103:       } else {",
      "104:         iov[i].iov_base = nullptr;",
      "105:         iov[i].iov_len = 0;",
      "106:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b34966976aee96bb1721692d05fb4f6b7dc5b590",
      "candidate_info": {
        "commit_hash": "b34966976aee96bb1721692d05fb4f6b7dc5b590",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b34966976aee96bb1721692d05fb4f6b7dc5b590",
        "files": [
          "tensorflow/core/data/compression_utils.cc"
        ],
        "message": "Fix accessing possible nullptr in tensorflow::data::CompressElement and UncompressElement which are used in tf.data.service.\n\nPiperOrigin-RevId: 373920841\nChange-Id: Ia88d78aee09fa19bb53a0f163fd19620d0c68743",
        "before_after_code_files": [
          "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
          ],
          "candidate": [
            "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc": [
          "File: tensorflow/core/data/compression_utils.cc -> tensorflow/core/data/compression_utils.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   int64 total_size = 0;",
          "30:   for (auto& component : element) {",
          "31:     if (DataTypeCanUseMemcpy(component.dtype())) {",
          "35:     } else {",
          "36:       non_memcpy_components.emplace_back();",
          "37:       component.AsProtoTensorContent(&non_memcpy_components.back());",
          "",
          "[Removed Lines]",
          "34:       total_size += DMAHelper::buffer(&component)->size();",
          "",
          "[Added Lines]",
          "32:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
          "33:       if (buffer) {",
          "34:         total_size += buffer->size();",
          "35:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     component.shape().AsProto(metadata->mutable_tensor_shape());",
          "54:     if (DataTypeCanUseMemcpy(component.dtype())) {",
          "55:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
          "58:     } else {",
          "59:       TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];",
          "60:       proto.SerializeToArray(position, proto.ByteSizeLong());",
          "",
          "[Removed Lines]",
          "56:       memcpy(position, buffer->data(), buffer->size());",
          "57:       metadata->set_tensor_size_bytes(buffer->size());",
          "",
          "[Added Lines]",
          "57:       if (buffer) {",
          "58:         memcpy(position, buffer->data(), buffer->size());",
          "59:         metadata->set_tensor_size_bytes(buffer->size());",
          "60:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     if (DataTypeCanUseMemcpy(metadata.dtype())) {",
          "95:       out->emplace_back(metadata.dtype(), metadata.tensor_shape());",
          "96:       TensorBuffer* buffer = DMAHelper::buffer(&out->back());",
          "99:     } else {",
          "",
          "[Removed Lines]",
          "97:       iov[i].iov_base = buffer->data();",
          "98:       iov[i].iov_len = buffer->size();",
          "",
          "[Added Lines]",
          "100:       if (buffer) {",
          "101:         iov[i].iov_base = buffer->data();",
          "102:         iov[i].iov_len = buffer->size();",
          "103:       } else {",
          "104:         iov[i].iov_base = nullptr;",
          "105:         iov[i].iov_len = 0;",
          "106:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36a38aa458b26bfe490dd02dae9c2f017c09eb41",
      "candidate_info": {
        "commit_hash": "36a38aa458b26bfe490dd02dae9c2f017c09eb41",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/36a38aa458b26bfe490dd02dae9c2f017c09eb41",
        "files": [
          "tensorflow/core/data/compression_utils.cc"
        ],
        "message": "Fix accessing possible nullptr in tensorflow::data::CompressElement and UncompressElement which are used in tf.data.service.\n\nPiperOrigin-RevId: 373920841\nChange-Id: Ia88d78aee09fa19bb53a0f163fd19620d0c68743",
        "before_after_code_files": [
          "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
          ],
          "candidate": [
            "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc": [
          "File: tensorflow/core/data/compression_utils.cc -> tensorflow/core/data/compression_utils.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   int64 total_size = 0;",
          "30:   for (auto& component : element) {",
          "31:     if (DataTypeCanUseMemcpy(component.dtype())) {",
          "35:     } else {",
          "36:       non_memcpy_components.emplace_back();",
          "37:       component.AsProtoTensorContent(&non_memcpy_components.back());",
          "",
          "[Removed Lines]",
          "34:       total_size += DMAHelper::buffer(&component)->size();",
          "",
          "[Added Lines]",
          "32:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
          "33:       if (buffer) {",
          "34:         total_size += buffer->size();",
          "35:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     component.shape().AsProto(metadata->mutable_tensor_shape());",
          "54:     if (DataTypeCanUseMemcpy(component.dtype())) {",
          "55:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
          "58:     } else {",
          "59:       TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];",
          "60:       proto.SerializeToArray(position, proto.ByteSizeLong());",
          "",
          "[Removed Lines]",
          "56:       memcpy(position, buffer->data(), buffer->size());",
          "57:       metadata->set_tensor_size_bytes(buffer->size());",
          "",
          "[Added Lines]",
          "57:       if (buffer) {",
          "58:         memcpy(position, buffer->data(), buffer->size());",
          "59:         metadata->set_tensor_size_bytes(buffer->size());",
          "60:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     if (DataTypeCanUseMemcpy(metadata.dtype())) {",
          "95:       out->emplace_back(metadata.dtype(), metadata.tensor_shape());",
          "96:       TensorBuffer* buffer = DMAHelper::buffer(&out->back());",
          "99:     } else {",
          "",
          "[Removed Lines]",
          "97:       iov[i].iov_base = buffer->data();",
          "98:       iov[i].iov_len = buffer->size();",
          "",
          "[Added Lines]",
          "100:       if (buffer) {",
          "101:         iov[i].iov_base = buffer->data();",
          "102:         iov[i].iov_len = buffer->size();",
          "103:       } else {",
          "104:         iov[i].iov_base = nullptr;",
          "105:         iov[i].iov_len = 0;",
          "106:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "796bb3dc8910a3c51848037a9ad0071bc4d80a56",
      "candidate_info": {
        "commit_hash": "796bb3dc8910a3c51848037a9ad0071bc4d80a56",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/796bb3dc8910a3c51848037a9ad0071bc4d80a56",
        "files": [
          "tensorflow/core/data/compression_utils.cc"
        ],
        "message": "Fix accessing possible nullptr in tensorflow::data::CompressElement and UncompressElement which are used in tf.data.service.\n\nPiperOrigin-RevId: 373920841\nChange-Id: Ia88d78aee09fa19bb53a0f163fd19620d0c68743",
        "before_after_code_files": [
          "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
          ],
          "candidate": [
            "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/data/compression_utils.cc||tensorflow/core/data/compression_utils.cc": [
          "File: tensorflow/core/data/compression_utils.cc -> tensorflow/core/data/compression_utils.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   int64 total_size = 0;",
          "30:   for (auto& component : element) {",
          "31:     if (DataTypeCanUseMemcpy(component.dtype())) {",
          "35:     } else {",
          "36:       non_memcpy_components.emplace_back();",
          "37:       component.AsProtoTensorContent(&non_memcpy_components.back());",
          "",
          "[Removed Lines]",
          "34:       total_size += DMAHelper::buffer(&component)->size();",
          "",
          "[Added Lines]",
          "32:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
          "33:       if (buffer) {",
          "34:         total_size += buffer->size();",
          "35:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     component.shape().AsProto(metadata->mutable_tensor_shape());",
          "54:     if (DataTypeCanUseMemcpy(component.dtype())) {",
          "55:       const TensorBuffer* buffer = DMAHelper::buffer(&component);",
          "58:     } else {",
          "59:       TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];",
          "60:       proto.SerializeToArray(position, proto.ByteSizeLong());",
          "",
          "[Removed Lines]",
          "56:       memcpy(position, buffer->data(), buffer->size());",
          "57:       metadata->set_tensor_size_bytes(buffer->size());",
          "",
          "[Added Lines]",
          "57:       if (buffer) {",
          "58:         memcpy(position, buffer->data(), buffer->size());",
          "59:         metadata->set_tensor_size_bytes(buffer->size());",
          "60:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     if (DataTypeCanUseMemcpy(metadata.dtype())) {",
          "95:       out->emplace_back(metadata.dtype(), metadata.tensor_shape());",
          "96:       TensorBuffer* buffer = DMAHelper::buffer(&out->back());",
          "99:     } else {",
          "",
          "[Removed Lines]",
          "97:       iov[i].iov_base = buffer->data();",
          "98:       iov[i].iov_len = buffer->size();",
          "",
          "[Added Lines]",
          "100:       if (buffer) {",
          "101:         iov[i].iov_base = buffer->data();",
          "102:         iov[i].iov_len = buffer->size();",
          "103:       } else {",
          "104:         iov[i].iov_base = nullptr;",
          "105:         iov[i].iov_len = 0;",
          "106:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}