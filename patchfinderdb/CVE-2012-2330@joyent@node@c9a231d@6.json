{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2648934f013ccdf1a15bb74a5480d5a42a97943",
      "candidate_info": {
        "commit_hash": "b2648934f013ccdf1a15bb74a5480d5a42a97943",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b2648934f013ccdf1a15bb74a5480d5a42a97943",
        "files": [
          "common.gypi"
        ],
        "message": "build: unbreak ustack on smartos\n\nI disabled the -ffunction-sections and -fdata-sections switches in 202df30\nbecause they're horribly buggy with some gcc/binutils combos.\n\nHowever, it turns out that the dtrace/ustack post-processing tool requires\nthat V8 is compiled with said switches and was broken because of it.\n\nThis commit turns them on again on SunOS systems. Let's hope for the best.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:       },",
          "47:       'Release': {",
          "48:         'conditions': [",
          "49:           ['node_unsafe_optimizations==1', {",
          "50:             'cflags': [ '-O3', '-ffunction-sections', '-fdata-sections' ],",
          "51:             'ldflags': [ '-Wl,--gc-sections' ],",
          "52:           }, {",
          "53:             'cflags': [ '-O2', '-fno-strict-aliasing', '-fno-tree-vrp' ],",
          "61:           }],",
          "62:           ['OS==\"solaris\"', {",
          "63:             'cflags': [ '-fno-omit-frame-pointer' ],",
          "",
          "[Removed Lines]",
          "54:             'cflags!': [ '-O3',",
          "55:                          '-fstrict-aliasing',",
          "56:                          '-ffunction-sections',",
          "57:                          '-fdata-sections' ],",
          "58:           }],",
          "59:           ['target_arch==\"x64\"', {",
          "60:             'msvs_configuration_platform': 'x64',",
          "",
          "[Added Lines]",
          "49:           ['target_arch==\"x64\"', {",
          "50:             'msvs_configuration_platform': 'x64',",
          "51:           }],",
          "57:             'cflags!': [ '-O3', '-fstrict-aliasing' ],",
          "58:             'conditions': [",
          "59:               # Required by the dtrace post-processor. Unfortunately,",
          "60:               # some gcc/binutils combos generate bad code when",
          "61:               # -ffunction-sections is enabled. Let's hope for the best.",
          "62:               ['OS==\"solaris\"', {",
          "63:                 'cflags': [ '-ffunction-sections', '-fdata-sections' ],",
          "64:               }, {",
          "65:                 'cflags!': [ '-ffunction-sections', '-fdata-sections' ],",
          "66:               }],",
          "67:             ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48a2d34cfe6b7e1c9d15202a4ef5e3c82d1fba35",
      "candidate_info": {
        "commit_hash": "48a2d34cfe6b7e1c9d15202a4ef5e3c82d1fba35",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/48a2d34cfe6b7e1c9d15202a4ef5e3c82d1fba35",
        "files": [
          "ChangeLog",
          "doc/about/index.html",
          "doc/community/index.html",
          "doc/index.html",
          "doc/logos/index.html",
          "src/node_version.h"
        ],
        "message": "2012.03.02 Version 0.6.12 (stable)\n\n* Upgrade V8 to 3.6.6.24\n\n* dtrace ustack helper improvements (Dave Pacheco)\n\n* API Documentation refactor (isaacs)\n\n* #2827 net: fix race write() before and after connect() (koichik)\n\n* #2554 #2567 throw if fs args for 'start' or 'end' are strings (AJ ONeal)\n\n* punycode: Update to v1.0.0 (Mathias Bynens)\n\n* Make a fat binary for the OS X pkg (isaacs)\n\n* Fix hang on accessing process.stdin (isaacs)\n\n* repl: make tab completion work on non-objects (Nathan Rajlich)\n\n* Fix fs.watch on OS X (Ben Noordhuis)\n\n* Fix #2515 nested setTimeouts cause premature process exit (Ben Noordhuis)\n\n* windows: fix time conversion in stat (Igor Zinkovsky)\n\n* windows: fs: handle EOF in read (Brandon Philips)\n\n* windows: avoid IOCP short-circuit on non-ifs lsps (Igor Zinkovsky)\n\n* Upgrade npm to 1.1.4 (isaacs)\n  - windows fixes\n  - Bundle nested bundleDependencies properly\n  - install: support --save with url install targets\n  - shrinkwrap: behave properly with url-installed modules\n  - support installing uncompressed tars or single file modules from urls etc.\n  - don't run make clean on rebuild\n  - support HTTPS-over-HTTP proxy tunneling",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "31: #define NODE_PATCH_VERSION 12",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f95a93a2c1928c4524521c52cc4c88d48612fe4",
      "candidate_info": {
        "commit_hash": "0f95a93a2c1928c4524521c52cc4c88d48612fe4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0f95a93a2c1928c4524521c52cc4c88d48612fe4",
        "files": [
          "lib/tls.js"
        ],
        "message": "tls: remove duplicate line",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:   if (options.secureProtocol) this.secureProtocol = options.secureProtocol;",
          "1024:   if (options.crl) this.crl = options.crl;",
          "1025:   if (options.ciphers) this.ciphers = options.ciphers;",
          "1027:   var secureOptions = options.secureOptions || 0;",
          "1028:   if (options.honorCipherOrder) {",
          "1029:     secureOptions |= constants.SSL_OP_CIPHER_SERVER_PREFERENCE;",
          "",
          "[Removed Lines]",
          "1026:   if (options.secureProtocol) this.secureProtocol = options.secureProtocol;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e9bcf26ce9e93caeda3280b8186168b49ae621d",
      "candidate_info": {
        "commit_hash": "1e9bcf26ce9e93caeda3280b8186168b49ae621d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1e9bcf26ce9e93caeda3280b8186168b49ae621d",
        "files": [
          "doc/api/http.markdown",
          "doc/api/net.markdown",
          "lib/http.js",
          "lib/https.js",
          "lib/net.js",
          "lib/tls.js",
          "test/simple/test-http-localaddress.js",
          "test/simple/test-https-localaddress.js"
        ],
        "message": "net, http, https: add localAddress option\n\nBinds to a local address before making the outgoing connection.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "lib/https.js||lihttps.js",
          "lib/net.js||linet.js",
          "lib/tls.js||litls.js",
          "test/simple/test-http-localaddress.js||test/simple/test-http-localaddress.js",
          "test/simple/test-https-localaddress.js||test/simple/test-https-localaddress.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "981:   self.requests = {};",
          "982:   self.sockets = {};",
          "983:   self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;",
          "985:     var name = host + ':' + port;",
          "986:     if (self.requests[name] && self.requests[name].length) {",
          "987:       self.requests[name].shift().onSocket(socket);",
          "988:       if (self.requests[name].length === 0) {",
          "",
          "[Removed Lines]",
          "984:   self.on('free', function(socket, host, port) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005: Agent.defaultMaxSockets = 5;",
          "1007: Agent.prototype.defaultPort = 80;",
          "1009:   var name = host + ':' + port;",
          "1010:   if (!this.sockets[name]) {",
          "1011:     this.sockets[name] = [];",
          "1012:   }",
          "1013:   if (this.sockets[name].length < this.maxSockets) {",
          "1016:   } else {",
          "1018:     if (!this.requests[name]) {",
          "",
          "[Removed Lines]",
          "1008: Agent.prototype.addRequest = function(req, host, port) {",
          "1015:     req.onSocket(this.createSocket(name, host, port));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1021:     this.requests[name].push(req);",
          "1022:   }",
          "1023: };",
          "1025:   var self = this;",
          "1027:   if (!self.sockets[name]) {",
          "1028:     self.sockets[name] = [];",
          "1029:   }",
          "1030:   this.sockets[name].push(s);",
          "1031:   var onFree = function() {",
          "1033:   }",
          "1034:   s.on('free', onFree);",
          "1035:   var onClose = function(err) {",
          "1040:   }",
          "1041:   s.on('close', onClose);",
          "1042:   var onRemove = function() {",
          "1047:     s.removeListener('close', onClose);",
          "1048:     s.removeListener('free', onFree);",
          "1049:     s.removeListener('agentRemove', onRemove);",
          "",
          "[Removed Lines]",
          "1024: Agent.prototype.createSocket = function(name, host, port) {",
          "1026:   var s = self.createConnection(port, host, self.options);",
          "1032:     self.emit('free', s, host, port);",
          "1039:     self.removeSocket(s, name, host, port);",
          "1046:     self.removeSocket(s, name, host, port);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1051:   s.on('agentRemove', onRemove);",
          "1052:   return s;",
          "1053: };",
          "1055:   if (this.sockets[name]) {",
          "1056:     var index = this.sockets[name].indexOf(s);",
          "1057:     if (index !== -1) {",
          "",
          "[Removed Lines]",
          "1054: Agent.prototype.removeSocket = function(s, name, host, port) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1064:   }",
          "1065:   if (this.requests[name] && this.requests[name].length) {",
          "1069:   }",
          "1070: };",
          "",
          "[Removed Lines]",
          "1068:     this.createSocket(name, host, port).emit('free');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1145:     self._last = false;",
          "1146:     self.shouldKeepAlive = true;",
          "1148:   } else {",
          "1150:     self._last = true;",
          "1151:     self.shouldKeepAlive = false;",
          "1152:     if (options.createConnection) {",
          "1154:     } else {",
          "1156:     }",
          "1157:     self.onSocket(conn);",
          "1158:   }",
          "",
          "[Removed Lines]",
          "1147:     self.agent.addRequest(self, host, port);",
          "1153:       var conn = options.createConnection(port, host, options);",
          "1155:       var conn = net.createConnection(port, host);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/https.js||lihttps.js": [
          "File: lib/https.js -> lihttps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return tls.connect(options);",
          "58: }",
          "60: function Agent(options) {",
          "61:   http.Agent.call(this, options);",
          "62:   this.createConnection = createConnection;",
          "",
          "[Removed Lines]",
          "54: function createConnection(port, host, options) {",
          "55:   options.port = port;",
          "56:   options.host = host;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: }",
          "531:   if (port) {",
          "532:     self.remotePort = port;",
          "533:   }",
          "",
          "[Removed Lines]",
          "530: function connect(self, address, port, addressType) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:   var connectReq;",
          "542:   if (addressType == 6) {",
          "543:     connectReq = self._handle.connect6(address, port);",
          "544:   } else if (addressType == 4) {",
          "545:     connectReq = self._handle.connect(address, port);",
          "546:   } else {",
          "547:     connectReq = self._handle.connect(address, afterConnect);",
          "548:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:         ip = ip || (addressType === 4 ? '127.0.0.1' : '0:0:0:0:0:0:0:1');",
          "619:       }",
          "620:     });",
          "621:   }",
          "",
          "[Removed Lines]",
          "618:         connect(self, ip, options.port, addressType);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1121:   }",
          "1123:   if (!options.socket) {",
          "1125:   }",
          "1127:   pair.on('secure', function() {",
          "",
          "[Removed Lines]",
          "1124:     socket.connect(options.port, options.host);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-localaddress.js||test/simple/test-http-localaddress.js": [
          "File: test/simple/test-http-localaddress.js -> test/simple/test-http-localaddress.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var http = require('http'),",
          "24:     assert = require('assert');",
          "26: if (['linux', 'win32'].indexOf(process.platform) == -1) {",
          "27:   console.log('Skipping platform-specific test.');",
          "28:   process.exit();",
          "29: }",
          "31: var server = http.createServer(function (req, res) {",
          "32:   console.log(\"Connect from: \" + req.connection.remoteAddress);",
          "33:   assert.equal('127.0.0.2', req.connection.remoteAddress);",
          "35:   req.on('end', function() {",
          "36:     res.writeHead(200, { 'Content-Type': 'text/plain' });",
          "37:     res.end('You are from: ' + req.connection.remoteAddress);",
          "38:   });",
          "39: });",
          "41: server.listen(common.PORT, \"127.0.0.1\", function() {",
          "42:   var options = { host: 'localhost',",
          "43:     port: common.PORT,",
          "44:     path: '/',",
          "45:     method: 'GET',",
          "46:     localAddress: '127.0.0.2' };",
          "48:   var req = http.request(options, function(res) {",
          "49:     res.on('end', function() {",
          "50:       server.close();",
          "51:       process.exit();",
          "52:     });",
          "53:   });",
          "54:   req.end();",
          "55: });",
          "",
          "---------------"
        ],
        "test/simple/test-https-localaddress.js||test/simple/test-https-localaddress.js": [
          "File: test/simple/test-https-localaddress.js -> test/simple/test-https-localaddress.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var https = require('https'),",
          "24:     fs = require('fs'),",
          "25:     assert = require('assert');",
          "27: if (['linux', 'win32'].indexOf(process.platform) == -1) {",
          "28:   console.log('Skipping platform-specific test.');",
          "29:   process.exit();",
          "30: }",
          "32: var options = {",
          "33:   key: fs.readFileSync(common.fixturesDir + '/keys/agent1-key.pem'),",
          "34:   cert: fs.readFileSync(common.fixturesDir + '/keys/agent1-cert.pem')",
          "35: };",
          "37: var server = https.createServer(options, function (req, res) {",
          "38:   console.log(\"Connect from: \" + req.connection.socket.remoteAddress);",
          "39:   assert.equal('127.0.0.2', req.connection.socket.remoteAddress);",
          "41:   req.on('end', function() {",
          "42:     res.writeHead(200, { 'Content-Type': 'text/plain' });",
          "43:     res.end('You are from: ' + req.connection.remoteAddress);",
          "44:   });",
          "45: });",
          "47: server.listen(common.PORT, \"127.0.0.1\", function() {",
          "48:   var options = { host: 'localhost',",
          "49:     port: common.PORT,",
          "50:     path: '/',",
          "51:     method: 'GET',",
          "52:     localAddress: '127.0.0.2' };",
          "54:   var req = https.request(options, function(res) {",
          "55:     res.on('end', function() {",
          "56:       server.close();",
          "57:       process.exit();",
          "58:     });",
          "59:   });",
          "60:   req.end();",
          "61: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "415bff26fe5744001f185001fc49f9369ab76227",
      "candidate_info": {
        "commit_hash": "415bff26fe5744001f185001fc49f9369ab76227",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/415bff26fe5744001f185001fc49f9369ab76227",
        "files": [
          "lib/repl.js",
          "test/simple/test-repl-tab-complete.js"
        ],
        "message": "repl: fix space autocompletion bug\n\nTapping <SP> + <TAB> would exit the REPL.",
        "before_after_code_files": [
          "lib/repl.js||lirepl.js",
          "test/simple/test-repl-tab-complete.js||test/simple/test-repl-tab-complete.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/repl.js||lirepl.js": [
          "File: lib/repl.js -> lirepl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:     } else {",
          "590:       completionGroupsLoaded();",
          "591:     }",
          "592:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-repl-tab-complete.js||test/simple/test-repl-tab-complete.js": [
          "File: test/simple/test-repl-tab-complete.js -> test/simple/test-repl-tab-complete.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: testMe.complete('str.len', function(error, data) {",
          "191:   assert.deepEqual(data, [['str.length'], 'str.len']);",
          "192: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: putIn.run(['.clear']);",
          "197: var spaceTimeout = setTimeout(function() {",
          "198:   throw new Error('timeout');",
          "199: }, 1000);",
          "201: testMe.complete(' ', function(error, data) {",
          "202:   assert.deepEqual(data, [[],undefined]);",
          "203:   clearTimeout(spaceTimeout);",
          "204: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}