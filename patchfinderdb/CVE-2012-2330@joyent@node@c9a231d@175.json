{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "40c98a977b2d4912e9f167257553063d6dd21272",
      "candidate_info": {
        "commit_hash": "40c98a977b2d4912e9f167257553063d6dd21272",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/40c98a977b2d4912e9f167257553063d6dd21272",
        "files": [
          "test/addons/shared-buffer/binding.cc",
          "test/addons/shared-buffer/binding.gyp",
          "test/addons/shared-buffer/test.js"
        ],
        "message": "Add shared-buffer isolate addon test",
        "before_after_code_files": [
          "test/addons/shared-buffer/binding.cc||test/addons/shared-buffer/binding.cc",
          "test/addons/shared-buffer/binding.gyp||test/addons/shared-buffer/binding.gyp",
          "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/addons/shared-buffer/binding.cc||test/addons/shared-buffer/binding.cc": [
          "File: test/addons/shared-buffer/binding.cc -> test/addons/shared-buffer/binding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <node.h>",
          "2: #include <v8.h>",
          "3: #include <uv.h>",
          "5: using namespace v8;",
          "7: extern \"C\" {",
          "8:   void init(Handle<Object> target);",
          "9: }",
          "12: #define BUFSIZE 1024",
          "13: static uint8_t buf[BUFSIZE];",
          "14: static uv_mutex_t lock;",
          "17: Handle<Value> Get(const Arguments& args) {",
          "18:   HandleScope scope;",
          "20:   int index = args[0]->Uint32Value();",
          "22:   if (index < 0 || BUFSIZE <= index) {",
          "23:     return ThrowException(Exception::Error(String::New(\"out of bounds\")));",
          "24:   }",
          "26:   return scope.Close(Integer::New(buf[index]));",
          "27: }",
          "30: Handle<Value> Set(const Arguments& args) {",
          "31:   uv_mutex_lock(&lock);",
          "32:   HandleScope scope;",
          "34:   int index = args[0]->Uint32Value();",
          "36:   if (index < 0 || BUFSIZE <= index) {",
          "37:     return ThrowException(Exception::Error(String::New(\"out of bounds\")));",
          "38:   }",
          "40:   buf[index] = args[1]->Uint32Value();",
          "42:   Local<Integer> val = Integer::New(buf[index]);",
          "44:   uv_mutex_unlock(&lock);",
          "46:   return scope.Close(val);",
          "47: }",
          "50: void init(Handle<Object> target) {",
          "51:   NODE_SET_METHOD(target, \"get\", Get);",
          "52:   NODE_SET_METHOD(target, \"set\", Set);",
          "53:   target->Set(String::New(\"length\"), Integer::New(BUFSIZE));",
          "54:   uv_mutex_init(&lock);",
          "55: }",
          "",
          "---------------"
        ],
        "test/addons/shared-buffer/binding.gyp||test/addons/shared-buffer/binding.gyp": [
          "File: test/addons/shared-buffer/binding.gyp -> test/addons/shared-buffer/binding.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {",
          "2:   'targets': [",
          "3:     {",
          "4:       'target_name': 'binding',",
          "5:       'sources': [ 'binding.cc' ]",
          "6:     }",
          "7:   ]",
          "8: }",
          "",
          "---------------"
        ],
        "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js": [
          "File: test/addons/shared-buffer/test.js -> test/addons/shared-buffer/test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var assert = require('assert');",
          "2: var binding = require('./out/Release/binding');",
          "4: console.log(\"binding.length =\", binding.length);",
          "6: if (process.tid === 1) {",
          "7:   var isolate = process._newIsolate(process.argv);",
          "8:   for (var i = 0; i < binding.length; i++) {",
          "9:     console.log('parent',",
          "10:                 'binding.set(' + i + ', ' + i + ')',",
          "11:                 binding.set(i, i));",
          "12:   }",
          "13: } else {",
          "14:   for (var i = 0; i < binding.length; i++) {",
          "15:     console.log('child', 'binding.get(' + i + ')', binding.get(i));",
          "16:   }",
          "17: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "249c3c165ab3b93e1bd0a05668d81b289b8d4ccf",
      "candidate_info": {
        "commit_hash": "249c3c165ab3b93e1bd0a05668d81b289b8d4ccf",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/249c3c165ab3b93e1bd0a05668d81b289b8d4ccf",
        "files": [
          "src/cares_wrap.cc",
          "src/fs_event_wrap.cc",
          "src/node.cc",
          "src/node_buffer.cc",
          "src/node_crypto.cc",
          "src/node_dtrace.cc",
          "src/node_file.cc",
          "src/node_stat_watcher.cc",
          "src/pipe_wrap.cc",
          "src/process_wrap.cc",
          "src/tcp_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "Avoiding unnecessary ToString() calls\n\nString::Utf8Value and String::AsciiValue constructors take Handle<Value>\nSo no need to convert to Handle<String>",
        "before_after_code_files": [
          "src/cares_wrap.cc||src/cares_wrap.cc",
          "src/fs_event_wrap.cc||src/fs_event_wrap.cc",
          "src/node.cc||src/node.cc",
          "src/node_buffer.cc||src/node_buffer.cc",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_dtrace.cc||src/node_dtrace.cc",
          "src/node_file.cc||src/node_file.cc",
          "src/node_stat_watcher.cc||src/node_stat_watcher.cc",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/process_wrap.cc||src/process_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/cares_wrap.cc||src/cares_wrap.cc": [
          "File: src/cares_wrap.cc -> src/cares_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:   Local<Object> object = Local<Object>::New(wrap->GetObject());",
          "560:   int r = wrap->Send(*name);",
          "561:   if (r) {",
          "",
          "[Removed Lines]",
          "558:   String::Utf8Value name(args[0]->ToString());",
          "",
          "[Added Lines]",
          "558:   String::Utf8Value name(args[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585:   Local<Object> object = Local<Object>::New(wrap->GetObject());",
          "588:   int family = args[1]->Int32Value();",
          "590:   int r = wrap->Send(*name, family);",
          "",
          "[Removed Lines]",
          "587:   String::Utf8Value name(args[0]->ToString());",
          "",
          "[Added Lines]",
          "587:   String::Utf8Value name(args[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "688: static Handle<Value> GetAddrInfo(const Arguments& args) {",
          "689:   HandleScope scope;",
          "693:   int fam = AF_UNSPEC;",
          "694:   if (args[1]->IsInt32()) {",
          "",
          "[Removed Lines]",
          "691:   String::Utf8Value hostname(args[0]->ToString());",
          "",
          "[Added Lines]",
          "691:   String::Utf8Value hostname(args[0]);",
          "",
          "---------------"
        ],
        "src/fs_event_wrap.cc||src/fs_event_wrap.cc": [
          "File: src/fs_event_wrap.cc -> src/fs_event_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     return ThrowException(Exception::TypeError(String::New(\"Bad arguments\")));",
          "108:   }",
          "112:   int r = uv_fs_event_init(uv_default_loop(), &wrap->handle_, *path, OnEvent, 0);",
          "113:   if (r == 0) {",
          "",
          "[Removed Lines]",
          "110:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "110:   String::Utf8Value path(args[0]);",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:   if (!encoding_v->IsString()) return _default;",
          "1025:   if (strcasecmp(*encoding, \"utf8\") == 0) {",
          "1026:     return UTF8;",
          "",
          "[Removed Lines]",
          "1023:   String::Utf8Value encoding(encoding_v->ToString());",
          "",
          "[Added Lines]",
          "1023:   String::Utf8Value encoding(encoding_v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1231:       fprintf(stderr, \"%s: \", *name);",
          "1232:     }",
          "1236:     fprintf(stderr, \"%s\\n\", *msg);",
          "1237:   }",
          "",
          "[Removed Lines]",
          "1234:     String::Utf8Value msg(!isErrorObject ? er->ToString()",
          "1235:                          : er->ToObject()->Get(String::New(\"message\"))->ToString());",
          "",
          "[Added Lines]",
          "1234:     String::Utf8Value msg(!isErrorObject ? er",
          "1235:                          : er->ToObject()->Get(String::New(\"message\")));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:     return ThrowException(Exception::Error(String::New(\"Bad argument.\")));",
          "1274:   }",
          "1278:   uv_err_t r = uv_chdir(*path);",
          "",
          "[Removed Lines]",
          "1276:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "1276:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1373:   if (args[0]->IsNumber()) {",
          "1374:     gid = args[0]->Int32Value();",
          "1375:   } else if (args[0]->IsString()) {",
          "1377:     struct group grp, *grpp = NULL;",
          "1378:     int err;",
          "",
          "[Removed Lines]",
          "1376:     String::Utf8Value grpnam(args[0]->ToString());",
          "",
          "[Added Lines]",
          "1376:     String::Utf8Value grpnam(args[0]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1413:   if (args[0]->IsNumber()) {",
          "1414:     uid = args[0]->Int32Value();",
          "1415:   } else if (args[0]->IsString()) {",
          "1417:     struct passwd pwd, *pwdp = NULL;",
          "1418:     int err;",
          "",
          "[Removed Lines]",
          "1416:     String::Utf8Value pwnam(args[0]->ToString());",
          "",
          "[Added Lines]",
          "1416:     String::Utf8Value pwnam(args[0]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1620:     return ThrowException(exception);",
          "1621:   }",
          "1624:   Local<Object> target = args[1]->ToObject(); // Cast",
          "1626:   err = uv_dlopen(*filename, &lib);",
          "",
          "[Removed Lines]",
          "1623:   String::Utf8Value filename(args[0]->ToString()); // Cast",
          "",
          "[Added Lines]",
          "1623:   String::Utf8Value filename(args[0]); // Cast",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1641:     return ThrowException(exception);",
          "1642:   }",
          "1645:   base = *path;",
          "",
          "[Removed Lines]",
          "1644:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "1644:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1855:                                Local<Value> value,",
          "1856:                                const AccessorInfo& info) {",
          "1857:   HandleScope scope;",
          "1860:   uv_set_process_title(*title);",
          "1861: }",
          "",
          "[Removed Lines]",
          "1858:   String::Utf8Value title(value->ToString());",
          "",
          "[Added Lines]",
          "1858:   String::Utf8Value title(value);",
          "",
          "---------------"
        ],
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:             \"Argument must be a string\")));",
          "590:   }",
          "593:   size_t offset = args[1]->Int32Value();",
          "594:   size_t max_length = args[2]->IsUndefined() ? buffer->length_ - offset",
          "595:                                              : args[2]->Uint32Value();",
          "",
          "[Removed Lines]",
          "592:   String::AsciiValue s(args[0]->ToString());",
          "",
          "[Added Lines]",
          "592:   String::AsciiValue s(args[0]);",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:   OPENSSL_CONST SSL_METHOD *method = SSLv23_method();",
          "172:   if (args.Length() == 1 && args[0]->IsString()) {",
          "175:     if (strcmp(*sslmethod, \"SSLv2_method\") == 0) {",
          "176: #ifndef OPENSSL_NO_SSL2",
          "",
          "[Removed Lines]",
          "173:     String::Utf8Value sslmethod(args[0]->ToString());",
          "",
          "[Added Lines]",
          "173:     String::Utf8Value sslmethod(args[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:   int r = -1;",
          "236:   if (v->IsString()) {",
          "238:     r = BIO_write(bio, *s, s.length());",
          "239:   } else if (Buffer::HasInstance(v)) {",
          "240:     Local<Object> buffer_obj = v->ToObject();",
          "",
          "[Removed Lines]",
          "237:     String::Utf8Value s(v->ToString());",
          "",
          "[Added Lines]",
          "237:     String::Utf8Value s(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:   BIO *bio = LoadBIO(args[0]);",
          "288:   if (!bio) return False();",
          "292:   EVP_PKEY* key = PEM_read_bio_PrivateKey(bio, NULL, NULL,",
          "293:                                           len == 1 ? NULL : *passphrase);",
          "",
          "[Removed Lines]",
          "290:   String::Utf8Value passphrase(args[1]->ToString());",
          "",
          "[Added Lines]",
          "290:   String::Utf8Value passphrase(args[1]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "514:     return ThrowException(Exception::TypeError(String::New(\"Bad parameter\")));",
          "515:   }",
          "518:   SSL_CTX_set_cipher_list(sc->ctx_, *ciphers);",
          "520:   return True();",
          "",
          "[Removed Lines]",
          "517:   String::Utf8Value ciphers(args[0]->ToString());",
          "",
          "[Added Lines]",
          "517:   String::Utf8Value ciphers(args[0]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "545:     return ThrowException(Exception::TypeError(String::New(\"Bad parameter\")));",
          "546:   }",
          "549:   const unsigned char* sid_ctx = (const unsigned char*) *sessionIdContext;",
          "550:   unsigned int sid_ctx_len = sessionIdContext.length();",
          "",
          "[Removed Lines]",
          "548:   String::Utf8Value sessionIdContext(args[0]->ToString());",
          "",
          "[Added Lines]",
          "548:   String::Utf8Value sessionIdContext(args[0]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "930:   if (is_server) {",
          "931:     SSL_CTX_set_tlsext_servername_callback(sc->ctx_, SelectSNIContextCallback_);",
          "932:   } else {",
          "934:     SSL_set_tlsext_host_name(p->ssl_, *servername);",
          "935:   }",
          "936: #endif",
          "",
          "[Removed Lines]",
          "933:     String::Utf8Value servername(args[2]->ToString());",
          "",
          "[Added Lines]",
          "933:     String::Utf8Value servername(args[2]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2016:     ssize_t key_written = DecodeWrite(key_buf, key_buf_len, args[1], BINARY);",
          "2017:     assert(key_written == key_buf_len);",
          "2021:     bool r = cipher->CipherInit(*cipherType, key_buf, key_buf_len);",
          "",
          "[Removed Lines]",
          "2019:     String::Utf8Value cipherType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "2019:     String::Utf8Value cipherType(args[0]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2066:     ssize_t iv_written = DecodeWrite(iv_buf, iv_len, args[2], BINARY);",
          "2067:     assert(iv_written == iv_len);",
          "2071:     bool r = cipher->CipherInitIv(*cipherType, key_buf,key_len,iv_buf,iv_len);",
          "",
          "[Removed Lines]",
          "2069:     String::Utf8Value cipherType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "2069:     String::Utf8Value cipherType(args[0]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2429:     ssize_t key_written = DecodeWrite(key_buf, key_len, args[1], BINARY);",
          "2430:     assert(key_written == key_len);",
          "2434:     bool r = cipher->DecipherInit(*cipherType, key_buf,key_len);",
          "",
          "[Removed Lines]",
          "2432:     String::Utf8Value cipherType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "2432:     String::Utf8Value cipherType(args[0]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2479:     ssize_t iv_written = DecodeWrite(iv_buf, iv_len, args[2], BINARY);",
          "2480:     assert(iv_written == iv_len);",
          "2484:     bool r = cipher->DecipherInitIv(*cipherType, key_buf,key_len,iv_buf,iv_len);",
          "",
          "[Removed Lines]",
          "2482:     String::Utf8Value cipherType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "2482:     String::Utf8Value cipherType(args[0]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2782:       return ThrowException(exception);",
          "2783:     }",
          "2787:     bool r;",
          "",
          "[Removed Lines]",
          "2785:     String::Utf8Value hashType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "2785:     String::Utf8Value hashType(args[0]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2946:         \"Must give hashtype string as argument\")));",
          "2947:     }",
          "2951:     Hash *hash = new Hash();",
          "2952:     if (!hash->HashInit(*hashType)) {",
          "",
          "[Removed Lines]",
          "2949:     String::Utf8Value hashType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "2949:     String::Utf8Value hashType(args[0]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3139:         \"Must give signtype string as argument\")));",
          "3140:     }",
          "3144:     bool r = sign->SignInit(*signType);",
          "",
          "[Removed Lines]",
          "3142:     String::Utf8Value signType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "3142:     String::Utf8Value signType(args[0]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3390:         \"Must give verifytype string as argument\")));",
          "3391:     }",
          "3395:     bool r = verify->VerifyInit(*verifyType);",
          "",
          "[Removed Lines]",
          "3393:     String::Utf8Value verifyType(args[0]->ToString());",
          "",
          "[Added Lines]",
          "3393:     String::Utf8Value verifyType(args[0]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3589:           String::New(\"No group name given\")));",
          "3590:     }",
          "3594:     modp_group* it = modp_groups;",
          "",
          "[Removed Lines]",
          "3592:     String::Utf8Value group_name(args[0]->ToString());",
          "",
          "[Added Lines]",
          "3592:     String::Utf8Value group_name(args[0]);",
          "",
          "---------------"
        ],
        "src/node_dtrace.cc||src/node_dtrace.cc": [
          "File: src/node_dtrace.cc -> src/node_dtrace.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     return (ThrowException(Exception::Error(String::New(\"expected \" \\",
          "55:       \"object for \" #obj \" to contain string member \" #member)))); \\",
          "56:   } \\",
          "58:   if ((*(const char **)valp = *_##member) == NULL) \\",
          "",
          "[Removed Lines]",
          "57:   String::Utf8Value _##member(obj->Get(String::New(#member))->ToString()); \\",
          "",
          "[Added Lines]",
          "57:   String::Utf8Value _##member(obj->Get(String::New(#member))); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:       \"object for request to contain string member headers\"))));",
          "205:   Local<Value> strfwdfor = headers->Get(String::New(\"x-forwarded-for\"));",
          "208:   if (!strfwdfor->IsString() || (req.forwardedFor = *fwdfor) == NULL)",
          "209:     req.forwardedFor = const_cast<char*>(\"\");",
          "",
          "[Removed Lines]",
          "206:   String::Utf8Value fwdfor(strfwdfor->ToString());",
          "",
          "[Added Lines]",
          "206:   String::Utf8Value fwdfor(strfwdfor);",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "355:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "359:   if (args[1]->IsFunction()) {",
          "360:     ASYNC_CALL(stat, args[1], *path)",
          "",
          "[Removed Lines]",
          "357:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "357:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "371:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "375:   if (args[1]->IsFunction()) {",
          "376:     ASYNC_CALL(lstat, args[1], *path)",
          "",
          "[Removed Lines]",
          "373:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "373:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:   if (!args[0]->IsString()) return TYPE_ERROR(\"dest path must be a string\");",
          "407:   if (!args[1]->IsString()) return TYPE_ERROR(\"src path must be a string\");",
          "411:   int flags = 0;",
          "413:   if (args[2]->IsString()) {",
          "415:     if (memcmp(*mode, \"dir\\0\", 4) == 0) {",
          "416:       flags |= UV_FS_SYMLINK_DIR;",
          "417:     }",
          "",
          "[Removed Lines]",
          "409:   String::Utf8Value dest(args[0]->ToString());",
          "410:   String::Utf8Value path(args[1]->ToString());",
          "414:     String::Utf8Value mode(args[2]->ToString());",
          "",
          "[Added Lines]",
          "409:   String::Utf8Value dest(args[0]);",
          "410:   String::Utf8Value path(args[1]);",
          "414:     String::Utf8Value mode(args[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:   if (!args[0]->IsString()) return TYPE_ERROR(\"dest path must be a string\");",
          "435:   if (!args[1]->IsString()) return TYPE_ERROR(\"src path must be a string\");",
          "440:   if (args[2]->IsFunction()) {",
          "441:     ASYNC_CALL(link, args[2], *orig_path, *new_path)",
          "",
          "[Removed Lines]",
          "437:   String::Utf8Value orig_path(args[0]->ToString());",
          "438:   String::Utf8Value new_path(args[1]->ToString());",
          "",
          "[Added Lines]",
          "437:   String::Utf8Value orig_path(args[0]);",
          "438:   String::Utf8Value new_path(args[1]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "451:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "452:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "456:   if (args[1]->IsFunction()) {",
          "457:     ASYNC_CALL(readlink, args[1], *path)",
          "",
          "[Removed Lines]",
          "454:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "454:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "470:   if (!args[0]->IsString()) return TYPE_ERROR(\"old path must be a string\");",
          "471:   if (!args[1]->IsString()) return TYPE_ERROR(\"new path must be a string\");",
          "476:   if (args[2]->IsFunction()) {",
          "477:     ASYNC_CALL(rename, args[2], *old_path, *new_path)",
          "",
          "[Removed Lines]",
          "473:   String::Utf8Value old_path(args[0]->ToString());",
          "474:   String::Utf8Value new_path(args[1]->ToString());",
          "",
          "[Added Lines]",
          "473:   String::Utf8Value old_path(args[0]);",
          "474:   String::Utf8Value new_path(args[1]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "555:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "556:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "560:   if (args[1]->IsFunction()) {",
          "561:     ASYNC_CALL(unlink, args[1], *path)",
          "",
          "[Removed Lines]",
          "558:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "558:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "571:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "572:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "576:   if (args[1]->IsFunction()) {",
          "577:     ASYNC_CALL(rmdir, args[1], *path)",
          "",
          "[Removed Lines]",
          "574:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "574:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "588:     return THROW_BAD_ARGS;",
          "589:   }",
          "592:   int mode = static_cast<int>(args[1]->Int32Value());",
          "594:   if (args[2]->IsFunction()) {",
          "",
          "[Removed Lines]",
          "591:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "591:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "629:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "630:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "634:   if (args[1]->IsFunction()) {",
          "635:     ASYNC_CALL(readdir, args[1], *path, 0 /*flags*/)",
          "",
          "[Removed Lines]",
          "632:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "632:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "667:   if (!args[1]->IsInt32()) return TYPE_ERROR(\"flags must be an int\");",
          "668:   if (!args[2]->IsInt32()) return TYPE_ERROR(\"mode must be an int\");",
          "671:   int flags = args[1]->Int32Value();",
          "672:   int mode = static_cast<int>(args[2]->Int32Value());",
          "",
          "[Removed Lines]",
          "670:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "670:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "821:   if(args.Length() < 2 || !args[0]->IsString() || !args[1]->IsInt32()) {",
          "822:     return THROW_BAD_ARGS;",
          "823:   }",
          "825:   int mode = static_cast<int>(args[1]->Int32Value());",
          "827:   if(args[2]->IsFunction()) {",
          "",
          "[Removed Lines]",
          "824:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "824:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "868:   if (!args[1]->IsInt32()) return TYPE_ERROR(\"uid must be an int\");",
          "869:   if (!args[2]->IsInt32()) return TYPE_ERROR(\"gid must be an int\");",
          "872:   int uid = static_cast<int>(args[1]->Int32Value());",
          "873:   int gid = static_cast<int>(args[2]->Int32Value());",
          "",
          "[Removed Lines]",
          "871:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "871:   String::Utf8Value path(args[0]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "919:   if (!args[1]->IsNumber()) return TYPE_ERROR(\"atime must be a number\");",
          "920:   if (!args[2]->IsNumber()) return TYPE_ERROR(\"mtime must be a number\");",
          "923:   const double atime = static_cast<double>(args[1]->NumberValue());",
          "924:   const double mtime = static_cast<double>(args[2]->NumberValue());",
          "",
          "[Removed Lines]",
          "922:   const String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "922:   const String::Utf8Value path(args[0]);",
          "",
          "---------------"
        ],
        "src/node_stat_watcher.cc||src/node_stat_watcher.cc": [
          "File: src/node_stat_watcher.cc -> src/node_stat_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   }",
          "80:   StatWatcher *handler = ObjectWrap::Unwrap<StatWatcher>(args.Holder());",
          "83:   assert(handler->path_ == NULL);",
          "84:   handler->path_ = strdup(*path);",
          "",
          "[Removed Lines]",
          "81:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Added Lines]",
          "81:   String::Utf8Value path(args[0]);",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   UNWRAP",
          "149:   int r = uv_pipe_bind(&wrap->handle_, *name);",
          "",
          "[Removed Lines]",
          "147:   String::AsciiValue name(args[0]->ToString());",
          "",
          "[Added Lines]",
          "147:   String::AsciiValue name(args[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:   UNWRAP",
          "276:   ConnectWrap* req_wrap = new ConnectWrap();",
          "",
          "[Removed Lines]",
          "274:   String::AsciiValue name(args[0]->ToString());",
          "",
          "[Added Lines]",
          "274:   String::AsciiValue name(args[0]);",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:       options.args = new char*[argc + 1];",
          "122:       for (int i = 0; i < argc; i++) {",
          "124:         options.args[i] = strdup(*arg);",
          "125:       }",
          "126:       options.args[argc] = NULL;",
          "",
          "[Removed Lines]",
          "123:         String::Utf8Value arg(js_argv->Get(i)->ToString());",
          "",
          "[Added Lines]",
          "123:         String::Utf8Value arg(js_argv->Get(i));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:       int envc = env->Length();",
          "141:       options.env = new char*[envc + 1]; // Heap allocated to detect errors.",
          "142:       for (int i = 0; i < envc; i++) {",
          "144:         options.env[i] = strdup(*pair);",
          "145:       }",
          "146:       options.env[envc] = NULL;",
          "",
          "[Removed Lines]",
          "143:         String::Utf8Value pair(env->Get(i)->ToString());",
          "",
          "[Added Lines]",
          "143:         String::Utf8Value pair(env->Get(i));",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:   UNWRAP",
          "302:   int port = args[1]->Int32Value();",
          "304:   struct sockaddr_in address = uv_ip4_addr(*ip_address, port);",
          "",
          "[Removed Lines]",
          "301:   String::AsciiValue ip_address(args[0]->ToString());",
          "",
          "[Added Lines]",
          "301:   String::AsciiValue ip_address(args[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:   UNWRAP",
          "320:   int port = args[1]->Int32Value();",
          "322:   struct sockaddr_in6 address = uv_ip6_addr(*ip6_address, port);",
          "",
          "[Removed Lines]",
          "319:   String::AsciiValue ip6_address(args[0]->ToString());",
          "",
          "[Added Lines]",
          "319:   String::AsciiValue ip6_address(args[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:   UNWRAP",
          "416:   int port = args[1]->Int32Value();",
          "418:   struct sockaddr_in address = uv_ip4_addr(*ip_address, port);",
          "",
          "[Removed Lines]",
          "415:   String::AsciiValue ip_address(args[0]->ToString());",
          "",
          "[Added Lines]",
          "415:   String::AsciiValue ip_address(args[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "443:   UNWRAP",
          "446:   int port = args[1]->Int32Value();",
          "448:   struct sockaddr_in6 address = uv_ip6_addr(*ip_address, port);",
          "",
          "[Removed Lines]",
          "445:   String::AsciiValue ip_address(args[0]->ToString());",
          "",
          "[Added Lines]",
          "445:   String::AsciiValue ip_address(args[0]);",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   assert(args.Length() == 3);",
          "189:   const int port = args[1]->Uint32Value();",
          "190:   const int flags = args[2]->Uint32Value();",
          "",
          "[Removed Lines]",
          "188:   String::Utf8Value address(args[0]->ToString());",
          "",
          "[Added Lines]",
          "188:   String::Utf8Value address(args[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:   assert(args.Length() == 2);",
          "250:   const char* iface_cstr = *iface;",
          "251:   if (args[1]->IsUndefined() || args[1]->IsNull()) {",
          "",
          "[Removed Lines]",
          "247:   String::Utf8Value address(args[0]->ToString());",
          "248:   String::Utf8Value iface(args[1]->ToString());",
          "",
          "[Added Lines]",
          "247:   String::Utf8Value address(args[0]);",
          "248:   String::Utf8Value iface(args[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "296:                              length);",
          "298:   const unsigned short port = args[3]->Uint32Value();",
          "301:   switch (family) {",
          "302:   case AF_INET:",
          "",
          "[Removed Lines]",
          "299:   String::Utf8Value address(args[4]->ToString());",
          "",
          "[Added Lines]",
          "299:   String::Utf8Value address(args[4]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e6ad6204758042ca715ed0acfa88c2c292074ff",
      "candidate_info": {
        "commit_hash": "2e6ad6204758042ca715ed0acfa88c2c292074ff",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2e6ad6204758042ca715ed0acfa88c2c292074ff",
        "files": [
          "deps/uv/test/test-udp-multicast-ttl.c"
        ],
        "message": "Add libuv test that was omitted in last libuv upgrade",
        "before_after_code_files": [
          "deps/uv/test/test-udp-multicast-ttl.c||deps/uv/test/test-udp-multicast-ttl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/test/test-udp-multicast-ttl.c||deps/uv/test/test-udp-multicast-ttl.c": [
          "File: deps/uv/test/test-udp-multicast-ttl.c -> deps/uv/test/test-udp-multicast-ttl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "29: #define CHECK_HANDLE(handle) \\",
          "30:   ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)",
          "32: static uv_udp_t server;",
          "33: static uv_udp_t client;",
          "35: static int cl_recv_cb_called;",
          "37: static int sv_send_cb_called;",
          "39: static int close_cb_called;",
          "42: static void close_cb(uv_handle_t* handle) {",
          "43:   CHECK_HANDLE(handle);",
          "44:   close_cb_called++;",
          "45: }",
          "48: static void sv_send_cb(uv_udp_send_t* req, int status) {",
          "49:   ASSERT(req != NULL);",
          "50:   ASSERT(status == 0);",
          "51:   CHECK_HANDLE(req->handle);",
          "53:   sv_send_cb_called++;",
          "55:   uv_close((uv_handle_t*) req->handle, close_cb);",
          "56: }",
          "59: TEST_IMPL(udp_multicast_ttl) {",
          "60:   int r;",
          "61:   uv_udp_send_t req;",
          "62:   uv_buf_t buf;",
          "63:   struct sockaddr_in addr = uv_ip4_addr(\"239.255.0.1\", TEST_PORT);",
          "65:   r = uv_udp_init(uv_default_loop(), &server);",
          "66:   ASSERT(r == 0);",
          "68:   r = uv_udp_bind(&server, uv_ip4_addr(\"0.0.0.0\", 0), 0);",
          "69:   ASSERT(r == 0);",
          "71:   r = uv_udp_set_multicast_ttl(&server, 32);",
          "72:   ASSERT(r == 0);",
          "75:   buf = uv_buf_init(\"PING\", 4);",
          "76:   r = uv_udp_send(&req, &server, &buf, 1, addr, sv_send_cb);",
          "77:   ASSERT(r == 0);",
          "79:   ASSERT(close_cb_called == 0);",
          "80:   ASSERT(sv_send_cb_called == 0);",
          "83:   uv_run(uv_default_loop());",
          "85:   ASSERT(sv_send_cb_called == 1);",
          "86:   ASSERT(close_cb_called == 1);",
          "88:   return 0;",
          "89: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db0a1dc7d9a7e85fe01f97f6348559a70c331359",
      "candidate_info": {
        "commit_hash": "db0a1dc7d9a7e85fe01f97f6348559a70c331359",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/db0a1dc7d9a7e85fe01f97f6348559a70c331359",
        "files": [
          "src/node.cc"
        ],
        "message": "node: remove unused function",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1777: }",
          "1787: Persistent<Object> binding_cache;",
          "1788: Persistent<Array> module_load_list;",
          "",
          "[Removed Lines]",
          "1780: static void DebugBreakMessageHandler(const v8::Debug::Message& message) {",
          "1784: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d44ce9790948c69f0b9bc449f2488b30cd099105",
      "candidate_info": {
        "commit_hash": "d44ce9790948c69f0b9bc449f2488b30cd099105",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d44ce9790948c69f0b9bc449f2488b30cd099105",
        "files": [
          "lib/cluster.js",
          "test/simple/test-cluster-uncaught-exception.js"
        ],
        "message": "cluster: don't always kill the master on uncaughtException\n\nuncaughtException handlers installed by the user override the default one that\nthe cluster module installs, the one that kills off the master process.\n\nFixes #2556.",
        "before_after_code_files": [
          "lib/cluster.js||licluster.js",
          "test/simple/test-cluster-uncaught-exception.js||test/simple/test-cluster-uncaught-exception.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   workerArgs = process.argv.slice(2);",
          "80:   process.on('uncaughtException', function(e) {",
          "83:     eachWorker(function(worker) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-uncaught-exception.js||test/simple/test-cluster-uncaught-exception.js": [
          "File: test/simple/test-cluster-uncaught-exception.js -> test/simple/test-cluster-uncaught-exception.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: var common = require('../common');",
          "27: var assert = require('assert');",
          "28: var cluster = require('cluster');",
          "29: var fork = require('child_process').fork;",
          "31: var MAGIC_EXIT_CODE = 42;",
          "33: var isTestRunner = process.argv[2] != 'child';",
          "35: if (isTestRunner) {",
          "36:   var exitCode = -1;",
          "38:   process.on('exit', function() {",
          "39:     assert.equal(exitCode, MAGIC_EXIT_CODE);",
          "40:   });",
          "42:   var master = fork(__filename, ['child']);",
          "43:   master.on('exit', function(code) {",
          "44:     exitCode = code;",
          "45:   });",
          "46: }",
          "47: else if (cluster.isMaster) {",
          "48:   process.on('uncaughtException', function() {",
          "49:     process.nextTick(function() {",
          "50:       process.exit(MAGIC_EXIT_CODE);",
          "51:     });",
          "52:   });",
          "54:   cluster.fork();",
          "55:   throw new Error('kill master');",
          "56: }",
          "57: else { // worker",
          "58:   process.exit();",
          "59: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}