{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ee3fa87fd7ca53713cffb9ff662a61f797b760d",
      "candidate_info": {
        "commit_hash": "6ee3fa87fd7ca53713cffb9ff662a61f797b760d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ee3fa87fd7ca53713cffb9ff662a61f797b760d",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lempar.c"
        ],
        "message": "Fix an unreachable branch in sqlite3ParserFallback()\n\nFossilOrigin-Name: e059178b47109caee2c2211b2db6e594c014af636677118a64e10edf01ac017d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47d3e091ae49eb7947af5abef9b5b96b16b86d349e51fe0677795649be6db473",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065: int ParseFallback(int iToken){",
          "1066: #ifdef YYFALLBACK",
          "1070: #else",
          "1071:   (void)iToken;",
          "1072: #endif",
          "",
          "[Removed Lines]",
          "1067:   if( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) ){",
          "1068:     return yyFallback[iToken];",
          "1069:   }",
          "",
          "[Added Lines]",
          "1067:   assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );",
          "1068:   return yyFallback[iToken];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce3c3eeda0c76b344dba836d139b7ed8871fb7c3",
      "candidate_info": {
        "commit_hash": "ce3c3eeda0c76b344dba836d139b7ed8871fb7c3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ce3c3eeda0c76b344dba836d139b7ed8871fb7c3",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix two assert() statements in fts5 that are only true if the database is not corrupt.\n\nFossilOrigin-Name: edb095a9a679c8c702abd0a487e55ed4b09110b54bcd7d5275020576f2713a39",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2643:   }else{",
          "2644:     int res = fts5BufferCompare(&p1->term, &p2->term);",
          "2645:     if( res==0 ){",
          "2648:       pRes->bTermEq = 1;",
          "2649:       if( p1->iRowid==p2->iRowid ){",
          "2650:         p1->bDel = p2->bDel;",
          "",
          "[Removed Lines]",
          "2646:       assert( i2>i1 );",
          "2647:       assert( i2!=0 );",
          "",
          "[Added Lines]",
          "2646:       assert_nc( i2>i1 );",
          "2647:       assert_nc( i2!=0 );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "7999:   INSERT INTO t1(b) VALUES(randomblob(250));",
          "8000: } {1 {database disk image is malformed}}",
          "8002: sqlite3_fts5_may_be_corrupt 0",
          "8003: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8002: #-------------------------------------------------------------------------",
          "8003: reset_db",
          "8004: do_test 57.0 {",
          "8005:   sqlite3 db {}",
          "8006:   db deserialize [decode_hexdb {",
          "8007: | size 28672 pagesize 4096 filename x.db",
          "8008: | page 1 offset 0",
          "8009: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "8010: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 07   .....@  ........",
          "8011: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "8012: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "8013: |     96: 00 2e 34 20 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ..4 ...........m",
          "8014: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "8015: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "8016: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "8017: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "8018: |   3584: 61 6b 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   aket1_configt1_c",
          "8019: |   3600: 6f 7e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   o~fig.CREATE TAB",
          "8020: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "8021: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "8022: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "8023: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "8024: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "8025: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "8026: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "8027: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "8028: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "8029: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 1d   !.wtablet1_cont.",
          "8030: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "8031: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "8032: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "8033: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "8034: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "8035: |   3856: 74 31 5f 69 64 78 74 31 5f 59 64 78 03 43 52 45   t1_idxt1_Ydx.CRE",
          "8036: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "8037: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "8038: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "8039: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "8040: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "8041: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "8042: |   3968: 74 61 74 31 5f 64 61 64 61 02 43 52 45 41 54 45   tat1_dada.CREATE",
          "8043: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "8044: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "8045: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "8046: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "8047: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "8048: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "8049: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "8050: | page 2 offset 4096",
          "8051: |      0: 0d 0e b4 00 06 0e 35 00 0f e8 0e 35 0f bd 0f 4e   ......5....5...N",
          "8052: |     16: 0e cb 0e 4f 00 00 00 00 00 00 00 00 00 00 00 00   ...O............",
          "8053: |   3632: 00 00 00 00 00 18 0a 03 00 36 00 00 00 00 01 04   .........6......",
          "8054: |   3648: 04 00 04 01 01 01 02 01 01 03 01 01 04 01 01 5e   ...............^",
          "8055: |   3664: 90 80 80 80 80 01 04 00 81 40 00 00 00 51 06 30   .........@...Q.0",
          "8056: |   3680: 61 62 61 63 6b 01 01 04 04 6e 64 6f 6e 01 01 02   aback....ndon...",
          "8057: |   3696: 04 63 69 76 65 01 01 02 04 6c 70 68 61 01 01 02   .cive....lpha...",
          "8058: |   3712: 03 74 6f 6d 01 01 01 06 62 61 63 6b 75 70 01 01   .tom....backup..",
          "8059: |   3728: 02 05 6f 6f 6d 65 72 01 01 01 06 63 68 61 6e 6e   ..oomer....chann",
          "8060: |   3744: 65 01 01 01 04 74 65 73 74 01 01 04 09 08 08 08   e....test.......",
          "8061: |   3760: 07 0a 09 0a 0f 3a 00 17 30 00 00 00 00 01 03 03   .....:..0.......",
          "8062: |   3776: 00 03 01 01 01 02 01 01 03 01 01 68 8c 80 80 80   ...........h....",
          "8063: |   3792: 80 01 04 00 81 54 00 00 00 5b 06 30 61 62 61 63   .....T...[.0abac",
          "8064: |   3808: 6b 02 02 07 04 04 6e 64 6f 6e 02 02 05 02 04 63   k.....ndon.....c",
          "8065: |   3824: 69 76 65 02 02 0b 02 04 6c 70 68 61 02 04 02 0a   ive.....lpha....",
          "8066: |   3840: 02 03 74 6f 6d 02 02 09 01 06 62 61 63 6b 75 70   ..tom.....backup",
          "8067: |   3856: 02 02 04 02 05 6f 6f 6d 65 72 02 02 08 01 06 63   .....oomer.....c",
          "8068: |   3872: 68 61 6e 6e 65 02 02 03 01 04 74 65 73 74 02 02   hanne.....test..",
          "8069: |   3888: 06 04 0a 09 09 0a 08 0b 0a 0b 0f ef 00 14 2a 00   ..............*.",
          "8070: |   3904: 00 00 00 01 02 02 00 02 01 01 01 02 01 01 68 88   ..............h.",
          "8071: |   3920: 80 80 80 80 01 04 00 81 54 00 00 00 5b 06 30 61   ........T...[.0a",
          "8072: |   3936: 62 61 63 6b 01 02 07 04 04 6e 64 6f 6e 01 02 05   back.....ndon...",
          "8073: |   3952: 02 04 63 69 76 65 01 02 0b 02 04 6c 70 68 61 01   ..cive.....lpha.",
          "8074: |   3968: 04 02 0a 02 03 74 6f 6d 01 02 09 01 06 62 61 63   .....tom.....bac",
          "8075: |   3984: 6b 75 70 01 02 04 02 05 6f 6f 6d 65 72 01 02 08   kup.....oomer...",
          "8076: |   4000: 01 06 63 68 61 6e 6e 65 01 02 03 01 04 74 65 73   ..channe.....tes",
          "8077: |   4016: 74 01 02 06 04 0a 09 09 0a 08 0b 0a 0b 24 84 80   t............$..",
          "8078: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "8079: |   4048: 63 6b 01 02 02 05 42 66 74 02 02 02 04 04 6e 64   ck....Bft.....nd",
          "8080: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 04 0d 00   on..............",
          "8081: |   4080: 00 00 11 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "8082: | page 3 offset 8192",
          "8083: |      0: 0a 00 00 00 04 0f e5 00 00 00 0f f3 0f ec 0f e5   ................",
          "8084: |   4064: 00 00 00 00 00 06 04 01 0c 01 04 02 06 04 01 0c   ................",
          "8085: |   4080: 01 03 02 06 04 01 0c 01 02 02 05 04 09 0d 01 02   ................",
          "8086: | page 4 offset 12288",
          "8087: |      0: 0d 0e bc 00 04 0e 78 00 00 00 00 00 00 00 0e 78   ......x........x",
          "8088: |     16: 0e 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00   .x..............",
          "8089: |   3696: 00 00 00 00 00 00 00 00 42 02 04 00 81 09 61 6c   ........B.....al",
          "8090: |   3712: 70 68 61 20 63 68 61 6e 6e 65 20 62 61 63 6b 75   pha channe backu",
          "8091: |   3728: 70 20 61 62 61 6e 64 6f 6e 20 74 65 73 74 20 61   p abandon test a",
          "8092: |   3744: 62 61 63 6b 20 62 6f 6f 6d 65 72 20 61 74 6f 6d   back boomer atom",
          "8093: |   3760: 20 61 6c 70 68 61 20 61 63 69 76 65 00 00 00 44    alpha acive...D",
          "8094: |   3776: 81 09 61 6c 70 68 61 20 63 68 61 6e 6e 65 20 62   ..alpha channe b",
          "8095: |   3792: 61 63 6b 75 70 20 61 62 61 6e 64 6f 6e 20 74 65   ackup abandon te",
          "8096: |   3808: 73 74 20 61 62 61 63 6b 20 62 6f 6f 6d 65 72 20   st aback boomer",
          "8097: |   3824: 61 74 6f 6d 20 61 6c 70 68 61 20 61 63 69 76 65   atom alpha acive",
          "8098: |   4064: 0a 03 03 00 1b 61 4e 61 6e 64 6f 6e 08 02 03 00   .....aNandon....",
          "8099: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 71 63 6b   .abaft.....abqck",
          "8100: | page 5 offset 16384",
          "8101: |      0: 0d 0f e8 00 04 0f e2 00 00 00 00 00 00 00 0f e2   ................",
          "8102: |     16: 0f e2 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "8103: |   4064: 00 00 04 02 03 00 0e 0a 00 00 00 06 0e 0a 04 03   ................",
          "8104: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 10 0e 01   ................",
          "8105: | page 6 offset 20480",
          "8106: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "8107: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "8108: | page 7 offset 24576",
          "8109: |      0: 0d 00 00 00 03 0f d6 00 0f f4 00 00 00 00 00 00   ................",
          "8110: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "8111: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "8112: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "8113: | end x.db",
          "8114: }]} {}",
          "8116: do_catchsql_test 57.1 {",
          "8117:   INSERT INTO t1(t1) VALUES('optimize')",
          "8118: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c0381b0bc90aa3c2415c4b3ac338cfe6d308bb5d4247bc6f2b6e919f549c254c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f20bbc5f69186e9f04b498b7de2488f3c02f7364",
      "candidate_info": {
        "commit_hash": "f20bbc5f69186e9f04b498b7de2488f3c02f7364",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f20bbc5f69186e9f04b498b7de2488f3c02f7364",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix a failure in sqlite3ExprCompare()\n\nFossilOrigin-Name: 835e2cc55feea2f2426c99816c27f9c35d2fd4cdd9bf1c7f46f889ecfd222778",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca7b7aaed010ec67bec5355a9ac1d7f229d6d5f2ba2d796b76f5e908b1267688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4858:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "4859:       }",
          "4860: #endif",
          "4861:     }else if( pA->op==TK_COLLATE ){",
          "4862:       if( sqlite3_stricmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4864:       return 2;",
          "4865:     }",
          "4866:   }",
          "",
          "[Removed Lines]",
          "4863:     }else if( strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "",
          "[Added Lines]",
          "4861:     }else if( pA->op==TK_NULL ){",
          "4862:       return 0;",
          "4865:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee253f7881ddf736ab67d15ccd8df97027111fd4",
      "candidate_info": {
        "commit_hash": "ee253f7881ddf736ab67d15ccd8df97027111fd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee253f7881ddf736ab67d15ccd8df97027111fd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Add options to wapptest.tcl similar to those supported by releasetest.tcl. Also add the -noui switch, for running without wapp altogether.\n\nFossilOrigin-Name: 005a169406ccea6e3cc42271620870d985e8bada1ad49a63656003db4911cb51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c509d8a8aebe0da4847e95cf737c21313a665de9a540da2db57b8ed22f98a402",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: set G(platform) $::tcl_platform(os)-$::tcl_platform(machine)",
          "22: set G(test)     Normal",
          "23: set G(keep)     1",
          "25: set G(tcl)      [::tcl::pkgconfig get libdir,install]",
          "26: set G(jobs)     3",
          "27: set G(debug)    0",
          "29: proc wapptest_init {} {",
          "30:   global G",
          "33:   foreach k $lSave { set A($k) $G($k) }",
          "34:   array unset G",
          "35:   foreach k $lSave { set G($k) $A($k) }",
          "",
          "[Removed Lines]",
          "24: set G(msvc)     [expr {$::tcl_platform(platform)==\"windows\"}]",
          "32:   set lSave [list platform test keep msvc tcl jobs debug]",
          "",
          "[Added Lines]",
          "24: set G(msvc)     0",
          "29: set G(noui)     0",
          "30: set G(stdout)   0",
          "36:   set lSave [list platform test keep msvc tcl jobs debug noui stdout]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "50: }",
          "52: # Generate the text for the box at the top of the UI. The current SQLite",
          "53: # version, according to fossil, along with a warning if there are",
          "54: # uncommitted changes in the checkout.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: proc wapptest_run {} {",
          "57:   global G",
          "58:   set_test_array",
          "59:   set G(state) \"running\"",
          "61:   wapptest_openlog",
          "63:   wapptest_output \"Running the following for $G(platform). $G(jobs) jobs.\"",
          "64:   foreach t $G(test_array) {",
          "65:     set config [dict get $t config]",
          "66:     set target [dict get $t target]",
          "67:     wapptest_output [format \"    %-25s%s\" $config $target]",
          "68:   }",
          "69:   wapptest_output [string repeat * 70]",
          "70: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   }",
          "198: }",
          "200: # This command is invoked once a slave process has finished running its",
          "201: # tests, successfully or otherwise. Parameter $name is the name of the",
          "202: # test, $rc the exit code returned by the slave process.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: proc wapptest_output {str} {",
          "221:   global G",
          "222:   if {$G(stdout)} { puts $str }",
          "223:   if {[info exists G(log)]} {",
          "224:     puts $G(log) $str",
          "225:     flush $G(log)",
          "226:   }",
          "227: }",
          "228: proc wapptest_openlog {} {",
          "229:   global G",
          "230:   set G(log) [open wapptest-out.txt w+]",
          "231: }",
          "232: proc wapptest_closelog {} {",
          "233:   global G",
          "234:   close $G(log)",
          "235:   unset G(log)",
          "236: }",
          "238: proc format_seconds {seconds} {",
          "239:   set min [format %.2d [expr ($seconds / 60) % 60]]",
          "240:   set  hr [format %.2d [expr $seconds / 3600]]",
          "241:   set sec [format %.2d [expr $seconds % 60]]",
          "242:   return \"$hr:$min:$sec\"",
          "243: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:       }",
          "234:     }",
          "235:   }",
          "236: }",
          "238: # This is a fileevent callback invoked each time a file-descriptor that",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:   # Format a message regarding the success or failure of hte test.",
          "283:   set t [format_seconds [expr $G(test.$name.done) - $G(test.$name.start)]]",
          "284:   set res \"OK\"",
          "285:   if {$G(test.$name.nError)} { set res \"FAILED\" }",
          "286:   set dots [string repeat . [expr 60 - [string length $name]]]",
          "287:   set msg \"$name $dots $res ($t)\"",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "292:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "372:       incr nConfig",
          "373:     }",
          "374:     set G(result) \"$nError errors from $nTest tests in $nConfig configurations.\"",
          "375:     catch {",
          "376:       append G(result) \" SQLite version $G(sqlite_version)\"",
          "377:     }",
          "378:     set G(state) \"stopped\"",
          "379:   } else {",
          "380:     set nLaunch [expr $G(jobs) - $nRunning]",
          "381:     foreach j $G(test_array) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:     wapptest_output [string repeat * 70]",
          "433:     wapptest_output $G(result)",
          "436:       wapptest_output \" SQLite version $G(sqlite_version)\"",
          "439:     wapptest_closelog",
          "440:     if {$G(noui)} { exit 0 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "543:         }",
          "544:         set seconds [expr $G(test.$config.done) - $G(test.$config.start)]",
          "545:       }",
          "551:     }",
          "553:     wapp-trim {",
          "",
          "[Removed Lines]",
          "547:       set min [format %.2d [expr ($seconds / 60) % 60]]",
          "548:       set  hr [format %.2d [expr $seconds / 3600]]",
          "549:       set sec [format %.2d [expr $seconds % 60]]",
          "550:       set seconds \"$hr:$min:$sec\"",
          "",
          "[Added Lines]",
          "608:       set seconds [format_seconds $seconds]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "607:   if {[wapp-param-exists control_run]} {",
          "608:     # This is a \"run test\" command.",
          "611:   }",
          "613:   if {[wapp-param-exists control_stop]} {",
          "",
          "[Removed Lines]",
          "609:     set_test_array",
          "610:     set ::G(state) \"running\"",
          "",
          "[Added Lines]",
          "667:     wapptest_run",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "622:         slave_test_done $name 1",
          "623:       }",
          "624:     }",
          "625:   }",
          "627:   if {[wapp-param-exists control_reset]} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:     wapptest_closelog",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "773:   }",
          "774: }",
          "776: wapptest_init",
          "",
          "[Removed Lines]",
          "777: wapp-start $argv",
          "",
          "[Added Lines]",
          "834: # Print out a usage message. Then do [exit 1].",
          "835: #",
          "836: proc wapptest_usage {} {",
          "837:   puts stderr {",
          "838: This Tcl script is used to test various configurations of SQLite. By",
          "839: default it uses \"wapp\" to provide an interactive interface. Supported",
          "840: command line options (all optional) are:",
          "842:     --platform    PLATFORM         (which tests to run)",
          "843:     --smoketest                    (run \"make smoketest\" only)",
          "844:     --veryquick                    (run veryquick.test only)",
          "845:     --buildonly                    (build executables, do not run tests)",
          "846:     --jobs        N                (number of concurrent jobs)",
          "847:     --tcl         DIR              (where to find tclConfig.sh)",
          "848:     --deletefiles                  (delete extra files after each test)",
          "849:     --msvc                         (Use MS Visual C)",
          "850:     --debug                        (Also run [n]debugging versions of tests)",
          "851:     --noui                         (do not use wapp)",
          "852:   }",
          "853:   exit 1",
          "854: }",
          "856: # Sort command line arguments into two groups: those that belong to wapp,",
          "857: # and those that belong to the application.",
          "858: set WAPPARG(-server)      1",
          "859: set WAPPARG(-local)       1",
          "860: set WAPPARG(-scgi)        1",
          "861: set WAPPARG(-remote-scgi) 1",
          "862: set WAPPARG(-fromip)      1",
          "863: set WAPPARG(-nowait)      0",
          "864: set WAPPARG(-cgi)         0",
          "865: set lWappArg [list]",
          "866: set lTestArg [list]",
          "867: for {set i 0} {$i < [llength $argv]} {incr i} {",
          "868:   set arg [lindex $argv $i]",
          "869:   if {[string range $arg 0 1]==\"--\"} {",
          "870:     set arg [string range $arg 1 end]",
          "871:   }",
          "872:   if {[info exists WAPPARG($arg)]} {",
          "873:     lappend lWappArg $arg",
          "874:     if {$WAPPARG($arg)} {",
          "875:       incr i",
          "876:       lappend lWappArg [lindex $argv $i]",
          "877:     }",
          "878:   } else {",
          "879:     lappend lTestArg $arg",
          "880:   }",
          "881: }",
          "883: for {set i 0} {$i < [llength $lTestArg]} {incr i} {",
          "884:   switch -- [lindex $lTestArg $i] {",
          "885:     -platform {",
          "886:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "887:       incr i",
          "888:       set arg [lindex $lTestArg $i]",
          "889:       set lPlatform [array names ::Platforms]",
          "890:       if {[lsearch $lPlatform $arg]<0} {",
          "891:         puts stderr \"No such platform: $arg. Platforms are: $lPlatform\"",
          "892:         exit -1",
          "893:       }",
          "894:       set G(platform) $arg",
          "895:     }",
          "897:     -smoketest { set G(test) Smoketest }",
          "898:     -veryquick { set G(test) Veryquick }",
          "899:     -buildonly { set G(test) Build-Only }",
          "900:     -jobs {",
          "901:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "902:       incr i",
          "903:       set G(jobs) [lindex $lTestArg $i]",
          "904:     }",
          "906:     -tcl {",
          "907:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "908:       incr i",
          "909:       set G(tcl) [lindex $lTestArg $i]",
          "910:     }",
          "912:     -deletefiles {",
          "913:       set G(keep) 0",
          "914:     }",
          "916:     -msvc {",
          "917:       set G(msvc) 1",
          "918:     }",
          "920:     -debug {",
          "921:       set G(debug) 1",
          "922:     }",
          "924:     -noui {",
          "925:       set G(noui) 1",
          "926:       set G(stdout) 1",
          "927:     }",
          "929:     -stdout {",
          "930:       set G(stdout) 1",
          "931:     }",
          "933:     default {",
          "934:       puts stderr \"Unrecognized option: [lindex $lTestArg $i]\"",
          "935:       wapptest_usage",
          "936:     }",
          "937:   }",
          "938: }",
          "941: if {$G(noui)==0} {",
          "942:   wapp-start $lWappArg",
          "943: } else {",
          "944:   wapptest_run",
          "945:   do_some_stuff",
          "946:   vwait forever",
          "947: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85a379b74b4229f9d6bf54936d2bc71c009929b9",
      "candidate_info": {
        "commit_hash": "85a379b74b4229f9d6bf54936d2bc71c009929b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/85a379b74b4229f9d6bf54936d2bc71c009929b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix a page-cache reference leak in the btree balancer when there is a corrupt database.\n\nFossilOrigin-Name: 9285899120dec24ff2944431ad455d7ae217ef408ae2f1a3e7bdfb897099028c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d43ee4000b71f5c6d49244dee96358c567f09ba3451b9d22895a796d3f61ad6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7550:   pgno = get4byte(pRight);",
          "7551:   while( 1 ){",
          "7552:     rc = getAndInitPage(pBt, pgno, &apOld[i], 0, 0);",
          "7556:     if( rc ){",
          "7557:       memset(apOld, 0, (i+1)*sizeof(MemPage*));",
          "7558:       goto balance_cleanup;",
          "7559:     }",
          "7560:     nMaxCells += 1+apOld[i]->nCell+apOld[i]->nOverflow;",
          "7561:     if( (i--)==0 ) break;",
          "",
          "[Removed Lines]",
          "7553:     if( rc==0 && apOld[i]->nFree<0 ){",
          "7554:       rc = btreeComputeFreeSpace(apOld[i]);",
          "7555:     }",
          "",
          "[Added Lines]",
          "7557:     if( apOld[i]->nFree<0 ){",
          "7558:       rc = btreeComputeFreeSpace(apOld[i]);",
          "7559:       if( rc ){",
          "7560:         memset(apOld, 0, (i)*sizeof(MemPage*));",
          "7561:         goto balance_cleanup;",
          "7562:       }",
          "7563:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}