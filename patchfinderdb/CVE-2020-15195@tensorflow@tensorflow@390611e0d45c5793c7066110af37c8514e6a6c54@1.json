{
  "cve_id": "CVE-2020-15195",
  "cve_desc": "In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of `SparseFillEmptyRowsGrad` uses a double indexing pattern. It is possible for `reverse_index_map(i)` to be an index outside of bounds of `grad_values`, thus resulting in a heap buffer overflow. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "390611e0d45c5793c7066110af37c8514e6a6c54",
  "patch_info": {
    "commit_hash": "390611e0d45c5793c7066110af37c8514e6a6c54",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/390611e0d45c5793c7066110af37c8514e6a6c54",
    "files": [
      "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
      "tensorflow/python/ops/sparse_ops_test.py"
    ],
    "message": "Fix heap buffer overflow in `tf.raw_ops.SparseFillEmptyRowsGrad`.\n\nAlso add tests as they were lacking\n\nPiperOrigin-RevId: 332566071\nChange-Id: I44277578e26ff5fb3fdb0dcbba6e91b2ec3e7859",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
      "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc": [
      "File: tensorflow/core/kernels/sparse_fill_empty_rows_op.cc -> tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "236:         context, TensorShapeUtils::IsVector(reverse_index_map_t->shape()),",
      "237:         errors::InvalidArgument(\"reverse_index_map must be a vector, saw: \",",
      "238:                                 reverse_index_map_t->shape().DebugString()));",
      "240:     const auto reverse_index_map = reverse_index_map_t->vec<int64>();",
      "241:     const auto grad_values = grad_values_t->vec<T>();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "239:     OP_REQUIRES(context, TensorShapeUtils::IsVector(grad_values_t->shape()),",
      "240:                 errors::InvalidArgument(\"grad_values must be a vector, saw: \",",
      "241:                                         grad_values_t->shape().DebugString()));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269:     }",
      "270:     for (int j = 0; j < N_full; ++j) {",
      "",
      "[Removed Lines]",
      "267:       d_values(i) = grad_values(reverse_index_map(i));",
      "268:       visited(reverse_index_map(i)) = true;",
      "",
      "[Added Lines]",
      "270:       int64 reverse_index = reverse_index_map(i);",
      "271:       OP_REQUIRES(",
      "272:           context, 0 <= reverse_index && reverse_index < N_full,",
      "273:           errors::InvalidArgument(\"Elements in reverse index must be in [0, \",",
      "274:                                   N_full, \") but got \", reverse_index));",
      "275:       d_values(i) = grad_values(reverse_index);",
      "276:       visited(reverse_index) = true;",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py": [
      "File: tensorflow/python/ops/sparse_ops_test.py -> tensorflow/python/ops/sparse_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: from absl.testing import parameterized",
      "22: import numpy as np",
      "24: from tensorflow.python.framework import constant_op",
      "25: from tensorflow.python.framework import dtypes",
      "26: from tensorflow.python.framework import errors",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: from tensorflow.python.eager import context",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: # Need array_grad to register gradient for Identity.",
      "31: from tensorflow.python.ops import array_grad  # pylint: disable=unused-import",
      "32: from tensorflow.python.ops import array_ops",
      "33: from tensorflow.python.ops import gradient_checker_v2 as gradient_checker",
      "34: from tensorflow.python.ops import math_ops",
      "35: # Need sparse_grad to register gradient for SparseToDense.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: from tensorflow.python.ops import gen_sparse_ops",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "234:     self.assertAllEqual([5], result.dense_shape)",
      "237: if __name__ == '__main__':",
      "238:   googletest.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "239: @test_util.run_all_in_graph_and_eager_modes",
      "240: class RawOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):",
      "242:   def testSparseFillEmptyRowsGrad(self):",
      "243:     reverse_index_map = [2, 1]",
      "244:     grad_values = [0, 1, 2, 3]",
      "245:     d_values, d_default_value = self.evaluate(",
      "246:         gen_sparse_ops.SparseFillEmptyRowsGrad(",
      "247:             reverse_index_map=reverse_index_map, grad_values=grad_values))",
      "248:     self.assertAllEqual([2, 1], d_values)",
      "249:     self.assertEqual(3, d_default_value)",
      "251:   def testSparseFillEmptyRowsGradNegativeIndexMapValue(self):",
      "252:     reverse_index_map = [2, -1]",
      "253:     grad_values = [0, 1, 2, 3]",
      "254:     with self.assertRaisesRegex(",
      "255:         errors.InvalidArgumentError,",
      "256:         r'Elements in reverse index must be in \\[0, 4\\)'):",
      "257:       self.evaluate(",
      "258:           gen_sparse_ops.SparseFillEmptyRowsGrad(",
      "259:               reverse_index_map=reverse_index_map, grad_values=grad_values))",
      "261:   def testSparseFillEmptyRowsGradLargeIndexMapValue(self):",
      "262:     reverse_index_map = [2, 10]",
      "263:     grad_values = [0, 1, 2, 3]",
      "264:     with self.assertRaisesRegex(",
      "265:         errors.InvalidArgumentError,",
      "266:         r'Elements in reverse index must be in \\[0, 4\\)'):",
      "267:       self.evaluate(",
      "268:           gen_sparse_ops.SparseFillEmptyRowsGrad(",
      "269:               reverse_index_map=reverse_index_map, grad_values=grad_values))",
      "271:   def testSparseFillEmptyRowsGradMatrix(self):",
      "272:     reverse_index_map = [0, 1]",
      "273:     grad_values = [[0, 1], [2, 3]]",
      "274:     # Note: Eager mode and graph mode throw different errors here. Graph mode",
      "275:     # will fail with a ValueError from the shape checking logic, while Eager",
      "276:     # will fail with an InvalidArgumentError from the kernel itself.",
      "277:     if context.executing_eagerly():",
      "278:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "279:                                   r'grad_values must be a vector'):",
      "280:         self.evaluate(",
      "281:             gen_sparse_ops.SparseFillEmptyRowsGrad(",
      "282:                 reverse_index_map=reverse_index_map, grad_values=grad_values))",
      "283:     else:",
      "284:       with self.assertRaisesRegex(ValueError,",
      "285:                                   r'Shape must be rank 1 but is rank 2'):",
      "286:         self.evaluate(",
      "287:             gen_sparse_ops.SparseFillEmptyRowsGrad(",
      "288:                 reverse_index_map=reverse_index_map, grad_values=grad_values))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0615b26093fb322f908103e442328a5281c59129",
      "candidate_info": {
        "commit_hash": "0615b26093fb322f908103e442328a5281c59129",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0615b26093fb322f908103e442328a5281c59129",
        "files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
          "tensorflow/python/ops/sparse_ops_test.py"
        ],
        "message": "Fix heap buffer overflow in `tf.raw_ops.SparseFillEmptyRowsGrad`.\n\nAlso add tests as they were lacking\n\nPiperOrigin-RevId: 332566071\nChange-Id: I44277578e26ff5fb3fdb0dcbba6e91b2ec3e7859",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
          "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
            "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
            "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc": [
          "File: tensorflow/core/kernels/sparse_fill_empty_rows_op.cc -> tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         context, TensorShapeUtils::IsVector(reverse_index_map_t->shape()),",
          "214:         errors::InvalidArgument(\"reverse_index_map must be a vector, saw: \",",
          "215:                                 reverse_index_map_t->shape().DebugString()));",
          "217:     const auto reverse_index_map = reverse_index_map_t->vec<int64>();",
          "218:     const auto grad_values = grad_values_t->vec<T>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     OP_REQUIRES(context, TensorShapeUtils::IsVector(grad_values_t->shape()),",
          "217:                 errors::InvalidArgument(\"grad_values must be a vector, saw: \",",
          "218:                                         grad_values_t->shape().DebugString()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:     }",
          "247:     for (int j = 0; j < N_full; ++j) {",
          "",
          "[Removed Lines]",
          "244:       d_values(i) = grad_values(reverse_index_map(i));",
          "245:       visited(reverse_index_map(i)) = true;",
          "",
          "[Added Lines]",
          "247:       int64 reverse_index = reverse_index_map(i);",
          "248:       OP_REQUIRES(",
          "249:           context, 0 <= reverse_index && reverse_index < N_full,",
          "250:           errors::InvalidArgument(\"Elements in reverse index must be in [0, \",",
          "251:                                   N_full, \") but got \", reverse_index));",
          "252:       d_values(i) = grad_values(reverse_index);",
          "253:       visited(reverse_index) = true;",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py": [
          "File: tensorflow/python/ops/sparse_ops_test.py -> tensorflow/python/ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from absl.testing import parameterized",
          "22: import numpy as np",
          "24: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import sparse_tensor",
          "27: from tensorflow.python.framework import test_util",
          "28: # Need array_grad to register gradient for Identity.",
          "29: from tensorflow.python.ops import array_grad  # pylint: disable=unused-import",
          "30: from tensorflow.python.ops import gradient_checker_v2 as gradient_checker",
          "31: from tensorflow.python.ops import math_ops",
          "32: # Need sparse_grad to register gradient for SparseToDense.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.eager import context",
          "31: from tensorflow.python.ops import gen_sparse_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     self.assertAllEqual(expected_dense, result_dense)",
          "137: if __name__ == '__main__':",
          "138:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: @test_util.run_all_in_graph_and_eager_modes",
          "140: class RawOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):",
          "142:   def testSparseFillEmptyRowsGrad(self):",
          "143:     reverse_index_map = [2, 1]",
          "144:     grad_values = [0, 1, 2, 3]",
          "145:     d_values, d_default_value = self.evaluate(",
          "146:         gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "147:             reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "148:     self.assertAllEqual([2, 1], d_values)",
          "149:     self.assertEqual(3, d_default_value)",
          "151:   def testSparseFillEmptyRowsGradNegativeIndexMapValue(self):",
          "152:     reverse_index_map = [2, -1]",
          "153:     grad_values = [0, 1, 2, 3]",
          "154:     with self.assertRaisesRegex(",
          "155:         errors.InvalidArgumentError,",
          "156:         r'Elements in reverse index must be in \\[0, 4\\)'):",
          "157:       self.evaluate(",
          "158:           gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "159:               reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "161:   def testSparseFillEmptyRowsGradLargeIndexMapValue(self):",
          "162:     reverse_index_map = [2, 10]",
          "163:     grad_values = [0, 1, 2, 3]",
          "164:     with self.assertRaisesRegex(",
          "165:         errors.InvalidArgumentError,",
          "166:         r'Elements in reverse index must be in \\[0, 4\\)'):",
          "167:       self.evaluate(",
          "168:           gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "169:               reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "171:   def testSparseFillEmptyRowsGradMatrix(self):",
          "172:     reverse_index_map = [0, 1]",
          "173:     grad_values = [[0, 1], [2, 3]]",
          "174:     # Note: Eager mode and graph mode throw different errors here. Graph mode",
          "175:     # will fail with a ValueError from the shape checking logic, while Eager",
          "176:     # will fail with an InvalidArgumentError from the kernel itself.",
          "177:     if context.executing_eagerly():",
          "178:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "179:                                   r'grad_values must be a vector'):",
          "180:         self.evaluate(",
          "181:             gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "182:                 reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "183:     else:",
          "184:       with self.assertRaisesRegex(ValueError,",
          "185:                                   r'Shape must be rank 1 but is rank 2'):",
          "186:         self.evaluate(",
          "187:             gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "188:                 reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89e10b0ea5bdf9f2050e4db0194d79dfc289ffbd",
      "candidate_info": {
        "commit_hash": "89e10b0ea5bdf9f2050e4db0194d79dfc289ffbd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/89e10b0ea5bdf9f2050e4db0194d79dfc289ffbd",
        "files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
          "tensorflow/python/ops/sparse_ops_test.py"
        ],
        "message": "Fix heap buffer overflow in `tf.raw_ops.SparseFillEmptyRowsGrad`.\n\nAlso add tests as they were lacking\n\nPiperOrigin-RevId: 332566071\nChange-Id: I44277578e26ff5fb3fdb0dcbba6e91b2ec3e7859",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
          "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
            "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
            "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op.cc": [
          "File: tensorflow/core/kernels/sparse_fill_empty_rows_op.cc -> tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         context, TensorShapeUtils::IsVector(reverse_index_map_t->shape()),",
          "214:         errors::InvalidArgument(\"reverse_index_map must be a vector, saw: \",",
          "215:                                 reverse_index_map_t->shape().DebugString()));",
          "217:     const auto reverse_index_map = reverse_index_map_t->vec<int64>();",
          "218:     const auto grad_values = grad_values_t->vec<T>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     OP_REQUIRES(context, TensorShapeUtils::IsVector(grad_values_t->shape()),",
          "217:                 errors::InvalidArgument(\"grad_values must be a vector, saw: \",",
          "218:                                         grad_values_t->shape().DebugString()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:     }",
          "247:     for (int j = 0; j < N_full; ++j) {",
          "",
          "[Removed Lines]",
          "244:       d_values(i) = grad_values(reverse_index_map(i));",
          "245:       visited(reverse_index_map(i)) = true;",
          "",
          "[Added Lines]",
          "247:       int64 reverse_index = reverse_index_map(i);",
          "248:       OP_REQUIRES(",
          "249:           context, 0 <= reverse_index && reverse_index < N_full,",
          "250:           errors::InvalidArgument(\"Elements in reverse index must be in [0, \",",
          "251:                                   N_full, \") but got \", reverse_index));",
          "252:       d_values(i) = grad_values(reverse_index);",
          "253:       visited(reverse_index) = true;",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/sparse_ops_test.py||tensorflow/python/ops/sparse_ops_test.py": [
          "File: tensorflow/python/ops/sparse_ops_test.py -> tensorflow/python/ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from absl.testing import parameterized",
          "22: import numpy as np",
          "24: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.eager import context",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: from tensorflow.python.framework import test_util",
          "29: # Need array_grad to register gradient for Identity.",
          "30: from tensorflow.python.ops import array_grad  # pylint: disable=unused-import",
          "31: from tensorflow.python.ops import gradient_checker_v2 as gradient_checker",
          "32: from tensorflow.python.ops import math_ops",
          "33: # Need sparse_grad to register gradient for SparseToDense.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: from tensorflow.python.ops import gen_sparse_ops",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     self.assertAllEqual(expected_dense, result_dense)",
          "147: if __name__ == '__main__':",
          "148:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: @test_util.run_all_in_graph_and_eager_modes",
          "150: class RawOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):",
          "152:   def testSparseFillEmptyRowsGrad(self):",
          "153:     reverse_index_map = [2, 1]",
          "154:     grad_values = [0, 1, 2, 3]",
          "155:     d_values, d_default_value = self.evaluate(",
          "156:         gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "157:             reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "158:     self.assertAllEqual([2, 1], d_values)",
          "159:     self.assertEqual(3, d_default_value)",
          "161:   def testSparseFillEmptyRowsGradNegativeIndexMapValue(self):",
          "162:     reverse_index_map = [2, -1]",
          "163:     grad_values = [0, 1, 2, 3]",
          "164:     with self.assertRaisesRegex(",
          "165:         errors.InvalidArgumentError,",
          "166:         r'Elements in reverse index must be in \\[0, 4\\)'):",
          "167:       self.evaluate(",
          "168:           gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "169:               reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "171:   def testSparseFillEmptyRowsGradLargeIndexMapValue(self):",
          "172:     reverse_index_map = [2, 10]",
          "173:     grad_values = [0, 1, 2, 3]",
          "174:     with self.assertRaisesRegex(",
          "175:         errors.InvalidArgumentError,",
          "176:         r'Elements in reverse index must be in \\[0, 4\\)'):",
          "177:       self.evaluate(",
          "178:           gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "179:               reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "181:   def testSparseFillEmptyRowsGradMatrix(self):",
          "182:     reverse_index_map = [0, 1]",
          "183:     grad_values = [[0, 1], [2, 3]]",
          "184:     # Note: Eager mode and graph mode throw different errors here. Graph mode",
          "185:     # will fail with a ValueError from the shape checking logic, while Eager",
          "186:     # will fail with an InvalidArgumentError from the kernel itself.",
          "187:     if context.executing_eagerly():",
          "188:       with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "189:                                   r'grad_values must be a vector'):",
          "190:         self.evaluate(",
          "191:             gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "192:                 reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "193:     else:",
          "194:       with self.assertRaisesRegex(ValueError,",
          "195:                                   r'Shape must be rank 1 but is rank 2'):",
          "196:         self.evaluate(",
          "197:             gen_sparse_ops.SparseFillEmptyRowsGrad(",
          "198:                 reverse_index_map=reverse_index_map, grad_values=grad_values))",
          "",
          "---------------"
        ]
      }
    }
  ]
}