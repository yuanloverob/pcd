{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0c4e008aa051baadcc274d792f4a8f5c6b130b8",
      "candidate_info": {
        "commit_hash": "c0c4e008aa051baadcc274d792f4a8f5c6b130b8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c0c4e008aa051baadcc274d792f4a8f5c6b130b8",
        "files": [
          "deps/v8/SConstruct",
          "deps/v8/src/conversions-inl.h",
          "deps/v8/src/conversions.h",
          "deps/v8/src/elements.cc",
          "deps/v8/src/globals.h",
          "deps/v8/src/objects.cc",
          "deps/v8/src/objects.h",
          "deps/v8/src/v8globals.h",
          "deps/v8/src/version.cc",
          "deps/v8/tools/gyp/v8.gyp"
        ],
        "message": "Upgrade V8 to 3.6.6.24",
        "before_after_code_files": [
          "deps/v8/src/conversions-inl.h||deps/v8/src/conversions-inl.h",
          "deps/v8/src/conversions.h||deps/v8/src/conversions.h",
          "deps/v8/src/elements.cc||deps/v8/src/elements.cc",
          "deps/v8/src/globals.h||deps/v8/src/globals.h",
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc",
          "deps/v8/src/objects.h||deps/v8/src/objects.h",
          "deps/v8/src/v8globals.h||deps/v8/src/v8globals.h",
          "deps/v8/src/version.cc||deps/v8/src/version.cc",
          "deps/v8/tools/gyp/v8.gyp||deps/v8/tools/gyp/v8.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/conversions-inl.h||deps/v8/src/conversions-inl.h": [
          "File: deps/v8/src/conversions-inl.h -> deps/v8/src/conversions-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: namespace internal {",
          "49: static inline double JunkStringValue() {",
          "51: }",
          "",
          "[Removed Lines]",
          "50:   return std::numeric_limits<double>::quiet_NaN();",
          "",
          "[Added Lines]",
          "50:   return BitCast<double, uint64_t>(kQuietNaNMask);",
          "",
          "---------------"
        ],
        "deps/v8/src/conversions.h||deps/v8/src/conversions.h": [
          "File: deps/v8/src/conversions.h -> deps/v8/src/conversions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #ifndef V8_CONVERSIONS_H_",
          "29: #define V8_CONVERSIONS_H_",
          "33: #include \"utils.h\"",
          "35: namespace v8 {",
          "",
          "[Removed Lines]",
          "31: #include <limits>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/elements.cc||deps/v8/src/elements.cc": [
          "File: deps/v8/src/elements.cc -> deps/v8/src/elements.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:                            uint32_t key,",
          "78:                            JSObject* obj,",
          "79:                            Object* receiver) {",
          "81:         BackingStoreClass::cast(backing_store), key, obj, receiver);",
          "82:   }",
          "92:   }",
          "94:   virtual MaybeObject* Delete(JSObject* obj,",
          "",
          "[Removed Lines]",
          "80:     return ElementsAccessorSubclass::Get(",
          "84:   static MaybeObject* Get(BackingStoreClass* backing_store,",
          "85:                           uint32_t key,",
          "86:                           JSObject* obj,",
          "87:                           Object* receiver) {",
          "88:     if (key < ElementsAccessorSubclass::GetCapacity(backing_store)) {",
          "89:       return backing_store->get(key);",
          "90:     }",
          "91:     return backing_store->GetHeap()->the_hole_value();",
          "",
          "[Added Lines]",
          "80:     return ElementsAccessorSubclass::GetImpl(",
          "84:   static MaybeObject* GetImpl(BackingStoreClass* backing_store,",
          "85:                               uint32_t key,",
          "86:                               JSObject* obj,",
          "87:                               Object* receiver) {",
          "88:     return (key < ElementsAccessorSubclass::GetCapacityImpl(backing_store))",
          "89:            ? backing_store->get(key)",
          "90:            : backing_store->GetHeap()->the_hole_value();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     }",
          "109: #endif",
          "110:     BackingStoreClass* backing_store = BackingStoreClass::cast(from);",
          "",
          "[Removed Lines]",
          "111:     uint32_t len1 = ElementsAccessorSubclass::GetCapacity(backing_store);",
          "",
          "[Added Lines]",
          "110:     uint32_t len1 = ElementsAccessorSubclass::GetCapacityImpl(backing_store);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     int extra = 0;",
          "119:     for (uint32_t y = 0; y < len1; y++) {",
          "124:         uint32_t key =",
          "126:         MaybeObject* maybe_value =",
          "128:         Object* value;",
          "129:         if (!maybe_value->ToObject(&value)) return maybe_value;",
          "130:         ASSERT(!value->IsTheHole());",
          "",
          "[Removed Lines]",
          "120:       if (ElementsAccessorSubclass::HasElementAtIndex(backing_store,",
          "121:                                                       y,",
          "122:                                                       holder,",
          "123:                                                       receiver)) {",
          "125:             ElementsAccessorSubclass::GetKeyForIndex(backing_store, y);",
          "127:             ElementsAccessorSubclass::Get(backing_store, key, holder, receiver);",
          "",
          "[Added Lines]",
          "119:       if (ElementsAccessorSubclass::HasElementAtIndexImpl(",
          "120:           backing_store, y, holder, receiver)) {",
          "122:             ElementsAccessorSubclass::GetKeyForIndexImpl(backing_store, y);",
          "124:             ElementsAccessorSubclass::GetImpl(backing_store, key,",
          "125:                                               holder, receiver);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:     int index = 0;",
          "157:     for (uint32_t y = 0; y < len1; y++) {",
          "162:         uint32_t key =",
          "164:         MaybeObject* maybe_value =",
          "166:         Object* value;",
          "167:         if (!maybe_value->ToObject(&value)) return maybe_value;",
          "168:         if (!value->IsTheHole() && !HasKey(to, value)) {",
          "",
          "[Removed Lines]",
          "158:       if (ElementsAccessorSubclass::HasElementAtIndex(backing_store,",
          "159:                                                       y,",
          "160:                                                       holder,",
          "161:                                                       receiver)) {",
          "163:             ElementsAccessorSubclass::GetKeyForIndex(backing_store, y);",
          "165:             ElementsAccessorSubclass::Get(backing_store, key, holder, receiver);",
          "",
          "[Added Lines]",
          "156:       if (ElementsAccessorSubclass::HasElementAtIndexImpl(",
          "157:           backing_store, y, holder, receiver)) {",
          "159:             ElementsAccessorSubclass::GetKeyForIndexImpl(backing_store, y);",
          "161:             ElementsAccessorSubclass::GetImpl(backing_store, key,",
          "162:                                               holder, receiver);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "176:   }",
          "178:  protected:",
          "180:     return backing_store->length();",
          "181:   }",
          "183:   virtual uint32_t GetCapacity(FixedArrayBase* backing_store) {",
          "185:         BackingStoreClass::cast(backing_store));",
          "186:   }",
          "192:     uint32_t key =",
          "198:     return !element->IsTheHole();",
          "199:   }",
          "",
          "[Removed Lines]",
          "179:   static uint32_t GetCapacity(BackingStoreClass* backing_store) {",
          "184:     return ElementsAccessorSubclass::GetCapacity(",
          "188:   static bool HasElementAtIndex(BackingStoreClass* backing_store,",
          "189:                                 uint32_t index,",
          "190:                                 JSObject* holder,",
          "191:                                 Object* receiver) {",
          "193:         ElementsAccessorSubclass::GetKeyForIndex(backing_store, index);",
          "194:     MaybeObject* element = ElementsAccessorSubclass::Get(backing_store,",
          "195:                                                          key,",
          "196:                                                          holder,",
          "197:                                                          receiver);",
          "",
          "[Added Lines]",
          "176:   static uint32_t GetCapacityImpl(BackingStoreClass* backing_store) {",
          "181:     return ElementsAccessorSubclass::GetCapacityImpl(",
          "185:   static bool HasElementAtIndexImpl(BackingStoreClass* backing_store,",
          "186:                                     uint32_t index,",
          "187:                                     JSObject* holder,",
          "188:                                     Object* receiver) {",
          "190:         ElementsAccessorSubclass::GetKeyForIndexImpl(backing_store, index);",
          "191:     MaybeObject* element =",
          "192:         ElementsAccessorSubclass::GetImpl(backing_store, key, holder, receiver);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202:                                  uint32_t index,",
          "203:                                  JSObject* holder,",
          "204:                                  Object* receiver) {",
          "206:         BackingStoreClass::cast(backing_store), index, holder, receiver);",
          "207:   }",
          "211:     return index;",
          "212:   }",
          "214:   virtual uint32_t GetKeyForIndex(FixedArrayBase* backing_store,",
          "215:                                               uint32_t index) {",
          "217:         BackingStoreClass::cast(backing_store), index);",
          "218:   }",
          "",
          "[Removed Lines]",
          "205:     return ElementsAccessorSubclass::HasElementAtIndex(",
          "209:   static uint32_t GetKeyForIndex(BackingStoreClass* backing_store,",
          "210:                                  uint32_t index) {",
          "216:     return ElementsAccessorSubclass::GetKeyForIndex(",
          "",
          "[Added Lines]",
          "200:     return ElementsAccessorSubclass::HasElementAtIndexImpl(",
          "204:   static uint32_t GetKeyForIndexImpl(BackingStoreClass* backing_store,",
          "205:                                      uint32_t index) {",
          "211:     return ElementsAccessorSubclass::GetKeyForIndexImpl(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "297:     return obj->GetHeap()->true_value();",
          "298:   }",
          "304:     return !backing_store->is_the_hole(index);",
          "305:   }",
          "306: };",
          "",
          "[Removed Lines]",
          "300:   static bool HasElementAtIndex(FixedDoubleArray* backing_store,",
          "301:                                 uint32_t index,",
          "302:                                 JSObject* holder,",
          "303:                                 Object* receiver) {",
          "",
          "[Added Lines]",
          "295:   static bool HasElementAtIndexImpl(FixedDoubleArray* backing_store,",
          "296:                                     uint32_t index,",
          "297:                                     JSObject* holder,",
          "298:                                     Object* receiver) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "316:   friend class ElementsAccessorBase<ExternalElementsAccessorSubclass,",
          "317:                                     ExternalArray>;",
          "328:   }",
          "330:   virtual MaybeObject* Delete(JSObject* obj,",
          "",
          "[Removed Lines]",
          "319:   static MaybeObject* Get(ExternalArray* backing_store,",
          "320:                           uint32_t key,",
          "321:                           JSObject* obj,",
          "322:                           Object* receiver) {",
          "323:     if (key < ExternalElementsAccessorSubclass::GetCapacity(backing_store)) {",
          "324:       return backing_store->get(key);",
          "325:     } else {",
          "326:       return backing_store->GetHeap()->undefined_value();",
          "327:     }",
          "",
          "[Added Lines]",
          "314:   static MaybeObject* GetImpl(ExternalArray* backing_store,",
          "315:                               uint32_t key,",
          "316:                               JSObject* obj,",
          "317:                               Object* receiver) {",
          "318:     return",
          "319:         key < ExternalElementsAccessorSubclass::GetCapacityImpl(backing_store)",
          "320:         ? backing_store->get(key)",
          "321:         : backing_store->GetHeap()->undefined_value();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "449:     return DeleteCommon(obj, key, mode);",
          "450:   }",
          "456:     int entry = backing_store->FindEntry(key);",
          "457:     if (entry != SeededNumberDictionary::kNotFound) {",
          "458:       Object* element = backing_store->ValueAt(entry);",
          "",
          "[Removed Lines]",
          "452:   static MaybeObject* Get(SeededNumberDictionary* backing_store,",
          "453:                           uint32_t key,",
          "454:                           JSObject* obj,",
          "455:                           Object* receiver) {",
          "",
          "[Added Lines]",
          "446:   static MaybeObject* GetImpl(SeededNumberDictionary* backing_store,",
          "447:                               uint32_t key,",
          "448:                               JSObject* obj,",
          "449:                               Object* receiver) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "469:     return obj->GetHeap()->the_hole_value();",
          "470:   }",
          "474:     Object* key = dict->KeyAt(index);",
          "475:     return Smi::cast(key)->value();",
          "476:   }",
          "",
          "[Removed Lines]",
          "472:   static uint32_t GetKeyForIndex(SeededNumberDictionary* dict,",
          "473:                                  uint32_t index) {",
          "",
          "[Added Lines]",
          "466:   static uint32_t GetKeyForIndexImpl(SeededNumberDictionary* dict,",
          "467:                                      uint32_t index) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "484:   friend class ElementsAccessorBase<NonStrictArgumentsElementsAccessor,",
          "485:                                     FixedArray>;",
          "491:     Object* probe = GetParameterMapArg(parameter_map, key);",
          "492:     if (!probe->IsTheHole()) {",
          "493:       Context* context = Context::cast(parameter_map->get(0));",
          "",
          "[Removed Lines]",
          "487:   static MaybeObject* Get(FixedArray* parameter_map,",
          "488:                           uint32_t key,",
          "489:                           JSObject* obj,",
          "490:                           Object* receiver) {",
          "",
          "[Added Lines]",
          "481:   static MaybeObject* GetImpl(FixedArray* parameter_map,",
          "482:                               uint32_t key,",
          "483:                               JSObject* obj,",
          "484:                               Object* receiver) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "526:     return obj->GetHeap()->true_value();",
          "527:   }",
          "530:     FixedArrayBase* arguments = FixedArrayBase::cast(parameter_map->get(1));",
          "531:     return Max(static_cast<uint32_t>(parameter_map->length() - 2),",
          "532:                ForArray(arguments)->GetCapacity(arguments));",
          "533:   }",
          "537:     return index;",
          "538:   }",
          "544:     Object* probe = GetParameterMapArg(parameter_map, index);",
          "545:     if (!probe->IsTheHole()) {",
          "546:       return true;",
          "",
          "[Removed Lines]",
          "529:   static uint32_t GetCapacity(FixedArray* parameter_map) {",
          "535:   static uint32_t GetKeyForIndex(FixedArray* dict,",
          "536:                                  uint32_t index) {",
          "540:   static bool HasElementAtIndex(FixedArray* parameter_map,",
          "541:                                 uint32_t index,",
          "542:                                 JSObject* holder,",
          "543:                                 Object* receiver) {",
          "",
          "[Added Lines]",
          "523:   static uint32_t GetCapacityImpl(FixedArray* parameter_map) {",
          "529:   static uint32_t GetKeyForIndexImpl(FixedArray* dict,",
          "530:                                      uint32_t index) {",
          "534:   static bool HasElementAtIndexImpl(FixedArray* parameter_map,",
          "535:                                     uint32_t index,",
          "536:                                     JSObject* holder,",
          "537:                                     Object* receiver) {",
          "",
          "---------------"
        ],
        "deps/v8/src/globals.h||deps/v8/src/globals.h": [
          "File: deps/v8/src/globals.h -> deps/v8/src/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "255: const int kBinary32MantissaBits = 23;",
          "256: const int kBinary32ExponentShift = 23;",
          "260: typedef uint16_t uc16;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: const uint64_t kQuietNaNMask = static_cast<uint64_t>(0xfff) << 51;",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10006: template MaybeObject* Dictionary<UnseededNumberDictionaryShape, uint32_t>::",
          "10007:     AtPut(uint32_t, Object*);",
          "10009: template Object* Dictionary<UnseededNumberDictionaryShape, uint32_t>::",
          "10010:     SlowReverseLookup(Object* value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10009: template Object* Dictionary<SeededNumberDictionaryShape, uint32_t>::",
          "10010:     SlowReverseLookup(Object* value);",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.h||deps/v8/src/objects.h": [
          "File: deps/v8/src/objects.h -> deps/v8/src/objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "986:   void SmiVerify();",
          "987: #endif",
          "990:   static const int kMaxValue = -(kMinValue + 1);",
          "992:  private:",
          "",
          "[Removed Lines]",
          "989:   static const int kMinValue = (-1 << (kSmiValueSize - 1));",
          "",
          "[Added Lines]",
          "989:   static const int kMinValue =",
          "990:       (static_cast<unsigned int>(-1)) << (kSmiValueSize - 1);",
          "",
          "---------------"
        ],
        "deps/v8/src/v8globals.h||deps/v8/src/v8globals.h": [
          "File: deps/v8/src/v8globals.h -> deps/v8/src/v8globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: const int kProcessorCacheLineSize = 64;",
          "106: const uint32_t kQuietNaNHighBitsMask = 0xfff << (51 - 32);",
          "",
          "[Removed Lines]",
          "104: const uint64_t kQuietNaNMask = static_cast<uint64_t>(0xfff) << 51;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/version.cc||deps/v8/src/version.cc": [
          "File: deps/v8/src/version.cc -> deps/v8/src/version.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define MAJOR_VERSION     3",
          "36: #define MINOR_VERSION     6",
          "37: #define BUILD_NUMBER      6",
          "41: #define IS_CANDIDATE_VERSION 0",
          "",
          "[Removed Lines]",
          "38: #define PATCH_LEVEL       20",
          "",
          "[Added Lines]",
          "38: #define PATCH_LEVEL       24",
          "",
          "---------------"
        ],
        "deps/v8/tools/gyp/v8.gyp||deps/v8/tools/gyp/v8.gyp": [
          "File: deps/v8/tools/gyp/v8.gyp -> deps/v8/tools/gyp/v8.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "641:                 ],",
          "642:               }",
          "643:             ],",
          "651:             ['OS==\"mac\"', {",
          "652:               'sources': [",
          "653:                 '../../src/platform-macos.cc',",
          "",
          "[Removed Lines]",
          "644:             ['OS==\"solaris\"', {",
          "645:                 'sources': [",
          "646:                   '../../src/platform-solaris.cc',",
          "647:                   '../../src/platform-posix.cc'",
          "648:                 ],",
          "649:               }",
          "650:             ],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d15bfc04cde2bbfb2ce534639255dfcdab3cfcb3",
      "candidate_info": {
        "commit_hash": "d15bfc04cde2bbfb2ce534639255dfcdab3cfcb3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d15bfc04cde2bbfb2ce534639255dfcdab3cfcb3",
        "files": [
          "lib/path.js"
        ],
        "message": "path: small speed improvements",
        "before_after_code_files": [
          "lib/path.js||lipath.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/path.js||lipath.js": [
          "File: lib/path.js -> lipath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   var up = 0;",
          "34:   for (var i = parts.length - 1; i >= 0; i--) {",
          "35:     var last = parts[i];",
          "37:       parts.splice(i, 1);",
          "38:     } else if (last === '..') {",
          "39:       parts.splice(i, 1);",
          "",
          "[Removed Lines]",
          "36:     if (last == '.') {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:         path = process.env['=' + resolvedDevice];",
          "105:             resolvedDevice.toLowerCase() + '\\\\') {",
          "106:           path = resolvedDevice + '\\\\';",
          "107:         }",
          "",
          "[Removed Lines]",
          "104:         if (!path || path.slice(0, 3).toLowerCase() !==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:       return p && typeof p === 'string';",
          "192:     }",
          "195:     var joined = paths.join('\\\\');",
          "200:     if (/^[\\\\\\/]{2}/.test(joined) && !/^[\\\\\\/]{2}/.test(paths[0])) {",
          "202:     }",
          "204:     return exports.normalize(joined);",
          "",
          "[Removed Lines]",
          "194:     var paths = Array.prototype.slice.call(arguments, 0).filter(f);",
          "201:       joined = joined.slice(1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "308:   exports.normalize = function(path) {",
          "309:     var isAbsolute = path.charAt(0) === '/',",
          "313:     path = normalizeArray(path.split('/').filter(function(p) {",
          "",
          "[Removed Lines]",
          "310:         trailingSlash = path.slice(-1) === '/';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "394:   if (dir) {",
          "397:   }",
          "399:   return root + dir;",
          "",
          "[Removed Lines]",
          "396:     dir = dir.substring(0, dir.length - 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "435:     var resolvedPath = exports.resolve(path);",
          "440:       return '\\\\\\\\?\\\\' + resolvedPath;",
          "444:       return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);",
          "",
          "[Removed Lines]",
          "437:     if (resolvedPath.match(/^[a-zA-Z]\\:\\\\/)) {",
          "441:     } else if (resolvedPath.match(/^\\\\\\\\[^?.]/)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "450:   exports._makeLong = function(path) {",
          "451:     return path;",
          "452:   };",
          "",
          "[Removed Lines]",
          "453: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0544a586ca6b6b900a42e164033dbf350765700a",
      "candidate_info": {
        "commit_hash": "0544a586ca6b6b900a42e164033dbf350765700a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0544a586ca6b6b900a42e164033dbf350765700a",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.08.07, Version 0.8.6 (Stable)\n\n* npm: Upgrade to v1.1.48\n\n* Add 'make binary' to build binary tarballs for all Unixes (Nathan Rajlich)\n\n* zlib: Emit 'close' on destroy(). (Dominic Tarr)\n\n* child_process: Fix stdout=null when stdio=['pipe'] (Tyler Neylon)\n\n* installer: prevent ETXTBSY errors (Ben Noordhuis)\n\n* installer: honor --without-npm, default install path (Ben Noordhuis)\n\n* net: make pause work with connecting sockets (Bert Belder)\n\n* installer: fix cross-compile installs (Ben Noordhuis)\n\n* net: fix .listen({fd:0}) (Ben Noordhuis)\n\n* windows: map WSANO_DATA to UV_ENOENT (Bert Belder)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "27: #define NODE_PATCH_VERSION 6",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de5e3f6a6f5eece5a6927ef17c8bf836c4d0779d",
      "candidate_info": {
        "commit_hash": "de5e3f6a6f5eece5a6927ef17c8bf836c4d0779d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/de5e3f6a6f5eece5a6927ef17c8bf836c4d0779d",
        "files": [
          "src/node_http_parser.cc",
          "test/simple/test-http-patch.js",
          "test/simple/test-http-request-methods.js"
        ],
        "message": "http: support PURGE request method",
        "before_after_code_files": [
          "src/node_http_parser.cc||src/node_http_parser.cc",
          "test/simple/test-http-patch.js||test/simple/test-http-request-methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ],
          "candidate": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/node_http_parser.cc||src/node_http_parser.cc": [
          "File: src/node_http_parser.cc -> src/node_http_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: static Persistent<String> get_sym;",
          "61: static Persistent<String> head_sym;",
          "62: static Persistent<String> post_sym;",
          "63: static Persistent<String> put_sym;",
          "64: static Persistent<String> connect_sym;",
          "65: static Persistent<String> options_sym;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: static Persistent<String> purge_sym;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     case HTTP_GET:        return get_sym;",
          "127:     case HTTP_HEAD:       return head_sym;",
          "128:     case HTTP_POST:       return post_sym;",
          "129:     case HTTP_PUT:        return put_sym;",
          "130:     case HTTP_CONNECT:    return connect_sym;",
          "131:     case HTTP_OPTIONS:    return options_sym;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     case HTTP_PURGE:      return purge_sym;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "613:   get_sym = NODE_PSYMBOL(\"GET\");",
          "614:   head_sym = NODE_PSYMBOL(\"HEAD\");",
          "615:   post_sym = NODE_PSYMBOL(\"POST\");",
          "616:   put_sym = NODE_PSYMBOL(\"PUT\");",
          "617:   connect_sym = NODE_PSYMBOL(\"CONNECT\");",
          "618:   options_sym = NODE_PSYMBOL(\"OPTIONS\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618:   purge_sym = NODE_PSYMBOL(\"PURGE\");",
          "",
          "---------------"
        ],
        "test/simple/test-http-patch.js||test/simple/test-http-request-methods.js": [
          "File: test/simple/test-http-patch.js -> test/simple/test-http-request-methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var net = require('net');",
          "25: var http = require('http');",
          "61:   });",
          "68: });",
          "",
          "[Removed Lines]",
          "29: var server_response = '';",
          "30: var received_method = null;",
          "32: var server = http.createServer(function(req, res) {",
          "33:   received_method = req.method;",
          "34:   res.writeHead(200, {'Content-Type': 'text/plain'});",
          "35:   res.write('hello ');",
          "36:   res.write('world\\n');",
          "37:   res.end();",
          "38: });",
          "39: server.listen(common.PORT);",
          "41: server.on('listening', function() {",
          "42:   var c = net.createConnection(common.PORT);",
          "44:   c.setEncoding('utf8');",
          "46:   c.on('connect', function() {",
          "47:     c.write('PATCH / HTTP/1.0\\r\\n\\r\\n');",
          "48:   });",
          "50:   c.on('data', function(chunk) {",
          "51:     console.log(chunk);",
          "52:     server_response += chunk;",
          "53:   });",
          "55:   c.on('end', function() {",
          "56:     c.end();",
          "57:   });",
          "59:   c.on('close', function() {",
          "60:     server.close();",
          "62: });",
          "64: process.on('exit', function() {",
          "65:   var m = server_response.split('\\r\\n\\r\\n');",
          "66:   assert.equal(m[1], 'hello world\\n');",
          "67:   assert.equal(received_method, 'PATCH');",
          "",
          "[Added Lines]",
          "29: ['PATCH', 'PURGE'].forEach(function(method, index) {",
          "30:   var port = common.PORT + index;",
          "32:   var server_response = '';",
          "33:   var received_method = null;",
          "35:   var server = http.createServer(function(req, res) {",
          "36:     received_method = req.method;",
          "37:     res.writeHead(200, {'Content-Type': 'text/plain'});",
          "38:     res.write('hello ');",
          "39:     res.write('world\\n');",
          "40:     res.end();",
          "41:   });",
          "42:   server.listen(port);",
          "44:   server.on('listening', function() {",
          "45:     var c = net.createConnection(port);",
          "47:     c.setEncoding('utf8');",
          "49:     c.on('connect', function() {",
          "50:       c.write(method + ' / HTTP/1.0\\r\\n\\r\\n');",
          "51:     });",
          "53:     c.on('data', function(chunk) {",
          "54:       console.log(chunk);",
          "55:       server_response += chunk;",
          "56:     });",
          "58:     c.on('end', function() {",
          "59:       c.end();",
          "60:     });",
          "62:     c.on('close', function() {",
          "63:       server.close();",
          "64:     });",
          "67:   process.on('exit', function() {",
          "68:     var m = server_response.split('\\r\\n\\r\\n');",
          "69:     assert.equal(m[1], 'hello world\\n');",
          "70:     assert.equal(received_method, method);",
          "71:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd8f82c007bf316fcd857da1e00bfe358df7af44",
      "candidate_info": {
        "commit_hash": "cd8f82c007bf316fcd857da1e00bfe358df7af44",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/cd8f82c007bf316fcd857da1e00bfe358df7af44",
        "files": [
          "lib/http.js",
          "test/gc/test-http-client-timeout.js"
        ],
        "message": "Fix incorrect merge choices",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/gc/test-http-client-timeout.js||test/gc/test-http-client-timeout.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: function parserOnBody(b, start, len) {",
          "117:   var parser = this;",
          "118:   var slice = b.slice(start, start + len);",
          "121: }",
          "123: function parserOnMessageComplete() {",
          "",
          "[Removed Lines]",
          "120:   parser.incoming._emitData(slice);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1263:   if (req) {",
          "1264:     req.parser = null;",
          "1265:   }",
          "1269: ClientRequest.prototype.onSocket = function(socket) {",
          "",
          "[Removed Lines]",
          "1266: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1377:     var closeListener = function() {",
          "1378:       debug('HTTP socket close');",
          "1379:       req.emit('close');",
          "1380:       if (req.res && req.res.readable) {",
          "1382:         req.res.emit('aborted');",
          "1383:         req.res._emitPending(function() {",
          "1386:         });",
          "1387:       } else if (!req.res && !req._hadError) {",
          "",
          "[Removed Lines]",
          "1384:           req.res._emitEnd();",
          "1385:           req.res.emit('close');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1532:   this._deferToConnect('setKeepAlive', arguments);",
          "1533: };",
          "1539: };",
          "1541: exports.request = function(options, cb) {",
          "",
          "[Removed Lines]",
          "1535: ClientRequest.prototype.clearTimeout = function() {",
          "1536:   var args = Array.prototype.slice.call(arguments, 0);",
          "1537:   args.unshift(0);",
          "1538:   this._deferToConnect('setTimeout', args);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gc/test-http-client-timeout.js||test/gc/test-http-client-timeout.js": [
          "File: test/gc/test-http-client-timeout.js -> test/gc/test-http-client-timeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     done    = 0,",
          "14:     count   = 0,",
          "15:     countGC = 0,",
          "17:     common = require('../common.js'),",
          "18:     assert = require('assert'),",
          "19:     PORT = common.PORT;",
          "",
          "[Removed Lines]",
          "16:     todo    = 500,",
          "",
          "[Added Lines]",
          "16:     todo    = 400,",
          "",
          "---------------"
        ]
      }
    }
  ]
}