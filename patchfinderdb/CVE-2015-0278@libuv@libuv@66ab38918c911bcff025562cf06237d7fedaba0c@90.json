{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97fc348716fdd520d6ad067eafe03e93237c9728",
      "candidate_info": {
        "commit_hash": "97fc348716fdd520d6ad067eafe03e93237c9728",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/97fc348716fdd520d6ad067eafe03e93237c9728",
        "files": [
          "src/win/pipe.c"
        ],
        "message": "windows: Remove unused variable from uv__pipe_insert_pending_socket",
        "before_after_code_files": [
          "src/win/pipe.c||src/win/pipe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1375: void uv__pipe_insert_pending_socket(uv_pipe_t* handle,",
          "1376:                                     WSAPROTOCOL_INFOW* info,",
          "1377:                                     int tcp_connection) {",
          "1379:   uv__ipc_queue_item_t* item;",
          "1381:   item = (uv__ipc_queue_item_t*) malloc(sizeof(*item));",
          "",
          "[Removed Lines]",
          "1378:   WSAPROTOCOL_INFOW* socket_info;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08c6ddeefb9c23c21a696a069a347f0617a62899",
      "candidate_info": {
        "commit_hash": "08c6ddeefb9c23c21a696a069a347f0617a62899",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/08c6ddeefb9c23c21a696a069a347f0617a62899",
        "files": [
          "include/uv.h",
          "src/uv-common.c",
          "test/benchmark-udp-pummel.c",
          "test/echo-server.c",
          "test/test-getsockname.c",
          "test/test-ref.c",
          "test/test-udp-dgram-too-big.c",
          "test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c",
          "test/test-udp-send-and-recv.c"
        ],
        "message": "include: merge uv_udp_send and uv_udp_send6\n\nMerge uv_udp_send6() into uv_udp_send().  uv_udp_send() now takes a\nconst struct sockaddr*.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c",
          "test/echo-server.c||test/echo-server.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ref.c||test/test-ref.c",
          "test/test-udp-dgram-too-big.c||test/test-udp-dgram-too-big.c",
          "test/test-udp-ipv6.c||test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c||test/test-udp-open.c",
          "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:                           uv_udp_t* handle,",
          "996:                           const uv_buf_t bufs[],",
          "997:                           unsigned int nbufs,",
          "999:                           uv_udp_send_cb send_cb);",
          "",
          "[Removed Lines]",
          "998:                           const struct sockaddr_in* addr,",
          "1016: UV_EXTERN int uv_udp_send6(uv_udp_send_t* req,",
          "1017:                            uv_udp_t* handle,",
          "1018:                            const uv_buf_t bufs[],",
          "1019:                            unsigned int nbufs,",
          "1020:                            const struct sockaddr_in6* addr,",
          "1021:                            uv_udp_send_cb send_cb);",
          "",
          "[Added Lines]",
          "998:                           const struct sockaddr* addr,",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:                 uv_udp_t* handle,",
          "252:                 const uv_buf_t bufs[],",
          "253:                 unsigned int nbufs,",
          "255:                 uv_udp_send_cb send_cb) {",
          "285: }",
          "",
          "[Removed Lines]",
          "254:                 const struct sockaddr_in* addr,",
          "256:   if (handle->type == UV_UDP && addr->sin_family == AF_INET) {",
          "257:     return uv__udp_send(req,",
          "258:                         handle,",
          "259:                         bufs,",
          "260:                         nbufs,",
          "261:                         (const struct sockaddr*) addr,",
          "262:                         sizeof(*addr),",
          "263:                         send_cb);",
          "264:   }",
          "265:   return UV_EINVAL;",
          "266: }",
          "269: int uv_udp_send6(uv_udp_send_t* req,",
          "270:                  uv_udp_t* handle,",
          "271:                  const uv_buf_t bufs[],",
          "272:                  unsigned int nbufs,",
          "273:                  const struct sockaddr_in6* addr,",
          "274:                  uv_udp_send_cb send_cb) {",
          "275:   if (handle->type == UV_UDP && addr->sin6_family == AF_INET6) {",
          "276:     return uv__udp_send(req,",
          "277:                         handle,",
          "278:                         bufs,",
          "279:                         nbufs,",
          "280:                         (const struct sockaddr*) addr,",
          "281:                         sizeof(*addr),",
          "282:                         send_cb);",
          "283:   }",
          "284:   return UV_EINVAL;",
          "",
          "[Added Lines]",
          "254:                 const struct sockaddr* addr,",
          "256:   unsigned int addrlen;",
          "258:   if (handle->type != UV_UDP)",
          "259:     return UV_EINVAL;",
          "261:   if (addr->sa_family == AF_INET)",
          "262:     addrlen = sizeof(struct sockaddr_in);",
          "263:   else if (addr->sa_family == AF_INET6)",
          "264:     addrlen = sizeof(struct sockaddr_in6);",
          "265:   else",
          "266:     return UV_EINVAL;",
          "268:   return uv__udp_send(req, handle, bufs, nbufs, addr, addrlen, send_cb);",
          "",
          "---------------"
        ],
        "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c": [
          "File: test/benchmark-udp-pummel.c -> test/benchmark-udp-pummel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:                           &s->udp_handle,",
          "101:                           bufs,",
          "102:                           ARRAY_SIZE(bufs),",
          "104:                           send_cb));",
          "105:   send_cb_called++;",
          "106: }",
          "",
          "[Removed Lines]",
          "103:                           &s->addr,",
          "",
          "[Added Lines]",
          "103:                           (const struct sockaddr*) &s->addr,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:                             &s->udp_handle,",
          "196:                             bufs,",
          "197:                             ARRAY_SIZE(bufs),",
          "199:                             send_cb));",
          "200:   }",
          "",
          "[Removed Lines]",
          "198:                             &s->addr,",
          "",
          "[Added Lines]",
          "198:                             (const struct sockaddr*) &s->addr,",
          "",
          "---------------"
        ],
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:                     unsigned flags) {",
          "196:   uv_udp_send_t* req;",
          "197:   uv_buf_t sndbuf;",
          "200:   ASSERT(nread > 0);",
          "201:   ASSERT(addr->sa_family == AF_INET);",
          "",
          "[Removed Lines]",
          "198:   int r;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:   ASSERT(req != NULL);",
          "206:   sndbuf = *rcvbuf;",
          "214: }",
          "",
          "[Removed Lines]",
          "207:   r = uv_udp_send(req,",
          "208:                   handle,",
          "209:                   &sndbuf,",
          "210:                   1,",
          "211:                   (const struct sockaddr_in*) addr,",
          "212:                   on_send);",
          "213:   ASSERT(r == 0);",
          "",
          "[Added Lines]",
          "206:   ASSERT(0 == uv_udp_send(req, handle, &sndbuf, 1, addr, on_send));",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:   buf = uv_buf_init(\"PING\", 4);",
          "314:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", server_port, &server_addr));",
          "317:   ASSERT(!r);",
          "318: }",
          "",
          "[Removed Lines]",
          "316:   r = uv_udp_send(&send_req, &udp, &buf, 1, &server_addr, udp_send);",
          "",
          "[Added Lines]",
          "316:   r = uv_udp_send(&send_req,",
          "317:                   &udp,",
          "318:                   &buf,",
          "319:                   1,",
          "320:                   (const struct sockaddr*) &server_addr,",
          "321:                   udp_send);",
          "",
          "---------------"
        ],
        "test/test-ref.c||test/test-ref.c": [
          "File: test/test-ref.c -> test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "328:   uv_udp_init(uv_default_loop(), &h);",
          "330:   uv_unref((uv_handle_t*)&h);",
          "331:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "332:   ASSERT(req_cb_called == 1);",
          "",
          "[Removed Lines]",
          "329:   uv_udp_send(&req, &h, &buf, 1, &addr, (uv_udp_send_cb)req_cb);",
          "",
          "[Added Lines]",
          "329:   uv_udp_send(&req,",
          "330:               &h,",
          "331:               &buf,",
          "332:               1,",
          "333:               (const struct sockaddr*) &addr,",
          "334:               (uv_udp_send_cb) req_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-dgram-too-big.c||test/test-udp-dgram-too-big.c": [
          "File: test/test-udp-dgram-too-big.c -> test/test-udp-dgram-too-big.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   buf = uv_buf_init(dgram, sizeof dgram);",
          "71:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "74:   ASSERT(r == 0);",
          "76:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "73:   r = uv_udp_send(&req_, &handle_, &buf, 1, &addr, send_cb);",
          "",
          "[Added Lines]",
          "73:   r = uv_udp_send(&req_,",
          "74:                   &handle_,",
          "75:                   &buf,",
          "76:                   1,",
          "77:                   (const struct sockaddr*) &addr,",
          "78:                   send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-ipv6.c||test/test-udp-ipv6.c": [
          "File: test/test-udp-ipv6.c -> test/test-udp-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   buf = uv_buf_init(\"PING\", 4);",
          "121:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "124:   ASSERT(r == 0);",
          "126:   r = uv_timer_init(uv_default_loop(), &timeout);",
          "",
          "[Removed Lines]",
          "123:   r = uv_udp_send(&req_, &client, &buf, 1, &addr, send_cb);",
          "",
          "[Added Lines]",
          "123:   r = uv_udp_send(&req_,",
          "124:                   &client,",
          "125:                   &buf,",
          "126:                   1,",
          "127:                   (const struct sockaddr*) &addr,",
          "128:                   send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c": [
          "File: test/test-udp-multicast-join.c -> test/test-udp-multicast-join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   buf = uv_buf_init(\"PING\", 4);",
          "128:   ASSERT(r == 0);",
          "130:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "127:   r = uv_udp_send(&req, &server, &buf, 1, &addr, sv_send_cb);",
          "",
          "[Added Lines]",
          "127:   r = uv_udp_send(&req,",
          "128:                   &server,",
          "129:                   &buf,",
          "130:                   1,",
          "131:                   (const struct sockaddr*) &addr,",
          "132:                   sv_send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c": [
          "File: test/test-udp-multicast-ttl.c -> test/test-udp-multicast-ttl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   buf = uv_buf_init(\"PING\", 4);",
          "74:   ASSERT(0 == uv_ip4_addr(\"239.255.0.1\", TEST_PORT, &addr));",
          "76:   ASSERT(r == 0);",
          "78:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "75:   r = uv_udp_send(&req, &server, &buf, 1, &addr, sv_send_cb);",
          "",
          "[Added Lines]",
          "75:   r = uv_udp_send(&req,",
          "76:                   &server,",
          "77:                   &buf,",
          "78:                   1,",
          "79:                   (const struct sockaddr*) &addr,",
          "80:                   sv_send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-open.c||test/test-udp-open.c": [
          "File: test/test-udp-open.c -> test/test-udp-open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   r = uv_udp_recv_start(&client, alloc_cb, recv_cb);",
          "147:   ASSERT(r == 0);",
          "150:   ASSERT(r == 0);",
          "152:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "149:   r = uv_udp_send(&send_req, &client, &buf, 1, &addr, send_cb);",
          "",
          "[Added Lines]",
          "149:   r = uv_udp_send(&send_req,",
          "150:                   &client,",
          "151:                   &buf,",
          "152:                   1,",
          "153:                   (const struct sockaddr*) &addr,",
          "154:                   send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c": [
          "File: test/test-udp-send-and-recv.c -> test/test-udp-send-and-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   ASSERT(req != NULL);",
          "154:   sndbuf = uv_buf_init(\"PONG\", 4);",
          "161:   ASSERT(r == 0);",
          "163:   sv_recv_cb_called++;",
          "",
          "[Removed Lines]",
          "155:   r = uv_udp_send(req,",
          "156:                   handle,",
          "157:                   &sndbuf,",
          "158:                   1,",
          "159:                   (const struct sockaddr_in*) addr,",
          "160:                   sv_send_cb);",
          "",
          "[Added Lines]",
          "155:   r = uv_udp_send(req, handle, &sndbuf, 1, addr, sv_send_cb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:   buf = uv_buf_init(\"PING\", 4);",
          "193:   ASSERT(r == 0);",
          "195:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "192:   r = uv_udp_send(&req, &client, &buf, 1, &addr, cl_send_cb);",
          "",
          "[Added Lines]",
          "187:   r = uv_udp_send(&req,",
          "188:                   &client,",
          "189:                   &buf,",
          "190:                   1,",
          "191:                   (const struct sockaddr*) &addr,",
          "192:                   cl_send_cb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c11a598d7cac6f450277261d39ce887727a433b2",
      "candidate_info": {
        "commit_hash": "c11a598d7cac6f450277261d39ce887727a433b2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c11a598d7cac6f450277261d39ce887727a433b2",
        "files": [
          "gyp_uv.py"
        ],
        "message": "build: handle platforms without multiprocessing.synchronize",
        "before_after_code_files": [
          "gyp_uv.py||gyp_uv.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "gyp_uv.py||gyp_uv.py": [
          "File: gyp_uv.py -> gyp_uv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import subprocess",
          "7: import sys",
          "9: CC = os.environ.get('CC', 'cc')",
          "10: script_dir = os.path.dirname(__file__)",
          "11: uv_root = os.path.normpath(script_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: try:",
          "10:   import multiprocessing.synchronize",
          "11:   gyp_parallel_support = True",
          "12: except ImportError:",
          "13:   gyp_parallel_support = False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   if not any(a.startswith('-Dcomponent=') for a in args):",
          "95:     args.append('-Dcomponent=static_library')",
          "97:   gyp_args = list(args)",
          "98:   print gyp_args",
          "99:   run_gyp(gyp_args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:   # Some platforms (OpenBSD for example) don't have multiprocessing.synchronize",
          "105:   # so gyp must be run with --no-parallel",
          "106:   if not gyp_parallel_support:",
          "107:     args.append('--no-parallel')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ed6496b9ce416ac4bf1257b1eae06e0d4eb479c",
      "candidate_info": {
        "commit_hash": "4ed6496b9ce416ac4bf1257b1eae06e0d4eb479c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4ed6496b9ce416ac4bf1257b1eae06e0d4eb479c",
        "files": [
          "Makefile.am",
          "src/uv-common.c",
          "test/test-ip4-addr.c",
          "test/test-list.h",
          "uv.gyp"
        ],
        "message": "unix, windows: detect errors in uv_ip4/6_addr",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/uv-common.c||src/uv-common.c",
          "test/test-ip4-addr.c||test/test-ip4-addr.c",
          "test/test-list.h||test/test-list.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:                          test/test-getsockname.c \\",
          "140:                          test/test-hrtime.c \\",
          "141:                          test/test-idle.c \\",
          "142:                          test/test-ip6-addr.c \\",
          "143:                          test/test-ipc-send-recv.c \\",
          "144:                          test/test-ipc.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:                          test/test-ip4-addr.c \\",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   memset(addr, 0, sizeof(*addr));",
          "103:   addr->sin_family = AF_INET;",
          "104:   addr->sin_port = htons(port);",
          "108: }",
          "",
          "[Removed Lines]",
          "106:   addr->sin_addr.s_addr = inet_addr(ip);",
          "107:   return 0;",
          "",
          "[Added Lines]",
          "105:   return uv_inet_pton(AF_INET, ip, &(addr->sin_addr.s_addr));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:   }",
          "141: #endif",
          "147: }",
          "",
          "[Removed Lines]",
          "144:   uv_inet_pton(AF_INET6, ip, &addr->sin6_addr);",
          "146:   return 0;",
          "",
          "[Added Lines]",
          "141:   return uv_inet_pton(AF_INET6, ip, &addr->sin6_addr);",
          "",
          "---------------"
        ],
        "test/test-ip4-addr.c||test/test-ip4-addr.c": [
          "File: test/test-ip4-addr.c -> test/test-ip4-addr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <string.h>",
          "29: TEST_IMPL(ip4_addr) {",
          "31:   struct sockaddr_in addr;",
          "33:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "34:   ASSERT(0 == uv_ip4_addr(\"255.255.255.255\", TEST_PORT, &addr));",
          "35:   ASSERT(UV_EINVAL == uv_ip4_addr(\"255.255.255*000\", TEST_PORT, &addr));",
          "36:   ASSERT(UV_EINVAL == uv_ip4_addr(\"255.255.255.256\", TEST_PORT, &addr));",
          "37:   ASSERT(UV_EINVAL == uv_ip4_addr(\"2555.0.0.0\", TEST_PORT, &addr));",
          "38:   ASSERT(UV_EINVAL == uv_ip4_addr(\"255\", TEST_PORT, &addr));",
          "41:   ASSERT(UV_EAFNOSUPPORT == uv_inet_pton(42, \"127.0.0.1\",",
          "42:     &addr.sin_addr.s_addr));",
          "44:   MAKE_VALGRIND_HAPPY();",
          "45:   return 0;",
          "46: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: TEST_DECLARE   (poll_duplex)",
          "218: TEST_DECLARE   (poll_unidirectional)",
          "219: TEST_DECLARE   (poll_close)",
          "220: TEST_DECLARE   (ip6_addr_link_local)",
          "221: #ifdef _WIN32",
          "222: TEST_DECLARE   (spawn_detect_pipe_name_collisions_on_windows)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: TEST_DECLARE   (ip4_addr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:   TEST_ENTRY  (thread_rwlock)",
          "518:   TEST_ENTRY  (thread_create)",
          "519:   TEST_ENTRY  (dlerror)",
          "520:   TEST_ENTRY  (ip6_addr_link_local)",
          "521: #if 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:   TEST_ENTRY  (ip4_addr)",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:         'test/test-udp-multicast-join.c',",
          "383:         'test/test-dlerror.c',",
          "384:         'test/test-udp-multicast-ttl.c',",
          "385:         'test/test-ip6-addr.c',",
          "386:       ],",
          "387:       'conditions': [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:         'test/test-ip4-addr.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f212ceffae2d952336a6fdbf56331cdd375b2a8b",
      "candidate_info": {
        "commit_hash": "f212ceffae2d952336a6fdbf56331cdd375b2a8b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f212ceffae2d952336a6fdbf56331cdd375b2a8b",
        "files": [
          "include/uv-unix.h"
        ],
        "message": "include: reorder UV_HANDLE_PRIVATE_FIELDS\n\nThe fields for UV_HANDLE_PRIVATE_FIELDS in uv-win.h and uv-unix.h are\nthe same, but in different order. Simply swap them so uv_handle_t are\nthe same on both platforms.\n\nSigned-off-by: Fedor Indutny <fedor@indutny.com>",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   uv_buf_t bufsml[4];                                                         \\",
          "220: #define UV_HANDLE_PRIVATE_FIELDS                                              \\",
          "222:   uv_handle_t* next_closing;                                                  \\",
          "224: #define UV_STREAM_PRIVATE_FIELDS                                              \\",
          "225:   uv_connect_t *connect_req;                                                  \\",
          "",
          "[Removed Lines]",
          "221:   int flags;                                                                  \\",
          "",
          "[Added Lines]",
          "222:   unsigned int flags;                                                         \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}