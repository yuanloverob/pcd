{
  "cve_id": "CVE-2015-5268",
  "cve_desc": "The rating component in Moodle through 2.6.11, 2.7.x before 2.7.10, 2.8.x before 2.8.8, and 2.9.x before 2.9.2 mishandles group-based authorization checks, which allows remote authenticated users to obtain sensitive information by reading a rating value.",
  "repo": "moodle/moodle",
  "patch_hash": "731c2712e746053b1ca06b50118632305b447e02",
  "patch_info": {
    "commit_hash": "731c2712e746053b1ca06b50118632305b447e02",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/731c2712e746053b1ca06b50118632305b447e02",
    "files": [
      "mod/data/lib.php",
      "mod/data/tests/lib_test.php",
      "mod/forum/lib.php",
      "mod/forum/tests/lib_test.php",
      "mod/upgrade.txt",
      "rating/classes/external.php",
      "rating/index.php",
      "rating/tests/externallib_test.php"
    ],
    "message": "MDL-50173 ratings: Use proper checks to ensure ratings are viewable.\n\nMainly to verify groups visibility this new callback has been created.\n\nNote this was originally 3 commits but for amending purposes they have\nbeen squashed.",
    "before_after_code_files": [
      "mod/data/lib.php||mod/data/lib.php",
      "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
      "mod/forum/lib.php||mod/forum/lib.php",
      "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
      "rating/classes/external.php||rating/classes/external.php",
      "rating/index.php||rating/index.php",
      "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
    ]
  },
  "patch_diff": {
    "mod/data/lib.php||mod/data/lib.php": [
      "File: mod/data/lib.php -> mod/data/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1524:     return true;",
      "1525: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1540: function mod_data_rating_can_see_item_ratings($params) {",
      "1541:     global $DB;",
      "1544:     if (!isset($params['component']) || $params['component'] != 'mod_data') {",
      "1545:         throw new rating_exception('invalidcomponent');",
      "1546:     }",
      "1549:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'entry') {",
      "1550:         throw new rating_exception('invalidratingarea');",
      "1551:     }",
      "1553:     if (!isset($params['itemid'])) {",
      "1554:         throw new rating_exception('invaliditemid');",
      "1555:     }",
      "1557:     $datasql = \"SELECT d.id as dataid, d.course, r.groupid",
      "1558:                   FROM {data_records} r",
      "1559:                   JOIN {data} d ON r.dataid = d.id",
      "1560:                  WHERE r.id = :itemid\";",
      "1561:     $dataparams = array('itemid' => $params['itemid']);",
      "1562:     if (!$info = $DB->get_record_sql($datasql, $dataparams)) {",
      "1564:         throw new rating_exception('invaliditemid');",
      "1565:     }",
      "1567:     $course = $DB->get_record('course', array('id' => $info->course), '*', MUST_EXIST);",
      "1568:     $cm = get_coursemodule_from_instance('data', $info->dataid, $course->id, false, MUST_EXIST);",
      "1571:     return groups_group_visible($info->groupid, $course, $cm);",
      "1572: }",
      "",
      "---------------"
    ],
    "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php": [
      "File: mod/data/tests/lib_test.php -> mod/data/tests/lib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:         global $DB;",
      "43:         $this->resetAfterTest();",
      "",
      "[Removed Lines]",
      "38: class data_lib_testcase extends advanced_testcase {",
      "40:     function test_data_delete_record() {",
      "",
      "[Added Lines]",
      "38: class mod_data_lib_testcase extends advanced_testcase {",
      "40:     public function test_data_delete_record() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:         $this->assertEquals($url, $event->get_url());",
      "232:         $this->assertEventContextNotUsed($event);",
      "233:     }",
      "234: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241:     public function test_mod_data_rating_can_see_item_ratings() {",
      "242:         global $DB;",
      "244:         $this->resetAfterTest();",
      "247:         $course = new stdClass();",
      "248:         $course->groupmode = SEPARATEGROUPS;",
      "249:         $course->groupmodeforce = true;",
      "250:         $course = $this->getDataGenerator()->create_course($course);",
      "251:         $data = $this->getDataGenerator()->create_module('data', array('course' => $course->id));",
      "252:         $cm = get_coursemodule_from_instance('data', $data->id);",
      "253:         $context = context_module::instance($cm->id);",
      "256:         $user1 = $this->getDataGenerator()->create_user();",
      "257:         $user2 = $this->getDataGenerator()->create_user();",
      "258:         $user3 = $this->getDataGenerator()->create_user();",
      "259:         $user4 = $this->getDataGenerator()->create_user();",
      "262:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
      "263:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
      "264:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
      "265:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
      "266:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
      "268:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "269:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "270:         groups_add_member($group1, $user1);",
      "271:         groups_add_member($group1, $user2);",
      "272:         groups_add_member($group2, $user3);",
      "273:         groups_add_member($group2, $user4);",
      "276:         $field = data_get_field_new('text', $data);",
      "278:         $fielddetail = new stdClass();",
      "279:         $fielddetail->name = 'Name';",
      "280:         $fielddetail->description = 'Some name';",
      "282:         $field->define_field($fielddetail);",
      "283:         $field->insert_field();",
      "284:         $recordid = data_add_record($data, $group1->id);",
      "286:         $datacontent = array();",
      "287:         $datacontent['fieldid'] = $field->field->id;",
      "288:         $datacontent['recordid'] = $recordid;",
      "289:         $datacontent['content'] = 'Asterix';",
      "290:         $DB->insert_record('data_content', $datacontent);",
      "293:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "294:         $params = array('contextid' => 2,",
      "295:                         'component' => 'mod_data',",
      "296:                         'ratingarea' => 'entry',",
      "297:                         'itemid' => $recordid,",
      "298:                         'scaleid' => 2);",
      "299:         $this->setUser($user1);",
      "300:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "301:         $this->setUser($user2);",
      "302:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "303:         $this->setUser($user3);",
      "304:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
      "305:         $this->setUser($user4);",
      "306:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
      "309:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
      "310:         $this->setUser($user1);",
      "311:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "312:         $this->setUser($user2);",
      "313:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "314:         $this->setUser($user3);",
      "315:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "316:         $this->setUser($user4);",
      "317:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "320:         $course->groupmode = VISIBLEGROUPS;",
      "321:         $DB->update_record('course', $course);",
      "322:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "323:         $this->setUser($user1);",
      "324:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "325:         $this->setUser($user2);",
      "326:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "327:         $this->setUser($user3);",
      "328:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "329:         $this->setUser($user4);",
      "330:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "332:     }",
      "",
      "---------------"
    ],
    "mod/forum/lib.php||mod/forum/lib.php": [
      "File: mod/forum/lib.php -> mod/forum/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3664:     return true;",
      "3665: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3680: function mod_forum_rating_can_see_item_ratings($params) {",
      "3681:     global $DB, $USER;",
      "3684:     if (!isset($params['component']) || $params['component'] != 'mod_forum') {",
      "3685:         throw new rating_exception('invalidcomponent');",
      "3686:     }",
      "3689:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'post') {",
      "3690:         throw new rating_exception('invalidratingarea');",
      "3691:     }",
      "3693:     if (!isset($params['itemid'])) {",
      "3694:         throw new rating_exception('invaliditemid');",
      "3695:     }",
      "3697:     $post = $DB->get_record('forum_posts', array('id' => $params['itemid']), '*', MUST_EXIST);",
      "3698:     $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion), '*', MUST_EXIST);",
      "3699:     $forum = $DB->get_record('forum', array('id' => $discussion->forum), '*', MUST_EXIST);",
      "3700:     $course = $DB->get_record('course', array('id' => $forum->course), '*', MUST_EXIST);",
      "3701:     $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id , false, MUST_EXIST);",
      "3704:     if (!forum_user_can_see_post($forum, $discussion, $post, $USER, $cm)) {",
      "3705:         return false;",
      "3706:     }",
      "3707:     return true;",
      "3708: }",
      "",
      "---------------"
    ],
    "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php": [
      "File: mod/forum/tests/lib_test.php -> mod/forum/tests/lib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: global $CFG;",
      "28: require_once($CFG->dirroot . '/mod/forum/lib.php');",
      "30: class mod_forum_lib_testcase extends advanced_testcase {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: require_once($CFG->dirroot . '/rating/lib.php');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1394:         return $discussion;",
      "1395:     }",
      "1397: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1404:     public function test_mod_forum_rating_can_see_item_ratings() {",
      "1405:         global $DB;",
      "1407:         $this->resetAfterTest();",
      "1410:         $course = new stdClass();",
      "1411:         $course->groupmode = SEPARATEGROUPS;",
      "1412:         $course->groupmodeforce = true;",
      "1413:         $course = $this->getDataGenerator()->create_course($course);",
      "1414:         $forum = $this->getDataGenerator()->create_module('forum', array('course' => $course->id));",
      "1415:         $generator = self::getDataGenerator()->get_plugin_generator('mod_forum');",
      "1416:         $cm = get_coursemodule_from_instance('forum', $forum->id);",
      "1417:         $context = context_module::instance($cm->id);",
      "1420:         $user1 = $this->getDataGenerator()->create_user();",
      "1421:         $user2 = $this->getDataGenerator()->create_user();",
      "1422:         $user3 = $this->getDataGenerator()->create_user();",
      "1423:         $user4 = $this->getDataGenerator()->create_user();",
      "1426:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
      "1427:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
      "1428:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
      "1429:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
      "1430:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
      "1432:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "1433:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "1434:         groups_add_member($group1, $user1);",
      "1435:         groups_add_member($group1, $user2);",
      "1436:         groups_add_member($group2, $user3);",
      "1437:         groups_add_member($group2, $user4);",
      "1439:         $record = new stdClass();",
      "1440:         $record->course = $forum->course;",
      "1441:         $record->forum = $forum->id;",
      "1442:         $record->userid = $user1->id;",
      "1443:         $record->groupid = $group1->id;",
      "1444:         $discussion = $generator->create_discussion($record);",
      "1447:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
      "1449:         $ratingoptions = new stdClass;",
      "1450:         $ratingoptions->context = $context;",
      "1451:         $ratingoptions->ratingarea = 'post';",
      "1452:         $ratingoptions->component = 'mod_forum';",
      "1453:         $ratingoptions->itemid  = $post->id;",
      "1454:         $ratingoptions->scaleid = 2;",
      "1455:         $ratingoptions->userid  = $user2->id;",
      "1456:         $rating = new rating($ratingoptions);",
      "1457:         $rating->update_rating(2);",
      "1460:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "1461:         $params = array('contextid' => 2,",
      "1462:                         'component' => 'mod_forum',",
      "1463:                         'ratingarea' => 'post',",
      "1464:                         'itemid' => $post->id,",
      "1465:                         'scaleid' => 2);",
      "1466:         $this->setUser($user1);",
      "1467:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1468:         $this->setUser($user2);",
      "1469:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1470:         $this->setUser($user3);",
      "1471:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
      "1472:         $this->setUser($user4);",
      "1473:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
      "1476:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
      "1477:         $this->setUser($user1);",
      "1478:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1479:         $this->setUser($user2);",
      "1480:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1481:         $this->setUser($user3);",
      "1482:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1483:         $this->setUser($user4);",
      "1484:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1487:         $course->groupmode = VISIBLEGROUPS;",
      "1488:         $DB->update_record('course', $course);",
      "1489:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "1490:         $this->setUser($user1);",
      "1491:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1492:         $this->setUser($user2);",
      "1493:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1494:         $this->setUser($user3);",
      "1495:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1496:         $this->setUser($user4);",
      "1497:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1499:     }",
      "",
      "---------------"
    ],
    "rating/classes/external.php||rating/classes/external.php": [
      "File: rating/classes/external.php -> rating/classes/external.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "96:         self::validate_context($context);",
      "100:             throw new moodle_exception('noviewrate', 'rating');",
      "101:         }",
      "",
      "[Removed Lines]",
      "99:         if (!has_capability('moodle/rating:view', $context)) {",
      "",
      "[Added Lines]",
      "99:         $callbackparams = array('contextid' => $context->id,",
      "100:                         'component' => $component,",
      "101:                         'ratingarea' => $ratingarea,",
      "102:                         'itemid' => $itemid,",
      "103:                         'scaleid' => $scaleid);",
      "104:         if (!has_capability('moodle/rating:view', $context) ||",
      "105:                 !component_callback($component, 'rating_can_see_item_ratings', array($callbackparams), true)) {",
      "",
      "---------------"
    ],
    "rating/index.php||rating/index.php": [
      "File: rating/index.php -> rating/index.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:     $PAGE->set_pagelayout('popup');",
      "56: }",
      "59:     print_error('noviewrate', 'rating');",
      "60: }",
      "",
      "[Removed Lines]",
      "58: if (!has_capability('moodle/rating:view', $context)) {",
      "",
      "[Added Lines]",
      "58: $params = array('contextid' => $contextid,",
      "59:                 'component' => $component,",
      "60:                 'ratingarea' => $ratingarea,",
      "61:                 'itemid' => $itemid,",
      "62:                 'scaleid' => $scaleid);",
      "63: if (!has_capability('moodle/rating:view', $context) ||",
      "64:         !component_callback($component, 'rating_can_see_item_ratings', array($params), true)) {",
      "",
      "---------------"
    ],
    "rating/tests/externallib_test.php||rating/tests/externallib_test.php": [
      "File: rating/tests/externallib_test.php -> rating/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:         $student = $this->getDataGenerator()->create_user();",
      "54:         $teacher1 = $this->getDataGenerator()->create_user();",
      "55:         $teacher2 = $this->getDataGenerator()->create_user();",
      "56:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
      "57:         $teacherrole = $DB->get_record('role', array('shortname' => 'teacher'));",
      "59:         $this->getDataGenerator()->enrol_user($student->id,  $course->id, $studentrole->id);",
      "60:         $this->getDataGenerator()->enrol_user($teacher1->id, $course->id, $teacherrole->id);",
      "61:         $this->getDataGenerator()->enrol_user($teacher2->id, $course->id, $teacherrole->id);",
      "64:         $record = new stdClass();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56:         $teacher3 = $this->getDataGenerator()->create_user();",
      "59:         unassign_capability('moodle/site:accessallgroups', $teacherrole->id);",
      "64:         $this->getDataGenerator()->enrol_user($teacher3->id, $course->id, $teacherrole->id);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:         $record->userid = $student->id;",
      "77:         $record->forum = $forum->id;",
      "78:         $discussion = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
      "81:         $rating1 = new stdClass();",
      "82:         $rating1->contextid = $contextid;",
      "83:         $rating1->component = 'mod_forum';",
      "84:         $rating1->ratingarea = 'post';",
      "86:         $rating1->rating = 90;",
      "87:         $rating1->scaleid = 100;",
      "88:         $rating1->userid = $teacher1->id;",
      "",
      "[Removed Lines]",
      "85:         $rating1->itemid = $discussion->id;",
      "",
      "[Added Lines]",
      "83:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
      "90:         $rating1->itemid = $post->id;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:         $rating2->contextid = $contextid;",
      "96:         $rating2->component = 'mod_forum';",
      "97:         $rating2->ratingarea = 'post';",
      "99:         $rating2->rating = 95;",
      "100:         $rating2->scaleid = 100;",
      "101:         $rating2->userid = $teacher2->id;",
      "",
      "[Removed Lines]",
      "98:         $rating2->itemid = $discussion->id;",
      "",
      "[Added Lines]",
      "103:         $rating2->itemid = $post->id;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:         $this->setUser($teacher1);",
      "114:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "115:         $this->assertCount(2, $ratings['ratings']);",
      "",
      "[Removed Lines]",
      "112:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
      "",
      "[Added Lines]",
      "117:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "128:         $this->setUser($student);",
      "132:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "133:         $this->assertCount(2, $ratings['ratings']);",
      "148:         try {",
      "150:             $this->fail('Exception expected due invalid context.');",
      "151:         } catch (invalid_parameter_exception $e) {",
      "152:             $this->assertEquals('invalidparameter', $e->errorcode);",
      "153:         }",
      "154:     }",
      "155: }",
      "",
      "[Removed Lines]",
      "130:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
      "136:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', 0, 100, '');",
      "138:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "139:         $this->assertCount(0, $ratings['ratings']);",
      "142:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'xyz', $discussion->id, 100, '');",
      "144:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "145:         $this->assertCount(0, $ratings['ratings']);",
      "149:             $ratings = core_rating_external::get_item_ratings('module', 0, 'mod_forum', 'post', $discussion->id, 100, '');",
      "",
      "[Added Lines]",
      "135:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "141:         try {",
      "142:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', 0, 100, '');",
      "143:             $this->fail('Exception expected due invalid itemid.');",
      "144:         } catch (moodle_exception $e) {",
      "145:             $this->assertEquals('invalidrecord', $e->errorcode);",
      "146:         }",
      "149:         try {",
      "150:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'xyz', $post->id, 100, '');",
      "151:             $this->fail('Exception expected due invalid rating area.');",
      "152:         } catch (moodle_exception $e) {",
      "153:             $this->assertEquals('invalidratingarea', $e->errorcode);",
      "154:         }",
      "158:             $ratings = core_rating_external::get_item_ratings('module', 0, 'mod_forum', 'post', $post->id, 100, '');",
      "165:         set_coursemodule_groupmode($forum->cmid, SEPARATEGROUPS);",
      "166:         $group = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "167:         groups_add_member($group, $teacher1);",
      "169:         $discussion->groupid = $group->id;",
      "170:         $DB->update_record('forum_discussions', $discussion);",
      "173:         $this->setUser($teacher1);",
      "174:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "176:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "177:         $this->assertCount(2, $ratings['ratings']);",
      "179:         $this->setUser($teacher3);",
      "180:         try {",
      "181:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "182:             $this->fail('Exception expected due invalid group permissions.');",
      "183:         } catch (moodle_exception $e) {",
      "184:             $this->assertEquals('noviewrate', $e->errorcode);",
      "185:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a955fcb6086540bb3affccd6b5f766b931675d63",
      "candidate_info": {
        "commit_hash": "a955fcb6086540bb3affccd6b5f766b931675d63",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a955fcb6086540bb3affccd6b5f766b931675d63",
        "files": [
          "rating/tests/externallib_test.php"
        ],
        "message": "MDL-49347 rating: Unit tests for core_rating_get_item_ratings",
        "before_after_code_files": [
          "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
          ],
          "candidate": [
            "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "rating/tests/externallib_test.php||rating/tests/externallib_test.php": [
          "File: rating/tests/externallib_test.php -> rating/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: global $CFG;",
          "30: require_once($CFG->dirroot . '/webservice/tests/helpers.php');",
          "31: require_once($CFG->dirroot . '/rating/lib.php');",
          "41: class core_rating_externallib_testcase extends externallib_advanced_testcase {",
          "46:     public function test_get_item_ratings() {",
          "48:         global $DB, $USER;",
          "50:         $this->resetAfterTest(true);",
          "52:         $course = self::getDataGenerator()->create_course();",
          "53:         $student = $this->getDataGenerator()->create_user();",
          "54:         $teacher1 = $this->getDataGenerator()->create_user();",
          "55:         $teacher2 = $this->getDataGenerator()->create_user();",
          "56:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
          "57:         $teacherrole = $DB->get_record('role', array('shortname' => 'teacher'));",
          "59:         $this->getDataGenerator()->enrol_user($student->id,  $course->id, $studentrole->id);",
          "60:         $this->getDataGenerator()->enrol_user($teacher1->id, $course->id, $teacherrole->id);",
          "61:         $this->getDataGenerator()->enrol_user($teacher2->id, $course->id, $teacherrole->id);",
          "64:         $record = new stdClass();",
          "65:         $record->introformat = FORMAT_HTML;",
          "66:         $record->course = $course->id;",
          "68:         $record->assessed = RATING_AGGREGATE_AVERAGE;",
          "69:         $forum = self::getDataGenerator()->create_module('forum', $record);",
          "71:         $contextid = context_module::instance($forum->cmid)->id;",
          "74:         $record = new stdClass();",
          "75:         $record->course = $course->id;",
          "76:         $record->userid = $student->id;",
          "77:         $record->forum = $forum->id;",
          "78:         $discussion = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "81:         $rating1 = new stdClass();",
          "82:         $rating1->contextid = $contextid;",
          "83:         $rating1->component = 'mod_forum';",
          "84:         $rating1->ratingarea = 'post';",
          "85:         $rating1->itemid = $discussion->id;",
          "86:         $rating1->rating = 90;",
          "87:         $rating1->scaleid = 100;",
          "88:         $rating1->userid = $teacher1->id;",
          "89:         $rating1->timecreated = time();",
          "90:         $rating1->timemodified = time();",
          "91:         $rating1->id = $DB->insert_record('rating', $rating1);",
          "94:         $rating2 = new stdClass();",
          "95:         $rating2->contextid = $contextid;",
          "96:         $rating2->component = 'mod_forum';",
          "97:         $rating2->ratingarea = 'post';",
          "98:         $rating2->itemid = $discussion->id;",
          "99:         $rating2->rating = 95;",
          "100:         $rating2->scaleid = 100;",
          "101:         $rating2->userid = $teacher2->id;",
          "102:         $rating2->timecreated = time() + 1;",
          "103:         $rating2->timemodified = time() + 1;",
          "104:         $rating2->id = $DB->insert_record('rating', $rating2);",
          "107:         $this->setUser($teacher1);",
          "109:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
          "111:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "112:         $this->assertCount(2, $ratings['ratings']);",
          "114:         $indexedratings = array();",
          "115:         foreach ($ratings['ratings'] as $rating) {",
          "116:             $indexedratings[$rating['id']] = $rating;",
          "117:         }",
          "118:         $this->assertEquals($rating1->rating.' / '.$rating1->scaleid, $indexedratings[$rating1->id]['rating']);",
          "119:         $this->assertEquals($rating2->rating.' / '.$rating2->scaleid, $indexedratings[$rating2->id]['rating']);",
          "121:         $this->assertEquals($rating1->userid, $indexedratings[$rating1->id]['userid']);",
          "122:         $this->assertEquals($rating2->userid, $indexedratings[$rating2->id]['userid']);",
          "125:         $this->setUser($student);",
          "127:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
          "129:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "130:         $this->assertCount(2, $ratings['ratings']);",
          "133:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', 0, 100, '');",
          "135:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "136:         $this->assertCount(0, $ratings['ratings']);",
          "139:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'xyz', $discussion->id, 100, '');",
          "141:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "142:         $this->assertCount(0, $ratings['ratings']);",
          "145:         try {",
          "146:             $ratings = core_rating_external::get_item_ratings('module', 0, 'mod_forum', 'post', $discussion->id, 100, '');",
          "147:             $this->fail('Exception expected due invalid context.');",
          "148:         } catch (invalid_parameter_exception $e) {",
          "149:             $this->assertEquals('invalidparameter', $e->errorcode);",
          "150:         }",
          "151:     }",
          "152: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db5b6971583e3f476b93d4d33c43a4be1ffdcdb5",
      "candidate_info": {
        "commit_hash": "db5b6971583e3f476b93d4d33c43a4be1ffdcdb5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/db5b6971583e3f476b93d4d33c43a4be1ffdcdb5",
        "files": [
          "lib/db/services.php",
          "rating/classes/external.php",
          "version.php"
        ],
        "message": "MDL-49347 rating: New external function core_rating_get_item_ratings",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "rating/classes/external.php||rating/classes/external.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rating/classes/external.php||rating/classes/external.php"
          ],
          "candidate": [
            "rating/classes/external.php||rating/classes/external.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1004:         'description' => 'Update completion status for the current user in an activity, only for activities with manual tracking.',",
          "1005:         'type'        => 'write',",
          "1006:     ),",
          "1007: );",
          "1009: $services = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1009:     'core_rating_get_item_ratings' => array(",
          "1010:         'classname'   => 'core_rating_external',",
          "1011:         'methodname'  => 'get_item_ratings',",
          "1012:         'description' => 'Retrieving all the ratings for an item.',",
          "1013:         'type'        => 'read',",
          "1014:     ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1068:             'core_course_view_course',",
          "1069:             'core_completion_get_activities_completion_status',",
          "1070:             'core_notes_get_course_notes',",
          "1071:             ),",
          "1072:         'enabled' => 0,",
          "1073:         'restrictedusers' => 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1079:             'core_rating_get_item_ratings',",
          "",
          "---------------"
        ],
        "rating/classes/external.php||rating/classes/external.php": [
          "File: rating/classes/external.php -> rating/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: require_once(\"$CFG->libdir/externallib.php\");",
          "28: require_once(\"$CFG->dirroot/rating/lib.php\");",
          "39: class core_rating_external extends external_api {",
          "47:     public static function get_item_ratings_parameters() {",
          "48:         return new external_function_parameters (",
          "49:             array(",
          "50:                 'contextlevel' => new external_value(PARAM_ALPHA, 'contextlevel'),",
          "51:                 'instanceid'  => new external_value(PARAM_INT, 'The Instance id of item associated with the context level'),",
          "52:                 'component'   => new external_value(PARAM_COMPONENT, 'component'),",
          "53:                 'ratingarea'  => new external_value(PARAM_AREA, 'Rating area', VALUE_DEFAULT, ''),",
          "54:                 'itemid'      => new external_value(PARAM_INT, 'Associated id'),",
          "55:                 'scaleid'     => new external_value(PARAM_INT, 'Scale id'),",
          "56:                 'sort'        => new external_value(PARAM_TEXT, 'Sort order', VALUE_DEFAULT, ''),",
          "57:             )",
          "58:         );",
          "59:     }",
          "74:     public static function get_item_ratings($contextlevel, $instanceid, $component, $ratingarea, $itemid, $scaleid, $sort) {",
          "75:         global $USER;",
          "77:         $arrayparams = array(",
          "78:                  'contextlevel' => $contextlevel,",
          "79:                  'instanceid'   => $instanceid,",
          "80:                  'component'    => $component,",
          "81:                  'ratingarea'   => $ratingarea,",
          "82:                  'itemid'       => $itemid,",
          "83:                  'scaleid'      => $scaleid,",
          "84:                  'sort'         => $sort);",
          "87:         $params = self::validate_parameters(self::get_item_ratings_parameters(), $arrayparams);",
          "89:         $context = self::get_context_from_params($params);",
          "90:         self::validate_context($context);",
          "91:         list($context, $course, $cm) = get_context_info_array($context->id);",
          "94:         if (!has_capability('moodle/rating:view', $context)) {",
          "95:             throw new moodle_exception('noviewrate', 'rating');",
          "96:         }",
          "99:         $canviewallratings = has_capability('moodle/rating:viewall', $context);",
          "102:         switch ($params['sort']) {",
          "103:             case 'firstname':",
          "104:                 $sqlsort = \"u.firstname ASC\";",
          "105:                 break;",
          "106:             case 'rating':",
          "107:                 $sqlsort = \"r.rating ASC\";",
          "108:                 break;",
          "109:             default:",
          "110:                 $sqlsort = \"r.timemodified ASC\";",
          "111:         }",
          "113:         $ratingoptions = new stdClass;",
          "114:         $ratingoptions->context = $context;",
          "115:         $ratingoptions->component = $params['component'];",
          "116:         $ratingoptions->ratingarea = $params['ratingarea'];",
          "117:         $ratingoptions->itemid = $params['itemid'];",
          "118:         $ratingoptions->sort = $sqlsort;",
          "120:         $rm = new rating_manager();",
          "121:         $ratings = $rm->get_all_ratings_for_item($ratingoptions);",
          "122:         $scalemenu = make_grades_menu($params['scaleid']);",
          "126:         $maxrating = max(array_keys($scalemenu));",
          "128:         $results = array();",
          "130:         foreach ($ratings as $rating) {",
          "131:             if ($canviewallratings || $USER->id == $rating->userid) {",
          "132:                 $result = array();",
          "133:                 $usercontext = context_user::instance($rating->userid);",
          "134:                 $profileimageurl = moodle_url::make_pluginfile_url($usercontext->id, 'user', 'icon', null, '/', 'f1');",
          "135:                 $result['userid'] = $rating->userid;",
          "136:                 $result['userpictureurl'] = $profileimageurl->out(false);",
          "137:                 $result['fullname'] = fullname($rating);",
          "138:                 $result['rating'] = $scalemenu[$rating->rating];",
          "139:                 $result['timemodified'] = $rating->timemodified;",
          "140:                 $results[] = $result;",
          "141:             }",
          "142:         }",
          "144:         $warnings = array();",
          "145:         return array('ratings' => $results, 'warning' => $warnings);",
          "146:     }",
          "154:     public static function get_item_ratings_returns() {",
          "156:         return new external_single_structure(",
          "157:             array(",
          "158:                 'ratings'    => new external_multiple_structure(",
          "159:                     new external_single_structure(",
          "160:                         array(",
          "161:                             'userid'          => new external_value(PARAM_INT,  'User id'),",
          "162:                             'userpictureurl'  => new external_value(PARAM_URL,  'URL user picture'),",
          "163:                             'fullname'        => new external_value(PARAM_TEXT, 'fullname'),",
          "164:                             'rating'          => new external_value(PARAM_TEXT, 'Rating on scale'),",
          "165:                             'timemodified'    => new external_value(PARAM_INT,  'Time modified (timestamp)')",
          "166:                         ), 'Ratings'",
          "167:                     ), 'List of ratings'",
          "168:                 ),",
          "169:                 'warnings'  => new external_warnings(),",
          "170:             )",
          "171:         );",
          "172:     }",
          "174: }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2015040200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2015040200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d982713ad34154e4713c7fd246f4c6dadf42b2b0",
      "candidate_info": {
        "commit_hash": "d982713ad34154e4713c7fd246f4c6dadf42b2b0",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d982713ad34154e4713c7fd246f4c6dadf42b2b0",
        "files": [
          "rating/classes/external.php",
          "rating/tests/externallib_test.php"
        ],
        "message": "MDL-49763 webservices: Handle correctly deleted users for ratings",
        "before_after_code_files": [
          "rating/classes/external.php||rating/classes/external.php",
          "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rating/classes/external.php||rating/classes/external.php",
            "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
          ],
          "candidate": [
            "rating/classes/external.php||rating/classes/external.php",
            "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "rating/classes/external.php||rating/classes/external.php": [
          "File: rating/classes/external.php -> rating/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:                 if ($rating->rating > $maxrating) {",
          "140:                     $rating->rating = $maxrating;",
          "141:                 }",
          "145:                 $result = array();",
          "146:                 $result['id'] = $rating->id;",
          "147:                 $result['userid'] = $rating->userid;",
          "149:                 $result['userfullname'] = fullname($rating);",
          "150:                 $result['rating'] = $scalemenu[$rating->rating];",
          "151:                 $result['timemodified'] = $rating->timemodified;",
          "",
          "[Removed Lines]",
          "142:                 $usercontext = context_user::instance($rating->userid);",
          "143:                 $profileimageurl = moodle_url::make_webservice_pluginfile_url($usercontext->id, 'user', 'icon', null, '/', 'f1');",
          "148:                 $result['userpictureurl'] = $profileimageurl->out(false);",
          "",
          "[Added Lines]",
          "143:                 $profileimageurl = '';",
          "145:                 $usercontext = context_user::instance($rating->userid, IGNORE_MISSING);",
          "146:                 if ($usercontext) {",
          "147:                     $profileimageurl = moodle_url::make_webservice_pluginfile_url($usercontext->id, 'user', 'icon', null,",
          "148:                                                                                     '/', 'f1')->out(false);",
          "149:                 }",
          "154:                 $result['userpictureurl'] = $profileimageurl;",
          "",
          "---------------"
        ],
        "rating/tests/externallib_test.php||rating/tests/externallib_test.php": [
          "File: rating/tests/externallib_test.php -> rating/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         $rating2->timemodified = time() + 1;",
          "104:         $rating2->id = $DB->insert_record('rating', $rating2);",
          "107:         $this->setUser($teacher1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:         delete_user($teacher2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa57105063129eed83bf09d83348681501ff5b64",
      "candidate_info": {
        "commit_hash": "fa57105063129eed83bf09d83348681501ff5b64",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/fa57105063129eed83bf09d83348681501ff5b64",
        "files": [
          "mod/data/lib.php",
          "mod/data/tests/lib_test.php",
          "mod/forum/lib.php",
          "mod/forum/tests/lib_test.php",
          "mod/upgrade.txt",
          "rating/classes/external.php",
          "rating/index.php",
          "rating/tests/externallib_test.php"
        ],
        "message": "MDL-50173 ratings: Use proper checks to ensure ratings are viewable.\n\nMainly to verify groups visibility this new callback has been created.\n\nNote this was originally 3 commits but for amending purposes they have\nbeen squashed.",
        "before_after_code_files": [
          "mod/data/lib.php||mod/data/lib.php",
          "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
          "mod/forum/lib.php||mod/forum/lib.php",
          "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
          "rating/classes/external.php||rating/classes/external.php",
          "rating/index.php||rating/index.php",
          "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mod/data/lib.php||mod/data/lib.php",
            "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
            "mod/forum/lib.php||mod/forum/lib.php",
            "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
            "rating/classes/external.php||rating/classes/external.php",
            "rating/index.php||rating/index.php",
            "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
          ],
          "candidate": [
            "mod/data/lib.php||mod/data/lib.php",
            "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
            "mod/forum/lib.php||mod/forum/lib.php",
            "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
            "rating/classes/external.php||rating/classes/external.php",
            "rating/index.php||rating/index.php",
            "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/data/lib.php||mod/data/lib.php": [
          "File: mod/data/lib.php -> mod/data/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1515:     return true;",
          "1516: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1531: function mod_data_rating_can_see_item_ratings($params) {",
          "1532:     global $DB;",
          "1535:     if (!isset($params['component']) || $params['component'] != 'mod_data') {",
          "1536:         throw new rating_exception('invalidcomponent');",
          "1537:     }",
          "1540:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'entry') {",
          "1541:         throw new rating_exception('invalidratingarea');",
          "1542:     }",
          "1544:     if (!isset($params['itemid'])) {",
          "1545:         throw new rating_exception('invaliditemid');",
          "1546:     }",
          "1548:     $datasql = \"SELECT d.id as dataid, d.course, r.groupid",
          "1549:                   FROM {data_records} r",
          "1550:                   JOIN {data} d ON r.dataid = d.id",
          "1551:                  WHERE r.id = :itemid\";",
          "1552:     $dataparams = array('itemid' => $params['itemid']);",
          "1553:     if (!$info = $DB->get_record_sql($datasql, $dataparams)) {",
          "1555:         throw new rating_exception('invaliditemid');",
          "1556:     }",
          "1558:     $course = $DB->get_record('course', array('id' => $info->course), '*', MUST_EXIST);",
          "1559:     $cm = get_coursemodule_from_instance('data', $info->dataid, $course->id, false, MUST_EXIST);",
          "1562:     return groups_group_visible($info->groupid, $course, $cm);",
          "1563: }",
          "",
          "---------------"
        ],
        "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php": [
          "File: mod/data/tests/lib_test.php -> mod/data/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         global $DB;",
          "43:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "38: class data_lib_testcase extends advanced_testcase {",
          "40:     function test_data_delete_record() {",
          "",
          "[Added Lines]",
          "38: class mod_data_lib_testcase extends advanced_testcase {",
          "40:     public function test_data_delete_record() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:         $this->assertEquals($url, $event->get_url());",
          "232:         $this->assertEventContextNotUsed($event);",
          "233:     }",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     public function test_mod_data_rating_can_see_item_ratings() {",
          "242:         global $DB;",
          "244:         $this->resetAfterTest();",
          "247:         $course = new stdClass();",
          "248:         $course->groupmode = SEPARATEGROUPS;",
          "249:         $course->groupmodeforce = true;",
          "250:         $course = $this->getDataGenerator()->create_course($course);",
          "251:         $data = $this->getDataGenerator()->create_module('data', array('course' => $course->id));",
          "252:         $cm = get_coursemodule_from_instance('data', $data->id);",
          "253:         $context = context_module::instance($cm->id);",
          "256:         $user1 = $this->getDataGenerator()->create_user();",
          "257:         $user2 = $this->getDataGenerator()->create_user();",
          "258:         $user3 = $this->getDataGenerator()->create_user();",
          "259:         $user4 = $this->getDataGenerator()->create_user();",
          "262:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
          "263:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
          "264:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
          "265:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
          "266:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
          "268:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "269:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "270:         groups_add_member($group1, $user1);",
          "271:         groups_add_member($group1, $user2);",
          "272:         groups_add_member($group2, $user3);",
          "273:         groups_add_member($group2, $user4);",
          "276:         $field = data_get_field_new('text', $data);",
          "278:         $fielddetail = new stdClass();",
          "279:         $fielddetail->name = 'Name';",
          "280:         $fielddetail->description = 'Some name';",
          "282:         $field->define_field($fielddetail);",
          "283:         $field->insert_field();",
          "284:         $recordid = data_add_record($data, $group1->id);",
          "286:         $datacontent = array();",
          "287:         $datacontent['fieldid'] = $field->field->id;",
          "288:         $datacontent['recordid'] = $recordid;",
          "289:         $datacontent['content'] = 'Asterix';",
          "290:         $DB->insert_record('data_content', $datacontent);",
          "293:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "294:         $params = array('contextid' => 2,",
          "295:                         'component' => 'mod_data',",
          "296:                         'ratingarea' => 'entry',",
          "297:                         'itemid' => $recordid,",
          "298:                         'scaleid' => 2);",
          "299:         $this->setUser($user1);",
          "300:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "301:         $this->setUser($user2);",
          "302:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "303:         $this->setUser($user3);",
          "304:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
          "305:         $this->setUser($user4);",
          "306:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
          "309:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
          "310:         $this->setUser($user1);",
          "311:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "312:         $this->setUser($user2);",
          "313:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "314:         $this->setUser($user3);",
          "315:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "316:         $this->setUser($user4);",
          "317:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "320:         $course->groupmode = VISIBLEGROUPS;",
          "321:         $DB->update_record('course', $course);",
          "322:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "323:         $this->setUser($user1);",
          "324:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "325:         $this->setUser($user2);",
          "326:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "327:         $this->setUser($user3);",
          "328:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "329:         $this->setUser($user4);",
          "330:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "332:     }",
          "",
          "---------------"
        ],
        "mod/forum/lib.php||mod/forum/lib.php": [
          "File: mod/forum/lib.php -> mod/forum/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3664:     return true;",
          "3665: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3680: function mod_forum_rating_can_see_item_ratings($params) {",
          "3681:     global $DB, $USER;",
          "3684:     if (!isset($params['component']) || $params['component'] != 'mod_forum') {",
          "3685:         throw new rating_exception('invalidcomponent');",
          "3686:     }",
          "3689:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'post') {",
          "3690:         throw new rating_exception('invalidratingarea');",
          "3691:     }",
          "3693:     if (!isset($params['itemid'])) {",
          "3694:         throw new rating_exception('invaliditemid');",
          "3695:     }",
          "3697:     $post = $DB->get_record('forum_posts', array('id' => $params['itemid']), '*', MUST_EXIST);",
          "3698:     $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion), '*', MUST_EXIST);",
          "3699:     $forum = $DB->get_record('forum', array('id' => $discussion->forum), '*', MUST_EXIST);",
          "3700:     $course = $DB->get_record('course', array('id' => $forum->course), '*', MUST_EXIST);",
          "3701:     $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id , false, MUST_EXIST);",
          "3704:     if (!forum_user_can_see_post($forum, $discussion, $post, $USER, $cm)) {",
          "3705:         return false;",
          "3706:     }",
          "3707:     return true;",
          "3708: }",
          "",
          "---------------"
        ],
        "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php": [
          "File: mod/forum/tests/lib_test.php -> mod/forum/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: global $CFG;",
          "28: require_once($CFG->dirroot . '/mod/forum/lib.php');",
          "30: class mod_forum_lib_testcase extends advanced_testcase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: require_once($CFG->dirroot . '/rating/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1394:         return $discussion;",
          "1395:     }",
          "1397: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:     public function test_mod_forum_rating_can_see_item_ratings() {",
          "1405:         global $DB;",
          "1407:         $this->resetAfterTest();",
          "1410:         $course = new stdClass();",
          "1411:         $course->groupmode = SEPARATEGROUPS;",
          "1412:         $course->groupmodeforce = true;",
          "1413:         $course = $this->getDataGenerator()->create_course($course);",
          "1414:         $forum = $this->getDataGenerator()->create_module('forum', array('course' => $course->id));",
          "1415:         $generator = self::getDataGenerator()->get_plugin_generator('mod_forum');",
          "1416:         $cm = get_coursemodule_from_instance('forum', $forum->id);",
          "1417:         $context = context_module::instance($cm->id);",
          "1420:         $user1 = $this->getDataGenerator()->create_user();",
          "1421:         $user2 = $this->getDataGenerator()->create_user();",
          "1422:         $user3 = $this->getDataGenerator()->create_user();",
          "1423:         $user4 = $this->getDataGenerator()->create_user();",
          "1426:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
          "1427:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
          "1428:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
          "1429:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
          "1430:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
          "1432:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "1433:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "1434:         groups_add_member($group1, $user1);",
          "1435:         groups_add_member($group1, $user2);",
          "1436:         groups_add_member($group2, $user3);",
          "1437:         groups_add_member($group2, $user4);",
          "1439:         $record = new stdClass();",
          "1440:         $record->course = $forum->course;",
          "1441:         $record->forum = $forum->id;",
          "1442:         $record->userid = $user1->id;",
          "1443:         $record->groupid = $group1->id;",
          "1444:         $discussion = $generator->create_discussion($record);",
          "1447:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
          "1449:         $ratingoptions = new stdClass;",
          "1450:         $ratingoptions->context = $context;",
          "1451:         $ratingoptions->ratingarea = 'post';",
          "1452:         $ratingoptions->component = 'mod_forum';",
          "1453:         $ratingoptions->itemid  = $post->id;",
          "1454:         $ratingoptions->scaleid = 2;",
          "1455:         $ratingoptions->userid  = $user2->id;",
          "1456:         $rating = new rating($ratingoptions);",
          "1457:         $rating->update_rating(2);",
          "1460:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "1461:         $params = array('contextid' => 2,",
          "1462:                         'component' => 'mod_forum',",
          "1463:                         'ratingarea' => 'post',",
          "1464:                         'itemid' => $post->id,",
          "1465:                         'scaleid' => 2);",
          "1466:         $this->setUser($user1);",
          "1467:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1468:         $this->setUser($user2);",
          "1469:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1470:         $this->setUser($user3);",
          "1471:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
          "1472:         $this->setUser($user4);",
          "1473:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
          "1476:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
          "1477:         $this->setUser($user1);",
          "1478:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1479:         $this->setUser($user2);",
          "1480:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1481:         $this->setUser($user3);",
          "1482:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1483:         $this->setUser($user4);",
          "1484:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1487:         $course->groupmode = VISIBLEGROUPS;",
          "1488:         $DB->update_record('course', $course);",
          "1489:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "1490:         $this->setUser($user1);",
          "1491:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1492:         $this->setUser($user2);",
          "1493:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1494:         $this->setUser($user3);",
          "1495:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1496:         $this->setUser($user4);",
          "1497:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1499:     }",
          "",
          "---------------"
        ],
        "rating/classes/external.php||rating/classes/external.php": [
          "File: rating/classes/external.php -> rating/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:         self::validate_context($context);",
          "100:             throw new moodle_exception('noviewrate', 'rating');",
          "101:         }",
          "",
          "[Removed Lines]",
          "99:         if (!has_capability('moodle/rating:view', $context)) {",
          "",
          "[Added Lines]",
          "99:         $callbackparams = array('contextid' => $context->id,",
          "100:                         'component' => $component,",
          "101:                         'ratingarea' => $ratingarea,",
          "102:                         'itemid' => $itemid,",
          "103:                         'scaleid' => $scaleid);",
          "104:         if (!has_capability('moodle/rating:view', $context) ||",
          "105:                 !component_callback($component, 'rating_can_see_item_ratings', array($callbackparams), true)) {",
          "",
          "---------------"
        ],
        "rating/index.php||rating/index.php": [
          "File: rating/index.php -> rating/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     $PAGE->set_pagelayout('popup');",
          "56: }",
          "59:     print_error('noviewrate', 'rating');",
          "60: }",
          "",
          "[Removed Lines]",
          "58: if (!has_capability('moodle/rating:view', $context)) {",
          "",
          "[Added Lines]",
          "58: $params = array('contextid' => $contextid,",
          "59:                 'component' => $component,",
          "60:                 'ratingarea' => $ratingarea,",
          "61:                 'itemid' => $itemid,",
          "62:                 'scaleid' => $scaleid);",
          "63: if (!has_capability('moodle/rating:view', $context) ||",
          "64:         !component_callback($component, 'rating_can_see_item_ratings', array($params), true)) {",
          "",
          "---------------"
        ],
        "rating/tests/externallib_test.php||rating/tests/externallib_test.php": [
          "File: rating/tests/externallib_test.php -> rating/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         $student = $this->getDataGenerator()->create_user();",
          "54:         $teacher1 = $this->getDataGenerator()->create_user();",
          "55:         $teacher2 = $this->getDataGenerator()->create_user();",
          "56:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
          "57:         $teacherrole = $DB->get_record('role', array('shortname' => 'teacher'));",
          "59:         $this->getDataGenerator()->enrol_user($student->id,  $course->id, $studentrole->id);",
          "60:         $this->getDataGenerator()->enrol_user($teacher1->id, $course->id, $teacherrole->id);",
          "61:         $this->getDataGenerator()->enrol_user($teacher2->id, $course->id, $teacherrole->id);",
          "64:         $record = new stdClass();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         $teacher3 = $this->getDataGenerator()->create_user();",
          "59:         unassign_capability('moodle/site:accessallgroups', $teacherrole->id);",
          "64:         $this->getDataGenerator()->enrol_user($teacher3->id, $course->id, $teacherrole->id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         $record->userid = $student->id;",
          "77:         $record->forum = $forum->id;",
          "78:         $discussion = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "81:         $rating1 = new stdClass();",
          "82:         $rating1->contextid = $contextid;",
          "83:         $rating1->component = 'mod_forum';",
          "84:         $rating1->ratingarea = 'post';",
          "86:         $rating1->rating = 90;",
          "87:         $rating1->scaleid = 100;",
          "88:         $rating1->userid = $teacher1->id;",
          "",
          "[Removed Lines]",
          "85:         $rating1->itemid = $discussion->id;",
          "",
          "[Added Lines]",
          "83:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
          "90:         $rating1->itemid = $post->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         $rating2->contextid = $contextid;",
          "96:         $rating2->component = 'mod_forum';",
          "97:         $rating2->ratingarea = 'post';",
          "99:         $rating2->rating = 95;",
          "100:         $rating2->scaleid = 100;",
          "101:         $rating2->userid = $teacher2->id;",
          "",
          "[Removed Lines]",
          "98:         $rating2->itemid = $discussion->id;",
          "",
          "[Added Lines]",
          "103:         $rating2->itemid = $post->id;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:         $this->setUser($teacher1);",
          "114:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "115:         $this->assertCount(2, $ratings['ratings']);",
          "",
          "[Removed Lines]",
          "112:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
          "",
          "[Added Lines]",
          "117:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:         $this->setUser($student);",
          "132:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "133:         $this->assertCount(2, $ratings['ratings']);",
          "148:         try {",
          "150:             $this->fail('Exception expected due invalid context.');",
          "151:         } catch (invalid_parameter_exception $e) {",
          "152:             $this->assertEquals('invalidparameter', $e->errorcode);",
          "153:         }",
          "154:     }",
          "155: }",
          "",
          "[Removed Lines]",
          "130:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
          "136:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', 0, 100, '');",
          "138:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "139:         $this->assertCount(0, $ratings['ratings']);",
          "142:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'xyz', $discussion->id, 100, '');",
          "144:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "145:         $this->assertCount(0, $ratings['ratings']);",
          "149:             $ratings = core_rating_external::get_item_ratings('module', 0, 'mod_forum', 'post', $discussion->id, 100, '');",
          "",
          "[Added Lines]",
          "135:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
          "141:         try {",
          "142:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', 0, 100, '');",
          "143:             $this->fail('Exception expected due invalid itemid.');",
          "144:         } catch (moodle_exception $e) {",
          "145:             $this->assertEquals('invalidrecord', $e->errorcode);",
          "146:         }",
          "149:         try {",
          "150:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'xyz', $post->id, 100, '');",
          "151:             $this->fail('Exception expected due invalid rating area.');",
          "152:         } catch (moodle_exception $e) {",
          "153:             $this->assertEquals('invalidratingarea', $e->errorcode);",
          "154:         }",
          "158:             $ratings = core_rating_external::get_item_ratings('module', 0, 'mod_forum', 'post', $post->id, 100, '');",
          "165:         set_coursemodule_groupmode($forum->cmid, SEPARATEGROUPS);",
          "166:         $group = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "167:         groups_add_member($group, $teacher1);",
          "169:         $discussion->groupid = $group->id;",
          "170:         $DB->update_record('forum_discussions', $discussion);",
          "173:         $this->setUser($teacher1);",
          "174:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
          "176:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
          "177:         $this->assertCount(2, $ratings['ratings']);",
          "179:         $this->setUser($teacher3);",
          "180:         try {",
          "181:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
          "182:             $this->fail('Exception expected due invalid group permissions.');",
          "183:         } catch (moodle_exception $e) {",
          "184:             $this->assertEquals('noviewrate', $e->errorcode);",
          "185:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20ff15e22b4f0abebe1ab5fbfd1d681c88765e2a",
      "candidate_info": {
        "commit_hash": "20ff15e22b4f0abebe1ab5fbfd1d681c88765e2a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/20ff15e22b4f0abebe1ab5fbfd1d681c88765e2a",
        "files": [
          "mod/data/lib.php",
          "mod/data/tests/lib_test.php",
          "mod/forum/lib.php",
          "mod/forum/tests/lib_test.php",
          "mod/upgrade.txt",
          "rating/index.php"
        ],
        "message": "MDL-50173 ratings: Use proper checks to ensure ratings are viewable.\n\nMainly to verify groups visibility this new callback has been created.\n\nNote this was originally 2 commits but for amending purposes they have\nbeen squashed.",
        "before_after_code_files": [
          "mod/data/lib.php||mod/data/lib.php",
          "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
          "mod/forum/lib.php||mod/forum/lib.php",
          "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
          "rating/index.php||rating/index.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mod/data/lib.php||mod/data/lib.php",
            "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
            "mod/forum/lib.php||mod/forum/lib.php",
            "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
            "rating/index.php||rating/index.php"
          ],
          "candidate": [
            "mod/data/lib.php||mod/data/lib.php",
            "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
            "mod/forum/lib.php||mod/forum/lib.php",
            "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
            "rating/index.php||rating/index.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/data/lib.php||mod/data/lib.php": [
          "File: mod/data/lib.php -> mod/data/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1500:     return true;",
          "1501: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1516: function mod_data_rating_can_see_item_ratings($params) {",
          "1517:     global $DB;",
          "1520:     if (!isset($params['component']) || $params['component'] != 'mod_data') {",
          "1521:         throw new rating_exception('invalidcomponent');",
          "1522:     }",
          "1525:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'entry') {",
          "1526:         throw new rating_exception('invalidratingarea');",
          "1527:     }",
          "1529:     if (!isset($params['itemid'])) {",
          "1530:         throw new rating_exception('invaliditemid');",
          "1531:     }",
          "1533:     $datasql = \"SELECT d.id as dataid, d.course, r.groupid",
          "1534:                   FROM {data_records} r",
          "1535:                   JOIN {data} d ON r.dataid = d.id",
          "1536:                  WHERE r.id = :itemid\";",
          "1537:     $dataparams = array('itemid' => $params['itemid']);",
          "1538:     if (!$info = $DB->get_record_sql($datasql, $dataparams)) {",
          "1540:         throw new rating_exception('invaliditemid');",
          "1541:     }",
          "1543:     $course = $DB->get_record('course', array('id' => $info->course), '*', MUST_EXIST);",
          "1544:     $cm = get_coursemodule_from_instance('data', $info->dataid, $course->id, false, MUST_EXIST);",
          "1547:     return groups_group_visible($info->groupid, $course, $cm);",
          "1548: }",
          "",
          "---------------"
        ],
        "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php": [
          "File: mod/data/tests/lib_test.php -> mod/data/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         global $DB;",
          "43:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "38: class data_lib_testcase extends advanced_testcase {",
          "40:     function test_data_delete_record() {",
          "",
          "[Added Lines]",
          "38: class mod_data_lib_testcase extends advanced_testcase {",
          "40:     public function test_data_delete_record() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:         $this->assertEquals($url, $event->get_url());",
          "232:         $this->assertEventContextNotUsed($event);",
          "233:     }",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     public function test_mod_data_rating_can_see_item_ratings() {",
          "242:         global $DB;",
          "244:         $this->resetAfterTest();",
          "247:         $course = new stdClass();",
          "248:         $course->groupmode = SEPARATEGROUPS;",
          "249:         $course->groupmodeforce = true;",
          "250:         $course = $this->getDataGenerator()->create_course($course);",
          "251:         $data = $this->getDataGenerator()->create_module('data', array('course' => $course->id));",
          "252:         $cm = get_coursemodule_from_instance('data', $data->id);",
          "253:         $context = context_module::instance($cm->id);",
          "256:         $user1 = $this->getDataGenerator()->create_user();",
          "257:         $user2 = $this->getDataGenerator()->create_user();",
          "258:         $user3 = $this->getDataGenerator()->create_user();",
          "259:         $user4 = $this->getDataGenerator()->create_user();",
          "262:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
          "263:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
          "264:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
          "265:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
          "266:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
          "268:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "269:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "270:         groups_add_member($group1, $user1);",
          "271:         groups_add_member($group1, $user2);",
          "272:         groups_add_member($group2, $user3);",
          "273:         groups_add_member($group2, $user4);",
          "276:         $field = data_get_field_new('text', $data);",
          "278:         $fielddetail = new stdClass();",
          "279:         $fielddetail->name = 'Name';",
          "280:         $fielddetail->description = 'Some name';",
          "282:         $field->define_field($fielddetail);",
          "283:         $field->insert_field();",
          "284:         $recordid = data_add_record($data, $group1->id);",
          "286:         $datacontent = array();",
          "287:         $datacontent['fieldid'] = $field->field->id;",
          "288:         $datacontent['recordid'] = $recordid;",
          "289:         $datacontent['content'] = 'Asterix';",
          "290:         $DB->insert_record('data_content', $datacontent);",
          "293:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "294:         $params = array('contextid' => 2,",
          "295:                         'component' => 'mod_data',",
          "296:                         'ratingarea' => 'entry',",
          "297:                         'itemid' => $recordid,",
          "298:                         'scaleid' => 2);",
          "299:         $this->setUser($user1);",
          "300:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "301:         $this->setUser($user2);",
          "302:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "303:         $this->setUser($user3);",
          "304:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
          "305:         $this->setUser($user4);",
          "306:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
          "309:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
          "310:         $this->setUser($user1);",
          "311:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "312:         $this->setUser($user2);",
          "313:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "314:         $this->setUser($user3);",
          "315:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "316:         $this->setUser($user4);",
          "317:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "320:         $course->groupmode = VISIBLEGROUPS;",
          "321:         $DB->update_record('course', $course);",
          "322:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "323:         $this->setUser($user1);",
          "324:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "325:         $this->setUser($user2);",
          "326:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "327:         $this->setUser($user3);",
          "328:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "329:         $this->setUser($user4);",
          "330:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "332:     }",
          "",
          "---------------"
        ],
        "mod/forum/lib.php||mod/forum/lib.php": [
          "File: mod/forum/lib.php -> mod/forum/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3664:     return true;",
          "3665: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3680: function mod_forum_rating_can_see_item_ratings($params) {",
          "3681:     global $DB, $USER;",
          "3684:     if (!isset($params['component']) || $params['component'] != 'mod_forum') {",
          "3685:         throw new rating_exception('invalidcomponent');",
          "3686:     }",
          "3689:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'post') {",
          "3690:         throw new rating_exception('invalidratingarea');",
          "3691:     }",
          "3693:     if (!isset($params['itemid'])) {",
          "3694:         throw new rating_exception('invaliditemid');",
          "3695:     }",
          "3697:     $post = $DB->get_record('forum_posts', array('id' => $params['itemid']), '*', MUST_EXIST);",
          "3698:     $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion), '*', MUST_EXIST);",
          "3699:     $forum = $DB->get_record('forum', array('id' => $discussion->forum), '*', MUST_EXIST);",
          "3700:     $course = $DB->get_record('course', array('id' => $forum->course), '*', MUST_EXIST);",
          "3701:     $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id , false, MUST_EXIST);",
          "3704:     if (!forum_user_can_see_post($forum, $discussion, $post, $USER, $cm)) {",
          "3705:         return false;",
          "3706:     }",
          "3707:     return true;",
          "3708: }",
          "",
          "---------------"
        ],
        "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php": [
          "File: mod/forum/tests/lib_test.php -> mod/forum/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: global $CFG;",
          "28: require_once($CFG->dirroot . '/mod/forum/lib.php');",
          "30: class mod_forum_lib_testcase extends advanced_testcase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: require_once($CFG->dirroot . '/rating/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1317:         return $discussion;",
          "1318:     }",
          "1320: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327:     public function test_mod_forum_rating_can_see_item_ratings() {",
          "1328:         global $DB;",
          "1330:         $this->resetAfterTest();",
          "1333:         $course = new stdClass();",
          "1334:         $course->groupmode = SEPARATEGROUPS;",
          "1335:         $course->groupmodeforce = true;",
          "1336:         $course = $this->getDataGenerator()->create_course($course);",
          "1337:         $forum = $this->getDataGenerator()->create_module('forum', array('course' => $course->id));",
          "1338:         $generator = self::getDataGenerator()->get_plugin_generator('mod_forum');",
          "1339:         $cm = get_coursemodule_from_instance('forum', $forum->id);",
          "1340:         $context = context_module::instance($cm->id);",
          "1343:         $user1 = $this->getDataGenerator()->create_user();",
          "1344:         $user2 = $this->getDataGenerator()->create_user();",
          "1345:         $user3 = $this->getDataGenerator()->create_user();",
          "1346:         $user4 = $this->getDataGenerator()->create_user();",
          "1349:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
          "1350:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
          "1351:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
          "1352:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
          "1353:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
          "1355:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "1356:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "1357:         groups_add_member($group1, $user1);",
          "1358:         groups_add_member($group1, $user2);",
          "1359:         groups_add_member($group2, $user3);",
          "1360:         groups_add_member($group2, $user4);",
          "1362:         $record = new stdClass();",
          "1363:         $record->course = $forum->course;",
          "1364:         $record->forum = $forum->id;",
          "1365:         $record->userid = $user1->id;",
          "1366:         $record->groupid = $group1->id;",
          "1367:         $discussion = $generator->create_discussion($record);",
          "1370:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
          "1372:         $ratingoptions = new stdClass;",
          "1373:         $ratingoptions->context = $context;",
          "1374:         $ratingoptions->ratingarea = 'post';",
          "1375:         $ratingoptions->component = 'mod_forum';",
          "1376:         $ratingoptions->itemid  = $post->id;",
          "1377:         $ratingoptions->scaleid = 2;",
          "1378:         $ratingoptions->userid  = $user2->id;",
          "1379:         $rating = new rating($ratingoptions);",
          "1380:         $rating->update_rating(2);",
          "1383:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "1384:         $params = array('contextid' => 2,",
          "1385:                         'component' => 'mod_forum',",
          "1386:                         'ratingarea' => 'post',",
          "1387:                         'itemid' => $post->id,",
          "1388:                         'scaleid' => 2);",
          "1389:         $this->setUser($user1);",
          "1390:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1391:         $this->setUser($user2);",
          "1392:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1393:         $this->setUser($user3);",
          "1394:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
          "1395:         $this->setUser($user4);",
          "1396:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
          "1399:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
          "1400:         $this->setUser($user1);",
          "1401:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1402:         $this->setUser($user2);",
          "1403:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1404:         $this->setUser($user3);",
          "1405:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1406:         $this->setUser($user4);",
          "1407:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1410:         $course->groupmode = VISIBLEGROUPS;",
          "1411:         $DB->update_record('course', $course);",
          "1412:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "1413:         $this->setUser($user1);",
          "1414:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1415:         $this->setUser($user2);",
          "1416:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1417:         $this->setUser($user3);",
          "1418:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1419:         $this->setUser($user4);",
          "1420:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "1422:     }",
          "",
          "---------------"
        ],
        "rating/index.php||rating/index.php": [
          "File: rating/index.php -> rating/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     $PAGE->set_pagelayout('popup');",
          "56: }",
          "59:     print_error('noviewrate', 'rating');",
          "60: }",
          "",
          "[Removed Lines]",
          "58: if (!has_capability('moodle/rating:view', $context)) {",
          "",
          "[Added Lines]",
          "58: $params = array('contextid' => $contextid,",
          "59:                 'component' => $component,",
          "60:                 'ratingarea' => $ratingarea,",
          "61:                 'itemid' => $itemid,",
          "62:                 'scaleid' => $scaleid);",
          "63: if (!has_capability('moodle/rating:view', $context) ||",
          "64:         !component_callback($component, 'rating_can_see_item_ratings', array($params), true)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}