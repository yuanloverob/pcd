{
  "cve_id": "CVE-2018-8785",
  "cve_desc": "FreeRDP prior to version 2.0.0-rc4 contains a Heap-Based Buffer Overflow in function zgfx_decompress() that results in a memory corruption and probably even a remote code execution.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "602f4a2e14b41703b5f431de3154cd46a5750a2d",
  "patch_info": {
    "commit_hash": "602f4a2e14b41703b5f431de3154cd46a5750a2d",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/602f4a2e14b41703b5f431de3154cd46a5750a2d",
    "files": [
      "include/freerdp/codec/zgfx.h",
      "libfreerdp/codec/zgfx.c"
    ],
    "message": "Fixed CVE-2018-8785\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
    "before_after_code_files": [
      "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h",
      "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
    ]
  },
  "patch_diff": {
    "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h": [
      "File: include/freerdp/codec/zgfx.h -> include/freerdp/codec/zgfx.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #define ZGFX_SEGMENTED_MAXSIZE   65535",
      "54: typedef struct _ZGFX_CONTEXT ZGFX_CONTEXT;",
      "56: #ifdef __cplusplus",
      "57: extern \"C\" {",
      "58: #endif",
      "64: FREERDP_API void zgfx_context_reset(ZGFX_CONTEXT* zgfx, BOOL flush);",
      "",
      "[Removed Lines]",
      "35: struct _ZGFX_CONTEXT",
      "36: {",
      "37:  BOOL Compressor;",
      "39:  const BYTE* pbInputCurrent;",
      "40:  const BYTE* pbInputEnd;",
      "42:  UINT32 bits;",
      "43:  UINT32 cBitsRemaining;",
      "44:  UINT32 BitsCurrent;",
      "45:  UINT32 cBitsCurrent;",
      "47:  BYTE OutputBuffer[65536];",
      "48:  UINT32 OutputCount;",
      "50:  BYTE HistoryBuffer[2500000];",
      "51:  UINT32 HistoryIndex;",
      "52:  UINT32 HistoryBufferSize;",
      "53: };",
      "60: FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData, UINT32* pDstSize, UINT32 flags);",
      "61: FREERDP_API int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags);",
      "62: FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst, const BYTE* pUncompressed, UINT32 uncompressedSize, UINT32* pFlags);",
      "",
      "[Added Lines]",
      "41: FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
      "42:                                 BYTE** ppDstData, UINT32* pDstSize, UINT32 flags);",
      "43: FREERDP_API int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
      "44:                               BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags);",
      "45: FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst,",
      "46:                                         const BYTE* pUncompressed, UINT32 uncompressedSize, UINT32* pFlags);",
      "",
      "---------------"
    ],
    "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
      "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: struct _ZGFX_TOKEN",
      "46: {",
      "51:  UINT32 valueBase;",
      "52: };",
      "53: typedef struct _ZGFX_TOKEN ZGFX_TOKEN;",
      "55: static const ZGFX_TOKEN ZGFX_TOKEN_TABLE[] =",
      "56: {",
      "",
      "[Removed Lines]",
      "47:  int prefixLength;",
      "48:  int prefixCode;",
      "49:  int valueBits;",
      "50:  int tokenType;",
      "",
      "[Added Lines]",
      "47:  UINT32 prefixLength;",
      "48:  UINT32 prefixCode;",
      "49:  UINT32 valueBits;",
      "50:  UINT32 tokenType;",
      "55: struct _ZGFX_CONTEXT",
      "56: {",
      "57:  BOOL Compressor;",
      "59:  const BYTE* pbInputCurrent;",
      "60:  const BYTE* pbInputEnd;",
      "62:  UINT32 bits;",
      "63:  UINT32 cBitsRemaining;",
      "64:  UINT32 BitsCurrent;",
      "65:  UINT32 cBitsCurrent;",
      "67:  BYTE OutputBuffer[65536];",
      "68:  UINT32 OutputCount;",
      "70:  BYTE HistoryBuffer[2500000];",
      "71:  UINT32 HistoryIndex;",
      "72:  UINT32 HistoryBufferSize;",
      "73: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:  { 0 }",
      "99: };",
      "111:  _zgfx->BitsCurrent &= ((1 << _zgfx->cBitsCurrent) - 1);",
      "113: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
      "114: {",
      "",
      "[Removed Lines]",
      "101: #define zgfx_GetBits(_zgfx, _nbits) \\",
      "102:  while (_zgfx->cBitsCurrent < _nbits) { \\",
      "103:   _zgfx->BitsCurrent <<= 8; \\",
      "104:   if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd) \\",
      "105:    _zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++; \\",
      "106:   _zgfx->cBitsCurrent += 8; \\",
      "107:  } \\",
      "108:  _zgfx->cBitsRemaining -= _nbits; \\",
      "109:  _zgfx->cBitsCurrent -= _nbits; \\",
      "110:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent; \\",
      "",
      "[Added Lines]",
      "121: static INLINE BOOL zgfx_GetBits(ZGFX_CONTEXT* _zgfx, UINT32 _nbits)",
      "122: {",
      "123:  if (!_zgfx)",
      "124:   return FALSE;",
      "126:  while (_zgfx->cBitsCurrent < _nbits)",
      "127:  {",
      "128:   _zgfx->BitsCurrent <<= 8;",
      "130:   if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd)",
      "131:    _zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++;",
      "133:   _zgfx->cBitsCurrent += 8;",
      "134:  }",
      "136:  _zgfx->cBitsRemaining -= _nbits;",
      "137:  _zgfx->cBitsCurrent -= _nbits;",
      "138:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent;",
      "140: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "193: {",
      "194:  BYTE c;",
      "195:  BYTE flags;",
      "197:  int opIndex;",
      "198:  int haveBits;",
      "199:  int inPrefix;",
      "",
      "[Removed Lines]",
      "196:  int extra;",
      "",
      "[Added Lines]",
      "225:  UINT32 extra = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "349:   UINT16 segmentCount;",
      "350:   UINT32 uncompressedSize;",
      "351:   BYTE* pConcatenated;",
      "353:   if (Stream_GetRemainingLength(stream) < 6)",
      "354:    goto fail;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "382:   size_t used = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "377:    if (!zgfx_decompress_segment(zgfx, stream, segmentSize))",
      "378:     goto fail;",
      "380:    CopyMemory(pConcatenated, zgfx->OutputBuffer, zgfx->OutputCount);",
      "381:    pConcatenated += zgfx->OutputCount;",
      "382:   }",
      "383:  }",
      "384:  else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "411:    if (zgfx->OutputCount > UINT32_MAX - used)",
      "412:     goto fail;",
      "414:    if (used + zgfx->OutputCount > uncompressedSize)",
      "415:     goto fail;",
      "419:    used += zgfx->OutputCount;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1112c279bd1a327e8e4d0b5f371458bf2579659",
      "candidate_info": {
        "commit_hash": "d1112c279bd1a327e8e4d0b5f371458bf2579659",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d1112c279bd1a327e8e4d0b5f371458bf2579659",
        "files": [
          "include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_encode.h",
          "libfreerdp/codec/nsc_sse2.c"
        ],
        "message": "Fixed CVE-2018-8788\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h",
          "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h": [
          "File: include/freerdp/codec/nsc.h -> include/freerdp/codec/nsc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  const BYTE* palette;",
          "82:                 UINT32 rowstride);",
          "84:  NSC_CONTEXT_PRIV* priv;",
          "",
          "[Removed Lines]",
          "80:  void (*decode)(NSC_CONTEXT* context);",
          "81:  void (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData,",
          "",
          "[Added Lines]",
          "80:  BOOL (*decode)(NSC_CONTEXT* context);",
          "81:  BOOL (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData,",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
          "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #define NSC_INIT_SIMD(_nsc_context) do { } while (0)",
          "43: #endif",
          "46: {",
          "47:  UINT16 x;",
          "48:  UINT16 y;",
          "53:  for (y = 0; y < context->height; y++)",
          "54:  {",
          "",
          "[Removed Lines]",
          "45: static void nsc_decode(NSC_CONTEXT* context)",
          "49:  UINT16 rw = ROUND_UP_TO(context->width, 8);",
          "51:  BYTE* bmpdata = context->BitmapData;",
          "",
          "[Added Lines]",
          "45: static BOOL nsc_decode(NSC_CONTEXT* context)",
          "49:  UINT16 rw;",
          "50:  BYTE shift;",
          "51:  BYTE* bmpdata;",
          "52:  size_t pos = 0;",
          "54:  if (!context)",
          "55:   return FALSE;",
          "57:  rw = ROUND_UP_TO(context->width, 8);",
          "59:  bmpdata = context->BitmapData;",
          "61:  if (!bmpdata)",
          "62:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:    INT16 r_val = y_val + co_val - cg_val;",
          "81:    INT16 g_val = y_val + cg_val;",
          "82:    INT16 b_val = y_val - co_val - cg_val;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:    if (pos + 4 > context->BitmapDataLength)",
          "96:     return FALSE;",
          "98:    pos += 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:    aplane++;",
          "91:   }",
          "92:  }",
          "93: }",
          "96: {",
          "97:  UINT32 len;",
          "98:  UINT32 left;",
          "",
          "[Removed Lines]",
          "95: static void nsc_rle_decode(BYTE* in, BYTE* out, UINT32 originalSize)",
          "",
          "[Added Lines]",
          "110:  return TRUE;",
          "113: static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 originalSize)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:   if (left == 5)",
          "107:   {",
          "109:    left--;",
          "110:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:    if (outSize < 1)",
          "127:     return FALSE;",
          "129:    outSize--;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:     in += 4;",
          "125:    }",
          "127:    FillMemory(out, len, value);",
          "128:    out += len;",
          "129:    left -= len;",
          "130:   }",
          "131:   else",
          "132:   {",
          "134:    left--;",
          "135:   }",
          "136:  }",
          "139: }",
          "142: {",
          "143:  UINT16 i;",
          "144:  BYTE* rle;",
          "145:  UINT32 planeSize;",
          "146:  UINT32 originalSize;",
          "147:  rle = context->Planes;",
          "149:  for (i = 0; i < 4; i++)",
          "",
          "[Removed Lines]",
          "141: static void nsc_rle_decompress_data(NSC_CONTEXT* context)",
          "",
          "[Added Lines]",
          "149:    if (outSize < len)",
          "150:     return FALSE;",
          "152:    outSize -= len;",
          "159:    if (outSize < 1)",
          "160:     return FALSE;",
          "162:    outSize--;",
          "168:  if ((outSize < 4) || (left < 4))",
          "169:   return FALSE;",
          "171:  memcpy(out, in, 4);",
          "172:  return TRUE;",
          "175: static BOOL nsc_rle_decompress_data(NSC_CONTEXT* context)",
          "182:  if (!context)",
          "183:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:   planeSize = context->PlaneByteCount[i];",
          "154:   if (planeSize == 0)",
          "155:    FillMemory(context->priv->PlaneBuffers[i], originalSize, 0xFF);",
          "156:   else if (planeSize < originalSize)",
          "158:   else",
          "159:    CopyMemory(context->priv->PlaneBuffers[i], rle, originalSize);",
          "161:   rle += planeSize;",
          "162:  }",
          "163: }",
          "165: static BOOL nsc_stream_initialize(NSC_CONTEXT* context, wStream* s)",
          "",
          "[Removed Lines]",
          "157:    nsc_rle_decode(rle, context->priv->PlaneBuffers[i], originalSize);",
          "",
          "[Added Lines]",
          "193:   {",
          "194:    if (context->priv->PlaneBuffersLength < originalSize)",
          "195:     return FALSE;",
          "198:   }",
          "200:   {",
          "201:    if (!nsc_rle_decode(rle, context->priv->PlaneBuffers[i], context->priv->PlaneBuffersLength,",
          "202:                        originalSize))",
          "203:     return FALSE;",
          "204:   }",
          "206:   {",
          "207:    if (context->priv->PlaneBuffersLength < originalSize)",
          "208:     return FALSE;",
          "211:   }",
          "216:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:   return FALSE;",
          "407:  if (!freerdp_image_copy(pDstData, DstFormat, nDstStride, nXDst, nYDst,",
          "408:                          width, height, context->BitmapData,",
          "",
          "[Removed Lines]",
          "399:  PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data)",
          "400:  nsc_rle_decompress_data(context);",
          "401:  PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data)",
          "403:  PROFILER_ENTER(context->priv->prof_nsc_decode)",
          "404:  context->decode(context);",
          "405:  PROFILER_EXIT(context->priv->prof_nsc_decode)",
          "",
          "[Added Lines]",
          "453:  {",
          "454:   BOOL rc;",
          "455:   PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data)",
          "456:   rc = nsc_rle_decompress_data(context);",
          "457:   PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data)",
          "459:   if (!rc)",
          "460:    return FALSE;",
          "461:  }",
          "463:  {",
          "464:   BOOL rc;",
          "465:   PROFILER_ENTER(context->priv->prof_nsc_decode)",
          "466:   rc = context->decode(context);",
          "467:   PROFILER_EXIT(context->priv->prof_nsc_decode)",
          "469:   if (!rc)",
          "470:    return FALSE;",
          "471:  }",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
          "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:  return FALSE;",
          "88: }",
          "91:                                       UINT32 scanline)",
          "92: {",
          "93:  UINT16 x;",
          "",
          "[Removed Lines]",
          "90: static void nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "[Added Lines]",
          "91: static BOOL nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:  INT16 b_val;",
          "105:  BYTE a_val;",
          "106:  UINT32 tempWidth;",
          "107:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "108:  rw = (context->ChromaSubsamplingLevel ? tempWidth : context->width);",
          "109:  ccl = context->ColorLossLevel;",
          "111:  for (y = 0; y < context->height; y++)",
          "112:  {",
          "113:   src = data + (context->height - 1 - y) * scanline;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:  if (!context || data || (scanline == 0))",
          "110:   return FALSE;",
          "116:  if (context->priv->PlaneBuffersLength < rw * scanline)",
          "117:   return FALSE;",
          "119:  if (rw < scanline * 2)",
          "120:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:   CopyMemory(coplane, coplane - rw, rw);",
          "243:   CopyMemory(cgplane, cgplane - rw, rw);",
          "244:  }",
          "245: }",
          "248: {",
          "249:  UINT16 x;",
          "250:  UINT16 y;",
          "257:  UINT32 tempWidth;",
          "258:  UINT32 tempHeight;",
          "259:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "260:  tempHeight = ROUND_UP_TO(context->height, 2);",
          "262:  for (y = 0; y < tempHeight >> 1; y++)",
          "263:  {",
          "271:   for (x = 0; x < tempWidth >> 1; x++)",
          "272:   {",
          "",
          "[Removed Lines]",
          "247: static void nsc_encode_subsampling(NSC_CONTEXT* context)",
          "251:  BYTE* co_dst;",
          "252:  BYTE* cg_dst;",
          "253:  INT8* co_src0;",
          "254:  INT8* co_src1;",
          "255:  INT8* cg_src0;",
          "256:  INT8* cg_src1;",
          "264:   co_dst = context->priv->PlaneBuffers[1] + y * (tempWidth >> 1);",
          "265:   cg_dst = context->priv->PlaneBuffers[2] + y * (tempWidth >> 1);",
          "266:   co_src0 = (INT8*) context->priv->PlaneBuffers[1] + (y << 1) * tempWidth;",
          "267:   co_src1 = co_src0 + tempWidth;",
          "268:   cg_src0 = (INT8*) context->priv->PlaneBuffers[2] + (y << 1) * tempWidth;",
          "269:   cg_src1 = cg_src0 + tempWidth;",
          "",
          "[Added Lines]",
          "257:  return TRUE;",
          "260: static BOOL nsc_encode_subsampling(NSC_CONTEXT* context)",
          "267:  if (!context)",
          "268:   return FALSE;",
          "273:  if (tempHeight == 0)",
          "274:   return FALSE;",
          "276:  if (tempWidth > context->priv->PlaneBuffersLength / tempHeight)",
          "277:   return FALSE;",
          "281:   BYTE* co_dst = context->priv->PlaneBuffers[1] + y * (tempWidth >> 1);",
          "282:   BYTE* cg_dst = context->priv->PlaneBuffers[2] + y * (tempWidth >> 1);",
          "283:   const INT8* co_src0 = (INT8*) context->priv->PlaneBuffers[1] + (y << 1) * tempWidth;",
          "284:   const INT8* co_src1 = co_src0 + tempWidth;",
          "285:   const INT8* cg_src0 = (INT8*) context->priv->PlaneBuffers[2] + (y << 1) * tempWidth;",
          "286:   const INT8* cg_src1 = cg_src0 + tempWidth;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:    cg_src1 += 2;",
          "281:   }",
          "282:  }",
          "283: }",
          "286: {",
          "289:  if (context->ChromaSubsamplingLevel)",
          "290:  {",
          "292:  }",
          "293: }",
          "296: {",
          "297:  UINT32 left;",
          "298:  UINT32 runlength = 1;",
          "",
          "[Removed Lines]",
          "285: void nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata, UINT32 rowstride)",
          "287:  nsc_encode_argb_to_aycocg(context, bmpdata, rowstride);",
          "291:   nsc_encode_subsampling(context);",
          "295: static UINT32 nsc_rle_encode(BYTE* in, BYTE* out, UINT32 originalSize)",
          "",
          "[Added Lines]",
          "301:  return TRUE;",
          "304: BOOL nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata, UINT32 rowstride)",
          "306:  if (!context || !bmpdata || (rowstride == 0))",
          "307:   return FALSE;",
          "309:  if (!nsc_encode_argb_to_aycocg(context, bmpdata, rowstride))",
          "310:   return FALSE;",
          "314:   if (!nsc_encode_subsampling(context))",
          "315:    return FALSE;",
          "318:  return TRUE;",
          "321: static UINT32 nsc_rle_encode(const BYTE* in, BYTE* out, UINT32 originalSize)",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h": [
          "File: libfreerdp/codec/nsc_encode.h -> libfreerdp/codec/nsc_encode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <freerdp/api.h>",
          "28:                               UINT32 rowstride);",
          "",
          "[Removed Lines]",
          "27: FREERDP_LOCAL void nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata,",
          "",
          "[Added Lines]",
          "27: FREERDP_LOCAL BOOL nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata,",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c": [
          "File: libfreerdp/codec/nsc_sse2.c -> libfreerdp/codec/nsc_sse2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:  }",
          "386: }",
          "389:                             UINT32 scanline)",
          "390: {",
          "391:  nsc_encode_argb_to_aycocg_sse2(context, data, scanline);",
          "",
          "[Removed Lines]",
          "388: static void nsc_encode_sse2(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "[Added Lines]",
          "388: static BOOL nsc_encode_sse2(NSC_CONTEXT* context, const BYTE* data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:  {",
          "395:   nsc_encode_subsampling_sse2(context);",
          "396:  }",
          "397: }",
          "399: void nsc_init_sse2(NSC_CONTEXT* context)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:  return TRUE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "445a5a42c500ceb80f8fa7f2c11f3682538033f3",
      "candidate_info": {
        "commit_hash": "445a5a42c500ceb80f8fa7f2c11f3682538033f3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/445a5a42c500ceb80f8fa7f2c11f3682538033f3",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed CVE-2018-8786\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  if (bitmapUpdate->number > bitmapUpdate->count)",
          "210:  {",
          "217:   if (!newdata)",
          "218:    goto fail;",
          "",
          "[Removed Lines]",
          "211:   UINT16 count;",
          "212:   BITMAP_DATA* newdata;",
          "213:   count = bitmapUpdate->number * 2;",
          "214:   newdata = (BITMAP_DATA*) realloc(bitmapUpdate->rectangles,",
          "215:                                    sizeof(BITMAP_DATA) * count);",
          "",
          "[Added Lines]",
          "211:   UINT32 count = bitmapUpdate->number * 2;",
          "212:   BITMAP_DATA* newdata = (BITMAP_DATA*) realloc(bitmapUpdate->rectangles,",
          "213:                          sizeof(BITMAP_DATA) * count);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ee663f39dc8dac3d9988e847db19b2d7e3ac8c6",
      "candidate_info": {
        "commit_hash": "2ee663f39dc8dac3d9988e847db19b2d7e3ac8c6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2ee663f39dc8dac3d9988e847db19b2d7e3ac8c6",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed CVE-2018-8789\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  \"NTLMSSP_NEGOTIATE_UNICODE\"",
          "75: };",
          "78: {",
          "79:  int i;",
          "80:  const char* str;",
          "",
          "[Removed Lines]",
          "77: void ntlm_print_negotiate_flags(UINT32 flags)",
          "",
          "[Added Lines]",
          "77: static void ntlm_print_negotiate_flags(UINT32 flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  }",
          "91: }",
          "94: {",
          "95:  if (Stream_GetRemainingLength(s) < 12)",
          "96:   return -1;",
          "",
          "[Removed Lines]",
          "93: int ntlm_read_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
          "",
          "[Added Lines]",
          "93: static int ntlm_read_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:  return 1;",
          "105: }",
          "108: {",
          "109:  Stream_Write(s, header->Signature, sizeof(NTLM_SIGNATURE));",
          "110:  Stream_Write_UINT32(s, header->MessageType);",
          "111: }",
          "114: {",
          "115:  CopyMemory(header->Signature, NTLM_SIGNATURE, sizeof(NTLM_SIGNATURE));",
          "116:  header->MessageType = MessageType;",
          "117: }",
          "120: {",
          "121:  if (Stream_GetRemainingLength(s) < 8)",
          "122:   return -1;",
          "",
          "[Removed Lines]",
          "107: void ntlm_write_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
          "113: void ntlm_populate_message_header(NTLM_MESSAGE_HEADER* header, UINT32 MessageType)",
          "119: int ntlm_read_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "",
          "[Added Lines]",
          "107: static void ntlm_write_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)",
          "113: static void ntlm_populate_message_header(NTLM_MESSAGE_HEADER* header, UINT32 MessageType)",
          "119: static int ntlm_read_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:  return 1;",
          "128: }",
          "131: {",
          "132:  if (fields->MaxLen < 1)",
          "133:   fields->MaxLen = fields->Len;",
          "",
          "[Removed Lines]",
          "130: void ntlm_write_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "",
          "[Added Lines]",
          "130: static void ntlm_write_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138: }",
          "141: {",
          "142:  if (fields->Len > 0)",
          "143:  {",
          "145:    return -1;",
          "147:   fields->Buffer = (PBYTE) malloc(fields->Len);",
          "",
          "[Removed Lines]",
          "140: int ntlm_read_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "144:   if ((fields->BufferOffset + fields->Len) > Stream_Length(s))",
          "",
          "[Added Lines]",
          "140: static int ntlm_read_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "144:   const UINT64 offset = (UINT64)fields->BufferOffset + (UINT64)fields->Len;",
          "146:   if (offset > Stream_Length(s))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:  return 1;",
          "157: }",
          "160: {",
          "161:  if (fields->Len > 0)",
          "162:  {",
          "",
          "[Removed Lines]",
          "159: void ntlm_write_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "",
          "[Added Lines]",
          "161: static void ntlm_write_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:  }",
          "166: }",
          "169: {",
          "170:  if (fields)",
          "171:  {",
          "",
          "[Removed Lines]",
          "168: void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields)",
          "",
          "[Added Lines]",
          "170: static void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "180:  }",
          "181: }",
          "184: {",
          "185:  WLog_DBG(TAG, \"%s (Len: %\"PRIu16\" MaxLen: %\"PRIu16\" BufferOffset: %\"PRIu32\")\",",
          "186:           name, fields->Len, fields->MaxLen, fields->BufferOffset);",
          "",
          "[Removed Lines]",
          "183: void ntlm_print_message_fields(NTLM_MESSAGE_FIELDS* fields, const char* name)",
          "",
          "[Added Lines]",
          "185: static void ntlm_print_message_fields(NTLM_MESSAGE_FIELDS* fields, const char* name)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb57ed3a3059cea8576eaa91ccd6b3a3fd959f41",
      "candidate_info": {
        "commit_hash": "eb57ed3a3059cea8576eaa91ccd6b3a3fd959f41",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/eb57ed3a3059cea8576eaa91ccd6b3a3fd959f41",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Refactored ntlm_av_pairs API\n\nTightened checks, cleaned up code and improved redability.",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm.h||winpr/libwinpr/sspi/NTLM/ntlm.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.h||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm.h||winpr/libwinpr/sspi/NTLM/ntlm.h": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm.h -> winpr/libwinpr/sspi/NTLM/ntlm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  BYTE ClientChallenge[8];",
          "148:  UINT32 Reserved3;",
          "149:  NTLM_AV_PAIR* AvPairs;",
          "150: };",
          "151: typedef struct _NTLMv2_CLIENT_CHALLENGE NTLMv2_CLIENT_CHALLENGE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:  UINT32 cbAvPairs;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include \"../../log.h\"",
          "40: #define TAG WINPR_TAG(\"sspi.NTLM\")",
          "43: {",
          "44:  \"MsvAvEOL\",",
          "45:  \"MsvAvNbComputerName\",",
          "",
          "[Removed Lines]",
          "42: const char* const AV_PAIR_STRINGS[] =",
          "",
          "[Added Lines]",
          "42: static const char* const AV_PAIR_STRINGS[] =",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  \"MsvChannelBindings\"",
          "55: };",
          "58: {",
          "59:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "60:  ntlm_av_pair_set_id(pAvPair, MsvAvEOL);",
          "61:  ntlm_av_pair_set_len(pAvPair, 0);",
          "62: }",
          "65: {",
          "66:  ULONG length;",
          "67:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "",
          "[Removed Lines]",
          "57: void ntlm_av_pair_list_init(NTLM_AV_PAIR* pAvPairList)",
          "64: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList)",
          "",
          "[Added Lines]",
          "57: static NTLM_AV_PAIR* ntlm_av_pair_get_next_pointer(NTLM_AV_PAIR* pAvPair, size_t* pcbAvPair);",
          "59: static void ntlm_av_pair_set_id(NTLM_AV_PAIR* pAvPair, UINT16 id)",
          "60: {",
          "61:  Data_Write_UINT16(&pAvPair->AvId, id);",
          "62: }",
          "64: static void ntlm_av_pair_set_len(NTLM_AV_PAIR* pAvPair, UINT16 len)",
          "65: {",
          "66:  Data_Write_UINT16(&pAvPair->AvLen, len);",
          "67: }",
          "69: static BOOL ntlm_av_pair_list_init(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
          "73:  if (!pAvPair || (cbAvPairList < sizeof(NTLM_AV_PAIR)))",
          "74:   return FALSE;",
          "78:  return TRUE;",
          "81: static INLINE UINT16 ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair)",
          "82: {",
          "83:  UINT16 AvId;",
          "85:  if (!pAvPair)",
          "86:   return MsvAvEOL;",
          "88:  Data_Read_UINT16(&pAvPair->AvId, AvId);",
          "89:  return AvId;",
          "90: }",
          "92: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairListMaxLength)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:  while (ntlm_av_pair_get_id(pAvPair) != MsvAvEOL)",
          "73:  {",
          "75:  }",
          "77:  length = (pAvPair - pAvPairList) + sizeof(NTLM_AV_PAIR);",
          "78:  return length;",
          "79: }",
          "82: {",
          "83:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "",
          "[Removed Lines]",
          "74:   pAvPair = ntlm_av_pair_get_next_pointer(pAvPair);",
          "81: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList)",
          "",
          "[Added Lines]",
          "102:   pAvPair = ntlm_av_pair_get_next_pointer(pAvPair, &cbAvPairListMaxLength);",
          "109: static INLINE SSIZE_T ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "110: {",
          "111:  UINT16 AvLen;",
          "113:  if (!pAvPair || (cbAvPair < sizeof(NTLM_AV_PAIR)))",
          "114:   return -1;",
          "116:  Data_Read_UINT16(&pAvPair->AvLen, AvLen);",
          "118:  if (cbAvPair < sizeof(NTLM_AV_PAIR) + pAvPair->AvLen)",
          "119:   return -1;",
          "121:  return AvLen;",
          "122: }",
          "124: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:   WLog_INFO(TAG, \"\\t%s AvId: %\"PRIu16\" AvLen: %\"PRIu16\"\",",
          "93:             AV_PAIR_STRINGS[ntlm_av_pair_get_id(pAvPair)],",
          "94:             ntlm_av_pair_get_id(pAvPair),",
          "99:  }",
          "100: }",
          "103: {",
          "105:  return ((AvPairsCount + 1) * 4) + AvPairsValueLength;",
          "106: }",
          "109: {",
          "110:  return &((PBYTE) pAvPair)[sizeof(NTLM_AV_PAIR)];",
          "111: }",
          "114: {",
          "116: }",
          "119: {",
          "121: }",
          "124: {",
          "125:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "131:  {",
          "132:   if (ntlm_av_pair_get_id(pAvPair) == AvId)",
          "133:    return pAvPair;",
          "135:   if (ntlm_av_pair_get_id(pAvPair) == MsvAvEOL)",
          "136:    return NULL;",
          "139:  }",
          "141:  return NULL;",
          "142: }",
          "146: {",
          "147:  NTLM_AV_PAIR* pAvPair;",
          "150:  if (!pAvPair)",
          "151:   return NULL;",
          "",
          "[Removed Lines]",
          "95:             ntlm_av_pair_get_len(pAvPair));",
          "96:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair),",
          "97:                 ntlm_av_pair_get_len(pAvPair));",
          "98:   pAvPair = ntlm_av_pair_get_next_pointer(pAvPair);",
          "102: ULONG ntlm_av_pair_list_size(ULONG AvPairsCount, ULONG AvPairsValueLength)",
          "108: PBYTE ntlm_av_pair_get_value_pointer(NTLM_AV_PAIR* pAvPair)",
          "113: int ntlm_av_pair_get_next_offset(NTLM_AV_PAIR* pAvPair)",
          "115:  return ntlm_av_pair_get_len(pAvPair) + sizeof(NTLM_AV_PAIR);",
          "118: NTLM_AV_PAIR* ntlm_av_pair_get_next_pointer(NTLM_AV_PAIR* pAvPair)",
          "120:  return (NTLM_AV_PAIR*)((PBYTE) pAvPair + ntlm_av_pair_get_next_offset(pAvPair));",
          "123: NTLM_AV_PAIR* ntlm_av_pair_get(NTLM_AV_PAIR* pAvPairList, NTLM_AV_ID AvId)",
          "127:  if (!pAvPair)",
          "128:   return NULL;",
          "130:  while (1)",
          "138:   pAvPair = ntlm_av_pair_get_next_pointer(pAvPair);",
          "144: NTLM_AV_PAIR* ntlm_av_pair_add(NTLM_AV_PAIR* pAvPairList, NTLM_AV_ID AvId, PBYTE Value,",
          "145:                                UINT16 AvLen)",
          "148:  pAvPair = ntlm_av_pair_get(pAvPairList, MsvAvEOL);",
          "",
          "[Added Lines]",
          "138:             ntlm_av_pair_get_len(pAvPair, cbAvPairList));",
          "139:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair, cbAvPairList),",
          "140:                 ntlm_av_pair_get_len(pAvPair, cbAvPairList));",
          "141:   pAvPair = ntlm_av_pair_get_next_pointer(pAvPair, &cbAvPairList);",
          "145: static ULONG ntlm_av_pair_list_size(ULONG AvPairsCount, ULONG AvPairsValueLength)",
          "151: PBYTE ntlm_av_pair_get_value_pointer(NTLM_AV_PAIR* pAvPair, size_t cbAvPairListMaxLength)",
          "153:  if (cbAvPairListMaxLength < 2 * sizeof(NTLM_AV_PAIR))",
          "154:   return NULL;",
          "159: static SSIZE_T ntlm_av_pair_get_next_offset(NTLM_AV_PAIR* pAvPair, size_t cbAvPairListMaxLength)",
          "161:  return ntlm_av_pair_get_len(pAvPair, cbAvPairListMaxLength) + sizeof(NTLM_AV_PAIR);",
          "164: NTLM_AV_PAIR* ntlm_av_pair_get_next_pointer(NTLM_AV_PAIR* pAvPair, size_t* pcbAvPair)",
          "166:  SSIZE_T offset;",
          "168:  if (!pAvPair || !pcbAvPair)",
          "169:   return NULL;",
          "171:  offset = ntlm_av_pair_get_next_offset(pAvPair, *pcbAvPair);",
          "173:  if ((offset <= 0) || (offset > *pcbAvPair))",
          "174:   return NULL;",
          "177:  return (NTLM_AV_PAIR*)((PBYTE) pAvPair + offset);",
          "180: NTLM_AV_PAIR* ntlm_av_pair_get(void* pAvPairList,",
          "181:                                size_t avPairListLength,",
          "182:                                NTLM_AV_ID AvId,",
          "183:                                size_t* pcbAvPairListRemainingLength)",
          "187:  if (pcbAvPairListRemainingLength)",
          "190:  while (pAvPair)",
          "193:   {",
          "194:    if (pcbAvPairListRemainingLength)",
          "198:   }",
          "203:   pAvPair = ntlm_av_pair_get_next_pointer(pAvPair, &avPairListLength);",
          "209: static NTLM_AV_PAIR* ntlm_av_pair_add(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairListLength,",
          "210:                                       NTLM_AV_ID AvId, PBYTE Value,",
          "211:                                       UINT16 AvLen)",
          "213:  size_t cbAvPair;",
          "215:  pAvPair = ntlm_av_pair_get(pAvPairList, cbAvPairListLength, MsvAvEOL, &cbAvPair);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:  assert(Value != NULL);",
          "154:  ntlm_av_pair_set_id(pAvPair, AvId);",
          "155:  ntlm_av_pair_set_len(pAvPair, AvLen);",
          "157:  return pAvPair;",
          "158: }",
          "161: {",
          "162:  NTLM_AV_PAIR* pAvPairCopy;",
          "165:  if (!pAvPairCopy)",
          "166:   return NULL;",
          "168:  CopyMemory(&pAvPairCopy->AvId, &pAvPair->AvId, 2);",
          "169:  CopyMemory(&pAvPairCopy->AvLen, &pAvPair->AvLen, 2);",
          "173:  return pAvPairCopy;",
          "174: }",
          "177: {",
          "178:  char* name;",
          "179:  int status;",
          "",
          "[Removed Lines]",
          "156:  CopyMemory(ntlm_av_pair_get_value_pointer(pAvPair), Value, AvLen);",
          "160: NTLM_AV_PAIR* ntlm_av_pair_add_copy(NTLM_AV_PAIR* pAvPairList, NTLM_AV_PAIR* pAvPair)",
          "163:  pAvPairCopy = ntlm_av_pair_get(pAvPairList, MsvAvEOL);",
          "170:  CopyMemory(ntlm_av_pair_get_value_pointer(pAvPairCopy),",
          "171:             ntlm_av_pair_get_value_pointer(pAvPair),",
          "172:             ntlm_av_pair_get_len(pAvPair));",
          "176: int ntlm_get_target_computer_name(PUNICODE_STRING pName, COMPUTER_NAME_FORMAT type)",
          "",
          "[Added Lines]",
          "223:  CopyMemory(ntlm_av_pair_get_value_pointer(pAvPair, cbAvPair), Value, AvLen);",
          "227: static NTLM_AV_PAIR* ntlm_av_pair_add_copy(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairListLength,",
          "228:         NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "231:  size_t cbAvPairCopy;",
          "232:  pAvPairCopy = ntlm_av_pair_get(pAvPairList, cbAvPairListLength, MsvAvEOL, &cbAvPairCopy);",
          "239:  CopyMemory(ntlm_av_pair_get_value_pointer(pAvPairCopy, cbAvPairCopy),",
          "240:             ntlm_av_pair_get_value_pointer(pAvPair, cbAvPair),",
          "241:             ntlm_av_pair_get_len(pAvPair, cbAvPair));",
          "245: static int ntlm_get_target_computer_name(PUNICODE_STRING pName, COMPUTER_NAME_FORMAT type)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "219:  return 1;",
          "220: }",
          "223: {",
          "224:  if (string)",
          "225:  {",
          "",
          "[Removed Lines]",
          "222: void ntlm_free_unicode_string(PUNICODE_STRING string)",
          "",
          "[Added Lines]",
          "291: static void ntlm_free_unicode_string(PUNICODE_STRING string)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "271:  return winpr_Digest_Update(md5, be32, 4);",
          "272: }",
          "275: {",
          "276:  WINPR_DIGEST_CTX* md5;",
          "277:  BYTE* ChannelBindingToken;",
          "",
          "[Removed Lines]",
          "274: void ntlm_compute_channel_bindings(NTLM_CONTEXT* context)",
          "",
          "[Added Lines]",
          "343: static void ntlm_compute_channel_bindings(NTLM_CONTEXT* context)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "317:  winpr_Digest_Free(md5);",
          "318: }",
          "321: {",
          "",
          "[Removed Lines]",
          "320: void ntlm_compute_single_host_data(NTLM_CONTEXT* context)",
          "",
          "[Added Lines]",
          "389: static void ntlm_compute_single_host_data(NTLM_CONTEXT* context)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "337: int ntlm_construct_challenge_target_info(NTLM_CONTEXT* context)",
          "338: {",
          "339:  int length;",
          "340:  ULONG AvPairsCount;",
          "341:  ULONG AvPairsLength;",
          "342:  NTLM_AV_PAIR* pAvPairList;",
          "349:  if (ntlm_get_target_computer_name(&NbDomainName, ComputerNameNetBIOS) < 0)",
          "352:  NbComputerName.Buffer = NULL;",
          "354:  if (ntlm_get_target_computer_name(&NbComputerName, ComputerNameNetBIOS) < 0)",
          "357:  DnsDomainName.Buffer = NULL;",
          "359:  if (ntlm_get_target_computer_name(&DnsDomainName, ComputerNameDnsDomain) < 0)",
          "362:  DnsComputerName.Buffer = NULL;",
          "364:  if (ntlm_get_target_computer_name(&DnsComputerName, ComputerNameDnsHostname) < 0)",
          "367:  AvPairsCount = 5;",
          "368:  AvPairsLength = NbDomainName.Length + NbComputerName.Length +",
          "",
          "[Removed Lines]",
          "343:  UNICODE_STRING NbDomainName;",
          "344:  UNICODE_STRING NbComputerName;",
          "345:  UNICODE_STRING DnsDomainName;",
          "346:  UNICODE_STRING DnsComputerName;",
          "347:  NbDomainName.Buffer = NULL;",
          "350:   return -1;",
          "355:   return -1;",
          "360:   return -1;",
          "365:   return -1;",
          "",
          "[Added Lines]",
          "408:  int rc = -1;",
          "413:  size_t cbAvPairList;",
          "414:  UNICODE_STRING NbDomainName = { 0 };",
          "415:  UNICODE_STRING NbComputerName = { 0 };",
          "416:  UNICODE_STRING DnsDomainName = { 0 };",
          "417:  UNICODE_STRING DnsComputerName = { 0 };",
          "420:   goto fail;",
          "425:   goto fail;",
          "430:   goto fail;",
          "435:   goto fail;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "370:  length = ntlm_av_pair_list_size(AvPairsCount, AvPairsLength);",
          "372:  if (!sspi_SecBufferAlloc(&context->ChallengeTargetInfo, length))",
          "375:  pAvPairList = (NTLM_AV_PAIR*) context->ChallengeTargetInfo.pvBuffer;",
          "385:  ntlm_free_unicode_string(&NbDomainName);",
          "386:  ntlm_free_unicode_string(&NbComputerName);",
          "387:  ntlm_free_unicode_string(&DnsDomainName);",
          "388:  ntlm_free_unicode_string(&DnsComputerName);",
          "390: }",
          "392: int ntlm_construct_authenticate_target_info(NTLM_CONTEXT* context)",
          "",
          "[Removed Lines]",
          "373:   return -1;",
          "376:  ntlm_av_pair_list_init(pAvPairList);",
          "377:  ntlm_av_pair_add(pAvPairList, MsvAvNbDomainName, (PBYTE) NbDomainName.Buffer, NbDomainName.Length);",
          "378:  ntlm_av_pair_add(pAvPairList, MsvAvNbComputerName, (PBYTE) NbComputerName.Buffer,",
          "379:                   NbComputerName.Length);",
          "380:  ntlm_av_pair_add(pAvPairList, MsvAvDnsDomainName, (PBYTE) DnsDomainName.Buffer,",
          "381:                   DnsDomainName.Length);",
          "382:  ntlm_av_pair_add(pAvPairList, MsvAvDnsComputerName, (PBYTE) DnsComputerName.Buffer,",
          "383:                   DnsComputerName.Length);",
          "384:  ntlm_av_pair_add(pAvPairList, MsvAvTimestamp, context->Timestamp, sizeof(context->Timestamp));",
          "389:  return 1;",
          "",
          "[Added Lines]",
          "443:   goto fail;",
          "446:  cbAvPairList = context->ChallengeTargetInfo.cbBuffer;",
          "448:  if (!ntlm_av_pair_list_init(pAvPairList, cbAvPairList))",
          "449:   goto fail;",
          "451:  if (ntlm_av_pair_add(pAvPairList, cbAvPairList, MsvAvNbDomainName, (PBYTE) NbDomainName.Buffer,",
          "452:                       NbDomainName.Length) == NULL)",
          "453:   goto fail;",
          "455:  if (ntlm_av_pair_add(pAvPairList, cbAvPairList, MsvAvNbComputerName, (PBYTE) NbComputerName.Buffer,",
          "456:                       NbComputerName.Length) == NULL)",
          "457:   goto fail;",
          "459:  if (ntlm_av_pair_add(pAvPairList, cbAvPairList, MsvAvDnsDomainName, (PBYTE) DnsDomainName.Buffer,",
          "460:                       DnsDomainName.Length) == NULL)",
          "461:   goto fail;",
          "463:  if (ntlm_av_pair_add(pAvPairList, cbAvPairList, MsvAvDnsComputerName,",
          "464:                       (PBYTE) DnsComputerName.Buffer,",
          "465:                       DnsComputerName.Length) == NULL)",
          "466:   goto fail;",
          "468:  if (ntlm_av_pair_add(pAvPairList, cbAvPairList, MsvAvTimestamp, context->Timestamp,",
          "469:                       sizeof(context->Timestamp)) == NULL)",
          "470:   goto fail;",
          "472:  rc = 1;",
          "473: fail:",
          "478:  return rc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "402:  NTLM_AV_PAIR* AvDnsTreeName;",
          "403:  NTLM_AV_PAIR* ChallengeTargetInfo;",
          "404:  NTLM_AV_PAIR* AuthenticateTargetInfo;",
          "405:  AvPairsCount = 1;",
          "406:  AvPairsValueLength = 0;",
          "407:  ChallengeTargetInfo = (NTLM_AV_PAIR*) context->ChallengeTargetInfo.pvBuffer;",
          "415:  if (AvNbDomainName)",
          "416:  {",
          "419:  }",
          "421:  if (AvNbComputerName)",
          "422:  {",
          "425:  }",
          "427:  if (AvDnsDomainName)",
          "428:  {",
          "431:  }",
          "433:  if (AvDnsComputerName)",
          "434:  {",
          "437:  }",
          "439:  if (AvDnsTreeName)",
          "440:  {",
          "443:  }",
          "",
          "[Removed Lines]",
          "408:  AvNbDomainName = ntlm_av_pair_get(ChallengeTargetInfo, MsvAvNbDomainName);",
          "409:  AvNbComputerName = ntlm_av_pair_get(ChallengeTargetInfo, MsvAvNbComputerName);",
          "410:  AvDnsDomainName = ntlm_av_pair_get(ChallengeTargetInfo, MsvAvDnsDomainName);",
          "411:  AvDnsComputerName = ntlm_av_pair_get(ChallengeTargetInfo, MsvAvDnsComputerName);",
          "412:  AvDnsTreeName = ntlm_av_pair_get(ChallengeTargetInfo, MsvAvDnsTreeName);",
          "413:  AvTimestamp = ntlm_av_pair_get(ChallengeTargetInfo, MsvAvTimestamp);",
          "418:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbDomainName);",
          "424:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbComputerName);",
          "430:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsDomainName);",
          "436:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsComputerName);",
          "442:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsTreeName);",
          "",
          "[Added Lines]",
          "494:  size_t cbAvTimestamp;",
          "495:  size_t cbAvNbDomainName;",
          "496:  size_t cbAvNbComputerName;",
          "497:  size_t cbAvDnsDomainName;",
          "498:  size_t cbAvDnsComputerName;",
          "499:  size_t cbAvDnsTreeName;",
          "500:  size_t cbChallengeTargetInfo;",
          "501:  size_t cbAuthenticateTargetInfo;",
          "505:  cbChallengeTargetInfo = context->ChallengeTargetInfo.cbBuffer;",
          "506:  AvNbDomainName = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvNbDomainName,",
          "507:                                    &cbAvNbDomainName);",
          "508:  AvNbComputerName = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvNbComputerName,",
          "509:                                      &cbAvNbComputerName);",
          "510:  AvDnsDomainName = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvDnsDomainName,",
          "511:                                     &cbAvDnsDomainName);",
          "512:  AvDnsComputerName = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo,",
          "513:                                       MsvAvDnsComputerName,",
          "514:                                       &cbAvDnsComputerName);",
          "515:  AvDnsTreeName = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvDnsTreeName,",
          "516:                                   &cbAvDnsTreeName);",
          "517:  AvTimestamp = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvTimestamp,",
          "518:                                 &cbAvTimestamp);",
          "523:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbDomainName, cbAvNbDomainName);",
          "529:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbComputerName, cbAvNbComputerName);",
          "535:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsDomainName, cbAvDnsDomainName);",
          "541:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsComputerName, cbAvDnsComputerName);",
          "547:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsTreeName, cbAvDnsTreeName);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "489:   return -1;",
          "491:  AuthenticateTargetInfo = (NTLM_AV_PAIR*) context->AuthenticateTargetInfo.pvBuffer;",
          "494:  if (AvNbDomainName)",
          "497:  if (AvNbComputerName)",
          "500:  if (AvDnsDomainName)",
          "503:  if (AvDnsComputerName)",
          "506:  if (AvDnsTreeName)",
          "509:  if (AvTimestamp)",
          "512:  if (context->UseMIC)",
          "513:  {",
          "514:   UINT32 flags;",
          "515:   Data_Write_UINT32(&flags, MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK);",
          "517:  }",
          "519:  if (context->SendSingleHostData)",
          "520:  {",
          "523:  }",
          "525:  if (!context->SuppressExtendedProtection)",
          "526:  {",
          "529:   if (context->ServicePrincipalName.Length > 0)",
          "530:   {",
          "534:   }",
          "535:  }",
          "537:  if (context->NTLMv2)",
          "538:  {",
          "539:   NTLM_AV_PAIR* AvEOL;",
          "542:  }",
          "544:  return 1;",
          "",
          "[Removed Lines]",
          "492:  ntlm_av_pair_list_init(AuthenticateTargetInfo);",
          "495:   ntlm_av_pair_add_copy(AuthenticateTargetInfo, AvNbDomainName);",
          "498:   ntlm_av_pair_add_copy(AuthenticateTargetInfo, AvNbComputerName);",
          "501:   ntlm_av_pair_add_copy(AuthenticateTargetInfo, AvDnsDomainName);",
          "504:   ntlm_av_pair_add_copy(AuthenticateTargetInfo, AvDnsComputerName);",
          "507:   ntlm_av_pair_add_copy(AuthenticateTargetInfo, AvDnsTreeName);",
          "510:   ntlm_av_pair_add_copy(AuthenticateTargetInfo, AvTimestamp);",
          "516:   ntlm_av_pair_add(AuthenticateTargetInfo, MsvAvFlags, (PBYTE) &flags, 4);",
          "521:   ntlm_av_pair_add(AuthenticateTargetInfo, MsvAvSingleHost,",
          "522:                    (PBYTE) &context->SingleHostData, context->SingleHostData.Size);",
          "527:   ntlm_av_pair_add(AuthenticateTargetInfo, MsvChannelBindings, context->ChannelBindingsHash, 16);",
          "531:    ntlm_av_pair_add(AuthenticateTargetInfo, MsvAvTargetName,",
          "532:                     (PBYTE) context->ServicePrincipalName.Buffer,",
          "533:                     context->ServicePrincipalName.Length);",
          "540:   AvEOL = ntlm_av_pair_get(ChallengeTargetInfo, MsvAvEOL);",
          "541:   ZeroMemory((void*) AvEOL, 4);",
          "",
          "[Added Lines]",
          "597:  cbAuthenticateTargetInfo = context->AuthenticateTargetInfo.cbBuffer;",
          "599:  if (!ntlm_av_pair_list_init(AuthenticateTargetInfo, cbAuthenticateTargetInfo))",
          "600:   return -1;",
          "603:  {",
          "604:   if (ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvNbDomainName,",
          "605:                             cbAvNbDomainName) == NULL)",
          "606:    return -1;",
          "607:  }",
          "610:  {",
          "611:   if (ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "612:                             AvNbComputerName, cbAvNbComputerName) == NULL)",
          "613:    return -1;",
          "614:  }",
          "617:  {",
          "618:   if (ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "619:                             AvDnsDomainName, cbAvDnsDomainName) == NULL)",
          "620:    return -1;",
          "621:  }",
          "624:  {",
          "625:   if (ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "626:                             AvDnsComputerName, cbAvDnsComputerName) == NULL)",
          "627:    return -1;",
          "628:  }",
          "631:  {",
          "632:   if (ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvDnsTreeName,",
          "633:                             cbAvDnsTreeName) == NULL)",
          "634:    return -1;",
          "635:  }",
          "638:  {",
          "639:   if (ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvTimestamp,",
          "640:                             cbAvTimestamp) == NULL)",
          "641:    return -1;",
          "642:  }",
          "649:   if (ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvFlags, (PBYTE) &flags,",
          "650:                        4) == NULL)",
          "651:    return -1;",
          "656:   if (ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvSingleHost,",
          "657:                        (PBYTE) &context->SingleHostData, context->SingleHostData.Size) == NULL)",
          "658:    return -1;",
          "663:   if (ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvChannelBindings,",
          "664:                        context->ChannelBindingsHash, 16) == NULL)",
          "665:    return -1;",
          "669:    if (ntlm_av_pair_add(AuthenticateTargetInfo,",
          "670:                         cbAuthenticateTargetInfo,",
          "671:                         MsvAvTargetName,",
          "672:                         (PBYTE) context->ServicePrincipalName.Buffer,",
          "673:                         context->ServicePrincipalName.Length) == NULL)",
          "674:     return -1;",
          "681:   AvEOL = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvEOL, NULL);",
          "683:   if (!AvEOL)",
          "684:    return -1;",
          "686:   ZeroMemory(AvEOL, sizeof(NTLM_AV_PAIR));",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.h||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.h": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.h -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <winpr/stream.h>",
          "55: int ntlm_construct_challenge_target_info(NTLM_CONTEXT* context);",
          "56: int ntlm_construct_authenticate_target_info(NTLM_CONTEXT* context);",
          "",
          "[Removed Lines]",
          "27: void ntlm_av_pair_list_init(NTLM_AV_PAIR* pAvPairList);",
          "28: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList);",
          "29: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList);",
          "30: ULONG ntlm_av_pair_list_size(ULONG AvPairsCount, ULONG AvPairsValueLength);",
          "31: PBYTE ntlm_av_pair_get_value_pointer(NTLM_AV_PAIR* pAvPair);",
          "32: int ntlm_av_pair_get_next_offset(NTLM_AV_PAIR* pAvPair);",
          "33: NTLM_AV_PAIR* ntlm_av_pair_get_next_pointer(NTLM_AV_PAIR* pAvPair);",
          "34: NTLM_AV_PAIR* ntlm_av_pair_get(NTLM_AV_PAIR* pAvPairList, NTLM_AV_ID AvId);",
          "35: NTLM_AV_PAIR* ntlm_av_pair_add(NTLM_AV_PAIR* pAvPairList, NTLM_AV_ID AvId, PBYTE Value, UINT16 AvLen);",
          "36: NTLM_AV_PAIR* ntlm_av_pair_add_copy(NTLM_AV_PAIR* pAvPairList, NTLM_AV_PAIR* pAvPair);",
          "38: static INLINE UINT16 ntlm_av_pair_get_id(NTLM_AV_PAIR* pAvPair)",
          "39: {",
          "40:  UINT16 AvId;",
          "41:  Data_Read_UINT16(&pAvPair->AvId, AvId);",
          "42:  return AvId;",
          "43: }",
          "45: static INLINE UINT16 ntlm_av_pair_get_len(NTLM_AV_PAIR* pAvPair)",
          "46: {",
          "47:  UINT16 AvLen;",
          "48:  Data_Read_UINT16(&pAvPair->AvLen, AvLen);",
          "49:  return AvLen;",
          "50: }",
          "52: #define ntlm_av_pair_set_id(pAvPair, id) Data_Write_UINT16(&pAvPair->AvId, id)",
          "53: #define ntlm_av_pair_set_len(pAvPair, len) Data_Write_UINT16(&pAvPair->AvLen, len)",
          "",
          "[Added Lines]",
          "27: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairListMaxLength);",
          "28: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList);",
          "29: PBYTE ntlm_av_pair_get_value_pointer(NTLM_AV_PAIR* pAvPair, size_t cbAvPairListMaxLength);",
          "30: NTLM_AV_PAIR* ntlm_av_pair_get(void* pAvPairList, size_t avPairListLength, NTLM_AV_ID AvId,",
          "31:                                size_t* pcbAvPairListRemainingLength);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:  Stream_Read(s, challenge->ClientChallenge, 8);",
          "133:  Stream_Read_UINT32(s, challenge->Reserved3);",
          "134:  size = Stream_Length(s) - Stream_GetPosition(s);",
          "137:  if (!challenge->AvPairs)",
          "138:   return -1;",
          "",
          "[Removed Lines]",
          "135:  challenge->AvPairs = (NTLM_AV_PAIR*) malloc(size);",
          "",
          "[Added Lines]",
          "136:  if (size > UINT32_MAX)",
          "137:   return -1;",
          "139:  challenge->cbAvPairs = size;",
          "140:  challenge->AvPairs = (NTLM_AV_PAIR*) malloc(challenge->cbAvPairs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:  Stream_Write(s, challenge->Timestamp, 8);",
          "152:  Stream_Write(s, challenge->ClientChallenge, 8);",
          "153:  Stream_Write_UINT32(s, challenge->Reserved3);",
          "155:  Stream_Write(s, challenge->AvPairs, length);",
          "156:  return 1;",
          "157: }",
          "",
          "[Removed Lines]",
          "154:  length = ntlm_av_pair_list_length(challenge->AvPairs);",
          "",
          "[Added Lines]",
          "159:  length = ntlm_av_pair_list_length(challenge->AvPairs, challenge->cbAvPairs);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: {",
          "142:  if (fields->Len > 0)",
          "143:  {",
          "146:   if (offset > Stream_Length(s))",
          "147:    return -1;",
          "",
          "[Removed Lines]",
          "144:   const UINT64 offset = (UINT64)fields->BufferOffset + (UINT64)fields->Len;",
          "",
          "[Added Lines]",
          "144:   const UINT32 offset = fields->BufferOffset + fields->Len;",
          "146:   if (fields->BufferOffset > UINT32_MAX - fields->Len)",
          "147:    return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:  if (message->TargetInfo.Len > 0)",
          "449:  {",
          "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
          "451:   {",
          "452:    Stream_Free(s, FALSE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:   size_t cbAvTimestamp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
          "457:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
          "460:   if (AvTimestamp)",
          "461:   {",
          "462:    if (context->NTLMv2)",
          "463:     context->UseMIC = TRUE;",
          "466:   }",
          "467:  }",
          "",
          "[Removed Lines]",
          "458:   AvTimestamp = ntlm_av_pair_get((NTLM_AV_PAIR*) message->TargetInfo.Buffer, MsvAvTimestamp);",
          "465:    CopyMemory(context->ChallengeTimestamp, ntlm_av_pair_get_value_pointer(AvTimestamp), 8);",
          "",
          "[Added Lines]",
          "463:   AvTimestamp = ntlm_av_pair_get(message->TargetInfo.Buffer,",
          "464:                                  message->TargetInfo.Len,",
          "465:                                  MsvAvTimestamp, &cbAvTimestamp);",
          "469:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp, cbAvTimestamp);",
          "471:    if (!ptr)",
          "472:     return SEC_E_INTERNAL_ERROR;",
          "477:    CopyMemory(context->ChallengeTimestamp, ptr, 8);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "787:  if (message->NtChallengeResponse.Len > 0)",
          "788:  {",
          "789:   wStream* snt = Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);",
          "791:   if (!snt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801:   size_t cbAvFlags;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "808:   context->ChallengeTargetInfo.pvBuffer = (void*) context->NTLMv2Response.Challenge.AvPairs;",
          "809:   context->ChallengeTargetInfo.cbBuffer = message->NtChallengeResponse.Len - (28 + 16);",
          "810:   CopyMemory(context->ClientChallenge, context->NTLMv2Response.Challenge.ClientChallenge, 8);",
          "813:   if (AvFlags)",
          "815:  }",
          "817:  if (ntlm_read_message_fields_buffer(s,",
          "",
          "[Removed Lines]",
          "811:   AvFlags = ntlm_av_pair_get(context->NTLMv2Response.Challenge.AvPairs, MsvAvFlags);",
          "814:    Data_Read_UINT32(ntlm_av_pair_get_value_pointer(AvFlags), flags);",
          "",
          "[Added Lines]",
          "824:   AvFlags = ntlm_av_pair_get(context->NTLMv2Response.Challenge.AvPairs,",
          "825:                              context->NTLMv2Response.Challenge.cbAvPairs,",
          "826:                              MsvAvFlags, &cbAvFlags);",
          "829:    Data_Read_UINT32(ntlm_av_pair_get_value_pointer(AvFlags, cbAvFlags), flags);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1103: SECURITY_STATUS ntlm_server_AuthenticateComplete(NTLM_CONTEXT* context)",
          "1104: {",
          "1105:  UINT32 flags = 0;",
          "1106:  NTLM_AV_PAIR* AvFlags = NULL;",
          "1107:  NTLM_AUTHENTICATE_MESSAGE* message;",
          "1108:  BYTE messageIntegrityCheck[16];",
          "1110:  if (context->state != NTLM_STATE_COMPLETION)",
          "1111:   return SEC_E_OUT_OF_SEQUENCE;",
          "1113:  message = &context->AUTHENTICATE_MESSAGE;",
          "1116:  if (AvFlags)",
          "1120:   return SEC_E_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "1114:  AvFlags = ntlm_av_pair_get(context->NTLMv2Response.Challenge.AvPairs, MsvAvFlags);",
          "1117:   Data_Read_UINT32(ntlm_av_pair_get_value_pointer(AvFlags), flags);",
          "",
          "[Added Lines]",
          "1121:  size_t cbAvFlags;",
          "1126:  if (!context)",
          "1127:   return SEC_E_INVALID_PARAMETER;",
          "1133:  AvFlags = ntlm_av_pair_get(context->NTLMv2Response.Challenge.AvPairs,",
          "1134:                             context->NTLMv2Response.Challenge.cbAvPairs,",
          "1135:                             MsvAvFlags, &cbAvFlags);",
          "1138:   Data_Read_UINT32(ntlm_av_pair_get_value_pointer(AvFlags, cbAvFlags), flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
      "candidate_info": {
        "commit_hash": "09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
        "files": [
          "libfreerdp/gdi/graphics.c"
        ],
        "message": "Fixed CVE-2018-8787\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c": [
          "File: libfreerdp/gdi/graphics.c -> libfreerdp/gdi/graphics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: {",
          "142:  UINT32 SrcSize = length;",
          "143:  rdpGdi* gdi = context->gdi;",
          "144:  bitmap->compressed = FALSE;",
          "145:  bitmap->format = gdi->dstFormat;",
          "147:  bitmap->data = (BYTE*) _aligned_malloc(bitmap->length, 16);",
          "149:  if (!bitmap->data)",
          "",
          "[Removed Lines]",
          "146:  bitmap->length = DstWidth * DstHeight * GetBytesPerPixel(bitmap->format);",
          "",
          "[Added Lines]",
          "144:  UINT32 size = DstWidth * DstHeight;",
          "148:  if ((GetBytesPerPixel(bitmap->format) == 0) ||",
          "149:      (DstWidth == 0) || (DstHeight == 0) || (DstWidth > UINT32_MAX / DstHeight) ||",
          "150:      (size > (UINT32_MAX / GetBytesPerPixel(bitmap->format))))",
          "151:   return FALSE;",
          "153:  size *= GetBytesPerPixel(bitmap->format);",
          "154:  bitmap->length = size;",
          "",
          "---------------"
        ]
      }
    }
  ]
}