{
  "cve_id": "CVE-2015-1334",
  "cve_desc": "attach.c in LXC 1.1.2 and earlier uses the proc filesystem in a container, which allows local container users to escape AppArmor or SELinux confinement by mounting a proc filesystem with a crafted (1) AppArmor profile or (2) SELinux label.",
  "repo": "lxc/lxc",
  "patch_hash": "5c3fcae78b63ac9dd56e36075903921bd9461f9e",
  "patch_info": {
    "commit_hash": "5c3fcae78b63ac9dd56e36075903921bd9461f9e",
    "repo": "lxc/lxc",
    "commit_url": "https://github.com/lxc/lxc/commit/5c3fcae78b63ac9dd56e36075903921bd9461f9e",
    "files": [
      "src/lxc/attach.c"
    ],
    "message": "CVE-2015-1334: Don't use the container's /proc during attach\n\nA user could otherwise over-mount /proc and prevent the apparmor profile\nor selinux label from being written which combined with a modified\n/bin/sh or other commonly used binary would lead to unconfined code\nexecution.\n\nReported-by: Roman Fiedler\nSigned-off-by: St\u00e9phane Graber <stgraber@ubuntu.com>",
    "before_after_code_files": [
      "src/lxc/attach.c||src/lxc/attach.c"
    ]
  },
  "patch_diff": {
    "src/lxc/attach.c||src/lxc/attach.c": [
      "File: src/lxc/attach.c -> src/lxc/attach.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: lxc_log_define(lxc_attach, lxc);",
      "79: static struct lxc_proc_context_info *lxc_proc_get_context_info(pid_t pid)",
      "80: {",
      "81:  struct lxc_proc_context_info *info = calloc(1, sizeof(*info));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79: int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {",
      "80:  int labelfd = -1;",
      "81:  int ret = 0;",
      "82:  const char* name;",
      "83:  char* command = NULL;",
      "85:  name = lsm_name();",
      "87:  if (strcmp(name, \"nop\") == 0)",
      "88:   goto out;",
      "90:  if (strcmp(name, \"none\") == 0)",
      "91:   goto out;",
      "94:  if (strcmp(name, \"AppArmor\") == 0)",
      "95:   on_exec = 0;",
      "97:  if (on_exec) {",
      "98:   labelfd = openat(procfd, \"self/attr/exec\", O_RDWR);",
      "99:  }",
      "100:  else {",
      "101:   labelfd = openat(procfd, \"self/attr/current\", O_RDWR);",
      "102:  }",
      "104:  if (labelfd < 0) {",
      "105:   SYSERROR(\"Unable to open LSM label\");",
      "106:   ret = -1;",
      "107:   goto out;",
      "108:  }",
      "110:  if (strcmp(name, \"AppArmor\") == 0) {",
      "111:   int size;",
      "113:   command = malloc(strlen(lsm_label) + strlen(\"changeprofile \") + 1);",
      "114:   if (!command) {",
      "115:    SYSERROR(\"Failed to write apparmor profile\");",
      "116:    ret = -1;",
      "117:    goto out;",
      "118:   }",
      "120:   size = sprintf(command, \"changeprofile %s\", lsm_label);",
      "121:   if (size < 0) {",
      "122:    SYSERROR(\"Failed to write apparmor profile\");",
      "123:    ret = -1;",
      "124:    goto out;",
      "125:   }",
      "127:   if (write(labelfd, command, size + 1) < 0) {",
      "128:    SYSERROR(\"Unable to set LSM label\");",
      "129:    ret = -1;",
      "130:    goto out;",
      "131:   }",
      "132:  }",
      "133:  else if (strcmp(name, \"SELinux\") == 0) {",
      "134:   if (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {",
      "135:    SYSERROR(\"Unable to set LSM label\");",
      "136:    ret = -1;",
      "137:    goto out;",
      "138:   }",
      "139:  }",
      "140:  else {",
      "141:   ERROR(\"Unable to restore label for unknown LSM: %s\", name);",
      "142:   ret = -1;",
      "143:   goto out;",
      "144:  }",
      "146: out:",
      "147:  free(command);",
      "149:  if (labelfd != -1)",
      "150:   close(labelfd);",
      "152:  return ret;",
      "153: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "570:  struct lxc_proc_context_info* init_ctx;",
      "571:  lxc_attach_exec_t exec_function;",
      "572:  void* exec_payload;",
      "573: };",
      "575: static int attach_child_main(void* data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "649:  int procfd;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "622:  char* cwd;",
      "623:  char* new_cwd;",
      "624:  int ipc_sockets[2];",
      "625:  signed long personality;",
      "627:  if (!options)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "702:  int procfd;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "833:   rexit(-1);",
      "834:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "914:  procfd = open(\"/proc\", O_DIRECTORY | O_RDONLY);",
      "915:  if (procfd < 0) {",
      "916:   SYSERROR(\"Unable to open /proc\");",
      "917:   shutdown(ipc_sockets[1], SHUT_RDWR);",
      "918:   rexit(-1);",
      "919:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "860:    .options = options,",
      "861:    .init_ctx = init_ctx,",
      "862:    .exec_function = exec_function,",
      "864:   };",
      "",
      "[Removed Lines]",
      "863:    .exec_payload = exec_payload",
      "",
      "[Added Lines]",
      "948:    .exec_payload = exec_payload,",
      "949:    .procfd = procfd",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "898: {",
      "899:  struct attach_clone_payload* payload = (struct attach_clone_payload*)data;",
      "900:  int ipc_socket = payload->ipc_socket;",
      "901:  lxc_attach_options_t* options = payload->options;",
      "902:  struct lxc_proc_context_info* init_ctx = payload->init_ctx;",
      "903: #if HAVE_SYS_PERSONALITY_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "987:  int procfd = payload->procfd;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1038:  close(ipc_socket);",
      "1042:   int on_exec;",
      "1045:   on_exec = options->attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0;",
      "1056:    rexit(-1);",
      "1057:   }",
      "1058:  }",
      "",
      "[Removed Lines]",
      "1041:  if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM)) {",
      "1043:   int proc_mounted;",
      "1046:   proc_mounted = mount_proc_if_needed(\"/\");",
      "1047:   if (proc_mounted == -1) {",
      "1048:    ERROR(\"Error mounting a sane /proc\");",
      "1049:    rexit(-1);",
      "1050:   }",
      "1051:   ret = lsm_process_label_set(init_ctx->lsm_label,",
      "1052:     init_ctx->container->lxc_conf, 0, on_exec);",
      "1053:   if (proc_mounted)",
      "1054:    umount(\"/proc\");",
      "1055:   if (ret < 0) {",
      "",
      "[Added Lines]",
      "1128:  if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM) && init_ctx->lsm_label) {",
      "1132:   if (lsm_set_label_at(procfd, on_exec, init_ctx->lsm_label) < 0) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1103:   }",
      "1104:  }",
      "1107:  rexit(payload->exec_function(payload->exec_payload));",
      "1108: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1184:  close(procfd);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "659e807c8dd1525a5c94bdecc47599079fad8407",
      "candidate_info": {
        "commit_hash": "659e807c8dd1525a5c94bdecc47599079fad8407",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/659e807c8dd1525a5c94bdecc47599079fad8407",
        "files": [
          "src/lxc/attach.c"
        ],
        "message": "CVE-2015-1334: Don't use the container's /proc during attach\n\nA user could otherwise over-mount /proc and prevent the apparmor profile\nor selinux label from being written which combined with a modified\n/bin/sh or other commonly used binary would lead to unconfined code\nexecution.\n\nReported-by: Roman Fiedler\nSigned-off-by: St\u00e9phane Graber <stgraber@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/attach.c||src/lxc/attach.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/attach.c||src/lxc/attach.c"
          ],
          "candidate": [
            "src/lxc/attach.c||src/lxc/attach.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/attach.c||src/lxc/attach.c": [
          "File: src/lxc/attach.c -> src/lxc/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: lxc_log_define(lxc_attach, lxc);",
          "79: static struct lxc_proc_context_info *lxc_proc_get_context_info(pid_t pid)",
          "80: {",
          "81:  struct lxc_proc_context_info *info = calloc(1, sizeof(*info));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {",
          "80:  int labelfd = -1;",
          "81:  int ret = 0;",
          "82:  const char* name;",
          "83:  char* command = NULL;",
          "85:  name = lsm_name();",
          "87:  if (strcmp(name, \"nop\") == 0)",
          "88:   goto out;",
          "90:  if (strcmp(name, \"none\") == 0)",
          "91:   goto out;",
          "94:  if (strcmp(name, \"AppArmor\") == 0)",
          "95:   on_exec = 0;",
          "97:  if (on_exec) {",
          "98:   labelfd = openat(procfd, \"self/attr/exec\", O_RDWR);",
          "99:  }",
          "100:  else {",
          "101:   labelfd = openat(procfd, \"self/attr/current\", O_RDWR);",
          "102:  }",
          "104:  if (labelfd < 0) {",
          "105:   SYSERROR(\"Unable to open LSM label\");",
          "106:   ret = -1;",
          "107:   goto out;",
          "108:  }",
          "110:  if (strcmp(name, \"AppArmor\") == 0) {",
          "111:   int size;",
          "113:   command = malloc(strlen(lsm_label) + strlen(\"changeprofile \") + 1);",
          "114:   if (!command) {",
          "115:    SYSERROR(\"Failed to write apparmor profile\");",
          "116:    ret = -1;",
          "117:    goto out;",
          "118:   }",
          "120:   size = sprintf(command, \"changeprofile %s\", lsm_label);",
          "121:   if (size < 0) {",
          "122:    SYSERROR(\"Failed to write apparmor profile\");",
          "123:    ret = -1;",
          "124:    goto out;",
          "125:   }",
          "127:   if (write(labelfd, command, size + 1) < 0) {",
          "128:    SYSERROR(\"Unable to set LSM label\");",
          "129:    ret = -1;",
          "130:    goto out;",
          "131:   }",
          "132:  }",
          "133:  else if (strcmp(name, \"SELinux\") == 0) {",
          "134:   if (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {",
          "135:    SYSERROR(\"Unable to set LSM label\");",
          "136:    ret = -1;",
          "137:    goto out;",
          "138:   }",
          "139:  }",
          "140:  else {",
          "141:   ERROR(\"Unable to restore label for unknown LSM: %s\", name);",
          "142:   ret = -1;",
          "143:   goto out;",
          "144:  }",
          "146: out:",
          "147:  free(command);",
          "149:  if (labelfd != -1)",
          "150:   close(labelfd);",
          "152:  return ret;",
          "153: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:  struct lxc_proc_context_info* init_ctx;",
          "571:  lxc_attach_exec_t exec_function;",
          "572:  void* exec_payload;",
          "573: };",
          "575: static int attach_child_main(void* data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "649:  int procfd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:  char* cwd;",
          "623:  char* new_cwd;",
          "624:  int ipc_sockets[2];",
          "625:  signed long personality;",
          "627:  if (!options)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "702:  int procfd;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "833:   rexit(-1);",
          "834:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "914:  procfd = open(\"/proc\", O_DIRECTORY | O_RDONLY);",
          "915:  if (procfd < 0) {",
          "916:   SYSERROR(\"Unable to open /proc\");",
          "917:   shutdown(ipc_sockets[1], SHUT_RDWR);",
          "918:   rexit(-1);",
          "919:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "860:    .options = options,",
          "861:    .init_ctx = init_ctx,",
          "862:    .exec_function = exec_function,",
          "864:   };",
          "",
          "[Removed Lines]",
          "863:    .exec_payload = exec_payload",
          "",
          "[Added Lines]",
          "948:    .exec_payload = exec_payload,",
          "949:    .procfd = procfd",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "898: {",
          "899:  struct attach_clone_payload* payload = (struct attach_clone_payload*)data;",
          "900:  int ipc_socket = payload->ipc_socket;",
          "901:  lxc_attach_options_t* options = payload->options;",
          "902:  struct lxc_proc_context_info* init_ctx = payload->init_ctx;",
          "903: #if HAVE_SYS_PERSONALITY_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "987:  int procfd = payload->procfd;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1038:  close(ipc_socket);",
          "1042:   int on_exec;",
          "1045:   on_exec = options->attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0;",
          "1056:    rexit(-1);",
          "1057:   }",
          "1058:  }",
          "",
          "[Removed Lines]",
          "1041:  if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM)) {",
          "1043:   int proc_mounted;",
          "1046:   proc_mounted = mount_proc_if_needed(\"/\");",
          "1047:   if (proc_mounted == -1) {",
          "1048:    ERROR(\"Error mounting a sane /proc\");",
          "1049:    rexit(-1);",
          "1050:   }",
          "1051:   ret = lsm_process_label_set(init_ctx->lsm_label,",
          "1052:     init_ctx->container->lxc_conf, 0, on_exec);",
          "1053:   if (proc_mounted)",
          "1054:    umount(\"/proc\");",
          "1055:   if (ret < 0) {",
          "",
          "[Added Lines]",
          "1128:  if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM) && init_ctx->lsm_label) {",
          "1132:   if (lsm_set_label_at(procfd, on_exec, init_ctx->lsm_label) < 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1103:   }",
          "1104:  }",
          "1107:  rexit(payload->exec_function(payload->exec_payload));",
          "1108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1184:  close(procfd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15ec0fd9d490dd5c8a153401360233c6ee947c24",
      "candidate_info": {
        "commit_hash": "15ec0fd9d490dd5c8a153401360233c6ee947c24",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/15ec0fd9d490dd5c8a153401360233c6ee947c24",
        "files": [
          "src/lxc/attach.c"
        ],
        "message": "CVE-2015-1334: Don't use the container's /proc during attach\n\nA user could otherwise over-mount /proc and prevent the apparmor profile\nor selinux label from being written which combined with a modified\n/bin/sh or other commonly used binary would lead to unconfined code\nexecution.\n\nReported-by: Roman Fiedler\nSigned-off-by: St\u00e9phane Graber <stgraber@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/attach.c||src/lxc/attach.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/attach.c||src/lxc/attach.c"
          ],
          "candidate": [
            "src/lxc/attach.c||src/lxc/attach.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/attach.c||src/lxc/attach.c": [
          "File: src/lxc/attach.c -> src/lxc/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: lxc_log_define(lxc_attach, lxc);",
          "79: static struct lxc_proc_context_info *lxc_proc_get_context_info(pid_t pid)",
          "80: {",
          "81:  struct lxc_proc_context_info *info = calloc(1, sizeof(*info));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {",
          "80:  int labelfd = -1;",
          "81:  int ret = 0;",
          "82:  const char* name;",
          "83:  char* command = NULL;",
          "85:  name = lsm_name();",
          "87:  if (strcmp(name, \"nop\") == 0)",
          "88:   goto out;",
          "90:  if (strcmp(name, \"none\") == 0)",
          "91:   goto out;",
          "94:  if (strcmp(name, \"AppArmor\") == 0)",
          "95:   on_exec = 0;",
          "97:  if (on_exec) {",
          "98:   labelfd = openat(procfd, \"self/attr/exec\", O_RDWR);",
          "99:  }",
          "100:  else {",
          "101:   labelfd = openat(procfd, \"self/attr/current\", O_RDWR);",
          "102:  }",
          "104:  if (labelfd < 0) {",
          "105:   SYSERROR(\"Unable to open LSM label\");",
          "106:   ret = -1;",
          "107:   goto out;",
          "108:  }",
          "110:  if (strcmp(name, \"AppArmor\") == 0) {",
          "111:   int size;",
          "113:   command = malloc(strlen(lsm_label) + strlen(\"changeprofile \") + 1);",
          "114:   if (!command) {",
          "115:    SYSERROR(\"Failed to write apparmor profile\");",
          "116:    ret = -1;",
          "117:    goto out;",
          "118:   }",
          "120:   size = sprintf(command, \"changeprofile %s\", lsm_label);",
          "121:   if (size < 0) {",
          "122:    SYSERROR(\"Failed to write apparmor profile\");",
          "123:    ret = -1;",
          "124:    goto out;",
          "125:   }",
          "127:   if (write(labelfd, command, size + 1) < 0) {",
          "128:    SYSERROR(\"Unable to set LSM label\");",
          "129:    ret = -1;",
          "130:    goto out;",
          "131:   }",
          "132:  }",
          "133:  else if (strcmp(name, \"SELinux\") == 0) {",
          "134:   if (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {",
          "135:    SYSERROR(\"Unable to set LSM label\");",
          "136:    ret = -1;",
          "137:    goto out;",
          "138:   }",
          "139:  }",
          "140:  else {",
          "141:   ERROR(\"Unable to restore label for unknown LSM: %s\", name);",
          "142:   ret = -1;",
          "143:   goto out;",
          "144:  }",
          "146: out:",
          "147:  free(command);",
          "149:  if (labelfd != -1)",
          "150:   close(labelfd);",
          "152:  return ret;",
          "153: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:  struct lxc_proc_context_info* init_ctx;",
          "574:  lxc_attach_exec_t exec_function;",
          "575:  void* exec_payload;",
          "576: };",
          "578: static int attach_child_main(void* data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652:  int procfd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "625:  char* cwd;",
          "626:  char* new_cwd;",
          "627:  int ipc_sockets[2];",
          "628:  signed long personality;",
          "630:  if (!options)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:  int procfd;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "836:   rexit(-1);",
          "837:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "917:  procfd = open(\"/proc\", O_DIRECTORY | O_RDONLY);",
          "918:  if (procfd < 0) {",
          "919:   SYSERROR(\"Unable to open /proc\");",
          "920:   shutdown(ipc_sockets[1], SHUT_RDWR);",
          "921:   rexit(-1);",
          "922:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "863:    .options = options,",
          "864:    .init_ctx = init_ctx,",
          "865:    .exec_function = exec_function,",
          "867:   };",
          "",
          "[Removed Lines]",
          "866:    .exec_payload = exec_payload",
          "",
          "[Added Lines]",
          "951:    .exec_payload = exec_payload,",
          "952:    .procfd = procfd",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "901: {",
          "902:  struct attach_clone_payload* payload = (struct attach_clone_payload*)data;",
          "903:  int ipc_socket = payload->ipc_socket;",
          "904:  lxc_attach_options_t* options = payload->options;",
          "905:  struct lxc_proc_context_info* init_ctx = payload->init_ctx;",
          "906: #if HAVE_SYS_PERSONALITY_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "990:  int procfd = payload->procfd;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1026:  close(ipc_socket);",
          "1030:   int on_exec;",
          "1032:   on_exec = options->attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0;",
          "1035:    rexit(-1);",
          "1036:   }",
          "1037:  }",
          "",
          "[Removed Lines]",
          "1029:  if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM)) {",
          "1033:   ret = lsm_process_label_set(init_ctx->lsm_label, 0, on_exec);",
          "1034:   if (ret < 0) {",
          "",
          "[Added Lines]",
          "1116:  if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM) && init_ctx->lsm_label) {",
          "1120:   if (lsm_set_label_at(procfd, on_exec, init_ctx->lsm_label) < 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1082:   }",
          "1083:  }",
          "1086:  rexit(payload->exec_function(payload->exec_payload));",
          "1087: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1172:  close(procfd);",
          "",
          "---------------"
        ]
      }
    }
  ]
}