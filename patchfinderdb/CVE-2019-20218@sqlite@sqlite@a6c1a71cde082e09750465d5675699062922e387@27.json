{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
      "candidate_info": {
        "commit_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select6.test"
        ],
        "message": "Fix the query flattener optimization so that it preserve the \"SF_Compound\" bit when flattening a compound subquery into a non-compound outer query. Failure to preserve that bit could allow subsequent flattenings which are not valid. Fix for ticket [c41afac34f15781fe09cd].\n\nFossilOrigin-Name: 523b42371122d9e1b3185425745f1490138bff7f7cc941ee26ee81df7ade5bf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select6.test||test/select6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c736c40aab071a69bd5c5347b7c116d87ea3954019e967ca8ff7bdb4b518e5bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4045:       substSelect(&x, pParent, 0);",
          "4046:     }",
          "",
          "[Removed Lines]",
          "4051:     pParent->selFlags |= pSub->selFlags & SF_Distinct;",
          "",
          "[Added Lines]",
          "4050:     pParent->selFlags |= pSub->selFlags & SF_Compound;",
          "",
          "---------------"
        ],
        "test/select6.test||test/select6.test": [
          "File: test/select6.test -> test/select6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # focus of this file is testing SELECT statements that contain",
          "13: # subqueries in their FROM clause.",
          "14: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "15: # $Id: select6.test,v 1.29 2009/01/09 01:12:28 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:     FROM ( SELECT count(*) AS cnt FROM t1 );",
          "614: } {{}}",
          "617: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: # 2019-05-29 ticket https://www.sqlite.org/src/info/c41afac34f15781f",
          "616: # A LIMIT clause in a subquery is incorrectly applied to a subquery.",
          "617: #",
          "618: do_execsql_test 12.100 {",
          "619:   DROP TABLE t1;",
          "620:   DROP TABLE t2;",
          "621:   CREATE TABLE t1(a);",
          "622:   INSERT INTO t1 VALUES(1);",
          "623:   INSERT INTO t1 VALUES(2);",
          "624:   CREATE TABLE t2(b);",
          "625:   INSERT INTO t2 VALUES(3);",
          "626:   SELECT * FROM (",
          "627:     SELECT * FROM (SELECT * FROM t1 LIMIT 1)",
          "628:     UNION ALL",
          "629:     SELECT * from t2);",
          "630: } {1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
      "candidate_info": {
        "commit_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "\"STORED\" is not actually a keyword.  The parser looks for STORED as an ordinary identifier.\n\nFossilOrigin-Name: 167cd574d6a1d4fe2253f5bc5aaa7b031cbc82853e4d33b8d9b72eaf049003d4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "225: %endif",
          "226:   REINDEX RENAME CTIME_KW IF",
          "227:   .",
          "",
          "[Removed Lines]",
          "224:   GENERATED ALWAYS STORED",
          "",
          "[Added Lines]",
          "224:   GENERATED ALWAYS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73b21382d4abf02c435b25c7c1da4dd614023068",
      "candidate_info": {
        "commit_hash": "73b21382d4abf02c435b25c7c1da4dd614023068",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73b21382d4abf02c435b25c7c1da4dd614023068",
        "files": [
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Ensure fts5 consistently calls sqlite3_value_text() before sqlite3_value_bytes(). This matters when storing blobs in fts5 tables within utf-16 databases. Fix for [cf36cb4e02].\n\nFossilOrigin-Name: c16305eba0eb14368f2631b9a82b7eb4483c93f3b31257ee7c33f9b00c344379",
        "before_after_code_files": [
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:   for(ctx.iCol=0; rc==SQLITE_OK && ctx.iCol<pConfig->nCol; ctx.iCol++){",
          "739:     ctx.szCol = 0;",
          "740:     if( pConfig->abUnindexed[ctx.iCol]==0 ){",
          "741:       rc = sqlite3Fts5Tokenize(pConfig,",
          "742:           FTS5_TOKENIZE_DOCUMENT,",
          "745:           (void*)&ctx,",
          "746:           fts5StorageInsertCallback",
          "747:       );",
          "",
          "[Removed Lines]",
          "743:           (const char*)sqlite3_value_text(apVal[ctx.iCol+2]),",
          "744:           sqlite3_value_bytes(apVal[ctx.iCol+2]),",
          "",
          "[Added Lines]",
          "741:       const char *zText = sqlite3_value_text(apVal[ctx.iCol+2]);",
          "742:       int nText = sqlite3_value_bytes(apVal[ctx.iCol+2]);",
          "745:           zText, nText,",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test": [
          "File: ext/fts5/test/fts5integrity.test -> ext/fts5/test/fts5integrity.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   } {1000}",
          "211: }",
          "213: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: #-------------------------------------------------------------------------",
          "214: reset_db",
          "215: do_execsql_test 7.0 {",
          "216:   PRAGMA encoding = 'UTF-16';",
          "217:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "218:   INSERT INTO vt0 VALUES (x'46f0');",
          "219:   SELECT quote(c0) FROM vt0;",
          "220: } {X'46F0'}",
          "222: do_execsql_test 7.1 {",
          "223:   UPDATE vt0 SET c0='';",
          "224: }",
          "226: do_execsql_test 7.2 {",
          "227:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "228: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01ca865f31c0c817ede7f357401ef76cf311ae662397908464f53e1c147f5b6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17180fca9d46d95c9572edcc17409827e057260c",
      "candidate_info": {
        "commit_hash": "17180fca9d46d95c9572edcc17409827e057260c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/17180fca9d46d95c9572edcc17409827e057260c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Improved optimization of the AND and OR operators.\n\nFossilOrigin-Name: 0fbd154eb419b57b9c064c1f47346835d6324388b966b73f8a0122de065f08b1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a2ead8aa4517b63cda7bf84464326e9cb5e228224caa603568c0e04ea44e6588",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1808:   return pExpr->u.zToken[4]==0;",
          "1809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1824: Expr *sqlite3ExprSimplifiedAndOr(Expr *pExpr){",
          "1825:   assert( pExpr!=0 );",
          "1826:   if( pExpr->op==TK_AND || pExpr->op==TK_OR ){",
          "1827:     Expr *pRight = sqlite3ExprSimplifiedAndOr(pExpr->pRight);",
          "1828:     Expr *pLeft = sqlite3ExprSimplifiedAndOr(pExpr->pLeft);",
          "1829:     if( ExprAlwaysTrue(pLeft) || ExprAlwaysFalse(pRight) ){",
          "1830:       pExpr = pExpr->op==TK_AND ? pRight : pLeft;",
          "1831:     }else if( ExprAlwaysTrue(pRight) || ExprAlwaysFalse(pLeft) ){",
          "1832:       pExpr = pExpr->op==TK_AND ? pLeft : pRight;",
          "1833:     }",
          "1834:   }",
          "1835:   return pExpr;",
          "1836: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4400:   op = pExpr->op;",
          "4401:   switch( op ){",
          "4410:     case TK_OR: {",
          "4414:       break;",
          "4415:     }",
          "4416:     case TK_NOT: {",
          "",
          "[Removed Lines]",
          "4402:     case TK_AND: {",
          "4403:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4404:       testcase( jumpIfNull==0 );",
          "4405:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,jumpIfNull^SQLITE_JUMPIFNULL);",
          "4406:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4407:       sqlite3VdbeResolveLabel(v, d2);",
          "4408:       break;",
          "4409:     }",
          "4411:       testcase( jumpIfNull==0 );",
          "4412:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4413:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4429:     case TK_AND:",
          "4431:       Expr *pAlt = sqlite3ExprSimplifiedAndOr(pExpr);",
          "4432:       if( pAlt!=pExpr ){",
          "4433:         sqlite3ExprIfTrue(pParse, pAlt, dest, jumpIfNull);",
          "4434:       }else if( op==TK_AND ){",
          "4435:         int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4436:         testcase( jumpIfNull==0 );",
          "4437:         sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,",
          "4438:                            jumpIfNull^SQLITE_JUMPIFNULL);",
          "4439:         sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4440:         sqlite3VdbeResolveLabel(v, d2);",
          "4441:       }else{",
          "4442:         testcase( jumpIfNull==0 );",
          "4443:         sqlite3ExprIfTrue(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4444:         sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4445:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4566:   assert( pExpr->op!=TK_GE || op==OP_Lt );",
          "4568:   switch( pExpr->op ){",
          "4575:     case TK_OR: {",
          "4581:       break;",
          "4582:     }",
          "4583:     case TK_NOT: {",
          "",
          "[Removed Lines]",
          "4569:     case TK_AND: {",
          "4570:       testcase( jumpIfNull==0 );",
          "4571:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4572:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4573:       break;",
          "4574:     }",
          "4576:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4577:       testcase( jumpIfNull==0 );",
          "4578:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2, jumpIfNull^SQLITE_JUMPIFNULL);",
          "4579:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4580:       sqlite3VdbeResolveLabel(v, d2);",
          "",
          "[Added Lines]",
          "4601:     case TK_AND:",
          "4603:       Expr *pAlt = sqlite3ExprSimplifiedAndOr(pExpr);",
          "4604:       if( pAlt!=pExpr ){",
          "4605:         sqlite3ExprIfFalse(pParse, pAlt, dest, jumpIfNull);",
          "4606:       }else if( pExpr->op==TK_AND ){",
          "4607:         testcase( jumpIfNull==0 );",
          "4608:         sqlite3ExprIfFalse(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4609:         sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4610:       }else{",
          "4611:         int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4612:         testcase( jumpIfNull==0 );",
          "4613:         sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2,",
          "4614:                           jumpIfNull^SQLITE_JUMPIFNULL);",
          "4615:         sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4616:         sqlite3VdbeResolveLabel(v, d2);",
          "4617:       }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3859: Expr *sqlite3PExpr(Parse*, int, Expr*, Expr*);",
          "3860: void sqlite3PExprAddSelect(Parse*, Expr*, Select*);",
          "3861: Expr *sqlite3ExprAnd(Parse*,Expr*, Expr*);",
          "3862: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3863: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3864: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3862: Expr *sqlite3ExprSimplifiedAndOr(Expr*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c04c692043c55f057038d244d4333b327e1147d",
      "candidate_info": {
        "commit_hash": "7c04c692043c55f057038d244d4333b327e1147d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7c04c692043c55f057038d244d4333b327e1147d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fallocate.test"
        ],
        "message": "Minor fix the fallocate.test module change from [7cd56cad5efead5]\n\nFossilOrigin-Name: 94fb7a47003c3c1a52e833e98d27399cfec5382afde2b3990e8223c8bff7cfa0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fallocate.test||test/fallocate.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ce93e824a954d1e0cf8d7343e59a2660175f42bd4dac02aed8ad77644e7eb2f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fallocate.test||test/fallocate.test": [
          "File: test/fallocate.test -> test/fallocate.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: } {1024}",
          "71: do_test fallocate-1.8 { execsql { COMMIT } } {}",
          "74:   set nPg [db one {PRAGMA page_count}]",
          "75:   set nFile [expr [file size test.db] / 1024]",
          "76:   list [expr $nPg<100] [expr $nFile>100]",
          "77: } {1 1}",
          "80:   PRAGMA max_page_count = 100;",
          "83: #-------------------------------------------------------------------------",
          "84: # The following tests - fallocate-2.* - test that things work in WAL",
          "",
          "[Removed Lines]",
          "73: do_test 1.8 {",
          "79: do_execsql_test 1.9 {",
          "81: } {}",
          "",
          "[Added Lines]",
          "73: do_test fallocate-1.8 {",
          "79: do_execsql_test fallocate-1.9 {",
          "81: } {100}",
          "",
          "---------------"
        ]
      }
    }
  ]
}