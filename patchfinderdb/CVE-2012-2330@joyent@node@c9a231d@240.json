{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a5798b0971467bea8b72a03892121a410e2ff3b",
      "candidate_info": {
        "commit_hash": "3a5798b0971467bea8b72a03892121a410e2ff3b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3a5798b0971467bea8b72a03892121a410e2ff3b",
        "files": [
          "lib/querystring.js"
        ],
        "message": "querystring: improved speed and code cleanup",
        "before_after_code_files": [
          "lib/querystring.js||liquerystring.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/querystring.js||liquerystring.js": [
          "File: lib/querystring.js -> liquerystring.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: QueryString.stringify = QueryString.encode = function(obj, sep, eq, name) {",
          "135:   sep = sep || '&';",
          "136:   eq = eq || '=';",
          "159:   }",
          "160: };",
          "163: QueryString.parse = QueryString.decode = function(qs, sep, eq, options) {",
          "164:   sep = sep || '&';",
          "165:   eq = eq || '=';",
          "174:   if (typeof qs !== 'string' || qs.length === 0) {",
          "175:     return obj;",
          "",
          "[Removed Lines]",
          "137:   obj = (obj === null) ? undefined : obj;",
          "139:   switch (typeof obj) {",
          "140:     case 'object':",
          "141:       return Object.keys(obj).map(function(k) {",
          "142:         if (Array.isArray(obj[k])) {",
          "143:           return obj[k].map(function(v) {",
          "144:             return QueryString.escape(stringifyPrimitive(k)) +",
          "145:                    eq +",
          "146:                    QueryString.escape(stringifyPrimitive(v));",
          "147:           }).join(sep);",
          "148:         } else {",
          "149:           return QueryString.escape(stringifyPrimitive(k)) +",
          "150:                  eq +",
          "151:                  QueryString.escape(stringifyPrimitive(obj[k]));",
          "152:         }",
          "153:       }).join(sep);",
          "155:     default:",
          "156:       if (!name) return '';",
          "157:       return QueryString.escape(stringifyPrimitive(name)) + eq +",
          "158:              QueryString.escape(stringifyPrimitive(obj));",
          "166:   var obj = {},",
          "167:       maxKeys = 1000;",
          "170:   if (options && typeof options.maxKeys === 'number') {",
          "171:     maxKeys = options.maxKeys;",
          "172:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:   var regexp = /\\+/g;",
          "179:   qs = qs.split(sep);",
          "184:   }",
          "187:     var x = qs[i].replace(regexp, '%20'),",
          "188:         idx = x.indexOf(eq),",
          "194:       vstr = '';",
          "195:     }",
          "",
          "[Removed Lines]",
          "182:   if (maxKeys > 0) {",
          "183:     qs = qs.slice(0, maxKeys);",
          "186:   for (var i = 0, len = qs.length; i < len; ++i) {",
          "189:         kstr = x.substring(0, idx),",
          "190:         vstr = x.substring(idx + 1), k, v;",
          "192:     if (kstr === '' && vstr !== '') {",
          "193:       kstr = vstr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:     if (!hasOwnProperty(obj, k)) {",
          "206:       obj[k] = v;",
          "210:       obj[k].push(v);",
          "211:     }",
          "212:   }",
          "",
          "[Removed Lines]",
          "207:     } else if (!Array.isArray(obj[k])) {",
          "208:       obj[k] = [obj[k], v];",
          "209:     } else {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d69bbfa87551191171e61be858b2bf20658d73e",
      "candidate_info": {
        "commit_hash": "3d69bbfa87551191171e61be858b2bf20658d73e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3d69bbfa87551191171e61be858b2bf20658d73e",
        "files": [
          "doc/api/http.markdown",
          "doc/api/net.markdown",
          "lib/net.js",
          "test/simple/test-net-server-bind.js"
        ],
        "message": "net, http: add backlog parameter to .listen()",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-server-bind.js||test/simple/test-net-server-bind.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: function isPipeName(s) {",
          "60: }",
          "",
          "[Removed Lines]",
          "59:   return typeof s === 'string' && toPort(s) === false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161: Socket.prototype.listen = function() {",
          "162:   var self = this;",
          "163:   self.on('connection', arguments[0]);",
          "165: };",
          "",
          "[Removed Lines]",
          "164:   listen(self, null, null);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "747: exports.Server = Server;",
          "753: var createServerHandle = exports._createServerHandle =",
          "",
          "[Removed Lines]",
          "750: function toPort(x) { return (x = Number(x)) >= 0 ? x : false; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "786: };",
          "790:   var self = this;",
          "791:   var r = 0;",
          "",
          "[Removed Lines]",
          "789: Server.prototype._listen2 = function(address, port, addressType) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "805:   self._handle.onconnection = onconnection;",
          "806:   self._handle.socket = self;",
          "810:   if (r) {",
          "811:     self._handle.close();",
          "",
          "[Removed Lines]",
          "808:   r = self._handle.listen(self._backlog || 128);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "822: };",
          "826:   if (process.env.NODE_UNIQUE_ID) {",
          "827:     var cluster = require('cluster');",
          "828:     cluster._getServer(self, address, port, addressType, function(handle) {",
          "829:       self._handle = handle;",
          "831:     });",
          "832:   } else {",
          "834:   }",
          "835: }",
          "",
          "[Removed Lines]",
          "825: function listen(self, address, port, addressType) {",
          "830:       self._listen2(address, port, addressType);",
          "833:     self._listen2(address, port, addressType);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "843:     self.once('listening', lastArg);",
          "844:   }",
          "848:   var TCP = process.binding('tcp_wrap').TCP;",
          "850:   if (arguments.length == 0 || typeof arguments[0] == 'function') {",
          "855:   } else if (arguments[0] instanceof TCP) {",
          "856:     self._handle = arguments[0];",
          "859:   } else if (isPipeName(arguments[0])) {",
          "861:     var pipeName = self._pipeName = arguments[0];",
          "864:   } else if (typeof arguments[1] == 'undefined' ||",
          "869:   } else {",
          "871:     require('dns').lookup(arguments[1], function(err, ip, addressType) {",
          "872:       if (err) {",
          "873:         self.emit('error', err);",
          "874:       } else {",
          "876:       }",
          "877:     });",
          "878:   }",
          "",
          "[Removed Lines]",
          "846:   var port = toPort(arguments[0]);",
          "853:     listen(self, null, null);",
          "857:     listen(self, null, -1, -1);",
          "862:     listen(self, pipeName, -1, -1);",
          "865:              typeof arguments[1] == 'function') {",
          "867:     listen(self, '0.0.0.0', port, 4);",
          "875:         listen(self, ip || '0.0.0.0', port, ip ? addressType : 4);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-server-bind.js||test/simple/test-net-server-bind.js": [
          "File: test/simple/test-net-server-bind.js -> test/simple/test-net-server-bind.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: });",
          "66: process.on('exit', function() {",
          "67:   assert.ok(address0.port > 100);",
          "68:   assert.equal(common.PORT, address1.port);",
          "69:   assert.equal(common.PORT + 1, address2.port);",
          "70: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: var address3;",
          "68: var server3 = net.createServer(function(socket) { });",
          "70: server3.listen(common.PORT + 2, '0.0.0.0', 127, function() {",
          "71:   address3 = server3.address();",
          "72:   console.log('address3 %j', address3);",
          "73:   server3.close();",
          "74: });",
          "79: var address4;",
          "80: var server4 = net.createServer(function(socket) { });",
          "82: server4.listen(common.PORT + 3, 127, function() {",
          "83:   address4 = server4.address();",
          "84:   console.log('address4 %j', address4);",
          "85:   server4.close();",
          "86: });",
          "93:   assert.equal(common.PORT + 2, address3.port);",
          "94:   assert.equal(common.PORT + 3, address4.port);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44eb279ef815cbb9bbeaa3bd6bd7fd7d56dca2da",
      "candidate_info": {
        "commit_hash": "44eb279ef815cbb9bbeaa3bd6bd7fd7d56dca2da",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/44eb279ef815cbb9bbeaa3bd6bd7fd7d56dca2da",
        "files": [
          "lib/zlib.js",
          "src/node_zlib.cc"
        ],
        "message": "zlib: don't use C++ templates\n\nReduces the executable's size by a few kilobytes.",
        "before_after_code_files": [
          "lib/zlib.js||lizlib.js",
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/zlib.js||lizlib.js": [
          "File: lib/zlib.js -> lizlib.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: function Deflate(opts) {",
          "171:   if (!(this instanceof Deflate)) return new Deflate(opts);",
          "173: }",
          "175: function Inflate(opts) {",
          "176:   if (!(this instanceof Inflate)) return new Inflate(opts);",
          "178: }",
          "",
          "[Removed Lines]",
          "172:   Zlib.call(this, opts, binding.Deflate);",
          "177:   Zlib.call(this, opts, binding.Inflate);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183: function Gzip(opts) {",
          "184:   if (!(this instanceof Gzip)) return new Gzip(opts);",
          "186: }",
          "188: function Gunzip(opts) {",
          "189:   if (!(this instanceof Gunzip)) return new Gunzip(opts);",
          "191: }",
          "",
          "[Removed Lines]",
          "185:   Zlib.call(this, opts, binding.Gzip);",
          "190:   Zlib.call(this, opts, binding.Gunzip);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196: function DeflateRaw(opts) {",
          "197:   if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);",
          "199: }",
          "201: function InflateRaw(opts) {",
          "202:   if (!(this instanceof InflateRaw)) return new InflateRaw(opts);",
          "204: }",
          "208: function Unzip(opts) {",
          "209:   if (!(this instanceof Unzip)) return new Unzip(opts);",
          "211: }",
          "",
          "[Removed Lines]",
          "198:   Zlib.call(this, opts, binding.DeflateRaw);",
          "203:   Zlib.call(this, opts, binding.InflateRaw);",
          "210:   Zlib.call(this, opts, binding.Unzip);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:   this._opts = opts = opts || {};",
          "221:   this._queue = [];",
          "222:   this._processing = false;",
          "",
          "[Removed Lines]",
          "219: function Zlib(opts, Binding) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269:     }",
          "270:   }",
          "273:   this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,",
          "274:                      opts.level || exports.Z_DEFAULT_COMPRESSION,",
          "275:                      opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,",
          "",
          "[Removed Lines]",
          "272:   this._binding = new Binding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   UNZIP",
          "48: };",
          "53: void InitZlib(v8::Handle<v8::Object> target);",
          "",
          "[Removed Lines]",
          "50: template <node_zlib_mode mode> class ZCtx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  public:",
          "66:   ~ZCtx() {",
          "68:       (void)deflateEnd(&strm_);",
          "70:       (void)inflateEnd(&strm_);",
          "71:     }",
          "",
          "[Removed Lines]",
          "59: template <node_zlib_mode mode> class ZCtx : public ObjectWrap {",
          "62:   ZCtx() : ObjectWrap() {",
          "63:     dictionary_ = NULL;",
          "64:   }",
          "67:     if (mode == DEFLATE || mode == GZIP || mode == DEFLATERAW) {",
          "69:     } else if (mode == INFLATE || mode == GUNZIP || mode == INFLATERAW) {",
          "",
          "[Added Lines]",
          "57: class ZCtx : public ObjectWrap {",
          "60:   ZCtx(node_zlib_mode mode) : ObjectWrap(), dictionary_(NULL), mode_(mode) {}",
          "63:     if (mode_ == DEFLATE || mode_ == GZIP || mode_ == DEFLATERAW) {",
          "65:     } else if (mode_ == INFLATE || mode_ == GUNZIP || mode_ == INFLATERAW) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     HandleScope scope;",
          "79:     assert(args.Length() == 7);",
          "82:     assert(ctx->init_done_ && \"write before init\");",
          "84:     assert(!ctx->write_in_progress_ && \"write already in progress\");",
          "",
          "[Removed Lines]",
          "81:     ZCtx<mode> *ctx = ObjectWrap::Unwrap< ZCtx<mode> >(args.This());",
          "",
          "[Added Lines]",
          "77:     ZCtx *ctx = ObjectWrap::Unwrap<ZCtx>(args.This());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:     uv_queue_work(uv_default_loop(),",
          "129:                   work_req,",
          "133:     ctx->Ref();",
          "",
          "[Removed Lines]",
          "130:                   ZCtx<mode>::Process,",
          "131:                   ZCtx<mode>::After);",
          "",
          "[Added Lines]",
          "126:                   ZCtx::Process,",
          "127:                   ZCtx::After);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:   static void Process(uv_work_t* work_req) {",
          "149:     int err;",
          "151:       case DEFLATE:",
          "152:       case GZIP:",
          "153:       case DEFLATERAW:",
          "",
          "[Removed Lines]",
          "144:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "150:     switch (mode) {",
          "",
          "[Added Lines]",
          "140:     ZCtx *ctx = container_of(work_req, ZCtx, work_req_);",
          "146:     switch (ctx->mode_) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:   static void After(uv_work_t* work_req) {",
          "188:     HandleScope scope;",
          "191:     Local<Integer> avail_out = Integer::New(ctx->strm_.avail_out);",
          "192:     Local<Integer> avail_in = Integer::New(ctx->strm_.avail_in);",
          "",
          "[Removed Lines]",
          "189:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "",
          "[Added Lines]",
          "185:     ZCtx *ctx = container_of(work_req, ZCtx, work_req_);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "205:   static Handle<Value> New(const Arguments& args) {",
          "206:     HandleScope scope;",
          "208:     ctx->Wrap(args.This());",
          "209:     return args.This();",
          "210:   }",
          "",
          "[Removed Lines]",
          "207:     ZCtx<mode> *ctx = new ZCtx<mode>();",
          "",
          "[Added Lines]",
          "203:     if (args.Length() < 1 || !args[0]->IsInt32()) {",
          "204:       return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "205:     }",
          "206:     node_zlib_mode mode = (node_zlib_mode) args[0]->Int32Value();",
          "208:     if (mode < DEFLATE || mode > UNZIP) {",
          "209:       return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "210:     }",
          "212:     ZCtx *ctx = new ZCtx(mode);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "216:     assert((args.Length() == 4 || args.Length() == 5) &&",
          "217:            \"init(windowBits, level, memLevel, strategy, [dictionary])\");",
          "221:     int windowBits = args[0]->Uint32Value();",
          "222:     assert((windowBits >= 8 && windowBits <= 15) && \"invalid windowBits\");",
          "",
          "[Removed Lines]",
          "219:     ZCtx<mode> *ctx = ObjectWrap::Unwrap< ZCtx<mode> >(args.This());",
          "",
          "[Added Lines]",
          "224:     ZCtx *ctx = ObjectWrap::Unwrap<ZCtx>(args.This());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "254:   static Handle<Value> Reset(const Arguments &args) {",
          "255:     HandleScope scope;",
          "259:     Reset(ctx);",
          "260:     SetDictionary(ctx);",
          "",
          "[Removed Lines]",
          "257:     ZCtx<mode> *ctx = ObjectWrap::Unwrap< ZCtx<mode> >(args.This());",
          "",
          "[Added Lines]",
          "262:     ZCtx *ctx = ObjectWrap::Unwrap<ZCtx>(args.This());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "275:     ctx->flush_ = Z_NO_FLUSH;",
          "278:       ctx->windowBits_ += 16;",
          "279:     }",
          "282:       ctx->windowBits_ += 32;",
          "283:     }",
          "286:       ctx->windowBits_ *= -1;",
          "287:     }",
          "289:     int err;",
          "291:       case DEFLATE:",
          "292:       case GZIP:",
          "293:       case DEFLATERAW:",
          "",
          "[Removed Lines]",
          "277:     if (mode == GZIP || mode == GUNZIP) {",
          "281:     if (mode == UNZIP) {",
          "285:     if (mode == DEFLATERAW || mode == INFLATERAW) {",
          "290:     switch (mode) {",
          "",
          "[Added Lines]",
          "282:     if (ctx->mode_ == GZIP || ctx->mode_ == GUNZIP) {",
          "286:     if (ctx->mode_ == UNZIP) {",
          "290:     if (ctx->mode_ == DEFLATERAW || ctx->mode_ == INFLATERAW) {",
          "295:     switch (ctx->mode_) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "323:     int err = Z_OK;",
          "326:       case DEFLATE:",
          "327:       case DEFLATERAW:",
          "328:         err = deflateSetDictionary(&ctx->strm_,",
          "",
          "[Removed Lines]",
          "325:     switch (mode) {",
          "",
          "[Added Lines]",
          "330:     switch (ctx->mode_) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "339:   static void Reset(ZCtx* ctx) {",
          "340:     int err = Z_OK;",
          "343:       case DEFLATE:",
          "344:       case DEFLATERAW:",
          "345:         err = deflateReset(&ctx->strm_);",
          "",
          "[Removed Lines]",
          "342:     switch (mode) {",
          "",
          "[Added Lines]",
          "347:     switch (ctx->mode_) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "375:   bool write_in_progress_;",
          "377:   uv_work_t work_req_;",
          "378: };",
          "392: void InitZlib(Handle<Object> target) {",
          "393:   HandleScope scope;",
          "403:   callback_sym = NODE_PSYMBOL(\"callback\");",
          "",
          "[Removed Lines]",
          "381: #define NODE_ZLIB_CLASS(mode, name)   \\",
          "382:   { \\",
          "383:     Local<FunctionTemplate> z = FunctionTemplate::New(ZCtx<mode>::New); \\",
          "384:     z->InstanceTemplate()->SetInternalFieldCount(1); \\",
          "385:     NODE_SET_PROTOTYPE_METHOD(z, \"write\", ZCtx<mode>::Write); \\",
          "386:     NODE_SET_PROTOTYPE_METHOD(z, \"init\", ZCtx<mode>::Init); \\",
          "387:     NODE_SET_PROTOTYPE_METHOD(z, \"reset\", ZCtx<mode>::Reset); \\",
          "388:     z->SetClassName(String::NewSymbol(name)); \\",
          "389:     target->Set(String::NewSymbol(name), z->GetFunction()); \\",
          "390:   }",
          "395:   NODE_ZLIB_CLASS(INFLATE, \"Inflate\")",
          "396:   NODE_ZLIB_CLASS(DEFLATE, \"Deflate\")",
          "397:   NODE_ZLIB_CLASS(INFLATERAW, \"InflateRaw\")",
          "398:   NODE_ZLIB_CLASS(DEFLATERAW, \"DeflateRaw\")",
          "399:   NODE_ZLIB_CLASS(GZIP, \"Gzip\")",
          "400:   NODE_ZLIB_CLASS(GUNZIP, \"Gunzip\")",
          "401:   NODE_ZLIB_CLASS(UNZIP, \"Unzip\")",
          "",
          "[Added Lines]",
          "383:   node_zlib_mode mode_;",
          "390:   Local<FunctionTemplate> z = FunctionTemplate::New(ZCtx::New);",
          "392:   z->InstanceTemplate()->SetInternalFieldCount(1);",
          "394:   NODE_SET_PROTOTYPE_METHOD(z, \"write\", ZCtx::Write);",
          "395:   NODE_SET_PROTOTYPE_METHOD(z, \"init\", ZCtx::Init);",
          "396:   NODE_SET_PROTOTYPE_METHOD(z, \"reset\", ZCtx::Reset);",
          "398:   z->SetClassName(String::NewSymbol(\"Zlib\"));",
          "399:   target->Set(String::NewSymbol(\"Zlib\"), z->GetFunction());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "428:   NODE_DEFINE_CONSTANT(target, Z_DEFAULT_STRATEGY);",
          "429:   NODE_DEFINE_CONSTANT(target, ZLIB_VERNUM);",
          "431:   target->Set(String::NewSymbol(\"ZLIB_VERSION\"), String::New(ZLIB_VERSION));",
          "432: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:   NODE_DEFINE_CONSTANT(target, DEFLATE);",
          "430:   NODE_DEFINE_CONSTANT(target, INFLATE);",
          "431:   NODE_DEFINE_CONSTANT(target, GZIP);",
          "432:   NODE_DEFINE_CONSTANT(target, GUNZIP);",
          "433:   NODE_DEFINE_CONSTANT(target, DEFLATERAW);",
          "434:   NODE_DEFINE_CONSTANT(target, INFLATERAW);",
          "435:   NODE_DEFINE_CONSTANT(target, UNZIP);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4472f7bbc3f50c13ee36df2806781c4b09f43c0b",
      "candidate_info": {
        "commit_hash": "4472f7bbc3f50c13ee36df2806781c4b09f43c0b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4472f7bbc3f50c13ee36df2806781c4b09f43c0b",
        "files": [
          "src/node_http_parser.cc"
        ],
        "message": "http: use HTTP_METHOD_MAP macro",
        "before_after_code_files": [
          "src/node_http_parser.cc||src/node_http_parser.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ],
          "candidate": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/node_http_parser.cc||src/node_http_parser.cc": [
          "File: src/node_http_parser.cc -> src/node_http_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: static Persistent<String> on_body_sym;",
          "55: static Persistent<String> on_message_complete_sym;",
          "84: static Persistent<String> method_sym;",
          "85: static Persistent<String> status_code_sym;",
          "86: static Persistent<String> http_version_sym;",
          "",
          "[Removed Lines]",
          "57: static Persistent<String> delete_sym;",
          "58: static Persistent<String> get_sym;",
          "59: static Persistent<String> head_sym;",
          "60: static Persistent<String> post_sym;",
          "61: static Persistent<String> purge_sym;",
          "62: static Persistent<String> put_sym;",
          "63: static Persistent<String> connect_sym;",
          "64: static Persistent<String> options_sym;",
          "65: static Persistent<String> trace_sym;",
          "66: static Persistent<String> patch_sym;",
          "67: static Persistent<String> copy_sym;",
          "68: static Persistent<String> lock_sym;",
          "69: static Persistent<String> mkcol_sym;",
          "70: static Persistent<String> move_sym;",
          "71: static Persistent<String> propfind_sym;",
          "72: static Persistent<String> proppatch_sym;",
          "73: static Persistent<String> unlock_sym;",
          "74: static Persistent<String> report_sym;",
          "75: static Persistent<String> mkactivity_sym;",
          "76: static Persistent<String> checkout_sym;",
          "77: static Persistent<String> merge_sym;",
          "78: static Persistent<String> msearch_sym;",
          "79: static Persistent<String> notify_sym;",
          "80: static Persistent<String> subscribe_sym;",
          "81: static Persistent<String> unsubscribe_sym;",
          "82: static Persistent<String> unknown_method_sym;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: static Persistent<String> headers_sym;",
          "92: static Persistent<String> url_sym;",
          "94: static struct http_parser_settings settings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: static Persistent<String> unknown_method_sym;",
          "69: #define X(num, name, string) static Persistent<String> name##_sym;",
          "70: HTTP_METHOD_MAP(X)",
          "71: #undef X",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121: static inline Persistent<String>",
          "122: method_to_str(unsigned short m) {",
          "123:   switch (m) {",
          "150:   }",
          "151: }",
          "",
          "[Removed Lines]",
          "124:     case HTTP_DELETE:     return delete_sym;",
          "125:     case HTTP_GET:        return get_sym;",
          "126:     case HTTP_HEAD:       return head_sym;",
          "127:     case HTTP_POST:       return post_sym;",
          "128:     case HTTP_PURGE:      return purge_sym;",
          "129:     case HTTP_PUT:        return put_sym;",
          "130:     case HTTP_CONNECT:    return connect_sym;",
          "131:     case HTTP_OPTIONS:    return options_sym;",
          "132:     case HTTP_TRACE:      return trace_sym;",
          "133:     case HTTP_PATCH:      return patch_sym;",
          "134:     case HTTP_COPY:       return copy_sym;",
          "135:     case HTTP_LOCK:       return lock_sym;",
          "136:     case HTTP_MKCOL:      return mkcol_sym;",
          "137:     case HTTP_MOVE:       return move_sym;",
          "138:     case HTTP_PROPFIND:   return propfind_sym;",
          "139:     case HTTP_PROPPATCH:  return proppatch_sym;",
          "140:     case HTTP_UNLOCK:     return unlock_sym;",
          "141:     case HTTP_REPORT:     return report_sym;",
          "142:     case HTTP_MKACTIVITY: return mkactivity_sym;",
          "143:     case HTTP_CHECKOUT:   return checkout_sym;",
          "144:     case HTTP_MERGE:      return merge_sym;",
          "145:     case HTTP_MSEARCH:    return msearch_sym;",
          "146:     case HTTP_NOTIFY:     return notify_sym;",
          "147:     case HTTP_SUBSCRIBE:  return subscribe_sym;",
          "148:     case HTTP_UNSUBSCRIBE:return unsubscribe_sym;",
          "149:     default:              return unknown_method_sym;",
          "",
          "[Added Lines]",
          "103: #define X(num, name, string) case HTTP_##name: return name##_sym;",
          "104:   HTTP_METHOD_MAP(X)",
          "105: #undef X",
          "107:   return unknown_method_sym;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "609:   on_body_sym             = NODE_PSYMBOL(\"onBody\");",
          "610:   on_message_complete_sym = NODE_PSYMBOL(\"onMessageComplete\");",
          "637:   unknown_method_sym = NODE_PSYMBOL(\"UNKNOWN_METHOD\");",
          "639:   method_sym = NODE_PSYMBOL(\"method\");",
          "",
          "[Removed Lines]",
          "612:   delete_sym = NODE_PSYMBOL(\"DELETE\");",
          "613:   get_sym = NODE_PSYMBOL(\"GET\");",
          "614:   head_sym = NODE_PSYMBOL(\"HEAD\");",
          "615:   post_sym = NODE_PSYMBOL(\"POST\");",
          "616:   purge_sym = NODE_PSYMBOL(\"PURGE\");",
          "617:   put_sym = NODE_PSYMBOL(\"PUT\");",
          "618:   connect_sym = NODE_PSYMBOL(\"CONNECT\");",
          "619:   options_sym = NODE_PSYMBOL(\"OPTIONS\");",
          "620:   trace_sym = NODE_PSYMBOL(\"TRACE\");",
          "621:   patch_sym = NODE_PSYMBOL(\"PATCH\");",
          "622:   copy_sym = NODE_PSYMBOL(\"COPY\");",
          "623:   lock_sym = NODE_PSYMBOL(\"LOCK\");",
          "624:   mkcol_sym = NODE_PSYMBOL(\"MKCOL\");",
          "625:   move_sym = NODE_PSYMBOL(\"MOVE\");",
          "626:   propfind_sym = NODE_PSYMBOL(\"PROPFIND\");",
          "627:   proppatch_sym = NODE_PSYMBOL(\"PROPPATCH\");",
          "628:   unlock_sym = NODE_PSYMBOL(\"UNLOCK\");",
          "629:   report_sym = NODE_PSYMBOL(\"REPORT\");",
          "630:   mkactivity_sym = NODE_PSYMBOL(\"MKACTIVITY\");",
          "631:   checkout_sym = NODE_PSYMBOL(\"CHECKOUT\");",
          "632:   merge_sym = NODE_PSYMBOL(\"MERGE\");",
          "633:   msearch_sym = NODE_PSYMBOL(\"M-SEARCH\");",
          "634:   notify_sym = NODE_PSYMBOL(\"NOTIFY\");",
          "635:   subscribe_sym = NODE_PSYMBOL(\"SUBSCRIBE\");",
          "636:   unsubscribe_sym = NODE_PSYMBOL(\"UNSUBSCRIBE\");;",
          "",
          "[Added Lines]",
          "569: #define X(num, name, string) name##_sym = NODE_PSYMBOL(#string);",
          "570:   HTTP_METHOD_MAP(X)",
          "571: #undef X",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "110e499fe7dc65429a2fade29fe1573c35d97059",
      "candidate_info": {
        "commit_hash": "110e499fe7dc65429a2fade29fe1573c35d97059",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/110e499fe7dc65429a2fade29fe1573c35d97059",
        "files": [
          "tools/install.py"
        ],
        "message": "installer: prevent ETXTBSY errors\n\nThe installer does what amounts to `cp -p`. If the node binary is in use at\nthe time of the copy, it'd fail with a ETXTBSY error. That's why it's unlinked\nfirst now.",
        "before_after_code_files": [
          "tools/install.py||tools/install.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/install.py||tools/install.py": [
          "File: tools/install.py -> tools/install.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   source_path, target_path = mkpaths(path, dst)",
          "63:   print 'installing %s' % target_path",
          "64:   try_mkdir_r(os.path.dirname(target_path))",
          "65:   return shutil.copy2(source_path, target_path)",
          "67: def try_remove(path, dst):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   try_unlink(target_path) # prevent ETXTBSY errors",
          "",
          "---------------"
        ]
      }
    }
  ]
}