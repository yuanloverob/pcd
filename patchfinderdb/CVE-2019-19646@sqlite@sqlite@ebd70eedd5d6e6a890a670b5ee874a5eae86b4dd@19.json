{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1f9932e4b26007da9fc6ef2b4a8121bcb196011",
      "candidate_info": {
        "commit_hash": "d1f9932e4b26007da9fc6ef2b4a8121bcb196011",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d1f9932e4b26007da9fc6ef2b4a8121bcb196011",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/in.test",
          "test/skipscan2.test",
          "test/without_rowid1.test"
        ],
        "message": "Add further test cases to improve VDBE branch coverage.\n\nFossilOrigin-Name: 51a95e52fc58d8be2c9c51576dff7258c705735b66d203948f80db017b4c10d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/in.test||test/in.test",
          "test/skipscan2.test||test/skipscan2.test",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bf3cd9364fdfc951feb04f78728eb8e0dae12b3dc5702a36bb6e69c0abab8864",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:          );",
          "715: } {1 Alice}",
          "718: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717: #-------------------------------------------------------------------------",
          "718: reset_db",
          "719: do_execsql_test in-16.0 {",
          "720:   CREATE TABLE x1(a, b);",
          "721:   INSERT INTO x1(a) VALUES(1), (2), (3), (4), (5), (6);",
          "722:   CREATE INDEX x1i ON x1(a, b);",
          "723: }",
          "725: do_execsql_test in-16.1 {",
          "726:   SELECT * FROM x1",
          "727:   WHERE a IN (SELECT a FROM x1 WHERE (a%2)==0)",
          "728:   ORDER BY a DESC, b;",
          "729: } {6 {} 4 {} 2 {}}",
          "731: do_execsql_test in-16.2 {",
          "732:   SELECT * FROM x1",
          "733:   WHERE a IN (SELECT a FROM x1 WHERE (a%7)==0)",
          "734:   ORDER BY a DESC, b;",
          "735: } {}",
          "",
          "---------------"
        ],
        "test/skipscan2.test||test/skipscan2.test": [
          "File: test/skipscan2.test -> test/skipscan2.test"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "379: do_catchsql_test 10.4 {",
          "380:   UPDATE t1 SET c=1 WHERE (a, b) = ('b', 'b');",
          "381: } {1 {UNIQUE constraint failed: t1.c}}",
          "384: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: do_catchsql_test 10.5 {",
          "383:   UPDATE t1 SET c=1 WHERE (a, b) = ('c', 'c');",
          "384: } {0 {}}",
          "386: do_execsql_test 10.6 {",
          "387:   CREATE TRIGGER t1_tr BEFORE UPDATE ON t1 BEGIN",
          "388:     DELETE FROM t1 WHERE a = new.a;",
          "389:   END;",
          "390:   UPDATE t1 SET c = c+1 WHERE a = 'a';",
          "391:   SELECT * FROM t1;",
          "392: } {b a 3  b b 4}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb40727857e4a507e64bbc01e0681d7afdd57af9",
      "candidate_info": {
        "commit_hash": "bb40727857e4a507e64bbc01e0681d7afdd57af9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bb40727857e4a507e64bbc01e0681d7afdd57af9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Allow real values to be used in PRECEDING and FOLLOWING expressions for RANGE window frames.\n\nFossilOrigin-Name: 25ff7091cb12c63b1864ce68a9151f8432af5804b5ae905a2175761ab4b9fdd8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5129bcc996b3c9f78ab6b674a4364787e7b353b90f15f027cad4431012022c30",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1723:   break;",
          "1724: }",
          "1734:   pIn1 = &aMem[pOp->p1];",
          "1736:     applyAffinity(pIn1, SQLITE_AFF_NUMERIC, encoding);",
          "1739:       if( pOp->p2==0 ){",
          "1740:         rc = SQLITE_MISMATCH;",
          "1741:         goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "1735:   if( (pIn1->flags & MEM_Int)==0 ){",
          "1737:     VdbeBranchTaken((pIn1->flags&MEM_Int)==0, 2);",
          "1738:     if( (pIn1->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "1738:   u8 f;",
          "1739:   f = (pOp->p5 ? (MEM_Int|MEM_Real) : MEM_Int);",
          "1741:   if( (pIn1->flags & f)==0 ){",
          "1743:     VdbeBranchTaken((pIn1->flags&f)==0, 2);",
          "1744:     if( (pIn1->flags & f)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1744:       }",
          "1745:     }",
          "1746:   }",
          "1748:   break;",
          "1749: }",
          "",
          "[Removed Lines]",
          "1747:   MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "[Added Lines]",
          "1753:   if( f==MEM_Int ) MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1168:   }",
          "1169: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1171: #define WINDOW_STARTING_INT  0",
          "1172: #define WINDOW_ENDING_INT    1",
          "1173: #define WINDOW_NTH_VALUE_INT 2",
          "1174: #define WINDOW_STARTING_NUM  3",
          "1175: #define WINDOW_ENDING_NUM    4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1179:   static const char *azErr[] = {",
          "1180:     \"frame starting offset must be a non-negative integer\",",
          "1181:     \"frame ending offset must be a non-negative integer\",",
          "1183:   };",
          "1185:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1186:   int regZero = sqlite3GetTempReg(pParse);",
          "1188:   sqlite3VdbeAddOp2(v, OP_Integer, 0, regZero);",
          "1189:   sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1190:   VdbeCoverageIf(v, eCond==0);",
          "1191:   VdbeCoverageIf(v, eCond==1);",
          "1192:   VdbeCoverageIf(v, eCond==2);",
          "",
          "[Removed Lines]",
          "1178: static void windowCheckIntValue(Parse *pParse, int reg, int eCond){",
          "1182:     \"second argument to nth_value must be a positive integer\"",
          "1184:   static int aOp[] = { OP_Ge, OP_Ge, OP_Gt };",
          "1187:   assert( eCond==0 || eCond==1 || eCond==2 );",
          "",
          "[Added Lines]",
          "1184: static void windowCheckValue(Parse *pParse, int reg, int eCond){",
          "1188:     \"second argument to nth_value must be a positive integer\",",
          "1189:     \"frame starting offset must be a non-negative number\",",
          "1190:     \"frame ending offset must be a non-negative number\",",
          "1192:   static int aOp[] = { OP_Ge, OP_Ge, OP_Gt, OP_Ge, OP_Ge };",
          "1195:   assert( eCond>=0 && eCond<ArraySize(azErr) );",
          "1198:   if( eCond>=WINDOW_STARTING_NUM ) sqlite3VdbeChangeP5(v, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1384:       if( pFunc->zName==nth_valueName ){",
          "1385:         sqlite3VdbeAddOp3(v, OP_Column, pMWin->iEphCsr, pWin->iArgCol+1,tmpReg);",
          "1387:       }else{",
          "1388:         sqlite3VdbeAddOp2(v, OP_Integer, 1, tmpReg);",
          "1389:       }",
          "",
          "[Removed Lines]",
          "1386:         windowCheckIntValue(pParse, tmpReg, 2);",
          "",
          "[Added Lines]",
          "1395:         windowCheckValue(pParse, tmpReg, 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2215:   if( regStart ){",
          "2216:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2218:   }",
          "2219:   if( regEnd ){",
          "2220:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2222:   }",
          "2224:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "",
          "[Removed Lines]",
          "2217:     windowCheckIntValue(pParse, regStart, 0);",
          "2221:     windowCheckIntValue(pParse, regEnd, 1);",
          "",
          "[Added Lines]",
          "2226:     windowCheckValue(pParse, regStart, 0 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "2230:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: execsql_test 2.0 {",
          "95:   DROP TABLE IF EXISTS t1;",
          "97:   INSERT INTO t1 VALUES",
          "98:       (5, 10), (10, 20), (13, 26), (13, 26),",
          "99:       (15, 30), (20, 40), (22,80), (30, 90);",
          "",
          "[Removed Lines]",
          "96:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "",
          "[Added Lines]",
          "96:   CREATE TABLE t1(a REAL, b INTEGER);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   4 { ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "107:   5 { ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "108:   6 { ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "109: } {",
          "111: }",
          "",
          "[Removed Lines]",
          "110:   execsql_test 2.$tn \"SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ($frame)\"",
          "",
          "[Added Lines]",
          "110:   7  { ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING }",
          "111:   8  { ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING }",
          "112:   9  { ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING }",
          "113:   10 { ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING }",
          "114:   11 { ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING }",
          "115:   12 { ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING }",
          "117:   execsql_test 2.$tn \"",
          "118:     SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ($frame)",
          "119:   \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "438: do_execsql_test 2.0 {",
          "439:   DROP TABLE IF EXISTS t1;",
          "441:   INSERT INTO t1 VALUES",
          "442:       (5, 10), (10, 20), (13, 26), (13, 26),",
          "443:       (15, 30), (20, 40), (22,80), (30, 90);",
          "444: } {}",
          "446: do_execsql_test 2.1 {",
          "448: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "450: do_execsql_test 2.2 {",
          "452: } {5 {}   10 10   13 10   13 10   15 30   20 102   22 82   30 120}",
          "454: do_execsql_test 2.3 {",
          "456: } {5 {}   10 52   13 30   13 30   15 {}   20 80   22 {}   30 {}}",
          "458: do_execsql_test 2.4 {",
          "460: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "462: do_execsql_test 2.5 {",
          "464: } {30 {}   22 90   20 90   15 120   13 120   13 120   10 70   5 102}",
          "466: do_execsql_test 2.6 {",
          "468: } {30 {}   22 40   20 {}   15 52   13 20   13 20   10 {}   5 {}}",
          "470: finish_test",
          "",
          "[Removed Lines]",
          "440:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "447:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "451:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "455:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "459:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "463:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "467:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "",
          "[Added Lines]",
          "440:   CREATE TABLE t1(a REAL, b INTEGER);",
          "447:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "451:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "455:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "459:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "463:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "467:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "470: do_execsql_test 2.7 {",
          "471:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING )",
          "472: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "474: do_execsql_test 2.8 {",
          "475:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING )",
          "476: } {5 {}   10 {}   13 10   13 10   15 10   20 72   22 82   30 120}",
          "478: do_execsql_test 2.9 {",
          "479:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING )",
          "480: } {5 {}   10 52   13 {}   13 {}   15 {}   20 {}   22 {}   30 {}}",
          "482: do_execsql_test 2.10 {",
          "483:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING )",
          "484: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "486: do_execsql_test 2.11 {",
          "487:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING )",
          "488: } {30 {}   22 90   20 90   15 170   13 210   13 210   10 210   5 292}",
          "490: do_execsql_test 2.12 {",
          "491:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING )",
          "492: } {30 232   22 112   20 112   15 30   13 30   13 30   10 10   5 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efb699fc7cbd00b5a41403e4cbc108860beb3949",
      "candidate_info": {
        "commit_hash": "efb699fc7cbd00b5a41403e4cbc108860beb3949",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efb699fc7cbd00b5a41403e4cbc108860beb3949",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Prevent the use of subroutines to implement the RHS of IN operators within CHECK constraints.\n\nFossilOrigin-Name: 6b24d3fb94e787d25e49501714780dfb0c0c99077102056aa68445f4808cdd57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c44838adbe5dc482bc010e91a6dd7a0f777c989f443dd600740d2c783208e0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2688:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "",
          "[Added Lines]",
          "2688:   if( !ExprHasProperty(pExpr, EP_VarSelect) && pParse->iSelfTab==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe293347ac982ca99a6735557b1f491af11ae234",
      "candidate_info": {
        "commit_hash": "fe293347ac982ca99a6735557b1f491af11ae234",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe293347ac982ca99a6735557b1f491af11ae234",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/GetFile.cs"
        ],
        "message": "Minor enhancements to the TclKit download tool.\n\nFossilOrigin-Name: 75e31b1d56781fc4d28aea6c7f1393a18fd34870a5beb92df81c088d61351b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/GetFile.cs||tool/GetFile.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d66f95a51530259ab48f78c9f91acc38055caf338b6fee846b99a8c077466e95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/GetFile.cs||tool/GetFile.cs": [
          "File: tool/GetFile.cs -> tool/GetFile.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:             string fileName = Path.GetFileName(",
          "168:                 Process.GetCurrentProcess().MainModule.FileName);",
          "171:         }",
          "",
          "[Removed Lines]",
          "170:             Console.WriteLine(String.Format(\"usage: {0} <uri>\", fileName));",
          "",
          "[Added Lines]",
          "170:             Console.WriteLine(String.Format(",
          "171:                 \"usage: {0} <uri> [fileName]\", fileName));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:                 return (int)ExitCode.MissingArgs;",
          "337:             }",
          "340:             {",
          "341:                 Error(null, true);",
          "342:                 return (int)ExitCode.WrongNumArgs;",
          "",
          "[Removed Lines]",
          "339:             if (args.Length != 1)",
          "",
          "[Added Lines]",
          "340:             if ((args.Length < 1) || (args.Length > 2))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:             }",
          "364:             {",
          "367:             }",
          "",
          "[Removed Lines]",
          "361:             string fileName = GetFileName(uri);",
          "363:             if (fileName == null)",
          "365:                 Error(\"Could not extract the file name from the URI.\", false);",
          "366:                 return (int)ExitCode.BadFileName;",
          "",
          "[Added Lines]",
          "363:             string fileName = (args.Length == 2) ?",
          "364:                 Path.GetFileName(args[1]) : null;",
          "366:             if (String.IsNullOrEmpty(fileName))",
          "372:                 fileName = GetFileName(uri);",
          "374:                 if (fileName == null)",
          "375:                 {",
          "376:                     Error(\"Could not extract file name from URI.\", false);",
          "377:                     return (int)ExitCode.BadFileName;",
          "378:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:             try",
          "383:             {",
          "384:                 using (WebClient webClient = new WebClient())",
          "385:                 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:                 ServicePointManager.SecurityProtocol =",
          "403:                     (SecurityProtocolType)0xC00;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
      "candidate_info": {
        "commit_hash": "1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
        "files": [
          "ext/fts5/fts5_aux.c",
          "ext/fts5/test/fts5ak.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Handle SQL NULL values without crashing in the fts5 snippet() and highlight() functions.\n\nFossilOrigin-Name: a5e9cc794f17566160c4b2b5791601a744a21ace987b19ff8a5816fd78dce56a",
        "before_after_code_files": [
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/test/fts5ak.test||ext/fts5/test/fts5ak.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   HighlightContext *p,",
          "137:   const char *z, int n",
          "138: ){",
          "140:     if( n<0 ) n = (int)strlen(z);",
          "141:     p->zOut = sqlite3_mprintf(\"%z%.*s\", p->zOut, n, z);",
          "142:     if( p->zOut==0 ) *pRc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "139:   if( *pRc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "139:   if( *pRc==SQLITE_OK && z ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5ak.test||ext/fts5/test/fts5ak.test": [
          "File: ext/fts5/test/fts5ak.test -> ext/fts5/test/fts5ak.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   {[a b c d e]}",
          "145: }",
          "147: }",
          "149: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: do_execsql_test 3.2 {",
          "148:   SELECT highlight(ft, 0, NULL, NULL) FROM ft WHERE ft MATCH 'a+b+c AND c+d+e';",
          "149: } {",
          "150:   {a b c x c d e}",
          "151:   {a b c c d e}",
          "152:   {a b c d e}",
          "153: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e54efd60c20bbfc5d70ddb9e1dd6ffb68cbbcfa57b4f07cb104767ef08c1a559",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}