{
  "cve_id": "CVE-2013-2126",
  "cve_desc": "Multiple double free vulnerabilities in the LibRaw::unpack function in libraw_cxx.cpp in LibRaw before 0.15.2 allow context-dependent attackers to cause a denial of service (application crash) and possibly execute arbitrary code via a malformed full-color (1) Foveon or (2) sRAW image file.",
  "repo": "LibRaw/LibRaw",
  "patch_hash": "19ffddb0fe1a4ffdb459b797ffcf7f490d28b5a6",
  "patch_info": {
    "commit_hash": "19ffddb0fe1a4ffdb459b797ffcf7f490d28b5a6",
    "repo": "LibRaw/LibRaw",
    "commit_url": "https://github.com/LibRaw/LibRaw/commit/19ffddb0fe1a4ffdb459b797ffcf7f490d28b5a6",
    "files": [
      "src/libraw_cxx.cpp"
    ],
    "message": "prevent double-free() on broken full-color images error handling",
    "before_after_code_files": [
      "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
    ]
  },
  "patch_diff": {
    "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
      "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1144:                 IO.shrink = 0;",
      "1145:     S.raw_pitch = S.width*8;",
      "1149:               }",
      "1150:             ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
      "",
      "[Removed Lines]",
      "1147:                 imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
      "1148:                 imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;",
      "",
      "[Added Lines]",
      "1147:                 imgdata.rawdata.raw_alloc = 0;",
      "1148:                 imgdata.image = (ushort (*)[4]) calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1155:             (this->*load_raw)();",
      "1156:    if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))",
      "1157:     C.maximum = m_save;",
      "1158:           }",
      "1160:         if(imgdata.rawdata.raw_image)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1158:    if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
      "1159:    {",
      "1161:     imgdata.rawdata.raw_alloc = imgdata.image;",
      "1162:     imgdata.image = 0;",
      "1163:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b1430c76a19c93f3cc755bb2ff9bda0ba9b4082",
      "candidate_info": {
        "commit_hash": "7b1430c76a19c93f3cc755bb2ff9bda0ba9b4082",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/7b1430c76a19c93f3cc755bb2ff9bda0ba9b4082",
        "files": [
          "Changelog.txt",
          "Makefile.msvc",
          "README.RawSpeed.txt",
          "libraw/libraw.h",
          "libraw/libraw_const.h",
          "libraw/libraw_datastream.h",
          "libraw/libraw_types.h",
          "rawspeed.win32-dll.patch",
          "samples/dcraw_emu.cpp",
          "samples/postprocessing_benchmark.cpp",
          "src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp"
        ],
        "message": "RawSpeed support",
        "before_after_code_files": [
          "Makefile.msvc||Makefile.msvc",
          "libraw/libraw.h||libraw/libraw.h",
          "libraw/libraw_const.h||libraw/libraw_const.h",
          "libraw/libraw_datastream.h||libraw/libraw_datastream.h",
          "libraw/libraw_types.h||libraw/libraw_types.h",
          "samples/dcraw_emu.cpp||samples/dcraw_emu.cpp",
          "samples/postprocessing_benchmark.cpp||samples/postprocessing_benchmark.cpp",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ],
          "candidate": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msvc||Makefile.msvc": [
          "File: Makefile.msvc -> Makefile.msvc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Additional compiler flags (OpenMP, SSEx, AVX, ...)",
          "2: #COPT_OPT=/openmp /arch:SSE2 /arch:AVX",
          "4: # Demosaic Pack GPL2:",
          "5: #CFLAGS_DP2=/I\"..\\\\LibRaw-demosaic-pack-GPL2\"",
          "6: #CFLAGSG2=/DLIBRAW_DEMOSAIC_PACK_GPL2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: # Compile with RawSpeed support",
          "5: CFLAGS_RAWSPEED=/DUSE_RAWSPEED /I\"..\\\\RawSpeed\" /I\"..\\\\RawSpeed\\include\" /I\"..\\\\RawSpeed\\include\\libjpeg\"",
          "6: LDFLAGS_RAWSPEED=..\\RawSpeed\\lib\\rawspeed.lib ..\\RawSpeed\\lib\\libxml2.lib ..\\RawSpeed\\lib\\iconv.lib ..\\RawSpeed\\lib\\charset.lib ..\\RawSpeed\\lib\\turbojpeg-static.lib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: #LCMS_LIB=..\\lcms2-2.3\\bin\\lcms2_dll.lib",
          "20: # JPEG support for DNG",
          "25: SAMPLES=bin\\raw-identify.exe bin\\simple_dcraw.exe  bin\\dcraw_emu.exe bin\\dcraw_half.exe bin\\half_mt.exe bin\\mem_image.exe bin\\unprocessed_raw.exe bin\\4channels.exe bin\\multirender_test.exe bin\\postprocessing_benchmark.exe",
          "",
          "[Removed Lines]",
          "21: JPEG_DEF=/DUSE_JPEG /I..\\jpeg-8d",
          "22: JPEG_LIB=..\\jpeg-8d\\Release\\jpeg.lib",
          "",
          "[Added Lines]",
          "25: #JPEG_DEF=/DUSE_JPEG /I..\\jpeg-8d",
          "26: #JPEG_LIB=..\\jpeg-8d\\Release\\jpeg.lib",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36: DLL_OBJECTS=object\\dcraw_common.obj object\\dcraw_fileio.obj  object\\libraw_cxx.obj object\\libraw_datastream.obj object\\libraw_c_api.obj  object\\demosaic_packs.obj",
          "38: CC=cl.exe",
          "43: # Samples - default to dynamic (DLL) link, uncomment next lines",
          "44: #CFLAGS2=/DLIBRAW_NODLL",
          "",
          "[Removed Lines]",
          "39: COPT=/EHsc /MP /MT /I. /DWIN32 /O2 /W0 /nologo $(COPT_OPT) $(CFLAGSG2) $(CFLAGSG3) $(LCMS_DEF) $(JPEG_DEF)",
          "41: LINKLIB=$(LIBDLL)",
          "",
          "[Added Lines]",
          "43: COPT=/EHsc /MP /MT /I. /DWIN32 /O2 /W0 /nologo $(COPT_OPT) $(CFLAGSG2) $(CFLAGSG3) $(LCMS_DEF) $(JPEG_DEF) $(CFLAGS_RAWSPEED)",
          "45: LINKLIB=$(LIBDLL) $(LDFLAGS_RAWSPEED)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80: $(DLL): $(DLL_OBJECTS)",
          "81:  -del /f $(DLL) $(LIBDLL)",
          "84: object\\dcraw_common.obj: internal\\dcraw_common.cpp",
          "85:  $(CC) $(COPT) /DLIBRAW_BUILDLIB /Fo\"object\\\\dcraw_common.obj\" /c internal\\dcraw_common.cpp",
          "",
          "[Removed Lines]",
          "82:  cl $(COPT) /LD $(DLL_OBJECTS) $(LCMS_LIB) $(JPEG_LIB) /link /out:\"$(DLL)\" /implib:\"$(LIBDLL)\"",
          "",
          "[Added Lines]",
          "86:  cl $(COPT) /LD $(DLL_OBJECTS) $(LDFLAGS_RAWSPEED) $(LCMS_LIB) $(JPEG_LIB) /link /out:\"$(DLL)\" /implib:\"$(LIBDLL)\"",
          "",
          "---------------"
        ],
        "libraw/libraw.h||libraw/libraw.h": [
          "File: libraw/libraw.h -> libraw/libraw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     void         recycle();",
          "145:     int COLOR(int row, int col) { return libraw_internal_data.internal_output_params.fuji_width? FCF(row,col):FC(row,col);}",
          "",
          "[Removed Lines]",
          "143:     virtual ~LibRaw(void) { recycle(); delete tls; }",
          "",
          "[Added Lines]",
          "142:     virtual ~LibRaw(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:     void phase_one_subtract_black(ushort *src, ushort *dest);",
          "159:     void        phase_one_correct();",
          "162: protected:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:  int set_rawspeed_camerafile(char *filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "269:     int         flip_index (int row, int col);",
          "270:     void        gamma_curve (double pwr, double ts, int mode, int imax);",
          "273: #ifdef LIBRAW_LIBRARY_BUILD",
          "274: #include \"internal/libraw_internal_funcs.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:  void  *_rawspeed_camerameta;",
          "275:  void     *_rawspeed_decoder;",
          "276:  void  fix_after_rawspeed();",
          "",
          "---------------"
        ],
        "libraw/libraw_const.h||libraw/libraw_const.h": [
          "File: libraw/libraw_const.h -> libraw/libraw_const.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     LIBRAW_WARN_NO_BADPIXELMAP=1<<8,",
          "57:     LIBRAW_WARN_BAD_DARKFRAME_FILE=1<<9,",
          "58:     LIBRAW_WARN_BAD_DARKFRAME_DIM=1<<10,",
          "60: };",
          "62: enum LibRaw_exceptions",
          "",
          "[Removed Lines]",
          "59:     LIBRAW_WARN_NO_JASPER = 1<<11",
          "",
          "[Added Lines]",
          "59:     LIBRAW_WARN_NO_JASPER = 1<<11,",
          "60:  LIBRAW_WARN_RAWSPEED_PROBLEM = 1<<12",
          "",
          "---------------"
        ],
        "libraw/libraw_datastream.h||libraw/libraw_datastream.h": [
          "File: libraw/libraw_datastream.h -> libraw/libraw_datastream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     virtual int         read(void *,size_t, size_t ) = 0;",
          "62:     virtual int         seek(INT64 , int ) = 0;",
          "63:     virtual INT64       tell() = 0;",
          "64:     virtual int         get_char() = 0;",
          "65:     virtual char*       gets(char *, int) = 0;",
          "66:     virtual int         scanf_one(const char *, void *) = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     virtual INT64  size() = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     const char *filename;",
          "100: #ifdef WIN32",
          "101:  const wchar_t *wfilename;",
          "102: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:  INT64 _fsize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     virtual int         eof();",
          "115:     virtual int         seek(INT64 o, int whence);",
          "116:     virtual INT64       tell();",
          "117:     virtual int         get_char()",
          "118:         {",
          "119:             if(substream) return substream->get_char();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     virtual INT64 size() { return _fsize;}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:     virtual int         eof();",
          "145:     virtual int         seek(INT64 o, int whence);",
          "146:     virtual INT64       tell();",
          "147:     virtual char*       gets(char *s, int sz);",
          "148:     virtual int         scanf_one(const char *fmt, void* val);",
          "149:     virtual int         get_char()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     virtual INT64 size() { return streamsize;}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:     virtual int         eof();",
          "176:     virtual int         seek(INT64 o, int whence);",
          "177:     virtual INT64       tell();",
          "178:     virtual char*       gets(char *str, int sz);",
          "179:     virtual int         scanf_one(const char *fmt, void*val);",
          "180:     virtual const char *fname();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     virtual INT64 size() { return _fsize;}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193: #endif",
          "194:     }",
          "197:     FILE *f,*sav;",
          "198:     const char *filename;",
          "199: #ifdef WIN32",
          "200:  const wchar_t *wfilename;",
          "201: #endif",
          "",
          "[Removed Lines]",
          "196:   private:",
          "",
          "[Added Lines]",
          "201: protected:",
          "204:  INT64 _fsize;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211:     LibRaw_windows_datastream(HANDLE hFile);",
          "213:     virtual ~LibRaw_windows_datastream();",
          "215: protected:",
          "216:     void Open(HANDLE hFile);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:     virtual INT64 size() { return cbView_;}",
          "",
          "---------------"
        ],
        "libraw/libraw_types.h||libraw/libraw_types.h": [
          "File: libraw/libraw_types.h -> libraw/libraw_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:     int   wf_debanding;",
          "298:     float wf_deband_treshold[4];",
          "299: }libraw_output_params_t;",
          "301: typedef struct",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:  int use_rawspeed;",
          "",
          "---------------"
        ],
        "samples/dcraw_emu.cpp||samples/dcraw_emu.cpp": [
          "File: samples/dcraw_emu.cpp -> samples/dcraw_emu.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: \"-mmap     Use mmap()-ed buffer instead of plain FILE I/O\\n\"",
          "120: #endif",
          "121: \"-mem    Use memory buffer instead of FILE I/O\\n\"",
          "123:     exit(1);",
          "124: }",
          "",
          "[Removed Lines]",
          "122:         );",
          "",
          "[Added Lines]",
          "122: \"-disars   Do not use RawSpeed library\\n\"",
          "123: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:               case 'd':",
          "335:                   if(!strcmp(optstr,\"-dcbi\"))",
          "336:                       OUT.dcb_iterations = atoi(argv[arg++]);",
          "337:                   else if(!strcmp(optstr,\"-dcbe\"))",
          "338:                       OUT.dcb_enhance_fl = 1;",
          "339:                   else if(!strcmp(optstr,\"-dbnd\"))",
          "340:                   {",
          "341:                    for(c=0; c<4; c++)",
          "342:                             OUT.wf_deband_treshold[c] = (float)atof(argv[arg++]);",
          "344:                   }",
          "345:                   else",
          "346:                       fprintf (stderr,\"Unknown option \\\"%s\\\".\\n\",argv[arg-1]);",
          "",
          "[Removed Lines]",
          "343:    OUT.wf_debanding = 1;",
          "",
          "[Added Lines]",
          "338:       else if(!strcmp(optstr,\"-disars\"))",
          "339:        OUT.use_rawspeed=0;",
          "346:      OUT.wf_debanding = 1;",
          "",
          "---------------"
        ],
        "samples/postprocessing_benchmark.cpp||samples/postprocessing_benchmark.cpp": [
          "File: samples/postprocessing_benchmark.cpp -> samples/postprocessing_benchmark.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:                 \"-s <num>       Select one raw image from input file\\n\"",
          "61:                 \"-B <x y w h>   Crop output image\\n\"",
          "62:                 \"-R <num>       Number of repetitions\\n\"",
          "63:                 ,LibRaw::version(), LibRaw::cameraCount(),",
          "64:                 argv[0]);",
          "65:             return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     \"-c             Dont use rawspeed\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:                     rep = abs(atoi(argv[arg++]));",
          "113:                     if(rep<1) rep = 1;",
          "114:                     break;",
          "115:                 default:",
          "116:                     fprintf (stderr,\"Unknown option \\\"-%c\\\".\\n\", opt);",
          "117:                     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     case 'c':",
          "117:      OUT.use_rawspeed = 0;",
          "118:      break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     for ( ; arg < argc; arg++)",
          "121:         {",
          "122:             printf(\"Processing file %s\\n\",argv[arg]);",
          "124:                 {",
          "125:                     fprintf(stderr,\"Cannot open_file %s: %s\\n\",argv[arg],libraw_strerror(ret));",
          "126:                     continue; // no recycle b/c open file will recycle itself",
          "",
          "[Removed Lines]",
          "123:             if( (ret = RawProcessor.open_file(argv[arg])) != LIBRAW_SUCCESS)",
          "",
          "[Added Lines]",
          "127:    timerstart();",
          "128:    if( (ret = RawProcessor.open_file(argv[arg])) != LIBRAW_SUCCESS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:                     fprintf(stderr,\"Cannot unpack %s: %s\\n\",argv[arg],libraw_strerror(ret));",
          "132:                     continue;",
          "133:                 }",
          "134:             float mpix,rmpix;",
          "135:             timerstart();",
          "136:             for(c=0; c < rep; c++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:    float qsec = timerend();",
          "140:    printf(\"\\n%.1f msec for unpack\\n\",qsec);",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"libraw/libraw.h\"",
          "36: #include \"internal/defines.h\"",
          "38: #ifdef __cplusplus",
          "39: extern \"C\"",
          "40: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #ifdef USE_RAWSPEED",
          "39: #include \"rawspeed_xmldata.cpp\"",
          "40: #include <RawSpeed/StdAfx.h>",
          "41: #include <RawSpeed/FileReader.h>",
          "42: #include <RawSpeed/RawParser.h>",
          "43: #include <RawSpeed/RawDecoder.h>",
          "44: #include <RawSpeed/CameraMetaData.h>",
          "45: #include <RawSpeed/ColorFilterArray.h>",
          "46: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:     if(p) ::free(p);",
          "168: }",
          "170: #define ZERO(a) memset(&a,0,sizeof(a))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: #ifdef USE_RAWSPEED",
          "181: using namespace RawSpeed;",
          "182: class CameraMetaDataLR : public CameraMetaData",
          "183: {",
          "184: public:",
          "185:  CameraMetaDataLR() : CameraMetaData() {}",
          "186:  CameraMetaDataLR(char *filename) : CameraMetaData(filename){}",
          "187:  CameraMetaDataLR(char *data, int sz);",
          "188: };",
          "190: CameraMetaDataLR::CameraMetaDataLR(char *data, int sz) : CameraMetaData() {",
          "191:  ctxt = xmlNewParserCtxt();",
          "192:  if (ctxt == NULL) {",
          "193:   ThrowCME(\"CameraMetaData:Could not initialize context.\");",
          "194:  }",
          "196:  xmlResetLastError();",
          "197:  doc = xmlCtxtReadMemory(ctxt, data,sz, \"\", NULL, XML_PARSE_DTDVALID);",
          "199:  if (doc == NULL) {",
          "200:   ThrowCME(\"CameraMetaData: XML Document could not be parsed successfully. Error was: %s\", ctxt->lastError.message);",
          "201:  }",
          "203:  if (ctxt->valid == 0) {",
          "204:   if (ctxt->lastError.code == 0x5e) {",
          "206:   } else {",
          "207:    ThrowCME(\"CameraMetaData: XML file does not validate. DTD Error was: %s\", ctxt->lastError.message);",
          "208:   }",
          "209:  }",
          "211:  xmlNodePtr cur;",
          "212:  cur = xmlDocGetRootElement(doc);",
          "213:  if (xmlStrcmp(cur->name, (const xmlChar *) \"Cameras\")) {",
          "214:   ThrowCME(\"CameraMetaData: XML document of the wrong type, root node is not cameras.\");",
          "215:   return;",
          "216:  }",
          "218:  cur = cur->xmlChildrenNode;",
          "219:  while (cur != NULL) {",
          "220:   if ((!xmlStrcmp(cur->name, (const xmlChar *)\"Camera\"))) {",
          "221:    Camera *camera = new Camera(doc, cur);",
          "222:    addCamera(camera);",
          "225:    for (uint32 i = 0; i < camera->aliases.size(); i++) {",
          "226:     addCamera(new Camera(camera, i));",
          "227:    }",
          "228:   }",
          "229:   cur = cur->next;",
          "230:  }",
          "231:  if (doc)",
          "232:   xmlFreeDoc(doc);",
          "233:  doc = 0;",
          "234:  if (ctxt)",
          "235:   xmlFreeParserCtxt(ctxt);",
          "236:  ctxt = 0;",
          "237: }",
          "239: #define RAWSPEED_DATA_COUNT (sizeof(_rawspeed_data_xml)/sizeof(_rawspeed_data_xml[0]))",
          "240: static CameraMetaDataLR* make_camera_metadata()",
          "241: {",
          "242:  int len = 0,i;",
          "243:  for(i=0;i<RAWSPEED_DATA_COUNT;i++)",
          "244:   if(_rawspeed_data_xml[i])",
          "245:   {",
          "246:    len+=strlen(_rawspeed_data_xml[i]);",
          "247:   }",
          "248:  char *rawspeed_xml = (char*)calloc(len+1,sizeof(_rawspeed_data_xml[0][0]));",
          "249:  if(!rawspeed_xml) return NULL;",
          "250:  int offt = 0;",
          "251:  for(i=0;i<RAWSPEED_DATA_COUNT;i++)",
          "252:   if(_rawspeed_data_xml[i])",
          "253:   {",
          "254:    int ll = strlen(_rawspeed_data_xml[i]);",
          "255:    if(offt+ll>len) break;",
          "256:    memmove(rawspeed_xml+offt,_rawspeed_data_xml[i],ll);",
          "257:    offt+=ll;",
          "258:   }",
          "259:  rawspeed_xml[offt]=0;",
          "260:  CameraMetaDataLR *ret=NULL;",
          "261:  try {",
          "262:   ret = new CameraMetaDataLR(rawspeed_xml,offt);",
          "263:  } catch (...) {",
          "265:  }",
          "266:  free(rawspeed_xml);",
          "267:  return ret;",
          "268: }",
          "270: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:     ZERO(imgdata);",
          "185:     ZERO(libraw_internal_data);",
          "186:     ZERO(callbacks);",
          "187:     callbacks.mem_cb = (flags & LIBRAW_OPIONS_NO_MEMERR_CALLBACK) ? NULL:  &default_memory_callback;",
          "188:     callbacks.data_cb = (flags & LIBRAW_OPIONS_NO_DATAERR_CALLBACK)? NULL : &default_data_callback;",
          "189:     memmove(&imgdata.params.aber,&aber,sizeof(aber));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:  _rawspeed_camerameta = _rawspeed_decoder = NULL;",
          "292: #ifdef USE_RAWSPEED",
          "293:  CameraMetaDataLR *camerameta = make_camera_metadata(); // May be NULL in case of exception in make_camera_metadata()",
          "294:  _rawspeed_camerameta = static_cast<void*>(camerameta);",
          "295: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204:     imgdata.params.exp_shift = 1.0;",
          "205:     imgdata.params.auto_bright_thr = LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD;",
          "206:     imgdata.params.adjust_maximum_thr= LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD;",
          "207:     imgdata.params.green_matching = 0;",
          "208:     imgdata.parent_class = this;",
          "209:     imgdata.progress_flags = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:  imgdata.params.use_rawspeed = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211:     tls->init();",
          "212: }",
          "215: void* LibRaw:: malloc(size_t t)",
          "216: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: int LibRaw::set_rawspeed_camerafile(char *filename)",
          "325: {",
          "326: #ifdef USE_RAWSPEED",
          "327:  try",
          "328:  {",
          "329:   CameraMetaDataLR *camerameta = new CameraMetaDataLR(filename);",
          "330:   if(_rawspeed_camerameta)",
          "331:   {",
          "332:    CameraMetaDataLR *d = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "333:    delete d;",
          "334:   }",
          "335:   _rawspeed_camerameta = static_cast<void*>(camerameta);",
          "336:  }",
          "337:  catch (...)",
          "338:  {",
          "340:    return -1;",
          "341:  }",
          "342: #endif",
          "343:  return 0;",
          "344: }",
          "345: LibRaw::~LibRaw()",
          "346: {",
          "347:  recycle();",
          "348:  delete tls;",
          "349: #ifdef USE_RAWSPEED",
          "350:  if(_rawspeed_camerameta)",
          "351:  {",
          "352:   CameraMetaDataLR *cmeta = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "353:   delete cmeta;",
          "354:   _rawspeed_camerameta = NULL;",
          "355:  }",
          "356: #endif",
          "357: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "264:     ZERO(imgdata.sizes);",
          "265:     ZERO(imgdata.color);",
          "266:     ZERO(libraw_internal_data);",
          "267:     memmgr.cleanup();",
          "268:     imgdata.thumbnail.tformat = LIBRAW_THUMBNAIL_UNKNOWN;",
          "269:     imgdata.progress_flags = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412: #ifdef USE_RAWSPEED",
          "413:  if(_rawspeed_decoder)",
          "414:  {",
          "415:     RawDecoder *d = static_cast<RawDecoder*>(_rawspeed_decoder);",
          "416:     delete d;",
          "417:  }",
          "418:  _rawspeed_decoder = 0;",
          "419: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "474:     else if (load_raw == &LibRaw::sony_load_raw )",
          "475:         {",
          "476:             d_info->decoder_name = \"sony_load_raw()\";",
          "478:         }",
          "479:     else if (load_raw == &LibRaw::sony_arw_load_raw )",
          "480:         {",
          "",
          "[Removed Lines]",
          "477:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "[Added Lines]",
          "630:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "485:         {",
          "486:             d_info->decoder_name = \"sony_arw2_load_raw()\";",
          "487:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "489:             d_info->decoder_flags |= LIBRAW_DECODER_ITSASONY;",
          "490:         }",
          "491:     else if (load_raw == &LibRaw::smal_v6_load_raw )",
          "",
          "[Removed Lines]",
          "488:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE | LIBRAW_DECODER_TRYRAWSPEED;",
          "",
          "[Added Lines]",
          "641:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "642: #ifndef NOARW2_RAWSPEED",
          "643:    d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "644: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "748:     return LIBRAW_SUCCESS;",
          "749: }",
          "752: void LibRaw::fix_after_rawspeed()",
          "753: {",
          "754:   if(load_raw == &LibRaw::canon_sraw_load_raw)",
          "",
          "[Removed Lines]",
          "751: #if 0",
          "",
          "[Added Lines]",
          "907: #ifdef USE_RAWSPEED",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "757:     C.maximum = 0xffff;",
          "758:   else if (load_raw == &LibRaw::sony_load_raw)",
          "759:     C.maximum = 0x3ff0;",
          "760: }",
          "761: #endif",
          "763: int LibRaw::unpack(void)",
          "764: {",
          "765:     CHECK_ORDER_HIGH(LIBRAW_PROGRESS_LOAD_RAW);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: else if (load_raw == &LibRaw::sony_arw2_load_raw)",
          "917:  {",
          "918:   C.maximum *=4;",
          "919:   C.black *=4;",
          "920:   for(int c=0; c< 4; c++)",
          "921:    C.cblack[c]*=4;",
          "922:  }",
          "923: }",
          "924: #else",
          "925: void LibRaw::fix_after_rawspeed()",
          "926: {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "784:                 free(imgdata.image);",
          "785:                 imgdata.image = 0;",
          "786:             }",
          "788:         if (libraw_internal_data.unpacker_data.meta_length)",
          "789:             {",
          "790:                 libraw_internal_data.internal_data.meta_data =",
          "791:                     (char *) malloc (libraw_internal_data.unpacker_data.meta_length);",
          "792:                 merror (libraw_internal_data.internal_data.meta_data, \"LibRaw::unpack()\");",
          "793:             }",
          "796:         libraw_decoder_info_t decoder_info;",
          "797:         get_decoder_info(&decoder_info);",
          "",
          "[Removed Lines]",
          "794:         ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
          "",
          "[Added Lines]",
          "955:      if(imgdata.rawdata.raw_alloc)",
          "956:   {",
          "957:    free(imgdata.rawdata.raw_alloc);",
          "958:    imgdata.rawdata.raw_alloc = 0;",
          "959:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "808:                     rheight = S.height + S.top_margin;",
          "809:             }",
          "810:         S.raw_pitch = S.raw_width;",
          "832:         if(imgdata.rawdata.raw_image)",
          "833:           crop_masked_pixels(); // calculate black levels",
          "836:         if( decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "837:             {",
          "",
          "[Removed Lines]",
          "811:         if(decoder_info.decoder_flags &  LIBRAW_DECODER_FLATFIELD)",
          "812:             {",
          "813:               imgdata.rawdata.raw_alloc = malloc(rwidth*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "814:               imgdata.rawdata.raw_image = (ushort*) imgdata.rawdata.raw_alloc;",
          "815:             }",
          "816:         else if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "817:             {",
          "820:                 S.iwidth = S.width;",
          "821:                 S.iheight= S.height;",
          "822:                 IO.shrink = 0;",
          "824:                 imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "825:                 imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;",
          "826:                 imgdata.rawdata.raw_image = 0; // for adobe decoder!",
          "827:             }",
          "830:         (this->*load_raw)();",
          "",
          "[Added Lines]",
          "982:   imgdata.rawdata.raw_image = 0;",
          "983:   imgdata.rawdata.color_image = 0;",
          "984: #ifdef USE_RAWSPEED",
          "986:   if(O.use_rawspeed && (decoder_info.decoder_flags & LIBRAW_DECODER_TRYRAWSPEED) && _rawspeed_camerameta)",
          "987:   {",
          "988:    INT64 spos = ID.input->tell();",
          "989:    try",
          "990:    {",
          "991:     ID.input->seek(0,SEEK_SET);",
          "992:     INT64 _rawspeed_buffer_sz = ID.input->size();",
          "993:     void *_rawspeed_buffer = malloc(_rawspeed_buffer_sz);",
          "994:     if(!_rawspeed_buffer) throw LIBRAW_EXCEPTION_ALLOC;",
          "995:     ID.input->read(_rawspeed_buffer,_rawspeed_buffer_sz,1);",
          "996:     FileMap map((uchar8*)_rawspeed_buffer,_rawspeed_buffer_sz);",
          "997:     RawParser t(&map);",
          "998:     RawDecoder *d = 0;",
          "999:     CameraMetaDataLR *meta = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "1000:     d = t.getDecoder();",
          "1001:     d->checkSupport(meta);",
          "1002:        d->decodeRaw();",
          "1003:        d->decodeMetaData(meta);",
          "1004:     RawImage r = d->mRaw;",
          "1005:     if (r->isCFA) {",
          "1007:      _rawspeed_decoder = static_cast<void*>(d);",
          "1008:      imgdata.rawdata.raw_image = (ushort*) r->getDataUncropped(0,0);",
          "1009:      S.raw_pitch = r->pitch/2;",
          "1010:      fix_after_rawspeed();",
          "1011:     }",
          "1012:     else",
          "1013:     {",
          "1014:      delete d;",
          "1015:     }",
          "1016:     free(_rawspeed_buffer);",
          "1017:    } catch (...) {",
          "1018:     imgdata.process_warnings |= LIBRAW_WARN_RAWSPEED_PROBLEM;",
          "1020:    }",
          "1021:    ID.input->seek(spos,SEEK_SET);",
          "1022:   }",
          "1023: #endif",
          "1024:   if(!imgdata.rawdata.raw_image && !imgdata.rawdata.color_image)",
          "1025:    {",
          "1027:     if(decoder_info.decoder_flags &  LIBRAW_DECODER_FLATFIELD)",
          "1028:     {",
          "1029:      imgdata.rawdata.raw_alloc = malloc(rwidth*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "1030:      imgdata.rawdata.raw_image = (ushort*) imgdata.rawdata.raw_alloc;",
          "1031:     }",
          "1032:     else if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1033:     {",
          "1036:      S.iwidth = S.width;",
          "1037:      S.iheight= S.height;",
          "1038:      IO.shrink = 0;",
          "1040:      imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "1041:      imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;",
          "1042:     }",
          "1043:           ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
          "1044:     (this->*load_raw)();",
          "1045:    }",
          "1050: #if 0",
          "1051:   printf(\"B=%d,%d,%d,%d,%d M=%d\\n\",C.black,C.cblack[0],C.cblack[1],C.cblack[2],C.cblack[3],C.maximum);",
          "1052:   if(imgdata.rawdata.raw_image)",
          "1053:    printf(\"V=%d %d %d %d %d\",imgdata.rawdata.raw_image[0],imgdata.rawdata.raw_image[17],imgdata.rawdata.raw_image[40000],imgdata.rawdata.raw_image[64000],imgdata.rawdata.raw_image[200000]);",
          "1054: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "853:             C.cblack[c] -= i;",
          "854:         C.black += i;",
          "858:         memmove(&imgdata.rawdata.color,&imgdata.color,sizeof(imgdata.color));",
          "859:         memmove(&imgdata.rawdata.sizes,&imgdata.sizes,sizeof(imgdata.sizes));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1076: #if 0",
          "1077:   if(imgdata.rawdata.raw_image)",
          "1078:   {",
          "1079:    char fnbuf[25];",
          "1080:    sprintf(fnbuf,\"%d.dat\",time(NULL));",
          "1081:    FILE *f = fopen(fnbuf,\"wb\");",
          "1082:    fwrite(imgdata.rawdata.raw_image,S.raw_pitch*sizeof(ushort),S.raw_height,f);",
          "1083:    fclose(f);",
          "1084:   }",
          "1085: #endif",
          "",
          "---------------"
        ],
        "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
          "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"libraw/libraw.h\"",
          "11: #include \"libraw/libraw_datastream.h\"",
          "12: #include \"internal/libraw_bytebuffer.h\"",
          "13: #ifdef USE_JASPER",
          "15: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: #ifdef WIN32",
          "75:     ,wfilename(NULL)",
          "76: #endif",
          "78: {",
          "79:     if (filename) {",
          "80:         std::auto_ptr<std::filebuf> buf(new std::filebuf());",
          "81:         buf->open(filename, std::ios_base::in | std::ios_base::binary);",
          "82:         if (buf->is_open()) {",
          "",
          "[Removed Lines]",
          "77:     ,jas_file(NULL)",
          "",
          "[Added Lines]",
          "78:     ,jas_file(NULL),_fsize(0)",
          "81: #ifndef WIN32",
          "82:   struct stat st;",
          "83:   if(!stat(filename,&st))",
          "84:    fsize = st.st_size;",
          "85: #else",
          "86:   struct _stati64 st;",
          "87:   if(!_stati64(filename,&st))",
          "88:    _fsize = st.st_size;",
          "89: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     }",
          "86: }",
          "87: #ifdef WIN32",
          "89: {",
          "90:  if (fname) {",
          "91:   std::auto_ptr<std::filebuf> buf(new std::filebuf());",
          "92:   buf->open(fname, std::ios_base::in | std::ios_base::binary);",
          "93:   if (buf->is_open()) {",
          "",
          "[Removed Lines]",
          "88: LibRaw_file_datastream::LibRaw_file_datastream(const wchar_t *fname) : filename(NULL),wfilename(fname),jas_file(NULL)",
          "",
          "[Added Lines]",
          "99: LibRaw_file_datastream::LibRaw_file_datastream(const wchar_t *fname) : filename(NULL),wfilename(fname),jas_file(NULL),_fsize(0)",
          "102:   struct _stati64 st;",
          "103:   if(!_wstati64(fname,&st))",
          "104:    _fsize = st.st_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452: {",
          "453:     if(fname)",
          "454:         {",
          "455: #ifndef WIN32SECURECALLS",
          "456:             f = fopen(fname,\"rb\");",
          "457: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469: #ifndef WIN32",
          "470:    struct stat st;",
          "471:    if(!stat(fname,&st))",
          "472:     fsize = st.st_size;",
          "473: #else",
          "474:    struct _stati64 st;",
          "475:    if(!_stati64(fname,&st))",
          "476:     _fsize = st.st_size;",
          "477: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "469: {",
          "470:  if(fname)",
          "471:  {",
          "472: #ifndef WIN32SECURECALLS",
          "473:   f = _wfopen(fname,L\"rb\");",
          "474: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:   struct _stati64 st;",
          "497:   if(!_wstati64(fname,&st))",
          "498:    _fsize = st.st_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60d701d9807fa9a45582ff4047b4a8be7d680ff9",
      "candidate_info": {
        "commit_hash": "60d701d9807fa9a45582ff4047b4a8be7d680ff9",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/60d701d9807fa9a45582ff4047b4a8be7d680ff9",
        "files": [
          "Changelog.txt",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp",
          "internal/defines.h",
          "src/libraw_cxx.cpp"
        ],
        "message": "row_pitch used only in LibRaw own code, not in dcraw imported one",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
          "internal/defines.h||internal/defines.h",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ],
          "candidate": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: unsigned black, cblack[4], maximum, mix_green, raw_color, zero_is_bad;",
          "144: unsigned zero_after_ff, is_raw, dng_version, is_foveon, data_error;",
          "145: unsigned tile_width, tile_length, gpsdata[32], load_flags;",
          "147: ushort shrink, iheight, iwidth, fuji_width, thumb_width, thumb_height;",
          "148: ushort *raw_image, (*image)[4];",
          "149: ushort white[8][8], curve[0x10000], cr2_slice[3], sraw_mul[4];",
          "",
          "[Removed Lines]",
          "146: ushort raw_height, raw_width, raw_pitch, height, width, top_margin, left_margin;",
          "",
          "[Added Lines]",
          "146: ushort raw_height, raw_width, height, width, top_margin, left_margin;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: #define RAW(row,col) \\",
          "244: #define FC(row,col) \\",
          "",
          "[Removed Lines]",
          "241:  raw_image[(row)*raw_pitch+(col)]",
          "",
          "[Added Lines]",
          "241:  raw_image[(row)*raw_width+(col)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "530:   for (irow=row=0; irow < height; irow++) {",
          "531:     if (fread (data, 1, 1120, ifp) < 1120) derror();",
          "533:     for (dp=data; dp < data+1120;  dp+=10, pix+=8) {",
          "534:       pix[0] = (dp[0] << 2) + (dp[1] >> 6    );",
          "535:       pix[1] = (dp[2] << 2) + (dp[1] >> 4 & 3);",
          "",
          "[Removed Lines]",
          "532:     pix = raw_image + row*raw_pitch;",
          "",
          "[Added Lines]",
          "532:     pix = raw_image + row*raw_width;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "762:   zero_after_ff = 1;",
          "763:   getbits(-1);",
          "764:   for (row=0; row < raw_height; row+=8) {",
          "766:     nblocks = MIN (8, raw_height-row) * raw_width >> 6;",
          "767:     for (block=0; block < nblocks; block++) {",
          "768:       memset (diffbuf, 0, sizeof diffbuf);",
          "",
          "[Removed Lines]",
          "765:     pixel = raw_image + row*raw_pitch;",
          "",
          "[Added Lines]",
          "765:     pixel = raw_image + row*raw_width;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1675:       todo[i+1] = buffer >> (14-i)*5;",
          "1676:     }",
          "1677:     for (i=0; i < 16; i+=2)",
          "1683:   }",
          "1684:   maximum = 0x3ff;",
          "1685: }",
          "",
          "[Removed Lines]",
          "1678:       {",
          "1679:         int row = todo[i]/raw_width;",
          "1680:         int col = todo[i]%raw_width;",
          "1681:         RAW(row,col) = (todo[i+1] & 0x3ff);",
          "1682:       }",
          "",
          "[Added Lines]",
          "1678:       raw_image[todo[i]] = (todo[i+1] & 0x3ff);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1868:   bkey = get2();",
          "1869:   t_mask = ph1.format == 1 ? 0x5555:0x1354;",
          "1870:   fseek (ifp, data_offset, SEEK_SET);",
          "1877:   if (ph1.format)",
          "1878:     for (i=0; i < raw_width*raw_height; i+=2) {",
          "1880:       a = raw_image[i+0] ^ akey;",
          "1881:       b = raw_image[i+1] ^ bkey;",
          "1882:       raw_image[i+0] = (a & t_mask) | (b & ~t_mask);",
          "1883:       raw_image[i+1] = (b & t_mask) | (a & ~t_mask);",
          "1892:     }",
          "1893: }",
          "",
          "[Removed Lines]",
          "1871: #if 0",
          "1872:   read_shorts (raw_image, raw_width*raw_height); // raw_pitch should be exactly raw_width",
          "1873: #else",
          "1874:   for(int row = 0; row < raw_height; row++)",
          "1875:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "1876: #endif",
          "1879: #if 0",
          "1884: #else",
          "1885:       int row = i/raw_width;",
          "1886:       int col = i%raw_height;",
          "1887:       a = RAW(row,col) ^ akey;",
          "1888:       b = RAW(row,col+1) ^ bkey;",
          "1889:       RAW(row,col) = (a & t_mask) | (b & ~t_mask);",
          "1890:       RAW(row,col+1) = (b & t_mask) | (a & ~t_mask);",
          "1891: #endif",
          "",
          "[Added Lines]",
          "1867:   read_shorts (raw_image, raw_width*raw_height);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1935:   pixel = (ushort *) calloc (raw_width + raw_height*4, 2);",
          "1936:   merror (pixel, \"phase_one_load_raw_c()\");",
          "1938:   fseek (ifp, strip_offset, SEEK_SET);",
          "1939:   for (row=0; row < raw_height; row++)",
          "1940:     offset[row] = get4();",
          "",
          "[Removed Lines]",
          "1937:   offset = (int *) (pixel + raw_width);",
          "",
          "[Added Lines]",
          "1919:   offset = (int *) (pixel + raw_width);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2027:  fseek (ifp, get4(), SEEK_SET);",
          "2028:       }",
          "2029:       if (filters && c != shot_select) continue;",
          "2031:       read_shorts (pixel, raw_width);",
          "2032:       if (!filters && (row = r - top_margin) < height)",
          "2033:  for (col=0; col < width; col++)",
          "",
          "[Removed Lines]",
          "2030:       if (filters) pixel = raw_image + r*raw_pitch;",
          "",
          "[Added Lines]",
          "2012:       if (filters) pixel = raw_image + r*raw_width;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2045:   int row, col, bits=0;",
          "2047:   while (1 << ++bits < maximum);",
          "2049:   read_shorts (raw_image, raw_width*raw_height);",
          "2054:   for (row=0; row < raw_height; row++)",
          "2055:     for (col=0; col < raw_width; col++)",
          "2056:       if ((RAW(row,col) >>= load_flags) >> bits",
          "",
          "[Removed Lines]",
          "2048: #if 0",
          "2050: #else",
          "2051:   for(row=0;row<raw_height;row++)",
          "2052:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "2053: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2469:    RAW(y,x) = val;",
          "2470:  }",
          "2471:   }",
          "2473:   for (i=0; i < height*width; i++)",
          "2474:     raw_image[i] = curve[raw_image[i]];",
          "2483:   maximum = 0x3fff;",
          "2484: }",
          "",
          "[Removed Lines]",
          "2472: #if 0",
          "2475: #else",
          "2476:   for (i=0; i < height*width; i++)",
          "2477:     {",
          "2478:       int row = i/width;",
          "2479:       int col = i%width;",
          "2480:       RAW(row,col) = curve[RAW(row,col)];",
          "2481:     }",
          "2482: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2887:     key = key << 8 | head[i];",
          "2888:   fseek (ifp, data_offset, SEEK_SET);",
          "2889:   for (row=0; row < raw_height; row++) {",
          "2891:     if (fread (pixel, 2, raw_width, ifp) < raw_width) derror();",
          "2892:     sony_decrypt ((unsigned int *) pixel, raw_width/2, !row, key);",
          "2893:     for (col=0; col < raw_width; col++)",
          "",
          "[Removed Lines]",
          "2890:     pixel = raw_image + row*raw_pitch;",
          "",
          "[Added Lines]",
          "2858:     pixel = raw_image + row*raw_width;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3056:       diff = diff ? -diff : 0x80;",
          "3057:     if (ftell(ifp) + 12 >= seg[1][1])",
          "3058:       diff = 0;",
          "3060:     raw_image[pix] = pred[pix & 1] += diff;",
          "3064:     if (!(pix & 1) && HOLE(pix / raw_width)) pix += 2;",
          "3065:   }",
          "3066:   maximum = 0xff;",
          "",
          "[Removed Lines]",
          "3059: #if 0",
          "3061: #else",
          "3062:     RAW(pix/raw_width,pix%raw_width) = pred[pix & 1] += diff;",
          "3063: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10832:       merror (meta_data, \"main()\");",
          "10833:     }",
          "10834:     if (filters || colors == 1) {",
          "10838:       merror (raw_image, \"main()\");",
          "10839:     }",
          "10840:     if (verbose)",
          "",
          "[Removed Lines]",
          "10835:       raw_pitch = ((raw_width*2+15)/16)*8; // !!! CHANGE ME",
          "10836:       printf(\"ifname=%s raw_width=%d raw_pitch=%d\\n\",ifname,raw_width,raw_pitch);",
          "10837:       raw_image = (ushort *) calloc ((raw_height+7)*raw_pitch, 2);",
          "",
          "[Added Lines]",
          "10799:       raw_image = (ushort *) calloc ((raw_height+7)*raw_width, 2);",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   for (irow=row=0; irow < height; irow++) {",
          "277:     if (fread (data, 1, 1120, ifp) < 1120) derror();",
          "279:     for (dp=data; dp < data+1120;  dp+=10, pix+=8) {",
          "280:       pix[0] = (dp[0] << 2) + (dp[1] >> 6    );",
          "281:       pix[1] = (dp[2] << 2) + (dp[1] >> 4 & 3);",
          "",
          "[Removed Lines]",
          "278:     pix = raw_image + row*raw_pitch;",
          "",
          "[Added Lines]",
          "278:     pix = raw_image + row*raw_width;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:   zero_after_ff = 1;",
          "509:   getbits(-1);",
          "510:   for (row=0; row < raw_height; row+=8) {",
          "512:     nblocks = MIN (8, raw_height-row) * raw_width >> 6;",
          "513:     for (block=0; block < nblocks; block++) {",
          "514:       memset (diffbuf, 0, sizeof diffbuf);",
          "",
          "[Removed Lines]",
          "511:     pixel = raw_image + row*raw_pitch;",
          "",
          "[Added Lines]",
          "511:     pixel = raw_image + row*raw_width;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1406:       todo[i+1] = buffer >> (14-i)*5;",
          "1407:     }",
          "1408:     for (i=0; i < 16; i+=2)",
          "1414:   }",
          "1415:   maximum = 0x3ff;",
          "1416: }",
          "",
          "[Removed Lines]",
          "1409:       {",
          "1410:         int row = todo[i]/raw_width;",
          "1411:         int col = todo[i]%raw_width;",
          "1412:         RAW(row,col) = (todo[i+1] & 0x3ff);",
          "1413:       }",
          "",
          "[Added Lines]",
          "1409:       raw_image[todo[i]] = (todo[i+1] & 0x3ff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1599:   bkey = get2();",
          "1600:   t_mask = ph1.format == 1 ? 0x5555:0x1354;",
          "1601:   fseek (ifp, data_offset, SEEK_SET);",
          "1608:   if (ph1.format)",
          "1609:     for (i=0; i < raw_width*raw_height; i+=2) {",
          "1611:       a = raw_image[i+0] ^ akey;",
          "1612:       b = raw_image[i+1] ^ bkey;",
          "1613:       raw_image[i+0] = (a & t_mask) | (b & ~t_mask);",
          "1614:       raw_image[i+1] = (b & t_mask) | (a & ~t_mask);",
          "1623:     }",
          "1624: }",
          "",
          "[Removed Lines]",
          "1602: #if 0",
          "1603:   read_shorts (raw_image, raw_width*raw_height); // raw_pitch should be exactly raw_width",
          "1604: #else",
          "1605:   for(int row = 0; row < raw_height; row++)",
          "1606:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "1607: #endif",
          "1610: #if 0",
          "1615: #else",
          "1616:       int row = i/raw_width;",
          "1617:       int col = i%raw_height;",
          "1618:       a = RAW(row,col) ^ akey;",
          "1619:       b = RAW(row,col+1) ^ bkey;",
          "1620:       RAW(row,col) = (a & t_mask) | (b & ~t_mask);",
          "1621:       RAW(row,col+1) = (b & t_mask) | (a & ~t_mask);",
          "1622: #endif",
          "",
          "[Added Lines]",
          "1598:   read_shorts (raw_image, raw_width*raw_height);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1666:   pixel = (ushort *) calloc (raw_width + raw_height*4, 2);",
          "1667:   merror (pixel, \"phase_one_load_raw_c()\");",
          "1669:   fseek (ifp, strip_offset, SEEK_SET);",
          "1670:   for (row=0; row < raw_height; row++)",
          "1671:     offset[row] = get4();",
          "",
          "[Removed Lines]",
          "1668:   offset = (int *) (pixel + raw_width);",
          "",
          "[Added Lines]",
          "1650:   offset = (int *) (pixel + raw_width);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1758:  fseek (ifp, get4(), SEEK_SET);",
          "1759:       }",
          "1760:       if (filters && c != shot_select) continue;",
          "1762:       read_shorts (pixel, raw_width);",
          "1763:       if (!filters && (row = r - top_margin) < height)",
          "1764:  for (col=0; col < width; col++)",
          "",
          "[Removed Lines]",
          "1761:       if (filters) pixel = raw_image + r*raw_pitch;",
          "",
          "[Added Lines]",
          "1743:       if (filters) pixel = raw_image + r*raw_width;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1776:   int row, col, bits=0;",
          "1778:   while (1 << ++bits < maximum);",
          "1780:   read_shorts (raw_image, raw_width*raw_height);",
          "1785:   for (row=0; row < raw_height; row++)",
          "1786:     for (col=0; col < raw_width; col++)",
          "1787:       if ((RAW(row,col) >>= load_flags) >> bits",
          "",
          "[Removed Lines]",
          "1779: #if 0",
          "1781: #else",
          "1782:   for(row=0;row<raw_height;row++)",
          "1783:     read_shorts(raw_image+row*raw_pitch,raw_width);",
          "1784: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2200:    RAW(y,x) = val;",
          "2201:  }",
          "2202:   }",
          "2204:   for (i=0; i < height*width; i++)",
          "2205:     raw_image[i] = curve[raw_image[i]];",
          "2214:   maximum = 0x3fff;",
          "2215: }",
          "",
          "[Removed Lines]",
          "2203: #if 0",
          "2206: #else",
          "2207:   for (i=0; i < height*width; i++)",
          "2208:     {",
          "2209:       int row = i/width;",
          "2210:       int col = i%width;",
          "2211:       RAW(row,col) = curve[RAW(row,col)];",
          "2212:     }",
          "2213: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2618:     key = key << 8 | head[i];",
          "2619:   fseek (ifp, data_offset, SEEK_SET);",
          "2620:   for (row=0; row < raw_height; row++) {",
          "2622:     if (fread (pixel, 2, raw_width, ifp) < raw_width) derror();",
          "2623:     sony_decrypt ((unsigned int *) pixel, raw_width/2, !row, key);",
          "2624:     for (col=0; col < raw_width; col++)",
          "",
          "[Removed Lines]",
          "2621:     pixel = raw_image + row*raw_pitch;",
          "",
          "[Added Lines]",
          "2589:     pixel = raw_image + row*raw_width;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2787:       diff = diff ? -diff : 0x80;",
          "2788:     if (ftell(ifp) + 12 >= seg[1][1])",
          "2789:       diff = 0;",
          "2791:     raw_image[pix] = pred[pix & 1] += diff;",
          "2795:     if (!(pix & 1) && HOLE(pix / raw_width)) pix += 2;",
          "2796:   }",
          "2797:   maximum = 0xff;",
          "",
          "[Removed Lines]",
          "2790: #if 0",
          "2792: #else",
          "2793:     RAW(pix/raw_width,pix%raw_width) = pred[pix & 1] += diff;",
          "2794: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2933:   jas_stream_close (in);",
          "2934: #endif",
          "2935: }",
          "2937: void CLASS crop_masked_pixels()",
          "2938: {",
          "2939:   int row, col;",
          "",
          "[Removed Lines]",
          "2936: #line 3913 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "2900: #line 3877 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3036:   RUN_CALLBACK(LIBRAW_PROGRESS_REMOVE_ZEROES,1,2);",
          "3037: #endif",
          "3038: }",
          "3040: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
          "3041: {",
          "3042:   int i;",
          "",
          "[Removed Lines]",
          "3039: #line 4181 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "3003: #line 4145 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4534:     fseek (ifp, save, SEEK_SET);",
          "4535:   }",
          "4536: }",
          "4538: void CLASS parse_makernote (int base, int uptag)",
          "4539: {",
          "4540:   static const uchar xlat[2][256] = {",
          "",
          "[Removed Lines]",
          "4537: #line 5683 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "4501: #line 5647 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5049:     fseek (ifp, save, SEEK_SET);",
          "5050:   }",
          "5051: }",
          "5053: int CLASS parse_tiff_ifd (int base)",
          "5054: {",
          "5055:   unsigned entries, tag, type, len, plen=16, save;",
          "",
          "[Removed Lines]",
          "5052: #line 6203 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "5016: #line 6167 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6293:     data_offset = get4();",
          "6294:   }",
          "6295: }",
          "6297: char * CLASS foveon_gets (int offset, char *str, int len)",
          "6298: {",
          "6299:   int i;",
          "",
          "[Removed Lines]",
          "6296: #line 7449 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6260: #line 7413 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6394:   }",
          "6395:   is_foveon = 1;",
          "6396: }",
          "6399:    All matrices are from Adobe DNG Converter unless otherwise noted.",
          "",
          "[Removed Lines]",
          "6397: #line 7552 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "6361: #line 7516 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8837: }",
          "8841: void CLASS convert_to_rgb()",
          "8842: {",
          "8843: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "8840: #line 10086 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "8804: #line 10050 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "9068:   if (flip & 1) col = iwidth  - 1 - col;",
          "9069:   return row * iwidth + col;",
          "9070: }",
          "9072: void CLASS tiff_set (ushort *ntag,",
          "9073:  ushort tag, ushort type, int count, int val)",
          "9074: {",
          "",
          "[Removed Lines]",
          "9071: #line 10342 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "9035: #line 10306 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 4018 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "24: #line 3982 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"libraw/libraw.h\"",
          "30: #include \"internal/defines.h\"",
          "31: #include \"internal/var_defines.h\"",
          "34:    Seach from the current directory up to the root looking for",
          "35:    a \".badpixels\" file, and fix those pixels now.",
          "",
          "[Removed Lines]",
          "32: #line 4029 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "32: #line 3993 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #endif",
          "55:   if (cfname)",
          "56:     fp = fopen (cfname, \"r\");",
          "58:   if (!fp)",
          "59:       {",
          "60: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "57: #line 4079 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "57: #line 4043 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "155: #endif",
          "156: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "160: {",
          "",
          "[Removed Lines]",
          "157: #line 9997 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "157: #line 9961 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/defines.h||internal/defines.h": [
          "File: internal/defines.h -> internal/defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: #define RAW(row,col) \\",
          "153: #line 248 \"dcraw/dcraw.c\"",
          "154: #define BAYER(row,col) \\",
          "155:  image[((row) >> shrink)*iwidth + ((col) >> shrink)][FC(row,col)]",
          "",
          "[Removed Lines]",
          "152:  raw_image[(row)*raw_pitch+(col)]",
          "",
          "[Added Lines]",
          "152:  raw_image[(row)*raw_width+(col)]",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:         S.raw_pitch = S.raw_width;",
          "799:         if(decoder_info.decoder_flags &  LIBRAW_DECODER_FLATFIELD)",
          "800:             {",
          "805:               imgdata.rawdata.raw_image = (ushort*) imgdata.rawdata.raw_alloc;",
          "806:             }",
          "807:         else if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "",
          "[Removed Lines]",
          "801:               S.raw_pitch = ((rwidth*2+15)/16)*8;",
          "802:               if(S.raw_pitch!=S.raw_width)",
          "803:                 fprintf(stderr,\"File %s pitch=%d width=%d\\n\",ID.input->fname(),S.raw_pitch,S.raw_width);",
          "804:               imgdata.rawdata.raw_alloc = malloc(S.raw_pitch*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "",
          "[Added Lines]",
          "801:               imgdata.rawdata.raw_alloc = malloc(rwidth*(rheight+7)*sizeof(imgdata.rawdata.raw_image[0]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "716b21418748380d092529cb99a8bdf0aeaa968a",
      "candidate_info": {
        "commit_hash": "716b21418748380d092529cb99a8bdf0aeaa968a",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/716b21418748380d092529cb99a8bdf0aeaa968a",
        "files": [
          "Changelog.rus",
          "Changelog.txt",
          "Makefile.devel",
          "RawSpeed/rawspeed_xmldata.cpp",
          "clist2c.pl",
          "dcraw/dcraw.1.html",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp",
          "internal/defines.h",
          "internal/libraw_bytebuffer.h",
          "internal/libraw_internal_funcs.h",
          "internal/var_defines.h",
          "libraw/libraw.h",
          "libraw/libraw_datastream.h",
          "libraw/libraw_internal.h",
          "libraw/libraw_types.h",
          "samples/dcraw_emu.cpp",
          "src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp"
        ],
        "message": "dcraw 9.19 imported",
        "before_after_code_files": [
          "Changelog.rus||Changelog.rus",
          "Makefile.devel||Makefile.devel",
          "RawSpeed/rawspeed_xmldata.cpp||RawSpeed/rawspeed_xmldata.cpp",
          "clist2c.pl||clist2c.pl",
          "dcraw/dcraw.1.html||dcraw/dcraw.1.html",
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp",
          "internal/defines.h||internal/defines.h",
          "internal/libraw_bytebuffer.h||internal/libraw_bytebuffer.h",
          "internal/libraw_internal_funcs.h||internal/libraw_internal_funcs.h",
          "internal/var_defines.h||internal/var_defines.h",
          "libraw/libraw.h||libraw/libraw.h",
          "libraw/libraw_datastream.h||libraw/libraw_datastream.h",
          "libraw/libraw_internal.h||libraw/libraw_internal.h",
          "libraw/libraw_types.h||libraw/libraw_types.h",
          "samples/dcraw_emu.cpp||samples/dcraw_emu.cpp",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ],
          "candidate": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Changelog.rus||Changelog.rus": [
          "File: Changelog.rus -> Changelog.rus",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:    DHT Demosaic by Anton Petrusevich",
          "4:    Modified AHD Demosaic by Anton Petrusevich",
          "",
          "[Removed Lines]",
          "1: \ufeff2013-05-27 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "[Added Lines]",
          "1: \ufeff2013-07-03 Alex Tutubalin <lexa@lexa.ru>",
          "3:     + \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u043a\u0430\u043c\u0435\u0440",
          "4:       Baumer TXG14",
          "5:       Canon EOS C500",
          "6:       Nikon D5200",
          "7:       OmniVision OV5647 (Raspberry Pi)",
          "8:       Panasonic DMC-GF6",
          "9:       Samsung NX300, NX1100, NX2000",
          "10:       Sony NEX-3N",
          "11:     + \u041d\u043e\u0432\u044b\u0439 \u043a\u043e\u0434 \u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0435\u043d\u0441\u043e\u0440\u043e\u0432 Fuji X-Trans",
          "12:     + \u0414\u043b\u044f \u0441\u0435\u043d\u0441\u043e\u0440\u043e\u0432 Fuji X-Trans \u043f\u043e\u043b\u0435 imgdata.iparams.filters \u0438\u043c\u0435\u0435\u0442",
          "13:       \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 9 (\u0431\u044b\u043b\u043e 2)",
          "15:     \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043c\u0430\u0442\u0440\u0438\u0446 Fuji X-Trans",
          "18:     \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 RawSpeed. \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044b\u0441\u0442\u0440\u044b\u0445 \u0434\u0435\u043a\u043e\u0434\u0435\u0440\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435",
          "19:     LibRaw \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 RawSpeed",
          "21:     \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434.",
          "24: 2013-05-27 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "---------------"
        ],
        "Makefile.devel||Makefile.devel": [
          "File: Makefile.devel -> Makefile.devel",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: CC=gcc",
          "6: CXX=g++",
          "8: # RawSpeed Support",
          "9: CFLAGS+=-DUSE_RAWSPEED -I../RawSpeed -I/usr/local/include/libxml2",
          "10: LDADD+=-L../RawSpeed/RawSpeed/release -lrawspeed -L/usr/local/include -ljpeg -lxml2",
          "11: RAWSPEED_DATA=../RawSpeed/data/cameras.xml",
          "19: # LCMS support",
          "",
          "[Removed Lines]",
          "14: CC=gcc48",
          "15: CXX=g++48",
          "16: CFLAGS+= -O4 -g -march=corei7 -mtune=corei7 -I. -pedantic  -Wno-long-long -Wno-overflow -msse4.2 -mfpmath=sse  -fopenmp",
          "",
          "[Added Lines]",
          "8: CFLAGS=",
          "16: CC=gcc46",
          "17: CXX=g++46",
          "18: CFLAGS+= -g -I. -pedantic  -Wno-long-long -Wno-overflow",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: CFLAGS+=-DLIBRAW_DEMOSAIC_PACK_GPL2",
          "38: # Demosaic Pack GPL3:",
          "43: DCRAW_GEN= internal/dcraw_common.cpp internal/dcraw_fileio.cpp",
          "44: DCRAW_LIB_OBJECTS=object/dcraw_common.o object/libraw_cxx.o object/libraw_datastream.o object/libraw_c_api.o object/dcraw_fileio.o object/demosaic_packs.o",
          "",
          "[Removed Lines]",
          "39: DPCFLAGS+=-I../LibRaw-demosaic-pack-GPL3",
          "40: CFLAGS+=-DLIBRAW_DEMOSAIC_PACK_GPL3",
          "",
          "[Added Lines]",
          "41: #DPCFLAGS+=-I../LibRaw-demosaic-pack-GPL3",
          "42: #CFLAGS+=-DLIBRAW_DEMOSAIC_PACK_GPL3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:  ${PP} -DDEFINES dcraw/dcraw.c  >internal/defines.h",
          "111: internal/dcraw_common.cpp: dcraw/dcraw.c internal/defines.h  ${PP} Makefile.devel",
          "114: internal/dcraw_fileio.cpp: dcraw/dcraw.c internal/defines.h  ${PP} Makefile.devel",
          "115:  ${PP} -DFILEIO dcraw/dcraw.c >internal/dcraw_fileio.cpp",
          "",
          "[Removed Lines]",
          "112:  ${PP} -DCOMMON dcraw/dcraw.c >internal/dcraw_common.cpp",
          "",
          "[Added Lines]",
          "113:  ${PP} -N -DCOMMON dcraw/dcraw.c >internal/dcraw_common.cpp",
          "",
          "---------------"
        ],
        "RawSpeed/rawspeed_xmldata.cpp||RawSpeed/rawspeed_xmldata.cpp": [
          "File: RawSpeed/rawspeed_xmldata.cpp -> RawSpeed/rawspeed_xmldata.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: \"<Cameras>\\n\",",
          "66: \" <Camera make=\\\"Canon\\\" model=\\\"Canon EOS 100D\\\">\\n\",",
          "67: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "72: \"  </CFA>\\n\",",
          "73: \"  <Crop x=\\\"72\\\" y=\\\"52\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "74: \"  <Sensor black=\\\"0\\\" white=\\\"16383\\\"/>\\n\",",
          "",
          "[Removed Lines]",
          "68: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "69: \"   <Color x=\\\"1\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "70: \"   <Color x=\\\"0\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "71: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "",
          "[Added Lines]",
          "68: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "69: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "70: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "71: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1233: \"   <Hint name=\\\"coolpixsplit\\\" value=\\\"\\\"/>\\n\",",
          "1234: \"  </Hints>\\t\\n\",",
          "1235: \" </Camera>\\n\",",
          "1236: \" <Camera make=\\\"NIKON CORPORATION\\\" model=\\\"COOLPIX A\\\">\\n\",",
          "1237: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1238: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1236: \" <Camera make=\\\"NIKON\\\" model=\\\"COOLPIX P330\\\" supported=\\\"yes\\\" decoder_version=\\\"5\\\">\\n\",",
          "1237: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1238: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "1239: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "1240: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "1241: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "1242: \"  </CFA>\\n\",",
          "1243: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "1244: \"  <Sensor black=\\\"3200\\\" white=\\\"65535\\\"/>\\n\",",
          "1245: \"  <Hints>\\n\",",
          "1246: \"   <Hint name=\\\"force_uncompressed\\\" value=\\\"\\\"/>\\n\",",
          "1247: \"   <Hint name=\\\"real_bpp\\\" value=\\\"16\\\"/>\\n\",",
          "1248: \"  </Hints>\\n\",",
          "1249: \" </Camera>\\t \\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1887: \"   <Color x=\\\"0\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "1888: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "1889: \"  </CFA>\\n\",",
          "1891: \"  <Sensor black=\\\"155\\\" white=\\\"4095\\\"/>\\n\",",
          "1892: \"  <Sensor black=\\\"165\\\" white=\\\"4095\\\" iso_list=\\\"6400\\\"/>\\n\",",
          "1893: \"  <Sensor black=\\\"165\\\" white=\\\"2900\\\" iso_list=\\\"12800\\\"/>\\n\",",
          "",
          "[Removed Lines]",
          "1890: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-194\\\" height=\\\"0\\\"/>\\n\",",
          "",
          "[Added Lines]",
          "1904: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-192\\\" height=\\\"0\\\"/>\\n\",",
          "1905: \"  <Sensor black=\\\"155\\\" white=\\\"4095\\\"/>\\n\",",
          "1906: \"  <Sensor black=\\\"165\\\" white=\\\"4095\\\" iso_list=\\\"6400\\\"/>\\n\",",
          "1907: \"  <Sensor black=\\\"165\\\" white=\\\"2900\\\" iso_list=\\\"12800\\\"/>\\n\",",
          "1908: \"  <Sensor black=\\\"170\\\" white=\\\"1800\\\" iso_list=\\\"25600\\\"/>\\n\",",
          "1909: \"  <Hints>\\n\",",
          "1910: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "1911: \"  </Hints>\\n\",",
          "1912: \" </Camera>\\n\",",
          "1913: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GH3\\\" mode=\\\"3:2\\\">\\n\",",
          "1914: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1915: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "1916: \"   <Color x=\\\"1\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "1917: \"   <Color x=\\\"0\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "1918: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "1919: \"  </CFA>\\n\",",
          "1920: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-192\\\" height=\\\"0\\\"/>\\n\",",
          "1921: \"  <Sensor black=\\\"155\\\" white=\\\"4095\\\"/>\\n\",",
          "1922: \"  <Sensor black=\\\"165\\\" white=\\\"4095\\\" iso_list=\\\"6400\\\"/>\\n\",",
          "1923: \"  <Sensor black=\\\"165\\\" white=\\\"2900\\\" iso_list=\\\"12800\\\"/>\\n\",",
          "1924: \"  <Sensor black=\\\"170\\\" white=\\\"1800\\\" iso_list=\\\"25600\\\"/>\\n\",",
          "1925: \"  <Hints>\\n\",",
          "1926: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "1927: \"  </Hints>\\n\",",
          "1928: \" </Camera>\\n\",",
          "1929: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GH3\\\" mode=\\\"16:9\\\">\\n\",",
          "1930: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1931: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "1932: \"   <Color x=\\\"1\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "1933: \"   <Color x=\\\"0\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "1934: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "1935: \"  </CFA>\\n\",",
          "1936: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-192\\\" height=\\\"0\\\"/>\\n\",",
          "1937: \"  <Sensor black=\\\"155\\\" white=\\\"4095\\\"/>\\n\",",
          "1938: \"  <Sensor black=\\\"165\\\" white=\\\"4095\\\" iso_list=\\\"6400\\\"/>\\n\",",
          "1939: \"  <Sensor black=\\\"165\\\" white=\\\"2900\\\" iso_list=\\\"12800\\\"/>\\n\",",
          "1940: \"  <Sensor black=\\\"170\\\" white=\\\"1800\\\" iso_list=\\\"25600\\\"/>\\n\",",
          "1941: \"  <Hints>\\n\",",
          "1942: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "1943: \"  </Hints>\\n\",",
          "1944: \" </Camera>\\n\",",
          "1945: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GH3\\\" mode=\\\"1:1\\\">\\n\",",
          "1946: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "1947: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "1948: \"   <Color x=\\\"1\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "1949: \"   <Color x=\\\"0\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "1950: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "1951: \"  </CFA>\\n\",",
          "1952: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2106: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2107: \"  </Hints>\\n\",",
          "2108: \" </Camera>\\n\",",
          "2109: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GF3\\\">\\n\",",
          "2110: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2111: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2171: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-G6\\\">\\n\",",
          "2172: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2173: \"   <Color x=\\\"0\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "2174: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2175: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2176: \"   <Color x=\\\"1\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "2177: \"  </CFA>\\n\",",
          "2178: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-194\\\" height=\\\"0\\\"/>\\n\",",
          "2179: \"  <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2180: \"  <Hints>\\n\",",
          "2181: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2182: \"  </Hints>\\n\",",
          "2183: \" </Camera> \\n\",",
          "2184: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-G6\\\" mode=\\\"4:3\\\">\\n\",",
          "2185: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2186: \"   <Color x=\\\"0\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "2187: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2188: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2189: \"   <Color x=\\\"1\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "2190: \"  </CFA>\\n\",",
          "2191: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-194\\\" height=\\\"0\\\"/>\\n\",",
          "2192: \"  <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2193: \"  <Hints>\\n\",",
          "2194: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2195: \"  </Hints>\\n\",",
          "2196: \" </Camera>\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2158: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2159: \"  </Hints>\\n\",",
          "2160: \" </Camera>\\n\",",
          "2161: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GH2\\\">\\n\",",
          "2162: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2163: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2249: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GF6\\\">\\n\",",
          "2250: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2251: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2252: \"   <Color x=\\\"1\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2253: \"   <Color x=\\\"0\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "2254: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2255: \"  </CFA>\\n\",",
          "2256: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-208\\\" height=\\\"0\\\"/>\\n\",",
          "2257: \"  <Sensor black=\\\"150\\\" white=\\\"4097\\\"/>\\n\",",
          "2258: \"  <Hints>\\n\",",
          "2259: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2260: \"  </Hints>\\n\",",
          "2261: \" </Camera>\\n\",",
          "2262: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-GF6\\\" mode= \\\"4:3\\\">\\n\",",
          "2263: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2264: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2265: \"   <Color x=\\\"1\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2266: \"   <Color x=\\\"0\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "2267: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2268: \"  </CFA>\\n\",",
          "2269: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-208\\\" height=\\\"0\\\"/>\\n\",",
          "2270: \"  <Sensor black=\\\"150\\\" white=\\\"4097\\\"/>\\n\",",
          "2271: \"  <Hints>\\n\",",
          "2272: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2273: \"  </Hints>\\n\",",
          "2274: \" </Camera> \\n\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2399: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2400: \"  </Hints>\\n\",",
          "2401: \" </Camera>\\t\\n\",",
          "2402: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-LX3\\\">\\n\",",
          "2403: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2404: \"   <Color x=\\\"0\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2516: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-LF1\\\" mode=\\\"4:3\\\">\\n\",",
          "2517: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2518: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2519: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2520: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2521: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "2522: \"  </CFA>\\n\",",
          "2523: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-130\\\" height=\\\"0\\\"/>\\n\",",
          "2524: \"  <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2525: \"  <Hints>\\n\",",
          "2526: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2527: \"  </Hints>\\n\",",
          "2528: \" </Camera>\\n\",",
          "2529: \" <!-- Default guess -->\\n\",",
          "2530: \" <Camera make=\\\"Panasonic\\\" model = \\\"DMC-LF1\\\">\\n\",",
          "2531: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2532: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2533: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2534: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2535: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "2536: \"  </CFA>\\n\",",
          "2537: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-130\\\" height=\\\"0\\\"/>\\n\",",
          "2538: \"  <Sensor black=\\\"150\\\" white=\\\"4096\\\"/>\\n\",",
          "2539: \"  <Hints>\\n\",",
          "2540: \"   <Hint name=\\\"zero_is_bad\\\" value=\\\"\\\"/>\\n\",",
          "2541: \"  </Hints>\\n\",",
          "2542: \" </Camera>\\n\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2951: \"   <Hint name=\\\"msb_override\\\" value=\\\"false\\\"/>\\n\",",
          "2952: \"  </Hints>\\t\\t\\n\",",
          "2953: \" </Camera>\\t\\n\",",
          "2955: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "2960: \"  </CFA>\\n\",",
          "2962: \"  <Sensor black=\\\"0\\\" white=\\\"4095\\\"/>\\n\",",
          "2963: \" </Camera>\\t\\n\",",
          "2964: \" <Camera make=\\\"SAMSUNG\\\" model=\\\"NX5\\\">\\n\",",
          "",
          "[Removed Lines]",
          "2954: \" <Camera make=\\\"SAMSUNG\\\" model=\\\"NX300\\\" supported=\\\"no\\\">\\n\",",
          "2956: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "2957: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "2958: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "2959: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "2961: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "",
          "[Added Lines]",
          "3095: \" <Camera make=\\\"SAMSUNG\\\" model=\\\"NX300\\\"\\tdecoder_version=\\\"3\\\">\\n\",",
          "3097: \"   <Color x=\\\"0\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "3098: \"   <Color x=\\\"1\\\" y=\\\"0\\\">BLUE</Color>\\n\",",
          "3099: \"   <Color x=\\\"0\\\" y=\\\"1\\\">RED</Color>\\n\",",
          "3100: \"   <Color x=\\\"1\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "3102: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-10\\\" height=\\\"-18\\\"/>\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2993: \"  </CFA>\\n\",",
          "2994: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-12\\\" height=\\\"0\\\"/>\\n\",",
          "2995: \"  <Sensor black=\\\"800\\\" white=\\\"16620\\\"/>\\n\",",
          "2997: \" <Camera make=\\\"SONY\\\" model=\\\"DSLR-A100\\\" supported=\\\"no\\\">\\n\",",
          "2998: \"  <!-- Files doesn't have a valid TIFF structure -->\\n\",",
          "2999: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "",
          "[Removed Lines]",
          "2996: \" </Camera>\\t\\n\",",
          "",
          "[Added Lines]",
          "3137: \" </Camera>\\n\",",
          "3138: \" <Camera make=\\\"SONY\\\" model=\\\"DSC-RX100M2\\\">\\n\",",
          "3139: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "3140: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "3141: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "3142: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "3143: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "3144: \"  </CFA>\\n\",",
          "3145: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "3146: \"  <Sensor black=\\\"520\\\" white=\\\"16596\\\"/>\\n\",",
          "3147: \" </Camera>\\n\",",
          "3148: \" <Camera make=\\\"SONY\\\" model=\\\"DSC-RX1R\\\">\\n\",",
          "3149: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "3150: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "3151: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "3152: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "3153: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "3154: \"  </CFA>\\n\",",
          "3155: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-16\\\" height=\\\"0\\\"/>\\n\",",
          "3156: \"  <Sensor black=\\\"512\\\" white=\\\"33192\\\" iso_list=\\\"50\\\"/>\\n\",",
          "3157: \"  <Sensor black=\\\"512\\\" white=\\\"16596\\\"/>\\n\",",
          "3158: \"  <BlackAreas>\\n\",",
          "3159: \"   <Vertical x=\\\"6032\\\" width=\\\"14\\\"/>\\n\",",
          "3160: \"  </BlackAreas> \\n\",",
          "3161: \" </Camera>\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3165: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "3166: \"  <Sensor black=\\\"520\\\" white=\\\"16360\\\"/>\\n\",",
          "3167: \" </Camera>\\t\\n\",",
          "3169: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "3170: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "3171: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "",
          "[Removed Lines]",
          "3168: \" <Camera make=\\\"SONY\\\" model=\\\"NEX-5\\\" supported=\\\"yes\\\">\\n\",",
          "",
          "[Added Lines]",
          "3333: \" <Camera make=\\\"SONY\\\" model=\\\"NEX-3N\\\">\\n\",",
          "3334: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "3335: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "3336: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "3337: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "3338: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "3339: \"  </CFA>\\n\",",
          "3340: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"-10\\\" height=\\\"0\\\"/>\\n\",",
          "3341: \"  <Sensor black=\\\"520\\\" white=\\\"16596\\\"/>\\n\",",
          "3342: \" </Camera>\\t <Camera make=\\\"SONY\\\" model=\\\"NEX-5\\\" supported=\\\"yes\\\">\\n\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3338: \"   <Vertical x=\\\"6032\\\" width=\\\"14\\\"/>\\n\",",
          "3339: \"  </BlackAreas>\\n\",",
          "3340: \" </Camera>\\n\",",
          "3341: \"</Cameras>\\n\",",
          "3342: 0",
          "3343: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3515: \" <Camera make=\\\"Sinar Photography AG\\\" model=\\\"Sinar Hy6/ Sinarback eXact\\\" mode=\\\"dng\\\">\\n\",",
          "3516: \"  <CFA width=\\\"2\\\" height=\\\"2\\\">\\n\",",
          "3517: \"   <Color x=\\\"0\\\" y=\\\"0\\\">RED</Color>\\n\",",
          "3518: \"   <Color x=\\\"1\\\" y=\\\"0\\\">GREEN</Color>\\n\",",
          "3519: \"   <Color x=\\\"0\\\" y=\\\"1\\\">GREEN</Color>\\n\",",
          "3520: \"   <Color x=\\\"1\\\" y=\\\"1\\\">BLUE</Color>\\n\",",
          "3521: \"  </CFA>\\n\",",
          "3522: \"  <Crop x=\\\"0\\\" y=\\\"0\\\" width=\\\"0\\\" height=\\\"0\\\"/>\\n\",",
          "3523: \"  <Sensor black=\\\"0\\\" white=\\\"0\\\"/>\\n\",",
          "3524: \"  <Hints>\\n\",",
          "3525: \"   <Hint name=\\\"ignore_bytecount\\\" value=\\\"\\\"/>\\n\",",
          "3526: \"  </Hints>\\t  \\n\",",
          "3527: \" </Camera> \\n\",",
          "",
          "---------------"
        ],
        "clist2c.pl||clist2c.pl": [
          "File: clist2c.pl -> clist2c.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/perl",
          "4: while (<>)",
          "5:   {",
          "6:     chomp;",
          "7:     s/^\\s+\\*\\s+//;",
          "8:     s/^\\s+//;",
          "9:     s/\\\"/\\\\\\\"/g;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:     s/^\\s+//;",
          "",
          "---------------"
        ],
        "dcraw/dcraw.1.html||dcraw/dcraw.1.html": [
          "File: dcraw/dcraw.1.html -> dcraw/dcraw.1.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: This document was created by",
          "436: <A HREF=\"http://localhost/cgi-bin/man/man2html\">man2html</A>,",
          "437: using the manual pages.<BR>",
          "439: </BODY>",
          "440: </HTML>",
          "",
          "[Removed Lines]",
          "438: Time: 19:28:50 GMT, December 23, 2012",
          "",
          "[Added Lines]",
          "438: Time: 06:04:09 GMT, June 17, 2013",
          "",
          "---------------"
        ],
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #ifndef IGNOREALL",
          "3:    dcraw.c -- Dave Coffin's raw photo decoder",
          "6:    This is a command-line ANSI C program to convert raw photos from",
          "7:    any digital camera on any computer running any operating system.",
          "",
          "[Removed Lines]",
          "4:    Copyright 1997-2012 by Dave Coffin, dcoffin a cybercom o net",
          "",
          "[Added Lines]",
          "4:    Copyright 1997-2013 by Dave Coffin, dcoffin a cybercom o net",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:    homepage qualifies as \"full source code\".",
          "27: #ifndef USE_JPEG",
          "",
          "[Removed Lines]",
          "23:    $Revision: 1.454 $",
          "24:    $Date: 2012/12/23 19:25:36 $",
          "",
          "[Added Lines]",
          "23:    $Revision: 1.456 $",
          "24:    $Date: 2013/06/16 18:01:08 $",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: #define NO_LCMS",
          "36: #define DCRAW_VERBOSE",
          "40: #ifndef _GNU_SOURCE",
          "41: #define _GNU_SOURCE",
          "",
          "[Removed Lines]",
          "38: #define DCRAW_VERSION \"9.17\"",
          "",
          "[Added Lines]",
          "38: #define DCRAW_VERSION \"9.19\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53: #include <string.h>",
          "54: #include <time.h>",
          "55: #include <sys/types.h>",
          "80: #if defined(DJGPP) || defined(__MINGW32__)",
          "81: #define fseeko fseek",
          "82: #define ftello ftell",
          "",
          "[Removed Lines]",
          "57: #ifdef NODEPS",
          "58: #define NO_JASPER",
          "59: #define NO_JPEG",
          "60: #define NO_LCMS",
          "61: #endif",
          "62: #ifndef NO_JASPER",
          "64: #endif",
          "65: #ifndef NO_JPEG",
          "69: #ifndef NO_LCMS",
          "71: #endif",
          "73: #ifdef LOCALEDIR",
          "74: #include <libintl.h>",
          "75: #define _(String) gettext(String)",
          "76: #else",
          "77: #define _(String) (String)",
          "78: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106: typedef unsigned long long UINT64;",
          "107: #endif",
          "109: #ifdef LJPEG_DECODE",
          "110: #error Please compile dcraw.c by itself.",
          "111: #error Do not link it with ljpeg_decode.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #ifdef NODEPS",
          "88: #define NO_JASPER",
          "89: #define NO_JPEG",
          "90: #define NO_LCMS",
          "91: #endif",
          "92: #ifndef NO_JASPER",
          "94: #endif",
          "95: #ifndef NO_JPEG",
          "98: #ifndef NO_LCMS",
          "100: #endif",
          "101: #ifdef LOCALEDIR",
          "102: #include <libintl.h>",
          "103: #define _(String) gettext(String)",
          "104: #else",
          "105: #define _(String) (String)",
          "106: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131: FILE *ifp, *ofp;",
          "132: short order;",
          "133: const char *ifname;",
          "135: char cdesc[5], desc[512], make[64], model[64], model2[64], artist[64];",
          "136: float flash_used, canon_ev, iso_speed, shutter, aperture, focal_len;",
          "137: time_t timestamp;",
          "141: unsigned thumb_length, meta_length, profile_length;",
          "142: unsigned thumb_misc, *oprof, fuji_layout, shot_select=0, multi_out=0;",
          "143: unsigned tiff_nifds, tiff_samples, tiff_bps, tiff_compress;",
          "144: unsigned black, cblack[4], maximum, mix_green, raw_color, zero_is_bad;",
          "145: unsigned zero_after_ff, is_raw, dng_version, is_foveon, data_error;",
          "146: unsigned tile_width, tile_length, gpsdata[32], load_flags;",
          "147: ushort raw_height, raw_width, height, width, top_margin, left_margin;",
          "148: ushort shrink, iheight, iwidth, fuji_width, thumb_width, thumb_height;",
          "149: ushort *raw_image, (*image)[4];",
          "150: ushort white[8][8], curve[0x10000], cr2_slice[3], sraw_mul[4];",
          "152: double pixel_aspect, aber[4]={1,1,1,1}, gamm[6]={ 0.45,4.5,0,0,0,0 };",
          "153: float bright=1, user_mul[4]={0,0,0,0}, threshold=0;",
          "154: int half_size=0, four_color_rgb=0, document_mode=0, highlight=0;",
          "155: int verbose=0, use_auto_wb=0, use_camera_wb=0, use_camera_matrix=-1;",
          "156: int output_color=1, output_bps=8, output_tiff=0, med_passes=0;",
          "",
          "[Removed Lines]",
          "134: char *meta_data;",
          "138: unsigned shot_order, kodak_cbpp, filters, exif_cfa, unique_id;",
          "139: off_t    strip_offset, data_offset;",
          "140: off_t    thumb_offset, meta_offset, profile_offset;",
          "151: int mask[8][4], flip, tiff_flip, colors;",
          "",
          "[Added Lines]",
          "133: char *meta_data, xtrans[6][6];",
          "137: off_t strip_offset, data_offset;",
          "138: off_t thumb_offset, meta_offset, profile_offset;",
          "139: unsigned shot_order, kodak_cbpp, exif_cfa, unique_id;",
          "146: unsigned flip, tiff_flip, filters, colors;",
          "153: int mask[8][4];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "262: #include \"libraw/libraw.h\"",
          "263: #include \"internal/defines.h\"",
          "264: #include \"internal/var_defines.h\"",
          "",
          "[Removed Lines]",
          "265: #include \"internal/libraw_bytebuffer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "285:     { 0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1 },",
          "286:     { 2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2 },",
          "287:     { 0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3 } };",
          "296:   if (filters == 1) return filter[(row+top_margin)&15][(col+left_margin)&15];",
          "298:   return FC(row,col);",
          "299: }",
          "",
          "[Removed Lines]",
          "288:   static const char filter2[6][6] =",
          "289:   { { 1,1,0,1,1,2 },",
          "290:     { 1,1,2,1,1,0 },",
          "291:     { 2,0,1,0,2,1 },",
          "292:     { 1,1,2,1,1,0 },",
          "293:     { 1,1,0,1,1,2 },",
          "294:     { 0,2,1,2,0,1 } };",
          "297:   if (filters == 2) return filter2[(row+6) % 6][(col+6) % 6];",
          "",
          "[Added Lines]",
          "289:   if (filters == 9) return xtrans[(row+top_margin+6)%6][(col+left_margin+6)%6];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "309:   return 0;",
          "310: }",
          "311: #define memmem my_memmem",
          "312: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: char *my_strcasestr (char *haystack, const char *needle)",
          "305: {",
          "306:   char *c;",
          "307:   for (c = haystack; *c; c++)",
          "308:     if (!strncasecmp(c, needle, strlen(needle)))",
          "309:       return c;",
          "310:   return 0;",
          "311: }",
          "312: #define strcasestr my_strcasestr",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "575:   return 0;",
          "576: }",
          "582: unsigned CLASS getbithuff (int nbits, ushort *huff)",
          "583: {",
          "584: #ifdef LIBRAW_NOTHREADS",
          "",
          "[Removed Lines]",
          "579:    getbits(-1) initializes the buffer",
          "580:    getbits(n) where 0 <= n <= 25 returns an n-bit integer",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "591: #endif",
          "592:   unsigned c;",
          "595:     return bitbuf = vbits = reset = 0;",
          "596:   if (nbits == 0 || vbits < 0) return 0;",
          "597:   while (!reset && vbits < nbits && (c = fgetc(ifp)) != EOF &&",
          "",
          "[Removed Lines]",
          "594:   if (nbits == -1)",
          "",
          "[Added Lines]",
          "591:   if (nbits > 25) return 0;",
          "592:   if (nbits < 0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "856:     }",
          "857:   } while (tag != 0xffda);",
          "858:   if (info_only) return 1;",
          "859:   FORC(5) if (!jh->huff[c+1]) jh->huff[c+1] = jh->huff[c];",
          "860:   if (jh->sraw) {",
          "861:     FORC(4)        jh->huff[2+c] = jh->huff[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:   if (jh->clrs > 6 || !jh->huff[0]) return 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "886:   return diff;",
          "887: }",
          "958: ushort * CLASS ljpeg_row (int jrow, struct jhead *jh)",
          "959: {",
          "960:   int col, c, diff, pred, spred=0;",
          "",
          "[Removed Lines]",
          "889: #ifdef LIBRAW_LIBRARY_BUILD",
          "890: int CLASS ljpeg_diff_new (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "891: {",
          "892:   int len, diff;",
          "894:   len = bits._gethuff_lj(buf,*huff,huff+1);",
          "895:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "896:     return -32768;",
          "897:   diff = bits._getbits_lj(buf,len);",
          "898:   if ((diff & (1 << (len-1))) == 0)",
          "899:     diff -= (1 << len) - 1;",
          "900:   return diff;",
          "901: }",
          "903: int CLASS ljpeg_diff_pef (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "904: {",
          "905:   int len, diff;",
          "907:   len = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "908:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "909:     return -32768;",
          "910:   diff = bits._getbits(buf,len,zero_after_ff);",
          "911:   if ((diff & (1 << (len-1))) == 0)",
          "912:     diff -= (1 << len) - 1;",
          "913:   return diff;",
          "914: }",
          "916: ushort * CLASS ljpeg_row_new (int jrow, struct jhead *jh, LibRaw_bit_buffer& bits,LibRaw_byte_buffer* bytes)",
          "917: {",
          "918:   int col, c, diff, pred, spred=0;",
          "919:   ushort mark=0, *row[3];",
          "921:   if (jrow * jh->wide % jh->restart == 0) {",
          "922:     FORC(6) jh->vpred[c] = 1 << (jh->bits-1);",
          "923:     if (jrow) {",
          "924:         bytes->unseek2();",
          "925:         do mark = (mark << 8) + (c = bytes->get_byte());",
          "926:         while (c != EOF && mark >> 4 != 0xffd);",
          "927:     }",
          "928:     bits.reset();",
          "929:   }",
          "930:   FORC3 row[c] = jh->row + jh->wide*jh->clrs*((jrow+c) & 1);",
          "931:   for (col=0; col < jh->wide; col++)",
          "932:     FORC(jh->clrs) {",
          "933:         diff = ljpeg_diff_new (bits,bytes,jh->huff[c]);",
          "934:       if (jh->sraw && c <= jh->sraw && (col | c))",
          "935:       pred = spred;",
          "936:       else if (col) pred = row[0][-jh->clrs];",
          "937:       else     pred = (jh->vpred[c] += diff) - diff;",
          "938:       if (jrow && col) switch (jh->psv) {",
          "939:  case 1: break;",
          "940:  case 2: pred = row[1][0];     break;",
          "941:  case 3: pred = row[1][-jh->clrs];    break;",
          "942:  case 4: pred = pred +   row[1][0] - row[1][-jh->clrs];  break;",
          "943:  case 5: pred = pred + ((row[1][0] - row[1][-jh->clrs]) >> 1); break;",
          "944:  case 6: pred = row[1][0] + ((pred - row[1][-jh->clrs]) >> 1); break;",
          "945:  case 7: pred = (pred + row[1][0]) >> 1;    break;",
          "946:  default: pred = 0;",
          "947:       }",
          "948:       if ((**row = pred + diff) >> jh->bits) derror();",
          "949:       if (c <= jh->sraw) spred = **row;",
          "950:       row[0]++; row[1]++;",
          "951:     }",
          "952:   return row[2];",
          "953: }",
          "955: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "997: void CLASS lossless_jpeg_load_raw()",
          "998: {",
          "1003:   struct jhead jh;",
          "1004:   ushort *rp;",
          "1027:   if (!ljpeg_start (&jh, 0)) return;",
          "1028:   jwide = jh.wide * jh.clrs;",
          "1071:   for (jrow=0; jrow < jh.high; jrow++) {",
          "1077:     rp = ljpeg_row (jrow, &jh);",
          "1078:     if (load_flags & 1)",
          "1079:       row = jrow & 1 ? height-1-jrow/2 : jrow/2;",
          "1080:     for (jcol=0; jcol < jwide; jcol++) {",
          "1081:       val = curve[*rp++];",
          "1084:       if (cr2_slice[0]) {",
          "1085:  jidx = jrow*jwide + jcol;",
          "1086:  i = jidx / (cr2_slice[1]*jh.high);",
          "",
          "[Removed Lines]",
          "999:   int jwide, jrow, jcol, val, i, row=0, col=0;",
          "1000: #ifndef LIBRAW_LIBRARY_BUILD",
          "1001:   int jidx,j;",
          "1002: #endif",
          "1006: #ifdef LIBRAW_LIBRARY_BUILD",
          "1007:   int save_min = 0;",
          "1008:   unsigned slicesW[16],slicesWcnt=0,slices;",
          "1009:   unsigned *offset;",
          "1010:   unsigned t_y=0,t_x=0,t_s=0,slice=0,pixelsInSlice,pixno;",
          "1011:   if (!strcasecmp(make,\"KODAK\"))",
          "1012:       save_min = 1;",
          "1013: #endif",
          "1015: #ifdef LIBRAW_LIBRARY_BUILD",
          "1016:   if (cr2_slice[0]>15)",
          "1017:       throw LIBRAW_EXCEPTION_IO_EOF; // change many slices",
          "1018: #else",
          "1019:   if (cr2_slice[0]>15)",
          "1020:   {",
          "1021:       fprintf(stderr,\"Too many CR2 slices: %d\\n\",cr2_slice[0]+1);",
          "1022:       return;",
          "1023:   }",
          "1024: #endif",
          "1030: #ifdef LIBRAW_LIBRARY_BUILD",
          "1031:   if(cr2_slice[0])",
          "1032:       {",
          "1033:           for(i=0;i<cr2_slice[0];i++)",
          "1034:               slicesW[slicesWcnt++] = cr2_slice[1];",
          "1035:           slicesW[slicesWcnt++] = cr2_slice[2];",
          "1036:       }",
          "1037:   else",
          "1038:       {",
          "1040:           slicesW[slicesWcnt++] = raw_width; // safe fallback",
          "1041:       }",
          "1043:   slices = slicesWcnt * jh.high;",
          "1044:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
          "1046:   for(slice=0;slice<slices;slice++)",
          "1047:       {",
          "1048:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
          "1049:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
          "1050:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1051:           t_y++;",
          "1052:           if(t_y == jh.high)",
          "1053:               {",
          "1054:                   t_y = 0;",
          "1055:                   t_x += slicesW[t_s++];",
          "1056:               }",
          "1057:       }",
          "1058:   offset[slices] = offset[slices-1];",
          "1059:   slice = 1; // next slice",
          "1060:   pixno = offset[0];",
          "1061:   pixelsInSlice = slicesW[0];",
          "1062: #endif",
          "1064: #ifdef LIBRAW_LIBRARY_BUILD",
          "1065:   LibRaw_byte_buffer *buf=NULL;",
          "1066:   if(data_size)",
          "1067:       buf = ifp->make_byte_buffer(data_size);",
          "1068:   LibRaw_bit_buffer bits;",
          "1069: #endif",
          "1072: #ifdef LIBRAW_LIBRARY_BUILD",
          "1073:       if (buf)",
          "1074:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1075:       else",
          "1076: #endif",
          "1082: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Added Lines]",
          "930:   int jwide, jrow, jcol, val, jidx, i, j, row=0, col=0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1090:  row = jidx / cr2_slice[1+j];",
          "1091:  col = jidx % cr2_slice[1+j] + i*cr2_slice[1];",
          "1092:       }",
          "1109:       if (raw_width == 3984 && (col -= 2) < 0)",
          "1110:  col += (row--,raw_width);",
          "1113:       if (++col >= raw_width)",
          "1114:  col = (row++,0);",
          "1120:     }",
          "1121:   }",
          "1122:   ljpeg_end (&jh);",
          "1128: }",
          "1130: void CLASS canon_sraw_load_raw()",
          "",
          "[Removed Lines]",
          "1093: #else",
          "1095:       if(buf)",
          "1096:           {",
          "1097:               if(!(load_flags & 1))",
          "1098:                   row = pixno/raw_width;",
          "1099:               col = pixno % raw_width;",
          "1100:               pixno++;",
          "1101:               if (0 == --pixelsInSlice)",
          "1102:                   {",
          "1103:                       unsigned o = offset[slice++];",
          "1104:                       pixno = o & 0x0fffffff;",
          "1105:                       pixelsInSlice = slicesW[o>>28];",
          "1106:                   }",
          "1107:           }",
          "1108: #endif",
          "1111:       if (row >= 0) RAW(row,col) = val;",
          "1112: #ifndef LIBRAW_LIBRARY_BUILD",
          "1115: #else",
          "1116:       if(!buf) // 1D or 1Ds case",
          "1117:          if (++col >= raw_width)",
          "1118:             col = (row++,0);",
          "1119: #endif",
          "1123: #ifdef LIBRAW_LIBRARY_BUILD",
          "1124:   if(buf)",
          "1125:       delete buf;",
          "1126:   free(offset);",
          "1127: #endif",
          "",
          "[Added Lines]",
          "954:       if ((unsigned) row < raw_height) RAW(row,col) = val;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1135:   int v[3]={0,0,0}, ver, hue;",
          "1136:   char *cp;",
          "1139:   jwide = (jh.wide >>= 1) * jh.clrs;",
          "1148:   for (ecol=slice=0; slice <= cr2_slice[0]; slice++) {",
          "1149:     scol = ecol;",
          "1150:     ecol += cr2_slice[1] * 2 / jh.clrs;",
          "",
          "[Removed Lines]",
          "1138:   if (!ljpeg_start (&jh, 0)) return;",
          "1141: #ifdef LIBRAW_LIBRARY_BUILD",
          "1142:   if(!data_size)",
          "1143:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1144:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1145:   LibRaw_bit_buffer bits;",
          "1146: #endif",
          "",
          "[Added Lines]",
          "970:   if (!ljpeg_start (&jh, 0) || jh.clrs < 4) return;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1153:       ip = (short (*)[4]) image + row*width;",
          "1154:       for (col=scol; col < ecol; col+=2, jcol+=jh.clrs) {",
          "1155:  if ((jcol %= jwide) == 0)",
          "1161:  if (col >= width) continue;",
          "1162:  FORC (jh.clrs-2)",
          "1163:    ip[col + (c >> 1)*width + (c & 1)][0] = rp[jcol+c];",
          "",
          "[Removed Lines]",
          "1156: #ifdef LIBRAW_LIBRARY_BUILD",
          "1157:             rp = (short*) ljpeg_row_new (jrow++, &jh,bits,buf);",
          "1158: #else",
          "1159:             rp = (short *) ljpeg_row (jrow++, &jh);",
          "1160: #endif",
          "",
          "[Added Lines]",
          "981:    rp = (short *) ljpeg_row (jrow++, &jh);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1206:     }",
          "1207:     FORC3 rp[c] = CLIP(pix[c] * sraw_mul[c] >> 10);",
          "1208:   }",
          "1212:   ljpeg_end (&jh);",
          "1213:   maximum = 0x3fff;",
          "1214: }",
          "1217: void CLASS adobe_copy_pixel (unsigned row, unsigned col, ushort **rp)",
          "1218: {",
          "1219:   int c;",
          "",
          "[Removed Lines]",
          "1209: #ifdef LIBRAW_LIBRARY_BUILD",
          "1210:   delete buf;",
          "1211: #endif",
          "1216: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1231:   }",
          "1232:   if (is_raw == 2 && shot_select) (*rp)--;",
          "1233: }",
          "1257: void CLASS lossless_dng_load_raw()",
          "1258: {",
          "",
          "[Removed Lines]",
          "1234: #else",
          "1235: void CLASS adobe_copy_pixel_raw (unsigned row, unsigned col, ushort **rp)",
          "1236: {",
          "1237:   if (is_raw == 2 && shot_select) (*rp)++;",
          "1238:   if (row < raw_height && col < raw_width)",
          "1239:     RAW(row,col) = curve[**rp];",
          "1241:   if (is_raw == 2 && shot_select) (*rp)--;",
          "1242: }",
          "1243: void CLASS adobe_copy_pixel_color (unsigned row, unsigned col, ushort **rp)",
          "1244: {",
          "1245:   int c;",
          "1247:   if (is_raw == 2 && shot_select) (*rp)++;",
          "1248:   if (row < height && col < width)",
          "1249:     FORC(tiff_samples)",
          "1250:       image[row*width+col][c] = curve[(*rp)[c]];",
          "1252:   if (is_raw == 2 && shot_select) (*rp)--;",
          "1253: }",
          "1254: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1268:     jwide = jh.wide;",
          "1269:     if (filters) jwide *= jh.clrs;",
          "1270:     jwide /= is_raw;",
          "1279:     for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1280:       rp = ljpeg_row (jrow, &jh);",
          "1281:       for (jcol=0; jcol < jwide; jcol++) {",
          "",
          "[Removed Lines]",
          "1271: #ifdef LIBRAW_LIBRARY_BUILD",
          "1272:     if(!data_size)",
          "1273:         throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1274:     LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1275:     LibRaw_bit_buffer bits;",
          "1276: #endif",
          "1278: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1284:    row += 1 + (col = 0);",
          "1285:       }",
          "1286:     }",
          "1319:     fseek (ifp, save+4, SEEK_SET);",
          "1320:     if ((tcol += tile_width) >= raw_width)",
          "1321:       trow += tile_length + (tcol = 0);",
          "1322:     ljpeg_end (&jh);",
          "1326:   }",
          "1327: }",
          "",
          "[Removed Lines]",
          "1287: #else",
          "1288:     if(raw_image)",
          "1289:       {",
          "1290:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1291: #ifdef LIBRAW_LIBRARY_BUILD",
          "1292:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1293: #else",
          "1294:           rp = ljpeg_row (jrow, &jh);",
          "1295: #endif",
          "1296:           for (jcol=0; jcol < jwide; jcol++) {",
          "1297:             adobe_copy_pixel_raw (trow+row, tcol+col, &rp);",
          "1298:             if (++col >= tile_width || col >= raw_width)",
          "1299:               row += 1 + (col = 0);",
          "1300:           }",
          "1301:         }",
          "1302:       }",
          "1303:     else",
          "1304:       {",
          "1305:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1306: #ifdef LIBRAW_LIBRARY_BUILD",
          "1307:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1308: #else",
          "1309:           rp = ljpeg_row (jrow, &jh);",
          "1310: #endif",
          "1311:           for (jcol=0; jcol < jwide; jcol++) {",
          "1312:             adobe_copy_pixel_color (trow+row, tcol+col, &rp);",
          "1313:             if (++col >= tile_width || col >= raw_width)",
          "1314:               row += 1 + (col = 0);",
          "1315:           }",
          "1316:         }",
          "1317:       }",
          "1318: #endif",
          "1323: #ifdef LIBRAW_LIBRARY_BUILD",
          "1324:     delete buf;",
          "1325: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1331:   ushort *pixel, *rp;",
          "1332:   int row, col;",
          "1335:   merror (pixel, \"packed_dng_load_raw()\");",
          "1347:   for (row=0; row < raw_height; row++) {",
          "1348:     if (tiff_bps == 16)",
          "1349:       read_shorts (pixel, raw_width * tiff_samples);",
          "1350:     else {",
          "1357:       getbits(-1);",
          "1358:       for (col=0; col < raw_width * tiff_samples; col++)",
          "1359:  pixel[col] = getbits(tiff_bps);",
          "1361:     }",
          "1363:     for (rp=pixel, col=0; col < raw_width; col++)",
          "1364:       adobe_copy_pixel (row, col, &rp);",
          "1373:   }",
          "1374:   free (pixel);",
          "1379: }",
          "1381: void CLASS pentax_load_raw()",
          "",
          "[Removed Lines]",
          "1334:   pixel = (ushort *) calloc (raw_width * tiff_samples, sizeof *pixel);",
          "1337: #ifdef LIBRAW_LIBRARY_BUILD",
          "1338:   int dsz= raw_height*raw_width * tiff_samples * tiff_bps/8;",
          "1339:   LibRaw_byte_buffer *buf = NULL;",
          "1340:   if (tiff_bps != 16)",
          "1341:       {",
          "1342:           buf = ifp->make_byte_buffer(dsz);",
          "1343:       }",
          "1344:   LibRaw_bit_buffer bits;",
          "1345: #endif",
          "1351: #ifdef LIBRAW_LIBRARY_BUILD",
          "1352:         bits.reset();",
          "1353:         for (col=0; col < raw_width * tiff_samples; col++)",
          "1354:             pixel[col] = bits._getbits(buf,tiff_bps,zero_after_ff);",
          "1356: #else",
          "1360: #endif",
          "1362: #ifndef LIBRAW_LIBRARY_BUILD",
          "1365: #else",
          "1366:     if(raw_image)",
          "1367:       for (rp=pixel, col=0; col < raw_width; col++)",
          "1368:         adobe_copy_pixel_raw (row, col, &rp);",
          "1369:     else",
          "1370:       for (rp=pixel, col=0; col < raw_width; col++)",
          "1371:         adobe_copy_pixel_color (row, col, &rp);",
          "1372: #endif",
          "1375: #ifdef LIBRAW_LIBRARY_BUILD",
          "1376:     if(buf)",
          "1377:         delete buf;",
          "1378: #endif",
          "",
          "[Added Lines]",
          "1087:   pixel = (ushort *) calloc (raw_width, tiff_samples*sizeof *pixel);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1394:       huff[++i] = bit[1][c] << 8 | c;",
          "1395:   huff[0] = 12;",
          "1396:   fseek (ifp, data_offset, SEEK_SET);",
          "1404:   getbits(-1);",
          "1406:   for (row=0; row < raw_height; row++)",
          "1407:     for (col=0; col < raw_width; col++) {",
          "1411:       diff = ljpeg_diff (huff);",
          "1413:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "1414:       else    hpred[col & 1] += diff;",
          "1415:       RAW(row,col) = hpred[col & 1];",
          "1416:       if (hpred[col & 1] >> tiff_bps) derror();",
          "1417:     }",
          "1421: }",
          "1423: void CLASS nikon_load_raw()",
          "",
          "[Removed Lines]",
          "1397: #ifdef LIBRAW_LIBRARY_BUILD",
          "1398:   if(!data_size)",
          "1399:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1400:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1401:   LibRaw_bit_buffer bits;",
          "1402:   bits.reset();",
          "1403: #else",
          "1405: #endif",
          "1408: #ifdef LIBRAW_LIBRARY_BUILD",
          "1409:       diff = ljpeg_diff_pef(bits,buf,huff);",
          "1410: #else",
          "1412: #endif",
          "1418: #ifdef LIBRAW_LIBRARY_BUILD",
          "1419:   delete buf;",
          "1420: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1462:   while (curve[max-2] == curve[max-1]) max--;",
          "1463:   huff = make_decoder (nikon_tree[tree]);",
          "1464:   fseek (ifp, data_offset, SEEK_SET);",
          "1472:   getbits(-1);",
          "1474:   for (min=row=0; row < height; row++) {",
          "1475:     if (split && row == split) {",
          "1476:       free (huff);",
          "",
          "[Removed Lines]",
          "1465: #ifdef LIBRAW_LIBRARY_BUILD",
          "1466:   if(!data_size)",
          "1467:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1468:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1469:   LibRaw_bit_buffer bits;",
          "1470:   bits.reset();",
          "1471: #else",
          "1473: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1478:       max += (min = 16) << 1;",
          "1479:     }",
          "1480:     for (col=0; col < raw_width; col++) {",
          "1484:       i = gethuff(huff);",
          "1486:       len = i & 15;",
          "1487:       shl = i >> 4;",
          "1491:       diff = ((getbits(len-shl) << 1) + 1) << shl >> 1;",
          "1493:       if ((diff & (1 << (len-1))) == 0)",
          "1494:  diff -= (1 << len) - !shl;",
          "1495:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "",
          "[Removed Lines]",
          "1481: #ifdef LIBRAW_LIBRARY_BUILD",
          "1482:         i = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "1483: #else",
          "1485: #endif",
          "1488: #ifdef LIBRAW_LIBRARY_BUILD",
          "1489:       diff = ((bits._getbits(buf,len-shl,zero_after_ff) << 1) + 1) << shl >> 1;",
          "1490: #else",
          "1492: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1498:       RAW(row,col) = curve[LIM((short)hpred[col & 1],0,0x3fff)];",
          "1499:     }",
          "1500:   }",
          "1504:   free (huff);",
          "1505: }",
          "",
          "[Removed Lines]",
          "1501: #ifdef LIBRAW_LIBRARY_BUILD",
          "1502:   delete buf;",
          "1503: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1548:     int bits;",
          "1549:     char t_make[12], t_model[15];",
          "1550:   } table[] = {",
          "1556:   fseek (ifp, 3072, SEEK_SET);",
          "1557:   fread (dp, 1, 24, ifp);",
          "",
          "[Removed Lines]",
          "1551:     { 0x00, \"PENTAX\",  \"Optio 33WR\" },",
          "1552:     { 0x03, \"NIKON\",   \"E3200\" },",
          "1553:     { 0x32, \"NIKON\",   \"E3700\" },",
          "1554:     { 0x33, \"OLYMPUS\", \"C740UZ\" } };",
          "",
          "[Added Lines]",
          "1239:     { 0x00, \"Pentax\",  \"Optio 33WR\" },",
          "1240:     { 0x03, \"Nikon\",   \"E3200\" },",
          "1241:     { 0x32, \"Nikon\",   \"E3700\" },",
          "1242:     { 0x33, \"Olympus\", \"C740UZ\" } };",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1599:   int i;",
          "1600:   char *thumb;",
          "1601:   thumb_length = thumb_width*thumb_height*3;",
          "1603:   merror (thumb, \"ppm16_thumb()\");",
          "1604:   read_shorts ((ushort *) thumb, thumb_length);",
          "1605:   for (i=0; i < thumb_length; i++)",
          "",
          "[Removed Lines]",
          "1602:   thumb = (char *) calloc (thumb_length,2);",
          "",
          "[Added Lines]",
          "1290:   thumb = (char *) calloc (thumb_length, 2);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2037:   raw_image = 0;",
          "2038:   free (image);",
          "2039:   image = (ushort (*)[4])",
          "2041:   merror (image, \"sinar_4shot_load_raw()\");",
          "2042: #endif",
          "2043:   pixel = (ushort *) calloc (raw_width, sizeof *pixel);",
          "",
          "[Removed Lines]",
          "2040:  calloc ((iheight=height)*(iwidth=width), sizeof *image);",
          "",
          "[Added Lines]",
          "1728:  calloc ((iheight=height), (iwidth=width)*sizeof *image);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2062: {",
          "2063:   int row, col;",
          "2065:   for (row=0; row < height; row++)",
          "2066:     for (col=0; col < width; col++)",
          "2067:       read_shorts (image[row*width+col], 3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1753:   if (!image) return;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2070: void CLASS packed_load_raw()",
          "2071: {",
          "2073:   UINT64 bitbuf=0;",
          "2079:   if (load_flags & 1) bwide = bwide * 16 / 15;",
          "2080:   bite = 8 + (load_flags & 24);",
          "2081:   half = (raw_height+1) >> 1;",
          "",
          "[Removed Lines]",
          "2072:   int vbits=0, bwide, pwide, rbits, bite, half, irow, row, col, val, i;",
          "2076:        pwide = (bwide = raw_width) * 8 / tiff_bps;",
          "2077:   else bwide = (pwide = raw_width) * tiff_bps / 8;",
          "2078:   rbits = bwide * 8 - pwide * tiff_bps;",
          "",
          "[Added Lines]",
          "1761:   int vbits=0, bwide, rbits, bite, half, irow, row, col, val, i;",
          "1764:   bwide = raw_width * tiff_bps / 8;",
          "1765:   bwide += bwide & load_flags >> 7;",
          "1766:   rbits = bwide * 8 - raw_width * tiff_bps;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2091:  fseek (ifp, ftell(ifp) >> 3 << 2, SEEK_SET);",
          "2092:       }",
          "2093:     }",
          "2095:       for (vbits -= tiff_bps; vbits < 0; vbits += bite) {",
          "2096:  bitbuf <<= bite;",
          "2097:  for (i=0; i < bite; i+=8)",
          "2098:    bitbuf |= (unsigned) (fgetc(ifp) << i);",
          "2099:       }",
          "2100:       val = bitbuf << (64-tiff_bps-vbits) >> (64-tiff_bps);",
          "2102:       if (load_flags & 1 && (col % 10) == 9 &&",
          "2103:  fgetc(ifp) && col < width+left_margin) derror();",
          "2104:     }",
          "",
          "[Removed Lines]",
          "2094:     for (col=0; col < pwide; col++) {",
          "2101:       RAW(row,col ^ (load_flags >> 6)) = val;",
          "",
          "[Added Lines]",
          "1782:     for (col=0; col < raw_width; col++) {",
          "1789:       RAW(row,col ^ (load_flags >> 6 & 1)) = val;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2112:   int rev, dwide, row, col, c;",
          "2114:   rev = 3 * (order == 0x4949);",
          "2116:   data = (uchar *) malloc (dwide*2);",
          "2117:   merror (data, \"nokia_load_raw()\");",
          "2118:   for (row=0; row < raw_height; row++) {",
          "",
          "[Removed Lines]",
          "2115:   dwide = raw_width * 5 / 4;",
          "",
          "[Added Lines]",
          "1803:   dwide = (raw_width * 5 + 1) / 4;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2125:   maximum = 0x3ff;",
          "2126: }",
          "2128: unsigned CLASS pana_bits (int nbits)",
          "2129: {",
          "2130: #ifndef LIBRAW_NOTHREADS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1816: void CLASS canon_rmf_load_raw()",
          "1817: {",
          "1818:   int row, col, bits, orow, ocol, c;",
          "1820:   for (row=0; row < raw_height; row++)",
          "1821:     for (col=0; col < raw_width-2; col+=3) {",
          "1822:       bits = get4();",
          "1823:       FORC3 {",
          "1824:  orow = row;",
          "1825:  if ((ocol = col+c-4) < 0) {",
          "1826:    ocol += raw_width;",
          "1827:    if ((orow -= 2) < 0)",
          "1828:      orow += raw_height;",
          "1829:  }",
          "1830:  RAW(orow,ocol) = bits >> (10*c+2) & 0x3ff;",
          "1831:       }",
          "1832:     }",
          "1833:   maximum = 0x3ff;",
          "1834: }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2182:   for (i=12; i--; )",
          "2183:     FORC(2048 >> i) huff[++n] = (i+1) << 8 | i;",
          "2184:   fseek (ifp, 7, SEEK_CUR);",
          "2192:   getbits(-1);",
          "2194:   for (row=0; row < height; row++) {",
          "2195:     memset (acarry, 0, sizeof acarry);",
          "2196:     for (col=0; col < raw_width; col++) {",
          "2197:       carry = acarry[col & 1];",
          "2198:       i = 2 * (carry[2] < 3);",
          "2199:       for (nbits=2+i; (ushort) carry[0] >> (nbits+i); nbits++);",
          "2207:       low = (sign = getbits(3)) & 3;",
          "2208:       sign = sign << 29 >> 31;",
          "2209:       if ((high = getbithuff(12,huff)) == 12)",
          "2210:  high = getbits(16-nbits) >> 1;",
          "2211:       carry[0] = (high << nbits) | getbits(nbits);",
          "2213:       diff = (carry[0] ^ sign) + carry[1];",
          "2214:       carry[1] = (diff*3 + carry[1]) >> 5;",
          "2215:       carry[2] = carry[0] > 16 ? 0 : carry[2]+1;",
          "",
          "[Removed Lines]",
          "2185: #ifdef LIBRAW_LIBRARY_BUILD",
          "2186:   if(!data_size)",
          "2187:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "2188:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "2189:   LibRaw_bit_buffer bits;",
          "2190:   bits.reset();",
          "2191: #else",
          "2193: #endif",
          "2200: #ifdef LIBRAW_LIBRARY_BUILD",
          "2201:       low = (sign = bits._getbits(buf,3,zero_after_ff)) & 3;",
          "2202:       sign = sign << 29 >> 31;",
          "2203:       if ((high = bits._gethuff(buf,12,huff,zero_after_ff)) == 12)",
          "2204:           high = bits._getbits(buf,16-nbits,zero_after_ff) >> 1;",
          "2205:       carry[0] = (high << nbits) | bits._getbits(buf,nbits,zero_after_ff);",
          "2206: #else",
          "2212: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2230:       if ((RAW(row,col) = pred + ((diff << 2) | low)) >> 12) derror();",
          "2231:     }",
          "2232:   }",
          "2236: }",
          "2238: void CLASS minolta_rd175_load_raw()",
          "",
          "[Removed Lines]",
          "2233: #ifdef LIBRAW_LIBRARY_BUILD",
          "2234:   delete buf;",
          "2235: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2751:   int row, col, len, c, i, j, k, y[2][2], cb, cr, rgb[3];",
          "2752:   ushort *ip;",
          "2754:   for (row=0; row < height; row+=2)",
          "2755:     for (col=0; col < width; col+=128) {",
          "2756:       len = MIN (128, width-col);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2443:   if (!image) return;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2872:   for (n=i=0; i < 18; i++)",
          "2873:     FORC(32768 >> (tab[i] >> 8)) huff[n++] = tab[i];",
          "2884:   getbits(-1);",
          "2886:   for (col = raw_width; col--; )",
          "2887:     for (row=0; row < raw_height+1; row+=2) {",
          "2888:       if (row == raw_height) row = 1;",
          "2901:       len = getbithuff(15,huff);",
          "2902:       diff = getbits(len);",
          "2904:       if ((diff & (1 << (len-1))) == 0)",
          "2905:  diff -= (1 << len) - 1;",
          "2906:       if ((sum += diff) >> 12) derror();",
          "2907:       if (row < height) RAW(row,col) = sum;",
          "2908:     }",
          "2912: }",
          "2914: void CLASS sony_arw2_load_raw()",
          "",
          "[Removed Lines]",
          "2874: #ifdef LIBRAW_LIBRARY_BUILD",
          "2875:   LibRaw_byte_buffer *buf=NULL;",
          "2876:   if(data_size)",
          "2877:       buf = ifp->make_byte_buffer(data_size);",
          "2878:   else",
          "2879:       getbits(-1);",
          "2881:   LibRaw_bit_buffer bits;",
          "2882:   bits.reset();",
          "2883: #else",
          "2885: #endif",
          "2889: #ifdef LIBRAW_LIBRARY_BUILD",
          "2890:       if(data_size)",
          "2891:           {",
          "2892:               len = bits._gethuff(buf,15,huff,zero_after_ff);",
          "2893:               diff = bits._getbits(buf,len,zero_after_ff);",
          "2894:           }",
          "2895:       else",
          "2896:           {",
          "2897:               len = getbithuff(15,huff);",
          "2898:               diff = getbits(len);",
          "2899:           }",
          "2900: #else",
          "2903: #endif",
          "2909: #ifdef LIBRAW_LIBRARY_BUILD",
          "2910:   if(buf) delete buf;",
          "2911: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2963: #endif",
          "2964: }",
          "2966: #define HOLE(row) ((holes >> (((row) - raw_height) & 7)) & 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2629: void CLASS samsung_load_raw()",
          "2630: {",
          "2631:   int row, col, c, i, dir, op[4], len[4];",
          "2633:   order = 0x4949;",
          "2634:   for (row=0; row < raw_height; row++) {",
          "2635:     fseek (ifp, strip_offset+row*4, SEEK_SET);",
          "2636:     fseek (ifp, data_offset+get4(), SEEK_SET);",
          "2637:     ph1_bits(-1);",
          "2638:     FORC4 len[c] = row < 2 ? 7:4;",
          "2639:     for (col=0; col < raw_width; col+=16) {",
          "2640:       dir = ph1_bits(1);",
          "2641:       FORC4 op[c] = ph1_bits(2);",
          "2642:       FORC4 switch (op[c]) {",
          "2643:  case 3: len[c] = ph1_bits(4); break;",
          "2644:  case 2: len[c]--;  break;",
          "2645:  case 1: len[c]++;",
          "2646:       }",
          "2647:       for (c=0; c < 16; c+=2) {",
          "2648:  i = len[((c & 1) << 1) | (c >> 3)];",
          "2649:         RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +",
          "2650:    (dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);",
          "2651:  if (c == 14) c = -1;",
          "2652:       }",
          "2653:     }",
          "2654:   }",
          "2655: }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3129: #endif",
          "3130:   jmat = jas_matrix_create (height/2, width/2);",
          "3131:   merror (jmat, \"redcine_load_raw()\");",
          "3133:   merror (img, \"redcine_load_raw()\");",
          "3134:   FORC4 {",
          "3135:     jas_image_readcmpt (jimg, c, 0, 0, width/2, height/2, jmat);",
          "",
          "[Removed Lines]",
          "3132:   img = (ushort *) calloc ((height+2)*(width+2), 2);",
          "",
          "[Added Lines]",
          "2823:   img = (ushort *) calloc ((height+2), (width+2)*2);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3288: void CLASS foveon_dp_load_raw()",
          "3289: {",
          "3290:   unsigned c, roff[4], row, col, diff;",
          "3293:   fseek (ifp, 8, SEEK_CUR);",
          "3294:   foveon_huff (huff);",
          "",
          "[Removed Lines]",
          "3291:   ushort huff[258], vpred[2][2], hpred[2];",
          "",
          "[Added Lines]",
          "2982:   ushort huff[512], vpred[2][2], hpred[2];",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3342:    meta_data[j++] = hpred[0] >> 4;",
          "3343:    meta_data[j++] = hpred[0] << 4 | hpred[1] >> 8;",
          "3344:    meta_data[j++] = hpred[1];",
          "3346:       }",
          "3347:     }",
          "3349:     fprintf (stderr,_(\"%s has unknown CAMF type %d.\\n\"), ifname, type);",
          "3350: }",
          "3352: const char * CLASS foveon_camf_param (const char *block, const char *param)",
          "",
          "[Removed Lines]",
          "3345:         }",
          "3348:   } else",
          "",
          "[Added Lines]",
          "3036:  }",
          "3039:   }",
          "3040: #ifdef DCRAW_VERBOSE",
          "3041:    else",
          "3043: #endif",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3401:  mat[i] = sget4(dp + i*2) & 0xffff;",
          "3402:     return mat;",
          "3403:   }",
          "3404:   fprintf (stderr,_(\"%s: \\\"%s\\\" matrix not found!\\n\"), ifname, name);",
          "3405:   return 0;",
          "3406: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3098: #ifdef DCRAW_VERBOSE",
          "3100: #endif",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3488:   char str[128];",
          "3489:   const char* cp;",
          "3491:   if (verbose)",
          "3492:     fprintf (stderr,_(\"Foveon interpolation...\\n\"));",
          "3494:   foveon_load_camf();",
          "3495:   foveon_fixed (dscr, 4, \"DarkShieldColRange\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3187: #ifdef DCRAW_VERBOSE",
          "3190: #endif",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3502:  foveon_camf_param (\"IncludeBlocks\", \"ColorDQ\") ?",
          "3503:   \"ColorDQ\" : \"ColorDQCamRGB\");",
          "3504:   if (foveon_camf_param (\"IncludeBlocks\", \"ColumnFilter\"))",
          "3507:   memset (ddft, 0, sizeof ddft);",
          "3508:   if (!foveon_camf_param (\"IncludeBlocks\", \"DarkDrift\")",
          "",
          "[Removed Lines]",
          "3505:      foveon_fixed (&cfilt, 1, \"ColumnFilter\");",
          "",
          "[Added Lines]",
          "3203:    foveon_fixed (&cfilt, 1, \"ColumnFilter\");",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3516:     }",
          "3518:   if (!(cp = foveon_camf_param (\"WhiteBalanceIlluminants\", model2)))",
          "3520:     return; }",
          "3521:   foveon_fixed (cam_xyz, 9, cp);",
          "3522:   foveon_fixed (correct, 9,",
          "",
          "[Removed Lines]",
          "3519:   { fprintf (stderr,_(\"%s: Invalid white balance \\\"%s\\\"\\n\"), ifname, model2);",
          "",
          "[Added Lines]",
          "3217:   {",
          "3218: #ifdef DCRAW_VERBOSE",
          "3219:     fprintf (stderr,_(\"%s: Invalid white balance \\\"%s\\\"\\n\"), ifname, model2);",
          "3220: #endif",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3569:       ddft[0][0][i] = ddft[1][0][i] +",
          "3570:  row / (height-1.0) * (ddft[2][0][i] - ddft[1][0][i]);",
          "3571:     FORC3 black[row][c] =",
          "3573:    foveon_avg (image[row*width]+c, dscr[1], cfilt) * 3",
          "3574:    - ddft[0][c][0] ) / 4 - ddft[0][c][1];",
          "3575:   }",
          "",
          "[Removed Lines]",
          "3572:   ( foveon_avg (image[row*width]+c, dscr[0], cfilt) +",
          "",
          "[Added Lines]",
          "3273:  ( foveon_avg (image[row*width]+c, dscr[0], cfilt) +",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3794:   }",
          "3798:   merror (shrink, \"foveon_interpolate()\");",
          "3799:   for (row = height/4; row--; )",
          "3800:     for (col=0; col < width/4; col++) {",
          "",
          "[Removed Lines]",
          "3797:   shrink = (short (*)[3]) calloc ((width/4) * (height/4), sizeof *shrink);",
          "",
          "[Added Lines]",
          "3498:   shrink = (short (*)[3]) calloc ((height/4), (width/4)*sizeof *shrink);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3930: mask_set:",
          "3931:   memset (mblack, 0, sizeof mblack);",
          "3932:   for (zero=m=0; m < 8; m++)",
          "3935:  c = FC(row-top_margin,col-left_margin);",
          "3936:  mblack[c] += val = raw_image[(row)*raw_pitch/2+(col)];",
          "3937:  mblack[4+c]++;",
          "",
          "[Removed Lines]",
          "3933:     for (row=mask[m][0]; row < mask[m][2]; row++)",
          "3934:       for (col=mask[m][1]; col < mask[m][3]; col++) {",
          "",
          "[Added Lines]",
          "3634:     for (row=MAX(mask[m][0],0); row < MIN(mask[m][2],raw_height); row++)",
          "3635:       for (col=MAX(mask[m][1],0); col < MIN(mask[m][3],raw_width); col++) {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4602: #endif",
          "4603:       }",
          "4604:   }",
          "4605:   if (pre_mul[3] == 0) pre_mul[3] = colors < 4 ? pre_mul[1] : 1;",
          "4606:   dark = black;",
          "4607:   sat = maximum;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4306:   if (pre_mul[1] == 0) pre_mul[1] = 1;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4679:     if (half_size) {",
          "4680:       height = iheight;",
          "4681:       width  = iwidth;",
          "4682:     } else {",
          "4684:       merror (img, \"pre_interpolate()\");",
          "4685:       for (row=0; row < height; row++)",
          "4686:  for (col=0; col < width; col++) {",
          "",
          "[Removed Lines]",
          "4683:       img = (ushort (*)[4]) calloc (height*width, sizeof *img);",
          "",
          "[Added Lines]",
          "4384:       if (filters == 9) {",
          "4385:  for (row=0; row < 3; row++)",
          "4386:    for (col=1; col < 4; col++)",
          "4387:      if (!(image[row*width+col][0] | image[row*width+col][2]))",
          "4388:        goto break2;  break2:",
          "4389:  for ( ; row < height; row+=3)",
          "4390:    for (col=(col-1)%3+1; col < width-1; col+=3) {",
          "4391:      img = image + row*width+col;",
          "4392:      for (c=0; c < 3; c+=2)",
          "4393:        img[0][c] = (img[-1][c] + img[1][c]) >> 1;",
          "4394:    }",
          "4395:       }",
          "4397:       img = (ushort (*)[4]) calloc (height, width*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4693:     }",
          "4694:   }",
          "4695:   if (filters > 1000 && colors == 3) {",
          "4698:     else {",
          "4699:       for (row = FC(1,0) >> 1; row < height; row+=2)",
          "4700:  for (col = FC(row,1) & 1; col < width; col+=2)",
          "",
          "[Removed Lines]",
          "4696:     if (four_color_rgb && colors++)",
          "4697:       mix_green = !half_size;",
          "",
          "[Added Lines]",
          "4410:     mix_green = four_color_rgb ^ half_size;",
          "4411:     if (four_color_rgb | half_size) colors++;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "4764:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,0,3);",
          "4765: #endif",
          "4768:   border_interpolate(1);",
          "4769:   for (row=0; row < size; row++)",
          "4770:     for (col=0; col < size; col++) {",
          "",
          "[Removed Lines]",
          "4767:   if (filters == 2) size = 6;",
          "",
          "[Added Lines]",
          "4481:   if (filters == 9) size = 6;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "4844: #endif",
          "4846:   if (filters == 1) prow = pcol = 16;",
          "4848:   ip = (int *) calloc (prow*pcol, 1280);",
          "4849:   merror (ip, \"vng_interpolate()\");",
          "",
          "[Removed Lines]",
          "4847:   if (filters == 2) prow = pcol =  6;",
          "",
          "[Added Lines]",
          "4561:   if (filters == 9) prow = pcol =  6;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "5013:     }",
          "5014: }",
          "5041: {",
          "5186:     }",
          "5187:   }",
          "5188: }",
          "5252: #ifdef DCRAW_VERBOSE",
          "5254: #endif",
          "5261:       }",
          "5316:    Adaptive Homogeneity-Directed interpolation is based on",
          "5317:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "5321: void CLASS ahd_interpolate()",
          "5322: {",
          "5325:   static const int dir[4] = { -1, 1, -TS, TS };",
          "5326:   unsigned ldiff[2][4], abdiff[2][4], leps, abeps;",
          "5329:    short (*lab)[TS][TS][3], (*lix)[3];",
          "5330:    char (*homo)[TS][TS], *buffer;",
          "",
          "[Removed Lines]",
          "5016: #ifdef LIBRAW_LIBRARY_BUILD",
          "5018:    Adaptive Homogeneity-Directed interpolation is based on",
          "5019:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "5022: static float dcraw_cbrt[0x10000] = {-1.0f};",
          "5024: static inline float calc_64cbrt(float f)",
          "5025: {",
          "5026:   unsigned u;",
          "5027:   static float lower = dcraw_cbrt[0];",
          "5028:   static float upper = dcraw_cbrt[0xffff];",
          "5030:   if (f <= 0) {",
          "5031:     return lower;",
          "5032:   }",
          "5034:   u = (unsigned) f;",
          "5035:   if (u >= 0xffff) {",
          "5036:     return upper;",
          "5037:   }",
          "5038:   return dcraw_cbrt[u];",
          "5039: }",
          "5040: void CLASS ahd_interpolate_green_h_and_v(int top, int left, ushort (*out_rgb)[TS][TS][3])",
          "5042:   int row, col;",
          "5043:   int c, val;",
          "5044:   ushort (*pix)[4];",
          "5045:   const int rowlimit = MIN(top+TS, height-2);",
          "5046:   const int collimit = MIN(left+TS, width-2);",
          "5048:   for (row = top; row < rowlimit; row++) {",
          "5049:     col = left + (FC(row,left) & 1);",
          "5050:     for (c = FC(row,col); col < collimit; col+=2) {",
          "5051:       pix = image + row*width+col;",
          "5052:       val = ((pix[-1][1] + pix[0][c] + pix[1][1]) * 2",
          "5053:             - pix[-2][c] - pix[2][c]) >> 2;",
          "5054:       out_rgb[0][row-top][col-left][1] = ULIM(val,pix[-1][1],pix[1][1]);",
          "5055:       val = ((pix[-width][1] + pix[0][c] + pix[width][1]) * 2",
          "5056:             - pix[-2*width][c] - pix[2*width][c]) >> 2;",
          "5057:       out_rgb[1][row-top][col-left][1] = ULIM(val,pix[-width][1],pix[width][1]);",
          "5058:     }",
          "5059:   }",
          "5060: }",
          "5061: void CLASS ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][3], short (*out_lab)[TS][3], const float (&xyz_cam)[3][4])",
          "5062: {",
          "5063:   unsigned row, col;",
          "5064:   int c, val;",
          "5065:   ushort (*pix)[4];",
          "5066:   ushort (*rix)[3];",
          "5067:   short (*lix)[3];",
          "5068:   float xyz[3];",
          "5069:   const unsigned num_pix_per_row = 4*width;",
          "5070:   const unsigned rowlimit = MIN(top+TS-1, height-3);",
          "5071:   const unsigned collimit = MIN(left+TS-1, width-3);",
          "5072:   ushort *pix_above;",
          "5073:   ushort *pix_below;",
          "5074:   int t1, t2;",
          "5076:   for (row = top+1; row < rowlimit; row++) {",
          "5077:     pix = image + row*width + left;",
          "5078:     rix = &inout_rgb[row-top][0];",
          "5079:     lix = &out_lab[row-top][0];",
          "5081:     for (col = left+1; col < collimit; col++) {",
          "5082:       pix++;",
          "5083:       pix_above = &pix[0][0] - num_pix_per_row;",
          "5084:       pix_below = &pix[0][0] + num_pix_per_row;",
          "5085:       rix++;",
          "5086:       lix++;",
          "5088:       c = 2 - FC(row, col);",
          "5090:       if (c == 1) {",
          "5091:         c = FC(row+1,col);",
          "5092:  t1 = 2-c;",
          "5093:         val = pix[0][1] + (( pix[-1][t1] + pix[1][t1]",
          "5094:               - rix[-1][1] - rix[1][1] ) >> 1);",
          "5095:         rix[0][t1] = CLIP(val);",
          "5096:         val = pix[0][1] + (( pix_above[c] + pix_below[c]",
          "5097:               - rix[-TS][1] - rix[TS][1] ) >> 1);",
          "5098:       } else {",
          "5101:         val = rix[0][1] + (( pix_above[t1] + pix_above[t2]",
          "5102:               + pix_below[t1] + pix_below[t2]",
          "5103:               - rix[-TS-1][1] - rix[-TS+1][1]",
          "5104:               - rix[+TS-1][1] - rix[+TS+1][1] + 1) >> 2);",
          "5105:       }",
          "5106:       rix[0][c] = CLIP(val);",
          "5107:       c = FC(row,col);",
          "5108:       rix[0][c] = pix[0][c];",
          "5109:       xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "5110:       FORC3 {",
          "5115:         xyz[0] += xyz_cam[0][c] * rix[0][c];",
          "5116:         xyz[1] += xyz_cam[1][c] * rix[0][c];",
          "5117:         xyz[2] += xyz_cam[2][c] * rix[0][c];",
          "5118:       }",
          "5119:       FORC3 {",
          "5120:  xyz[c] = calc_64cbrt(xyz[c]);",
          "5121:       }",
          "5122:       lix[0][0] = (116 * xyz[1] - 16);",
          "5123:       lix[0][1] = 500 * (xyz[0] - xyz[1]);",
          "5124:       lix[0][2] = 200 * (xyz[1] - xyz[2]);",
          "5125:     }",
          "5126:   }",
          "5127: }",
          "5128: void CLASS ahd_interpolate_r_and_b_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][TS][3], short (*out_lab)[TS][TS][3], const float (&xyz_cam)[3][4])",
          "5129: {",
          "5130:   int direction;",
          "5131:   for (direction = 0; direction < 2; direction++) {",
          "5132:     ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(top, left, inout_rgb[direction], out_lab[direction], xyz_cam);",
          "5133:   }",
          "5134: }",
          "5135: void CLASS ahd_interpolate_build_homogeneity_map(int top, int left, short (*lab)[TS][TS][3], char (*out_homogeneity_map)[TS][2])",
          "5136: {",
          "5137:   int row, col;",
          "5138:   int tr, tc;",
          "5139:   int direction;",
          "5140:   int i;",
          "5141:   short (*lix)[3];",
          "5142:   short (*lixs[2])[3];",
          "5143:   short *adjacent_lix;",
          "5144:   unsigned ldiff[2][4], abdiff[2][4], leps, abeps;",
          "5145:   static const int dir[4] = { -1, 1, -TS, TS };",
          "5146:   const int rowlimit = MIN(top+TS-2, height-4);",
          "5147:   const int collimit = MIN(left+TS-2, width-4);",
          "5148:   int homogeneity;",
          "5149:   char (*homogeneity_map_p)[2];",
          "5151:   memset (out_homogeneity_map, 0, 2*TS*TS);",
          "5153:   for (row=top+2; row < rowlimit; row++) {",
          "5154:     tr = row-top;",
          "5155:     homogeneity_map_p = &out_homogeneity_map[tr][1];",
          "5156:     for (direction=0; direction < 2; direction++) {",
          "5157:       lixs[direction] = &lab[direction][tr][1];",
          "5158:     }",
          "5160:     for (col=left+2; col < collimit; col++) {",
          "5161:       tc = col-left;",
          "5162:       homogeneity_map_p++;",
          "5164:       for (direction=0; direction < 2; direction++) {",
          "5165:         lix = ++lixs[direction];",
          "5166:         for (i=0; i < 4; i++) {",
          "5167:    adjacent_lix = lix[dir[i]];",
          "5168:           ldiff[direction][i] = ABS(lix[0][0]-adjacent_lix[0]);",
          "5169:           abdiff[direction][i] = SQR(lix[0][1]-adjacent_lix[1])",
          "5170:             + SQR(lix[0][2]-adjacent_lix[2]);",
          "5171:         }",
          "5172:       }",
          "5173:       leps = MIN(MAX(ldiff[0][0],ldiff[0][1]),",
          "5174:           MAX(ldiff[1][2],ldiff[1][3]));",
          "5175:       abeps = MIN(MAX(abdiff[0][0],abdiff[0][1]),",
          "5176:           MAX(abdiff[1][2],abdiff[1][3]));",
          "5177:       for (direction=0; direction < 2; direction++) {",
          "5178:  homogeneity = 0;",
          "5179:         for (i=0; i < 4; i++) {",
          "5180:           if (ldiff[direction][i] <= leps && abdiff[direction][i] <= abeps) {",
          "5181:      homogeneity++;",
          "5182:    }",
          "5183:  }",
          "5184:  homogeneity_map_p[0][direction] = homogeneity;",
          "5185:       }",
          "5189: void CLASS ahd_interpolate_combine_homogeneous_pixels(int top, int left, ushort (*rgb)[TS][TS][3], char (*homogeneity_map)[TS][2])",
          "5190: {",
          "5191:   int row, col;",
          "5192:   int tr, tc;",
          "5193:   int i, j;",
          "5194:   int direction;",
          "5195:   int hm[2];",
          "5196:   int c;",
          "5197:   const int rowlimit = MIN(top+TS-3, height-5);",
          "5198:   const int collimit = MIN(left+TS-3, width-5);",
          "5200:   ushort (*pix)[4];",
          "5201:   ushort (*rix[2])[3];",
          "5203:   for (row=top+3; row < rowlimit; row++) {",
          "5204:     tr = row-top;",
          "5205:     pix = &image[row*width+left+2];",
          "5206:     for (direction = 0; direction < 2; direction++) {",
          "5207:       rix[direction] = &rgb[direction][tr][2];",
          "5208:     }",
          "5210:     for (col=left+3; col < collimit; col++) {",
          "5211:       tc = col-left;",
          "5212:       pix++;",
          "5213:       for (direction = 0; direction < 2; direction++) {",
          "5214:         rix[direction]++;",
          "5215:       }",
          "5217:       for (direction=0; direction < 2; direction++) {",
          "5218:         hm[direction] = 0;",
          "5219:         for (i=tr-1; i <= tr+1; i++) {",
          "5220:           for (j=tc-1; j <= tc+1; j++) {",
          "5221:             hm[direction] += homogeneity_map[i][j][direction];",
          "5222:           }",
          "5223:         }",
          "5224:       }",
          "5225:       if (hm[0] != hm[1]) {",
          "5226:         memcpy(pix[0], rix[hm[1] > hm[0]][0], 3 * sizeof(ushort));",
          "5227:       } else {",
          "5228:         FORC3 {",
          "5229:           pix[0][c] = (rix[0][0][c] + rix[1][0][c]) >> 1;",
          "5230:         }",
          "5231:       }",
          "5232:     }",
          "5233:   }",
          "5234: }",
          "5235: void CLASS ahd_interpolate()",
          "5236: {",
          "5237:   int i, j, k, top, left;",
          "5238:   float xyz_cam[3][4],r;",
          "5239:   char *buffer;",
          "5240:   ushort (*rgb)[TS][TS][3];",
          "5241:   short (*lab)[TS][TS][3];",
          "5242:   char (*homo)[TS][2];",
          "5243:   int terminate_flag = 0;",
          "5245:   if(dcraw_cbrt[0]<-0.1){",
          "5246:       for (i=0x10000-1; i >=0; i--) {",
          "5247:           r = i / 65535.0;",
          "5248:           dcraw_cbrt[i] = 64.0*(r > 0.008856 ? pow((double)r,1/3.0) : 7.787*r + 16/116.0);",
          "5249:       }",
          "5250:   }",
          "5253:   if (verbose) fprintf (stderr,_(\"AHD interpolation...\\n\"));",
          "5256:   for (i=0; i < 3; i++) {",
          "5257:     for (j=0; j < colors; j++) {",
          "5258:       xyz_cam[i][j] = 0;",
          "5259:       for (k=0; k < 3; k++) {",
          "5260:         xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "5262:     }",
          "5263:   }",
          "5265:   border_interpolate(5);",
          "5267: #ifdef LIBRAW_LIBRARY_BUILD",
          "5268: #ifdef LIBRAW_USE_OPENMP",
          "5269: #pragma omp parallel private(buffer,rgb,lab,homo,top,left,i,j,k) shared(xyz_cam,terminate_flag)",
          "5270: #endif",
          "5271: #endif",
          "5272:   {",
          "5274:     merror (buffer, \"ahd_interpolate()\");",
          "5275:     rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "5276:     lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);",
          "5277:     homo = (char  (*)[TS][2])    (buffer + 24*TS*TS);",
          "5279: #ifdef LIBRAW_LIBRARY_BUILD",
          "5280: #ifdef LIBRAW_USE_OPENMP",
          "5281: #pragma omp for schedule(dynamic)",
          "5282: #endif",
          "5283: #endif",
          "5284:     for (top=2; top < height-5; top += TS-6){",
          "5285: #ifdef LIBRAW_LIBRARY_BUILD",
          "5286: #ifdef LIBRAW_USE_OPENMP",
          "5287:         if(0== omp_get_thread_num())",
          "5288: #endif",
          "5289:            if(callbacks.progress_cb) {",
          "5290:                int rr = (*callbacks.progress_cb)(callbacks.progresscb_data,LIBRAW_PROGRESS_INTERPOLATE,top-2,height-7);",
          "5291:                if(rr)",
          "5292:                    terminate_flag = 1;",
          "5293:            }",
          "5294: #endif",
          "5295:         for (left=2; !terminate_flag && (left < width-5); left += TS-6) {",
          "5296:             ahd_interpolate_green_h_and_v(top, left, rgb);",
          "5297:             ahd_interpolate_r_and_b_and_convert_to_cielab(top, left, rgb, lab, xyz_cam);",
          "5298:             ahd_interpolate_build_homogeneity_map(top, left, lab, homo);",
          "5299:             ahd_interpolate_combine_homogeneous_pixels(top, left, rgb, homo);",
          "5300:       }",
          "5301:     }",
          "5302:     free (buffer);",
          "5303:   }",
          "5304: #ifdef LIBRAW_LIBRARY_BUILD",
          "5305:   if(terminate_flag)",
          "5306:       throw LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK;",
          "5307: #endif",
          "5308: }",
          "5312: #undef TS",
          "5314: #else",
          "5323:   int i, j, k, top, left, row, col, tr, tc, c, d, val, hm[2];",
          "5324:   ushort (*pix)[4], (*rix)[3];",
          "5327:   float r, cbrt[0x10000], xyz[3], xyz_cam[3][4];",
          "5328:   ushort (*rgb)[TS][TS][3];",
          "",
          "[Added Lines]",
          "4730: void CLASS cielab (ushort rgb[3], short lab[3])",
          "4732:   int c, i, j, k;",
          "4733:   float r, xyz[3];",
          "4734: #ifdef LIBRAW_NOTHREADS",
          "4735:   static float cbrt[0x10000], xyz_cam[3][4];",
          "4736: #else",
          "4737: #define cbrt tls->ahd_data.cbrt",
          "4738: #define xyz_cam tls->ahd_data.xyz_cam",
          "4739: #endif",
          "4741:   if (!rgb) {",
          "4742: #ifndef LIBRAW_NOTHREADS",
          "4743:     if(cbrt[0] < -1.0f)",
          "4744: #endif",
          "4745:     for (i=0; i < 0x10000; i++) {",
          "4746:       r = i / 65535.0;",
          "4747:       cbrt[i] = r > 0.008856 ? pow(r,1/3.0) : 7.787*r + 16/116.0;",
          "4749:     for (i=0; i < 3; i++)",
          "4750:       for (j=0; j < colors; j++)",
          "4751:  for (xyz_cam[i][j] = k=0; k < 3; k++)",
          "4752:    xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "4753:     return;",
          "4755:   xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "4756:   FORCC {",
          "4757:     xyz[0] += xyz_cam[0][c] * rgb[c];",
          "4758:     xyz[1] += xyz_cam[1][c] * rgb[c];",
          "4759:     xyz[2] += xyz_cam[2][c] * rgb[c];",
          "4760:   }",
          "4761:   xyz[0] = cbrt[CLIP((int) xyz[0])];",
          "4762:   xyz[1] = cbrt[CLIP((int) xyz[1])];",
          "4763:   xyz[2] = cbrt[CLIP((int) xyz[2])];",
          "4764:   lab[0] = 64 * (116 * xyz[1] - 16);",
          "4765:   lab[1] = 64 * 500 * (xyz[0] - xyz[1]);",
          "4766:   lab[2] = 64 * 200 * (xyz[1] - xyz[2]);",
          "4767: #ifndef LIBRAW_NOTHREADS",
          "4768: #undef cbrt",
          "4769: #undef xyz_cam",
          "4770: #endif",
          "4774: #define fcol(row,col) xtrans[(row+top_margin+6)%6][(col+left_margin+6)%6]",
          "4777:    Frank Markesteijn's algorithm for Fuji X-Trans sensors",
          "4779: void CLASS xtrans_interpolate (int passes)",
          "4780: {",
          "4781:   int c, d, f, g, h, i, v, ng, row, col, top, left, mrow, mcol;",
          "4782:   int val, ndir, pass, hm[8], avg[4], color[3][8];",
          "4783:   static const short orth[12] = { 1,0,0,1,-1,0,0,-1,1,0,0,1 },",
          "4784:  patt[2][16] = { { 0,1,0,-1,2,0,-1,0,1,1,1,-1,0,0,0,0 },",
          "4785:    { 0,1,0,-2,1,0,-2,0,1,1,-2,-2,1,-1,-1,1 } },",
          "4786:  dir[4] = { 1,TS,TS+1,TS-1 };",
          "4787:   short allhex[3][3][2][8], *hex;",
          "4788:   ushort min, max, sgrow, sgcol;",
          "4789:   ushort (*rgb)[TS][TS][3], (*rix)[3], (*pix)[4];",
          "4790:    short (*lab)    [TS][3], (*lix)[3];",
          "4791:    float (*drv)[TS][TS], diff[6], tr;",
          "4792:    char (*homo)[TS][TS], *buffer;",
          "4795:   if (verbose)",
          "4796:     fprintf (stderr,_(\"%d-pass X-Trans interpolation...\\n\"), passes);",
          "4799:   cielab (0,0);",
          "4800:   border_interpolate(6);",
          "4801:   ndir = 4 << (passes > 1);",
          "4802:   buffer = (char *) malloc (TS*TS*(ndir*11+6));",
          "4803:   merror (buffer, \"xtrans_interpolate()\");",
          "4804:   rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "4805:   lab  = (short (*)    [TS][3])(buffer + TS*TS*(ndir*6));",
          "4806:   drv  = (float (*)[TS][TS])   (buffer + TS*TS*(ndir*6+6));",
          "4807:   homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));",
          "4810:   for (row=0; row < 3; row++)",
          "4811:     for (col=0; col < 3; col++)",
          "4812:       for (ng=d=0; d < 10; d+=2) {",
          "4813:  g = fcol(row,col) == 1;",
          "4814:  if (fcol(row+orth[d],col+orth[d+2]) == 1) ng=0; else ng++;",
          "4815:  if (ng == 4) { sgrow = row; sgcol = col; }",
          "4816:  if (ng == g+1) FORC(8) {",
          "4817:    v = orth[d  ]*patt[g][c*2] + orth[d+1]*patt[g][c*2+1];",
          "4818:    h = orth[d+2]*patt[g][c*2] + orth[d+3]*patt[g][c*2+1];",
          "4819:    allhex[row][col][0][c^(g*2 & d)] = h + v*width;",
          "4820:    allhex[row][col][1][c^(g*2 & d)] = h + v*TS;",
          "4821:  }",
          "4825:   for (row=2; row < height-2; row++)",
          "4826:     for (min=~(max=0), col=2; col < width-2; col++) {",
          "4827:       if (fcol(row,col) == 1 && (min=~(max=0))) continue;",
          "4828:       pix = image + row*width + col;",
          "4829:       hex = allhex[row % 3][col % 3][0];",
          "4830:       if (!max) FORC(6) {",
          "4831:  val = pix[hex[c]][1];",
          "4832:  if (min > val) min = val;",
          "4833:  if (max < val) max = val;",
          "4834:       }",
          "4835:       pix[0][1] = min;",
          "4836:       pix[0][3] = max;",
          "4837:       switch ((row-sgrow) % 3) {",
          "4838:  case 1: if (row < height-3) { row++; col--; } break;",
          "4839:  case 2: if ((min=~(max=0)) && (col+=2) < width-3 && row > 2) row--;",
          "4840:       }",
          "4841:     }",
          "4843:   for (top=3; top < height-19; top += TS-16)",
          "4844:     for (left=3; left < width-19; left += TS-16) {",
          "4845:       mrow = MIN (top+TS, height-3);",
          "4846:       mcol = MIN (left+TS, width-3);",
          "4847:       for (row=top; row < mrow; row++)",
          "4848:  for (col=left; col < mcol; col++)",
          "4849:    memcpy (rgb[0][row-top][col-left], image[row*width+col], 6);",
          "4850:       FORC3 memcpy (rgb[c+1], rgb[0], sizeof *rgb);",
          "4853:       for (row=top; row < mrow; row++)",
          "4854:  for (col=left; col < mcol; col++) {",
          "4855:    if ((f = fcol(row,col)) == 1) continue;",
          "4856:    pix = image + row*width + col;",
          "4857:    hex = allhex[row % 3][col % 3][0];",
          "4858:    color[1][0] = 174 * (pix[  hex[1]][1] + pix[  hex[0]][1]) -",
          "4859:     46 * (pix[2*hex[1]][1] + pix[2*hex[0]][1]);",
          "4860:    color[1][1] = 223 *  pix[  hex[3]][1] + pix[  hex[2]][1] * 33 +",
          "4861:     92 * (pix[      0 ][f] - pix[ -hex[2]][f]);",
          "4862:    FORC(2) color[1][2+c] =",
          "4863:   164 * pix[hex[4+c]][1] + 92 * pix[-2*hex[4+c]][1] + 33 *",
          "4864:   (2*pix[0][f] - pix[3*hex[4+c]][f] - pix[-3*hex[4+c]][f]);",
          "4865:    FORC4 rgb[c^!((row-sgrow) % 3)][row-top][col-left][1] =",
          "4866:   LIM(color[1][c] >> 8,pix[0][1],pix[0][3]);",
          "4867:  }",
          "4869:       for (pass=0; pass < passes; pass++) {",
          "4870:  if (pass == 1)",
          "4871:    memcpy (rgb+=4, buffer, 4*sizeof *rgb);",
          "4874:  if (pass) {",
          "4875:    for (row=top+2; row < mrow-2; row++)",
          "4876:      for (col=left+2; col < mcol-2; col++) {",
          "4877:        if ((f = fcol(row,col)) == 1) continue;",
          "4878:        pix = image + row*width + col;",
          "4879:        hex = allhex[row % 3][col % 3][1];",
          "4880:        for (d=3; d < 6; d++) {",
          "4881:   rix = &rgb[(d-2)^!((row-sgrow) % 3)][row-top][col-left];",
          "4882:   val = rix[-2*hex[d]][1] + 2*rix[hex[d]][1]",
          "4883:       - rix[-2*hex[d]][f] - 2*rix[hex[d]][f] + 3*rix[0][f];",
          "4884:   rix[0][1] = LIM(val/3,pix[0][1],pix[0][3]);",
          "4885:        }",
          "4886:      }",
          "4887:  }",
          "4890:  for (row=(top-sgrow+4)/3*3+sgrow; row < mrow-2; row+=3)",
          "4891:    for (col=(left-sgcol+4)/3*3+sgcol; col < mcol-2; col+=3) {",
          "4892:      rix = &rgb[0][row-top][col-left];",
          "4893:      h = fcol(row,col+1);",
          "4894:      memset (diff, 0, sizeof diff);",
          "4895:      for (i=1, d=0; d < 6; d++, i^=TS^1, h^=2) {",
          "4896:        for (c=0; c < 2; c++, h^=2) {",
          "4897:   g = 2*rix[0][1] - rix[i<<c][1] - rix[-i<<c][1];",
          "4898:   color[h][d] = g + rix[i<<c][h] + rix[-i<<c][h];",
          "4899:   if (d > 1)",
          "4900:     diff[d] += SQR (rix[i<<c][1] - rix[-i<<c][1]",
          "4901:     - rix[i<<c][h] + rix[-i<<c][h]) + SQR(g);",
          "4902:        }",
          "4903:        if (d > 1 && (d & 1))",
          "4904:   if (diff[d-1] < diff[d])",
          "4905:     FORC(2) color[c*2][d] = color[c*2][d-1];",
          "4906:        if (d < 2 || (d & 1)) {",
          "4907:   FORC(2) rix[0][c*2] = CLIP(color[c*2][d]/2);",
          "4908:   rix += TS*TS;",
          "4909:        }",
          "4910:      }",
          "4911:    }",
          "4914:  for (row=top+1; row < mrow-1; row++)",
          "4915:    for (col=left+1; col < mcol-1; col++) {",
          "4916:      if ((f = 2-fcol(row,col)) == 1) continue;",
          "4917:      rix = &rgb[0][row-top][col-left];",
          "4918:      i = (row-sgrow) % 3 ? TS:1;",
          "4919:      for (d=0; d < 4; d++, rix += TS*TS)",
          "4920:        rix[0][f] = CLIP((rix[i][f] + rix[-i][f] +",
          "4921:     2*rix[0][1] - rix[i][1] - rix[-i][1])/2);",
          "4922:    }",
          "4925:  for (row=top+2; row < mrow-2; row++) if ((row-sgrow) % 3)",
          "4926:    for (col=left+2; col < mcol-2; col++) if ((col-sgcol) % 3) {",
          "4927:      rix = &rgb[0][row-top][col-left];",
          "4928:      hex = allhex[row % 3][col % 3][1];",
          "4929:      for (d=0; d < ndir; d+=2, rix += TS*TS)",
          "4930:        if (hex[d] + hex[d+1]) {",
          "4931:   g = 3*rix[0][1] - 2*rix[hex[d]][1] - rix[hex[d+1]][1];",
          "4932:   for (c=0; c < 4; c+=2) rix[0][c] =",
          "4933:    CLIP((g + 2*rix[hex[d]][c] + rix[hex[d+1]][c])/3);",
          "4934:        } else {",
          "4935:   g = 2*rix[0][1] - rix[hex[d]][1] - rix[hex[d+1]][1];",
          "4936:   for (c=0; c < 4; c+=2) rix[0][c] =",
          "4937:    CLIP((g + rix[hex[d]][c] + rix[hex[d+1]][c])/2);",
          "4938:        }",
          "4939:    }",
          "4940:       }",
          "4941:       rgb = (ushort(*)[TS][TS][3]) buffer;",
          "4942:       mrow -= top;",
          "4943:       mcol -= left;",
          "4946:       for (d=0; d < ndir; d++) {",
          "4947:  for (row=2; row < mrow-2; row++)",
          "4948:    for (col=2; col < mcol-2; col++)",
          "4949:      cielab (rgb[d][row][col], lab[row][col]);",
          "4950:  for (f=dir[d & 3],row=3; row < mrow-3; row++)",
          "4951:    for (col=3; col < mcol-3; col++) {",
          "4952:      lix = &lab[row][col];",
          "4953:      g = 2*lix[0][0] - lix[f][0] - lix[-f][0];",
          "4954:      drv[d][row][col] = SQR(g)",
          "4955:        + SQR((2*lix[0][1] - lix[f][1] - lix[-f][1] + g*500/232))",
          "4956:        + SQR((2*lix[0][2] - lix[f][2] - lix[-f][2] - g*500/580));",
          "4957:    }",
          "4958:       }",
          "4961:       memset(homo, 0, ndir*TS*TS);",
          "4962:       for (row=4; row < mrow-4; row++)",
          "4963:  for (col=4; col < mcol-4; col++) {",
          "4964:    for (tr=FLT_MAX, d=0; d < ndir; d++)",
          "4965:      if (tr > drv[d][row][col])",
          "4966:   tr = drv[d][row][col];",
          "4967:    tr *= 8;",
          "4968:    for (d=0; d < ndir; d++)",
          "4969:      for (v=-1; v <= 1; v++)",
          "4970:        for (h=-1; h <= 1; h++)",
          "4971:   if (drv[d][row+v][col+h] <= tr)",
          "4972:     homo[d][row][col]++;",
          "4973:  }",
          "4976:       if (height-top < TS+4) mrow = height-top+2;",
          "4977:       if (width-left < TS+4) mcol = width-left+2;",
          "4978:       for (row = MIN(top,8); row < mrow-8; row++)",
          "4979:  for (col = MIN(left,8); col < mcol-8; col++) {",
          "4980:    for (d=0; d < ndir; d++)",
          "4981:      for (hm[d]=0, v=-2; v <= 2; v++)",
          "4982:        for (h=-2; h <= 2; h++)",
          "4983:   hm[d] += homo[d][row+v][col+h];",
          "4984:    for (d=0; d < ndir-4; d++)",
          "4985:      if (hm[d] < hm[d+4]) hm[d  ] = 0; else",
          "4986:      if (hm[d] > hm[d+4]) hm[d+4] = 0;",
          "4987:    for (max=hm[0],d=1; d < ndir; d++)",
          "4988:      if (max < hm[d]) max = hm[d];",
          "4989:    max -= max >> 3;",
          "4990:    memset (avg, 0, sizeof avg);",
          "4991:    for (d=0; d < ndir; d++)",
          "4992:      if (hm[d] >= max) {",
          "4993:        FORC3 avg[c] += rgb[d][row][col][c];",
          "4994:        avg[3]++;",
          "4995:      }",
          "4996:    FORC3 image[(row+top)*width+col+left][c] = avg[c]/avg[3];",
          "4997:  }",
          "4998:     }",
          "4999:   free(buffer);",
          "5000: }",
          "5001: #undef fcol",
          "5009:   int i, j, top, left, row, col, tr, tc, c, d, val, hm[2];",
          "5012:   ushort (*rgb)[TS][TS][3], (*rix)[3], (*pix)[4];",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "5333:   if (verbose) fprintf (stderr,_(\"AHD interpolation...\\n\"));",
          "5334: #endif",
          "5345:   border_interpolate(5);",
          "5347:   merror (buffer, \"ahd_interpolate()\");",
          "5348:   rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "5349:   lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);",
          "",
          "[Removed Lines]",
          "5336:   for (i=0; i < 0x10000; i++) {",
          "5337:     r = i / 65535.0;",
          "5338:     cbrt[i] = r > 0.008856 ? pow((double)r,(double)(1/3.0)) : 7.787*r + 16/116.0;",
          "5339:   }",
          "5340:   for (i=0; i < 3; i++)",
          "5341:     for (j=0; j < colors; j++)",
          "5342:       for (xyz_cam[i][j] = k=0; k < 3; k++)",
          "5343:  xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "",
          "[Added Lines]",
          "5020:   cielab (0,0);",
          "5022:   buffer = (char *) malloc (26*TS*TS);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "5353:     for (left=2; left < width-5; left += TS-6) {",
          "5357:  col = left + (FC(row,left) & 1);",
          "5358:  for (c = FC(row,col); col < left+TS && col < width-2; col+=2) {",
          "5359:    pix = image + row*width+col;",
          "",
          "[Removed Lines]",
          "5356:       for (row = top; row < top+TS && row < height-2; row++) {",
          "",
          "[Added Lines]",
          "5032:       for (row=top; row < top+TS && row < height-2; row++) {",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "5387:      rix[0][c] = CLIP(val);",
          "5388:      c = FC(row,col);",
          "5389:      rix[0][c] = pix[0][c];",
          "5402:    }",
          "5404:       memset (homo, 0, 2*TS*TS);",
          "",
          "[Removed Lines]",
          "5390:      xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "5391:      FORCC {",
          "5392:        xyz[0] += xyz_cam[0][c] * rix[0][c];",
          "5393:        xyz[1] += xyz_cam[1][c] * rix[0][c];",
          "5394:        xyz[2] += xyz_cam[2][c] * rix[0][c];",
          "5395:      }",
          "5396:      xyz[0] = cbrt[CLIP((int) xyz[0])];",
          "5397:      xyz[1] = cbrt[CLIP((int) xyz[1])];",
          "5398:      xyz[2] = cbrt[CLIP((int) xyz[2])];",
          "5399:      lix[0][0] = 64 * (116 * xyz[1] - 16);",
          "5400:      lix[0][1] = 64 * 500 * (xyz[0] - xyz[1]);",
          "5401:      lix[0][2] = 64 * 200 * (xyz[1] - xyz[2]);",
          "",
          "[Added Lines]",
          "5067:      cielab (rix[0],lix[0]);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "5444:   free (buffer);",
          "5445: }",
          "5446: #undef TS",
          "5449: void CLASS median_filter()",
          "5450: {",
          "",
          "[Removed Lines]",
          "5447: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "5544:     if (pre_mul[kc] < pre_mul[c]) kc = c;",
          "5545:   high = height / SCALE;",
          "5546:   wide =  width / SCALE;",
          "5548:   merror (map, \"recover_highlights()\");",
          "5549:   FORCC if (c != kc) {",
          "5550: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "5547:   map = (float *) calloc (high*wide, sizeof *map);",
          "",
          "[Added Lines]",
          "5212:   map = (float *) calloc (high, wide*sizeof *map);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "5760:       shot_order = get4();",
          "5761:     if (tag == 9 && !strcmp(make,\"Canon\"))",
          "5762:       fread (artist, 64, 1, ifp);",
          "5767:     if (tag == 0xd && type == 7 && get2() == 0xaaaa) {",
          "5768:       for (c=i=2; (ushort) c != 0xbbbb && i < len; i++)",
          "5769:  c = c << 8 | fgetc(ifp);",
          "",
          "[Removed Lines]",
          "5763:     if (tag == 0xc && len == 4) {",
          "5764:       cam_mul[0] = getreal(type);",
          "5765:       cam_mul[2] = getreal(type);",
          "5766:     }",
          "",
          "[Added Lines]",
          "5428:     if (tag == 0xc && len == 4)",
          "5429:       FORC3 cam_mul[(c << 1 | c >> 1) & 3] = getreal(type);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "5913:     }",
          "5914:     if ((tag | 0x70) == 0x2070 && type == 4)",
          "5915:       fseek (ifp, get4()+base, SEEK_SET);",
          "5918:     if (tag == 0x2020)",
          "5919:       parse_thumb_note (base, 257, 258);",
          "5920:     if (tag == 0x2040)",
          "",
          "[Removed Lines]",
          "5916:     if (tag == 0x2010 && type != 7)",
          "5917:       load_raw = &CLASS olympus_load_raw;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "6185:       case 5:   width  = get2();  break;",
          "6186:       case 6:   height = get2();  break;",
          "6187:       case 7:   width += get2();  break;",
          "6189:       case 17: case 18:",
          "6190:  if (type == 3 && len == 1)",
          "6191:    cam_mul[(tag-17)*2] = get2() / 256.0;",
          "",
          "[Removed Lines]",
          "6188:       case 9:  filters = get2();  break;",
          "",
          "[Added Lines]",
          "5849:       case 9:   if ((i = get2())) filters = i;  break;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "6222:  break;",
          "6223:       case 61446:",
          "6224:  raw_height = 0;",
          "6225:  load_raw = &CLASS packed_load_raw;",
          "6227:  break;",
          "6229:  tiff_ifd[ifd].comp = getint(type);",
          "",
          "[Removed Lines]",
          "6226:  load_flags = get4() && (filters=0x16161616) ? 24:80;",
          "",
          "[Added Lines]",
          "5886:  if (tiff_ifd[ifd].bps > 12) break;",
          "5888:  load_flags = get4() ? 24:80;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "6363:  if ((plen=len) > 16) plen = 16;",
          "6364:  fread (cfa_pat, 1, plen, ifp);",
          "6366:    colors += !(cfa & (1 << cfa_pat[i]));",
          "6367:    cfa |= 1 << cfa_pat[i];",
          "6368:  }",
          "",
          "[Removed Lines]",
          "6365:  for (colors=cfa=i=0; i < plen; i++) {",
          "",
          "[Added Lines]",
          "6027:  for (colors=cfa=i=0; i < plen && colors < 4; i++) {",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "6428:    FORC3 rgb_cam[i][c] = getreal(type);",
          "6429:  }",
          "6430:  break;",
          "6432:  strcpy (make, \"Imacon\");",
          "6433:  data_offset = ftell(ifp);",
          "6434:  ima_len = len;",
          "6436:  break;",
          "6437:       case 46279:",
          "6438:  if (!ima_len) break;",
          "",
          "[Removed Lines]",
          "6435:         printf(\"Data len: %d\\n\",ima_len);",
          "",
          "[Added Lines]",
          "6093:       case 40976:",
          "6094:  strip_offset = get4();",
          "6095:  load_raw = &CLASS samsung_load_raw;",
          "6096:  break;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "6510:  cdesc[c] = 0;",
          "6511:  for (i=16; i--; )",
          "6512:    filters = filters << 2 | tab[cfa_pat[i % plen]];",
          "6513:  break;",
          "6515:  if (get2() == 2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6178:  filters -= !filters;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "6529:  blrr = blrc = 2;",
          "6531:  black = getreal(type);",
          "6533:  dblack[0] = black;",
          "6534:  dblack[1] = (blrc == 2) ? getreal(type):dblack[0];",
          "6535:  dblack[2] = (blrr == 2) ? getreal(type):dblack[0];",
          "",
          "[Removed Lines]",
          "6532:  if (!filters || !~filters) break;",
          "",
          "[Added Lines]",
          "6198:  if ((unsigned)(filters+1) < 1000) break;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "6723:       case 32770:",
          "6724:       case 32773: goto slr;",
          "6725:       case 0:  case 1:",
          "6726:  if (tiff_ifd[raw].bytes*5 == raw_width*raw_height*8) {",
          "6727:    load_flags = 81;",
          "6728:    tiff_bps = 12;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6392:  if (!strncmp(make,\"OLYMPUS\",7) &&",
          "6393:   tiff_ifd[raw].bytes*2 == raw_width*raw_height*3)",
          "6394:    load_flags = 24;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "6733:        load_flags = 6;",
          "6734:      load_raw = &CLASS packed_load_raw;  break;",
          "6735:    case 14: load_flags = 0;",
          "6737:  }",
          "6738:  break;",
          "6739:       case 6:  case 7:  case 99:",
          "",
          "[Removed Lines]",
          "6736:    case 16: load_raw = &CLASS unpacked_load_raw;  break;",
          "",
          "[Added Lines]",
          "6405:    case 16: load_raw = &CLASS unpacked_load_raw;",
          "6406:      if (!strncmp(make,\"OLYMPUS\",7) &&",
          "6407:    tiff_ifd[raw].bytes*7 > raw_width*raw_height)",
          "6408:        load_raw = &CLASS olympus_load_raw;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "6750:    order = 0x4d4d;",
          "6751:  } else",
          "6752:    load_raw = &CLASS nikon_load_raw;   break;",
          "6755:       case 65535:",
          "6756:  load_raw = &CLASS pentax_load_raw;   break;",
          "6757:       case 65000:",
          "",
          "[Removed Lines]",
          "6753:       case 34892:",
          "6754:  load_raw = &CLASS lossy_dng_load_raw;   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "6760:    case 6: load_raw = &CLASS kodak_ycbcr_load_raw; filters = 0;  break;",
          "6761:    case 32803: load_raw = &CLASS kodak_65000_load_raw;",
          "6762:  }",
          "6764:       default: is_raw = 0;",
          "6765:     }",
          "6766:   if (!dng_version)",
          "6769:    tiff_compress != 32769 && tiff_compress != 32770)",
          "6771:    !strstr(model2,\"DEBUG RAW\")))",
          "6772:       is_raw = 0;",
          "6773:   for (i=0; i < tiff_nifds; i++)",
          "6774:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
          "6777:  && tiff_ifd[i].comp != 34892) {",
          "6778:       thumb_width  = tiff_ifd[i].t_width;",
          "6779:       thumb_height = tiff_ifd[i].t_height;",
          "",
          "[Removed Lines]",
          "6763:       case 32867: break;",
          "6767:     if ( (tiff_samples == 3 && tiff_ifd[raw].bytes &&",
          "6768:    tiff_bps != 14 && tiff_bps != 2048 &&",
          "6770:       || (tiff_bps == 8 && !strstr(make,\"KODAK\") && !strstr(make,\"Kodak\") &&",
          "6775:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
          "6776:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
          "",
          "[Added Lines]",
          "6433:       case 32867: case 34892: break;",
          "6437:     if ( (tiff_samples == 3 && tiff_ifd[raw].bytes && tiff_bps != 14 &&",
          "6439:       || (tiff_bps == 8 && !strcasestr(make,\"Kodak\") &&",
          "6444:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / (SQR(tiff_ifd[i].bps)+1) >",
          "6445:        thumb_width *       thumb_height / (SQR(thumb_misc)+1)",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "6974:    Parse a CIFF file, better known as Canon CRW format.",
          "6977: {",
          "6978:   int tboff, nrecs, c, type, len, save, wbi=-1;",
          "6979:   ushort key[] = { 0x410, 0x45f3 };",
          "",
          "[Removed Lines]",
          "6976: void CLASS parse_ciff (int offset, int length)",
          "",
          "[Added Lines]",
          "6645: void CLASS parse_ciff (int offset, int length, int depth)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "6982:   tboff = get4() + offset;",
          "6983:   fseek (ifp, tboff, SEEK_SET);",
          "6984:   nrecs = get2();",
          "6986:   while (nrecs--) {",
          "6987:     type = get2();",
          "6988:     len  = get4();",
          "6989:     save = ftell(ifp) + 4;",
          "6990:     fseek (ifp, offset+get4(), SEEK_SET);",
          "6991:     if ((((type >> 8) + 8) | 8) == 0x38)",
          "6994:     if (type == 0x0810)",
          "6995:       fread (artist, 64, 1, ifp);",
          "6996:     if (type == 0x080a) {",
          "",
          "[Removed Lines]",
          "6985:   if (nrecs > 100) return;",
          "",
          "[Added Lines]",
          "6654:   if ((nrecs | depth) > 127) return;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "6999:       fread (model, 64, 1, ifp);",
          "7000:     }",
          "7001:     if (type == 0x1810) {",
          "7003:       flip = get4();",
          "7004:     }",
          "",
          "[Removed Lines]",
          "7002:       fseek (ifp, 12, SEEK_CUR);",
          "",
          "[Added Lines]",
          "6670:       width = get4();",
          "6671:       height = get4();",
          "6672:       pixel_aspect = int_to_float(get4());",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "7234:     } else if (tag == 0x130) {",
          "7235:       fuji_layout = fgetc(ifp) >> 7;",
          "7236:       fuji_width = !(fgetc(ifp) & 8);",
          "7237:     } else if (tag == 0x2ff0) {",
          "7238:       FORC4 cam_mul[c ^ 1] = get2();",
          "7239:     } else if (tag == 0xc000) {",
          "7240:       c = order;",
          "7241:       order = 0x4949;",
          "7243:       height = get4();",
          "7244:       order = c;",
          "7245:     }",
          "",
          "[Removed Lines]",
          "7242:       if ((width = get4()) > 10000) width = get4();",
          "",
          "[Added Lines]",
          "6907:     } else if (tag == 0x131) {",
          "6908:       filters = 9;",
          "6909:       FORC(36) xtrans[0][35-c] = fgetc(ifp) & 3;",
          "6915:       if ((tag = get4()) > 10000) tag = get4();",
          "6916:       width = tag;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "7268:     order = get2();",
          "7269:     hlen  = get4();",
          "7272:     if (parse_tiff (save+6)) apply_tiff();",
          "7273:     fseek (ifp, save+len, SEEK_SET);",
          "7274:   }",
          "",
          "[Removed Lines]",
          "7271:       parse_ciff (save+hlen, len-hlen);",
          "",
          "[Added Lines]",
          "6945:       parse_ciff (save+hlen, len-hlen, 0);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "7462:    raw_width  = wide;",
          "7463:    raw_height = high;",
          "7464:    data_offset = off+28;",
          "7465:  }",
          "7466:  fseek (ifp, off+28, SEEK_SET);",
          "7467:  if (fgetc(ifp) == 0xff && fgetc(ifp) == 0xd8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7139:    is_foveon = 1;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "7514:     }",
          "7515:     fseek (ifp, save, SEEK_SET);",
          "7516:   }",
          "7518: }",
          "",
          "[Removed Lines]",
          "7517:   is_foveon = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "7564:  { 4920,616,-593,-6493,13964,2784,-1774,3178,7005 } },",
          "7565:     { \"Canon EOS 60D\", 0, 0x2ff7,",
          "7566:  { 6719,-994,-925,-4408,12426,2211,-887,2129,6051 } },",
          "7567:     { \"Canon EOS 300D\", 0, 0xfa0,",
          "7568:  { 8197,-2000,-1118,-6714,14335,2592,-2536,3178,8266 } },",
          "7569:     { \"Canon EOS 350D\", 0, 0xfff,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7241:     { \"Canon EOS 100D\", 0, 0x350f,",
          "7242:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "7580:  { 6461,-907,-882,-4300,12184,2378,-819,1944,5931 } },",
          "7581:     { \"Canon EOS 650D\", 0, 0x354d,",
          "7582:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "7586:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "7587:     { \"Canon EOS 1000D\", 0, 0xe43,",
          "7588:  { 6771,-1139,-977,-7818,15123,2928,-1244,1437,7533 } },",
          "",
          "[Removed Lines]",
          "7583:  { \"Canon EOS 700D\", 0, 0x354d,",
          "7584:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "7585:  { \"Canon EOS REBEL T5i\", 0, 0x354d,",
          "",
          "[Added Lines]",
          "7259:     { \"Canon EOS 700D\", 0, 0x3c00,",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "7604:  { 6264,-582,-724,-8312,15948,2504,-1744,1919,8664 } },",
          "7605:     { \"Canon EOS-1DS\", 0, 0xe20,",
          "7606:  { 4374,3631,-1743,-7520,15212,2472,-2892,3632,8161 } },",
          "7607:     { \"Canon EOS-1D X\", 0, 0x3c4e,",
          "7608:  { 6847,-614,-1014,-4669,12737,2139,-1197,2488,6846 } },",
          "7609:     { \"Canon EOS-1D\", 0, 0xe20,",
          "7610:  { 6806,-179,-1020,-8097,16415,1687,-3267,4236,7690 } },",
          "7617:     { \"Canon PowerShot A530\", 0, 0,",
          "7619:     { \"Canon PowerShot A50\", 0, 0,",
          "",
          "[Removed Lines]",
          "7611:  { \"Canon EOS 100D\", 0, 0x3cf0,",
          "7612:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "7613:  { \"Canon EOS REBEL SL1\", 0, 0x3cf0,",
          "7614:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "7615:     { \"Canon EOS\", 0, 0,",
          "7616:  { 8197,-2000,-1118,-6714,14335,2592,-2536,3178,8266 } },",
          "",
          "[Added Lines]",
          "7281:     { \"Canon EOS-1D C\", 0, 0x3c4e,",
          "7282:  { 6847,-614,-1014,-4669,12737,2139,-1197,2488,6846 } },",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "7674:  { 6578,-259,-502,-5974,13030,3309,-308,1058,4970 } },",
          "7675:     { \"Canon PowerShot SX50 HS\", 0, 0,",
          "7676:  { 12432,-4753,-1247,-2110,10691,1629,-412,1623,4926 } },",
          "7678:  { 12513,-4407,-1242,-2680,10276,2405,-878,2215,4734 } },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7348:  { 10826,-3654,-1023,-3215,11310,1906,0,999,4960 } },",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "7694:  { 14134,-5576,-1527,-1991,10719,1273,-1158,1929,3581 } },",
          "7696:  { 13898,-5076,-1447,-1405,10109,1297,-244,1860,3687 } },",
          "7700:  { 11634,-3924,-1128,-4968,12954,2015,-1588,2648,7206 } },",
          "7702:  { 10819,-3873,-1099,-4903,13730,1175,-1755,3751,4632 } },",
          "7704:  { 9790,-3338,-603,-2321,10222,2099,-344,1273,4799 } },",
          "7705:     { \"CINE 650\", 0, 0,",
          "7706:  { 3390,480,-500,-800,3610,340,-550,2336,1192 } },",
          "",
          "[Removed Lines]",
          "7697:     { \"Canon PowerShot SX50\", 0, 0,",
          "7698:  { 12432,-4753,-1247,-2110,10691,1629,-412,1623,4926 } },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "7710:  { 20183,-4295,-423,-3940,15330,3985,-280,4870,9800 } },",
          "7711:     { \"Contax N Digital\", 0, 0xf1e,",
          "7712:  { 7777,1285,-1053,-9280,16543,2916,-3677,5679,7060 } },",
          "7714:  { 6827,-1878,-732,-8429,16012,2564,-704,592,7145 } },",
          "7716:  { 11044,-3888,-1120,-7248,15168,2208,-1531,2277,8069 } },",
          "7718:  { 9183,-2526,-1078,-7461,15071,2574,-2022,2440,8639 } },",
          "7720:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "7722:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "7724:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "7726:  { 10004,-3219,-1201,-7036,15047,2107,-1863,2565,7736 } },",
          "7730:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "7732:  { 11521,-4355,-1065,-6524,13767,3058,-1466,1984,6045 } },",
          "7734:  { 11401,-4498,-1312,-5088,12751,2613,-838,1568,5941 } },",
          "7736:  { 10004,-3219,-1201,-7036,15047,2107,-1863,2565,7736 } },",
          "7738:  { 12492,-4690,-1402,-7033,15423,1647,-1507,2111,7697 } },",
          "7740:  { 11807,-4612,-1294,-8927,16968,1988,-2120,2741,8006 } },",
          "7742:  { 12300,-5110,-1304,-9117,17143,1998,-1947,2448,8100 } },",
          "7744:  { 8754,-2732,-1019,-7204,15069,2276,-1702,2334,6982 } },",
          "7746:  { 11940,-4431,-1255,-6766,14428,2542,-993,1165,7421 } },",
          "7748:  { 11940,-4431,-1255,-6766,14428,2542,-993,1165,7421 } },",
          "7750:  { 9636,-2804,-988,-7442,15040,2589,-1803,2311,8621 } },",
          "7752:  { 9636,-2804,-988,-7442,15040,2589,-1803,2311,8621 } },",
          "7754:  { 12628,-4887,-1401,-6861,14996,1962,-2198,2782,7091 } },",
          "7756:  { 10190,-3506,-1312,-7153,15051,2238,-2003,2399,7505 } },",
          "7758:  { 10491,-3423,-1145,-7385,15027,2538,-1809,2275,8692 } },",
          "7760:  { 10491,-3423,-1145,-7385,15027,2538,-1809,2275,8692 } },",
          "7762:  { 12343,-4515,-1285,-7165,14899,2435,-1895,2496,8800 } },",
          "7764:  { 12343,-4515,-1285,-7165,14899,2435,-1895,2496,8800 } },",
          "7766:  { 21461,-10807,-1441,-2332,10599,1999,289,875,7703 } },",
          "7768:  { 12300,-5110,-1304,-9117,17143,1998,-1947,2448,8100 } },",
          "7770:  { 12440,-3954,-1183,-1123,9674,1708,-83,1614,4086 } },",
          "7772:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "7774:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "7776:  { 12085,-4727,-953,-3257,11489,2002,-511,2046,4592 } },",
          "7780:  { 10592,-4262,-1008,-3514,11355,2465,-870,2025,6386 } },",
          "7782:  { 12161,-4457,-1069,-5034,12874,2400,-795,1724,6904 } },",
          "7784:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "7786:  { 11768,-4971,-1133,-4904,12927,2183,-480,1723,4605 } },",
          "7790:  { 10413,-3996,-993,-3721,11640,2361,-733,1540,6011 } },",
          "7792:  { 10413,-3996,-993,-3721,11640,2361,-733,1540,6011 } },",
          "7794:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "7796:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "7798:  { 7025,-1415,-704,-5188,13765,1424,-1248,2742,6038 } },",
          "7800:  { 13891,-6055,-803,-465,9919,642,2121,82,1291 } },",
          "7801:     { \"Kodak DCS315C\", 8, 0,",
          "7802:  { 17523,-4827,-2510,756,8546,-137,6113,1649,2250 } },",
          "7803:     { \"Kodak DCS330C\", 8, 0,",
          "7804:  { 20620,-7572,-2801,-103,10073,-396,3551,-233,2220 } },",
          "7806:  { 10868,-1852,-644,-1537,11083,484,2343,628,2216 } },",
          "7808:  { 10592,-2206,-967,-1944,11685,230,2206,670,1273 } },",
          "7810:  { 10592,-2206,-967,-1944,11685,230,2206,670,1273 } },",
          "7812:  { 9898,-2700,-940,-2478,12219,206,1985,634,1031 } },",
          "7813:     { \"Kodak DCS520C\", 178, 0,",
          "7814:  { 24542,-10860,-3401,-1490,11370,-297,2858,-605,3225 } },",
          "",
          "[Removed Lines]",
          "7713:     { \"EPSON R-D1\", 0, 0,",
          "7715:     { \"FUJIFILM E550\", 0, 0,",
          "7717:     { \"FUJIFILM E900\", 0, 0,",
          "7719:     { \"FUJIFILM F5\", 0, 0,",
          "7721:     { \"FUJIFILM F6\", 0, 0,",
          "7723:     { \"FUJIFILM F77\", 0, 0xfe9,",
          "7725:     { \"FUJIFILM F7\", 0, 0,",
          "7727:     { \"FUJIFILM F800\", 0, 0,",
          "7728:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "7729:     { \"FUJIFILM F8\", 0, 0,",
          "7731:     { \"FUJIFILM S100FS\", 514, 0,",
          "7733:     { \"FUJIFILM S200EXR\", 512, 0x3fff,",
          "7735:     { \"FUJIFILM S20Pro\", 0, 0,",
          "7737:     { \"FUJIFILM S2Pro\", 128, 0,",
          "7739:     { \"FUJIFILM S3Pro\", 0, 0,",
          "7741:     { \"FUJIFILM S5Pro\", 0, 0,",
          "7743:     { \"FUJIFILM S5000\", 0, 0,",
          "7745:     { \"FUJIFILM S5100\", 0, 0,",
          "7747:     { \"FUJIFILM S5500\", 0, 0,",
          "7749:     { \"FUJIFILM S5200\", 0, 0,",
          "7751:     { \"FUJIFILM S5600\", 0, 0,",
          "7753:     { \"FUJIFILM S6\", 0, 0,",
          "7755:     { \"FUJIFILM S7000\", 0, 0,",
          "7757:     { \"FUJIFILM S9000\", 0, 0,",
          "7759:     { \"FUJIFILM S9500\", 0, 0,",
          "7761:     { \"FUJIFILM S9100\", 0, 0,",
          "7763:     { \"FUJIFILM S9600\", 0, 0,",
          "7765:     { \"FUJIFILM IS-1\", 0, 0,",
          "7767:     { \"FUJIFILM IS Pro\", 0, 0,",
          "7769:     { \"FUJIFILM HS10 HS11\", 0, 0xf68,",
          "7771:     { \"FUJIFILM HS20EXR\", 0, 0,",
          "7773:     { \"FUJIFILM HS3\", 0, 0,",
          "7775:  { \"FUJIFILM HS50EXR\", 0, 0,",
          "7777:  { \"FUJIFILM SL1000\", 0, 0,",
          "7778:  { 11705,-4262,-1107,-2282,10791,1709,-555,1713,4945 } },",
          "7779:  { \"FUJIFILM X100S\", 0, 0,",
          "7781:     { \"FUJIFILM X100\", 0, 0,",
          "7783:     { \"FUJIFILM X10\", 0, 0,",
          "7785:  { \"FUJIFILM X20\", 0, 0,",
          "7787:     { \"FUJIFILM XF1\", 0, 0,",
          "7788:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "7789:     { \"FUJIFILM X-Pro1\", 0, 0,",
          "7791:     { \"FUJIFILM X-E1\", 0, 0,",
          "7793:     { \"FUJIFILM XF1\", 0, 0,",
          "7795:     { \"FUJIFILM X-S1\", 0, 0,",
          "7799:     { \"KODAK NC2000\", 0, 0,",
          "7805:     { \"KODAK DCS420\", 0, 0,",
          "7807:     { \"KODAK DCS460\", 0, 0,",
          "7809:     { \"KODAK EOSDCS1\", 0, 0,",
          "7811:     { \"KODAK EOSDCS3B\", 0, 0,",
          "",
          "[Added Lines]",
          "7383:     { \"Epson R-D1\", 0, 0,",
          "7385:     { \"Fujifilm E550\", 0, 0,",
          "7387:     { \"Fujifilm E900\", 0, 0,",
          "7389:     { \"Fujifilm F5\", 0, 0,",
          "7391:     { \"Fujifilm F6\", 0, 0,",
          "7393:     { \"Fujifilm F77\", 0, 0xfe9,",
          "7395:     { \"Fujifilm F7\", 0, 0,",
          "7397:     { \"Fujifilm F8\", 0, 0,",
          "7399:     { \"Fujifilm S100FS\", 514, 0,",
          "7401:     { \"Fujifilm S200EXR\", 512, 0x3fff,",
          "7403:     { \"Fujifilm S20Pro\", 0, 0,",
          "7405:     { \"Fujifilm S2Pro\", 128, 0,",
          "7407:     { \"Fujifilm S3Pro\", 0, 0,",
          "7409:     { \"Fujifilm S5Pro\", 0, 0,",
          "7411:     { \"Fujifilm S5000\", 0, 0,",
          "7413:     { \"Fujifilm S5100\", 0, 0,",
          "7415:     { \"Fujifilm S5500\", 0, 0,",
          "7417:     { \"Fujifilm S5200\", 0, 0,",
          "7419:     { \"Fujifilm S5600\", 0, 0,",
          "7421:     { \"Fujifilm S6\", 0, 0,",
          "7423:     { \"Fujifilm S7000\", 0, 0,",
          "7425:     { \"Fujifilm S9000\", 0, 0,",
          "7427:     { \"Fujifilm S9500\", 0, 0,",
          "7429:     { \"Fujifilm S9100\", 0, 0,",
          "7431:     { \"Fujifilm S9600\", 0, 0,",
          "7433:     { \"Fujifilm SL1000\", 0, 0,",
          "7434:  { 11705,-4262,-1107,-2282,10791,1709,-555,1713,4945 } },",
          "7435:     { \"Fujifilm IS-1\", 0, 0,",
          "7437:     { \"Fujifilm IS Pro\", 0, 0,",
          "7439:     { \"Fujifilm HS10 HS11\", 0, 0xf68,",
          "7441:     { \"Fujifilm HS20EXR\", 0, 0,",
          "7443:     { \"Fujifilm HS3\", 0, 0,",
          "7445:     { \"Fujifilm HS50EXR\", 0, 0,",
          "7447:     { \"Fujifilm X100S\", 0, 0,",
          "7449:     { \"Fujifilm X100\", 0, 0,",
          "7451:     { \"Fujifilm X10\", 0, 0,",
          "7453:     { \"Fujifilm X20\", 0, 0,",
          "7455:     { \"Fujifilm X-Pro1\", 0, 0,",
          "7457:     { \"Fujifilm X-E1\", 0, 0,",
          "7459:     { \"Fujifilm XF1\", 0, 0,",
          "7461:     { \"Fujifilm X-S1\", 0, 0,",
          "7465:     { \"Kodak NC2000\", 0, 0,",
          "7471:     { \"Kodak DCS420\", 0, 0,",
          "7473:     { \"Kodak DCS460\", 0, 0,",
          "7475:     { \"Kodak EOSDCS1\", 0, 0,",
          "7477:     { \"Kodak EOSDCS3B\", 0, 0,",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "7834:  { 16414,-6060,-1470,-3555,13037,473,2545,122,4948 } },",
          "7835:     { \"Kodak ProBack\", 0, 0,",
          "7836:  { 21179,-8316,-2918,-915,11019,-165,3477,-180,4210 } },",
          "7838:  { 9658,-3314,-823,-5163,12695,2768,-1342,1843,6044 } },",
          "7840:  { 10511,-3836,-1102,-6946,14587,2558,-1481,1792,6246 } },",
          "7842:  { 12805,-4662,-1376,-7480,15267,2360,-1626,2194,7904 } },",
          "7844:  { 11313,-3559,-1101,-3893,11891,2257,-1214,2398,4908 } },",
          "7846:  { 12729,-4717,-1188,-1367,9187,2582,274,860,4411 } },",
          "7848:  { 11749,-4048,-1309,-1867,10572,1489,-138,1449,4522 } },",
          "7850:  { 11265,-4286,-992,-4694,12343,2647,-1090,1523,5447 } },",
          "7851:     { \"Leaf CMost\", 0, 0,",
          "7852:  { 3952,2189,449,-6701,14585,2275,-4536,7349,6536 } },",
          "",
          "[Removed Lines]",
          "7837:     { \"KODAK P712\", 0, 0,",
          "7839:     { \"KODAK P850\", 0, 0xf7c,",
          "7841:     { \"KODAK P880\", 0, 0xfff,",
          "7843:     { \"KODAK EasyShare Z980\", 0, 0,",
          "7845:     { \"KODAK EasyShare Z981\", 0, 0,",
          "7847:     { \"KODAK EasyShare Z990\", 0, 0xfed,",
          "7849:     { \"KODAK EASYSHARE Z1015\", 0, 0xef1,",
          "",
          "[Added Lines]",
          "7503:     { \"Kodak P712\", 0, 0,",
          "7505:     { \"Kodak P850\", 0, 0xf7c,",
          "7507:     { \"Kodak P880\", 0, 0xfff,",
          "7509:     { \"Kodak EasyShare Z980\", 0, 0,",
          "7511:     { \"Kodak EasyShare Z981\", 0, 0,",
          "7513:     { \"Kodak EasyShare Z990\", 0, 0xfed,",
          "7515:     { \"Kodak EASYSHARE Z1015\", 0, 0xef1,",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "7872:  { 9144,-2777,-998,-6676,14556,2281,-2470,3019,7744 } },",
          "7873:     { \"Minolta DiMAGE A1\", 0, 0xf8b,",
          "7874:  { 9274,-2547,-1167,-8220,16323,1943,-2273,2720,8340 } },",
          "7876:  { 8560,-2487,-986,-8112,15535,2771,-1209,1324,7743 } },",
          "7877:     { \"Minolta DiMAGE A2\", 0, 0xf8f,",
          "7878:  { 9097,-2726,-1053,-8073,15506,2762,-966,981,7763 } },",
          "7880:  { 11280,-3564,-1370,-4655,12374,2282,-1423,2168,5396 } },",
          "7882:  { 10284,-3283,-1086,-7957,15762,2316,-829,882,6644 } },",
          "7884:  { 10239,-3104,-1099,-8037,15727,2451,-927,925,6871 } },",
          "7886:  { 8898,-989,-1033,-3292,11619,1674,-661,3178,5216 } },",
          "7888:  { 5902,-933,-782,-8983,16719,2354,-1402,1455,6464 } },",
          "7890:  { 7577,-2166,-926,-7454,15592,1934,-2377,2808,8606 } },",
          "7892:  { 7702,-2245,-975,-9114,17242,1875,-2679,3055,8521 } },",
          "7894:  { 16772,-4726,-2141,-7611,15713,1972,-2846,3494,9521 } },",
          "7896:  { 8367,-2248,-763,-8758,16447,2422,-1527,1550,8053 } },",
          "7898:  { 5710,-901,-615,-8594,16617,2024,-2975,4120,6830 } },",
          "7900:  { 10231,-2769,-1255,-8301,15900,2552,-797,680,7148 } },",
          "7902:  { 8736,-2458,-935,-9075,16894,2251,-1354,1242,8263 } },",
          "7904:  { 7911,-2167,-813,-5327,13150,2408,-1288,2483,7968 } },",
          "7906:  { 7013,-1408,-635,-5268,12902,2640,-1470,2801,7379 } },",
          "7908:  { 9030,-1992,-715,-8465,16302,2255,-2689,3217,8069 } },",
          "7910:  { 7171,-1986,-648,-8085,15555,2718,-2170,2512,7457 } },",
          "7912:  { 8828,-2406,-694,-4874,12603,2541,-660,1509,7587 } },",
          "7914:  { 8139,-2171,-663,-8747,16541,2295,-1925,2008,8093 } },",
          "7916:  { 8819,-2543,-911,-9025,16928,2151,-1329,1213,8449 } },",
          "7918:  { 6992,-1668,-806,-8138,15748,2543,-874,850,7897 } },",
          "7920:  { 8598,-2848,-857,-5618,13606,2195,-1002,1773,7137 } },",
          "7922:  { 7309,-1403,-519,-8474,16008,2622,-2433,2826,8064 } },",
          "7924:  { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },",
          "7926:  { 7732,-2422,-789,-8238,15884,2498,-859,783,7330 } },",
          "7928:  { 8178,-2245,-609,-4857,12394,2776,-1207,2086,7298 } },",
          "7930:  { 8736,-2458,-935,-9075,16894,2251,-1354,1242,8263 } },",
          "7932:  { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },",
          "7934:  { 8139,-2171,-663,-8747,16541,2295,-1925,2008,8093 } },",
          "7936:  { 7732,-2422,-789,-8238,15884,2498,-859,783,7330 } },",
          "7940:  { 7866,-2108,-555,-4869,12483,2681,-1176,2069,7501 } },",
          "7942:  { 8629,-2410,-883,-9055,16940,2171,-1490,1363,8520 } },",
          "7944:  { 7309,-1403,-519,-8474,16008,2622,-2434,2826,8064 } },",
          "7946:  { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } },",
          "7948:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "7950:  { 13142,-4152,-1596,-4655,12374,2282,-1769,2696,6711} },",
          "7952:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "7954:  { 9846,-2085,-1019,-3278,11109,2170,-774,2134,5745 } },",
          "7956:  { 11280,-3564,-1370,-4655,12374,2282,-1423,2168,5396 } },",
          "7958:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "7960:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "7962:  { 9349,-2987,-1001,-7919,15766,2266,-2098,2680,6839 } },",
          "7964:  { -5368,11478,2368,5537,-113,3148,-4969,10021,5782,778,9028,211 } },",
          "7966:  { 7842,-2320,-992,-8154,15718,2599,-1098,1342,7560 } },",
          "7968:  { 8489,-2583,-1036,-8051,15583,2643,-1307,1407,7354 } },",
          "7970:  { 7971,-2314,-913,-8451,15762,2894,-1442,1520,7610 } },",
          "7972:  { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },",
          "7974:  { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },",
          "7976:  { 9698,-3367,-914,-4706,12584,2368,-837,968,5801 } },",
          "7978:  { 11432,-3679,-1111,-3169,11239,2202,-791,1380,4455 } },",
          "7980:  { 11053,-4269,-1024,-1976,10182,2088,-526,1263,4469 } },",
          "7982:  { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },",
          "7984:  { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },",
          "7988:  { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },",
          "7990:  { 8994,-2667,-865,-4594,12324,2552,-699,1786,6260 } },",
          "7992:  { 10508,-3124,-1273,-6079,14294,1901,-1653,2306,6237 } },",
          "7994:  { 10445,-3362,-1307,-7662,15690,2058,-1135,1176,7602 } },",
          "7996:  { 10252,-3531,-1095,-7114,14850,2436,-1451,1723,6365 } },",
          "7998:  { 10793,-3791,-1146,-7498,15177,2488,-1390,1577,7321 } },",
          "8000:  { 8606,-2509,-1014,-8238,15714,2703,-942,979,7760 } },",
          "8002:  { 12745,-4500,-1416,-6062,14542,1580,-1934,2256,6603 } },",
          "8004:  { 11846,-4767,-945,-7027,15878,1089,-2699,4122,8311 } },",
          "8006:  { 13173,-4732,-1499,-5807,14036,1895,-2045,2452,7142 } },",
          "8008:  { 7828,-1761,-348,-5788,14071,1830,-2853,4518,6557 } },",
          "8010:  { 8961,-2473,-1084,-7979,15990,2067,-2319,3035,8249 } },",
          "8012:  { 8144,-1861,-1111,-7763,15894,1929,-1865,2542,7607 } },",
          "8014:  { 9487,-2875,-1115,-7533,15606,2010,-1618,2100,7389 } },",
          "8016:  { 6169,-1483,-21,-7107,14761,2536,-2904,3580,8568 } },",
          "8018:  { 8856,-2582,-1026,-7761,15766,2082,-2009,2575,7469 } },",
          "8020:  { 8746,-2425,-1095,-7594,15612,2073,-1780,2309,7416 } },",
          "8022:  { 8745,-2425,-1095,-7594,15613,2073,-1780,2309,7416 } },",
          "8024:  { 8136,-1968,-299,-5481,13742,1871,-2556,4205,6630 } },",
          "8026:  { 8785,-2529,-1033,-7639,15624,2112,-1783,2300,7817 } },",
          "8028:  { 8344,-2322,-1020,-7596,15635,2048,-1748,2269,7287 } },",
          "8030:  { 11200,-3783,-1325,-4576,12593,2206,-695,1742,7504 } },",
          "8032:  { 8453,-2198,-1092,-7609,15681,2008,-1725,2337,7824 } },",
          "8034:  { 8453,-2198,-1092,-7609,15681,2008,-1725,2337,7824 } },",
          "8036:  { 8343,-2050,-1021,-7715,15705,2103,-1831,2380,8235 } },",
          "8038:  { 8343,-2050,-1021,-7715,15705,2103,-1831,2380,8235 } },",
          "8040:  { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },",
          "8042:  { 11409,-3872,-1393,-4572,12757,2003,-709,1810,7415 } },",
          "8044:  { 11408,-4289,-1215,-4286,12385,2118,-387,1467,7787 } },",
          "8046:  { 15030,-5552,-1806,-3987,12387,1767,-592,1670,7023 } },",
          "8048:  { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },",
          "8050:  { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },",
          "8052:  { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },",
          "8054:  { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },",
          "8056:  { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },",
          "8058:  { 12078,-4836,-1069,-6671,14306,2578,-786,939,7418 } },",
          "8060:  { 11766,-4445,-1067,-6901,14421,2707,-1029,1217,7572 } },",
          "8062:  { 9493,-3415,-666,-5211,12334,3260,-1548,2262,6482 } },",
          "8064:  { 10593,-3607,-1010,-5881,13127,3084,-1200,1805,6721 } },",
          "8066:  { 11597,-4006,-1049,-5432,12799,2957,-1029,1750,6516 } },",
          "8068:  { 10915,-3677,-982,-5587,12986,2911,-1168,1968,6223 } },",
          "8070:  { 11522,-4044,-1146,-4736,12172,2904,-988,1829,6039 } },",
          "8072:  { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },",
          "8074:  { 10901,-4095,-1074,-1141,9208,2293,-62,1417,5158 } },",
          "8076:  { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },",
          "8078:  { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },",
          "8080:  { 10829,-2838,-1115,-8339,15817,2696,-837,680,11939 } },",
          "8082:  { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },",
          "8084:  { 10371,-2333,-1206,-8688,16231,2602,-1230,1116,11282 } },",
          "8086:  { 9651,-2059,-1189,-8881,16512,2487,-1460,1345,10687 } },",
          "8088:  { 9566,-2863,-803,-7170,15172,2112,-818,803,9705 } },",
          "8090:  { 11095,-3157,-1324,-8377,15834,2720,-1108,947,11688 } },",
          "8092:  { 9427,-2714,-868,-7493,16092,1373,-2199,3264,7180 } },",
          "8094:  { 9186,-2678,-907,-8693,16517,2260,-1129,1094,8524 } },",
          "8096:  { 11057,-3604,-1155,-5152,13046,2329,-282,375,8104 } },",
          "8098:  { 11057,-3604,-1155,-5152,13046,2329,-282,375,8104 } },",
          "8100:  { 8843,-2837,-625,-5025,12644,2668,-411,1234,7410 } },",
          "8102:  { 9895,-3077,-850,-5304,13035,2521,-883,1768,6936 } },",
          "8110:  { 8713,-2833,-743,-4342,11900,2772,-722,1543,6247 } },",
          "8112:  { 9142,-2947,-678,-8648,16967,1663,-2224,2898,8615 } },",
          "8114:  { 8804,-2523,-1238,-2423,11627,860,-682,1774,4753 } },",
          "8116:  { 12995,-5593,-1107,-1879,10139,2027,-64,1233,4919 } },",
          "8118:  { 10646,-3593,-1158,-3329,11699,1831,-667,2874,6287 } },",
          "8119:     { \"Panasonic DMC-FZ8\", 0, 0xf7f,",
          "8120:  { 8986,-2755,-802,-6341,13575,3077,-1476,2144,6379 } },",
          "",
          "[Removed Lines]",
          "7875:     { \"MINOLTA DiMAGE A200\", 0, 0,",
          "7881:     { \"MINOLTA DYNAX 5\", 0, 0xffb,",
          "7883:     { \"MINOLTA DYNAX 7\", 0, 0xffb,",
          "7887:     { \"NIKON D100\", 0, 0,",
          "7889:     { \"NIKON D1H\", 0, 0,",
          "7891:     { \"NIKON D1X\", 0, 0,",
          "7895:     { \"NIKON D200\", 0, 0xfbc,",
          "7897:     { \"NIKON D2H\", 0, 0,",
          "7899:     { \"NIKON D2X\", 0, 0,",
          "7901:     { \"NIKON D3000\", 0, 0,",
          "7903:     { \"NIKON D3100\", 0, 0,",
          "7905:     { \"NIKON D3200\", 0, 0xfb9,",
          "7907:     { \"NIKON D300\", 0, 0,",
          "7909:     { \"NIKON D3X\", 0, 0,",
          "7911:     { \"NIKON D3S\", 0, 0,",
          "7913:     { \"NIKON D3\", 0, 0,",
          "7915:     { \"NIKON D40X\", 0, 0,",
          "7917:     { \"NIKON D40\", 0, 0,",
          "7919:     { \"NIKON D4\", 0, 0,",
          "7921:     { \"NIKON D5000\", 0, 0xf00,",
          "7923:     { \"NIKON D5100\", 0, 0x3de6,",
          "7925:     { \"NIKON D50\", 0, 0,",
          "7927:     { \"NIKON D600\", 0, 0x3e07,",
          "7929:     { \"NIKON D60\", 0, 0,",
          "7931:     { \"NIKON D7000\", 0, 0,",
          "7933:     { \"NIKON D700\", 0, 0,",
          "7935:     { \"NIKON D70\", 0, 0,",
          "7937:  { \"NIKON D7100\", 0, 0,",
          "7938:  { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },",
          "7939:     { \"NIKON D800\", 0, 0,",
          "7941:     { \"NIKON D80\", 0, 0,",
          "7943:     { \"NIKON D90\", 0, 0xf00,",
          "7951:     { \"NIKON E2500\", 0, 0,",
          "7957:     { \"NIKON E4500\", 0, 0,",
          "7959:     { \"NIKON E5000\", 0, 0,",
          "7961:     { \"NIKON E5400\", 0, 0,",
          "7963:     { \"NIKON E5700\", 0, 0,",
          "7965:     { \"NIKON E8400\", 0, 0,",
          "7967:     { \"NIKON E8700\", 0, 0,",
          "7969:     { \"NIKON E8800\", 0, 0,",
          "7971:  { \"NIKON COOLPIX A\", 0, 0,",
          "7973:  { \"NIKON COOLPIX P330\", 0, 0,",
          "7975:     { \"NIKON COOLPIX P6000\", 0, 0,",
          "7977:     { \"NIKON COOLPIX P7000\", 0, 0,",
          "7979:     { \"NIKON COOLPIX P7100\", 0, 0,",
          "7981:     { \"NIKON COOLPIX P7700\", 200, 0,",
          "7983:  { \"NIKON 1 J3\", 0, 0,",
          "7985:  { \"NIKON 1 S1\", 0, 0,",
          "7986:  { 8994,-2667,-865,-4594,12324,2552,-699,1786,6260 } },",
          "7987:     { \"NIKON 1 V2\", 0, 0,",
          "7989:     { \"NIKON 1 \", 0, 0,",
          "7991:     { \"OLYMPUS C5050\", 0, 0,",
          "7993:     { \"OLYMPUS C5060\", 0, 0,",
          "7995:     { \"OLYMPUS C7070\", 0, 0,",
          "7997:     { \"OLYMPUS C70\", 0, 0,",
          "7999:     { \"OLYMPUS C80\", 0, 0,",
          "8001:     { \"OLYMPUS E-10\", 0, 0xffc,",
          "8003:     { \"OLYMPUS E-1\", 0, 0,",
          "8005:     { \"OLYMPUS E-20\", 0, 0xffc,",
          "8007:     { \"OLYMPUS E-300\", 0, 0,",
          "8009:     { \"OLYMPUS E-330\", 0, 0,",
          "8011:     { \"OLYMPUS E-30\", 0, 0xfbc,",
          "8013:     { \"OLYMPUS E-3\", 0, 0xf99,",
          "8015:     { \"OLYMPUS E-400\", 0, 0,",
          "8017:     { \"OLYMPUS E-410\", 0, 0xf6a,",
          "8019:     { \"OLYMPUS E-420\", 0, 0xfd7,",
          "8021:     { \"OLYMPUS E-450\", 0, 0xfd2,",
          "8023:     { \"OLYMPUS E-500\", 0, 0,",
          "8025:     { \"OLYMPUS E-510\", 0, 0xf6a,",
          "8027:     { \"OLYMPUS E-520\", 0, 0xfd2,",
          "8029:     { \"OLYMPUS E-5\", 0, 0xeec,",
          "8031:     { \"OLYMPUS E-600\", 0, 0xfaf,",
          "8033:     { \"OLYMPUS E-620\", 0, 0xfaf,",
          "8035:     { \"OLYMPUS E-P1\", 0, 0xffd,",
          "8037:     { \"OLYMPUS E-P2\", 0, 0xffd,",
          "8039:     { \"OLYMPUS E-P3\", 0, 0,",
          "8041:     { \"OLYMPUS E-PL1s\", 0, 0,",
          "8043:     { \"OLYMPUS E-PL1\", 0, 0,",
          "8045:     { \"OLYMPUS E-PL2\", 0, 0,",
          "8047:     { \"OLYMPUS E-PL3\", 0, 0,",
          "8049:     { \"OLYMPUS E-PL5\", 0, 0xfcb,",
          "8051:     { \"OLYMPUS E-PM1\", 0, 0,",
          "8053:     { \"OLYMPUS E-PM2\", 0, 0,",
          "8055:     { \"OLYMPUS E-M5\", 0, 0xfe1,",
          "8057:     { \"OLYMPUS SP350\", 0, 0,",
          "8059:     { \"OLYMPUS SP3\", 0, 0,",
          "8061:     { \"OLYMPUS SP500UZ\", 0, 0xfff,",
          "8063:     { \"OLYMPUS SP510UZ\", 0, 0xffe,",
          "8065:     { \"OLYMPUS SP550UZ\", 0, 0xffe,",
          "8067:     { \"OLYMPUS SP560UZ\", 0, 0xff9,",
          "8069:     { \"OLYMPUS SP570UZ\", 0, 0,",
          "8071:  { \"OLYMPUS XZ-10\", 0, 0,",
          "8073:     { \"OLYMPUS XZ-1\", 0, 0,",
          "8075:     { \"OLYMPUS XZ-2\", 0, 0,",
          "8077:     { \"PENTAX *ist DL2\", 0, 0,",
          "8079:     { \"PENTAX *ist DL\", 0, 0,",
          "8081:     { \"PENTAX *ist DS2\", 0, 0,",
          "8083:     { \"PENTAX *ist DS\", 0, 0,",
          "8085:     { \"PENTAX *ist D\", 0, 0,",
          "8087:     { \"PENTAX K10D\", 0, 0,",
          "8089:     { \"PENTAX K1\", 0, 0,",
          "8091:     { \"PENTAX K20D\", 0, 0,",
          "8093:     { \"PENTAX K200D\", 0, 0,",
          "8095:     { \"PENTAX K2000\", 0, 0,",
          "8097:     { \"PENTAX K-m\", 0, 0,",
          "8099:     { \"PENTAX K-x\", 0, 0,",
          "8101:     { \"PENTAX K-r\", 0, 0,",
          "8103:     { \"PENTAX K-30\", 0, 0,",
          "8104:  { 8833,-2670,-1183,-3995,12301,1881,-979,1717,6527 } },",
          "8105:     { \"PENTAX K-5 II s\", 0, 0,",
          "8106:  { 8366,-2528,-1120,-3995,12301,1881,-998,1749,6649 } },",
          "8107:     { \"PENTAX K-5 II\", 0, 0,",
          "8108:  { 8773,-2651,-1175,-3995,12301,1881,-973,1706,6486 } },",
          "8109:     { \"PENTAX K-5\", 0, 0,",
          "8111:     { \"PENTAX K-7\", 0, 0,",
          "8113:  { \"PENTAX MX-1\", 0, 0,",
          "8115:     { \"PENTAX Q10\", 0, 0,",
          "8117:     { \"PENTAX 645D\", 0, 0x3e00,",
          "",
          "[Added Lines]",
          "7541:     { \"Minolta DiMAGE A200\", 0, 0,",
          "7547:     { \"Minolta DYNAX 5\", 0, 0xffb,",
          "7549:     { \"Minolta DYNAX 7\", 0, 0xffb,",
          "7553:     { \"Nikon D100\", 0, 0,",
          "7555:     { \"Nikon D1H\", 0, 0,",
          "7557:     { \"Nikon D1X\", 0, 0,",
          "7561:     { \"Nikon D200\", 0, 0xfbc,",
          "7563:     { \"Nikon D2H\", 0, 0,",
          "7565:     { \"Nikon D2X\", 0, 0,",
          "7567:     { \"Nikon D3000\", 0, 0,",
          "7569:     { \"Nikon D3100\", 0, 0,",
          "7571:     { \"Nikon D3200\", 0, 0xfb9,",
          "7573:     { \"Nikon D300\", 0, 0,",
          "7575:     { \"Nikon D3X\", 0, 0,",
          "7577:     { \"Nikon D3S\", 0, 0,",
          "7579:     { \"Nikon D3\", 0, 0,",
          "7581:     { \"Nikon D40X\", 0, 0,",
          "7583:     { \"Nikon D40\", 0, 0,",
          "7585:     { \"Nikon D4\", 0, 0,",
          "7587:     { \"Nikon D5000\", 0, 0xf00,",
          "7589:     { \"Nikon D5100\", 0, 0x3de6,",
          "7591:     { \"Nikon D5200\", 0, 0,",
          "7592:  { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },",
          "7593:     { \"Nikon D50\", 0, 0,",
          "7595:     { \"Nikon D600\", 0, 0x3e07,",
          "7597:     { \"Nikon D60\", 0, 0,",
          "7599:     { \"Nikon D7000\", 0, 0,",
          "7601:     { \"Nikon D7100\", 0, 0,",
          "7602:  { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },",
          "7603:     { \"Nikon D700\", 0, 0,",
          "7605:     { \"Nikon D70\", 0, 0,",
          "7607:     { \"Nikon D800\", 0, 0,",
          "7609:     { \"Nikon D80\", 0, 0,",
          "7611:     { \"Nikon D90\", 0, 0xf00,",
          "7616:  { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } },",
          "7618:  { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } },",
          "7623:     { \"Nikon E2500\", 0, 0,",
          "7629:     { \"Nikon E4500\", 0, 0,",
          "7631:     { \"Nikon E5000\", 0, 0,",
          "7633:     { \"Nikon E5400\", 0, 0,",
          "7635:     { \"Nikon E5700\", 0, 0,",
          "7637:     { \"Nikon E8400\", 0, 0,",
          "7639:     { \"Nikon E8700\", 0, 0,",
          "7641:     { \"Nikon E8800\", 0, 0,",
          "7643:     { \"Nikon COOLPIX A\", 0, 0,",
          "7645:     { \"Nikon COOLPIX P330\", 0, 0,",
          "7647:     { \"Nikon COOLPIX P6000\", 0, 0,",
          "7649:     { \"Nikon COOLPIX P7000\", 0, 0,",
          "7651:     { \"Nikon COOLPIX P7100\", 0, 0,",
          "7653:     { \"Nikon COOLPIX P7700\", 200, 0,",
          "7655:     { \"Nikon 1 V2\", 0, 0,",
          "7657:     { \"Nikon 1 J3\", 0, 0,",
          "7659:     { \"Nikon 1 \", 0, 0,",
          "7661:     { \"Olympus C5050\", 0, 0,",
          "7663:     { \"Olympus C5060\", 0, 0,",
          "7665:     { \"Olympus C7070\", 0, 0,",
          "7667:     { \"Olympus C70\", 0, 0,",
          "7669:     { \"Olympus C80\", 0, 0,",
          "7671:     { \"Olympus E-10\", 0, 0xffc,",
          "7673:     { \"Olympus E-1\", 0, 0,",
          "7675:     { \"Olympus E-20\", 0, 0xffc,",
          "7677:     { \"Olympus E-300\", 0, 0,",
          "7679:     { \"Olympus E-330\", 0, 0,",
          "7681:     { \"Olympus E-30\", 0, 0xfbc,",
          "7683:     { \"Olympus E-3\", 0, 0xf99,",
          "7685:     { \"Olympus E-400\", 0, 0,",
          "7687:     { \"Olympus E-410\", 0, 0xf6a,",
          "7689:     { \"Olympus E-420\", 0, 0xfd7,",
          "7691:     { \"Olympus E-450\", 0, 0xfd2,",
          "7693:     { \"Olympus E-500\", 0, 0,",
          "7695:     { \"Olympus E-510\", 0, 0xf6a,",
          "7697:     { \"Olympus E-520\", 0, 0xfd2,",
          "7699:     { \"Olympus E-5\", 0, 0xeec,",
          "7701:     { \"Olympus E-600\", 0, 0xfaf,",
          "7703:     { \"Olympus E-620\", 0, 0xfaf,",
          "7705:     { \"Olympus E-P1\", 0, 0xffd,",
          "7707:     { \"Olympus E-P2\", 0, 0xffd,",
          "7709:     { \"Olympus E-P3\", 0, 0,",
          "7711:     { \"Olympus E-PL1s\", 0, 0,",
          "7713:     { \"Olympus E-PL1\", 0, 0,",
          "7715:     { \"Olympus E-PL2\", 0, 0xcf3,",
          "7717:     { \"Olympus E-PL3\", 0, 0,",
          "7719:     { \"Olympus E-PL5\", 0, 0xfcb,",
          "7721:     { \"Olympus E-PM1\", 0, 0,",
          "7723:     { \"Olympus E-PM2\", 0, 0,",
          "7725:     { \"Olympus E-M5\", 0, 0xfe1,",
          "7727:     { \"Olympus SP350\", 0, 0,",
          "7729:     { \"Olympus SP3\", 0, 0,",
          "7731:     { \"Olympus SP500UZ\", 0, 0xfff,",
          "7733:     { \"Olympus SP510UZ\", 0, 0xffe,",
          "7735:     { \"Olympus SP550UZ\", 0, 0xffe,",
          "7737:     { \"Olympus SP560UZ\", 0, 0xff9,",
          "7739:     { \"Olympus SP570UZ\", 0, 0,",
          "7741:     { \"Olympus XZ-10\", 0, 0,",
          "7743:     { \"Olympus XZ-1\", 0, 0,",
          "7745:     { \"Olympus XZ-2\", 0, 0,",
          "7748:  { 12782,-4059,-379,-478,9066,1413,1340,1513,5176 } },",
          "7749:     { \"Pentax *ist DL2\", 0, 0,",
          "7751:     { \"Pentax *ist DL\", 0, 0,",
          "7753:     { \"Pentax *ist DS2\", 0, 0,",
          "7755:     { \"Pentax *ist DS\", 0, 0,",
          "7757:     { \"Pentax *ist D\", 0, 0,",
          "7759:     { \"Pentax K10D\", 0, 0,",
          "7761:     { \"Pentax K1\", 0, 0,",
          "7763:     { \"Pentax K20D\", 0, 0,",
          "7765:     { \"Pentax K200D\", 0, 0,",
          "7767:     { \"Pentax K2000\", 0, 0,",
          "7769:     { \"Pentax K-m\", 0, 0,",
          "7771:     { \"Pentax K-x\", 0, 0,",
          "7773:     { \"Pentax K-r\", 0, 0,",
          "7775:     { \"Pentax K-5 II\", 0, 0,",
          "7776:  { 8170,-2725,-639,-4440,12017,2744,-771,1465,6599 } },",
          "7777:     { \"Pentax K-5\", 0, 0,",
          "7779:     { \"Pentax K-7\", 0, 0,",
          "7781:     { \"Pentax MX-1\", 0, 0,",
          "7783:     { \"Pentax Q10\", 0, 0,",
          "7785:     { \"Pentax 645D\", 0, 0x3e00,",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "8130:  { 13639,-5535,-1371,-1698,9633,2430,316,1152,4108 } },",
          "8131:     { \"Panasonic DMC-FZ50\", 0, 0,",
          "8132:  { 7906,-2709,-594,-6231,13351,3220,-1922,2631,6537 } },",
          "8134:  { 7906,-2709,-594,-6231,13351,3220,-1922,2631,6537 } },",
          "8135:     { \"Panasonic DMC-L10\", 15, 0xf96,",
          "8136:  { 8025,-1942,-1050,-7920,15904,2100,-2456,3005,7039 } },",
          "8137:     { \"Panasonic DMC-L1\", 0, 0xf7f,",
          "8138:  { 8054,-1885,-1025,-8349,16367,2040,-2805,3542,7629 } },",
          "8140:  { 8054,-1885,-1025,-8349,16367,2040,-2805,3542,7629 } },",
          "8141:     { \"Panasonic DMC-LC1\", 0, 0,",
          "8142:  { 11340,-4069,-1275,-7555,15266,2448,-2960,3426,7685 } },",
          "8144:  { 11340,-4069,-1275,-7555,15266,2448,-2960,3426,7685 } },",
          "8145:     { \"Panasonic DMC-LX1\", 0, 0xf7f,",
          "8146:  { 10704,-4187,-1230,-8314,15952,2501,-920,945,8927 } },",
          "8148:  { 10704,-4187,-1230,-8314,15952,2501,-920,945,8927 } },",
          "8149:     { \"Panasonic DMC-LX2\", 0, 0,",
          "8150:  { 8048,-2810,-623,-6450,13519,3272,-1700,2146,7049 } },",
          "8152:  { 8048,-2810,-623,-6450,13519,3272,-1700,2146,7049 } },",
          "8153:     { \"Panasonic DMC-LX3\", 15, 0,",
          "8154:  { 8128,-2668,-655,-6134,13307,3161,-1782,2568,6083 } },",
          "8156:  { 8128,-2668,-655,-6134,13307,3161,-1782,2568,6083 } },",
          "8157:     { \"Panasonic DMC-LX5\", 143, 0,",
          "8158:  { 10909,-4295,-948,-1333,9306,2399,22,1738,4582 } },",
          "8162:  { 10909,-4295,-948,-1333,9306,2399,22,1738,4582 } },",
          "8163:     { \"Panasonic DMC-LX7\", 143, 0,",
          "8164:  { 10148,-3743,-991,-2837,11366,1659,-701,1893,4899 } },",
          "8166:  { 10148,-3743,-991,-2837,11366,1659,-701,1893,4899 } },",
          "8167:     { \"Panasonic DMC-FZ100\", 143, 0xfff,",
          "8168:  { 16197,-6146,-1761,-2393,10765,1869,366,2238,5248 } },",
          "8170:  { 16197,-6146,-1761,-2393,10765,1869,366,2238,5248 } },",
          "8171:     { \"Panasonic DMC-FZ150\", 143, 0xfff,",
          "8172:  { 11904,-4541,-1189,-2355,10899,1662,-296,1586,4289 } },",
          "8174:  { 11904,-4541,-1189,-2355,10899,1662,-296,1586,4289 } },",
          "8175:     { \"Panasonic DMC-FZ200\", 143, 0xfff,",
          "8176:  { 8112,-2563,-740,-3730,11784,2197,-941,2075,4933 } },",
          "8178:  { 8112,-2563,-740,-3730,11784,2197,-941,2075,4933 } },",
          "8179:     { \"Panasonic DMC-FX150\", 15, 0xfff,",
          "8180:  { 9082,-2907,-925,-6119,13377,3058,-1797,2641,5609 } },",
          "",
          "[Removed Lines]",
          "8133:     { \"LEICA V-LUX1\", 0, 0,",
          "8139:     { \"LEICA DIGILUX 3\", 0, 0xf7f,",
          "8143:     { \"LEICA DIGILUX 2\", 0, 0,",
          "8147:     { \"LEICA D-LUX2\", 0, 0xf7f,",
          "8151:     { \"LEICA D-LUX3\", 0, 0,",
          "8155:     { \"LEICA D-LUX 4\", 15, 0,",
          "8159:     { \"Panasonic DMC-LX7\", 143, 0,",
          "8160:  { 10148,-3743,-991,-2837,11366,1659,-701,1893,4899 } },",
          "8161:     { \"LEICA D-LUX 5\", 143, 0,",
          "8165:     { \"LEICA D-LUX 6\", 143, 0,",
          "8169:     { \"LEICA V-LUX 2\", 143, 0xfff,",
          "8173:     { \"LEICA V-LUX 3\", 143, 0xfff,",
          "8177:     { \"LEICA V-LUX 4\", 143, 0xfff,",
          "",
          "[Added Lines]",
          "7801:     { \"Leica V-LUX1\", 0, 0,",
          "7807:     { \"Leica DIGILUX 3\", 0, 0xf7f,",
          "7811:     { \"Leica DIGILUX 2\", 0, 0,",
          "7815:     { \"Leica D-LUX2\", 0, 0xf7f,",
          "7819:     { \"Leica D-LUX3\", 0, 0,",
          "7823:     { \"Leica D-LUX 4\", 15, 0,",
          "7827:     { \"Leica D-LUX 5\", 143, 0,",
          "7831:     { \"Leica D-LUX 6\", 143, 0,",
          "7835:     { \"Leica V-LUX 2\", 143, 0xfff,",
          "7839:     { \"Leica V-LUX 3\", 143, 0xfff,",
          "7843:     { \"Leica V-LUX 4\", 143, 0xfff,",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "8188:  { 6763,-1919,-863,-3868,11515,2684,-1216,2387,5879 } },",
          "8189:     { \"Panasonic DMC-G5\", 143, 0xfff,",
          "8190:  { 7798,-2562,-740,-3879,11584,2613,-1055,2248,5434 } },",
          "8193:     { \"Panasonic DMC-GF1\", 15, 0xf92,",
          "8194:  { 7888,-1902,-1011,-8106,16085,2099,-2353,2866,7330 } },",
          "8195:     { \"Panasonic DMC-GF2\", 143, 0xfff,",
          "",
          "[Removed Lines]",
          "8191:  { \"Panasonic DMC-G6\", 143, 0xfff,",
          "8192:  { 8294,-2891,-651,-3869,11590,2595,-1183,2267,5352 } },",
          "",
          "[Added Lines]",
          "7858:  { 6395,-2583,-40,-3677,9109,4569,-1502,2806,6431 } },",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "8198:  { 9051,-2468,-1204,-5212,13276,2121,-1197,2510,6890 } },",
          "8199:     { \"Panasonic DMC-GF5\", 143, 0xfff,",
          "8200:  { 8228,-2945,-660,-3938,11792,2430,-1094,2278,5793 } },",
          "8201:     { \"Panasonic DMC-GH1\", 15, 0xf92,",
          "8202:  { 6299,-1466,-532,-6535,13852,2969,-2331,3112,5984 } },",
          "8203:     { \"Panasonic DMC-GH2\", 15, 0xf95,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7867:     { \"Panasonic DMC-GF6\", 143, 0,",
          "7868:  { 8130,-2801,-946,-3520,11289,2552,-1314,2511,5791 } },",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "8220:  { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },",
          "8221:     { \"Phase One P65\", 0, 0,",
          "8222:  { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },",
          "8224:  { 21014,-7891,-2613,-3056,12201,856,-2203,5125,8042 } },",
          "8226:  { 8898,-2498,-994,-3144,11328,2066,-760,1381,4576 } },",
          "8228:  { 10648,-3897,-1055,-2022,10573,1668,-492,1611,4742 } },",
          "8230:  { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },",
          "8232:  { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },",
          "8234:  { 10332,-3234,-1168,-6111,14639,1520,-1352,2647,8331 } },",
          "8236:  { 12093,-3557,-1155,-1000,9534,1733,-22,1787,4576 } },",
          "8238:  { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },",
          "8240:  { 11885,-3968,-1473,-4214,12299,1916,-835,1655,5549 } },",
          "8242:  { 16442,-2956,-2422,-2877,12128,750,-1136,6066,4559 } },",
          "8244:  { 7924,-1910,-777,-8226,15459,2998,-1517,2199,6818,-7242,11401,3481 } },",
          "8246:  { 8512,-2641,-694,-8042,15670,2526,-1821,2117,7414 } },",
          "8248:  { 7511,-2571,-692,-7894,15088,3060,-948,1111,8128 } },",
          "8250:  { 8651,-2754,-1057,-3464,12207,1373,-568,1398,4434 } },",
          "8252:  { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },",
          "8254:  { 9437,-2811,-774,-8405,16215,2290,-710,596,7181 } },",
          "8256:  { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },",
          "8258:  { 9847,-3091,-928,-8485,16345,2225,-715,595,7103 } },",
          "8260:  { 9847,-3091,-928,-8485,16345,2225,-715,595,7103 } },",
          "8262:  { 9847,-3091,-929,-8485,16346,2225,-714,595,7103 } },",
          "8264:  { 6038,-1484,-578,-9146,16746,2513,-875,746,7217 } },",
          "8266:  { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },",
          "8268:  { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },",
          "8270:  { 4950,-580,-103,-5228,12542,3029,-709,1435,7371 } },",
          "8272:  { 5932,-1492,-411,-4813,12285,2856,-741,1524,6739 } },",
          "8274:  { 4950,-580,-103,-5228,12542,3029,-709,1435,7371 } },",
          "8276:  { 5775,-805,-359,-8574,16295,2391,-1943,2341,7249 } },",
          "8278:  { 5413,-1162,-365,-5665,13098,2866,-608,1179,8440 } },",
          "8280:  { 5209,-1072,-397,-8845,16120,2919,-1618,1803,8654 } },",
          "8286:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "8288:  { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },",
          "8290:  { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },",
          "8292:  { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },",
          "8294:  { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },",
          "8296:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "8298:  { 6069,-1221,-366,-5221,12779,2734,-1024,2066,6834 } },",
          "8300:  { 5986,-1618,-415,-4557,11820,3120,-681,1404,6971 } },",
          "8302:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "8304:  { 5932,-1492,-411,-4813,12285,2856,-741,1524,6739 } },",
          "8306:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "8308:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "8310:  { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },",
          "8312:  { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },",
          "8314:  { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },",
          "8315:   };",
          "8316:   double cam_xyz[4][3];",
          "",
          "[Removed Lines]",
          "8225:     { \"SAMSUNG EX1\", 0, 0x3e00,",
          "8227:     { \"SAMSUNG EX2F\", 0, 0x7ff,",
          "8231:     { \"SAMSUNG NX1000\", 0, 0,",
          "8235:     { \"SAMSUNG WB2000\", 0, 0xfff,",
          "8237:     { \"SAMSUNG GX-1\", 0, 0,",
          "8243:     { \"SONY DSC-F828\", 0, 0,",
          "8245:     { \"SONY DSC-R1\", 512, 0,",
          "8247:     { \"SONY DSC-V3\", 0, 0,",
          "8249:     { \"SONY DSC-RX100\", 200, 0,",
          "8251:     { \"SONY DSC-RX1\", 128, 0,",
          "8253:     { \"SONY DSLR-A100\", 0, 0xfeb,",
          "8255:     { \"SONY DSLR-A290\", 0, 0,",
          "8257:     { \"SONY DSLR-A2\", 0, 0,",
          "8259:     { \"SONY DSLR-A300\", 0, 0,",
          "8261:     { \"SONY DSLR-A330\", 0, 0,",
          "8263:     { \"SONY DSLR-A350\", 0, 0xffc,",
          "8265:     { \"SONY DSLR-A380\", 0, 0,",
          "8267:     { \"SONY DSLR-A390\", 0, 0,",
          "8269:     { \"SONY DSLR-A450\", 128, 0xfeb,",
          "8271:     { \"SONY DSLR-A580\", 128, 0xfeb,",
          "8273:     { \"SONY DSLR-A5\", 128, 0xfeb,",
          "8275:     { \"SONY DSLR-A700\", 126, 0,",
          "8277:     { \"SONY DSLR-A850\", 128, 0,",
          "8279:     { \"SONY DSLR-A900\", 128, 0,",
          "8282:  { 6129,-1545, -418,-4930,12490,2743,-977,1693,6615 } },",
          "8284:  { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },",
          "8285:     { \"SONY NEX-5N\", 128, 0,",
          "8287:     { \"SONY NEX-5R\", 128, 0,",
          "8291:     { \"SONY NEX-6\", 128, 0,",
          "8293:     { \"SONY NEX-7\", 128, 0,",
          "8297:     { \"SONY SLT-A33\", 128, 0,",
          "8299:     { \"SONY SLT-A35\", 128, 0,",
          "8301:     { \"SONY SLT-A37\", 128, 0,",
          "8303:     { \"SONY SLT-A55\", 128, 0,",
          "8305:     { \"SONY SLT-A57\", 128, 0,",
          "8307:  { \"SONY SLT-A58\", 128, 0,",
          "8309:     { \"SONY SLT-A65\", 128, 0,",
          "8311:     { \"SONY SLT-A77\", 128, 0,",
          "8313:     { \"SONY SLT-A99\", 128, 0,",
          "",
          "[Added Lines]",
          "7893:     { \"Samsung EX1\", 0, 0x3e00,",
          "7895:     { \"Samsung EX2F\", 0, 0x7ff,",
          "7897:     { \"Samsung NX300\", 0, 0,",
          "7898:  { 7557,-2522,-739,-4679,12949,1894,-840,1777,5311 } },",
          "7899:     { \"Samsung NX2000\", 0, 0,",
          "7900:  { 7557,-2522,-739,-4679,12949,1894,-840,1777,5311 } },",
          "7902:  { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },",
          "7903:     { \"Samsung NX1000\", 0, 0,",
          "7905:     { \"Samsung NX1100\", 0, 0,",
          "7909:     { \"Samsung WB2000\", 0, 0xfff,",
          "7911:     { \"Samsung GX-1\", 0, 0,",
          "7917:     { \"Sony DSC-F828\", 0, 0,",
          "7919:     { \"Sony DSC-R1\", 512, 0,",
          "7921:     { \"Sony DSC-V3\", 0, 0,",
          "7923:     { \"Sony DSC-RX100\", 200, 0,",
          "7925:     { \"Sony DSC-RX1\", 128, 0,",
          "7927:     { \"Sony DSLR-A100\", 0, 0xfeb,",
          "7929:     { \"Sony DSLR-A290\", 0, 0,",
          "7931:     { \"Sony DSLR-A2\", 0, 0,",
          "7933:     { \"Sony DSLR-A300\", 0, 0,",
          "7935:     { \"Sony DSLR-A330\", 0, 0,",
          "7937:     { \"Sony DSLR-A350\", 0, 0xffc,",
          "7939:     { \"Sony DSLR-A380\", 0, 0,",
          "7941:     { \"Sony DSLR-A390\", 0, 0,",
          "7943:     { \"Sony DSLR-A450\", 128, 0xfeb,",
          "7945:     { \"Sony DSLR-A580\", 128, 0xfeb,",
          "7947:     { \"Sony DSLR-A5\", 128, 0xfeb,",
          "7949:     { \"Sony DSLR-A700\", 126, 0,",
          "7951:     { \"Sony DSLR-A850\", 128, 0,",
          "7953:     { \"Sony DSLR-A900\", 128, 0,",
          "7955:     { \"Sony NEX-5N\", 128, 0,",
          "7957:     { \"Sony NEX-5R\", 128, 0,",
          "7958:  { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },",
          "7959:     { \"Sony NEX-3N\", 128, 0,",
          "7962:  { 6907,-1256,-645,-4940,12621,2320,-1710,2581,6230 } },",
          "7966:  { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },",
          "7967:     { \"Sony NEX-6\", 128, 0,",
          "7969:     { \"Sony NEX-7\", 128, 0,",
          "7973:     { \"Sony SLT-A33\", 128, 0,",
          "7975:     { \"Sony SLT-A35\", 128, 0,",
          "7977:     { \"Sony SLT-A37\", 128, 0,",
          "7979:     { \"Sony SLT-A55\", 128, 0,",
          "7981:     { \"Sony SLT-A57\", 128, 0,",
          "7983:     { \"Sony SLT-A58\", 128, 0,",
          "7985:     { \"Sony SLT-A65\", 128, 0,",
          "7987:     { \"Sony SLT-A77\", 128, 0,",
          "7989:     { \"Sony SLT-A99\", 128, 0,",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "8410: void CLASS identify()",
          "8411: {",
          "8415:   static const struct {",
          "8418:   } table[] = {",
          "8511:   static const char *corp[] =",
          "8521:   raw_height = raw_width = fuji_width = fuji_layout = cr2_slice[0] = 0;",
          "8522:   maximum = height = width = top_margin = left_margin = 0;",
          "8523:   cdesc[0] = desc[0] = artist[0] = make[0] = model[0] = model2[0] = 0;",
          "",
          "[Removed Lines]",
          "8412:   char head[32], *cp;",
          "8413:   int hlen, flen, fsize, zero_fsize=1, i, c, is_canon;",
          "8414:   struct jhead jh;",
          "8416:     int fsize;",
          "8417:     char t_make[12], t_model[19], withjpeg;",
          "8419:     {    62464, \"Kodak\",    \"DC20\"            ,0 },",
          "8420:     {   124928, \"Kodak\",    \"DC20\"            ,0 },",
          "8421:     {  1652736, \"Kodak\",    \"DCS200\"          ,0 },",
          "8422:     {  4159302, \"Kodak\",    \"C330\"            ,0 },",
          "8423:     {  4162462, \"Kodak\",    \"C330\"            ,0 },",
          "8424:     {   460800, \"Kodak\",    \"C603v\"           ,0 },",
          "8425:     {   614400, \"Kodak\",    \"C603v\"           ,0 },",
          "8426:     {  6163328, \"Kodak\",    \"C603\"            ,0 },",
          "8427:     {  6166488, \"Kodak\",    \"C603\"            ,0 },",
          "8428:     {  9116448, \"Kodak\",    \"C603y\"           ,0 },",
          "8430:     {   787456, \"Creative\", \"PC-CAM 600\"      ,0 },",
          "8431:     {  1138688, \"Minolta\",  \"RD175\"           ,0 },",
          "8432:     {  3840000, \"Foculus\",  \"531C\"            ,0 },",
          "8433:     {   307200, \"Generic\",  \"640x480\"         ,0 },",
          "8434:     {   786432, \"AVT\",      \"F-080C\"          ,0 },",
          "8435:     {  1447680, \"AVT\",      \"F-145C\"          ,0 },",
          "8436:     {  1920000, \"AVT\",      \"F-201C\"          ,0 },",
          "8437:     {  5067304, \"AVT\",      \"F-510C\"          ,0 },",
          "8438:     {  5067316, \"AVT\",      \"F-510C\"          ,0 },",
          "8439:     { 10134608, \"AVT\",      \"F-510C\"          ,0 },",
          "8440:     { 10134620, \"AVT\",      \"F-510C\"          ,0 },",
          "8441:     { 16157136, \"AVT\",      \"F-810C\"          ,0 },",
          "8442:     {  1409024, \"Sony\",     \"XCD-SX910CR\"     ,0 },",
          "8443:     {  2818048, \"Sony\",     \"XCD-SX910CR\"     ,0 },",
          "8444:     {  3884928, \"Micron\",   \"2010\"            ,0 },",
          "8445:     {  6624000, \"Pixelink\", \"A782\"            ,0 },",
          "8446:     { 13248000, \"Pixelink\", \"A782\"            ,0 },",
          "8447:     {  6291456, \"RoverShot\",\"3320AF\"          ,0 },",
          "8448:     {  6553440, \"Canon\",    \"PowerShot A460\"  ,0 },",
          "8449:     {  6653280, \"Canon\",    \"PowerShot A530\"  ,0 },",
          "8450:     {  6573120, \"Canon\",    \"PowerShot A610\"  ,0 },",
          "8451:     {  9219600, \"Canon\",    \"PowerShot A620\"  ,0 },",
          "8452:     {  9243240, \"Canon\",    \"PowerShot A470\"  ,0 },",
          "8453:     { 10341600, \"Canon\",    \"PowerShot A720 IS\",0 },",
          "8454:     { 10383120, \"Canon\",    \"PowerShot A630\"  ,0 },",
          "8455:     { 12945240, \"Canon\",    \"PowerShot A640\"  ,0 },",
          "8456:     { 15636240, \"Canon\",    \"PowerShot A650\"  ,0 },",
          "8457:     {  5298000, \"Canon\",    \"PowerShot SD300\" ,0 },",
          "8458:     {  7710960, \"Canon\",    \"PowerShot S3 IS\" ,0 },",
          "8459:     { 15467760, \"Canon\",    \"PowerShot SX110 IS\",0 },",
          "8460:     { 15534576, \"Canon\",    \"PowerShot SX120 IS\",0 },",
          "8461:     { 18653760, \"Canon\",    \"PowerShot SX20 IS\",0 },",
          "8462:     { 19131120, \"Canon\",    \"PowerShot SX220 HS\",0 },",
          "8463:     { 21936096, \"Canon\",    \"PowerShot SX30 IS\",0 },",
          "8464:     {  5939200, \"OLYMPUS\",  \"C770UZ\"          ,0 },",
          "8471:     {  5865472, \"NIKON\",    \"E4500\"           ,1 },",
          "8473:     {  8998912, \"NIKON\",    \"COOLPIX S6\"      ,1 },",
          "8474:     {  1976352, \"CASIO\",    \"QV-2000UX\"       ,1 },",
          "8475:     {  3217760, \"CASIO\",    \"QV-3*00EX\"       ,1 },",
          "8476:     {  6218368, \"CASIO\",    \"QV-5700\"         ,1 },",
          "8477:     {  6054400, \"CASIO\",    \"QV-R41\"          ,1 },",
          "8478:     {  7530816, \"CASIO\",    \"QV-R51\"          ,1 },",
          "8479:     {  7684000, \"CASIO\",    \"QV-4000\"         ,1 },",
          "8480:     {  2937856, \"CASIO\",    \"EX-S20\"          ,1 },",
          "8481:     {  4948608, \"CASIO\",    \"EX-S100\"         ,1 },",
          "8482:     {  7542528, \"CASIO\",    \"EX-Z50\"          ,1 },",
          "8483:     {  7562048, \"CASIO\",    \"EX-Z500\"         ,1 },",
          "8484:     {  7753344, \"CASIO\",    \"EX-Z55\"          ,1 },",
          "8485:     {  7816704, \"CASIO\",    \"EX-Z60\"          ,1 },",
          "8486:     { 10843712, \"CASIO\",    \"EX-Z75\"          ,1 },",
          "8487:     { 10834368, \"CASIO\",    \"EX-Z750\"         ,1 },",
          "8488:     { 12310144, \"CASIO\",    \"EX-Z850\"         ,1 },",
          "8489:     { 12489984, \"CASIO\",    \"EX-Z8\"           ,1 },",
          "8490:     { 15499264, \"CASIO\",    \"EX-Z1050\"        ,1 },",
          "8491:     { 18702336, \"CASIO\",    \"EX-ZR100\"        ,1 },",
          "8492:     {  7426656, \"CASIO\",    \"EX-P505\"         ,1 },",
          "8493:     {  9313536, \"CASIO\",    \"EX-P600\"         ,1 },",
          "8494:     { 10979200, \"CASIO\",    \"EX-P700\"         ,1 },",
          "8495:     {  3178560, \"PENTAX\",   \"Optio S\"         ,1 },",
          "8496:     {  4841984, \"PENTAX\",   \"Optio S\"         ,1 },",
          "8498:     { 10702848, \"PENTAX\",   \"Optio 750Z\"      ,1 },",
          "8499:     { 15980544, \"AGFAPHOTO\",\"DC-833m\"         ,1 },",
          "8500:     { 16098048, \"SAMSUNG\",  \"S85\"             ,1 },",
          "8501:     { 16215552, \"SAMSUNG\",  \"S85\"             ,1 },",
          "8502:     { 20487168, \"SAMSUNG\",  \"WB550\"           ,1 },",
          "8503:     { 24000000, \"SAMSUNG\",  \"WB550\"           ,1 },",
          "8504:     { 9994240, \"ptGrey\", \"GRAS-50S5C\" ,0 }, // KC: SUPPORT GRASSHOPPER",
          "8505:     { 10075968, \"JaiPulnix\",\"BB-500CL\" ,0 }, // KC: SUPPORT BB-500CL",
          "8506:     { 10108896, \"JaiPulnix\",\"BB-500GE\" ,0 }, // KC: SUPPORT BB-500GE",
          "8507:     { 10036800, \"SVS\", \"SVS625CL\" ,0 }, // KC: SUPPORT SVS625 cameralink",
          "8508:     { 12582980, \"Sinar\",    \"\"                ,0 },",
          "8509:     { 33292868, \"Sinar\",    \"\"                ,0 },",
          "8510:     { 44390468, \"Sinar\",    \"\"                ,0 } };",
          "8512:     { \"Canon\", \"NIKON\", \"EPSON\", \"KODAK\", \"Kodak\", \"OLYMPUS\", \"PENTAX\",",
          "8513:       \"MINOLTA\", \"Minolta\", \"Konica\", \"CASIO\", \"Sinar\", \"Phase One\",",
          "8514:       \"SAMSUNG\", \"Mamiya\", \"MOTOROLA\", \"LEICA\" };",
          "8516: #ifdef LIBRAW_LIBRARY_BUILD",
          "8517:   RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY,0,2);",
          "8518: #endif",
          "",
          "[Added Lines]",
          "8088:   static const short pana[][6] = {",
          "8089:     { 3130, 1743,  4,  0, -6,  0 },",
          "8090:     { 3130, 2055,  4,  0, -6,  0 },",
          "8091:     { 3130, 2319,  4,  0, -6,  0 },",
          "8092:     { 3170, 2103, 18,  0,-42, 20 },",
          "8093:     { 3170, 2367, 18, 13,-42,-21 },",
          "8094:     { 3177, 2367,  0,  0, -1,  0 },",
          "8095:     { 3304, 2458,  0,  0, -1,  0 },",
          "8096:     { 3330, 2463,  9,  0, -5,  0 },",
          "8097:     { 3330, 2479,  9,  0,-17,  4 },",
          "8098:     { 3370, 1899, 15,  0,-44, 20 },",
          "8099:     { 3370, 2235, 15,  0,-44, 20 },",
          "8100:     { 3370, 2511, 15, 10,-44,-21 },",
          "8101:     { 3690, 2751,  3,  0, -8, -3 },",
          "8102:     { 3710, 2751,  0,  0, -3,  0 },",
          "8103:     { 3724, 2450,  0,  0,  0, -2 },",
          "8104:     { 3770, 2487, 17,  0,-44, 19 },",
          "8105:     { 3770, 2799, 17, 15,-44,-19 },",
          "8106:     { 3880, 2170,  6,  0, -6,  0 },",
          "8107:     { 4060, 3018,  0,  0,  0, -2 },",
          "8108:     { 4290, 2391,  3,  0, -8, -1 },",
          "8109:     { 4330, 2439, 17, 15,-44,-19 },",
          "8110:     { 4508, 2962,  0,  0, -3, -4 },",
          "8111:     { 4508, 3330,  0,  0, -3, -6 },",
          "8112:   };",
          "8113:   static const ushort canon[][6] = {",
          "8114:     { 1944, 1416,   0,  0, 48,  0 },",
          "8115:     { 2144, 1560,   4,  8, 52,  2 },",
          "8116:     { 2224, 1456,  48,  6,  0,  2 },",
          "8117:     { 2376, 1728,  12,  6, 52,  2 },",
          "8118:     { 2672, 1968,  12,  6, 44,  2 },",
          "8119:     { 3152, 2068,  64, 12,  0,  0 },",
          "8120:     { 3160, 2344,  44, 12,  4,  4 },",
          "8121:     { 3344, 2484,   4,  6, 52,  6 },",
          "8122:     { 3516, 2328,  42, 14,  0,  0 },",
          "8123:     { 3596, 2360,  74, 12,  0,  0 },",
          "8124:     { 3744, 2784,  52, 12,  8, 12 },",
          "8125:     { 3944, 2622,  30, 18,  6,  2 },",
          "8126:     { 3948, 2622,  42, 18,  0,  2 },",
          "8127:     { 3984, 2622,  76, 20,  0,  2 },",
          "8128:     { 4104, 3048,  48, 12, 24, 12 },",
          "8129:     { 4116, 2178,   4,  2,  0,  0 },",
          "8130:     { 4152, 2772, 192, 12,  0,  0 },",
          "8131:     { 4160, 3124, 104, 11,  8, 65 },",
          "8132:     { 4176, 3062,  96, 17,  8,  0 },",
          "8133:     { 4312, 2876,  22, 18,  0,  2 },",
          "8134:     { 4352, 2874,  62, 18,  0,  0 },",
          "8135:     { 4476, 2954,  90, 34,  0,  0 },",
          "8136:     { 4480, 3348,  12, 10, 36, 12 },",
          "8137:     { 4496, 3366,  80, 50, 12,  0 },",
          "8138:     { 4832, 3204,  62, 26,  0,  0 },",
          "8139:     { 4832, 3228,  62, 51,  0,  0 },",
          "8140:     { 5108, 3349,  98, 13,  0,  0 },",
          "8141:     { 5120, 3318, 142, 45, 62,  0 },",
          "8142:     { 5280, 3528,  72, 52,  0,  0 },",
          "8143:     { 5344, 3516, 142, 51,  0,  0 },",
          "8144:     { 5344, 3584, 126,100,  0,  2 },",
          "8145:     { 5360, 3516, 158, 51,  0,  0 },",
          "8146:     { 5568, 3708,  72, 38,  0,  0 },",
          "8147:     { 5712, 3774,  62, 20, 10,  2 },",
          "8148:     { 5792, 3804, 158, 51,  0,  0 },",
          "8149:     { 5920, 3950, 122, 80,  2,  0 },",
          "8150:   };",
          "8151:   static const struct {",
          "8152:     ushort id;",
          "8153:     char t_model[20];",
          "8154:   } unique[] = {",
          "8155:     { 0x168, \"EOS 10D\" },    { 0x001, \"EOS-1D\" },",
          "8156:     { 0x175, \"EOS 20D\" },    { 0x174, \"EOS-1D Mark II\" },",
          "8157:     { 0x234, \"EOS 30D\" },    { 0x232, \"EOS-1D Mark II N\" },",
          "8158:     { 0x190, \"EOS 40D\" },    { 0x169, \"EOS-1D Mark III\" },",
          "8159:     { 0x261, \"EOS 50D\" },    { 0x281, \"EOS-1D Mark IV\" },",
          "8160:     { 0x287, \"EOS 60D\" },    { 0x167, \"EOS-1DS\" },",
          "8161:     { 0x170, \"EOS 300D\" },   { 0x188, \"EOS-1Ds Mark II\" },",
          "8162:     { 0x176, \"EOS 450D\" },   { 0x215, \"EOS-1Ds Mark III\" },",
          "8163:     { 0x189, \"EOS 350D\" },   { 0x324, \"EOS-1D C\" },",
          "8164:     { 0x236, \"EOS 400D\" },   { 0x269, \"EOS-1D X\" },",
          "8165:     { 0x252, \"EOS 500D\" },   { 0x213, \"EOS 5D\" },",
          "8166:     { 0x270, \"EOS 550D\" },   { 0x218, \"EOS 5D Mark II\" },",
          "8167:     { 0x286, \"EOS 600D\" },   { 0x285, \"EOS 5D Mark III\" },",
          "8168:     { 0x301, \"EOS 650D\" },   { 0x302, \"EOS 6D\" },",
          "8169:     { 0x326, \"EOS 700D\" },   { 0x250, \"EOS 7D\" },",
          "8170:     { 0x254, \"EOS 1000D\" },",
          "8171:     { 0x288, \"EOS 1100D\" },",
          "8172:     { 0x346, \"EOS 100D\" },",
          "8173:   };",
          "8175:     unsigned fsize;",
          "8176:     ushort rw, rh;",
          "8177:     uchar lm, tm, rm, bm, lf, cf, max, flags;",
          "8178:     char t_make[10], t_model[20];",
          "8179:     ushort offset;",
          "8181:     {   786432,1024, 768, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-080C\" },",
          "8182:     {  1447680,1392,1040, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-145C\" },",
          "8183:     {  1920000,1600,1200, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-201C\" },",
          "8184:     {  5067304,2588,1958, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-510C\" },",
          "8185:     {  5067316,2588,1958, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-510C\",12 },",
          "8186:     { 10134608,2588,1958, 0, 0, 0, 0, 9,0x94,0,0,\"AVT\",\"F-510C\" },",
          "8187:     { 10134620,2588,1958, 0, 0, 0, 0, 9,0x94,0,0,\"AVT\",\"F-510C\",12 },",
          "8188:     { 16157136,3272,2469, 0, 0, 0, 0, 9,0x94,0,0,\"AVT\",\"F-810C\" },",
          "8189:     { 15980544,3264,2448, 0, 0, 0, 0, 8,0x61,0,1,\"AgfaPhoto\",\"DC-833m\" },",
          "8190:     {  2868726,1384,1036, 0, 0, 0, 0,64,0x49,0,8,\"Baumer\",\"TXG14\",1078 },",
          "8191:     {  5298000,2400,1766,12,12,44, 2,40,0x94,0,2,\"Canon\",\"PowerShot SD300\" },",
          "8192:     {  6553440,2664,1968, 4, 4,44, 4,40,0x94,0,2,\"Canon\",\"PowerShot A460\" },",
          "8193:     {  6573120,2672,1968,12, 8,44, 0,40,0x94,0,2,\"Canon\",\"PowerShot A610\" },",
          "8194:     {  6653280,2672,1992,10, 6,42, 2,40,0x94,0,2,\"Canon\",\"PowerShot A530\" },",
          "8195:     {  7710960,2888,2136,44, 8, 4, 0,40,0x94,0,2,\"Canon\",\"PowerShot S3 IS\" },",
          "8196:     {  9219600,3152,2340,36,12, 4, 0,40,0x94,0,2,\"Canon\",\"PowerShot A620\" },",
          "8197:     {  9243240,3152,2346,12, 7,44,13,40,0x49,0,2,\"Canon\",\"PowerShot A470\" },",
          "8198:     { 10341600,3336,2480, 6, 5,32, 3,40,0x94,0,2,\"Canon\",\"PowerShot A720 IS\" },",
          "8199:     { 10383120,3344,2484,12, 6,44, 6,40,0x94,0,2,\"Canon\",\"PowerShot A630\" },",
          "8200:     { 12945240,3736,2772,12, 6,52, 6,40,0x94,0,2,\"Canon\",\"PowerShot A640\" },",
          "8201:     { 15636240,4104,3048,48,12,24,12,40,0x94,0,2,\"Canon\",\"PowerShot A650\" },",
          "8202:     { 15467760,3720,2772, 6,12,30, 0,40,0x94,0,2,\"Canon\",\"PowerShot SX110 IS\" },",
          "8203:     { 15534576,3728,2778,12, 9,44, 9,40,0x94,0,2,\"Canon\",\"PowerShot SX120 IS\" },",
          "8204:     { 18653760,4080,3048,24,12,24,12,40,0x94,0,2,\"Canon\",\"PowerShot SX20 IS\" },",
          "8205:     { 19131120,4168,3060,92,16, 4, 1, 8,0x94,0,2,\"Canon\",\"PowerShot SX220 HS\" },",
          "8206:     { 21936096,4464,3276,25,10,73,12,40,0x16,0,2,\"Canon\",\"PowerShot SX30 IS\" },",
          "8207:     { 24724224,4704,3504, 8,16,56, 8,40,0x94,0,2,\"Canon\",\"PowerShot A3300 IS\" },",
          "8208:     {  1976352,1632,1211, 0, 2, 0, 1, 0,0x94,0,1,\"Casio\",\"QV-2000UX\" },",
          "8209:     {  3217760,2080,1547, 0, 0,10, 1, 0,0x94,0,1,\"Casio\",\"QV-3*00EX\" },",
          "8210:     {  6218368,2585,1924, 0, 0, 9, 0, 0,0x94,0,1,\"Casio\",\"QV-5700\" },",
          "8211:     {  7816704,2867,2181, 0, 0,34,36, 0,0x16,0,1,\"Casio\",\"EX-Z60\" },",
          "8212:     {  2937856,1621,1208, 0, 0, 1, 0, 0,0x94,7,13,\"Casio\",\"EX-S20\" },",
          "8213:     {  4948608,2090,1578, 0, 0,32,34, 0,0x94,7,1,\"Casio\",\"EX-S100\" },",
          "8214:     {  6054400,2346,1720, 2, 0,32, 0, 0,0x94,7,1,\"Casio\",\"QV-R41\" },",
          "8215:     {  7426656,2568,1928, 0, 0, 0, 0, 0,0x94,0,1,\"Casio\",\"EX-P505\" },",
          "8216:     {  7530816,2602,1929, 0, 0,22, 0, 0,0x94,7,1,\"Casio\",\"QV-R51\" },",
          "8217:     {  7542528,2602,1932, 0, 0,32, 0, 0,0x94,7,1,\"Casio\",\"EX-Z50\" },",
          "8218:     {  7562048,2602,1937, 0, 0,25, 0, 0,0x16,7,1,\"Casio\",\"EX-Z500\" },",
          "8219:     {  7753344,2602,1986, 0, 0,32,26, 0,0x94,7,1,\"Casio\",\"EX-Z55\" },",
          "8220:     {  9313536,2858,2172, 0, 0,14,30, 0,0x94,7,1,\"Casio\",\"EX-P600\" },",
          "8221:     { 10834368,3114,2319, 0, 0,27, 0, 0,0x94,0,1,\"Casio\",\"EX-Z750\" },",
          "8222:     { 10843712,3114,2321, 0, 0,25, 0, 0,0x94,0,1,\"Casio\",\"EX-Z75\" },",
          "8223:     { 10979200,3114,2350, 0, 0,32,32, 0,0x94,7,1,\"Casio\",\"EX-P700\" },",
          "8224:     { 12310144,3285,2498, 0, 0, 6,30, 0,0x94,0,1,\"Casio\",\"EX-Z850\" },",
          "8225:     { 12489984,3328,2502, 0, 0,47,35, 0,0x94,0,1,\"Casio\",\"EX-Z8\" },",
          "8226:     { 15499264,3754,2752, 0, 0,82, 0, 0,0x94,0,1,\"Casio\",\"EX-Z1050\" },",
          "8227:     { 18702336,4096,3044, 0, 0,24, 0,80,0x94,7,1,\"Casio\",\"EX-ZR100\" },",
          "8228:     {  7684000,2260,1700, 0, 0, 0, 0,13,0x94,0,1,\"Casio\",\"QV-4000\" },",
          "8229:     {   787456,1024, 769, 0, 1, 0, 0, 0,0x49,0,0,\"Creative\",\"PC-CAM 600\" },",
          "8230:     {  3840000,1600,1200, 0, 0, 0, 0,65,0x49,0,0,\"Foculus\",\"531C\" },",
          "8231:     {   307200, 640, 480, 0, 0, 0, 0, 0,0x94,0,0,\"Generic\",\"640x480\" },",
          "8232:     {    62464, 256, 244, 1, 1, 6, 1, 0,0x8d,0,0,\"Kodak\",\"DC20\" },",
          "8233:     {   124928, 512, 244, 1, 1,10, 1, 0,0x8d,0,0,\"Kodak\",\"DC20\" },",
          "8234:     {  1652736,1536,1076, 0,52, 0, 0, 0,0x61,0,0,\"Kodak\",\"DCS200\" },",
          "8235:     {  4159302,2338,1779, 1,33, 1, 2, 0,0x94,0,0,\"Kodak\",\"C330\" },",
          "8236:     {  4162462,2338,1779, 1,33, 1, 2, 0,0x94,0,0,\"Kodak\",\"C330\",3160 },",
          "8237:     {  6163328,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\" },",
          "8238:     {  6166488,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\",3160 },",
          "8239:     {   460800, 640, 480, 0, 0, 0, 0, 0,0x00,0,0,\"Kodak\",\"C603\" },",
          "8240:     {  9116448,2848,2134, 0, 0, 0, 0, 0,0x00,0,0,\"Kodak\",\"C603\" },",
          "8241:     {   614400, 640, 480, 0, 3, 0, 0,64,0x94,0,0,\"Kodak\",\"KAI-0340\" },",
          "8242:     {  3884928,1608,1207, 0, 0, 0, 0,96,0x16,0,0,\"Micron\",\"2010\",3212 },",
          "8243:     {  1138688,1534, 986, 0, 0, 0, 0, 0,0x61,0,0,\"Minolta\",\"RD175\",513 },",
          "8244:     {  1581060,1305, 969, 0, 0,18, 6, 6,0x1e,4,1,\"Nikon\",\"E900\" },",
          "8245:     {  2465792,1638,1204, 0, 0,22, 1, 6,0x4b,5,1,\"Nikon\",\"E950\" },",
          "8246:     {  2940928,1616,1213, 0, 0, 0, 7,30,0x94,0,1,\"Nikon\",\"E2100\" },",
          "8247:     {  4771840,2064,1541, 0, 0, 0, 1, 6,0xe1,0,1,\"Nikon\",\"E990\" },",
          "8248:     {  4775936,2064,1542, 0, 0, 0, 0,30,0x94,0,1,\"Nikon\",\"E3700\" },",
          "8249:     {  5865472,2288,1709, 0, 0, 0, 1, 6,0xb4,0,1,\"Nikon\",\"E4500\" },",
          "8250:     {  5869568,2288,1710, 0, 0, 0, 0, 6,0x16,0,1,\"Nikon\",\"E4300\" },",
          "8251:     {  7438336,2576,1925, 0, 0, 0, 1, 6,0xb4,0,1,\"Nikon\",\"E5000\" },",
          "8252:     {  8998912,2832,2118, 0, 0, 0, 0,30,0x94,7,1,\"Nikon\",\"COOLPIX S6\" },",
          "8253:     {  5939200,2304,1718, 0, 0, 0, 0,30,0x16,0,0,\"Olympus\",\"C770UZ\" },",
          "8254:     {  3178560,2064,1540, 0, 0, 0, 0, 0,0x94,0,1,\"Pentax\",\"Optio S\" },",
          "8255:     {  4841984,2090,1544, 0, 0,22, 0, 0,0x94,7,1,\"Pentax\",\"Optio S\" },",
          "8256:     {  6114240,2346,1737, 0, 0,22, 0, 0,0x94,7,1,\"Pentax\",\"Optio S4\" },",
          "8257:     { 10702848,3072,2322, 0, 0, 0,21,30,0x94,0,1,\"Pentax\",\"Optio 750Z\" },",
          "8258:     { 13248000,2208,3000, 0, 0, 0, 0,13,0x61,0,0,\"Pixelink\",\"A782\" },",
          "8259:     {  6291456,2048,1536, 0, 0, 0, 0,96,0x61,0,0,\"RoverShot\",\"3320AF\" },",
          "8260:     {   311696, 644, 484, 0, 0, 0, 0, 0,0x16,0,8,\"ST Micro\",\"STV680 VGA\" },",
          "8261:     { 16098048,3288,2448, 0, 0,24, 0, 9,0x94,0,1,\"Samsung\",\"S85\" },",
          "8262:     { 16215552,3312,2448, 0, 0,48, 0, 9,0x94,0,1,\"Samsung\",\"S85\" },",
          "8263:     { 20487168,3648,2808, 0, 0, 0, 0,13,0x94,5,1,\"Samsung\",\"WB550\" },",
          "8264:     { 24000000,4000,3000, 0, 0, 0, 0,13,0x94,5,1,\"Samsung\",\"WB550\" },",
          "8265:     { 12582980,3072,2048, 0, 0, 0, 0,33,0x61,0,0,\"Sinar\",\"3072x2048\",68 },",
          "8266:     { 33292868,4080,4080, 0, 0, 0, 0,33,0x61,0,0,\"Sinar\",\"4080x4080\",68 },",
          "8267:     { 44390468,4080,5440, 0, 0, 0, 0,33,0x61,0,0,\"Sinar\",\"4080x5440\",68 },",
          "8268:     {  1409024,1376,1024, 0, 0, 1, 0, 0,0x49,0,0,\"Sony\",\"XCD-SX910CR\" },",
          "8269:     {  2818048,1376,1024, 0, 0, 1, 0,97,0x49,0,0,\"Sony\",\"XCD-SX910CR\" },",
          "8270:   };",
          "8272:     { \"AgfaPhoto\", \"Canon\", \"Casio\", \"Epson\", \"Fujifilm\",",
          "8273:       \"Mamiya\", \"Minolta\", \"Motorola\", \"Kodak\", \"Konica\", \"Leica\",",
          "8274:       \"Nikon\", \"Nokia\", \"Olympus\", \"Pentax\", \"Phase One\", \"Ricoh\",",
          "8275:       \"Samsung\", \"Sigma\", \"Sinar\", \"Sony\" };",
          "8276:   char head[32], *cp;",
          "8277:   int hlen, flen, fsize, zero_fsize=1, i, c;",
          "8278:   struct jhead jh;",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "8559:   } else if (order == 0x4949 || order == 0x4d4d) {",
          "8560:     if (!memcmp (head+6,\"HEAPCCDR\",8)) {",
          "8561:       data_offset = hlen;",
          "8563:     } else if (parse_tiff(0)) apply_tiff();",
          "8564:   } else if (!memcmp (head,\"\\xff\\xd8\\xff\\xe1\",4) &&",
          "8565:       !memcmp (head+6,\"Exif\",4)) {",
          "",
          "[Removed Lines]",
          "8562:       parse_ciff (hlen, flen - hlen);",
          "",
          "[Added Lines]",
          "8322:       parse_ciff (hlen, flen-hlen, 0);",
          "8323:       load_raw = &CLASS canon_load_raw;",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "8642:     load_raw = &CLASS packed_load_raw;",
          "8643:     load_flags = 88;",
          "8644:     filters = 0x61616161;",
          "8645:   } else if (!memcmp (head+4,\"RED1\",4)) {",
          "8648:     parse_redcine();",
          "8649:     load_raw = &CLASS redcine_load_raw;",
          "8650:     gamma_curve (1/2.4, 12.92, 1, 4095);",
          "",
          "[Removed Lines]",
          "8646:     strcpy (make, \"RED\");",
          "8647:     strcpy (model,\"ONE\");",
          "",
          "[Added Lines]",
          "8406:   } else if (!memcmp (head,\"XPDS\",4)) {",
          "8407:     order = 0x4949;",
          "8408:     fseek (ifp, 0x800, SEEK_SET);",
          "8409:     fread (make, 1, 41, ifp);",
          "8410:     raw_height = get2();",
          "8411:     raw_width  = get2();",
          "8412:     fseek (ifp, 56, SEEK_CUR);",
          "8413:     fread (model, 1, 30, ifp);",
          "8414:     data_offset = 0x10000;",
          "8415:     load_raw = &CLASS canon_rmf_load_raw;",
          "8417:     strcpy (make, \"Red\");",
          "8418:     strcpy (model,\"One\");",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "8666:       if (fsize == table[i].fsize) {",
          "8667:  strcpy (make,  table[i].t_make );",
          "8668:  strcpy (model, table[i].t_model);",
          "8670:    parse_external_jpeg();",
          "8671:       }",
          "8672:   if (zero_fsize) fsize = 0;",
          "8673:   if (make[0] == 0) parse_smal (0, flen);",
          "8676:   for (i=0; i < sizeof corp / sizeof *corp; i++)",
          "8682:   (cp = strstr(model,\"FILE VERSION\"))))",
          "",
          "[Removed Lines]",
          "8669:  if (table[i].withjpeg)",
          "8674:   if (make[0] == 0) parse_jpeg (is_raw = 0);",
          "8678:  strcpy (make, corp[i]);",
          "8679:   if (!strncmp (make,\"KODAK\",5) &&",
          "8680:  ((cp = strstr(model,\" DIGITAL CAMERA\")) ||",
          "8681:   (cp = strstr(model,\" Digital Camera\")) ||",
          "",
          "[Added Lines]",
          "8440:  flip = table[i].flags >> 2;",
          "8441:  zero_is_bad = table[i].flags & 2;",
          "8442:  if (table[i].flags & 1)",
          "8444:  data_offset = table[i].offset;",
          "8445:  raw_width   = table[i].rw;",
          "8446:  raw_height  = table[i].rh;",
          "8447:  left_margin = table[i].lm;",
          "8448:   top_margin = table[i].tm;",
          "8449:  width  = raw_width - left_margin - table[i].rm;",
          "8450:  height = raw_height - top_margin - table[i].bm;",
          "8451:  filters = 0x1010101 * table[i].cf;",
          "8452:  colors = 4 - !((filters & filters >> 1) & 0x5555);",
          "8453:  load_flags = table[i].lf;",
          "8454:  switch (tiff_bps = (fsize-data_offset)*8 / (raw_width*raw_height)) {",
          "8455:    case 6:",
          "8456:      load_raw = &CLASS minolta_rd175_load_raw;  break;",
          "8457:    case  8:",
          "8458:      load_raw = &CLASS eight_bit_load_raw;  break;",
          "8459:    case 10: case 12:",
          "8460:      load_flags |= 128;",
          "8461:      load_raw = &CLASS packed_load_raw;     break;",
          "8462:    case 16:",
          "8463:      order = 0x4949 | 0x404 * (load_flags & 1);",
          "8464:      tiff_bps -= load_flags >> 4;",
          "8465:      tiff_bps -= load_flags = load_flags >> 1 & 7;",
          "8466:      load_raw = &CLASS unpacked_load_raw;",
          "8467:  }",
          "8468:  maximum = (1 << tiff_bps) - (1 << table[i].max);",
          "8472:   if (make[0] == 0) {",
          "8473:     parse_jpeg(0);",
          "8474:     fseek(ifp,0,SEEK_END);",
          "8475:     int sz = ftell(ifp);",
          "8476:     if (!strncmp(model,\"ov\",2) && sz>=6404096 && !fseek (ifp, -6404096, SEEK_END) &&",
          "8477:  fread (head, 1, 32, ifp) && !strcmp(head,\"BRCMn\")) {",
          "8478:       strcpy (make, \"OmniVision\");",
          "8479:       data_offset = ftell(ifp) + 0x8000-32;",
          "8480:       width = raw_width;",
          "8481:       raw_width = 2611;",
          "8482:       load_raw = &CLASS nokia_load_raw;",
          "8483:       filters = 0x16161616;",
          "8484:     } else is_raw = 0;",
          "8485:   }",
          "8489:      strcpy (make, corp[i]);",
          "8490:   if ((!strcmp(make,\"Kodak\") || !strcmp(make,\"Leica\")) &&",
          "8491:  ((cp = strcasestr(model,\" DIGITAL CAMERA\")) ||",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "8705:     {   width  = 4309; filters = 0x16161616; }",
          "8706:   if (width >= 4960 && !strncmp(model,\"K-5\",3))",
          "8707:     { left_margin = 10; width  = 4950; filters = 0x16161616; }",
          "8710:   if (width == 4736 && !strcmp(model,\"K-7\"))",
          "8711:     { height  = 3122;   width  = 4684; filters = 0x16161616; top_margin = 2; }",
          "8712:   if (width == 7424 && !strcmp(model,\"645D\"))",
          "",
          "[Removed Lines]",
          "8708:   if (width >= 4960 && !strncmp(model,\"K-5 II\",6))",
          "8709:     { left_margin = 10; width  = 4948; filters = 0x16161616; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "8718:     if (filters == UINT_MAX) filters = 0;",
          "8719:     if (filters) is_raw = tiff_samples;",
          "8720:     else  colors = tiff_samples;",
          "8725:     goto dng_skip;",
          "8726:   }",
          "8731:     if (!load_raw)",
          "8732:       load_raw = &CLASS packed_load_raw;",
          "8733:     if (model[0] == 'E')",
          "8734:       load_flags |= !data_offset << 2 | 2;",
          "8735:   }",
          "8743:   if (is_foveon) {",
          "8744:     if (height*2 < width) pixel_aspect = 0.5;",
          "8745:     if (height   > width) pixel_aspect = 2;",
          "8746:     filters = 0;",
          "8747:     simple_coeff(0);",
          "8749:     switch (width) {",
          "8750:       case 3344: width -= 66;",
          "8751:       case 3872: width -= 6;",
          "8752:     }",
          "8753:     if (height > width) SWAP(height,width);",
          "8754:     filters = 0;",
          "8755:     load_raw = &CLASS canon_sraw_load_raw;",
          "8756:   } else if (!strcmp(model,\"PowerShot 600\")) {",
          "8757:     height = 613;",
          "8758:     width  = 854;",
          "8759:     raw_width = 896;",
          "8761:     colors = 4;",
          "8762:     filters = 0xe1e4e1e4;",
          "8763:     load_raw = &CLASS canon_600_load_raw;",
          "",
          "[Removed Lines]",
          "8721:     if (tiff_compress == 1)",
          "8722:       load_raw = &CLASS packed_dng_load_raw;",
          "8723:     if (tiff_compress == 7)",
          "8724:       load_raw = &CLASS lossless_dng_load_raw;",
          "8727:   if ((is_canon = !strcmp(make,\"Canon\")))",
          "8728:     load_raw = memcmp (head+6,\"HEAPCCDR\",8) ?",
          "8729:  &CLASS lossless_jpeg_load_raw : &CLASS canon_load_raw;",
          "8730:   if (!strcmp(make,\"NIKON\")) {",
          "8736:   if (!strcmp(make,\"CASIO\")) {",
          "8737:     load_raw = &CLASS packed_load_raw;",
          "8738:     maximum = 0xf7f;",
          "8739:   }",
          "8748:   } else if (is_canon && tiff_bps == 15) {",
          "8760:     pixel_aspect = 607/628.0;",
          "",
          "[Added Lines]",
          "8529:     switch (tiff_compress) {",
          "8530:       case 1:     load_raw = &CLASS   packed_dng_load_raw;  break;",
          "8531:       case 7:     load_raw = &CLASS lossless_dng_load_raw;  break;",
          "8532:       case 34892: load_raw = &CLASS    lossy_dng_load_raw;  break;",
          "8533:       default:    load_raw = 0;",
          "8534:     }",
          "8537:   if (!strcmp(make,\"Canon\") && !fsize && tiff_bps != 15) {",
          "8538:     if (!load_raw)",
          "8539:       load_raw = &CLASS lossless_jpeg_load_raw;",
          "8540:     for (i=0; i < sizeof canon / sizeof *canon; i++)",
          "8541:       if (raw_width == canon[i][0] && raw_height == canon[i][1]) {",
          "8542:  width  = raw_width - (left_margin = canon[i][2]);",
          "8543:  height = raw_height - (top_margin = canon[i][3]);",
          "8544:  width  -= canon[i][4];",
          "8545:  height -= canon[i][5];",
          "8546:       }",
          "8547:     if ((unique_id | 0x20000) == 0x2720000) {",
          "8548:       left_margin = 8;",
          "8549:       top_margin = 16;",
          "8550:     }",
          "8551:   }",
          "8552:   for (i=0; i < sizeof unique / sizeof *unique; i++)",
          "8553:     if (unique_id == 0x80000000 + unique[i].id)",
          "8554:       adobe_coeff (\"Canon\", unique[i].t_model);",
          "8555:   if (!strcmp(make,\"Nikon\")) {",
          "8564:   if (!strcmp(model,\"KAI-0340\")",
          "8565:  && find_green (16, 16, 3840, 5120) < 25) {",
          "8566:     height = 480;",
          "8567:     top_margin = filters = 0;",
          "8568:     strcpy (model,\"C603\");",
          "8569:   }",
          "8575:   } else if (!strcmp(make,\"Canon\") && tiff_bps == 15) {",
          "8582:     tiff_samples = colors = 3;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "8767:     width  = 960;",
          "8768:     raw_width = 992;",
          "8769:     pixel_aspect = 256/235.0;",
          "8771:     filters = 0x1e4e1e4e;",
          "8772:     goto canon_a5;",
          "8773:   } else if (!strcmp(model,\"PowerShot A50\")) {",
          "8774:     height =  968;",
          "8775:     width  = 1290;",
          "8776:     raw_width = 1320;",
          "8778:     filters = 0x1b4e4b1e;",
          "8779:     goto canon_a5;",
          "8780:   } else if (!strcmp(model,\"PowerShot Pro70\")) {",
          "8781:     height = 1024;",
          "8782:     width  = 1552;",
          "8784:     filters = 0x1e4b4e1b;",
          "8874: canon_a5:",
          "8875:     tiff_bps = 10;",
          "8876:     load_raw = &CLASS packed_load_raw;",
          "8877:     load_flags = 40;",
          "8910:   } else if (!strcmp(model,\"PowerShot SX220 HS\")) {",
          "8915:     mask[0][0] = top_margin = 16;",
          "8916:     mask[0][2] = top_margin + height;",
          "8917:     mask[0][3] = left_margin = 92;",
          "8921:   } else if (!strcmp(model,\"PowerShot SX50 HS\")) {",
          "9041:     mask[0][0] = top_margin = 17;",
          "9042:     mask[0][2] = raw_height;",
          "9043:     mask[0][3] = 80;",
          "9044:     filters = 0x49494949;",
          "9067:     filters = 0x49494949;",
          "9131:   } else if (!strcmp(model,\"D1\")) {",
          "9132:     cam_mul[0] *= 256/527.0;",
          "9133:     cam_mul[2] *= 256/317.0;",
          "",
          "[Removed Lines]",
          "8770:     colors = 4;",
          "8777:     colors = 4;",
          "8783:     colors = 4;",
          "8785:     goto canon_a5;",
          "8786:   } else if (!strcmp(model,\"PowerShot SD300\")) {",
          "8787:     height = 1752;",
          "8788:     width  = 2344;",
          "8789:     raw_height = 1766;",
          "8790:     raw_width  = 2400;",
          "8791:     top_margin  = 12;",
          "8792:     left_margin = 12;",
          "8793:     goto canon_a5;",
          "8794:   } else if (!strcmp(model,\"PowerShot A460\")) {",
          "8795:     height = 1960;",
          "8796:     width  = 2616;",
          "8797:     raw_height = 1968;",
          "8798:     raw_width  = 2664;",
          "8799:     top_margin  = 4;",
          "8800:     left_margin = 4;",
          "8801:     goto canon_a5;",
          "8802:   } else if (!strcmp(model,\"PowerShot A530\")) {",
          "8803:     height = 1984;",
          "8804:     width  = 2620;",
          "8805:     raw_height = 1992;",
          "8806:     raw_width  = 2672;",
          "8807:     top_margin  = 6;",
          "8808:     left_margin = 10;",
          "8809:     goto canon_a5;",
          "8810:   } else if (!strcmp(model,\"PowerShot A610\")) {",
          "8811:     if (canon_s2is()) strcpy (model+10, \"S2 IS\");",
          "8812:     height = 1960;",
          "8813:     width  = 2616;",
          "8814:     raw_height = 1968;",
          "8815:     raw_width  = 2672;",
          "8816:     top_margin  = 8;",
          "8817:     left_margin = 12;",
          "8818:     goto canon_a5;",
          "8819:   } else if (!strcmp(model,\"PowerShot A620\")) {",
          "8820:     height = 2328;",
          "8821:     width  = 3112;",
          "8822:     raw_height = 2340;",
          "8823:     raw_width  = 3152;",
          "8824:     top_margin  = 12;",
          "8825:     left_margin = 36;",
          "8826:     goto canon_a5;",
          "8827:   } else if (!strcmp(model,\"PowerShot A470\")) {",
          "8828:     height = 2328;",
          "8829:     width  = 3096;",
          "8830:     raw_height = 2346;",
          "8831:     raw_width  = 3152;",
          "8832:     top_margin  = 6;",
          "8833:     left_margin = 12;",
          "8834:     goto canon_a5;",
          "8835:   } else if (!strcmp(model,\"PowerShot A720 IS\")) {",
          "8836:     height = 2472;",
          "8837:     width  = 3298;",
          "8838:     raw_height = 2480;",
          "8839:     raw_width  = 3336;",
          "8840:     top_margin  = 5;",
          "8841:     left_margin = 6;",
          "8842:     goto canon_a5;",
          "8843:   } else if (!strcmp(model,\"PowerShot A630\")) {",
          "8844:     height = 2472;",
          "8845:     width  = 3288;",
          "8846:     raw_height = 2484;",
          "8847:     raw_width  = 3344;",
          "8848:     top_margin  = 6;",
          "8849:     left_margin = 12;",
          "8850:     goto canon_a5;",
          "8851:   } else if (!strcmp(model,\"PowerShot A640\")) {",
          "8852:     height = 2760;",
          "8853:     width  = 3672;",
          "8854:     raw_height = 2772;",
          "8855:     raw_width  = 3736;",
          "8856:     top_margin  = 6;",
          "8857:     left_margin = 12;",
          "8858:     goto canon_a5;",
          "8859:   } else if (!strcmp(model,\"PowerShot A650\")) {",
          "8860:     height = 3024;",
          "8861:     width  = 4032;",
          "8862:     raw_height = 3048;",
          "8863:     raw_width  = 4104;",
          "8864:     top_margin  = 12;",
          "8865:     left_margin = 48;",
          "8866:     goto canon_a5;",
          "8867:   } else if (!strcmp(model,\"PowerShot S3 IS\")) {",
          "8868:     height = 2128;",
          "8869:     width  = 2840;",
          "8870:     raw_height = 2136;",
          "8871:     raw_width  = 2888;",
          "8872:     top_margin  = 8;",
          "8873:     left_margin = 44;",
          "8878:     if (raw_width > 1600) zero_is_bad = 1;",
          "8879:   } else if (!strcmp(model,\"PowerShot SX110 IS\")) {",
          "8880:     height = 2760;",
          "8881:     width  = 3684;",
          "8882:     raw_height = 2772;",
          "8883:     raw_width  = 3720;",
          "8884:     top_margin  = 12;",
          "8885:     left_margin = 6;",
          "8886:     load_raw = &CLASS packed_load_raw;",
          "8887:     load_flags = 40;",
          "8888:     zero_is_bad = 1;",
          "8889:   } else if (!strcmp(model,\"PowerShot SX120 IS\")) {",
          "8890:     height = 2742;",
          "8891:     width  = 3664;",
          "8892:     raw_height = 2778;",
          "8893:     raw_width  = 3728;",
          "8894:     top_margin  = 18;",
          "8895:     left_margin = 16;",
          "8896:     filters = 0x49494949;",
          "8897:     load_raw = &CLASS packed_load_raw;",
          "8898:     load_flags = 40;",
          "8899:     zero_is_bad = 1;",
          "8900:   } else if (!strcmp(model,\"PowerShot SX20 IS\")) {",
          "8901:     height = 3024;",
          "8902:     width  = 4032;",
          "8903:     raw_height = 3048;",
          "8904:     raw_width  = 4080;",
          "8905:     top_margin  = 12;",
          "8906:     left_margin = 24;",
          "8907:     load_raw = &CLASS packed_load_raw;",
          "8908:     load_flags = 40;",
          "8909:     zero_is_bad = 1;",
          "8911:     height = 3043;",
          "8912:     width  = 4072;",
          "8913:     raw_height = 3060;",
          "8914:     raw_width  = 4168;",
          "8918:     load_raw = &CLASS packed_load_raw;",
          "8919:     load_flags = 8;",
          "8920:     zero_is_bad = 1;",
          "8922:     top_margin=16;",
          "8923:     left_margin=94;",
          "8924:     height = 3043;",
          "8925:     width  = 4072;",
          "8926:   } else if (!strcmp(model,\"PowerShot SX30 IS\")) {",
          "8927:     height = 3254;",
          "8928:     width  = 4366;",
          "8929:     raw_height = 3276;",
          "8930:     raw_width  = 4464;",
          "8931:     top_margin  = 10;",
          "8932:     left_margin = 25;",
          "8933:     filters = 0x16161616;",
          "8934:     load_raw = &CLASS packed_load_raw;",
          "8935:     load_flags = 40;",
          "8936:     zero_is_bad = 1;",
          "8937:   } else if (!strcmp(model,\"PowerShot Pro90 IS\")) {",
          "8938:     width  = 1896;",
          "8939:     colors = 4;",
          "8940:     filters = 0xb4b4b4b4;",
          "8941:   } else if (is_canon && raw_width == 2144) {",
          "8942:     height = 1550;",
          "8943:     width  = 2088;",
          "8944:     top_margin  = 8;",
          "8945:     left_margin = 4;",
          "8946:     if (!strcmp(model,\"PowerShot G1\")) {",
          "8947:       colors = 4;",
          "8948:       filters = 0xb4b4b4b4;",
          "8949:     }",
          "8950:   } else if (is_canon && raw_width == 2224) {",
          "8951:     height = 1448;",
          "8952:     width  = 2176;",
          "8953:     top_margin  = 6;",
          "8954:     left_margin = 48;",
          "8955:   } else if (is_canon && raw_width == 2376) {",
          "8956:     height = 1720;",
          "8957:     width  = 2312;",
          "8958:     top_margin  = 6;",
          "8959:     left_margin = 12;",
          "8960:   } else if (is_canon && raw_width == 2672) {",
          "8961:     height = 1960;",
          "8962:     width  = 2616;",
          "8963:     top_margin  = 6;",
          "8964:     left_margin = 12;",
          "8965:   } else if (is_canon && raw_width == 3152) {",
          "8966:     height = 2056;",
          "8967:     width  = 3088;",
          "8968:     top_margin  = 12;",
          "8969:     left_margin = 64;",
          "8970:     if (unique_id == 0x80000170)",
          "8971:       adobe_coeff (\"Canon\",\"EOS 300D\");",
          "8972:   } else if (is_canon && raw_width == 3160) {",
          "8973:     height = 2328;",
          "8974:     width  = 3112;",
          "8975:     top_margin  = 12;",
          "8976:     left_margin = 44;",
          "8977:   } else if (is_canon && raw_width == 3344) {",
          "8978:     height = 2472;",
          "8979:     width  = 3288;",
          "8980:     top_margin  = 6;",
          "8981:     left_margin = 4;",
          "8982:   } else if (!strcmp(model,\"EOS D2000C\")) {",
          "8983:     filters = 0x61616161;",
          "8984:     black = curve[200];",
          "8985:   } else if (is_canon && raw_width == 3516) {",
          "8986:     top_margin  = 14;",
          "8987:     left_margin = 42;",
          "8988:     if (unique_id == 0x80000189)",
          "8989:       adobe_coeff (\"Canon\",\"EOS 350D\");",
          "8990:     goto canon_cr2;",
          "8991:   } else if (is_canon && raw_width == 3596) {",
          "8992:     top_margin  = 12;",
          "8993:     left_margin = 74;",
          "8994:     goto canon_cr2;",
          "8995:   } else if (is_canon && raw_width == 3744) {",
          "8996:     height = 2760;",
          "8997:     width  = 3684;",
          "8998:     top_margin  = 16;",
          "8999:     left_margin = 8;",
          "9000:     if (unique_id > 0x2720000) {",
          "9001:       top_margin  = 12;",
          "9002:       left_margin = 52;",
          "9003:     }",
          "9004:   } else if (is_canon && raw_width == 3944) {",
          "9005:     height = 2602;",
          "9006:     width  = 3908;",
          "9007:     top_margin  = 18;",
          "9008:     left_margin = 30;",
          "9009:   } else if (is_canon && raw_width == 3948) {",
          "9010:     top_margin  = 18;",
          "9011:     left_margin = 42;",
          "9012:     height -= 2;",
          "9013:     if (unique_id == 0x80000236)",
          "9014:       adobe_coeff (\"Canon\",\"EOS 400D\");",
          "9015:     if (unique_id == 0x80000254)",
          "9016:       adobe_coeff (\"Canon\",\"EOS 1000D\");",
          "9017:     goto canon_cr2;",
          "9018:   } else if (is_canon && raw_width == 3984) {",
          "9019:     top_margin  = 20;",
          "9020:     left_margin = 76;",
          "9021:     height -= 2;",
          "9022:     goto canon_cr2;",
          "9023:   } else if (is_canon && raw_width == 4104) {",
          "9024:     height = 3024;",
          "9025:     width  = 4032;",
          "9026:     top_margin  = 12;",
          "9027:     left_margin = 48;",
          "9028:   } else if (is_canon && raw_width == 4152) {",
          "9029:     top_margin  = 12;",
          "9030:     left_margin = 192;",
          "9031:     goto canon_cr2;",
          "9032:   } else if (is_canon && raw_width == 4160) {",
          "9033:     height = 3048;",
          "9034:     width  = 4048;",
          "9035:     top_margin  = 11;",
          "9036:     left_margin = 104;",
          "9037:   } else if (is_canon && raw_width == 4176) {",
          "9038:     height = 3045;",
          "9039:     width  = 4072;",
          "9040:     left_margin = 96;",
          "9045:   } else if (is_canon && raw_width == 4312) {",
          "9046:     top_margin  = 18;",
          "9047:     left_margin = 22;",
          "9048:     height -= 2;",
          "9049:     if (unique_id == 0x80000176)",
          "9050:       adobe_coeff (\"Canon\",\"EOS 450D\");",
          "9051:     goto canon_cr2;",
          "9052:   } else if (is_canon && raw_width == 4352) {",
          "9053:     top_margin  = 18;",
          "9054:     left_margin = 62;",
          "9055:     if (unique_id == 0x80000288)",
          "9056:       adobe_coeff (\"Canon\",\"EOS 1100D\");",
          "9057:     goto canon_cr2;",
          "9058:   } else if (is_canon && raw_width == 4476) {",
          "9059:     top_margin  = 34;",
          "9060:     left_margin = 90;",
          "9061:     goto canon_cr2;",
          "9062:   } else if (is_canon && raw_width == 4480) {",
          "9063:     height = 3326;",
          "9064:     width  = 4432;",
          "9065:     top_margin  = 10;",
          "9066:     left_margin = 12;",
          "9068:   } else if (is_canon && raw_width == 4496) {",
          "9069:     height = 3316;",
          "9070:     width  = 4404;",
          "9071:     top_margin  = 50;",
          "9072:     left_margin = 80;",
          "9073:   } else if (is_canon && raw_width == 4832) {",
          "9074:     top_margin = unique_id == 0x80000261 ? 51:26;",
          "9075:     left_margin = 62;",
          "9076:     if (unique_id == 0x80000252)",
          "9077:       adobe_coeff (\"Canon\",\"EOS 500D\");",
          "9078:     goto canon_cr2;",
          "9079:   } else if (is_canon && raw_width == 5108) {",
          "9080:     top_margin  = 13;",
          "9081:     left_margin = 98;",
          "9082:     goto canon_cr2;",
          "9083:   } else if (is_canon && raw_width == 5120) {",
          "9084:     height -= top_margin = 45;",
          "9085:     left_margin = 142;",
          "9086:     width = 4916;",
          "9087:   } else if (is_canon && raw_width == 5280) {",
          "9088:     top_margin  = 52;",
          "9089:     left_margin = 72;",
          "9090:     if (unique_id == 0x80000301)",
          "9091:       adobe_coeff (\"Canon\",\"EOS 650D\");",
          "9092:     goto canon_cr2;",
          "9093:   } else if (is_canon && raw_width == 5344) {",
          "9094:     top_margin = 51;",
          "9095:     left_margin = 142;",
          "9096:     if (unique_id == 0x80000269) {",
          "9097:       top_margin = 100;",
          "9098:       left_margin = 126;",
          "9099:       height -= 2;",
          "9100:       adobe_coeff (\"Canon\",\"EOS-1D X\");",
          "9101:     }",
          "9102:     if (unique_id == 0x80000270)",
          "9103:       adobe_coeff (\"Canon\",\"EOS 550D\");",
          "9104:     if (unique_id == 0x80000286)",
          "9105:       adobe_coeff (\"Canon\",\"EOS 600D\");",
          "9106:     goto canon_cr2;",
          "9107:   } else if (is_canon && raw_width == 5360) {",
          "9108:     top_margin = 51;",
          "9109:     left_margin = 158;",
          "9110:     goto canon_cr2;",
          "9111:   } else if (is_canon && raw_width == 5568) {",
          "9112:     top_margin = 38;",
          "9113:     left_margin = 72;",
          "9114:     goto canon_cr2;",
          "9115:   } else if (is_canon && raw_width == 5712) {",
          "9116:     height = 3752;",
          "9117:     width  = 5640;",
          "9118:     top_margin  = 20;",
          "9119:     left_margin = 62;",
          "9120:   } else if (is_canon && raw_width == 5792) {",
          "9121:     top_margin  = 51;",
          "9122:     left_margin = 158;",
          "9123: canon_cr2:",
          "9124:     height -= top_margin;",
          "9125:     width  -= left_margin;",
          "9126:   } else if (is_canon && raw_width == 5920) {",
          "9127:     height = 3870;",
          "9128:     width  = 5796;",
          "9129:     top_margin  = 80;",
          "9130:     left_margin = 122;",
          "",
          "[Added Lines]",
          "8610:     colors = 4;",
          "8614:   } else if (!strcmp(model,\"PowerShot Pro90 IS\") ||",
          "8615:       !strcmp(model,\"PowerShot G1\")) {",
          "8616:     colors = 4;",
          "8617:     filters = 0xb4b4b4b4;",
          "8618:   } else if (!strcmp(model,\"PowerShot A610\")) {",
          "8619:     if (canon_s2is()) strcpy (model+10, \"S2 IS\");",
          "8629:   } else if (!strcmp(model,\"PowerShot G10\")) {",
          "8631:   } else if (!strcmp(model,\"EOS D2000C\")) {",
          "8632:     filters = 0x61616161;",
          "8633:     black = curve[200];",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "9152:       !strcmp(model,\"D90\")) {",
          "9153:     width -= 42;",
          "9154:   } else if (!strcmp(model,\"D5100\") ||",
          "9156:     width -= 44;",
          "9157:   } else if (!strcmp(model,\"D3200\") ||",
          "9159:       !strcmp(model,\"D600\")  ||",
          "9161:     width -= 46;",
          "9162:   } else if (!strcmp(model,\"D4\")) {",
          "9163:     width -= 52;",
          "9164:     left_margin = 2;",
          "9167:   } else if (!strncmp(model,\"D40\",3) ||",
          "9168:       !strncmp(model,\"D50\",3) ||",
          "9169:       !strncmp(model,\"D70\",3)) {",
          "",
          "[Removed Lines]",
          "9155:       !strcmp(model,\"D7000\")) {",
          "9158:       !strcmp(model,\"D800E\") ||",
          "9160:       !strcmp(model,\"D800\")) {",
          "9165:   } else if (!strcmp(model,\"D600\")) {",
          "9166:     width -= 48;",
          "",
          "[Added Lines]",
          "8658:       !strcmp(model,\"D7000\") ||",
          "8659:       !strcmp(model,\"COOLPIX A\")) {",
          "8663:      !strncmp(model,\"D800\",4)) {",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "9183:     else width -= 8;",
          "9184:   } else if (!strncmp(model,\"D300\",4)) {",
          "9185:     width -= 32;",
          "9188:   } else if (!strncmp(model,\"COOLPIX P\",9)) {",
          "9189:     load_flags = 24;",
          "9190:     filters = 0x94949494;",
          "9191:     if (model[9] == '7' && iso_speed >= 400)",
          "9192:       black = 255;",
          "9195:   } else if (!strncmp(model,\"1 \",2)) {",
          "9196:     height -= 2;",
          "9197:   } else if (fsize == 1581060) {",
          "9204:     simple_coeff(3);",
          "9205:     pre_mul[0] = 1.2085;",
          "9206:     pre_mul[1] = 1.0943;",
          "9207:     pre_mul[3] = 1.1103;",
          "9220:   } else if (fsize == 4771840) {",
          "9227:     if (!timestamp && nikon_e995())",
          "9228:       strcpy (model, \"E995\");",
          "9229:     if (strcmp(model,\"E995\")) {",
          "",
          "[Removed Lines]",
          "9186:   } else if (!strcmp(make,\"NIKON\") && raw_width == 4032) {",
          "9187:     adobe_coeff (\"NIKON\",\"COOLPIX P7700\");",
          "9193:   } else if (!strncmp(model,\"COOLPIX A\",9) && raw_width == 4992) {",
          "9194:    width = 4948;",
          "9198:     height = 963;",
          "9199:     width = 1287;",
          "9200:     raw_width = 1632;",
          "9201:     maximum = 0x3f4;",
          "9202:     colors = 4;",
          "9203:     filters = 0x1e1e1e1e;",
          "9208:     goto e900;",
          "9209:   } else if (fsize == 2465792) {",
          "9210:     height = 1203;",
          "9211:     width  = 1616;",
          "9212:     raw_width = 2048;",
          "9213:     colors = 4;",
          "9214:     filters = 0x4b4b4b4b;",
          "9215:     adobe_coeff (\"NIKON\",\"E950\");",
          "9216: e900:",
          "9217:     tiff_bps = 10;",
          "9218:     load_raw = &CLASS packed_load_raw;",
          "9219:     load_flags = 6;",
          "9221:     height = 1540;",
          "9222:     width  = 2064;",
          "9223:     colors = 4;",
          "9224:     filters = 0xe1e1e1e1;",
          "9225:     load_raw = &CLASS packed_load_raw;",
          "9226:     load_flags = 6;",
          "",
          "[Added Lines]",
          "8687:   } else if (!strcmp(make,\"Nikon\") && raw_width == 4032) {",
          "8688:     adobe_coeff (\"Nikon\",\"COOLPIX P7700\");",
          "8701:   } else if (fsize == 3178560) {",
          "8702:     cam_mul[0] *= 4;",
          "8703:     cam_mul[2] *= 4;",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "9233:       pre_mul[1] = 1.246;",
          "9234:       pre_mul[2] = 1.018;",
          "9235:     }",
          "9248:   } else if (fsize == 4775936) {",
          "9253:     if (!timestamp) nikon_3700();",
          "9254:     if (model[0] == 'E' && atoi(model+1) < 3700)",
          "9255:       filters = 0x49494949;",
          "",
          "[Removed Lines]",
          "9236:   } else if (!strcmp(model,\"E2100\")) {",
          "9237:     if (!timestamp && !nikon_e2100()) goto cp_e2500;",
          "9238:     height = 1206;",
          "9239:     width  = 1616;",
          "9240:     load_flags = 30;",
          "9241:   } else if (!strcmp(model,\"E2500\")) {",
          "9242: cp_e2500:",
          "9243:     strcpy (model, \"E2500\");",
          "9244:     height = 1204;",
          "9245:     width  = 1616;",
          "9246:     colors = 4;",
          "9247:     filters = 0x4b4b4b4b;",
          "9249:     height = 1542;",
          "9250:     width  = 2064;",
          "9251:     load_raw = &CLASS packed_load_raw;",
          "9252:     load_flags = 30;",
          "",
          "[Added Lines]",
          "8714:   } else if (fsize == 2940928) {",
          "8715:     if (!timestamp && !nikon_e2100())",
          "8716:       strcpy (model,\"E2500\");",
          "8717:     if (!strcmp(model,\"E2500\")) {",
          "8718:       height -= 2;",
          "8719:       load_flags = 6;",
          "8720:       colors = 4;",
          "8721:       filters = 0x4b4b4b4b;",
          "8722:     }",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "9267:       if (i < 0) filters = 0x61616161;",
          "9268:     }",
          "9269:   } else if (fsize == 5869568) {",
          "9273:     if (!timestamp && minolta_z2()) {",
          "9274:       strcpy (make, \"Minolta\");",
          "9275:       strcpy (model,\"DiMAGE Z2\");",
          "9276:     }",
          "9278:     load_flags = 6 + 24*(make[0] == 'M');",
          "9296:     if (!strcmp(model+7,\"S2Pro\")) {",
          "9297:       strcpy (model,\"S2Pro\");",
          "9298:       height = 2144;",
          "",
          "[Removed Lines]",
          "9270:     height = 1710;",
          "9271:     width  = 2288;",
          "9272:     filters = 0x16161616;",
          "9277:     load_raw = &CLASS packed_load_raw;",
          "9279:   } else if (!strcmp(model,\"E4500\")) {",
          "9280:     height = 1708;",
          "9281:     width  = 2288;",
          "9282:     colors = 4;",
          "9283:     filters = 0xb4b4b4b4;",
          "9284:   } else if (fsize == 7438336) {",
          "9285:     height = 1924;",
          "9286:     width  = 2576;",
          "9287:     colors = 4;",
          "9288:     filters = 0xb4b4b4b4;",
          "9289:   } else if (fsize == 8998912) {",
          "9290:     height = 2118;",
          "9291:     width  = 2832;",
          "9292:     maximum = 0xf83;",
          "9293:     load_raw = &CLASS packed_load_raw;",
          "9294:     load_flags = 30;",
          "9295:   } else if (!strcmp(make,\"FUJIFILM\")) {",
          "",
          "[Added Lines]",
          "8746:   } else if (fsize == 6291456) {",
          "8747:     fseek (ifp, 0x300000, SEEK_SET);",
          "8748:     if ((order = guess_byte_order(0x10000)) == 0x4d4d) {",
          "8749:       height -= (top_margin = 16);",
          "8750:       width -= (left_margin = 28);",
          "8751:       maximum = 0xf5c0;",
          "8752:       strcpy (make, \"ISG\");",
          "8753:       model[0] = 0;",
          "8754:     }",
          "8755:   } else if (!strcmp(make,\"Fujifilm\")) {",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "9302:       maximum = (is_raw == 2 && shot_select) ? 0x2f00 : 0x3e00;",
          "9303:     top_margin = (raw_height - height) >> 2 << 1;",
          "9304:     left_margin = (raw_width - width ) >> 2 << 1;",
          "9311:       left_margin = 0;",
          "9313:     }",
          "9341:     if (fuji_layout) raw_width *= is_raw;",
          "9348:   } else if (!strcmp(model,\"KD-400Z\")) {",
          "9349:     height = 1712;",
          "9350:     width  = 2312;",
          "",
          "[Removed Lines]",
          "9305:     if (width == 2848) filters = 0x16161616;",
          "9306:     if (width == 3328) {",
          "9307:       width = 3262;",
          "9308:       left_margin = 34;",
          "9309:     }",
          "9310:     if (width == 4952) {",
          "9312:       filters = 2;",
          "9314:  if(!strcmp(model,\"HS50EXR\"))",
          "9315:  {",
          "9316:   filters = 0x1e1e1e1e;",
          "9317:   width=3230;",
          "9318:  }",
          "9319:  if(!strcmp(model,\"X20\"))",
          "9320:  {",
          "9321:   left_margin = 2;",
          "9322:   top_margin=2;",
          "9323:   width = 4030;",
          "9324:   height = 3010;",
          "9325:   raw_height = 3012;",
          "9326:   filters = 2;",
          "9327:  }",
          "9328:  if(!strcmp(model,\"X100S\"))",
          "9329:  {",
          "9330:   left_margin = 2;",
          "9331:   top_margin = 1;",
          "9332:   width = 4934;",
          "9333:   height = 3290;",
          "9334:   raw_height = 3295;",
          "9335:   filters = 2;",
          "9336:   data_offset +=8;",
          "9337:   load_raw = &CLASS unpacked_load_raw;",
          "9338:   load_flags = 0;",
          "9339:   maximum = 16383;",
          "9340:  }",
          "9342:   } else if (!strcmp(model,\"RD175\")) {",
          "9343:     height = 986;",
          "9344:     width = 1534;",
          "9345:     data_offset = 513;",
          "9346:     filters = 0x61616161;",
          "9347:     load_raw = &CLASS minolta_rd175_load_raw;",
          "",
          "[Added Lines]",
          "8765:     if (width == 2848 || width == 3664) filters = 0x16161616;",
          "8766:     if (width == 4032 || width == 4952) left_margin = 0;",
          "8767:     if (width == 3328 && (width -= 66)) left_margin = 34;",
          "8768:     if (width == 4936) left_margin = 4;",
          "8769:     if (!strcmp(model,\"HS50EXR\")) {",
          "8770:       width += 2;",
          "8772:       filters = 0x16161616;",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "9352:     goto konica_400z;",
          "9353:   } else if (!strcmp(model,\"KD-510Z\")) {",
          "9354:     goto konica_510z;",
          "9358:     if (!strncmp(model,\"DiMAGE A\",8)) {",
          "9359:       if (!strcmp(model,\"DiMAGE A200\"))",
          "9360:  filters = 0x49494949;",
          "",
          "[Removed Lines]",
          "9355:   } else if (!strcasecmp(make,\"MINOLTA\")) {",
          "9356:     load_raw = &CLASS unpacked_load_raw;",
          "9357:     maximum = 0xfff;",
          "",
          "[Added Lines]",
          "8782:   } else if (!strcasecmp(make,\"Minolta\")) {",
          "8783:     if (!load_raw && (maximum = 0xfff))",
          "8784:       load_raw = &CLASS unpacked_load_raw;",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "9391:     data_error = -1;",
          "9392:   } else if (!strcmp(model,\"*ist DS\")) {",
          "9393:     height -= 2;",
          "9433:     height -= top_margin = 8;",
          "9434:     width -= 2 * (left_margin = 8);",
          "9435:     load_flags = 32;",
          "9437:     order = 0x4949;",
          "9438:     height = 3694;",
          "9439:     top_margin = 2;",
          "9440:     width  = 5574 - (left_margin = 32 + tiff_bps);",
          "9441:     if (tiff_bps == 12) load_flags = 80;",
          "9444:   } else if (!strcmp(model,\"EX1\")) {",
          "9445:     order = 0x4949;",
          "9446:     height -= 20;",
          "",
          "[Removed Lines]",
          "9394:   } else if (!strcmp(model,\"Optio S\")) {",
          "9395:     if (fsize == 3178560) {",
          "9396:       height = 1540;",
          "9397:       width  = 2064;",
          "9398:       load_raw = &CLASS eight_bit_load_raw;",
          "9399:       cam_mul[0] *= 4;",
          "9400:       cam_mul[2] *= 4;",
          "9401:     } else {",
          "9402:       height = 1544;",
          "9403:       width  = 2068;",
          "9404:       raw_width = 3136;",
          "9405:       load_raw = &CLASS packed_load_raw;",
          "9406:       maximum = 0xf7c;",
          "9407:     }",
          "9408:   } else if (fsize == 6114240) {",
          "9409:     height = 1737;",
          "9410:     width  = 2324;",
          "9411:     raw_width = 3520;",
          "9412:     load_raw = &CLASS packed_load_raw;",
          "9413:     maximum = 0xf7a;",
          "9414:   } else if (!strcmp(model,\"Optio 750Z\")) {",
          "9415:     height = 2302;",
          "9416:     width  = 3072;",
          "9417:     load_raw = &CLASS packed_load_raw;",
          "9418:     load_flags = 30;",
          "9419:   } else if (!strcmp(model,\"DC-833m\")) {",
          "9420:     height = 2448;",
          "9421:     width  = 3264;",
          "9422:     order = 0x4949;",
          "9423:     filters = 0x61616161;",
          "9424:     load_raw = &CLASS unpacked_load_raw;",
          "9425:     maximum = 0xfc00;",
          "9426:   } else if (!strncmp(model,\"S85\",3)) {",
          "9427:     height = 2448;",
          "9428:     width  = 3264;",
          "9429:     raw_width = fsize/height/2;",
          "9430:     order = 0x4d4d;",
          "9431:     load_raw = &CLASS unpacked_load_raw;",
          "9432:   } else if (!strcmp(make,\"SAMSUNG\") && raw_width == 4704) {",
          "9436:   } else if (!strcmp(make,\"SAMSUNG\") && raw_width == 5632) {",
          "9442:   } else if (!strcmp(make,\"SAMSUNG\") && !strcmp(model,\"NX300\")) {",
          "9443:    is_raw =0;",
          "",
          "[Added Lines]",
          "8821:   } else if (!strcmp(make,\"Samsung\") && raw_width == 4704) {",
          "8825:   } else if (!strcmp(make,\"Samsung\") && raw_height == 3714) {",
          "8826:     height -= 18;",
          "8827:     width = 5536;",
          "8828:     filters = 0x49494949;",
          "8829:   } else if (!strcmp(make,\"Samsung\") && raw_width == 5632) {",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "9459:       width  -= 56;",
          "9460:       top_margin = 8;",
          "9461:     }",
          "9470:     strcpy (model, \"WB550\");",
          "9475:   } else if (!strcmp(model,\"EX2F\")) {",
          "9476:     height = 3045;",
          "9477:     width  = 4070;",
          "",
          "[Removed Lines]",
          "9462:   } else if (fsize == 20487168) {",
          "9463:     height = 2808;",
          "9464:     width  = 3648;",
          "9465:     goto wb550;",
          "9466:   } else if (fsize == 24000000) {",
          "9467:     height = 3000;",
          "9468:     width  = 4000;",
          "9469: wb550:",
          "9471:     order = 0x4d4d;",
          "9472:     load_raw = &CLASS unpacked_load_raw;",
          "9473:     load_flags = 6;",
          "9474:     maximum = 0x3df;",
          "",
          "[Added Lines]",
          "8853:   } else if (strstr(model,\"WB550\")) {",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "9480:     filters = 0x49494949;",
          "9481:     load_raw = &CLASS unpacked_load_raw;",
          "9482:   } else if (!strcmp(model,\"STV680 VGA\")) {",
          "9488:     black = 16;",
          "9590:     height = raw_height - (top_margin = 2);",
          "9596:   } else if (!strcmp(model,\"640x480\")) {",
          "9600:     gamma_curve (0.45, 4.5, 1, 255);",
          "9662:   } else if (!strcmp(make,\"Hasselblad\")) {",
          "9663:     if (load_raw == &CLASS lossless_jpeg_load_raw)",
          "9664:       load_raw = &CLASS hasselblad_load_raw;",
          "",
          "[Removed Lines]",
          "9483:     height = 484;",
          "9484:     width  = 644;",
          "9485:     load_raw = &CLASS eight_bit_load_raw;",
          "9486:     flip = 2;",
          "9487:     filters = 0x16161616;",
          "9489:   }  else",
          "9492:   if (!model[0])",
          "9493:     sprintf (model, \"%dx%d\", width, height);",
          "9494:   if (filters == UINT_MAX) filters = 0x94949494;",
          "9495:   if (raw_color) adobe_coeff (make, model);",
          "9496:   if (load_raw == &CLASS kodak_radc_load_raw)",
          "9497:     if (raw_color) adobe_coeff (\"Apple\",\"Quicktake\");",
          "9498:   if (thumb_offset && !thumb_height) {",
          "9499:     fseek (ifp, thumb_offset, SEEK_SET);",
          "9500:     if (ljpeg_start (&jh, 1)) {",
          "9501:       thumb_width  = jh.wide;",
          "9502:       thumb_height = jh.high;",
          "9503:     }",
          "9504:   }",
          "9505: dng_skip:",
          "9506:   if (fuji_width) {",
          "9507:     fuji_width = width >> !fuji_layout;",
          "9508:     if (~fuji_width & 1) filters = 0x49494949;",
          "9509:     width = (height >> fuji_layout) + fuji_width;",
          "9510:     height = width - 1;",
          "9511:     pixel_aspect = 1;",
          "9512:   } else {",
          "9513:     if (raw_height < height) raw_height = height;",
          "9514:     if (raw_width  < width ) raw_width  = width;",
          "9515:   }",
          "9516:   if (!tiff_bps) tiff_bps = 12;",
          "9517:   if (!maximum) maximum = (1 << tiff_bps) - 1;",
          "9518:   if (!load_raw || height < 22) is_raw = 0;",
          "9519: #ifdef NO_JASPER",
          "9520:   if (load_raw == &CLASS redcine_load_raw) {",
          "9521: #ifdef DCRAW_VERBOSE",
          "9522:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "9523:  ifname, \"libjasper\");",
          "9524: #endif",
          "9525:     is_raw = 0;",
          "9526: #ifdef LIBRAW_LIBRARY_BUILD",
          "9527:     imgdata.process_warnings |= LIBRAW_WARN_NO_JASPER;",
          "9528: #endif",
          "9529:   }",
          "9530: #endif",
          "9531: #ifdef NO_JPEG",
          "9532:   if (load_raw == &CLASS kodak_jpeg_load_raw ||",
          "9533:       load_raw == &CLASS lossy_dng_load_raw) {",
          "9534: #ifdef DCRAW_VERBOSE",
          "9535:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "9536:  ifname, \"libjpeg\");",
          "9537: #endif",
          "9538:     is_raw = 0;",
          "9539: #ifdef LIBRAW_LIBRARY_BUILD",
          "9540:     imgdata.process_warnings |= LIBRAW_WARN_NO_JPEGLIB;",
          "9541: #endif",
          "9542:   }",
          "9543: #endif",
          "9544:   if (!cdesc[0])",
          "9545:     strcpy (cdesc, colors == 3 ? \"RGBG\":\"GMCY\");",
          "9546:   if (!raw_height) raw_height = height;",
          "9547:   if (!raw_width ) raw_width  = width;",
          "9548:   if (filters && colors == 3)",
          "9549:     filters |= ((filters >> 2 & 0x22222222) |",
          "9550:   (filters << 2 & 0x88888888)) & filters << 1;",
          "9551: notraw:",
          "9552:   if (flip == -1) flip = tiff_flip;",
          "9553:   if (flip == -1) flip = 0;",
          "9554: #ifdef LIBRAW_LIBRARY_BUILD",
          "9555:   RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY,1,2);",
          "9556: #endif",
          "9557: }",
          "9559: void CLASS identify2(unsigned fsize, unsigned flen, char *head)",
          "9560: {",
          "9561:   short pana[][6] = {",
          "9562:     { 3130, 1743,  4,  0, -6,  0 },",
          "9563:     { 3130, 2055,  4,  0, -6,  0 },",
          "9564:     { 3130, 2319,  4,  0, -6,  0 },",
          "9565:     { 3170, 2103, 18,  0,-42, 20 },",
          "9566:     { 3170, 2367, 18, 13,-42,-21 },",
          "9567:     { 3177, 2367,  0,  0, -1,  0 },",
          "9568:     { 3304, 2458,  0,  0, -1,  0 },",
          "9569:     { 3330, 2463,  9,  0, -5,  0 },",
          "9570:     { 3330, 2479,  9,  0,-17,  4 },",
          "9571:     { 3370, 1899, 15,  0,-44, 20 },",
          "9572:     { 3370, 2235, 15,  0,-44, 20 },",
          "9573:     { 3370, 2511, 15, 10,-44,-21 },",
          "9574:     { 3690, 2751,  3,  0, -8, -3 },",
          "9575:     { 3710, 2751,  0,  0, -3,  0 },",
          "9576:     { 3724, 2450,  0,  0,  0, -2 },",
          "9577:     { 3770, 2487, 17,  0,-44, 19 },",
          "9578:     { 3770, 2799, 17, 15,-44,-19 },",
          "9579:     { 3880, 2170,  6,  0, -6,  0 },",
          "9580:     { 4060, 3018,  0,  0,  0, -2 },",
          "9581:     { 4290, 2391,  3,  0, -8, -1 },",
          "9582:     { 4330, 2439, 17, 15,-44,-19 },",
          "9583:     { 4508, 2962,  0,  0, -3, -4 },",
          "9584:     { 4508, 3330,  0,  0, -3, -6 } };",
          "9587:   struct jhead jh;",
          "9588:   int i;",
          "9589:  if (!strcmp(model,\"N95\")) {",
          "9591:   } else if (!strcmp(model,\"531C\")) {",
          "9592:     height = 1200;",
          "9593:     width  = 1600;",
          "9594:     load_raw = &CLASS unpacked_load_raw;",
          "9595:     filters = 0x49494949;",
          "9597:     height = 480;",
          "9598:     width  = 640;",
          "9599:     load_raw = &CLASS eight_bit_load_raw;",
          "9601:   } else if (!strcmp(model,\"F-080C\")) {",
          "9602:     height = 768;",
          "9603:     width  = 1024;",
          "9604:     load_raw = &CLASS eight_bit_load_raw;",
          "9605:   } else if (!strcmp(model,\"F-145C\")) {",
          "9606:     height = 1040;",
          "9607:     width  = 1392;",
          "9608:     load_raw = &CLASS eight_bit_load_raw;",
          "9609:   } else if (!strcmp(model,\"F-201C\")) {",
          "9610:     height = 1200;",
          "9611:     width  = 1600;",
          "9612:     load_raw = &CLASS eight_bit_load_raw;",
          "9613:   } else if (!strcmp(model,\"F-510C\")) {",
          "9614:     height = 1958;",
          "9615:     width  = 2588;",
          "9616:     load_raw = fsize < 7500000 ?",
          "9617:  &CLASS eight_bit_load_raw : &CLASS unpacked_load_raw;",
          "9618:     data_offset = fsize - width*height*(fsize >> 22);",
          "9619:     maximum = 0xfff0;",
          "9620:   } else if (!strcmp(model,\"F-810C\")) {",
          "9621:     height = 2469;",
          "9622:     width  = 3272;",
          "9623:     load_raw = &CLASS unpacked_load_raw;",
          "9624:     maximum = 0xfff0;",
          "9625:   } else if (!strcmp(model,\"XCD-SX910CR\")) {",
          "9626:     height = 1024;",
          "9627:     width  = 1375;",
          "9628:     raw_width = 1376;",
          "9629:     filters = 0x49494949;",
          "9630:     maximum = 0x3ff;",
          "9631:     load_raw = fsize < 2000000 ?",
          "9632:  &CLASS eight_bit_load_raw : &CLASS unpacked_load_raw;",
          "9633:   } else if (!strcmp(model,\"2010\")) {",
          "9634:     height = 1207;",
          "9635:     width  = 1608;",
          "9636:     order = 0x4949;",
          "9637:     filters = 0x16161616;",
          "9638:     data_offset = 3212;",
          "9639:     maximum = 0x3ff;",
          "9640:     load_raw = &CLASS unpacked_load_raw;",
          "9641:   } else if (!strcmp(model,\"A782\")) {",
          "9642:     height = 3000;",
          "9643:     width  = 2208;",
          "9644:     filters = 0x61616161;",
          "9645:     load_raw = fsize < 10000000 ?",
          "9646:  &CLASS eight_bit_load_raw : &CLASS unpacked_load_raw;",
          "9647:     maximum = 0xffc0;",
          "9648:   } else if (!strcmp(model,\"3320AF\")) {",
          "9649:     height = 1536;",
          "9650:     raw_width = width = 2048;",
          "9651:     filters = 0x61616161;",
          "9652:     load_raw = &CLASS unpacked_load_raw;",
          "9653:     maximum = 0x3ff;",
          "9654:     fseek (ifp, 0x300000, SEEK_SET);",
          "9655:     if ((order = guess_byte_order(0x10000)) == 0x4d4d) {",
          "9656:       height -= (top_margin = 16);",
          "9657:       width -= (left_margin = 28);",
          "9658:       maximum = 0xf5c0;",
          "9659:       strcpy (make, \"ISG\");",
          "9660:       model[0] = 0;",
          "9661:     }",
          "",
          "[Added Lines]",
          "8864:   } else if (!strcmp(model,\"N95\")) {",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "9688:       filters = 0x61616161;",
          "9689:     }",
          "9690:   } else if (!strcmp(make,\"Sinar\")) {",
          "9698:     if (!load_raw) load_raw = &CLASS unpacked_load_raw;",
          "9699:     maximum = 0x3fff;",
          "9700:   } else if (!strcmp(make,\"Leaf\")) {",
          "",
          "[Removed Lines]",
          "9691:     if (!memcmp(head,\"8BPS\",4)) {",
          "9692:       fseek (ifp, 14, SEEK_SET);",
          "9693:       height = get4();",
          "9694:       width  = get4();",
          "9695:       filters = 0x61616161;",
          "9696:       data_offset = 68;",
          "9697:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "9739:       width -= 2 * (left_margin = 24);",
          "9740:       filters = 0x16161616;",
          "9741:     }",
          "9743:     if ((flen - data_offset) / (raw_width*8/7) == raw_height)",
          "9744:       load_raw = &CLASS panasonic_load_raw;",
          "9745:     if (!load_raw) {",
          "",
          "[Removed Lines]",
          "9742:   } else if (!strcmp(make,\"LEICA\") || !strcmp(make,\"Panasonic\")) {",
          "",
          "[Added Lines]",
          "8941:   } else if (!strcmp(make,\"Leica\") || !strcmp(make,\"Panasonic\")) {",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "9763:     filters = 0x16161616;",
          "9764:     load_raw = &CLASS packed_load_raw;",
          "9765:     load_flags = 30;",
          "9767:     height += height & 1;",
          "9769:     if (width == 4100) width -= 4;",
          "9770:     if (width == 4080) width -= 24;",
          "9771:     if (load_raw == &CLASS unpacked_load_raw)",
          "",
          "[Removed Lines]",
          "9766:   } else if (!strcmp(make,\"OLYMPUS\")) {",
          "9768:     filters = exif_cfa;",
          "",
          "[Added Lines]",
          "8965:   } else if (!strcmp(make,\"Olympus\")) {",
          "8967:     if (exif_cfa) filters = exif_cfa;",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "9786:       thumb_length = flen - (thumb_offset = 0xa39800);",
          "9787:       thumb_height = 480;",
          "9788:       thumb_width  = 640;",
          "9795:     }",
          "9796:   } else if (!strcmp(model,\"N Digital\")) {",
          "9797:     height = 2047;",
          "",
          "[Removed Lines]",
          "9789:     } else if (!strcmp(model,\"XZ-2\")) {",
          "9790:       load_raw = &CLASS packed_load_raw;",
          "9791:       load_flags = 24;",
          "9792:     } else if (!strcmp(model,\"XZ-10\")) {",
          "9793:       load_raw = &CLASS packed_load_raw;",
          "9794:       load_flags = 24;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "9814:     mask[0][1] = 9;",
          "9815:     data_offset = 787392;",
          "9816:     load_raw = &CLASS sony_load_raw;",
          "9819:     width = 3925;",
          "9820:     order = 0x4d4d;",
          "9822:     width -= 8;",
          "9824:     width -= 24;",
          "9825:   } else if (!strcmp(model,\"DSLR-A100\")) {",
          "9826:     if (width == 3880) {",
          "",
          "[Removed Lines]",
          "9817:   } else if (!strcmp(make,\"SONY\") && raw_width == 3984) {",
          "9818:     adobe_coeff (\"SONY\",\"DSC-R1\");",
          "9821:   } else if (!strcmp(make,\"SONY\") && raw_width == 5504) {",
          "9823:   } else if (!strcmp(make,\"SONY\") && raw_width == 6048) {",
          "",
          "[Added Lines]",
          "9010:   } else if (!strcmp(make,\"Sony\") && raw_width == 3984) {",
          "9011:     adobe_coeff (\"Sony\",\"DSC-R1\");",
          "9014:   } else if (!strcmp(make,\"Sony\") && raw_width == 5504) {",
          "9016:   } else if (!strcmp(make,\"Sony\") && raw_width == 6048) {",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "9837:     height -= top_margin = 4;",
          "9838:     width -= left_margin = 32;",
          "9839:     gamma_curve (0, 7, 1, 255);",
          "9847:     order = 0x4949;",
          "9870:       fseek (ifp, 168, SEEK_SET);",
          "9871:       read_shorts (curve, 256);",
          "9872:     } else gamma_curve (0, 3.875, 1, 255);",
          "9874:   } else if (!strncasecmp(model,\"EasyShare\",9)) {",
          "9875:     data_offset = data_offset < 0x15000 ? 0x15000 : 0x17000;",
          "9876:     load_raw = &CLASS packed_load_raw;",
          "9878:     if (filters == UINT_MAX) filters = 0x61616161;",
          "9879:     if (!strncmp(model,\"NC2000\",6)) {",
          "9880:       width -= 4;",
          "",
          "[Removed Lines]",
          "9840:   } else if (!strcmp(model,\"C603v\")) {",
          "9841:     height = 480;",
          "9842:     width  = 640;",
          "9843:     if (fsize < 614400 || find_green (16, 16, 3840, 5120) < 25) goto c603v;",
          "9844:     strcpy (model,\"KAI-0340\");",
          "9845:     height -= 3;",
          "9846:     data_offset = 3840;",
          "9848:     load_raw = &CLASS unpacked_load_raw;",
          "9849:   } else if (!strcmp(model,\"C603y\")) {",
          "9850:     height = 2134;",
          "9851:     width  = 2848;",
          "9852: c603v:",
          "9853:     filters = 0;",
          "9854:     load_raw = &CLASS kodak_yrgb_load_raw;",
          "9855:     gamma_curve (0, 3.875, 1, 255);",
          "9856:   } else if (!strcmp(model,\"C603\")) {",
          "9857:     raw_height = height = 2152;",
          "9858:     raw_width  = width  = 2864;",
          "9859:     goto c603;",
          "9860:   } else if (!strcmp(model,\"C330\")) {",
          "9861:     height = 1744;",
          "9862:     width  = 2336;",
          "9863:     raw_height = 1779;",
          "9864:     raw_width  = 2338;",
          "9865:     top_margin = 33;",
          "9866:     left_margin = 1;",
          "9867: c603:",
          "9868:     order = 0x4949;",
          "9869:     if ((data_offset = fsize - raw_height*raw_width)) {",
          "9873:     load_raw = &CLASS eight_bit_load_raw;",
          "9877:   } else if (!strcasecmp(make,\"KODAK\")) {",
          "",
          "[Added Lines]",
          "9033:   } else if (!strcmp(model,\"C603\") || !strcmp(model,\"C330\")) {",
          "9035:     if (filters && data_offset) {",
          "9039:     load_raw = filters ? &CLASS eight_bit_load_raw",
          "9040:          : &CLASS kodak_yrgb_load_raw;",
          "9044:   } else if (!strcasecmp(make,\"Kodak\")) {",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "9912:       data_offset = 15424;",
          "9913:     }",
          "9914:     if (!strncmp(model,\"DC2\",3)) {",
          "9916:       if (flen < 100000) {",
          "9917:  raw_width = 256; width = 249;",
          "9918:  pixel_aspect = (4.0*height) / (3.0*width);",
          "",
          "[Removed Lines]",
          "9915:       raw_height = height = 242;",
          "",
          "[Added Lines]",
          "9082:       raw_height = 2 + (height = 242);",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "9920:  raw_width = 512; width = 501;",
          "9921:  pixel_aspect = (493.0*height) / (373.0*width);",
          "9922:       }",
          "9924:       colors = 4;",
          "9925:       filters = 0x8d8d8d8d;",
          "9926:       simple_coeff(1);",
          "",
          "[Removed Lines]",
          "9923:       data_offset += raw_width + 1;",
          "",
          "[Added Lines]",
          "9090:       top_margin = left_margin = 1;",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "9953:       thumb_offset = 6144;",
          "9954:       thumb_misc   = 360;",
          "9955:       write_thumb = &CLASS layer_thumb;",
          "9960:       black = 17;",
          "9961:     }",
          "9962:   } else if (!strcmp(model,\"Fotoman Pixtura\")) {",
          "",
          "[Removed Lines]",
          "9956:       height = 1024;",
          "9957:       width  = 1536;",
          "9958:       data_offset = 79872;",
          "9959:       load_raw = &CLASS eight_bit_load_raw;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "9994:     }",
          "9995:     filters = 0x16161616;",
          "9996:     load_raw = &CLASS rollei_load_raw;",
          "10102:   }",
          "10103:   else if (!strcmp(model,\"GRAS-50S5C\")) {",
          "10104:    height = 2048;",
          "",
          "[Removed Lines]",
          "9997:   } else if (!strcmp(model,\"PC-CAM 600\")) {",
          "9998:     height = 768;",
          "9999:     data_offset = width = 1024;",
          "10000:     filters = 0x49494949;",
          "10001:     load_raw = &CLASS eight_bit_load_raw;",
          "10002:   } else if (!strcmp(model,\"QV-2000UX\")) {",
          "10003:     height = 1208;",
          "10004:     width  = 1632;",
          "10005:     data_offset = width * 2;",
          "10006:     load_raw = &CLASS eight_bit_load_raw;",
          "10007:   } else if (fsize == 3217760) {",
          "10008:     height = 1546;",
          "10009:     width  = 2070;",
          "10010:     raw_width = 2080;",
          "10011:     load_raw = &CLASS eight_bit_load_raw;",
          "10012:   } else if (!strcmp(model,\"QV-4000\")) {",
          "10013:     height = 1700;",
          "10014:     width  = 2260;",
          "10015:     load_raw = &CLASS unpacked_load_raw;",
          "10016:     maximum = 0xffff;",
          "10017:   } else if (!strcmp(model,\"QV-5700\")) {",
          "10018:     height = 1924;",
          "10019:     width  = 2576;",
          "10020:     raw_width = 3232;",
          "10021:     tiff_bps = 10;",
          "10022:   } else if (!strcmp(model,\"QV-R41\")) {",
          "10023:     height = 1720;",
          "10024:     width  = 2312;",
          "10025:     raw_width = 3520;",
          "10026:     left_margin = 2;",
          "10027:   } else if (!strcmp(model,\"QV-R51\")) {",
          "10028:     height = 1926;",
          "10029:     width  = 2580;",
          "10030:     raw_width = 3904;",
          "10031:   } else if (!strcmp(model,\"EX-S20\")) {",
          "10032:     height = 1208;",
          "10033:     width  = 1620;",
          "10034:     raw_width = 2432;",
          "10035:     flip = 3;",
          "10036:   } else if (!strcmp(model,\"EX-S100\")) {",
          "10037:     height = 1544;",
          "10038:     width  = 2058;",
          "10039:     raw_width = 3136;",
          "10040:   } else if (!strcmp(model,\"EX-Z50\")) {",
          "10041:     height = 1931;",
          "10042:     width  = 2570;",
          "10043:     raw_width = 3904;",
          "10044:   } else if (!strcmp(model,\"EX-Z500\")) {",
          "10045:     height = 1937;",
          "10046:     width  = 2577;",
          "10047:     raw_width = 3904;",
          "10048:     filters = 0x16161616;",
          "10049:   } else if (!strcmp(model,\"EX-Z55\")) {",
          "10050:     height = 1960;",
          "10051:     width  = 2570;",
          "10052:     raw_width = 3904;",
          "10053:   } else if (!strcmp(model,\"EX-Z60\")) {",
          "10054:     height = 2145;",
          "10055:     width  = 2833;",
          "10056:     raw_width = 3584;",
          "10057:     filters = 0x16161616;",
          "10058:     tiff_bps = 10;",
          "10059:   } else if (!strcmp(model,\"EX-Z75\")) {",
          "10060:     height = 2321;",
          "10061:     width  = 3089;",
          "10062:     raw_width = 4672;",
          "10063:     maximum = 0xfff;",
          "10064:   } else if (!strcmp(model,\"EX-Z750\")) {",
          "10065:     height = 2319;",
          "10066:     width  = 3087;",
          "10067:     raw_width = 4672;",
          "10068:     maximum = 0xfff;",
          "10069:   } else if (!strcmp(model,\"EX-Z850\")) {",
          "10070:     height = 2468;",
          "10071:     width  = 3279;",
          "10072:     raw_width = 4928;",
          "10073:     maximum = 0xfff;",
          "10074:   } else if (!strcmp(model,\"EX-Z8\")) {",
          "10075:     height = 2467;",
          "10076:     width  = 3281;",
          "10077:     raw_height = 2502;",
          "10078:     raw_width  = 4992;",
          "10079:     maximum = 0xfff;",
          "10081:     height = 2752;",
          "10082:     width  = 3672;",
          "10083:     raw_width = 5632;",
          "10084:   } else if (!strcmp(model,\"EX-ZR100\")) {",
          "10085:     height = 3044;",
          "10086:     width  = 4072;",
          "10087:     raw_width = 4096;",
          "10088:     load_flags = 80;",
          "10089:   } else if (!strcmp(model,\"EX-P505\")) {",
          "10090:     height = 1928;",
          "10091:     width  = 2568;",
          "10092:     raw_width = 3852;",
          "10093:     maximum = 0xfff;",
          "10095:     height = 2142;",
          "10096:     width  = 2844;",
          "10097:     raw_width = 4288;",
          "10098:   } else if (!strcmp(model,\"EX-P700\")) {",
          "10099:     height = 2318;",
          "10100:     width  = 3082;",
          "10101:     raw_width = 4672;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "10133:    order = 0x4949;",
          "10134:    maximum = 0x0fff;",
          "10135:   }",
          "10136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9194:   if (!model[0])",
          "9195:     sprintf (model, \"%dx%d\", width, height);",
          "9196:   if (filters == UINT_MAX) filters = 0x94949494;",
          "9197:   if (raw_color) adobe_coeff (make, model);",
          "9198:   if (load_raw == &CLASS kodak_radc_load_raw)",
          "9199:     if (raw_color) adobe_coeff (\"Apple\",\"Quicktake\");",
          "9200:   if (thumb_offset && !thumb_height) {",
          "9201:     fseek (ifp, thumb_offset, SEEK_SET);",
          "9202:     if (ljpeg_start (&jh, 1)) {",
          "9203:       thumb_width  = jh.wide;",
          "9204:       thumb_height = jh.high;",
          "9205:     }",
          "9206:   }",
          "9208: dng_skip:",
          "9210:   if (fuji_width) {",
          "9211:     fuji_width = width >> !fuji_layout;",
          "9212:     if (~fuji_width & 1) filters = 0x49494949;",
          "9213:     width = (height >> fuji_layout) + fuji_width;",
          "9214:     height = width - 1;",
          "9215:     pixel_aspect = 1;",
          "9216:   } else {",
          "9217:     if (raw_height < height) raw_height = height;",
          "9218:     if (raw_width  < width ) raw_width  = width;",
          "9219:   }",
          "9220:   if (!tiff_bps) tiff_bps = 12;",
          "9221:   if (!maximum) maximum = (1 << tiff_bps) - 1;",
          "9222:   if (!load_raw || height < 22 || width < 22 ||",
          "9223:  tiff_bps > 16 || tiff_samples > 4 || colors > 4)",
          "9224:     is_raw = 0;",
          "9225: #ifdef NO_JASPER",
          "9226:   if (load_raw == &CLASS redcine_load_raw) {",
          "9227: #ifdef DCRAW_VERBOSE",
          "9228:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "9229:  ifname, \"libjasper\");",
          "9230: #endif",
          "9231:     is_raw = 0;",
          "9232: #ifdef LIBRAW_LIBRARY_BUILD",
          "9233:     imgdata.process_warnings |= LIBRAW_WARN_NO_JASPER;",
          "9234: #endif",
          "9235:   }",
          "9236: #endif",
          "9237: #ifdef NO_JPEG",
          "9238:   if (load_raw == &CLASS kodak_jpeg_load_raw ||",
          "9239:       load_raw == &CLASS lossy_dng_load_raw) {",
          "9240: #ifdef DCRAW_VERBOSE",
          "9241:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "9242:  ifname, \"libjpeg\");",
          "9243: #endif",
          "9244:     is_raw = 0;",
          "9245: #ifdef LIBRAW_LIBRARY_BUILD",
          "9246:     imgdata.process_warnings |= LIBRAW_WARN_NO_JPEGLIB;",
          "9247: #endif",
          "9248:   }",
          "9249: #endif",
          "9250:   if (!cdesc[0])",
          "9251:     strcpy (cdesc, colors == 3 ? \"RGBG\":\"GMCY\");",
          "9252:   if (!raw_height) raw_height = height;",
          "9253:   if (!raw_width ) raw_width  = width;",
          "9254:   if (filters > 999 && colors == 3)",
          "9255:     filters |= ((filters >> 2 & 0x22222222) |",
          "9256:   (filters << 2 & 0x88888888)) & filters << 1;",
          "9257: notraw:",
          "9258:   if (flip == UINT_MAX) flip = tiff_flip;",
          "9259:   if (flip == UINT_MAX) flip = 0;",
          "9261: #ifdef LIBRAW_LIBRARY_BUILD",
          "9262:   RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY,1,2);",
          "9263: #endif",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "10375:   step = sqrt(0.5);",
          "10376:   wide = fuji_width / step;",
          "10377:   high = (height - fuji_width) / step;",
          "10379:   merror (img, \"fuji_rotate()\");",
          "10381: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "10378:   img = (ushort (*)[4]) calloc (wide*high, sizeof *img);",
          "",
          "[Added Lines]",
          "9506:   img = (ushort (*)[4]) calloc (high, wide*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "10421: #endif",
          "10422:   if (pixel_aspect < 1) {",
          "10423:     newdim = height / pixel_aspect + 0.5;",
          "10425:     merror (img, \"stretch()\");",
          "10426:     for (rc=row=0; row < newdim; row++, rc+=pixel_aspect) {",
          "10427:       frac = rc - (c = rc);",
          "",
          "[Removed Lines]",
          "10424:     img = (ushort (*)[4]) calloc (width*newdim, sizeof *img);",
          "",
          "[Added Lines]",
          "9552:     img = (ushort (*)[4]) calloc (width, newdim*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "10433:     height = newdim;",
          "10434:   } else {",
          "10435:     newdim = width * pixel_aspect + 0.5;",
          "10437:     merror (img, \"stretch()\");",
          "10438:     for (rc=col=0; col < newdim; col++, rc+=1/pixel_aspect) {",
          "10439:       frac = rc - (c = rc);",
          "",
          "[Removed Lines]",
          "10436:     img = (ushort (*)[4]) calloc (height*newdim, sizeof *img);",
          "",
          "[Added Lines]",
          "9564:     img = (ushort (*)[4]) calloc (height, newdim*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "10792:       case 'i':  identify_only     = 1;  break;",
          "10793:       case 'c':  write_to_stdout   = 1;  break;",
          "10794:       case 'v':  verbose           = 1;  break;",
          "10796:       case 'f':  four_color_rgb    = 1;  break;",
          "10797:       case 'A':  FORC4 greybox[c]  = atoi(argv[arg++]);",
          "10798:       case 'a':  use_auto_wb       = 1;  break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9923:       case 'h':  half_size         = 1;  break;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "10928:  if (document_mode == 3) {",
          "10929:    top_margin = left_margin = fuji_width = 0;",
          "10930:    height = raw_height;",
          "10934:  }",
          "10935:  iheight = (height + shrink) >> shrink;",
          "10936:  iwidth  = (width  + shrink) >> shrink;",
          "",
          "[Removed Lines]",
          "10931:    if  (width <= raw_width * 8 / tiff_bps)",
          "10932:         width  = raw_width * 8 / tiff_bps;",
          "10933:    else width  = raw_width;",
          "",
          "[Added Lines]",
          "10059:    width  = raw_width;",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "10976:       merror (meta_data, \"main()\");",
          "10977:     }",
          "10978:     if (filters || colors == 1) {",
          "10980:       merror (raw_image, \"main()\");",
          "10981:     } else {",
          "10983:       merror (image, \"main()\");",
          "10984:     }",
          "10985:     if (verbose)",
          "",
          "[Removed Lines]",
          "10979:       raw_image = (ushort *) calloc ((raw_height+7)*raw_width, 2);",
          "10982:       image = (ushort (*)[4]) calloc (iheight*iwidth, sizeof *image);",
          "",
          "[Added Lines]",
          "10105:       raw_image = (ushort *) calloc ((raw_height+7), raw_width*2);",
          "10108:       image = (ushort (*)[4]) calloc (iheight, iwidth*sizeof *image);",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "10995:     if (document_mode == 3) {",
          "10996:       top_margin = left_margin = fuji_width = 0;",
          "10997:       height = raw_height;",
          "11001:     }",
          "11002:     iheight = (height + shrink) >> shrink;",
          "11003:     iwidth  = (width  + shrink) >> shrink;",
          "11004:     if (raw_image) {",
          "11006:       merror (image, \"main()\");",
          "11007:       crop_masked_pixels();",
          "11008:       free (raw_image);",
          "",
          "[Removed Lines]",
          "10998:       if  (width <= raw_width * 8 / tiff_bps)",
          "10999:            width  = raw_width * 8 / tiff_bps;",
          "11000:       else width  = raw_width;",
          "11005:       image = (ushort (*)[4]) calloc (iheight*iwidth, sizeof *image);",
          "",
          "[Added Lines]",
          "10124:       width  = raw_width;",
          "10129:       image = (ushort (*)[4]) calloc (iheight, iwidth*sizeof *image);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "11033:     if (filters && !document_mode) {",
          "11034:       if (quality == 0)",
          "11035:  lin_interpolate();",
          "11037:  vng_interpolate();",
          "11039:  ppg_interpolate();",
          "11041:     }",
          "11042:     if (mix_green)",
          "11043:       for (colors=3, i=0; i < height*width; i++)",
          "",
          "[Removed Lines]",
          "11036:       else if (quality == 1 || colors > 3 || filters < 1000)",
          "11038:       else if (quality == 2)",
          "11040:       else ahd_interpolate();",
          "",
          "[Added Lines]",
          "10160:       else if (quality == 1 || colors > 3)",
          "10162:       else if (quality == 2 && filters > 1000)",
          "10164:       else if (filters == 9)",
          "10165:  xtrans_interpolate (quality*2-3);",
          "10166:       else",
          "10167:  ahd_interpolate();",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 257 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: #include \"libraw/libraw.h\"",
          "31: #include \"internal/defines.h\"",
          "32: #include \"internal/var_defines.h\"",
          "35: int CLASS fcol (int row, int col)",
          "36: {",
          "37:   static const char filter[16][16] =",
          "",
          "[Removed Lines]",
          "33: #include \"internal/libraw_bytebuffer.h\"",
          "34: #line 269 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:     { 0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1 },",
          "52:     { 2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2 },",
          "53:     { 0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3 } };",
          "62:   if (filters == 1) return filter[(row+top_margin)&15][(col+left_margin)&15];",
          "64:   return FC(row,col);",
          "65: }",
          "",
          "[Removed Lines]",
          "54:   static const char filter2[6][6] =",
          "55:   { { 1,1,0,1,1,2 },",
          "56:     { 1,1,2,1,1,0 },",
          "57:     { 2,0,1,0,2,1 },",
          "58:     { 1,1,2,1,1,0 },",
          "59:     { 1,1,0,1,1,2 },",
          "60:     { 0,2,1,2,0,1 } };",
          "63:   if (filters == 2) return filter2[(row+6) % 6][(col+6) % 6];",
          "",
          "[Added Lines]",
          "53:   if (filters == 9) return xtrans[(row+top_margin+6)%6][(col+left_margin+6)%6];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:   return 0;",
          "76: }",
          "77: #define memmem my_memmem",
          "78: #endif",
          "80: ushort CLASS sget2 (uchar *s)",
          "81: {",
          "",
          "[Removed Lines]",
          "79: #line 335 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "68: char *my_strcasestr (char *haystack, const char *needle)",
          "69: {",
          "70:   char *c;",
          "71:   for (c = haystack; *c; c++)",
          "72:     if (!strncasecmp(c, needle, strlen(needle)))",
          "73:       return c;",
          "74:   return 0;",
          "75: }",
          "76: #define strcasestr my_strcasestr",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "320:   return 0;",
          "321: }",
          "327: unsigned CLASS getbithuff (int nbits, ushort *huff)",
          "328: {",
          "329: #ifdef LIBRAW_NOTHREADS",
          "",
          "[Removed Lines]",
          "324:    getbits(-1) initializes the buffer",
          "325:    getbits(n) where 0 <= n <= 25 returns an n-bit integer",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "336: #endif",
          "337:   unsigned c;",
          "340:     return bitbuf = vbits = reset = 0;",
          "341:   if (nbits == 0 || vbits < 0) return 0;",
          "342:   while (!reset && vbits < nbits && (c = fgetc(ifp)) != EOF &&",
          "",
          "[Removed Lines]",
          "339:   if (nbits == -1)",
          "",
          "[Added Lines]",
          "333:   if (nbits > 25) return 0;",
          "334:   if (nbits < 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "549:   }",
          "550:   FORC(2) free (huff[c]);",
          "551: }",
          "553: int CLASS ljpeg_start (struct jhead *jh, int info_only)",
          "554: {",
          "555:   int c, tag, len;",
          "",
          "[Removed Lines]",
          "552: #line 819 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "590:     }",
          "591:   } while (tag != 0xffda);",
          "592:   if (info_only) return 1;",
          "593:   FORC(5) if (!jh->huff[c+1]) jh->huff[c+1] = jh->huff[c];",
          "594:   if (jh->sraw) {",
          "595:     FORC(4)        jh->huff[2+c] = jh->huff[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:   if (jh->clrs > 6 || !jh->huff[0]) return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:   return diff;",
          "621: }",
          "692: ushort * CLASS ljpeg_row (int jrow, struct jhead *jh)",
          "693: {",
          "694:   int col, c, diff, pred, spred=0;",
          "",
          "[Removed Lines]",
          "623: #ifdef LIBRAW_LIBRARY_BUILD",
          "624: int CLASS ljpeg_diff_new (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "625: {",
          "626:   int len, diff;",
          "628:   len = bits._gethuff_lj(buf,*huff,huff+1);",
          "629:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "630:     return -32768;",
          "631:   diff = bits._getbits_lj(buf,len);",
          "632:   if ((diff & (1 << (len-1))) == 0)",
          "633:     diff -= (1 << len) - 1;",
          "634:   return diff;",
          "635: }",
          "637: int CLASS ljpeg_diff_pef (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff)",
          "638: {",
          "639:   int len, diff;",
          "641:   len = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "642:   if (len == 16 && (!dng_version || dng_version >= 0x1010000))",
          "643:     return -32768;",
          "644:   diff = bits._getbits(buf,len,zero_after_ff);",
          "645:   if ((diff & (1 << (len-1))) == 0)",
          "646:     diff -= (1 << len) - 1;",
          "647:   return diff;",
          "648: }",
          "650: ushort * CLASS ljpeg_row_new (int jrow, struct jhead *jh, LibRaw_bit_buffer& bits,LibRaw_byte_buffer* bytes)",
          "651: {",
          "652:   int col, c, diff, pred, spred=0;",
          "653:   ushort mark=0, *row[3];",
          "655:   if (jrow * jh->wide % jh->restart == 0) {",
          "656:     FORC(6) jh->vpred[c] = 1 << (jh->bits-1);",
          "657:     if (jrow) {",
          "658:         bytes->unseek2();",
          "659:         do mark = (mark << 8) + (c = bytes->get_byte());",
          "660:         while (c != EOF && mark >> 4 != 0xffd);",
          "661:     }",
          "662:     bits.reset();",
          "663:   }",
          "664:   FORC3 row[c] = jh->row + jh->wide*jh->clrs*((jrow+c) & 1);",
          "665:   for (col=0; col < jh->wide; col++)",
          "666:     FORC(jh->clrs) {",
          "667:         diff = ljpeg_diff_new (bits,bytes,jh->huff[c]);",
          "668:       if (jh->sraw && c <= jh->sraw && (col | c))",
          "669:       pred = spred;",
          "670:       else if (col) pred = row[0][-jh->clrs];",
          "671:       else     pred = (jh->vpred[c] += diff) - diff;",
          "672:       if (jrow && col) switch (jh->psv) {",
          "673:  case 1: break;",
          "674:  case 2: pred = row[1][0];     break;",
          "675:  case 3: pred = row[1][-jh->clrs];    break;",
          "676:  case 4: pred = pred +   row[1][0] - row[1][-jh->clrs];  break;",
          "677:  case 5: pred = pred + ((row[1][0] - row[1][-jh->clrs]) >> 1); break;",
          "678:  case 6: pred = row[1][0] + ((pred - row[1][-jh->clrs]) >> 1); break;",
          "679:  case 7: pred = (pred + row[1][0]) >> 1;    break;",
          "680:  default: pred = 0;",
          "681:       }",
          "682:       if ((**row = pred + diff) >> jh->bits) derror();",
          "683:       if (c <= jh->sraw) spred = **row;",
          "684:       row[0]++; row[1]++;",
          "685:     }",
          "686:   return row[2];",
          "687: }",
          "689: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "731: void CLASS lossless_jpeg_load_raw()",
          "732: {",
          "737:   struct jhead jh;",
          "738:   ushort *rp;",
          "761:   if (!ljpeg_start (&jh, 0)) return;",
          "762:   jwide = jh.wide * jh.clrs;",
          "805:   for (jrow=0; jrow < jh.high; jrow++) {",
          "811:     rp = ljpeg_row (jrow, &jh);",
          "812:     if (load_flags & 1)",
          "813:       row = jrow & 1 ? height-1-jrow/2 : jrow/2;",
          "814:     for (jcol=0; jcol < jwide; jcol++) {",
          "815:       val = curve[*rp++];",
          "818:       if (cr2_slice[0]) {",
          "819:  jidx = jrow*jwide + jcol;",
          "820:  i = jidx / (cr2_slice[1]*jh.high);",
          "",
          "[Removed Lines]",
          "733:   int jwide, jrow, jcol, val, i, row=0, col=0;",
          "734: #ifndef LIBRAW_LIBRARY_BUILD",
          "735:   int jidx,j;",
          "736: #endif",
          "740: #ifdef LIBRAW_LIBRARY_BUILD",
          "741:   int save_min = 0;",
          "742:   unsigned slicesW[16],slicesWcnt=0,slices;",
          "743:   unsigned *offset;",
          "744:   unsigned t_y=0,t_x=0,t_s=0,slice=0,pixelsInSlice,pixno;",
          "745:   if (!strcasecmp(make,\"KODAK\"))",
          "746:       save_min = 1;",
          "747: #endif",
          "749: #ifdef LIBRAW_LIBRARY_BUILD",
          "750:   if (cr2_slice[0]>15)",
          "751:       throw LIBRAW_EXCEPTION_IO_EOF; // change many slices",
          "752: #else",
          "753:   if (cr2_slice[0]>15)",
          "754:   {",
          "755:       fprintf(stderr,\"Too many CR2 slices: %d\\n\",cr2_slice[0]+1);",
          "756:       return;",
          "757:   }",
          "758: #endif",
          "764: #ifdef LIBRAW_LIBRARY_BUILD",
          "765:   if(cr2_slice[0])",
          "766:       {",
          "767:           for(i=0;i<cr2_slice[0];i++)",
          "768:               slicesW[slicesWcnt++] = cr2_slice[1];",
          "769:           slicesW[slicesWcnt++] = cr2_slice[2];",
          "770:       }",
          "771:   else",
          "772:       {",
          "774:           slicesW[slicesWcnt++] = raw_width; // safe fallback",
          "775:       }",
          "777:   slices = slicesWcnt * jh.high;",
          "778:   offset = (unsigned*)calloc(slices+1,sizeof(offset[0]));",
          "780:   for(slice=0;slice<slices;slice++)",
          "781:       {",
          "782:           offset[slice] = (t_x + t_y * raw_width)| (t_s<<28);",
          "783:           if((offset[slice] & 0x0fffffff) >= raw_width * raw_height)",
          "784:               throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "785:           t_y++;",
          "786:           if(t_y == jh.high)",
          "787:               {",
          "788:                   t_y = 0;",
          "789:                   t_x += slicesW[t_s++];",
          "790:               }",
          "791:       }",
          "792:   offset[slices] = offset[slices-1];",
          "793:   slice = 1; // next slice",
          "794:   pixno = offset[0];",
          "795:   pixelsInSlice = slicesW[0];",
          "796: #endif",
          "798: #ifdef LIBRAW_LIBRARY_BUILD",
          "799:   LibRaw_byte_buffer *buf=NULL;",
          "800:   if(data_size)",
          "801:       buf = ifp->make_byte_buffer(data_size);",
          "802:   LibRaw_bit_buffer bits;",
          "803: #endif",
          "806: #ifdef LIBRAW_LIBRARY_BUILD",
          "807:       if (buf)",
          "808:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "809:       else",
          "810: #endif",
          "816: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Added Lines]",
          "660:   int jwide, jrow, jcol, val, jidx, i, j, row=0, col=0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "824:  row = jidx / cr2_slice[1+j];",
          "825:  col = jidx % cr2_slice[1+j] + i*cr2_slice[1];",
          "826:       }",
          "843:       if (raw_width == 3984 && (col -= 2) < 0)",
          "844:  col += (row--,raw_width);",
          "847:       if (++col >= raw_width)",
          "848:  col = (row++,0);",
          "854:     }",
          "855:   }",
          "856:   ljpeg_end (&jh);",
          "862: }",
          "864: void CLASS canon_sraw_load_raw()",
          "",
          "[Removed Lines]",
          "827: #else",
          "829:       if(buf)",
          "830:           {",
          "831:               if(!(load_flags & 1))",
          "832:                   row = pixno/raw_width;",
          "833:               col = pixno % raw_width;",
          "834:               pixno++;",
          "835:               if (0 == --pixelsInSlice)",
          "836:                   {",
          "837:                       unsigned o = offset[slice++];",
          "838:                       pixno = o & 0x0fffffff;",
          "839:                       pixelsInSlice = slicesW[o>>28];",
          "840:                   }",
          "841:           }",
          "842: #endif",
          "845:       if (row >= 0) RAW(row,col) = val;",
          "846: #ifndef LIBRAW_LIBRARY_BUILD",
          "849: #else",
          "850:       if(!buf) // 1D or 1Ds case",
          "851:          if (++col >= raw_width)",
          "852:             col = (row++,0);",
          "853: #endif",
          "857: #ifdef LIBRAW_LIBRARY_BUILD",
          "858:   if(buf)",
          "859:       delete buf;",
          "860:   free(offset);",
          "861: #endif",
          "",
          "[Added Lines]",
          "684:       if ((unsigned) row < raw_height) RAW(row,col) = val;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "869:   int v[3]={0,0,0}, ver, hue;",
          "870:   char *cp;",
          "873:   jwide = (jh.wide >>= 1) * jh.clrs;",
          "882:   for (ecol=slice=0; slice <= cr2_slice[0]; slice++) {",
          "883:     scol = ecol;",
          "884:     ecol += cr2_slice[1] * 2 / jh.clrs;",
          "",
          "[Removed Lines]",
          "872:   if (!ljpeg_start (&jh, 0)) return;",
          "875: #ifdef LIBRAW_LIBRARY_BUILD",
          "876:   if(!data_size)",
          "877:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "878:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "879:   LibRaw_bit_buffer bits;",
          "880: #endif",
          "",
          "[Added Lines]",
          "700:   if (!ljpeg_start (&jh, 0) || jh.clrs < 4) return;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "887:       ip = (short (*)[4]) image + row*width;",
          "888:       for (col=scol; col < ecol; col+=2, jcol+=jh.clrs) {",
          "889:  if ((jcol %= jwide) == 0)",
          "895:  if (col >= width) continue;",
          "896:  FORC (jh.clrs-2)",
          "897:    ip[col + (c >> 1)*width + (c & 1)][0] = rp[jcol+c];",
          "",
          "[Removed Lines]",
          "890: #ifdef LIBRAW_LIBRARY_BUILD",
          "891:             rp = (short*) ljpeg_row_new (jrow++, &jh,bits,buf);",
          "892: #else",
          "893:             rp = (short *) ljpeg_row (jrow++, &jh);",
          "894: #endif",
          "",
          "[Added Lines]",
          "711:    rp = (short *) ljpeg_row (jrow++, &jh);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "940:     }",
          "941:     FORC3 rp[c] = CLIP(pix[c] * sraw_mul[c] >> 10);",
          "942:   }",
          "946:   ljpeg_end (&jh);",
          "947:   maximum = 0x3fff;",
          "948: }",
          "951: void CLASS adobe_copy_pixel (unsigned row, unsigned col, ushort **rp)",
          "952: {",
          "953:   int c;",
          "",
          "[Removed Lines]",
          "943: #ifdef LIBRAW_LIBRARY_BUILD",
          "944:   delete buf;",
          "945: #endif",
          "950: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "965:   }",
          "966:   if (is_raw == 2 && shot_select) (*rp)--;",
          "967: }",
          "991: void CLASS lossless_dng_load_raw()",
          "992: {",
          "",
          "[Removed Lines]",
          "968: #else",
          "969: void CLASS adobe_copy_pixel_raw (unsigned row, unsigned col, ushort **rp)",
          "970: {",
          "971:   if (is_raw == 2 && shot_select) (*rp)++;",
          "972:   if (row < raw_height && col < raw_width)",
          "973:     RAW(row,col) = curve[**rp];",
          "975:   if (is_raw == 2 && shot_select) (*rp)--;",
          "976: }",
          "977: void CLASS adobe_copy_pixel_color (unsigned row, unsigned col, ushort **rp)",
          "978: {",
          "979:   int c;",
          "981:   if (is_raw == 2 && shot_select) (*rp)++;",
          "982:   if (row < height && col < width)",
          "983:     FORC(tiff_samples)",
          "984:       image[row*width+col][c] = curve[(*rp)[c]];",
          "986:   if (is_raw == 2 && shot_select) (*rp)--;",
          "987: }",
          "988: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1002:     jwide = jh.wide;",
          "1003:     if (filters) jwide *= jh.clrs;",
          "1004:     jwide /= is_raw;",
          "1013:     for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1014:       rp = ljpeg_row (jrow, &jh);",
          "1015:       for (jcol=0; jcol < jwide; jcol++) {",
          "",
          "[Removed Lines]",
          "1005: #ifdef LIBRAW_LIBRARY_BUILD",
          "1006:     if(!data_size)",
          "1007:         throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1008:     LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1009:     LibRaw_bit_buffer bits;",
          "1010: #endif",
          "1012: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1018:    row += 1 + (col = 0);",
          "1019:       }",
          "1020:     }",
          "1053:     fseek (ifp, save+4, SEEK_SET);",
          "1054:     if ((tcol += tile_width) >= raw_width)",
          "1055:       trow += tile_length + (tcol = 0);",
          "1056:     ljpeg_end (&jh);",
          "1060:   }",
          "1061: }",
          "",
          "[Removed Lines]",
          "1021: #else",
          "1022:     if(raw_image)",
          "1023:       {",
          "1024:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1025: #ifdef LIBRAW_LIBRARY_BUILD",
          "1026:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1027: #else",
          "1028:           rp = ljpeg_row (jrow, &jh);",
          "1029: #endif",
          "1030:           for (jcol=0; jcol < jwide; jcol++) {",
          "1031:             adobe_copy_pixel_raw (trow+row, tcol+col, &rp);",
          "1032:             if (++col >= tile_width || col >= raw_width)",
          "1033:               row += 1 + (col = 0);",
          "1034:           }",
          "1035:         }",
          "1036:       }",
          "1037:     else",
          "1038:       {",
          "1039:         for (row=col=jrow=0; jrow < jh.high; jrow++) {",
          "1040: #ifdef LIBRAW_LIBRARY_BUILD",
          "1041:           rp = ljpeg_row_new (jrow, &jh,bits,buf);",
          "1042: #else",
          "1043:           rp = ljpeg_row (jrow, &jh);",
          "1044: #endif",
          "1045:           for (jcol=0; jcol < jwide; jcol++) {",
          "1046:             adobe_copy_pixel_color (trow+row, tcol+col, &rp);",
          "1047:             if (++col >= tile_width || col >= raw_width)",
          "1048:               row += 1 + (col = 0);",
          "1049:           }",
          "1050:         }",
          "1051:       }",
          "1052: #endif",
          "1057: #ifdef LIBRAW_LIBRARY_BUILD",
          "1058:     delete buf;",
          "1059: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1065:   ushort *pixel, *rp;",
          "1066:   int row, col;",
          "1069:   merror (pixel, \"packed_dng_load_raw()\");",
          "1081:   for (row=0; row < raw_height; row++) {",
          "1082:     if (tiff_bps == 16)",
          "1083:       read_shorts (pixel, raw_width * tiff_samples);",
          "1084:     else {",
          "1091:       getbits(-1);",
          "1092:       for (col=0; col < raw_width * tiff_samples; col++)",
          "1093:  pixel[col] = getbits(tiff_bps);",
          "1095:     }",
          "1097:     for (rp=pixel, col=0; col < raw_width; col++)",
          "1098:       adobe_copy_pixel (row, col, &rp);",
          "1107:   }",
          "1108:   free (pixel);",
          "1113: }",
          "1115: void CLASS pentax_load_raw()",
          "",
          "[Removed Lines]",
          "1068:   pixel = (ushort *) calloc (raw_width * tiff_samples, sizeof *pixel);",
          "1071: #ifdef LIBRAW_LIBRARY_BUILD",
          "1072:   int dsz= raw_height*raw_width * tiff_samples * tiff_bps/8;",
          "1073:   LibRaw_byte_buffer *buf = NULL;",
          "1074:   if (tiff_bps != 16)",
          "1075:       {",
          "1076:           buf = ifp->make_byte_buffer(dsz);",
          "1077:       }",
          "1078:   LibRaw_bit_buffer bits;",
          "1079: #endif",
          "1085: #ifdef LIBRAW_LIBRARY_BUILD",
          "1086:         bits.reset();",
          "1087:         for (col=0; col < raw_width * tiff_samples; col++)",
          "1088:             pixel[col] = bits._getbits(buf,tiff_bps,zero_after_ff);",
          "1090: #else",
          "1094: #endif",
          "1096: #ifndef LIBRAW_LIBRARY_BUILD",
          "1099: #else",
          "1100:     if(raw_image)",
          "1101:       for (rp=pixel, col=0; col < raw_width; col++)",
          "1102:         adobe_copy_pixel_raw (row, col, &rp);",
          "1103:     else",
          "1104:       for (rp=pixel, col=0; col < raw_width; col++)",
          "1105:         adobe_copy_pixel_color (row, col, &rp);",
          "1106: #endif",
          "1109: #ifdef LIBRAW_LIBRARY_BUILD",
          "1110:     if(buf)",
          "1111:         delete buf;",
          "1112: #endif",
          "",
          "[Added Lines]",
          "817:   pixel = (ushort *) calloc (raw_width, tiff_samples*sizeof *pixel);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1128:       huff[++i] = bit[1][c] << 8 | c;",
          "1129:   huff[0] = 12;",
          "1130:   fseek (ifp, data_offset, SEEK_SET);",
          "1138:   getbits(-1);",
          "1140:   for (row=0; row < raw_height; row++)",
          "1141:     for (col=0; col < raw_width; col++) {",
          "1145:       diff = ljpeg_diff (huff);",
          "1147:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "1148:       else    hpred[col & 1] += diff;",
          "1149:       RAW(row,col) = hpred[col & 1];",
          "1150:       if (hpred[col & 1] >> tiff_bps) derror();",
          "1151:     }",
          "1155: }",
          "1157: void CLASS nikon_load_raw()",
          "",
          "[Removed Lines]",
          "1131: #ifdef LIBRAW_LIBRARY_BUILD",
          "1132:   if(!data_size)",
          "1133:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1134:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1135:   LibRaw_bit_buffer bits;",
          "1136:   bits.reset();",
          "1137: #else",
          "1139: #endif",
          "1142: #ifdef LIBRAW_LIBRARY_BUILD",
          "1143:       diff = ljpeg_diff_pef(bits,buf,huff);",
          "1144: #else",
          "1146: #endif",
          "1152: #ifdef LIBRAW_LIBRARY_BUILD",
          "1153:   delete buf;",
          "1154: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1196:   while (curve[max-2] == curve[max-1]) max--;",
          "1197:   huff = make_decoder (nikon_tree[tree]);",
          "1198:   fseek (ifp, data_offset, SEEK_SET);",
          "1206:   getbits(-1);",
          "1208:   for (min=row=0; row < height; row++) {",
          "1209:     if (split && row == split) {",
          "1210:       free (huff);",
          "",
          "[Removed Lines]",
          "1199: #ifdef LIBRAW_LIBRARY_BUILD",
          "1200:   if(!data_size)",
          "1201:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1202:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1203:   LibRaw_bit_buffer bits;",
          "1204:   bits.reset();",
          "1205: #else",
          "1207: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1212:       max += (min = 16) << 1;",
          "1213:     }",
          "1214:     for (col=0; col < raw_width; col++) {",
          "1218:       i = gethuff(huff);",
          "1220:       len = i & 15;",
          "1221:       shl = i >> 4;",
          "1225:       diff = ((getbits(len-shl) << 1) + 1) << shl >> 1;",
          "1227:       if ((diff & (1 << (len-1))) == 0)",
          "1228:  diff -= (1 << len) - !shl;",
          "1229:       if (col < 2) hpred[col] = vpred[row & 1][col] += diff;",
          "",
          "[Removed Lines]",
          "1215: #ifdef LIBRAW_LIBRARY_BUILD",
          "1216:         i = bits._gethuff(buf,*huff,huff+1,zero_after_ff);",
          "1217: #else",
          "1219: #endif",
          "1222: #ifdef LIBRAW_LIBRARY_BUILD",
          "1223:       diff = ((bits._getbits(buf,len-shl,zero_after_ff) << 1) + 1) << shl >> 1;",
          "1224: #else",
          "1226: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1232:       RAW(row,col) = curve[LIM((short)hpred[col & 1],0,0x3fff)];",
          "1233:     }",
          "1234:   }",
          "1238:   free (huff);",
          "1239: }",
          "",
          "[Removed Lines]",
          "1235: #ifdef LIBRAW_LIBRARY_BUILD",
          "1236:   delete buf;",
          "1237: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1282:     int bits;",
          "1283:     char t_make[12], t_model[15];",
          "1284:   } table[] = {",
          "1290:   fseek (ifp, 3072, SEEK_SET);",
          "1291:   fread (dp, 1, 24, ifp);",
          "",
          "[Removed Lines]",
          "1285:     { 0x00, \"PENTAX\",  \"Optio 33WR\" },",
          "1286:     { 0x03, \"NIKON\",   \"E3200\" },",
          "1287:     { 0x32, \"NIKON\",   \"E3700\" },",
          "1288:     { 0x33, \"OLYMPUS\", \"C740UZ\" } };",
          "",
          "[Added Lines]",
          "969:     { 0x00, \"Pentax\",  \"Optio 33WR\" },",
          "970:     { 0x03, \"Nikon\",   \"E3200\" },",
          "971:     { 0x32, \"Nikon\",   \"E3700\" },",
          "972:     { 0x33, \"Olympus\", \"C740UZ\" } };",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1311:     if (tail[i]) nz++;",
          "1312:   return nz > 20;",
          "1313: }",
          "1315: void CLASS ppm_thumb()",
          "1316: {",
          "1317:   char *thumb;",
          "",
          "[Removed Lines]",
          "1314: #line 1585 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1329:   int i;",
          "1330:   char *thumb;",
          "1331:   thumb_length = thumb_width*thumb_height*3;",
          "1333:   merror (thumb, \"ppm16_thumb()\");",
          "1334:   read_shorts ((ushort *) thumb, thumb_length);",
          "1335:   for (i=0; i < thumb_length; i++)",
          "",
          "[Removed Lines]",
          "1332:   thumb = (char *) calloc (thumb_length,2);",
          "",
          "[Added Lines]",
          "1015:   thumb = (char *) calloc (thumb_length, 2);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1767:   raw_image = 0;",
          "1768:   free (image);",
          "1769:   image = (ushort (*)[4])",
          "1771:   merror (image, \"sinar_4shot_load_raw()\");",
          "1772: #endif",
          "1773:   pixel = (ushort *) calloc (raw_width, sizeof *pixel);",
          "",
          "[Removed Lines]",
          "1770:  calloc ((iheight=height)*(iwidth=width), sizeof *image);",
          "",
          "[Added Lines]",
          "1453:  calloc ((iheight=height), (iwidth=width)*sizeof *image);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1792: {",
          "1793:   int row, col;",
          "1795:   for (row=0; row < height; row++)",
          "1796:     for (col=0; col < width; col++)",
          "1797:       read_shorts (image[row*width+col], 3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478:   if (!image) return;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1800: void CLASS packed_load_raw()",
          "1801: {",
          "1803:   UINT64 bitbuf=0;",
          "1809:   if (load_flags & 1) bwide = bwide * 16 / 15;",
          "1810:   bite = 8 + (load_flags & 24);",
          "1811:   half = (raw_height+1) >> 1;",
          "",
          "[Removed Lines]",
          "1802:   int vbits=0, bwide, pwide, rbits, bite, half, irow, row, col, val, i;",
          "1806:        pwide = (bwide = raw_width) * 8 / tiff_bps;",
          "1807:   else bwide = (pwide = raw_width) * tiff_bps / 8;",
          "1808:   rbits = bwide * 8 - pwide * tiff_bps;",
          "",
          "[Added Lines]",
          "1486:   int vbits=0, bwide, rbits, bite, half, irow, row, col, val, i;",
          "1489:   bwide = raw_width * tiff_bps / 8;",
          "1490:   bwide += bwide & load_flags >> 7;",
          "1491:   rbits = bwide * 8 - raw_width * tiff_bps;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1821:  fseek (ifp, ftell(ifp) >> 3 << 2, SEEK_SET);",
          "1822:       }",
          "1823:     }",
          "1825:       for (vbits -= tiff_bps; vbits < 0; vbits += bite) {",
          "1826:  bitbuf <<= bite;",
          "1827:  for (i=0; i < bite; i+=8)",
          "1828:    bitbuf |= (unsigned) (fgetc(ifp) << i);",
          "1829:       }",
          "1830:       val = bitbuf << (64-tiff_bps-vbits) >> (64-tiff_bps);",
          "1832:       if (load_flags & 1 && (col % 10) == 9 &&",
          "1833:  fgetc(ifp) && col < width+left_margin) derror();",
          "1834:     }",
          "",
          "[Removed Lines]",
          "1824:     for (col=0; col < pwide; col++) {",
          "1831:       RAW(row,col ^ (load_flags >> 6)) = val;",
          "",
          "[Added Lines]",
          "1507:     for (col=0; col < raw_width; col++) {",
          "1514:       RAW(row,col ^ (load_flags >> 6 & 1)) = val;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1842:   int rev, dwide, row, col, c;",
          "1844:   rev = 3 * (order == 0x4949);",
          "1846:   data = (uchar *) malloc (dwide*2);",
          "1847:   merror (data, \"nokia_load_raw()\");",
          "1848:   for (row=0; row < raw_height; row++) {",
          "",
          "[Removed Lines]",
          "1845:   dwide = raw_width * 5 / 4;",
          "",
          "[Added Lines]",
          "1528:   dwide = (raw_width * 5 + 1) / 4;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1855:   maximum = 0x3ff;",
          "1856: }",
          "1858: unsigned CLASS pana_bits (int nbits)",
          "1859: {",
          "1860: #ifndef LIBRAW_NOTHREADS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: void CLASS canon_rmf_load_raw()",
          "1542: {",
          "1543:   int row, col, bits, orow, ocol, c;",
          "1545:   for (row=0; row < raw_height; row++)",
          "1546:     for (col=0; col < raw_width-2; col+=3) {",
          "1547:       bits = get4();",
          "1548:       FORC3 {",
          "1549:  orow = row;",
          "1550:  if ((ocol = col+c-4) < 0) {",
          "1551:    ocol += raw_width;",
          "1552:    if ((orow -= 2) < 0)",
          "1553:      orow += raw_height;",
          "1554:  }",
          "1555:  RAW(orow,ocol) = bits >> (10*c+2) & 0x3ff;",
          "1556:       }",
          "1557:     }",
          "1558:   maximum = 0x3ff;",
          "1559: }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1912:   for (i=12; i--; )",
          "1913:     FORC(2048 >> i) huff[++n] = (i+1) << 8 | i;",
          "1914:   fseek (ifp, 7, SEEK_CUR);",
          "1922:   getbits(-1);",
          "1924:   for (row=0; row < height; row++) {",
          "1925:     memset (acarry, 0, sizeof acarry);",
          "1926:     for (col=0; col < raw_width; col++) {",
          "1927:       carry = acarry[col & 1];",
          "1928:       i = 2 * (carry[2] < 3);",
          "1929:       for (nbits=2+i; (ushort) carry[0] >> (nbits+i); nbits++);",
          "1937:       low = (sign = getbits(3)) & 3;",
          "1938:       sign = sign << 29 >> 31;",
          "1939:       if ((high = getbithuff(12,huff)) == 12)",
          "1940:  high = getbits(16-nbits) >> 1;",
          "1941:       carry[0] = (high << nbits) | getbits(nbits);",
          "1943:       diff = (carry[0] ^ sign) + carry[1];",
          "1944:       carry[1] = (diff*3 + carry[1]) >> 5;",
          "1945:       carry[2] = carry[0] > 16 ? 0 : carry[2]+1;",
          "",
          "[Removed Lines]",
          "1915: #ifdef LIBRAW_LIBRARY_BUILD",
          "1916:   if(!data_size)",
          "1917:       throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1918:   LibRaw_byte_buffer *buf = ifp->make_byte_buffer(data_size);",
          "1919:   LibRaw_bit_buffer bits;",
          "1920:   bits.reset();",
          "1921: #else",
          "1923: #endif",
          "1930: #ifdef LIBRAW_LIBRARY_BUILD",
          "1931:       low = (sign = bits._getbits(buf,3,zero_after_ff)) & 3;",
          "1932:       sign = sign << 29 >> 31;",
          "1933:       if ((high = bits._gethuff(buf,12,huff,zero_after_ff)) == 12)",
          "1934:           high = bits._getbits(buf,16-nbits,zero_after_ff) >> 1;",
          "1935:       carry[0] = (high << nbits) | bits._getbits(buf,nbits,zero_after_ff);",
          "1936: #else",
          "1942: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1960:       if ((RAW(row,col) = pred + ((diff << 2) | low)) >> 12) derror();",
          "1961:     }",
          "1962:   }",
          "1966: }",
          "1968: void CLASS minolta_rd175_load_raw()",
          "",
          "[Removed Lines]",
          "1963: #ifdef LIBRAW_LIBRARY_BUILD",
          "1964:   delete buf;",
          "1965: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2481:   int row, col, len, c, i, j, k, y[2][2], cb, cr, rgb[3];",
          "2482:   ushort *ip;",
          "2484:   for (row=0; row < height; row+=2)",
          "2485:     for (col=0; col < width; col+=128) {",
          "2486:       len = MIN (128, width-col);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2168:   if (!image) return;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2602:   for (n=i=0; i < 18; i++)",
          "2603:     FORC(32768 >> (tab[i] >> 8)) huff[n++] = tab[i];",
          "2614:   getbits(-1);",
          "2616:   for (col = raw_width; col--; )",
          "2617:     for (row=0; row < raw_height+1; row+=2) {",
          "2618:       if (row == raw_height) row = 1;",
          "2631:       len = getbithuff(15,huff);",
          "2632:       diff = getbits(len);",
          "2634:       if ((diff & (1 << (len-1))) == 0)",
          "2635:  diff -= (1 << len) - 1;",
          "2636:       if ((sum += diff) >> 12) derror();",
          "2637:       if (row < height) RAW(row,col) = sum;",
          "2638:     }",
          "2642: }",
          "2644: void CLASS sony_arw2_load_raw()",
          "",
          "[Removed Lines]",
          "2604: #ifdef LIBRAW_LIBRARY_BUILD",
          "2605:   LibRaw_byte_buffer *buf=NULL;",
          "2606:   if(data_size)",
          "2607:       buf = ifp->make_byte_buffer(data_size);",
          "2608:   else",
          "2609:       getbits(-1);",
          "2611:   LibRaw_bit_buffer bits;",
          "2612:   bits.reset();",
          "2613: #else",
          "2615: #endif",
          "2619: #ifdef LIBRAW_LIBRARY_BUILD",
          "2620:       if(data_size)",
          "2621:           {",
          "2622:               len = bits._gethuff(buf,15,huff,zero_after_ff);",
          "2623:               diff = bits._getbits(buf,len,zero_after_ff);",
          "2624:           }",
          "2625:       else",
          "2626:           {",
          "2627:               len = getbithuff(15,huff);",
          "2628:               diff = getbits(len);",
          "2629:           }",
          "2630: #else",
          "2633: #endif",
          "2639: #ifdef LIBRAW_LIBRARY_BUILD",
          "2640:   if(buf) delete buf;",
          "2641: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2693: #endif",
          "2694: }",
          "2696: #define HOLE(row) ((holes >> (((row) - raw_height) & 7)) & 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2354: void CLASS samsung_load_raw()",
          "2355: {",
          "2356:   int row, col, c, i, dir, op[4], len[4];",
          "2358:   order = 0x4949;",
          "2359:   for (row=0; row < raw_height; row++) {",
          "2360:     fseek (ifp, strip_offset+row*4, SEEK_SET);",
          "2361:     fseek (ifp, data_offset+get4(), SEEK_SET);",
          "2362:     ph1_bits(-1);",
          "2363:     FORC4 len[c] = row < 2 ? 7:4;",
          "2364:     for (col=0; col < raw_width; col+=16) {",
          "2365:       dir = ph1_bits(1);",
          "2366:       FORC4 op[c] = ph1_bits(2);",
          "2367:       FORC4 switch (op[c]) {",
          "2368:  case 3: len[c] = ph1_bits(4); break;",
          "2369:  case 2: len[c]--;  break;",
          "2370:  case 1: len[c]++;",
          "2371:       }",
          "2372:       for (c=0; c < 16; c+=2) {",
          "2373:  i = len[((c & 1) << 1) | (c >> 3)];",
          "2374:         RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +",
          "2375:    (dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);",
          "2376:  if (c == 14) c = -1;",
          "2377:       }",
          "2378:     }",
          "2379:   }",
          "2380: }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2859: #endif",
          "2860:   jmat = jas_matrix_create (height/2, width/2);",
          "2861:   merror (jmat, \"redcine_load_raw()\");",
          "2863:   merror (img, \"redcine_load_raw()\");",
          "2864:   FORC4 {",
          "2865:     jas_image_readcmpt (jimg, c, 0, 0, width/2, height/2, jmat);",
          "",
          "[Removed Lines]",
          "2862:   img = (ushort *) calloc ((height+2)*(width+2), 2);",
          "",
          "[Added Lines]",
          "2548:   img = (ushort *) calloc ((height+2), (width+2)*2);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2893:   jas_stream_close (in);",
          "2894: #endif",
          "2895: }",
          "2897: void CLASS crop_masked_pixels()",
          "2898: {",
          "2899:   int row, col;",
          "",
          "[Removed Lines]",
          "2896: #line 3874 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2953: mask_set:",
          "2954:   memset (mblack, 0, sizeof mblack);",
          "2955:   for (zero=m=0; m < 8; m++)",
          "2958:  c = FC(row-top_margin,col-left_margin);",
          "2959:  mblack[c] += val = raw_image[(row)*raw_pitch/2+(col)];",
          "2960:  mblack[4+c]++;",
          "",
          "[Removed Lines]",
          "2956:     for (row=mask[m][0]; row < mask[m][2]; row++)",
          "2957:       for (col=mask[m][1]; col < mask[m][3]; col++) {",
          "",
          "[Added Lines]",
          "2641:     for (row=MAX(mask[m][0],0); row < MIN(mask[m][2],raw_height); row++)",
          "2642:       for (col=MAX(mask[m][1],0); col < MIN(mask[m][3],raw_width); col++) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2993:   RUN_CALLBACK(LIBRAW_PROGRESS_REMOVE_ZEROES,1,2);",
          "2994: #endif",
          "2995: }",
          "2997: void CLASS gamma_curve (double pwr, double ts, int mode, int imax)",
          "2998: {",
          "2999:   int i;",
          "",
          "[Removed Lines]",
          "2996: #line 4139 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3460: #endif",
          "3461:       }",
          "3462:   }",
          "3463:   if (pre_mul[3] == 0) pre_mul[3] = colors < 4 ? pre_mul[1] : 1;",
          "3464:   dark = black;",
          "3465:   sat = maximum;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3147:   if (pre_mul[1] == 0) pre_mul[1] = 1;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3537:     if (half_size) {",
          "3538:       height = iheight;",
          "3539:       width  = iwidth;",
          "3540:     } else {",
          "3542:       merror (img, \"pre_interpolate()\");",
          "3543:       for (row=0; row < height; row++)",
          "3544:  for (col=0; col < width; col++) {",
          "",
          "[Removed Lines]",
          "3541:       img = (ushort (*)[4]) calloc (height*width, sizeof *img);",
          "",
          "[Added Lines]",
          "3225:       if (filters == 9) {",
          "3226:  for (row=0; row < 3; row++)",
          "3227:    for (col=1; col < 4; col++)",
          "3228:      if (!(image[row*width+col][0] | image[row*width+col][2]))",
          "3229:        goto break2;  break2:",
          "3230:  for ( ; row < height; row+=3)",
          "3231:    for (col=(col-1)%3+1; col < width-1; col+=3) {",
          "3232:      img = image + row*width+col;",
          "3233:      for (c=0; c < 3; c+=2)",
          "3234:        img[0][c] = (img[-1][c] + img[1][c]) >> 1;",
          "3235:    }",
          "3236:       }",
          "3238:       img = (ushort (*)[4]) calloc (height, width*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3551:     }",
          "3552:   }",
          "3553:   if (filters > 1000 && colors == 3) {",
          "3556:     else {",
          "3557:       for (row = FC(1,0) >> 1; row < height; row+=2)",
          "3558:  for (col = FC(row,1) & 1; col < width; col+=2)",
          "",
          "[Removed Lines]",
          "3554:     if (four_color_rgb && colors++)",
          "3555:       mix_green = !half_size;",
          "",
          "[Added Lines]",
          "3251:     mix_green = four_color_rgb ^ half_size;",
          "3252:     if (four_color_rgb | half_size) colors++;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3622:   RUN_CALLBACK(LIBRAW_PROGRESS_INTERPOLATE,0,3);",
          "3623: #endif",
          "3626:   border_interpolate(1);",
          "3627:   for (row=0; row < size; row++)",
          "3628:     for (col=0; col < size; col++) {",
          "",
          "[Removed Lines]",
          "3625:   if (filters == 2) size = 6;",
          "",
          "[Added Lines]",
          "3322:   if (filters == 9) size = 6;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3702: #endif",
          "3704:   if (filters == 1) prow = pcol = 16;",
          "3706:   ip = (int *) calloc (prow*pcol, 1280);",
          "3707:   merror (ip, \"vng_interpolate()\");",
          "",
          "[Removed Lines]",
          "3705:   if (filters == 2) prow = pcol =  6;",
          "",
          "[Added Lines]",
          "3402:   if (filters == 9) prow = pcol =  6;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3871:     }",
          "3872: }",
          "3883: {",
          "3895:   }",
          "3897: }",
          "4073:       }",
          "4082:       }",
          "4089:       }",
          "4090:     }",
          "4158:       }",
          "4174:    Adaptive Homogeneity-Directed interpolation is based on",
          "4175:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "4179: void CLASS ahd_interpolate()",
          "4180: {",
          "4183:   static const int dir[4] = { -1, 1, -TS, TS };",
          "4184:   unsigned ldiff[2][4], abdiff[2][4], leps, abeps;",
          "4187:    short (*lab)[TS][TS][3], (*lix)[3];",
          "4188:    char (*homo)[TS][TS], *buffer;",
          "",
          "[Removed Lines]",
          "3874: #ifdef LIBRAW_LIBRARY_BUILD",
          "3876:    Adaptive Homogeneity-Directed interpolation is based on",
          "3877:    the work of Keigo Hirakawa, Thomas Parks, and Paul Lee.",
          "3880: static float dcraw_cbrt[0x10000] = {-1.0f};",
          "3882: static inline float calc_64cbrt(float f)",
          "3884:   unsigned u;",
          "3885:   static float lower = dcraw_cbrt[0];",
          "3886:   static float upper = dcraw_cbrt[0xffff];",
          "3888:   if (f <= 0) {",
          "3889:     return lower;",
          "3890:   }",
          "3892:   u = (unsigned) f;",
          "3893:   if (u >= 0xffff) {",
          "3894:     return upper;",
          "3896:   return dcraw_cbrt[u];",
          "3898: void CLASS ahd_interpolate_green_h_and_v(int top, int left, ushort (*out_rgb)[TS][TS][3])",
          "3899: {",
          "3900:   int row, col;",
          "3901:   int c, val;",
          "3902:   ushort (*pix)[4];",
          "3903:   const int rowlimit = MIN(top+TS, height-2);",
          "3904:   const int collimit = MIN(left+TS, width-2);",
          "3906:   for (row = top; row < rowlimit; row++) {",
          "3907:     col = left + (FC(row,left) & 1);",
          "3908:     for (c = FC(row,col); col < collimit; col+=2) {",
          "3909:       pix = image + row*width+col;",
          "3910:       val = ((pix[-1][1] + pix[0][c] + pix[1][1]) * 2",
          "3911:             - pix[-2][c] - pix[2][c]) >> 2;",
          "3912:       out_rgb[0][row-top][col-left][1] = ULIM(val,pix[-1][1],pix[1][1]);",
          "3913:       val = ((pix[-width][1] + pix[0][c] + pix[width][1]) * 2",
          "3914:             - pix[-2*width][c] - pix[2*width][c]) >> 2;",
          "3915:       out_rgb[1][row-top][col-left][1] = ULIM(val,pix[-width][1],pix[width][1]);",
          "3916:     }",
          "3917:   }",
          "3918: }",
          "3919: void CLASS ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][3], short (*out_lab)[TS][3], const float (&xyz_cam)[3][4])",
          "3920: {",
          "3921:   unsigned row, col;",
          "3922:   int c, val;",
          "3923:   ushort (*pix)[4];",
          "3924:   ushort (*rix)[3];",
          "3925:   short (*lix)[3];",
          "3926:   float xyz[3];",
          "3927:   const unsigned num_pix_per_row = 4*width;",
          "3928:   const unsigned rowlimit = MIN(top+TS-1, height-3);",
          "3929:   const unsigned collimit = MIN(left+TS-1, width-3);",
          "3930:   ushort *pix_above;",
          "3931:   ushort *pix_below;",
          "3932:   int t1, t2;",
          "3934:   for (row = top+1; row < rowlimit; row++) {",
          "3935:     pix = image + row*width + left;",
          "3936:     rix = &inout_rgb[row-top][0];",
          "3937:     lix = &out_lab[row-top][0];",
          "3939:     for (col = left+1; col < collimit; col++) {",
          "3940:       pix++;",
          "3941:       pix_above = &pix[0][0] - num_pix_per_row;",
          "3942:       pix_below = &pix[0][0] + num_pix_per_row;",
          "3943:       rix++;",
          "3944:       lix++;",
          "3946:       c = 2 - FC(row, col);",
          "3948:       if (c == 1) {",
          "3949:         c = FC(row+1,col);",
          "3950:  t1 = 2-c;",
          "3951:         val = pix[0][1] + (( pix[-1][t1] + pix[1][t1]",
          "3952:               - rix[-1][1] - rix[1][1] ) >> 1);",
          "3953:         rix[0][t1] = CLIP(val);",
          "3954:         val = pix[0][1] + (( pix_above[c] + pix_below[c]",
          "3955:               - rix[-TS][1] - rix[TS][1] ) >> 1);",
          "3956:       } else {",
          "3959:         val = rix[0][1] + (( pix_above[t1] + pix_above[t2]",
          "3960:               + pix_below[t1] + pix_below[t2]",
          "3961:               - rix[-TS-1][1] - rix[-TS+1][1]",
          "3962:               - rix[+TS-1][1] - rix[+TS+1][1] + 1) >> 2);",
          "3963:       }",
          "3964:       rix[0][c] = CLIP(val);",
          "3965:       c = FC(row,col);",
          "3966:       rix[0][c] = pix[0][c];",
          "3967:       xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "3968:       FORC3 {",
          "3973:         xyz[0] += xyz_cam[0][c] * rix[0][c];",
          "3974:         xyz[1] += xyz_cam[1][c] * rix[0][c];",
          "3975:         xyz[2] += xyz_cam[2][c] * rix[0][c];",
          "3976:       }",
          "3977:       FORC3 {",
          "3978:  xyz[c] = calc_64cbrt(xyz[c]);",
          "3979:       }",
          "3980:       lix[0][0] = (116 * xyz[1] - 16);",
          "3981:       lix[0][1] = 500 * (xyz[0] - xyz[1]);",
          "3982:       lix[0][2] = 200 * (xyz[1] - xyz[2]);",
          "3983:     }",
          "3984:   }",
          "3985: }",
          "3986: void CLASS ahd_interpolate_r_and_b_and_convert_to_cielab(int top, int left, ushort (*inout_rgb)[TS][TS][3], short (*out_lab)[TS][TS][3], const float (&xyz_cam)[3][4])",
          "3987: {",
          "3988:   int direction;",
          "3989:   for (direction = 0; direction < 2; direction++) {",
          "3990:     ahd_interpolate_r_and_b_in_rgb_and_convert_to_cielab(top, left, inout_rgb[direction], out_lab[direction], xyz_cam);",
          "3991:   }",
          "3992: }",
          "3993: void CLASS ahd_interpolate_build_homogeneity_map(int top, int left, short (*lab)[TS][TS][3], char (*out_homogeneity_map)[TS][2])",
          "3994: {",
          "3995:   int row, col;",
          "3996:   int tr, tc;",
          "3997:   int direction;",
          "3998:   int i;",
          "3999:   short (*lix)[3];",
          "4000:   short (*lixs[2])[3];",
          "4001:   short *adjacent_lix;",
          "4002:   unsigned ldiff[2][4], abdiff[2][4], leps, abeps;",
          "4003:   static const int dir[4] = { -1, 1, -TS, TS };",
          "4004:   const int rowlimit = MIN(top+TS-2, height-4);",
          "4005:   const int collimit = MIN(left+TS-2, width-4);",
          "4006:   int homogeneity;",
          "4007:   char (*homogeneity_map_p)[2];",
          "4009:   memset (out_homogeneity_map, 0, 2*TS*TS);",
          "4011:   for (row=top+2; row < rowlimit; row++) {",
          "4012:     tr = row-top;",
          "4013:     homogeneity_map_p = &out_homogeneity_map[tr][1];",
          "4014:     for (direction=0; direction < 2; direction++) {",
          "4015:       lixs[direction] = &lab[direction][tr][1];",
          "4016:     }",
          "4018:     for (col=left+2; col < collimit; col++) {",
          "4019:       tc = col-left;",
          "4020:       homogeneity_map_p++;",
          "4022:       for (direction=0; direction < 2; direction++) {",
          "4023:         lix = ++lixs[direction];",
          "4024:         for (i=0; i < 4; i++) {",
          "4025:    adjacent_lix = lix[dir[i]];",
          "4026:           ldiff[direction][i] = ABS(lix[0][0]-adjacent_lix[0]);",
          "4027:           abdiff[direction][i] = SQR(lix[0][1]-adjacent_lix[1])",
          "4028:             + SQR(lix[0][2]-adjacent_lix[2]);",
          "4029:         }",
          "4030:       }",
          "4031:       leps = MIN(MAX(ldiff[0][0],ldiff[0][1]),",
          "4032:           MAX(ldiff[1][2],ldiff[1][3]));",
          "4033:       abeps = MIN(MAX(abdiff[0][0],abdiff[0][1]),",
          "4034:           MAX(abdiff[1][2],abdiff[1][3]));",
          "4035:       for (direction=0; direction < 2; direction++) {",
          "4036:  homogeneity = 0;",
          "4037:         for (i=0; i < 4; i++) {",
          "4038:           if (ldiff[direction][i] <= leps && abdiff[direction][i] <= abeps) {",
          "4039:      homogeneity++;",
          "4040:    }",
          "4041:  }",
          "4042:  homogeneity_map_p[0][direction] = homogeneity;",
          "4043:       }",
          "4044:     }",
          "4045:   }",
          "4046: }",
          "4047: void CLASS ahd_interpolate_combine_homogeneous_pixels(int top, int left, ushort (*rgb)[TS][TS][3], char (*homogeneity_map)[TS][2])",
          "4048: {",
          "4049:   int row, col;",
          "4050:   int tr, tc;",
          "4051:   int i, j;",
          "4052:   int direction;",
          "4053:   int hm[2];",
          "4054:   int c;",
          "4055:   const int rowlimit = MIN(top+TS-3, height-5);",
          "4056:   const int collimit = MIN(left+TS-3, width-5);",
          "4058:   ushort (*pix)[4];",
          "4059:   ushort (*rix[2])[3];",
          "4061:   for (row=top+3; row < rowlimit; row++) {",
          "4062:     tr = row-top;",
          "4063:     pix = &image[row*width+left+2];",
          "4064:     for (direction = 0; direction < 2; direction++) {",
          "4065:       rix[direction] = &rgb[direction][tr][2];",
          "4066:     }",
          "4068:     for (col=left+3; col < collimit; col++) {",
          "4069:       tc = col-left;",
          "4070:       pix++;",
          "4071:       for (direction = 0; direction < 2; direction++) {",
          "4072:         rix[direction]++;",
          "4075:       for (direction=0; direction < 2; direction++) {",
          "4076:         hm[direction] = 0;",
          "4077:         for (i=tr-1; i <= tr+1; i++) {",
          "4078:           for (j=tc-1; j <= tc+1; j++) {",
          "4079:             hm[direction] += homogeneity_map[i][j][direction];",
          "4080:           }",
          "4081:         }",
          "4083:       if (hm[0] != hm[1]) {",
          "4084:         memcpy(pix[0], rix[hm[1] > hm[0]][0], 3 * sizeof(ushort));",
          "4085:       } else {",
          "4086:         FORC3 {",
          "4087:           pix[0][c] = (rix[0][0][c] + rix[1][0][c]) >> 1;",
          "4088:         }",
          "4091:   }",
          "4092: }",
          "4093: void CLASS ahd_interpolate()",
          "4094: {",
          "4095:   int i, j, k, top, left;",
          "4096:   float xyz_cam[3][4],r;",
          "4097:   char *buffer;",
          "4098:   ushort (*rgb)[TS][TS][3];",
          "4099:   short (*lab)[TS][TS][3];",
          "4100:   char (*homo)[TS][2];",
          "4101:   int terminate_flag = 0;",
          "4103:   if(dcraw_cbrt[0]<-0.1){",
          "4104:       for (i=0x10000-1; i >=0; i--) {",
          "4105:           r = i / 65535.0;",
          "4106:           dcraw_cbrt[i] = 64.0*(r > 0.008856 ? pow((double)r,1/3.0) : 7.787*r + 16/116.0);",
          "4107:       }",
          "4108:   }",
          "4110: #ifdef DCRAW_VERBOSE",
          "4111:   if (verbose) fprintf (stderr,_(\"AHD interpolation...\\n\"));",
          "4112: #endif",
          "4114:   for (i=0; i < 3; i++) {",
          "4115:     for (j=0; j < colors; j++) {",
          "4116:       xyz_cam[i][j] = 0;",
          "4117:       for (k=0; k < 3; k++) {",
          "4118:         xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "4119:       }",
          "4120:     }",
          "4121:   }",
          "4123:   border_interpolate(5);",
          "4125: #ifdef LIBRAW_LIBRARY_BUILD",
          "4126: #ifdef LIBRAW_USE_OPENMP",
          "4127: #pragma omp parallel private(buffer,rgb,lab,homo,top,left,i,j,k) shared(xyz_cam,terminate_flag)",
          "4128: #endif",
          "4129: #endif",
          "4130:   {",
          "4132:     merror (buffer, \"ahd_interpolate()\");",
          "4133:     rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "4134:     lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);",
          "4135:     homo = (char  (*)[TS][2])    (buffer + 24*TS*TS);",
          "4137: #ifdef LIBRAW_LIBRARY_BUILD",
          "4138: #ifdef LIBRAW_USE_OPENMP",
          "4139: #pragma omp for schedule(dynamic)",
          "4140: #endif",
          "4141: #endif",
          "4142:     for (top=2; top < height-5; top += TS-6){",
          "4143: #ifdef LIBRAW_LIBRARY_BUILD",
          "4144: #ifdef LIBRAW_USE_OPENMP",
          "4145:         if(0== omp_get_thread_num())",
          "4146: #endif",
          "4147:            if(callbacks.progress_cb) {",
          "4148:                int rr = (*callbacks.progress_cb)(callbacks.progresscb_data,LIBRAW_PROGRESS_INTERPOLATE,top-2,height-7);",
          "4149:                if(rr)",
          "4150:                    terminate_flag = 1;",
          "4151:            }",
          "4152: #endif",
          "4153:         for (left=2; !terminate_flag && (left < width-5); left += TS-6) {",
          "4154:             ahd_interpolate_green_h_and_v(top, left, rgb);",
          "4155:             ahd_interpolate_r_and_b_and_convert_to_cielab(top, left, rgb, lab, xyz_cam);",
          "4156:             ahd_interpolate_build_homogeneity_map(top, left, lab, homo);",
          "4157:             ahd_interpolate_combine_homogeneous_pixels(top, left, rgb, homo);",
          "4159:     }",
          "4160:     free (buffer);",
          "4161:   }",
          "4162: #ifdef LIBRAW_LIBRARY_BUILD",
          "4163:   if(terminate_flag)",
          "4164:       throw LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK;",
          "4165: #endif",
          "4166: }",
          "4170: #undef TS",
          "4172: #else",
          "4181:   int i, j, k, top, left, row, col, tr, tc, c, d, val, hm[2];",
          "4182:   ushort (*pix)[4], (*rix)[3];",
          "4185:   float r, cbrt[0x10000], xyz[3], xyz_cam[3][4];",
          "4186:   ushort (*rgb)[TS][TS][3];",
          "",
          "[Added Lines]",
          "3571: void CLASS cielab (ushort rgb[3], short lab[3])",
          "3573:   int c, i, j, k;",
          "3574:   float r, xyz[3];",
          "3575: #ifdef LIBRAW_NOTHREADS",
          "3576:   static float cbrt[0x10000], xyz_cam[3][4];",
          "3577: #else",
          "3578: #define cbrt tls->ahd_data.cbrt",
          "3579: #define xyz_cam tls->ahd_data.xyz_cam",
          "3580: #endif",
          "3582:   if (!rgb) {",
          "3583: #ifndef LIBRAW_NOTHREADS",
          "3584:     if(cbrt[0] < -1.0f)",
          "3585: #endif",
          "3586:     for (i=0; i < 0x10000; i++) {",
          "3587:       r = i / 65535.0;",
          "3588:       cbrt[i] = r > 0.008856 ? pow(r,1/3.0) : 7.787*r + 16/116.0;",
          "3589:     }",
          "3590:     for (i=0; i < 3; i++)",
          "3591:       for (j=0; j < colors; j++)",
          "3592:  for (xyz_cam[i][j] = k=0; k < 3; k++)",
          "3593:    xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "3594:     return;",
          "3596:   xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "3597:   FORCC {",
          "3598:     xyz[0] += xyz_cam[0][c] * rgb[c];",
          "3599:     xyz[1] += xyz_cam[1][c] * rgb[c];",
          "3600:     xyz[2] += xyz_cam[2][c] * rgb[c];",
          "3601:   }",
          "3602:   xyz[0] = cbrt[CLIP((int) xyz[0])];",
          "3603:   xyz[1] = cbrt[CLIP((int) xyz[1])];",
          "3604:   xyz[2] = cbrt[CLIP((int) xyz[2])];",
          "3605:   lab[0] = 64 * (116 * xyz[1] - 16);",
          "3606:   lab[1] = 64 * 500 * (xyz[0] - xyz[1]);",
          "3607:   lab[2] = 64 * 200 * (xyz[1] - xyz[2]);",
          "3608: #ifndef LIBRAW_NOTHREADS",
          "3609: #undef cbrt",
          "3610: #undef xyz_cam",
          "3611: #endif",
          "3615: #define fcol(row,col) xtrans[(row+top_margin+6)%6][(col+left_margin+6)%6]",
          "3618:    Frank Markesteijn's algorithm for Fuji X-Trans sensors",
          "3620: void CLASS xtrans_interpolate (int passes)",
          "3621: {",
          "3622:   int c, d, f, g, h, i, v, ng, row, col, top, left, mrow, mcol;",
          "3623:   int val, ndir, pass, hm[8], avg[4], color[3][8];",
          "3624:   static const short orth[12] = { 1,0,0,1,-1,0,0,-1,1,0,0,1 },",
          "3625:  patt[2][16] = { { 0,1,0,-1,2,0,-1,0,1,1,1,-1,0,0,0,0 },",
          "3626:    { 0,1,0,-2,1,0,-2,0,1,1,-2,-2,1,-1,-1,1 } },",
          "3627:  dir[4] = { 1,TS,TS+1,TS-1 };",
          "3628:   short allhex[3][3][2][8], *hex;",
          "3629:   ushort min, max, sgrow, sgcol;",
          "3630:   ushort (*rgb)[TS][TS][3], (*rix)[3], (*pix)[4];",
          "3631:    short (*lab)    [TS][3], (*lix)[3];",
          "3632:    float (*drv)[TS][TS], diff[6], tr;",
          "3633:    char (*homo)[TS][TS], *buffer;",
          "3635: #ifdef DCRAW_VERBOSE",
          "3636:   if (verbose)",
          "3637:     fprintf (stderr,_(\"%d-pass X-Trans interpolation...\\n\"), passes);",
          "3638: #endif",
          "3640:   cielab (0,0);",
          "3641:   border_interpolate(6);",
          "3642:   ndir = 4 << (passes > 1);",
          "3643:   buffer = (char *) malloc (TS*TS*(ndir*11+6));",
          "3644:   merror (buffer, \"xtrans_interpolate()\");",
          "3645:   rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "3646:   lab  = (short (*)    [TS][3])(buffer + TS*TS*(ndir*6));",
          "3647:   drv  = (float (*)[TS][TS])   (buffer + TS*TS*(ndir*6+6));",
          "3648:   homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));",
          "3651:   for (row=0; row < 3; row++)",
          "3652:     for (col=0; col < 3; col++)",
          "3653:       for (ng=d=0; d < 10; d+=2) {",
          "3654:  g = fcol(row,col) == 1;",
          "3655:  if (fcol(row+orth[d],col+orth[d+2]) == 1) ng=0; else ng++;",
          "3656:  if (ng == 4) { sgrow = row; sgcol = col; }",
          "3657:  if (ng == g+1) FORC(8) {",
          "3658:    v = orth[d  ]*patt[g][c*2] + orth[d+1]*patt[g][c*2+1];",
          "3659:    h = orth[d+2]*patt[g][c*2] + orth[d+3]*patt[g][c*2+1];",
          "3660:    allhex[row][col][0][c^(g*2 & d)] = h + v*width;",
          "3661:    allhex[row][col][1][c^(g*2 & d)] = h + v*TS;",
          "3662:  }",
          "3666:   for (row=2; row < height-2; row++)",
          "3667:     for (min=~(max=0), col=2; col < width-2; col++) {",
          "3668:       if (fcol(row,col) == 1 && (min=~(max=0))) continue;",
          "3669:       pix = image + row*width + col;",
          "3670:       hex = allhex[row % 3][col % 3][0];",
          "3671:       if (!max) FORC(6) {",
          "3672:  val = pix[hex[c]][1];",
          "3673:  if (min > val) min = val;",
          "3674:  if (max < val) max = val;",
          "3676:       pix[0][1] = min;",
          "3677:       pix[0][3] = max;",
          "3678:       switch ((row-sgrow) % 3) {",
          "3679:  case 1: if (row < height-3) { row++; col--; } break;",
          "3680:  case 2: if ((min=~(max=0)) && (col+=2) < width-3 && row > 2) row--;",
          "3684:   for (top=3; top < height-19; top += TS-16)",
          "3685:     for (left=3; left < width-19; left += TS-16) {",
          "3686:       mrow = MIN (top+TS, height-3);",
          "3687:       mcol = MIN (left+TS, width-3);",
          "3688:       for (row=top; row < mrow; row++)",
          "3689:  for (col=left; col < mcol; col++)",
          "3690:    memcpy (rgb[0][row-top][col-left], image[row*width+col], 6);",
          "3691:       FORC3 memcpy (rgb[c+1], rgb[0], sizeof *rgb);",
          "3694:       for (row=top; row < mrow; row++)",
          "3695:  for (col=left; col < mcol; col++) {",
          "3696:    if ((f = fcol(row,col)) == 1) continue;",
          "3697:    pix = image + row*width + col;",
          "3698:    hex = allhex[row % 3][col % 3][0];",
          "3699:    color[1][0] = 174 * (pix[  hex[1]][1] + pix[  hex[0]][1]) -",
          "3700:     46 * (pix[2*hex[1]][1] + pix[2*hex[0]][1]);",
          "3701:    color[1][1] = 223 *  pix[  hex[3]][1] + pix[  hex[2]][1] * 33 +",
          "3702:     92 * (pix[      0 ][f] - pix[ -hex[2]][f]);",
          "3703:    FORC(2) color[1][2+c] =",
          "3704:   164 * pix[hex[4+c]][1] + 92 * pix[-2*hex[4+c]][1] + 33 *",
          "3705:   (2*pix[0][f] - pix[3*hex[4+c]][f] - pix[-3*hex[4+c]][f]);",
          "3706:    FORC4 rgb[c^!((row-sgrow) % 3)][row-top][col-left][1] =",
          "3707:   LIM(color[1][c] >> 8,pix[0][1],pix[0][3]);",
          "3708:  }",
          "3710:       for (pass=0; pass < passes; pass++) {",
          "3711:  if (pass == 1)",
          "3712:    memcpy (rgb+=4, buffer, 4*sizeof *rgb);",
          "3715:  if (pass) {",
          "3716:    for (row=top+2; row < mrow-2; row++)",
          "3717:      for (col=left+2; col < mcol-2; col++) {",
          "3718:        if ((f = fcol(row,col)) == 1) continue;",
          "3719:        pix = image + row*width + col;",
          "3720:        hex = allhex[row % 3][col % 3][1];",
          "3721:        for (d=3; d < 6; d++) {",
          "3722:   rix = &rgb[(d-2)^!((row-sgrow) % 3)][row-top][col-left];",
          "3723:   val = rix[-2*hex[d]][1] + 2*rix[hex[d]][1]",
          "3724:       - rix[-2*hex[d]][f] - 2*rix[hex[d]][f] + 3*rix[0][f];",
          "3725:   rix[0][1] = LIM(val/3,pix[0][1],pix[0][3]);",
          "3726:        }",
          "3727:      }",
          "3728:  }",
          "3731:  for (row=(top-sgrow+4)/3*3+sgrow; row < mrow-2; row+=3)",
          "3732:    for (col=(left-sgcol+4)/3*3+sgcol; col < mcol-2; col+=3) {",
          "3733:      rix = &rgb[0][row-top][col-left];",
          "3734:      h = fcol(row,col+1);",
          "3735:      memset (diff, 0, sizeof diff);",
          "3736:      for (i=1, d=0; d < 6; d++, i^=TS^1, h^=2) {",
          "3737:        for (c=0; c < 2; c++, h^=2) {",
          "3738:   g = 2*rix[0][1] - rix[i<<c][1] - rix[-i<<c][1];",
          "3739:   color[h][d] = g + rix[i<<c][h] + rix[-i<<c][h];",
          "3740:   if (d > 1)",
          "3741:     diff[d] += SQR (rix[i<<c][1] - rix[-i<<c][1]",
          "3742:     - rix[i<<c][h] + rix[-i<<c][h]) + SQR(g);",
          "3743:        }",
          "3744:        if (d > 1 && (d & 1))",
          "3745:   if (diff[d-1] < diff[d])",
          "3746:     FORC(2) color[c*2][d] = color[c*2][d-1];",
          "3747:        if (d < 2 || (d & 1)) {",
          "3748:   FORC(2) rix[0][c*2] = CLIP(color[c*2][d]/2);",
          "3749:   rix += TS*TS;",
          "3750:        }",
          "3751:      }",
          "3752:    }",
          "3755:  for (row=top+1; row < mrow-1; row++)",
          "3756:    for (col=left+1; col < mcol-1; col++) {",
          "3757:      if ((f = 2-fcol(row,col)) == 1) continue;",
          "3758:      rix = &rgb[0][row-top][col-left];",
          "3759:      i = (row-sgrow) % 3 ? TS:1;",
          "3760:      for (d=0; d < 4; d++, rix += TS*TS)",
          "3761:        rix[0][f] = CLIP((rix[i][f] + rix[-i][f] +",
          "3762:     2*rix[0][1] - rix[i][1] - rix[-i][1])/2);",
          "3763:    }",
          "3766:  for (row=top+2; row < mrow-2; row++) if ((row-sgrow) % 3)",
          "3767:    for (col=left+2; col < mcol-2; col++) if ((col-sgcol) % 3) {",
          "3768:      rix = &rgb[0][row-top][col-left];",
          "3769:      hex = allhex[row % 3][col % 3][1];",
          "3770:      for (d=0; d < ndir; d+=2, rix += TS*TS)",
          "3771:        if (hex[d] + hex[d+1]) {",
          "3772:   g = 3*rix[0][1] - 2*rix[hex[d]][1] - rix[hex[d+1]][1];",
          "3773:   for (c=0; c < 4; c+=2) rix[0][c] =",
          "3774:    CLIP((g + 2*rix[hex[d]][c] + rix[hex[d+1]][c])/3);",
          "3775:        } else {",
          "3776:   g = 2*rix[0][1] - rix[hex[d]][1] - rix[hex[d+1]][1];",
          "3777:   for (c=0; c < 4; c+=2) rix[0][c] =",
          "3778:    CLIP((g + rix[hex[d]][c] + rix[hex[d+1]][c])/2);",
          "3779:        }",
          "3780:    }",
          "3781:       }",
          "3782:       rgb = (ushort(*)[TS][TS][3]) buffer;",
          "3783:       mrow -= top;",
          "3784:       mcol -= left;",
          "3787:       for (d=0; d < ndir; d++) {",
          "3788:  for (row=2; row < mrow-2; row++)",
          "3789:    for (col=2; col < mcol-2; col++)",
          "3790:      cielab (rgb[d][row][col], lab[row][col]);",
          "3791:  for (f=dir[d & 3],row=3; row < mrow-3; row++)",
          "3792:    for (col=3; col < mcol-3; col++) {",
          "3793:      lix = &lab[row][col];",
          "3794:      g = 2*lix[0][0] - lix[f][0] - lix[-f][0];",
          "3795:      drv[d][row][col] = SQR(g)",
          "3796:        + SQR((2*lix[0][1] - lix[f][1] - lix[-f][1] + g*500/232))",
          "3797:        + SQR((2*lix[0][2] - lix[f][2] - lix[-f][2] - g*500/580));",
          "3798:    }",
          "3802:       memset(homo, 0, ndir*TS*TS);",
          "3803:       for (row=4; row < mrow-4; row++)",
          "3804:  for (col=4; col < mcol-4; col++) {",
          "3805:    for (tr=FLT_MAX, d=0; d < ndir; d++)",
          "3806:      if (tr > drv[d][row][col])",
          "3807:   tr = drv[d][row][col];",
          "3808:    tr *= 8;",
          "3809:    for (d=0; d < ndir; d++)",
          "3810:      for (v=-1; v <= 1; v++)",
          "3811:        for (h=-1; h <= 1; h++)",
          "3812:   if (drv[d][row+v][col+h] <= tr)",
          "3813:     homo[d][row][col]++;",
          "3814:  }",
          "3817:       if (height-top < TS+4) mrow = height-top+2;",
          "3818:       if (width-left < TS+4) mcol = width-left+2;",
          "3819:       for (row = MIN(top,8); row < mrow-8; row++)",
          "3820:  for (col = MIN(left,8); col < mcol-8; col++) {",
          "3821:    for (d=0; d < ndir; d++)",
          "3822:      for (hm[d]=0, v=-2; v <= 2; v++)",
          "3823:        for (h=-2; h <= 2; h++)",
          "3824:   hm[d] += homo[d][row+v][col+h];",
          "3825:    for (d=0; d < ndir-4; d++)",
          "3826:      if (hm[d] < hm[d+4]) hm[d  ] = 0; else",
          "3827:      if (hm[d] > hm[d+4]) hm[d+4] = 0;",
          "3828:    for (max=hm[0],d=1; d < ndir; d++)",
          "3829:      if (max < hm[d]) max = hm[d];",
          "3830:    max -= max >> 3;",
          "3831:    memset (avg, 0, sizeof avg);",
          "3832:    for (d=0; d < ndir; d++)",
          "3833:      if (hm[d] >= max) {",
          "3834:        FORC3 avg[c] += rgb[d][row][col][c];",
          "3835:        avg[3]++;",
          "3836:      }",
          "3837:    FORC3 image[(row+top)*width+col+left][c] = avg[c]/avg[3];",
          "3838:  }",
          "3839:     }",
          "3840:   free(buffer);",
          "3841: }",
          "3842: #undef fcol",
          "3850:   int i, j, top, left, row, col, tr, tc, c, d, val, hm[2];",
          "3853:   ushort (*rgb)[TS][TS][3], (*rix)[3], (*pix)[4];",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4191:   if (verbose) fprintf (stderr,_(\"AHD interpolation...\\n\"));",
          "4192: #endif",
          "4203:   border_interpolate(5);",
          "4205:   merror (buffer, \"ahd_interpolate()\");",
          "4206:   rgb  = (ushort(*)[TS][TS][3]) buffer;",
          "4207:   lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);",
          "",
          "[Removed Lines]",
          "4194:   for (i=0; i < 0x10000; i++) {",
          "4195:     r = i / 65535.0;",
          "4196:     cbrt[i] = r > 0.008856 ? pow((double)r,(double)(1/3.0)) : 7.787*r + 16/116.0;",
          "4197:   }",
          "4198:   for (i=0; i < 3; i++)",
          "4199:     for (j=0; j < colors; j++)",
          "4200:       for (xyz_cam[i][j] = k=0; k < 3; k++)",
          "4201:  xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];",
          "",
          "[Added Lines]",
          "3861:   cielab (0,0);",
          "3863:   buffer = (char *) malloc (26*TS*TS);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4211:     for (left=2; left < width-5; left += TS-6) {",
          "4215:  col = left + (FC(row,left) & 1);",
          "4216:  for (c = FC(row,col); col < left+TS && col < width-2; col+=2) {",
          "4217:    pix = image + row*width+col;",
          "",
          "[Removed Lines]",
          "4214:       for (row = top; row < top+TS && row < height-2; row++) {",
          "",
          "[Added Lines]",
          "3873:       for (row=top; row < top+TS && row < height-2; row++) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4245:      rix[0][c] = CLIP(val);",
          "4246:      c = FC(row,col);",
          "4247:      rix[0][c] = pix[0][c];",
          "4260:    }",
          "4262:       memset (homo, 0, 2*TS*TS);",
          "",
          "[Removed Lines]",
          "4248:      xyz[0] = xyz[1] = xyz[2] = 0.5;",
          "4249:      FORCC {",
          "4250:        xyz[0] += xyz_cam[0][c] * rix[0][c];",
          "4251:        xyz[1] += xyz_cam[1][c] * rix[0][c];",
          "4252:        xyz[2] += xyz_cam[2][c] * rix[0][c];",
          "4253:      }",
          "4254:      xyz[0] = cbrt[CLIP((int) xyz[0])];",
          "4255:      xyz[1] = cbrt[CLIP((int) xyz[1])];",
          "4256:      xyz[2] = cbrt[CLIP((int) xyz[2])];",
          "4257:      lix[0][0] = 64 * (116 * xyz[1] - 16);",
          "4258:      lix[0][1] = 64 * 500 * (xyz[0] - xyz[1]);",
          "4259:      lix[0][2] = 64 * 200 * (xyz[1] - xyz[2]);",
          "",
          "[Added Lines]",
          "3908:      cielab (rix[0],lix[0]);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4302:   free (buffer);",
          "4303: }",
          "4304: #undef TS",
          "4307: void CLASS median_filter()",
          "4308: {",
          "",
          "[Removed Lines]",
          "4305: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4402:     if (pre_mul[kc] < pre_mul[c]) kc = c;",
          "4403:   high = height / SCALE;",
          "4404:   wide =  width / SCALE;",
          "4406:   merror (map, \"recover_highlights()\");",
          "4407:   FORCC if (c != kc) {",
          "4408: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "4405:   map = (float *) calloc (high*wide, sizeof *map);",
          "",
          "[Added Lines]",
          "4053:   map = (float *) calloc (high, wide*sizeof *map);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4488:     fseek (ifp, save, SEEK_SET);",
          "4489:   }",
          "4490: }",
          "4492: void CLASS parse_makernote (int base, int uptag)",
          "4493: {",
          "4494:   static const uchar xlat[2][256] = {",
          "",
          "[Removed Lines]",
          "4491: #line 5638 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "4614:       shot_order = get4();",
          "4615:     if (tag == 9 && !strcmp(make,\"Canon\"))",
          "4616:       fread (artist, 64, 1, ifp);",
          "4621:     if (tag == 0xd && type == 7 && get2() == 0xaaaa) {",
          "4622:       for (c=i=2; (ushort) c != 0xbbbb && i < len; i++)",
          "4623:  c = c << 8 | fgetc(ifp);",
          "",
          "[Removed Lines]",
          "4617:     if (tag == 0xc && len == 4) {",
          "4618:       cam_mul[0] = getreal(type);",
          "4619:       cam_mul[2] = getreal(type);",
          "4620:     }",
          "",
          "[Added Lines]",
          "4264:     if (tag == 0xc && len == 4)",
          "4265:       FORC3 cam_mul[(c << 1 | c >> 1) & 3] = getreal(type);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "4767:     }",
          "4768:     if ((tag | 0x70) == 0x2070 && type == 4)",
          "4769:       fseek (ifp, get4()+base, SEEK_SET);",
          "4772:     if (tag == 0x2020)",
          "4773:       parse_thumb_note (base, 257, 258);",
          "4774:     if (tag == 0x2040)",
          "",
          "[Removed Lines]",
          "4770:     if (tag == 0x2010 && type != 7)",
          "4771:       load_raw = &CLASS olympus_load_raw;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "5003:     fseek (ifp, save, SEEK_SET);",
          "5004:   }",
          "5005: }",
          "5007: int CLASS parse_tiff_ifd (int base)",
          "5008: {",
          "5009:   unsigned entries, tag, type, len, plen=16, save;",
          "",
          "[Removed Lines]",
          "5006: #line 6158 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "5034:       case 5:   width  = get2();  break;",
          "5035:       case 6:   height = get2();  break;",
          "5036:       case 7:   width += get2();  break;",
          "5038:       case 17: case 18:",
          "5039:  if (type == 3 && len == 1)",
          "5040:    cam_mul[(tag-17)*2] = get2() / 256.0;",
          "",
          "[Removed Lines]",
          "5037:       case 9:  filters = get2();  break;",
          "",
          "[Added Lines]",
          "4679:       case 9:   if ((i = get2())) filters = i;  break;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "5071:  break;",
          "5072:       case 61446:",
          "5073:  raw_height = 0;",
          "5074:  load_raw = &CLASS packed_load_raw;",
          "5076:  break;",
          "5078:  tiff_ifd[ifd].comp = getint(type);",
          "",
          "[Removed Lines]",
          "5075:  load_flags = get4() && (filters=0x16161616) ? 24:80;",
          "",
          "[Added Lines]",
          "4716:  if (tiff_ifd[ifd].bps > 12) break;",
          "4718:  load_flags = get4() ? 24:80;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "5212:  if ((plen=len) > 16) plen = 16;",
          "5213:  fread (cfa_pat, 1, plen, ifp);",
          "5215:    colors += !(cfa & (1 << cfa_pat[i]));",
          "5216:    cfa |= 1 << cfa_pat[i];",
          "5217:  }",
          "",
          "[Removed Lines]",
          "5214:  for (colors=cfa=i=0; i < plen; i++) {",
          "",
          "[Added Lines]",
          "4857:  for (colors=cfa=i=0; i < plen && colors < 4; i++) {",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "5277:    FORC3 rgb_cam[i][c] = getreal(type);",
          "5278:  }",
          "5279:  break;",
          "5281:  strcpy (make, \"Imacon\");",
          "5282:  data_offset = ftell(ifp);",
          "5283:  ima_len = len;",
          "5285:  break;",
          "5286:       case 46279:",
          "5287:  if (!ima_len) break;",
          "",
          "[Removed Lines]",
          "5284:         printf(\"Data len: %d\\n\",ima_len);",
          "",
          "[Added Lines]",
          "4923:       case 40976:",
          "4924:  strip_offset = get4();",
          "4925:  load_raw = &CLASS samsung_load_raw;",
          "4926:  break;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "5359:  cdesc[c] = 0;",
          "5360:  for (i=16; i--; )",
          "5361:    filters = filters << 2 | tab[cfa_pat[i % plen]];",
          "5362:  break;",
          "5364:  if (get2() == 2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5008:  filters -= !filters;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "5378:  blrr = blrc = 2;",
          "5380:  black = getreal(type);",
          "5382:  dblack[0] = black;",
          "5383:  dblack[1] = (blrc == 2) ? getreal(type):dblack[0];",
          "5384:  dblack[2] = (blrr == 2) ? getreal(type):dblack[0];",
          "",
          "[Removed Lines]",
          "5381:  if (!filters || !~filters) break;",
          "",
          "[Added Lines]",
          "5028:  if ((unsigned)(filters+1) < 1000) break;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "5572:       case 32770:",
          "5573:       case 32773: goto slr;",
          "5574:       case 0:  case 1:",
          "5575:  if (tiff_ifd[raw].bytes*5 == raw_width*raw_height*8) {",
          "5576:    load_flags = 81;",
          "5577:    tiff_bps = 12;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5222:  if (!strncmp(make,\"OLYMPUS\",7) &&",
          "5223:   tiff_ifd[raw].bytes*2 == raw_width*raw_height*3)",
          "5224:    load_flags = 24;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "5582:        load_flags = 6;",
          "5583:      load_raw = &CLASS packed_load_raw;  break;",
          "5584:    case 14: load_flags = 0;",
          "5586:  }",
          "5587:  break;",
          "5588:       case 6:  case 7:  case 99:",
          "",
          "[Removed Lines]",
          "5585:    case 16: load_raw = &CLASS unpacked_load_raw;  break;",
          "",
          "[Added Lines]",
          "5235:    case 16: load_raw = &CLASS unpacked_load_raw;",
          "5236:      if (!strncmp(make,\"OLYMPUS\",7) &&",
          "5237:    tiff_ifd[raw].bytes*7 > raw_width*raw_height)",
          "5238:        load_raw = &CLASS olympus_load_raw;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "5599:    order = 0x4d4d;",
          "5600:  } else",
          "5601:    load_raw = &CLASS nikon_load_raw;   break;",
          "5604:       case 65535:",
          "5605:  load_raw = &CLASS pentax_load_raw;   break;",
          "5606:       case 65000:",
          "",
          "[Removed Lines]",
          "5602:       case 34892:",
          "5603:  load_raw = &CLASS lossy_dng_load_raw;   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "5609:    case 6: load_raw = &CLASS kodak_ycbcr_load_raw; filters = 0;  break;",
          "5610:    case 32803: load_raw = &CLASS kodak_65000_load_raw;",
          "5611:  }",
          "5613:       default: is_raw = 0;",
          "5614:     }",
          "5615:   if (!dng_version)",
          "5618:    tiff_compress != 32769 && tiff_compress != 32770)",
          "5620:    !strstr(model2,\"DEBUG RAW\")))",
          "5621:       is_raw = 0;",
          "5622:   for (i=0; i < tiff_nifds; i++)",
          "5623:     if (i != raw && tiff_ifd[i].samples == max_samp &&",
          "5626:  && tiff_ifd[i].comp != 34892) {",
          "5627:       thumb_width  = tiff_ifd[i].t_width;",
          "5628:       thumb_height = tiff_ifd[i].t_height;",
          "",
          "[Removed Lines]",
          "5612:       case 32867: break;",
          "5616:     if ( (tiff_samples == 3 && tiff_ifd[raw].bytes &&",
          "5617:    tiff_bps != 14 && tiff_bps != 2048 &&",
          "5619:       || (tiff_bps == 8 && !strstr(make,\"KODAK\") && !strstr(make,\"Kodak\") &&",
          "5624:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / SQR(tiff_ifd[i].bps+1) >",
          "5625:        thumb_width *       thumb_height / SQR(thumb_misc+1)",
          "",
          "[Added Lines]",
          "5263:       case 32867: case 34892: break;",
          "5267:     if ( (tiff_samples == 3 && tiff_ifd[raw].bytes && tiff_bps != 14 &&",
          "5269:       || (tiff_bps == 8 && !strcasestr(make,\"Kodak\") &&",
          "5274:  tiff_ifd[i].t_width * tiff_ifd[i].t_height / (SQR(tiff_ifd[i].bps)+1) >",
          "5275:        thumb_width *       thumb_height / (SQR(thumb_misc)+1)",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "5823:    Parse a CIFF file, better known as Canon CRW format.",
          "5826: {",
          "5827:   int tboff, nrecs, c, type, len, save, wbi=-1;",
          "5828:   ushort key[] = { 0x410, 0x45f3 };",
          "",
          "[Removed Lines]",
          "5825: void CLASS parse_ciff (int offset, int length)",
          "",
          "[Added Lines]",
          "5475: void CLASS parse_ciff (int offset, int length, int depth)",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "5831:   tboff = get4() + offset;",
          "5832:   fseek (ifp, tboff, SEEK_SET);",
          "5833:   nrecs = get2();",
          "5835:   while (nrecs--) {",
          "5836:     type = get2();",
          "5837:     len  = get4();",
          "5838:     save = ftell(ifp) + 4;",
          "5839:     fseek (ifp, offset+get4(), SEEK_SET);",
          "5840:     if ((((type >> 8) + 8) | 8) == 0x38)",
          "5843:     if (type == 0x0810)",
          "5844:       fread (artist, 64, 1, ifp);",
          "5845:     if (type == 0x080a) {",
          "",
          "[Removed Lines]",
          "5834:   if (nrecs > 100) return;",
          "",
          "[Added Lines]",
          "5484:   if ((nrecs | depth) > 127) return;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "5848:       fread (model, 64, 1, ifp);",
          "5849:     }",
          "5850:     if (type == 0x1810) {",
          "5852:       flip = get4();",
          "5853:     }",
          "",
          "[Removed Lines]",
          "5851:       fseek (ifp, 12, SEEK_CUR);",
          "",
          "[Added Lines]",
          "5500:       width = get4();",
          "5501:       height = get4();",
          "5502:       pixel_aspect = int_to_float(get4());",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "6083:     } else if (tag == 0x130) {",
          "6084:       fuji_layout = fgetc(ifp) >> 7;",
          "6085:       fuji_width = !(fgetc(ifp) & 8);",
          "6086:     } else if (tag == 0x2ff0) {",
          "6087:       FORC4 cam_mul[c ^ 1] = get2();",
          "6088:     } else if (tag == 0xc000) {",
          "6089:       c = order;",
          "6090:       order = 0x4949;",
          "6092:       height = get4();",
          "6093:       order = c;",
          "6094:     }",
          "",
          "[Removed Lines]",
          "6091:       if ((width = get4()) > 10000) width = get4();",
          "",
          "[Added Lines]",
          "5737:     } else if (tag == 0x131) {",
          "5738:       filters = 9;",
          "5739:       FORC(36) xtrans[0][35-c] = fgetc(ifp) & 3;",
          "5745:       if ((tag = get4()) > 10000) tag = get4();",
          "5746:       width = tag;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "6117:     order = get2();",
          "6118:     hlen  = get4();",
          "6121:     if (parse_tiff (save+6)) apply_tiff();",
          "6122:     fseek (ifp, save+len, SEEK_SET);",
          "6123:   }",
          "",
          "[Removed Lines]",
          "6120:       parse_ciff (save+hlen, len-hlen);",
          "",
          "[Added Lines]",
          "5775:       parse_ciff (save+hlen, len-hlen, 0);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "6262:     data_offset = get4();",
          "6263:   }",
          "6264: }",
          "6266: char * CLASS foveon_gets (int offset, char *str, int len)",
          "6267: {",
          "6268:   int i;",
          "",
          "[Removed Lines]",
          "6265: #line 7419 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "6309:    raw_width  = wide;",
          "6310:    raw_height = high;",
          "6311:    data_offset = off+28;",
          "6312:  }",
          "6313:  fseek (ifp, off+28, SEEK_SET);",
          "6314:  if (fgetc(ifp) == 0xff && fgetc(ifp) == 0xd8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5966:    is_foveon = 1;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "6361:     }",
          "6362:     fseek (ifp, save, SEEK_SET);",
          "6363:   }",
          "6365: }",
          "6368:    All matrices are from Adobe DNG Converter unless otherwise noted.",
          "",
          "[Removed Lines]",
          "6364:   is_foveon = 1;",
          "6366: #line 7522 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "6409:  { 4920,616,-593,-6493,13964,2784,-1774,3178,7005 } },",
          "6410:     { \"Canon EOS 60D\", 0, 0x2ff7,",
          "6411:  { 6719,-994,-925,-4408,12426,2211,-887,2129,6051 } },",
          "6412:     { \"Canon EOS 300D\", 0, 0xfa0,",
          "6413:  { 8197,-2000,-1118,-6714,14335,2592,-2536,3178,8266 } },",
          "6414:     { \"Canon EOS 350D\", 0, 0xfff,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6065:     { \"Canon EOS 100D\", 0, 0x350f,",
          "6066:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "6425:  { 6461,-907,-882,-4300,12184,2378,-819,1944,5931 } },",
          "6426:     { \"Canon EOS 650D\", 0, 0x354d,",
          "6427:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6431:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6432:     { \"Canon EOS 1000D\", 0, 0xe43,",
          "6433:  { 6771,-1139,-977,-7818,15123,2928,-1244,1437,7533 } },",
          "",
          "[Removed Lines]",
          "6428:  { \"Canon EOS 700D\", 0, 0x354d,",
          "6429:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6430:  { \"Canon EOS REBEL T5i\", 0, 0x354d,",
          "",
          "[Added Lines]",
          "6083:     { \"Canon EOS 700D\", 0, 0x3c00,",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "6449:  { 6264,-582,-724,-8312,15948,2504,-1744,1919,8664 } },",
          "6450:     { \"Canon EOS-1DS\", 0, 0xe20,",
          "6451:  { 4374,3631,-1743,-7520,15212,2472,-2892,3632,8161 } },",
          "6452:     { \"Canon EOS-1D X\", 0, 0x3c4e,",
          "6453:  { 6847,-614,-1014,-4669,12737,2139,-1197,2488,6846 } },",
          "6454:     { \"Canon EOS-1D\", 0, 0xe20,",
          "6455:  { 6806,-179,-1020,-8097,16415,1687,-3267,4236,7690 } },",
          "6462:     { \"Canon PowerShot A530\", 0, 0,",
          "6464:     { \"Canon PowerShot A50\", 0, 0,",
          "",
          "[Removed Lines]",
          "6456:  { \"Canon EOS 100D\", 0, 0x3cf0,",
          "6457:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6458:  { \"Canon EOS REBEL SL1\", 0, 0x3cf0,",
          "6459:  { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },",
          "6460:     { \"Canon EOS\", 0, 0,",
          "6461:  { 8197,-2000,-1118,-6714,14335,2592,-2536,3178,8266 } },",
          "",
          "[Added Lines]",
          "6105:     { \"Canon EOS-1D C\", 0, 0x3c4e,",
          "6106:  { 6847,-614,-1014,-4669,12737,2139,-1197,2488,6846 } },",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "6519:  { 6578,-259,-502,-5974,13030,3309,-308,1058,4970 } },",
          "6520:     { \"Canon PowerShot SX50 HS\", 0, 0,",
          "6521:  { 12432,-4753,-1247,-2110,10691,1629,-412,1623,4926 } },",
          "6523:  { 12513,-4407,-1242,-2680,10276,2405,-878,2215,4734 } },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6172:  { 10826,-3654,-1023,-3215,11310,1906,0,999,4960 } },",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "6539:  { 14134,-5576,-1527,-1991,10719,1273,-1158,1929,3581 } },",
          "6541:  { 13898,-5076,-1447,-1405,10109,1297,-244,1860,3687 } },",
          "6545:  { 11634,-3924,-1128,-4968,12954,2015,-1588,2648,7206 } },",
          "6547:  { 10819,-3873,-1099,-4903,13730,1175,-1755,3751,4632 } },",
          "6549:  { 9790,-3338,-603,-2321,10222,2099,-344,1273,4799 } },",
          "6550:     { \"CINE 650\", 0, 0,",
          "6551:  { 3390,480,-500,-800,3610,340,-550,2336,1192 } },",
          "",
          "[Removed Lines]",
          "6542:     { \"Canon PowerShot SX50\", 0, 0,",
          "6543:  { 12432,-4753,-1247,-2110,10691,1629,-412,1623,4926 } },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "6555:  { 20183,-4295,-423,-3940,15330,3985,-280,4870,9800 } },",
          "6556:     { \"Contax N Digital\", 0, 0xf1e,",
          "6557:  { 7777,1285,-1053,-9280,16543,2916,-3677,5679,7060 } },",
          "6559:  { 6827,-1878,-732,-8429,16012,2564,-704,592,7145 } },",
          "6561:  { 11044,-3888,-1120,-7248,15168,2208,-1531,2277,8069 } },",
          "6563:  { 9183,-2526,-1078,-7461,15071,2574,-2022,2440,8639 } },",
          "6565:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6567:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6569:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6571:  { 10004,-3219,-1201,-7036,15047,2107,-1863,2565,7736 } },",
          "6573:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6577:  { 11521,-4355,-1065,-6524,13767,3058,-1466,1984,6045 } },",
          "6579:  { 11401,-4498,-1312,-5088,12751,2613,-838,1568,5941 } },",
          "6581:  { 10004,-3219,-1201,-7036,15047,2107,-1863,2565,7736 } },",
          "6583:  { 12492,-4690,-1402,-7033,15423,1647,-1507,2111,7697 } },",
          "6585:  { 11807,-4612,-1294,-8927,16968,1988,-2120,2741,8006 } },",
          "6587:  { 12300,-5110,-1304,-9117,17143,1998,-1947,2448,8100 } },",
          "6589:  { 8754,-2732,-1019,-7204,15069,2276,-1702,2334,6982 } },",
          "6591:  { 11940,-4431,-1255,-6766,14428,2542,-993,1165,7421 } },",
          "6593:  { 11940,-4431,-1255,-6766,14428,2542,-993,1165,7421 } },",
          "6595:  { 9636,-2804,-988,-7442,15040,2589,-1803,2311,8621 } },",
          "6597:  { 9636,-2804,-988,-7442,15040,2589,-1803,2311,8621 } },",
          "6599:  { 12628,-4887,-1401,-6861,14996,1962,-2198,2782,7091 } },",
          "6601:  { 10190,-3506,-1312,-7153,15051,2238,-2003,2399,7505 } },",
          "6603:  { 10491,-3423,-1145,-7385,15027,2538,-1809,2275,8692 } },",
          "6605:  { 10491,-3423,-1145,-7385,15027,2538,-1809,2275,8692 } },",
          "6607:  { 12343,-4515,-1285,-7165,14899,2435,-1895,2496,8800 } },",
          "6609:  { 12343,-4515,-1285,-7165,14899,2435,-1895,2496,8800 } },",
          "6611:  { 21461,-10807,-1441,-2332,10599,1999,289,875,7703 } },",
          "6613:  { 12300,-5110,-1304,-9117,17143,1998,-1947,2448,8100 } },",
          "6615:  { 12440,-3954,-1183,-1123,9674,1708,-83,1614,4086 } },",
          "6617:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6619:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6621:  { 12085,-4727,-953,-3257,11489,2002,-511,2046,4592 } },",
          "6625:  { 10592,-4262,-1008,-3514,11355,2465,-870,2025,6386 } },",
          "6627:  { 12161,-4457,-1069,-5034,12874,2400,-795,1724,6904 } },",
          "6629:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "6631:  { 11768,-4971,-1133,-4904,12927,2183,-480,1723,4605 } },",
          "6635:  { 10413,-3996,-993,-3721,11640,2361,-733,1540,6011 } },",
          "6637:  { 10413,-3996,-993,-3721,11640,2361,-733,1540,6011 } },",
          "6639:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "6641:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "6643:  { 7025,-1415,-704,-5188,13765,1424,-1248,2742,6038 } },",
          "6645:  { 13891,-6055,-803,-465,9919,642,2121,82,1291 } },",
          "6646:     { \"Kodak DCS315C\", 8, 0,",
          "6647:  { 17523,-4827,-2510,756,8546,-137,6113,1649,2250 } },",
          "6648:     { \"Kodak DCS330C\", 8, 0,",
          "6649:  { 20620,-7572,-2801,-103,10073,-396,3551,-233,2220 } },",
          "6651:  { 10868,-1852,-644,-1537,11083,484,2343,628,2216 } },",
          "6653:  { 10592,-2206,-967,-1944,11685,230,2206,670,1273 } },",
          "6655:  { 10592,-2206,-967,-1944,11685,230,2206,670,1273 } },",
          "6657:  { 9898,-2700,-940,-2478,12219,206,1985,634,1031 } },",
          "6658:     { \"Kodak DCS520C\", 178, 0,",
          "6659:  { 24542,-10860,-3401,-1490,11370,-297,2858,-605,3225 } },",
          "",
          "[Removed Lines]",
          "6558:     { \"EPSON R-D1\", 0, 0,",
          "6560:     { \"FUJIFILM E550\", 0, 0,",
          "6562:     { \"FUJIFILM E900\", 0, 0,",
          "6564:     { \"FUJIFILM F5\", 0, 0,",
          "6566:     { \"FUJIFILM F6\", 0, 0,",
          "6568:     { \"FUJIFILM F77\", 0, 0xfe9,",
          "6570:     { \"FUJIFILM F7\", 0, 0,",
          "6572:     { \"FUJIFILM F800\", 0, 0,",
          "6574:     { \"FUJIFILM F8\", 0, 0,",
          "6575:  { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },",
          "6576:     { \"FUJIFILM S100FS\", 514, 0,",
          "6578:     { \"FUJIFILM S200EXR\", 512, 0x3fff,",
          "6580:     { \"FUJIFILM S20Pro\", 0, 0,",
          "6582:     { \"FUJIFILM S2Pro\", 128, 0,",
          "6584:     { \"FUJIFILM S3Pro\", 0, 0,",
          "6586:     { \"FUJIFILM S5Pro\", 0, 0,",
          "6588:     { \"FUJIFILM S5000\", 0, 0,",
          "6590:     { \"FUJIFILM S5100\", 0, 0,",
          "6592:     { \"FUJIFILM S5500\", 0, 0,",
          "6594:     { \"FUJIFILM S5200\", 0, 0,",
          "6596:     { \"FUJIFILM S5600\", 0, 0,",
          "6598:     { \"FUJIFILM S6\", 0, 0,",
          "6600:     { \"FUJIFILM S7000\", 0, 0,",
          "6602:     { \"FUJIFILM S9000\", 0, 0,",
          "6604:     { \"FUJIFILM S9500\", 0, 0,",
          "6606:     { \"FUJIFILM S9100\", 0, 0,",
          "6608:     { \"FUJIFILM S9600\", 0, 0,",
          "6610:     { \"FUJIFILM IS-1\", 0, 0,",
          "6612:     { \"FUJIFILM IS Pro\", 0, 0,",
          "6614:     { \"FUJIFILM HS10 HS11\", 0, 0xf68,",
          "6616:     { \"FUJIFILM HS20EXR\", 0, 0,",
          "6618:     { \"FUJIFILM HS3\", 0, 0,",
          "6620:  { \"FUJIFILM HS50EXR\", 0, 0,",
          "6622:  { \"FUJIFILM SL1000\", 0, 0,",
          "6623:  { 11705,-4262,-1107,-2282,10791,1709,-555,1713,4945 } },",
          "6624:  { \"FUJIFILM X100S\", 0, 0,",
          "6626:     { \"FUJIFILM X100\", 0, 0,",
          "6628:     { \"FUJIFILM X10\", 0, 0,",
          "6630:  { \"FUJIFILM X20\", 0, 0,",
          "6632:     { \"FUJIFILM XF1\", 0, 0,",
          "6633:  { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },",
          "6634:     { \"FUJIFILM X-Pro1\", 0, 0,",
          "6636:     { \"FUJIFILM X-E1\", 0, 0,",
          "6638:     { \"FUJIFILM XF1\", 0, 0,",
          "6640:     { \"FUJIFILM X-S1\", 0, 0,",
          "6644:     { \"KODAK NC2000\", 0, 0,",
          "6650:     { \"KODAK DCS420\", 0, 0,",
          "6652:     { \"KODAK DCS460\", 0, 0,",
          "6654:     { \"KODAK EOSDCS1\", 0, 0,",
          "6656:     { \"KODAK EOSDCS3B\", 0, 0,",
          "",
          "[Added Lines]",
          "6207:     { \"Epson R-D1\", 0, 0,",
          "6209:     { \"Fujifilm E550\", 0, 0,",
          "6211:     { \"Fujifilm E900\", 0, 0,",
          "6213:     { \"Fujifilm F5\", 0, 0,",
          "6215:     { \"Fujifilm F6\", 0, 0,",
          "6217:     { \"Fujifilm F77\", 0, 0xfe9,",
          "6219:     { \"Fujifilm F7\", 0, 0,",
          "6221:     { \"Fujifilm F8\", 0, 0,",
          "6223:     { \"Fujifilm S100FS\", 514, 0,",
          "6225:     { \"Fujifilm S200EXR\", 512, 0x3fff,",
          "6227:     { \"Fujifilm S20Pro\", 0, 0,",
          "6229:     { \"Fujifilm S2Pro\", 128, 0,",
          "6231:     { \"Fujifilm S3Pro\", 0, 0,",
          "6233:     { \"Fujifilm S5Pro\", 0, 0,",
          "6235:     { \"Fujifilm S5000\", 0, 0,",
          "6237:     { \"Fujifilm S5100\", 0, 0,",
          "6239:     { \"Fujifilm S5500\", 0, 0,",
          "6241:     { \"Fujifilm S5200\", 0, 0,",
          "6243:     { \"Fujifilm S5600\", 0, 0,",
          "6245:     { \"Fujifilm S6\", 0, 0,",
          "6247:     { \"Fujifilm S7000\", 0, 0,",
          "6249:     { \"Fujifilm S9000\", 0, 0,",
          "6251:     { \"Fujifilm S9500\", 0, 0,",
          "6253:     { \"Fujifilm S9100\", 0, 0,",
          "6255:     { \"Fujifilm S9600\", 0, 0,",
          "6257:     { \"Fujifilm SL1000\", 0, 0,",
          "6258:  { 11705,-4262,-1107,-2282,10791,1709,-555,1713,4945 } },",
          "6259:     { \"Fujifilm IS-1\", 0, 0,",
          "6261:     { \"Fujifilm IS Pro\", 0, 0,",
          "6263:     { \"Fujifilm HS10 HS11\", 0, 0xf68,",
          "6265:     { \"Fujifilm HS20EXR\", 0, 0,",
          "6267:     { \"Fujifilm HS3\", 0, 0,",
          "6269:     { \"Fujifilm HS50EXR\", 0, 0,",
          "6271:     { \"Fujifilm X100S\", 0, 0,",
          "6273:     { \"Fujifilm X100\", 0, 0,",
          "6275:     { \"Fujifilm X10\", 0, 0,",
          "6277:     { \"Fujifilm X20\", 0, 0,",
          "6279:     { \"Fujifilm X-Pro1\", 0, 0,",
          "6281:     { \"Fujifilm X-E1\", 0, 0,",
          "6283:     { \"Fujifilm XF1\", 0, 0,",
          "6285:     { \"Fujifilm X-S1\", 0, 0,",
          "6289:     { \"Kodak NC2000\", 0, 0,",
          "6295:     { \"Kodak DCS420\", 0, 0,",
          "6297:     { \"Kodak DCS460\", 0, 0,",
          "6299:     { \"Kodak EOSDCS1\", 0, 0,",
          "6301:     { \"Kodak EOSDCS3B\", 0, 0,",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "6679:  { 16414,-6060,-1470,-3555,13037,473,2545,122,4948 } },",
          "6680:     { \"Kodak ProBack\", 0, 0,",
          "6681:  { 21179,-8316,-2918,-915,11019,-165,3477,-180,4210 } },",
          "6683:  { 9658,-3314,-823,-5163,12695,2768,-1342,1843,6044 } },",
          "6685:  { 10511,-3836,-1102,-6946,14587,2558,-1481,1792,6246 } },",
          "6687:  { 12805,-4662,-1376,-7480,15267,2360,-1626,2194,7904 } },",
          "6689:  { 11313,-3559,-1101,-3893,11891,2257,-1214,2398,4908 } },",
          "6691:  { 12729,-4717,-1188,-1367,9187,2582,274,860,4411 } },",
          "6693:  { 11749,-4048,-1309,-1867,10572,1489,-138,1449,4522 } },",
          "6695:  { 11265,-4286,-992,-4694,12343,2647,-1090,1523,5447 } },",
          "6696:     { \"Leaf CMost\", 0, 0,",
          "6697:  { 3952,2189,449,-6701,14585,2275,-4536,7349,6536 } },",
          "",
          "[Removed Lines]",
          "6682:     { \"KODAK P712\", 0, 0,",
          "6684:     { \"KODAK P850\", 0, 0xf7c,",
          "6686:     { \"KODAK P880\", 0, 0xfff,",
          "6688:     { \"KODAK EasyShare Z980\", 0, 0,",
          "6690:     { \"KODAK EasyShare Z981\", 0, 0,",
          "6692:     { \"KODAK EasyShare Z990\", 0, 0xfed,",
          "6694:     { \"KODAK EASYSHARE Z1015\", 0, 0xef1,",
          "",
          "[Added Lines]",
          "6327:     { \"Kodak P712\", 0, 0,",
          "6329:     { \"Kodak P850\", 0, 0xf7c,",
          "6331:     { \"Kodak P880\", 0, 0xfff,",
          "6333:     { \"Kodak EasyShare Z980\", 0, 0,",
          "6335:     { \"Kodak EasyShare Z981\", 0, 0,",
          "6337:     { \"Kodak EasyShare Z990\", 0, 0xfed,",
          "6339:     { \"Kodak EASYSHARE Z1015\", 0, 0xef1,",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "6717:  { 9144,-2777,-998,-6676,14556,2281,-2470,3019,7744 } },",
          "6718:     { \"Minolta DiMAGE A1\", 0, 0xf8b,",
          "6719:  { 9274,-2547,-1167,-8220,16323,1943,-2273,2720,8340 } },",
          "6721:  { 8560,-2487,-986,-8112,15535,2771,-1209,1324,7743 } },",
          "6722:     { \"Minolta DiMAGE A2\", 0, 0xf8f,",
          "6723:  { 9097,-2726,-1053,-8073,15506,2762,-966,981,7763 } },",
          "6725:  { 11280,-3564,-1370,-4655,12374,2282,-1423,2168,5396 } },",
          "6727:  { 10284,-3283,-1086,-7957,15762,2316,-829,882,6644 } },",
          "6729:  { 10239,-3104,-1099,-8037,15727,2451,-927,925,6871 } },",
          "6731:  { 8898,-989,-1033,-3292,11619,1674,-661,3178,5216 } },",
          "6733:  { 5902,-933,-782,-8983,16719,2354,-1402,1455,6464 } },",
          "6735:  { 7577,-2166,-926,-7454,15592,1934,-2377,2808,8606 } },",
          "6737:  { 7702,-2245,-975,-9114,17242,1875,-2679,3055,8521 } },",
          "6739:  { 16772,-4726,-2141,-7611,15713,1972,-2846,3494,9521 } },",
          "6741:  { 8367,-2248,-763,-8758,16447,2422,-1527,1550,8053 } },",
          "6743:  { 5710,-901,-615,-8594,16617,2024,-2975,4120,6830 } },",
          "6745:  { 10231,-2769,-1255,-8301,15900,2552,-797,680,7148 } },",
          "6747:  { 8736,-2458,-935,-9075,16894,2251,-1354,1242,8263 } },",
          "6749:  { 7911,-2167,-813,-5327,13150,2408,-1288,2483,7968 } },",
          "6751:  { 7013,-1408,-635,-5268,12902,2640,-1470,2801,7379 } },",
          "6753:  { 9030,-1992,-715,-8465,16302,2255,-2689,3217,8069 } },",
          "6755:  { 7171,-1986,-648,-8085,15555,2718,-2170,2512,7457 } },",
          "6757:  { 8828,-2406,-694,-4874,12603,2541,-660,1509,7587 } },",
          "6759:  { 8139,-2171,-663,-8747,16541,2295,-1925,2008,8093 } },",
          "6761:  { 8819,-2543,-911,-9025,16928,2151,-1329,1213,8449 } },",
          "6763:  { 6992,-1668,-806,-8138,15748,2543,-874,850,7897 } },",
          "6765:  { 8598,-2848,-857,-5618,13606,2195,-1002,1773,7137 } },",
          "6767:  { 7309,-1403,-519,-8474,16008,2622,-2433,2826,8064 } },",
          "6769:  { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },",
          "6771:  { 7732,-2422,-789,-8238,15884,2498,-859,783,7330 } },",
          "6773:  { 8178,-2245,-609,-4857,12394,2776,-1207,2086,7298 } },",
          "6775:  { 8736,-2458,-935,-9075,16894,2251,-1354,1242,8263 } },",
          "6777:  { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },",
          "6779:  { 8139,-2171,-663,-8747,16541,2295,-1925,2008,8093 } },",
          "6781:  { 7732,-2422,-789,-8238,15884,2498,-859,783,7330 } },",
          "6785:  { 7866,-2108,-555,-4869,12483,2681,-1176,2069,7501 } },",
          "6787:  { 8629,-2410,-883,-9055,16940,2171,-1490,1363,8520 } },",
          "6789:  { 7309,-1403,-519,-8474,16008,2622,-2434,2826,8064 } },",
          "6791:  { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } },",
          "6793:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "6795:  { 13142,-4152,-1596,-4655,12374,2282,-1769,2696,6711} },",
          "6797:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "6799:  { 9846,-2085,-1019,-3278,11109,2170,-774,2134,5745 } },",
          "6801:  { 11280,-3564,-1370,-4655,12374,2282,-1423,2168,5396 } },",
          "6803:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "6805:  { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },",
          "6807:  { 9349,-2987,-1001,-7919,15766,2266,-2098,2680,6839 } },",
          "6809:  { -5368,11478,2368,5537,-113,3148,-4969,10021,5782,778,9028,211 } },",
          "6811:  { 7842,-2320,-992,-8154,15718,2599,-1098,1342,7560 } },",
          "6813:  { 8489,-2583,-1036,-8051,15583,2643,-1307,1407,7354 } },",
          "6815:  { 7971,-2314,-913,-8451,15762,2894,-1442,1520,7610 } },",
          "6817:  { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },",
          "6819:  { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },",
          "6821:  { 9698,-3367,-914,-4706,12584,2368,-837,968,5801 } },",
          "6823:  { 11432,-3679,-1111,-3169,11239,2202,-791,1380,4455 } },",
          "6825:  { 11053,-4269,-1024,-1976,10182,2088,-526,1263,4469 } },",
          "6827:  { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },",
          "6829:  { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },",
          "6833:  { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },",
          "6835:  { 8994,-2667,-865,-4594,12324,2552,-699,1786,6260 } },",
          "6837:  { 10508,-3124,-1273,-6079,14294,1901,-1653,2306,6237 } },",
          "6839:  { 10445,-3362,-1307,-7662,15690,2058,-1135,1176,7602 } },",
          "6841:  { 10252,-3531,-1095,-7114,14850,2436,-1451,1723,6365 } },",
          "6843:  { 10793,-3791,-1146,-7498,15177,2488,-1390,1577,7321 } },",
          "6845:  { 8606,-2509,-1014,-8238,15714,2703,-942,979,7760 } },",
          "6847:  { 12745,-4500,-1416,-6062,14542,1580,-1934,2256,6603 } },",
          "6849:  { 11846,-4767,-945,-7027,15878,1089,-2699,4122,8311 } },",
          "6851:  { 13173,-4732,-1499,-5807,14036,1895,-2045,2452,7142 } },",
          "6853:  { 7828,-1761,-348,-5788,14071,1830,-2853,4518,6557 } },",
          "6855:  { 8961,-2473,-1084,-7979,15990,2067,-2319,3035,8249 } },",
          "6857:  { 8144,-1861,-1111,-7763,15894,1929,-1865,2542,7607 } },",
          "6859:  { 9487,-2875,-1115,-7533,15606,2010,-1618,2100,7389 } },",
          "6861:  { 6169,-1483,-21,-7107,14761,2536,-2904,3580,8568 } },",
          "6863:  { 8856,-2582,-1026,-7761,15766,2082,-2009,2575,7469 } },",
          "6865:  { 8746,-2425,-1095,-7594,15612,2073,-1780,2309,7416 } },",
          "6867:  { 8745,-2425,-1095,-7594,15613,2073,-1780,2309,7416 } },",
          "6869:  { 8136,-1968,-299,-5481,13742,1871,-2556,4205,6630 } },",
          "6871:  { 8785,-2529,-1033,-7639,15624,2112,-1783,2300,7817 } },",
          "6873:  { 8344,-2322,-1020,-7596,15635,2048,-1748,2269,7287 } },",
          "6875:  { 11200,-3783,-1325,-4576,12593,2206,-695,1742,7504 } },",
          "6877:  { 8453,-2198,-1092,-7609,15681,2008,-1725,2337,7824 } },",
          "6879:  { 8453,-2198,-1092,-7609,15681,2008,-1725,2337,7824 } },",
          "6881:  { 8343,-2050,-1021,-7715,15705,2103,-1831,2380,8235 } },",
          "6883:  { 8343,-2050,-1021,-7715,15705,2103,-1831,2380,8235 } },",
          "6885:  { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },",
          "6887:  { 11409,-3872,-1393,-4572,12757,2003,-709,1810,7415 } },",
          "6889:  { 11408,-4289,-1215,-4286,12385,2118,-387,1467,7787 } },",
          "6891:  { 15030,-5552,-1806,-3987,12387,1767,-592,1670,7023 } },",
          "6893:  { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },",
          "6895:  { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },",
          "6897:  { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },",
          "6899:  { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },",
          "6901:  { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },",
          "6903:  { 12078,-4836,-1069,-6671,14306,2578,-786,939,7418 } },",
          "6905:  { 11766,-4445,-1067,-6901,14421,2707,-1029,1217,7572 } },",
          "6907:  { 9493,-3415,-666,-5211,12334,3260,-1548,2262,6482 } },",
          "6909:  { 10593,-3607,-1010,-5881,13127,3084,-1200,1805,6721 } },",
          "6911:  { 11597,-4006,-1049,-5432,12799,2957,-1029,1750,6516 } },",
          "6913:  { 10915,-3677,-982,-5587,12986,2911,-1168,1968,6223 } },",
          "6915:  { 11522,-4044,-1146,-4736,12172,2904,-988,1829,6039 } },",
          "6917:  { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },",
          "6919:  { 10901,-4095,-1074,-1141,9208,2293,-62,1417,5158 } },",
          "6921:  { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },",
          "6923:  { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },",
          "6925:  { 10829,-2838,-1115,-8339,15817,2696,-837,680,11939 } },",
          "6927:  { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },",
          "6929:  { 10371,-2333,-1206,-8688,16231,2602,-1230,1116,11282 } },",
          "6931:  { 9651,-2059,-1189,-8881,16512,2487,-1460,1345,10687 } },",
          "6933:  { 9566,-2863,-803,-7170,15172,2112,-818,803,9705 } },",
          "6935:  { 11095,-3157,-1324,-8377,15834,2720,-1108,947,11688 } },",
          "6937:  { 9427,-2714,-868,-7493,16092,1373,-2199,3264,7180 } },",
          "6939:  { 9186,-2678,-907,-8693,16517,2260,-1129,1094,8524 } },",
          "6941:  { 11057,-3604,-1155,-5152,13046,2329,-282,375,8104 } },",
          "6943:  { 11057,-3604,-1155,-5152,13046,2329,-282,375,8104 } },",
          "6945:  { 8843,-2837,-625,-5025,12644,2668,-411,1234,7410 } },",
          "6947:  { 9895,-3077,-850,-5304,13035,2521,-883,1768,6936 } },",
          "6955:  { 8713,-2833,-743,-4342,11900,2772,-722,1543,6247 } },",
          "6957:  { 9142,-2947,-678,-8648,16967,1663,-2224,2898,8615 } },",
          "6959:  { 8804,-2523,-1238,-2423,11627,860,-682,1774,4753 } },",
          "6961:  { 12995,-5593,-1107,-1879,10139,2027,-64,1233,4919 } },",
          "6963:  { 10646,-3593,-1158,-3329,11699,1831,-667,2874,6287 } },",
          "6964:     { \"Panasonic DMC-FZ8\", 0, 0xf7f,",
          "6965:  { 8986,-2755,-802,-6341,13575,3077,-1476,2144,6379 } },",
          "",
          "[Removed Lines]",
          "6720:     { \"MINOLTA DiMAGE A200\", 0, 0,",
          "6726:     { \"MINOLTA DYNAX 5\", 0, 0xffb,",
          "6728:     { \"MINOLTA DYNAX 7\", 0, 0xffb,",
          "6732:     { \"NIKON D100\", 0, 0,",
          "6734:     { \"NIKON D1H\", 0, 0,",
          "6736:     { \"NIKON D1X\", 0, 0,",
          "6740:     { \"NIKON D200\", 0, 0xfbc,",
          "6742:     { \"NIKON D2H\", 0, 0,",
          "6744:     { \"NIKON D2X\", 0, 0,",
          "6746:     { \"NIKON D3000\", 0, 0,",
          "6748:     { \"NIKON D3100\", 0, 0,",
          "6750:     { \"NIKON D3200\", 0, 0xfb9,",
          "6752:     { \"NIKON D300\", 0, 0,",
          "6754:     { \"NIKON D3X\", 0, 0,",
          "6756:     { \"NIKON D3S\", 0, 0,",
          "6758:     { \"NIKON D3\", 0, 0,",
          "6760:     { \"NIKON D40X\", 0, 0,",
          "6762:     { \"NIKON D40\", 0, 0,",
          "6764:     { \"NIKON D4\", 0, 0,",
          "6766:     { \"NIKON D5000\", 0, 0xf00,",
          "6768:     { \"NIKON D5100\", 0, 0x3de6,",
          "6770:     { \"NIKON D50\", 0, 0,",
          "6772:     { \"NIKON D600\", 0, 0x3e07,",
          "6774:     { \"NIKON D60\", 0, 0,",
          "6776:     { \"NIKON D7000\", 0, 0,",
          "6778:     { \"NIKON D700\", 0, 0,",
          "6780:     { \"NIKON D70\", 0, 0,",
          "6782:  { \"NIKON D7100\", 0, 0,",
          "6783:  { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },",
          "6784:     { \"NIKON D800\", 0, 0,",
          "6786:     { \"NIKON D80\", 0, 0,",
          "6788:     { \"NIKON D90\", 0, 0xf00,",
          "6796:     { \"NIKON E2500\", 0, 0,",
          "6802:     { \"NIKON E4500\", 0, 0,",
          "6804:     { \"NIKON E5000\", 0, 0,",
          "6806:     { \"NIKON E5400\", 0, 0,",
          "6808:     { \"NIKON E5700\", 0, 0,",
          "6810:     { \"NIKON E8400\", 0, 0,",
          "6812:     { \"NIKON E8700\", 0, 0,",
          "6814:     { \"NIKON E8800\", 0, 0,",
          "6816:  { \"NIKON COOLPIX A\", 0, 0,",
          "6818:  { \"NIKON COOLPIX P330\", 0, 0,",
          "6820:     { \"NIKON COOLPIX P6000\", 0, 0,",
          "6822:     { \"NIKON COOLPIX P7000\", 0, 0,",
          "6824:     { \"NIKON COOLPIX P7100\", 0, 0,",
          "6826:     { \"NIKON COOLPIX P7700\", 200, 0,",
          "6828:  { \"NIKON 1 J3\", 0, 0,",
          "6830:  { \"NIKON 1 S1\", 0, 0,",
          "6831:  { 8994,-2667,-865,-4594,12324,2552,-699,1786,6260 } },",
          "6832:     { \"NIKON 1 V2\", 0, 0,",
          "6834:     { \"NIKON 1 \", 0, 0,",
          "6836:     { \"OLYMPUS C5050\", 0, 0,",
          "6838:     { \"OLYMPUS C5060\", 0, 0,",
          "6840:     { \"OLYMPUS C7070\", 0, 0,",
          "6842:     { \"OLYMPUS C70\", 0, 0,",
          "6844:     { \"OLYMPUS C80\", 0, 0,",
          "6846:     { \"OLYMPUS E-10\", 0, 0xffc,",
          "6848:     { \"OLYMPUS E-1\", 0, 0,",
          "6850:     { \"OLYMPUS E-20\", 0, 0xffc,",
          "6852:     { \"OLYMPUS E-300\", 0, 0,",
          "6854:     { \"OLYMPUS E-330\", 0, 0,",
          "6856:     { \"OLYMPUS E-30\", 0, 0xfbc,",
          "6858:     { \"OLYMPUS E-3\", 0, 0xf99,",
          "6860:     { \"OLYMPUS E-400\", 0, 0,",
          "6862:     { \"OLYMPUS E-410\", 0, 0xf6a,",
          "6864:     { \"OLYMPUS E-420\", 0, 0xfd7,",
          "6866:     { \"OLYMPUS E-450\", 0, 0xfd2,",
          "6868:     { \"OLYMPUS E-500\", 0, 0,",
          "6870:     { \"OLYMPUS E-510\", 0, 0xf6a,",
          "6872:     { \"OLYMPUS E-520\", 0, 0xfd2,",
          "6874:     { \"OLYMPUS E-5\", 0, 0xeec,",
          "6876:     { \"OLYMPUS E-600\", 0, 0xfaf,",
          "6878:     { \"OLYMPUS E-620\", 0, 0xfaf,",
          "6880:     { \"OLYMPUS E-P1\", 0, 0xffd,",
          "6882:     { \"OLYMPUS E-P2\", 0, 0xffd,",
          "6884:     { \"OLYMPUS E-P3\", 0, 0,",
          "6886:     { \"OLYMPUS E-PL1s\", 0, 0,",
          "6888:     { \"OLYMPUS E-PL1\", 0, 0,",
          "6890:     { \"OLYMPUS E-PL2\", 0, 0,",
          "6892:     { \"OLYMPUS E-PL3\", 0, 0,",
          "6894:     { \"OLYMPUS E-PL5\", 0, 0xfcb,",
          "6896:     { \"OLYMPUS E-PM1\", 0, 0,",
          "6898:     { \"OLYMPUS E-PM2\", 0, 0,",
          "6900:     { \"OLYMPUS E-M5\", 0, 0xfe1,",
          "6902:     { \"OLYMPUS SP350\", 0, 0,",
          "6904:     { \"OLYMPUS SP3\", 0, 0,",
          "6906:     { \"OLYMPUS SP500UZ\", 0, 0xfff,",
          "6908:     { \"OLYMPUS SP510UZ\", 0, 0xffe,",
          "6910:     { \"OLYMPUS SP550UZ\", 0, 0xffe,",
          "6912:     { \"OLYMPUS SP560UZ\", 0, 0xff9,",
          "6914:     { \"OLYMPUS SP570UZ\", 0, 0,",
          "6916:  { \"OLYMPUS XZ-10\", 0, 0,",
          "6918:     { \"OLYMPUS XZ-1\", 0, 0,",
          "6920:     { \"OLYMPUS XZ-2\", 0, 0,",
          "6922:     { \"PENTAX *ist DL2\", 0, 0,",
          "6924:     { \"PENTAX *ist DL\", 0, 0,",
          "6926:     { \"PENTAX *ist DS2\", 0, 0,",
          "6928:     { \"PENTAX *ist DS\", 0, 0,",
          "6930:     { \"PENTAX *ist D\", 0, 0,",
          "6932:     { \"PENTAX K10D\", 0, 0,",
          "6934:     { \"PENTAX K1\", 0, 0,",
          "6936:     { \"PENTAX K20D\", 0, 0,",
          "6938:     { \"PENTAX K200D\", 0, 0,",
          "6940:     { \"PENTAX K2000\", 0, 0,",
          "6942:     { \"PENTAX K-m\", 0, 0,",
          "6944:     { \"PENTAX K-x\", 0, 0,",
          "6946:     { \"PENTAX K-r\", 0, 0,",
          "6948:     { \"PENTAX K-30\", 0, 0,",
          "6949:  { 8833,-2670,-1183,-3995,12301,1881,-979,1717,6527 } },",
          "6950:     { \"PENTAX K-5 II s\", 0, 0,",
          "6951:  { 8366,-2528,-1120,-3995,12301,1881,-998,1749,6649 } },",
          "6952:     { \"PENTAX K-5 II\", 0, 0,",
          "6953:  { 8773,-2651,-1175,-3995,12301,1881,-973,1706,6486 } },",
          "6954:     { \"PENTAX K-5\", 0, 0,",
          "6956:     { \"PENTAX K-7\", 0, 0,",
          "6958:  { \"PENTAX MX-1\", 0, 0,",
          "6960:     { \"PENTAX Q10\", 0, 0,",
          "6962:     { \"PENTAX 645D\", 0, 0x3e00,",
          "",
          "[Added Lines]",
          "6365:     { \"Minolta DiMAGE A200\", 0, 0,",
          "6371:     { \"Minolta DYNAX 5\", 0, 0xffb,",
          "6373:     { \"Minolta DYNAX 7\", 0, 0xffb,",
          "6377:     { \"Nikon D100\", 0, 0,",
          "6379:     { \"Nikon D1H\", 0, 0,",
          "6381:     { \"Nikon D1X\", 0, 0,",
          "6385:     { \"Nikon D200\", 0, 0xfbc,",
          "6387:     { \"Nikon D2H\", 0, 0,",
          "6389:     { \"Nikon D2X\", 0, 0,",
          "6391:     { \"Nikon D3000\", 0, 0,",
          "6393:     { \"Nikon D3100\", 0, 0,",
          "6395:     { \"Nikon D3200\", 0, 0xfb9,",
          "6397:     { \"Nikon D300\", 0, 0,",
          "6399:     { \"Nikon D3X\", 0, 0,",
          "6401:     { \"Nikon D3S\", 0, 0,",
          "6403:     { \"Nikon D3\", 0, 0,",
          "6405:     { \"Nikon D40X\", 0, 0,",
          "6407:     { \"Nikon D40\", 0, 0,",
          "6409:     { \"Nikon D4\", 0, 0,",
          "6411:     { \"Nikon D5000\", 0, 0xf00,",
          "6413:     { \"Nikon D5100\", 0, 0x3de6,",
          "6415:     { \"Nikon D5200\", 0, 0,",
          "6416:  { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },",
          "6417:     { \"Nikon D50\", 0, 0,",
          "6419:     { \"Nikon D600\", 0, 0x3e07,",
          "6421:     { \"Nikon D60\", 0, 0,",
          "6423:     { \"Nikon D7000\", 0, 0,",
          "6425:     { \"Nikon D7100\", 0, 0,",
          "6426:  { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },",
          "6427:     { \"Nikon D700\", 0, 0,",
          "6429:     { \"Nikon D70\", 0, 0,",
          "6431:     { \"Nikon D800\", 0, 0,",
          "6433:     { \"Nikon D80\", 0, 0,",
          "6435:     { \"Nikon D90\", 0, 0xf00,",
          "6438:  { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } },",
          "6442:  { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } },",
          "6447:     { \"Nikon E2500\", 0, 0,",
          "6453:     { \"Nikon E4500\", 0, 0,",
          "6455:     { \"Nikon E5000\", 0, 0,",
          "6457:     { \"Nikon E5400\", 0, 0,",
          "6459:     { \"Nikon E5700\", 0, 0,",
          "6461:     { \"Nikon E8400\", 0, 0,",
          "6463:     { \"Nikon E8700\", 0, 0,",
          "6465:     { \"Nikon E8800\", 0, 0,",
          "6467:     { \"Nikon COOLPIX A\", 0, 0,",
          "6469:     { \"Nikon COOLPIX P330\", 0, 0,",
          "6471:     { \"Nikon COOLPIX P6000\", 0, 0,",
          "6473:     { \"Nikon COOLPIX P7000\", 0, 0,",
          "6475:     { \"Nikon COOLPIX P7100\", 0, 0,",
          "6477:     { \"Nikon COOLPIX P7700\", 200, 0,",
          "6479:     { \"Nikon 1 V2\", 0, 0,",
          "6481:     { \"Nikon 1 J3\", 0, 0,",
          "6483:     { \"Nikon 1 \", 0, 0,",
          "6485:     { \"Olympus C5050\", 0, 0,",
          "6487:     { \"Olympus C5060\", 0, 0,",
          "6489:     { \"Olympus C7070\", 0, 0,",
          "6491:     { \"Olympus C70\", 0, 0,",
          "6493:     { \"Olympus C80\", 0, 0,",
          "6495:     { \"Olympus E-10\", 0, 0xffc,",
          "6497:     { \"Olympus E-1\", 0, 0,",
          "6499:     { \"Olympus E-20\", 0, 0xffc,",
          "6501:     { \"Olympus E-300\", 0, 0,",
          "6503:     { \"Olympus E-330\", 0, 0,",
          "6505:     { \"Olympus E-30\", 0, 0xfbc,",
          "6507:     { \"Olympus E-3\", 0, 0xf99,",
          "6509:     { \"Olympus E-400\", 0, 0,",
          "6511:     { \"Olympus E-410\", 0, 0xf6a,",
          "6513:     { \"Olympus E-420\", 0, 0xfd7,",
          "6515:     { \"Olympus E-450\", 0, 0xfd2,",
          "6517:     { \"Olympus E-500\", 0, 0,",
          "6519:     { \"Olympus E-510\", 0, 0xf6a,",
          "6521:     { \"Olympus E-520\", 0, 0xfd2,",
          "6523:     { \"Olympus E-5\", 0, 0xeec,",
          "6525:     { \"Olympus E-600\", 0, 0xfaf,",
          "6527:     { \"Olympus E-620\", 0, 0xfaf,",
          "6529:     { \"Olympus E-P1\", 0, 0xffd,",
          "6531:     { \"Olympus E-P2\", 0, 0xffd,",
          "6533:     { \"Olympus E-P3\", 0, 0,",
          "6535:     { \"Olympus E-PL1s\", 0, 0,",
          "6537:     { \"Olympus E-PL1\", 0, 0,",
          "6539:     { \"Olympus E-PL2\", 0, 0xcf3,",
          "6541:     { \"Olympus E-PL3\", 0, 0,",
          "6543:     { \"Olympus E-PL5\", 0, 0xfcb,",
          "6545:     { \"Olympus E-PM1\", 0, 0,",
          "6547:     { \"Olympus E-PM2\", 0, 0,",
          "6549:     { \"Olympus E-M5\", 0, 0xfe1,",
          "6551:     { \"Olympus SP350\", 0, 0,",
          "6553:     { \"Olympus SP3\", 0, 0,",
          "6555:     { \"Olympus SP500UZ\", 0, 0xfff,",
          "6557:     { \"Olympus SP510UZ\", 0, 0xffe,",
          "6559:     { \"Olympus SP550UZ\", 0, 0xffe,",
          "6561:     { \"Olympus SP560UZ\", 0, 0xff9,",
          "6563:     { \"Olympus SP570UZ\", 0, 0,",
          "6565:     { \"Olympus XZ-10\", 0, 0,",
          "6567:     { \"Olympus XZ-1\", 0, 0,",
          "6569:     { \"Olympus XZ-2\", 0, 0,",
          "6572:  { 12782,-4059,-379,-478,9066,1413,1340,1513,5176 } },",
          "6573:     { \"Pentax *ist DL2\", 0, 0,",
          "6575:     { \"Pentax *ist DL\", 0, 0,",
          "6577:     { \"Pentax *ist DS2\", 0, 0,",
          "6579:     { \"Pentax *ist DS\", 0, 0,",
          "6581:     { \"Pentax *ist D\", 0, 0,",
          "6583:     { \"Pentax K10D\", 0, 0,",
          "6585:     { \"Pentax K1\", 0, 0,",
          "6587:     { \"Pentax K20D\", 0, 0,",
          "6589:     { \"Pentax K200D\", 0, 0,",
          "6591:     { \"Pentax K2000\", 0, 0,",
          "6593:     { \"Pentax K-m\", 0, 0,",
          "6595:     { \"Pentax K-x\", 0, 0,",
          "6597:     { \"Pentax K-r\", 0, 0,",
          "6599:     { \"Pentax K-5 II\", 0, 0,",
          "6600:  { 8170,-2725,-639,-4440,12017,2744,-771,1465,6599 } },",
          "6601:     { \"Pentax K-5\", 0, 0,",
          "6603:     { \"Pentax K-7\", 0, 0,",
          "6605:     { \"Pentax MX-1\", 0, 0,",
          "6607:     { \"Pentax Q10\", 0, 0,",
          "6609:     { \"Pentax 645D\", 0, 0x3e00,",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "6975:  { 13639,-5535,-1371,-1698,9633,2430,316,1152,4108 } },",
          "6976:     { \"Panasonic DMC-FZ50\", 0, 0,",
          "6977:  { 7906,-2709,-594,-6231,13351,3220,-1922,2631,6537 } },",
          "6979:  { 7906,-2709,-594,-6231,13351,3220,-1922,2631,6537 } },",
          "6980:     { \"Panasonic DMC-L10\", 15, 0xf96,",
          "6981:  { 8025,-1942,-1050,-7920,15904,2100,-2456,3005,7039 } },",
          "6982:     { \"Panasonic DMC-L1\", 0, 0xf7f,",
          "6983:  { 8054,-1885,-1025,-8349,16367,2040,-2805,3542,7629 } },",
          "6985:  { 8054,-1885,-1025,-8349,16367,2040,-2805,3542,7629 } },",
          "6986:     { \"Panasonic DMC-LC1\", 0, 0,",
          "6987:  { 11340,-4069,-1275,-7555,15266,2448,-2960,3426,7685 } },",
          "6989:  { 11340,-4069,-1275,-7555,15266,2448,-2960,3426,7685 } },",
          "6990:     { \"Panasonic DMC-LX1\", 0, 0xf7f,",
          "6991:  { 10704,-4187,-1230,-8314,15952,2501,-920,945,8927 } },",
          "6993:  { 10704,-4187,-1230,-8314,15952,2501,-920,945,8927 } },",
          "6994:     { \"Panasonic DMC-LX2\", 0, 0,",
          "6995:  { 8048,-2810,-623,-6450,13519,3272,-1700,2146,7049 } },",
          "6997:  { 8048,-2810,-623,-6450,13519,3272,-1700,2146,7049 } },",
          "6998:     { \"Panasonic DMC-LX3\", 15, 0,",
          "6999:  { 8128,-2668,-655,-6134,13307,3161,-1782,2568,6083 } },",
          "7001:  { 8128,-2668,-655,-6134,13307,3161,-1782,2568,6083 } },",
          "7002:     { \"Panasonic DMC-LX5\", 143, 0,",
          "7003:  { 10909,-4295,-948,-1333,9306,2399,22,1738,4582 } },",
          "7007:  { 10909,-4295,-948,-1333,9306,2399,22,1738,4582 } },",
          "7008:     { \"Panasonic DMC-LX7\", 143, 0,",
          "7009:  { 10148,-3743,-991,-2837,11366,1659,-701,1893,4899 } },",
          "7011:  { 10148,-3743,-991,-2837,11366,1659,-701,1893,4899 } },",
          "7012:     { \"Panasonic DMC-FZ100\", 143, 0xfff,",
          "7013:  { 16197,-6146,-1761,-2393,10765,1869,366,2238,5248 } },",
          "7015:  { 16197,-6146,-1761,-2393,10765,1869,366,2238,5248 } },",
          "7016:     { \"Panasonic DMC-FZ150\", 143, 0xfff,",
          "7017:  { 11904,-4541,-1189,-2355,10899,1662,-296,1586,4289 } },",
          "7019:  { 11904,-4541,-1189,-2355,10899,1662,-296,1586,4289 } },",
          "7020:     { \"Panasonic DMC-FZ200\", 143, 0xfff,",
          "7021:  { 8112,-2563,-740,-3730,11784,2197,-941,2075,4933 } },",
          "7023:  { 8112,-2563,-740,-3730,11784,2197,-941,2075,4933 } },",
          "7024:     { \"Panasonic DMC-FX150\", 15, 0xfff,",
          "7025:  { 9082,-2907,-925,-6119,13377,3058,-1797,2641,5609 } },",
          "",
          "[Removed Lines]",
          "6978:     { \"LEICA V-LUX1\", 0, 0,",
          "6984:     { \"LEICA DIGILUX 3\", 0, 0xf7f,",
          "6988:     { \"LEICA DIGILUX 2\", 0, 0,",
          "6992:     { \"LEICA D-LUX2\", 0, 0xf7f,",
          "6996:     { \"LEICA D-LUX3\", 0, 0,",
          "7000:     { \"LEICA D-LUX 4\", 15, 0,",
          "7004:     { \"Panasonic DMC-LX7\", 143, 0,",
          "7005:  { 10148,-3743,-991,-2837,11366,1659,-701,1893,4899 } },",
          "7006:     { \"LEICA D-LUX 5\", 143, 0,",
          "7010:     { \"LEICA D-LUX 6\", 143, 0,",
          "7014:     { \"LEICA V-LUX 2\", 143, 0xfff,",
          "7018:     { \"LEICA V-LUX 3\", 143, 0xfff,",
          "7022:     { \"LEICA V-LUX 4\", 143, 0xfff,",
          "",
          "[Added Lines]",
          "6625:     { \"Leica V-LUX1\", 0, 0,",
          "6631:     { \"Leica DIGILUX 3\", 0, 0xf7f,",
          "6635:     { \"Leica DIGILUX 2\", 0, 0,",
          "6639:     { \"Leica D-LUX2\", 0, 0xf7f,",
          "6643:     { \"Leica D-LUX3\", 0, 0,",
          "6647:     { \"Leica D-LUX 4\", 15, 0,",
          "6651:     { \"Leica D-LUX 5\", 143, 0,",
          "6655:     { \"Leica D-LUX 6\", 143, 0,",
          "6659:     { \"Leica V-LUX 2\", 143, 0xfff,",
          "6663:     { \"Leica V-LUX 3\", 143, 0xfff,",
          "6667:     { \"Leica V-LUX 4\", 143, 0xfff,",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "7033:  { 6763,-1919,-863,-3868,11515,2684,-1216,2387,5879 } },",
          "7034:     { \"Panasonic DMC-G5\", 143, 0xfff,",
          "7035:  { 7798,-2562,-740,-3879,11584,2613,-1055,2248,5434 } },",
          "7038:     { \"Panasonic DMC-GF1\", 15, 0xf92,",
          "7039:  { 7888,-1902,-1011,-8106,16085,2099,-2353,2866,7330 } },",
          "7040:     { \"Panasonic DMC-GF2\", 143, 0xfff,",
          "",
          "[Removed Lines]",
          "7036:  { \"Panasonic DMC-G6\", 143, 0xfff,",
          "7037:  { 8294,-2891,-651,-3869,11590,2595,-1183,2267,5352 } },",
          "",
          "[Added Lines]",
          "6682:  { 6395,-2583,-40,-3677,9109,4569,-1502,2806,6431 } },",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "7043:  { 9051,-2468,-1204,-5212,13276,2121,-1197,2510,6890 } },",
          "7044:     { \"Panasonic DMC-GF5\", 143, 0xfff,",
          "7045:  { 8228,-2945,-660,-3938,11792,2430,-1094,2278,5793 } },",
          "7046:     { \"Panasonic DMC-GH1\", 15, 0xf92,",
          "7047:  { 6299,-1466,-532,-6535,13852,2969,-2331,3112,5984 } },",
          "7048:     { \"Panasonic DMC-GH2\", 15, 0xf95,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6691:     { \"Panasonic DMC-GF6\", 143, 0,",
          "6692:  { 8130,-2801,-946,-3520,11289,2552,-1314,2511,5791 } },",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "7065:  { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },",
          "7066:     { \"Phase One P65\", 0, 0,",
          "7067:  { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },",
          "7069:  { 21014,-7891,-2613,-3056,12201,856,-2203,5125,8042 } },",
          "7071:  { 8898,-2498,-994,-3144,11328,2066,-760,1381,4576 } },",
          "7073:  { 10648,-3897,-1055,-2022,10573,1668,-492,1611,4742 } },",
          "7075:  { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },",
          "7077:  { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },",
          "7079:  { 10332,-3234,-1168,-6111,14639,1520,-1352,2647,8331 } },",
          "7081:  { 12093,-3557,-1155,-1000,9534,1733,-22,1787,4576 } },",
          "7083:  { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },",
          "7085:  { 11885,-3968,-1473,-4214,12299,1916,-835,1655,5549 } },",
          "7087:  { 16442,-2956,-2422,-2877,12128,750,-1136,6066,4559 } },",
          "7089:  { 7924,-1910,-777,-8226,15459,2998,-1517,2199,6818,-7242,11401,3481 } },",
          "7091:  { 8512,-2641,-694,-8042,15670,2526,-1821,2117,7414 } },",
          "7093:  { 7511,-2571,-692,-7894,15088,3060,-948,1111,8128 } },",
          "7095:  { 8651,-2754,-1057,-3464,12207,1373,-568,1398,4434 } },",
          "7097:  { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },",
          "7099:  { 9437,-2811,-774,-8405,16215,2290,-710,596,7181 } },",
          "7101:  { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },",
          "7103:  { 9847,-3091,-928,-8485,16345,2225,-715,595,7103 } },",
          "7105:  { 9847,-3091,-928,-8485,16345,2225,-715,595,7103 } },",
          "7107:  { 9847,-3091,-929,-8485,16346,2225,-714,595,7103 } },",
          "7109:  { 6038,-1484,-578,-9146,16746,2513,-875,746,7217 } },",
          "7111:  { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },",
          "7113:  { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },",
          "7115:  { 4950,-580,-103,-5228,12542,3029,-709,1435,7371 } },",
          "7117:  { 5932,-1492,-411,-4813,12285,2856,-741,1524,6739 } },",
          "7119:  { 4950,-580,-103,-5228,12542,3029,-709,1435,7371 } },",
          "7121:  { 5775,-805,-359,-8574,16295,2391,-1943,2341,7249 } },",
          "7123:  { 5413,-1162,-365,-5665,13098,2866,-608,1179,8440 } },",
          "7125:  { 5209,-1072,-397,-8845,16120,2919,-1618,1803,8654 } },",
          "7131:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "7133:  { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },",
          "7135:  { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },",
          "7137:  { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },",
          "7139:  { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },",
          "7141:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "7143:  { 6069,-1221,-366,-5221,12779,2734,-1024,2066,6834 } },",
          "7145:  { 5986,-1618,-415,-4557,11820,3120,-681,1404,6971 } },",
          "7147:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "7149:  { 5932,-1492,-411,-4813,12285,2856,-741,1524,6739 } },",
          "7151:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "7153:  { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },",
          "7155:  { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },",
          "7157:  { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },",
          "7159:  { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },",
          "7160:   };",
          "7161:   double cam_xyz[4][3];",
          "",
          "[Removed Lines]",
          "7070:     { \"SAMSUNG EX1\", 0, 0x3e00,",
          "7072:     { \"SAMSUNG EX2F\", 0, 0x7ff,",
          "7076:     { \"SAMSUNG NX1000\", 0, 0,",
          "7080:     { \"SAMSUNG WB2000\", 0, 0xfff,",
          "7082:     { \"SAMSUNG GX-1\", 0, 0,",
          "7088:     { \"SONY DSC-F828\", 0, 0,",
          "7090:     { \"SONY DSC-R1\", 512, 0,",
          "7092:     { \"SONY DSC-V3\", 0, 0,",
          "7094:     { \"SONY DSC-RX100\", 200, 0,",
          "7096:     { \"SONY DSC-RX1\", 128, 0,",
          "7098:     { \"SONY DSLR-A100\", 0, 0xfeb,",
          "7100:     { \"SONY DSLR-A290\", 0, 0,",
          "7102:     { \"SONY DSLR-A2\", 0, 0,",
          "7104:     { \"SONY DSLR-A300\", 0, 0,",
          "7106:     { \"SONY DSLR-A330\", 0, 0,",
          "7108:     { \"SONY DSLR-A350\", 0, 0xffc,",
          "7110:     { \"SONY DSLR-A380\", 0, 0,",
          "7112:     { \"SONY DSLR-A390\", 0, 0,",
          "7114:     { \"SONY DSLR-A450\", 128, 0xfeb,",
          "7116:     { \"SONY DSLR-A580\", 128, 0xfeb,",
          "7118:     { \"SONY DSLR-A5\", 128, 0xfeb,",
          "7120:     { \"SONY DSLR-A700\", 126, 0,",
          "7122:     { \"SONY DSLR-A850\", 128, 0,",
          "7124:     { \"SONY DSLR-A900\", 128, 0,",
          "7127:  { 6129,-1545, -418,-4930,12490,2743,-977,1693,6615 } },",
          "7129:  { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },",
          "7130:     { \"SONY NEX-5N\", 128, 0,",
          "7132:     { \"SONY NEX-5R\", 128, 0,",
          "7136:     { \"SONY NEX-6\", 128, 0,",
          "7138:     { \"SONY NEX-7\", 128, 0,",
          "7142:     { \"SONY SLT-A33\", 128, 0,",
          "7144:     { \"SONY SLT-A35\", 128, 0,",
          "7146:     { \"SONY SLT-A37\", 128, 0,",
          "7148:     { \"SONY SLT-A55\", 128, 0,",
          "7150:     { \"SONY SLT-A57\", 128, 0,",
          "7152:  { \"SONY SLT-A58\", 128, 0,",
          "7154:     { \"SONY SLT-A65\", 128, 0,",
          "7156:     { \"SONY SLT-A77\", 128, 0,",
          "7158:     { \"SONY SLT-A99\", 128, 0,",
          "",
          "[Added Lines]",
          "6717:     { \"Samsung EX1\", 0, 0x3e00,",
          "6719:     { \"Samsung EX2F\", 0, 0x7ff,",
          "6721:     { \"Samsung NX300\", 0, 0,",
          "6722:  { 7557,-2522,-739,-4679,12949,1894,-840,1777,5311 } },",
          "6723:     { \"Samsung NX2000\", 0, 0,",
          "6724:  { 7557,-2522,-739,-4679,12949,1894,-840,1777,5311 } },",
          "6727:     { \"Samsung NX1000\", 0, 0,",
          "6729:     { \"Samsung NX1100\", 0, 0,",
          "6730:  { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },",
          "6733:     { \"Samsung WB2000\", 0, 0xfff,",
          "6735:     { \"Samsung GX-1\", 0, 0,",
          "6741:     { \"Sony DSC-F828\", 0, 0,",
          "6743:     { \"Sony DSC-R1\", 512, 0,",
          "6745:     { \"Sony DSC-V3\", 0, 0,",
          "6747:     { \"Sony DSC-RX100\", 200, 0,",
          "6749:     { \"Sony DSC-RX1\", 128, 0,",
          "6751:     { \"Sony DSLR-A100\", 0, 0xfeb,",
          "6753:     { \"Sony DSLR-A290\", 0, 0,",
          "6755:     { \"Sony DSLR-A2\", 0, 0,",
          "6757:     { \"Sony DSLR-A300\", 0, 0,",
          "6759:     { \"Sony DSLR-A330\", 0, 0,",
          "6761:     { \"Sony DSLR-A350\", 0, 0xffc,",
          "6763:     { \"Sony DSLR-A380\", 0, 0,",
          "6765:     { \"Sony DSLR-A390\", 0, 0,",
          "6767:     { \"Sony DSLR-A450\", 128, 0xfeb,",
          "6769:     { \"Sony DSLR-A580\", 128, 0xfeb,",
          "6771:     { \"Sony DSLR-A5\", 128, 0xfeb,",
          "6773:     { \"Sony DSLR-A700\", 126, 0,",
          "6775:     { \"Sony DSLR-A850\", 128, 0,",
          "6777:     { \"Sony DSLR-A900\", 128, 0,",
          "6779:     { \"Sony NEX-5N\", 128, 0,",
          "6781:     { \"Sony NEX-5R\", 128, 0,",
          "6783:     { \"Sony NEX-3N\", 128, 0,",
          "6784:  { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },",
          "6786:  { 6907,-1256,-645,-4940,12621,2320,-1710,2581,6230 } },",
          "6788:  { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },",
          "6791:     { \"Sony NEX-6\", 128, 0,",
          "6793:     { \"Sony NEX-7\", 128, 0,",
          "6797:     { \"Sony SLT-A33\", 128, 0,",
          "6799:     { \"Sony SLT-A35\", 128, 0,",
          "6801:     { \"Sony SLT-A37\", 128, 0,",
          "6803:     { \"Sony SLT-A55\", 128, 0,",
          "6805:     { \"Sony SLT-A57\", 128, 0,",
          "6807:     { \"Sony SLT-A58\", 128, 0,",
          "6809:     { \"Sony SLT-A65\", 128, 0,",
          "6811:     { \"Sony SLT-A77\", 128, 0,",
          "6813:     { \"Sony SLT-A99\", 128, 0,",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "7255: void CLASS identify()",
          "7256: {",
          "7260:   static const struct {",
          "7263:   } table[] = {",
          "7356:   static const char *corp[] =",
          "7366:   raw_height = raw_width = fuji_width = fuji_layout = cr2_slice[0] = 0;",
          "7367:   maximum = height = width = top_margin = left_margin = 0;",
          "7368:   cdesc[0] = desc[0] = artist[0] = make[0] = model[0] = model2[0] = 0;",
          "",
          "[Removed Lines]",
          "7257:   char head[32], *cp;",
          "7258:   int hlen, flen, fsize, zero_fsize=1, i, c, is_canon;",
          "7259:   struct jhead jh;",
          "7261:     int fsize;",
          "7262:     char t_make[12], t_model[19], withjpeg;",
          "7264:     {    62464, \"Kodak\",    \"DC20\"            ,0 },",
          "7265:     {   124928, \"Kodak\",    \"DC20\"            ,0 },",
          "7266:     {  1652736, \"Kodak\",    \"DCS200\"          ,0 },",
          "7267:     {  4159302, \"Kodak\",    \"C330\"            ,0 },",
          "7268:     {  4162462, \"Kodak\",    \"C330\"            ,0 },",
          "7269:     {   460800, \"Kodak\",    \"C603v\"           ,0 },",
          "7270:     {   614400, \"Kodak\",    \"C603v\"           ,0 },",
          "7271:     {  6163328, \"Kodak\",    \"C603\"            ,0 },",
          "7272:     {  6166488, \"Kodak\",    \"C603\"            ,0 },",
          "7273:     {  9116448, \"Kodak\",    \"C603y\"           ,0 },",
          "7275:     {   787456, \"Creative\", \"PC-CAM 600\"      ,0 },",
          "7276:     {  1138688, \"Minolta\",  \"RD175\"           ,0 },",
          "7277:     {  3840000, \"Foculus\",  \"531C\"            ,0 },",
          "7278:     {   307200, \"Generic\",  \"640x480\"         ,0 },",
          "7279:     {   786432, \"AVT\",      \"F-080C\"          ,0 },",
          "7280:     {  1447680, \"AVT\",      \"F-145C\"          ,0 },",
          "7281:     {  1920000, \"AVT\",      \"F-201C\"          ,0 },",
          "7282:     {  5067304, \"AVT\",      \"F-510C\"          ,0 },",
          "7283:     {  5067316, \"AVT\",      \"F-510C\"          ,0 },",
          "7284:     { 10134608, \"AVT\",      \"F-510C\"          ,0 },",
          "7285:     { 10134620, \"AVT\",      \"F-510C\"          ,0 },",
          "7286:     { 16157136, \"AVT\",      \"F-810C\"          ,0 },",
          "7287:     {  1409024, \"Sony\",     \"XCD-SX910CR\"     ,0 },",
          "7288:     {  2818048, \"Sony\",     \"XCD-SX910CR\"     ,0 },",
          "7289:     {  3884928, \"Micron\",   \"2010\"            ,0 },",
          "7290:     {  6624000, \"Pixelink\", \"A782\"            ,0 },",
          "7291:     { 13248000, \"Pixelink\", \"A782\"            ,0 },",
          "7292:     {  6291456, \"RoverShot\",\"3320AF\"          ,0 },",
          "7293:     {  6553440, \"Canon\",    \"PowerShot A460\"  ,0 },",
          "7294:     {  6653280, \"Canon\",    \"PowerShot A530\"  ,0 },",
          "7295:     {  6573120, \"Canon\",    \"PowerShot A610\"  ,0 },",
          "7296:     {  9219600, \"Canon\",    \"PowerShot A620\"  ,0 },",
          "7297:     {  9243240, \"Canon\",    \"PowerShot A470\"  ,0 },",
          "7298:     { 10341600, \"Canon\",    \"PowerShot A720 IS\",0 },",
          "7299:     { 10383120, \"Canon\",    \"PowerShot A630\"  ,0 },",
          "7300:     { 12945240, \"Canon\",    \"PowerShot A640\"  ,0 },",
          "7301:     { 15636240, \"Canon\",    \"PowerShot A650\"  ,0 },",
          "7302:     {  5298000, \"Canon\",    \"PowerShot SD300\" ,0 },",
          "7303:     {  7710960, \"Canon\",    \"PowerShot S3 IS\" ,0 },",
          "7304:     { 15467760, \"Canon\",    \"PowerShot SX110 IS\",0 },",
          "7305:     { 15534576, \"Canon\",    \"PowerShot SX120 IS\",0 },",
          "7306:     { 18653760, \"Canon\",    \"PowerShot SX20 IS\",0 },",
          "7307:     { 19131120, \"Canon\",    \"PowerShot SX220 HS\",0 },",
          "7308:     { 21936096, \"Canon\",    \"PowerShot SX30 IS\",0 },",
          "7309:     {  5939200, \"OLYMPUS\",  \"C770UZ\"          ,0 },",
          "7316:     {  5865472, \"NIKON\",    \"E4500\"           ,1 },",
          "7318:     {  8998912, \"NIKON\",    \"COOLPIX S6\"      ,1 },",
          "7319:     {  1976352, \"CASIO\",    \"QV-2000UX\"       ,1 },",
          "7320:     {  3217760, \"CASIO\",    \"QV-3*00EX\"       ,1 },",
          "7321:     {  6218368, \"CASIO\",    \"QV-5700\"         ,1 },",
          "7322:     {  6054400, \"CASIO\",    \"QV-R41\"          ,1 },",
          "7323:     {  7530816, \"CASIO\",    \"QV-R51\"          ,1 },",
          "7324:     {  7684000, \"CASIO\",    \"QV-4000\"         ,1 },",
          "7325:     {  2937856, \"CASIO\",    \"EX-S20\"          ,1 },",
          "7326:     {  4948608, \"CASIO\",    \"EX-S100\"         ,1 },",
          "7327:     {  7542528, \"CASIO\",    \"EX-Z50\"          ,1 },",
          "7328:     {  7562048, \"CASIO\",    \"EX-Z500\"         ,1 },",
          "7329:     {  7753344, \"CASIO\",    \"EX-Z55\"          ,1 },",
          "7330:     {  7816704, \"CASIO\",    \"EX-Z60\"          ,1 },",
          "7331:     { 10843712, \"CASIO\",    \"EX-Z75\"          ,1 },",
          "7332:     { 10834368, \"CASIO\",    \"EX-Z750\"         ,1 },",
          "7333:     { 12310144, \"CASIO\",    \"EX-Z850\"         ,1 },",
          "7334:     { 12489984, \"CASIO\",    \"EX-Z8\"           ,1 },",
          "7335:     { 15499264, \"CASIO\",    \"EX-Z1050\"        ,1 },",
          "7336:     { 18702336, \"CASIO\",    \"EX-ZR100\"        ,1 },",
          "7337:     {  7426656, \"CASIO\",    \"EX-P505\"         ,1 },",
          "7338:     {  9313536, \"CASIO\",    \"EX-P600\"         ,1 },",
          "7339:     { 10979200, \"CASIO\",    \"EX-P700\"         ,1 },",
          "7340:     {  3178560, \"PENTAX\",   \"Optio S\"         ,1 },",
          "7341:     {  4841984, \"PENTAX\",   \"Optio S\"         ,1 },",
          "7343:     { 10702848, \"PENTAX\",   \"Optio 750Z\"      ,1 },",
          "7344:     { 15980544, \"AGFAPHOTO\",\"DC-833m\"         ,1 },",
          "7345:     { 16098048, \"SAMSUNG\",  \"S85\"             ,1 },",
          "7346:     { 16215552, \"SAMSUNG\",  \"S85\"             ,1 },",
          "7347:     { 20487168, \"SAMSUNG\",  \"WB550\"           ,1 },",
          "7348:     { 24000000, \"SAMSUNG\",  \"WB550\"           ,1 },",
          "7349:     { 9994240, \"ptGrey\", \"GRAS-50S5C\" ,0 }, // KC: SUPPORT GRASSHOPPER",
          "7350:     { 10075968, \"JaiPulnix\",\"BB-500CL\" ,0 }, // KC: SUPPORT BB-500CL",
          "7351:     { 10108896, \"JaiPulnix\",\"BB-500GE\" ,0 }, // KC: SUPPORT BB-500GE",
          "7352:     { 10036800, \"SVS\", \"SVS625CL\" ,0 }, // KC: SUPPORT SVS625 cameralink",
          "7353:     { 12582980, \"Sinar\",    \"\"                ,0 },",
          "7354:     { 33292868, \"Sinar\",    \"\"                ,0 },",
          "7355:     { 44390468, \"Sinar\",    \"\"                ,0 } };",
          "7357:     { \"Canon\", \"NIKON\", \"EPSON\", \"KODAK\", \"Kodak\", \"OLYMPUS\", \"PENTAX\",",
          "7358:       \"MINOLTA\", \"Minolta\", \"Konica\", \"CASIO\", \"Sinar\", \"Phase One\",",
          "7359:       \"SAMSUNG\", \"Mamiya\", \"MOTOROLA\", \"LEICA\" };",
          "7361: #ifdef LIBRAW_LIBRARY_BUILD",
          "7362:   RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY,0,2);",
          "7363: #endif",
          "",
          "[Added Lines]",
          "6912:   static const short pana[][6] = {",
          "6913:     { 3130, 1743,  4,  0, -6,  0 },",
          "6914:     { 3130, 2055,  4,  0, -6,  0 },",
          "6915:     { 3130, 2319,  4,  0, -6,  0 },",
          "6916:     { 3170, 2103, 18,  0,-42, 20 },",
          "6917:     { 3170, 2367, 18, 13,-42,-21 },",
          "6918:     { 3177, 2367,  0,  0, -1,  0 },",
          "6919:     { 3304, 2458,  0,  0, -1,  0 },",
          "6920:     { 3330, 2463,  9,  0, -5,  0 },",
          "6921:     { 3330, 2479,  9,  0,-17,  4 },",
          "6922:     { 3370, 1899, 15,  0,-44, 20 },",
          "6923:     { 3370, 2235, 15,  0,-44, 20 },",
          "6924:     { 3370, 2511, 15, 10,-44,-21 },",
          "6925:     { 3690, 2751,  3,  0, -8, -3 },",
          "6926:     { 3710, 2751,  0,  0, -3,  0 },",
          "6927:     { 3724, 2450,  0,  0,  0, -2 },",
          "6928:     { 3770, 2487, 17,  0,-44, 19 },",
          "6929:     { 3770, 2799, 17, 15,-44,-19 },",
          "6930:     { 3880, 2170,  6,  0, -6,  0 },",
          "6931:     { 4060, 3018,  0,  0,  0, -2 },",
          "6932:     { 4290, 2391,  3,  0, -8, -1 },",
          "6933:     { 4330, 2439, 17, 15,-44,-19 },",
          "6934:     { 4508, 2962,  0,  0, -3, -4 },",
          "6935:     { 4508, 3330,  0,  0, -3, -6 },",
          "6936:   };",
          "6937:   static const ushort canon[][6] = {",
          "6938:     { 1944, 1416,   0,  0, 48,  0 },",
          "6939:     { 2144, 1560,   4,  8, 52,  2 },",
          "6940:     { 2224, 1456,  48,  6,  0,  2 },",
          "6941:     { 2376, 1728,  12,  6, 52,  2 },",
          "6942:     { 2672, 1968,  12,  6, 44,  2 },",
          "6943:     { 3152, 2068,  64, 12,  0,  0 },",
          "6944:     { 3160, 2344,  44, 12,  4,  4 },",
          "6945:     { 3344, 2484,   4,  6, 52,  6 },",
          "6946:     { 3516, 2328,  42, 14,  0,  0 },",
          "6947:     { 3596, 2360,  74, 12,  0,  0 },",
          "6948:     { 3744, 2784,  52, 12,  8, 12 },",
          "6949:     { 3944, 2622,  30, 18,  6,  2 },",
          "6950:     { 3948, 2622,  42, 18,  0,  2 },",
          "6951:     { 3984, 2622,  76, 20,  0,  2 },",
          "6952:     { 4104, 3048,  48, 12, 24, 12 },",
          "6953:     { 4116, 2178,   4,  2,  0,  0 },",
          "6954:     { 4152, 2772, 192, 12,  0,  0 },",
          "6955:     { 4160, 3124, 104, 11,  8, 65 },",
          "6956:     { 4176, 3062,  96, 17,  8,  0 },",
          "6957:     { 4312, 2876,  22, 18,  0,  2 },",
          "6958:     { 4352, 2874,  62, 18,  0,  0 },",
          "6959:     { 4476, 2954,  90, 34,  0,  0 },",
          "6960:     { 4480, 3348,  12, 10, 36, 12 },",
          "6961:     { 4496, 3366,  80, 50, 12,  0 },",
          "6962:     { 4832, 3204,  62, 26,  0,  0 },",
          "6963:     { 4832, 3228,  62, 51,  0,  0 },",
          "6964:     { 5108, 3349,  98, 13,  0,  0 },",
          "6965:     { 5120, 3318, 142, 45, 62,  0 },",
          "6966:     { 5280, 3528,  72, 52,  0,  0 },",
          "6967:     { 5344, 3516, 142, 51,  0,  0 },",
          "6968:     { 5344, 3584, 126,100,  0,  2 },",
          "6969:     { 5360, 3516, 158, 51,  0,  0 },",
          "6970:     { 5568, 3708,  72, 38,  0,  0 },",
          "6971:     { 5712, 3774,  62, 20, 10,  2 },",
          "6972:     { 5792, 3804, 158, 51,  0,  0 },",
          "6973:     { 5920, 3950, 122, 80,  2,  0 },",
          "6974:   };",
          "6976:     ushort id;",
          "6977:     char t_model[20];",
          "6978:   } unique[] = {",
          "6979:     { 0x168, \"EOS 10D\" },    { 0x001, \"EOS-1D\" },",
          "6980:     { 0x175, \"EOS 20D\" },    { 0x174, \"EOS-1D Mark II\" },",
          "6981:     { 0x234, \"EOS 30D\" },    { 0x232, \"EOS-1D Mark II N\" },",
          "6982:     { 0x190, \"EOS 40D\" },    { 0x169, \"EOS-1D Mark III\" },",
          "6983:     { 0x261, \"EOS 50D\" },    { 0x281, \"EOS-1D Mark IV\" },",
          "6984:     { 0x287, \"EOS 60D\" },    { 0x167, \"EOS-1DS\" },",
          "6985:     { 0x170, \"EOS 300D\" },   { 0x188, \"EOS-1Ds Mark II\" },",
          "6986:     { 0x176, \"EOS 450D\" },   { 0x215, \"EOS-1Ds Mark III\" },",
          "6987:     { 0x189, \"EOS 350D\" },   { 0x324, \"EOS-1D C\" },",
          "6988:     { 0x236, \"EOS 400D\" },   { 0x269, \"EOS-1D X\" },",
          "6989:     { 0x252, \"EOS 500D\" },   { 0x213, \"EOS 5D\" },",
          "6990:     { 0x270, \"EOS 550D\" },   { 0x218, \"EOS 5D Mark II\" },",
          "6991:     { 0x286, \"EOS 600D\" },   { 0x285, \"EOS 5D Mark III\" },",
          "6992:     { 0x301, \"EOS 650D\" },   { 0x302, \"EOS 6D\" },",
          "6993:     { 0x326, \"EOS 700D\" },   { 0x250, \"EOS 7D\" },",
          "6994:     { 0x254, \"EOS 1000D\" },",
          "6995:     { 0x288, \"EOS 1100D\" },",
          "6996:     { 0x346, \"EOS 100D\" },",
          "6997:   };",
          "6998:   static const struct {",
          "6999:     unsigned fsize;",
          "7000:     ushort rw, rh;",
          "7001:     uchar lm, tm, rm, bm, lf, cf, max, flags;",
          "7002:     char t_make[10], t_model[20];",
          "7003:     ushort offset;",
          "7005:     {   786432,1024, 768, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-080C\" },",
          "7006:     {  1447680,1392,1040, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-145C\" },",
          "7007:     {  1920000,1600,1200, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-201C\" },",
          "7008:     {  5067304,2588,1958, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-510C\" },",
          "7009:     {  5067316,2588,1958, 0, 0, 0, 0, 0,0x94,0,0,\"AVT\",\"F-510C\",12 },",
          "7010:     { 10134608,2588,1958, 0, 0, 0, 0, 9,0x94,0,0,\"AVT\",\"F-510C\" },",
          "7011:     { 10134620,2588,1958, 0, 0, 0, 0, 9,0x94,0,0,\"AVT\",\"F-510C\",12 },",
          "7012:     { 16157136,3272,2469, 0, 0, 0, 0, 9,0x94,0,0,\"AVT\",\"F-810C\" },",
          "7013:     { 15980544,3264,2448, 0, 0, 0, 0, 8,0x61,0,1,\"AgfaPhoto\",\"DC-833m\" },",
          "7014:     {  2868726,1384,1036, 0, 0, 0, 0,64,0x49,0,8,\"Baumer\",\"TXG14\",1078 },",
          "7015:     {  5298000,2400,1766,12,12,44, 2,40,0x94,0,2,\"Canon\",\"PowerShot SD300\" },",
          "7016:     {  6553440,2664,1968, 4, 4,44, 4,40,0x94,0,2,\"Canon\",\"PowerShot A460\" },",
          "7017:     {  6573120,2672,1968,12, 8,44, 0,40,0x94,0,2,\"Canon\",\"PowerShot A610\" },",
          "7018:     {  6653280,2672,1992,10, 6,42, 2,40,0x94,0,2,\"Canon\",\"PowerShot A530\" },",
          "7019:     {  7710960,2888,2136,44, 8, 4, 0,40,0x94,0,2,\"Canon\",\"PowerShot S3 IS\" },",
          "7020:     {  9219600,3152,2340,36,12, 4, 0,40,0x94,0,2,\"Canon\",\"PowerShot A620\" },",
          "7021:     {  9243240,3152,2346,12, 7,44,13,40,0x49,0,2,\"Canon\",\"PowerShot A470\" },",
          "7022:     { 10341600,3336,2480, 6, 5,32, 3,40,0x94,0,2,\"Canon\",\"PowerShot A720 IS\" },",
          "7023:     { 10383120,3344,2484,12, 6,44, 6,40,0x94,0,2,\"Canon\",\"PowerShot A630\" },",
          "7024:     { 12945240,3736,2772,12, 6,52, 6,40,0x94,0,2,\"Canon\",\"PowerShot A640\" },",
          "7025:     { 15636240,4104,3048,48,12,24,12,40,0x94,0,2,\"Canon\",\"PowerShot A650\" },",
          "7026:     { 15467760,3720,2772, 6,12,30, 0,40,0x94,0,2,\"Canon\",\"PowerShot SX110 IS\" },",
          "7027:     { 15534576,3728,2778,12, 9,44, 9,40,0x94,0,2,\"Canon\",\"PowerShot SX120 IS\" },",
          "7028:     { 18653760,4080,3048,24,12,24,12,40,0x94,0,2,\"Canon\",\"PowerShot SX20 IS\" },",
          "7029:     { 19131120,4168,3060,92,16, 4, 1, 8,0x94,0,2,\"Canon\",\"PowerShot SX220 HS\" },",
          "7030:     { 21936096,4464,3276,25,10,73,12,40,0x16,0,2,\"Canon\",\"PowerShot SX30 IS\" },",
          "7031:     { 24724224,4704,3504, 8,16,56, 8,40,0x94,0,2,\"Canon\",\"PowerShot A3300 IS\" },",
          "7032:     {  1976352,1632,1211, 0, 2, 0, 1, 0,0x94,0,1,\"Casio\",\"QV-2000UX\" },",
          "7033:     {  3217760,2080,1547, 0, 0,10, 1, 0,0x94,0,1,\"Casio\",\"QV-3*00EX\" },",
          "7034:     {  6218368,2585,1924, 0, 0, 9, 0, 0,0x94,0,1,\"Casio\",\"QV-5700\" },",
          "7035:     {  7816704,2867,2181, 0, 0,34,36, 0,0x16,0,1,\"Casio\",\"EX-Z60\" },",
          "7036:     {  2937856,1621,1208, 0, 0, 1, 0, 0,0x94,7,13,\"Casio\",\"EX-S20\" },",
          "7037:     {  4948608,2090,1578, 0, 0,32,34, 0,0x94,7,1,\"Casio\",\"EX-S100\" },",
          "7038:     {  6054400,2346,1720, 2, 0,32, 0, 0,0x94,7,1,\"Casio\",\"QV-R41\" },",
          "7039:     {  7426656,2568,1928, 0, 0, 0, 0, 0,0x94,0,1,\"Casio\",\"EX-P505\" },",
          "7040:     {  7530816,2602,1929, 0, 0,22, 0, 0,0x94,7,1,\"Casio\",\"QV-R51\" },",
          "7041:     {  7542528,2602,1932, 0, 0,32, 0, 0,0x94,7,1,\"Casio\",\"EX-Z50\" },",
          "7042:     {  7562048,2602,1937, 0, 0,25, 0, 0,0x16,7,1,\"Casio\",\"EX-Z500\" },",
          "7043:     {  7753344,2602,1986, 0, 0,32,26, 0,0x94,7,1,\"Casio\",\"EX-Z55\" },",
          "7044:     {  9313536,2858,2172, 0, 0,14,30, 0,0x94,7,1,\"Casio\",\"EX-P600\" },",
          "7045:     { 10834368,3114,2319, 0, 0,27, 0, 0,0x94,0,1,\"Casio\",\"EX-Z750\" },",
          "7046:     { 10843712,3114,2321, 0, 0,25, 0, 0,0x94,0,1,\"Casio\",\"EX-Z75\" },",
          "7047:     { 10979200,3114,2350, 0, 0,32,32, 0,0x94,7,1,\"Casio\",\"EX-P700\" },",
          "7048:     { 12310144,3285,2498, 0, 0, 6,30, 0,0x94,0,1,\"Casio\",\"EX-Z850\" },",
          "7049:     { 12489984,3328,2502, 0, 0,47,35, 0,0x94,0,1,\"Casio\",\"EX-Z8\" },",
          "7050:     { 15499264,3754,2752, 0, 0,82, 0, 0,0x94,0,1,\"Casio\",\"EX-Z1050\" },",
          "7051:     { 18702336,4096,3044, 0, 0,24, 0,80,0x94,7,1,\"Casio\",\"EX-ZR100\" },",
          "7052:     {  7684000,2260,1700, 0, 0, 0, 0,13,0x94,0,1,\"Casio\",\"QV-4000\" },",
          "7053:     {   787456,1024, 769, 0, 1, 0, 0, 0,0x49,0,0,\"Creative\",\"PC-CAM 600\" },",
          "7054:     {  3840000,1600,1200, 0, 0, 0, 0,65,0x49,0,0,\"Foculus\",\"531C\" },",
          "7055:     {   307200, 640, 480, 0, 0, 0, 0, 0,0x94,0,0,\"Generic\",\"640x480\" },",
          "7056:     {    62464, 256, 244, 1, 1, 6, 1, 0,0x8d,0,0,\"Kodak\",\"DC20\" },",
          "7057:     {   124928, 512, 244, 1, 1,10, 1, 0,0x8d,0,0,\"Kodak\",\"DC20\" },",
          "7058:     {  1652736,1536,1076, 0,52, 0, 0, 0,0x61,0,0,\"Kodak\",\"DCS200\" },",
          "7059:     {  4159302,2338,1779, 1,33, 1, 2, 0,0x94,0,0,\"Kodak\",\"C330\" },",
          "7060:     {  4162462,2338,1779, 1,33, 1, 2, 0,0x94,0,0,\"Kodak\",\"C330\",3160 },",
          "7061:     {  6163328,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\" },",
          "7062:     {  6166488,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\",3160 },",
          "7063:     {   460800, 640, 480, 0, 0, 0, 0, 0,0x00,0,0,\"Kodak\",\"C603\" },",
          "7064:     {  9116448,2848,2134, 0, 0, 0, 0, 0,0x00,0,0,\"Kodak\",\"C603\" },",
          "7065:     {   614400, 640, 480, 0, 3, 0, 0,64,0x94,0,0,\"Kodak\",\"KAI-0340\" },",
          "7066:     {  3884928,1608,1207, 0, 0, 0, 0,96,0x16,0,0,\"Micron\",\"2010\",3212 },",
          "7067:     {  1138688,1534, 986, 0, 0, 0, 0, 0,0x61,0,0,\"Minolta\",\"RD175\",513 },",
          "7068:     {  1581060,1305, 969, 0, 0,18, 6, 6,0x1e,4,1,\"Nikon\",\"E900\" },",
          "7069:     {  2465792,1638,1204, 0, 0,22, 1, 6,0x4b,5,1,\"Nikon\",\"E950\" },",
          "7070:     {  2940928,1616,1213, 0, 0, 0, 7,30,0x94,0,1,\"Nikon\",\"E2100\" },",
          "7071:     {  4771840,2064,1541, 0, 0, 0, 1, 6,0xe1,0,1,\"Nikon\",\"E990\" },",
          "7072:     {  4775936,2064,1542, 0, 0, 0, 0,30,0x94,0,1,\"Nikon\",\"E3700\" },",
          "7073:     {  5865472,2288,1709, 0, 0, 0, 1, 6,0xb4,0,1,\"Nikon\",\"E4500\" },",
          "7074:     {  5869568,2288,1710, 0, 0, 0, 0, 6,0x16,0,1,\"Nikon\",\"E4300\" },",
          "7075:     {  7438336,2576,1925, 0, 0, 0, 1, 6,0xb4,0,1,\"Nikon\",\"E5000\" },",
          "7076:     {  8998912,2832,2118, 0, 0, 0, 0,30,0x94,7,1,\"Nikon\",\"COOLPIX S6\" },",
          "7077:     {  5939200,2304,1718, 0, 0, 0, 0,30,0x16,0,0,\"Olympus\",\"C770UZ\" },",
          "7078:     {  3178560,2064,1540, 0, 0, 0, 0, 0,0x94,0,1,\"Pentax\",\"Optio S\" },",
          "7079:     {  4841984,2090,1544, 0, 0,22, 0, 0,0x94,7,1,\"Pentax\",\"Optio S\" },",
          "7080:     {  6114240,2346,1737, 0, 0,22, 0, 0,0x94,7,1,\"Pentax\",\"Optio S4\" },",
          "7081:     { 10702848,3072,2322, 0, 0, 0,21,30,0x94,0,1,\"Pentax\",\"Optio 750Z\" },",
          "7082:     { 13248000,2208,3000, 0, 0, 0, 0,13,0x61,0,0,\"Pixelink\",\"A782\" },",
          "7083:     {  6291456,2048,1536, 0, 0, 0, 0,96,0x61,0,0,\"RoverShot\",\"3320AF\" },",
          "7084:     {   311696, 644, 484, 0, 0, 0, 0, 0,0x16,0,8,\"ST Micro\",\"STV680 VGA\" },",
          "7085:     { 16098048,3288,2448, 0, 0,24, 0, 9,0x94,0,1,\"Samsung\",\"S85\" },",
          "7086:     { 16215552,3312,2448, 0, 0,48, 0, 9,0x94,0,1,\"Samsung\",\"S85\" },",
          "7087:     { 20487168,3648,2808, 0, 0, 0, 0,13,0x94,5,1,\"Samsung\",\"WB550\" },",
          "7088:     { 24000000,4000,3000, 0, 0, 0, 0,13,0x94,5,1,\"Samsung\",\"WB550\" },",
          "7089:     { 12582980,3072,2048, 0, 0, 0, 0,33,0x61,0,0,\"Sinar\",\"3072x2048\",68 },",
          "7090:     { 33292868,4080,4080, 0, 0, 0, 0,33,0x61,0,0,\"Sinar\",\"4080x4080\",68 },",
          "7091:     { 44390468,4080,5440, 0, 0, 0, 0,33,0x61,0,0,\"Sinar\",\"4080x5440\",68 },",
          "7092:     {  1409024,1376,1024, 0, 0, 1, 0, 0,0x49,0,0,\"Sony\",\"XCD-SX910CR\" },",
          "7093:     {  2818048,1376,1024, 0, 0, 1, 0,97,0x49,0,0,\"Sony\",\"XCD-SX910CR\" },",
          "7094:   };",
          "7096:     { \"AgfaPhoto\", \"Canon\", \"Casio\", \"Epson\", \"Fujifilm\",",
          "7097:       \"Mamiya\", \"Minolta\", \"Motorola\", \"Kodak\", \"Konica\", \"Leica\",",
          "7098:       \"Nikon\", \"Nokia\", \"Olympus\", \"Pentax\", \"Phase One\", \"Ricoh\",",
          "7099:       \"Samsung\", \"Sigma\", \"Sinar\", \"Sony\" };",
          "7100:   char head[32], *cp;",
          "7101:   int hlen, flen, fsize, zero_fsize=1, i, c;",
          "7102:   struct jhead jh;",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "7404:   } else if (order == 0x4949 || order == 0x4d4d) {",
          "7405:     if (!memcmp (head+6,\"HEAPCCDR\",8)) {",
          "7406:       data_offset = hlen;",
          "7408:     } else if (parse_tiff(0)) apply_tiff();",
          "7409:   } else if (!memcmp (head,\"\\xff\\xd8\\xff\\xe1\",4) &&",
          "7410:       !memcmp (head+6,\"Exif\",4)) {",
          "",
          "[Removed Lines]",
          "7407:       parse_ciff (hlen, flen - hlen);",
          "",
          "[Added Lines]",
          "7146:       parse_ciff (hlen, flen-hlen, 0);",
          "7147:       load_raw = &CLASS canon_load_raw;",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "7487:     load_raw = &CLASS packed_load_raw;",
          "7488:     load_flags = 88;",
          "7489:     filters = 0x61616161;",
          "7490:   } else if (!memcmp (head+4,\"RED1\",4)) {",
          "7493:     parse_redcine();",
          "7494:     load_raw = &CLASS redcine_load_raw;",
          "7495:     gamma_curve (1/2.4, 12.92, 1, 4095);",
          "",
          "[Removed Lines]",
          "7491:     strcpy (make, \"RED\");",
          "7492:     strcpy (model,\"ONE\");",
          "",
          "[Added Lines]",
          "7230:   } else if (!memcmp (head,\"XPDS\",4)) {",
          "7231:     order = 0x4949;",
          "7232:     fseek (ifp, 0x800, SEEK_SET);",
          "7233:     fread (make, 1, 41, ifp);",
          "7234:     raw_height = get2();",
          "7235:     raw_width  = get2();",
          "7236:     fseek (ifp, 56, SEEK_CUR);",
          "7237:     fread (model, 1, 30, ifp);",
          "7238:     data_offset = 0x10000;",
          "7239:     load_raw = &CLASS canon_rmf_load_raw;",
          "7241:     strcpy (make, \"Red\");",
          "7242:     strcpy (model,\"One\");",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "7511:       if (fsize == table[i].fsize) {",
          "7512:  strcpy (make,  table[i].t_make );",
          "7513:  strcpy (model, table[i].t_model);",
          "7515:    parse_external_jpeg();",
          "7516:       }",
          "7517:   if (zero_fsize) fsize = 0;",
          "7518:   if (make[0] == 0) parse_smal (0, flen);",
          "7521:   for (i=0; i < sizeof corp / sizeof *corp; i++)",
          "7527:   (cp = strstr(model,\"FILE VERSION\"))))",
          "",
          "[Removed Lines]",
          "7514:  if (table[i].withjpeg)",
          "7519:   if (make[0] == 0) parse_jpeg (is_raw = 0);",
          "7523:  strcpy (make, corp[i]);",
          "7524:   if (!strncmp (make,\"KODAK\",5) &&",
          "7525:  ((cp = strstr(model,\" DIGITAL CAMERA\")) ||",
          "7526:   (cp = strstr(model,\" Digital Camera\")) ||",
          "",
          "[Added Lines]",
          "7264:  flip = table[i].flags >> 2;",
          "7265:  zero_is_bad = table[i].flags & 2;",
          "7266:  if (table[i].flags & 1)",
          "7268:  data_offset = table[i].offset;",
          "7269:  raw_width   = table[i].rw;",
          "7270:  raw_height  = table[i].rh;",
          "7271:  left_margin = table[i].lm;",
          "7272:   top_margin = table[i].tm;",
          "7273:  width  = raw_width - left_margin - table[i].rm;",
          "7274:  height = raw_height - top_margin - table[i].bm;",
          "7275:  filters = 0x1010101 * table[i].cf;",
          "7276:  colors = 4 - !((filters & filters >> 1) & 0x5555);",
          "7277:  load_flags = table[i].lf;",
          "7278:  switch (tiff_bps = (fsize-data_offset)*8 / (raw_width*raw_height)) {",
          "7279:    case 6:",
          "7280:      load_raw = &CLASS minolta_rd175_load_raw;  break;",
          "7281:    case  8:",
          "7282:      load_raw = &CLASS eight_bit_load_raw;  break;",
          "7283:    case 10: case 12:",
          "7284:      load_flags |= 128;",
          "7285:      load_raw = &CLASS packed_load_raw;     break;",
          "7286:    case 16:",
          "7287:      order = 0x4949 | 0x404 * (load_flags & 1);",
          "7288:      tiff_bps -= load_flags >> 4;",
          "7289:      tiff_bps -= load_flags = load_flags >> 1 & 7;",
          "7290:      load_raw = &CLASS unpacked_load_raw;",
          "7291:  }",
          "7292:  maximum = (1 << tiff_bps) - (1 << table[i].max);",
          "7296:   if (make[0] == 0) {",
          "7297:     parse_jpeg(0);",
          "7298:     fseek(ifp,0,SEEK_END);",
          "7299:     int sz = ftell(ifp);",
          "7300:     if (!strncmp(model,\"ov\",2) && sz>=6404096 && !fseek (ifp, -6404096, SEEK_END) &&",
          "7301:  fread (head, 1, 32, ifp) && !strcmp(head,\"BRCMn\")) {",
          "7302:       strcpy (make, \"OmniVision\");",
          "7303:       data_offset = ftell(ifp) + 0x8000-32;",
          "7304:       width = raw_width;",
          "7305:       raw_width = 2611;",
          "7306:       load_raw = &CLASS nokia_load_raw;",
          "7307:       filters = 0x16161616;",
          "7308:     } else is_raw = 0;",
          "7309:   }",
          "7313:      strcpy (make, corp[i]);",
          "7314:   if ((!strcmp(make,\"Kodak\") || !strcmp(make,\"Leica\")) &&",
          "7315:  ((cp = strcasestr(model,\" DIGITAL CAMERA\")) ||",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "7550:     {   width  = 4309; filters = 0x16161616; }",
          "7551:   if (width >= 4960 && !strncmp(model,\"K-5\",3))",
          "7552:     { left_margin = 10; width  = 4950; filters = 0x16161616; }",
          "7555:   if (width == 4736 && !strcmp(model,\"K-7\"))",
          "7556:     { height  = 3122;   width  = 4684; filters = 0x16161616; top_margin = 2; }",
          "7557:   if (width == 7424 && !strcmp(model,\"645D\"))",
          "",
          "[Removed Lines]",
          "7553:   if (width >= 4960 && !strncmp(model,\"K-5 II\",6))",
          "7554:     { left_margin = 10; width  = 4948; filters = 0x16161616; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "7563:     if (filters == UINT_MAX) filters = 0;",
          "7564:     if (filters) is_raw = tiff_samples;",
          "7565:     else  colors = tiff_samples;",
          "7570:     goto dng_skip;",
          "7571:   }",
          "7576:     if (!load_raw)",
          "7577:       load_raw = &CLASS packed_load_raw;",
          "7578:     if (model[0] == 'E')",
          "7579:       load_flags |= !data_offset << 2 | 2;",
          "7580:   }",
          "7588:   if (is_foveon) {",
          "7589:     if (height*2 < width) pixel_aspect = 0.5;",
          "7590:     if (height   > width) pixel_aspect = 2;",
          "7591:     filters = 0;",
          "7592:     simple_coeff(0);",
          "7594:     switch (width) {",
          "7595:       case 3344: width -= 66;",
          "7596:       case 3872: width -= 6;",
          "7597:     }",
          "7598:     if (height > width) SWAP(height,width);",
          "7599:     filters = 0;",
          "7600:     load_raw = &CLASS canon_sraw_load_raw;",
          "7601:   } else if (!strcmp(model,\"PowerShot 600\")) {",
          "7602:     height = 613;",
          "7603:     width  = 854;",
          "7604:     raw_width = 896;",
          "7606:     colors = 4;",
          "7607:     filters = 0xe1e4e1e4;",
          "7608:     load_raw = &CLASS canon_600_load_raw;",
          "",
          "[Removed Lines]",
          "7566:     if (tiff_compress == 1)",
          "7567:       load_raw = &CLASS packed_dng_load_raw;",
          "7568:     if (tiff_compress == 7)",
          "7569:       load_raw = &CLASS lossless_dng_load_raw;",
          "7572:   if ((is_canon = !strcmp(make,\"Canon\")))",
          "7573:     load_raw = memcmp (head+6,\"HEAPCCDR\",8) ?",
          "7574:  &CLASS lossless_jpeg_load_raw : &CLASS canon_load_raw;",
          "7575:   if (!strcmp(make,\"NIKON\")) {",
          "7581:   if (!strcmp(make,\"CASIO\")) {",
          "7582:     load_raw = &CLASS packed_load_raw;",
          "7583:     maximum = 0xf7f;",
          "7584:   }",
          "7593:   } else if (is_canon && tiff_bps == 15) {",
          "7605:     pixel_aspect = 607/628.0;",
          "",
          "[Added Lines]",
          "7353:     switch (tiff_compress) {",
          "7354:       case 1:     load_raw = &CLASS   packed_dng_load_raw;  break;",
          "7355:       case 7:     load_raw = &CLASS lossless_dng_load_raw;  break;",
          "7356:       case 34892: load_raw = &CLASS    lossy_dng_load_raw;  break;",
          "7357:       default:    load_raw = 0;",
          "7358:     }",
          "7361:   if (!strcmp(make,\"Canon\") && !fsize && tiff_bps != 15) {",
          "7362:     if (!load_raw)",
          "7363:       load_raw = &CLASS lossless_jpeg_load_raw;",
          "7364:     for (i=0; i < sizeof canon / sizeof *canon; i++)",
          "7365:       if (raw_width == canon[i][0] && raw_height == canon[i][1]) {",
          "7366:  width  = raw_width - (left_margin = canon[i][2]);",
          "7367:  height = raw_height - (top_margin = canon[i][3]);",
          "7368:  width  -= canon[i][4];",
          "7369:  height -= canon[i][5];",
          "7370:       }",
          "7371:     if ((unique_id | 0x20000) == 0x2720000) {",
          "7372:       left_margin = 8;",
          "7373:       top_margin = 16;",
          "7374:     }",
          "7375:   }",
          "7376:   for (i=0; i < sizeof unique / sizeof *unique; i++)",
          "7377:     if (unique_id == 0x80000000 + unique[i].id)",
          "7378:       adobe_coeff (\"Canon\", unique[i].t_model);",
          "7379:   if (!strcmp(make,\"Nikon\")) {",
          "7388:   if (!strcmp(model,\"KAI-0340\")",
          "7389:  && find_green (16, 16, 3840, 5120) < 25) {",
          "7390:     height = 480;",
          "7391:     top_margin = filters = 0;",
          "7392:     strcpy (model,\"C603\");",
          "7393:   }",
          "7399:   } else if (!strcmp(make,\"Canon\") && tiff_bps == 15) {",
          "7406:     tiff_samples = colors = 3;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "7612:     width  = 960;",
          "7613:     raw_width = 992;",
          "7614:     pixel_aspect = 256/235.0;",
          "7616:     filters = 0x1e4e1e4e;",
          "7617:     goto canon_a5;",
          "7618:   } else if (!strcmp(model,\"PowerShot A50\")) {",
          "7619:     height =  968;",
          "7620:     width  = 1290;",
          "7621:     raw_width = 1320;",
          "7623:     filters = 0x1b4e4b1e;",
          "7624:     goto canon_a5;",
          "7625:   } else if (!strcmp(model,\"PowerShot Pro70\")) {",
          "7626:     height = 1024;",
          "7627:     width  = 1552;",
          "7629:     filters = 0x1e4b4e1b;",
          "7719: canon_a5:",
          "7720:     tiff_bps = 10;",
          "7721:     load_raw = &CLASS packed_load_raw;",
          "7722:     load_flags = 40;",
          "7755:   } else if (!strcmp(model,\"PowerShot SX220 HS\")) {",
          "7760:     mask[0][0] = top_margin = 16;",
          "7761:     mask[0][2] = top_margin + height;",
          "7762:     mask[0][3] = left_margin = 92;",
          "7766:   } else if (!strcmp(model,\"PowerShot SX50 HS\")) {",
          "7886:     mask[0][0] = top_margin = 17;",
          "7887:     mask[0][2] = raw_height;",
          "7888:     mask[0][3] = 80;",
          "7889:     filters = 0x49494949;",
          "7912:     filters = 0x49494949;",
          "7976:   } else if (!strcmp(model,\"D1\")) {",
          "7977:     cam_mul[0] *= 256/527.0;",
          "7978:     cam_mul[2] *= 256/317.0;",
          "",
          "[Removed Lines]",
          "7615:     colors = 4;",
          "7622:     colors = 4;",
          "7628:     colors = 4;",
          "7630:     goto canon_a5;",
          "7631:   } else if (!strcmp(model,\"PowerShot SD300\")) {",
          "7632:     height = 1752;",
          "7633:     width  = 2344;",
          "7634:     raw_height = 1766;",
          "7635:     raw_width  = 2400;",
          "7636:     top_margin  = 12;",
          "7637:     left_margin = 12;",
          "7638:     goto canon_a5;",
          "7639:   } else if (!strcmp(model,\"PowerShot A460\")) {",
          "7640:     height = 1960;",
          "7641:     width  = 2616;",
          "7642:     raw_height = 1968;",
          "7643:     raw_width  = 2664;",
          "7644:     top_margin  = 4;",
          "7645:     left_margin = 4;",
          "7646:     goto canon_a5;",
          "7647:   } else if (!strcmp(model,\"PowerShot A530\")) {",
          "7648:     height = 1984;",
          "7649:     width  = 2620;",
          "7650:     raw_height = 1992;",
          "7651:     raw_width  = 2672;",
          "7652:     top_margin  = 6;",
          "7653:     left_margin = 10;",
          "7654:     goto canon_a5;",
          "7655:   } else if (!strcmp(model,\"PowerShot A610\")) {",
          "7656:     if (canon_s2is()) strcpy (model+10, \"S2 IS\");",
          "7657:     height = 1960;",
          "7658:     width  = 2616;",
          "7659:     raw_height = 1968;",
          "7660:     raw_width  = 2672;",
          "7661:     top_margin  = 8;",
          "7662:     left_margin = 12;",
          "7663:     goto canon_a5;",
          "7664:   } else if (!strcmp(model,\"PowerShot A620\")) {",
          "7665:     height = 2328;",
          "7666:     width  = 3112;",
          "7667:     raw_height = 2340;",
          "7668:     raw_width  = 3152;",
          "7669:     top_margin  = 12;",
          "7670:     left_margin = 36;",
          "7671:     goto canon_a5;",
          "7672:   } else if (!strcmp(model,\"PowerShot A470\")) {",
          "7673:     height = 2328;",
          "7674:     width  = 3096;",
          "7675:     raw_height = 2346;",
          "7676:     raw_width  = 3152;",
          "7677:     top_margin  = 6;",
          "7678:     left_margin = 12;",
          "7679:     goto canon_a5;",
          "7680:   } else if (!strcmp(model,\"PowerShot A720 IS\")) {",
          "7681:     height = 2472;",
          "7682:     width  = 3298;",
          "7683:     raw_height = 2480;",
          "7684:     raw_width  = 3336;",
          "7685:     top_margin  = 5;",
          "7686:     left_margin = 6;",
          "7687:     goto canon_a5;",
          "7688:   } else if (!strcmp(model,\"PowerShot A630\")) {",
          "7689:     height = 2472;",
          "7690:     width  = 3288;",
          "7691:     raw_height = 2484;",
          "7692:     raw_width  = 3344;",
          "7693:     top_margin  = 6;",
          "7694:     left_margin = 12;",
          "7695:     goto canon_a5;",
          "7696:   } else if (!strcmp(model,\"PowerShot A640\")) {",
          "7697:     height = 2760;",
          "7698:     width  = 3672;",
          "7699:     raw_height = 2772;",
          "7700:     raw_width  = 3736;",
          "7701:     top_margin  = 6;",
          "7702:     left_margin = 12;",
          "7703:     goto canon_a5;",
          "7704:   } else if (!strcmp(model,\"PowerShot A650\")) {",
          "7705:     height = 3024;",
          "7706:     width  = 4032;",
          "7707:     raw_height = 3048;",
          "7708:     raw_width  = 4104;",
          "7709:     top_margin  = 12;",
          "7710:     left_margin = 48;",
          "7711:     goto canon_a5;",
          "7712:   } else if (!strcmp(model,\"PowerShot S3 IS\")) {",
          "7713:     height = 2128;",
          "7714:     width  = 2840;",
          "7715:     raw_height = 2136;",
          "7716:     raw_width  = 2888;",
          "7717:     top_margin  = 8;",
          "7718:     left_margin = 44;",
          "7723:     if (raw_width > 1600) zero_is_bad = 1;",
          "7724:   } else if (!strcmp(model,\"PowerShot SX110 IS\")) {",
          "7725:     height = 2760;",
          "7726:     width  = 3684;",
          "7727:     raw_height = 2772;",
          "7728:     raw_width  = 3720;",
          "7729:     top_margin  = 12;",
          "7730:     left_margin = 6;",
          "7731:     load_raw = &CLASS packed_load_raw;",
          "7732:     load_flags = 40;",
          "7733:     zero_is_bad = 1;",
          "7734:   } else if (!strcmp(model,\"PowerShot SX120 IS\")) {",
          "7735:     height = 2742;",
          "7736:     width  = 3664;",
          "7737:     raw_height = 2778;",
          "7738:     raw_width  = 3728;",
          "7739:     top_margin  = 18;",
          "7740:     left_margin = 16;",
          "7741:     filters = 0x49494949;",
          "7742:     load_raw = &CLASS packed_load_raw;",
          "7743:     load_flags = 40;",
          "7744:     zero_is_bad = 1;",
          "7745:   } else if (!strcmp(model,\"PowerShot SX20 IS\")) {",
          "7746:     height = 3024;",
          "7747:     width  = 4032;",
          "7748:     raw_height = 3048;",
          "7749:     raw_width  = 4080;",
          "7750:     top_margin  = 12;",
          "7751:     left_margin = 24;",
          "7752:     load_raw = &CLASS packed_load_raw;",
          "7753:     load_flags = 40;",
          "7754:     zero_is_bad = 1;",
          "7756:     height = 3043;",
          "7757:     width  = 4072;",
          "7758:     raw_height = 3060;",
          "7759:     raw_width  = 4168;",
          "7763:     load_raw = &CLASS packed_load_raw;",
          "7764:     load_flags = 8;",
          "7765:     zero_is_bad = 1;",
          "7767:     top_margin=16;",
          "7768:     left_margin=94;",
          "7769:     height = 3043;",
          "7770:     width  = 4072;",
          "7771:   } else if (!strcmp(model,\"PowerShot SX30 IS\")) {",
          "7772:     height = 3254;",
          "7773:     width  = 4366;",
          "7774:     raw_height = 3276;",
          "7775:     raw_width  = 4464;",
          "7776:     top_margin  = 10;",
          "7777:     left_margin = 25;",
          "7778:     filters = 0x16161616;",
          "7779:     load_raw = &CLASS packed_load_raw;",
          "7780:     load_flags = 40;",
          "7781:     zero_is_bad = 1;",
          "7782:   } else if (!strcmp(model,\"PowerShot Pro90 IS\")) {",
          "7783:     width  = 1896;",
          "7784:     colors = 4;",
          "7785:     filters = 0xb4b4b4b4;",
          "7786:   } else if (is_canon && raw_width == 2144) {",
          "7787:     height = 1550;",
          "7788:     width  = 2088;",
          "7789:     top_margin  = 8;",
          "7790:     left_margin = 4;",
          "7791:     if (!strcmp(model,\"PowerShot G1\")) {",
          "7792:       colors = 4;",
          "7793:       filters = 0xb4b4b4b4;",
          "7794:     }",
          "7795:   } else if (is_canon && raw_width == 2224) {",
          "7796:     height = 1448;",
          "7797:     width  = 2176;",
          "7798:     top_margin  = 6;",
          "7799:     left_margin = 48;",
          "7800:   } else if (is_canon && raw_width == 2376) {",
          "7801:     height = 1720;",
          "7802:     width  = 2312;",
          "7803:     top_margin  = 6;",
          "7804:     left_margin = 12;",
          "7805:   } else if (is_canon && raw_width == 2672) {",
          "7806:     height = 1960;",
          "7807:     width  = 2616;",
          "7808:     top_margin  = 6;",
          "7809:     left_margin = 12;",
          "7810:   } else if (is_canon && raw_width == 3152) {",
          "7811:     height = 2056;",
          "7812:     width  = 3088;",
          "7813:     top_margin  = 12;",
          "7814:     left_margin = 64;",
          "7815:     if (unique_id == 0x80000170)",
          "7816:       adobe_coeff (\"Canon\",\"EOS 300D\");",
          "7817:   } else if (is_canon && raw_width == 3160) {",
          "7818:     height = 2328;",
          "7819:     width  = 3112;",
          "7820:     top_margin  = 12;",
          "7821:     left_margin = 44;",
          "7822:   } else if (is_canon && raw_width == 3344) {",
          "7823:     height = 2472;",
          "7824:     width  = 3288;",
          "7825:     top_margin  = 6;",
          "7826:     left_margin = 4;",
          "7827:   } else if (!strcmp(model,\"EOS D2000C\")) {",
          "7828:     filters = 0x61616161;",
          "7829:     black = curve[200];",
          "7830:   } else if (is_canon && raw_width == 3516) {",
          "7831:     top_margin  = 14;",
          "7832:     left_margin = 42;",
          "7833:     if (unique_id == 0x80000189)",
          "7834:       adobe_coeff (\"Canon\",\"EOS 350D\");",
          "7835:     goto canon_cr2;",
          "7836:   } else if (is_canon && raw_width == 3596) {",
          "7837:     top_margin  = 12;",
          "7838:     left_margin = 74;",
          "7839:     goto canon_cr2;",
          "7840:   } else if (is_canon && raw_width == 3744) {",
          "7841:     height = 2760;",
          "7842:     width  = 3684;",
          "7843:     top_margin  = 16;",
          "7844:     left_margin = 8;",
          "7845:     if (unique_id > 0x2720000) {",
          "7846:       top_margin  = 12;",
          "7847:       left_margin = 52;",
          "7848:     }",
          "7849:   } else if (is_canon && raw_width == 3944) {",
          "7850:     height = 2602;",
          "7851:     width  = 3908;",
          "7852:     top_margin  = 18;",
          "7853:     left_margin = 30;",
          "7854:   } else if (is_canon && raw_width == 3948) {",
          "7855:     top_margin  = 18;",
          "7856:     left_margin = 42;",
          "7857:     height -= 2;",
          "7858:     if (unique_id == 0x80000236)",
          "7859:       adobe_coeff (\"Canon\",\"EOS 400D\");",
          "7860:     if (unique_id == 0x80000254)",
          "7861:       adobe_coeff (\"Canon\",\"EOS 1000D\");",
          "7862:     goto canon_cr2;",
          "7863:   } else if (is_canon && raw_width == 3984) {",
          "7864:     top_margin  = 20;",
          "7865:     left_margin = 76;",
          "7866:     height -= 2;",
          "7867:     goto canon_cr2;",
          "7868:   } else if (is_canon && raw_width == 4104) {",
          "7869:     height = 3024;",
          "7870:     width  = 4032;",
          "7871:     top_margin  = 12;",
          "7872:     left_margin = 48;",
          "7873:   } else if (is_canon && raw_width == 4152) {",
          "7874:     top_margin  = 12;",
          "7875:     left_margin = 192;",
          "7876:     goto canon_cr2;",
          "7877:   } else if (is_canon && raw_width == 4160) {",
          "7878:     height = 3048;",
          "7879:     width  = 4048;",
          "7880:     top_margin  = 11;",
          "7881:     left_margin = 104;",
          "7882:   } else if (is_canon && raw_width == 4176) {",
          "7883:     height = 3045;",
          "7884:     width  = 4072;",
          "7885:     left_margin = 96;",
          "7890:   } else if (is_canon && raw_width == 4312) {",
          "7891:     top_margin  = 18;",
          "7892:     left_margin = 22;",
          "7893:     height -= 2;",
          "7894:     if (unique_id == 0x80000176)",
          "7895:       adobe_coeff (\"Canon\",\"EOS 450D\");",
          "7896:     goto canon_cr2;",
          "7897:   } else if (is_canon && raw_width == 4352) {",
          "7898:     top_margin  = 18;",
          "7899:     left_margin = 62;",
          "7900:     if (unique_id == 0x80000288)",
          "7901:       adobe_coeff (\"Canon\",\"EOS 1100D\");",
          "7902:     goto canon_cr2;",
          "7903:   } else if (is_canon && raw_width == 4476) {",
          "7904:     top_margin  = 34;",
          "7905:     left_margin = 90;",
          "7906:     goto canon_cr2;",
          "7907:   } else if (is_canon && raw_width == 4480) {",
          "7908:     height = 3326;",
          "7909:     width  = 4432;",
          "7910:     top_margin  = 10;",
          "7911:     left_margin = 12;",
          "7913:   } else if (is_canon && raw_width == 4496) {",
          "7914:     height = 3316;",
          "7915:     width  = 4404;",
          "7916:     top_margin  = 50;",
          "7917:     left_margin = 80;",
          "7918:   } else if (is_canon && raw_width == 4832) {",
          "7919:     top_margin = unique_id == 0x80000261 ? 51:26;",
          "7920:     left_margin = 62;",
          "7921:     if (unique_id == 0x80000252)",
          "7922:       adobe_coeff (\"Canon\",\"EOS 500D\");",
          "7923:     goto canon_cr2;",
          "7924:   } else if (is_canon && raw_width == 5108) {",
          "7925:     top_margin  = 13;",
          "7926:     left_margin = 98;",
          "7927:     goto canon_cr2;",
          "7928:   } else if (is_canon && raw_width == 5120) {",
          "7929:     height -= top_margin = 45;",
          "7930:     left_margin = 142;",
          "7931:     width = 4916;",
          "7932:   } else if (is_canon && raw_width == 5280) {",
          "7933:     top_margin  = 52;",
          "7934:     left_margin = 72;",
          "7935:     if (unique_id == 0x80000301)",
          "7936:       adobe_coeff (\"Canon\",\"EOS 650D\");",
          "7937:     goto canon_cr2;",
          "7938:   } else if (is_canon && raw_width == 5344) {",
          "7939:     top_margin = 51;",
          "7940:     left_margin = 142;",
          "7941:     if (unique_id == 0x80000269) {",
          "7942:       top_margin = 100;",
          "7943:       left_margin = 126;",
          "7944:       height -= 2;",
          "7945:       adobe_coeff (\"Canon\",\"EOS-1D X\");",
          "7946:     }",
          "7947:     if (unique_id == 0x80000270)",
          "7948:       adobe_coeff (\"Canon\",\"EOS 550D\");",
          "7949:     if (unique_id == 0x80000286)",
          "7950:       adobe_coeff (\"Canon\",\"EOS 600D\");",
          "7951:     goto canon_cr2;",
          "7952:   } else if (is_canon && raw_width == 5360) {",
          "7953:     top_margin = 51;",
          "7954:     left_margin = 158;",
          "7955:     goto canon_cr2;",
          "7956:   } else if (is_canon && raw_width == 5568) {",
          "7957:     top_margin = 38;",
          "7958:     left_margin = 72;",
          "7959:     goto canon_cr2;",
          "7960:   } else if (is_canon && raw_width == 5712) {",
          "7961:     height = 3752;",
          "7962:     width  = 5640;",
          "7963:     top_margin  = 20;",
          "7964:     left_margin = 62;",
          "7965:   } else if (is_canon && raw_width == 5792) {",
          "7966:     top_margin  = 51;",
          "7967:     left_margin = 158;",
          "7968: canon_cr2:",
          "7969:     height -= top_margin;",
          "7970:     width  -= left_margin;",
          "7971:   } else if (is_canon && raw_width == 5920) {",
          "7972:     height = 3870;",
          "7973:     width  = 5796;",
          "7974:     top_margin  = 80;",
          "7975:     left_margin = 122;",
          "",
          "[Added Lines]",
          "7434:     colors = 4;",
          "7438:   } else if (!strcmp(model,\"PowerShot Pro90 IS\") ||",
          "7439:       !strcmp(model,\"PowerShot G1\")) {",
          "7440:     colors = 4;",
          "7441:     filters = 0xb4b4b4b4;",
          "7442:   } else if (!strcmp(model,\"PowerShot A610\")) {",
          "7443:     if (canon_s2is()) strcpy (model+10, \"S2 IS\");",
          "7453:   } else if (!strcmp(model,\"PowerShot G10\")) {",
          "7455:   } else if (!strcmp(model,\"EOS D2000C\")) {",
          "7456:     filters = 0x61616161;",
          "7457:     black = curve[200];",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "7997:       !strcmp(model,\"D90\")) {",
          "7998:     width -= 42;",
          "7999:   } else if (!strcmp(model,\"D5100\") ||",
          "8001:     width -= 44;",
          "8002:   } else if (!strcmp(model,\"D3200\") ||",
          "8004:       !strcmp(model,\"D600\")  ||",
          "8006:     width -= 46;",
          "8007:   } else if (!strcmp(model,\"D4\")) {",
          "8008:     width -= 52;",
          "8009:     left_margin = 2;",
          "8012:   } else if (!strncmp(model,\"D40\",3) ||",
          "8013:       !strncmp(model,\"D50\",3) ||",
          "8014:       !strncmp(model,\"D70\",3)) {",
          "",
          "[Removed Lines]",
          "8000:       !strcmp(model,\"D7000\")) {",
          "8003:       !strcmp(model,\"D800E\") ||",
          "8005:       !strcmp(model,\"D800\")) {",
          "8010:   } else if (!strcmp(model,\"D600\")) {",
          "8011:     width -= 48;",
          "",
          "[Added Lines]",
          "7482:       !strcmp(model,\"D7000\") ||",
          "7483:       !strcmp(model,\"COOLPIX A\")) {",
          "7487:      !strncmp(model,\"D800\",4)) {",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "8028:     else width -= 8;",
          "8029:   } else if (!strncmp(model,\"D300\",4)) {",
          "8030:     width -= 32;",
          "8033:   } else if (!strncmp(model,\"COOLPIX P\",9)) {",
          "8034:     load_flags = 24;",
          "8035:     filters = 0x94949494;",
          "8036:     if (model[9] == '7' && iso_speed >= 400)",
          "8037:       black = 255;",
          "8040:   } else if (!strncmp(model,\"1 \",2)) {",
          "8041:     height -= 2;",
          "8042:   } else if (fsize == 1581060) {",
          "8049:     simple_coeff(3);",
          "8050:     pre_mul[0] = 1.2085;",
          "8051:     pre_mul[1] = 1.0943;",
          "8052:     pre_mul[3] = 1.1103;",
          "8065:   } else if (fsize == 4771840) {",
          "8072:     if (!timestamp && nikon_e995())",
          "8073:       strcpy (model, \"E995\");",
          "8074:     if (strcmp(model,\"E995\")) {",
          "",
          "[Removed Lines]",
          "8031:   } else if (!strcmp(make,\"NIKON\") && raw_width == 4032) {",
          "8032:     adobe_coeff (\"NIKON\",\"COOLPIX P7700\");",
          "8038:   } else if (!strncmp(model,\"COOLPIX A\",9) && raw_width == 4992) {",
          "8039:    width = 4948;",
          "8043:     height = 963;",
          "8044:     width = 1287;",
          "8045:     raw_width = 1632;",
          "8046:     maximum = 0x3f4;",
          "8047:     colors = 4;",
          "8048:     filters = 0x1e1e1e1e;",
          "8053:     goto e900;",
          "8054:   } else if (fsize == 2465792) {",
          "8055:     height = 1203;",
          "8056:     width  = 1616;",
          "8057:     raw_width = 2048;",
          "8058:     colors = 4;",
          "8059:     filters = 0x4b4b4b4b;",
          "8060:     adobe_coeff (\"NIKON\",\"E950\");",
          "8061: e900:",
          "8062:     tiff_bps = 10;",
          "8063:     load_raw = &CLASS packed_load_raw;",
          "8064:     load_flags = 6;",
          "8066:     height = 1540;",
          "8067:     width  = 2064;",
          "8068:     colors = 4;",
          "8069:     filters = 0xe1e1e1e1;",
          "8070:     load_raw = &CLASS packed_load_raw;",
          "8071:     load_flags = 6;",
          "",
          "[Added Lines]",
          "7511:   } else if (!strcmp(make,\"Nikon\") && raw_width == 4032) {",
          "7512:     adobe_coeff (\"Nikon\",\"COOLPIX P7700\");",
          "7525:   } else if (fsize == 3178560) {",
          "7526:     cam_mul[0] *= 4;",
          "7527:     cam_mul[2] *= 4;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "8078:       pre_mul[1] = 1.246;",
          "8079:       pre_mul[2] = 1.018;",
          "8080:     }",
          "8093:   } else if (fsize == 4775936) {",
          "8098:     if (!timestamp) nikon_3700();",
          "8099:     if (model[0] == 'E' && atoi(model+1) < 3700)",
          "8100:       filters = 0x49494949;",
          "",
          "[Removed Lines]",
          "8081:   } else if (!strcmp(model,\"E2100\")) {",
          "8082:     if (!timestamp && !nikon_e2100()) goto cp_e2500;",
          "8083:     height = 1206;",
          "8084:     width  = 1616;",
          "8085:     load_flags = 30;",
          "8086:   } else if (!strcmp(model,\"E2500\")) {",
          "8087: cp_e2500:",
          "8088:     strcpy (model, \"E2500\");",
          "8089:     height = 1204;",
          "8090:     width  = 1616;",
          "8091:     colors = 4;",
          "8092:     filters = 0x4b4b4b4b;",
          "8094:     height = 1542;",
          "8095:     width  = 2064;",
          "8096:     load_raw = &CLASS packed_load_raw;",
          "8097:     load_flags = 30;",
          "",
          "[Added Lines]",
          "7538:   } else if (fsize == 2940928) {",
          "7539:     if (!timestamp && !nikon_e2100())",
          "7540:       strcpy (model,\"E2500\");",
          "7541:     if (!strcmp(model,\"E2500\")) {",
          "7542:       height -= 2;",
          "7543:       load_flags = 6;",
          "7544:       colors = 4;",
          "7545:       filters = 0x4b4b4b4b;",
          "7546:     }",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "8112:       if (i < 0) filters = 0x61616161;",
          "8113:     }",
          "8114:   } else if (fsize == 5869568) {",
          "8118:     if (!timestamp && minolta_z2()) {",
          "8119:       strcpy (make, \"Minolta\");",
          "8120:       strcpy (model,\"DiMAGE Z2\");",
          "8121:     }",
          "8123:     load_flags = 6 + 24*(make[0] == 'M');",
          "8141:     if (!strcmp(model+7,\"S2Pro\")) {",
          "8142:       strcpy (model,\"S2Pro\");",
          "8143:       height = 2144;",
          "",
          "[Removed Lines]",
          "8115:     height = 1710;",
          "8116:     width  = 2288;",
          "8117:     filters = 0x16161616;",
          "8122:     load_raw = &CLASS packed_load_raw;",
          "8124:   } else if (!strcmp(model,\"E4500\")) {",
          "8125:     height = 1708;",
          "8126:     width  = 2288;",
          "8127:     colors = 4;",
          "8128:     filters = 0xb4b4b4b4;",
          "8129:   } else if (fsize == 7438336) {",
          "8130:     height = 1924;",
          "8131:     width  = 2576;",
          "8132:     colors = 4;",
          "8133:     filters = 0xb4b4b4b4;",
          "8134:   } else if (fsize == 8998912) {",
          "8135:     height = 2118;",
          "8136:     width  = 2832;",
          "8137:     maximum = 0xf83;",
          "8138:     load_raw = &CLASS packed_load_raw;",
          "8139:     load_flags = 30;",
          "8140:   } else if (!strcmp(make,\"FUJIFILM\")) {",
          "",
          "[Added Lines]",
          "7570:   } else if (fsize == 6291456) {",
          "7571:     fseek (ifp, 0x300000, SEEK_SET);",
          "7572:     if ((order = guess_byte_order(0x10000)) == 0x4d4d) {",
          "7573:       height -= (top_margin = 16);",
          "7574:       width -= (left_margin = 28);",
          "7575:       maximum = 0xf5c0;",
          "7576:       strcpy (make, \"ISG\");",
          "7577:       model[0] = 0;",
          "7578:     }",
          "7579:   } else if (!strcmp(make,\"Fujifilm\")) {",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "8147:       maximum = (is_raw == 2 && shot_select) ? 0x2f00 : 0x3e00;",
          "8148:     top_margin = (raw_height - height) >> 2 << 1;",
          "8149:     left_margin = (raw_width - width ) >> 2 << 1;",
          "8156:       left_margin = 0;",
          "8158:     }",
          "8186:     if (fuji_layout) raw_width *= is_raw;",
          "8193:   } else if (!strcmp(model,\"KD-400Z\")) {",
          "8194:     height = 1712;",
          "8195:     width  = 2312;",
          "",
          "[Removed Lines]",
          "8150:     if (width == 2848) filters = 0x16161616;",
          "8151:     if (width == 3328) {",
          "8152:       width = 3262;",
          "8153:       left_margin = 34;",
          "8154:     }",
          "8155:     if (width == 4952) {",
          "8157:       filters = 2;",
          "8159:  if(!strcmp(model,\"HS50EXR\"))",
          "8160:  {",
          "8161:   filters = 0x1e1e1e1e;",
          "8162:   width=3230;",
          "8163:  }",
          "8164:  if(!strcmp(model,\"X20\"))",
          "8165:  {",
          "8166:   left_margin = 2;",
          "8167:   top_margin=2;",
          "8168:   width = 4030;",
          "8169:   height = 3010;",
          "8170:   raw_height = 3012;",
          "8171:   filters = 2;",
          "8172:  }",
          "8173:  if(!strcmp(model,\"X100S\"))",
          "8174:  {",
          "8175:   left_margin = 2;",
          "8176:   top_margin = 1;",
          "8177:   width = 4934;",
          "8178:   height = 3290;",
          "8179:   raw_height = 3295;",
          "8180:   filters = 2;",
          "8181:   data_offset +=8;",
          "8182:   load_raw = &CLASS unpacked_load_raw;",
          "8183:   load_flags = 0;",
          "8184:   maximum = 16383;",
          "8185:  }",
          "8187:   } else if (!strcmp(model,\"RD175\")) {",
          "8188:     height = 986;",
          "8189:     width = 1534;",
          "8190:     data_offset = 513;",
          "8191:     filters = 0x61616161;",
          "8192:     load_raw = &CLASS minolta_rd175_load_raw;",
          "",
          "[Added Lines]",
          "7589:     if (width == 2848 || width == 3664) filters = 0x16161616;",
          "7590:     if (width == 4032 || width == 4952) left_margin = 0;",
          "7591:     if (width == 3328 && (width -= 66)) left_margin = 34;",
          "7592:     if (width == 4936) left_margin = 4;",
          "7593:     if (!strcmp(model,\"HS50EXR\")) {",
          "7594:       width += 2;",
          "7596:       filters = 0x16161616;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "8197:     goto konica_400z;",
          "8198:   } else if (!strcmp(model,\"KD-510Z\")) {",
          "8199:     goto konica_510z;",
          "8203:     if (!strncmp(model,\"DiMAGE A\",8)) {",
          "8204:       if (!strcmp(model,\"DiMAGE A200\"))",
          "8205:  filters = 0x49494949;",
          "",
          "[Removed Lines]",
          "8200:   } else if (!strcasecmp(make,\"MINOLTA\")) {",
          "8201:     load_raw = &CLASS unpacked_load_raw;",
          "8202:     maximum = 0xfff;",
          "",
          "[Added Lines]",
          "7606:   } else if (!strcasecmp(make,\"Minolta\")) {",
          "7607:     if (!load_raw && (maximum = 0xfff))",
          "7608:       load_raw = &CLASS unpacked_load_raw;",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "8236:     data_error = -1;",
          "8237:   } else if (!strcmp(model,\"*ist DS\")) {",
          "8238:     height -= 2;",
          "8278:     height -= top_margin = 8;",
          "8279:     width -= 2 * (left_margin = 8);",
          "8280:     load_flags = 32;",
          "8282:     order = 0x4949;",
          "8283:     height = 3694;",
          "8284:     top_margin = 2;",
          "8285:     width  = 5574 - (left_margin = 32 + tiff_bps);",
          "8286:     if (tiff_bps == 12) load_flags = 80;",
          "8289:   } else if (!strcmp(model,\"EX1\")) {",
          "8290:     order = 0x4949;",
          "8291:     height -= 20;",
          "",
          "[Removed Lines]",
          "8239:   } else if (!strcmp(model,\"Optio S\")) {",
          "8240:     if (fsize == 3178560) {",
          "8241:       height = 1540;",
          "8242:       width  = 2064;",
          "8243:       load_raw = &CLASS eight_bit_load_raw;",
          "8244:       cam_mul[0] *= 4;",
          "8245:       cam_mul[2] *= 4;",
          "8246:     } else {",
          "8247:       height = 1544;",
          "8248:       width  = 2068;",
          "8249:       raw_width = 3136;",
          "8250:       load_raw = &CLASS packed_load_raw;",
          "8251:       maximum = 0xf7c;",
          "8252:     }",
          "8253:   } else if (fsize == 6114240) {",
          "8254:     height = 1737;",
          "8255:     width  = 2324;",
          "8256:     raw_width = 3520;",
          "8257:     load_raw = &CLASS packed_load_raw;",
          "8258:     maximum = 0xf7a;",
          "8259:   } else if (!strcmp(model,\"Optio 750Z\")) {",
          "8260:     height = 2302;",
          "8261:     width  = 3072;",
          "8262:     load_raw = &CLASS packed_load_raw;",
          "8263:     load_flags = 30;",
          "8264:   } else if (!strcmp(model,\"DC-833m\")) {",
          "8265:     height = 2448;",
          "8266:     width  = 3264;",
          "8267:     order = 0x4949;",
          "8268:     filters = 0x61616161;",
          "8269:     load_raw = &CLASS unpacked_load_raw;",
          "8270:     maximum = 0xfc00;",
          "8271:   } else if (!strncmp(model,\"S85\",3)) {",
          "8272:     height = 2448;",
          "8273:     width  = 3264;",
          "8274:     raw_width = fsize/height/2;",
          "8275:     order = 0x4d4d;",
          "8276:     load_raw = &CLASS unpacked_load_raw;",
          "8277:   } else if (!strcmp(make,\"SAMSUNG\") && raw_width == 4704) {",
          "8281:   } else if (!strcmp(make,\"SAMSUNG\") && raw_width == 5632) {",
          "8287:   } else if (!strcmp(make,\"SAMSUNG\") && !strcmp(model,\"NX300\")) {",
          "8288:    is_raw =0;",
          "",
          "[Added Lines]",
          "7645:   } else if (!strcmp(make,\"Samsung\") && raw_width == 4704) {",
          "7649:   } else if (!strcmp(make,\"Samsung\") && raw_height == 3714) {",
          "7650:     height -= 18;",
          "7651:     width = 5536;",
          "7652:     filters = 0x49494949;",
          "7653:   } else if (!strcmp(make,\"Samsung\") && raw_width == 5632) {",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "8304:       width  -= 56;",
          "8305:       top_margin = 8;",
          "8306:     }",
          "8315:     strcpy (model, \"WB550\");",
          "8320:   } else if (!strcmp(model,\"EX2F\")) {",
          "8321:     height = 3045;",
          "8322:     width  = 4070;",
          "",
          "[Removed Lines]",
          "8307:   } else if (fsize == 20487168) {",
          "8308:     height = 2808;",
          "8309:     width  = 3648;",
          "8310:     goto wb550;",
          "8311:   } else if (fsize == 24000000) {",
          "8312:     height = 3000;",
          "8313:     width  = 4000;",
          "8314: wb550:",
          "8316:     order = 0x4d4d;",
          "8317:     load_raw = &CLASS unpacked_load_raw;",
          "8318:     load_flags = 6;",
          "8319:     maximum = 0x3df;",
          "",
          "[Added Lines]",
          "7677:   } else if (strstr(model,\"WB550\")) {",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "8325:     filters = 0x49494949;",
          "8326:     load_raw = &CLASS unpacked_load_raw;",
          "8327:   } else if (!strcmp(model,\"STV680 VGA\")) {",
          "8333:     black = 16;",
          "8435:     height = raw_height - (top_margin = 2);",
          "8441:   } else if (!strcmp(model,\"640x480\")) {",
          "8445:     gamma_curve (0.45, 4.5, 1, 255);",
          "8507:   } else if (!strcmp(make,\"Hasselblad\")) {",
          "8508:     if (load_raw == &CLASS lossless_jpeg_load_raw)",
          "8509:       load_raw = &CLASS hasselblad_load_raw;",
          "",
          "[Removed Lines]",
          "8328:     height = 484;",
          "8329:     width  = 644;",
          "8330:     load_raw = &CLASS eight_bit_load_raw;",
          "8331:     flip = 2;",
          "8332:     filters = 0x16161616;",
          "8334:   }  else",
          "8337:   if (!model[0])",
          "8338:     sprintf (model, \"%dx%d\", width, height);",
          "8339:   if (filters == UINT_MAX) filters = 0x94949494;",
          "8340:   if (raw_color) adobe_coeff (make, model);",
          "8341:   if (load_raw == &CLASS kodak_radc_load_raw)",
          "8342:     if (raw_color) adobe_coeff (\"Apple\",\"Quicktake\");",
          "8343:   if (thumb_offset && !thumb_height) {",
          "8344:     fseek (ifp, thumb_offset, SEEK_SET);",
          "8345:     if (ljpeg_start (&jh, 1)) {",
          "8346:       thumb_width  = jh.wide;",
          "8347:       thumb_height = jh.high;",
          "8348:     }",
          "8349:   }",
          "8350: dng_skip:",
          "8351:   if (fuji_width) {",
          "8352:     fuji_width = width >> !fuji_layout;",
          "8353:     if (~fuji_width & 1) filters = 0x49494949;",
          "8354:     width = (height >> fuji_layout) + fuji_width;",
          "8355:     height = width - 1;",
          "8356:     pixel_aspect = 1;",
          "8357:   } else {",
          "8358:     if (raw_height < height) raw_height = height;",
          "8359:     if (raw_width  < width ) raw_width  = width;",
          "8360:   }",
          "8361:   if (!tiff_bps) tiff_bps = 12;",
          "8362:   if (!maximum) maximum = (1 << tiff_bps) - 1;",
          "8363:   if (!load_raw || height < 22) is_raw = 0;",
          "8364: #ifdef NO_JASPER",
          "8365:   if (load_raw == &CLASS redcine_load_raw) {",
          "8366: #ifdef DCRAW_VERBOSE",
          "8367:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "8368:  ifname, \"libjasper\");",
          "8369: #endif",
          "8370:     is_raw = 0;",
          "8371: #ifdef LIBRAW_LIBRARY_BUILD",
          "8372:     imgdata.process_warnings |= LIBRAW_WARN_NO_JASPER;",
          "8373: #endif",
          "8374:   }",
          "8375: #endif",
          "8376: #ifdef NO_JPEG",
          "8377:   if (load_raw == &CLASS kodak_jpeg_load_raw ||",
          "8378:       load_raw == &CLASS lossy_dng_load_raw) {",
          "8379: #ifdef DCRAW_VERBOSE",
          "8380:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "8381:  ifname, \"libjpeg\");",
          "8382: #endif",
          "8383:     is_raw = 0;",
          "8384: #ifdef LIBRAW_LIBRARY_BUILD",
          "8385:     imgdata.process_warnings |= LIBRAW_WARN_NO_JPEGLIB;",
          "8386: #endif",
          "8387:   }",
          "8388: #endif",
          "8389:   if (!cdesc[0])",
          "8390:     strcpy (cdesc, colors == 3 ? \"RGBG\":\"GMCY\");",
          "8391:   if (!raw_height) raw_height = height;",
          "8392:   if (!raw_width ) raw_width  = width;",
          "8393:   if (filters && colors == 3)",
          "8394:     filters |= ((filters >> 2 & 0x22222222) |",
          "8395:   (filters << 2 & 0x88888888)) & filters << 1;",
          "8396: notraw:",
          "8397:   if (flip == -1) flip = tiff_flip;",
          "8398:   if (flip == -1) flip = 0;",
          "8399: #ifdef LIBRAW_LIBRARY_BUILD",
          "8400:   RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY,1,2);",
          "8401: #endif",
          "8402: }",
          "8404: void CLASS identify2(unsigned fsize, unsigned flen, char *head)",
          "8405: {",
          "8406:   short pana[][6] = {",
          "8407:     { 3130, 1743,  4,  0, -6,  0 },",
          "8408:     { 3130, 2055,  4,  0, -6,  0 },",
          "8409:     { 3130, 2319,  4,  0, -6,  0 },",
          "8410:     { 3170, 2103, 18,  0,-42, 20 },",
          "8411:     { 3170, 2367, 18, 13,-42,-21 },",
          "8412:     { 3177, 2367,  0,  0, -1,  0 },",
          "8413:     { 3304, 2458,  0,  0, -1,  0 },",
          "8414:     { 3330, 2463,  9,  0, -5,  0 },",
          "8415:     { 3330, 2479,  9,  0,-17,  4 },",
          "8416:     { 3370, 1899, 15,  0,-44, 20 },",
          "8417:     { 3370, 2235, 15,  0,-44, 20 },",
          "8418:     { 3370, 2511, 15, 10,-44,-21 },",
          "8419:     { 3690, 2751,  3,  0, -8, -3 },",
          "8420:     { 3710, 2751,  0,  0, -3,  0 },",
          "8421:     { 3724, 2450,  0,  0,  0, -2 },",
          "8422:     { 3770, 2487, 17,  0,-44, 19 },",
          "8423:     { 3770, 2799, 17, 15,-44,-19 },",
          "8424:     { 3880, 2170,  6,  0, -6,  0 },",
          "8425:     { 4060, 3018,  0,  0,  0, -2 },",
          "8426:     { 4290, 2391,  3,  0, -8, -1 },",
          "8427:     { 4330, 2439, 17, 15,-44,-19 },",
          "8428:     { 4508, 2962,  0,  0, -3, -4 },",
          "8429:     { 4508, 3330,  0,  0, -3, -6 } };",
          "8432:   struct jhead jh;",
          "8433:   int i;",
          "8434:  if (!strcmp(model,\"N95\")) {",
          "8436:   } else if (!strcmp(model,\"531C\")) {",
          "8437:     height = 1200;",
          "8438:     width  = 1600;",
          "8439:     load_raw = &CLASS unpacked_load_raw;",
          "8440:     filters = 0x49494949;",
          "8442:     height = 480;",
          "8443:     width  = 640;",
          "8444:     load_raw = &CLASS eight_bit_load_raw;",
          "8446:   } else if (!strcmp(model,\"F-080C\")) {",
          "8447:     height = 768;",
          "8448:     width  = 1024;",
          "8449:     load_raw = &CLASS eight_bit_load_raw;",
          "8450:   } else if (!strcmp(model,\"F-145C\")) {",
          "8451:     height = 1040;",
          "8452:     width  = 1392;",
          "8453:     load_raw = &CLASS eight_bit_load_raw;",
          "8454:   } else if (!strcmp(model,\"F-201C\")) {",
          "8455:     height = 1200;",
          "8456:     width  = 1600;",
          "8457:     load_raw = &CLASS eight_bit_load_raw;",
          "8458:   } else if (!strcmp(model,\"F-510C\")) {",
          "8459:     height = 1958;",
          "8460:     width  = 2588;",
          "8461:     load_raw = fsize < 7500000 ?",
          "8462:  &CLASS eight_bit_load_raw : &CLASS unpacked_load_raw;",
          "8463:     data_offset = fsize - width*height*(fsize >> 22);",
          "8464:     maximum = 0xfff0;",
          "8465:   } else if (!strcmp(model,\"F-810C\")) {",
          "8466:     height = 2469;",
          "8467:     width  = 3272;",
          "8468:     load_raw = &CLASS unpacked_load_raw;",
          "8469:     maximum = 0xfff0;",
          "8470:   } else if (!strcmp(model,\"XCD-SX910CR\")) {",
          "8471:     height = 1024;",
          "8472:     width  = 1375;",
          "8473:     raw_width = 1376;",
          "8474:     filters = 0x49494949;",
          "8475:     maximum = 0x3ff;",
          "8476:     load_raw = fsize < 2000000 ?",
          "8477:  &CLASS eight_bit_load_raw : &CLASS unpacked_load_raw;",
          "8478:   } else if (!strcmp(model,\"2010\")) {",
          "8479:     height = 1207;",
          "8480:     width  = 1608;",
          "8481:     order = 0x4949;",
          "8482:     filters = 0x16161616;",
          "8483:     data_offset = 3212;",
          "8484:     maximum = 0x3ff;",
          "8485:     load_raw = &CLASS unpacked_load_raw;",
          "8486:   } else if (!strcmp(model,\"A782\")) {",
          "8487:     height = 3000;",
          "8488:     width  = 2208;",
          "8489:     filters = 0x61616161;",
          "8490:     load_raw = fsize < 10000000 ?",
          "8491:  &CLASS eight_bit_load_raw : &CLASS unpacked_load_raw;",
          "8492:     maximum = 0xffc0;",
          "8493:   } else if (!strcmp(model,\"3320AF\")) {",
          "8494:     height = 1536;",
          "8495:     raw_width = width = 2048;",
          "8496:     filters = 0x61616161;",
          "8497:     load_raw = &CLASS unpacked_load_raw;",
          "8498:     maximum = 0x3ff;",
          "8499:     fseek (ifp, 0x300000, SEEK_SET);",
          "8500:     if ((order = guess_byte_order(0x10000)) == 0x4d4d) {",
          "8501:       height -= (top_margin = 16);",
          "8502:       width -= (left_margin = 28);",
          "8503:       maximum = 0xf5c0;",
          "8504:       strcpy (make, \"ISG\");",
          "8505:       model[0] = 0;",
          "8506:     }",
          "",
          "[Added Lines]",
          "7688:   } else if (!strcmp(model,\"N95\")) {",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "8533:       filters = 0x61616161;",
          "8534:     }",
          "8535:   } else if (!strcmp(make,\"Sinar\")) {",
          "8543:     if (!load_raw) load_raw = &CLASS unpacked_load_raw;",
          "8544:     maximum = 0x3fff;",
          "8545:   } else if (!strcmp(make,\"Leaf\")) {",
          "",
          "[Removed Lines]",
          "8536:     if (!memcmp(head,\"8BPS\",4)) {",
          "8537:       fseek (ifp, 14, SEEK_SET);",
          "8538:       height = get4();",
          "8539:       width  = get4();",
          "8540:       filters = 0x61616161;",
          "8541:       data_offset = 68;",
          "8542:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "8584:       width -= 2 * (left_margin = 24);",
          "8585:       filters = 0x16161616;",
          "8586:     }",
          "8588:     if ((flen - data_offset) / (raw_width*8/7) == raw_height)",
          "8589:       load_raw = &CLASS panasonic_load_raw;",
          "8590:     if (!load_raw) {",
          "",
          "[Removed Lines]",
          "8587:   } else if (!strcmp(make,\"LEICA\") || !strcmp(make,\"Panasonic\")) {",
          "",
          "[Added Lines]",
          "7765:   } else if (!strcmp(make,\"Leica\") || !strcmp(make,\"Panasonic\")) {",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "8608:     filters = 0x16161616;",
          "8609:     load_raw = &CLASS packed_load_raw;",
          "8610:     load_flags = 30;",
          "8612:     height += height & 1;",
          "8614:     if (width == 4100) width -= 4;",
          "8615:     if (width == 4080) width -= 24;",
          "8616:     if (load_raw == &CLASS unpacked_load_raw)",
          "",
          "[Removed Lines]",
          "8611:   } else if (!strcmp(make,\"OLYMPUS\")) {",
          "8613:     filters = exif_cfa;",
          "",
          "[Added Lines]",
          "7789:   } else if (!strcmp(make,\"Olympus\")) {",
          "7791:     if (exif_cfa) filters = exif_cfa;",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "8631:       thumb_length = flen - (thumb_offset = 0xa39800);",
          "8632:       thumb_height = 480;",
          "8633:       thumb_width  = 640;",
          "8640:     }",
          "8641:   } else if (!strcmp(model,\"N Digital\")) {",
          "8642:     height = 2047;",
          "",
          "[Removed Lines]",
          "8634:     } else if (!strcmp(model,\"XZ-2\")) {",
          "8635:       load_raw = &CLASS packed_load_raw;",
          "8636:       load_flags = 24;",
          "8637:     } else if (!strcmp(model,\"XZ-10\")) {",
          "8638:       load_raw = &CLASS packed_load_raw;",
          "8639:       load_flags = 24;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "8659:     mask[0][1] = 9;",
          "8660:     data_offset = 787392;",
          "8661:     load_raw = &CLASS sony_load_raw;",
          "8664:     width = 3925;",
          "8665:     order = 0x4d4d;",
          "8667:     width -= 8;",
          "8669:     width -= 24;",
          "8670:   } else if (!strcmp(model,\"DSLR-A100\")) {",
          "8671:     if (width == 3880) {",
          "",
          "[Removed Lines]",
          "8662:   } else if (!strcmp(make,\"SONY\") && raw_width == 3984) {",
          "8663:     adobe_coeff (\"SONY\",\"DSC-R1\");",
          "8666:   } else if (!strcmp(make,\"SONY\") && raw_width == 5504) {",
          "8668:   } else if (!strcmp(make,\"SONY\") && raw_width == 6048) {",
          "",
          "[Added Lines]",
          "7834:   } else if (!strcmp(make,\"Sony\") && raw_width == 3984) {",
          "7835:     adobe_coeff (\"Sony\",\"DSC-R1\");",
          "7838:   } else if (!strcmp(make,\"Sony\") && raw_width == 5504) {",
          "7840:   } else if (!strcmp(make,\"Sony\") && raw_width == 6048) {",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "8682:     height -= top_margin = 4;",
          "8683:     width -= left_margin = 32;",
          "8684:     gamma_curve (0, 7, 1, 255);",
          "8692:     order = 0x4949;",
          "8715:       fseek (ifp, 168, SEEK_SET);",
          "8716:       read_shorts (curve, 256);",
          "8717:     } else gamma_curve (0, 3.875, 1, 255);",
          "8719:   } else if (!strncasecmp(model,\"EasyShare\",9)) {",
          "8720:     data_offset = data_offset < 0x15000 ? 0x15000 : 0x17000;",
          "8721:     load_raw = &CLASS packed_load_raw;",
          "8723:     if (filters == UINT_MAX) filters = 0x61616161;",
          "8724:     if (!strncmp(model,\"NC2000\",6)) {",
          "8725:       width -= 4;",
          "",
          "[Removed Lines]",
          "8685:   } else if (!strcmp(model,\"C603v\")) {",
          "8686:     height = 480;",
          "8687:     width  = 640;",
          "8688:     if (fsize < 614400 || find_green (16, 16, 3840, 5120) < 25) goto c603v;",
          "8689:     strcpy (model,\"KAI-0340\");",
          "8690:     height -= 3;",
          "8691:     data_offset = 3840;",
          "8693:     load_raw = &CLASS unpacked_load_raw;",
          "8694:   } else if (!strcmp(model,\"C603y\")) {",
          "8695:     height = 2134;",
          "8696:     width  = 2848;",
          "8697: c603v:",
          "8698:     filters = 0;",
          "8699:     load_raw = &CLASS kodak_yrgb_load_raw;",
          "8700:     gamma_curve (0, 3.875, 1, 255);",
          "8701:   } else if (!strcmp(model,\"C603\")) {",
          "8702:     raw_height = height = 2152;",
          "8703:     raw_width  = width  = 2864;",
          "8704:     goto c603;",
          "8705:   } else if (!strcmp(model,\"C330\")) {",
          "8706:     height = 1744;",
          "8707:     width  = 2336;",
          "8708:     raw_height = 1779;",
          "8709:     raw_width  = 2338;",
          "8710:     top_margin = 33;",
          "8711:     left_margin = 1;",
          "8712: c603:",
          "8713:     order = 0x4949;",
          "8714:     if ((data_offset = fsize - raw_height*raw_width)) {",
          "8718:     load_raw = &CLASS eight_bit_load_raw;",
          "8722:   } else if (!strcasecmp(make,\"KODAK\")) {",
          "",
          "[Added Lines]",
          "7857:   } else if (!strcmp(model,\"C603\") || !strcmp(model,\"C330\")) {",
          "7859:     if (filters && data_offset) {",
          "7863:     load_raw = filters ? &CLASS eight_bit_load_raw",
          "7864:          : &CLASS kodak_yrgb_load_raw;",
          "7868:   } else if (!strcasecmp(make,\"Kodak\")) {",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "8757:       data_offset = 15424;",
          "8758:     }",
          "8759:     if (!strncmp(model,\"DC2\",3)) {",
          "8761:       if (flen < 100000) {",
          "8762:  raw_width = 256; width = 249;",
          "8763:  pixel_aspect = (4.0*height) / (3.0*width);",
          "",
          "[Removed Lines]",
          "8760:       raw_height = height = 242;",
          "",
          "[Added Lines]",
          "7906:       raw_height = 2 + (height = 242);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "8765:  raw_width = 512; width = 501;",
          "8766:  pixel_aspect = (493.0*height) / (373.0*width);",
          "8767:       }",
          "8769:       colors = 4;",
          "8770:       filters = 0x8d8d8d8d;",
          "8771:       simple_coeff(1);",
          "",
          "[Removed Lines]",
          "8768:       data_offset += raw_width + 1;",
          "",
          "[Added Lines]",
          "7914:       top_margin = left_margin = 1;",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "8798:       thumb_offset = 6144;",
          "8799:       thumb_misc   = 360;",
          "8800:       write_thumb = &CLASS layer_thumb;",
          "8805:       black = 17;",
          "8806:     }",
          "8807:   } else if (!strcmp(model,\"Fotoman Pixtura\")) {",
          "",
          "[Removed Lines]",
          "8801:       height = 1024;",
          "8802:       width  = 1536;",
          "8803:       data_offset = 79872;",
          "8804:       load_raw = &CLASS eight_bit_load_raw;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "8839:     }",
          "8840:     filters = 0x16161616;",
          "8841:     load_raw = &CLASS rollei_load_raw;",
          "8947:   }",
          "8948:   else if (!strcmp(model,\"GRAS-50S5C\")) {",
          "8949:    height = 2048;",
          "",
          "[Removed Lines]",
          "8842:   } else if (!strcmp(model,\"PC-CAM 600\")) {",
          "8843:     height = 768;",
          "8844:     data_offset = width = 1024;",
          "8845:     filters = 0x49494949;",
          "8846:     load_raw = &CLASS eight_bit_load_raw;",
          "8847:   } else if (!strcmp(model,\"QV-2000UX\")) {",
          "8848:     height = 1208;",
          "8849:     width  = 1632;",
          "8850:     data_offset = width * 2;",
          "8851:     load_raw = &CLASS eight_bit_load_raw;",
          "8852:   } else if (fsize == 3217760) {",
          "8853:     height = 1546;",
          "8854:     width  = 2070;",
          "8855:     raw_width = 2080;",
          "8856:     load_raw = &CLASS eight_bit_load_raw;",
          "8857:   } else if (!strcmp(model,\"QV-4000\")) {",
          "8858:     height = 1700;",
          "8859:     width  = 2260;",
          "8860:     load_raw = &CLASS unpacked_load_raw;",
          "8861:     maximum = 0xffff;",
          "8862:   } else if (!strcmp(model,\"QV-5700\")) {",
          "8863:     height = 1924;",
          "8864:     width  = 2576;",
          "8865:     raw_width = 3232;",
          "8866:     tiff_bps = 10;",
          "8867:   } else if (!strcmp(model,\"QV-R41\")) {",
          "8868:     height = 1720;",
          "8869:     width  = 2312;",
          "8870:     raw_width = 3520;",
          "8871:     left_margin = 2;",
          "8872:   } else if (!strcmp(model,\"QV-R51\")) {",
          "8873:     height = 1926;",
          "8874:     width  = 2580;",
          "8875:     raw_width = 3904;",
          "8876:   } else if (!strcmp(model,\"EX-S20\")) {",
          "8877:     height = 1208;",
          "8878:     width  = 1620;",
          "8879:     raw_width = 2432;",
          "8880:     flip = 3;",
          "8881:   } else if (!strcmp(model,\"EX-S100\")) {",
          "8882:     height = 1544;",
          "8883:     width  = 2058;",
          "8884:     raw_width = 3136;",
          "8885:   } else if (!strcmp(model,\"EX-Z50\")) {",
          "8886:     height = 1931;",
          "8887:     width  = 2570;",
          "8888:     raw_width = 3904;",
          "8889:   } else if (!strcmp(model,\"EX-Z500\")) {",
          "8890:     height = 1937;",
          "8891:     width  = 2577;",
          "8892:     raw_width = 3904;",
          "8893:     filters = 0x16161616;",
          "8894:   } else if (!strcmp(model,\"EX-Z55\")) {",
          "8895:     height = 1960;",
          "8896:     width  = 2570;",
          "8897:     raw_width = 3904;",
          "8898:   } else if (!strcmp(model,\"EX-Z60\")) {",
          "8899:     height = 2145;",
          "8900:     width  = 2833;",
          "8901:     raw_width = 3584;",
          "8902:     filters = 0x16161616;",
          "8903:     tiff_bps = 10;",
          "8904:   } else if (!strcmp(model,\"EX-Z75\")) {",
          "8905:     height = 2321;",
          "8906:     width  = 3089;",
          "8907:     raw_width = 4672;",
          "8908:     maximum = 0xfff;",
          "8909:   } else if (!strcmp(model,\"EX-Z750\")) {",
          "8910:     height = 2319;",
          "8911:     width  = 3087;",
          "8912:     raw_width = 4672;",
          "8913:     maximum = 0xfff;",
          "8914:   } else if (!strcmp(model,\"EX-Z850\")) {",
          "8915:     height = 2468;",
          "8916:     width  = 3279;",
          "8917:     raw_width = 4928;",
          "8918:     maximum = 0xfff;",
          "8919:   } else if (!strcmp(model,\"EX-Z8\")) {",
          "8920:     height = 2467;",
          "8921:     width  = 3281;",
          "8922:     raw_height = 2502;",
          "8923:     raw_width  = 4992;",
          "8924:     maximum = 0xfff;",
          "8926:     height = 2752;",
          "8927:     width  = 3672;",
          "8928:     raw_width = 5632;",
          "8929:   } else if (!strcmp(model,\"EX-ZR100\")) {",
          "8930:     height = 3044;",
          "8931:     width  = 4072;",
          "8932:     raw_width = 4096;",
          "8933:     load_flags = 80;",
          "8934:   } else if (!strcmp(model,\"EX-P505\")) {",
          "8935:     height = 1928;",
          "8936:     width  = 2568;",
          "8937:     raw_width = 3852;",
          "8938:     maximum = 0xfff;",
          "8940:     height = 2142;",
          "8941:     width  = 2844;",
          "8942:     raw_width = 4288;",
          "8943:   } else if (!strcmp(model,\"EX-P700\")) {",
          "8944:     height = 2318;",
          "8945:     width  = 3082;",
          "8946:     raw_width = 4672;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "8978:    order = 0x4949;",
          "8979:    maximum = 0x0fff;",
          "8980:   }",
          "8981: }",
          "8985: void CLASS convert_to_rgb()",
          "8986: {",
          "8987: #ifndef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "8984: #line 10231 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "8018:   if (!model[0])",
          "8019:     sprintf (model, \"%dx%d\", width, height);",
          "8020:   if (filters == UINT_MAX) filters = 0x94949494;",
          "8021:   if (raw_color) adobe_coeff (make, model);",
          "8022:   if (load_raw == &CLASS kodak_radc_load_raw)",
          "8023:     if (raw_color) adobe_coeff (\"Apple\",\"Quicktake\");",
          "8024:   if (thumb_offset && !thumb_height) {",
          "8025:     fseek (ifp, thumb_offset, SEEK_SET);",
          "8026:     if (ljpeg_start (&jh, 1)) {",
          "8027:       thumb_width  = jh.wide;",
          "8028:       thumb_height = jh.high;",
          "8029:     }",
          "8030:   }",
          "8032: dng_skip:",
          "8034:   if (fuji_width) {",
          "8035:     fuji_width = width >> !fuji_layout;",
          "8036:     if (~fuji_width & 1) filters = 0x49494949;",
          "8037:     width = (height >> fuji_layout) + fuji_width;",
          "8038:     height = width - 1;",
          "8039:     pixel_aspect = 1;",
          "8040:   } else {",
          "8041:     if (raw_height < height) raw_height = height;",
          "8042:     if (raw_width  < width ) raw_width  = width;",
          "8043:   }",
          "8044:   if (!tiff_bps) tiff_bps = 12;",
          "8045:   if (!maximum) maximum = (1 << tiff_bps) - 1;",
          "8046:   if (!load_raw || height < 22 || width < 22 ||",
          "8047:  tiff_bps > 16 || tiff_samples > 4 || colors > 4)",
          "8048:     is_raw = 0;",
          "8049: #ifdef NO_JASPER",
          "8050:   if (load_raw == &CLASS redcine_load_raw) {",
          "8051: #ifdef DCRAW_VERBOSE",
          "8052:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "8053:  ifname, \"libjasper\");",
          "8054: #endif",
          "8055:     is_raw = 0;",
          "8056: #ifdef LIBRAW_LIBRARY_BUILD",
          "8057:     imgdata.process_warnings |= LIBRAW_WARN_NO_JASPER;",
          "8058: #endif",
          "8059:   }",
          "8060: #endif",
          "8061: #ifdef NO_JPEG",
          "8062:   if (load_raw == &CLASS kodak_jpeg_load_raw ||",
          "8063:       load_raw == &CLASS lossy_dng_load_raw) {",
          "8064: #ifdef DCRAW_VERBOSE",
          "8065:     fprintf (stderr,_(\"%s: You must link dcraw with %s!!\\n\"),",
          "8066:  ifname, \"libjpeg\");",
          "8067: #endif",
          "8068:     is_raw = 0;",
          "8069: #ifdef LIBRAW_LIBRARY_BUILD",
          "8070:     imgdata.process_warnings |= LIBRAW_WARN_NO_JPEGLIB;",
          "8071: #endif",
          "8072:   }",
          "8073: #endif",
          "8074:   if (!cdesc[0])",
          "8075:     strcpy (cdesc, colors == 3 ? \"RGBG\":\"GMCY\");",
          "8076:   if (!raw_height) raw_height = height;",
          "8077:   if (!raw_width ) raw_width  = width;",
          "8078:   if (filters > 999 && colors == 3)",
          "8079:     filters |= ((filters >> 2 & 0x22222222) |",
          "8080:   (filters << 2 & 0x88888888)) & filters << 1;",
          "8081: notraw:",
          "8082:   if (flip == UINT_MAX) flip = tiff_flip;",
          "8083:   if (flip == UINT_MAX) flip = 0;",
          "8085: #ifdef LIBRAW_LIBRARY_BUILD",
          "8086:   RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY,1,2);",
          "8087: #endif",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "9129:   step = sqrt(0.5);",
          "9130:   wide = fuji_width / step;",
          "9131:   high = (height - fuji_width) / step;",
          "9133:   merror (img, \"fuji_rotate()\");",
          "9135: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "9132:   img = (ushort (*)[4]) calloc (wide*high, sizeof *img);",
          "",
          "[Added Lines]",
          "8238:   img = (ushort (*)[4]) calloc (high, wide*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "9175: #endif",
          "9176:   if (pixel_aspect < 1) {",
          "9177:     newdim = height / pixel_aspect + 0.5;",
          "9179:     merror (img, \"stretch()\");",
          "9180:     for (rc=row=0; row < newdim; row++, rc+=pixel_aspect) {",
          "9181:       frac = rc - (c = rc);",
          "",
          "[Removed Lines]",
          "9178:     img = (ushort (*)[4]) calloc (width*newdim, sizeof *img);",
          "",
          "[Added Lines]",
          "8284:     img = (ushort (*)[4]) calloc (width, newdim*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "9187:     height = newdim;",
          "9188:   } else {",
          "9189:     newdim = width * pixel_aspect + 0.5;",
          "9191:     merror (img, \"stretch()\");",
          "9192:     for (rc=col=0; col < newdim; col++, rc+=1/pixel_aspect) {",
          "9193:       frac = rc - (c = rc);",
          "",
          "[Removed Lines]",
          "9190:     img = (ushort (*)[4]) calloc (height*newdim, sizeof *img);",
          "",
          "[Added Lines]",
          "8296:     img = (ushort (*)[4]) calloc (height, newdim*sizeof *img);",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "9212:   if (flip & 1) col = iwidth  - 1 - col;",
          "9213:   return row * iwidth + col;",
          "9214: }",
          "9216: void CLASS tiff_set (ushort *ntag,",
          "9217:  ushort tag, ushort type, int count, int val)",
          "9218: {",
          "",
          "[Removed Lines]",
          "9215: #line 10487 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/dcraw_fileio.cpp||internal/dcraw_fileio.cpp": [
          "File: internal/dcraw_fileio.cpp -> internal/dcraw_fileio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    for more information",
          "25: #include <math.h>",
          "26: #define CLASS LibRaw::",
          "27: #include \"libraw/libraw_types.h\"",
          "",
          "[Removed Lines]",
          "24: #line 3976 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "24: #line 3677 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"libraw/libraw.h\"",
          "30: #include \"internal/defines.h\"",
          "31: #include \"internal/var_defines.h\"",
          "34:    Seach from the current directory up to the root looking for",
          "35:    a \".badpixels\" file, and fix those pixels now.",
          "",
          "[Removed Lines]",
          "32: #line 3987 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "32: #line 3688 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #endif",
          "55:   if (cfname)",
          "56:     fp = fopen (cfname, \"r\");",
          "58:   if (!fp)",
          "59:       {",
          "60: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "[Removed Lines]",
          "57: #line 4037 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "57: #line 3738 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   RUN_CALLBACK(LIBRAW_PROGRESS_DARK_FRAME,1,2);",
          "155: #endif",
          "156: }",
          "158: #ifndef NO_LCMS",
          "159: void CLASS apply_profile (const char *input, const char *output)",
          "160: {",
          "",
          "[Removed Lines]",
          "157: #line 10142 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "157: #line 9270 \"dcraw/dcraw.c\"",
          "",
          "---------------"
        ],
        "internal/defines.h||internal/defines.h": [
          "File: internal/defines.h -> internal/defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NO_JASPER",
          "30: #endif",
          "31: #line 38 \"dcraw/dcraw.c\"",
          "34: #ifndef _GNU_SOURCE",
          "35: #define _GNU_SOURCE",
          "",
          "[Removed Lines]",
          "32: #define DCRAW_VERSION \"9.17\"",
          "",
          "[Added Lines]",
          "32: #define DCRAW_VERSION \"9.19\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: #include <string.h>",
          "48: #include <time.h>",
          "49: #include <sys/types.h>",
          "70: #ifdef __CYGWIN__",
          "71: #include <io.h>",
          "72: #endif",
          "",
          "[Removed Lines]",
          "51: #ifdef NODEPS",
          "52: #define NO_JASPER",
          "53: #define NO_JPEG",
          "54: #define NO_LCMS",
          "55: #endif",
          "56: #ifndef NO_JASPER",
          "58: #endif",
          "59: #ifndef NO_JPEG",
          "62: #line 73 \"dcraw/dcraw.c\"",
          "63: #ifdef LOCALEDIR",
          "64: #include <libintl.h>",
          "65: #define _(String) gettext(String)",
          "66: #else",
          "67: #define _(String) (String)",
          "68: #endif",
          "69: #line 87 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "50: #line 65 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77: #define snprintf _snprintf",
          "78: #define strcasecmp stricmp",
          "79: #define strncasecmp strnicmp",
          "81: #else",
          "82: #include <unistd.h>",
          "83: #include <utime.h>",
          "",
          "[Removed Lines]",
          "80: #line 101 \"dcraw/dcraw.c\"",
          "",
          "[Added Lines]",
          "61: #line 79 \"dcraw/dcraw.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86: typedef unsigned long long UINT64;",
          "87: #endif",
          "89: #ifdef LJPEG_DECODE",
          "90: #error Please compile dcraw.c by itself.",
          "91: #error Do not link it with ljpeg_decode.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: #ifdef NODEPS",
          "71: #define NO_JASPER",
          "72: #define NO_JPEG",
          "73: #define NO_LCMS",
          "74: #endif",
          "75: #ifndef NO_JASPER",
          "77: #endif",
          "78: #ifndef NO_JPEG",
          "81: #ifndef NO_LCMS",
          "83: #endif",
          "84: #ifdef LOCALEDIR",
          "85: #include <libintl.h>",
          "86: #define _(String) gettext(String)",
          "87: #else",
          "88: #define _(String) (String)",
          "89: #endif",
          "",
          "---------------"
        ],
        "internal/libraw_bytebuffer.h||internal/libraw_bytebuffer.h": [
          "File: internal/libraw_bytebuffer.h -> internal/libraw_bytebuffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "internal/libraw_internal_funcs.h||internal/libraw_internal_funcs.h": [
          "File: internal/libraw_internal_funcs.h -> internal/libraw_internal_funcs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     void        canon_600_load_raw();",
          "48:     void        canon_600_correct();",
          "49:     int         canon_s2is();",
          "51:     void        ciff_block_1030();",
          "",
          "[Removed Lines]",
          "50:     void        parse_ciff (int offset, int length);",
          "",
          "[Added Lines]",
          "50: void        parse_ciff (int offset, int length, int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     int         ljpeg_start (struct jhead *jh, int info_only);",
          "58:     void        ljpeg_end(struct jhead *jh);",
          "59:     int         ljpeg_diff (ushort *huff);",
          "62:     ushort *    ljpeg_row (int jrow, struct jhead *jh);",
          "65:     unsigned    ph1_bithuff (int nbits, ushort *huff);",
          "",
          "[Removed Lines]",
          "60:     int         ljpeg_diff_new (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff);",
          "61:     int         ljpeg_diff_pef (LibRaw_bit_buffer& bits, LibRaw_byte_buffer* buf,ushort *huff);",
          "63:     ushort *    ljpeg_row_new (int jrow, struct jhead *jh, LibRaw_bit_buffer& bits,LibRaw_byte_buffer* bytes);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     void        lossless_jpeg_load_raw();",
          "72:     void        canon_sraw_load_raw();",
          "76:     void        lossless_dng_load_raw();",
          "77:     void        packed_dng_load_raw();",
          "78:     void        lossy_dng_load_raw();",
          "",
          "[Removed Lines]",
          "74:     void        adobe_copy_pixel_raw (unsigned int row, unsigned int col, ushort **rp);",
          "75:     void        adobe_copy_pixel_color (unsigned int row, unsigned int col, ushort **rp);",
          "",
          "[Added Lines]",
          "70:     void        adobe_copy_pixel (unsigned int row, unsigned int col, ushort **rp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:     void        nokia_load_raw();",
          "126:     unsigned    pana_bits (int nbits);",
          "127:     void        panasonic_load_raw();",
          "128:     void        olympus_load_raw();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     void        canon_rmf_load_raw();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:     void        sony_load_raw();",
          "161:     void        sony_arw_load_raw();",
          "162:     void        sony_arw2_load_raw();",
          "163:     void        parse_minolta (int base);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:     void        samsung_load_raw();",
          "",
          "---------------"
        ],
        "internal/var_defines.h||internal/var_defines.h": [
          "File: internal/var_defines.h -> internal/var_defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define colors          (imgdata.idata.colors)",
          "31: #define cdesc           (imgdata.idata.cdesc)",
          "32: #define filters         (imgdata.idata.filters)",
          "35: #define image           (imgdata.image)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #define xtrans         (imgdata.idata.xtrans)",
          "",
          "---------------"
        ],
        "libraw/libraw.h||libraw/libraw.h": [
          "File: libraw/libraw.h -> libraw/libraw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     void        lin_interpolate();",
          "235:     void        vng_interpolate();",
          "236:     void        ppg_interpolate();",
          "237:     void        ahd_interpolate();",
          "238:     void        dht_interpolate();",
          "239:     void        aahd_interpolate();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     void        cielab(ushort rgb[3], short lab[3]);",
          "238:     void        xtrans_interpolate(int);",
          "",
          "---------------"
        ],
        "libraw/libraw_datastream.h||libraw/libraw_datastream.h": [
          "File: libraw/libraw_datastream.h -> libraw/libraw_datastream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define IOERROR() do { throw LIBRAW_EXCEPTION_IO_EOF; } while(0)",
          "51: class LibRaw_buffer_datastream;",
          "53: class LibRaw_bit_buffer;",
          "55: class DllDef LibRaw_abstract_datastream",
          "",
          "[Removed Lines]",
          "52: class LibRaw_byte_buffer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     virtual void *      make_jas_stream() = 0;",
          "70:     virtual int         jpeg_src(void *) { return -1; }",
          "75:     virtual const char* fname(){ return NULL;};",
          "",
          "[Removed Lines]",
          "72:     virtual LibRaw_byte_buffer *make_byte_buffer(unsigned int sz);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:     virtual int         valid();",
          "143:     virtual void        *make_jas_stream();",
          "144:     virtual int         jpeg_src(void *jpegdata);",
          "146:     virtual int         read(void * ptr,size_t sz, size_t nmemb);",
          "147:     virtual int         eof();",
          "148:     virtual int         seek(INT64 o, int whence);",
          "",
          "[Removed Lines]",
          "145:     virtual LibRaw_byte_buffer *make_byte_buffer(unsigned int sz);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libraw/libraw_internal.h||libraw/libraw_internal.h": [
          "File: libraw/libraw_internal.h -> libraw/libraw_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         uchar buf[0x4000];",
          "67:         int vbits, padding;",
          "68:     }pana_bits;",
          "70:     void init()",
          "71:         {",
          "72:             getbits.bitbuf = 0; getbits.vbits = getbits.reset = 0;",
          "73:             ph1_bits.bitbuf = 0; ph1_bits.vbits = 0;",
          "74:             pana_bits.vbits = 0;",
          "75:         }",
          "76: };",
          "",
          "[Removed Lines]",
          "69:  uchar jpeg_buffer[4096];",
          "",
          "[Added Lines]",
          "69:     uchar jpeg_buffer[4096];",
          "70:     struct",
          "71:     {",
          "72:       float cbrt[0x10000], xyz_cam[3][4];",
          "73:     }ahd_data;",
          "79:             ahd_data.cbrt[0]=-2.0f;",
          "",
          "---------------"
        ],
        "libraw/libraw_types.h||libraw/libraw_types.h": [
          "File: libraw/libraw_types.h -> libraw/libraw_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     unsigned    is_foveon;",
          "156:     int         colors;",
          "159:     char        cdesc[5];",
          "161: }libraw_iparams_t;",
          "",
          "[Removed Lines]",
          "158:     unsigned    filters;",
          "",
          "[Added Lines]",
          "158:     unsigned    filters;",
          "159:     char        xtrans[6][6];",
          "",
          "---------------"
        ],
        "samples/dcraw_emu.cpp||samples/dcraw_emu.cpp": [
          "File: samples/dcraw_emu.cpp -> samples/dcraw_emu.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:                   break;",
          "272:               case 'h':",
          "273:                   OUT.half_size         = 1;",
          "275:                   break;",
          "276:               case 'f':",
          "277:                   if(!strcmp(optstr,\"-fbdd\"))",
          "",
          "[Removed Lines]",
          "274:                   OUT.four_color_rgb    = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: };",
          "192: CameraMetaDataLR::CameraMetaDataLR(char *data, int sz) : CameraMetaData() {",
          "239: }",
          "241: #define RAWSPEED_DATA_COUNT (sizeof(_rawspeed_data_xml)/sizeof(_rawspeed_data_xml[0]))",
          "242: static CameraMetaDataLR* make_camera_metadata()",
          "243: {",
          "270: }",
          "272: #endif",
          "",
          "[Removed Lines]",
          "193:  ctxt = xmlNewParserCtxt();",
          "194:  if (ctxt == NULL) {",
          "195:   ThrowCME(\"CameraMetaData:Could not initialize context.\");",
          "196:  }",
          "198:  xmlResetLastError();",
          "199:  doc = xmlCtxtReadMemory(ctxt, data,sz, \"\", NULL, XML_PARSE_DTDVALID);",
          "201:  if (doc == NULL) {",
          "202:   ThrowCME(\"CameraMetaData: XML Document could not be parsed successfully. Error was: %s\", ctxt->lastError.message);",
          "203:  }",
          "205:  if (ctxt->valid == 0) {",
          "206:   if (ctxt->lastError.code == 0x5e) {",
          "208:   } else {",
          "209:    ThrowCME(\"CameraMetaData: XML file does not validate. DTD Error was: %s\", ctxt->lastError.message);",
          "210:   }",
          "211:  }",
          "213:  xmlNodePtr cur;",
          "214:  cur = xmlDocGetRootElement(doc);",
          "215:  if (xmlStrcmp(cur->name, (const xmlChar *) \"Cameras\")) {",
          "216:   ThrowCME(\"CameraMetaData: XML document of the wrong type, root node is not cameras.\");",
          "217:   return;",
          "218:  }",
          "220:  cur = cur->xmlChildrenNode;",
          "221:  while (cur != NULL) {",
          "222:   if ((!xmlStrcmp(cur->name, (const xmlChar *)\"Camera\"))) {",
          "223:    Camera *camera = new Camera(doc, cur);",
          "224:    addCamera(camera);",
          "227:    for (uint32 i = 0; i < camera->aliases.size(); i++) {",
          "228:     addCamera(new Camera(camera, i));",
          "229:    }",
          "230:   }",
          "231:   cur = cur->next;",
          "232:  }",
          "233:  if (doc)",
          "234:   xmlFreeDoc(doc);",
          "235:  doc = 0;",
          "236:  if (ctxt)",
          "237:   xmlFreeParserCtxt(ctxt);",
          "238:  ctxt = 0;",
          "244:  int len = 0,i;",
          "245:  for(i=0;i<RAWSPEED_DATA_COUNT;i++)",
          "246:   if(_rawspeed_data_xml[i])",
          "247:   {",
          "248:    len+=strlen(_rawspeed_data_xml[i]);",
          "249:   }",
          "250:  char *rawspeed_xml = (char*)calloc(len+1,sizeof(_rawspeed_data_xml[0][0]));",
          "251:  if(!rawspeed_xml) return NULL;",
          "252:  int offt = 0;",
          "253:  for(i=0;i<RAWSPEED_DATA_COUNT;i++)",
          "254:   if(_rawspeed_data_xml[i])",
          "255:   {",
          "256:    int ll = strlen(_rawspeed_data_xml[i]);",
          "257:    if(offt+ll>len) break;",
          "258:    memmove(rawspeed_xml+offt,_rawspeed_data_xml[i],ll);",
          "259:    offt+=ll;",
          "260:   }",
          "261:  rawspeed_xml[offt]=0;",
          "262:  CameraMetaDataLR *ret=NULL;",
          "263:  try {",
          "264:   ret = new CameraMetaDataLR(rawspeed_xml,offt);",
          "265:  } catch (...) {",
          "267:  }",
          "268:  free(rawspeed_xml);",
          "269:  return ret;",
          "",
          "[Added Lines]",
          "193:   ctxt = xmlNewParserCtxt();",
          "194:   if (ctxt == NULL) {",
          "195:     ThrowCME(\"CameraMetaData:Could not initialize context.\");",
          "196:   }",
          "198:   xmlResetLastError();",
          "199:   doc = xmlCtxtReadMemory(ctxt, data,sz, \"\", NULL, XML_PARSE_DTDVALID);",
          "201:   if (doc == NULL) {",
          "202:     ThrowCME(\"CameraMetaData: XML Document could not be parsed successfully. Error was: %s\", ctxt->lastError.message);",
          "203:   }",
          "205:   if (ctxt->valid == 0) {",
          "206:     if (ctxt->lastError.code == 0x5e) {",
          "208:     } else {",
          "209:       ThrowCME(\"CameraMetaData: XML file does not validate. DTD Error was: %s\", ctxt->lastError.message);",
          "210:     }",
          "211:   }",
          "213:   xmlNodePtr cur;",
          "214:   cur = xmlDocGetRootElement(doc);",
          "215:   if (xmlStrcmp(cur->name, (const xmlChar *) \"Cameras\")) {",
          "216:     ThrowCME(\"CameraMetaData: XML document of the wrong type, root node is not cameras.\");",
          "217:     return;",
          "218:   }",
          "220:   cur = cur->xmlChildrenNode;",
          "221:   while (cur != NULL) {",
          "222:     if ((!xmlStrcmp(cur->name, (const xmlChar *)\"Camera\"))) {",
          "223:       Camera *camera = new Camera(doc, cur);",
          "224:       addCamera(camera);",
          "227:       for (uint32 i = 0; i < camera->aliases.size(); i++) {",
          "228:         addCamera(new Camera(camera, i));",
          "229:       }",
          "230:     }",
          "231:     cur = cur->next;",
          "232:   }",
          "233:   if (doc)",
          "234:     xmlFreeDoc(doc);",
          "235:   doc = 0;",
          "236:   if (ctxt)",
          "237:     xmlFreeParserCtxt(ctxt);",
          "238:   ctxt = 0;",
          "244:   int len = 0,i;",
          "245:   for(i=0;i<RAWSPEED_DATA_COUNT;i++)",
          "246:     if(_rawspeed_data_xml[i])",
          "247:       {",
          "248:         len+=strlen(_rawspeed_data_xml[i]);",
          "249:       }",
          "250:   char *rawspeed_xml = (char*)calloc(len+1,sizeof(_rawspeed_data_xml[0][0]));",
          "251:   if(!rawspeed_xml) return NULL;",
          "252:   int offt = 0;",
          "253:   for(i=0;i<RAWSPEED_DATA_COUNT;i++)",
          "254:     if(_rawspeed_data_xml[i])",
          "255:       {",
          "256:         int ll = strlen(_rawspeed_data_xml[i]);",
          "257:         if(offt+ll>len) break;",
          "258:         memmove(rawspeed_xml+offt,_rawspeed_data_xml[i],ll);",
          "259:         offt+=ll;",
          "260:       }",
          "261:   rawspeed_xml[offt]=0;",
          "262:   CameraMetaDataLR *ret=NULL;",
          "263:   try {",
          "264:     ret = new CameraMetaDataLR(rawspeed_xml,offt);",
          "265:   } catch (...) {",
          "267:   }",
          "268:   free(rawspeed_xml);",
          "269:   return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327: int LibRaw::set_rawspeed_camerafile(char *filename)",
          "328: {",
          "329: #ifdef USE_RAWSPEED",
          "345: #endif",
          "347: }",
          "348: LibRaw::~LibRaw()",
          "349: {",
          "352: #ifdef USE_RAWSPEED",
          "359: #endif",
          "360: }",
          "",
          "[Removed Lines]",
          "330:  try",
          "331:  {",
          "332:   CameraMetaDataLR *camerameta = new CameraMetaDataLR(filename);",
          "333:   if(_rawspeed_camerameta)",
          "334:   {",
          "335:    CameraMetaDataLR *d = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "336:    delete d;",
          "337:   }",
          "338:   _rawspeed_camerameta = static_cast<void*>(camerameta);",
          "339:  }",
          "340:  catch (...)",
          "341:  {",
          "343:    return -1;",
          "344:  }",
          "346:  return 0;",
          "350:  recycle();",
          "351:  delete tls;",
          "353:  if(_rawspeed_camerameta)",
          "354:  {",
          "355:   CameraMetaDataLR *cmeta = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "356:   delete cmeta;",
          "357:   _rawspeed_camerameta = NULL;",
          "358:  }",
          "",
          "[Added Lines]",
          "330:   try",
          "331:     {",
          "332:       CameraMetaDataLR *camerameta = new CameraMetaDataLR(filename);",
          "333:       if(_rawspeed_camerameta)",
          "334:         {",
          "335:           CameraMetaDataLR *d = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "336:           delete d;",
          "337:         }",
          "338:       _rawspeed_camerameta = static_cast<void*>(camerameta);",
          "339:     }",
          "340:   catch (...)",
          "341:     {",
          "343:       return -1;",
          "344:     }",
          "346:   return 0;",
          "350:   recycle();",
          "351:   delete tls;",
          "353:   if(_rawspeed_camerameta)",
          "354:     {",
          "355:       CameraMetaDataLR *cmeta = static_cast<CameraMetaDataLR*>(_rawspeed_camerameta);",
          "356:       delete cmeta;",
          "357:       _rawspeed_camerameta = NULL;",
          "358:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390: void LibRaw:: recycle_datastream()",
          "391: {",
          "398: }",
          "399: void LibRaw:: recycle()",
          "400: {",
          "402: #define FREE(a) do { if(a) { free(a); a = NULL;} }while(0)",
          "412: #undef FREE",
          "418: #ifdef USE_RAWSPEED",
          "425: #endif",
          "431: }",
          "433: const char * LibRaw::unpack_function_name()",
          "434: {",
          "438: }",
          "440: int LibRaw::get_decoder_info(libraw_decoder_info_t* d_info)",
          "441: {",
          "694: }",
          "696: int LibRaw::adjust_maximum()",
          "",
          "[Removed Lines]",
          "392:  if(libraw_internal_data.internal_data.input && libraw_internal_data.internal_data.input_internal)",
          "393:  {",
          "394:   delete libraw_internal_data.internal_data.input;",
          "395:   libraw_internal_data.internal_data.input = NULL;",
          "396:  }",
          "397:  libraw_internal_data.internal_data.input_internal = 0;",
          "401:  recycle_datastream();",
          "404:     FREE(imgdata.image);",
          "405:     FREE(imgdata.thumbnail.thumb);",
          "406:     FREE(libraw_internal_data.internal_data.meta_data);",
          "407:     FREE(libraw_internal_data.output_data.histogram);",
          "408:     FREE(libraw_internal_data.output_data.oprof);",
          "409:     FREE(imgdata.color.profile);",
          "410:     FREE(imgdata.rawdata.ph1_black);",
          "411:     FREE(imgdata.rawdata.raw_alloc);",
          "413:     ZERO(imgdata.rawdata);",
          "414:     ZERO(imgdata.sizes);",
          "415:     ZERO(imgdata.color);",
          "416:     ZERO(libraw_internal_data);",
          "419:  if(_rawspeed_decoder)",
          "420:  {",
          "421:     RawDecoder *d = static_cast<RawDecoder*>(_rawspeed_decoder);",
          "422:     delete d;",
          "423:  }",
          "424:  _rawspeed_decoder = 0;",
          "426:     memmgr.cleanup();",
          "427:     imgdata.thumbnail.tformat = LIBRAW_THUMBNAIL_UNKNOWN;",
          "428:     imgdata.progress_flags = 0;",
          "430:     tls->init();",
          "435:     libraw_decoder_info_t decoder_info;",
          "436:     get_decoder_info(&decoder_info);",
          "437:     return decoder_info.decoder_name;",
          "442:     if(!d_info)   return LIBRAW_UNSPECIFIED_ERROR;",
          "443:     if(!load_raw) return LIBRAW_OUT_OF_ORDER_CALL;",
          "445:     d_info->decoder_flags = LIBRAW_DECODER_NOTSET;",
          "446:     int rawdata = (imgdata.idata.filters || P1.colors == 1);",
          "448:     if (load_raw == &LibRaw::canon_600_load_raw)",
          "449:         {",
          "450:             d_info->decoder_name = \"canon_600_load_raw()\";",
          "451:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD; // WB set within decoder, no need to load raw",
          "452:         }",
          "453:     else if (load_raw == &LibRaw::canon_load_raw)",
          "454:         {",
          "455:             d_info->decoder_name = \"canon_load_raw()\";",
          "456:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "457:         }",
          "458:     else if (load_raw == &LibRaw::lossless_jpeg_load_raw)",
          "459:         {",
          "461:             d_info->decoder_name = \"lossless_jpeg_load_raw()\";",
          "462:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_HASCURVE | LIBRAW_DECODER_TRYRAWSPEED;",
          "463:         }",
          "464:     else if (load_raw == &LibRaw::canon_sraw_load_raw)",
          "465:         {",
          "466:             d_info->decoder_name = \"canon_sraw_load_raw()\";",
          "467:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY | LIBRAW_DECODER_TRYRAWSPEED;",
          "468:         }",
          "469:     else if (load_raw == &LibRaw::lossless_dng_load_raw)",
          "470:         {",
          "472:             d_info->decoder_name = \"lossless_dng_load_raw()\";",
          "473:             d_info->decoder_flags = rawdata? LIBRAW_DECODER_FLATFIELD : LIBRAW_DECODER_LEGACY ;",
          "474:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "475:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "476:         }",
          "477:     else if (load_raw == &LibRaw::packed_dng_load_raw)",
          "478:         {",
          "480:             d_info->decoder_name = \"packed_dng_load_raw()\";",
          "481:             d_info->decoder_flags = rawdata ? LIBRAW_DECODER_FLATFIELD : LIBRAW_DECODER_LEGACY;",
          "482:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "483:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "484:         }",
          "485:     else if (load_raw == &LibRaw::pentax_load_raw )",
          "486:         {",
          "487:             d_info->decoder_name = \"pentax_load_raw()\";",
          "488:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "489:         }",
          "490:     else if (load_raw == &LibRaw::nikon_load_raw)",
          "491:         {",
          "493:             d_info->decoder_name = \"nikon_load_raw()\";",
          "494:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "495:         }",
          "496:     else if (load_raw == &LibRaw::rollei_load_raw )",
          "497:         {",
          "499:             d_info->decoder_name = \"rollei_load_raw()\";",
          "500:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "501:         }",
          "502:     else if (load_raw == &LibRaw::phase_one_load_raw )",
          "503:         {",
          "504:             d_info->decoder_name = \"phase_one_load_raw()\";",
          "505:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "506:         }",
          "507:     else if (load_raw == &LibRaw::phase_one_load_raw_c )",
          "508:         {",
          "509:             d_info->decoder_name = \"phase_one_load_raw_c()\";",
          "510:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "511:         }",
          "512:     else if (load_raw == &LibRaw::hasselblad_load_raw )",
          "513:         {",
          "514:             d_info->decoder_name = \"hasselblad_load_raw()\";",
          "515:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "516:         }",
          "517:     else if (load_raw == &LibRaw::leaf_hdr_load_raw )",
          "518:         {",
          "519:             d_info->decoder_name = \"leaf_hdr_load_raw()\";",
          "520:             d_info->decoder_flags = imgdata.idata.filters? LIBRAW_DECODER_FLATFIELD:LIBRAW_DECODER_LEGACY;",
          "521:         }",
          "522:     else if (load_raw == &LibRaw::unpacked_load_raw )",
          "523:         {",
          "524:             d_info->decoder_name = \"unpacked_load_raw()\";",
          "525:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_USEBAYER2;",
          "526:         }",
          "527:     else if (load_raw == &LibRaw::sinar_4shot_load_raw )",
          "528:         {",
          "530:             d_info->decoder_name = \"sinar_4shot_load_raw()\";",
          "531:             d_info->decoder_flags = (O.shot_select|| O.half_size)?LIBRAW_DECODER_FLATFIELD:LIBRAW_DECODER_LEGACY;",
          "532:         }",
          "533:     else if (load_raw == &LibRaw::imacon_full_load_raw )",
          "534:         {",
          "535:             d_info->decoder_name = \"imacon_full_load_raw()\";",
          "536:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "537:         }",
          "538:     else if (load_raw == &LibRaw::hasselblad_full_load_raw )",
          "539:         {",
          "540:             d_info->decoder_name = \"hasselblad_full_load_raw()\";",
          "541:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "542:         }",
          "543:     else if (load_raw == &LibRaw::packed_load_raw )",
          "544:         {",
          "545:             d_info->decoder_name = \"packed_load_raw()\";",
          "546:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "547:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "548:         }",
          "549:     else if (load_raw == &LibRaw::nokia_load_raw )",
          "550:         {",
          "552:             d_info->decoder_name = \"nokia_load_raw()\";",
          "553:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "554:         }",
          "555:     else if (load_raw == &LibRaw::panasonic_load_raw )",
          "556:         {",
          "557:             d_info->decoder_name = \"panasonic_load_raw()\";",
          "558:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "559:         }",
          "560:     else if (load_raw == &LibRaw::olympus_load_raw )",
          "561:         {",
          "562:             d_info->decoder_name = \"olympus_load_raw()\";",
          "563:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "564:         }",
          "565:     else if (load_raw == &LibRaw::minolta_rd175_load_raw )",
          "566:         {",
          "568:             d_info->decoder_name = \"minolta_rd175_load_raw()\";",
          "569:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "570:         }",
          "571:     else if (load_raw == &LibRaw::quicktake_100_load_raw )",
          "572:         {",
          "574:             d_info->decoder_name = \"quicktake_100_load_raw()\";",
          "575:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "576:         }",
          "577:     else if (load_raw == &LibRaw::kodak_radc_load_raw )",
          "578:         {",
          "579:             d_info->decoder_name = \"kodak_radc_load_raw()\";",
          "580:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "581:         }",
          "582:     else if (load_raw == &LibRaw::kodak_jpeg_load_raw )",
          "583:         {",
          "585:             d_info->decoder_name = \"kodak_jpeg_load_raw()\";",
          "586:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "587:         }",
          "588:     else if (load_raw == &LibRaw::lossy_dng_load_raw)",
          "589:         {",
          "591:             d_info->decoder_name = \"lossy_dng_load_raw()\";",
          "592:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY | LIBRAW_DECODER_TRYRAWSPEED;",
          "593:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "594:         }",
          "595:     else if (load_raw == &LibRaw::kodak_dc120_load_raw )",
          "596:         {",
          "597:             d_info->decoder_name = \"kodak_dc120_load_raw()\";",
          "598:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "599:         }",
          "600:     else if (load_raw == &LibRaw::eight_bit_load_raw )",
          "601:         {",
          "602:             d_info->decoder_name = \"eight_bit_load_raw()\";",
          "603:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "604:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "605:         }",
          "606:     else if (load_raw == &LibRaw::kodak_yrgb_load_raw )",
          "607:         {",
          "608:             d_info->decoder_name = \"kodak_yrgb_load_raw()\";",
          "609:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "610:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "611:         }",
          "612:     else if (load_raw == &LibRaw::kodak_262_load_raw )",
          "613:         {",
          "614:             d_info->decoder_name = \"kodak_262_load_raw()\"; // UNTESTED!",
          "615:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "616:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "617:         }",
          "618:     else if (load_raw == &LibRaw::kodak_65000_load_raw )",
          "619:         {",
          "620:             d_info->decoder_name = \"kodak_65000_load_raw()\";",
          "621:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "622:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "623:         }",
          "624:     else if (load_raw == &LibRaw::kodak_ycbcr_load_raw )",
          "625:         {",
          "627:             d_info->decoder_name = \"kodak_ycbcr_load_raw()\";",
          "628:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "629:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "630:         }",
          "631:     else if (load_raw == &LibRaw::kodak_rgb_load_raw )",
          "632:         {",
          "634:             d_info->decoder_name = \"kodak_rgb_load_raw()\";",
          "635:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "636:         }",
          "637:     else if (load_raw == &LibRaw::sony_load_raw )",
          "638:         {",
          "639:             d_info->decoder_name = \"sony_load_raw()\";",
          "640:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "641:         }",
          "642:     else if (load_raw == &LibRaw::sony_arw_load_raw )",
          "643:         {",
          "644:             d_info->decoder_name = \"sony_arw_load_raw()\";",
          "645:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "646: #ifndef NOSONY_RAWSPEED",
          "647:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "648: #endif",
          "649:         }",
          "650:     else if (load_raw == &LibRaw::sony_arw2_load_raw )",
          "651:         {",
          "652:             d_info->decoder_name = \"sony_arw2_load_raw()\";",
          "653:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "654:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "655: #ifndef NOSONY_RAWSPEED",
          "656:             d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "657: #endif",
          "658:             d_info->decoder_flags |= LIBRAW_DECODER_ITSASONY;",
          "659:         }",
          "660:     else if (load_raw == &LibRaw::smal_v6_load_raw )",
          "661:         {",
          "663:             d_info->decoder_name = \"smal_v6_load_raw()\";",
          "664:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "665:         }",
          "666:     else if (load_raw == &LibRaw::smal_v9_load_raw )",
          "667:         {",
          "669:             d_info->decoder_name = \"smal_v9_load_raw()\";",
          "670:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "671:         }",
          "672:     else  if (load_raw == &LibRaw::redcine_load_raw)",
          "673:         {",
          "674:             d_info->decoder_name = \"redcine_load_raw()\";",
          "675:             d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "676:             d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "677:         }",
          "678:     else if (load_raw == &LibRaw::foveon_sd_load_raw )",
          "679:         {",
          "680:             d_info->decoder_name = \"foveon_sd_load_raw()\";",
          "681:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "682:         }",
          "683:     else if (load_raw == &LibRaw::foveon_dp_load_raw )",
          "684:         {",
          "685:             d_info->decoder_name = \"foveon_dp_load_raw()\";",
          "686:             d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "687:         }",
          "688:     else",
          "689:         {",
          "690:             d_info->decoder_name = \"Unknown unpack function\";",
          "691:             d_info->decoder_flags = LIBRAW_DECODER_NOTSET;",
          "692:         }",
          "693:     return LIBRAW_SUCCESS;",
          "",
          "[Added Lines]",
          "392:   if(libraw_internal_data.internal_data.input && libraw_internal_data.internal_data.input_internal)",
          "393:     {",
          "394:       delete libraw_internal_data.internal_data.input;",
          "395:       libraw_internal_data.internal_data.input = NULL;",
          "396:     }",
          "397:   libraw_internal_data.internal_data.input_internal = 0;",
          "401:   recycle_datastream();",
          "404:   FREE(imgdata.image);",
          "405:   FREE(imgdata.thumbnail.thumb);",
          "406:   FREE(libraw_internal_data.internal_data.meta_data);",
          "407:   FREE(libraw_internal_data.output_data.histogram);",
          "408:   FREE(libraw_internal_data.output_data.oprof);",
          "409:   FREE(imgdata.color.profile);",
          "410:   FREE(imgdata.rawdata.ph1_black);",
          "411:   FREE(imgdata.rawdata.raw_alloc);",
          "413:   ZERO(imgdata.rawdata);",
          "414:   ZERO(imgdata.sizes);",
          "415:   ZERO(imgdata.color);",
          "416:   ZERO(libraw_internal_data);",
          "419:   if(_rawspeed_decoder)",
          "420:     {",
          "421:       RawDecoder *d = static_cast<RawDecoder*>(_rawspeed_decoder);",
          "422:       delete d;",
          "423:     }",
          "424:   _rawspeed_decoder = 0;",
          "426:   memmgr.cleanup();",
          "427:   imgdata.thumbnail.tformat = LIBRAW_THUMBNAIL_UNKNOWN;",
          "428:   imgdata.progress_flags = 0;",
          "430:   tls->init();",
          "435:   libraw_decoder_info_t decoder_info;",
          "436:   get_decoder_info(&decoder_info);",
          "437:   return decoder_info.decoder_name;",
          "442:   if(!d_info)   return LIBRAW_UNSPECIFIED_ERROR;",
          "443:   if(!load_raw) return LIBRAW_OUT_OF_ORDER_CALL;",
          "445:   d_info->decoder_flags = LIBRAW_DECODER_NOTSET;",
          "446:   int rawdata = (imgdata.idata.filters || P1.colors == 1);",
          "448:   if (load_raw == &LibRaw::canon_600_load_raw)",
          "449:     {",
          "450:       d_info->decoder_name = \"canon_600_load_raw()\";",
          "451:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD; // WB set within decoder, no need to load raw",
          "452:     }",
          "453:   else if (load_raw == &LibRaw::canon_load_raw)",
          "454:     {",
          "455:       d_info->decoder_name = \"canon_load_raw()\";",
          "456:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "457:     }",
          "458:   else if (load_raw == &LibRaw::lossless_jpeg_load_raw)",
          "459:     {",
          "461:       d_info->decoder_name = \"lossless_jpeg_load_raw()\";",
          "462:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_HASCURVE | LIBRAW_DECODER_TRYRAWSPEED;",
          "463:     }",
          "464:   else if (load_raw == &LibRaw::canon_sraw_load_raw)",
          "465:     {",
          "466:       d_info->decoder_name = \"canon_sraw_load_raw()\";",
          "467:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY | LIBRAW_DECODER_TRYRAWSPEED;",
          "468:     }",
          "469:   else if (load_raw == &LibRaw::lossless_dng_load_raw)",
          "470:     {",
          "472:       d_info->decoder_name = \"lossless_dng_load_raw()\";",
          "473:       d_info->decoder_flags = rawdata? LIBRAW_DECODER_FLATFIELD : LIBRAW_DECODER_LEGACY ;",
          "474:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "475:       d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "476:     }",
          "477:   else if (load_raw == &LibRaw::packed_dng_load_raw)",
          "478:     {",
          "480:       d_info->decoder_name = \"packed_dng_load_raw()\";",
          "481:       d_info->decoder_flags = rawdata ? LIBRAW_DECODER_FLATFIELD : LIBRAW_DECODER_LEGACY;",
          "482:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "483:       d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "484:     }",
          "485:   else if (load_raw == &LibRaw::pentax_load_raw )",
          "486:     {",
          "487:       d_info->decoder_name = \"pentax_load_raw()\";",
          "488:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "489:     }",
          "490:   else if (load_raw == &LibRaw::nikon_load_raw)",
          "491:     {",
          "493:       d_info->decoder_name = \"nikon_load_raw()\";",
          "494:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "495:     }",
          "496:   else if (load_raw == &LibRaw::rollei_load_raw )",
          "497:     {",
          "499:       d_info->decoder_name = \"rollei_load_raw()\";",
          "500:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "501:     }",
          "502:   else if (load_raw == &LibRaw::phase_one_load_raw )",
          "503:     {",
          "504:       d_info->decoder_name = \"phase_one_load_raw()\";",
          "505:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "506:     }",
          "507:   else if (load_raw == &LibRaw::phase_one_load_raw_c )",
          "508:     {",
          "509:       d_info->decoder_name = \"phase_one_load_raw_c()\";",
          "510:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "511:     }",
          "512:   else if (load_raw == &LibRaw::hasselblad_load_raw )",
          "513:     {",
          "514:       d_info->decoder_name = \"hasselblad_load_raw()\";",
          "515:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "516:     }",
          "517:   else if (load_raw == &LibRaw::leaf_hdr_load_raw )",
          "518:     {",
          "519:       d_info->decoder_name = \"leaf_hdr_load_raw()\";",
          "520:       d_info->decoder_flags = imgdata.idata.filters? LIBRAW_DECODER_FLATFIELD:LIBRAW_DECODER_LEGACY;",
          "521:     }",
          "522:   else if (load_raw == &LibRaw::unpacked_load_raw )",
          "523:     {",
          "524:       d_info->decoder_name = \"unpacked_load_raw()\";",
          "525:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_USEBAYER2;",
          "526:     }",
          "527:   else if (load_raw == &LibRaw::sinar_4shot_load_raw )",
          "528:     {",
          "530:       d_info->decoder_name = \"sinar_4shot_load_raw()\";",
          "531:       d_info->decoder_flags = (O.shot_select|| O.half_size)?LIBRAW_DECODER_FLATFIELD:LIBRAW_DECODER_LEGACY;",
          "532:     }",
          "533:   else if (load_raw == &LibRaw::imacon_full_load_raw )",
          "534:     {",
          "535:       d_info->decoder_name = \"imacon_full_load_raw()\";",
          "536:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "537:     }",
          "538:   else if (load_raw == &LibRaw::hasselblad_full_load_raw )",
          "539:     {",
          "540:       d_info->decoder_name = \"hasselblad_full_load_raw()\";",
          "541:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "542:     }",
          "543:   else if (load_raw == &LibRaw::packed_load_raw )",
          "544:     {",
          "545:       d_info->decoder_name = \"packed_load_raw()\";",
          "546:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "547:       d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "548:     }",
          "549:   else if (load_raw == &LibRaw::nokia_load_raw )",
          "550:     {",
          "552:       d_info->decoder_name = \"nokia_load_raw()\";",
          "553:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "554:     }",
          "555:   else if (load_raw == &LibRaw::canon_rmf_load_raw )",
          "556:     {",
          "558:       d_info->decoder_name = \"canon_rmf_load_raw()\";",
          "559:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "560:     }",
          "561:   else if (load_raw == &LibRaw::panasonic_load_raw )",
          "562:     {",
          "563:       d_info->decoder_name = \"panasonic_load_raw()\";",
          "564:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD  | LIBRAW_DECODER_TRYRAWSPEED;",
          "565:     }",
          "566:   else if (load_raw == &LibRaw::olympus_load_raw )",
          "567:     {",
          "568:       d_info->decoder_name = \"olympus_load_raw()\";",
          "569:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD | LIBRAW_DECODER_TRYRAWSPEED;",
          "570:     }",
          "571:   else if (load_raw == &LibRaw::minolta_rd175_load_raw )",
          "572:     {",
          "574:       d_info->decoder_name = \"minolta_rd175_load_raw()\";",
          "575:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "576:     }",
          "577:   else if (load_raw == &LibRaw::quicktake_100_load_raw )",
          "578:     {",
          "580:       d_info->decoder_name = \"quicktake_100_load_raw()\";",
          "581:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "582:     }",
          "583:   else if (load_raw == &LibRaw::kodak_radc_load_raw )",
          "584:     {",
          "585:       d_info->decoder_name = \"kodak_radc_load_raw()\";",
          "586:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "587:     }",
          "588:   else if (load_raw == &LibRaw::kodak_jpeg_load_raw )",
          "589:     {",
          "591:       d_info->decoder_name = \"kodak_jpeg_load_raw()\";",
          "592:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "593:     }",
          "594:   else if (load_raw == &LibRaw::lossy_dng_load_raw)",
          "595:     {",
          "597:       d_info->decoder_name = \"lossy_dng_load_raw()\";",
          "598:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY | LIBRAW_DECODER_TRYRAWSPEED;",
          "599:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "600:     }",
          "601:   else if (load_raw == &LibRaw::kodak_dc120_load_raw )",
          "602:     {",
          "603:       d_info->decoder_name = \"kodak_dc120_load_raw()\";",
          "604:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "605:     }",
          "606:   else if (load_raw == &LibRaw::eight_bit_load_raw )",
          "607:     {",
          "608:       d_info->decoder_name = \"eight_bit_load_raw()\";",
          "609:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "610:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "611:     }",
          "612:   else if (load_raw == &LibRaw::kodak_yrgb_load_raw )",
          "613:     {",
          "614:       d_info->decoder_name = \"kodak_yrgb_load_raw()\";",
          "615:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "616:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "617:     }",
          "618:   else if (load_raw == &LibRaw::kodak_262_load_raw )",
          "619:     {",
          "620:       d_info->decoder_name = \"kodak_262_load_raw()\"; // UNTESTED!",
          "621:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "622:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "623:     }",
          "624:   else if (load_raw == &LibRaw::kodak_65000_load_raw )",
          "625:     {",
          "626:       d_info->decoder_name = \"kodak_65000_load_raw()\";",
          "627:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "628:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "629:     }",
          "630:   else if (load_raw == &LibRaw::kodak_ycbcr_load_raw )",
          "631:     {",
          "633:       d_info->decoder_name = \"kodak_ycbcr_load_raw()\";",
          "634:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "635:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "636:     }",
          "637:   else if (load_raw == &LibRaw::kodak_rgb_load_raw )",
          "638:     {",
          "640:       d_info->decoder_name = \"kodak_rgb_load_raw()\";",
          "641:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "642:     }",
          "643:   else if (load_raw == &LibRaw::sony_load_raw )",
          "644:     {",
          "645:       d_info->decoder_name = \"sony_load_raw()\";",
          "646:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "647:     }",
          "648:   else if (load_raw == &LibRaw::sony_arw_load_raw )",
          "649:     {",
          "650:       d_info->decoder_name = \"sony_arw_load_raw()\";",
          "651:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "652:       d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "654:     }",
          "655:   else if (load_raw == &LibRaw::sony_arw2_load_raw )",
          "656:     {",
          "657:       d_info->decoder_name = \"sony_arw2_load_raw()\";",
          "658:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "659:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "660:       d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "661:       d_info->decoder_flags |= LIBRAW_DECODER_ITSASONY;",
          "662:     }",
          "663:   else if (load_raw == &LibRaw::samsung_load_raw )",
          "664:     {",
          "665:       d_info->decoder_name = \"samsung_load_raw()\";",
          "666:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "667:       d_info->decoder_flags |= LIBRAW_DECODER_TRYRAWSPEED;",
          "668:     }",
          "669:   else if (load_raw == &LibRaw::smal_v6_load_raw )",
          "670:     {",
          "672:       d_info->decoder_name = \"smal_v6_load_raw()\";",
          "673:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "674:     }",
          "675:   else if (load_raw == &LibRaw::smal_v9_load_raw )",
          "676:     {",
          "678:       d_info->decoder_name = \"smal_v9_load_raw()\";",
          "679:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "680:     }",
          "681:   else  if (load_raw == &LibRaw::redcine_load_raw)",
          "682:     {",
          "683:       d_info->decoder_name = \"redcine_load_raw()\";",
          "684:       d_info->decoder_flags = LIBRAW_DECODER_FLATFIELD;",
          "685:       d_info->decoder_flags |= LIBRAW_DECODER_HASCURVE;",
          "686:     }",
          "687:   else if (load_raw == &LibRaw::foveon_sd_load_raw )",
          "688:     {",
          "689:       d_info->decoder_name = \"foveon_sd_load_raw()\";",
          "690:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "691:     }",
          "692:   else if (load_raw == &LibRaw::foveon_dp_load_raw )",
          "693:     {",
          "694:       d_info->decoder_name = \"foveon_dp_load_raw()\";",
          "695:       d_info->decoder_flags = LIBRAW_DECODER_LEGACY;",
          "696:     }",
          "697:   else",
          "698:     {",
          "699:       d_info->decoder_name = \"Unknown unpack function\";",
          "700:       d_info->decoder_flags = LIBRAW_DECODER_NOTSET;",
          "701:     }",
          "702:   return LIBRAW_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "709:     real_max = C.data_maximum;",
          "710:     if (real_max > 0 && real_max < C.maximum && real_max > C.maximum* auto_threshold)",
          "714:     return LIBRAW_SUCCESS;",
          "715: }",
          "",
          "[Removed Lines]",
          "711:         {",
          "712:             C.maximum = real_max;",
          "713:         }",
          "",
          "[Added Lines]",
          "720:       {",
          "721:         C.maximum = real_max;",
          "722:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "926:             S.height += S.height & 1;",
          "927:             S.width  += S.width  & 1;",
          "928:         }",
          "940:     IO.shrink = P1.filters && (O.half_size ||",
          "941:  ((O.threshold || O.aber[0] != 1 || O.aber[2] != 1) ));",
          "",
          "[Removed Lines]",
          "929:  libraw_decoder_info_t dinfo;",
          "930:  get_decoder_info(&dinfo);",
          "931:  if(dinfo.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "932:  {",
          "934:   S.raw_width = S.width;",
          "935:   S.left_margin = 0;",
          "936:   S.raw_height = S.height;",
          "937:   S.top_margin = 0;",
          "938:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "943:     S.iheight = (S.height + IO.shrink) >> IO.shrink;",
          "944:     S.iwidth  = (S.width  + IO.shrink) >> IO.shrink;",
          "977:     memmove(&imgdata.rawdata.color,&imgdata.color,sizeof(imgdata.color));",
          "978:     memmove(&imgdata.rawdata.sizes,&imgdata.sizes,sizeof(imgdata.sizes));",
          "",
          "[Removed Lines]",
          "946:     if(imgdata.idata.filters == 303979333U)",
          "947:      {",
          "949:   C.black = C.cblack[0];",
          "950:   C.cblack[0]=C.cblack[1]=C.cblack[2]=C.cblack[3]=0;",
          "951:   imgdata.idata.filters = 2;",
          "952:      }",
          "954:  if(imgdata.idata.filters == 0x5bb8445b)",
          "955:  {",
          "956:   C.black = 257;",
          "957:   C.cblack[0]=C.cblack[1]=C.cblack[2]=C.cblack[3]=0;",
          "958:   imgdata.idata.filters = 2;",
          "959:   S.width = 4030;",
          "960:   S.height = 3010;",
          "961:   S.top_margin = 2;",
          "962:   S.left_margin = 2;",
          "963:  }",
          "965:  if(imgdata.idata.filters == 0x5145bb84)",
          "966:  {",
          "967:   C.black = 1024;",
          "968:   C.cblack[0]=C.cblack[1]=C.cblack[2]=C.cblack[3]=0;",
          "969:   S.left_margin = 2;",
          "970:   S.top_margin = 1;",
          "971:   S.width = 4934;",
          "972:   S.height = 3290;",
          "973:   imgdata.idata.filters = 2;",
          "974:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "993:   else if (load_raw == &LibRaw::sony_load_raw)",
          "994:     C.maximum = 0x3ff0;",
          "995:   else if (",
          "999:     {",
          "1000:       C.maximum *=4;",
          "1001:       C.black *=4;",
          "",
          "[Removed Lines]",
          "996:    (load_raw == &LibRaw::sony_arw2_load_raw || (load_raw == &LibRaw::packed_load_raw && !strcasecmp(imgdata.idata.make,\"Sony\")))",
          "997:    && bl >= (C.black+C.cblack[0])*2",
          "998:    )",
          "",
          "[Added Lines]",
          "965:            (load_raw == &LibRaw::sony_arw2_load_raw || (load_raw == &LibRaw::packed_load_raw && !strcasecmp(imgdata.idata.make,\"Sony\")))",
          "966:            && bl >= (C.black+C.cblack[0])*2",
          "967:            )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1015:     CHECK_ORDER_LOW(LIBRAW_PROGRESS_IDENTIFY);",
          "1016:     try {",
          "1021:         RUN_CALLBACK(LIBRAW_PROGRESS_LOAD_RAW,0,2);",
          "1022:         if (O.shot_select >= P1.raw_count)",
          "",
          "[Removed Lines]",
          "1018:   if(!libraw_internal_data.internal_data.input)",
          "1019:    return LIBRAW_INPUT_CLOSED;",
          "",
          "[Added Lines]",
          "987:  if(!libraw_internal_data.internal_data.input)",
          "988:           return LIBRAW_INPUT_CLOSED;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1120:                     delete d;",
          "1121:                   }",
          "1122:                 free(_rawspeed_buffer);",
          "1124:               } catch (...) {",
          "1125:               imgdata.process_warnings |= LIBRAW_WARN_RAWSPEED_PROBLEM;",
          "",
          "[Removed Lines]",
          "1123:               imgdata.process_warnings |= LIBRAW_WARN_RAWSPEED_PROCESSED;",
          "",
          "[Added Lines]",
          "1092:                 imgdata.process_warnings |= LIBRAW_WARN_RAWSPEED_PROCESSED;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1143:                 S.iwidth = S.width;",
          "1144:                 S.iheight= S.height;",
          "1145:                 IO.shrink = 0;",
          "1148:                 imgdata.rawdata.raw_alloc = 0;",
          "1149:                 imgdata.image = (ushort (*)[4]) calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "1150:               }",
          "1151:             ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
          "1156:             (this->*load_raw)();",
          "1165:           }",
          "1167:         if(imgdata.rawdata.raw_image)",
          "",
          "[Removed Lines]",
          "1146:     S.raw_pitch = S.width*8;",
          "1153:    unsigned m_save = C.maximum;",
          "1154:    if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))",
          "1155:     C.maximum=65535;",
          "1157:    if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))",
          "1158:     C.maximum = m_save;",
          "1159:    if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1160:    {",
          "1162:     imgdata.rawdata.raw_alloc = imgdata.image;",
          "1163:     imgdata.image = 0;",
          "1164:    }",
          "",
          "[Added Lines]",
          "1115:   S.raw_pitch = S.width*8;",
          "1122:             unsigned m_save = C.maximum;",
          "1123:             if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))",
          "1124:               C.maximum=65535;",
          "1126:             if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))",
          "1127:               C.maximum = m_save;",
          "1128:             if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1129:               {",
          "1131:                 imgdata.rawdata.raw_alloc = imgdata.image;",
          "1132:                 imgdata.image = 0;",
          "1134:                 S.raw_width = S.width;",
          "1135:                 S.left_margin = 0;",
          "1136:                 S.raw_height = S.height;",
          "1137:                 S.top_margin = 0;",
          "1138:               }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1312:             }",
          "1313:         else if(decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1314:             {",
          "1347:             }",
          "",
          "[Removed Lines]",
          "1315:                if(imgdata.rawdata.color4_image)",
          "1316:     {",
          "1317:      if(S.width*8 == S.raw_pitch)",
          "1318:       memmove(imgdata.image,imgdata.rawdata.color4_image,S.width*S.height*sizeof(*imgdata.image));",
          "1319:      else",
          "1320:      {",
          "1321:       for(int row = 0; row < S.height; row++)",
          "1322:        memmove(&imgdata.image[row*S.width],",
          "1323:        &imgdata.rawdata.color4_image[(row+S.top_margin)*S.raw_pitch/8+S.left_margin],",
          "1324:        S.width*sizeof(*imgdata.image));",
          "1325:      }",
          "1326:     }",
          "1327:       else if(imgdata.rawdata.color3_image)",
          "1328:       {",
          "1329:        unsigned char *c3image = (unsigned char*) imgdata.rawdata.color3_image;",
          "1330:        for(int row = 0; row < S.height; row++)",
          "1331:        {",
          "1332:         ushort (*srcrow)[3] = (ushort (*)[3]) &c3image[(row+S.top_margin)*S.raw_pitch];",
          "1333:         ushort (*dstrow)[4] = (ushort (*)[4]) &imgdata.image[row*S.width];",
          "1334:         for(int col=0; col < S.width; col++)",
          "1335:         {",
          "1336:          for(int c=0; c< 3; c++)",
          "1337:           dstrow[col][c] = srcrow[S.left_margin+col][c];",
          "1338:          dstrow[col][3]=0;",
          "1339:         }",
          "1340:        }",
          "1341:       }",
          "1342:       else",
          "1343:       {",
          "1345:        throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "1346:       }",
          "",
          "[Added Lines]",
          "1289:               if(imgdata.rawdata.color4_image)",
          "1290:                 {",
          "1291:                   if(S.width*8 == S.raw_pitch)",
          "1292:                     memmove(imgdata.image,imgdata.rawdata.color4_image,S.width*S.height*sizeof(*imgdata.image));",
          "1293:                   else",
          "1294:                     {",
          "1295:                       for(int row = 0; row < S.height; row++)",
          "1296:                         memmove(&imgdata.image[row*S.width],",
          "1297:                                 &imgdata.rawdata.color4_image[(row+S.top_margin)*S.raw_pitch/8+S.left_margin],",
          "1298:                                 S.width*sizeof(*imgdata.image));",
          "1299:                     }",
          "1300:                 }",
          "1301:               else if(imgdata.rawdata.color3_image)",
          "1302:                 {",
          "1303:                   unsigned char *c3image = (unsigned char*) imgdata.rawdata.color3_image;",
          "1304:                   for(int row = 0; row < S.height; row++)",
          "1305:                     {",
          "1306:                       ushort (*srcrow)[3] = (ushort (*)[3]) &c3image[(row+S.top_margin)*S.raw_pitch];",
          "1307:                       ushort (*dstrow)[4] = (ushort (*)[4]) &imgdata.image[row*S.width];",
          "1308:                       for(int col=0; col < S.width; col++)",
          "1309:                         {",
          "1310:                           for(int c=0; c< 3; c++)",
          "1311:                             dstrow[col][c] = srcrow[S.left_margin+col][c];",
          "1312:                           dstrow[col][3]=0;",
          "1313:                         }",
          "1314:                     }",
          "1315:                 }",
          "1316:               else",
          "1317:                 {",
          "1319:                   throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "1320:                 }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1383: void LibRaw::phase_one_subtract_black(ushort *src, ushort *dest)",
          "1384: {",
          "1423: }",
          "1425: void LibRaw::copy_fuji_uncropped(unsigned short cblack[4],unsigned short *dmaxp)",
          "1426: {",
          "1428: #if defined(LIBRAW_USE_OPENMP)",
          "1429: #pragma omp parallel for default(shared)",
          "1430: #endif",
          "1459: #if defined(LIBRAW_USE_OPENMP)",
          "1460: #pragma omp critical(dataupdate)",
          "1461: #endif",
          "1467: }",
          "1469: void LibRaw::copy_bayer(unsigned short cblack[4],unsigned short *dmaxp)",
          "",
          "[Removed Lines]",
          "1386:  if(O.user_black<0 && O.user_cblack[0] <= -1000000 && O.user_cblack[1] <= -1000000 && O.user_cblack[2] <= -1000000 && O.user_cblack[3] <= -1000000)",
          "1387:  {",
          "1388:   for(int row = 0; row < S.raw_height; row++)",
          "1389:   {",
          "1390:    ushort bl = imgdata.color.phase_one_data.t_black - imgdata.rawdata.ph1_black[row][0];",
          "1391:    for(int col=0; col < imgdata.color.phase_one_data.split_col && col < S.raw_width; col++)",
          "1392:    {",
          "1393:     int idx  = row*S.raw_width + col;",
          "1394:     ushort val = src[idx];",
          "1395:     dest[idx] = val>bl?val-bl:0;",
          "1396:    }",
          "1397:    bl = imgdata.color.phase_one_data.t_black - imgdata.rawdata.ph1_black[row][1];",
          "1398:    for(int col=imgdata.color.phase_one_data.split_col; col < S.raw_width; col++)",
          "1399:    {",
          "1400:     int idx  = row*S.raw_width + col;",
          "1401:     ushort val = src[idx];",
          "1402:     dest[idx] = val>bl?val-bl:0;",
          "1403:    }",
          "1404:   }",
          "1405:  }",
          "1406:  else // black set by user interaction",
          "1407:  {",
          "1409:   for(int row = 0; row < S.raw_height; row++)",
          "1410:   {",
          "1411:    unsigned short cblk[16];",
          "1412:    for(int cc=0; cc<16;cc++)",
          "1413:     cblk[cc]=C.cblack[fcol(row,cc)];",
          "1414:    for(int col = 0; col < S.raw_width; col++)",
          "1415:    {",
          "1416:     int idx  = row*S.raw_width + col;",
          "1417:     ushort val = src[idx];",
          "1418:     ushort bl = cblk[col&0xf];",
          "1419:     dest[idx] = val>bl?val-bl:0;",
          "1420:    }",
          "1421:   }",
          "1422:  }",
          "1427:                 int row;",
          "1431:                 for (row=0; row < S.raw_height-S.top_margin*2; row++)",
          "1432:                   {",
          "1433:                     int col;",
          "1434:                     unsigned short ldmax = 0;",
          "1435:                     for (col=0; col < IO.fuji_width << !libraw_internal_data.unpacker_data.fuji_layout; col++)",
          "1436:                       {",
          "1437:                         unsigned r,c;",
          "1438:                         if (libraw_internal_data.unpacker_data.fuji_layout) {",
          "1439:                           r = IO.fuji_width - 1 - col + (row >> 1);",
          "1440:                           c = col + ((row+1) >> 1);",
          "1441:                         } else {",
          "1442:                           r = IO.fuji_width - 1 + row - (col >> 1);",
          "1443:                           c = row + ((col+1) >> 1);",
          "1444:                         }",
          "1445:                         if (r < S.height && c < S.width)",
          "1446:                           {",
          "1447:                             unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_pitch/2+(col+S.left_margin)];",
          "1448:                             int cc = FC(r,c);",
          "1449:                             if(val>cblack[cc])",
          "1450:                               {",
          "1451:                                 val-=cblack[cc];",
          "1452:                                 if(val>ldmax)ldmax = val;",
          "1453:                               }",
          "1454:                             else",
          "1455:                               val = 0;",
          "1456:                             imgdata.image[((r)>>IO.shrink)*S.iwidth+((c)>>IO.shrink)][cc] = val;",
          "1457:                           }",
          "1458:                       }",
          "1462:                     {",
          "1463:                       if(*dmaxp < ldmax)",
          "1465:                     }",
          "1466:                   }",
          "",
          "[Added Lines]",
          "1360:   if(O.user_black<0 && O.user_cblack[0] <= -1000000 && O.user_cblack[1] <= -1000000 && O.user_cblack[2] <= -1000000 && O.user_cblack[3] <= -1000000)",
          "1361:     {",
          "1362:       for(int row = 0; row < S.raw_height; row++)",
          "1363:         {",
          "1364:           ushort bl = imgdata.color.phase_one_data.t_black - imgdata.rawdata.ph1_black[row][0];",
          "1365:           for(int col=0; col < imgdata.color.phase_one_data.split_col && col < S.raw_width; col++)",
          "1366:             {",
          "1367:               int idx  = row*S.raw_width + col;",
          "1368:               ushort val = src[idx];",
          "1369:               dest[idx] = val>bl?val-bl:0;",
          "1370:             }",
          "1371:           bl = imgdata.color.phase_one_data.t_black - imgdata.rawdata.ph1_black[row][1];",
          "1372:           for(int col=imgdata.color.phase_one_data.split_col; col < S.raw_width; col++)",
          "1373:             {",
          "1374:               int idx  = row*S.raw_width + col;",
          "1375:               ushort val = src[idx];",
          "1376:               dest[idx] = val>bl?val-bl:0;",
          "1377:             }",
          "1378:         }",
          "1379:     }",
          "1380:   else // black set by user interaction",
          "1381:     {",
          "1383:       for(int row = 0; row < S.raw_height; row++)",
          "1384:         {",
          "1385:           unsigned short cblk[16];",
          "1386:           for(int cc=0; cc<16;cc++)",
          "1387:             cblk[cc]=C.cblack[fcol(row,cc)];",
          "1388:           for(int col = 0; col < S.raw_width; col++)",
          "1389:             {",
          "1390:               int idx  = row*S.raw_width + col;",
          "1391:               ushort val = src[idx];",
          "1392:               ushort bl = cblk[col&0xf];",
          "1393:               dest[idx] = val>bl?val-bl:0;",
          "1394:             }",
          "1395:         }",
          "1396:     }",
          "1401:   int row;",
          "1405:   for (row=0; row < S.raw_height-S.top_margin*2; row++)",
          "1406:     {",
          "1407:       int col;",
          "1408:       unsigned short ldmax = 0;",
          "1409:       for (col=0; col < IO.fuji_width << !libraw_internal_data.unpacker_data.fuji_layout; col++)",
          "1410:         {",
          "1411:           unsigned r,c;",
          "1412:           if (libraw_internal_data.unpacker_data.fuji_layout) {",
          "1413:             r = IO.fuji_width - 1 - col + (row >> 1);",
          "1414:             c = col + ((row+1) >> 1);",
          "1415:           } else {",
          "1416:             r = IO.fuji_width - 1 + row - (col >> 1);",
          "1417:             c = row + ((col+1) >> 1);",
          "1418:           }",
          "1419:           if (r < S.height && c < S.width)",
          "1420:             {",
          "1421:               unsigned short val = imgdata.rawdata.raw_image[(row+S.top_margin)*S.raw_pitch/2+(col+S.left_margin)];",
          "1422:               int cc = FC(r,c);",
          "1423:               if(val>cblack[cc])",
          "1424:                 {",
          "1425:                   val-=cblack[cc];",
          "1426:                   if(val>ldmax)ldmax = val;",
          "1427:                 }",
          "1428:               else",
          "1429:                 val = 0;",
          "1430:               imgdata.image[((r)>>IO.shrink)*S.iwidth+((c)>>IO.shrink)][cc] = val;",
          "1431:             }",
          "1432:         }",
          "1436:       {",
          "1437:         if(*dmaxp < ldmax)",
          "1439:       }",
          "1440:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1548:             crop[0] = (crop[0]/16)*16;",
          "1549:             crop[1] = (crop[1]/16)*16;",
          "1550:           }",
          "1552:           {",
          "1553:             crop[0] = (crop[0]/6)*6;",
          "1554:             crop[1] = (crop[1]/6)*6;",
          "",
          "[Removed Lines]",
          "1551:         else if(imgdata.idata.filters == 2)",
          "",
          "[Added Lines]",
          "1525:         else if(imgdata.idata.filters == 9)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1668:       }",
          "1669:     else if(decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1670:       {",
          "1706:       }",
          "",
          "[Removed Lines]",
          "1671:   if(imgdata.rawdata.color4_image)",
          "1672:   {",
          "1673:    if(S.raw_pitch != S.width*8)",
          "1674:    {",
          "1675:     for(int row = 0; row < S.height; row++)",
          "1676:      memmove(&imgdata.image[row*S.width],",
          "1677:      &imgdata.rawdata.color4_image[(row+S.top_margin)*S.raw_pitch/8+S.left_margin],",
          "1678:      S.width*sizeof(*imgdata.image));",
          "1679:    }",
          "1680:    else",
          "1681:    {",
          "1683:     memmove(imgdata.image,imgdata.rawdata.color4_image,S.width*S.height*sizeof(*imgdata.image));",
          "1684:    }",
          "1685:   }",
          "1686:   else if(imgdata.rawdata.color3_image)",
          "1687:   {",
          "1688:    unsigned char *c3image = (unsigned char*) imgdata.rawdata.color3_image;",
          "1689:    for(int row = 0; row < S.height; row++)",
          "1690:    {",
          "1691:     ushort (*srcrow)[3] = (ushort (*)[3]) &c3image[(row+S.top_margin)*S.raw_pitch];",
          "1692:     ushort (*dstrow)[4] = (ushort (*)[4]) &imgdata.image[row*S.width];",
          "1693:     for(int col=0; col < S.width; col++)",
          "1694:     {",
          "1695:      for(int c=0; c< 3; c++)",
          "1696:       dstrow[col][c] = srcrow[S.left_margin+col][c];",
          "1697:      dstrow[col][3]=0;",
          "1698:     }",
          "1699:    }",
          "1700:   }",
          "1701:   else",
          "1702:   {",
          "1704:    throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "1705:   }",
          "",
          "[Added Lines]",
          "1645:         if(imgdata.rawdata.color4_image)",
          "1646:           {",
          "1647:             if(S.raw_pitch != S.width*8)",
          "1648:               {",
          "1649:                 for(int row = 0; row < S.height; row++)",
          "1650:                   memmove(&imgdata.image[row*S.width],",
          "1651:                           &imgdata.rawdata.color4_image[(row+S.top_margin)*S.raw_pitch/8+S.left_margin],",
          "1652:                           S.width*sizeof(*imgdata.image));",
          "1653:               }",
          "1654:             else",
          "1655:               {",
          "1657:                 memmove(imgdata.image,imgdata.rawdata.color4_image,S.width*S.height*sizeof(*imgdata.image));",
          "1658:               }",
          "1659:           }",
          "1660:         else if(imgdata.rawdata.color3_image)",
          "1661:           {",
          "1662:             unsigned char *c3image = (unsigned char*) imgdata.rawdata.color3_image;",
          "1663:             for(int row = 0; row < S.height; row++)",
          "1664:               {",
          "1665:                 ushort (*srcrow)[3] = (ushort (*)[3]) &c3image[(row+S.top_margin)*S.raw_pitch];",
          "1666:                 ushort (*dstrow)[4] = (ushort (*)[4]) &imgdata.image[row*S.width];",
          "1667:                 for(int col=0; col < S.width; col++)",
          "1668:                   {",
          "1669:                     for(int c=0; c< 3; c++)",
          "1670:                       dstrow[col][c] = srcrow[S.left_margin+col][c];",
          "1671:                     dstrow[col][3]=0;",
          "1672:                   }",
          "1673:               }",
          "1674:           }",
          "1675:         else",
          "1676:           {",
          "1678:             throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "1679:           }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1739: libraw_processed_image_t * LibRaw::dcraw_make_mem_thumb(int *errcode)",
          "1740: {",
          "1741:     if(!T.thumb)",
          "1754:     if (T.tformat == LIBRAW_THUMBNAIL_BITMAP)",
          "1755:         {",
          "1756:             libraw_processed_image_t * ret =",
          "",
          "[Removed Lines]",
          "1742:         {",
          "1743:             if ( !ID.toffset)",
          "1744:                 {",
          "1745:                     if(errcode) *errcode= LIBRAW_NO_THUMBNAIL;",
          "1746:                 }",
          "1747:             else",
          "1748:                 {",
          "1749:                     if(errcode) *errcode= LIBRAW_OUT_OF_ORDER_CALL;",
          "1750:                 }",
          "1751:             return NULL;",
          "1752:         }",
          "",
          "[Added Lines]",
          "1716:       {",
          "1717:         if ( !ID.toffset)",
          "1718:           {",
          "1719:             if(errcode) *errcode= LIBRAW_NO_THUMBNAIL;",
          "1720:           }",
          "1721:         else",
          "1722:           {",
          "1723:             if(errcode) *errcode= LIBRAW_OUT_OF_ORDER_CALL;",
          "1724:           }",
          "1725:         return NULL;",
          "1726:       }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1855:     if(libraw_internal_data.output_data.histogram)",
          "1856:         {",
          "1867:         }",
          "1869:     int s_iheight = S.iheight;",
          "",
          "[Removed Lines]",
          "1857:             int perc, val, total, t_white=0x2000,c;",
          "1859:             if (IO.fuji_width) perc /= 2;",
          "1860:             if (!((O.highlight & ~2) || O.no_auto_bright))",
          "1861:                 for (t_white=c=0; c < P1.colors; c++) {",
          "1862:                     for (val=0x2000, total=0; --val > 32; )",
          "1863:                         if ((total += libraw_internal_data.output_data.histogram[c][val]) > perc) break;",
          "1864:                     if (t_white < val) t_white = val;",
          "1865:                 }",
          "1866:              gamma_curve (O.gamm[0], O.gamm[1], 2, (t_white << 3)/O.bright);",
          "",
          "[Added Lines]",
          "1831:           int perc, val, total, t_white=0x2000,c;",
          "1833:           if (IO.fuji_width) perc /= 2;",
          "1834:           if (!((O.highlight & ~2) || O.no_auto_bright))",
          "1835:             for (t_white=c=0; c < P1.colors; c++) {",
          "1836:               for (val=0x2000, total=0; --val > 32; )",
          "1837:                 if ((total += libraw_internal_data.output_data.histogram[c][val]) > perc) break;",
          "1838:               if (t_white < val) t_white = val;",
          "1839:             }",
          "1840:           gamma_curve (O.gamm[0], O.gamm[1], 2, (t_white << 3)/O.bright);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1884:     rstep = flip_index (1, 0) - flip_index (0, S.width);",
          "1886:     for (row=0; row < S.height; row++, soff += rstep)",
          "1913:         }",
          "1915:     S.iheight = s_iheight;",
          "1916:     S.iwidth = s_iwidth;",
          "",
          "[Removed Lines]",
          "1887:         {",
          "1888:             uchar *bufp = ((uchar*)scan0)+row*stride;",
          "1889:             ppm2 = (ushort*) (ppm = bufp);",
          "1891:             if (bgr) {",
          "1892:                 if (O.output_bps == 8) {",
          "1893:                     for (col=0; col < S.width; col++, soff += cstep)",
          "1894:                         FORBGR *ppm++ = imgdata.color.curve[imgdata.image[soff][c]]>>8;",
          "1895:                 }",
          "1896:                 else {",
          "1897:                     for (col=0; col < S.width; col++, soff += cstep)",
          "1898:                         FORBGR *ppm2++ = imgdata.color.curve[imgdata.image[soff][c]];",
          "1899:                 }",
          "1900:             }",
          "1901:             else {",
          "1902:                 if (O.output_bps == 8) {",
          "1903:                     for (col=0; col < S.width; col++, soff += cstep)",
          "1904:                         FORRGB *ppm++ = imgdata.color.curve[imgdata.image[soff][c]]>>8;",
          "1905:                 }",
          "1906:                 else {",
          "1907:                     for (col=0; col < S.width; col++, soff += cstep)",
          "1908:                         FORRGB *ppm2++ = imgdata.color.curve[imgdata.image[soff][c]];",
          "1909:                 }",
          "1910:             }",
          "",
          "[Added Lines]",
          "1861:       {",
          "1862:         uchar *bufp = ((uchar*)scan0)+row*stride;",
          "1863:         ppm2 = (ushort*) (ppm = bufp);",
          "1865:         if (bgr) {",
          "1866:           if (O.output_bps == 8) {",
          "1867:             for (col=0; col < S.width; col++, soff += cstep)",
          "1868:               FORBGR *ppm++ = imgdata.color.curve[imgdata.image[soff][c]]>>8;",
          "1869:           }",
          "1870:           else {",
          "1871:             for (col=0; col < S.width; col++, soff += cstep)",
          "1872:               FORBGR *ppm2++ = imgdata.color.curve[imgdata.image[soff][c]];",
          "1873:           }",
          "1875:         else {",
          "1876:           if (O.output_bps == 8) {",
          "1877:             for (col=0; col < S.width; col++, soff += cstep)",
          "1878:               FORRGB *ppm++ = imgdata.color.curve[imgdata.image[soff][c]]>>8;",
          "1879:           }",
          "1880:           else {",
          "1881:             for (col=0; col < S.width; col++, soff += cstep)",
          "1882:               FORRGB *ppm2++ = imgdata.color.curve[imgdata.image[soff][c]];",
          "1883:           }",
          "1884:         }",
          "1887:       }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2549:                 SET_PROC_FLAG(LIBRAW_PROGRESS_REMOVE_ZEROES);",
          "2550:             }",
          "2555:         if(O.bad_pixels && no_crop)",
          "2556:             {",
          "2557:                 bad_pixels(O.bad_pixels);",
          "",
          "[Removed Lines]",
          "2552:         if(O.half_size)",
          "2553:             O.four_color_rgb = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2627:         if (P1.filters)",
          "2628:             {",
          "2629:                 if (noiserd>0 && P1.colors==3 && P1.filters) fbdd(noiserd);",
          "2631:                 if (quality == 0)",
          "2632:                     lin_interpolate();",
          "2634:                     vng_interpolate();",
          "2636:                     ppg_interpolate();",
          "2638:                 else if (quality == 3)",
          "2641:                 else if (quality == 4)",
          "2645:                 else if (quality == 5)",
          "2647:                 else if (quality == 6)",
          "2649:                 else if (quality == 7)",
          "2651:                 else if (quality == 8)",
          "2653:                 else if (quality == 9)",
          "2657:                 else if (quality == 10)",
          "2660:                 else if (quality == 11)",
          "2662:                 else if (quality == 12)",
          "2665:                 else",
          "2668:                 SET_PROC_FLAG(LIBRAW_PROGRESS_INTERPOLATE);",
          "2669:             }",
          "2670:         if (IO.mix_green)",
          "",
          "[Removed Lines]",
          "2633:                 else if (quality == 1 || P1.colors > 3 || P1.filters < 1000)",
          "2635:                 else if (quality == 2)",
          "2639:                     ahd_interpolate(); // really don't need it here due to fallback op",
          "2642:                     dcb(iterations, dcb_enhance);",
          "2646:                     ahd_interpolate_mod();",
          "2648:                     afd_interpolate_pl(2,1);",
          "2650:                     vcd_interpolate(0);",
          "2652:                     vcd_interpolate(12);",
          "2654:                     lmmse_interpolate(1);",
          "2658:                     amaze_demosaic_RT();",
          "2661:                     dht_interpolate();",
          "2663:                     aahd_interpolate();",
          "2666:                     ahd_interpolate();",
          "",
          "[Added Lines]",
          "2603:                 else if (quality == 1 || P1.colors > 3)",
          "2605:                 else if (quality == 2 && P1.filters > 1000)",
          "2607:                 else if (P1.filters == 9)",
          "2608:                   {",
          "2610:                     fprintf(stderr,\"Xtrans int\\n\");",
          "2611:                     xtrans_interpolate(quality>2?3:1);",
          "2612:                   }",
          "2614:                   ahd_interpolate(); // really don't need it here due to fallback op",
          "2616:                   dcb(iterations, dcb_enhance);",
          "2619:                   ahd_interpolate_mod();",
          "2621:                   afd_interpolate_pl(2,1);",
          "2623:                   vcd_interpolate(0);",
          "2625:                   vcd_interpolate(12);",
          "2627:                   lmmse_interpolate(1);",
          "2631:                   amaze_demosaic_RT();",
          "2634:                   dht_interpolate();",
          "2636:                   aahd_interpolate();",
          "2639:                   ahd_interpolate();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2754: \"AVT F-201C\",",
          "2755: \"AVT F-510C\",",
          "2756: \"AVT F-810C\",",
          "2757: \"Canon PowerShot 600\",",
          "2758: \"Canon PowerShot A5\",",
          "2759: \"Canon PowerShot A5 Zoom\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2730: \"Baumer TXG14\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2819: \"Canon EOS 40D\",",
          "2820: \"Canon EOS 50D\",",
          "2821: \"Canon EOS 60D\",",
          "2823: \"Canon EOS 300D / Digital Rebel / Kiss Digital\",",
          "2824: \"Canon EOS 350D / Digital Rebel XT / Kiss Digital N\",",
          "2825: \"Canon EOS 400D / Digital Rebel XTi / Kiss Digital X\",",
          "",
          "[Removed Lines]",
          "2822: \"Canon EOS 100D/ Digital Rebel SL1\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2828: \"Canon EOS 550D / Digital Rebel T2i / Kiss Digital X4\",",
          "2829: \"Canon EOS 600D / Digital Rebel T3i / Kiss Digital X5\",",
          "2830: \"Canon EOS 650D / Digital Rebel T4i / Kiss Digital X6i\",",
          "2832: \"Canon EOS 1000D / Digital Rebel XS / Kiss Digital F\",",
          "2833: \"Canon EOS 1100D / Digital Rebel T3 / Kiss Digital X50\",",
          "2834: \"Canon EOS D2000C\",",
          "2835: \"Canon EOS M\",",
          "2836: \"Canon EOS-1D\",",
          "",
          "[Removed Lines]",
          "2831: \"Canon EOS 700D / Digital Rebel T54i\",",
          "",
          "[Added Lines]",
          "2804: \"Canon EOS 700D / Digital Rebel T5i\",",
          "2805: \"Canon EOS 100D / Digital Rebel SL1\",",
          "2808: \"Canon EOS C500\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3042: \"Nikon D3200\",",
          "3043: \"Nikon D5000\",",
          "3044: \"Nikon D5100\",",
          "3045: \"Nikon D7000\",",
          "3046: \"Nikon D800\",",
          "3047: \"Nikon D800E\",",
          "3048: \"Nikon 1 J1\",",
          "3049: \"Nikon 1 S1\",",
          "3050: \"Nikon 1 V1\",",
          "3052: \"Nikon 1 V2\",",
          "3054: \"Nikon E700 (\\\"DIAG RAW\\\" hack)\",",
          "3055: \"Nikon E800 (\\\"DIAG RAW\\\" hack)\",",
          "3056: \"Nikon E880 (\\\"DIAG RAW\\\" hack)\",",
          "",
          "[Removed Lines]",
          "3051: \"Nikon 1 J2\",",
          "3053: \"Nikon 1 J3\",",
          "",
          "[Added Lines]",
          "3020: \"Nikon D5200\",",
          "3022: \"Nikon D7100\",",
          "3026: \"Nikon 1 J2\",",
          "3027: \"Nikon 1 J3\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3123: \"Olympus SP560UZ\",",
          "3124: \"Olympus SP570UZ\",",
          "3125: \"Olympus XZ-1\",",
          "3127: \"Olympus XZ-2\",",
          "3128: \"Panasonic DMC-FZ8\",",
          "3129: \"Panasonic DMC-FZ18\",",
          "3130: \"Panasonic DMC-FZ28\",",
          "",
          "[Removed Lines]",
          "3126: \"Olympus XZ-10\",",
          "",
          "[Added Lines]",
          "3104: \"Olympus XZ-10\",",
          "3105: \"OmniVision OV5647 (Raspberry Pi)\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3146: \"Panasonic DMC-GF2\",",
          "3147: \"Panasonic DMC-GF3\",",
          "3148: \"Panasonic DMC-GF5\",",
          "3149: \"Panasonic DMC-GH1\",",
          "3150: \"Panasonic DMC-GH2\",",
          "3151: \"Panasonic DMC-GH3\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3127: \"Panasonic DMC-GF6\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3213: \"Samsung NX20\",",
          "3214: \"Samsung NX200\",",
          "3215: \"Samsung NX210\",",
          "3216: \"Samsung NX1000\",",
          "3217: \"Samsung WB550\",",
          "3218: \"Samsung WB2000\",",
          "3219: \"Samsung S85 (hacked)\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3195: \"Samsung NX300\",",
          "3197: \"Samsung NX1100\",",
          "3198: \"Samsung NX2000\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3264: \"Sony DSLR-A850\",",
          "3265: \"Sony DSLR-A900\",",
          "3266: \"Sony NEX-3\",",
          "3267: \"Sony NEX-5\",",
          "3268: \"Sony NEX-5N\",",
          "3269: \"Sony NEX-5R\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3249: \"Sony NEX-3N\",",
          "",
          "---------------"
        ],
        "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
          "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"libraw/libraw_types.h\"",
          "30: #include \"libraw/libraw.h\"",
          "31: #include \"libraw/libraw_datastream.h\"",
          "33: #include <sys/stat.h>",
          "34: #ifdef USE_JASPER",
          "",
          "[Removed Lines]",
          "32: #include \"internal/libraw_bytebuffer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: #define NO_JPEG",
          "43: #endif",
          "72: int LibRaw_abstract_datastream::tempbuffer_open(void  *buf, size_t size)",
          "73: {",
          "74:     if(substream) return EBUSY;",
          "",
          "[Removed Lines]",
          "46: LibRaw_byte_buffer::LibRaw_byte_buffer(unsigned sz)",
          "47: {",
          "48:     buf=0; size=sz; offt=0; do_free=0;",
          "49:     if(size)",
          "50:         {",
          "51:             buf = (unsigned char*)malloc(size); do_free=1;",
          "52:         }",
          "53: }",
          "55: void LibRaw_byte_buffer::set_buffer(void *bb, unsigned int sz)",
          "56: {",
          "57:     buf = (unsigned char*)bb; size = sz; offt=0; do_free=0;",
          "58: }",
          "60: LibRaw_byte_buffer::~LibRaw_byte_buffer()",
          "61: {",
          "62:     if(do_free) free(buf);",
          "63: }",
          "65: LibRaw_byte_buffer *LibRaw_abstract_datastream::make_byte_buffer(unsigned int sz)",
          "66: {",
          "67:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(sz);",
          "68:     read(ret->get_buffer(),sz,1);",
          "69:     return ret;",
          "70: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:         case SEEK_END: dir = std::ios_base::end; break;",
          "175:         default: dir = std::ios_base::beg;",
          "176:         }",
          "178: }",
          "180: INT64 LibRaw_file_datastream::tell()",
          "",
          "[Removed Lines]",
          "177:     return (int)f->pubseekoff((long)o, dir);",
          "",
          "[Added Lines]",
          "149:     return f->pubseekoff((long)o, dir) < 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:     return scanf_res;",
          "440: }",
          "451: int LibRaw_buffer_datastream::eof()",
          "452: {",
          "453:     if(substream) return substream->eof();",
          "",
          "[Removed Lines]",
          "442: LibRaw_byte_buffer *LibRaw_buffer_datastream::make_byte_buffer(unsigned int sz)",
          "443: {",
          "444:     LibRaw_byte_buffer *ret = new LibRaw_byte_buffer(0);",
          "445:     if(streampos + sz > streamsize)",
          "446:         sz = streamsize - streampos;",
          "447:     ret->set_buffer(buf+streampos,sz);",
          "448:     return ret;",
          "449: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a667bb32cf9c8a7e553af91e25f84303a5caf7ad",
      "candidate_info": {
        "commit_hash": "a667bb32cf9c8a7e553af91e25f84303a5caf7ad",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/a667bb32cf9c8a7e553af91e25f84303a5caf7ad",
        "files": [
          "Changelog.txt",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "libraw/libraw_types.h",
          "src/libraw_cxx.cpp"
        ],
        "message": "improved substract_black code, fixed minor problem in lossy DNG tone curve generation",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "libraw/libraw_types.h||libraw/libraw_types.h",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ],
          "candidate": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2345:       coeff[i] = getreal(12);",
          "2346:     for (i=0; i < 256; i++) {",
          "2347:       for (tot=j=0; j <= deg; j++)",
          "2349:       t_curve[c][i] = tot*0xffff;",
          "2350:     }",
          "2351:   }",
          "",
          "[Removed Lines]",
          "2348:  tot += coeff[j] * pow(i/255.0f, (int)j);",
          "",
          "[Added Lines]",
          "2348:  tot += coeff[j] * pow(i/255.0, (int)j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4389:   }",
          "4390: #endif",
          "4391:   size = iheight*iwidth;",
          "4393:   scale_colors_loop(scale_mul);",
          "4394: #else",
          "4395:   for (i=0; i < size*4; i++) {",
          "",
          "[Removed Lines]",
          "4392: #ifdef LIBRAW_LIBRARY_BUILD__1",
          "",
          "[Added Lines]",
          "4392: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2076:       coeff[i] = getreal(12);",
          "2077:     for (i=0; i < 256; i++) {",
          "2078:       for (tot=j=0; j <= deg; j++)",
          "2080:       t_curve[c][i] = tot*0xffff;",
          "2081:     }",
          "2082:   }",
          "",
          "[Removed Lines]",
          "2079:  tot += coeff[j] * pow(i/255.0f, (int)j);",
          "",
          "[Added Lines]",
          "2079:  tot += coeff[j] * pow(i/255.0, (int)j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3249:   }",
          "3250: #endif",
          "3251:   size = iheight*iwidth;",
          "3253:   scale_colors_loop(scale_mul);",
          "3254: #else",
          "3255:   for (i=0; i < size*4; i++) {",
          "",
          "[Removed Lines]",
          "3252: #ifdef LIBRAW_LIBRARY_BUILD__1",
          "",
          "[Added Lines]",
          "3252: #ifdef LIBRAW_LIBRARY_BUILD",
          "",
          "---------------"
        ],
        "libraw/libraw_types.h||libraw/libraw_types.h": [
          "File: libraw/libraw_types.h -> libraw/libraw_types.h"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:     memmove(&imgdata.params.aber,&aber,sizeof(aber));",
          "190:     memmove(&imgdata.params.gamm,&gamm,sizeof(gamm));",
          "191:     memmove(&imgdata.params.greybox,&greybox,sizeof(greybox));",
          "194:     imgdata.params.bright=1;",
          "195:     imgdata.params.use_camera_matrix=-1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     memmove(&imgdata.params.cropbox,&cropbox,sizeof(cropbox));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522: int LibRaw::adjust_maximum()",
          "523: {",
          "525:     ushort real_max;",
          "526:     float  auto_threshold;",
          "",
          "[Removed Lines]",
          "524:     int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1638:     if((C.cblack[0] || C.cblack[1] || C.cblack[2] || C.cblack[3]))",
          "1639:         {",
          "1640: #define BAYERC(row,col,c) imgdata.image[((row) >> IO.shrink)*S.iwidth + ((col) >> IO.shrink)][c]",
          "1642:             for(i=0;i<4;i++)",
          "1643:                 cblk[i] = C.cblack[i];",
          "1657:             C.maximum -= C.black;",
          "1658:             ZERO(C.cblack);",
          "1659:             C.black = 0;",
          "",
          "[Removed Lines]",
          "1641:             int cblk[4],i,row,col,val,cc;",
          "1645:             for(row=0;row<S.height;row++)",
          "1646:                 for(col=0;col<S.width;col++)",
          "1647:                     {",
          "1648:                         cc=fcol(row,col);",
          "1649:                         val = BAYERC(row,col,cc);",
          "1650:                         if(val > cblk[cc])",
          "1651:                             val -= cblk[cc];",
          "1652:                         else",
          "1653:                             val = 0;",
          "1654:                         if(C.data_maximum < val) C.data_maximum = val;",
          "1655:                         BAYERC(row,col,cc) = val;",
          "1656:                     }",
          "",
          "[Added Lines]",
          "1641:             int cblk[4],i;",
          "1645:             int size = S.iheight * S.iwidth;",
          "1646: #define MIN(a,b) ((a) < (b) ? (a) : (b))",
          "1647: #define MAX(a,b) ((a) > (b) ? (a) : (b))",
          "1648: #define LIM(x,min,max) MAX(min,MIN(x,max))",
          "1649: #define CLIP(x) LIM(x,0,65535)",
          "1651:             for(i=0; i< size*4; i++)",
          "1652:               {",
          "1653:                 int val = imgdata.image[0][i];",
          "1654:                 val -= cblk[i & 3];",
          "1655:                 imgdata.image[0][i] = CLIP(val);",
          "1656:                 if(C.data_maximum < val) C.data_maximum = val;",
          "1657:               }",
          "1658: #undef MIN",
          "1659: #undef MAX",
          "1660: #undef LIM",
          "1661: #undef CLIP",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1662:     else",
          "1663:         {",
          "1671:         }",
          "1672: }",
          "",
          "[Removed Lines]",
          "1666:             int idx;",
          "1667:             ushort *p = (ushort*)imgdata.image;",
          "1668:             C.data_maximum = 0;",
          "1669:             for(idx=0;idx<S.height*S.width*4;idx++)",
          "1670:               if(C.data_maximum < p[idx]) C.data_maximum = p[idx];",
          "",
          "[Added Lines]",
          "1671:           int idx;",
          "1672:           ushort *p = (ushort*)imgdata.image;",
          "1673:           C.data_maximum = 0;",
          "1674:           for(idx=0;idx<S.iheight*S.iwidth*4;idx++)",
          "1675:             if(C.data_maximum < p[idx]) C.data_maximum = p[idx];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1758: void LibRaw::scale_colors_loop(float scale_mul[4])",
          "1759: {",
          "1768: }",
          "1770: int LibRaw::dcraw_process(void)",
          "",
          "[Removed Lines]",
          "1760:  unsigned size = S.iheight*S.iwidth;",
          "1761:  for (unsigned i=0; i < size*4; i++) {",
          "1762:   int val = imgdata.image[0][i];",
          "1763:   if (!val) continue;",
          "1764:   val -= C.cblack[i & 3];",
          "1765:   val *= scale_mul[i & 3];",
          "1766:   imgdata.image[0][i] = CLIP(val);",
          "1767:  }",
          "",
          "[Added Lines]",
          "1765:   unsigned size = S.iheight*S.iwidth;",
          "1767:   if(C.cblack[0]||C.cblack[1]||C.cblack[2]||C.cblack[3])",
          "1768:     {",
          "1769:       for (unsigned i=0; i < size*4; i++)",
          "1770:         {",
          "1771:           int val = imgdata.image[0][i];",
          "1772:           if (!val) continue;",
          "1773:           val -= C.cblack[i & 3];",
          "1774:           val *= scale_mul[i & 3];",
          "1775:           imgdata.image[0][i] = CLIP(val);",
          "1776:         }",
          "1777:     }",
          "1778:   else // BL is zero",
          "1779:     {",
          "1780:       for (unsigned i=0; i < size*4; i++)",
          "1781:         {",
          "1782:           int val = imgdata.image[0][i];",
          "1783:           val *= scale_mul[i & 3];",
          "1784:           imgdata.image[0][i] = CLIP(val);",
          "1785:         }",
          "1786:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1834:         C.black += i;",
          "1835:         if (O.user_black >= 0) C.black = O.user_black;",
          "1836:         for(c=0;c<4;c++) C.cblack[c] += C.black;",
          "1840:         subtract_black();",
          "",
          "[Removed Lines]",
          "1838:         printf(\"cblack calculated again: %d %d %d %d\\n\",C.cblack[0],C.cblack[1],C.cblack[2],C.cblack[3]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed11e9e8259b919f3af7e09b9e93b3f48e8ac44e",
      "candidate_info": {
        "commit_hash": "ed11e9e8259b919f3af7e09b9e93b3f48e8ac44e",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/ed11e9e8259b919f3af7e09b9e93b3f48e8ac44e",
        "files": [
          "Changelog.rus",
          "Changelog.txt",
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "libraw/libraw.h",
          "libraw/libraw_version.h",
          "src/libraw_c_api.cpp",
          "src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp"
        ],
        "message": "LibRaw 0.15.2",
        "before_after_code_files": [
          "Changelog.rus||Changelog.rus",
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "libraw/libraw.h||libraw/libraw.h",
          "libraw/libraw_version.h||libraw/libraw_version.h",
          "src/libraw_c_api.cpp||src/libraw_c_api.cpp",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp",
          "src/libraw_datastream.cpp||src/libraw_datastream.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ],
          "candidate": [
            "src/libraw_cxx.cpp||src/libraw_cxx.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Changelog.rus||Changelog.rus": [
          "File: Changelog.rus -> Changelog.rus",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: \ufeff2013-05-25 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "[Added Lines]",
          "1: \ufeff2013-05-26 Alex Tutubalin <lexa@lexa.ru>",
          "3:     \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u043a\u0435 \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u043d\u043e\u0446\u0432\u0435\u0442\u043d\u044b\u0445 (Foveon, sRAW) \u0444\u0430\u0439\u043b\u043e\u0432.",
          "7: 2013-05-25 Alex Tutubalin <lexa@lexa.ru>",
          "",
          "---------------"
        ],
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6850: #ifndef LIBRAW_LIBRARY_BUILD",
          "6851:   FILE *save=ifp;",
          "6852: #else",
          "6854:   if(ifp->wfname())",
          "6855:   {",
          "6856:    std::wstring rawfile(ifp->wfname());",
          "",
          "[Removed Lines]",
          "6853: #ifdef WIN32",
          "",
          "[Added Lines]",
          "6853: #if defined (WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5699: #ifndef LIBRAW_LIBRARY_BUILD",
          "5700:   FILE *save=ifp;",
          "5701: #else",
          "5703:   if(ifp->wfname())",
          "5704:   {",
          "5705:    std::wstring rawfile(ifp->wfname());",
          "",
          "[Removed Lines]",
          "5702: #ifdef WIN32",
          "",
          "[Added Lines]",
          "5702: #if defined (WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "libraw/libraw.h||libraw/libraw.h": [
          "File: libraw/libraw.h -> libraw/libraw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: DllDef    libraw_data_t       *libraw_init(unsigned int flags);",
          "54: DllDef    int                 libraw_open_file(libraw_data_t*, const char *);",
          "55: DllDef    int                 libraw_open_file_ex(libraw_data_t*, const char *, INT64 max_buff_sz);",
          "57: DllDef    int                 libraw_open_wfile(libraw_data_t*, const wchar_t *);",
          "58: DllDef    int                 libraw_open_wfile_ex(libraw_data_t*, const wchar_t *, INT64 max_buff_sz);",
          "59: #endif",
          "",
          "[Removed Lines]",
          "56: #ifdef WIN32",
          "",
          "[Added Lines]",
          "56: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     LibRaw(unsigned int flags = LIBRAW_OPTIONS_NONE);",
          "104:     libraw_output_params_t*     output_params_ptr() { return &imgdata.params;}",
          "105:     int                         open_file(const char *fname, INT64 max_buffered_sz=LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE);",
          "107:  int                         open_file(const wchar_t *fname, INT64 max_buffered_sz=LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE);",
          "108: #endif",
          "109:     int                         open_buffer(void *buffer, size_t size);",
          "",
          "[Removed Lines]",
          "106: #ifdef WIN32",
          "",
          "[Added Lines]",
          "106: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "libraw/libraw_version.h||libraw/libraw_version.h": [
          "File: libraw/libraw_version.h -> libraw/libraw_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define LIBRAW_MAJOR_VERSION  0",
          "27: #define LIBRAW_MINOR_VERSION  15",
          "29: #define LIBRAW_VERSION_TAIL   Release",
          "31: #define LIBRAW_SHLIB_CURRENT   9",
          "",
          "[Removed Lines]",
          "28: #define LIBRAW_PATCH_VERSION  1",
          "",
          "[Added Lines]",
          "28: #define LIBRAW_PATCH_VERSION  2",
          "",
          "---------------"
        ],
        "src/libraw_c_api.cpp||src/libraw_c_api.cpp": [
          "File: src/libraw_c_api.cpp -> src/libraw_c_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         LibRaw *ip = (LibRaw*) lr->parent_class;",
          "76:         return ip->open_file(file,sz);",
          "77:     }",
          "79:     int libraw_open_wfile(libraw_data_t* lr, const wchar_t *file)",
          "80:     {",
          "81:         if(!lr) return EINVAL;",
          "",
          "[Removed Lines]",
          "78: #ifdef WIN32",
          "",
          "[Added Lines]",
          "78: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     return ret;",
          "774: }",
          "777: int LibRaw::open_file(const wchar_t *fname, INT64 max_buf_size)",
          "778: {",
          "779:  struct _stati64 st;",
          "",
          "[Removed Lines]",
          "776: #ifdef WIN32",
          "",
          "[Added Lines]",
          "776: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1144:                 IO.shrink = 0;",
          "1145:     S.raw_pitch = S.width*8;",
          "1149:               }",
          "1150:             ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);",
          "",
          "[Removed Lines]",
          "1147:                 imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "1148:                 imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;",
          "",
          "[Added Lines]",
          "1147:                 imgdata.rawdata.raw_alloc = 0;",
          "1148:                 imgdata.image = (ushort (*)[4]) calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1155:             (this->*load_raw)();",
          "1156:    if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))",
          "1157:     C.maximum = m_save;",
          "1158:           }",
          "1160:         if(imgdata.rawdata.raw_image)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:    if (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)",
          "1159:    {",
          "1161:     imgdata.rawdata.raw_alloc = imgdata.image;",
          "1162:     imgdata.image = 0;",
          "1163:    }",
          "",
          "---------------"
        ],
        "src/libraw_datastream.cpp||src/libraw_datastream.cpp": [
          "File: src/libraw_datastream.cpp -> src/libraw_datastream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: #ifdef NO_JASPER",
          "275:     return NULL;",
          "276: #else",
          "278:  if(wfname())",
          "279:  {",
          "280:   jas_file = _wfopen(wfname(),L\"rb\");",
          "",
          "[Removed Lines]",
          "277: #ifdef WIN32",
          "",
          "[Added Lines]",
          "277: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:   return -1; // not supported",
          "295: #else",
          "296:   if(jas_file) { fclose(jas_file); jas_file = NULL;}",
          "298:   if(wfname())",
          "299:     {",
          "300:       jas_file = _wfopen(wfname(),L\"rb\");",
          "",
          "[Removed Lines]",
          "297: #ifdef WIN32",
          "",
          "[Added Lines]",
          "297: #if defined(WIN32) && !defined(__MINGW32__)",
          "",
          "---------------"
        ]
      }
    }
  ]
}