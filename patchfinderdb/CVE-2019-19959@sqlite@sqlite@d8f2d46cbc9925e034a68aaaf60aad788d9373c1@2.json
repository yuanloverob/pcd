{
  "cve_id": "CVE-2019-19959",
  "cve_desc": "ext/misc/zipfile.c in SQLite 3.30.1 mishandles certain uses of INSERT INTO in situations involving embedded '\\0' characters in filenames, leading to a memory-management error that can be detected by (for example) valgrind.",
  "repo": "sqlite/sqlite",
  "patch_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
  "patch_info": {
    "commit_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Fix the zipfile() function in the zipfile extension so that it is able to deal with goofy filenames that contain embedded zeros.\n\nFossilOrigin-Name: cc0fb00a128fd0773db5ff7891f7aa577a3671d570166d2cbb30df922344adcf",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1632:         zFree = sqlite3_mprintf(\"%s/\", zPath);",
      "1633:         if( zFree==0 ){ rc = SQLITE_NOMEM; }",
      "1634:         zPath = (const char*)zFree;",
      "1636:       }",
      "1637:     }",
      "",
      "[Removed Lines]",
      "1635:         nPath++;",
      "",
      "[Added Lines]",
      "1635:         nPath = (int)strlen(zPath);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2033:   }else{",
      "2034:     if( zName[nName-1]!='/' ){",
      "2035:       zName = zFree = sqlite3_mprintf(\"%s/\", zName);",
      "2037:       if( zName==0 ){",
      "2038:         rc = SQLITE_NOMEM;",
      "2039:         goto zipfile_step_out;",
      "2040:       }",
      "2041:     }else{",
      "2042:       while( nName>1 && zName[nName-2]=='/' ) nName--;",
      "2043:     }",
      "",
      "[Removed Lines]",
      "2036:       nName++;",
      "",
      "[Added Lines]",
      "2040:       nName = (int)strlen(zName);",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4c50afafce8416369f89477ba7fe7d9b047399a5ee5754c73d0e67bbea8d877c",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d8e7a2f9778f969f57858e89c0fc3aaf862d4f8",
      "candidate_info": {
        "commit_hash": "3d8e7a2f9778f969f57858e89c0fc3aaf862d4f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3d8e7a2f9778f969f57858e89c0fc3aaf862d4f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Change the assert() back into a testcase().  See also check-ins [9ab985a9c8160b90] and [ddb17d92df194337] and other check-ins that those reference.  Fix for ticket [9d708e474201c001]\n\nFossilOrigin-Name: 2c44c73499154bc57634a54cb743642d0aacc93a1336fbb8bb3eb5dbbf616357",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36fdeb4f0a66970a35de688b617f90899c89cfdfab659f864df99aa7ebf854ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:       if( (flags1 | flags3)&MEM_Str ){",
          "2029:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2030:           applyNumericAffinity(pIn1,0);",
          "2037:           flags3 = pIn3->flags;",
          "2038:         }",
          "2039:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2031:           assert( flags3==pIn3->flags );",
          "",
          "[Added Lines]",
          "2031:           testcase( flags3!=pIn3->flags );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2478dfa439d1dee0be7d26ebaf546313c4a2786",
      "candidate_info": {
        "commit_hash": "e2478dfa439d1dee0be7d26ebaf546313c4a2786",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2478dfa439d1dee0be7d26ebaf546313c4a2786",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Do an early close of virtual table cursors to avoid unnecessary cursor contention in UPDATE for some virtual table implementations. Ticket [56a74875be799b85]\n\nFossilOrigin-Name: eb95dac7f6482c36853a23234c5ce7af37c7beed8e3675d6a49c4d3a8307e076",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61c2233654158e65a3d3baeea947903a919a569fcc4a5b342b2e9a68cec1b6f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5340:       continue;",
          "5341:     }",
          "5343: #ifdef SQLITE_ENABLE_EARLY_CURSOR_CLOSE",
          "5350:      && pTab->pSelect==0",
          "5351:      && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0",
          "5352:     ){",
          "",
          "[Removed Lines]",
          "5349:     if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "[Added Lines]",
          "5343:     if( IsVirtual(pTab) ){",
          "5344:       sqlite3VdbeAddOp1(v, OP_Close, pTabItem->iCursor);",
          "5345:     }",
          "5352:     else if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69843342de6612381c4388fa94c1e87909ec57f0",
      "candidate_info": {
        "commit_hash": "69843342de6612381c4388fa94c1e87909ec57f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69843342de6612381c4388fa94c1e87909ec57f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/window2.tcl",
          "test/window2.test",
          "test/windowfault.test"
        ],
        "message": "Ensure sqlite3WindowRewrite() is called on a SELECT statement before any terms aremoved from it as part of IN() clause processing. Fix for [f00d096ca].\n\nFossilOrigin-Name: 8c856404b4e98d295449a4e89a41495dc007319a8e9c35c1a763718d7c5f67e8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45748e2db028ffbda5d3e747493721a5a89af3fbc06823081a2f27f570e40e73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: ){",
          "417:   sqlite3 *db = pParse->db;",
          "419:   if( db->mallocFailed==0 ){",
          "",
          "[Removed Lines]",
          "418:   Expr *pNew = sqlite3ExprDup(db, pX, 0);",
          "",
          "[Added Lines]",
          "418:   Expr *pNew;",
          "419: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "434:   if( sqlite3WindowRewrite(pParse, pX->x.pSelect) ) return 0;",
          "435: #endif",
          "436:   pNew = sqlite3ExprDup(db, pX, 0);",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;",
          "449: }",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: ==========",
          "453: execsql_test 6.0 {",
          "454:   DROP TABLE IF EXISTS t0;",
          "455:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "456:   INSERT INTO t0 VALUES(0);",
          "457: }",
          "458: execsql_test 6.1 {",
          "459:   SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0;",
          "460: }",
          "461: execsql_test 6.2 {",
          "462:   SELECT * FROM t0 WHERE",
          "463:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "464: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:   set {} {}",
          "931: } {}",
          "933: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933: #==========================================================================",
          "935: do_execsql_test 6.0 {",
          "936:   DROP TABLE IF EXISTS t0;",
          "937:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "938:   INSERT INTO t0 VALUES(0);",
          "939: } {}",
          "941: do_execsql_test 6.1 {",
          "942:   SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0;",
          "943: } {1 {}}",
          "945: do_execsql_test 6.2 {",
          "946:   SELECT * FROM t0 WHERE",
          "947:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "948: } {}",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   CREATE TABLE t2(a, b, c, d);",
          "231: }",
          "234: } -body {",
          "235:   execsql {",
          "236:     SELECT row_number() OVER win",
          "",
          "[Removed Lines]",
          "233: do_faultsim_test 1 -faults oom* -prep {",
          "",
          "[Added Lines]",
          "233: do_faultsim_test 10 -faults oom* -prep {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   faultsim_test_result {0 {}}",
          "247: }",
          "249: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: reset_db",
          "250: do_execsql_test 11.0 {",
          "251:   DROP TABLE IF EXISTS t0;",
          "252:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "253:   INSERT INTO t0 VALUES(0);",
          "254: } {}",
          "256: do_faultsim_test 11 -faults oom* -prep {",
          "257: } -body {",
          "258:   execsql {",
          "259:     SELECT * FROM t0 WHERE",
          "260:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "261:   }",
          "262: } -test {",
          "263:   faultsim_test_result {0 {}}",
          "264: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d762b2d1d5abc0fe8f438ee7e588bb29f830ab8",
      "candidate_info": {
        "commit_hash": "5d762b2d1d5abc0fe8f438ee7e588bb29f830ab8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5d762b2d1d5abc0fe8f438ee7e588bb29f830ab8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/update.test"
        ],
        "message": "Make a hard copy of strings in constraint checks prior to applying OP_RealAffinity, to avoid problems with a pointer accounting assert. This change is not strictly necessary - the correct answer is obtained without it and no UB occurs - however the pointer accounting asserts are useful to prevent other problems so it is a simple matter to bring this piece into compliance.  Ticket [5ad2aa6921faa1ee]\n\nFossilOrigin-Name: 89a9dad6330270a4c3b962f86a208088d2ea9883c7d291351a77f058e0ed8b0c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef604882a275d3d5ebd4d5a08e3fe43e148f169b7d5c3a81464fbe7f54f3582a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3674:           }else",
          "3676:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3678:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3679:             return target;",
          "3680:           }else{",
          "",
          "[Removed Lines]",
          "3677:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "",
          "[Added Lines]",
          "3677:             sqlite3VdbeAddOp2(v, OP_Copy, iSrc, target);",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:   SELECT * FROM t1;",
          "657: } {2 3}",
          "661: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659: # 2019-12-22 ticket 5ad2aa6921faa1ee",
          "660: # Make a hard-copy of values that need to be run through OP_RealAffinity",
          "661: # rather than a soft-copy.  This is not strictly necessary, but it avoids",
          "662: # a memory-accounting assert().",
          "663: #",
          "664: reset_db",
          "665: do_execsql_test update-18.10 {",
          "666:   PRAGMA encoding = 'UTF16';",
          "667:   CREATE TABLE t0(c0 REAL, c1);",
          "668:   INSERT INTO t0(c0,c1) VALUES('xyz',11),('uvw',22);",
          "669:   CREATE INDEX i0 ON t0(c1) WHERE c0 GLOB 3;",
          "670:   CREATE INDEX i1 ON t0(c0,c1) WHERE typeof(c0)='text' AND typeof(c1)='integer';",
          "671:   UPDATE t0 SET c1=345;",
          "672:   SELECT * FROM t0;",
          "673: } {xyz 345 uvw 345}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f0dfc00de8f0755545310de3c940ccb2ed9e624",
      "candidate_info": {
        "commit_hash": "5f0dfc00de8f0755545310de3c940ccb2ed9e624",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f0dfc00de8f0755545310de3c940ccb2ed9e624",
        "files": [
          "ext/rtree/geopoly.c",
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Thoroughly reset the rtree cursor at the start of each VFilter operation, including clearing its cache.  This prevents left over pages in the cache which can cause problems on shutdown after a LEFT JOIN. Ticket [5eadca17c4dde90c]\n\nFossilOrigin-Name: 4c50afafce8416369f89477ba7fe7d9b047399a5ee5754c73d0e67bbea8d877c",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1345:   RtreeNode *pRoot = 0;",
          "1346:   int rc = SQLITE_OK;",
          "1347:   int iCell = 0;",
          "1350:   rtreeReference(pRtree);",
          "1360:   pCsr->iStrategy = idxNum;",
          "1361:   if( idxNum==1 ){",
          "",
          "[Removed Lines]",
          "1348:   sqlite3_stmt *pStmt;",
          "1353:   freeCursorConstraints(pCsr);",
          "1354:   sqlite3_free(pCsr->aPoint);",
          "1355:   pStmt = pCsr->pReadAux;",
          "1356:   memset(pCsr, 0, sizeof(RtreeCursor));",
          "1357:   pCsr->base.pVtab = (sqlite3_vtab*)pRtree;",
          "1358:   pCsr->pReadAux = pStmt;",
          "",
          "[Added Lines]",
          "1352:   resetCursor(pCsr);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:   if( pCsr->aConstraint ){",
          "1073:     for(i=0; i<pCsr->nConstraint; i++){",
          "",
          "[Removed Lines]",
          "1070: static void freeCursorConstraints(RtreeCursor *pCsr){",
          "",
          "[Added Lines]",
          "1070: static void resetCursor(RtreeCursor *pCsr){",
          "1071:   Rtree *pRtree = (Rtree *)(pCsr->base.pVtab);",
          "1072:   int ii;",
          "1073:   sqlite3_stmt *pStmt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1080:     sqlite3_free(pCsr->aConstraint);",
          "1081:     pCsr->aConstraint = 0;",
          "1082:   }",
          "1083: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:   for(ii=0; ii<RTREE_CACHE_SZ; ii++) nodeRelease(pRtree, pCsr->aNode[ii]);",
          "1087:   sqlite3_free(pCsr->aPoint);",
          "1088:   pStmt = pCsr->pReadAux;",
          "1089:   memset(pCsr, 0, sizeof(RtreeCursor));",
          "1090:   pCsr->base.pVtab = (sqlite3_vtab*)pRtree;",
          "1091:   pCsr->pReadAux = pStmt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1088: static int rtreeClose(sqlite3_vtab_cursor *cur){",
          "1089:   Rtree *pRtree = (Rtree *)(cur->pVtab);",
          "1091:   RtreeCursor *pCsr = (RtreeCursor *)cur;",
          "1092:   assert( pRtree->nCursor>0 );",
          "1094:   sqlite3_finalize(pCsr->pReadAux);",
          "1097:   sqlite3_free(pCsr);",
          "1098:   pRtree->nCursor--;",
          "1099:   nodeBlobReset(pRtree);",
          "",
          "[Removed Lines]",
          "1090:   int ii;",
          "1093:   freeCursorConstraints(pCsr);",
          "1095:   sqlite3_free(pCsr->aPoint);",
          "1096:   for(ii=0; ii<RTREE_CACHE_SZ; ii++) nodeRelease(pRtree, pCsr->aNode[ii]);",
          "",
          "[Added Lines]",
          "1102:   resetCursor(pCsr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1799:   int ii;",
          "1800:   int rc = SQLITE_OK;",
          "1801:   int iCell = 0;",
          "1804:   rtreeReference(pRtree);",
          "1814:   pCsr->iStrategy = idxNum;",
          "1815:   if( idxNum==1 ){",
          "",
          "[Removed Lines]",
          "1802:   sqlite3_stmt *pStmt;",
          "1807:   freeCursorConstraints(pCsr);",
          "1808:   sqlite3_free(pCsr->aPoint);",
          "1809:   pStmt = pCsr->pReadAux;",
          "1810:   memset(pCsr, 0, sizeof(RtreeCursor));",
          "1811:   pCsr->base.pVtab = (sqlite3_vtab*)pRtree;",
          "1812:   pCsr->pReadAux = pStmt;",
          "",
          "[Added Lines]",
          "1813:   resetCursor(pCsr);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 953e6aa6d9ca09e549c88bc728c322fabdcef581f3b4a7763d95488dddbbd6a5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}