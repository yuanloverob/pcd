{
  "cve_id": "CVE-2019-19047",
  "cve_desc": "A memory leak in the mlx5_fw_fatal_reporter_dump() function in drivers/net/ethernet/mellanox/mlx5/core/health.c in the Linux kernel before 5.3.11 allows attackers to cause a denial of service (memory consumption) by triggering mlx5_crdump_collect() failures, aka CID-c7ed6d0183d5.",
  "repo": "torvalds/linux",
  "patch_hash": "c7ed6d0183d5ea9bc31bcaeeba4070bd62546471",
  "patch_info": {
    "commit_hash": "c7ed6d0183d5ea9bc31bcaeeba4070bd62546471",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/c7ed6d0183d5ea9bc31bcaeeba4070bd62546471",
    "files": [
      "drivers/net/ethernet/mellanox/mlx5/core/health.c"
    ],
    "message": "net/mlx5: fix memory leak in mlx5_fw_fatal_reporter_dump\n\nIn mlx5_fw_fatal_reporter_dump if mlx5_crdump_collect fails the\nallocated memory for cr_data must be released otherwise there will be\nmemory leak. To fix this, this commit changes the return instruction\ninto goto error handling.\n\nFixes: 9b1f29823605 (\"net/mlx5: Add support for FW fatal reporter dump\")\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nSigned-off-by: Saeed Mahameed <saeedm@mellanox.com>",
    "before_after_code_files": [
      "drivers/net/ethernet/mellanox/mlx5/core/health.c||drivers/net/ethernet/mellanox/mlx5/core/health.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ethernet/mellanox/mlx5/core/health.c||drivers/net/ethernet/mellanox/mlx5/core/health.c": [
      "File: drivers/net/ethernet/mellanox/mlx5/core/health.c -> drivers/net/ethernet/mellanox/mlx5/core/health.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "572:   return -ENOMEM;",
      "573:  err = mlx5_crdump_collect(dev, cr_data);",
      "574:  if (err)",
      "577:  if (priv_ctx) {",
      "578:   struct mlx5_fw_reporter_ctx *fw_reporter_ctx = priv_ctx;",
      "",
      "[Removed Lines]",
      "575:   return err;",
      "",
      "[Added Lines]",
      "575:   goto free_data;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b1f2982360579cbdb3069fa026f6cfc31c4388b",
      "candidate_info": {
        "commit_hash": "9b1f2982360579cbdb3069fa026f6cfc31c4388b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9b1f2982360579cbdb3069fa026f6cfc31c4388b",
        "files": [
          "drivers/net/ethernet/mellanox/mlx5/core/health.c"
        ],
        "message": "net/mlx5: Add support for FW fatal reporter dump\n\nAdd support of dump callback for mlx5 FW fatal reporter.\nThe FW fatal dump uses cr-dump functionality to gather cr-space data for\ndebug. The cr-dump uses vsc interface which is valid even if the FW\ncommand interface is not functional, which is the case in most FW fatal\nerrors.\n\nCommand example and output:\n$ devlink health dump show pci/0000:82:00.0 reporter fw_fatal\n crdump_data:\n  00 20 00 01 00 00 00 00 03 00 00 00 00 00 00 00\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00 00 00 00 00 00 00 00 00 00 00 00 ba 82 00 00\n  0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa 00\n  a4 0e 00 00 00 00 00 00 80 c7 fe ff 50 0a 00 00\n...\n...\n\nSigned-off-by: Moshe Shemesh <moshe@mellanox.com>\nSigned-off-by: Saeed Mahameed <saeedm@mellanox.com>",
        "before_after_code_files": [
          "drivers/net/ethernet/mellanox/mlx5/core/health.c||drivers/net/ethernet/mellanox/mlx5/core/health.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/ethernet/mellanox/mlx5/core/health.c||drivers/net/ethernet/mellanox/mlx5/core/health.c"
          ],
          "candidate": [
            "drivers/net/ethernet/mellanox/mlx5/core/health.c||drivers/net/ethernet/mellanox/mlx5/core/health.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/mellanox/mlx5/core/health.c||drivers/net/ethernet/mellanox/mlx5/core/health.c": [
          "File: drivers/net/ethernet/mellanox/mlx5/core/health.c -> drivers/net/ethernet/mellanox/mlx5/core/health.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:  return mlx5_health_try_recover(dev);",
          "566: }",
          "568: static const struct devlink_health_reporter_ops mlx5_fw_fatal_reporter_ops = {",
          "569:   .name = \"fw_fatal\",",
          "570:   .recover = mlx5_fw_fatal_reporter_recover,",
          "571: };",
          "573: #define MLX5_REPORTER_FW_GRACEFUL_PERIOD 1200000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568: #define MLX5_CR_DUMP_CHUNK_SIZE 256",
          "569: static int",
          "570: mlx5_fw_fatal_reporter_dump(struct devlink_health_reporter *reporter,",
          "571:        struct devlink_fmsg *fmsg, void *priv_ctx)",
          "572: {",
          "573:  struct mlx5_core_dev *dev = devlink_health_reporter_priv(reporter);",
          "574:  u32 crdump_size = dev->priv.health.crdump_size;",
          "575:  u32 *cr_data;",
          "576:  u32 data_size;",
          "577:  u32 offset;",
          "578:  int err;",
          "580:  if (!mlx5_core_is_pf(dev))",
          "581:   return -EPERM;",
          "583:  cr_data = kvmalloc(crdump_size, GFP_KERNEL);",
          "584:  if (!cr_data)",
          "585:   return -ENOMEM;",
          "586:  err = mlx5_crdump_collect(dev, cr_data);",
          "587:  if (err)",
          "588:   return err;",
          "590:  if (priv_ctx) {",
          "591:   struct mlx5_fw_reporter_ctx *fw_reporter_ctx = priv_ctx;",
          "593:   err = mlx5_fw_reporter_ctx_pairs_put(fmsg, fw_reporter_ctx);",
          "594:   if (err)",
          "595:    goto free_data;",
          "596:  }",
          "598:  err = devlink_fmsg_arr_pair_nest_start(fmsg, \"crdump_data\");",
          "599:  if (err)",
          "600:   goto free_data;",
          "601:  for (offset = 0; offset < crdump_size; offset += data_size) {",
          "602:   if (crdump_size - offset < MLX5_CR_DUMP_CHUNK_SIZE)",
          "603:    data_size = crdump_size - offset;",
          "604:   else",
          "605:    data_size = MLX5_CR_DUMP_CHUNK_SIZE;",
          "606:   err = devlink_fmsg_binary_put(fmsg, cr_data, data_size);",
          "607:   if (err)",
          "608:    goto free_data;",
          "609:  }",
          "610:  err = devlink_fmsg_arr_pair_nest_end(fmsg);",
          "612: free_data:",
          "613:  kfree(cr_data);",
          "614:  return err;",
          "615: }",
          "620:   .dump = mlx5_fw_fatal_reporter_dump,",
          "",
          "---------------"
        ]
      }
    }
  ]
}