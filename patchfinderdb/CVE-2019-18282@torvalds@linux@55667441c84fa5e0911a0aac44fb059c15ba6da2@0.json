{
  "cve_id": "CVE-2019-18282",
  "cve_desc": "The flow_dissector feature in the Linux kernel 4.3 through 5.x before 5.3.10 has a device tracking vulnerability, aka CID-55667441c84f. This occurs because the auto flowlabel of a UDP IPv6 packet relies on a 32-bit hashrnd value as a secret, and because jhash (instead of siphash) is used. The hashrnd value remains the same starting from boot time, and can be inferred by an attacker. This affects net/core/flow_dissector.c and related code.",
  "repo": "torvalds/linux",
  "patch_hash": "55667441c84fa5e0911a0aac44fb059c15ba6da2",
  "patch_info": {
    "commit_hash": "55667441c84fa5e0911a0aac44fb059c15ba6da2",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/55667441c84fa5e0911a0aac44fb059c15ba6da2",
    "files": [
      "include/linux/skbuff.h",
      "include/net/flow_dissector.h",
      "include/net/fq.h",
      "include/net/fq_impl.h",
      "net/core/flow_dissector.c",
      "net/sched/sch_hhf.c",
      "net/sched/sch_sfb.c",
      "net/sched/sch_sfq.c"
    ],
    "message": "net/flow_dissector: switch to siphash\n\nUDP IPv6 packets auto flowlabels are using a 32bit secret\n(static u32 hashrnd in net/core/flow_dissector.c) and\napply jhash() over fields known by the receivers.\n\nAttackers can easily infer the 32bit secret and use this information\nto identify a device and/or user, since this 32bit secret is only\nset at boot time.\n\nReally, using jhash() to generate cookies sent on the wire\nis a serious security concern.\n\nTrying to change the rol32(hash, 16) in ip6_make_flowlabel() would be\na dead end. Trying to periodically change the secret (like in sch_sfq.c)\ncould change paths taken in the network for long lived flows.\n\nLet's switch to siphash, as we did in commit df453700e8d8\n(\"inet: switch IP ID generator to siphash\")\n\nUsing a cryptographically strong pseudo random function will solve this\nprivacy issue and more generally remove other weak points in the stack.\n\nPacket schedulers using skb_get_hash_perturb() benefit from this change.\n\nFixes: b56774163f99 (\"ipv6: Enable auto flow labels by default\")\nFixes: 42240901f7c4 (\"ipv6: Implement different admin modes for automatic flow labels\")\nFixes: 67800f9b1f4e (\"ipv6: Call skb_get_hash_flowi6 to get skb->hash in ip6_make_flowlabel\")\nFixes: cb1ce2ef387b (\"ipv6: Implement automatic flow label generation on transmit\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Jonathan Berger <jonathann1@walla.com>\nReported-by: Amit Klein <aksecurity@gmail.com>\nReported-by: Benny Pinkas <benny@pinkas.net>\nCc: Tom Herbert <tom@herbertland.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/linux/skbuff.h||include/linux/skbuff.h",
      "include/net/flow_dissector.h||include/net/flow_dissector.h",
      "include/net/fq.h||include/net/fq.h",
      "include/net/fq_impl.h||include/net/fq_impl.h",
      "net/core/flow_dissector.c||net/core/flow_dissector.c",
      "net/sched/sch_hhf.c||net/sched/sch_hhf.c",
      "net/sched/sch_sfb.c||net/sched/sch_sfb.c",
      "net/sched/sch_sfq.c||net/sched/sch_sfq.c"
    ]
  },
  "patch_diff": {
    "include/linux/skbuff.h||include/linux/skbuff.h": [
      "File: include/linux/skbuff.h -> include/linux/skbuff.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1354:  return skb->hash;",
      "1355: }",
      "1359: static inline __u32 skb_get_hash_raw(const struct sk_buff *skb)",
      "1360: {",
      "",
      "[Removed Lines]",
      "1357: __u32 skb_get_hash_perturb(const struct sk_buff *skb, u32 perturb);",
      "",
      "[Added Lines]",
      "1357: __u32 skb_get_hash_perturb(const struct sk_buff *skb,",
      "1358:       const siphash_key_t *perturb);",
      "",
      "---------------"
    ],
    "include/net/flow_dissector.h||include/net/flow_dissector.h": [
      "File: include/net/flow_dissector.h -> include/net/flow_dissector.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include <linux/types.h>",
      "6: #include <linux/in6.h>",
      "7: #include <uapi/linux/if_ether.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #include <linux/siphash.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "276: struct flow_keys {",
      "277:  struct flow_dissector_key_control control;",
      "278: #define FLOW_KEYS_HASH_START_FIELD basic",
      "280:  struct flow_dissector_key_tags tags;",
      "281:  struct flow_dissector_key_vlan vlan;",
      "282:  struct flow_dissector_key_vlan cvlan;",
      "",
      "[Removed Lines]",
      "279:  struct flow_dissector_key_basic basic;",
      "",
      "[Added Lines]",
      "280:  struct flow_dissector_key_basic basic __aligned(SIPHASH_ALIGNMENT);",
      "",
      "---------------"
    ],
    "include/net/fq.h||include/net/fq.h": [
      "File: include/net/fq.h -> include/net/fq.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:  struct list_head backlogs;",
      "70:  spinlock_t lock;",
      "71:  u32 flows_cnt;",
      "73:  u32 limit;",
      "74:  u32 memory_limit;",
      "75:  u32 memory_usage;",
      "",
      "[Removed Lines]",
      "72:  u32 perturbation;",
      "",
      "[Added Lines]",
      "72:  siphash_key_t perturbation;",
      "",
      "---------------"
    ],
    "include/net/fq_impl.h||include/net/fq_impl.h": [
      "File: include/net/fq_impl.h -> include/net/fq_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "109: static u32 fq_flow_idx(struct fq *fq, struct sk_buff *skb)",
      "110: {",
      "113:  return reciprocal_scale(hash, fq->flows_cnt);",
      "114: }",
      "",
      "[Removed Lines]",
      "111:  u32 hash = skb_get_hash_perturb(skb, fq->perturbation);",
      "",
      "[Added Lines]",
      "111:  u32 hash = skb_get_hash_perturb(skb, &fq->perturbation);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "308:  INIT_LIST_HEAD(&fq->backlogs);",
      "309:  spin_lock_init(&fq->lock);",
      "310:  fq->flows_cnt = max_t(u32, flows_cnt, 1);",
      "312:  fq->quantum = 300;",
      "313:  fq->limit = 8192;",
      "",
      "[Removed Lines]",
      "311:  fq->perturbation = prandom_u32();",
      "",
      "[Added Lines]",
      "311:  get_random_bytes(&fq->perturbation, sizeof(fq->perturbation));",
      "",
      "---------------"
    ],
    "net/core/flow_dissector.c||net/core/flow_dissector.c": [
      "File: net/core/flow_dissector.c -> net/core/flow_dissector.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1350: }",
      "1351: EXPORT_SYMBOL(__skb_flow_dissect);",
      "1354: static __always_inline void __flow_hash_secret_init(void)",
      "1355: {",
      "1356:  net_get_random_once(&hashrnd, sizeof(hashrnd));",
      "1357: }",
      "1361: {",
      "1371: }",
      "1373: static inline size_t flow_keys_hash_length(const struct flow_keys *flow)",
      "1374: {",
      "1375:  size_t diff = FLOW_KEYS_HASH_OFFSET + sizeof(flow->addrs);",
      "1377:  BUILD_BUG_ON(offsetof(typeof(*flow), addrs) !=",
      "1378:        sizeof(*flow) - sizeof(flow->addrs));",
      "",
      "[Removed Lines]",
      "1353: static u32 hashrnd __read_mostly;",
      "1359: static __always_inline u32 __flow_hash_words(const u32 *words, u32 length,",
      "1360:           u32 keyval)",
      "1362:  return jhash2(words, length, keyval);",
      "1363: }",
      "1365: static inline const u32 *flow_keys_hash_start(const struct flow_keys *flow)",
      "1366: {",
      "1367:  const void *p = flow;",
      "1369:  BUILD_BUG_ON(FLOW_KEYS_HASH_OFFSET % sizeof(u32));",
      "1370:  return (const u32 *)(p + FLOW_KEYS_HASH_OFFSET);",
      "1376:  BUILD_BUG_ON((sizeof(*flow) - FLOW_KEYS_HASH_OFFSET) % sizeof(u32));",
      "",
      "[Added Lines]",
      "1353: static siphash_key_t hashrnd __read_mostly;",
      "1359: static const void *flow_keys_hash_start(const struct flow_keys *flow)",
      "1361:  BUILD_BUG_ON(FLOW_KEYS_HASH_OFFSET % SIPHASH_ALIGNMENT);",
      "1362:  return &flow->FLOW_KEYS_HASH_START_FIELD;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1388:   diff -= sizeof(flow->addrs.tipckey);",
      "1389:   break;",
      "1390:  }",
      "1392: }",
      "1394: __be32 flow_get_u32_src(const struct flow_keys *flow)",
      "",
      "[Removed Lines]",
      "1391:  return (sizeof(*flow) - diff) / sizeof(u32);",
      "",
      "[Added Lines]",
      "1382:  return sizeof(*flow) - diff;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1454:  }",
      "1455: }",
      "1458: {",
      "1459:  u32 hash;",
      "1461:  __flow_hash_consistentify(keys);",
      "1465:  if (!hash)",
      "1466:   hash = 1;",
      "",
      "[Removed Lines]",
      "1457: static inline u32 __flow_hash_from_keys(struct flow_keys *keys, u32 keyval)",
      "1463:  hash = __flow_hash_words(flow_keys_hash_start(keys),",
      "1464:      flow_keys_hash_length(keys), keyval);",
      "",
      "[Added Lines]",
      "1448: static inline u32 __flow_hash_from_keys(struct flow_keys *keys,",
      "1449:      const siphash_key_t *keyval)",
      "1455:  hash = siphash(flow_keys_hash_start(keys),",
      "1456:          flow_keys_hash_length(keys), keyval);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1471: u32 flow_hash_from_keys(struct flow_keys *keys)",
      "1472: {",
      "1473:  __flow_hash_secret_init();",
      "1475: }",
      "1476: EXPORT_SYMBOL(flow_hash_from_keys);",
      "1478: static inline u32 ___skb_get_hash(const struct sk_buff *skb,",
      "1480: {",
      "1481:  skb_flow_dissect_flow_keys(skb, keys,",
      "1482:        FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL);",
      "",
      "[Removed Lines]",
      "1474:  return __flow_hash_from_keys(keys, hashrnd);",
      "1479:       struct flow_keys *keys, u32 keyval)",
      "",
      "[Added Lines]",
      "1466:  return __flow_hash_from_keys(keys, &hashrnd);",
      "1471:       struct flow_keys *keys,",
      "1472:       const siphash_key_t *keyval)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1524:       &keys, NULL, 0, 0, 0,",
      "1525:       FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL);",
      "1528: }",
      "1529: EXPORT_SYMBOL_GPL(__skb_get_hash_symmetric);",
      "",
      "[Removed Lines]",
      "1527:  return __flow_hash_from_keys(&keys, hashrnd);",
      "",
      "[Added Lines]",
      "1520:  return __flow_hash_from_keys(&keys, &hashrnd);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1545:  __flow_hash_secret_init();",
      "1549:  __skb_set_sw_hash(skb, hash, flow_keys_have_l4(&keys));",
      "1550: }",
      "1551: EXPORT_SYMBOL(__skb_get_hash);",
      "1554: {",
      "1555:  struct flow_keys keys;",
      "",
      "[Removed Lines]",
      "1547:  hash = ___skb_get_hash(skb, &keys, hashrnd);",
      "1553: __u32 skb_get_hash_perturb(const struct sk_buff *skb, u32 perturb)",
      "",
      "[Added Lines]",
      "1540:  hash = ___skb_get_hash(skb, &keys, &hashrnd);",
      "1546: __u32 skb_get_hash_perturb(const struct sk_buff *skb,",
      "1547:       const siphash_key_t *perturb)",
      "",
      "---------------"
    ],
    "net/sched/sch_hhf.c||net/sched/sch_hhf.c": [
      "File: net/sched/sch_hhf.c -> net/sched/sch_hhf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: #include <linux/jiffies.h>",
      "10: #include <linux/module.h>",
      "11: #include <linux/skbuff.h>",
      "12: #include <linux/vmalloc.h>",
      "13: #include <net/pkt_sched.h>",
      "14: #include <net/sock.h>",
      "",
      "[Removed Lines]",
      "8: #include <linux/jhash.h>",
      "",
      "[Added Lines]",
      "12: #include <linux/siphash.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "264:  }",
      "270:  flow_pos = hash & HHF_BIT_MASK;",
      "",
      "[Removed Lines]",
      "267:  hash = skb_get_hash_perturb(skb, q->perturbation);",
      "",
      "[Added Lines]",
      "267:  hash = skb_get_hash_perturb(skb, &q->perturbation);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "583:  sch->limit = 1000;",
      "584:  q->quantum = psched_mtu(qdisc_dev(sch));",
      "586:  INIT_LIST_HEAD(&q->new_buckets);",
      "587:  INIT_LIST_HEAD(&q->old_buckets);",
      "",
      "[Removed Lines]",
      "585:  q->perturbation = prandom_u32();",
      "",
      "[Added Lines]",
      "585:  get_random_bytes(&q->perturbation, sizeof(q->perturbation));",
      "",
      "---------------"
    ],
    "net/sched/sch_sfb.c||net/sched/sch_sfb.c": [
      "File: net/sched/sch_sfb.c -> net/sched/sch_sfb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include <linux/errno.h>",
      "19: #include <linux/skbuff.h>",
      "20: #include <linux/random.h>",
      "22: #include <net/ip.h>",
      "23: #include <net/pkt_sched.h>",
      "24: #include <net/pkt_cls.h>",
      "",
      "[Removed Lines]",
      "21: #include <linux/jhash.h>",
      "",
      "[Added Lines]",
      "21: #include <linux/siphash.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "218: static void sfb_init_perturbation(u32 slot, struct sfb_sched_data *q)",
      "219: {",
      "221: }",
      "223: static void sfb_swap_slot(struct sfb_sched_data *q)",
      "",
      "[Removed Lines]",
      "220:  q->bins[slot].perturbation = prandom_u32();",
      "",
      "[Added Lines]",
      "220:  get_random_bytes(&q->bins[slot].perturbation,",
      "221:     sizeof(q->bins[slot].perturbation));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "315:   if (!sfb_classify(skb, fl, &ret, &salt))",
      "316:    goto other_drop;",
      "318:  } else {",
      "320:  }",
      "",
      "[Removed Lines]",
      "317:   sfbhash = jhash_1word(salt, q->bins[slot].perturbation);",
      "319:   sfbhash = skb_get_hash_perturb(skb, q->bins[slot].perturbation);",
      "",
      "[Added Lines]",
      "318:   sfbhash = siphash_1u32(salt, &q->bins[slot].perturbation);",
      "320:   sfbhash = skb_get_hash_perturb(skb, &q->bins[slot].perturbation);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "353:   if (q->double_buffering) {",
      "354:    sfbhash = skb_get_hash_perturb(skb,",
      "356:    if (!sfbhash)",
      "357:     sfbhash = 1;",
      "358:    sfb_skb_cb(skb)->hashes[slot] = sfbhash;",
      "",
      "[Removed Lines]",
      "355:        q->bins[slot].perturbation);",
      "",
      "[Added Lines]",
      "356:        &q->bins[slot].perturbation);",
      "",
      "---------------"
    ],
    "net/sched/sch_sfq.c||net/sched/sch_sfq.c": [
      "File: net/sched/sch_sfq.c -> net/sched/sch_sfq.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: #include <linux/errno.h>",
      "15: #include <linux/init.h>",
      "16: #include <linux/skbuff.h>",
      "18: #include <linux/slab.h>",
      "19: #include <linux/vmalloc.h>",
      "20: #include <net/netlink.h>",
      "",
      "[Removed Lines]",
      "17: #include <linux/jhash.h>",
      "",
      "[Added Lines]",
      "17: #include <linux/siphash.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:  u8  headdrop;",
      "122:  u8  flags;",
      "",
      "[Removed Lines]",
      "120:  u32  perturbation;",
      "",
      "[Added Lines]",
      "120:  siphash_key_t  perturbation;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "157: static unsigned int sfq_hash(const struct sfq_sched_data *q,",
      "158:         const struct sk_buff *skb)",
      "159: {",
      "161: }",
      "163: static unsigned int sfq_classify(struct sk_buff *skb, struct Qdisc *sch,",
      "",
      "[Removed Lines]",
      "160:  return skb_get_hash_perturb(skb, q->perturbation) & (q->divisor - 1);",
      "",
      "[Added Lines]",
      "160:  return skb_get_hash_perturb(skb, &q->perturbation) & (q->divisor - 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "607:  struct sfq_sched_data *q = from_timer(q, t, perturb_timer);",
      "608:  struct Qdisc *sch = q->sch;",
      "609:  spinlock_t *root_lock = qdisc_lock(qdisc_root_sleeping(sch));",
      "611:  spin_lock(root_lock);",
      "613:  if (!q->filter_list && q->tail)",
      "614:   sfq_rehash(sch);",
      "615:  spin_unlock(root_lock);",
      "",
      "[Removed Lines]",
      "612:  q->perturbation = prandom_u32();",
      "",
      "[Added Lines]",
      "610:  siphash_key_t nkey;",
      "612:  get_random_bytes(&nkey, sizeof(nkey));",
      "614:  q->perturbation = nkey;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "688:  del_timer(&q->perturb_timer);",
      "689:  if (q->perturb_period) {",
      "690:   mod_timer(&q->perturb_timer, jiffies + q->perturb_period);",
      "692:  }",
      "693:  sch_tree_unlock(sch);",
      "694:  kfree(p);",
      "",
      "[Removed Lines]",
      "691:   q->perturbation = prandom_u32();",
      "",
      "[Added Lines]",
      "693:   get_random_bytes(&q->perturbation, sizeof(q->perturbation));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "745:  q->quantum = psched_mtu(qdisc_dev(sch));",
      "746:  q->scaled_quantum = SFQ_ALLOT_SIZE(q->quantum);",
      "747:  q->perturb_period = 0;",
      "750:  if (opt) {",
      "751:   int err = sfq_change(sch, opt);",
      "",
      "[Removed Lines]",
      "748:  q->perturbation = prandom_u32();",
      "",
      "[Added Lines]",
      "750:  get_random_bytes(&q->perturbation, sizeof(q->perturbation));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48a54f6bc456859dabbd1fbd805e233d260754cf",
      "candidate_info": {
        "commit_hash": "48a54f6bc456859dabbd1fbd805e233d260754cf",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/48a54f6bc456859dabbd1fbd805e233d260754cf",
        "files": [
          "include/net/fq.h",
          "include/net/fq_impl.h"
        ],
        "message": "net/fq_impl: use skb_get_hash instead of skb_get_hash_perturb\n\nThis avoids unnecessarily regenerating the skb flow hash\n\nSigned-off-by: Felix Fietkau <nbd@nbd.name>\nLink: https://lore.kernel.org/r/20200726130947.88145-1-nbd@nbd.name\n[small commit message fixup]\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
        "before_after_code_files": [
          "include/net/fq.h||include/net/fq.h",
          "include/net/fq_impl.h||include/net/fq_impl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/fq.h||include/net/fq.h",
            "include/net/fq_impl.h||include/net/fq_impl.h"
          ],
          "candidate": [
            "include/net/fq.h||include/net/fq.h",
            "include/net/fq_impl.h||include/net/fq_impl.h"
          ]
        }
      },
      "candidate_diff": {
        "include/net/fq.h||include/net/fq.h": [
          "File: include/net/fq.h -> include/net/fq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  struct list_head backlogs;",
          "70:  spinlock_t lock;",
          "71:  u32 flows_cnt;",
          "73:  u32 limit;",
          "74:  u32 memory_limit;",
          "75:  u32 memory_usage;",
          "",
          "[Removed Lines]",
          "72:  siphash_key_t perturbation;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/net/fq_impl.h||include/net/fq_impl.h": [
          "File: include/net/fq_impl.h -> include/net/fq_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: static u32 fq_flow_idx(struct fq *fq, struct sk_buff *skb)",
          "110: {",
          "113:  return reciprocal_scale(hash, fq->flows_cnt);",
          "114: }",
          "",
          "[Removed Lines]",
          "111:  u32 hash = skb_get_hash_perturb(skb, &fq->perturbation);",
          "",
          "[Added Lines]",
          "111:  u32 hash = skb_get_hash(skb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:  INIT_LIST_HEAD(&fq->backlogs);",
          "309:  spin_lock_init(&fq->lock);",
          "310:  fq->flows_cnt = max_t(u32, flows_cnt, 1);",
          "312:  fq->quantum = 300;",
          "313:  fq->limit = 8192;",
          "",
          "[Removed Lines]",
          "311:  get_random_bytes(&fq->perturbation, sizeof(fq->perturbation));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2af2df800d3648b1d68e02d5b8a5d77cfee8970",
      "candidate_info": {
        "commit_hash": "f2af2df800d3648b1d68e02d5b8a5d77cfee8970",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f2af2df800d3648b1d68e02d5b8a5d77cfee8970",
        "files": [
          "include/net/fq_impl.h",
          "net/mac80211/tx.c"
        ],
        "message": "mac80211: calculate hash for fq without holding fq->lock in itxq enqueue\n\nReduces lock contention on enqueue/dequeue of iTXQ packets\n\nSigned-off-by: Felix Fietkau <nbd@nbd.name>\nAcked-by: Toke H\u00f8iland-J\u00f8rgensen <toke@redhat.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
        "before_after_code_files": [
          "include/net/fq_impl.h||include/net/fq_impl.h",
          "net/mac80211/tx.c||net/mac80211/tx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/fq_impl.h||include/net/fq_impl.h"
          ],
          "candidate": [
            "include/net/fq_impl.h||include/net/fq_impl.h"
          ]
        }
      },
      "candidate_diff": {
        "include/net/fq_impl.h||include/net/fq_impl.h": [
          "File: include/net/fq_impl.h -> include/net/fq_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  return skb;",
          "108: }",
          "110: static struct fq_flow *fq_flow_classify(struct fq *fq,",
          "112:      struct sk_buff *skb,",
          "113:      fq_flow_get_default_t get_default_func)",
          "114: {",
          "115:  struct fq_flow *flow;",
          "119:  lockdep_assert_held(&fq->lock);",
          "123:  flow = &fq->flows[idx];",
          "125:  if (flow->tin && flow->tin != tin) {",
          "126:   flow = get_default_func(fq, tin, idx, skb);",
          "127:   tin->collisions++;",
          "",
          "[Removed Lines]",
          "111:      struct fq_tin *tin,",
          "116:  u32 hash;",
          "117:  u32 idx;",
          "121:  hash = skb_get_hash_perturb(skb, fq->perturbation);",
          "122:  idx = reciprocal_scale(hash, fq->flows_cnt);",
          "",
          "[Added Lines]",
          "110: static u32 fq_flow_idx(struct fq *fq, struct sk_buff *skb)",
          "111: {",
          "112:  u32 hash = skb_get_hash_perturb(skb, fq->perturbation);",
          "114:  return reciprocal_scale(hash, fq->flows_cnt);",
          "115: }",
          "118:      struct fq_tin *tin, u32 idx,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153: }",
          "155: static void fq_tin_enqueue(struct fq *fq,",
          "157:       struct sk_buff *skb,",
          "158:       fq_skb_free_t free_func,",
          "159:       fq_flow_get_default_t get_default_func)",
          "",
          "[Removed Lines]",
          "156:       struct fq_tin *tin,",
          "",
          "[Added Lines]",
          "158:       struct fq_tin *tin, u32 idx,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:  lockdep_assert_held(&fq->lock);",
          "168:  flow->tin = tin;",
          "169:  flow->backlog += skb->len;",
          "",
          "[Removed Lines]",
          "166:  flow = fq_flow_classify(fq, tin, skb, get_default_func);",
          "",
          "[Added Lines]",
          "168:  flow = fq_flow_classify(fq, tin, idx, skb, get_default_func);",
          "",
          "---------------"
        ],
        "net/mac80211/tx.c||net/mac80211/tx.c": [
          "File: net/mac80211/tx.c -> net/mac80211/tx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399: {",
          "1400:  struct fq *fq = &local->fq;",
          "1401:  struct fq_tin *tin = &txqi->tin;",
          "1403:  ieee80211_set_skb_enqueue_time(skb);",
          "1405:          fq_skb_free_func,",
          "1406:          fq_flow_get_default_func);",
          "1407: }",
          "1409: static bool fq_vlan_filter_func(struct fq *fq, struct fq_tin *tin,",
          "",
          "[Removed Lines]",
          "1404:  fq_tin_enqueue(fq, tin, skb,",
          "",
          "[Added Lines]",
          "1402:  u32 flow_idx = fq_flow_idx(fq, skb);",
          "1406:  spin_lock_bh(&fq->lock);",
          "1407:  fq_tin_enqueue(fq, tin, flow_idx, skb,",
          "1410:  spin_unlock_bh(&fq->lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1590:     struct sta_info *sta,",
          "1591:     struct sk_buff *skb)",
          "1592: {",
          "1594:  struct ieee80211_vif *vif;",
          "1595:  struct txq_info *txqi;",
          "",
          "[Removed Lines]",
          "1593:  struct fq *fq = &local->fq;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1608:  if (!txqi)",
          "1609:   return false;",
          "1612:  ieee80211_txq_enqueue(local, txqi, skb);",
          "1615:  schedule_and_wake_txq(local, txqi);",
          "",
          "[Removed Lines]",
          "1611:  spin_lock_bh(&fq->lock);",
          "1613:  spin_unlock_bh(&fq->lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3221:  u8 max_subframes = sta->sta.max_amsdu_subframes;",
          "3222:  int max_frags = local->hw.max_tx_fragments;",
          "3223:  int max_amsdu_len = sta->sta.max_amsdu_len;",
          "3224:  __be16 len;",
          "3225:  void *data;",
          "3226:  bool ret = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3225:  u32 flow_idx;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3249:   max_amsdu_len = min_t(int, max_amsdu_len,",
          "3250:           sta->sta.max_tid_amsdu_len[tid]);",
          "3252:  spin_lock_bh(&fq->lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3254:  flow_idx = fq_flow_idx(fq, skb);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3258:  tin = &txqi->tin;",
          "3260:  head = skb_peek_tail(&flow->queue);",
          "3261:  if (!head || skb_is_gso(head))",
          "3262:   goto out;",
          "",
          "[Removed Lines]",
          "3259:  flow = fq_flow_classify(fq, tin, skb, fq_flow_get_default_func);",
          "",
          "[Added Lines]",
          "3263:  flow = fq_flow_classify(fq, tin, flow_idx, skb,",
          "3264:     fq_flow_get_default_func);",
          "",
          "---------------"
        ]
      }
    }
  ]
}