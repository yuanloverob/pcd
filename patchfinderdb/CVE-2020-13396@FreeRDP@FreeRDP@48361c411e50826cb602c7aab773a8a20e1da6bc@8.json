{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70903cc04eb65c5b8a3a443377d952346bd3d8e5",
      "candidate_info": {
        "commit_hash": "70903cc04eb65c5b8a3a443377d952346bd3d8e5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/70903cc04eb65c5b8a3a443377d952346bd3d8e5",
        "files": [
          "server/proxy/freerdp_proxy.c"
        ],
        "message": "server: proxy: print version and buildconfig on startup\n\n(cherry picked from commit f0fe17d94364087136354284543573bf54da162f)",
        "before_after_code_files": [
          "server/proxy/freerdp_proxy.c||server/proxy/freerdp_proxy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/proxy/freerdp_proxy.c||server/proxy/freerdp_proxy.c": [
          "File: server/proxy/freerdp_proxy.c -> server/proxy/freerdp_proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"pf_log.h\"",
          "25: #include \"pf_modules.h\"",
          "27: #include <freerdp/build-config.h>",
          "28: #include <winpr/collections.h>",
          "29: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <freerdp/version.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  char* config_path = \"config.ini\";",
          "86:  int status = -1;",
          "88:  if (argc >= 2)",
          "89:   config_path = argv[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:  WLog_INFO(TAG, \"freerdp-proxy version info:\");",
          "90:  WLog_INFO(TAG, \"\\tFreeRDP version: %s\", FREERDP_VERSION_FULL);",
          "91:  WLog_INFO(TAG, \"\\tGit commit: %s\", GIT_REVISION);",
          "92:  WLog_DBG(TAG, \"\\tBuild config: %s\", freerdp_get_build_config());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87bca1088a29874e93f403f594bb9aa18b99604d",
      "candidate_info": {
        "commit_hash": "87bca1088a29874e93f403f594bb9aa18b99604d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/87bca1088a29874e93f403f594bb9aa18b99604d",
        "files": [
          "libfreerdp/core/gateway/tsg.c"
        ],
        "message": "Fixed #6199: Reading version information in tsg\n\n(cherry picked from commit e501c56e5ca0c76c4019e7048cba3ee63331d830)",
        "before_after_code_files": [
          "libfreerdp/core/gateway/tsg.c||libfreerdp/core/gateway/tsg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/gateway/tsg.c||libfreerdp/core/gateway/tsg.c": [
          "File: libfreerdp/core/gateway/tsg.c -> libfreerdp/core/gateway/tsg.c"
        ]
      }
    },
    {
      "candidate_hash": "a58129346d20dcc0b9728a67eee6c8ebbd57d0b0",
      "candidate_info": {
        "commit_hash": "a58129346d20dcc0b9728a67eee6c8ebbd57d0b0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a58129346d20dcc0b9728a67eee6c8ebbd57d0b0",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Fixed extended info packet alignment.\n\n(cherry picked from commit 03ebaf2dc1547c75f8693dd5087ce2e8dc17765a)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  { INFO_HIDEF_RAIL_SUPPORTED, \"INFO_HIDEF_RAIL_SUPPORTED\" },",
          "68: };",
          "70: static char* rdp_info_package_flags_description(UINT32 flags)",
          "71: {",
          "72:  char* result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: static BOOL rdp_read_info_null_string(UINT32 flags, wStream* s, size_t cbLen, CHAR** dst,",
          "71:                                       size_t max)",
          "72: {",
          "73:  CHAR* ret = NULL;",
          "75:  const BOOL unicode = flags & INFO_UNICODE;",
          "76:  const size_t nullSize = unicode ? sizeof(WCHAR) : sizeof(CHAR);",
          "78:  if (Stream_GetRemainingLength(s) < (size_t)(cbLen))",
          "79:   return FALSE;",
          "81:  if (cbLen > 0)",
          "82:  {",
          "83:   WCHAR domain[512 / sizeof(WCHAR) + sizeof(WCHAR)] = { 0 };",
          "88:   if ((cbLen % 2) || (cbLen > (max - nullSize)))",
          "89:   {",
          "90:    WLog_ERR(TAG, \"protocol error: invalid value: %\" PRIuz \"\", cbLen);",
          "91:    return FALSE;",
          "92:   }",
          "94:   Stream_Read(s, domain, cbLen);",
          "96:   if (unicode)",
          "97:   {",
          "98:    if (ConvertFromUnicode(CP_UTF8, 0, domain, cbLen, &ret, 0, NULL, NULL) < 1)",
          "99:    {",
          "100:     WLog_ERR(TAG, \"failed to convert Domain string\");",
          "101:     return FALSE;",
          "102:    }",
          "103:   }",
          "104:   else",
          "105:   {",
          "106:    ret = calloc(cbLen + 1, nullSize);",
          "107:    if (!ret)",
          "108:     return FALSE;",
          "109:    memcpy(ret, domain, cbLen);",
          "110:   }",
          "111:  }",
          "113:  free(*dst);",
          "115:  return TRUE;",
          "116: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:  UINT16 cbClientDir;",
          "246:  UINT16 cbAutoReconnectLen;",
          "247:  rdpSettings* settings = rdp->settings;",
          "253:  if (Stream_GetRemainingLength(s) < 4)",
          "254:   return FALSE;",
          "",
          "[Removed Lines]",
          "248:  union {",
          "249:   BYTE* bp;",
          "250:   WCHAR* wp;",
          "251:  } ptrconv;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275:  if (Stream_GetRemainingLength(s) < cbClientAddress)",
          "276:   return FALSE;",
          "306:  if (Stream_GetRemainingLength(s) < 2)",
          "307:   return FALSE;",
          "",
          "[Removed Lines]",
          "278:  if (settings->ClientAddress)",
          "279:  {",
          "280:   free(settings->ClientAddress);",
          "281:   settings->ClientAddress = NULL;",
          "282:  }",
          "284:  if (cbClientAddress)",
          "285:  {",
          "286:   ptrconv.bp = Stream_Pointer(s);",
          "288:   if ((cbClientAddress < sizeof(WCHAR)) || (ptrconv.bp[cbClientAddress - 1]) ||",
          "289:       (ptrconv.bp[cbClientAddress - 2]))",
          "290:   {",
          "291:    WLog_ERR(TAG, \"protocol error: clientAddress must be null terminated\");",
          "292:    return FALSE;",
          "293:   }",
          "295:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->ClientAddress, 0, NULL,",
          "296:                          NULL) < 1)",
          "297:   {",
          "298:    WLog_ERR(TAG, \"failed to convert client address\");",
          "299:    return FALSE;",
          "300:   }",
          "302:   Stream_Seek(s, cbClientAddress);",
          "303:   WLog_DBG(TAG, \"rdp client address: [%s]\", settings->ClientAddress);",
          "304:  }",
          "",
          "[Added Lines]",
          "322:  if (!rdp_read_info_null_string(INFO_UNICODE, s, cbClientAddress, &settings->ClientAddress,",
          "323:                                 (settings->RdpVersion < RDP_VERSION_10_0) ? 64 : 80))",
          "324:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "322:   return FALSE;",
          "",
          "[Removed Lines]",
          "319:  if ((cbClientDir % 2) || cbClientDir > 512)",
          "320:  {",
          "321:   WLog_ERR(TAG, \"protocol error: invalid cbClientDir value: %\" PRIu16 \"\", cbClientDir);",
          "323:  }",
          "325:  if (Stream_GetRemainingLength(s) < cbClientDir)",
          "326:   return FALSE;",
          "328:  if (settings->ClientDir)",
          "329:  {",
          "330:   free(settings->ClientDir);",
          "331:   settings->ClientDir = NULL;",
          "332:  }",
          "334:  if (cbClientDir)",
          "335:  {",
          "336:   ptrconv.bp = Stream_Pointer(s);",
          "338:   if ((cbClientDir < sizeof(WCHAR)) || (ptrconv.bp[cbClientDir - 1]) ||",
          "339:       (ptrconv.bp[cbClientDir - 2]))",
          "340:   {",
          "341:    WLog_ERR(TAG, \"protocol error: clientDir must be null terminated\");",
          "342:    return FALSE;",
          "343:   }",
          "345:   if (ConvertFromUnicode(CP_UTF8, 0, ptrconv.wp, -1, &settings->ClientDir, 0, NULL, NULL) < 1)",
          "346:   {",
          "347:    WLog_ERR(TAG, \"failed to convert client directory\");",
          "348:    return FALSE;",
          "349:   }",
          "351:   Stream_Seek(s, cbClientDir);",
          "352:   WLog_DBG(TAG, \"rdp client dir: [%s]\", settings->ClientDir);",
          "353:  }",
          "",
          "[Added Lines]",
          "339:  if (!rdp_read_info_null_string(INFO_UNICODE, s, cbClientDir, &settings->ClientDir, 512))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b473e03d0d2e9fb88e6e021862f40648224be96",
      "candidate_info": {
        "commit_hash": "9b473e03d0d2e9fb88e6e021862f40648224be96",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9b473e03d0d2e9fb88e6e021862f40648224be96",
        "files": [
          "channels/rdpgfx/client/rdpgfx_main.c"
        ],
        "message": "fix typo in GFX logs\n\n(cherry picked from commit a79635fd1c9e12c4ea543f461f03c0dd83d5e063)",
        "before_after_code_files": [
          "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c": [
          "File: channels/rdpgfx/client/rdpgfx_main.c -> channels/rdpgfx/client/rdpgfx_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:   monitor = &(pdu.monitorDefArray[index]);",
          "606:   DEBUG_RDPGFX(gfx->log,",
          "607:                \"RecvResetGraphicsPdu: monitor left:%\" PRIi32 \" top:%\" PRIi32 \" right:%\" PRIi32",
          "609:                monitor->left, monitor->top, monitor->right, monitor->bottom, monitor->flags);",
          "610:  }",
          "",
          "[Removed Lines]",
          "608:                \" left:%\" PRIi32 \" flags:0x%\" PRIx32 \"\",",
          "",
          "[Added Lines]",
          "608:                \" bottom:%\" PRIi32 \" flags:0x%\" PRIx32 \"\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e8f883e7cdc09353c62d294e95e1b720f6ca944",
      "candidate_info": {
        "commit_hash": "5e8f883e7cdc09353c62d294e95e1b720f6ca944",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5e8f883e7cdc09353c62d294e95e1b720f6ca944",
        "files": [
          "server/proxy/pf_client.c"
        ],
        "message": "server: proxy: use peer load balance info when host is fetched from config\n\n(cherry picked from commit 6f4682a043d20b794540827fe8604354477bb7af)",
        "before_after_code_files": [
          "server/proxy/pf_client.c||server/proxy/pf_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/proxy/pf_client.c||server/proxy/pf_client.c": [
          "File: server/proxy/pf_client.c -> server/proxy/pf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  freerdp_send_error_info(ps->context.rdp);",
          "73: }",
          "76: {",
          "77:  rdpContext* context = (rdpContext*)pc;",
          "78:  pServerContext* ps = pc->pdata->ps;",
          "",
          "[Removed Lines]",
          "75: static BOOL pf_client_load_rdpsnd(pClientContext* pc, proxyConfig* config)",
          "",
          "[Added Lines]",
          "75: static BOOL pf_client_load_rdpsnd(pClientContext* pc)",
          "79:  proxyConfig* config = pc->pdata->config;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  return TRUE;",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: static BOOL pf_client_passthrough_channels_init(pClientContext* pc)",
          "103: {",
          "104:  pServerContext* ps = pc->pdata->ps;",
          "105:  rdpSettings* settings = pc->context.settings;",
          "106:  proxyConfig* config = pc->pdata->config;",
          "107:  size_t i;",
          "109:  if (settings->ChannelCount + config->PassthroughCount >= settings->ChannelDefArraySize)",
          "110:  {",
          "111:   LOG_ERR(TAG, pc, \"too many channels\");",
          "112:   return FALSE;",
          "113:  }",
          "115:  for (i = 0; i < config->PassthroughCount; i++)",
          "116:  {",
          "117:   const char* channel_name = config->Passthrough[i];",
          "118:   CHANNEL_DEF channel = { 0 };",
          "121:   if (!WTSVirtualChannelManagerIsChannelJoined(ps->vcm, channel_name))",
          "122:   {",
          "123:    LOG_INFO(TAG, ps, \"client did not connected with channel %s, skipping passthrough\",",
          "124:             channel_name);",
          "126:    continue;",
          "127:   }",
          "130:   strncpy(channel.name, channel_name, CHANNEL_NAME_LEN);",
          "132:   settings->ChannelDefArray[settings->ChannelCount++] = channel;",
          "133:  }",
          "135:  return TRUE;",
          "136: }",
          "138: static BOOL pf_client_use_peer_load_balance_info(pClientContext* pc)",
          "139: {",
          "140:  pServerContext* ps = pc->pdata->ps;",
          "141:  rdpSettings* settings = pc->context.settings;",
          "142:  DWORD lb_info_len;",
          "143:  const char* lb_info = freerdp_nego_get_routing_token(&ps->context, &lb_info_len);",
          "144:  if (!lb_info)",
          "145:   return TRUE;",
          "147:  free(settings->LoadBalanceInfo);",
          "149:  settings->LoadBalanceInfoLength = lb_info_len;",
          "150:  settings->LoadBalanceInfo = malloc(settings->LoadBalanceInfoLength);",
          "152:  if (!settings->LoadBalanceInfo)",
          "153:   return FALSE;",
          "155:  CopyMemory(settings->LoadBalanceInfo, lb_info, settings->LoadBalanceInfoLength);",
          "156:  return TRUE;",
          "157: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  PubSub_SubscribeChannelDisconnected(instance->context->pubSub,",
          "145:                                      pf_channels_on_client_channel_disconnect);",
          "146:  PubSub_SubscribeErrorInfo(instance->context->pubSub, pf_client_on_error_info);",
          "152:  LOG_INFO(TAG, pc, \"Loading addins\");",
          "154:  {",
          "161:    return FALSE;",
          "183:  }",
          "186:  {",
          "187:   LOG_ERR(TAG, pc, \"Failed to load rdpsnd client\");",
          "188:   return FALSE;",
          "",
          "[Removed Lines]",
          "156:   size_t i;",
          "158:   if (settings->ChannelCount + config->PassthroughCount >= settings->ChannelDefArraySize)",
          "159:   {",
          "160:    LOG_ERR(TAG, pc, \"too many channels\");",
          "162:   }",
          "164:   for (i = 0; i < config->PassthroughCount; i++)",
          "165:   {",
          "166:    const char* channel_name = config->Passthrough[i];",
          "167:    CHANNEL_DEF channel = { 0 };",
          "170:    if (!WTSVirtualChannelManagerIsChannelJoined(ps->vcm, channel_name))",
          "171:    {",
          "172:     LOG_INFO(TAG, ps, \"client did not connected with channel %s, skipping passthrough\",",
          "173:              channel_name);",
          "175:     continue;",
          "176:    }",
          "179:    strncpy(channel.name, channel_name, CHANNEL_NAME_LEN);",
          "181:    settings->ChannelDefArray[settings->ChannelCount++] = channel;",
          "182:   }",
          "185:  if (!pf_client_load_rdpsnd(pc, config))",
          "",
          "[Added Lines]",
          "212:  if (!config->UseLoadBalanceInfo)",
          "218:   if (!pf_client_use_peer_load_balance_info(pc))",
          "222:  if (!pf_client_passthrough_channels_init(pc))",
          "223:   return FALSE;",
          "225:  if (!pf_client_load_rdpsnd(pc))",
          "",
          "---------------"
        ]
      }
    }
  ]
}