{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
      "candidate_info": {
        "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
        "files": [
          "main/Helper.cpp"
        ],
        "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
        "before_after_code_files": [
          "main/Helper.cpp||main/Helper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/Helper.cpp||main/Helper.cpp": [
          "File: main/Helper.cpp -> main/Helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1014:  \"$\",",
          "1015:  \"<\",",
          "1016:  \">\",",
          "1017:  NULL",
          "1018: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1017:  \"\\n\",",
          "1018:  \"\\r\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be2e3c9ed6e80c550a7a3815a9bb8eef778b3a7c",
      "candidate_info": {
        "commit_hash": "be2e3c9ed6e80c550a7a3815a9bb8eef778b3a7c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/be2e3c9ed6e80c550a7a3815a9bb8eef778b3a7c",
        "files": [
          "hardware/RFXComSerial.cpp",
          "hardware/RFXComSerial.h"
        ],
        "message": "RFXCom speed up firmware uploading",
        "before_after_code_files": [
          "hardware/RFXComSerial.cpp||hardware/RFXComSerial.cpp",
          "hardware/RFXComSerial.h||hardware/RFXComSerial.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/RFXComSerial.cpp||hardware/RFXComSerial.cpp": [
          "File: hardware/RFXComSerial.cpp -> hardware/RFXComSerial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <ctime>",
          "19: #ifndef WIN32",
          "24: #endif",
          "26: #define RETRY_DELAY 30",
          "",
          "[Removed Lines]",
          "20:  #include <sys/stat.h>",
          "21:  #include <unistd.h>",
          "22:  #include <sys/types.h>",
          "23:  #include <pwd.h>",
          "",
          "[Added Lines]",
          "20: #include <sys/stat.h>",
          "21: #include <unistd.h>",
          "22: #include <sys/types.h>",
          "23: #include <pwd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: RFXComSerial::RFXComSerial(const int ID, const std::string& devname, unsigned int baud_rate) :",
          "64: {",
          "69:  m_bReceiverStarted = false;",
          "70:  m_bInBootloaderMode = false;",
          "71:  m_bStartFirmwareUpload = false;",
          "",
          "[Removed Lines]",
          "63: m_szSerialPort(devname)",
          "65:  m_HwdID=ID;",
          "66:  m_iBaudRate=baud_rate;",
          "68:  m_stoprequested=false;",
          "",
          "[Added Lines]",
          "63:  m_szSerialPort(devname)",
          "65:  m_HwdID = ID;",
          "66:  m_iBaudRate = baud_rate;",
          "68:  m_stoprequested = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  m_bReceiverStarted = false;",
          "102:  m_thread = std::make_shared<std::thread>(&RFXComSerial::Do_Work, this);",
          "",
          "[Removed Lines]",
          "99:  m_retrycntr=RETRY_DELAY; //will force reconnect first thing",
          "",
          "[Added Lines]",
          "99:  m_retrycntr = RETRY_DELAY; //will force reconnect first thing",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109: bool RFXComSerial::StopHardware()",
          "110: {",
          "112:  if (m_thread)",
          "113:  {",
          "114:   m_thread->join();",
          "115:   m_thread.reset();",
          "116:  }",
          "119:  if (m_serial.isOpen())",
          "120:   m_serial.close();",
          "121:  terminate();",
          "123:  return true;",
          "124: }",
          "",
          "[Removed Lines]",
          "111:  m_stoprequested=true;",
          "118:     sleep_milliseconds(10);",
          "122:  m_bIsStarted=false;",
          "",
          "[Added Lines]",
          "111:  m_stoprequested = true;",
          "118:  sleep_milliseconds(10);",
          "122:  m_bIsStarted = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:   sec_counter++;",
          "134:   if (sec_counter % 12 == 0) {",
          "136:   }",
          "138:   if (m_stoprequested)",
          "",
          "[Removed Lines]",
          "135:    m_LastHeartbeat=mytime(NULL);",
          "",
          "[Added Lines]",
          "135:    m_LastHeartbeat = mytime(NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:   if (!isOpen())",
          "155:   {",
          "157:    {",
          "159:    }",
          "160:    m_retrycntr++;",
          "162:    {",
          "164:     OpenSerialDevice();",
          "165:    }",
          "166:   }",
          "168:  }",
          "170: }",
          "",
          "[Removed Lines]",
          "156:    if (m_retrycntr==0)",
          "158:     _log.Log(LOG_STATUS,\"RFXCOM: retrying in %d seconds...\", RETRY_DELAY);",
          "161:    if (m_retrycntr>=RETRY_DELAY)",
          "163:     m_retrycntr=0;",
          "169:  _log.Log(LOG_STATUS,\"RFXCOM: Serial Worker stopped...\");",
          "",
          "[Added Lines]",
          "156:    if (m_retrycntr == 0)",
          "158:     _log.Log(LOG_STATUS, \"RFXCOM: retrying in %d seconds...\", RETRY_DELAY);",
          "161:    if (m_retrycntr >= RETRY_DELAY)",
          "163:     m_retrycntr = 0;",
          "169:  _log.Log(LOG_STATUS, \"RFXCOM: Serial Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:  try",
          "177:  {",
          "180:  }",
          "181:  catch (boost::exception & e)",
          "182:  {",
          "184: #ifdef _DEBUG",
          "186: #else",
          "187:   (void)e;",
          "188: #endif",
          "189:   return false;",
          "190:  }",
          "192:  {",
          "194:   return false;",
          "195:  }",
          "198:  setReadCallback(boost::bind(&RFXComSerial::readCallback, this, _1, _2));",
          "199:  if (!bIsFirmwareUpgrade)",
          "200:   sOnConnected(this);",
          "",
          "[Removed Lines]",
          "178:   open(m_szSerialPort,m_iBaudRate);",
          "179:   _log.Log(LOG_STATUS,\"RFXCOM: Using serial port: %s\", m_szSerialPort.c_str());",
          "183:   _log.Log(LOG_ERROR,\"RFXCOM: Error opening serial port!\");",
          "185:   _log.Log(LOG_ERROR,\"-----------------\\n%s\\n----------------\", boost::diagnostic_information(e).c_str());",
          "191:  catch ( ... )",
          "193:   _log.Log(LOG_ERROR,\"RFXCOM: Error opening serial port!!!\");",
          "196:  m_bIsStarted=true;",
          "197:  m_rxbufferpos=0;",
          "",
          "[Added Lines]",
          "178:   open(m_szSerialPort, m_iBaudRate);",
          "179:   _log.Log(LOG_STATUS, \"RFXCOM: Using serial port: %s\", m_szSerialPort.c_str());",
          "183:   _log.Log(LOG_ERROR, \"RFXCOM: Error opening serial port!\");",
          "185:   _log.Log(LOG_ERROR, \"-----------------\\n%s\\n----------------\", boost::diagnostic_information(e).c_str());",
          "191:  catch (...)",
          "193:   _log.Log(LOG_ERROR, \"RFXCOM: Error opening serial port!!!\");",
          "196:  m_bIsStarted = true;",
          "197:  m_rxbufferpos = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "330:    std::stringstream spercentage;",
          "331:    spercentage.precision(2);",
          "333:    m_szUploadMessage = saddress.str() + \", \" + spercentage.str() + \" %\";",
          "334:    _log.Log(LOG_STATUS, m_szUploadMessage);",
          "",
          "[Removed Lines]",
          "332:    spercentage << std::setprecision(2)  << std::fixed << m_FirmwareUploadPercentage;",
          "",
          "[Added Lines]",
          "332:    spercentage << std::setprecision(2) << std::fixed << m_FirmwareUploadPercentage;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "435: {",
          "436: #ifndef WIN32",
          "437:  struct stat info;",
          "439:  {",
          "440:   struct passwd *pw = getpwuid(info.st_uid);",
          "443:   {",
          "444:    m_szUploadMessage = \"Error setting firmware ownership (chown returned an error!)\";",
          "445:    _log.Log(LOG_ERROR, m_szUploadMessage);",
          "",
          "[Removed Lines]",
          "438:  if (stat(szFilename,&info)==0)",
          "441:   int ret=chown(szFilename,pw->pw_uid,pw->pw_gid);",
          "442:   if (ret!=0)",
          "",
          "[Added Lines]",
          "438:  if (stat(szFilename, &info) == 0)",
          "441:   int ret = chown(szFilename, pw->pw_uid, pw->pw_gid);",
          "442:   if (ret != 0)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "468:  int addrh = 0;",
          "470:  fileBuffer.clear();",
          "472:  bool bHaveEOF = false;",
          "474:  while (!infile.eof())",
          "",
          "[Removed Lines]",
          "471:  std::string dstring=\"\";",
          "",
          "[Added Lines]",
          "471:  std::string dstring = \"\";",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "526:   }",
          "528:   chksum = ~chksum + 1;",
          "530:   {",
          "531:    infile.close();",
          "532:    m_szUploadMessage = \"RFXCOM: bootloader, checksum mismatch!\";",
          "",
          "[Removed Lines]",
          "529:   if ((chksum != rawLineBuf[raw_length - 1]) || (raw_length<4))",
          "",
          "[Added Lines]",
          "529:   if ((chksum != rawLineBuf[raw_length - 1]) || (raw_length < 4))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "541:   {",
          "542:   case 0:",
          "545:    if (dstring.size() == PKT_writeblock)",
          "546:    {",
          "547:     dest_address = (((((addrh << 16) | (faddress + byte_count)) - PKT_writeblock)) / PKT_bytesperaddr);",
          "",
          "[Removed Lines]",
          "544:    dstring+= std::string((const char*)&rawLineBuf + 4, (const char*)rawLineBuf + 4 + byte_count);",
          "",
          "[Added Lines]",
          "544:    dstring += std::string((const char*)&rawLineBuf + 4, (const char*)rawLineBuf + 4 + byte_count);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "628:    _log.Log(LOG_ERROR, m_szUploadMessage);",
          "629:    return false;",
          "630:   }",
          "632:  }",
          "633:  m_szUploadMessage = \"RFXCOM: Erasing memory completed....\";",
          "634:  _log.Log(LOG_STATUS, m_szUploadMessage);",
          "635:  return true;",
          "636: }",
          "639: {",
          "640:  if (!m_serial.isOpen())",
          "641:   return false;",
          "",
          "[Removed Lines]",
          "631:   BootAddr+= (PKT_eraseblock * nBlocks);",
          "638: bool RFXComSerial::Write_TX_PKT(const unsigned char *pdata, size_t length, const int max_retry)",
          "",
          "[Added Lines]",
          "631:   BootAddr += (PKT_eraseblock * nBlocks);",
          "638: bool RFXComSerial::Write_TX_PKT(const unsigned char *pdata, size_t length, int max_retry)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "677:   return true;",
          "678:  }",
          "685:  {",
          "686:   try",
          "687:   {",
          "691:    {",
          "695:     {",
          "698:       return true;",
          "699:     }",
          "701:    }",
          "703:   }",
          "704:   catch (...)",
          "705:   {",
          "",
          "[Removed Lines]",
          "680:  int nretry = 0;",
          "681:  unsigned char input_buffer[512];",
          "682:  int tot_read;",
          "684:  while (nretry < max_retry)",
          "688:    m_serial.write((const uint8_t *)&output_buffer, tot_bytes);",
          "689:    int rcount = 0;",
          "690:    while (rcount < 2)",
          "692:     sleep_milliseconds(500);",
          "693:     tot_read = m_serial.read((uint8_t *)&input_buffer, sizeof(input_buffer));",
          "694:     if (tot_read)",
          "696:      bool bret=Handle_RX_PKT(input_buffer, tot_read);",
          "697:      if (bret)",
          "700:     rcount++;",
          "702:    nretry++;",
          "",
          "[Added Lines]",
          "680:  while (max_retry > 0)",
          "684:    size_t twrite = m_serial.write((const uint8_t *)&output_buffer, tot_bytes);",
          "685:    sleep_milliseconds(100);",
          "686:    if (twrite == tot_bytes)",
          "688:     int rcount = 0;",
          "689:     while (rcount < 2)",
          "691:      if (Read_TX_PKT())",
          "693:      sleep_milliseconds(500);",
          "694:      rcount++;",
          "697:    max_retry--;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "709:  return m_bHaveRX;",
          "710: }",
          "712: bool RFXComSerial::Handle_RX_PKT(const unsigned char *pdata, size_t length)",
          "713: {",
          "714:  if (length < 2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: bool RFXComSerial::Read_TX_PKT()",
          "709: {",
          "710:  uint8_t sbuffer[512];",
          "711:  size_t buffer_offset = 0;",
          "712:  bool bSTXFound1 = false;",
          "713:  bool bSTXFound2 = false;",
          "714:  bool bETXFound = false;",
          "715:  bool bHadDLE = false;",
          "716:  unsigned char chksum = 0;",
          "717:  m_rx_tot_bytes = 0;",
          "718:  while (m_rx_tot_bytes < sizeof(m_rx_input_buffer))",
          "719:  {",
          "720:   size_t tot_read = m_serial.read((uint8_t*)&sbuffer, sizeof(sbuffer));",
          "721:   if (tot_read <= 0)",
          "722:    return false;",
          "723:   int ii = 0;",
          "724:   while (tot_read > 0)",
          "725:   {",
          "726:    uint8_t tByte = sbuffer[ii++];",
          "727:    if (!bSTXFound1)",
          "728:    {",
          "729:     if (tByte != PKT_STX)",
          "730:      return false;",
          "731:     bSTXFound1 = true;",
          "732:    }",
          "733:    else if (!bSTXFound2)",
          "734:    {",
          "735:     if (tByte != PKT_STX)",
          "736:      return false;",
          "737:     bSTXFound2 = true;",
          "738:     chksum = 0;",
          "739:     bHadDLE = false;",
          "740:     m_rx_tot_bytes = 0;",
          "741:    }",
          "742:    else",
          "743:    {",
          "745:     if ((tByte == PKT_ETX) && (!bHadDLE))",
          "746:     {",
          "747:      chksum = ~chksum + 1; //test checksum",
          "748:      if (chksum != 0)",
          "749:      {",
          "750:       _log.Log(LOG_ERROR, \"RFXCOM: bootloader, received response with invalid checksum!\");",
          "751:       return false;",
          "752:      }",
          "753:      m_bHaveRX = true;",
          "754:      return true;",
          "755:     }",
          "756:     else if (tByte == PKT_DLE)",
          "757:     {",
          "758:      bHadDLE = true;",
          "759:     }",
          "760:     else",
          "761:     {",
          "762:      bHadDLE = false;",
          "763:      chksum += tByte;",
          "764:      m_rx_input_buffer[m_rx_tot_bytes++] = tByte;",
          "765:     }",
          "766:    }",
          "767:    tot_read--;",
          "768:   }",
          "769:  }",
          "770:  return ((buffer_offset > 0) && (bETXFound));",
          "771: }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "719:  unsigned char chksum = 0;",
          "720:  m_rx_tot_bytes = 0;",
          "721:  size_t ii = 1;",
          "725:  {",
          "726:   unsigned char dbyte = pdata[ii];",
          "727:   switch (dbyte)",
          "",
          "[Removed Lines]",
          "724:  while ((ii<length) && (m_rx_tot_bytes<sizeof(m_rx_input_buffer) - 1))",
          "",
          "[Added Lines]",
          "785:  while ((ii < length) && (m_rx_tot_bytes < sizeof(m_rx_input_buffer) - 1))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "753:    return true;",
          "754:    break;",
          "755:   case PKT_DLE:",
          "757:    ii++;",
          "758:    if (ii >= length)",
          "759:     return false;",
          "",
          "[Removed Lines]",
          "756:    dbyte = pdata[ii+1];",
          "",
          "[Added Lines]",
          "817:    dbyte = pdata[ii + 1];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "795:   return false;",
          "796:  if (m_bInBootloaderMode)",
          "797:   return false;",
          "799:  return true;",
          "800: }",
          "",
          "[Removed Lines]",
          "798:  write(pdata,length);",
          "",
          "[Added Lines]",
          "859:  write(pdata, length);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "820:    }",
          "822:    CDomoticzHardwareBase *pHardware = NULL;",
          "824:    {",
          "825:     pHardware = m_mainworker.GetHardware(atoi(hardwareid.c_str()));",
          "826:    }",
          "828:    {",
          "830:     pHardware = m_mainworker.GetHardwareByType(HTYPE_RFXtrx433);",
          "832:     {",
          "833:      pHardware = m_mainworker.GetHardwareByType(HTYPE_RFXtrx868);",
          "834:      if (pHardware == NULL)",
          "",
          "[Removed Lines]",
          "823:    if ((!hardwareid.empty()) && (hardwareid!=\"undefined\"))",
          "827:    if (pHardware==NULL)",
          "831:     if (pHardware==NULL)",
          "",
          "[Added Lines]",
          "884:    if ((!hardwareid.empty()) && (hardwareid != \"undefined\"))",
          "888:    if (pHardware == NULL)",
          "892:     if (pHardware == NULL)",
          "",
          "---------------"
        ],
        "hardware/RFXComSerial.h||hardware/RFXComSerial.h": [
          "File: hardware/RFXComSerial.h -> hardware/RFXComSerial.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  void Do_Work();",
          "24:  bool UpgradeFirmware();",
          "26:  bool Handle_RX_PKT(const unsigned char *pdata, size_t length);",
          "27:  bool Read_Firmware_File(const char *szFilename, std::map<unsigned long, std::string>& fileBuffer);",
          "28:  bool EraseMemory(const int StartAddress, const int StopAddress);",
          "",
          "[Removed Lines]",
          "25:  bool Write_TX_PKT(const unsigned char *pdata, size_t length, const int max_retry = 3);",
          "",
          "[Added Lines]",
          "25:  bool Read_TX_PKT();",
          "26:  bool Write_TX_PKT(const unsigned char *pdata, size_t length, int max_retry = 3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a184c75b178d23fcc4869f179a4fdfa86fe3a52",
      "candidate_info": {
        "commit_hash": "8a184c75b178d23fcc4869f179a4fdfa86fe3a52",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/8a184c75b178d23fcc4869f179a4fdfa86fe3a52",
        "files": [
          "main/WebServer.cpp",
          "main/mainworker.cpp"
        ],
        "message": "Making internal download links HTTPS",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2558:    m_sql.GetPreferencesVar(\"ReleaseChannel\", nValue);",
          "2559:    bool bIsBetaChannel = (nValue != 0);",
          "2562:    if (bIsBetaChannel)",
          "2563:    {",
          "2564:     utsname my_uname;",
          "",
          "[Removed Lines]",
          "2561:    std::string szHistoryURL = \"http://www.domoticz.com/download.php?channel=stable&type=history\";",
          "",
          "[Added Lines]",
          "2561:    std::string szHistoryURL = \"https://www.domoticz.com/download.php?channel=stable&type=history\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2576:     }",
          "2578:     if (((machine != \"armv6l\") && (machine != \"armv7l\") && (systemname != \"windows\") && (machine != \"x86_64\") && (machine != \"aarch64\")) || (strstr(my_uname.release, \"ARCH+\") != NULL))",
          "2580:     else",
          "2582:    }",
          "2583:    if (!HTTPClient::GET(szHistoryURL, historyfile))",
          "2584:    {",
          "",
          "[Removed Lines]",
          "2579:      szHistoryURL = \"http://www.domoticz.com/download.php?channel=beta&type=history\";",
          "2581:      szHistoryURL = \"http://www.domoticz.com/download.php?channel=beta&type=history&system=\" + systemname + \"&machine=\" + machine;",
          "",
          "[Added Lines]",
          "2579:      szHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history\";",
          "2581:      szHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history&system=\" + systemname + \"&machine=\" + machine;",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1269:  std::string szURL;",
          "1270:  if (!bIsBetaChannel)",
          "1271:  {",
          "1275:  }",
          "1276:  else",
          "1277:  {",
          "1281:  }",
          "1283:  std::string revfile;",
          "",
          "[Removed Lines]",
          "1272:   szURL = \"http://www.domoticz.com/download.php?channel=stable&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1273:   m_szDomoticzUpdateURL = \"http://www.domoticz.com/download.php?channel=stable&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1274:   m_szDomoticzUpdateChecksumURL = \"http://www.domoticz.com/download.php?channel=stable&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1278:   szURL = \"http://www.domoticz.com/download.php?channel=beta&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1279:   m_szDomoticzUpdateURL = \"http://www.domoticz.com/download.php?channel=beta&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1280:   m_szDomoticzUpdateChecksumURL = \"http://www.domoticz.com/download.php?channel=beta&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "",
          "[Added Lines]",
          "1272:   szURL = \"https://www.domoticz.com/download.php?channel=stable&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1273:   m_szDomoticzUpdateURL = \"https://www.domoticz.com/download.php?channel=stable&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1274:   m_szDomoticzUpdateChecksumURL = \"https://www.domoticz.com/download.php?channel=stable&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1278:   szURL = \"https://www.domoticz.com/download.php?channel=beta&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1279:   m_szDomoticzUpdateURL = \"https://www.domoticz.com/download.php?channel=beta&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1280:   m_szDomoticzUpdateChecksumURL = \"https://www.domoticz.com/download.php?channel=beta&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1307: bool MainWorker::StartDownloadUpdate()",
          "1308: {",
          "1309: #ifdef WIN32",
          "1310:  return false; //managed by web gui",
          "1311: #endif",
          "1313:  if (!IsUpdateAvailable(true))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1309: #ifndef DEBUG_DOWNLOAD",
          "1312: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3662c39eb1099e5063ca2898c2883e3b7cd78f6b",
      "candidate_info": {
        "commit_hash": "3662c39eb1099e5063ca2898c2883e3b7cd78f6b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3662c39eb1099e5063ca2898c2883e3b7cd78f6b",
        "files": [
          "www/app/report/EnergyMultiCounterReport.js"
        ],
        "message": "Corrected P1 counter values for report",
        "before_after_code_files": [
          "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js": [
          "File: www/app/report/EnergyMultiCounterReport.js -> www/app/report/EnergyMultiCounterReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:                     usage2: {",
          "84:                         usage: parseFloat(item.v2),",
          "85:                         cost: parseFloat(item.v2) * costs.CostEnergyT2 / 10000,",
          "87:                     },",
          "88:                 };",
          "",
          "[Removed Lines]",
          "86:                         counter: parseFloat(item.c2)",
          "",
          "[Added Lines]",
          "86:                         counter: parseFloat(item.c3)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:                     dayRecord.return1 = {",
          "92:                         usage: parseFloat(item.r1),",
          "93:                         cost: parseFloat(item.r1) * costs.CostEnergyR1 / 10000,",
          "95:                     };",
          "97:                     dayRecord.return2 = {",
          "",
          "[Removed Lines]",
          "94:                         counter: parseFloat(item.c3)",
          "",
          "[Added Lines]",
          "94:                         counter: parseFloat(item.c2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2046806c827af69a8ad6c06189c64c42d82fd814",
      "candidate_info": {
        "commit_hash": "2046806c827af69a8ad6c06189c64c42d82fd814",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2046806c827af69a8ad6c06189c64c42d82fd814",
        "files": [
          "hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h"
        ],
        "message": "HTTP Protocol: Datatypes Bytes and ByteArray now supported for outbound messages (allows sending binary data)",
        "before_after_code_files": [
          "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp": [
          "File: hardware/plugins/PluginProtocols.cpp -> hardware/plugins/PluginProtocols.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:    pProtocol->AuthenticationDetails(sUsername, sPassword);",
          "35:    return (CPluginProtocol*)pProtocol;",
          "36:   }",
          "37:   else return new CPluginProtocol();",
          "38:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   else if ((sProtocol == \"WS\") || (sProtocol == \"WSS\"))",
          "38:   {",
          "39:    CPluginProtocolWS* pProtocol = new CPluginProtocolWS(sProtocol == \"WSS\");",
          "40:    pProtocol->AuthenticationDetails(sUsername, sPassword);",
          "41:    return (CPluginProtocol*)pProtocol;",
          "42:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:   PyObject *pLength = NULL;",
          "746:   if (pHeaders)",
          "747:    pLength = PyDict_GetItemString(pHeaders, \"Content-Length\");",
          "749:   {",
          "751:    sHttp += \"Content-Length: \" + std::to_string(iLength) + \"\\r\\n\";",
          "752:   }",
          "754:   sHttp += \"\\r\\n\";",
          "757:   if (pData && PyUnicode_Check(pData))",
          "758:   {",
          "759:    sHttp += PyUnicode_AsUTF8(pData);",
          "760:   }",
          "764:   return retVal;",
          "765:  }",
          "",
          "[Removed Lines]",
          "748:   if (!pLength && pData && PyUnicode_Check(pData))",
          "750:    Py_ssize_t iLength = PyUnicode_GetLength(pData);",
          "762:   retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "",
          "[Added Lines]",
          "754:   if (!pLength && pData)",
          "756:    Py_ssize_t iLength = 0;",
          "757:    if (PyUnicode_Check(pData))",
          "758:     iLength = PyUnicode_GetLength(pData);",
          "759:    else if (pData->ob_type->tp_name == std::string(\"bytearray\"))",
          "760:     iLength = PyByteArray_Size(pData);",
          "761:    else if (PyBytes_Check(pData))",
          "762:     iLength = PyBytes_Size(pData);",
          "772:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "774:   else if (pData && (pData->ob_type->tp_name == std::string(\"bytearray\")))",
          "775:   {",
          "776:    retVal.reserve(sHttp.length() + PyByteArray_Size(pData));",
          "777:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "778:    const char* pByteArray = PyByteArray_AsString(pData);",
          "779:    int iStop = PyByteArray_Size(pData);",
          "780:    for (int i = 0; i < iStop; i++)",
          "781:    {",
          "782:     retVal.push_back(pByteArray[i]);",
          "783:    }",
          "784:   }",
          "785:   else if (pData && PyBytes_Check(pData))",
          "786:   {",
          "787:    retVal.reserve(sHttp.length() + PyBytes_Size(pData));",
          "788:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "789:    const char* pBytes = PyBytes_AsString(pData);",
          "790:    int iStop = PyBytes_Size(pData);",
          "791:    for (int i = 0; i < iStop; i++)",
          "792:    {",
          "793:     retVal.push_back(pBytes[i]);",
          "794:    }",
          "795:   }",
          "796:   else",
          "797:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1558:   return retVal;",
          "1559:  }",
          "1560: }",
          "1561: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1598:  See: https://tools.ietf.org/html/rfc6455#section-5.2",
          "1600:    0                   1                   2                   3",
          "1601:    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1",
          "1602:   +-+-+-+-+-------+-+-------------+-------------------------------+",
          "1603:   |F|R|R|R| opcode|M| Payload len |    Extended payload length    |",
          "1604:   |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |",
          "1605:   |N|V|V|V|       |S|             |   (if payload len==126/127)   |",
          "1606:   | |1|2|3|       |K|             |                               |",
          "1607:   +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +",
          "1608:   |     Extended payload length continued, if payload len == 127  |",
          "1609:   + - - - - - - - - - - - - - - - +-------------------------------+",
          "1610:   |                               |Masking-key, if MASK set to 1  |",
          "1611:   +-------------------------------+-------------------------------+",
          "1612:   | Masking-key (continued)       |          Payload Data         |",
          "1613:   +-------------------------------- - - - - - - - - - - - - - - - +",
          "1614:   :                     Payload Data continued ...                :",
          "1615:   + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +",
          "1616:   |                     Payload Data continued ...                |",
          "1617:   +---------------------------------------------------------------+",
          "1620:  void CPluginProtocolWS::ProcessInbound(const ReadEvent * Message)",
          "1621:  {",
          "1622:  }",
          "1624:  std::vector<byte> CPluginProtocolWS::ProcessOutbound(const WriteDirective * WriteMessage)",
          "1625:  {",
          "1626:   return std::vector<byte>();",
          "1627:  }",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h": [
          "File: hardware/plugins/PluginProtocols.h -> hardware/plugins/PluginProtocols.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   };",
          "89:  };",
          "91: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  class CPluginProtocolWS : CPluginProtocol",
          "92:  {",
          "93:  private:",
          "94:   std::string  m_Username;",
          "95:   std::string  m_Password;",
          "96:  public:",
          "97:   CPluginProtocolWS(bool Secure) { m_Secure = Secure; };",
          "98:   virtual void    ProcessInbound(const ReadEvent* Message);",
          "99:   virtual std::vector<byte> ProcessOutbound(const WriteDirective* WriteMessage);",
          "100:   void      AuthenticationDetails(const std::string &Username, const std::string &Password)",
          "101:   {",
          "102:    m_Username = Username;",
          "103:    m_Password = Password;",
          "104:   };",
          "105:  };",
          "",
          "---------------"
        ]
      }
    }
  ]
}