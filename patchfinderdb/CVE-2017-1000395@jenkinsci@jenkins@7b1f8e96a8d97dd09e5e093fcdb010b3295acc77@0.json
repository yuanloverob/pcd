{
  "cve_id": "CVE-2017-1000395",
  "cve_desc": "Jenkins 2.73.1 and earlier, 2.83 and earlier provides information about Jenkins user accounts which is generally available to anyone with Overall/Read permissions via the /user/(username)/api remote API. This included e.g. Jenkins users' email addresses if the Mailer Plugin is installed. The remote API now no longer includes information beyond the most basic (user ID and name) unless the user requesting it is a Jenkins administrator.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77",
  "patch_info": {
    "commit_hash": "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/7b1f8e96a8d97dd09e5e093fcdb010b3295acc77",
    "files": [
      "core/src/main/java/hudson/model/User.java",
      "test/src/test/java/hudson/model/UserTest.java"
    ],
    "message": "[SECURITY-514] Restrict access to user properties via the api to admins",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
      "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
      "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "290:     @Exported(name=\"property\",inline=true)",
      "291:     public List<UserProperty> getAllProperties() {",
      "293:     }",
      "",
      "[Removed Lines]",
      "292:         return Collections.unmodifiableList(properties);",
      "",
      "[Added Lines]",
      "292:         if (hasPermission(Jenkins.ADMINISTER)) {",
      "293:             return Collections.unmodifiableList(properties);",
      "294:         }",
      "296:         return Collections.emptyList();",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
      "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "30: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "32: import hudson.security.AbstractPasswordBasedSecurityRealm;",
      "33: import hudson.security.AccessDeniedException2;",
      "34: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import hudson.security.ACL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: import org.acegisecurity.userdetails.UserDetails;",
      "58: import org.acegisecurity.userdetails.UsernameNotFoundException;",
      "60: import static org.junit.Assert.*;",
      "61: import static org.junit.Assume.*;",
      "63: import org.junit.Assert;",
      "64: import org.junit.Rule;",
      "65: import org.junit.Test;",
      "66: import org.jvnet.hudson.test.FakeChangeLogSCM;",
      "67: import org.jvnet.hudson.test.Issue;",
      "68: import org.jvnet.hudson.test.JenkinsRule;",
      "69: import org.jvnet.hudson.test.TestExtension;",
      "70: import org.jvnet.hudson.test.recipes.LocalData;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: import static org.hamcrest.Matchers.not;",
      "62: import static org.hamcrest.collection.IsEmptyCollection.empty;",
      "66: import org.hamcrest.collection.IsEmptyCollection;",
      "73: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "681:         assertSame(\"'user2' should resolve to u2\", u2, u);",
      "682:     }",
      "684:      public static class SomeUserProperty extends UserProperty {",
      "686:         @TestExtension",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "689:     @Test",
      "690:     @Issue(\"SECURITY-514\")",
      "691:     public void getAllPropertiesRequiresAdmin() {",
      "692:         j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()",
      "693:                 .grant(Jenkins.ADMINISTER).everywhere().to(\"admin)\")",
      "694:                 .grant(Jenkins.READ).everywhere().toEveryone());",
      "695:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
      "697:         User admin = User.get(\"admin\");",
      "698:         User alice = User.get(\"alice\");",
      "699:         User bob = User.get(\"bob\");",
      "702:         ACL.impersonate(admin.impersonate());",
      "703:         assertThat(alice.getAllProperties(), not(empty()));",
      "704:         assertThat(bob.getAllProperties(), not(empty()));",
      "705:         assertThat(admin.getAllProperties(), not(empty()));",
      "708:         ACL.impersonate(alice.impersonate());",
      "709:         assertThat(alice.getAllProperties(), not(empty()));",
      "710:         assertThat(bob.getAllProperties(), empty());",
      "711:         assertThat(admin.getAllProperties(), empty());",
      "712:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b9034669a691462d58b7a0d120d6bfb8514aa6d",
      "candidate_info": {
        "commit_hash": "1b9034669a691462d58b7a0d120d6bfb8514aa6d",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/1b9034669a691462d58b7a0d120d6bfb8514aa6d",
        "files": [
          "test/src/test/java/hudson/model/UserTest.java"
        ],
        "message": "Fixed test\u2014stray rparen broke authentication. Also switching to ACL.as here for safety; 26 other tests ought to do the same.",
        "before_after_code_files": [
          "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
          "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "32: import hudson.security.ACL;",
          "33: import hudson.security.AbstractPasswordBasedSecurityRealm;",
          "34: import hudson.security.AccessDeniedException2;",
          "35: import hudson.security.GlobalMatrixAuthorizationStrategy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import hudson.security.ACLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "690:     @Issue(\"SECURITY-514\")",
          "691:     public void getAllPropertiesRequiresAdmin() {",
          "692:         j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()",
          "694:                 .grant(Jenkins.READ).everywhere().toEveryone());",
          "695:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "",
          "[Removed Lines]",
          "693:                 .grant(Jenkins.ADMINISTER).everywhere().to(\"admin)\")",
          "",
          "[Added Lines]",
          "694:                 .grant(Jenkins.ADMINISTER).everywhere().to(\"admin\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:         User bob = User.get(\"bob\");",
          "712:     }",
          "714:      public static class SomeUserProperty extends UserProperty {",
          "",
          "[Removed Lines]",
          "702:         ACL.impersonate(admin.impersonate());",
          "703:         assertThat(alice.getAllProperties(), not(empty()));",
          "704:         assertThat(bob.getAllProperties(), not(empty()));",
          "705:         assertThat(admin.getAllProperties(), not(empty()));",
          "708:         ACL.impersonate(alice.impersonate());",
          "709:         assertThat(alice.getAllProperties(), not(empty()));",
          "710:         assertThat(bob.getAllProperties(), empty());",
          "711:         assertThat(admin.getAllProperties(), empty());",
          "",
          "[Added Lines]",
          "703:         try (ACLContext as = ACL.as(admin)) {",
          "704:             assertThat(alice.getAllProperties(), not(empty()));",
          "705:             assertThat(bob.getAllProperties(), not(empty()));",
          "706:             assertThat(admin.getAllProperties(), not(empty()));",
          "707:         }",
          "710:         try (ACLContext as = ACL.as(alice)) {",
          "711:             assertThat(alice.getAllProperties(), not(empty()));",
          "712:             assertThat(bob.getAllProperties(), empty());",
          "713:             assertThat(admin.getAllProperties(), empty());",
          "714:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8f5ffc7e6e10224746c25bcb8172f28797a5acf",
      "candidate_info": {
        "commit_hash": "f8f5ffc7e6e10224746c25bcb8172f28797a5acf",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f8f5ffc7e6e10224746c25bcb8172f28797a5acf",
        "files": [
          "core/src/main/java/hudson/model/Descriptor.java",
          "test/src/test/java/hudson/model/UserTest.java"
        ],
        "message": "[FIXED JENKINS-45977] Behave robustly when a UserProperty is missing its descriptor.",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Descriptor.java||core/src/main/java/hudson/model/Descriptor.java",
          "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Descriptor.java||core/src/main/java/hudson/model/Descriptor.java": [
          "File: core/src/main/java/hudson/model/Descriptor.java -> core/src/main/java/hudson/model/Descriptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "984:     Map<Descriptor<T>,T> toMap(Iterable<T> describables) {",
          "985:         Map<Descriptor<T>,T> m = new LinkedHashMap<Descriptor<T>,T>();",
          "986:         for (T d : describables) {",
          "988:         }",
          "989:         return m;",
          "990:     }",
          "",
          "[Removed Lines]",
          "987:             m.put(d.getDescriptor(),d);",
          "",
          "[Added Lines]",
          "987:             Descriptor<T> descriptor;",
          "988:             try {",
          "989:                 descriptor = d.getDescriptor();",
          "990:             } catch (Throwable x) {",
          "991:                 LOGGER.log(Level.WARNING, null, x);",
          "992:                 continue;",
          "993:             }",
          "994:             m.put(descriptor, d);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
          "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: package hudson.model;",
          "27: import com.gargoylesoftware.htmlunit.WebAssert;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "29: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "31: import hudson.security.ACL;",
          "32: import hudson.security.ACLContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import com.gargoylesoftware.htmlunit.WebRequest;",
          "29: import com.gargoylesoftware.htmlunit.WebResponse;",
          "32: import com.gargoylesoftware.htmlunit.util.WebConnectionWrapper;",
          "33: import hudson.ExtensionList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import java.io.File;",
          "42: import java.io.IOException;",
          "43: import java.io.PrintStream;",
          "44: import java.util.Arrays;",
          "45: import java.util.Collections;",
          "46: import java.util.Locale;",
          "48: import jenkins.model.IdStrategy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import java.net.URL;",
          "49: import java.util.ArrayList;",
          "52: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: import org.acegisecurity.userdetails.UserDetails;",
          "59: import org.acegisecurity.userdetails.UsernameNotFoundException;",
          "63: import static org.junit.Assert.*;",
          "64: import static org.junit.Assume.*;",
          "",
          "[Removed Lines]",
          "61: import static org.hamcrest.Matchers.not;",
          "62: import static org.hamcrest.collection.IsEmptyCollection.empty;",
          "",
          "[Added Lines]",
          "68: import static org.hamcrest.Matchers.*;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "733:         }",
          "734:     }",
          "736: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     @Issue(\"JENKINS-45977\")",
          "743:     @Test",
          "744:     public void missingDescriptor() throws Exception {",
          "745:         ExtensionList.lookup(Descriptor.class).remove(j.jenkins.getDescriptor(SomeUserProperty.class));",
          "746:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "747:         j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().to(\"alice\"));",
          "748:         User alice = User.get(\"alice\");",
          "749:         alice.addProperty(new SomeUserProperty());",
          "750:         assertThat(alice.getProperties().values(), not(empty()));",
          "751:         JenkinsRule.WebClient wc = j.createWebClient();",
          "752:         final List<URL> failingResources = new ArrayList<>();",
          "753:         new WebConnectionWrapper(wc) { // https://stackoverflow.com/a/18853796/12916",
          "754:             @Override",
          "755:             public WebResponse getResponse(WebRequest request) throws IOException {",
          "756:                 WebResponse r = super.getResponse(request);",
          "757:                 if (r.getStatusCode() >= 400) {",
          "758:                     failingResources.add(request.getUrl());",
          "759:                 }",
          "760:                 return r;",
          "761:             }",
          "762:         };",
          "763:         wc.login(\"alice\").goTo(\"me/configure\");",
          "764:         assertThat(failingResources, empty());",
          "765:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}