{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4695242dc1f163f889718082f8de3fbbfc090b67",
      "candidate_info": {
        "commit_hash": "4695242dc1f163f889718082f8de3fbbfc090b67",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/4695242dc1f163f889718082f8de3fbbfc090b67",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/cache/shm.c"
        ],
        "message": "release 2.3.5; avoid buffer overflow in shm cache key construction\n\nthanks @kyprizel\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/shm.c||src/cache/shm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.5rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/shm.c||src/cache/shm.c": [
          "File: src/cache/shm.c -> src/cache/shm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   const char *key) {",
          "153: }",
          "",
          "[Removed Lines]",
          "150: static char *oidc_cache_shm_get_key(apr_pool_t *pool, const char *section,",
          "152:  return apr_psprintf(pool, \"%s:%s\", section, key);",
          "",
          "[Added Lines]",
          "150: static char *oidc_cache_shm_get_key(request_rec *r, const char *section,",
          "153:  char *section_key = apr_psprintf(r->pool, \"%s:%s\", section, key);",
          "156:  if (strlen(section_key) > OIDC_CACHE_SHM_KEY_MAX) {",
          "157:   oidc_error(r,",
          "158:     \"could not construct cache key since size is too large (%s)\",",
          "159:     section_key);",
          "160:   return NULL;",
          "161:  }",
          "163:  return section_key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:  oidc_cache_cfg_shm_t *context = (oidc_cache_cfg_shm_t *) cfg->cache_cfg;",
          "165:  int i;",
          "",
          "[Removed Lines]",
          "166:  const char *section_key = oidc_cache_shm_get_key(r->pool, section, key);",
          "",
          "[Added Lines]",
          "177:  const char *section_key = oidc_cache_shm_get_key(r, section, key);",
          "178:  if (section_key == NULL)",
          "179:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:  int i;",
          "224:  apr_time_t age;",
          "232:   return FALSE;",
          "236:  if ((value != NULL)",
          "",
          "[Removed Lines]",
          "226:  const char *section_key = oidc_cache_shm_get_key(r->pool, section, key);",
          "229:  if (strlen(section_key) > OIDC_CACHE_SHM_KEY_MAX) {",
          "230:   oidc_error(r, \"could not store value since key size is too large (%s)\",",
          "231:     section_key);",
          "233:  }",
          "",
          "[Added Lines]",
          "239:  const char *section_key = oidc_cache_shm_get_key(r, section, key);",
          "240:  if (section_key == NULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a81c14f3605966240f03254b5efc07c9ae7695f",
      "candidate_info": {
        "commit_hash": "3a81c14f3605966240f03254b5efc07c9ae7695f",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/3a81c14f3605966240f03254b5efc07c9ae7695f",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/metadata.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/session.c"
        ],
        "message": "support token revocation on logout (first batch)\n\n- add support for revocation of refresh and access tokens\nrevocation from an RFC 7009 endpoint on OIDC session logout\n- TBD: client auth\n- bump to 2.4.0rc7\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/metadata.c||src/metadata.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: # Used when OIDCProviderMetadataURL is not defined or the metadata obtained from that URL does not set it.",
          "93: #OIDCProviderEndSessionEndpoint <url>",
          "95: # Define whether the OP supports OpenID Connect Back Channel Logout.",
          "96: # According to: https://openid.net/specs/openid-connect-backchannel-1_0.html",
          "97: # Used when OIDCProviderMetadataURL is not defined or the metadata obtained from that URL does not set it.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: # The RFC 7009 Token Revocation Endpoint URL.",
          "96: # When defined, the refresh token and access token stored in an OIDC session will be revoked on logout.",
          "97: # Used when OIDCProviderMetadataURL is not defined or the metadata obtained from that URL does not set it.",
          "98: #OIDCProviderRevocationEndpoint <url>",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: #define OIDCProviderTokenEndpointParams        \"OIDCProviderTokenEndpointParams\"",
          "178: #define OIDCProviderRegistrationEndpointJson   \"OIDCProviderRegistrationEndpointJson\"",
          "179: #define OIDCProviderUserInfoEndpoint           \"OIDCProviderUserInfoEndpoint\"",
          "180: #define OIDCProviderCheckSessionIFrame         \"OIDCProviderCheckSessionIFrame\"",
          "181: #define OIDCProviderEndSessionEndpoint         \"OIDCProviderEndSessionEndpoint\"",
          "182: #define OIDCProviderBackChannelLogoutSupported \"OIDCProviderBackChannelLogoutSupported\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: #define OIDCProviderRevocationEndpoint         \"OIDCProviderRevocationEndpoint\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1078:  c->provider.token_endpoint_auth = NULL;",
          "1079:  c->provider.token_endpoint_params = NULL;",
          "1080:  c->provider.userinfo_endpoint_url = NULL;",
          "1081:  c->provider.client_id = NULL;",
          "1082:  c->provider.client_secret = NULL;",
          "1083:  c->provider.token_endpoint_tls_client_cert = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082:  c->provider.revocation_endpoint_url = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1260:    add->provider.userinfo_endpoint_url != NULL ?",
          "1261:      add->provider.userinfo_endpoint_url :",
          "1262:      base->provider.userinfo_endpoint_url;",
          "1263:  c->provider.jwks_uri =",
          "1264:    add->provider.jwks_uri != NULL ?",
          "1265:      add->provider.jwks_uri : base->provider.jwks_uri;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1265:  c->provider.revocation_endpoint_url =",
          "1266:    add->provider.revocation_endpoint_url != NULL ?",
          "1267:      add->provider.revocation_endpoint_url :",
          "1268:      base->provider.revocation_endpoint_url;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2398:     (void *)APR_OFFSETOF(oidc_cfg, provider.userinfo_endpoint_url),",
          "2399:     RSRC_CONF,",
          "2400:     \"Define the OpenID OP UserInfo Endpoint URL (e.g.: https://localhost:9031/idp/userinfo.openid)\"),",
          "2401:   AP_INIT_TAKE1(OIDCProviderCheckSessionIFrame,",
          "2402:     oidc_set_url_slot,",
          "2403:     (void *)APR_OFFSETOF(oidc_cfg, provider.check_session_iframe),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2407:   AP_INIT_TAKE1(OIDCProviderRevocationEndpoint,",
          "2408:     oidc_set_https_slot,",
          "2409:     (void *)APR_OFFSETOF(oidc_cfg, provider.revocation_endpoint_url),",
          "2410:     RSRC_CONF,",
          "2411:     \"Define the RFC 7009 Token Revocation Endpoint URL (e.g.: https://localhost:9031/as/revoke_token.oauth2)\"),",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #define OIDC_METADATA_TOKEN_ENDPOINT                               \"token_endpoint\"",
          "76: #define OIDC_METADATA_INTROSPECTION_ENDPOINT                       \"introspection_endpoint\"",
          "77: #define OIDC_METADATA_USERINFO_ENDPOINT                            \"userinfo_endpoint\"",
          "78: #define OIDC_METADATA_JWKS_URI                                     \"jwks_uri\"",
          "79: #define OIDC_METADATA_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED        \"token_endpoint_auth_methods_supported\"",
          "80: #define OIDC_METADATA_INTROSPECTON_ENDPOINT_AUTH_METHODS_SUPPORTED \"introspection_endpoint_auth_methods_supported\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #define OIDC_METADATA_REVOCATION_ENDPOINT                          \"revocation_endpoint\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:     &provider->userinfo_endpoint_url, NULL);",
          "994:  }",
          "996:  if (provider->jwks_uri == NULL) {",
          "998:   oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "997:  if (provider->revocation_endpoint_url == NULL) {",
          "999:   oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER,",
          "1000:     provider->issuer, j_provider,",
          "1001:     OIDC_METADATA_REVOCATION_ENDPOINT,",
          "1002:     &provider->revocation_endpoint_url, NULL);",
          "1003:  }",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1861:  if (provider->end_session_endpoint != NULL)",
          "1862:   oidc_session_set_logout_endpoint(r, session,",
          "1863:     provider->end_session_endpoint);",
          "1866:  oidc_store_userinfo_claims(r, c, session, provider, claims, userinfo_jwt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1864:  if (provider->revocation_endpoint_url != NULL)",
          "1865:   oidc_session_set_revocation_endpoint(r, session,",
          "1866:     provider->revocation_endpoint_url);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2702:    OIDC_BACKCHANNEL_STYLE_LOGOUT_PARAM_VALUE) == 0));",
          "2703: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2712: static void oidc_revoke_tokens(request_rec *r, oidc_cfg *c,",
          "2713:   oidc_session_t *session) {",
          "2715:  char *response = NULL;",
          "2716:  char *basic_auth = NULL;",
          "2717:  char *bearer_auth = NULL;",
          "2718:  apr_table_t *params = NULL;",
          "2719:  const char *token = NULL;",
          "2720:  const char *revocation_endpoint = oidc_session_get_revocation_endpoint(r,",
          "2721:    session);",
          "2723:  oidc_debug(r, \"enter: revocation_endpoint=%s\",",
          "2724:    revocation_endpoint ? revocation_endpoint : \"(null)\");",
          "2726:  if (revocation_endpoint == NULL)",
          "2727:   return;",
          "2729:  params = apr_table_make(r->pool, 4);",
          "2733:   if (oidc_proto_token_endpoint_auth(r, cfg, provider->token_endpoint_auth,",
          "2734:   provider->client_id, provider->client_secret,",
          "2735:   provider->token_endpoint_url, params,",
          "2736:   NULL, &basic_auth, &bearer_auth) == FALSE)",
          "2737:   return FALSE;",
          "2741:  token = oidc_session_get_refresh_token(r, session);",
          "2742:  if (token != NULL) {",
          "2743:   apr_table_addn(params, \"token_type_hint\", \"refresh_token\");",
          "2744:   apr_table_addn(params, \"token\", token);",
          "2746:   if (oidc_util_http_post_form(r, revocation_endpoint, params, basic_auth,",
          "2747:     bearer_auth, c->oauth.ssl_validate_server, &response,",
          "2748:     c->http_timeout_long, c->outgoing_proxy,",
          "2749:     oidc_dir_cfg_pass_cookies(r), NULL,",
          "2750:     NULL) == FALSE) {",
          "2751:    oidc_warn(r, \"revoking refresh token failed\");",
          "2752:   }",
          "2753:   apr_table_clear(params);",
          "2754:  }",
          "2756:  token = oidc_session_get_access_token(r, session);",
          "2757:  if (token != NULL) {",
          "2758:   apr_table_addn(params, \"token_type_hint\", \"access_token\");",
          "2759:   apr_table_addn(params, \"token\", token);",
          "2761:   if (oidc_util_http_post_form(r, revocation_endpoint, params, basic_auth,",
          "2762:     bearer_auth, c->oauth.ssl_validate_server, &response,",
          "2763:     c->http_timeout_long, c->outgoing_proxy,",
          "2764:     oidc_dir_cfg_pass_cookies(r), NULL,",
          "2765:     NULL) == FALSE) {",
          "2766:    oidc_warn(r, \"revoking access token failed\");",
          "2767:   }",
          "2768:  }",
          "2769: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2711:  oidc_debug(r, \"enter (url=%s)\", url);",
          "2714:  if (session->remote_user != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2779:  oidc_revoke_tokens(r, c, session);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:  char *token_endpoint_auth;",
          "257:  char *token_endpoint_params;",
          "258:  char *userinfo_endpoint_url;",
          "259:  char *registration_endpoint_url;",
          "260:  char *check_session_iframe;",
          "261:  char *end_session_endpoint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:  char *revocation_endpoint_url;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "875: const char * oidc_session_get_check_session_iframe(request_rec *r, oidc_session_t *z);",
          "876: void oidc_session_set_logout_endpoint(request_rec *r, oidc_session_t *z, const char *logout_endpoint);",
          "877: const char * oidc_session_get_logout_endpoint(request_rec *r, oidc_session_t *z);",
          "879: char *oidc_parse_base64(apr_pool_t *pool, const char *input, char **output, int *output_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879: void oidc_session_set_revocation_endpoint(request_rec *r, oidc_session_t *z, const char *revocation_endpoint);",
          "880: const char * oidc_session_get_revocation_endpoint(request_rec *r, oidc_session_t *z);",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "453: #define OIDC_SESSION_KEY_CHECK_SESSION_IFRAME \"csi\"",
          "455: #define OIDC_SESSION_KEY_LOGOUT_ENDPOINT \"ese\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: #define OIDC_SESSION_KEY_REVOCATION_ENDPOINT \"re\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777: const char * oidc_session_get_logout_endpoint(request_rec *r, oidc_session_t *z) {",
          "778:  return oidc_session_get_key2string(r, z, OIDC_SESSION_KEY_LOGOUT_ENDPOINT);",
          "779: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786: void oidc_session_set_revocation_endpoint(request_rec *r, oidc_session_t *z,",
          "787:   const char *revocation_endpoint) {",
          "788:  oidc_session_set(r, z, OIDC_SESSION_KEY_REVOCATION_ENDPOINT, revocation_endpoint);",
          "789: }",
          "791: const char * oidc_session_get_revocation_endpoint(request_rec *r, oidc_session_t *z) {",
          "792:  return oidc_session_get_key2string(r, z, OIDC_SESSION_KEY_REVOCATION_ENDPOINT);",
          "793: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e274a508481ac7f821e04fae9a010fc1ee10be7",
      "candidate_info": {
        "commit_hash": "6e274a508481ac7f821e04fae9a010fc1ee10be7",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6e274a508481ac7f821e04fae9a010fc1ee10be7",
        "files": [
          ".gitignore",
          "ChangeLog",
          "configure.ac",
          "src/util.c",
          "test/test.c"
        ],
        "message": "fix duplication of query parameters in current URL detection; see #420\n\nrelease 2.3.10.1; thanks @jreynaert\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:  if ((path) && (path[0] != '/')) {",
          "503:   memset(&uri, 0, sizeof(apr_uri_t));",
          "504:   if (apr_uri_parse(r->pool, r->uri, &uri) == APR_SUCCESS)",
          "506:   else",
          "507:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\", r->uri);",
          "508:  } else {",
          "",
          "[Removed Lines]",
          "505:    path = uri.path;",
          "",
          "[Added Lines]",
          "505:    path = apr_pstrcat(r->pool, uri.path, (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:   path = r->unparsed_uri;",
          "511:  }",
          "517:  oidc_debug(r, \"current URL '%s'\", url);",
          "",
          "[Removed Lines]",
          "513:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r), path,",
          "514:    (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args,",
          "515:    NULL);",
          "",
          "[Added Lines]",
          "513:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r), path, NULL);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:  char *url = NULL;",
          "1197:  r->uri = \"/test\";",
          "1200:  url = oidc_get_current_url(r);",
          "1201:  TST_ASSERT_STR(\"test_current_url (1)\", url, \"https://www.example.com/test?foo=bar&param1=value1\");",
          "",
          "[Removed Lines]",
          "1198:  r->unparsed_uri = r->uri;",
          "",
          "[Added Lines]",
          "1198:  r->unparsed_uri = apr_pstrcat(r->pool, r->uri, \"?\", r->args, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6616372af77df04a9b0b197e759790ecf3f2399a",
      "candidate_info": {
        "commit_hash": "6616372af77df04a9b0b197e759790ecf3f2399a",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6616372af77df04a9b0b197e759790ecf3f2399a",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c"
        ],
        "message": "make the default max number of state cookies 7 instead of unlimited\n\nbump to 2.3.8rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: #define OIDC_DEFAULT_STATE_TIMEOUT 300",
          "110: #define OIDC_DEFAULT_SESSION_INACTIVITY_TIMEOUT 300",
          "",
          "[Removed Lines]",
          "108: #define OIDC_DEFAULT_MAX_NUMBER_OF_STATE_COOKIES 0",
          "",
          "[Added Lines]",
          "108: #define OIDC_DEFAULT_MAX_NUMBER_OF_STATE_COOKIES 7",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65cddc1f70fd5e1cb2c077d5eee5a01d8eb8b154",
      "candidate_info": {
        "commit_hash": "65cddc1f70fd5e1cb2c077d5eee5a01d8eb8b154",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/65cddc1f70fd5e1cb2c077d5eee5a01d8eb8b154",
        "files": [
          "ChangeLog",
          "README.md",
          "configure.ac",
          "src/cache/cache.h",
          "src/metadata.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/proto.c",
          "src/session.c"
        ],
        "message": "2.3.9rc2: support OpenID Connect Back-Channel Logout 1.0\n\naccording to:\nhttps://openid.net/specs/openid-connect-backchannel-1_0.html\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/cache.h||src/cache/cache.h",
          "src/metadata.c||src/metadata.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/proto.c||src/proto.c",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/cache.h||src/cache/cache.h": [
          "File: src/cache/cache.h -> src/cache/cache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: #define OIDC_CACHE_SECTION_OAUTH_PROVIDER    \"o\"",
          "107: #define OIDC_CACHE_SECTION_JTI               \"t\"",
          "108: #define OIDC_CACHE_SECTION_REQUEST_URI       \"r\"",
          "110: #define oidc_cache_get_session(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_SESSION, key, value)",
          "111: #define oidc_cache_get_nonce(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_NONCE, key, value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: #define OIDC_CACHE_SECTION_SID               \"d\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: #define oidc_cache_get_oauth_provider(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_OAUTH_PROVIDER, key, value)",
          "116: #define oidc_cache_get_jti(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_JTI, key, value)",
          "117: #define oidc_cache_get_request_uri(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_REQUEST_URI, key, value)",
          "119: #define oidc_cache_set_session(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_SESSION, key, value, expiry)",
          "120: #define oidc_cache_set_nonce(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_NONCE, key, value, expiry)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: #define oidc_cache_get_sid(r, key, value) oidc_cache_get(r, OIDC_CACHE_SECTION_SID, key, value)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124: #define oidc_cache_set_oauth_provider(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_OAUTH_PROVIDER, key, value, expiry)",
          "125: #define oidc_cache_set_jti(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_JTI, key, value, expiry)",
          "126: #define oidc_cache_set_request_uri(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_REQUEST_URI, key, value, expiry)",
          "128: extern oidc_cache_t oidc_cache_file;",
          "129: extern oidc_cache_t oidc_cache_memcache;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: #define oidc_cache_set_sid(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_SID, key, value, expiry)",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: #define OIDC_METADATA_CONTACTS                              \"contacts\"",
          "104: #define OIDC_METADATA_INITIATE_LOGIN_URI                    \"initiate_login_uri\"",
          "105: #define OIDC_METADATA_FRONTCHANNEL_LOGOUT_URI               \"frontchannel_logout_uri\"",
          "106: #define OIDC_METADATA_POST_LOGOUT_REDIRECT_URIS             \"post_logout_redirect_uris\"",
          "108: #define OIDC_METADATA_SSL_VALIDATE_SERVER                   \"ssl_validate_server\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: #define OIDC_METADATA_BACKCHANNEL_LOGOUT_URI                \"backchannel_logout_uri\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:        OIDC_REDIRECT_URI_REQUEST_LOGOUT,",
          "560:        OIDC_GET_STYLE_LOGOUT_PARAM_VALUE)));",
          "562:  if (cfg->default_slo_url != NULL) {",
          "563:   json_object_set_new(data, OIDC_METADATA_POST_LOGOUT_REDIRECT_URIS,",
          "564:     json_pack(\"[s]\", cfg->default_slo_url));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:  json_object_set_new(data, OIDC_METADATA_BACKCHANNEL_LOGOUT_URI,",
          "565:    json_string(",
          "566:      apr_psprintf(r->pool, \"%s?%s=%s\",",
          "567:        oidc_get_redirect_uri(r, cfg),",
          "568:        OIDC_REDIRECT_URI_REQUEST_LOGOUT,",
          "569:        OIDC_BACKCHANNEL_STYLE_LOGOUT_PARAM_VALUE)));",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:  apr_sha1_update(&sha1, nonce, strlen(nonce));",
          "",
          "[Removed Lines]",
          "255:   int remotehost_is_ip;",
          "256:   value = ap_get_remote_host(r->connection, r->per_dir_config,",
          "257:   REMOTE_NOLOOKUP, &remotehost_is_ip);",
          "258:   apr_sha1_update(&sha1, value, strlen(value));",
          "",
          "[Added Lines]",
          "255:  int remotehost_is_ip;",
          "256:  value = ap_get_remote_host(r->connection, r->per_dir_config,",
          "257:    REMOTE_NOLOOKUP, &remotehost_is_ip);",
          "258:  apr_sha1_update(&sha1, value, strlen(value));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "850:   return HTTP_SERVICE_UNAVAILABLE;",
          "851:  }",
          "",
          "[Removed Lines]",
          "842:    return oidc_util_html_send_error(r, c->error_template,",
          "843:    \"Too Many Outstanding Requests\",",
          "844:    apr_psprintf(r->pool,",
          "845:    \"No authentication request could be generated since there are too many outstanding authentication requests already; you may have to wait up to %d seconds to be able to create a new request\",",
          "846:    c->state_timeout),",
          "847:    HTTP_SERVICE_UNAVAILABLE);",
          "",
          "[Added Lines]",
          "842:   return oidc_util_html_send_error(r, c->error_template,",
          "843:     \"Too Many Outstanding Requests\",",
          "844:     apr_psprintf(r->pool,",
          "845:       \"No authentication request could be generated since there are too many outstanding authentication requests already; you may have to wait up to %d seconds to be able to create a new request\",",
          "846:       c->state_timeout),",
          "847:       HTTP_SERVICE_UNAVAILABLE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1687:  return TRUE;",
          "1688: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1690: static char *oidc_make_sid_iss_unique(request_rec *r, const char *sid,",
          "1691:   const char *issuer) {",
          "1692:  return apr_psprintf(r->pool, \"%s@%s\", sid, issuer);",
          "1693: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1781:  oidc_session_set_cookie_domain(r, session,",
          "1782:    c->cookie_domain ? c->cookie_domain : oidc_get_current_url_host(r));",
          "1785:  return oidc_session_save(r, session, TRUE);",
          "1786: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1789:  char *sid = NULL;",
          "1790:  if (provider->end_session_endpoint != NULL) {",
          "1791:   oidc_jose_get_string(r->pool, id_token_jwt->payload.value.json,",
          "1792:     OIDC_CLAIM_SID, FALSE, &sid, NULL);",
          "1793:   if (sid == NULL)",
          "1794:    sid = id_token_jwt->payload.sub;",
          "1795:   session->sid = oidc_make_sid_iss_unique(r, sid, provider->issuer);",
          "1796:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2567:        OIDC_IMG_STYLE_LOGOUT_PARAM_VALUE) == 0)));",
          "2568: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2584: static apr_byte_t oidc_is_back_channel_logout(const char *logout_param_value) {",
          "2585:  return ((logout_param_value != NULL) && (apr_strnatcmp(logout_param_value,",
          "2586:    OIDC_BACKCHANNEL_STYLE_LOGOUT_PARAM_VALUE) == 0));",
          "2587: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2619:  return HTTP_MOVED_TEMPORARILY;",
          "2620: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2644: #define OIDC_EVENTS_BLOGOUT_KEY \"http://schemas.openid.net/event/backchannel-logout\"",
          "2646: static int oidc_handle_logout_backchannel(request_rec *r, oidc_cfg *cfg) {",
          "2648:  oidc_debug(r, \"enter\");",
          "2650:  const char *logout_token = NULL;",
          "2651:  oidc_jwt_t *jwt = NULL;",
          "2652:  oidc_jose_error_t err;",
          "2653:  oidc_jwk_t *jwk = NULL;",
          "2654:  oidc_provider_t *provider = NULL;",
          "2655:  char *sid = NULL, *uuid = NULL;",
          "2656:  int rc = HTTP_BAD_REQUEST;",
          "2658:  apr_table_t *params = apr_table_make(r->pool, 8);",
          "2659:  if (oidc_util_read_post_params(r, params) == FALSE) {",
          "2660:   oidc_error(r,",
          "2661:     \"could not read POST-ed parameters to the logout endpoint\");",
          "2662:   goto out;",
          "2663:  }",
          "2665:  logout_token = apr_table_get(params, OIDC_PROTO_LOGOUT_TOKEN);",
          "2666:  if (logout_token == NULL) {",
          "2667:   oidc_error(r,",
          "2668:     \"backchannel lggout endpoint was called but could not find a parameter named \\\"%s\\\"\",",
          "2669:     OIDC_PROTO_LOGOUT_TOKEN);",
          "2670:   goto out;",
          "2671:  }",
          "2676:  if (oidc_jwt_parse(r->pool, logout_token, &jwt,",
          "2677:    oidc_util_merge_symmetric_key(r->pool, cfg->private_keys, NULL),",
          "2678:    &err) == FALSE) {",
          "2679:   oidc_error(r, \"oidc_jwt_parse failed: %s\", oidc_jose_e2s(r->pool, err));",
          "2680:   goto out;",
          "2681:  }",
          "2683:  provider = oidc_get_provider_for_issuer(r, cfg, jwt->payload.iss, FALSE);",
          "2684:  if (provider == NULL) {",
          "2685:   oidc_error(r, \"no provider found for issuer: %s\", jwt->payload.iss);",
          "2686:   goto out;",
          "2687:  }",
          "2691:  jwk = NULL;",
          "2692:  if (oidc_util_create_symmetric_key(r, provider->client_secret, 0,",
          "2693:    NULL, TRUE, &jwk) == FALSE)",
          "2694:   return FALSE;",
          "2696:  oidc_jwks_uri_t jwks_uri = { provider->jwks_uri,",
          "2697:    provider->jwks_refresh_interval, provider->ssl_validate_server };",
          "2698:  if (oidc_proto_jwt_verify(r, cfg, jwt, &jwks_uri,",
          "2699:    oidc_util_merge_symmetric_key(r->pool, NULL, jwk)) == FALSE) {",
          "2701:   oidc_error(r, \"id_token signature could not be validated, aborting\");",
          "2702:   goto out;",
          "2703:  }",
          "2708:  if (oidc_proto_validate_jwt(r, jwt, provider->issuer, FALSE, FALSE,",
          "2709:    provider->idtoken_iat_slack,",
          "2710:    OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE)",
          "2711:   goto out;",
          "2714:  if (oidc_proto_validate_aud_and_azp(r, cfg, provider,",
          "2715:    &jwt->payload) == FALSE)",
          "2716:   goto out;",
          "2718:  json_t *events = json_object_get(jwt->payload.value.json,",
          "2719:    OIDC_CLAIM_EVENTS);",
          "2720:  if (events == NULL) {",
          "2721:   oidc_error(r, \"\\\"%s\\\" claim could not be found in logout token\",",
          "2722:     OIDC_CLAIM_EVENTS);",
          "2723:   goto out;",
          "2724:  }",
          "2726:  json_t *blogout = json_object_get(events, OIDC_EVENTS_BLOGOUT_KEY);",
          "2727:  if (!json_is_object(blogout)) {",
          "2728:   oidc_error(r, \"\\\"%s\\\" object could not be found in \\\"%s\\\" claim\",",
          "2729:     OIDC_EVENTS_BLOGOUT_KEY, OIDC_CLAIM_EVENTS);",
          "2730:   goto out;",
          "2731:  }",
          "2733:  char *nonce = NULL;",
          "2734:  oidc_json_object_get_string(r->pool, jwt->payload.value.json,",
          "2735:    OIDC_CLAIM_NONCE, &nonce, NULL);",
          "2736:  if (nonce != NULL) {",
          "2737:   oidc_error(r,",
          "2738:     \"rejecting logout request/token since it contains a \\\"%s\\\" claim\",",
          "2739:     OIDC_CLAIM_NONCE);",
          "2740:   goto out;",
          "2741:  }",
          "2743:  char *jti = NULL;",
          "2744:  oidc_json_object_get_string(r->pool, jwt->payload.value.json,",
          "2745:    OIDC_CLAIM_JTI, &jti, NULL);",
          "2746:  if (jti != NULL) {",
          "2747:   char *replay = NULL;",
          "2748:   oidc_cache_get_jti(r, jti, &replay);",
          "2749:   if (replay != NULL) {",
          "2750:    oidc_error(r,",
          "2751:      \"the \\\"%s\\\" value (%s) passed in logout token was found in the cache already; possible replay attack!?\",",
          "2752:      OIDC_CLAIM_JTI, jti);",
          "2753:    goto out;",
          "2754:   }",
          "2755:  }",
          "2758:  apr_time_t jti_cache_duration = apr_time_from_sec(",
          "2759:    provider->idtoken_iat_slack * 2 + 10);",
          "2762:  oidc_cache_set_jti(r, jti, jti, apr_time_now() + jti_cache_duration);",
          "2764:  oidc_json_object_get_string(r->pool, jwt->payload.value.json,",
          "2765:    OIDC_CLAIM_EVENTS, &sid, NULL);",
          "2775:  oidc_json_object_get_string(r->pool, jwt->payload.value.json,",
          "2776:    OIDC_CLAIM_SID, &sid, NULL);",
          "2777:  if (sid == NULL)",
          "2778:   sid = jwt->payload.sub;",
          "2780:  if (sid == NULL) {",
          "2781:   oidc_error(r, \"no \\\"sub\\\" and no \\\"sid\\\" claim found in logout token\");",
          "2782:   goto out;",
          "2783:  }",
          "2792:  sid = oidc_make_sid_iss_unique(r, sid, provider->issuer);",
          "2793:  oidc_cache_get_sid(r, sid, &uuid);",
          "2794:  if (uuid == NULL) {",
          "2795:   oidc_error(r,",
          "2796:     \"could not find session based on sid/sub provided in logout token: %s\",",
          "2797:     sid);",
          "2798:   goto out;",
          "2799:  }",
          "2802:  oidc_cache_set_sid(r, sid, NULL, 0);",
          "2803:  oidc_cache_set_session(r, uuid, NULL, 0);",
          "2805:  rc = DONE;",
          "2807: out:",
          "2809:  if (jwk != NULL) {",
          "2810:   oidc_jwk_destroy(jwk);",
          "2811:   jwk = NULL;",
          "2813:  }",
          "2814:  if (jwt != NULL) {",
          "2815:   oidc_jwt_destroy(jwt);",
          "2816:   jwt = NULL;",
          "2817:  }",
          "2819:  return rc;",
          "2820: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2634:  if (oidc_is_front_channel_logout(url)) {",
          "2635:   return oidc_handle_logout_request(r, c, session, url);",
          "2636:  }",
          "2638:  if ((url == NULL) || (apr_strnatcmp(url, \"\") == 0)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2836:  } else if (oidc_is_back_channel_logout(url)) {",
          "2837:   return oidc_handle_logout_backchannel(r, c);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2984:   goto end;",
          "2985:  }",
          "2990:  if (error_code != NULL)",
          "",
          "[Removed Lines]",
          "2987:  end:",
          "",
          "[Added Lines]",
          "3189: end:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3220:   return oidc_handle_redirect_authorization_response(r, c, session);",
          "3222:  } else if (oidc_proto_is_post_authorization_response(r, c)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3432:  } else if (oidc_util_request_has_parameter(r,",
          "3433:    OIDC_REDIRECT_URI_REQUEST_LOGOUT)) {",
          "3435:   return oidc_handle_logout(r, c, session);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3230:   return oidc_handle_discovery_response(r, c);",
          "3238:  } else if (oidc_util_request_has_parameter(r,",
          "3239:    OIDC_REDIRECT_URI_REQUEST_JWKS)) {",
          "",
          "[Removed Lines]",
          "3232:  } else if (oidc_util_request_has_parameter(r,",
          "3233:    OIDC_REDIRECT_URI_REQUEST_LOGOUT)) {",
          "3236:   return oidc_handle_logout(r, c, session);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: #define OIDC_GET_STYLE_LOGOUT_PARAM_VALUE \"get\"",
          "190: #define OIDC_IMG_STYLE_LOGOUT_PARAM_VALUE \"img\"",
          "193: #define OIDC_CSRF_NAME \"x_csrf\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: #define OIDC_BACKCHANNEL_STYLE_LOGOUT_PARAM_VALUE \"backchannel\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467: #define OIDC_PROTO_REQUEST_OBJECT        \"request\"",
          "468: #define OIDC_PROTO_SESSION_STATE         \"session_state\"",
          "469: #define OIDC_PROTO_ACTIVE                \"active\"",
          "471: #define OIDC_PROTO_RESPONSE_TYPE_CODE               \"code\"",
          "472: #define OIDC_PROTO_RESPONSE_TYPE_IDTOKEN            \"id_token\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471: #define OIDC_PROTO_LOGOUT_TOKEN          \"logout_token\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "518: #define OIDC_CLAIM_TARGET_LINK_URI \"target_link_uri\"",
          "519: #define OIDC_CLAIM_CNF             \"cnf\"",
          "520: #define OIDC_CLAIM_CNF_TBH         \"tbh\"",
          "522: #define OIDC_JWK_X5T       \"x5t\"",
          "523: #define OIDC_JWK_KEYS      \"keys\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523: #define OIDC_CLAIM_SID             \"sid\"",
          "524: #define OIDC_CLAIM_EVENTS          \"events\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "624: apr_byte_t oidc_proto_jwt_verify(request_rec *r, oidc_cfg *cfg, oidc_jwt_t *jwt, const oidc_jwks_uri_t *jwks_uri, apr_hash_t *symmetric_keys);",
          "625: apr_byte_t oidc_proto_validate_jwt(request_rec *r, oidc_jwt_t *jwt, const char *iss, apr_byte_t exp_is_mandatory, apr_byte_t iat_is_mandatory, int iat_slack, int token_binding_policy);",
          "626: apr_byte_t oidc_proto_generate_nonce(request_rec *r, char **nonce, int len);",
          "628: apr_byte_t oidc_proto_authorization_response_code_idtoken_token(request_rec *r, oidc_cfg *c, oidc_proto_state_t *proto_state, oidc_provider_t *provider, apr_table_t *params, const char *response_mode, oidc_jwt_t **jwt);",
          "629: apr_byte_t oidc_proto_authorization_response_code_idtoken(request_rec *r, oidc_cfg *c, oidc_proto_state_t *proto_state, oidc_provider_t *provider, apr_table_t *params, const char *response_mode, oidc_jwt_t **jwt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631: apr_byte_t oidc_proto_validate_aud_and_azp(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, oidc_jwt_payload_t *id_token_payload);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "816: } oidc_session_t;",
          "818: apr_byte_t oidc_session_load(request_rec *r, oidc_session_t **z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:     const char *sid;",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:   oidc_provider_t *provider, oidc_jwt_payload_t *id_token_payload) {",
          "1060:  char *azp = NULL;",
          "",
          "[Removed Lines]",
          "1057: static apr_byte_t oidc_proto_validate_aud_and_azp(request_rec *r, oidc_cfg *cfg,",
          "",
          "[Added Lines]",
          "1057: apr_byte_t oidc_proto_validate_aud_and_azp(request_rec *r, oidc_cfg *cfg,",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #define OIDC_SESSION_PROVIDED_TOKEN_BINDING_KEY   \"ptb\"",
          "71: #define OIDC_SESSION_SESSION_ID                   \"i\"",
          "73: static apr_byte_t oidc_session_encode(request_rec *r, oidc_cfg *c,",
          "74:   oidc_session_t *z, char **s_value, apr_byte_t encrypt) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #define OIDC_SESSION_SUB_KEY                      \"sub\"",
          "75: #define OIDC_SESSION_SID_KEY                      \"sid\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:    oidc_session_set(r, z, OIDC_SESSION_SESSION_ID, z->uuid);",
          "191:   }",
          "194:   char *s_value = NULL;",
          "195:   if (oidc_session_encode(r, c, z, &s_value, FALSE) == FALSE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:   if (z->sid != NULL) {",
          "199:    oidc_cache_set_sid(r, z->sid, z->uuid, z->expiry);",
          "200:    oidc_session_set(r, z, OIDC_SESSION_SID_KEY, z->sid);",
          "201:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:            NULL);",
          "209:  } else {",
          "211:   oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   if (z->sid != NULL)",
          "222:    oidc_cache_set_sid(r, z->sid, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:  oidc_session_t *z = (*zz = apr_pcalloc(r->pool, sizeof(oidc_session_t)));",
          "269:  oidc_session_clear(r, z);",
          "271:  if (c->session_type == OIDC_SESSION_TYPE_SERVER_CACHE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:  z->sid = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "308:    oidc_session_get(r, z, OIDC_SESSION_REMOTE_USER_KEY,",
          "309:      &z->remote_user);",
          "310:   }",
          "311:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:    oidc_session_get(r, z, OIDC_SESSION_SID_KEY,",
          "326:      &z->sid);",
          "",
          "---------------"
        ]
      }
    }
  ]
}