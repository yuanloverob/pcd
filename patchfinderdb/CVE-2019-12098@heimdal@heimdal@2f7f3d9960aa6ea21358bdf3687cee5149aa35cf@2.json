{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "77a7d073ea58b0fd840a83743a7fb73ef83ec3b3",
      "candidate_info": {
        "commit_hash": "77a7d073ea58b0fd840a83743a7fb73ef83ec3b3",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/77a7d073ea58b0fd840a83743a7fb73ef83ec3b3",
        "files": [
          "kdc/kerberos5.c",
          "kdc/krb5tgs.c"
        ],
        "message": "kdc: support for anonymous TGS-REQs\n\nAllow non-anonymous tickets to be used to obtain an anonymous service ticket,\nby setting the anonymous KDC option. Do not include Win2K PAC in anonymous\nservice tickets. Validate anonymous flags per RFC 8062.\n\n(cherry picked from commit af63541515643782a86d0fddf2b97b265b8ec44d)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kdc/krb5tgs.c||kdc/krb5tgs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1551: krb5_boolean",
          "1553: {",
          "1554:     if ((principal->name.name_type != KRB5_NT_WELLKNOWN &&",
          "1555:   principal->name.name_type != KRB5_NT_UNKNOWN) ||",
          "",
          "[Removed Lines]",
          "1552: _kdc_is_anonymous(krb5_context context, krb5_principal principal)",
          "",
          "[Added Lines]",
          "1552: _kdc_is_anonymous(krb5_context context, krb5_const_principal principal)",
          "",
          "---------------"
        ],
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373: static krb5_error_code",
          "374: check_tgs_flags(krb5_context context,",
          "375:   krb5_kdc_configuration *config,",
          "377: {",
          "378:     KDCOptions f = b->kdc_options;",
          "",
          "[Removed Lines]",
          "376:   KDC_REQ_BODY *b, const EncTicketPart *tgt, EncTicketPart *et)",
          "",
          "[Added Lines]",
          "376:   KDC_REQ_BODY *b,",
          "377:   krb5_const_principal tgt_name,",
          "378:   const EncTicketPart *tgt,",
          "379:   EncTicketPart *et)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:      et->endtime = min(*et->renew_till, et->endtime);",
          "488:     }",
          "493:  kdc_log(context, config, 0,",
          "495:  return KRB5KDC_ERR_BADOPTION;",
          "496:     }",
          "498:     return 0;",
          "499: }",
          "",
          "[Removed Lines]",
          "490: #if 0",
          "492:     if(f.request_anonymous && !config->allow_anonymous){",
          "494:   \"Request for anonymous ticket\");",
          "497: #endif",
          "",
          "[Added Lines]",
          "497:     if (tgt->flags.anonymous &&",
          "498:  !_kdc_is_anonymous(context, tgt_name)) {",
          "500:   \"Anonymous ticket flag set without anonymous principal\");",
          "509:     if (tgt->flags.anonymous || f.request_anonymous) {",
          "510:  if (!config->allow_anonymous){",
          "511:      kdc_log(context, config, 0,",
          "512:       \"Request for anonymous ticket\");",
          "513:      return KRB5KDC_ERR_BADOPTION;",
          "514:  }",
          "516:  et->flags.anonymous = 1;",
          "517:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "770:     ALLOC(et.starttime);",
          "774:     if(ret)",
          "775:  goto out;",
          "",
          "[Removed Lines]",
          "773:     ret = check_tgs_flags(context, config, b, tgt, &et);",
          "",
          "[Added Lines]",
          "794:     ret = check_tgs_flags(context, config, b, tgt_name, tgt, &et);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "814:     ret = copy_Realm(&tgt_name->realm, &rep.crealm);",
          "815:     if (ret)",
          "816:  goto out;",
          "823:     if (ret)",
          "824:  goto out;",
          "825:     rep.ticket.tkt_vno = 5;",
          "",
          "[Removed Lines]",
          "818:     if (f.request_anonymous)",
          "819:  _kdc_make_anonymous_principalname (&rep.cname);",
          "822:     ret = copy_PrincipalName(&tgt_name->name, &rep.cname);",
          "",
          "[Added Lines]",
          "845:     if (et.flags.anonymous && !tgt->flags.anonymous)",
          "846:  _kdc_make_anonymous_principalname(&rep.cname);",
          "847:     else",
          "848:  ret = copy_PrincipalName(&tgt_name->name, &rep.cname);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "874:     et.flags.pre_authent = tgt->flags.pre_authent;",
          "875:     et.flags.hw_authent  = tgt->flags.hw_authent;",
          "877:     et.flags.ok_as_delegate = server->entry.flags.ok_as_delegate;",
          "",
          "[Removed Lines]",
          "876:     et.flags.anonymous   = tgt->flags.anonymous;",
          "879:     if(rspac->length) {",
          "",
          "[Added Lines]",
          "910:     if (rspac->length && !et.flags.anonymous) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "926:     ret = krb5_copy_keyblock_contents(context, sessionkey, &et.key);",
          "927:     if (ret)",
          "928:  goto out;",
          "932:     ek.key = et.key;",
          "",
          "[Removed Lines]",
          "929:     et.crealm = tgt_name->realm;",
          "930:     et.cname = tgt_name->name;",
          "",
          "[Added Lines]",
          "960:     et.crealm = rep.crealm;",
          "961:     et.cname = rep.cname;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f679379f23ca9c665d70e3a38447d82f0a8b9951",
      "candidate_info": {
        "commit_hash": "f679379f23ca9c665d70e3a38447d82f0a8b9951",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/f679379f23ca9c665d70e3a38447d82f0a8b9951",
        "files": [
          "kdc/kerberos5.c",
          "kdc/pkinit.c"
        ],
        "message": "kdc: allow anonymous AS requests with long-term keys\n\nRFC8062 section 4.1 allows clients with long-term KDC keys to set the anonymous\nflag; in this case their identity is authenticated but the returned ticket\ncontains the anonymous principal name as the client name.\n\nkdc: allow authenticated anonymous PKINIT\n\nThe KDC PKINIT code conflated the checks for authenticated and unauthenticated\nanonymous by only looking at the anonymous KDC request option.\n\n(cherry picked from commit 63557427e0a1cd3d23c0942ab58bcae7c2e35534\n except for conflict with: c6232299c3b2831d5d8ecf701fcd286ae509fba8)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kdc/pkinit.c||kdc/pkinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:     Key *pa_key;",
          "595:     char *str;",
          "603:     ret = decode_EncryptedData(pa->padata_value.data,",
          "604:           pa->padata_value.length,",
          "605:           &enc_data,",
          "",
          "[Removed Lines]",
          "597:     if (_kdc_is_anon_request(&r->req.req_body)) {",
          "598:  ret = KRB5KRB_AP_ERR_BAD_INTEGRITY;",
          "599:  _kdc_set_e_text(r, \"ENC-TS doesn't support anon\");",
          "600:  goto out;",
          "601:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1710:     if (_kdc_is_anonymous(context, r->client_princ)) {",
          "1711:  if (!_kdc_is_anon_request(b)) {",
          "1713:      ret = KRB5KDC_ERR_BADOPTION;",
          "1714:      goto out;",
          "1715:  }",
          "1722:     }",
          "",
          "[Removed Lines]",
          "1712:      kdc_log(context, config, 0, \"Anonymous ticket w/o anonymous flag\");",
          "1716:     } else if (_kdc_is_anon_request(b)) {",
          "1717:  kdc_log(context, config, 0,",
          "1718:   \"Request for a anonymous ticket with non \"",
          "1719:   \"anonymous client name: %s\", r->client_name);",
          "1720:  ret = KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN;",
          "1721:  goto out;",
          "",
          "[Added Lines]",
          "1706:      kdc_log(context, config, 0, \"Anonymous client w/o anonymous flag\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1947:     rep.msg_type = krb_as_rep;",
          "1949:     if (_kdc_is_anonymous(context, r->client_princ)) {",
          "1951:  ret = copy_Realm(&anon_realm, &rep.crealm);",
          "1952:     } else",
          "1953:  ret = copy_Realm(&r->client->entry.principal->realm, &rep.crealm);",
          "1954:     if (ret)",
          "1955:  goto out;",
          "1957:     if (ret)",
          "1958:  goto out;",
          "",
          "[Removed Lines]",
          "1950:  Realm anon_realm=KRB5_ANON_REALM;",
          "1956:     ret = _krb5_principal2principalname(&rep.cname, r->client->entry.principal);",
          "",
          "[Added Lines]",
          "1938:  Realm anon_realm = KRB5_ANON_REALM;",
          "1944:     if (_kdc_is_anon_request(b))",
          "1945:  ret = _kdc_make_anonymous_principalname(&rep.cname);",
          "1946:     else",
          "1947:         ret = _krb5_principal2principalname(&rep.cname, r->client->entry.principal);",
          "",
          "---------------"
        ],
        "kdc/pkinit.c||kdc/pkinit.c": [
          "File: kdc/pkinit.c -> kdc/pkinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:  type = \"PK-INIT-Win2k\";",
          "481:      ret = KRB5_KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED;",
          "482:      krb5_set_error_message(context, ret,",
          "483:        \"Anon not supported in RSA mode\");",
          "",
          "[Removed Lines]",
          "480:  if (_kdc_is_anon_request(&req->req_body)) {",
          "",
          "[Added Lines]",
          "480:  if (_kdc_is_anonymous(context, client->entry.principal)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:  hx509_certs signer_certs;",
          "627:      flags |= HX509_CMS_VS_ALLOW_ZERO_SIGNER;",
          "629:  ret = hx509_cms_verify_signed(context->hx509ctx,",
          "",
          "[Removed Lines]",
          "626:  if (_kdc_is_anon_request(&req->req_body))",
          "",
          "[Added Lines]",
          "626:  if (_kdc_is_anonymous(context, client->entry.principal))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "708:      goto out;",
          "709:  }",
          "712:      ap.clientPublicValue == NULL) {",
          "713:      free_AuthPack(&ap);",
          "714:      ret = KRB5_KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED;",
          "",
          "[Removed Lines]",
          "711:  if (_kdc_is_anon_request(&req->req_body) &&",
          "",
          "[Added Lines]",
          "711:  if (_kdc_is_anonymous(context, client->entry.principal) &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1676:     size_t i;",
          "1678:     if (cp->cert == NULL) {",
          "1681:  if (*subject_name == NULL)",
          "1682:      return ENOMEM;",
          "1683:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:  if (!_kdc_is_anonymous(context, client->entry.principal))",
          "1680:      return KRB5KDC_ERR_BADOPTION;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66afdfe1fe639e7b4653d1a8c38199570c2017c3",
      "candidate_info": {
        "commit_hash": "66afdfe1fe639e7b4653d1a8c38199570c2017c3",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/66afdfe1fe639e7b4653d1a8c38199570c2017c3",
        "files": [
          "lib/hx509/data/gen-req.sh",
          "lib/hx509/data/mkcert.sh"
        ],
        "message": "For https://github.com/heimdal/heimdal/issues/392\n\nModern OpenSSL no longer has the 2038 year restriction.  Update the\ncerts to last 500 years rather than 10 years.\n\nModern crypto requirements suggest a stronger key strength than 1024.\nUpdate to use a minimum of 4096.\n\nFix executable bit on gen-req.sh\n\n(cherry picked from commit 98f904036c7988f5b53a5880ad7b3cf0b3bb6f0f)",
        "before_after_code_files": [
          "lib/hx509/data/gen-req.sh||lib/hx509/data/gen-req.sh",
          "lib/hx509/data/mkcert.sh||lib/hx509/data/mkcert.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hx509/data/gen-req.sh||lib/hx509/data/gen-req.sh": [
          "File: lib/hx509/data/gen-req.sh -> lib/hx509/data/gen-req.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: gen_cert()",
          "18: {",
          "20:  ${openssl} req \\",
          "21:   -new \\",
          "22:   -subj \"$1\" \\",
          "",
          "[Removed Lines]",
          "19:  keytype=${6:-rsa:1024}",
          "",
          "[Added Lines]",
          "19:  keytype=${6:-rsa:4096}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:         if [ \"$3\" = \"ca\" ] ; then",
          "31:      ${openssl} x509 \\",
          "32:   -req \\",
          "34:   -in cert.req \\",
          "35:   -extfile ${config} \\",
          "36:   -extensions $4 \\",
          "",
          "[Removed Lines]",
          "33:   -days 3650 \\",
          "",
          "[Added Lines]",
          "33:   -days 182500 \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:      ${openssl} x509 \\",
          "47:   -req \\",
          "48:   -in cert.req \\",
          "50:   -out cert.crt \\",
          "51:   -CA $2.crt \\",
          "52:   -CAkey $2.key \\",
          "",
          "[Removed Lines]",
          "49:   -days 3650 \\",
          "",
          "[Added Lines]",
          "49:   -days 182500 \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:      ${openssl} ca \\",
          "61:   -name $4 \\",
          "63:   -cert $2.crt \\",
          "64:   -keyfile $2.key \\",
          "65:   -in cert.req \\",
          "",
          "[Removed Lines]",
          "62:   -days 3650 \\",
          "",
          "[Added Lines]",
          "62:   -days 182500 \\",
          "",
          "---------------"
        ],
        "lib/hx509/data/mkcert.sh||lib/hx509/data/mkcert.sh": [
          "File: lib/hx509/data/mkcert.sh -> lib/hx509/data/mkcert.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: set -e",
          "8: key() {",
          "9:     local key=$1; shift",
          "",
          "[Removed Lines]",
          "5: # For now, avoid going past the 2038 32-bit clock rollover",
          "6: DAYS=$(( ( 0x7fffffff - $(date +%s) ) / 86400 - 1 ))",
          "",
          "[Added Lines]",
          "5: DAYS=182500",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c7ccf3bd48a5cb13893afb8b62e0e9cd66941d3",
      "candidate_info": {
        "commit_hash": "0c7ccf3bd48a5cb13893afb8b62e0e9cd66941d3",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/0c7ccf3bd48a5cb13893afb8b62e0e9cd66941d3",
        "files": [
          "configure.ac",
          "windows/NTMakefile.version"
        ],
        "message": "Bump version to 7.6",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "windows/NTMakefile.version||windows/NTMakefile.version"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: AC_REVISION($Revision$)",
          "3: AC_PREREQ(2.62)",
          "4: test -z \"$CFLAGS\" && CFLAGS=\"-g\"",
          "6: AC_CONFIG_SRCDIR([kuser/kinit.c])",
          "7: AC_CONFIG_HEADERS(include/config.h)",
          "8: AC_CONFIG_MACRO_DIR([cf])",
          "",
          "[Removed Lines]",
          "5: AC_INIT([Heimdal],[7.5.0],[https://github.com/heimdal/heimdal/issues])",
          "",
          "[Added Lines]",
          "5: AC_INIT([Heimdal],[7.6.0],[https://github.com/heimdal/heimdal/issues])",
          "",
          "---------------"
        ],
        "windows/NTMakefile.version||windows/NTMakefile.version": [
          "File: windows/NTMakefile.version -> windows/NTMakefile.version",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: VER_PACKAGE_COMPANY=www.h5l.org",
          "9: VER_PRODUCT_MAJOR=7",
          "11: VER_PRODUCT_AUX=0",
          "12: VER_PRODUCT_PATCH=0",
          "",
          "[Removed Lines]",
          "10: VER_PRODUCT_MINOR=5",
          "",
          "[Added Lines]",
          "10: VER_PRODUCT_MINOR=6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: VER_OLD_BEGIN_PATCH=0",
          "26: VER_OLD_END_MAJOR=7",
          "28: VER_OLD_END_AUX=65535",
          "29: VER_OLD_END_PATCH=65535",
          "",
          "[Removed Lines]",
          "27: VER_OLD_END_MINOR=4",
          "",
          "[Added Lines]",
          "27: VER_OLD_END_MINOR=5",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5733372241456e8cf4d9052802712dc762e8b262",
      "candidate_info": {
        "commit_hash": "5733372241456e8cf4d9052802712dc762e8b262",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/5733372241456e8cf4d9052802712dc762e8b262",
        "files": [
          "lib/kadm5/ipropd_slave.c"
        ],
        "message": "ipropd-slave: don't send I_HAVE in response to AYT\n\nipropd-master sends AYT messages often as a result of a possibly-\ntransient error, but if the slave responds to such an AYT with I_HAVE,\nthen the same code path that failed will be executed on the master, and\nif the error wasn't transient then we'll loop hard.  So don't send an\nI_HAVE in response to an AYT.",
        "before_after_code_files": [
          "lib/kadm5/ipropd_slave.c||lib/kadm5/ipropd_slave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/ipropd_slave.c||lib/kadm5/ipropd_slave.c": [
          "File: lib/kadm5/ipropd_slave.c -> lib/kadm5/ipropd_slave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1003:                 if (verbose)",
          "1004:                     krb5_warnx(context, \"master sent us a ping\");",
          "1005:   is_up_to_date(context, status_file, server_context);",
          "1011:   send_im_here(context, master_fd, auth_context);",
          "1012:   break;",
          "1013:      case YOU_HAVE_LAST_VERSION:",
          "",
          "[Removed Lines]",
          "1006:                 ret = ihave(context, auth_context, master_fd,",
          "1007:                             server_context->log_context.version);",
          "1008:                 if (ret)",
          "1009:                     connected = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}