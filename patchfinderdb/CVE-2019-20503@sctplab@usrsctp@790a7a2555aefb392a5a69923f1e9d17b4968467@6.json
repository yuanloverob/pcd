{
  "cve_id": "CVE-2019-20503",
  "cve_desc": "usrsctp before 2019-12-20 has out-of-bounds reads in sctp_load_addresses_from_init.",
  "repo": "sctplab/usrsctp",
  "patch_hash": "790a7a2555aefb392a5a69923f1e9d17b4968467",
  "patch_info": {
    "commit_hash": "790a7a2555aefb392a5a69923f1e9d17b4968467",
    "repo": "sctplab/usrsctp",
    "commit_url": "https://github.com/sctplab/usrsctp/commit/790a7a2555aefb392a5a69923f1e9d17b4968467",
    "files": [
      "usrsctplib/netinet/sctp_auth.c",
      "usrsctplib/netinet/sctp_pcb.c"
    ],
    "message": "Improve input validation for some parameters having a too small reported length.\n\nThanks to Natalie Silvanovich from Google for finding one of these\nissues in the SCTP userland stack and reporting it.",
    "before_after_code_files": [
      "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c",
      "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
    ]
  },
  "patch_diff": {
    "usrsctplib/netinet/sctp_auth.c||usrsctplib/netinet/sctp_auth.c": [
      "File: usrsctplib/netinet/sctp_auth.c -> usrsctplib/netinet/sctp_auth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #ifdef __FreeBSD__",
      "36: #include <sys/cdefs.h>",
      "38: #endif",
      "40: #include <netinet/sctp_os.h>",
      "",
      "[Removed Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 352438 2019-09-17 09:46:42Z tuexen $\");",
      "",
      "[Added Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_auth.c 355931 2019-12-20 15:25:08Z tuexen $\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1421:   ptype = ntohs(phdr->param_type);",
      "1422:   plen = ntohs(phdr->param_length);",
      "1425:    break;",
      "1427:   if (ptype == SCTP_RANDOM) {",
      "",
      "[Removed Lines]",
      "1424:   if ((plen == 0) || (offset + plen > length))",
      "",
      "[Added Lines]",
      "1424:   if ((plen < sizeof(struct sctp_paramhdr)) ||",
      "1425:       (offset + plen > length))",
      "",
      "---------------"
    ],
    "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c": [
      "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplib/netinet/sctp_pcb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #ifdef __FreeBSD__",
      "36: #include <sys/cdefs.h>",
      "38: #endif",
      "40: #include <netinet/sctp_os.h>",
      "",
      "[Removed Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 353477 2019-10-13 16:14:04Z markj $\");",
      "",
      "[Added Lines]",
      "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 355931 2019-12-20 15:25:08Z tuexen $\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7247:   if (offset + plen > limit) {",
      "7248:    break;",
      "7249:   }",
      "7251:    break;",
      "7252:   }",
      "7253: #ifdef INET",
      "",
      "[Removed Lines]",
      "7250:   if (plen == 0) {",
      "",
      "[Added Lines]",
      "7250:   if (plen < sizeof(struct sctp_paramhdr)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7463:    if (plen > sizeof(lstore)) {",
      "7464:     return (-23);",
      "7465:    }",
      "7466:    phdr = sctp_get_next_param(m, offset,",
      "7467:          (struct sctp_paramhdr *)&lstore,",
      "7468:          plen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7466:    if (plen < sizeof(struct sctp_asconf_addrv4_param)) {",
      "7467:     return (-101);",
      "7468:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea9728dfcf68aed6e4bc511a1b1d5b7469b6a0b3",
      "candidate_info": {
        "commit_hash": "ea9728dfcf68aed6e4bc511a1b1d5b7469b6a0b3",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/ea9728dfcf68aed6e4bc511a1b1d5b7469b6a0b3",
        "files": [
          "usrsctplib/netinet/sctp_pcb.c"
        ],
        "message": "Cleanup",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 363275 2020-07-17 15:09:49Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4145:  if (from != SCTP_CALLED_FROM_INPKILL_TIMER) {",
          "4146:   (void)SCTP_OS_TIMER_STOP_DRAIN(&inp->sctp_ep.signature_change.timer);",
          "4150:  }",
          "4152: #ifdef SCTP_LOG_CLOSING",
          "",
          "[Removed Lines]",
          "4147:  } else {",
          "4149:   (void)SCTP_OS_TIMER_STOP(&inp->sctp_ep.signature_change.timer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f495441f0a58dc2d15aa9cc78fb5cd5cea6e25a",
      "candidate_info": {
        "commit_hash": "1f495441f0a58dc2d15aa9cc78fb5cd5cea6e25a",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/1f495441f0a58dc2d15aa9cc78fb5cd5cea6e25a",
        "files": [
          "usrsctplib/netinet/sctp_pcb.c"
        ],
        "message": "Fix handling of accepted sockets.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 359152 2020-03-19 21:01:16Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5509:  else",
          "5510:   so = inp->sctp_socket;",
          "",
          "[Removed Lines]",
          "5512:  if ((inp->sctp_flags & SCTP_PCB_FLAGS_TCPTYPE) ||",
          "5513:      (inp->sctp_flags & SCTP_PCB_FLAGS_IN_TCPPOOL)) {",
          "5518:   if (inp->sctp_flags & SCTP_PCB_FLAGS_CONNECTED) {",
          "5519:    inp->sctp_flags &= ~SCTP_PCB_FLAGS_CONNECTED;",
          "5520:    inp->sctp_flags |= SCTP_PCB_FLAGS_WAS_CONNECTED;",
          "5521:    if (so) {",
          "5522:     SOCKBUF_LOCK(&so->so_rcv);",
          "5523:     so->so_state &= ~(SS_ISCONNECTING |",
          "5524:         SS_ISDISCONNECTING |",
          "5525:         SS_ISCONFIRMING |",
          "5526:         SS_ISCONNECTED);",
          "5527:     so->so_state |= SS_ISDISCONNECTED;",
          "5528: #if defined(__APPLE__)",
          "5529:     socantrcvmore(so);",
          "5530: #else",
          "5531:     socantrcvmore_locked(so);",
          "5532: #endif",
          "5533:     socantsendmore(so);",
          "5534:     sctp_sowwakeup(inp, so);",
          "5535:     sctp_sorwakeup(inp, so);",
          "5536:     SCTP_SOWAKEUP(so);",
          "5537:    }",
          "5538:   }",
          "5539:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5664:   so = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "939d48f9632d69bf170c7a84514b312b6b42257d",
      "candidate_info": {
        "commit_hash": "939d48f9632d69bf170c7a84514b312b6b42257d",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/939d48f9632d69bf170c7a84514b312b6b42257d",
        "files": [
          "usrsctplib/netinet/sctp_callout.h",
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_var.h",
          "usrsctplib/netinet/sctputil.c",
          "usrsctplib/netinet/sctputil.h"
        ],
        "message": "Add reference counts for inp/stcb/net when timers are running. This avoids a use-after-free reported for the userland stack. Thanks to Taylor Brandstetter for suggesting a patch for the userland stack.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_callout.h||usrsctplinetinet/sctp_callout.h",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_var.h||usrsctplinetinet/sctp_var.h",
          "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c",
          "usrsctplib/netinet/sctputil.h||usrsctplinetinet/sctputil.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_callout.h||usrsctplinetinet/sctp_callout.h": [
          "File: usrsctplib/netinet/sctp_callout.h -> usrsctplinetinet/sctp_callout.h"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 363309 2020-07-18 13:10:02Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3166:    }",
          "3167:   }",
          "3168:  }",
          "3182:  TAILQ_FOREACH(net, &stcb->asoc.nets, sctp_next) {",
          "3186:  }",
          "3187:  SCTP_INP_WUNLOCK(new_inp);",
          "3188:  SCTP_INP_WUNLOCK(old_inp);",
          "",
          "[Removed Lines]",
          "3175:  stcb->asoc.dack_timer.ep = (void *)new_inp;",
          "3176:  stcb->asoc.asconf_timer.ep = (void *)new_inp;",
          "3177:  stcb->asoc.strreset_timer.ep = (void *)new_inp;",
          "3178:  stcb->asoc.shut_guard_timer.ep = (void *)new_inp;",
          "3179:  stcb->asoc.autoclose_timer.ep = (void *)new_inp;",
          "3180:  stcb->asoc.delete_prim_timer.ep = (void *)new_inp;",
          "3183:   net->pmtu_timer.ep = (void *)new_inp;",
          "3184:   net->hb_timer.ep = (void *)new_inp;",
          "3185:   net->rxt_timer.ep = (void *)new_inp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4135:  SCTP_INP_WUNLOCK(inp);",
          "4136:  SCTP_ASOC_CREATE_UNLOCK(inp);",
          "4137:  SCTP_INP_INFO_WUNLOCK();",
          "4149: #ifdef SCTP_LOG_CLOSING",
          "4150:  sctp_log_closing(inp, NULL, 5);",
          "",
          "[Removed Lines]",
          "4145:  if (from != SCTP_CALLED_FROM_INPKILL_TIMER) {",
          "4146:   (void)SCTP_OS_TIMER_STOP_DRAIN(&inp->sctp_ep.signature_change.timer);",
          "4147:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_var.h||usrsctplinetinet/sctp_var.h": [
          "File: usrsctplib/netinet/sctp_var.h -> usrsctplinetinet/sctp_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #ifndef _NETINET_SCTP_VAR_H_",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_var.h 360292 2020-04-25 09:06:11Z melifaro $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: #define sctp_free_remote_addr(__net) { \\",
          "192:  if ((__net)) {  \\",
          "193:   if (SCTP_DECREMENT_AND_CHECK_REFCOUNT(&(__net)->ref_count)) { \\",
          "195:    RO_NHFREE(&(__net)->ro); \\",
          "196:    if ((__net)->src_addr_selected) { \\",
          "197:     sctp_free_ifa((__net)->ro._s_addr); \\",
          "",
          "[Removed Lines]",
          "194:    (void)SCTP_OS_TIMER_STOP(&(__net)->rxt_timer.timer); \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234: #define sctp_free_remote_addr(__net) { \\",
          "235:  if ((__net)) { \\",
          "236:   if (SCTP_DECREMENT_AND_CHECK_REFCOUNT(&(__net)->ref_count)) { \\",
          "238:    if ((__net)->ro.ro_rt) { \\",
          "239:     RTFREE((__net)->ro.ro_rt); \\",
          "240:     (__net)->ro.ro_rt = NULL; \\",
          "",
          "[Removed Lines]",
          "237:    (void)SCTP_OS_TIMER_STOP(&(__net)->rxt_timer.timer); \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.c||usrsctplinetinet/sctputil.c": [
          "File: usrsctplib/netinet/sctputil.c -> usrsctplinetinet/sctputil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.c 363275 2020-07-17 15:09:49Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1780: #if defined(__Userspace__)",
          "1781:  struct socket *upcall_socket = NULL;",
          "1782: #endif",
          "1784:  int type;",
          "1785:  int i, secret;",
          "1787:  tmr = (struct sctp_timer *)t;",
          "1788:  inp = (struct sctp_inpcb *)tmr->ep;",
          "1789:  stcb = (struct sctp_tcb *)tmr->tcb;",
          "",
          "[Removed Lines]",
          "1783:  int did_output;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1792:  CURVNET_SET((struct vnet *)tmr->vnet);",
          "1793: #endif",
          "1794:  did_output = 1;",
          "1796: #ifdef SCTP_AUDITING_ENABLED",
          "1797:  sctp_audit_log(0xF0, (uint8_t) tmr->type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1807:  KASSERT(stcb == NULL || stcb->sctp_ep == inp,",
          "1808:          (\"sctp_timeout_handler of type %d: inp = %p, stcb->sctp_ep %p\",",
          "1809:           type, stcb, stcb->sctp_ep));",
          "1813:  tmr->stopped_from = 0xa001;",
          "1829:  }",
          "1830:  tmr->stopped_from = 0xa002;",
          "1831:  SCTPDBG(SCTP_DEBUG_TIMER2, \"Timer type %d goes off.\\n\", type);",
          "1832:  if (!SCTP_OS_TIMER_ACTIVE(&tmr->timer)) {",
          "1839:   SCTPDBG(SCTP_DEBUG_TIMER2,",
          "1840:    \"Timer type %d handler exiting due to not being active.\\n\",",
          "1841:    type);",
          "1846:  }",
          "1848:  tmr->stopped_from = 0xa003;",
          "1849:  if (stcb) {",
          "1850:   SCTP_TCB_LOCK(stcb);",
          "1851:   atomic_add_int(&stcb->asoc.refcnt, -1);",
          "1852:   if ((type != SCTP_TIMER_TYPE_ASOCKILL) &&",
          "1854:        (stcb->asoc.state & SCTP_STATE_ABOUT_TO_BE_FREED))) {",
          "1859:    SCTPDBG(SCTP_DEBUG_TIMER2,",
          "1860:            \"Timer type %d handler exiting due to CLOSED association.\\n\",",
          "1861:            type);",
          "1866:   }",
          "1867:  } else if (inp != NULL) {",
          "1868:   SCTP_INP_WLOCK(inp);",
          "",
          "[Removed Lines]",
          "1810:  if (inp) {",
          "1811:   SCTP_INP_INCR_REF(inp);",
          "1812:  }",
          "1814:  if (stcb) {",
          "1815:   atomic_add_int(&stcb->asoc.refcnt, 1);",
          "1816:   if (stcb->asoc.state == 0) {",
          "1817:    atomic_add_int(&stcb->asoc.refcnt, -1);",
          "1818:    if (inp) {",
          "1819:     SCTP_INP_DECR_REF(inp);",
          "1820:    }",
          "1821:    SCTPDBG(SCTP_DEBUG_TIMER2,",
          "1822:            \"Timer type %d handler exiting due to CLOSED association.\\n\",",
          "1823:            type);",
          "1824: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "1825:    CURVNET_RESTORE();",
          "1826: #endif",
          "1827:    return;",
          "1828:   }",
          "1833:   if (inp) {",
          "1834:    SCTP_INP_DECR_REF(inp);",
          "1835:   }",
          "1836:   if (stcb) {",
          "1837:    atomic_add_int(&stcb->asoc.refcnt, -1);",
          "1838:   }",
          "1842: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "1843:   CURVNET_RESTORE();",
          "1844: #endif",
          "1845:   return;",
          "1853:       ((stcb->asoc.state == 0) ||",
          "1855:    SCTP_TCB_UNLOCK(stcb);",
          "1856:    if (inp) {",
          "1857:     SCTP_INP_DECR_REF(inp);",
          "1858:    }",
          "1862: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "1863:    CURVNET_RESTORE();",
          "1864: #endif",
          "1865:    return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1884:  }",
          "1885:  if (!SCTP_OS_TIMER_ACTIVE(&tmr->timer)) {",
          "1890:  }",
          "1891:  SCTP_OS_TIMER_DEACTIVATE(&tmr->timer);",
          "",
          "[Removed Lines]",
          "1883:   goto get_out;",
          "1889:   goto get_out;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1923:   sctp_auditing(4, inp, stcb, net);",
          "1924: #endif",
          "1925:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_T3, SCTP_SO_NOT_LOCKED);",
          "1926:   if ((stcb->asoc.num_send_timers_up == 0) &&",
          "1927:       (stcb->asoc.sent_queue_cnt > 0)) {",
          "1928:    struct sctp_tmit_chunk *chk;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1954:    goto out_decr;",
          "1955:   }",
          "1958:   break;",
          "1959:  case SCTP_TIMER_TYPE_RECV:",
          "1960:   KASSERT(inp != NULL && stcb != NULL && net == NULL,",
          "",
          "[Removed Lines]",
          "1957:   did_output = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1967:   sctp_auditing(4, inp, stcb, NULL);",
          "1968: #endif",
          "1969:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_SACK_TMR, SCTP_SO_NOT_LOCKED);",
          "1970:   break;",
          "1971:  case SCTP_TIMER_TYPE_SHUTDOWN:",
          "1972:   KASSERT(inp != NULL && stcb != NULL && net != NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1982:   sctp_auditing(4, inp, stcb, net);",
          "1983: #endif",
          "1984:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_SHUT_TMR, SCTP_SO_NOT_LOCKED);",
          "1985:   break;",
          "1986:  case SCTP_TIMER_TYPE_HEARTBEAT:",
          "1987:   KASSERT(inp != NULL && stcb != NULL && net != NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1999:   if (!(net->dest_state & SCTP_ADDR_NOHB)) {",
          "2000:    sctp_timer_start(SCTP_TIMER_TYPE_HEARTBEAT, inp, stcb, net);",
          "2001:    sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_HB_TMR, SCTP_SO_NOT_LOCKED);",
          "2002:   }",
          "2003:   break;",
          "2004:  case SCTP_TIMER_TYPE_COOKIE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2021:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_T3, SCTP_SO_NOT_LOCKED);",
          "2022:   break;",
          "2023:  case SCTP_TIMER_TYPE_NEWCOOKIE:",
          "2024:   KASSERT(inp != NULL && stcb == NULL && net == NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2040:        sctp_select_initial_TSN(&inp->sctp_ep);",
          "2041:   }",
          "2042:   sctp_timer_start(SCTP_TIMER_TYPE_NEWCOOKIE, inp, NULL, NULL);",
          "2044:   break;",
          "2045:  case SCTP_TIMER_TYPE_PATHMTURAISE:",
          "2046:   KASSERT(inp != NULL && stcb != NULL && net != NULL,",
          "",
          "[Removed Lines]",
          "2043:   did_output = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2048:            type, inp, stcb, net));",
          "2049:   SCTP_STAT_INCR(sctps_timopathmtu);",
          "2050:   sctp_pathmtu_timer(inp, stcb, net);",
          "2052:   break;",
          "2053:  case SCTP_TIMER_TYPE_SHUTDOWNACK:",
          "2054:   KASSERT(inp != NULL && stcb != NULL && net != NULL,",
          "",
          "[Removed Lines]",
          "2051:   did_output = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2064:   sctp_auditing(4, inp, stcb, net);",
          "2065: #endif",
          "2066:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_SHUT_ACK_TMR, SCTP_SO_NOT_LOCKED);",
          "2067:   break;",
          "2068:  case SCTP_TIMER_TYPE_ASCONF:",
          "2069:   KASSERT(inp != NULL && stcb != NULL && net != NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2078:   sctp_auditing(4, inp, stcb, net);",
          "2079: #endif",
          "2080:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_ASCONF_TMR, SCTP_SO_NOT_LOCKED);",
          "2081:   break;",
          "2082:  case SCTP_TIMER_TYPE_SHUTDOWNGUARD:",
          "2083:   KASSERT(inp != NULL && stcb != NULL && net == NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2087:   op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "2088:                                \"Shutdown guard timer expired\");",
          "2089:   sctp_abort_an_association(inp, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "2091:   goto out_decr;",
          "2092:  case SCTP_TIMER_TYPE_AUTOCLOSE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2096:   SCTP_STAT_INCR(sctps_timoautoclose);",
          "2097:   sctp_autoclose_timer(inp, stcb);",
          "2098:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_AUTOCLOSE_TMR, SCTP_SO_NOT_LOCKED);",
          "2100:   break;",
          "2101:  case SCTP_TIMER_TYPE_STRRESET:",
          "2102:   KASSERT(inp != NULL && stcb != NULL && net == NULL,",
          "",
          "[Removed Lines]",
          "2099:   did_output = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2108:    goto out_decr;",
          "2109:   }",
          "2110:   sctp_chunk_output(inp, stcb, SCTP_OUTPUT_FROM_STRRST_TMR, SCTP_SO_NOT_LOCKED);",
          "2111:   break;",
          "2112:  case SCTP_TIMER_TYPE_INPKILL:",
          "2113:   KASSERT(inp != NULL && stcb == NULL && net == NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2126:   SCTP_INP_DECR_REF(inp);",
          "2127:   SCTP_INP_WUNLOCK(inp);",
          "2128:   sctp_inpcb_free(inp, SCTP_FREE_SHOULD_USE_ABORT,",
          "2130: #if defined(__APPLE__) && !defined(__Userspace__)",
          "2131:   SCTP_SOCKET_UNLOCK(SCTP_INP_SO(inp), 1);",
          "2132: #endif",
          "",
          "[Removed Lines]",
          "2129:     SCTP_CALLED_FROM_INPKILL_TIMER);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2165:           (\"timeout of type %d: inp = %p, stcb = %p, net = %p\",",
          "2166:            type, inp, stcb, net));",
          "2167:   sctp_handle_addr_wq();",
          "2168:   break;",
          "2169:  case SCTP_TIMER_TYPE_PRIM_DELETED:",
          "2170:   KASSERT(inp != NULL && stcb != NULL && net == NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2172:            type, inp, stcb, net));",
          "2173:   SCTP_STAT_INCR(sctps_timodelprim);",
          "2174:   sctp_delete_prim_timer(inp, stcb);",
          "2175:   break;",
          "2176:  default:",
          "2177: #ifdef INVARIANTS",
          "2178:   panic(\"Unknown timer type %d\", type);",
          "2179: #else",
          "2181: #endif",
          "2182:  }",
          "2183: #ifdef SCTP_AUDITING_ENABLED",
          "2184:  sctp_audit_log(0xF1, (uint8_t) type);",
          "2186:   sctp_auditing(5, inp, stcb, net);",
          "2187: #endif",
          "",
          "[Removed Lines]",
          "2180:   goto get_out;",
          "2185:  if (inp)",
          "2188:  if ((did_output) && stcb) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2196:   sctp_fix_ecn_echo(&stcb->asoc);",
          "2197:  }",
          "2200:   SCTP_TCB_UNLOCK(stcb);",
          "2201:  } else if (inp != NULL) {",
          "2202:   SCTP_INP_WUNLOCK(inp);",
          "",
          "[Removed Lines]",
          "2198: get_out:",
          "2199:  if (stcb) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2216:   sorele(upcall_socket);",
          "2217:  }",
          "2218: #endif",
          "2220:   SCTP_INP_DECR_REF(inp);",
          "2221:  }",
          "2223: out_no_decr:",
          "2224:  SCTPDBG(SCTP_DEBUG_TIMER2, \"Timer type %d handler finished.\\n\", type);",
          "2225: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "",
          "[Removed Lines]",
          "2219:  if (inp) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2654:   SCTPDBG(SCTP_DEBUG_TIMER2,",
          "2655:           \"Timer type %d started: ticks=%u, inp=%p, stcb=%p, net=%p.\\n\",",
          "2656:            t_type, to_ticks, inp, stcb, net);",
          "2657:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2946:   SCTPDBG(SCTP_DEBUG_TIMER2,",
          "2947:           \"Timer type %d stopped: inp=%p, stcb=%p, net=%p.\\n\",",
          "2948:           t_type, inp, stcb, net);",
          "2952:  } else {",
          "2953:   SCTPDBG(SCTP_DEBUG_TIMER2,",
          "2954:           \"Timer type %d not stopped: inp=%p, stcb=%p, net=%p.\\n\",",
          "",
          "[Removed Lines]",
          "2949:   tmr->ep = NULL;",
          "2950:   tmr->tcb = NULL;",
          "2951:   tmr->net = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctputil.h||usrsctplinetinet/sctputil.h": [
          "File: usrsctplib/netinet/sctputil.h -> usrsctplinetinet/sctputil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if defined(__FreeBSD__) && !defined(__Userspace__)",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #ifndef _NETINET_SCTP_UTIL_H_",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctputil.h 362448 2020-06-20 20:20:16Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "edd369d6a0544ee865ef3678c0c68ccf3a98a57c",
      "candidate_info": {
        "commit_hash": "edd369d6a0544ee865ef3678c0c68ccf3a98a57c",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/edd369d6a0544ee865ef3678c0c68ccf3a98a57c",
        "files": [
          "usrsctplib/netinet/sctp_asconf.c",
          "usrsctplib/netinet/sctp_bsd_addr.c",
          "usrsctplib/netinet/sctp_indata.c",
          "usrsctplib/netinet/sctp_input.c",
          "usrsctplib/netinet/sctp_os_userspace.h",
          "usrsctplib/netinet/sctp_output.c",
          "usrsctplib/netinet/sctp_pcb.c"
        ],
        "message": "Use SCTP_SNPRINTF().",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_asconf.c||usrsctplinetinet/sctp_asconf.c",
          "usrsctplib/netinet/sctp_bsd_addr.c||usrsctplinetinet/sctp_bsd_addr.c",
          "usrsctplib/netinet/sctp_indata.c||usrsctplinetinet/sctp_indata.c",
          "usrsctplib/netinet/sctp_input.c||usrsctplinetinet/sctp_input.c",
          "usrsctplib/netinet/sctp_os_userspace.h||usrsctplinetinet/sctp_os_userspace.h",
          "usrsctplib/netinet/sctp_output.c||usrsctplinetinet/sctp_output.c",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_asconf.c||usrsctplinetinet/sctp_asconf.c": [
          "File: usrsctplib/netinet/sctp_asconf.c -> usrsctplinetinet/sctp_asconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_asconf.c 361222 2020-05-18 18:32:58Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1743:   char msg[SCTP_DIAG_INFO_LEN];",
          "1745:   SCTPDBG(SCTP_DEBUG_ASCONF1, \"handle_asconf_ack: got unexpected next serial number! Aborting asoc!\\n\");",
          "1749:   op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "1750:   sctp_abort_an_association(stcb->sctp_ep, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "1746:   if (snprintf(msg, sizeof(msg), \"Never sent serial number %8.8x\", serial_num) < 0) {",
          "1747:    msg[0] = '\\0';",
          "1748:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_bsd_addr.c||usrsctplinetinet/sctp_bsd_addr.c": [
          "File: usrsctplib/netinet/sctp_bsd_addr.c -> usrsctplinetinet/sctp_bsd_addr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:    } else {",
          "543:     ifa_flags = 0;",
          "544:    }",
          "548:    sctp_ifa = sctp_add_addr_to_vrf(vrfid,",
          "550:                                    ifnet_index(ifn),",
          "",
          "[Removed Lines]",
          "545:    if (snprintf(name, SCTP_IFNAMSIZ, \"%s%d\", ifnet_name(ifn), ifnet_unit(ifn)) < 0) {",
          "546:     name[0] = '\\0';",
          "547:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_indata.c||usrsctplinetinet/sctp_indata.c": [
          "File: usrsctplib/netinet/sctp_indata.c -> usrsctplinetinet/sctp_indata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_indata.c 361209 2020-05-18 10:07:01Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450:  struct mbuf *oper;",
          "452:  if (stcb->asoc.idata_supported) {",
          "462:  } else {",
          "473:  }",
          "474:  oper = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "475:  sctp_m_freem(chk->data);",
          "",
          "[Removed Lines]",
          "453:   if (snprintf(msg, sizeof(msg),",
          "454:                \"Reass %x,CF:%x,TSN=%8.8x,SID=%4.4x,FSN=%8.8x,MID:%8.8x\",",
          "455:                opspot,",
          "456:                control->fsn_included,",
          "457:                chk->rec.data.tsn,",
          "458:                chk->rec.data.sid,",
          "459:                chk->rec.data.fsn, chk->rec.data.mid) < 0) {",
          "460:    msg[0] = '\\0';",
          "461:   }",
          "463:   if (snprintf(msg, sizeof(msg),",
          "464:                \"Reass %x,CI:%x,TSN=%8.8x,SID=%4.4x,FSN=%4.4x,SSN:%4.4x\",",
          "465:                opspot,",
          "466:                control->fsn_included,",
          "467:                chk->rec.data.tsn,",
          "468:                chk->rec.data.sid,",
          "469:                chk->rec.data.fsn,",
          "470:                (uint16_t)chk->rec.data.mid) < 0) {",
          "471:    msg[0] = '\\0';",
          "472:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "553:   TAILQ_INSERT_HEAD(&strm->inqueue, control, next_instrm);",
          "554:   if (asoc->idata_supported) {",
          "560:   } else {",
          "568:   }",
          "569:   op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "570:   stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_2;",
          "",
          "[Removed Lines]",
          "555:    if (snprintf(msg, sizeof(msg), \"Delivered MID=%8.8x, got TSN=%8.8x, SID=%4.4x, MID=%8.8x\",",
          "556:                 strm->last_mid_delivered, control->sinfo_tsn,",
          "557:                 control->sinfo_stream, control->mid) < 0) {",
          "558:     msg[0] = '\\0';",
          "559:    }",
          "561:    if (snprintf(msg, sizeof(msg), \"Delivered SSN=%4.4x, got TSN=%8.8x, SID=%4.4x, SSN=%4.4x\",",
          "562:                 (uint16_t)strm->last_mid_delivered,",
          "563:                 control->sinfo_tsn,",
          "564:                 control->sinfo_stream,",
          "565:                 (uint16_t)control->mid) < 0) {",
          "566:     msg[0] = '\\0';",
          "567:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "673:   if (sctp_place_control_in_stream(strm, asoc, control)) {",
          "678:    sctp_clean_up_control(stcb, control);",
          "679:    op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "680:    stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_3;",
          "",
          "[Removed Lines]",
          "674:    if (snprintf(msg, sizeof(msg),",
          "675:                 \"Queue to str MID: %u duplicate\", control->mid) < 0) {",
          "676:     msg[0] = '\\0';",
          "677:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1888:   goto err_out;",
          "1889:  }",
          "1890:  control = sctp_find_reasm_entry(&asoc->strmin[sid], mid, ordered, asoc->idata_supported);",
          "",
          "[Removed Lines]",
          "1885:   if (snprintf(msg, sizeof(msg), \"FSN zero for MID=%8.8x, but flags=%2.2x\", mid, chk_flags) < 0) {",
          "1886:    msg[0] = '\\0';",
          "1887:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1895:   if (control != NULL) {",
          "1897:    if (ordered && (mid != control->mid)) {",
          "1901:    err_out:",
          "1902:     op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "1903:     stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_16;",
          "",
          "[Removed Lines]",
          "1898:     if (snprintf(msg, sizeof(msg), \"Reassembly problem (MID=%8.8x)\", mid) < 0) {",
          "1899:      msg[0] = '\\0';",
          "1900:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1907:    }",
          "1908:    if (ordered && ((control->sinfo_flags >> 8) & SCTP_DATA_UNORDERED)) {",
          "1915:     goto err_out;",
          "1916:    }",
          "1917:    if (!ordered && (((control->sinfo_flags >> 8) & SCTP_DATA_UNORDERED) == 0)) {",
          "1920:                  \"All fragments of a user message must be ordered or unordered (TSN=%8.8x)\",",
          "1924:     goto err_out;",
          "1925:    }",
          "1926:   }",
          "",
          "[Removed Lines]",
          "1910:     if (snprintf(msg, sizeof(msg),",
          "1911:                  \"All fragments of a user message must be ordered or unordered (TSN=%8.8x)\",",
          "1912:                  tsn) < 0) {",
          "1913:      msg[0] = '\\0';",
          "1914:     }",
          "1919:     if (snprintf(msg, sizeof(msg),",
          "1921:                  tsn) < 0) {",
          "1922:      msg[0] = '\\0';",
          "1923:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1934:    if (ordered || asoc->idata_supported) {",
          "1935:     SCTPDBG(SCTP_DEBUG_XXX, \"chunk_flags: 0x%x dup detected on MID: %u\\n\",",
          "1936:      chk_flags, mid);",
          "1940:     goto err_out;",
          "1941:    } else {",
          "1942:     if ((tsn == control->fsn_included + 1) &&",
          "1943:         (control->end_added == 0)) {",
          "1949:      goto err_out;",
          "1950:     } else {",
          "1951:      control = NULL;",
          "",
          "[Removed Lines]",
          "1937:     if (snprintf(msg, sizeof(msg), \"Duplicate MID=%8.8x detected.\", mid) < 0) {",
          "1938:      msg[0] = '\\0';",
          "1939:     }",
          "1944:      if (snprintf(msg, sizeof(msg),",
          "1945:                   \"Illegal message sequence, missing end for MID: %8.8x\",",
          "1946:                   control->fsn_included) < 0) {",
          "1947:       msg[0] = '\\0';",
          "1948:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2042:    mid, asoc->strmin[sid].last_mid_delivered);",
          "2044:   if (asoc->idata_supported) {",
          "2052:   } else {",
          "2060:   }",
          "2061:   op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "2062:   stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_17;",
          "",
          "[Removed Lines]",
          "2045:    if (snprintf(msg, sizeof(msg), \"Delivered MID=%8.8x, got TSN=%8.8x, SID=%4.4x, MID=%8.8x\",",
          "2046:                 asoc->strmin[sid].last_mid_delivered,",
          "2047:                 tsn,",
          "2048:                 sid,",
          "2049:                 mid) < 0) {",
          "2050:     msg[0] = '\\0';",
          "2051:    }",
          "2053:    if (snprintf(msg, sizeof(msg), \"Delivered SSN=%4.4x, got TSN=%8.8x, SID=%4.4x, SSN=%4.4x\",",
          "2054:                 (uint16_t)asoc->strmin[sid].last_mid_delivered,",
          "2055:                 tsn,",
          "2056:                 sid,",
          "2057:                 (uint16_t)mid) < 0) {",
          "2058:     msg[0] = '\\0';",
          "2059:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2784:    struct mbuf *op_err;",
          "2785:    char msg[SCTP_DIAG_INFO_LEN];",
          "2790:    op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "2791:    stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_20;",
          "2792:    sctp_abort_an_association(inp, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "2787:    if (snprintf(msg, sizeof(msg), \"%s\", \"I-DATA chunk received when DATA was negotiated\") < 0) {",
          "2788:     msg[0] = '\\0';",
          "2789:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2797:    struct mbuf *op_err;",
          "2798:    char msg[SCTP_DIAG_INFO_LEN];",
          "2803:    op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "2804:    stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_21;",
          "2805:    sctp_abort_an_association(inp, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "2800:    if (snprintf(msg, sizeof(msg), \"%s\", \"DATA chunk received when I-DATA was negotiated\") < 0) {",
          "2801:     msg[0] = '\\0';",
          "2802:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2822:     struct mbuf *op_err;",
          "2823:     char msg[SCTP_DIAG_INFO_LEN];",
          "2830:     op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "2831:     stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_22;",
          "2832:     sctp_abort_an_association(inp, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "2825:     if (snprintf(msg, sizeof(msg), \"%s chunk of length %u\",",
          "2826:                  ch->chunk_type == SCTP_DATA ? \"DATA\" : \"I-DATA\",",
          "2827:                  chk_length) < 0) {",
          "2828:      msg[0] = '\\0';",
          "2829:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2893:     struct mbuf *op_err;",
          "2894:     char msg[SCTP_DIAG_INFO_LEN];",
          "2900:     op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "2901:     sctp_abort_an_association(inp, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "2902:     return (2);",
          "",
          "[Removed Lines]",
          "2896:     if (snprintf(msg, sizeof(msg), \"DATA chunk followed by chunk of type %2.2x\",",
          "2897:                  ch->chunk_type) < 0) {",
          "2898:      msg[0] = '\\0';",
          "2899:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2914:      struct mbuf *op_err;",
          "2915:      char msg[SCTP_DIAG_INFO_LEN];",
          "2920:      op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "2921:      stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_23;",
          "2922:      sctp_abort_an_association(inp, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "2917:      if (snprintf(msg, sizeof(msg), \"Chunk of length %u\", chk_length) < 0) {",
          "2918:       msg[0] = '\\0';",
          "2919:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4055:   op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "4056:   stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_24;",
          "4057:   sctp_abort_an_association(stcb->sctp_ep, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "4050:   if (snprintf(msg, sizeof(msg),",
          "4051:                \"Cum ack %8.8x greater or equal than TSN %8.8x\",",
          "4052:                cumack, send_s) < 0) {",
          "4053:    msg[0] = '\\0';",
          "4054:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4610:  hopeless_peer:",
          "4618:   op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "4619:   stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_28;",
          "4620:   sctp_abort_an_association(stcb->sctp_ep, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "4613:   if (snprintf(msg, sizeof(msg),",
          "4614:                \"Cum ack %8.8x greater or equal than TSN %8.8x\",",
          "4615:                cum_ack, send_s) < 0) {",
          "4616:    msg[0] = '\\0';",
          "4617:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5677:    op_err = sctp_generate_cause(SCTP_CAUSE_PROTOCOL_VIOLATION, msg);",
          "5678:    stcb->sctp_ep->last_abort_code = SCTP_FROM_SCTP_INDATA + SCTP_LOC_36;",
          "5679:    sctp_abort_an_association(stcb->sctp_ep, stcb, op_err, SCTP_SO_NOT_LOCKED);",
          "",
          "[Removed Lines]",
          "5672:    if (snprintf(msg, sizeof(msg),",
          "5673:                 \"New cum ack %8.8x too high, highest TSN %8.8x\",",
          "5674:                 new_cum_tsn, asoc->highest_tsn_inside_map) < 0) {",
          "5675:     msg[0] = '\\0';",
          "5676:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_input.c||usrsctplinetinet/sctp_input.c": [
          "File: usrsctplib/netinet/sctp_input.c -> usrsctplinetinet/sctp_input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_input.c 361209 2020-05-18 10:07:01Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4871:    }",
          "4872:   }",
          "4873:   if (stcb == NULL) {",
          "4877:    op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "4878:                                 msg);",
          "",
          "[Removed Lines]",
          "4874:    if (snprintf(msg, sizeof(msg), \"OOTB, %s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "4875:     msg[0] = '\\0';",
          "4876:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4917:     if (stcb != NULL) {",
          "4918:      SCTP_TCB_UNLOCK(stcb);",
          "4919:     }",
          "4923:     op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "4924:                                  msg);",
          "4925:     sctp_handle_ootb(m, iphlen, *offset, src, dst,",
          "",
          "[Removed Lines]",
          "4920:     if (snprintf(msg, sizeof(msg), \"OOTB, %s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "4921:      msg[0] ='\\0';",
          "4922:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5891: #if defined(__FreeBSD__)",
          "5892:    SCTP_PROBE5(receive, NULL, stcb, m, stcb, sh);",
          "5893: #endif",
          "5897:    op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "5898:                                 msg);",
          "5899:    sctp_handle_ootb(m, iphlen, offset, src, dst, sh, inp, op_err,",
          "",
          "[Removed Lines]",
          "5894:    if (snprintf(msg, sizeof(msg), \"OOTB, %s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "5895:     msg[0] = '\\0';",
          "5896:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5976: #if defined(__FreeBSD__)",
          "5977:    SCTP_PROBE5(receive, NULL, NULL, m, NULL, sh);",
          "5978: #endif",
          "5982:    op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "5983:                                 msg);",
          "5984:    sctp_handle_ootb(m, iphlen, offset, src, dst, sh, inp, op_err,",
          "",
          "[Removed Lines]",
          "5979:    if (snprintf(msg, sizeof(msg), \"OOTB, %s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "5980:     msg[0] = '\\0';",
          "5981:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6070:    op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "6071:                                 msg);",
          "6072:    sctp_handle_ootb(m, iphlen, offset, src, dst, sh, inp, op_err,",
          "",
          "[Removed Lines]",
          "6067:    if (snprintf(msg, sizeof(msg), \"OOTB, %s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "6068:     msg[0] = '\\0';",
          "6069:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_os_userspace.h||usrsctplinetinet/sctp_os_userspace.h": [
          "File: usrsctplib/netinet/sctp_os_userspace.h -> usrsctplinetinet/sctp_os_userspace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "222: #define bzero(buf, len) memset(buf, 0, len)",
          "223: #define bcopy(srcKey, dstKey, len) memcpy(dstKey, srcKey, len)",
          "224: #if defined(_MSC_VER) && (_MSC_VER < 1900) && !defined(__MINGW32__)",
          "226: #endif",
          "227: #define inline __inline",
          "228: #define __inline__ __inline",
          "",
          "[Removed Lines]",
          "225: #define snprintf(data, size, format, ...) _snprintf_s(data, size, _TRUNCATE, format, __VA_ARGS__)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "830:                                      M_ALIGN(m, len); \\",
          "831:                                   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_output.c||usrsctplinetinet/sctp_output.c": [
          "File: usrsctplib/netinet/sctp_output.c -> usrsctplinetinet/sctp_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_output.c 361209 2020-05-18 10:07:01Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6065:   if (op_err == NULL) {",
          "6066:    char msg[SCTP_DIAG_INFO_LEN];",
          "6071:    op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "6072:                                 msg);",
          "6073:   }",
          "",
          "[Removed Lines]",
          "6068:    if (snprintf(msg, sizeof(msg), \"%s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "6069:     msg[0] = '\\0';",
          "6070:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7306:       char msg[SCTP_DIAG_INFO_LEN];",
          "7308:      abort_anyway:",
          "7313:       op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "7314:                                    msg);",
          "7315:       atomic_add_int(&stcb->asoc.refcnt, 1);",
          "",
          "[Removed Lines]",
          "7309:       if (snprintf(msg, sizeof(msg),",
          "7310:                    \"%s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "7311:        msg[0] = '\\0';",
          "7312:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10210:    struct mbuf *op_err;",
          "10211:    char msg[SCTP_DIAG_INFO_LEN];",
          "10217:    op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "10218:                                 msg);",
          "10219:    atomic_add_int(&stcb->asoc.refcnt, 1);",
          "",
          "[Removed Lines]",
          "10213:    if (snprintf(msg, sizeof(msg), \"TSN %8.8x retransmitted %d times, giving up\",",
          "10214:                 chk->rec.data.tsn, chk->snd_count) < 0) {",
          "10215:     msg[0] = '\\0';",
          "10216:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "14815:       atomic_add_int(&stcb->asoc.refcnt, -1);",
          "14816:       free_cnt_applied = 0;",
          "14817:      }",
          "14822:      op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "14823:                                   msg);",
          "14824: #if defined(__FreeBSD__)",
          "",
          "[Removed Lines]",
          "14818:      if (snprintf(msg, sizeof(msg),",
          "14819:                   \"%s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "14820:       msg[0] = '\\0';",
          "14821:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 361224 2020-05-18 18:42:43Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "606:   atomic_add_int(&vrf->refcount, 1);",
          "607:   sctp_ifnp->ifn_mtu = SCTP_GATHER_MTU_FROM_IFN_INFO(ifn, ifn_index, addr->sa_family);",
          "608:   if (if_name != NULL) {",
          "612:   } else {",
          "616:   }",
          "617:   hash_ifn_head = &SCTP_BASE_INFO(vrf_ifn_hash)[(ifn_index & SCTP_BASE_INFO(vrf_ifn_hashmark))];",
          "618:   LIST_INIT(&sctp_ifnp->ifalist);",
          "",
          "[Removed Lines]",
          "609:    if (snprintf(sctp_ifnp->ifn_name, SCTP_IFNAMSIZ, \"%s\", if_name) < 0) {",
          "610:     sctp_ifnp->ifn_name[0] = '\\0';",
          "611:    }",
          "613:    if (snprintf(sctp_ifnp->ifn_name, SCTP_IFNAMSIZ, \"%s\", \"unknown\") < 0) {",
          "614:     sctp_ifnp->ifn_name[0] = '\\0';",
          "615:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7298:        char msg[SCTP_DIAG_INFO_LEN];",
          "7305:        op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "7306:                 msg);",
          "7307:        sctp_abort_an_association(stcb_tmp->sctp_ep,",
          "",
          "[Removed Lines]",
          "7301:        if (snprintf(msg, sizeof(msg),",
          "7302:                     \"%s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "7303:         msg[0] = '\\0';",
          "7304:        }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7394:        char msg[SCTP_DIAG_INFO_LEN];",
          "7401:        op_err = sctp_generate_cause(SCTP_BASE_SYSCTL(sctp_diag_info_code),",
          "7402:                 msg);",
          "7403:        sctp_abort_an_association(stcb_tmp->sctp_ep,",
          "",
          "[Removed Lines]",
          "7397:        if (snprintf(msg, sizeof(msg),",
          "7398:                     \"%s:%d at %s\", __FILE__, __LINE__, __func__) < 0) {",
          "7399:         msg[0] = '\\0';",
          "7400:        }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "801a64bdaabdb47e96129849578d9bac6551d372",
      "candidate_info": {
        "commit_hash": "801a64bdaabdb47e96129849578d9bac6551d372",
        "repo": "sctplab/usrsctp",
        "commit_url": "https://github.com/sctplab/usrsctp/commit/801a64bdaabdb47e96129849578d9bac6551d372",
        "files": [
          "usrsctplib/netinet/sctp_asconf.c",
          "usrsctplib/netinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_usrreq.c",
          "usrsctplib/netinet6/sctp6_usrreq.c"
        ],
        "message": "Sync FreeBSD IDs and a compile issue.",
        "before_after_code_files": [
          "usrsctplib/netinet/sctp_asconf.c||usrsctplinetinet/sctp_asconf.c",
          "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c",
          "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c",
          "usrsctplib/netinet6/sctp6_usrreq.c||usrsctplinetinet6/sctp6_usrreq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplib/netinet/sctp_pcb.c"
          ],
          "candidate": [
            "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c"
          ]
        }
      },
      "candidate_diff": {
        "usrsctplib/netinet/sctp_asconf.c||usrsctplinetinet/sctp_asconf.c": [
          "File: usrsctplib/netinet/sctp_asconf.c -> usrsctplinetinet/sctp_asconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_asconf.c 339028 2018-09-30 21:54:02Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_pcb.c||usrsctplinetinet/sctp_pcb.c": [
          "File: usrsctplib/netinet/sctp_pcb.c -> usrsctplinetinet/sctp_pcb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_pcb.c 349998 2019-07-15 14:52:52Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4261: #else",
          "4262:  if (inp->inp_vflag & INP_IPV6) {",
          "4263: #endif",
          "4265:  }",
          "4266: #endif",
          "",
          "[Removed Lines]",
          "4264:   ip6_freepcbopts(ip_inp->in6p_outputopts);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet/sctp_usrreq.c||usrsctplinetinet/sctp_usrreq.c": [
          "File: usrsctplib/netinet/sctp_usrreq.c -> usrsctplinetinet/sctp_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet/sctp_usrreq.c 350248 2019-07-23 18:07:36Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usrsctplib/netinet6/sctp6_usrreq.c||usrsctplinetinet6/sctp6_usrreq.c": [
          "File: usrsctplib/netinet6/sctp6_usrreq.c -> usrsctplinetinet6/sctp6_usrreq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef __FreeBSD__",
          "36: #include <sys/cdefs.h>",
          "38: #endif",
          "40: #include <netinet/sctp_os.h>",
          "",
          "[Removed Lines]",
          "37: __FBSDID(\"$FreeBSD: head/sys/netinet6/sctp6_usrreq.c 349986 2019-07-14 12:04:39Z tuexen $\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}