{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ce706c2cf340f91bdeaa42dda03db1a2eafe8d6f",
      "candidate_info": {
        "commit_hash": "ce706c2cf340f91bdeaa42dda03db1a2eafe8d6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ce706c2cf340f91bdeaa42dda03db1a2eafe8d6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/index6.test"
        ],
        "message": "New test case for ticket [1d958d90596593a77420e59].\n\nFossilOrigin-Name: b7bf3c9832bde26b359f4d58ebcf7788c500586d311387d022192ed65a126252",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 15bc915dd7ae25bfdfbe357c3792db3639799e4d121c6b5b24297af2d6d7129e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:   CREATE INDEX t1a ON t1(a) WHERE b=1;",
          "408:   SELECT 'two', * FROM t2 WHERE x NOT IN (SELECT a FROM t1);",
          "409: } {}",
          "411: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410: do_execsql_test index6-12.2 {",
          "411:   SELECT x FROM t2 WHERE x IN (SELECT a FROM t1) ORDER BY +x;",
          "412: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5f1915d599b1a0aba8fab35178c90031fdb362d",
      "candidate_info": {
        "commit_hash": "f5f1915d599b1a0aba8fab35178c90031fdb362d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f5f1915d599b1a0aba8fab35178c90031fdb362d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "Changes to the INSERT logic to make it simpler and faster and so that it works with generated columns and BEFORE triggers.\n\nFossilOrigin-Name: bc368cb090376d33d3844e3689c4f6bd19eed758e39b878ee67fef93b1c839ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 932a37275d7e932f8237d32c8fc6087ed8cd342fe01ef2f7a43c7237ab84c9ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2329:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "2330:       if( pSelTab==0 ) return;",
          "2331:       assert( p->aCol==0 );",
          "2333:       p->aCol = pSelTab->aCol;",
          "2334:       pSelTab->nCol = 0;",
          "2335:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2332:       p->nCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2332:       p->nCol = p->nNVCol = pSelTab->nCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2619:       assert( pTable->aCol==0 );",
          "2621:       pTable->aCol = pSelTab->aCol;",
          "2622:       pSelTab->nCol = 0;",
          "2623:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2620:       pTable->nCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2620:       pTable->nCol = pTable->nNVCol = pSelTab->nCol;",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4337:   int inReg;",
          "4339:   assert( target>0 && target<=pParse->nMem );",
          "4348:   }",
          "4349: }",
          "",
          "[Removed Lines]",
          "4340:   if( pExpr && pExpr->op==TK_REGISTER ){",
          "4341:     sqlite3VdbeAddOp2(pParse->pVdbe, OP_Copy, pExpr->iTable, target);",
          "4342:   }else{",
          "4343:     inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4344:     assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "4345:     if( inReg!=target && pParse->pVdbe ){",
          "4346:       sqlite3VdbeAddOp2(pParse->pVdbe, OP_SCopy, inReg, target);",
          "4347:     }",
          "",
          "[Added Lines]",
          "4340:   inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4341:   assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "4342:   if( inReg!=target && pParse->pVdbe ){",
          "4343:     sqlite3VdbeAddOp2(pParse->pVdbe, OP_SCopy, inReg, target);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4374:   }",
          "4375: }",
          "",
          "[Removed Lines]",
          "4389: void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){",
          "4390:   Vdbe *v = pParse->pVdbe;",
          "4391:   int iMem;",
          "4393:   assert( target>0 );",
          "4394:   assert( pExpr->op!=TK_REGISTER );",
          "4395:   sqlite3ExprCode(pParse, pExpr, target);",
          "4396:   iMem = ++pParse->nMem;",
          "4397:   sqlite3VdbeAddOp2(v, OP_Copy, target, iMem);",
          "4398:   exprToRegister(pExpr, iMem);",
          "4399: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "938:     addrInsTop = addrCont = sqlite3VdbeAddOp1(v, OP_Yield, dest.iSDParm);",
          "939:     VdbeCoverage(v);",
          "940:   }",
          "944:   endOfLoop = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948:     if( ipkColumn>=0 ){",
          "952:       sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "953:     }",
          "954:   }",
          "963:   nHidden = 0;",
          "964:   iRegStore = regData;  assert( regData==regRowid+1 );",
          "965:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "966:     int k;",
          "967:     u32 colFlags;",
          "968:     assert( i>=nHidden );",
          "969:     if( i==pTab->iPKey ){",
          "974:       sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "975:       continue;",
          "976:     }",
          "977:     if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "978:       nHidden++;",
          "979:       if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "983:         iRegStore--;",
          "984:         continue;",
          "985:       }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "990:         if( tmask & TRIGGER_BEFORE ){",
          "991:           sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "992:         }",
          "993:         continue;",
          "994:       }else if( pColumn==0 ){",
          "997:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "998:         continue;",
          "999:       }",
          "1000:     }",
          "1001:     if( pColumn ){",
          "1002:       for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1003:       if( j>=pColumn->nId ){",
          "1006:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1007:         continue;",
          "1008:       }",
          "1009:       k = j;",
          "1010:     }else if( nColumn==0 ){",
          "1012:       sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1013:       continue;",
          "1014:     }else{",
          "1015:       k = i - nHidden;",
          "1016:     }",
          "1018:     if( useTempTable ){",
          "1019:       sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1020:     }else if( pSelect ){",
          "1021:       if( regFromSelect!=regData ){",
          "1022:         sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1023:       }",
          "1024:     }else{",
          "1025:       sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "1026:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "974:     assert( !IsVirtual(pTab) );",
          "994:     }",
          "",
          "[Removed Lines]",
          "978:     for(i=j=0; i<pTab->nCol; i++){",
          "979:       if( pColumn ){",
          "980:         for(j=0; j<pColumn->nId; j++){",
          "981:           if( pColumn->a[j].idx==i ) break;",
          "982:         }",
          "983:       }",
          "984:       if( (!useTempTable && !pList) || (pColumn && j>=pColumn->nId)",
          "985:             || (pColumn==0 && IsOrdinaryHiddenColumn(&pTab->aCol[i])) ){",
          "986:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regCols+i+1);",
          "987:       }else if( useTempTable ){",
          "988:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, j, regCols+i+1);",
          "989:       }else{",
          "991:         sqlite3ExprCodeAndCache(pParse, pList->a[j].pExpr, regCols+i+1);",
          "992:       }",
          "993:       if( pColumn==0 && !IsOrdinaryHiddenColumn(&pTab->aCol[i]) ) j++;",
          "",
          "[Added Lines]",
          "1065:     assert( pTab->nNVCol>0 );",
          "1066:     sqlite3VdbeAddOp3(v, OP_Copy, regRowid+1, regCols+1, pTab->nNVCol-1);",
          "1068: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1073:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1074:       sqlite3ComputeGeneratedColumns(pParse, regCols+1, pTab);",
          "1076: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1009:     sqlite3ReleaseTempRange(pParse, regCols, pTab->nCol+1);",
          "1010:   }",
          "1015:   if( !isView ){",
          "1016:     if( IsVirtual(pTab) ){",
          "1018:       sqlite3VdbeAddOp2(v, OP_Null, 0, regIns);",
          "1019:     }",
          "1020:     if( ipkColumn>=0 ){",
          "1021:       if( useTempTable ){",
          "1022:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, ipkColumn, regRowid);",
          "1023:       }else if( pSelect ){",
          "1025:       }else{",
          "1026:         Expr *pIpk = pList->a[ipkColumn].pExpr;",
          "1027:         if( pIpk->op==TK_NULL && !IsVirtual(pTab) ){",
          "",
          "[Removed Lines]",
          "1024:         sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1054:     }",
          "1055:     autoIncStep(pParse, regAutoinc, regRowid);",
          "1117: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1120:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1121:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "1122:     }",
          "",
          "[Removed Lines]",
          "1060:     nHidden = 0;",
          "1061:     iRegStore = regRowid+1;",
          "1062:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1063:       int k;",
          "1064:       u32 colFlags;",
          "1065:       assert( i>=nHidden );",
          "1066:       if( i==pTab->iPKey ){",
          "1072:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1073:         continue;",
          "1074:       }",
          "1075:       if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "1076:         nHidden++;",
          "1077:         if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "1079:           iRegStore--;",
          "1080:           continue;",
          "1081:         }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "1083:           continue;",
          "1084:         }else if( pColumn==0 ){",
          "1086:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1087:           continue;",
          "1088:         }",
          "1089:       }",
          "1090:       if( pColumn ){",
          "1091:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1092:         if( j>=pColumn->nId ){",
          "1095:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1096:           continue;",
          "1097:         }",
          "1098:         k = j;",
          "1099:       }else if( nColumn==0 ){",
          "1100:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1101:         continue;",
          "1102:       }else{",
          "1103:         k = i - nHidden;",
          "1104:       }",
          "1106:       if( useTempTable ){",
          "1107:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1108:       }else if( pSelect ){",
          "1109:         if( regFromSelect!=regData ){",
          "1110:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1111:         }",
          "1112:       }else{",
          "1113:         sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "1114:       }",
          "1115:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4100: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "4101: int sqlite3ExprCodeTemp(Parse*, Expr*, int*);",
          "4102: int sqlite3ExprCodeTarget(Parse*, Expr*, int);",
          "4104: int sqlite3ExprCodeExprList(Parse*, ExprList*, int, int, u8);",
          "",
          "[Removed Lines]",
          "4103: void sqlite3ExprCodeAndCache(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
      "candidate_info": {
        "commit_hash": "7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix a typo in the documentation for sqlite3_total_changes().\n\nFossilOrigin-Name: 8474c1560e0c3a28c6a7ed360202a8e7caae3c8259f60bbfa6d2948ab7876f51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84162af521f29df8a186163fbdef9856e1aa8aba78e74d7df0ba2cc83bb86240",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
      "candidate_info": {
        "commit_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/intreal.test"
        ],
        "message": "Fix the OP_Affinity operator so that when applying REAL affinity, it only sets MEM_IntReal if the integer value will fit in 6 bytes or less. Fix for ticket [ba2f4585cf495231]\n\nFossilOrigin-Name: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cea8a892f76bddc63b921ffc11ea8dce8f8cf649a2c77aa908c7c5c91eed7f4c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2817:     assert( memIsValid(pIn1) );",
          "2818:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2819:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2824:     }",
          "2825:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2826:     zAffinity++;",
          "",
          "[Removed Lines]",
          "2822:       pIn1->flags |= MEM_IntReal;",
          "2823:       pIn1->flags &= ~MEM_Int;",
          "",
          "[Added Lines]",
          "2824:       testcase( pIn1->u.i==140737488355328LL );",
          "2825:       testcase( pIn1->u.i==140737488355327LL );",
          "2826:       testcase( pIn1->u.i==-140737488355328LL );",
          "2827:       testcase( pIn1->u.i==-140737488355329LL );",
          "2828:       if( pIn1->u.i<=140737488355327LL && pIn1->u.i>=-140737488355328LL ){",
          "2829:         pIn1->flags |= MEM_IntReal;",
          "2830:         pIn1->flags &= ~MEM_Int;",
          "2831:       }else{",
          "2832:         pIn1->u.r = (double)pIn1->u.i;",
          "2833:         pIn1->flags |= MEM_Real;",
          "2834:         pIn1->flags &= ~MEM_Int;",
          "2835:       }",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   );",
          "83: } [list a $D]",
          "86: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: # 2019-07-29 ticket ba2f4585cf495231",
          "86: #",
          "87: db close",
          "88: sqlite3 db :memory:",
          "89: do_execsql_test 3.0 {",
          "90:   CREATE TABLE t0 (c0 REAL, c1);",
          "91:   CREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);",
          "92:   INSERT INTO t0(c0) VALUES (4750228396194493326), (0);",
          "93:   UPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';",
          "94:   SELECT * FROM t0 ORDER BY t0.c1;",
          "95:   PRAGMA integrity_check;",
          "96: } {a {} ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7c92e82d27b88b1fa56ff72796ed42e89f614c9",
      "candidate_info": {
        "commit_hash": "f7c92e82d27b88b1fa56ff72796ed42e89f614c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f7c92e82d27b88b1fa56ff72796ed42e89f614c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/distinct2.test"
        ],
        "message": "Avoid assuming that \"column IS ?\", where column is declared UNIQUE, matches only a single row (as \"?\" might be NULL). Fix for [b8689402].\n\nFossilOrigin-Name: d02490a2f0cae047087130b4ad8f55f265845c2ffb3bde3b7d507edb54acea6d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c01e0170e113ad052b6c3980beb4be9f1dc03fb3cf34132b90e8b82b23f654e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3765:           u16 eOp = pLoop->aLTerm[j]->eOperator;",
          "3775:           if( (eOp & eqOpMask)!=0 ){",
          "3777:               testcase( isOrderDistinct );",
          "3778:               isOrderDistinct = 0;",
          "3779:             }",
          "",
          "[Removed Lines]",
          "3776:             if( eOp & WO_ISNULL ){",
          "",
          "[Added Lines]",
          "3780:             if( eOp & (WO_ISNULL|WO_IS) ){",
          "3781:               testcase( eOp & WO_ISNULL );",
          "3782:               testcase( eOp & WO_IS );",
          "",
          "---------------"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   two 1 1",
          "275: }",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #-------------------------------------------------------------------------",
          "278: #",
          "279: reset_db",
          "280: do_execsql_test 3000 {",
          "281:   CREATE TABLE t0 (c0, c1 NOT NULL DEFAULT 1, c2, PRIMARY KEY (c0, c1));",
          "282:   INSERT INTO t0(c2) VALUES (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);",
          "283:   INSERT INTO t0(c2) VALUES('a');",
          "284: }",
          "286: do_execsql_test 3010 {",
          "287:   SELECT DISTINCT * FROM t0 WHERE NULL IS t0.c0;",
          "288: } {",
          "289:   {} 1 {}",
          "290:   {} 1 a",
          "291: }",
          "293: do_execsql_test 3020 {",
          "294:   ANALYZE;",
          "295: }",
          "297: do_execsql_test 3030 {",
          "298:   SELECT DISTINCT * FROM t0 WHERE NULL IS c0;",
          "299: } {",
          "300:   {} 1 {}",
          "301:   {} 1 a",
          "302: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}