{
  "cve_id": "CVE-2012-3501",
  "cve_desc": "The squidclamav_check_preview_handler function in squidclamav.c in SquidClamav 5.x before 5.8 and 6.x before 6.7 passes an unescaped URL to a system command call, which allows remote attackers to cause a denial of service (daemon crash) via a URL with certain characters, as demonstrated using %0D or %0A.",
  "repo": "darold/squidclamav",
  "patch_hash": "80f74451f628264d1d9a1f1c0bbcebc932ba5e00",
  "patch_info": {
    "commit_hash": "80f74451f628264d1d9a1f1c0bbcebc932ba5e00",
    "repo": "darold/squidclamav",
    "commit_url": "https://github.com/darold/squidclamav/commit/80f74451f628264d1d9a1f1c0bbcebc932ba5e00",
    "files": [
      "src/squidclamav.c"
    ],
    "message": "Add a workaround for a squidGuard bug that unescape the URL and send it back unescaped. This could conduct in wrong result and ssquidclamav crash especially with URL containing the %0D or %0A character. John Xue",
    "before_after_code_files": [
      "src/squidclamav.c||src/squidclamav.c"
    ]
  },
  "patch_diff": {
    "src/squidclamav.c||src/squidclamav.c": [
      "File: src/squidclamav.c -> src/squidclamav.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "133: int create_pipe(char *command);",
      "134: int dconnect (void);",
      "135: int connectINET(char *serverHost, uint16_t serverPort);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "136: char * replace(const char *s, const char *old, const char *new);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "367:      if (usepipe == 1) {",
      "368:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Sending request to chained program: %s\\n\", squidguard);",
      "369:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Request: %s %s %s %s\\n\", httpinf.url,clientip,username,httpinf.method);",
      "371:  fflush(sgfpw);",
      "373:  chain_ret = (char *)malloc(sizeof(char)*MAX_URL_SIZE);",
      "374:  if (chain_ret != NULL) {",
      "",
      "[Removed Lines]",
      "370:  fprintf(sgfpw,\"%s %s %s %s\\n\",httpinf.url,clientip,username,httpinf.method);",
      "",
      "[Added Lines]",
      "368:  char *rbuff = NULL;",
      "372:  rbuff = replace(httpinf.url, \"%\", \"%25\");",
      "373:  fprintf(sgfpw,\"%s %s %s %s\\n\",rbuff,clientip,username,httpinf.method);",
      "375:  xfree(rbuff);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1628:         return asockd;",
      "1629: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1640: char *",
      "1641: replace(const char *s, const char *old, const char *new)",
      "1642: {",
      "1643:  char *ret;",
      "1644:  int i, count = 0;",
      "1645:  size_t newlen = strlen(new);",
      "1646:  size_t oldlen = strlen(old);",
      "1648:  for (i = 0; s[i] != '\\0'; i++) {",
      "1649:   if (strstr(&s[i], old) == &s[i]) {",
      "1650:    count++;",
      "1651:    i += oldlen - 1;",
      "1652:   }",
      "1653:  }",
      "1654:  ret = malloc(i + 1 + count * (newlen - oldlen));",
      "1655:  if (ret != NULL) {",
      "1656:   i = 0;",
      "1657:   while (*s) {",
      "1658:    if (strstr(s, old) == s) {",
      "1659:     strcpy(&ret[i], new);",
      "1660:     i += newlen;",
      "1661:     s += oldlen;",
      "1662:    } else {",
      "1663:     ret[i++] = *s++;",
      "1664:    }",
      "1665:   }",
      "1666:   ret[i] = '\\0';",
      "1667:  }",
      "1669:  return ret;",
      "1670: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f6d59748cda5fe54af39e3cf868f01a4f8ef9a9c",
      "candidate_info": {
        "commit_hash": "f6d59748cda5fe54af39e3cf868f01a4f8ef9a9c",
        "repo": "darold/squidclamav",
        "commit_url": "https://github.com/darold/squidclamav/commit/f6d59748cda5fe54af39e3cf868f01a4f8ef9a9c",
        "files": [
          "acinclude.m4",
          "autom4te.cache/output.0",
          "autom4te.cache/output.1",
          "autom4te.cache/requests",
          "autom4te.cache/traces.0",
          "autom4te.cache/traces.1",
          "cgi-bin/clwarn.cgi",
          "cgi-bin/clwarn.cgi.de_DE",
          "cgi-bin/clwarn.cgi.en_EN",
          "cgi-bin/clwarn.cgi.fr_FR",
          "cgi-bin/clwarn.cgi.pt_BR",
          "cgi-bin/clwarn.cgi.ru_RU",
          "config.h",
          "config/config.guess",
          "configure",
          "configure.in",
          "libtool",
          "src/squidclamav.c"
        ],
        "message": "Replace clamd STREAM by zINSTREAM protocol as clamav have removed the obsolete STREAM protocol in release 0.97.4.",
        "before_after_code_files": [
          "acinclude.m4||acinclude.m4",
          "autom4te.cache/output.0||autom4te.cache/output.0",
          "autom4te.cache/output.1||autom4te.cache/output.1",
          "autom4te.cache/traces.0||autom4te.cache/traces.0",
          "autom4te.cache/traces.1||autom4te.cache/traces.1",
          "cgi-bin/clwarn.cgi||cgi-bin/clwarn.cgi",
          "cgi-bin/clwarn.cgi.de_DE||cgi-bin/clwarn.cgi.de_DE",
          "cgi-bin/clwarn.cgi.en_EN||cgi-bin/clwarn.cgi.en_EN",
          "cgi-bin/clwarn.cgi.fr_FR||cgi-bin/clwarn.cgi.fr_FR",
          "cgi-bin/clwarn.cgi.pt_BR||cgi-bin/clwarn.cgi.pt_BR",
          "cgi-bin/clwarn.cgi.ru_RU||cgi-bin/clwarn.cgi.ru_RU",
          "config.h||config.h",
          "config/config.guess||config/config.guess",
          "configure.in||configure.in",
          "src/squidclamav.c||src/squidclamav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/squidclamav.c||src/squidclamav.c"
          ],
          "candidate": [
            "src/squidclamav.c||src/squidclamav.c"
          ]
        }
      },
      "candidate_diff": {
        "acinclude.m4||acinclude.m4": [
          "File: acinclude.m4 -> acinclude.m4"
        ],
        "autom4te.cache/output.0||autom4te.cache/output.0": [
          "File: autom4te.cache/output.0 -> autom4te.cache/output.0",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "autom4te.cache/output.1||autom4te.cache/output.1": [
          "File: autom4te.cache/output.1 -> autom4te.cache/output.1",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "autom4te.cache/traces.0||autom4te.cache/traces.0": [
          "File: autom4te.cache/traces.0 -> autom4te.cache/traces.0",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "autom4te.cache/traces.1||autom4te.cache/traces.1": [
          "File: autom4te.cache/traces.1 -> autom4te.cache/traces.1",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi||cgi-bin/clwarn.cgi": [
          "File: cgi-bin/clwarn.cgi -> cgi-bin/clwarn.cgi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use CGI;",
          "8: my $cgi = new CGI;",
          "",
          "[Removed Lines]",
          "6: my $VERSION = '6.9';",
          "",
          "[Added Lines]",
          "6: my $VERSION = '6.10';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.de_DE||cgi-bin/clwarn.cgi.de_DE": [
          "File: cgi-bin/clwarn.cgi.de_DE -> cgi-bin/clwarn.cgi.de_DE",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use CGI;",
          "8: my $cgi = new CGI;",
          "",
          "[Removed Lines]",
          "6: my $VERSION = '6.9';",
          "",
          "[Added Lines]",
          "6: my $VERSION = '6.10';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.en_EN||cgi-bin/clwarn.cgi.en_EN": [
          "File: cgi-bin/clwarn.cgi.en_EN -> cgi-bin/clwarn.cgi.en_EN",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use CGI;",
          "8: my $cgi = new CGI;",
          "",
          "[Removed Lines]",
          "6: my $VERSION = '6.9';",
          "",
          "[Added Lines]",
          "6: my $VERSION = '6.10';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.fr_FR||cgi-bin/clwarn.cgi.fr_FR": [
          "File: cgi-bin/clwarn.cgi.fr_FR -> cgi-bin/clwarn.cgi.fr_FR",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use CGI;",
          "8: my $cgi = new CGI;",
          "",
          "[Removed Lines]",
          "6: my $VERSION = '6.9';",
          "",
          "[Added Lines]",
          "6: my $VERSION = '6.10';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.pt_BR||cgi-bin/clwarn.cgi.pt_BR": [
          "File: cgi-bin/clwarn.cgi.pt_BR -> cgi-bin/clwarn.cgi.pt_BR",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use CGI;",
          "8: my $cgi = new CGI;",
          "",
          "[Removed Lines]",
          "6: my $VERSION = '6.9';",
          "",
          "[Added Lines]",
          "6: my $VERSION = '6.10';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.ru_RU||cgi-bin/clwarn.cgi.ru_RU": [
          "File: cgi-bin/clwarn.cgi.ru_RU -> cgi-bin/clwarn.cgi.ru_RU",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use CGI;",
          "8: my $cgi = new CGI;",
          "",
          "[Removed Lines]",
          "6: my $VERSION = '6.9';",
          "",
          "[Added Lines]",
          "6: my $VERSION = '6.10';",
          "",
          "---------------"
        ],
        "config.h||config.h": [
          "File: config.h -> config.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: #define PACKAGE_NAME \"SquidClamav\"",
          "152: #define PACKAGE_TARNAME \"squidclamav\"",
          "",
          "[Removed Lines]",
          "149: #define PACKAGE_STRING \"SquidClamav 6.9\"",
          "",
          "[Added Lines]",
          "149: #define PACKAGE_STRING \"SquidClamav 6.10\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: #define PACKAGE_URL \"\"",
          "161: #define STDC_HEADERS 1",
          "",
          "[Removed Lines]",
          "158: #define PACKAGE_VERSION \"6.9\"",
          "164: #define VERSION \"6.9\"",
          "",
          "[Added Lines]",
          "158: #define PACKAGE_VERSION \"6.10\"",
          "164: #define VERSION \"6.10\"",
          "",
          "---------------"
        ],
        "config/config.guess||config/config.guess": [
          "File: config/config.guess -> config/config.guess",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   UNAME_MACHINE=\"alphaev68\" ;;",
          "257:      \"EV6.8CX (21264D)\")",
          "258:   UNAME_MACHINE=\"alphaev68\" ;;",
          "260:   UNAME_MACHINE=\"alphaev69\" ;;",
          "261:      \"EV7 (21364)\")",
          "262:   UNAME_MACHINE=\"alphaev7\" ;;",
          "",
          "[Removed Lines]",
          "259:      \"EV6.9A (21264/EV69A)\")",
          "",
          "[Added Lines]",
          "259:      \"EV6.10A (21264/EV69A)\")",
          "",
          "---------------"
        ],
        "configure.in||configure.in": [
          "File: configure.in -> configure.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #                                               -*- Autoconf -*-",
          "2: # Process this file with autoconf to produce a configure script.",
          "5: AC_CONFIG_AUX_DIR([config])",
          "6: AC_CONFIG_SRCDIR([src/squidclamav.c])",
          "7: AM_CONFIG_HEADER(config.h)",
          "9: AC_CONFIG_FILES([Makefile])",
          "10: AC_PREFIX_DEFAULT(/usr/local)",
          "",
          "[Removed Lines]",
          "4: AC_INIT([SquidClamav], [6.9], [http://squidclamav.darold.net/], [squidclamav])",
          "8: AM_INIT_AUTOMAKE(squidclamav, 6.9)",
          "",
          "[Added Lines]",
          "4: AC_INIT([SquidClamav], [6.10], [http://squidclamav.darold.net/], [squidclamav])",
          "8: AM_INIT_AUTOMAKE(squidclamav, 6.10)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: AC_PROG_CC",
          "14: AM_PROG_CC_C_O",
          "15: AC_DISABLE_STATIC",
          "16: AC_LIBTOOL_DLOPEN",
          "17: AC_LIBTOOL_WIN32_DLL",
          "18: AC_PROG_LIBTOOL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: AC_DISABLE_SHARED",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "20: AC_LANG_C",
          "21: AC_PROG_CXX",
          "22: AC_CANONICAL_HOST",
          "24: AC_PROG_LIBTOOL",
          "25: AC_LTDL_DLLIB",
          "26: AC_PROG_RANLIB",
          "",
          "[Removed Lines]",
          "23: AC_DISABLE_SHARED",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/squidclamav.c||src/squidclamav.c": [
          "File: src/squidclamav.c -> src/squidclamav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <errno.h>",
          "41: #include <signal.h>",
          "44: typedef struct av_req_data{",
          "45:      ci_simple_file_t *body;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #define LBUFSIZ  32768",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: int squidclamav_init_service(ci_service_xdata_t * srv_xdata,",
          "144:                            struct ci_server_conf *server_conf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: int sendln(int asockd, const char *line, unsigned int len)",
          "146: {",
          "147:     int bytesent = 0;",
          "148:     while (len) {",
          "149:         int sent = send(asockd, line, len, 0);",
          "150:         if (sent <= 0) {",
          "151:             if(sent && errno == EINTR) continue;",
          "152:      ci_debug_printf(0, \"ERROR: Can't send to clamd: %s\\n\", strerror(errno));",
          "153:             return sent;",
          "154:         }",
          "155:         line += sent;",
          "156:         len -= sent;",
          "157:         bytesent += sent;",
          "158:     }",
          "159:     return bytesent;",
          "160: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:      if (safebrowsing == 1) {",
          "414:  if (squidclamav_safebrowsing(req, httpinf.url, clientip, username) != 0) {",
          "415:          return CI_MOD_CONTINUE;",
          "416:   }",
          "417:      }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:   ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Malware found stopping here.\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420:      ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Length: %d\\n\", (int)content_length);",
          "422:      if ((content_length > 0) && (maxsize > 0) && (content_length >= maxsize)) {",
          "424:  return CI_MOD_ALLOW204;",
          "425:      }",
          "",
          "[Removed Lines]",
          "423:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: No antivir check, content-length upper than maxsize (%d > %d)\\n\", content_length, (int)maxsize);",
          "",
          "[Added Lines]",
          "443:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: No antivir check, content-length upper than maxsize (%d > %d)\\n\", (int)content_length, (int)maxsize);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "496:  data->no_more_scan = 1;",
          "497:  ci_req_unlock_data(req);",
          "498:  ci_simple_file_unlock_all(data->body);",
          "500:     } else if (SEND_PERCENT_BYTES && (START_SEND_AFTER < data->body->bytes_in)) {",
          "501:  ci_req_unlock_data(req);",
          "502:  allow_transfer = (SEND_PERCENT_BYTES * (data->body->endpos + len)) / 100;",
          "",
          "[Removed Lines]",
          "499:  ci_debug_printf(1, \"DEBUG squidclamav_read_from_net: No more antivir check, downloaded stream is upper than maxsize (%d>%d)\\n\", data->body->bytes_in, (int)maxsize);",
          "",
          "[Added Lines]",
          "519:  ci_debug_printf(1, \"DEBUG squidclamav_read_from_net: No more antivir check, downloaded stream is upper than maxsize (%d>%d)\\n\", (int)data->body->bytes_in, (int)maxsize);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "566:      ssize_t ret;",
          "567:      int nbread = 0;",
          "574:      int sockd;",
          "576:      unsigned long total_read;",
          "578:      ci_debug_printf(2, \"DEBUG squidclamav_end_of_data_handler: ending request data handler.\\n\");",
          "",
          "[Removed Lines]",
          "568:      int loopw = 60;",
          "569:      uint16_t port;",
          "570:      struct sockaddr_in server;",
          "571:      struct sockaddr_in peer;",
          "572:      size_t peer_size;",
          "573:      char *pt = NULL;",
          "575:      int wsockd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "598:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't connect to Clamd daemon.\\n\");",
          "599:  goto done_allow204;",
          "600:      }",
          "604:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write to Clamd socket.\\n\");",
          "605:  close(sockd);",
          "606:  goto done_allow204;",
          "607:      }",
          "",
          "[Removed Lines]",
          "601:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Sending STREAM command to clamd.\\n\");",
          "603:      if (write(sockd, \"STREAM\", 6) <= 0) {",
          "609:      while (loopw > 0) {",
          "610:  memset (cbuff, 0, sizeof(cbuff));",
          "611:  ret = read (sockd, cbuff, MAX_URL_SIZE);",
          "612:  if ((ret > -1) && (pt = strstr (cbuff, \"PORT\"))) {",
          "613:     pt += 5;",
          "614:     sscanf(pt, \"%d\", (int *) &port);",
          "615:     break;",
          "616:  }",
          "617:  loopw--;",
          "618:      }",
          "619:      if (loopw == 0) {",
          "620:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Clamd daemon not ready for stream scanning.\\n\");",
          "621:  close(sockd);",
          "622:  goto done_allow204;",
          "623:      }",
          "625:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Received port %d from clamd.\\n\", port);",
          "628:      if ((wsockd = socket (AF_INET, SOCK_STREAM, 0)) < 0) {",
          "629:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't create the Clamd socket.\\n\");",
          "630:  close(sockd);",
          "631:  goto done_allow204;",
          "632:      }",
          "634:      server.sin_family = AF_INET;",
          "635:      server.sin_port = htons (port);",
          "636:      peer_size = sizeof (peer);",
          "638:      if (getpeername(sockd, (struct sockaddr *) &peer, (socklen_t *) &peer_size) < 0) {",
          "639:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't get socket peer name.\\n\");",
          "640:  close(sockd);",
          "641:  goto done_allow204;",
          "642:      }",
          "643:      switch (peer.sin_family) {",
          "644:  case AF_UNIX:",
          "645:  server.sin_addr.s_addr = inet_addr (\"127.0.0.1\");",
          "646:  break;",
          "647:  case AF_INET:",
          "648:  server.sin_addr.s_addr = peer.sin_addr.s_addr;",
          "649:  break;",
          "650:  default:",
          "651:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Unexpected socket type: %d.\\n\", peer.sin_family);",
          "652:  close(sockd);",
          "653:  goto done_allow204;",
          "654:      }",
          "656:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Trying to connect to clamd [port: %d].\\n\", port);",
          "658:      if (connect (wsockd, (struct sockaddr *) &server, sizeof (struct sockaddr_in)) < 0) {",
          "659:  close(wsockd);",
          "660:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't connect to clamd [port: %d].\\n\", port);",
          "661:  goto done_allow204;",
          "662:      }",
          "663:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Ok connected to clamd on port: %d.\\n\", port);",
          "",
          "[Added Lines]",
          "614:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Sending zINSTREAM command to clamd.\\n\");",
          "616:      if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "622:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Ok connected to clamd.\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "668:      lseek(body->fd, 0, SEEK_SET);",
          "669:      memset(cbuff, 0, sizeof(cbuff));",
          "670:      total_read = 0;",
          "672:      total_read += nbread;",
          "674:      if ( (ret <= 0) && (total_read > 0) ) {",
          "675:   ci_debug_printf(3, \"ERROR squidclamav_end_of_data_handler: Can't write to clamd socket (maybe we reach clamd StreamMaxLength, total read: %ld).\\n\", total_read);",
          "676:   break;",
          "",
          "[Removed Lines]",
          "671:      while (data->virus == 0 && (nbread = read(body->fd, cbuff, MAX_URL_SIZE)) > 0) {",
          "673:      ret = write(wsockd, cbuff, nbread);",
          "",
          "[Added Lines]",
          "630:      while (data->virus == 0 && (nbread = read(body->fd, cbuff, BUFSIZ)) > 0) {",
          "631:      uint32_t buf[LBUFSIZ/sizeof(uint32_t)];",
          "632:      buf[0] = htonl(nbread);",
          "633:      memcpy(&buf[1],(const char*) cbuff, nbread);",
          "635:      ret = sendln (sockd,(const char *) buf, nbread+sizeof(uint32_t));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "680:      } else {",
          "681:   ci_debug_printf(3, \"DEBUG squidclamav_end_of_data_handler: Write %d bytes on %d to socket\\n\", (int)ret, nbread);",
          "682:      }",
          "684:      memset(cbuff, 0, sizeof(cbuff));",
          "686:      }",
          "714:      }",
          "716:      if (sockd > -1) {",
          "717:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Closing Clamd connection.\\n\");",
          "",
          "[Removed Lines]",
          "689:      if (wsockd > -1) {",
          "690:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: End Clamd connection, attempting to read result.\\n\");",
          "691:  close(wsockd);",
          "692:      }",
          "694:      memset (clbuf, 0, sizeof(clbuf));",
          "695:      while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "696:  ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: received from Clamd: %s\", clbuf);",
          "697:  if (strstr (clbuf, \"FOUND\\n\")) {",
          "698:     data->virus = 1;",
          "699:     if (!ci_req_sent_data(req)) {",
          "700:   chomp(clbuf);",
          "701:   char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "702:   snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&virus=%s\", redirect_url, data->url, data->clientip, data->user, clbuf);",
          "703:   if (logredir == 0)",
          "704:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "705:   if (logredir)",
          "706:       ci_debug_printf(0, \"INFO squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "707:   generate_redirect_page(urlredir, req, data);",
          "708:   xfree(urlredir);",
          "709:     }",
          "710:     ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus found, ending download.\\n\");",
          "711:     break;",
          "712:  }",
          "713:  memset(clbuf, 0, sizeof(clbuf));",
          "",
          "[Added Lines]",
          "648:      uint32_t buf[LBUFSIZ/sizeof(uint32_t)];",
          "650:      ret = sendln (sockd,(const char *) buf, 4);",
          "651:      if (ret <= 0)",
          "652:      {",
          "653:        ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write zINSTREAM ending chars to clamd socket.\\n\");",
          "654:      } else {",
          "657:       memset (clbuf, 0, sizeof(clbuf));",
          "658:       while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "659:   ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: received from Clamd: %s\\n\", clbuf);",
          "660:   if (strstr (clbuf, \"FOUND\")) {",
          "661:      data->virus = 1;",
          "662:      if (!ci_req_sent_data(req)) {",
          "663:    chomp(clbuf);",
          "664:    char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "665:    snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&virus=%s\", redirect_url, data->url, data->clientip, data->user, clbuf);",
          "666:    if (logredir == 0)",
          "667:       ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "668:    if (logredir)",
          "669:        ci_debug_printf(0, \"INFO squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "670:    generate_redirect_page(urlredir, req, data);",
          "671:    xfree(urlredir);",
          "672:      }",
          "673:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus found, ending download.\\n\");",
          "674:      break;",
          "675:   }",
          "676:   memset(clbuf, 0, sizeof(clbuf));",
          "677:       }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1698:      ssize_t ret;",
          "1699:      int nbread = 0;",
          "1706:      int sockd;",
          "1709:      ci_debug_printf(2, \"DEBUG squidclamav_safebrowsing: looking for Clamav SafeBrowsing check.\\n\");",
          "",
          "[Removed Lines]",
          "1700:      int loopw = 60;",
          "1701:      uint16_t port;",
          "1702:      struct sockaddr_in server;",
          "1703:      struct sockaddr_in peer;",
          "1704:      size_t peer_size;",
          "1705:      char *pt = NULL;",
          "1707:      int wsockd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1713:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't connect to Clamd daemon.\\n\");",
          "1714:  return 0;",
          "1715:      }",
          "1719:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to Clamd socket.\\n\");",
          "1720:  close(sockd);",
          "1721:  return 0;",
          "1722:      }",
          "1780:      ci_debug_printf(1, \"DEBUG: squidclamav_safebrowsing: Scanning url for Malware now\\n\");",
          "1781:      strcpy(cbuff, \"From test\\n\\n<a href=\");",
          "1782:      strcat(cbuff, url);",
          "1783:      strcat(cbuff, \">squidclamav-safebrowsing-test</a>\\n\");",
          "1785:      if ( ret <= 0 ) {",
          "1786:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to clamd socket.\\n\");",
          "1787:      } else {",
          "1789:      }",
          "1817:      if (sockd > -1) {",
          "1818:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Closing Clamd connection.\\n\");",
          "1819:  close(sockd);",
          "",
          "[Removed Lines]",
          "1716:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Sending STREAM command to clamd.\\n\");",
          "1718:      if (write(sockd, \"STREAM\", 6) <= 0) {",
          "1724:      while (loopw > 0) {",
          "1725:  memset (cbuff, 0, sizeof(cbuff));",
          "1726:  ret = read (sockd, cbuff, MAX_URL_SIZE);",
          "1727:  if ((ret > -1) && (pt = strstr (cbuff, \"PORT\"))) {",
          "1728:     pt += 5;",
          "1729:     sscanf(pt, \"%d\", (int *) &port);",
          "1730:     break;",
          "1731:  }",
          "1732:  loopw--;",
          "1733:      }",
          "1734:      if (loopw == 0) {",
          "1735:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Clamd daemon not ready for stream scanning.\\n\");",
          "1736:  close(sockd);",
          "1737:  return 0;",
          "1738:      }",
          "1740:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Received port %d from clamd.\\n\", port);",
          "1743:      if ((wsockd = socket (AF_INET, SOCK_STREAM, 0)) < 0) {",
          "1744:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't create the Clamd socket.\\n\");",
          "1745:  close(sockd);",
          "1746:  return 0;",
          "1747:      }",
          "1749:      server.sin_family = AF_INET;",
          "1750:      server.sin_port = htons (port);",
          "1751:      peer_size = sizeof (peer);",
          "1753:      if (getpeername(sockd, (struct sockaddr *) &peer, (socklen_t *) &peer_size) < 0) {",
          "1754:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't get socket peer name.\\n\");",
          "1755:  close(sockd);",
          "1756:  return 0;",
          "1757:      }",
          "1758:      switch (peer.sin_family) {",
          "1759:  case AF_UNIX:",
          "1760:  server.sin_addr.s_addr = inet_addr (\"127.0.0.1\");",
          "1761:  break;",
          "1762:  case AF_INET:",
          "1763:  server.sin_addr.s_addr = peer.sin_addr.s_addr;",
          "1764:  break;",
          "1765:  default:",
          "1766:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Unexpected socket type: %d.\\n\", peer.sin_family);",
          "1767:  close(sockd);",
          "1768:  return 0;",
          "1769:      }",
          "1771:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Trying to connect to clamd [port: %d].\\n\", port);",
          "1773:      if (connect (wsockd, (struct sockaddr *) &server, sizeof (struct sockaddr_in)) < 0) {",
          "1774:  close(wsockd);",
          "1775:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't connect to clamd [port: %d].\\n\", port);",
          "1776:  return 0;",
          "1777:      }",
          "1778:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Ok connected to clamd on port: %d.\\n\", port);",
          "1784:      ret = write(wsockd, cbuff, strlen(cbuff) + 1);",
          "1788:  ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: Write to socket\\n\");",
          "1790:      memset(cbuff, 0, sizeof(cbuff));",
          "1793:      if (wsockd > -1) {",
          "1794:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: End Clamd connection, attempting to read result.\\n\");",
          "1795:  close(wsockd);",
          "1796:      }",
          "1797:      memset (clbuf, 0, sizeof(clbuf));",
          "1798:      while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "1799:  ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: received from Clamd: %s\", clbuf);",
          "1800:  if (strstr (clbuf, \"FOUND\\n\")) {",
          "1801:   char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "1802:   chomp(clbuf);",
          "1803:   snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&malware=%s\", redirect_url, url, clientip, username, clbuf);",
          "1804:   if (logredir == 0)",
          "1805:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1806:   if (logredir)",
          "1807:       ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1809:   data->blocked = 1;",
          "1810:   generate_redirect_page(urlredir, req, data);",
          "1811:   xfree(urlredir);",
          "1812:   return 1;",
          "1813:  }",
          "1814:  memset(clbuf, 0, sizeof(clbuf));",
          "1815:      }",
          "",
          "[Added Lines]",
          "1674:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Sending zINSTREAM command to clamd.\\n\");",
          "1676:      if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "1682:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Ok connected to clamd socket.\\n\");",
          "1685:      uint32_t buf[BUFSIZ/sizeof(uint32_t)];",
          "1689:      size_t sfsize = 0;",
          "1690:      sfsize = strlen(cbuff);",
          "1691:      buf[0] = htonl(sfsize);",
          "1692:      memcpy(&buf[1],(const char*) cbuff, sfsize);",
          "1693:      ci_debug_printf(3, \"DEBUG: squidclamav_safebrowsing: sending %s\\n\", cbuff);",
          "1694:      ret = sendln (sockd,(const char *) buf, sfsize+sizeof(uint32_t));",
          "1698:       ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: Write to socket\\n\");",
          "1699:       memset(cbuff, 0, sizeof(cbuff));",
          "1701:       ret = sendln (sockd,(const char *) buf, 4);",
          "1702:       if (ret <= 0)",
          "1703:       {",
          "1704:   ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write INSTREAM ending chars to clamd socket.\\n\");",
          "1705:       } else {",
          "1706:        memset (clbuf, 0, sizeof(clbuf));",
          "1707:        while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "1708:    ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: received from Clamd: %s\\n\", clbuf);",
          "1709:    if (strstr (clbuf, \"FOUND\")) {",
          "1710:     char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "1711:     chomp(clbuf);",
          "1712:     snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&malware=%s\", redirect_url, url, clientip, username, clbuf);",
          "1713:     if (logredir == 0)",
          "1714:        ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1715:     if (logredir)",
          "1716:         ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1718:     data->blocked = 1;",
          "1719:     generate_redirect_page(urlredir, req, data);",
          "1720:     xfree(urlredir);",
          "1721:     return 1;",
          "1722:    }",
          "1723:    memset(clbuf, 0, sizeof(clbuf));",
          "1724:        }",
          "1725:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ef00c83b774c47996da9609ef3319f142097405",
      "candidate_info": {
        "commit_hash": "0ef00c83b774c47996da9609ef3319f142097405",
        "repo": "darold/squidclamav",
        "commit_url": "https://github.com/darold/squidclamav/commit/0ef00c83b774c47996da9609ef3319f142097405",
        "files": [
          "cgi-bin/clwarn.cgi",
          "cgi-bin/clwarn.cgi.de_DE",
          "cgi-bin/clwarn.cgi.en_EN",
          "cgi-bin/clwarn.cgi.fr_FR",
          "cgi-bin/clwarn.cgi.pt_BR",
          "cgi-bin/clwarn.cgi.ru_RU",
          "src/squidclamav.c"
        ],
        "message": "Fix null into virus parameter on safe browsing redirect URL.",
        "before_after_code_files": [
          "cgi-bin/clwarn.cgi||cgi-bin/clwarn.cgi",
          "cgi-bin/clwarn.cgi.de_DE||cgi-bin/clwarn.cgi.de_DE",
          "cgi-bin/clwarn.cgi.en_EN||cgi-bin/clwarn.cgi.en_EN",
          "cgi-bin/clwarn.cgi.fr_FR||cgi-bin/clwarn.cgi.fr_FR",
          "cgi-bin/clwarn.cgi.pt_BR||cgi-bin/clwarn.cgi.pt_BR",
          "cgi-bin/clwarn.cgi.ru_RU||cgi-bin/clwarn.cgi.ru_RU",
          "src/squidclamav.c||src/squidclamav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/squidclamav.c||src/squidclamav.c"
          ],
          "candidate": [
            "src/squidclamav.c||src/squidclamav.c"
          ]
        }
      },
      "candidate_diff": {
        "cgi-bin/clwarn.cgi||cgi-bin/clwarn.cgi": [
          "File: cgi-bin/clwarn.cgi -> cgi-bin/clwarn.cgi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: my $cgi = new CGI;",
          "10: my $url = CGI::escapeHTML($cgi->param('url')) || '';",
          "12: my $source = CGI::escapeHTML($cgi->param('source')) || '';",
          "13: $source =~ s/\\/-//;",
          "14: my $user = CGI::escapeHTML($cgi->param('user')) || '';",
          "",
          "[Removed Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || '';",
          "",
          "[Added Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || CGI::escapeHTML($cgi->param('malware')) || '';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.de_DE||cgi-bin/clwarn.cgi.de_DE": [
          "File: cgi-bin/clwarn.cgi.de_DE -> cgi-bin/clwarn.cgi.de_DE",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: my $cgi = new CGI;",
          "10: my $url = CGI::escapeHTML($cgi->param('url')) || '';",
          "12: my $source = CGI::escapeHTML($cgi->param('source')) || '';",
          "13: $source =~ s/\\/-//;",
          "14: my $user = CGI::escapeHTML($cgi->param('user')) || '';",
          "",
          "[Removed Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || '';",
          "",
          "[Added Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || CGI::escapeHTML($cgi->param('malware')) || '';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.en_EN||cgi-bin/clwarn.cgi.en_EN": [
          "File: cgi-bin/clwarn.cgi.en_EN -> cgi-bin/clwarn.cgi.en_EN",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: my $cgi = new CGI;",
          "10: my $url = CGI::escapeHTML($cgi->param('url')) || '';",
          "12: my $source = CGI::escapeHTML($cgi->param('source')) || '';",
          "13: $source =~ s/\\/-//;",
          "14: my $user = CGI::escapeHTML($cgi->param('user')) || '';",
          "",
          "[Removed Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || '';",
          "",
          "[Added Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || CGI::escapeHTML($cgi->param('malware')) || '';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.fr_FR||cgi-bin/clwarn.cgi.fr_FR": [
          "File: cgi-bin/clwarn.cgi.fr_FR -> cgi-bin/clwarn.cgi.fr_FR",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: my $cgi = new CGI;",
          "10: my $url = CGI::escapeHTML($cgi->param('url')) || '';",
          "12: my $source = CGI::escapeHTML($cgi->param('source')) || '';",
          "13: $source =~ s/\\/-//;",
          "14: my $user = CGI::escapeHTML($cgi->param('user')) || '';",
          "",
          "[Removed Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || '';",
          "",
          "[Added Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || CGI::escapeHTML($cgi->param('malware')) || '';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.pt_BR||cgi-bin/clwarn.cgi.pt_BR": [
          "File: cgi-bin/clwarn.cgi.pt_BR -> cgi-bin/clwarn.cgi.pt_BR",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: my $cgi = new CGI;",
          "10: my $url = CGI::escapeHTML($cgi->param('url')) || '';",
          "12: my $source = CGI::escapeHTML($cgi->param('source')) || '';",
          "13: $source =~ s/\\/-//;",
          "14: my $user = CGI::escapeHTML($cgi->param('user')) || '';",
          "",
          "[Removed Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || '';",
          "",
          "[Added Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || CGI::escapeHTML($cgi->param('malware')) || '';",
          "",
          "---------------"
        ],
        "cgi-bin/clwarn.cgi.ru_RU||cgi-bin/clwarn.cgi.ru_RU": [
          "File: cgi-bin/clwarn.cgi.ru_RU -> cgi-bin/clwarn.cgi.ru_RU",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: my $cgi = new CGI;",
          "10: my $url = CGI::escapeHTML($cgi->param('url')) || '';",
          "12: my $source = CGI::escapeHTML($cgi->param('source')) || '';",
          "13: $source =~ s/\\/-//;",
          "14: my $user = CGI::escapeHTML($cgi->param('user')) || '';",
          "",
          "[Removed Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || '';",
          "",
          "[Added Lines]",
          "11: my $virus = CGI::escapeHTML($cgi->param('virus')) || CGI::escapeHTML($cgi->param('malware')) || '';",
          "",
          "---------------"
        ],
        "src/squidclamav.c||src/squidclamav.c": [
          "File: src/squidclamav.c -> src/squidclamav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: int dconnect (void);",
          "136: int connectINET(char *serverHost, uint16_t serverPort);",
          "137: char * replace(const char *s, const char *old, const char *new);",
          "",
          "[Removed Lines]",
          "138: int squidclamav_safebrowsing(char *url, char *tmpbuf);",
          "",
          "[Added Lines]",
          "138: int squidclamav_safebrowsing(ci_request_t * req, char *url, char *clientip, char *username);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:      }",
          "413:      if (safebrowsing == 1) {",
          "427:          return CI_MOD_CONTINUE;",
          "428:   }",
          "430:      }",
          "432:      content_length = ci_http_content_length(req);",
          "",
          "[Removed Lines]",
          "414:  char *tmpbuf = NULL;",
          "415:  if (squidclamav_safebrowsing(httpinf.url, tmpbuf) == 1) {",
          "416:   char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "417:   snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&virus=%s\", redirect_url, httpinf.url, clientip, username, tmpbuf);",
          "418:   if (logredir == 0)",
          "419:      ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Malware redirection: %s.\\n\", urlredir);",
          "420:   if (logredir)",
          "421:       ci_debug_printf(0, \"INFO squidclamav_check_preview_handler: Malware redirection: %s.\\n\", urlredir);",
          "423:   data->blocked = 1;",
          "424:   generate_redirect_page(urlredir, req, data);",
          "425:   xfree(urlredir);",
          "426:          xfree(tmpbuf);",
          "429:   xfree(tmpbuf);",
          "",
          "[Added Lines]",
          "414:  if (squidclamav_safebrowsing(req, httpinf.url, clientip, username) != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1702: }",
          "1704: int",
          "1706: {",
          "1707:      char cbuff[MAX_URL_SIZE+60];",
          "1709:      ssize_t ret;",
          "1710:      int nbread = 0;",
          "",
          "[Removed Lines]",
          "1705: squidclamav_safebrowsing(char *url, char *clbuf)",
          "",
          "[Added Lines]",
          "1692: squidclamav_safebrowsing(ci_request_t * req, char *url, char *clientip, char *username)",
          "1694:      av_req_data_t *data = ci_service_data(req);",
          "1696:      char clbuf[SMALL_BUFF];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1805:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: End Clamd connection, attempting to read result.\\n\");",
          "1806:  close(wsockd);",
          "1807:      }",
          "1810:      memset (clbuf, 0, sizeof(clbuf));",
          "1811:      while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "1812:  ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: received from Clamd: %s\", clbuf);",
          "1813:  if (strstr (clbuf, \"FOUND\\n\")) {",
          "1814:   chomp(clbuf);",
          "1815:   if (logredir == 0)",
          "1817:   if (logredir)",
          "1820:   return 1;",
          "1821:  }",
          "1822:  memset(clbuf, 0, sizeof(clbuf));",
          "",
          "[Removed Lines]",
          "1809:      clbuf = (char *) malloc (sizeof (char) * SMALL_BUFF);",
          "1816:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", clbuf);",
          "1818:       ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", clbuf);",
          "1819:   ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware found, ending download.\\n\");",
          "",
          "[Added Lines]",
          "1801:   char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "1803:   snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&malware=%s\", redirect_url, url, clientip, username, clbuf);",
          "1805:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1807:       ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1809:   data->blocked = 1;",
          "1810:   generate_redirect_page(urlredir, req, data);",
          "1811:   xfree(urlredir);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d87fc54f71da168bed7115a5909c97f81718eded",
      "candidate_info": {
        "commit_hash": "d87fc54f71da168bed7115a5909c97f81718eded",
        "repo": "darold/squidclamav",
        "commit_url": "https://github.com/darold/squidclamav/commit/d87fc54f71da168bed7115a5909c97f81718eded",
        "files": [
          "src/squidclamav.c",
          "src/squidclamav.h"
        ],
        "message": "Provide a macro to make debug messages much nicer.\n\nThis updates messages to display logs like so:\n    squidclamav.c(252) squidclamav_close_service: DEBUG clean all memory!\n\nThis makes debugging both nicer to read and write.",
        "before_after_code_files": [
          "src/squidclamav.c||src/squidclamav.c",
          "src/squidclamav.h||src/squidclamav.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/squidclamav.c||src/squidclamav.c"
          ],
          "candidate": [
            "src/squidclamav.c||src/squidclamav.c"
          ]
        }
      },
      "candidate_diff": {
        "src/squidclamav.c||src/squidclamav.c": [
          "File: src/squidclamav.c -> src/squidclamav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         int sent = send(asockd, line, len, 0);",
          "150:         if (sent <= 0) {",
          "151:             if(sent && errno == EINTR) continue;",
          "153:             return sent;",
          "154:         }",
          "155:         line += sent;",
          "",
          "[Removed Lines]",
          "152:             ci_debug_printf(0, \"ERROR: Can't send to clamd: %s\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "152:             debugs(0, \"ERROR: Can't send to clamd: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: {",
          "165:     unsigned int xops;",
          "169:     squidclamav_xdata = srv_xdata;",
          "170:     set_istag(squidclamav_xdata);",
          "",
          "[Removed Lines]",
          "167:     ci_debug_printf(1, \"DEBUG squidclamav_init_service: Going to initialize squidclamav\\n\");",
          "",
          "[Added Lines]",
          "167:     debugs(1, \"DEBUG Going to initialize squidclamav\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     AVREQDATA_POOL = ci_object_pool_register(\"av_req_data_t\", sizeof(av_req_data_t));",
          "182:     if(AVREQDATA_POOL < 0) {",
          "184:         return CI_ERROR;",
          "185:     }",
          "",
          "[Removed Lines]",
          "183:         ci_debug_printf(0, \"FATAL squidclamav_init_service: error registering object_pool av_req_data_t\\n\");",
          "",
          "[Added Lines]",
          "183:         debugs(0, \"FATAL error registering object_pool av_req_data_t\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204: void cfgreload_command(char *name, int type, char **argv)",
          "205: {",
          "208:     free_global();",
          "209:     free_pipe();",
          "",
          "[Removed Lines]",
          "206:     ci_debug_printf(1, \"DEBUG cfgreload_command: reload configuration command received\\n\");",
          "",
          "[Added Lines]",
          "206:     debugs(1, \"DEBUG reload configuration command received\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:     clamd_curr_ip = (char *) malloc (sizeof (char) * 128);",
          "220:     memset(clamd_curr_ip, 0, sizeof(clamd_curr_ip));",
          "221:     if (load_patterns() == 0)",
          "223:     if (squidclamav_xdata)",
          "224:         set_istag(squidclamav_xdata);",
          "226:     if (squidguard != NULL) {",
          "228:         create_pipe(squidguard);",
          "229:     }",
          "",
          "[Removed Lines]",
          "222:         ci_debug_printf(0, \"FATAL cfgreload_command: reload configuration command failed!\\n\");",
          "227:         ci_debug_printf(1, \"DEBUG cfgreload_command: reopening pipe to %s\\n\", squidguard);",
          "",
          "[Added Lines]",
          "222:         debugs(0, \"FATAL reload configuration command failed!\\n\");",
          "227:         debugs(1, \"DEBUG reopening pipe to %s\\n\", squidguard);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235: {",
          "237:     if (squidguard == NULL) {",
          "239:         return CI_OK;",
          "240:     }",
          "244:     if (create_pipe(squidguard) == 1) {",
          "245:         return CI_ERROR;",
          "",
          "[Removed Lines]",
          "238:         ci_debug_printf(1, \"DEBUG squidclamav_post_init_service: squidguard not defined\\n\");",
          "242:     ci_debug_printf(1, \"DEBUG squidclamav_post_init_service: opening pipe to %s\\n\", squidguard);",
          "",
          "[Added Lines]",
          "238:         debugs(1, \"DEBUG squidguard not defined\\n\");",
          "242:     debugs(1, \"DEBUG opening pipe to %s\\n\", squidguard);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "251: void squidclamav_close_service()",
          "252: {",
          "254:     free_global();",
          "255:     free_pipe();",
          "256:     ci_object_pool_unregister(AVREQDATA_POOL);",
          "",
          "[Removed Lines]",
          "253:     ci_debug_printf(1, \"DEBUG squidclamav_close_service: clean all memory!\\n\");",
          "",
          "[Added Lines]",
          "253:     debugs(1, \"DEBUG clean all memory!\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "264:     preview_size = ci_req_preview_size(req);",
          "268:     if (!(data = ci_object_pool_alloc(AVREQDATA_POOL))) {",
          "270:         return NULL;",
          "271:     }",
          "272:     data->body = NULL;",
          "",
          "[Removed Lines]",
          "266:     ci_debug_printf(1, \"DEBUG squidclamav_init_request_data: initializing request data handler.\\n\");",
          "269:         ci_debug_printf(0, \"FATAL squidclamav_init_request_data: Error allocation memory for service data!!!\");",
          "",
          "[Added Lines]",
          "266:     debugs(1, \"DEBUG initializing request data handler.\\n\");",
          "269:         debugs(0, \"FATAL Error allocation memory for service data!!!\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "284: {",
          "286:     if (data) {",
          "289:         if (((av_req_data_t *) data)->body) {",
          "290:             ci_simple_file_destroy(((av_req_data_t *) data)->body);",
          "",
          "[Removed Lines]",
          "287:         ci_debug_printf(1, \"DEBUG squidclamav_release_request_data: Releasing request data.\\n\");",
          "",
          "[Added Lines]",
          "287:         debugs(1, \"DEBUG Releasing request data.\\n\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319:     char *ret = NULL;",
          "320:     int chkipdone = 0;",
          "324:     if (preview_data_len)",
          "328:     if ((req_header = ci_http_request_headers(req)) == NULL) {",
          "330:         return CI_ERROR;",
          "331:     }",
          "334:     if ((username = ci_headers_value(req->request_header, \"X-Authenticated-User\")) != NULL) {",
          "337:         if (simple_pattern_compare(username, TRUSTUSER) == 1) {",
          "339:             return CI_MOD_ALLOW204;",
          "340:         }",
          "341:     } else {",
          "",
          "[Removed Lines]",
          "322:     ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: processing preview header.\\n\");",
          "325:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: preview data size is %d\\n\", preview_data_len);",
          "329:         ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: bad http header, aborting.\\n\");",
          "335:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Authenticated-User: %s\\n\", username);",
          "338:             ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTUSER match) for user: %s\\n\", username);",
          "",
          "[Added Lines]",
          "322:     debugs(1, \"DEBUG processing preview header.\\n\");",
          "325:         debugs(1, \"DEBUG preview data size is %d\\n\", preview_data_len);",
          "329:         debugs(0, \"ERROR bad http header, aborting.\\n\");",
          "335:         debugs(2, \"DEBUG X-Authenticated-User: %s\\n\", username);",
          "338:             debugs(1, \"DEBUG No squidguard and antivir check (TRUSTUSER match) for user: %s\\n\", username);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "348:     if ((clientip = ci_headers_value(req->request_header, \"X-Client-IP\")) != NULL) {",
          "350:         ip = inet_addr(clientip);",
          "351:         chkipdone = 0;",
          "352:         if (dnslookup == 1) {",
          "",
          "[Removed Lines]",
          "349:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Client-IP: %s\\n\", clientip);",
          "",
          "[Added Lines]",
          "349:         debugs(2, \"DEBUG X-Client-IP: %s\\n\", clientip);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "354:                 if (clientname->h_name != NULL) {",
          "356:                     if (client_pattern_compare(clientip, clientname->h_name) > 0) {",
          "358:                         return CI_MOD_ALLOW204;",
          "359:                     }",
          "360:                     chkipdone = 1;",
          "",
          "[Removed Lines]",
          "357:                         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s(%s)\\n\", clientname->h_name, clientip);",
          "",
          "[Added Lines]",
          "357:                         debugs(1, \"DEBUG No squidguard and antivir check (TRUSTCLIENT match) for client: %s(%s)\\n\", clientname->h_name, clientip);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "364:         if (chkipdone == 0) {",
          "366:             if (client_pattern_compare(clientip, NULL) > 0) {",
          "368:                 return CI_MOD_ALLOW204;",
          "369:             }",
          "370:         }",
          "",
          "[Removed Lines]",
          "367:                 ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s\\n\", clientip);",
          "",
          "[Added Lines]",
          "367:                 debugs(1, \"DEBUG No squidguard and antivir check (TRUSTCLIENT match) for client: %s\\n\", clientip);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "378:     if (!extract_http_info(req, req_header, &httpinf)) {",
          "381:         return CI_MOD_ALLOW204;",
          "382:     }",
          "386:     if (simple_pattern_compare(httpinf.url, WHITELIST) == 1) {",
          "388:         return CI_MOD_ALLOW204;",
          "389:     }",
          "",
          "[Removed Lines]",
          "380:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: bad http header, aborting.\\n\");",
          "383:     ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: URL requested: %s\\n\", httpinf.url);",
          "387:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (WHITELIST match) for url: %s\\n\", httpinf.url);",
          "",
          "[Added Lines]",
          "380:         debugs(1, \"DEBUG bad http header, aborting.\\n\");",
          "383:     debugs(2, \"DEBUG URL requested: %s\\n\", httpinf.url);",
          "387:         debugs(1, \"DEBUG No squidguard and antivir check (WHITELIST match) for url: %s\\n\", httpinf.url);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "393:     if (usepipe == 1) {",
          "394:         char *rbuff = NULL;",
          "398:         rbuff = replace(httpinf.url, \"%\", \"%25\");",
          "399:         fprintf(sgfpw,\"%s %s %s %s\\n\",rbuff,clientip,username,httpinf.method);",
          "",
          "[Removed Lines]",
          "395:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Sending request to chained program: %s\\n\", squidguard);",
          "396:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Request: %s %s %s %s\\n\", httpinf.url,clientip,username,httpinf.method);",
          "",
          "[Added Lines]",
          "395:         debugs(2, \"DEBUG Sending request to chained program: %s\\n\", squidguard);",
          "396:         debugs(2, \"DEBUG Request: %s %s %s %s\\n\", httpinf.url,clientip,username,httpinf.method);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "404:         if (chain_ret != NULL) {",
          "405:             ret = fgets(chain_ret,MAX_URL_SIZE,sgfpr);",
          "406:             if ((ret != NULL) && (strlen(chain_ret) > 1)) {",
          "408:                 if (logredir)",
          "411:                 data->blocked = 1;",
          "412:                 generate_redirect_page(strtok(chain_ret, \" \"), req, data);",
          "",
          "[Removed Lines]",
          "407:                 ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Chained program redirection received: %s\\n\", chain_ret);",
          "409:                     ci_debug_printf(0, \"INFO Chained program redirection received: %s\\n\", chain_ret);",
          "",
          "[Added Lines]",
          "407:                 debugs(1, \"DEBUG Chained program redirection received: %s\\n\", chain_ret);",
          "409:                     debugs(0, \"INFO Chained program redirection received: %s\\n\", chain_ret);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "423:     if (strcmp(httpinf.method, \"CONNECT\") == 0) {",
          "425:         return CI_MOD_ALLOW204;",
          "426:     }",
          "429:     if (simple_pattern_compare(httpinf.url, ABORT) == 1) {",
          "431:         return CI_MOD_ALLOW204;",
          "432:     }",
          "434:     if (safebrowsing == 1) {",
          "435:         if (squidclamav_safebrowsing(req, httpinf.url, clientip, username) != 0) {",
          "437:             return CI_MOD_CONTINUE;",
          "438:         }",
          "439:     }",
          "441:     content_length = ci_http_content_length(req);",
          "444:     if ((content_length > 0) && (maxsize > 0) && (content_length >= maxsize)) {",
          "446:         return CI_MOD_ALLOW204;",
          "447:     }",
          "450:     if ((content_type = http_content_type(req)) != NULL) {",
          "453:         if (simple_pattern_compare(content_type, ABORTCONTENT)) {",
          "455:             return CI_MOD_ALLOW204;",
          "456:         }",
          "457:     }",
          "460:     if (!data || !ci_req_hasbody(req)) {",
          "462:         return CI_MOD_ALLOW204;",
          "463:     }",
          "465:     if (preview_data_len == 0) {",
          "467:         return CI_MOD_ALLOW204;",
          "468:     }",
          "",
          "[Removed Lines]",
          "424:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: method %s can't be scanned.\\n\", httpinf.method);",
          "430:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORT match) for url: %s\\n\", httpinf.url);",
          "436:             ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Malware found stopping here.\\n\");",
          "442:     ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Length: %d\\n\", (int)content_length);",
          "445:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: No antivir check, content-length upper than maxsize (%d > %d)\\n\", (int)content_length, (int)maxsize);",
          "451:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Type: %s\\n\", content_type);",
          "454:             ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORTCONTENT match) for content-type: %s\\n\", content_type);",
          "461:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No body data, allow 204\\n\");",
          "466:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: can not begin to scan url: No preview data.\\n\");",
          "",
          "[Added Lines]",
          "424:         debugs(2, \"DEBUG method %s can't be scanned.\\n\", httpinf.method);",
          "430:         debugs(1, \"DEBUG No antivir check (ABORT match) for url: %s\\n\", httpinf.url);",
          "436:             debugs(1, \"DEBUG Malware found stopping here.\\n\");",
          "442:     debugs(2, \"DEBUG Content-Length: %d\\n\", (int)content_length);",
          "445:         debugs(2, \"DEBUG No antivir check, content-length upper than maxsize (%d > %d)\\n\", (int)content_length, (int)maxsize);",
          "451:         debugs(2, \"DEBUG Content-Type: %s\\n\", content_type);",
          "454:             debugs(1, \"DEBUG No antivir check (ABORTCONTENT match) for content-type: %s\\n\", content_type);",
          "461:         debugs(1, \"DEBUG No body data, allow 204\\n\");",
          "466:         debugs(1, \"DEBUG can not begin to scan url: No preview data.\\n\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "479:         data->clientip = ci_buffer_alloc(strlen(clientip)+1);",
          "480:         strcpy(data->clientip, clientip);",
          "481:     } else {",
          "483:         data->clientip = NULL;",
          "484:     }",
          "",
          "[Removed Lines]",
          "482:         ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: clientip is null, you must set 'icap_send_client_ip on' into squid.conf\\n\");",
          "",
          "[Added Lines]",
          "482:         debugs(0, \"ERROR clientip is null, you must set 'icap_send_client_ip on' into squid.conf\\n\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "518:         data->no_more_scan = 1;",
          "519:         ci_req_unlock_data(req);",
          "520:         ci_simple_file_unlock_all(data->body);",
          "522:     } else if (SEND_PERCENT_BYTES && (START_SEND_AFTER < data->body->bytes_in)) {",
          "523:         ci_req_unlock_data(req);",
          "524:         allow_transfer = (SEND_PERCENT_BYTES * (data->body->endpos + len)) / 100;",
          "",
          "[Removed Lines]",
          "521:         ci_debug_printf(1, \"DEBUG squidclamav_read_from_net: No more antivir check, downloaded stream is upper than maxsize (%d>%d)\\n\", (int)data->body->bytes_in, (int)maxsize);",
          "",
          "[Added Lines]",
          "521:         debugs(1, \"DEBUG No more antivir check, downloaded stream is upper than maxsize (%d>%d)\\n\", (int)data->body->bytes_in, (int)maxsize);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "537:         return CI_ERROR;",
          "539:     if (data->blocked == 1 && data->error_page == 0) {",
          "541:         return CI_EOF;",
          "542:     }",
          "543:     if (data->virus == 1 && data->error_page == 0) {",
          "545:         return CI_EOF;",
          "546:     }",
          "",
          "[Removed Lines]",
          "540:         ci_debug_printf(2, \"DEBUG squidclamav_write_to_net: ending here, content was blocked\\n\");",
          "544:         ci_debug_printf(2, \"DEBUG squidclamav_write_to_net: ending here, virus was found\\n\");",
          "",
          "[Added Lines]",
          "540:         debugs(2, \"DEBUG ending here, content was blocked\\n\");",
          "544:         debugs(2, \"DEBUG ending here, virus was found\\n\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "591:     int sockd;",
          "592:     unsigned long total_read;",
          "597:     if (!data || !data->body)",
          "598:         return CI_MOD_DONE;",
          "600:     if (data->blocked == 1) {",
          "602:         return CI_MOD_DONE;",
          "603:     }",
          "605:     body = data->body;",
          "606:     if (data->no_more_scan == 1) {",
          "608:         ci_simple_file_unlock_all(body);",
          "609:         return CI_MOD_DONE;",
          "610:     }",
          "613:     if ((sockd = dconnect ()) < 0) {",
          "615:         goto done_allow204;",
          "616:     }",
          "619:     if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "621:         close(sockd);",
          "622:         goto done_allow204;",
          "623:     }",
          "630:     lseek(body->fd, 0, SEEK_SET);",
          "631:     memset(cbuff, 0, sizeof(cbuff));",
          "632:     total_read = 0;",
          "",
          "[Removed Lines]",
          "594:     ci_debug_printf(2, \"DEBUG squidclamav_end_of_data_handler: ending request data handler.\\n\");",
          "601:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: blocked content, sending redirection header + error page.\\n\");",
          "607:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: no more data to scan, sending content.\\n\");",
          "614:         ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't connect to Clamd daemon.\\n\");",
          "617:     ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Sending zINSTREAM command to clamd.\\n\");",
          "620:         ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write to Clamd socket.\\n\");",
          "625:     ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Ok connected to clamd.\\n\");",
          "629:     ci_debug_printf(1, \"DEBUG: squidclamav_end_of_data_handler: Scanning data now\\n\");",
          "",
          "[Added Lines]",
          "594:     debugs(2, \"DEBUG ending request data handler.\\n\");",
          "601:         debugs(1, \"DEBUG blocked content, sending redirection header + error page.\\n\");",
          "607:         debugs(1, \"DEBUG no more data to scan, sending content.\\n\");",
          "614:         debugs(0, \"ERROR Can't connect to Clamd daemon.\\n\");",
          "617:     debugs(1, \"DEBUG Sending zINSTREAM command to clamd.\\n\");",
          "620:         debugs(0, \"ERROR Can't write to Clamd socket.\\n\");",
          "625:     debugs(1, \"DEBUG Ok connected to clamd.\\n\");",
          "629:     debugs(1, \"DEBUG: Scanning data now\\n\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "637:         total_read += nbread;",
          "638:         ret = sendln (sockd,(const char *) buf, nbread+sizeof(uint32_t));",
          "639:         if ( (ret <= 0) && (total_read > 0) ) {",
          "641:             break;",
          "642:         } else if ( ret <= 0 ) {",
          "644:             break;",
          "645:         } else {",
          "647:         }",
          "648:         memset(cbuff, 0, sizeof(cbuff));",
          "649:     }",
          "",
          "[Removed Lines]",
          "640:             ci_debug_printf(3, \"ERROR squidclamav_end_of_data_handler: Can't write to clamd socket (maybe we reach clamd StreamMaxLength, total read: %ld).\\n\", total_read);",
          "643:             ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write to clamd socket.\\n\");",
          "646:             ci_debug_printf(3, \"DEBUG squidclamav_end_of_data_handler: Write %d bytes on %d to socket\\n\", (int)ret, nbread);",
          "",
          "[Added Lines]",
          "640:             debugs(3, \"ERROR Can't write to clamd socket (maybe we reach clamd StreamMaxLength, total read: %ld).\\n\", total_read);",
          "643:             debugs(0, \"ERROR Can't write to clamd socket.\\n\");",
          "646:             debugs(3, \"DEBUG Write %d bytes on %d to socket\\n\", (int)ret, nbread);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "653:     ret = sendln (sockd,(const char *) buf, 4);",
          "654:     if (ret <= 0)",
          "655:     {",
          "657:     } else {",
          "660:         memset (clbuf, 0, sizeof(clbuf));",
          "661:         while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "663:             if (strstr (clbuf, \"FOUND\")) {",
          "664:                 data->virus = 1;",
          "665:                 if (!ci_req_sent_data(req)) {",
          "",
          "[Removed Lines]",
          "656:         ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write zINSTREAM ending chars to clamd socket.\\n\");",
          "662:             ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: received from Clamd: %s\\n\", clbuf);",
          "",
          "[Added Lines]",
          "656:         debugs(0, \"ERROR Can't write zINSTREAM ending chars to clamd socket.\\n\");",
          "662:             debugs(1, \"DEBUG received from Clamd: %s\\n\", clbuf);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "667:                     char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "668:                     snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&virus=%s\", redirect_url, data->url, data->clientip, data->user, clbuf);",
          "669:                     if (logredir == 0)",
          "671:                     if (logredir)",
          "673:                     generate_redirect_page(urlredir, req, data);",
          "674:                     free(urlredir);",
          "675:                 }",
          "677:                 break;",
          "678:             }",
          "679:             memset(clbuf, 0, sizeof(clbuf));",
          "",
          "[Removed Lines]",
          "670:                         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "672:                         ci_debug_printf(0, \"INFO squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "676:                 ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus found, ending download.\\n\");",
          "",
          "[Added Lines]",
          "670:                         debugs(1, \"DEBUG Virus redirection: %s.\\n\", urlredir);",
          "672:                         debugs(0, \"INFO Virus redirection: %s.\\n\", urlredir);",
          "676:                 debugs(1, \"DEBUG Virus found, ending download.\\n\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "684:     if (sockd > -1) {",
          "686:         close(sockd);",
          "687:     }",
          "689:     if (data->virus) {",
          "691:         return CI_MOD_DONE;",
          "692:     }",
          "694: done_allow204:",
          "695:     if (!ci_req_sent_data(req) && ci_req_allow204(req)) {",
          "697:         return CI_MOD_ALLOW204;",
          "698:     }",
          "701:     ci_simple_file_unlock_all(body);",
          "703:     return CI_MOD_DONE;",
          "",
          "[Removed Lines]",
          "685:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Closing Clamd connection.\\n\");",
          "690:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus found, sending redirection header + error page.\\n\");",
          "696:         ci_debug_printf(2, \"DEBUG squidclamav_end_of_data_handler: Responding with allow 204\\n\");",
          "700:     ci_debug_printf(3, \"DEBUG squidclamav_end_of_data_handler: unlocking data to be sent.\\n\");",
          "",
          "[Added Lines]",
          "685:         debugs(1, \"DEBUG Closing Clamd connection.\\n\");",
          "690:         debugs(1, \"DEBUG Virus found, sending redirection header + error page.\\n\");",
          "696:         debugs(2, \"DEBUG Responding with allow 204\\n\");",
          "700:     debugs(3, \"DEBUG unlocking data to be sent.\\n\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "711:     snprintf(istag, SERVICE_ISTAG_SIZE, \"-%d-%s-%d%d\",1, \"squidclamav\", 1, 0);",
          "712:     istag[SERVICE_ISTAG_SIZE] = '\\0';",
          "713:     ci_service_set_istag(srv_xdata, istag);",
          "715: }",
          "",
          "[Removed Lines]",
          "714:     ci_debug_printf(2, \"DEBUG set_istag: setting istag to %s\\n\", istag);",
          "",
          "[Added Lines]",
          "714:     debugs(2, \"DEBUG setting istag to %s\\n\", istag);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "924:                 case WHITELIST:",
          "925:                     if (debug > 0)",
          "927:                     return 1;",
          "929:                 case ABORT:",
          "930:                     if (debug > 0)",
          "932:                     return 1;",
          "934:                 case TRUSTUSER:",
          "935:                     if (debug > 0)",
          "937:                     return 1;",
          "939:                 case ABORTCONTENT:",
          "940:                     if (debug > 0)",
          "942:                     return 1;",
          "943:                 default:",
          "945:                     return -1;",
          "946:             }",
          "947:         }",
          "",
          "[Removed Lines]",
          "926:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: whitelist (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "931:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: abort (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "936:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: trustuser (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "941:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: abortcontent (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "944:                     ci_debug_printf(0, \"ERROR simple_pattern_compare: unknown pattern match type: %s\\n\", str);",
          "",
          "[Added Lines]",
          "926:                         debugs(2, \"DEBUG whitelist (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "931:                         debugs(2, \"DEBUG abort (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "936:                         debugs(2, \"DEBUG trustuser (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "941:                         debugs(2, \"DEBUG abortcontent (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "944:                     debugs(0, \"ERROR unknown pattern match type: %s\\n\", str);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "963:             if (regexec(&patterns[i].regexv, ip, 0, 0, 0) == 0) {",
          "964:                 if (debug != 0)",
          "966:                 return 1;",
          "969:             } else if ((name != NULL) && (regexec(&patterns[i].regexv, name, 0, 0, 0) == 0)) {",
          "970:                 if (debug != 0)",
          "972:                 return 2;",
          "973:             }",
          "974:         }",
          "",
          "[Removed Lines]",
          "965:                     ci_debug_printf(2, \"DEBUG client_pattern_compare: trustclient (%s) matched: %s\\n\", patterns[i].pattern, ip);",
          "971:                     ci_debug_printf(2, \"DEBUG client_pattern_compare: trustclient (%s) matched: %s\\n\", patterns[i].pattern, name);",
          "",
          "[Added Lines]",
          "965:                     debugs(2, \"DEBUG trustclient (%s) matched: %s\\n\", patterns[i].pattern, ip);",
          "971:                     debugs(2, \"DEBUG trustclient (%s) matched: %s\\n\", patterns[i].pattern, name);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "989:     if (isPathExists(CONFIG_FILE) == 0) {",
          "990:         fp = fopen(CONFIG_FILE, \"rt\");",
          "991:         if (debug > 0)",
          "993:     }",
          "996:     if (fp == NULL) {",
          "998:         return 0;",
          "999:     }",
          "1001:     buf = (char *)malloc(sizeof(char)*LOW_BUFF*2);",
          "1002:     if (buf == NULL) {",
          "1004:         fclose(fp);",
          "1005:         return 0;",
          "1006:     }",
          "",
          "[Removed Lines]",
          "992:             ci_debug_printf(0, \"LOG load_patterns: Reading configuration from %s\\n\", CONFIG_FILE);",
          "997:         ci_debug_printf(0, \"FATAL load_patterns: unable to open configuration file: %s\\n\", CONFIG_FILE);",
          "1003:         ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "",
          "[Added Lines]",
          "992:             debugs(0, \"LOG Reading configuration from %s\\n\", CONFIG_FILE);",
          "997:         debugs(0, \"FATAL unable to open configuration file: %s\\n\", CONFIG_FILE);",
          "1003:         debugs(0, \"FATAL unable to allocate memory in load_patterns()\\n\");",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1016:     }",
          "1017:     free(buf);",
          "1018:     if (redirect_url == NULL) {",
          "1020:         return 0;",
          "1021:     }",
          "1022:     if (squidguard != NULL) {",
          "1024:     }",
          "1025:     if (fclose(fp) != 0)",
          "1029:     if (clamd_local == NULL) {",
          "1030:         if (clamd_ip == NULL) {",
          "1031:             clamd_ip = (char *) malloc (sizeof (char) * SMALL_CHAR);",
          "1032:             if(clamd_ip == NULL) {",
          "1034:                 return 0;",
          "1035:             }",
          "1036:             xstrncpy(clamd_ip, CLAMD_SERVER, SMALL_CHAR);",
          "",
          "[Removed Lines]",
          "1019:         ci_debug_printf(0, \"FATAL load_patterns: No redirection URL set, going to BRIDGE mode\\n\");",
          "1023:         ci_debug_printf(0, \"LOG load_patterns: Chaining with %s\\n\", squidguard);",
          "1026:         ci_debug_printf(0, \"ERROR load_patterns: Can't close configuration file\\n\");",
          "1033:                 ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "",
          "[Added Lines]",
          "1019:         debugs(0, \"FATAL No redirection URL set, going to BRIDGE mode\\n\");",
          "1023:         debugs(0, \"LOG Chaining with %s\\n\", squidguard);",
          "1026:         debugs(0, \"ERROR Can't close configuration file\\n\");",
          "1033:                 debugs(0, \"FATAL unable to allocate memory in load_patterns()\\n\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1039:         if (clamd_port == NULL) {",
          "1040:             clamd_port = (char *) malloc (sizeof (char) * LOW_CHAR);",
          "1041:             if(clamd_port == NULL) {",
          "1043:                 return 0;",
          "1044:             }",
          "1045:             xstrncpy(clamd_port, CLAMD_PORT, LOW_CHAR);",
          "",
          "[Removed Lines]",
          "1042:                 ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "",
          "[Added Lines]",
          "1042:                 debugs(0, \"FATAL unable to allocate memory in load_patterns()\\n\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1090:     stored = sscanf(s, \"%31s %255[^#]\", type, first);",
          "1092:     if (stored < 2) {",
          "1094:         free(type);",
          "1095:         free(first);",
          "1096:         return 0;",
          "",
          "[Removed Lines]",
          "1093:         ci_debug_printf(0, \"FATAL add_patterns: Bad configuration line for [%s]\\n\", s);",
          "",
          "[Added Lines]",
          "1093:         debugs(0, \"FATAL Bad configuration line for [%s]\\n\", s);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1126:             if (isPathExists(first) == 0) {",
          "1127:                 xstrncpy(squidguard, first, LOW_BUFF);",
          "1128:             } else {",
          "1130:                 squidguard = NULL;",
          "1131:             }",
          "1132:         }",
          "",
          "[Removed Lines]",
          "1129:                 ci_debug_printf(0, \"LOG add_patterns: Wrong path to SquidGuard, disabling.\\n\");",
          "",
          "[Added Lines]",
          "1129:                 debugs(0, \"LOG Wrong path to SquidGuard, disabling.\\n\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1279:     }",
          "1280:     strncpy(currItem.pattern, first, strlen(first) + 1);",
          "1281:     if ((stored = regcomp(&currItem.regexv, currItem.pattern, currItem.flag)) != 0) {",
          "1283:     } else {",
          "1284:         if (growPatternArray(currItem) < 0) {",
          "1285:             fprintf(stderr, \"unable to allocate new pattern in add_to_patterns()\\n\");",
          "",
          "[Removed Lines]",
          "1282:         ci_debug_printf(0, \"ERROR add_pattern: Invalid regex pattern: %s\\n\", currItem.pattern);",
          "",
          "[Added Lines]",
          "1282:         debugs(0, \"ERROR Invalid regex pattern: %s\\n\", currItem.pattern);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1319:         i++;",
          "1320:     }",
          "1321:     httpinf->method[i] = '\\0';",
          "1325:     while (*str == ' ') str++;",
          "",
          "[Removed Lines]",
          "1322:     ci_debug_printf(3, \"DEBUG extract_http_info: method %s\\n\", httpinf->method);",
          "",
          "[Added Lines]",
          "1322:     debugs(3, \"DEBUG method %s\\n\", httpinf->method);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1330:         str++;",
          "1331:     }",
          "1332:     httpinf->url[i] = '\\0';",
          "1334:     if (*str != ' ') {",
          "1335:         return 0;",
          "1336:     }",
          "",
          "[Removed Lines]",
          "1333:     ci_debug_printf(3, \"DEBUG extract_http_info: url %s\\n\", httpinf->url);",
          "",
          "[Added Lines]",
          "1333:     debugs(3, \"DEBUG url %s\\n\", httpinf->url);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1410:     else",
          "1411:         ci_http_response_create(req, 1, 1);",
          "1415:     snprintf(buf, MAX_URL_SIZE, \"Location: %s\", redirect);",
          "1420:     ci_http_response_add_header(req, \"HTTP/1.0 301 Moved Permanently\");",
          "1421:     ci_http_response_add_header(req, buf);",
          "",
          "[Removed Lines]",
          "1413:     ci_debug_printf(2, \"DEBUG generate_redirect_page: creating redirection page\\n\");",
          "1418:     ci_debug_printf(3, \"DEBUG generate_redirect_page: %s\\n\", buf);",
          "",
          "[Added Lines]",
          "1413:     debugs(2, \"DEBUG creating redirection page\\n\");",
          "1418:     debugs(3, \"DEBUG %s\\n\", buf);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1432:         ci_membuf_write(error_page, (char *) redirect, strlen(redirect), 0);",
          "1433:         ci_membuf_write(error_page, (char *) blocked_footer_message, strlen(blocked_footer_message), 1);",
          "1434:     }",
          "1437: }",
          "",
          "[Removed Lines]",
          "1435:     ci_debug_printf(3, \"DEBUG generate_redirect_page: done\\n\");",
          "",
          "[Added Lines]",
          "1435:     debugs(3, \"DEBUG done\\n\");",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1442:     int pipe1[2];",
          "1443:     int pipe2[2];",
          "1447:     if (command != NULL) {",
          "1448:         if ( pipe(pipe1) < 0  ||  pipe(pipe2) < 0 ) {",
          "1450:             perror(\"pipe\");",
          "1451:             usepipe = 0;",
          "1452:         } else {",
          "1453:             if ( (pid = fork()) == -1) {",
          "1455:                 usepipe = 0;",
          "1456:             } else {",
          "1457:                 if(pid == 0) {",
          "",
          "[Removed Lines]",
          "1445:     ci_debug_printf(1, \"DEBUG create_pipe: Open pipe to squidGuard %s!\\n\", command);",
          "1449:             ci_debug_printf(0, \"ERROR create_pipe: unable to open pipe, disabling call to %s.\\n\", command);",
          "1454:                 ci_debug_printf(0, \"ERROR create_pipe: unable to fork, disabling call to %s.\\n\", command);",
          "",
          "[Added Lines]",
          "1445:     debugs(1, \"DEBUG Open pipe to squidGuard %s!\\n\", command);",
          "1449:             debugs(0, \"ERROR unable to open pipe, disabling call to %s.\\n\", command);",
          "1454:                 debugs(0, \"ERROR unable to fork, disabling call to %s.\\n\", command);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1468:                     close(pipe1[0]);",
          "1469:                     sgfpw = fdopen(pipe1[1], \"w\");",
          "1470:                     if (!sgfpw) {",
          "1472:                         usepipe = 0;",
          "1473:                     } else {",
          "1475:                         if (setvbuf (sgfpw, (char *)NULL, _IOLBF, 0)  != 0)",
          "1477:                         sgfpr = fdopen(pipe2[0], \"r\");",
          "1478:                         if(!sgfpr) {",
          "1480:                             usepipe = 0;",
          "1481:                         } else {",
          "1483:                             usepipe = 1;",
          "1484:                         }",
          "1485:                     }",
          "",
          "[Removed Lines]",
          "1471:                         ci_debug_printf(0, \"ERROR create_pipe: unable to fopen command's child stdin, disabling it.\\n\");",
          "1476:                             ci_debug_printf(1, \"DEBUG create_pipe: unable to line buffering pipe.\\n\");",
          "1479:                             ci_debug_printf(0, \"ERROR create_pipe: unable to fopen command's child stdout, disabling it.\\n\");",
          "1482:                             ci_debug_printf(1, \"DEBUG create_pipe: bidirectional pipe to %s childs ready...\\n\", command);",
          "",
          "[Added Lines]",
          "1471:                         debugs(0, \"ERROR unable to fopen command's child stdin, disabling it.\\n\");",
          "1476:                             debugs(1, \"DEBUG unable to line buffering pipe.\\n\");",
          "1479:                             debugs(0, \"ERROR unable to fopen command's child stdout, disabling it.\\n\");",
          "1482:                             debugs(1, \"DEBUG bidirectional pipe to %s childs ready...\\n\", command);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1499:     memset ((char *) &userver, 0, sizeof (userver));",
          "1502:     if (clamd_local != NULL) {",
          "1503:         userver.sun_family = AF_UNIX;",
          "1504:         xstrncpy (userver.sun_path, clamd_local, sizeof(userver.sun_path));",
          "1505:         if ((asockd = socket (AF_UNIX, SOCK_STREAM, 0)) < 0) {",
          "1507:             return -1;",
          "1508:         }",
          "1509:         if (connect (asockd, (struct sockaddr *) &userver, sizeof (struct sockaddr_un)) < 0) {",
          "1510:             close (asockd);",
          "1512:             return -1;",
          "1513:         }",
          "1514:         return asockd;",
          "",
          "[Removed Lines]",
          "1501:     ci_debug_printf(1, \"dconnect: entering.\\n\");",
          "1506:             ci_debug_printf(0, \"ERROR dconnect: Can't bind local socket on %s.\\n\", clamd_local);",
          "1511:             ci_debug_printf(0, \"ERROR dconnect: Can't connect to clamd on local socket %s.\\n\", clamd_local);",
          "",
          "[Added Lines]",
          "1501:     debugs(1, \"entering.\\n\");",
          "1506:             debugs(0, \"ERROR Can't bind local socket on %s.\\n\", clamd_local);",
          "1511:             debugs(0, \"ERROR Can't connect to clamd on local socket %s.\\n\", clamd_local);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1517:         if (clamd_curr_ip[0] != 0) {",
          "1518:             asockd = connectINET(clamd_curr_ip, atoi(clamd_port));",
          "1519:             if ( asockd != -1 ) {",
          "1521:                 return asockd;",
          "1522:             }",
          "1523:         }",
          "",
          "[Removed Lines]",
          "1520:                 ci_debug_printf(1, \"DEBUG dconnect: Connected to Clamd (%s:%s)\\n\", clamd_curr_ip,clamd_port);",
          "",
          "[Added Lines]",
          "1520:                 debugs(1, \"DEBUG Connected to Clamd (%s:%s)\\n\", clamd_curr_ip,clamd_port);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1529:         while (ptr != NULL) {",
          "1530:             asockd = connectINET(ptr, atoi(clamd_port));",
          "1531:             if ( asockd != -1 ) {",
          "1534:                 xstrncpy(clamd_curr_ip, ptr, LOW_CHAR);",
          "1535:                 free(s);",
          "",
          "[Removed Lines]",
          "1532:                 ci_debug_printf(1, \"DEBUG dconnect: Connected to Clamd (%s:%s)\\n\", ptr,clamd_port);",
          "",
          "[Added Lines]",
          "1532:                 debugs(1, \"DEBUG Connected to Clamd (%s:%s)\\n\", ptr,clamd_port);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1559:     memset ((char *) &server, 0, sizeof (server));",
          "1560:     server.sin_addr.s_addr = inet_addr(serverHost);",
          "1561:     if ((asockd = socket (AF_INET, SOCK_STREAM, 0)) < 0) {",
          "1563:         return -1;",
          "1564:     }",
          "",
          "[Removed Lines]",
          "1562:         ci_debug_printf(0, \"ERROR connectINET: Can't create a socket.\\n\");",
          "",
          "[Added Lines]",
          "1562:         debugs(0, \"ERROR Can't create a socket.\\n\");",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1569:     if ((he = gethostbyname(serverHost)) == 0)",
          "1570:     {",
          "1571:         close(asockd);",
          "1573:         return -1;",
          "1574:     }",
          "1575:     server.sin_addr = *(struct in_addr *) he->h_addr_list[0];",
          "",
          "[Removed Lines]",
          "1572:         ci_debug_printf(0, \"ERROR connectINET: Can't lookup hostname of %s\\n\", serverHost);",
          "",
          "[Added Lines]",
          "1572:         debugs(0, \"ERROR Can't lookup hostname of %s\\n\", serverHost);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1579:     if (connect (asockd, (struct sockaddr *) &server, sizeof (struct sockaddr_in)) < 0) {",
          "1580:         close (asockd);",
          "1582:         return -1;",
          "1583:     }",
          "1584:     int err = errno;",
          "1585:     alarm(0);",
          "1586:     if (err == EINTR) {",
          "1587:         close(asockd);",
          "1589:     }",
          "1591:     return asockd;",
          "",
          "[Removed Lines]",
          "1581:         ci_debug_printf(0, \"ERROR connectINET: Can't connect on %s:%d.\\n\", serverHost,serverPort);",
          "1588:         ci_debug_printf(0, \"ERROR connectINET: Timeout connecting to clamd on %s:%d.\\n\", serverHost,serverPort);",
          "",
          "[Added Lines]",
          "1581:         debugs(0, \"ERROR Can't connect on %s:%d.\\n\", serverHost,serverPort);",
          "1588:         debugs(0, \"ERROR Timeout connecting to clamd on %s:%d.\\n\", serverHost,serverPort);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1638:     int nbread = 0;",
          "1639:     int sockd;",
          "1644:     if ((sockd = dconnect ()) < 0) {",
          "1646:         return 0;",
          "1647:     }",
          "1650:     if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "1652:         close(sockd);",
          "1653:         return 0;",
          "1654:     }",
          "1659:     uint32_t buf[BUFSIZ/sizeof(uint32_t)];",
          "1660:     strcpy(cbuff, \"From test\\n\\n<a href=\");",
          "1661:     strcat(cbuff, url);",
          "",
          "[Removed Lines]",
          "1641:     ci_debug_printf(2, \"DEBUG squidclamav_safebrowsing: looking for Clamav SafeBrowsing check.\\n\");",
          "1645:         ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't connect to Clamd daemon.\\n\");",
          "1648:     ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Sending zINSTREAM command to clamd.\\n\");",
          "1651:         ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to Clamd socket.\\n\");",
          "1656:     ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Ok connected to clamd socket.\\n\");",
          "1658:     ci_debug_printf(1, \"DEBUG: squidclamav_safebrowsing: Scanning url for Malware now\\n\");",
          "",
          "[Added Lines]",
          "1641:     debugs(2, \"DEBUG looking for Clamav SafeBrowsing check.\\n\");",
          "1645:         debugs(0, \"ERROR Can't connect to Clamd daemon.\\n\");",
          "1648:     debugs(1, \"DEBUG Sending zINSTREAM command to clamd.\\n\");",
          "1651:         debugs(0, \"ERROR Can't write to Clamd socket.\\n\");",
          "1656:     debugs(1, \"DEBUG Ok connected to clamd socket.\\n\");",
          "1658:     debugs(1, \"DEBUG: Scanning url for Malware now\\n\");",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1664:     sfsize = strlen(cbuff);",
          "1665:     buf[0] = htonl(sfsize);",
          "1666:     memcpy(&buf[1],(const char*) cbuff, sfsize);",
          "1668:     ret = sendln (sockd,(const char *) buf, sfsize+sizeof(uint32_t));",
          "1669:     if ( ret <= 0 ) {",
          "1671:     } else {",
          "1673:         memset(cbuff, 0, sizeof(cbuff));",
          "1675:         ret = sendln (sockd,(const char *) buf, 4);",
          "1676:         if (ret <= 0)",
          "1677:         {",
          "1679:         } else {",
          "1680:             memset (clbuf, 0, sizeof(clbuf));",
          "1681:             while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "1683:                 if (strstr (clbuf, \"FOUND\")) {",
          "1684:                     char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "1685:                     chomp(clbuf);",
          "1686:                     snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&malware=%s\", redirect_url, url, clientip, username, clbuf);",
          "1687:                     if (logredir == 0)",
          "1689:                     if (logredir)",
          "1692:                     data->blocked = 1;",
          "1693:                     generate_redirect_page(urlredir, req, data);",
          "",
          "[Removed Lines]",
          "1667:     ci_debug_printf(3, \"DEBUG: squidclamav_safebrowsing: sending %s\\n\", cbuff);",
          "1670:         ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to clamd socket.\\n\");",
          "1672:         ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: Write to socket\\n\");",
          "1678:             ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write INSTREAM ending chars to clamd socket.\\n\");",
          "1682:                 ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: received from Clamd: %s\\n\", clbuf);",
          "1688:                         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1690:                         ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "",
          "[Added Lines]",
          "1667:     debugs(3, \"DEBUG: sending %s\\n\", cbuff);",
          "1670:         debugs(0, \"ERROR Can't write to clamd socket.\\n\");",
          "1672:         debugs(3, \"DEBUG Write to socket\\n\");",
          "1678:             debugs(0, \"ERROR Can't write INSTREAM ending chars to clamd socket.\\n\");",
          "1682:                 debugs(1, \"DEBUG received from Clamd: %s\\n\", clbuf);",
          "1688:                         debugs(1, \"DEBUG Malware redirection: %s.\\n\", urlredir);",
          "1690:                         debugs(0, \"INFO Malware redirection: %s.\\n\", urlredir);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1700:     }",
          "1702:     if (sockd > -1) {",
          "1704:         close(sockd);",
          "1705:     }",
          "1709:     return 0;",
          "1710: }",
          "",
          "[Removed Lines]",
          "1703:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Closing Clamd connection.\\n\");",
          "1707:     ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: No malware found.\\n\");",
          "",
          "[Added Lines]",
          "1703:         debugs(1, \"DEBUG Closing Clamd connection.\\n\");",
          "1707:     debugs(3, \"DEBUG No malware found.\\n\");",
          "",
          "---------------"
        ],
        "src/squidclamav.h||src/squidclamav.h": [
          "File: src/squidclamav.h -> src/squidclamav.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: int load_patterns(void);",
          "112: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: #ifndef __FUNCTION__",
          "114:     #ifdef __func__",
          "115:         #define __FUNCTION__ __func__",
          "116:     #else",
          "117:         #define __FUNCTION__ \"\"",
          "118:     #endif",
          "119: #endif",
          "121: #define debugs(LEVEL, ARGS...) \\",
          "122:     ci_debug_printf(LEVEL, \"%s(%d) %s: \", __FILE__, __LINE__, __FUNCTION__); \\",
          "123:     ci_debug_printf(LEVEL, ARGS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c28157c32a584ac588f09e1c5095dbfa69929348",
      "candidate_info": {
        "commit_hash": "c28157c32a584ac588f09e1c5095dbfa69929348",
        "repo": "darold/squidclamav",
        "commit_url": "https://github.com/darold/squidclamav/commit/c28157c32a584ac588f09e1c5095dbfa69929348",
        "files": [
          "src/squidclamav.c"
        ],
        "message": "Fix support of Google Safe Browsing through clamav. Reported by phr0gz.",
        "before_after_code_files": [
          "src/squidclamav.c||src/squidclamav.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/squidclamav.c||src/squidclamav.c"
          ],
          "candidate": [
            "src/squidclamav.c||src/squidclamav.c"
          ]
        }
      },
      "candidate_diff": {
        "src/squidclamav.c||src/squidclamav.c": [
          "File: src/squidclamav.c -> src/squidclamav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: int dconnect (void);",
          "136: int connectINET(char *serverHost, uint16_t serverPort);",
          "137: char * replace(const char *s, const char *old, const char *new);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: int squidclamav_safebrowsing(char *url, char *tmpbuf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "409:     return CI_MOD_ALLOW204;",
          "410:      }",
          "413:      content_length = ci_http_content_length(req);",
          "414:      ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Length: %d\\n\", (int)content_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:      if (safebrowsing == 1) {",
          "414:  char *tmpbuf = NULL;",
          "415:  if (squidclamav_safebrowsing(httpinf.url, tmpbuf) == 1) {",
          "416:   char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "417:   snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&virus=%s\", redirect_url, httpinf.url, clientip, username, tmpbuf);",
          "418:   if (logredir == 0)",
          "419:      ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Malware redirection: %s.\\n\", urlredir);",
          "420:   if (logredir)",
          "421:       ci_debug_printf(0, \"INFO squidclamav_check_preview_handler: Malware redirection: %s.\\n\", urlredir);",
          "423:   data->blocked = 1;",
          "424:   generate_redirect_page(urlredir, req, data);",
          "425:   xfree(urlredir);",
          "426:          xfree(tmpbuf);",
          "427:          return CI_MOD_CONTINUE;",
          "428:   }",
          "429:   xfree(tmpbuf);",
          "430:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1682:  return ret;",
          "1683: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1704: int",
          "1705: squidclamav_safebrowsing(char *url, char *clbuf)",
          "1706: {",
          "1707:      char cbuff[MAX_URL_SIZE+60];",
          "1709:      ssize_t ret;",
          "1710:      int nbread = 0;",
          "1711:      int loopw = 60;",
          "1712:      uint16_t port;",
          "1713:      struct sockaddr_in server;",
          "1714:      struct sockaddr_in peer;",
          "1715:      size_t peer_size;",
          "1716:      char *pt = NULL;",
          "1717:      int sockd;",
          "1718:      int wsockd;",
          "1720:      ci_debug_printf(2, \"DEBUG squidclamav_safebrowsing: looking for Clamav SafeBrowsing check.\\n\");",
          "1723:      if ((sockd = dconnect ()) < 0) {",
          "1724:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't connect to Clamd daemon.\\n\");",
          "1725:  return 0;",
          "1726:      }",
          "1727:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Sending STREAM command to clamd.\\n\");",
          "1729:      if (write(sockd, \"STREAM\", 6) <= 0) {",
          "1730:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to Clamd socket.\\n\");",
          "1731:  close(sockd);",
          "1732:  return 0;",
          "1733:      }",
          "1735:      while (loopw > 0) {",
          "1736:  memset (cbuff, 0, sizeof(cbuff));",
          "1737:  ret = read (sockd, cbuff, MAX_URL_SIZE);",
          "1738:  if ((ret > -1) && (pt = strstr (cbuff, \"PORT\"))) {",
          "1739:     pt += 5;",
          "1740:     sscanf(pt, \"%d\", (int *) &port);",
          "1741:     break;",
          "1742:  }",
          "1743:  loopw--;",
          "1744:      }",
          "1745:      if (loopw == 0) {",
          "1746:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Clamd daemon not ready for stream scanning.\\n\");",
          "1747:  close(sockd);",
          "1748:  return 0;",
          "1749:      }",
          "1751:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Received port %d from clamd.\\n\", port);",
          "1754:      if ((wsockd = socket (AF_INET, SOCK_STREAM, 0)) < 0) {",
          "1755:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't create the Clamd socket.\\n\");",
          "1756:  close(sockd);",
          "1757:  return 0;",
          "1758:      }",
          "1760:      server.sin_family = AF_INET;",
          "1761:      server.sin_port = htons (port);",
          "1762:      peer_size = sizeof (peer);",
          "1764:      if (getpeername(sockd, (struct sockaddr *) &peer, (socklen_t *) &peer_size) < 0) {",
          "1765:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't get socket peer name.\\n\");",
          "1766:  close(sockd);",
          "1767:  return 0;",
          "1768:      }",
          "1769:      switch (peer.sin_family) {",
          "1770:  case AF_UNIX:",
          "1771:  server.sin_addr.s_addr = inet_addr (\"127.0.0.1\");",
          "1772:  break;",
          "1773:  case AF_INET:",
          "1774:  server.sin_addr.s_addr = peer.sin_addr.s_addr;",
          "1775:  break;",
          "1776:  default:",
          "1777:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Unexpected socket type: %d.\\n\", peer.sin_family);",
          "1778:  close(sockd);",
          "1779:  return 0;",
          "1780:      }",
          "1782:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Trying to connect to clamd [port: %d].\\n\", port);",
          "1784:      if (connect (wsockd, (struct sockaddr *) &server, sizeof (struct sockaddr_in)) < 0) {",
          "1785:  close(wsockd);",
          "1786:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't connect to clamd [port: %d].\\n\", port);",
          "1787:  return 0;",
          "1788:      }",
          "1789:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Ok connected to clamd on port: %d.\\n\", port);",
          "1791:      ci_debug_printf(1, \"DEBUG: squidclamav_safebrowsing: Scanning url for Malware now\\n\");",
          "1792:      strcpy(cbuff, \"From test\\n\\n<a href=\");",
          "1793:      strcat(cbuff, url);",
          "1794:      strcat(cbuff, \">squidclamav-safebrowsing-test</a>\\n\");",
          "1795:      ret = write(wsockd, cbuff, strlen(cbuff) + 1);",
          "1796:      if ( ret <= 0 ) {",
          "1797:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to clamd socket.\\n\");",
          "1798:      } else {",
          "1799:  ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: Write to socket\\n\");",
          "1800:      }",
          "1801:      memset(cbuff, 0, sizeof(cbuff));",
          "1804:      if (wsockd > -1) {",
          "1805:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: End Clamd connection, attempting to read result.\\n\");",
          "1806:  close(wsockd);",
          "1807:      }",
          "1809:      clbuf = (char *) malloc (sizeof (char) * SMALL_BUFF);",
          "1810:      memset (clbuf, 0, sizeof(clbuf));",
          "1811:      while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "1812:  ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: received from Clamd: %s\", clbuf);",
          "1813:  if (strstr (clbuf, \"FOUND\\n\")) {",
          "1814:   chomp(clbuf);",
          "1815:   if (logredir == 0)",
          "1816:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", clbuf);",
          "1817:   if (logredir)",
          "1818:       ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", clbuf);",
          "1819:   ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware found, ending download.\\n\");",
          "1820:   return 1;",
          "1821:  }",
          "1822:  memset(clbuf, 0, sizeof(clbuf));",
          "1823:      }",
          "1825:      if (sockd > -1) {",
          "1826:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Closing Clamd connection.\\n\");",
          "1827:  close(sockd);",
          "1828:      }",
          "1830:      ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: No malware found.\\n\");",
          "1832:      return 0;",
          "1833: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cc9466f45bf0143f8010a53dfd64348c9b9adf7",
      "candidate_info": {
        "commit_hash": "0cc9466f45bf0143f8010a53dfd64348c9b9adf7",
        "repo": "darold/squidclamav",
        "commit_url": "https://github.com/darold/squidclamav/commit/0cc9466f45bf0143f8010a53dfd64348c9b9adf7",
        "files": [
          "src/squidclamav.c",
          "src/squidclamav.h"
        ],
        "message": "Normalise indentation and remove all trailing whitespace. No functional changes.",
        "before_after_code_files": [
          "src/squidclamav.c||src/squidclamav.c",
          "src/squidclamav.h||src/squidclamav.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/squidclamav.c||src/squidclamav.c"
          ],
          "candidate": [
            "src/squidclamav.c||src/squidclamav.c"
          ]
        }
      },
      "candidate_diff": {
        "src/squidclamav.c||src/squidclamav.c": [
          "File: src/squidclamav.c -> src/squidclamav.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: typedef struct av_req_data{",
          "56: } av_req_data_t;",
          "58: static int SEND_PERCENT_BYTES = 0;",
          "",
          "[Removed Lines]",
          "47:      ci_simple_file_t *body;",
          "48:      ci_request_t *req;",
          "49:      ci_membuf_t *error_page;",
          "50:      int blocked;",
          "51:      int no_more_scan;",
          "52:      int virus;",
          "53:      char *url;",
          "54:      char *user;",
          "55:      char *clientip;",
          "",
          "[Added Lines]",
          "47:     ci_simple_file_t *body;",
          "48:     ci_request_t *req;",
          "49:     ci_membuf_t *error_page;",
          "50:     int blocked;",
          "51:     int no_more_scan;",
          "52:     int virus;",
          "53:     char *url;",
          "54:     char *user;",
          "55:     char *clientip;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: void set_istag(ci_service_xdata_t * srv_xdata);",
          "79: CI_DECLARE_MOD_DATA ci_service_module_t service = {",
          "93: };",
          "95: int debug = 0;",
          "",
          "[Removed Lines]",
          "90:      squidclamav_io,",
          "91:      NULL,",
          "92:      NULL",
          "",
          "[Added Lines]",
          "90:     squidclamav_io,",
          "91:     NULL,",
          "92:     NULL",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:         int sent = send(asockd, line, len, 0);",
          "150:         if (sent <= 0) {",
          "151:             if(sent && errno == EINTR) continue;",
          "153:             return sent;",
          "154:         }",
          "155:         line += sent;",
          "",
          "[Removed Lines]",
          "152:      ci_debug_printf(0, \"ERROR: Can't send to clamd: %s\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "152:             ci_debug_printf(0, \"ERROR: Can't send to clamd: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160: }",
          "162: int squidclamav_init_service(ci_service_xdata_t * srv_xdata,",
          "164: {",
          "165:     unsigned int xops;",
          "",
          "[Removed Lines]",
          "163:                            struct ci_server_conf *server_conf)",
          "",
          "[Added Lines]",
          "163:                              struct ci_server_conf *server_conf)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "180:     AVREQDATA_POOL = ci_object_pool_register(\"av_req_data_t\", sizeof(av_req_data_t));",
          "182:     if(AVREQDATA_POOL < 0) {",
          "185:     }",
          "188:     register_command(\"squidclamav:cfgreload\", MONITOR_PROC_CMD | CHILDS_PROC_CMD, cfgreload_command);",
          "194:     clamd_curr_ip = (char *) malloc (sizeof (char) * 128);",
          "195:     memset(clamd_curr_ip, 0, sizeof(clamd_curr_ip));",
          "197:     if (load_patterns() == 0) {",
          "199:     }",
          "201:     return CI_OK;",
          "",
          "[Removed Lines]",
          "183:   ci_debug_printf(0, \"FATAL squidclamav_init_service: error registering object_pool av_req_data_t\\n\");",
          "184:   return CI_ERROR;",
          "192:        read config files",
          "198:  return CI_ERROR;",
          "",
          "[Added Lines]",
          "183:         ci_debug_printf(0, \"FATAL squidclamav_init_service: error registering object_pool av_req_data_t\\n\");",
          "184:         return CI_ERROR;",
          "192:       read config files",
          "198:         return CI_ERROR;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "219:     clamd_curr_ip = (char *) malloc (sizeof (char) * 128);",
          "220:     memset(clamd_curr_ip, 0, sizeof(clamd_curr_ip));",
          "221:     if (load_patterns() == 0)",
          "223:     if (squidclamav_xdata)",
          "226:     if (squidguard != NULL) {",
          "229:     }",
          "231: }",
          "234: {",
          "236:     if (squidguard == NULL) {",
          "239:     }",
          "241:     ci_debug_printf(1, \"DEBUG squidclamav_post_init_service: opening pipe to %s\\n\", squidguard);",
          "243:     if (create_pipe(squidguard) == 1) {",
          "245:     }",
          "247:     return CI_OK;",
          "",
          "[Removed Lines]",
          "222:        ci_debug_printf(0, \"FATAL cfgreload_command: reload configuration command failed!\\n\");",
          "224:        set_istag(squidclamav_xdata);",
          "227:  ci_debug_printf(1, \"DEBUG cfgreload_command: reopening pipe to %s\\n\", squidguard);",
          "228:  create_pipe(squidguard);",
          "233: int squidclamav_post_init_service(ci_service_xdata_t * srv_xdata, struct ci_server_conf *server_conf)",
          "237:  ci_debug_printf(1, \"DEBUG squidclamav_post_init_service: squidguard not defined\\n\");",
          "238:  return CI_OK;",
          "244:  return CI_ERROR;",
          "",
          "[Added Lines]",
          "222:         ci_debug_printf(0, \"FATAL cfgreload_command: reload configuration command failed!\\n\");",
          "224:         set_istag(squidclamav_xdata);",
          "227:         ci_debug_printf(1, \"DEBUG cfgreload_command: reopening pipe to %s\\n\", squidguard);",
          "228:         create_pipe(squidguard);",
          "233: int squidclamav_post_init_service(ci_service_xdata_t * srv_xdata,",
          "234:                                   struct ci_server_conf *server_conf)",
          "238:         ci_debug_printf(1, \"DEBUG squidclamav_post_init_service: squidguard not defined\\n\");",
          "239:         return CI_OK;",
          "245:         return CI_ERROR;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265:     ci_debug_printf(1, \"DEBUG squidclamav_init_request_data: initializing request data handler.\\n\");",
          "267:     if (!(data = ci_object_pool_alloc(AVREQDATA_POOL))) {",
          "270:     }",
          "271:     data->body = NULL;",
          "272:     data->error_page = NULL;",
          "",
          "[Removed Lines]",
          "268:  ci_debug_printf(0, \"FATAL squidclamav_init_request_data: Error allocation memory for service data!!!\");",
          "269:  return NULL;",
          "",
          "[Added Lines]",
          "269:         ci_debug_printf(0, \"FATAL squidclamav_init_request_data: Error allocation memory for service data!!!\");",
          "270:         return NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "282: void squidclamav_release_request_data(void *data)",
          "283: {",
          "288:         if (((av_req_data_t *) data)->body) {",
          "298:         if (((av_req_data_t *) data)->error_page)",
          "301:         ci_object_pool_free(data);",
          "303: }",
          "306: {",
          "335:         if (simple_pattern_compare(username, TRUSTUSER) == 1) {",
          "338:         }",
          "451:         if (simple_pattern_compare(content_type, ABORTCONTENT)) {",
          "454:         }",
          "498: }",
          "500: int squidclamav_read_from_net(char *buf, int len, int iseof, ci_request_t * req)",
          "501: {",
          "511:     if (data->no_more_scan == 1) {",
          "513:     }",
          "515:     if ((maxsize > 0) && (data->body->bytes_in >= maxsize)) {",
          "520:     } else if (SEND_PERCENT_BYTES && (START_SEND_AFTER < data->body->bytes_in)) {",
          "524:     }",
          "526:     return ci_simple_file_write(data->body, buf, len, iseof);",
          "",
          "[Removed Lines]",
          "285:      if (data) {",
          "286:           ci_debug_printf(1, \"DEBUG squidclamav_release_request_data: Releasing request data.\\n\");",
          "289:            ci_simple_file_destroy(((av_req_data_t *) data)->body);",
          "290:     if (((av_req_data_t *) data)->url)",
          "291:   ci_buffer_free(((av_req_data_t *) data)->url);",
          "292:     if (((av_req_data_t *) data)->user)",
          "293:   ci_buffer_free(((av_req_data_t *) data)->user);",
          "294:     if (((av_req_data_t *) data)->clientip)",
          "295:   ci_buffer_free(((av_req_data_t *) data)->clientip);",
          "296:  }",
          "299:            ci_membuf_free(((av_req_data_t *) data)->error_page);",
          "302:      }",
          "305: int squidclamav_check_preview_handler(char *preview_data, int preview_data_len, ci_request_t * req)",
          "307:      ci_headers_list_t *req_header;",
          "308:      struct http_info httpinf;",
          "309:      av_req_data_t *data = ci_service_data(req);",
          "310:      char *clientip;",
          "311:      struct hostent *clientname;",
          "312:      unsigned long ip;",
          "313:      char *username;",
          "314:      char *content_type;",
          "315:      ci_off_t content_length;",
          "316:      char *chain_ret = NULL;",
          "317:      char *ret = NULL;",
          "318:      int chkipdone = 0;",
          "320:      ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: processing preview header.\\n\");",
          "322:      if (preview_data_len)",
          "323:  ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: preview data size is %d\\n\", preview_data_len);",
          "326:      if ((req_header = ci_http_request_headers(req)) == NULL) {",
          "327:  ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: bad http header, aborting.\\n\");",
          "328:  return CI_ERROR;",
          "329:      }",
          "332:      if ((username = ci_headers_value(req->request_header, \"X-Authenticated-User\")) != NULL) {",
          "333:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Authenticated-User: %s\\n\", username);",
          "336:            ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTUSER match) for user: %s\\n\", username);",
          "337:     return CI_MOD_ALLOW204;",
          "339:      } else {",
          "341:  username = (char *)malloc(sizeof(char)*2);",
          "342:  strcpy(username, \"-\");",
          "343:      }",
          "346:      if ((clientip = ci_headers_value(req->request_header, \"X-Client-IP\")) != NULL) {",
          "347:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Client-IP: %s\\n\", clientip);",
          "348:  ip = inet_addr(clientip);",
          "349:  chkipdone = 0;",
          "350:  if (dnslookup == 1) {",
          "351:   if ( (clientname = gethostbyaddr((char *)&ip, sizeof(ip), AF_INET)) != NULL) {",
          "352:    if (clientname->h_name != NULL) {",
          "354:     if (client_pattern_compare(clientip, clientname->h_name) > 0) {",
          "355:        ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s(%s)\\n\", clientname->h_name, clientip);",
          "356:        return CI_MOD_ALLOW204;",
          "357:     }",
          "358:     chkipdone = 1;",
          "359:    }",
          "360:     }",
          "361:  }",
          "362:  if (chkipdone == 0) {",
          "364:   if (client_pattern_compare(clientip, NULL) > 0) {",
          "365:      ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s\\n\", clientip);",
          "366:      return CI_MOD_ALLOW204;",
          "367:   }",
          "368:  }",
          "369:      } else {",
          "371:  clientip = (char *)malloc(sizeof(char)*2);",
          "372:  strcpy(clientip, \"-\");",
          "373:      }",
          "376:      if (!extract_http_info(req, req_header, &httpinf)) {",
          "378:  ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: bad http header, aborting.\\n\");",
          "379:  return CI_MOD_ALLOW204;",
          "380:      }",
          "381:      ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: URL requested: %s\\n\", httpinf.url);",
          "384:      if (simple_pattern_compare(httpinf.url, WHITELIST) == 1) {",
          "385:            ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (WHITELIST match) for url: %s\\n\", httpinf.url);",
          "386:     return CI_MOD_ALLOW204;",
          "387:      }",
          "391:      if (usepipe == 1) {",
          "392:  char *rbuff = NULL;",
          "393:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Sending request to chained program: %s\\n\", squidguard);",
          "394:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Request: %s %s %s %s\\n\", httpinf.url,clientip,username,httpinf.method);",
          "396:  rbuff = replace(httpinf.url, \"%\", \"%25\");",
          "397:  fprintf(sgfpw,\"%s %s %s %s\\n\",rbuff,clientip,username,httpinf.method);",
          "398:  fflush(sgfpw);",
          "399:  xfree(rbuff);",
          "401:  chain_ret = (char *)malloc(sizeof(char)*MAX_URL_SIZE);",
          "402:  if (chain_ret != NULL) {",
          "403:     ret = fgets(chain_ret,MAX_URL_SIZE,sgfpr);",
          "404:     if ((ret != NULL) && (strlen(chain_ret) > 1)) {",
          "405:   ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Chained program redirection received: %s\\n\", chain_ret);",
          "406:   if (logredir)",
          "407:      ci_debug_printf(0, \"INFO Chained program redirection received: %s\\n\", chain_ret);",
          "409:   data->blocked = 1;",
          "410:   generate_redirect_page(strtok(chain_ret, \" \"), req, data);",
          "411:          xfree(chain_ret);",
          "412:          chain_ret = NULL;",
          "413:          return CI_MOD_CONTINUE;",
          "414:     }",
          "415:     xfree(chain_ret);",
          "416:     chain_ret = NULL;",
          "417:  }",
          "418:      }",
          "421:      if (strcmp(httpinf.method, \"CONNECT\") == 0) {",
          "422:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: method %s can't be scanned.\\n\", httpinf.method);",
          "423:  return CI_MOD_ALLOW204;",
          "424:      }",
          "427:      if (simple_pattern_compare(httpinf.url, ABORT) == 1) {",
          "428:            ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORT match) for url: %s\\n\", httpinf.url);",
          "429:     return CI_MOD_ALLOW204;",
          "430:      }",
          "432:      if (safebrowsing == 1) {",
          "433:  if (squidclamav_safebrowsing(req, httpinf.url, clientip, username) != 0) {",
          "434:   ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Malware found stopping here.\\n\");",
          "435:          return CI_MOD_CONTINUE;",
          "436:   }",
          "437:      }",
          "439:      content_length = ci_http_content_length(req);",
          "440:      ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Length: %d\\n\", (int)content_length);",
          "442:      if ((content_length > 0) && (maxsize > 0) && (content_length >= maxsize)) {",
          "443:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: No antivir check, content-length upper than maxsize (%d > %d)\\n\", (int)content_length, (int)maxsize);",
          "444:  return CI_MOD_ALLOW204;",
          "445:      }",
          "448:      if ((content_type = http_content_type(req)) != NULL) {",
          "449:  ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Type: %s\\n\", content_type);",
          "452:            ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORTCONTENT match) for content-type: %s\\n\", content_type);",
          "453:     return CI_MOD_ALLOW204;",
          "455:      }",
          "458:      if (!data || !ci_req_hasbody(req)) {",
          "459:   ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No body data, allow 204\\n\");",
          "460:           return CI_MOD_ALLOW204;",
          "461:      }",
          "463:      if (preview_data_len == 0) {",
          "464:  ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: can not begin to scan url: No preview data.\\n\");",
          "465:  return CI_MOD_ALLOW204;",
          "466:      }",
          "468:      data->url = ci_buffer_alloc(strlen(httpinf.url)+1);",
          "469:      strcpy(data->url, httpinf.url);",
          "470:      if (username != NULL) {",
          "471:       data->user = ci_buffer_alloc(strlen(username)+1);",
          "472:       strcpy(data->user, username);",
          "473:      } else {",
          "474:  data->user = NULL;",
          "475:      }",
          "476:      if (clientip != NULL) {",
          "477:  data->clientip = ci_buffer_alloc(strlen(clientip)+1);",
          "478:  strcpy(data->clientip, clientip);",
          "479:      } else {",
          "480:  ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: clientip is null, you must set 'icap_send_client_ip on' into squid.conf\\n\");",
          "481:  data->clientip = NULL;",
          "482:      }",
          "484:      data->body = ci_simple_file_new(0);",
          "485:      if ((SEND_PERCENT_BYTES >= 0) && (START_SEND_AFTER == 0)) {",
          "486:  ci_req_unlock_data(req);",
          "487:  ci_simple_file_lock_all(data->body);",
          "488:      }",
          "489:      if (!data->body)",
          "490:  return CI_ERROR;",
          "492:      if (preview_data_len) {",
          "493:  if (ci_simple_file_write(data->body, preview_data, preview_data_len, ci_req_hasalldata(req)) == CI_ERROR)",
          "494:   return CI_ERROR;",
          "495:      }",
          "497:      return CI_MOD_CONTINUE;",
          "502:      av_req_data_t *data = ci_service_data(req);",
          "503:      int allow_transfer;",
          "505:      if (!data)",
          "506:           return CI_ERROR;",
          "508:      if (!data->body)",
          "509:  return len;",
          "512:  return ci_simple_file_write(data->body, buf, len, iseof);",
          "516:  data->no_more_scan = 1;",
          "517:  ci_req_unlock_data(req);",
          "518:  ci_simple_file_unlock_all(data->body);",
          "519:  ci_debug_printf(1, \"DEBUG squidclamav_read_from_net: No more antivir check, downloaded stream is upper than maxsize (%d>%d)\\n\", (int)data->body->bytes_in, (int)maxsize);",
          "521:  ci_req_unlock_data(req);",
          "522:  allow_transfer = (SEND_PERCENT_BYTES * (data->body->endpos + len)) / 100;",
          "523:  ci_simple_file_unlock(data->body, allow_transfer);",
          "",
          "[Added Lines]",
          "286:     if (data) {",
          "287:         ci_debug_printf(1, \"DEBUG squidclamav_release_request_data: Releasing request data.\\n\");",
          "290:             ci_simple_file_destroy(((av_req_data_t *) data)->body);",
          "291:             if (((av_req_data_t *) data)->url)",
          "292:                 ci_buffer_free(((av_req_data_t *) data)->url);",
          "293:             if (((av_req_data_t *) data)->user)",
          "294:                 ci_buffer_free(((av_req_data_t *) data)->user);",
          "295:             if (((av_req_data_t *) data)->clientip)",
          "296:                 ci_buffer_free(((av_req_data_t *) data)->clientip);",
          "297:         }",
          "300:             ci_membuf_free(((av_req_data_t *) data)->error_page);",
          "303:     }",
          "306: int squidclamav_check_preview_handler(char *preview_data, int preview_data_len,",
          "307:                                       ci_request_t * req)",
          "309:     ci_headers_list_t *req_header;",
          "310:     struct http_info httpinf;",
          "311:     av_req_data_t *data = ci_service_data(req);",
          "312:     char *clientip;",
          "313:     struct hostent *clientname;",
          "314:     unsigned long ip;",
          "315:     char *username;",
          "316:     char *content_type;",
          "317:     ci_off_t content_length;",
          "318:     char *chain_ret = NULL;",
          "319:     char *ret = NULL;",
          "320:     int chkipdone = 0;",
          "322:     ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: processing preview header.\\n\");",
          "324:     if (preview_data_len)",
          "325:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: preview data size is %d\\n\", preview_data_len);",
          "328:     if ((req_header = ci_http_request_headers(req)) == NULL) {",
          "329:         ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: bad http header, aborting.\\n\");",
          "330:         return CI_ERROR;",
          "331:     }",
          "334:     if ((username = ci_headers_value(req->request_header, \"X-Authenticated-User\")) != NULL) {",
          "335:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Authenticated-User: %s\\n\", username);",
          "338:             ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTUSER match) for user: %s\\n\", username);",
          "339:             return CI_MOD_ALLOW204;",
          "340:         }",
          "341:     } else {",
          "343:         username = (char *)malloc(sizeof(char)*2);",
          "344:         strcpy(username, \"-\");",
          "345:     }",
          "348:     if ((clientip = ci_headers_value(req->request_header, \"X-Client-IP\")) != NULL) {",
          "349:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Client-IP: %s\\n\", clientip);",
          "350:         ip = inet_addr(clientip);",
          "351:         chkipdone = 0;",
          "352:         if (dnslookup == 1) {",
          "353:             if ( (clientname = gethostbyaddr((char *)&ip, sizeof(ip), AF_INET)) != NULL) {",
          "354:                 if (clientname->h_name != NULL) {",
          "356:                     if (client_pattern_compare(clientip, clientname->h_name) > 0) {",
          "357:                         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s(%s)\\n\", clientname->h_name, clientip);",
          "358:                         return CI_MOD_ALLOW204;",
          "359:                     }",
          "360:                     chkipdone = 1;",
          "361:                 }",
          "362:             }",
          "363:         }",
          "364:         if (chkipdone == 0) {",
          "366:             if (client_pattern_compare(clientip, NULL) > 0) {",
          "367:                 ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s\\n\", clientip);",
          "368:                 return CI_MOD_ALLOW204;",
          "369:             }",
          "370:         }",
          "371:     } else {",
          "373:         clientip = (char *)malloc(sizeof(char)*2);",
          "374:         strcpy(clientip, \"-\");",
          "375:     }",
          "378:     if (!extract_http_info(req, req_header, &httpinf)) {",
          "380:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: bad http header, aborting.\\n\");",
          "381:         return CI_MOD_ALLOW204;",
          "382:     }",
          "383:     ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: URL requested: %s\\n\", httpinf.url);",
          "386:     if (simple_pattern_compare(httpinf.url, WHITELIST) == 1) {",
          "387:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (WHITELIST match) for url: %s\\n\", httpinf.url);",
          "388:         return CI_MOD_ALLOW204;",
          "389:     }",
          "393:     if (usepipe == 1) {",
          "394:         char *rbuff = NULL;",
          "395:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Sending request to chained program: %s\\n\", squidguard);",
          "396:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Request: %s %s %s %s\\n\", httpinf.url,clientip,username,httpinf.method);",
          "398:         rbuff = replace(httpinf.url, \"%\", \"%25\");",
          "399:         fprintf(sgfpw,\"%s %s %s %s\\n\",rbuff,clientip,username,httpinf.method);",
          "400:         fflush(sgfpw);",
          "401:         xfree(rbuff);",
          "403:         chain_ret = (char *)malloc(sizeof(char)*MAX_URL_SIZE);",
          "404:         if (chain_ret != NULL) {",
          "405:             ret = fgets(chain_ret,MAX_URL_SIZE,sgfpr);",
          "406:             if ((ret != NULL) && (strlen(chain_ret) > 1)) {",
          "407:                 ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Chained program redirection received: %s\\n\", chain_ret);",
          "408:                 if (logredir)",
          "409:                     ci_debug_printf(0, \"INFO Chained program redirection received: %s\\n\", chain_ret);",
          "411:                 data->blocked = 1;",
          "412:                 generate_redirect_page(strtok(chain_ret, \" \"), req, data);",
          "413:                 xfree(chain_ret);",
          "414:                 chain_ret = NULL;",
          "415:                 return CI_MOD_CONTINUE;",
          "416:             }",
          "417:             xfree(chain_ret);",
          "418:             chain_ret = NULL;",
          "419:         }",
          "420:     }",
          "423:     if (strcmp(httpinf.method, \"CONNECT\") == 0) {",
          "424:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: method %s can't be scanned.\\n\", httpinf.method);",
          "425:         return CI_MOD_ALLOW204;",
          "426:     }",
          "429:     if (simple_pattern_compare(httpinf.url, ABORT) == 1) {",
          "430:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORT match) for url: %s\\n\", httpinf.url);",
          "431:         return CI_MOD_ALLOW204;",
          "432:     }",
          "434:     if (safebrowsing == 1) {",
          "435:         if (squidclamav_safebrowsing(req, httpinf.url, clientip, username) != 0) {",
          "436:             ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Malware found stopping here.\\n\");",
          "437:             return CI_MOD_CONTINUE;",
          "439:     }",
          "441:     content_length = ci_http_content_length(req);",
          "442:     ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Length: %d\\n\", (int)content_length);",
          "444:     if ((content_length > 0) && (maxsize > 0) && (content_length >= maxsize)) {",
          "445:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: No antivir check, content-length upper than maxsize (%d > %d)\\n\", (int)content_length, (int)maxsize);",
          "446:         return CI_MOD_ALLOW204;",
          "447:     }",
          "450:     if ((content_type = http_content_type(req)) != NULL) {",
          "451:         ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Type: %s\\n\", content_type);",
          "454:             ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORTCONTENT match) for content-type: %s\\n\", content_type);",
          "455:             return CI_MOD_ALLOW204;",
          "457:     }",
          "460:     if (!data || !ci_req_hasbody(req)) {",
          "461:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No body data, allow 204\\n\");",
          "462:         return CI_MOD_ALLOW204;",
          "463:     }",
          "465:     if (preview_data_len == 0) {",
          "466:         ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: can not begin to scan url: No preview data.\\n\");",
          "467:         return CI_MOD_ALLOW204;",
          "468:     }",
          "470:     data->url = ci_buffer_alloc(strlen(httpinf.url)+1);",
          "471:     strcpy(data->url, httpinf.url);",
          "472:     if (username != NULL) {",
          "473:         data->user = ci_buffer_alloc(strlen(username)+1);",
          "474:         strcpy(data->user, username);",
          "475:     } else {",
          "476:         data->user = NULL;",
          "477:     }",
          "478:     if (clientip != NULL) {",
          "479:         data->clientip = ci_buffer_alloc(strlen(clientip)+1);",
          "480:         strcpy(data->clientip, clientip);",
          "481:     } else {",
          "482:         ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: clientip is null, you must set 'icap_send_client_ip on' into squid.conf\\n\");",
          "483:         data->clientip = NULL;",
          "484:     }",
          "486:     data->body = ci_simple_file_new(0);",
          "487:     if ((SEND_PERCENT_BYTES >= 0) && (START_SEND_AFTER == 0)) {",
          "488:         ci_req_unlock_data(req);",
          "489:         ci_simple_file_lock_all(data->body);",
          "490:     }",
          "491:     if (!data->body)",
          "492:         return CI_ERROR;",
          "494:     if (preview_data_len) {",
          "495:         if (ci_simple_file_write(data->body, preview_data, preview_data_len, ci_req_hasalldata(req)) == CI_ERROR)",
          "496:             return CI_ERROR;",
          "497:     }",
          "499:     return CI_MOD_CONTINUE;",
          "504:     av_req_data_t *data = ci_service_data(req);",
          "505:     int allow_transfer;",
          "507:     if (!data)",
          "508:         return CI_ERROR;",
          "510:     if (!data->body)",
          "511:         return len;",
          "514:         return ci_simple_file_write(data->body, buf, len, iseof);",
          "518:         data->no_more_scan = 1;",
          "519:         ci_req_unlock_data(req);",
          "520:         ci_simple_file_unlock_all(data->body);",
          "521:         ci_debug_printf(1, \"DEBUG squidclamav_read_from_net: No more antivir check, downloaded stream is upper than maxsize (%d>%d)\\n\", (int)data->body->bytes_in, (int)maxsize);",
          "523:         ci_req_unlock_data(req);",
          "524:         allow_transfer = (SEND_PERCENT_BYTES * (data->body->endpos + len)) / 100;",
          "525:         ci_simple_file_unlock(data->body, allow_transfer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "529: int squidclamav_write_to_net(char *buf, int len, ci_request_t * req)",
          "530: {",
          "557: }",
          "560: {",
          "577: }",
          "579: int squidclamav_end_of_data_handler(ci_request_t * req)",
          "580: {",
          "598:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: blocked content, sending redirection header + error page.\\n\");",
          "604:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: no more data to scan, sending content.\\n\");",
          "682:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Closing Clamd connection.\\n\");",
          "687:         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus found, sending redirection header + error page.\\n\");",
          "691: done_allow204:",
          "701: }",
          "703: void set_istag(ci_service_xdata_t * srv_xdata)",
          "704: {",
          "712: }",
          "723: }",
          "728: {",
          "741: }",
          "746: {",
          "747:     struct stat sb;",
          "749:     if ( (path == NULL) || (strcmp(path, \"\") == 0) ) return -1;",
          "751:     if (lstat(path, &sb) != 0) {",
          "753:     }",
          "755:     return 0;",
          "",
          "[Removed Lines]",
          "531:      int bytes;",
          "532:      av_req_data_t *data = ci_service_data(req);",
          "534:      if (!data)",
          "535:           return CI_ERROR;",
          "537:      if (data->blocked == 1 && data->error_page == 0) {",
          "538:  ci_debug_printf(2, \"DEBUG squidclamav_write_to_net: ending here, content was blocked\\n\");",
          "539:  return CI_EOF;",
          "540:      }",
          "541:      if (data->virus == 1 && data->error_page == 0) {",
          "542:  ci_debug_printf(2, \"DEBUG squidclamav_write_to_net: ending here, virus was found\\n\");",
          "543:  return CI_EOF;",
          "544:      }",
          "548:      if (data->error_page)",
          "549:           return ci_membuf_read(data->error_page, buf, len);",
          "551:      if (data->body)",
          "552:  bytes = ci_simple_file_read(data->body, buf, len);",
          "553:      else",
          "554:   bytes =0;",
          "556:      return bytes;",
          "559: int squidclamav_io(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof, ci_request_t * req)",
          "561:      int ret = CI_OK;",
          "563:      if (rbuf && rlen) {",
          "565:     if (*rlen == CI_ERROR)",
          "566:        return CI_ERROR;",
          "567:            else if (*rlen < 0)",
          "568:        ret = CI_OK;",
          "569:      } else if (iseof) {",
          "570:     if (squidclamav_read_from_net(NULL, 0, iseof, req) == CI_ERROR)",
          "571:        return CI_ERROR;",
          "572:      }",
          "573:      if (wbuf && wlen) {",
          "575:      }",
          "576:      return CI_OK;",
          "581:      av_req_data_t *data = ci_service_data(req);",
          "582:      ci_simple_file_t *body;",
          "583:      char cbuff[MAX_URL_SIZE];",
          "584:      char clbuf[SMALL_BUFF];",
          "586:      ssize_t ret;",
          "587:      int nbread = 0;",
          "588:      int sockd;",
          "589:      unsigned long total_read;",
          "591:      ci_debug_printf(2, \"DEBUG squidclamav_end_of_data_handler: ending request data handler.\\n\");",
          "594:      if (!data || !data->body)",
          "595:           return CI_MOD_DONE;",
          "597:      if (data->blocked == 1) {",
          "599:  return CI_MOD_DONE;",
          "600:      }",
          "602:      body = data->body;",
          "603:      if (data->no_more_scan == 1) {",
          "605:  ci_simple_file_unlock_all(body);",
          "606:  return CI_MOD_DONE;",
          "607:      }",
          "610:      if ((sockd = dconnect ()) < 0) {",
          "611:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't connect to Clamd daemon.\\n\");",
          "612:  goto done_allow204;",
          "613:      }",
          "614:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Sending zINSTREAM command to clamd.\\n\");",
          "616:      if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "617:  ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write to Clamd socket.\\n\");",
          "618:  close(sockd);",
          "619:  goto done_allow204;",
          "620:      }",
          "622:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Ok connected to clamd.\\n\");",
          "626:      ci_debug_printf(1, \"DEBUG: squidclamav_end_of_data_handler: Scanning data now\\n\");",
          "627:      lseek(body->fd, 0, SEEK_SET);",
          "628:      memset(cbuff, 0, sizeof(cbuff));",
          "629:      total_read = 0;",
          "630:      while (data->virus == 0 && (nbread = read(body->fd, cbuff, BUFSIZ)) > 0) {",
          "631:      uint32_t buf[LBUFSIZ/sizeof(uint32_t)];",
          "632:      buf[0] = htonl(nbread);",
          "633:      memcpy(&buf[1],(const char*) cbuff, nbread);",
          "634:      total_read += nbread;",
          "635:      ret = sendln (sockd,(const char *) buf, nbread+sizeof(uint32_t));",
          "636:      if ( (ret <= 0) && (total_read > 0) ) {",
          "637:   ci_debug_printf(3, \"ERROR squidclamav_end_of_data_handler: Can't write to clamd socket (maybe we reach clamd StreamMaxLength, total read: %ld).\\n\", total_read);",
          "638:   break;",
          "639:      } else if ( ret <= 0 ) {",
          "640:   ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write to clamd socket.\\n\");",
          "641:   break;",
          "642:      } else {",
          "643:   ci_debug_printf(3, \"DEBUG squidclamav_end_of_data_handler: Write %d bytes on %d to socket\\n\", (int)ret, nbread);",
          "644:      }",
          "645:      memset(cbuff, 0, sizeof(cbuff));",
          "646:      }",
          "648:      uint32_t buf[LBUFSIZ/sizeof(uint32_t)];",
          "650:      ret = sendln (sockd,(const char *) buf, 4);",
          "651:      if (ret <= 0)",
          "652:      {",
          "653:        ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write zINSTREAM ending chars to clamd socket.\\n\");",
          "654:      } else {",
          "657:       memset (clbuf, 0, sizeof(clbuf));",
          "658:       while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "659:   ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: received from Clamd: %s\\n\", clbuf);",
          "660:   if (strstr (clbuf, \"FOUND\")) {",
          "661:      data->virus = 1;",
          "662:      if (!ci_req_sent_data(req)) {",
          "663:    chomp(clbuf);",
          "664:    char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "665:    snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&virus=%s\", redirect_url, data->url, data->clientip, data->user, clbuf);",
          "666:    if (logredir == 0)",
          "667:       ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "668:    if (logredir)",
          "669:        ci_debug_printf(0, \"INFO squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "670:    generate_redirect_page(urlredir, req, data);",
          "671:    xfree(urlredir);",
          "672:      }",
          "673:      ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus found, ending download.\\n\");",
          "674:      break;",
          "675:   }",
          "676:   memset(clbuf, 0, sizeof(clbuf));",
          "677:       }",
          "678:      }",
          "681:      if (sockd > -1) {",
          "683:  close(sockd);",
          "684:      }",
          "686:      if (data->virus) {",
          "688:           return CI_MOD_DONE;",
          "689:      }",
          "692:      if (!ci_req_sent_data(req) && ci_req_allow204(req)) {",
          "693:  ci_debug_printf(2, \"DEBUG squidclamav_end_of_data_handler: Responding with allow 204\\n\");",
          "694:  return CI_MOD_ALLOW204;",
          "695:      }",
          "697:      ci_debug_printf(3, \"DEBUG squidclamav_end_of_data_handler: unlocking data to be sent.\\n\");",
          "698:      ci_simple_file_unlock_all(body);",
          "700:      return CI_MOD_DONE;",
          "705:      char istag[SERVICE_ISTAG_SIZE + 1];",
          "708:      snprintf(istag, SERVICE_ISTAG_SIZE, \"-%d-%s-%d%d\",1, \"squidclamav\", 1, 0);",
          "709:      istag[SERVICE_ISTAG_SIZE] = '\\0';",
          "710:      ci_service_set_istag(srv_xdata, istag);",
          "711:      ci_debug_printf(2, \"DEBUG set_istag: setting istag to %s\\n\", istag);",
          "717: void",
          "718: xstrncpy (char *dest, const char *src, size_t n) {",
          "719:  if ( (src == NULL) || (strcmp(src, \"\") == 0))",
          "720:   return;",
          "721:  strncpy(dest, src, n-1);",
          "722:  dest[n-1] = 0;",
          "726: void",
          "727: chomp (char *str)",
          "729:  size_t len = 0;",
          "731:  if (str == NULL) return;",
          "732:  len = strlen(str);",
          "733:  if ((len > 0) && str[len - 1] == 10) {",
          "734:   str[len - 1] = 0;",
          "735:   len--;",
          "736:  }",
          "737:  if ((len > 0) && str[len - 1] == 13)",
          "738:   str[len - 1] = 0;",
          "740:  return;",
          "744: int",
          "745: isPathExists(const char *path)",
          "752:  return -1;",
          "",
          "[Added Lines]",
          "533:     int bytes;",
          "534:     av_req_data_t *data = ci_service_data(req);",
          "536:     if (!data)",
          "537:         return CI_ERROR;",
          "539:     if (data->blocked == 1 && data->error_page == 0) {",
          "540:         ci_debug_printf(2, \"DEBUG squidclamav_write_to_net: ending here, content was blocked\\n\");",
          "541:         return CI_EOF;",
          "542:     }",
          "543:     if (data->virus == 1 && data->error_page == 0) {",
          "544:         ci_debug_printf(2, \"DEBUG squidclamav_write_to_net: ending here, virus was found\\n\");",
          "545:         return CI_EOF;",
          "546:     }",
          "550:     if (data->error_page)",
          "551:         return ci_membuf_read(data->error_page, buf, len);",
          "553:     if (data->body)",
          "554:         bytes = ci_simple_file_read(data->body, buf, len);",
          "555:     else",
          "556:         bytes =0;",
          "558:     return bytes;",
          "561: int squidclamav_io(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof,",
          "562:                    ci_request_t * req)",
          "564:     int ret = CI_OK;",
          "566:     if (rbuf && rlen) {",
          "568:         if (*rlen == CI_ERROR)",
          "569:             return CI_ERROR;",
          "570:         else if (*rlen < 0)",
          "571:             ret = CI_OK;",
          "572:     } else if (iseof) {",
          "573:         if (squidclamav_read_from_net(NULL, 0, iseof, req) == CI_ERROR)",
          "574:             return CI_ERROR;",
          "575:     }",
          "576:     if (wbuf && wlen) {",
          "578:     }",
          "579:     return CI_OK;",
          "584:     av_req_data_t *data = ci_service_data(req);",
          "585:     ci_simple_file_t *body;",
          "586:     char cbuff[MAX_URL_SIZE];",
          "587:     char clbuf[SMALL_BUFF];",
          "589:     ssize_t ret;",
          "590:     int nbread = 0;",
          "591:     int sockd;",
          "592:     unsigned long total_read;",
          "594:     ci_debug_printf(2, \"DEBUG squidclamav_end_of_data_handler: ending request data handler.\\n\");",
          "597:     if (!data || !data->body)",
          "598:         return CI_MOD_DONE;",
          "600:     if (data->blocked == 1) {",
          "602:         return CI_MOD_DONE;",
          "603:     }",
          "605:     body = data->body;",
          "606:     if (data->no_more_scan == 1) {",
          "608:         ci_simple_file_unlock_all(body);",
          "609:         return CI_MOD_DONE;",
          "610:     }",
          "613:     if ((sockd = dconnect ()) < 0) {",
          "614:         ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't connect to Clamd daemon.\\n\");",
          "615:         goto done_allow204;",
          "616:     }",
          "617:     ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Sending zINSTREAM command to clamd.\\n\");",
          "619:     if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "620:         ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write to Clamd socket.\\n\");",
          "621:         close(sockd);",
          "622:         goto done_allow204;",
          "623:     }",
          "625:     ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Ok connected to clamd.\\n\");",
          "629:     ci_debug_printf(1, \"DEBUG: squidclamav_end_of_data_handler: Scanning data now\\n\");",
          "630:     lseek(body->fd, 0, SEEK_SET);",
          "631:     memset(cbuff, 0, sizeof(cbuff));",
          "632:     total_read = 0;",
          "633:     while (data->virus == 0 && (nbread = read(body->fd, cbuff, BUFSIZ)) > 0) {",
          "634:         uint32_t buf[LBUFSIZ/sizeof(uint32_t)];",
          "635:         buf[0] = htonl(nbread);",
          "636:         memcpy(&buf[1],(const char*) cbuff, nbread);",
          "637:         total_read += nbread;",
          "638:         ret = sendln (sockd,(const char *) buf, nbread+sizeof(uint32_t));",
          "639:         if ( (ret <= 0) && (total_read > 0) ) {",
          "640:             ci_debug_printf(3, \"ERROR squidclamav_end_of_data_handler: Can't write to clamd socket (maybe we reach clamd StreamMaxLength, total read: %ld).\\n\", total_read);",
          "641:             break;",
          "642:         } else if ( ret <= 0 ) {",
          "643:             ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write to clamd socket.\\n\");",
          "644:             break;",
          "645:         } else {",
          "646:             ci_debug_printf(3, \"DEBUG squidclamav_end_of_data_handler: Write %d bytes on %d to socket\\n\", (int)ret, nbread);",
          "647:         }",
          "648:         memset(cbuff, 0, sizeof(cbuff));",
          "649:     }",
          "651:     uint32_t buf[LBUFSIZ/sizeof(uint32_t)];",
          "653:     ret = sendln (sockd,(const char *) buf, 4);",
          "654:     if (ret <= 0)",
          "655:     {",
          "656:         ci_debug_printf(0, \"ERROR squidclamav_end_of_data_handler: Can't write zINSTREAM ending chars to clamd socket.\\n\");",
          "657:     } else {",
          "660:         memset (clbuf, 0, sizeof(clbuf));",
          "661:         while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "662:             ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: received from Clamd: %s\\n\", clbuf);",
          "663:             if (strstr (clbuf, \"FOUND\")) {",
          "664:                 data->virus = 1;",
          "665:                 if (!ci_req_sent_data(req)) {",
          "666:                     chomp(clbuf);",
          "667:                     char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "668:                     snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&virus=%s\", redirect_url, data->url, data->clientip, data->user, clbuf);",
          "669:                     if (logredir == 0)",
          "670:                         ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "671:                     if (logredir)",
          "672:                         ci_debug_printf(0, \"INFO squidclamav_end_of_data_handler: Virus redirection: %s.\\n\", urlredir);",
          "673:                     generate_redirect_page(urlredir, req, data);",
          "674:                     xfree(urlredir);",
          "675:                 }",
          "676:                 ci_debug_printf(1, \"DEBUG squidclamav_end_of_data_handler: Virus found, ending download.\\n\");",
          "677:                 break;",
          "678:             }",
          "679:             memset(clbuf, 0, sizeof(clbuf));",
          "680:         }",
          "681:     }",
          "684:     if (sockd > -1) {",
          "686:         close(sockd);",
          "687:     }",
          "689:     if (data->virus) {",
          "691:         return CI_MOD_DONE;",
          "692:     }",
          "695:     if (!ci_req_sent_data(req) && ci_req_allow204(req)) {",
          "696:         ci_debug_printf(2, \"DEBUG squidclamav_end_of_data_handler: Responding with allow 204\\n\");",
          "697:         return CI_MOD_ALLOW204;",
          "698:     }",
          "700:     ci_debug_printf(3, \"DEBUG squidclamav_end_of_data_handler: unlocking data to be sent.\\n\");",
          "701:     ci_simple_file_unlock_all(body);",
          "703:     return CI_MOD_DONE;",
          "708:     char istag[SERVICE_ISTAG_SIZE + 1];",
          "711:     snprintf(istag, SERVICE_ISTAG_SIZE, \"-%d-%s-%d%d\",1, \"squidclamav\", 1, 0);",
          "712:     istag[SERVICE_ISTAG_SIZE] = '\\0';",
          "713:     ci_service_set_istag(srv_xdata, istag);",
          "714:     ci_debug_printf(2, \"DEBUG set_istag: setting istag to %s\\n\", istag);",
          "720: void xstrncpy (char *dest, const char *src, size_t n)",
          "721: {",
          "722:     if ( (src == NULL) || (strcmp(src, \"\") == 0))",
          "723:         return;",
          "724:     strncpy(dest, src, n-1);",
          "725:     dest[n-1] = 0;",
          "729: void chomp (char *str)",
          "731:     size_t len = 0;",
          "733:     if (str == NULL) return;",
          "734:     len = strlen(str);",
          "735:     if ((len > 0) && str[len - 1] == 10) {",
          "736:         str[len - 1] = 0;",
          "737:         len--;",
          "738:     }",
          "739:     if ((len > 0) && str[len - 1] == 13)",
          "740:         str[len - 1] = 0;",
          "742:     return;",
          "746: int isPathExists(const char *path)",
          "753:         return -1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "762: {",
          "763:     struct stat sb;",
          "",
          "[Removed Lines]",
          "760: int",
          "761: isPathSecure(const char *path)",
          "",
          "[Added Lines]",
          "761: int isPathSecure(const char *path)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "788: {",
          "789:     if (s != NULL)",
          "790:         free(s);",
          "",
          "[Removed Lines]",
          "786: void",
          "787: xfree(void *s)",
          "",
          "[Added Lines]",
          "786: void xfree(void *s)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "792: }",
          "797: {",
          "820: }",
          "826: {",
          "844:         splitted = (char**) realloc(splitted, sizeof(char**) * (size+1));",
          "845:         if (splitted != NULL) {",
          "847:         } else {",
          "849:         }",
          "852: }",
          "857: {",
          "861: }",
          "865: {",
          "872: }",
          "876: {",
          "879: }",
          "886: {",
          "918:     }",
          "919:     address = atoi(ptr);",
          "929: }",
          "934: {",
          "970: }",
          "974: {",
          "998: }",
          "1005: {",
          "1070: }",
          "1074: {",
          "1088:         }",
          "1093: }",
          "1098: {",
          "1316: }",
          "1318: int extract_http_info(ci_request_t * req, ci_headers_list_t * req_header,",
          "1320: {",
          "1340:         str++;",
          "1367: }",
          "1369: char *http_content_type(ci_request_t * req)",
          "1370: {",
          "1382: }",
          "1386: {",
          "1401: }",
          "1405: {",
          "1409: }",
          "1411: static const char *blocked_header_message =",
          "1417: static const char *blocked_footer_message =",
          "1424: {",
          "1460: }",
          "",
          "[Removed Lines]",
          "795: void",
          "796: trim(char *str)",
          "798:  int i = 0;",
          "799:  int j = 0;",
          "802:  while ( (str[i] == ' ') || (str[i] == '\\t') ) {",
          "803:   i++;",
          "804:  }",
          "805:  if (i > 0) {",
          "806:   for (j = i; j < strlen(str); j++) {",
          "807:    str[j-i] = str[j];",
          "808:   }",
          "809:   str[j-i] = '\\0';",
          "810:  }",
          "813:  i = strlen(str) - 1;",
          "814:  while ( (str[i] == ' ') || (str[i] == '\\t')) {",
          "815:   i--;",
          "816:  }",
          "817:  if ( i < (strlen(str) - 1) ) {",
          "818:   str[i+1] = '\\0';",
          "819:  }",
          "824: char**",
          "825: split( char* str, const char* delim)",
          "827:         int size = 0;",
          "828:         char** splitted = NULL;",
          "829:         char *tmp = NULL;",
          "830:         tmp = strtok(str, delim);",
          "831:         while (tmp != NULL) {",
          "832:                 splitted = (char**) realloc(splitted, sizeof(char**) * (size+1));",
          "833:                 if (splitted != NULL) {",
          "834:                         splitted[size] = tmp;",
          "835:                 } else {",
          "836:                         return(NULL);",
          "837:                 }",
          "838:                 tmp = strtok(NULL, delim);",
          "839:                 size++;",
          "840:         }",
          "841:         free(tmp);",
          "842:         tmp = NULL;",
          "846:                 splitted[size] = NULL;",
          "848:                 return(NULL);",
          "851:         return splitted;",
          "855: int",
          "856: ptrarray_length(char** arr)",
          "858:  int i = 0;",
          "859:  while(arr[i] != NULL) i++;",
          "860:  return i;",
          "863: void *",
          "864: xmallox (size_t len)",
          "866:  void *memres = malloc (len);",
          "867:  if (memres == NULL) {",
          "868:   fprintf(stderr, \"Running Out of Memory!!!\\n\");",
          "869:   exit(EXIT_FAILURE);",
          "870:  }",
          "871:  return memres;",
          "874: size_t",
          "875: xstrnlen(const char *s, size_t n)",
          "877:  const char *p = (const char *)memchr(s, 0, n);",
          "878:  return(p ? p-s : n);",
          "884: int",
          "885: isIpAddress(char *src_addr)",
          "887:   char *ptr;",
          "888:   int address;",
          "889:   int i;",
          "890:   char *s = (char *) malloc (sizeof (char) * LOW_CHAR);",
          "892:   xstrncpy(s, src_addr, LOW_CHAR);",
          "895:   if(strspn(s, \"0123456789.\") != strlen(s)) {",
          "896:     xfree(s);",
          "897:     return 1;",
          "898:   }",
          "901:   ptr = strtok(s, \".\");",
          "902:   if(ptr == NULL) {",
          "903:     xfree(s);",
          "904:     return 1;",
          "905:   }",
          "906:   address = atoi(ptr);",
          "907:   if(address < 0 || address > 255) {",
          "908:     xfree(s);",
          "909:     xfree(ptr);",
          "910:     return 1;",
          "911:   }",
          "913:   for(i = 2; i < 4; i++) {",
          "914:     ptr = strtok(NULL, \".\");",
          "915:     if (ptr == NULL) {",
          "916:        xfree(s);",
          "917:        return 1;",
          "920:     if (address < 0 || address > 255) {",
          "921:        xfree(ptr);",
          "922:        xfree(s);",
          "923:        return 1;",
          "924:     }",
          "925:   }",
          "926:   xfree(s);",
          "928:   return 0;",
          "932: int",
          "933: simple_pattern_compare(char *str, const int type)",
          "935:  int i = 0;",
          "938:  for (i = 0; i < pattc; i++) {",
          "939:   if ( (patterns[i].type == type) && (regexec(&patterns[i].regexv, str, 0, 0, 0) == 0) ) {",
          "940:    switch(type) {",
          "942:     case WHITELIST:",
          "943:      if (debug > 0)",
          "944:       ci_debug_printf(2, \"DEBUG simple_pattern_compare: whitelist (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "945:      return 1;",
          "947:     case ABORT:",
          "948:      if (debug > 0)",
          "949:       ci_debug_printf(2, \"DEBUG simple_pattern_compare: abort (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "950:      return 1;",
          "952:     case TRUSTUSER:",
          "953:      if (debug > 0)",
          "954:       ci_debug_printf(2, \"DEBUG simple_pattern_compare: trustuser (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "955:      return 1;",
          "957:     case ABORTCONTENT:",
          "958:      if (debug > 0)",
          "959:       ci_debug_printf(2, \"DEBUG simple_pattern_compare: abortcontent (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "960:      return 1;",
          "961:     default:",
          "962:      ci_debug_printf(0, \"ERROR simple_pattern_compare: unknown pattern match type: %s\\n\", str);",
          "963:      return -1;",
          "964:    }",
          "965:   }",
          "966:  }",
          "969:  return 0;",
          "972: int",
          "973: client_pattern_compare(char *ip, char *name)",
          "975:  int i = 0;",
          "978:  for (i = 0; i < pattc; i++) {",
          "979:   if (patterns[i].type == TRUSTCLIENT) {",
          "982:    if (regexec(&patterns[i].regexv, ip, 0, 0, 0) == 0) {",
          "983:     if (debug != 0)",
          "984:      ci_debug_printf(2, \"DEBUG client_pattern_compare: trustclient (%s) matched: %s\\n\", patterns[i].pattern, ip);",
          "985:     return 1;",
          "988:    } else if ((name != NULL) && (regexec(&patterns[i].regexv, name, 0, 0, 0) == 0)) {",
          "989:     if (debug != 0)",
          "990:      ci_debug_printf(2, \"DEBUG client_pattern_compare: trustclient (%s) matched: %s\\n\", patterns[i].pattern, name);",
          "991:     return 2;",
          "992:    }",
          "993:   }",
          "994:  }",
          "997:  return 0;",
          "1003: int",
          "1004: load_patterns()",
          "1006:   char *buf = NULL;",
          "1007:   FILE *fp  = NULL;",
          "1009:   if (isPathExists(CONFIG_FILE) == 0) {",
          "1010:     fp = fopen(CONFIG_FILE, \"rt\");",
          "1011:     if (debug > 0)",
          "1012:        ci_debug_printf(0, \"LOG load_patterns: Reading configuration from %s\\n\", CONFIG_FILE);",
          "1013:   }",
          "1016:   if (fp == NULL) {",
          "1017:  ci_debug_printf(0, \"FATAL load_patterns: unable to open configuration file: %s\\n\", CONFIG_FILE);",
          "1018:     return 0;",
          "1019:   }",
          "1021:   buf = (char *)malloc(sizeof(char)*LOW_BUFF*2);",
          "1022:   if (buf == NULL) {",
          "1023:  ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "1024:  fclose(fp);",
          "1025:  return 0;",
          "1026:   }",
          "1027:   while ((fgets(buf, LOW_BUFF, fp) != NULL)) {",
          "1029:       chomp(buf);",
          "1031:      if (add_pattern(buf) == 0) {",
          "1032:  xfree(buf);",
          "1033:  fclose(fp);",
          "1034:  return 0;",
          "1035:      }",
          "1036:   }",
          "1037:   xfree(buf);",
          "1038:   if (redirect_url == NULL) {",
          "1039:     ci_debug_printf(0, \"FATAL load_patterns: No redirection URL set, going to BRIDGE mode\\n\");",
          "1040:     return 0;",
          "1041:   }",
          "1042:    if (squidguard != NULL) {",
          "1043:     ci_debug_printf(0, \"LOG load_patterns: Chaining with %s\\n\", squidguard);",
          "1044:   }",
          "1045:   if (fclose(fp) != 0)",
          "1046:  ci_debug_printf(0, \"ERROR load_patterns: Can't close configuration file\\n\");",
          "1049:   if (clamd_local == NULL) {",
          "1050:    if (clamd_ip == NULL) {",
          "1051:   clamd_ip = (char *) malloc (sizeof (char) * SMALL_CHAR);",
          "1052:   if(clamd_ip == NULL) {",
          "1053:    ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "1054:    return 0;",
          "1055:   }",
          "1056:   xstrncpy(clamd_ip, CLAMD_SERVER, SMALL_CHAR);",
          "1057:    }",
          "1059:    if (clamd_port == NULL) {",
          "1060:   clamd_port = (char *) malloc (sizeof (char) * LOW_CHAR);",
          "1061:   if(clamd_port == NULL) {",
          "1062:    ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "1063:    return 0;",
          "1064:   }",
          "1065:   xstrncpy(clamd_port, CLAMD_PORT, LOW_CHAR);",
          "1066:    }",
          "1067:   }",
          "1069:   return 1;",
          "1072: int",
          "1073: growPatternArray (SCPattern item)",
          "1075:  void *_tmp = NULL;",
          "1076:         if (pattc == current_pattern_size) {",
          "1077:                 if (current_pattern_size == 0)",
          "1078:                         current_pattern_size = PATTERN_ARR_SIZE;",
          "1079:                 else",
          "1080:                         current_pattern_size += PATTERN_ARR_SIZE;",
          "1082:   _tmp = realloc(patterns, (current_pattern_size * sizeof(SCPattern)));",
          "1083:                 if (!_tmp) {",
          "1084:                         return(-1);",
          "1085:                 }",
          "1087:                 patterns = (SCPattern*)_tmp;",
          "1089:         patterns[pattc] = item;",
          "1090:         pattc++;",
          "1092:  return(pattc);",
          "1096: int",
          "1097: add_pattern(char *s)",
          "1099:  char *first = NULL;",
          "1100:  char *type  = NULL;",
          "1101:  int stored = 0;",
          "1102:  int regex_flags = REG_NOSUB;",
          "1103:  SCPattern currItem;",
          "1104:  char *end = NULL;",
          "1107:  if ( (xstrnlen(s, LOW_BUFF) == 0) || (strncmp(s, \"#\", 1) == 0)) return 1;",
          "1110:  type = (char *)malloc(sizeof(char)*LOW_CHAR);",
          "1111:  first = (char *)malloc(sizeof(char)*LOW_BUFF);",
          "1112:  stored = sscanf(s, \"%31s %255[^#]\", type, first);",
          "1114:  if (stored < 2) {",
          "1115:   ci_debug_printf(0, \"FATAL add_patterns: Bad configuration line for [%s]\\n\", s);",
          "1116:   xfree(type);",
          "1117:   xfree(first);",
          "1118:   return 0;",
          "1119:  }",
          "1121:  trim(first);",
          "1124:  if(strcmp(type, \"redirect\") == 0) {",
          "1125:   redirect_url = (char *) malloc (sizeof (char) * LOW_BUFF);",
          "1126:   if(redirect_url == NULL) {",
          "1127:    fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1128:    xfree(type);",
          "1129:    xfree(first);",
          "1130:    return 0;",
          "1131:   } else {",
          "1132:    xstrncpy(redirect_url, first, LOW_BUFF);",
          "1133:   }",
          "1134:   xfree(type);",
          "1135:   xfree(first);",
          "1136:   return 1;",
          "1137:  }",
          "1140:  if(strcmp(type, \"squidguard\") == 0) {",
          "1141:   squidguard = (char *) malloc (sizeof (char) * LOW_BUFF);",
          "1142:   if(squidguard == NULL) {",
          "1143:    fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1144:    xfree(type);",
          "1145:    xfree(first);",
          "1146:    return 0;",
          "1147:   } else {",
          "1148:    if (isPathExists(first) == 0) {",
          "1149:     xstrncpy(squidguard, first, LOW_BUFF);",
          "1150:    } else {",
          "1151:     ci_debug_printf(0, \"LOG add_patterns: Wrong path to SquidGuard, disabling.\\n\");",
          "1152:     squidguard = NULL;",
          "1153:    }",
          "1154:   }",
          "1155:   xfree(type);",
          "1156:   xfree(first);",
          "1157:   return 1;",
          "1158:  }",
          "1160:  if(strcmp(type, \"debug\") == 0) {",
          "1161:   if (debug == 0)",
          "1162:      debug = atoi(first);",
          "1163:   xfree(type);",
          "1164:   xfree(first);",
          "1165:   return 1;",
          "1166:  }",
          "1168:  if(strcmp(type, \"logredir\") == 0) {",
          "1169:   if (logredir == 0)",
          "1170:      logredir = atoi(first);",
          "1171:   xfree(type);",
          "1172:   xfree(first);",
          "1173:   return 1;",
          "1174:  }",
          "1176:  if(strcmp(type, \"dnslookup\") == 0) {",
          "1177:   if (dnslookup == 1)",
          "1178:      dnslookup = atoi(first);",
          "1179:   xfree(type);",
          "1180:   xfree(first);",
          "1181:   return 1;",
          "1182:  }",
          "1184:  if(strcmp(type, \"safebrowsing\") == 0) {",
          "1185:   if (safebrowsing == 0)",
          "1186:      safebrowsing = atoi(first);",
          "1187:   xfree(type);",
          "1188:   xfree(first);",
          "1189:   return 1;",
          "1190:  }",
          "1192:  if(strcmp(type, \"timeout\") == 0) {",
          "1193:   timeout = atoi(first);",
          "1194:   if (timeout > 10)",
          "1195:    timeout = 10;",
          "1196:   xfree(type);",
          "1197:   xfree(first);",
          "1198:   return 1;",
          "1199:  }",
          "1201:  if(strcmp(type, \"stat\") == 0) {",
          "1202:   statit = atoi(first);",
          "1203:   xfree(type);",
          "1204:   xfree(first);",
          "1205:   return 1;",
          "1206:  }",
          "1208:  if(strcmp(type, \"clamd_ip\") == 0) {",
          "1209:   clamd_ip = (char *) malloc (sizeof (char) * SMALL_CHAR);",
          "1210:   if (clamd_ip == NULL) {",
          "1211:    fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1212:    xfree(type);",
          "1213:    xfree(first);",
          "1214:    return 0;",
          "1215:   } else {",
          "1216:    xstrncpy(clamd_ip, first, SMALL_CHAR);",
          "1217:   }",
          "1218:   xfree(type);",
          "1219:   xfree(first);",
          "1220:   return 1;",
          "1221:  }",
          "1223:  if(strcmp(type, \"clamd_port\") == 0) {",
          "1224:   clamd_port = (char *) malloc (sizeof (char) * LOW_CHAR);",
          "1225:   if(clamd_port == NULL) {",
          "1226:    fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1227:    xfree(type);",
          "1228:    xfree(first);",
          "1229:    return 0;",
          "1230:   } else {",
          "1231:    xstrncpy(clamd_port, first, LOW_CHAR);",
          "1232:   }",
          "1233:   xfree(type);",
          "1234:   xfree(first);",
          "1235:   return 1;",
          "1236:  }",
          "1238:  if(strcmp(type, \"clamd_local\") == 0) {",
          "1239:   clamd_local = (char *) malloc (sizeof (char) * LOW_BUFF);",
          "1240:   if(clamd_local == NULL) {",
          "1241:    fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1242:    xfree(type);",
          "1243:    xfree(first);",
          "1244:    return 0;",
          "1245:   } else {",
          "1246:    xstrncpy(clamd_local, first, LOW_BUFF);",
          "1247:   }",
          "1248:   xfree(type);",
          "1249:   xfree(first);",
          "1250:   return 1;",
          "1251:  }",
          "1253:  if (strcmp(type, \"maxsize\") == 0) {",
          "1254:   maxsize = ci_strto_off_t(first, &end, 10);",
          "1255:   if ((maxsize == 0 && errno != 0) || maxsize < 0)",
          "1256:    maxsize = 0;",
          "1257:   if (*end == 'k' || *end == 'K')",
          "1258:    maxsize = maxsize * 1024;",
          "1259:   else if (*end == 'm' || *end == 'M')",
          "1260:    maxsize = maxsize * 1024 * 1024;",
          "1261:   else if (*end == 'g' || *end == 'G')",
          "1262:    maxsize = maxsize * 1024 * 1024 * 1024;",
          "1263:   xfree(type);",
          "1264:   xfree(first);",
          "1265:   return 1;",
          "1266:  }",
          "1270:  regex_flags |= REG_ICASE;",
          "1272:  regex_flags |= REG_EXTENDED;",
          "1274:  if (strcmp(type, \"abort\") == 0) {",
          "1275:   currItem.type = ABORT;",
          "1276:  } else if (strcmp(type, \"abortcontent\") == 0) {",
          "1277:   currItem.type = ABORTCONTENT;",
          "1278:  } else if(strcmp(type, \"whitelist\") == 0) {",
          "1279:   currItem.type = WHITELIST;",
          "1280:  } else if(strcmp(type, \"trustuser\") == 0) {",
          "1281:   currItem.type = TRUSTUSER;",
          "1282:  } else if(strcmp(type, \"trustclient\") == 0) {",
          "1283:   currItem.type = TRUSTCLIENT;",
          "1284:  } else if ( (strcmp(type, \"squid_ip\") != 0) && (strcmp(type, \"squid_port\") != 0) && (strcmp(type, \"maxredir\") != 0) && (strcmp(type, \"useragent\") != 0) && (strcmp(type, \"trust_cache\") != 0) ) {",
          "1285:   fprintf(stderr, \"WARNING: Bad configuration keyword: %s\\n\", s);",
          "1286:   xfree(type);",
          "1287:   xfree(first);",
          "1288:   return 1;",
          "1289:  }",
          "1292:  currItem.flag = regex_flags;",
          "1295:  currItem.pattern = malloc(sizeof(char)*(strlen(first)+1));",
          "1296:  if (currItem.pattern == NULL) {",
          "1297:   fprintf(stderr, \"unable to allocate new pattern in add_to_patterns()\\n\");",
          "1298:   xfree(type);",
          "1299:   xfree(first);",
          "1300:   return 0;",
          "1301:  }",
          "1302:  strncpy(currItem.pattern, first, strlen(first) + 1);",
          "1303:  if ((stored = regcomp(&currItem.regexv, currItem.pattern, currItem.flag)) != 0) {",
          "1304:   ci_debug_printf(0, \"ERROR add_pattern: Invalid regex pattern: %s\\n\", currItem.pattern);",
          "1305:  } else {",
          "1306:   if (growPatternArray(currItem) < 0) {",
          "1307:    fprintf(stderr, \"unable to allocate new pattern in add_to_patterns()\\n\");",
          "1308:    xfree(type);",
          "1309:    xfree(first);",
          "1310:    return 0;",
          "1311:   }",
          "1312:  }",
          "1313:  xfree(type);",
          "1314:  xfree(first);",
          "1315:  return 1;",
          "1319:                   struct http_info *httpinf)",
          "1321:      char *str;",
          "1322:      int i = 0;",
          "1325:   GET http://www.squid-cache.org/Doc/config/icap_service HTTP/1.1",
          "1327:      httpinf->url[0]='\\0';",
          "1328:      httpinf->method[0] = '\\0';",
          "1330:      str = req_header->headers[0];",
          "1333:      if (strchr(str, ' ') == NULL) {",
          "1334:           return 0;",
          "1335:      }",
          "1338:      while (*str != ' ' && i < MAX_METHOD_SIZE) {",
          "1339:  httpinf->method[i] = *str;",
          "1341:  i++;",
          "1342:      }",
          "1343:      httpinf->method[i] = '\\0';",
          "1344:      ci_debug_printf(3, \"DEBUG extract_http_info: method %s\\n\", httpinf->method);",
          "1347:      while (*str == ' ') str++;",
          "1348:      i = 0;",
          "1349:      while (*str != ' ' && i < MAX_URL_SIZE) {",
          "1350:  httpinf->url[i] = *str;",
          "1351:  i++;",
          "1352:  str++;",
          "1353:      }",
          "1354:      httpinf->url[i] = '\\0';",
          "1355:      ci_debug_printf(3, \"DEBUG extract_http_info: url %s\\n\", httpinf->url);",
          "1356:      if (*str != ' ') {",
          "1357:           return 0;",
          "1358:      }",
          "1360:      while (*str == ' ')",
          "1361:           str++;",
          "1362:      if (*str != 'H' || *(str + 4) != '/') {",
          "1363:           return 0;",
          "1364:      }",
          "1366:      return 1;",
          "1371:      ci_headers_list_t *heads;",
          "1372:      char *val;",
          "1373:      if (!(heads =  ci_http_response_headers(req))) {",
          "1375:           if (!(heads = ci_http_request_headers(req)))",
          "1376:                return NULL;",
          "1377:      }",
          "1378:      if (!(val = ci_headers_value(heads, \"Content-Type\")))",
          "1379:           return NULL;",
          "1381:      return val;",
          "1384: void",
          "1385: free_global ()",
          "1387:      xfree(clamd_local);",
          "1388:      xfree(clamd_ip);",
          "1389:      xfree(clamd_port);",
          "1390:      xfree(clamd_curr_ip);",
          "1391:      xfree(redirect_url);",
          "1392:      if (patterns != NULL) {",
          "1393:  while (pattc > 0) {",
          "1394:     pattc--;",
          "1395:     regfree(&patterns[pattc].regexv);",
          "1396:     xfree(patterns[pattc].pattern);",
          "1397:  }",
          "1398:  free(patterns);",
          "1399:  patterns = NULL;",
          "1400:      }",
          "1403: void",
          "1404: free_pipe ()",
          "1406:      xfree(squidguard);",
          "1407:      if (sgfpw) fclose(sgfpw);",
          "1408:      if (sgfpr) fclose(sgfpr);",
          "1412:      \"<html>\\n\"",
          "1413:      \"<body>\\n\"",
          "1414:      \"<p>\\n\"",
          "1415:      \"You will be redirected in few seconds, if not use this <a href=\\\"\";",
          "1418:      \"\\\">direct link</a>.\\n\"",
          "1419:      \"</p>\\n\"",
          "1420:      \"</body>\\n\"",
          "1421:      \"</html>\\n\";",
          "1423: void generate_redirect_page(char * redirect, ci_request_t * req, av_req_data_t * data)",
          "1425:      int new_size = 0;",
          "1426:      char buf[MAX_URL_SIZE];",
          "1427:      ci_membuf_t *error_page;",
          "1429:      new_size = strlen(blocked_header_message) + strlen(redirect) + strlen(blocked_footer_message) + 10;",
          "1431:      if ( ci_http_response_headers(req))",
          "1432:           ci_http_response_reset_headers(req);",
          "1433:      else",
          "1434:           ci_http_response_create(req, 1, 1);",
          "1436:      ci_debug_printf(2, \"DEBUG generate_redirect_page: creating redirection page\\n\");",
          "1438:      snprintf(buf, MAX_URL_SIZE, \"Location: %s\", redirect);",
          "1441:      ci_debug_printf(3, \"DEBUG generate_redirect_page: %s\\n\", buf);",
          "1443:      ci_http_response_add_header(req, \"HTTP/1.0 301 Moved Permanently\");",
          "1444:      ci_http_response_add_header(req, buf);",
          "1445:      ci_http_response_add_header(req, \"Server: C-ICAP\");",
          "1446:      ci_http_response_add_header(req, \"Connection: close\");",
          "1448:      ci_http_response_add_header(req, \"Content-Type: text/html\");",
          "1449:      ci_http_response_add_header(req, \"Content-Language: en\");",
          "1451:      if (data->blocked == 1) {",
          "1452:  error_page = ci_membuf_new_sized(new_size);",
          "1453:  ((av_req_data_t *) data)->error_page = error_page;",
          "1454:  ci_membuf_write(error_page, (char *) blocked_header_message, strlen(blocked_header_message), 0);",
          "1455:  ci_membuf_write(error_page, (char *) redirect, strlen(redirect), 0);",
          "1456:  ci_membuf_write(error_page, (char *) blocked_footer_message, strlen(blocked_footer_message), 1);",
          "1457:      }",
          "1458:      ci_debug_printf(3, \"DEBUG generate_redirect_page: done\\n\");",
          "",
          "[Added Lines]",
          "794: void trim(char *str)",
          "796:     int i = 0;",
          "797:     int j = 0;",
          "800:     while ( (str[i] == ' ') || (str[i] == '\\t') ) {",
          "801:         i++;",
          "802:     }",
          "803:     if (i > 0) {",
          "804:         for (j = i; j < strlen(str); j++) {",
          "805:             str[j-i] = str[j];",
          "806:         }",
          "807:         str[j-i] = '\\0';",
          "808:     }",
          "811:     i = strlen(str) - 1;",
          "812:     while ( (str[i] == ' ') || (str[i] == '\\t')) {",
          "813:         i--;",
          "814:     }",
          "815:     if ( i < (strlen(str) - 1) ) {",
          "816:         str[i+1] = '\\0';",
          "817:     }",
          "822: char** split( char* str, const char* delim)",
          "824:     int size = 0;",
          "825:     char** splitted = NULL;",
          "826:     char *tmp = NULL;",
          "827:     tmp = strtok(str, delim);",
          "828:     while (tmp != NULL) {",
          "831:             splitted[size] = tmp;",
          "833:             return(NULL);",
          "835:         tmp = strtok(NULL, delim);",
          "836:         size++;",
          "837:     }",
          "838:     free(tmp);",
          "839:     tmp = NULL;",
          "841:     splitted = (char**) realloc(splitted, sizeof(char**) * (size+1));",
          "842:     if (splitted != NULL) {",
          "843:         splitted[size] = NULL;",
          "844:     } else {",
          "845:         return(NULL);",
          "846:     }",
          "848:     return splitted;",
          "852: int ptrarray_length(char** arr)",
          "854:     int i = 0;",
          "855:     while(arr[i] != NULL) i++;",
          "856:     return i;",
          "859: void * xmallox (size_t len)",
          "861:     void *memres = malloc (len);",
          "862:     if (memres == NULL) {",
          "863:         fprintf(stderr, \"Running Out of Memory!!!\\n\");",
          "864:         exit(EXIT_FAILURE);",
          "865:     }",
          "866:     return memres;",
          "869: size_t xstrnlen(const char *s, size_t n)",
          "871:     const char *p = (const char *)memchr(s, 0, n);",
          "872:     return(p ? p-s : n);",
          "878: int isIpAddress(char *src_addr)",
          "880:     char *ptr;",
          "881:     int address;",
          "882:     int i;",
          "883:     char *s = (char *) malloc (sizeof (char) * LOW_CHAR);",
          "885:     xstrncpy(s, src_addr, LOW_CHAR);",
          "888:     if(strspn(s, \"0123456789.\") != strlen(s)) {",
          "889:         xfree(s);",
          "890:         return 1;",
          "891:     }",
          "894:     ptr = strtok(s, \".\");",
          "895:     if(ptr == NULL) {",
          "896:         xfree(s);",
          "897:         return 1;",
          "900:     if(address < 0 || address > 255) {",
          "901:         xfree(s);",
          "902:         xfree(ptr);",
          "903:         return 1;",
          "904:     }",
          "906:     for(i = 2; i < 4; i++) {",
          "907:         ptr = strtok(NULL, \".\");",
          "908:         if (ptr == NULL) {",
          "909:             xfree(s);",
          "910:             return 1;",
          "911:         }",
          "912:         address = atoi(ptr);",
          "913:         if (address < 0 || address > 255) {",
          "914:             xfree(ptr);",
          "915:             xfree(s);",
          "916:             return 1;",
          "917:         }",
          "918:     }",
          "919:     xfree(s);",
          "921:     return 0;",
          "925: int simple_pattern_compare(char *str, const int type)",
          "927:     int i = 0;",
          "930:     for (i = 0; i < pattc; i++) {",
          "931:         if ( (patterns[i].type == type) && (regexec(&patterns[i].regexv, str, 0, 0, 0) == 0) ) {",
          "932:             switch(type) {",
          "934:                 case WHITELIST:",
          "935:                     if (debug > 0)",
          "936:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: whitelist (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "937:                     return 1;",
          "939:                 case ABORT:",
          "940:                     if (debug > 0)",
          "941:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: abort (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "942:                     return 1;",
          "944:                 case TRUSTUSER:",
          "945:                     if (debug > 0)",
          "946:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: trustuser (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "947:                     return 1;",
          "949:                 case ABORTCONTENT:",
          "950:                     if (debug > 0)",
          "951:                         ci_debug_printf(2, \"DEBUG simple_pattern_compare: abortcontent (%s) matched: %s\\n\", patterns[i].pattern, str);",
          "952:                     return 1;",
          "953:                 default:",
          "954:                     ci_debug_printf(0, \"ERROR simple_pattern_compare: unknown pattern match type: %s\\n\", str);",
          "955:                     return -1;",
          "956:             }",
          "957:         }",
          "958:     }",
          "961:     return 0;",
          "964: int client_pattern_compare(char *ip, char *name)",
          "966:     int i = 0;",
          "969:     for (i = 0; i < pattc; i++) {",
          "970:         if (patterns[i].type == TRUSTCLIENT) {",
          "973:             if (regexec(&patterns[i].regexv, ip, 0, 0, 0) == 0) {",
          "974:                 if (debug != 0)",
          "975:                     ci_debug_printf(2, \"DEBUG client_pattern_compare: trustclient (%s) matched: %s\\n\", patterns[i].pattern, ip);",
          "976:                 return 1;",
          "979:             } else if ((name != NULL) && (regexec(&patterns[i].regexv, name, 0, 0, 0) == 0)) {",
          "980:                 if (debug != 0)",
          "981:                     ci_debug_printf(2, \"DEBUG client_pattern_compare: trustclient (%s) matched: %s\\n\", patterns[i].pattern, name);",
          "982:                 return 2;",
          "983:             }",
          "984:         }",
          "985:     }",
          "988:     return 0;",
          "994: int load_patterns()",
          "996:     char *buf = NULL;",
          "997:     FILE *fp  = NULL;",
          "999:     if (isPathExists(CONFIG_FILE) == 0) {",
          "1000:         fp = fopen(CONFIG_FILE, \"rt\");",
          "1001:         if (debug > 0)",
          "1002:             ci_debug_printf(0, \"LOG load_patterns: Reading configuration from %s\\n\", CONFIG_FILE);",
          "1003:     }",
          "1006:     if (fp == NULL) {",
          "1007:         ci_debug_printf(0, \"FATAL load_patterns: unable to open configuration file: %s\\n\", CONFIG_FILE);",
          "1008:         return 0;",
          "1009:     }",
          "1011:     buf = (char *)malloc(sizeof(char)*LOW_BUFF*2);",
          "1012:     if (buf == NULL) {",
          "1013:         ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "1014:         fclose(fp);",
          "1015:         return 0;",
          "1016:     }",
          "1017:     while ((fgets(buf, LOW_BUFF, fp) != NULL)) {",
          "1019:         chomp(buf);",
          "1021:         if (add_pattern(buf) == 0) {",
          "1022:             xfree(buf);",
          "1023:             fclose(fp);",
          "1024:             return 0;",
          "1025:         }",
          "1026:     }",
          "1027:     xfree(buf);",
          "1028:     if (redirect_url == NULL) {",
          "1029:         ci_debug_printf(0, \"FATAL load_patterns: No redirection URL set, going to BRIDGE mode\\n\");",
          "1030:         return 0;",
          "1031:     }",
          "1032:     if (squidguard != NULL) {",
          "1033:         ci_debug_printf(0, \"LOG load_patterns: Chaining with %s\\n\", squidguard);",
          "1034:     }",
          "1035:     if (fclose(fp) != 0)",
          "1036:         ci_debug_printf(0, \"ERROR load_patterns: Can't close configuration file\\n\");",
          "1039:     if (clamd_local == NULL) {",
          "1040:         if (clamd_ip == NULL) {",
          "1041:             clamd_ip = (char *) malloc (sizeof (char) * SMALL_CHAR);",
          "1042:             if(clamd_ip == NULL) {",
          "1043:                 ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "1044:                 return 0;",
          "1045:             }",
          "1046:             xstrncpy(clamd_ip, CLAMD_SERVER, SMALL_CHAR);",
          "1047:         }",
          "1049:         if (clamd_port == NULL) {",
          "1050:             clamd_port = (char *) malloc (sizeof (char) * LOW_CHAR);",
          "1051:             if(clamd_port == NULL) {",
          "1052:                 ci_debug_printf(0, \"FATAL load_patterns: unable to allocate memory in load_patterns()\\n\");",
          "1053:                 return 0;",
          "1054:             }",
          "1055:             xstrncpy(clamd_port, CLAMD_PORT, LOW_CHAR);",
          "1056:         }",
          "1057:     }",
          "1059:     return 1;",
          "1062: int growPatternArray(SCPattern item)",
          "1064:     void *_tmp = NULL;",
          "1065:     if (pattc == current_pattern_size) {",
          "1066:         if (current_pattern_size == 0)",
          "1067:             current_pattern_size = PATTERN_ARR_SIZE;",
          "1068:         else",
          "1069:             current_pattern_size += PATTERN_ARR_SIZE;",
          "1071:         _tmp = realloc(patterns, (current_pattern_size * sizeof(SCPattern)));",
          "1072:         if (!_tmp) {",
          "1073:             return(-1);",
          "1076:         patterns = (SCPattern*)_tmp;",
          "1077:     }",
          "1078:     patterns[pattc] = item;",
          "1079:     pattc++;",
          "1081:     return(pattc);",
          "1085: int add_pattern(char *s)",
          "1087:     char *first = NULL;",
          "1088:     char *type  = NULL;",
          "1089:     int stored = 0;",
          "1090:     int regex_flags = REG_NOSUB;",
          "1091:     SCPattern currItem;",
          "1092:     char *end = NULL;",
          "1095:     if ( (xstrnlen(s, LOW_BUFF) == 0) || (strncmp(s, \"#\", 1) == 0)) return 1;",
          "1098:     type = (char *)malloc(sizeof(char)*LOW_CHAR);",
          "1099:     first = (char *)malloc(sizeof(char)*LOW_BUFF);",
          "1100:     stored = sscanf(s, \"%31s %255[^#]\", type, first);",
          "1102:     if (stored < 2) {",
          "1103:         ci_debug_printf(0, \"FATAL add_patterns: Bad configuration line for [%s]\\n\", s);",
          "1104:         xfree(type);",
          "1105:         xfree(first);",
          "1106:         return 0;",
          "1107:     }",
          "1109:     trim(first);",
          "1112:     if(strcmp(type, \"redirect\") == 0) {",
          "1113:         redirect_url = (char *) malloc (sizeof (char) * LOW_BUFF);",
          "1114:         if(redirect_url == NULL) {",
          "1115:             fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1116:             xfree(type);",
          "1117:             xfree(first);",
          "1118:             return 0;",
          "1119:         } else {",
          "1120:             xstrncpy(redirect_url, first, LOW_BUFF);",
          "1121:         }",
          "1122:         xfree(type);",
          "1123:         xfree(first);",
          "1124:         return 1;",
          "1125:     }",
          "1128:     if(strcmp(type, \"squidguard\") == 0) {",
          "1129:         squidguard = (char *) malloc (sizeof (char) * LOW_BUFF);",
          "1130:         if(squidguard == NULL) {",
          "1131:             fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1132:             xfree(type);",
          "1133:             xfree(first);",
          "1134:             return 0;",
          "1135:         } else {",
          "1136:             if (isPathExists(first) == 0) {",
          "1137:                 xstrncpy(squidguard, first, LOW_BUFF);",
          "1138:             } else {",
          "1139:                 ci_debug_printf(0, \"LOG add_patterns: Wrong path to SquidGuard, disabling.\\n\");",
          "1140:                 squidguard = NULL;",
          "1141:             }",
          "1142:         }",
          "1143:         xfree(type);",
          "1144:         xfree(first);",
          "1145:         return 1;",
          "1146:     }",
          "1148:     if(strcmp(type, \"debug\") == 0) {",
          "1149:         if (debug == 0)",
          "1150:             debug = atoi(first);",
          "1151:         xfree(type);",
          "1152:         xfree(first);",
          "1153:         return 1;",
          "1154:     }",
          "1156:     if(strcmp(type, \"logredir\") == 0) {",
          "1157:         if (logredir == 0)",
          "1158:             logredir = atoi(first);",
          "1159:         xfree(type);",
          "1160:         xfree(first);",
          "1161:         return 1;",
          "1162:     }",
          "1164:     if(strcmp(type, \"dnslookup\") == 0) {",
          "1165:         if (dnslookup == 1)",
          "1166:             dnslookup = atoi(first);",
          "1167:         xfree(type);",
          "1168:         xfree(first);",
          "1169:         return 1;",
          "1170:     }",
          "1172:     if(strcmp(type, \"safebrowsing\") == 0) {",
          "1173:         if (safebrowsing == 0)",
          "1174:             safebrowsing = atoi(first);",
          "1175:         xfree(type);",
          "1176:         xfree(first);",
          "1177:         return 1;",
          "1178:     }",
          "1180:     if(strcmp(type, \"timeout\") == 0) {",
          "1181:         timeout = atoi(first);",
          "1182:         if (timeout > 10)",
          "1183:             timeout = 10;",
          "1184:         xfree(type);",
          "1185:         xfree(first);",
          "1186:         return 1;",
          "1187:     }",
          "1189:     if(strcmp(type, \"stat\") == 0) {",
          "1190:         statit = atoi(first);",
          "1191:         xfree(type);",
          "1192:         xfree(first);",
          "1193:         return 1;",
          "1194:     }",
          "1196:     if(strcmp(type, \"clamd_ip\") == 0) {",
          "1197:         clamd_ip = (char *) malloc (sizeof (char) * SMALL_CHAR);",
          "1198:         if (clamd_ip == NULL) {",
          "1199:             fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1200:             xfree(type);",
          "1201:             xfree(first);",
          "1202:             return 0;",
          "1203:         } else {",
          "1204:             xstrncpy(clamd_ip, first, SMALL_CHAR);",
          "1205:         }",
          "1206:         xfree(type);",
          "1207:         xfree(first);",
          "1208:         return 1;",
          "1209:     }",
          "1211:     if(strcmp(type, \"clamd_port\") == 0) {",
          "1212:         clamd_port = (char *) malloc (sizeof (char) * LOW_CHAR);",
          "1213:         if(clamd_port == NULL) {",
          "1214:             fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1215:             xfree(type);",
          "1216:             xfree(first);",
          "1217:             return 0;",
          "1218:         } else {",
          "1219:             xstrncpy(clamd_port, first, LOW_CHAR);",
          "1220:         }",
          "1221:         xfree(type);",
          "1222:         xfree(first);",
          "1223:         return 1;",
          "1224:     }",
          "1226:     if(strcmp(type, \"clamd_local\") == 0) {",
          "1227:         clamd_local = (char *) malloc (sizeof (char) * LOW_BUFF);",
          "1228:         if(clamd_local == NULL) {",
          "1229:             fprintf(stderr, \"unable to allocate memory in add_to_patterns()\\n\");",
          "1230:             xfree(type);",
          "1231:             xfree(first);",
          "1232:             return 0;",
          "1233:         } else {",
          "1234:             xstrncpy(clamd_local, first, LOW_BUFF);",
          "1235:         }",
          "1236:         xfree(type);",
          "1237:         xfree(first);",
          "1238:         return 1;",
          "1239:     }",
          "1241:     if (strcmp(type, \"maxsize\") == 0) {",
          "1242:         maxsize = ci_strto_off_t(first, &end, 10);",
          "1243:         if ((maxsize == 0 && errno != 0) || maxsize < 0)",
          "1244:             maxsize = 0;",
          "1245:         if (*end == 'k' || *end == 'K')",
          "1246:             maxsize = maxsize * 1024;",
          "1247:         else if (*end == 'm' || *end == 'M')",
          "1248:             maxsize = maxsize * 1024 * 1024;",
          "1249:         else if (*end == 'g' || *end == 'G')",
          "1250:             maxsize = maxsize * 1024 * 1024 * 1024;",
          "1251:         xfree(type);",
          "1252:         xfree(first);",
          "1253:         return 1;",
          "1254:     }",
          "1258:     regex_flags |= REG_ICASE;",
          "1260:     regex_flags |= REG_EXTENDED;",
          "1262:     if (strcmp(type, \"abort\") == 0) {",
          "1263:         currItem.type = ABORT;",
          "1264:     } else if (strcmp(type, \"abortcontent\") == 0) {",
          "1265:         currItem.type = ABORTCONTENT;",
          "1266:     } else if(strcmp(type, \"whitelist\") == 0) {",
          "1267:         currItem.type = WHITELIST;",
          "1268:     } else if(strcmp(type, \"trustuser\") == 0) {",
          "1269:         currItem.type = TRUSTUSER;",
          "1270:     } else if(strcmp(type, \"trustclient\") == 0) {",
          "1271:         currItem.type = TRUSTCLIENT;",
          "1272:     } else if ( (strcmp(type, \"squid_ip\") != 0) && (strcmp(type, \"squid_port\") != 0) && (strcmp(type, \"maxredir\") != 0) && (strcmp(type, \"useragent\") != 0) && (strcmp(type, \"trust_cache\") != 0) ) {",
          "1273:         fprintf(stderr, \"WARNING: Bad configuration keyword: %s\\n\", s);",
          "1274:         xfree(type);",
          "1275:         xfree(first);",
          "1276:         return 1;",
          "1277:     }",
          "1280:     currItem.flag = regex_flags;",
          "1283:     currItem.pattern = malloc(sizeof(char)*(strlen(first)+1));",
          "1284:     if (currItem.pattern == NULL) {",
          "1285:         fprintf(stderr, \"unable to allocate new pattern in add_to_patterns()\\n\");",
          "1286:         xfree(type);",
          "1287:         xfree(first);",
          "1288:         return 0;",
          "1289:     }",
          "1290:     strncpy(currItem.pattern, first, strlen(first) + 1);",
          "1291:     if ((stored = regcomp(&currItem.regexv, currItem.pattern, currItem.flag)) != 0) {",
          "1292:         ci_debug_printf(0, \"ERROR add_pattern: Invalid regex pattern: %s\\n\", currItem.pattern);",
          "1293:     } else {",
          "1294:         if (growPatternArray(currItem) < 0) {",
          "1295:             fprintf(stderr, \"unable to allocate new pattern in add_to_patterns()\\n\");",
          "1296:             xfree(type);",
          "1297:             xfree(first);",
          "1298:             return 0;",
          "1299:         }",
          "1300:     }",
          "1301:     xfree(type);",
          "1302:     xfree(first);",
          "1303:     return 1;",
          "1307:                       struct http_info *httpinf)",
          "1309:     char *str;",
          "1310:     int i = 0;",
          "1313:        GET http://www.squid-cache.org/Doc/config/icap_service HTTP/1.1",
          "1315:     httpinf->url[0]='\\0';",
          "1316:     httpinf->method[0] = '\\0';",
          "1318:     str = req_header->headers[0];",
          "1321:     if (strchr(str, ' ') == NULL) {",
          "1322:         return 0;",
          "1323:     }",
          "1326:     while (*str != ' ' && i < MAX_METHOD_SIZE) {",
          "1327:         httpinf->method[i] = *str;",
          "1328:         str++;",
          "1329:         i++;",
          "1330:     }",
          "1331:     httpinf->method[i] = '\\0';",
          "1332:     ci_debug_printf(3, \"DEBUG extract_http_info: method %s\\n\", httpinf->method);",
          "1335:     while (*str == ' ') str++;",
          "1336:     i = 0;",
          "1337:     while (*str != ' ' && i < MAX_URL_SIZE) {",
          "1338:         httpinf->url[i] = *str;",
          "1339:         i++;",
          "1341:     }",
          "1342:     httpinf->url[i] = '\\0';",
          "1343:     ci_debug_printf(3, \"DEBUG extract_http_info: url %s\\n\", httpinf->url);",
          "1344:     if (*str != ' ') {",
          "1345:         return 0;",
          "1346:     }",
          "1348:     while (*str == ' ')",
          "1349:         str++;",
          "1350:     if (*str != 'H' || *(str + 4) != '/') {",
          "1351:         return 0;",
          "1352:     }",
          "1354:     return 1;",
          "1359:     ci_headers_list_t *heads;",
          "1360:     char *val;",
          "1361:     if (!(heads =  ci_http_response_headers(req))) {",
          "1363:         if (!(heads = ci_http_request_headers(req)))",
          "1364:             return NULL;",
          "1365:     }",
          "1366:     if (!(val = ci_headers_value(heads, \"Content-Type\")))",
          "1367:         return NULL;",
          "1369:     return val;",
          "1372: void free_global()",
          "1374:     xfree(clamd_local);",
          "1375:     xfree(clamd_ip);",
          "1376:     xfree(clamd_port);",
          "1377:     xfree(clamd_curr_ip);",
          "1378:     xfree(redirect_url);",
          "1379:     if (patterns != NULL) {",
          "1380:         while (pattc > 0) {",
          "1381:             pattc--;",
          "1382:             regfree(&patterns[pattc].regexv);",
          "1383:             xfree(patterns[pattc].pattern);",
          "1384:         }",
          "1385:         free(patterns);",
          "1386:         patterns = NULL;",
          "1387:     }",
          "1390: void free_pipe()",
          "1392:     xfree(squidguard);",
          "1393:     if (sgfpw) fclose(sgfpw);",
          "1394:     if (sgfpr) fclose(sgfpr);",
          "1398: \"<html>\\n\"",
          "1399: \"<body>\\n\"",
          "1400: \"<p>\\n\"",
          "1401: \"You will be redirected in few seconds, if not use this <a href=\\\"\";",
          "1404: \"\\\">direct link</a>.\\n\"",
          "1405: \"</p>\\n\"",
          "1406: \"</body>\\n\"",
          "1407: \"</html>\\n\";",
          "1409: void generate_redirect_page(char * redirect, ci_request_t * req,",
          "1410:                             av_req_data_t * data)",
          "1412:     int new_size = 0;",
          "1413:     char buf[MAX_URL_SIZE];",
          "1414:     ci_membuf_t *error_page;",
          "1416:     new_size = strlen(blocked_header_message) + strlen(redirect) + strlen(blocked_footer_message) + 10;",
          "1418:     if ( ci_http_response_headers(req))",
          "1419:         ci_http_response_reset_headers(req);",
          "1420:     else",
          "1421:         ci_http_response_create(req, 1, 1);",
          "1423:     ci_debug_printf(2, \"DEBUG generate_redirect_page: creating redirection page\\n\");",
          "1425:     snprintf(buf, MAX_URL_SIZE, \"Location: %s\", redirect);",
          "1428:     ci_debug_printf(3, \"DEBUG generate_redirect_page: %s\\n\", buf);",
          "1430:     ci_http_response_add_header(req, \"HTTP/1.0 301 Moved Permanently\");",
          "1431:     ci_http_response_add_header(req, buf);",
          "1432:     ci_http_response_add_header(req, \"Server: C-ICAP\");",
          "1433:     ci_http_response_add_header(req, \"Connection: close\");",
          "1435:     ci_http_response_add_header(req, \"Content-Type: text/html\");",
          "1436:     ci_http_response_add_header(req, \"Content-Language: en\");",
          "1438:     if (data->blocked == 1) {",
          "1439:         error_page = ci_membuf_new_sized(new_size);",
          "1440:         ((av_req_data_t *) data)->error_page = error_page;",
          "1441:         ci_membuf_write(error_page, (char *) blocked_header_message, strlen(blocked_header_message), 0);",
          "1442:         ci_membuf_write(error_page, (char *) redirect, strlen(redirect), 0);",
          "1443:         ci_membuf_write(error_page, (char *) blocked_footer_message, strlen(blocked_footer_message), 1);",
          "1444:     }",
          "1445:     ci_debug_printf(3, \"DEBUG generate_redirect_page: done\\n\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1468:     ci_debug_printf(1, \"DEBUG create_pipe: Open pipe to squidGuard %s!\\n\", command);",
          "1470:     if (command != NULL) {",
          "1512:     }",
          "1514:     return 1;",
          "1515: }",
          "1519: {",
          "1541:     } else {",
          "1542:         if (clamd_curr_ip[0] != 0) {",
          "1548:         }",
          "1550:         char *ptr;",
          "",
          "[Removed Lines]",
          "1471:  if ( pipe(pipe1) < 0  ||  pipe(pipe2) < 0 ) {",
          "1472:   ci_debug_printf(0, \"ERROR create_pipe: unable to open pipe, disabling call to %s.\\n\", command);",
          "1473:   perror(\"pipe\");",
          "1474:   usepipe = 0;",
          "1475:  } else {",
          "1476:   if ( (pid = fork()) == -1) {",
          "1477:    ci_debug_printf(0, \"ERROR create_pipe: unable to fork, disabling call to %s.\\n\", command);",
          "1478:    usepipe = 0;",
          "1479:   } else {",
          "1480:    if(pid == 0) {",
          "1481:     close(pipe1[1]);",
          "1482:     dup2(pipe1[0],0);",
          "1483:     close(pipe2[0]);",
          "1484:     dup2(pipe2[1],1);",
          "1485:     setsid();",
          "1487:     execlp(command,(char *)basename(command),(char  *)0);",
          "1488:     exit(EXIT_SUCCESS);",
          "1489:     return(0);",
          "1490:    } else {",
          "1491:     close(pipe1[0]);",
          "1492:     sgfpw = fdopen(pipe1[1], \"w\");",
          "1493:     if (!sgfpw) {",
          "1494:        ci_debug_printf(0, \"ERROR create_pipe: unable to fopen command's child stdin, disabling it.\\n\");",
          "1495:      usepipe = 0;",
          "1496:     } else {",
          "1498:      if (setvbuf (sgfpw, (char *)NULL, _IOLBF, 0)  != 0)",
          "1499:       ci_debug_printf(1, \"DEBUG create_pipe: unable to line buffering pipe.\\n\");",
          "1500:      sgfpr = fdopen(pipe2[0], \"r\");",
          "1501:      if(!sgfpr) {",
          "1502:       ci_debug_printf(0, \"ERROR create_pipe: unable to fopen command's child stdout, disabling it.\\n\");",
          "1503:       usepipe = 0;",
          "1504:      } else {",
          "1505:       ci_debug_printf(1, \"DEBUG create_pipe: bidirectional pipe to %s childs ready...\\n\", command);",
          "1506:       usepipe = 1;",
          "1507:      }",
          "1508:     }",
          "1509:    }",
          "1510:   }",
          "1511:  }",
          "1517: int",
          "1518: dconnect ()",
          "1520:   struct sockaddr_un userver;",
          "1521:   int asockd;",
          "1524:   memset ((char *) &userver, 0, sizeof (userver));",
          "1526:   ci_debug_printf(1, \"dconnect: entering.\\n\");",
          "1527:   if (clamd_local != NULL) {",
          "1528:       userver.sun_family = AF_UNIX;",
          "1529:       xstrncpy (userver.sun_path, clamd_local, sizeof(userver.sun_path));",
          "1530:       if ((asockd = socket (AF_UNIX, SOCK_STREAM, 0)) < 0) {",
          "1531:           ci_debug_printf(0, \"ERROR dconnect: Can't bind local socket on %s.\\n\", clamd_local);",
          "1532:           return -1;",
          "1533:       }",
          "1534:       if (connect (asockd, (struct sockaddr *) &userver, sizeof (struct sockaddr_un)) < 0) {",
          "1535:           close (asockd);",
          "1536:           ci_debug_printf(0, \"ERROR dconnect: Can't connect to clamd on local socket %s.\\n\", clamd_local);",
          "1537:           return -1;",
          "1538:       }",
          "1539:       return asockd;",
          "1543:                 asockd = connectINET(clamd_curr_ip, atoi(clamd_port));",
          "1544:                 if ( asockd != -1 ) {",
          "1545:                    ci_debug_printf(1, \"DEBUG dconnect: Connected to Clamd (%s:%s)\\n\", clamd_curr_ip,clamd_port);",
          "1546:                     return asockd;",
          "1547:                 }",
          "",
          "[Added Lines]",
          "1458:         if ( pipe(pipe1) < 0  ||  pipe(pipe2) < 0 ) {",
          "1459:             ci_debug_printf(0, \"ERROR create_pipe: unable to open pipe, disabling call to %s.\\n\", command);",
          "1460:             perror(\"pipe\");",
          "1461:             usepipe = 0;",
          "1462:         } else {",
          "1463:             if ( (pid = fork()) == -1) {",
          "1464:                 ci_debug_printf(0, \"ERROR create_pipe: unable to fork, disabling call to %s.\\n\", command);",
          "1465:                 usepipe = 0;",
          "1466:             } else {",
          "1467:                 if(pid == 0) {",
          "1468:                     close(pipe1[1]);",
          "1469:                     dup2(pipe1[0],0);",
          "1470:                     close(pipe2[0]);",
          "1471:                     dup2(pipe2[1],1);",
          "1472:                     setsid();",
          "1474:                     execlp(command,(char *)basename(command),(char  *)0);",
          "1475:                     exit(EXIT_SUCCESS);",
          "1476:                     return(0);",
          "1477:                 } else {",
          "1478:                     close(pipe1[0]);",
          "1479:                     sgfpw = fdopen(pipe1[1], \"w\");",
          "1480:                     if (!sgfpw) {",
          "1481:                         ci_debug_printf(0, \"ERROR create_pipe: unable to fopen command's child stdin, disabling it.\\n\");",
          "1482:                         usepipe = 0;",
          "1483:                     } else {",
          "1485:                         if (setvbuf (sgfpw, (char *)NULL, _IOLBF, 0)  != 0)",
          "1486:                             ci_debug_printf(1, \"DEBUG create_pipe: unable to line buffering pipe.\\n\");",
          "1487:                         sgfpr = fdopen(pipe2[0], \"r\");",
          "1488:                         if(!sgfpr) {",
          "1489:                             ci_debug_printf(0, \"ERROR create_pipe: unable to fopen command's child stdout, disabling it.\\n\");",
          "1490:                             usepipe = 0;",
          "1491:                         } else {",
          "1492:                             ci_debug_printf(1, \"DEBUG create_pipe: bidirectional pipe to %s childs ready...\\n\", command);",
          "1493:                             usepipe = 1;",
          "1494:                         }",
          "1495:                     }",
          "1496:                 }",
          "1497:             }",
          "1498:         }",
          "1504: int dconnect()",
          "1506:     struct sockaddr_un userver;",
          "1507:     int asockd;",
          "1509:     memset ((char *) &userver, 0, sizeof (userver));",
          "1511:     ci_debug_printf(1, \"dconnect: entering.\\n\");",
          "1512:     if (clamd_local != NULL) {",
          "1513:         userver.sun_family = AF_UNIX;",
          "1514:         xstrncpy (userver.sun_path, clamd_local, sizeof(userver.sun_path));",
          "1515:         if ((asockd = socket (AF_UNIX, SOCK_STREAM, 0)) < 0) {",
          "1516:             ci_debug_printf(0, \"ERROR dconnect: Can't bind local socket on %s.\\n\", clamd_local);",
          "1517:             return -1;",
          "1518:         }",
          "1519:         if (connect (asockd, (struct sockaddr *) &userver, sizeof (struct sockaddr_un)) < 0) {",
          "1520:             close (asockd);",
          "1521:             ci_debug_printf(0, \"ERROR dconnect: Can't connect to clamd on local socket %s.\\n\", clamd_local);",
          "1522:             return -1;",
          "1523:         }",
          "1524:         return asockd;",
          "1528:             asockd = connectINET(clamd_curr_ip, atoi(clamd_port));",
          "1529:             if ( asockd != -1 ) {",
          "1530:                 ci_debug_printf(1, \"DEBUG dconnect: Connected to Clamd (%s:%s)\\n\", clamd_curr_ip,clamd_port);",
          "1531:                 return asockd;",
          "1532:             }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1552:         xstrncpy(s, clamd_ip, SMALL_CHAR);",
          "1553:         ptr = strtok(s, \",\");",
          "1554:         while (ptr != NULL) {",
          "1564:         }",
          "1565:         return asockd;",
          "1566:         xfree(s);",
          "",
          "[Removed Lines]",
          "1555:                 asockd = connectINET(ptr, atoi(clamd_port));",
          "1556:                 if ( asockd != -1 ) {",
          "1557:                     ci_debug_printf(1, \"DEBUG dconnect: Connected to Clamd (%s:%s)\\n\", ptr,clamd_port);",
          "1559:                     xstrncpy(clamd_curr_ip, ptr, LOW_CHAR);",
          "1560:                     xfree(s);",
          "1561:                     break;",
          "1562:                 }",
          "1563:                 ptr = strtok(NULL, \",\");",
          "",
          "[Added Lines]",
          "1540:             asockd = connectINET(ptr, atoi(clamd_port));",
          "1541:             if ( asockd != -1 ) {",
          "1542:                 ci_debug_printf(1, \"DEBUG dconnect: Connected to Clamd (%s:%s)\\n\", ptr,clamd_port);",
          "1544:                 xstrncpy(clamd_curr_ip, ptr, LOW_CHAR);",
          "1545:                 xfree(s);",
          "1546:                 break;",
          "1547:             }",
          "1548:             ptr = strtok(NULL, \",\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1568:     return 0;",
          "1569: }",
          "1573: }",
          "1577: {",
          "1617: }",
          "",
          "[Removed Lines]",
          "1571: void connect_timeout() {",
          "1575: int",
          "1576: connectINET(char *serverHost, uint16_t serverPort)",
          "1578:         struct sockaddr_in server;",
          "1579:         struct hostent *he;",
          "1580:         int asockd;",
          "1581:  struct sigaction action;",
          "1582:  action.sa_handler = connect_timeout;",
          "1584:         memset ((char *) &server, 0, sizeof (server));",
          "1585:         server.sin_addr.s_addr = inet_addr(serverHost);",
          "1586:         if ((asockd = socket (AF_INET, SOCK_STREAM, 0)) < 0) {",
          "1587:           ci_debug_printf(0, \"ERROR connectINET: Can't create a socket.\\n\");",
          "1588:           return -1;",
          "1589:         }",
          "1591:         server.sin_family = AF_INET;",
          "1592:         server.sin_port = htons(serverPort);",
          "1594:         if ((he = gethostbyname(serverHost)) == 0)",
          "1595:         {",
          "1596:           close(asockd);",
          "1597:           ci_debug_printf(0, \"ERROR connectINET: Can't lookup hostname of %s\\n\", serverHost);",
          "1598:           return -1;",
          "1599:         }",
          "1600:         server.sin_addr = *(struct in_addr *) he->h_addr_list[0];",
          "1601:  sigaction(SIGALRM, &action, NULL);",
          "1602:  alarm(timeout);",
          "1604:         if (connect (asockd, (struct sockaddr *) &server, sizeof (struct sockaddr_in)) < 0) {",
          "1605:           close (asockd);",
          "1606:           ci_debug_printf(0, \"ERROR connectINET: Can't connect on %s:%d.\\n\", serverHost,serverPort);",
          "1607:           return -1;",
          "1608:         }",
          "1609:  int err = errno;",
          "1610:  alarm(0);",
          "1611:  if (err == EINTR) {",
          "1612:           close(asockd);",
          "1613:    ci_debug_printf(0, \"ERROR connectINET: Timeout connecting to clamd on %s:%d.\\n\", serverHost,serverPort);",
          "1614:  }",
          "1616:         return asockd;",
          "",
          "[Added Lines]",
          "1556: void connect_timeout()",
          "1557: {",
          "1561: int connectINET(char *serverHost, uint16_t serverPort)",
          "1563:     struct sockaddr_in server;",
          "1564:     struct hostent *he;",
          "1565:     int asockd;",
          "1566:     struct sigaction action;",
          "1567:     action.sa_handler = connect_timeout;",
          "1569:     memset ((char *) &server, 0, sizeof (server));",
          "1570:     server.sin_addr.s_addr = inet_addr(serverHost);",
          "1571:     if ((asockd = socket (AF_INET, SOCK_STREAM, 0)) < 0) {",
          "1572:         ci_debug_printf(0, \"ERROR connectINET: Can't create a socket.\\n\");",
          "1573:         return -1;",
          "1574:     }",
          "1576:     server.sin_family = AF_INET;",
          "1577:     server.sin_port = htons(serverPort);",
          "1579:     if ((he = gethostbyname(serverHost)) == 0)",
          "1580:     {",
          "1581:         close(asockd);",
          "1582:         ci_debug_printf(0, \"ERROR connectINET: Can't lookup hostname of %s\\n\", serverHost);",
          "1583:         return -1;",
          "1584:     }",
          "1585:     server.sin_addr = *(struct in_addr *) he->h_addr_list[0];",
          "1586:     sigaction(SIGALRM, &action, NULL);",
          "1587:     alarm(timeout);",
          "1589:     if (connect (asockd, (struct sockaddr *) &server, sizeof (struct sockaddr_in)) < 0) {",
          "1590:         close (asockd);",
          "1591:         ci_debug_printf(0, \"ERROR connectINET: Can't connect on %s:%d.\\n\", serverHost,serverPort);",
          "1592:         return -1;",
          "1593:     }",
          "1594:     int err = errno;",
          "1595:     alarm(0);",
          "1596:     if (err == EINTR) {",
          "1597:         close(asockd);",
          "1598:         ci_debug_printf(0, \"ERROR connectINET: Timeout connecting to clamd on %s:%d.\\n\", serverHost,serverPort);",
          "1599:     }",
          "1601:     return asockd;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1626: {",
          "1654: }",
          "1658: {",
          "",
          "[Removed Lines]",
          "1624: char *",
          "1625: replace(const char *s, const char *old, const char *new)",
          "1627:  char *ret;",
          "1628:  int i, count = 0;",
          "1629:  size_t newlen = strlen(new);",
          "1630:  size_t oldlen = strlen(old);",
          "1632:  for (i = 0; s[i] != '\\0'; i++) {",
          "1633:   if (strstr(&s[i], old) == &s[i]) {",
          "1634:    count++;",
          "1635:    i += oldlen - 1;",
          "1636:   }",
          "1637:  }",
          "1638:  ret = malloc(i + 1 + count * (newlen - oldlen));",
          "1639:  if (ret != NULL) {",
          "1640:   i = 0;",
          "1641:   while (*s) {",
          "1642:    if (strstr(s, old) == s) {",
          "1643:     strcpy(&ret[i], new);",
          "1644:     i += newlen;",
          "1645:     s += oldlen;",
          "1646:    } else {",
          "1647:     ret[i++] = *s++;",
          "1648:    }",
          "1649:   }",
          "1650:   ret[i] = '\\0';",
          "1651:  }",
          "1653:  return ret;",
          "1656: int",
          "1657: squidclamav_safebrowsing(ci_request_t * req, char *url, char *clientip, char *username)",
          "1659:      av_req_data_t *data = ci_service_data(req);",
          "1660:      char cbuff[MAX_URL_SIZE+60];",
          "1661:      char clbuf[SMALL_BUFF];",
          "1663:      ssize_t ret;",
          "1664:      int nbread = 0;",
          "1665:      int sockd;",
          "1667:      ci_debug_printf(2, \"DEBUG squidclamav_safebrowsing: looking for Clamav SafeBrowsing check.\\n\");",
          "1670:      if ((sockd = dconnect ()) < 0) {",
          "1671:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't connect to Clamd daemon.\\n\");",
          "1672:  return 0;",
          "1673:      }",
          "1674:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Sending zINSTREAM command to clamd.\\n\");",
          "1676:      if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "1677:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to Clamd socket.\\n\");",
          "1678:  close(sockd);",
          "1679:  return 0;",
          "1680:      }",
          "1682:      ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Ok connected to clamd socket.\\n\");",
          "1684:      ci_debug_printf(1, \"DEBUG: squidclamav_safebrowsing: Scanning url for Malware now\\n\");",
          "1685:      uint32_t buf[BUFSIZ/sizeof(uint32_t)];",
          "1686:      strcpy(cbuff, \"From test\\n\\n<a href=\");",
          "1687:      strcat(cbuff, url);",
          "1688:      strcat(cbuff, \">squidclamav-safebrowsing-test</a>\\n\");",
          "1689:      size_t sfsize = 0;",
          "1690:      sfsize = strlen(cbuff);",
          "1691:      buf[0] = htonl(sfsize);",
          "1692:      memcpy(&buf[1],(const char*) cbuff, sfsize);",
          "1693:      ci_debug_printf(3, \"DEBUG: squidclamav_safebrowsing: sending %s\\n\", cbuff);",
          "1694:      ret = sendln (sockd,(const char *) buf, sfsize+sizeof(uint32_t));",
          "1695:      if ( ret <= 0 ) {",
          "1696:  ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to clamd socket.\\n\");",
          "1697:      } else {",
          "1698:       ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: Write to socket\\n\");",
          "1699:       memset(cbuff, 0, sizeof(cbuff));",
          "1701:       ret = sendln (sockd,(const char *) buf, 4);",
          "1702:       if (ret <= 0)",
          "1703:       {",
          "1704:   ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write INSTREAM ending chars to clamd socket.\\n\");",
          "1705:       } else {",
          "1706:        memset (clbuf, 0, sizeof(clbuf));",
          "1707:        while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "1708:    ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: received from Clamd: %s\\n\", clbuf);",
          "1709:    if (strstr (clbuf, \"FOUND\")) {",
          "1710:     char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "1711:     chomp(clbuf);",
          "1712:     snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&malware=%s\", redirect_url, url, clientip, username, clbuf);",
          "1713:     if (logredir == 0)",
          "1714:        ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1715:     if (logredir)",
          "1716:         ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1718:     data->blocked = 1;",
          "1719:     generate_redirect_page(urlredir, req, data);",
          "1720:     xfree(urlredir);",
          "1721:     return 1;",
          "1722:    }",
          "1723:    memset(clbuf, 0, sizeof(clbuf));",
          "1724:        }",
          "1725:   }",
          "1726:      }",
          "1728:      if (sockd > -1) {",
          "1729:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Closing Clamd connection.\\n\");",
          "1730:  close(sockd);",
          "1731:      }",
          "1733:      ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: No malware found.\\n\");",
          "1735:      return 0;",
          "1736: }",
          "",
          "[Added Lines]",
          "1609: char * replace(const char *s, const char *old, const char *new)",
          "1611:     char *ret;",
          "1612:     int i, count = 0;",
          "1613:     size_t newlen = strlen(new);",
          "1614:     size_t oldlen = strlen(old);",
          "1616:     for (i = 0; s[i] != '\\0'; i++) {",
          "1617:         if (strstr(&s[i], old) == &s[i]) {",
          "1618:             count++;",
          "1619:             i += oldlen - 1;",
          "1620:         }",
          "1621:     }",
          "1622:     ret = malloc(i + 1 + count * (newlen - oldlen));",
          "1623:     if (ret != NULL) {",
          "1624:         i = 0;",
          "1625:         while (*s) {",
          "1626:             if (strstr(s, old) == s) {",
          "1627:                 strcpy(&ret[i], new);",
          "1628:                 i += newlen;",
          "1629:                 s += oldlen;",
          "1630:             } else {",
          "1631:                 ret[i++] = *s++;",
          "1632:             }",
          "1633:         }",
          "1634:         ret[i] = '\\0';",
          "1635:     }",
          "1637:     return ret;",
          "1640: int squidclamav_safebrowsing(ci_request_t * req, char *url, char *clientip,",
          "1641:                              char *username)",
          "1643:     av_req_data_t *data = ci_service_data(req);",
          "1644:     char cbuff[MAX_URL_SIZE+60];",
          "1645:     char clbuf[SMALL_BUFF];",
          "1647:     ssize_t ret;",
          "1648:     int nbread = 0;",
          "1649:     int sockd;",
          "1651:     ci_debug_printf(2, \"DEBUG squidclamav_safebrowsing: looking for Clamav SafeBrowsing check.\\n\");",
          "1654:     if ((sockd = dconnect ()) < 0) {",
          "1655:         ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't connect to Clamd daemon.\\n\");",
          "1656:         return 0;",
          "1657:     }",
          "1658:     ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Sending zINSTREAM command to clamd.\\n\");",
          "1660:     if (write(sockd, \"zINSTREAM\", 10) <= 0) {",
          "1661:         ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to Clamd socket.\\n\");",
          "1662:         close(sockd);",
          "1663:         return 0;",
          "1664:     }",
          "1666:     ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Ok connected to clamd socket.\\n\");",
          "1668:     ci_debug_printf(1, \"DEBUG: squidclamav_safebrowsing: Scanning url for Malware now\\n\");",
          "1669:     uint32_t buf[BUFSIZ/sizeof(uint32_t)];",
          "1670:     strcpy(cbuff, \"From test\\n\\n<a href=\");",
          "1671:     strcat(cbuff, url);",
          "1672:     strcat(cbuff, \">squidclamav-safebrowsing-test</a>\\n\");",
          "1673:     size_t sfsize = 0;",
          "1674:     sfsize = strlen(cbuff);",
          "1675:     buf[0] = htonl(sfsize);",
          "1676:     memcpy(&buf[1],(const char*) cbuff, sfsize);",
          "1677:     ci_debug_printf(3, \"DEBUG: squidclamav_safebrowsing: sending %s\\n\", cbuff);",
          "1678:     ret = sendln (sockd,(const char *) buf, sfsize+sizeof(uint32_t));",
          "1679:     if ( ret <= 0 ) {",
          "1680:         ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write to clamd socket.\\n\");",
          "1681:     } else {",
          "1682:         ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: Write to socket\\n\");",
          "1683:         memset(cbuff, 0, sizeof(cbuff));",
          "1685:         ret = sendln (sockd,(const char *) buf, 4);",
          "1686:         if (ret <= 0)",
          "1687:         {",
          "1688:             ci_debug_printf(0, \"ERROR squidclamav_safebrowsing: Can't write INSTREAM ending chars to clamd socket.\\n\");",
          "1689:         } else {",
          "1690:             memset (clbuf, 0, sizeof(clbuf));",
          "1691:             while ((nbread = read(sockd, clbuf, SMALL_BUFF)) > 0) {",
          "1692:                 ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: received from Clamd: %s\\n\", clbuf);",
          "1693:                 if (strstr (clbuf, \"FOUND\")) {",
          "1694:                     char *urlredir = (char *) malloc( sizeof(char)*MAX_URL_SIZE );",
          "1695:                     chomp(clbuf);",
          "1696:                     snprintf(urlredir, MAX_URL_SIZE, \"%s?url=%s&source=%s&user=%s&malware=%s\", redirect_url, url, clientip, username, clbuf);",
          "1697:                     if (logredir == 0)",
          "1698:                         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1699:                     if (logredir)",
          "1700:                         ci_debug_printf(0, \"INFO squidclamav_safebrowsing: Malware redirection: %s.\\n\", urlredir);",
          "1702:                     data->blocked = 1;",
          "1703:                     generate_redirect_page(urlredir, req, data);",
          "1704:                     xfree(urlredir);",
          "1705:                     return 1;",
          "1706:                 }",
          "1707:                 memset(clbuf, 0, sizeof(clbuf));",
          "1708:             }",
          "1709:         }",
          "1710:     }",
          "1712:     if (sockd > -1) {",
          "1713:         ci_debug_printf(1, \"DEBUG squidclamav_safebrowsing: Closing Clamd connection.\\n\");",
          "1714:         close(sockd);",
          "1715:     }",
          "1717:     ci_debug_printf(3, \"DEBUG squidclamav_safebrowsing: No malware found.\\n\");",
          "1719:     return 0;",
          "1720: }",
          "",
          "---------------"
        ],
        "src/squidclamav.h||src/squidclamav.h": [
          "File: src/squidclamav.h -> src/squidclamav.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #define MAX_LOGIN_SZ 128",
          "71: struct IN_BUFF {",
          "78: };",
          "80: #define WHITELIST    1",
          "",
          "[Removed Lines]",
          "72:   char url[MAX_URL];",
          "73:   char src_address[1050];",
          "74:   char ident[MAX_LOGIN_SZ];",
          "75:   char method[LOW_CHAR];",
          "76:   char ipaddress[16];",
          "77:   char fqdn[1024];",
          "",
          "[Added Lines]",
          "72:     char url[MAX_URL];",
          "73:     char src_address[1050];",
          "74:     char ident[MAX_LOGIN_SZ];",
          "75:     char method[LOW_CHAR];",
          "76:     char ipaddress[16];",
          "77:     char fqdn[1024];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: struct IP {",
          "96: };",
          "98: typedef struct {",
          "103: } SCPattern;",
          "105: int add_pattern(char *s);",
          "",
          "[Removed Lines]",
          "93:   short first;",
          "94:   short second;",
          "95:   short third;",
          "99:   char *pattern;",
          "100:   int type;",
          "101:   int flag;",
          "102:   regex_t regexv;",
          "",
          "[Added Lines]",
          "93:     short first;",
          "94:     short second;",
          "95:     short third;",
          "99:     char *pattern;",
          "100:     int type;",
          "101:     int flag;",
          "102:     regex_t regexv;",
          "",
          "---------------"
        ]
      }
    }
  ]
}