{
  "cve_id": "CVE-2015-3181",
  "cve_desc": "files/externallib.php in Moodle through 2.5.9, 2.6.x before 2.6.11, 2.7.x before 2.7.8, and 2.8.x before 2.8.6 does not consider the moodle/user:manageownfiles capability before approving a private-file upload, which allows remote authenticated users to bypass intended file-management restrictions by using web services to perform uploads after this capability has been revoked.",
  "repo": "moodle/moodle",
  "patch_hash": "57d9a750e3da6708dba13513e9b05e84a895ad9f",
  "patch_info": {
    "commit_hash": "57d9a750e3da6708dba13513e9b05e84a895ad9f",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/57d9a750e3da6708dba13513e9b05e84a895ad9f",
    "files": [
      "files/externallib.php"
    ],
    "message": "MDL-49994 files: Prevent to browse private files when are disabled",
    "before_after_code_files": [
      "files/externallib.php||files/externallib.php"
    ]
  },
  "patch_diff": {
    "files/externallib.php||files/externallib.php": [
      "File: files/externallib.php -> files/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:         $context = self::get_context_from_params($fileinfo);",
      "337:         self::validate_context($context);",
      "338:         if (($fileinfo['component'] == 'user' and $fileinfo['filearea'] == 'private')) {",
      "339:             debugging('Uploading directly to user private files area is deprecated. Upload to a draft area and then move the files with core_user::add_user_private_files');",
      "340:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:             require_capability('moodle/user:manageownfiles', $context);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f23e9b6ba49a0cd378b9be1b697307afbe0fed8c",
      "candidate_info": {
        "commit_hash": "f23e9b6ba49a0cd378b9be1b697307afbe0fed8c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f23e9b6ba49a0cd378b9be1b697307afbe0fed8c",
        "files": [
          "admin/webservice/testclient_forms.php",
          "course/externallib.php",
          "enrol/externallib.php",
          "enrol/manual/db/services.php",
          "enrol/manual/externallib.php",
          "files/externallib.php",
          "files/tests/externallib_test.php",
          "grade/externallib.php",
          "group/externallib.php",
          "lang/en/error.php",
          "lib/db/services.php",
          "lib/db/upgrade.php",
          "message/externallib.php",
          "mod/forum/db/services.php",
          "mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php",
          "notes/externallib.php",
          "user/externallib.php",
          "user/tests/externallib_test.php",
          "version.php",
          "webservice/externallib.php",
          "webservice/lib.php",
          "webservice/renderer.php",
          "webservice/upgrade.txt",
          "webservice/upload.php"
        ],
        "message": "MDL-49414 webservices: Remove deprecated functions",
        "before_after_code_files": [
          "admin/webservice/testclient_forms.php||admin/webservice/testclient_forms.php",
          "course/externallib.php||course/externallib.php",
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/manual/db/services.php||enrol/manual/dservices.php",
          "enrol/manual/externallib.php||enrol/manual/externallib.php",
          "files/externallib.php||files/externallib.php",
          "files/tests/externallib_test.php||files/tests/externallib_test.php",
          "grade/externallib.php||grade/externallib.php",
          "group/externallib.php||group/externallib.php",
          "lang/en/error.php||lang/en/error.php",
          "lib/db/services.php||lidservices.php",
          "lib/db/upgrade.php||lidupgrade.php",
          "message/externallib.php||message/externallib.php",
          "mod/forum/db/services.php||mod/forum/dservices.php",
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php",
          "user/externallib.php||user/externallib.php",
          "user/tests/externallib_test.php||user/tests/externallib_test.php",
          "version.php||version.php",
          "webservice/externallib.php||webservice/externallib.php",
          "webservice/lib.php||webservice/lib.php",
          "webservice/renderer.php||webservice/renderer.php",
          "webservice/upload.php||webservice/upload.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "files/externallib.php||files/externallib.php"
          ],
          "candidate": [
            "files/externallib.php||files/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/webservice/testclient_forms.php||admin/webservice/testclient_forms.php": [
          "File: admin/webservice/testclient_forms.php -> admin/webservice/testclient_forms.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "31: class moodle_user_create_users_form extends moodleform {",
          "32:     public function definition() {",
          "33:         global $CFG;",
          "35:         $mform = $this->_form;",
          "38:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "41:         $data = $this->_customdata;",
          "42:         if ($data['authmethod'] == 'simple') {",
          "43:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "44:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "45:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "46:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "47:         } else if ($data['authmethod'] == 'token') {",
          "48:             $mform->addElement('text', 'token', 'token');",
          "49:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "50:         }",
          "52:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "53:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "56:         $mform->addElement('text', 'username', 'username');",
          "57:         $mform->setType('username', core_user::get_property_type('username'));",
          "58:         $mform->addElement('text', 'password', 'password');",
          "59:         $mform->setType('password', core_user::get_property_type('password'));",
          "60:         $mform->addElement('text', 'firstname', 'firstname');",
          "61:         $mform->setType('firstname', core_user::get_property_type('firstname'));",
          "62:         $mform->addElement('text', 'lastname', 'lastname');",
          "63:         $mform->setType('lastname', core_user::get_property_type('lastname'));",
          "64:         $mform->addElement('text', 'email', 'email');",
          "65:         $mform->setType('email', core_user::get_property_type('email'));",
          "67:         $mform->addElement('text', 'customfieldtype', 'customfieldtype');",
          "68:         $mform->setType('customfieldtype', PARAM_RAW);",
          "69:         $mform->addElement('text', 'customfieldvalue', 'customfieldvalue');",
          "70:         $mform->setType('customfieldvalue', PARAM_RAW);",
          "72:         $mform->addElement('hidden', 'function');",
          "73:         $mform->setType('function', PARAM_PLUGIN);",
          "75:         $mform->addElement('hidden', 'protocol');",
          "76:         $mform->setType('protocol', PARAM_ALPHA);",
          "80:         $mform->addElement('static', 'warning', '', get_string('executewarnign', 'webservice'));",
          "82:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "83:     }",
          "85:     public function get_params() {",
          "86:         if (!$data = $this->get_data()) {",
          "87:             return null;",
          "88:         }",
          "91:         if (!empty($data->customfieldtype)) {",
          "92:             $data->customfields = array(array('type' => $data->customfieldtype, 'value' => $data->customfieldvalue));",
          "93:         }",
          "96:         unset($data->submitbutton);",
          "97:         unset($data->protocol);",
          "98:         unset($data->function);",
          "99:         unset($data->wsusername);",
          "100:         unset($data->wspassword);",
          "101:         unset($data->token);",
          "102:         unset($data->authmethod);",
          "103:         unset($data->customfieldtype);",
          "104:         unset($data->customfieldvalue);",
          "106:         $params = array();",
          "107:         $params['users'] = array();",
          "108:         $params['users'][] = (array)$data;",
          "110:         return $params;",
          "111:     }",
          "112: }",
          "115: class moodle_user_update_users_form extends moodleform {",
          "116:     public function definition() {",
          "117:         global $CFG;",
          "119:         $mform = $this->_form;",
          "122:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "125:         $data = $this->_customdata;",
          "126:         if ($data['authmethod'] == 'simple') {",
          "127:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "128:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "129:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "130:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "131:         } else if ($data['authmethod'] == 'token') {",
          "132:             $mform->addElement('text', 'token', 'token');",
          "133:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "134:         }",
          "136:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "137:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "140:         $mform->addElement('text', 'id', 'id');",
          "141:         $mform->addRule('id', get_string('required'), 'required', null, 'client');",
          "142:         $mform->setType('id', core_user::get_property_type('id'));",
          "143:         $mform->addElement('text', 'username', 'username');",
          "144:         $mform->setType('username', core_user::get_property_type('username'));",
          "145:         $mform->addElement('text', 'password', 'password');",
          "146:         $mform->setType('password', core_user::get_property_type('password'));",
          "147:         $mform->addElement('text', 'firstname', 'firstname');",
          "148:         $mform->setType('firstname', core_user::get_property_type('firstname'));",
          "149:         $mform->addElement('text', 'lastname', 'lastname');",
          "150:         $mform->setType('lastname', core_user::get_property_type('lastname'));",
          "151:         $mform->addElement('text', 'email', 'email');",
          "152:         $mform->setType('email', core_user::get_property_type('email'));",
          "155:         $mform->addElement('text', 'customfieldtype', 'customfieldtype');",
          "156:         $mform->setType('customfieldtype', PARAM_RAW);",
          "157:         $mform->addElement('text', 'customfieldvalue', 'customfieldvalue');",
          "158:         $mform->setType('customfieldvalue', PARAM_RAW);",
          "160:         $mform->addElement('hidden', 'function');",
          "161:         $mform->setType('function', PARAM_PLUGIN);",
          "163:         $mform->addElement('hidden', 'protocol');",
          "164:         $mform->setType('protocol', PARAM_ALPHA);",
          "168:         $mform->addElement('static', 'warning', '', get_string('executewarnign', 'webservice'));",
          "170:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "171:     }",
          "173:     public function get_params() {",
          "174:         if (!$data = $this->get_data()) {",
          "175:             return null;",
          "176:         }",
          "179:         if (!empty($data->customfieldtype)) {",
          "180:             $data->customfields = array(array('type' => $data->customfieldtype, 'value' => $data->customfieldvalue));",
          "181:         }",
          "184:         unset($data->submitbutton);",
          "185:         unset($data->protocol);",
          "186:         unset($data->function);",
          "187:         unset($data->wsusername);",
          "188:         unset($data->wspassword);",
          "189:         unset($data->token);",
          "190:         unset($data->authmethod);",
          "191:         unset($data->customfieldtype);",
          "192:         unset($data->customfieldvalue);",
          "194:         foreach($data as $key => $value) {",
          "195:             if (empty($value)) {",
          "196:                  unset($data->{$key});",
          "197:             }",
          "198:         }",
          "200:         $params = array();",
          "201:         $params['users'] = array();",
          "202:         $params['users'][] = (array)$data;",
          "204:         return $params;",
          "205:     }",
          "206: }",
          "209: class moodle_user_delete_users_form extends moodleform {",
          "210:     public function definition() {",
          "211:         global $CFG;",
          "213:         $mform = $this->_form;",
          "216:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "219:         $data = $this->_customdata;",
          "220:         if ($data['authmethod'] == 'simple') {",
          "221:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "222:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "223:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "224:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "225:         } else if ($data['authmethod'] == 'token') {",
          "226:             $mform->addElement('text', 'token', 'token');",
          "227:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "228:         }",
          "230:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "231:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "234:         $mform->addElement('text', 'userids[0]', 'userids[0]');",
          "235:         $mform->addElement('text', 'userids[1]', 'userids[1]');",
          "236:         $mform->addElement('text', 'userids[2]', 'userids[2]');",
          "237:         $mform->addElement('text', 'userids[3]', 'userids[3]');",
          "238:         $mform->setType('userids', core_user::get_property_type('id'));",
          "241:         $mform->addElement('hidden', 'function');",
          "242:         $mform->setType('function', PARAM_PLUGIN);",
          "244:         $mform->addElement('hidden', 'protocol');",
          "245:         $mform->setType('protocol', PARAM_ALPHA);",
          "247:         $mform->addElement('static', 'warning', '', get_string('executewarnign', 'webservice'));",
          "249:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "250:     }",
          "252:     public function get_params() {",
          "253:         if (!$data = $this->get_data()) {",
          "254:             return null;",
          "255:         }",
          "257:         unset($data->submitbutton);",
          "258:         unset($data->protocol);",
          "259:         unset($data->function);",
          "260:         unset($data->wsusername);",
          "261:         unset($data->wspassword);",
          "262:         unset($data->token);",
          "263:         unset($data->authmethod);",
          "266:         $params = array();",
          "267:         $params['userids'] = array();",
          "268:         for ($i=0; $i<10; $i++) {",
          "269:             if (empty($data->userids[$i])) {",
          "270:                 continue;",
          "271:             }",
          "272:             $params['userids'][] = $data->userids[$i];",
          "273:         }",
          "276:         return $params;",
          "277:     }",
          "278: }",
          "281: class moodle_user_get_users_by_id_form extends moodleform {",
          "282:     public function definition() {",
          "283:         global $CFG;",
          "285:         $mform = $this->_form;",
          "288:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "291:         $data = $this->_customdata;",
          "292:         if ($data['authmethod'] == 'simple') {",
          "293:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "294:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "295:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "296:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "297:         } else if ($data['authmethod'] == 'token') {",
          "298:             $mform->addElement('text', 'token', 'token');",
          "299:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "300:         }",
          "302:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "303:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "306:         $mform->addElement('text', 'userids[0]', 'userids[0]');",
          "307:         $mform->addElement('text', 'userids[1]', 'userids[1]');",
          "308:         $mform->addElement('text', 'userids[2]', 'userids[2]');",
          "309:         $mform->addElement('text', 'userids[3]', 'userids[3]');",
          "310:         $mform->setType('userids', core_user::get_property_type('id'));",
          "313:         $mform->addElement('hidden', 'function');",
          "314:         $mform->setType('function', PARAM_PLUGIN);",
          "316:         $mform->addElement('hidden', 'protocol');",
          "317:         $mform->setType('protocol', PARAM_ALPHA);",
          "321:         $mform->addElement('static', 'warning', '', get_string('executewarnign', 'webservice'));",
          "323:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "324:     }",
          "326:     public function get_params() {",
          "327:         if (!$data = $this->get_data()) {",
          "328:             return null;",
          "329:         }",
          "331:         unset($data->submitbutton);",
          "332:         unset($data->protocol);",
          "333:         unset($data->function);",
          "334:         unset($data->wsusername);",
          "335:         unset($data->wspassword);",
          "336:         unset($data->token);",
          "337:         unset($data->authmethod);",
          "340:         $params = array();",
          "341:         $params['userids'] = array();",
          "342:         for ($i=0; $i<10; $i++) {",
          "343:             if (empty($data->userids[$i])) {",
          "344:                 continue;",
          "345:             }",
          "346:             $params['userids'][] = $data->userids[$i];",
          "347:         }",
          "350:         return $params;",
          "351:     }",
          "352: }",
          "354: class moodle_group_create_groups_form extends moodleform {",
          "355:     public function definition() {",
          "356:         global $CFG;",
          "358:         $mform = $this->_form;",
          "361:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "364:         $data = $this->_customdata;",
          "365:         if ($data['authmethod'] == 'simple') {",
          "366:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "367:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "368:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "369:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "370:         } else if ($data['authmethod'] == 'token') {",
          "371:             $mform->addElement('text', 'token', 'token');",
          "372:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "373:         }",
          "375:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "376:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "378:         $mform->addElement('text', 'courseid', 'courseid');",
          "379:         $mform->setType('courseid', PARAM_INT);",
          "380:         $mform->addElement('text', 'name', 'name');",
          "381:         $mform->setType('name', PARAM_TEXT);",
          "382:         $mform->addElement('text', 'description', 'description');",
          "383:         $mform->setType('description', PARAM_TEXT);",
          "384:         $mform->addElement('text', 'enrolmentkey', 'enrolmentkey');",
          "385:         $mform->setType('enrolmentkey', PARAM_RAW);",
          "387:         $mform->addElement('hidden', 'function');",
          "388:         $mform->setType('function', PARAM_PLUGIN);",
          "390:         $mform->addElement('hidden', 'protocol');",
          "391:         $mform->setType('protocol', PARAM_ALPHA);",
          "395:         $mform->addElement('static', 'warning', '', get_string('executewarnign', 'webservice'));",
          "397:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "398:     }",
          "400:     public function get_params() {",
          "401:         if (!$data = $this->get_data()) {",
          "402:             return null;",
          "403:         }",
          "405:         unset($data->submitbutton);",
          "406:         unset($data->protocol);",
          "407:         unset($data->function);",
          "408:         unset($data->wsusername);",
          "409:         unset($data->wspassword);",
          "410:         unset($data->token);",
          "411:         unset($data->authmethod);",
          "413:         $params = array();",
          "414:         $params['groups'] = array();",
          "415:         $params['groups'][] = (array)$data;",
          "417:         return $params;",
          "418:     }",
          "419: }",
          "421: class moodle_group_get_groups_form extends moodleform {",
          "422:     public function definition() {",
          "423:         global $CFG;",
          "425:         $mform = $this->_form;",
          "427:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "430:         $data = $this->_customdata;",
          "431:         if ($data['authmethod'] == 'simple') {",
          "432:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "433:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "434:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "435:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "436:         } else if ($data['authmethod'] == 'token') {",
          "437:             $mform->addElement('text', 'token', 'token');",
          "438:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "439:         }",
          "441:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "442:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "443:         $mform->addElement('text', 'groupids[0]', 'groupids[0]');",
          "444:         $mform->addElement('text', 'groupids[1]', 'groupids[1]');",
          "445:         $mform->addElement('text', 'groupids[2]', 'groupids[2]');",
          "446:         $mform->addElement('text', 'groupids[3]', 'groupids[3]');",
          "447:         $mform->setType('groupids', PARAM_INT);",
          "449:         $mform->addElement('hidden', 'function');",
          "450:         $mform->setType('function', PARAM_PLUGIN);",
          "452:         $mform->addElement('hidden', 'protocol');",
          "453:         $mform->setType('protocol', PARAM_ALPHA);",
          "455:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "456:     }",
          "458:     public function get_params() {",
          "459:         if (!$data = $this->get_data()) {",
          "460:             return null;",
          "461:         }",
          "463:         unset($data->submitbutton);",
          "464:         unset($data->protocol);",
          "465:         unset($data->function);",
          "466:         unset($data->wsusername);",
          "467:         unset($data->wspassword);",
          "468:         unset($data->token);",
          "469:         unset($data->authmethod);",
          "471:         $params = array();",
          "472:         $params['groupids'] = array();",
          "473:         for ($i=0; $i<10; $i++) {",
          "474:             if (empty($data->groupids[$i])) {",
          "475:                 continue;",
          "476:             }",
          "477:             $params['groupids'][] = $data->groupids[$i];",
          "478:         }",
          "480:         return $params;",
          "481:     }",
          "482: }",
          "484: class moodle_group_get_course_groups_form extends moodleform {",
          "485:     public function definition() {",
          "486:         global $CFG;",
          "488:         $mform = $this->_form;",
          "490:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "493:         $data = $this->_customdata;",
          "494:         if ($data['authmethod'] == 'simple') {",
          "495:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "496:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "497:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "498:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "499:         } else if ($data['authmethod'] == 'token') {",
          "500:             $mform->addElement('text', 'token', 'token');",
          "501:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "502:         }",
          "504:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "505:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "506:         $mform->addElement('text', 'courseid', 'courseid');",
          "508:         $mform->addElement('hidden', 'function');",
          "509:         $mform->setType('function', PARAM_PLUGIN);",
          "511:         $mform->addElement('hidden', 'protocol');",
          "512:         $mform->setType('protocol', PARAM_ALPHA);",
          "514:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "515:     }",
          "517:     public function get_params() {",
          "518:         if (!$data = $this->get_data()) {",
          "519:             return null;",
          "520:         }",
          "522:         unset($data->submitbutton);",
          "523:         unset($data->protocol);",
          "524:         unset($data->function);",
          "525:         unset($data->wsusername);",
          "526:         unset($data->wspassword);",
          "527:         unset($data->token);",
          "528:         unset($data->authmethod);",
          "530:         $params = array();",
          "531:         $params['courseid'] = $data->courseid;",
          "533:         return $params;",
          "534:     }",
          "535: }",
          "537: class moodle_group_delete_groups_form extends moodleform {",
          "538:     public function definition() {",
          "539:         global $CFG;",
          "541:         $mform = $this->_form;",
          "543:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "546:         $data = $this->_customdata;",
          "547:         if ($data['authmethod'] == 'simple') {",
          "548:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "549:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "550:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "551:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "552:         } else if ($data['authmethod'] == 'token') {",
          "553:             $mform->addElement('text', 'token', 'token');",
          "554:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "555:         }",
          "557:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "558:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "559:         $mform->addElement('text', 'groupids[0]', 'groupids[0]');",
          "560:         $mform->addElement('text', 'groupids[1]', 'groupids[1]');",
          "561:         $mform->addElement('text', 'groupids[2]', 'groupids[2]');",
          "562:         $mform->addElement('text', 'groupids[3]', 'groupids[3]');",
          "563:         $mform->setType('groupids', PARAM_INT);",
          "565:         $mform->addElement('hidden', 'function');",
          "566:         $mform->setType('function', PARAM_PLUGIN);",
          "568:         $mform->addElement('hidden', 'protocol');",
          "569:         $mform->setType('protocol', PARAM_ALPHA);",
          "571:         $mform->addElement('static', 'warning', '', get_string('executewarnign', 'webservice'));",
          "573:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "574:     }",
          "576:     public function get_params() {",
          "577:         if (!$data = $this->get_data()) {",
          "578:             return null;",
          "579:         }",
          "581:         unset($data->submitbutton);",
          "582:         unset($data->protocol);",
          "583:         unset($data->function);",
          "584:         unset($data->wsusername);",
          "585:         unset($data->wspassword);",
          "586:         unset($data->token);",
          "587:         unset($data->authmethod);",
          "589:         $params = array();",
          "590:         $params['groupids'] = array();",
          "591:         for ($i=0; $i<10; $i++) {",
          "592:             if (empty($data->groupids[$i])) {",
          "593:                 continue;",
          "594:             }",
          "595:             $params['groupids'][] = $data->groupids[$i];",
          "596:         }",
          "598:         return $params;",
          "599:     }",
          "600: }",
          "602: class moodle_group_get_groupmembers_form extends moodleform {",
          "603:     public function definition() {",
          "604:         global $CFG;",
          "606:         $mform = $this->_form;",
          "608:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "611:         $data = $this->_customdata;",
          "612:         if ($data['authmethod'] == 'simple') {",
          "613:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "614:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "615:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "616:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "617:         } else if ($data['authmethod'] == 'token') {",
          "618:             $mform->addElement('text', 'token', 'token');",
          "619:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "620:         }",
          "622:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "623:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "624:         $mform->addElement('text', 'groupids[0]', 'groupids[0]');",
          "625:         $mform->addElement('text', 'groupids[1]', 'groupids[1]');",
          "626:         $mform->addElement('text', 'groupids[2]', 'groupids[2]');",
          "627:         $mform->addElement('text', 'groupids[3]', 'groupids[3]');",
          "628:         $mform->setType('groupids', PARAM_INT);",
          "630:         $mform->addElement('hidden', 'function');",
          "631:         $mform->setType('function', PARAM_PLUGIN);",
          "633:         $mform->addElement('hidden', 'protocol');",
          "634:         $mform->setType('protocol', PARAM_ALPHA);",
          "636:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "637:     }",
          "639:     public function get_params() {",
          "640:         if (!$data = $this->get_data()) {",
          "641:             return null;",
          "642:         }",
          "644:         unset($data->submitbutton);",
          "645:         unset($data->protocol);",
          "646:         unset($data->function);",
          "647:         unset($data->wsusername);",
          "648:         unset($data->wspassword);",
          "649:         unset($data->token);",
          "650:         unset($data->authmethod);",
          "652:         $params = array();",
          "653:         $params['groupids'] = array();",
          "654:         for ($i=0; $i<10; $i++) {",
          "655:             if (empty($data->groupids[$i])) {",
          "656:                 continue;",
          "657:             }",
          "658:             $params['groupids'][] = $data->groupids[$i];",
          "659:         }",
          "661:         return $params;",
          "662:     }",
          "663: }",
          "665: class moodle_group_add_groupmembers_form extends moodleform {",
          "666:     public function definition() {",
          "667:         global $CFG;",
          "669:         $mform = $this->_form;",
          "671:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "674:         $data = $this->_customdata;",
          "675:         if ($data['authmethod'] == 'simple') {",
          "676:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "677:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "678:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "679:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "680:         } else if ($data['authmethod'] == 'token') {",
          "681:             $mform->addElement('text', 'token', 'token');",
          "682:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "683:         }",
          "685:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "686:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "687:         $mform->addElement('text', 'userid[0]', 'userid[0]');",
          "688:         $mform->addElement('text', 'groupid[0]', 'groupid[0]');",
          "689:         $mform->addElement('text', 'userid[1]', 'userid[1]');",
          "690:         $mform->addElement('text', 'groupid[1]', 'groupid[1]');",
          "691:         $mform->setType('userid', core_user::get_property_type('id'));",
          "692:         $mform->setType('groupids', PARAM_INT);",
          "694:         $mform->addElement('hidden', 'function');",
          "695:         $mform->setType('function', PARAM_PLUGIN);",
          "697:         $mform->addElement('hidden', 'protocol');",
          "698:         $mform->setType('protocol', PARAM_ALPHA);",
          "700:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "701:     }",
          "703:     public function get_params() {",
          "704:         if (!$data = $this->get_data()) {",
          "705:             return null;",
          "706:         }",
          "708:         unset($data->submitbutton);",
          "709:         unset($data->protocol);",
          "710:         unset($data->function);",
          "711:         unset($data->wsusername);",
          "712:         unset($data->wspassword);",
          "713:         unset($data->token);",
          "714:         unset($data->authmethod);",
          "716:         $params = array();",
          "717:         $params['members'] = array();",
          "718:         for ($i=0; $i<10; $i++) {",
          "719:             if (empty($data->groupid[$i]) or empty($data->userid[$i])) {",
          "720:                 continue;",
          "721:             }",
          "722:             $params['members'][] = array('userid'=>$data->userid[$i], 'groupid'=>$data->groupid[$i]);",
          "723:         }",
          "725:         return $params;",
          "726:     }",
          "727: }",
          "729: class moodle_group_delete_groupmembers_form extends moodleform {",
          "730:     public function definition() {",
          "731:         global $CFG;",
          "733:         $mform = $this->_form;",
          "735:         $mform->addElement('header', 'wstestclienthdr', get_string('testclient', 'webservice'));",
          "738:         $data = $this->_customdata;",
          "739:         if ($data['authmethod'] == 'simple') {",
          "740:             $mform->addElement('text', 'wsusername', 'wsusername');",
          "741:             $mform->setType('wsusername', core_user::get_property_type('username'));",
          "742:             $mform->addElement('text', 'wspassword', 'wspassword');",
          "743:             $mform->setType('wspassword', core_user::get_property_type('password'));",
          "744:         } else if ($data['authmethod'] == 'token') {",
          "745:             $mform->addElement('text', 'token', 'token');",
          "746:             $mform->setType('token', PARAM_RAW_TRIMMED);",
          "747:         }",
          "749:         $mform->addElement('hidden', 'authmethod', $data['authmethod']);",
          "750:         $mform->setType('authmethod', core_user::get_property_type('auth'));",
          "751:         $mform->addElement('text', 'userid[0]', 'userid[0]');",
          "752:         $mform->addElement('text', 'groupid[0]', 'groupid[0]');",
          "753:         $mform->addElement('text', 'userid[1]', 'userid[1]');",
          "754:         $mform->addElement('text', 'groupid[1]', 'groupid[1]');",
          "755:         $mform->setType('userid', PARAM_INT);",
          "756:         $mform->setType('groupids', PARAM_INT);",
          "758:         $mform->addElement('hidden', 'function');",
          "759:         $mform->setType('function', PARAM_PLUGIN);",
          "761:         $mform->addElement('hidden', 'protocol');",
          "762:         $mform->setType('protocol', PARAM_ALPHA);",
          "764:         $this->add_action_buttons(true, get_string('execute', 'webservice'));",
          "765:     }",
          "767:     public function get_params() {",
          "768:         if (!$data = $this->get_data()) {",
          "769:             return null;",
          "770:         }",
          "772:         unset($data->submitbutton);",
          "773:         unset($data->protocol);",
          "774:         unset($data->function);",
          "775:         unset($data->wsusername);",
          "776:         unset($data->wspassword);",
          "777:         unset($data->token);",
          "778:         unset($data->authmethod);",
          "780:         $params = array();",
          "781:         $params['members'] = array();",
          "782:         for ($i=0; $i<10; $i++) {",
          "783:             if (empty($data->groupid[$i]) or empty($data->userid[$i])) {",
          "784:                 continue;",
          "785:             }",
          "786:             $params['members'][] = array('userid'=>$data->userid[$i], 'groupid'=>$data->groupid[$i]);",
          "787:         }",
          "789:         return $params;",
          "790:     }",
          "791: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "course/externallib.php||course/externallib.php": [
          "File: course/externallib.php -> course/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2495:     }",
          "2497: }",
          "",
          "[Removed Lines]",
          "2509: class moodle_course_external extends external_api {",
          "2519:     public static function get_courses_parameters() {",
          "2520:         return core_course_external::get_courses_parameters();",
          "2521:     }",
          "2532:     public static function get_courses($options) {",
          "2533:         return core_course_external::get_courses($options);",
          "2534:     }",
          "2544:     public static function get_courses_returns() {",
          "2545:         return core_course_external::get_courses_returns();",
          "2546:     }",
          "2553:     public static function get_courses_is_deprecated() {",
          "2554:         return true;",
          "2555:     }",
          "2565:     public static function create_courses_parameters() {",
          "2566:         return core_course_external::create_courses_parameters();",
          "2567:     }",
          "2578:     public static function create_courses($courses) {",
          "2579:         return core_course_external::create_courses($courses);",
          "2580:     }",
          "2590:     public static function create_courses_returns() {",
          "2591:         return core_course_external::create_courses_returns();",
          "2592:     }",
          "2599:     public static function create_courses_is_deprecated() {",
          "2600:         return true;",
          "2601:     }",
          "2602: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:         return null;",
          "840:     }",
          "841: }",
          "",
          "[Removed Lines]",
          "855: class moodle_enrol_external extends external_api {",
          "866:     public static function get_enrolled_users_parameters() {",
          "867:         return new external_function_parameters(",
          "868:             array(",
          "869:                 'courseid'       => new external_value(PARAM_INT, 'Course id'),",
          "870:                 'withcapability' => new external_value(PARAM_CAPABILITY, 'User should have this capability', VALUE_DEFAULT, null),",
          "871:                 'groupid'        => new external_value(PARAM_INT, 'Group id, null means all groups', VALUE_DEFAULT, null),",
          "872:                 'onlyactive'     => new external_value(PARAM_INT, 'True means only active, false means all participants', VALUE_DEFAULT, 0),",
          "873:             )",
          "874:         );",
          "875:     }",
          "889:     public static function get_enrolled_users($courseid, $withcapability = null, $groupid = null, $onlyactive = false) {",
          "890:         global $DB, $CFG, $USER;",
          "894:         $params = self::validate_parameters(self::get_enrolled_users_parameters(), array(",
          "895:             'courseid'=>$courseid,",
          "896:             'withcapability'=>$withcapability,",
          "897:             'groupid'=>$groupid,",
          "898:             'onlyactive'=>$onlyactive)",
          "899:         );",
          "901:         $coursecontext = context_course::instance($params['courseid'], IGNORE_MISSING);",
          "902:         if ($courseid == SITEID) {",
          "903:             $context = context_system::instance();",
          "904:         } else {",
          "905:             $context = $coursecontext;",
          "906:         }",
          "908:         try {",
          "909:             self::validate_context($context);",
          "910:         } catch (Exception $e) {",
          "911:             $exceptionparam = new stdClass();",
          "912:             $exceptionparam->message = $e->getMessage();",
          "913:             $exceptionparam->courseid = $params['courseid'];",
          "914:             throw new moodle_exception('errorcoursecontextnotvalid' , 'webservice', '', $exceptionparam);",
          "915:         }",
          "917:         if ($courseid == SITEID) {",
          "918:             require_capability('moodle/site:viewparticipants', $context);",
          "919:         } else {",
          "920:             require_capability('moodle/course:viewparticipants', $context);",
          "921:         }",
          "923:         if ($withcapability) {",
          "924:             require_capability('moodle/role:review', $coursecontext);",
          "925:         }",
          "926:         if ($groupid && groups_is_member($groupid)) {",
          "927:             require_capability('moodle/site:accessallgroups', $coursecontext);",
          "928:         }",
          "929:         if ($onlyactive) {",
          "930:             require_capability('moodle/course:enrolreview', $coursecontext);",
          "931:         }",
          "933:         list($sqlparams, $params) =  get_enrolled_sql($coursecontext, $withcapability, $groupid, $onlyactive);",
          "934:         $sql = \"SELECT ue.userid, e.courseid, u.firstname, u.lastname, u.username, c.id as usercontextid",
          "935:                   FROM {user_enrolments} ue",
          "936:                   JOIN {enrol} e ON (e.id = ue.enrolid)",
          "937:                   JOIN {user} u ON (ue.userid = u.id)",
          "938:                   JOIN {context} c ON (u.id = c.instanceid AND contextlevel = \" . CONTEXT_USER . \")",
          "939:                   WHERE e.courseid = :courseid AND ue.userid IN ($sqlparams)",
          "940:                   GROUP BY ue.userid, e.courseid, u.firstname, u.lastname, u.username, c.id\";",
          "941:         $params['courseid'] = $courseid;",
          "942:         $enrolledusers = $DB->get_records_sql($sql, $params);",
          "943:         $result = array();",
          "944:         $isadmin = is_siteadmin($USER);",
          "945:         $canviewfullnames = has_capability('moodle/site:viewfullnames', $context);",
          "946:         foreach ($enrolledusers as $enrolleduser) {",
          "947:             $profilimgurl = moodle_url::make_pluginfile_url($enrolleduser->usercontextid, 'user', 'icon', NULL, '/', 'f1');",
          "948:             $profilimgurlsmall = moodle_url::make_pluginfile_url($enrolleduser->usercontextid, 'user', 'icon', NULL, '/', 'f2');",
          "949:             $resultuser = array(",
          "950:                 'courseid' => $enrolleduser->courseid,",
          "951:                 'userid' => $enrolleduser->userid,",
          "952:                 'fullname' => fullname($enrolleduser),",
          "953:                 'profileimgurl' => $profilimgurl->out(false),",
          "954:                 'profileimgurlsmall' => $profilimgurlsmall->out(false)",
          "955:             );",
          "957:             if ($isadmin) {",
          "958:                 $resultuser['username'] = $enrolleduser->username;",
          "959:             }",
          "961:             if ($isadmin or $canviewfullnames) {",
          "962:                 $resultuser['firstname'] = $enrolleduser->firstname;",
          "963:                 $resultuser['lastname'] = $enrolleduser->lastname;",
          "964:             }",
          "965:             $result[] = $resultuser;",
          "966:         }",
          "968:         return $result;",
          "969:     }",
          "979:     public static function get_enrolled_users_returns() {",
          "980:         return new external_multiple_structure(",
          "981:             new external_single_structure(",
          "982:                 array(",
          "983:                     'courseid' => new external_value(PARAM_INT, 'id of course'),",
          "984:                     'userid' => new external_value(PARAM_INT, 'id of user'),",
          "985:                     'firstname' => new external_value(PARAM_RAW, 'first name of user', VALUE_OPTIONAL),",
          "986:                     'lastname' => new external_value(PARAM_RAW, 'last name of user', VALUE_OPTIONAL),",
          "987:                     'fullname' => new external_value(PARAM_RAW, 'fullname of user'),",
          "988:                     'username' => new external_value(PARAM_RAW, 'username of user', VALUE_OPTIONAL),",
          "989:                     'profileimgurl' => new external_value(PARAM_URL, 'url of the profile image'),",
          "990:                     'profileimgurlsmall' => new external_value(PARAM_URL, 'url of the profile image (small version)')",
          "991:                 )",
          "992:             )",
          "993:         );",
          "994:     }",
          "1001:     public static function get_enrolled_users_is_deprecated() {",
          "1002:         return true;",
          "1003:     }",
          "1013:     public static function get_users_courses_parameters() {",
          "1014:         return core_enrol_external::get_users_courses_parameters();",
          "1015:     }",
          "1027:     public static function get_users_courses($userid) {",
          "1028:         return core_enrol_external::get_users_courses($userid);",
          "1029:     }",
          "1039:     public static function get_users_courses_returns() {",
          "1040:         return core_enrol_external::get_users_courses_returns();",
          "1041:     }",
          "1048:     public static function get_users_courses_is_deprecated() {",
          "1049:         return true;",
          "1050:     }",
          "1060:     public static function role_assign_parameters() {",
          "1061:         return core_role_external::assign_roles_parameters();",
          "1062:     }",
          "1072:     public static function role_assign($assignments) {",
          "1073:         return core_role_external::assign_roles($assignments);",
          "1074:     }",
          "1084:     public static function role_assign_returns() {",
          "1085:         return core_role_external::assign_roles_returns();",
          "1086:     }",
          "1093:     public static function role_assign_is_deprecated() {",
          "1094:         return true;",
          "1095:     }",
          "1105:     public static function role_unassign_parameters() {",
          "1106:         return core_role_external::unassign_roles_parameters();",
          "1107:     }",
          "1117:     public static function role_unassign($unassignments) {",
          "1118:          return core_role_external::unassign_roles($unassignments);",
          "1119:     }",
          "1129:     public static function role_unassign_returns() {",
          "1130:         return core_role_external::unassign_roles_returns();",
          "1131:     }",
          "1138:     public static function role_unassign_is_deprecated() {",
          "1139:         return true;",
          "1140:     }",
          "1141: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enrol/manual/db/services.php||enrol/manual/dservices.php": [
          "File: enrol/manual/db/services.php -> enrol/manual/dservices.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: $functions = array(",
          "38:     'enrol_manual_enrol_users' => array(",
          "39:         'classname'   => 'enrol_manual_external',",
          "40:         'methodname'  => 'enrol_users',",
          "",
          "[Removed Lines]",
          "29:     'moodle_enrol_manual_enrol_users' => array(",
          "30:         'classname'   => 'moodle_enrol_manual_external',",
          "31:         'methodname'  => 'manual_enrol_users',",
          "32:         'classpath'   => 'enrol/manual/externallib.php',",
          "33:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has be renamed as enrol_manual_enrol_users()',",
          "34:         'capabilities'=> 'enrol/manual:enrol',",
          "35:         'type'        => 'write',",
          "36:     ),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enrol/manual/externallib.php||enrol/manual/externallib.php": [
          "File: enrol/manual/externallib.php -> enrol/manual/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     }",
          "228: }",
          "",
          "[Removed Lines]",
          "240: class moodle_enrol_manual_external extends external_api {",
          "250:     public static function manual_enrol_users_parameters() {",
          "251:         return enrol_manual_external::enrol_users_parameters();",
          "252:     }",
          "263:     public static function manual_enrol_users($enrolments) {",
          "264:         return enrol_manual_external::enrol_users($enrolments);",
          "265:     }",
          "275:     public static function manual_enrol_users_returns() {",
          "276:         return enrol_manual_external::enrol_users_returns();",
          "277:     }",
          "284:     public static function manual_enrol_users_is_deprecated() {",
          "285:         return true;",
          "286:     }",
          "287: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "files/externallib.php||files/externallib.php": [
          "File: files/externallib.php -> files/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:             $filepath = '/';",
          "308:         }",
          "313:         } else {",
          "314:             $component = 'user';",
          "315:             $filearea = $fileinfo['filearea'];",
          "",
          "[Removed Lines]",
          "311:         if (!($fileinfo['component'] == 'user' and in_array($fileinfo['filearea'], array('private', 'draft')))) {",
          "312:             throw new coding_exception('File can be uploaded to user private or draft areas only');",
          "",
          "[Added Lines]",
          "311:         if (!($fileinfo['component'] == 'user' and $fileinfo['filearea'] == 'draft')) {",
          "312:             throw new coding_exception('File can be uploaded to user draft area only');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:         $context = self::get_context_from_params($fileinfo);",
          "337:         self::validate_context($context);",
          "338:         if (($fileinfo['component'] == 'user' and $fileinfo['filearea'] == 'private')) {",
          "341:         }",
          "343:         $browser = get_file_browser();",
          "",
          "[Removed Lines]",
          "339:             require_capability('moodle/user:manageownfiles', $context);",
          "340:             debugging('Uploading directly to user private files area is deprecated. Upload to a draft area and then move the files with core_user::add_user_private_files');",
          "",
          "[Added Lines]",
          "339:             throw new moodle_exception('privatefilesupload');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:         );",
          "387:     }",
          "388: }",
          "",
          "[Removed Lines]",
          "400: class moodle_file_external extends external_api {",
          "410:     public static function get_files_parameters() {",
          "411:         return core_files_external::get_files_parameters();",
          "412:     }",
          "431:     public static function get_files($contextid, $component, $filearea, $itemid, $filepath, $filename, $modified = null,",
          "432:                                      $contextlevel = null, $instanceid = null) {",
          "433:         return core_files_external::get_files($contextid, $component, $filearea, $itemid, $filepath, $filename,",
          "434:             $modified, $contextlevel, $instanceid);",
          "435:     }",
          "445:     public static function get_files_returns() {",
          "446:         return core_files_external::get_files_returns();",
          "447:     }",
          "454:     public static function get_files_is_deprecated() {",
          "455:         return true;",
          "456:     }",
          "466:     public static function upload_parameters() {",
          "467:         return core_files_external::upload_parameters();",
          "468:     }",
          "487:     public static function upload($contextid, $component, $filearea, $itemid, $filepath, $filename, $filecontent, $contextlevel, $instanceid) {",
          "488:         return core_files_external::upload($contextid, $component, $filearea, $itemid, $filepath, $filename,",
          "489:             $filecontent, $contextlevel, $instanceid);",
          "490:     }",
          "500:     public static function upload_returns() {",
          "501:         return core_files_external::upload_returns();",
          "502:     }",
          "509:     public static function upload_is_deprecated() {",
          "510:         return true;",
          "511:     }",
          "513: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "files/tests/externallib_test.php||files/tests/externallib_test.php": [
          "File: files/tests/externallib_test.php -> files/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:         $context = context_user::instance($USER->id);",
          "112:         $contextid = $context->id;",
          "113:         $component = \"backup\";",
          "115:         $itemid = 0;",
          "116:         $filepath = \"/\";",
          "117:         $filename = \"Simple3.txt\";",
          "",
          "[Removed Lines]",
          "114:         $filearea = \"private\";",
          "",
          "[Added Lines]",
          "114:         $filearea = \"draft\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:         $this->assertNotEmpty($file);",
          "182:     }",
          "",
          "[Removed Lines]",
          "152:         $this->assertNotEmpty($file);",
          "153:     }",
          "158:     public function test_upload_without_new_param() {",
          "159:         global $USER;",
          "161:         $this->resetAfterTest();",
          "162:         $this->setAdminUser();",
          "163:         $context = context_user::instance($USER->id);",
          "164:         $contextid = $context->id;",
          "165:         $component = \"user\";",
          "166:         $filearea = \"private\";",
          "167:         $itemid = 0;",
          "168:         $filepath = \"/\";",
          "169:         $filename = \"Simple4.txt\";",
          "170:         $filecontent = base64_encode(\"Let us create a nice simple file\");",
          "172:         $fileinfo = @core_files_external::upload($contextid, $component, $filearea, $itemid, $filepath, $filename, $filecontent);",
          "173:         $fileinfo = external_api::clean_returnvalue(core_files_external::upload_returns(), $fileinfo);",
          "176:         $this->assertDebuggingCalled();",
          "179:         $browser = get_file_browser();",
          "180:         $file = $browser->get_file_info($context, $component, $filearea, $itemid, $filepath, $filename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "grade/externallib.php||grade/externallib.php": [
          "File: grade/externallib.php -> grade/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "group/externallib.php||group/externallib.php": [
          "File: group/externallib.php -> group/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1473:     }",
          "1475: }",
          "",
          "[Removed Lines]",
          "1487: class moodle_group_external extends external_api {",
          "1497:     public static function create_groups_parameters() {",
          "1498:         return core_group_external::create_groups_parameters();",
          "1499:     }",
          "1510:     public static function create_groups($groups) {",
          "1511:         return core_group_external::create_groups($groups);",
          "1512:     }",
          "1522:     public static function create_groups_returns() {",
          "1523:         return core_group_external::create_groups_returns();",
          "1524:     }",
          "1531:     public static function create_groups_is_deprecated() {",
          "1532:         return true;",
          "1533:     }",
          "1543:     public static function get_groups_parameters() {",
          "1544:         return core_group_external::get_groups_parameters();",
          "1545:     }",
          "1556:     public static function get_groups($groupids) {",
          "1557:         return core_group_external::get_groups($groupids);",
          "1558:     }",
          "1568:     public static function get_groups_returns() {",
          "1569:         return core_group_external::get_groups_returns();",
          "1570:     }",
          "1577:     public static function get_groups_is_deprecated() {",
          "1578:         return true;",
          "1579:     }",
          "1589:     public static function get_course_groups_parameters() {",
          "1590:         return core_group_external::get_course_groups_parameters();",
          "1591:     }",
          "1602:     public static function get_course_groups($courseid) {",
          "1603:         return core_group_external::get_course_groups($courseid);",
          "1604:     }",
          "1614:     public static function get_course_groups_returns() {",
          "1615:         return core_group_external::get_course_groups_returns();",
          "1616:     }",
          "1623:     public static function get_course_groups_is_deprecated() {",
          "1624:         return true;",
          "1625:     }",
          "1635:     public static function delete_groups_parameters() {",
          "1636:         return core_group_external::delete_groups_parameters();",
          "1637:     }",
          "1647:     public static function delete_groups($groupids) {",
          "1648:         return core_group_external::delete_groups($groupids);",
          "1649:     }",
          "1659:     public static function delete_groups_returns() {",
          "1660:         return core_group_external::delete_groups_returns();",
          "1661:     }",
          "1668:     public static function delete_groups_is_deprecated() {",
          "1669:         return true;",
          "1670:     }",
          "1680:     public static function get_groupmembers_parameters() {",
          "1681:         return core_group_external::get_group_members_parameters();",
          "1682:     }",
          "1693:     public static function get_groupmembers($groupids) {",
          "1694:         return core_group_external::get_group_members($groupids);",
          "1695:     }",
          "1705:     public static function get_groupmembers_returns() {",
          "1706:         return core_group_external::get_group_members_returns();",
          "1707:     }",
          "1714:     public static function get_groupmembers_is_deprecated() {",
          "1715:         return true;",
          "1716:     }",
          "1726:     public static function add_groupmembers_parameters() {",
          "1727:         return core_group_external::add_group_members_parameters();",
          "1728:     }",
          "1738:     public static function add_groupmembers($members) {",
          "1739:         return core_group_external::add_group_members($members);",
          "1740:     }",
          "1750:     public static function add_groupmembers_returns() {",
          "1751:         return core_group_external::add_group_members_returns();",
          "1752:     }",
          "1759:     public static function add_groupmembers_is_deprecated() {",
          "1760:         return true;",
          "1761:     }",
          "1771:     public static function delete_groupmembers_parameters() {",
          "1772:         return core_group_external::delete_group_members_parameters();",
          "1773:     }",
          "1783:     public static function delete_groupmembers($members) {",
          "1784:         return core_group_external::delete_group_members($members);",
          "1785:     }",
          "1795:     public static function delete_groupmembers_returns() {",
          "1796:         return core_group_external::delete_group_members_returns();",
          "1797:     }",
          "1804:     public static function delete_groupmembers_is_deprecated() {",
          "1805:         return true;",
          "1806:     }",
          "1808: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lang/en/error.php||lang/en/error.php": [
          "File: lang/en/error.php -> lang/en/error.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "455: <p>The site administrator must fix this problem.</p>';",
          "456: $string['prefixtoolong'] = '<p>Error: database table prefix is too long ({$a->dbfamily})</p>",
          "457: <p>The site administrator must fix this problem. Maximum length for table prefixes in {$a->dbfamily} is {$a->maxlength} characters.</p>';",
          "458: $string['processingstops'] = 'Processing stops here. Remaining records ignored.';",
          "459: $string['querystringcannotbeempty'] = 'The query string cannot be empty.';",
          "460: $string['redirecterrordetected'] = 'Unsupported redirect detected, script execution terminated';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458: $string['privatefilesupload'] = 'Uploading directly to user private files area is no longer supported. Upload to a draft area and then move the files with core_user::add_user_private_files';",
          "",
          "---------------"
        ],
        "lib/db/services.php||lidservices.php": [
          "File: lib/db/services.php -> lidservices.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: $functions = array(",
          "47:     ),",
          "56:     ),",
          "65:     ),",
          "74:     ),",
          "76:     'core_cohort_add_cohort_members' => array(",
          "80:         'description' => 'Adds cohort members.',",
          "83:     ),",
          "85:     'core_cohort_delete_cohort_members' => array(",
          "89:         'description' => 'Deletes cohort members.',",
          "92:     ),",
          "94:     'core_cohort_get_cohort_members' => array(",
          "98:         'description' => 'Returns cohort members.',",
          "111:     ),",
          "123:     ),",
          "131:     ),",
          "142:     ),",
          "151:     ),",
          "160:     ),",
          "169:     ),",
          "178:     ),",
          "187:     ),",
          "196:     ),",
          "205:     ),",
          "214:     ),",
          "223:     ),",
          "232:     ),",
          "241:     ),",
          "250:     ),",
          "259:     ),",
          "267:     ),",
          "275:     ),",
          "283:     ),",
          "291:     ),",
          "299:     ),",
          "307:     ),",
          "315:     ),",
          "324:     ),",
          "333:     ),",
          "342:     ),",
          "351:     ),",
          "361:     ),",
          "363:     'core_files_get_files' => array(",
          "366:         'description' => 'browse moodle files',",
          "377:     ),",
          "379:     'core_files_upload' => array(",
          "382:         'description' => 'upload a file to moodle',",
          "383:         'type'        => 'write',",
          "384:         'classpath'   => 'files/externallib.php',",
          "385:     ),",
          "589:     ),",
          "598:     ),",
          "606:     ),",
          "617:     ),",
          "626:     ),",
          "635:     ),",
          "644:     ),",
          "655:     ),",
          "664:     ),",
          "674:     ),",
          "684:     ),",
          "693:     ),",
          "702:     ),",
          "711:     ),",
          "718:         'type' => 'write',",
          "720:     ),",
          "729:     ),",
          "738:     ),",
          "746:     ),",
          "754:     ),",
          "762:     ),",
          "773:     ),",
          "782:     ),",
          "791:     ),",
          "800:     ),",
          "809:     ),",
          "820:     ),",
          "829:     ),",
          "831:     'core_message_create_contacts' => array(",
          "835:         'description' => 'Add contacts to the contact list',",
          "838:     ),",
          "840:     'core_message_delete_contacts' => array(",
          "844:         'description' => 'Remove contacts from the contact list',",
          "847:     ),",
          "856:     ),",
          "865:     ),",
          "867:     'core_message_get_contacts' => array(",
          "871:         'description' => 'Retrieve the contact list',",
          "883:     ),",
          "885:     'core_message_get_messages' => array(",
          "901:     ),",
          "903:     'core_message_mark_message_read' => array(",
          "910:     ),",
          "919:     ),",
          "930:     ),",
          "932:     'core_notes_create_notes' => array(",
          "936:         'description' => 'Create notes',",
          "939:     ),",
          "941:     'core_notes_delete_notes' => array(",
          "945:         'description' => 'Delete notes',",
          "948:     ),",
          "950:     'core_notes_get_notes' => array(",
          "954:         'description' => 'Get notes',",
          "957:     ),",
          "959:     'core_notes_update_notes' => array(",
          "963:         'description' => 'Update notes',",
          "966:     ),",
          "968:     'core_notes_view_notes' => array(",
          "992:     ),",
          "999:     ),",
          "1006:     ),",
          "1016:     ),",
          "1024:     ),",
          "1034:     ),",
          "1044:     ),",
          "1055:     ),",
          "1064:     ),",
          "1066:     'core_update_inplace_editable' => array(",
          "1070:         'description' => 'Generic service to update title',",
          "1114:     ),",
          "1123:     ),",
          "1131:     ),",
          "1138:     ),",
          "1146:     ),",
          "1154:     ),",
          "1163:     ),",
          "1172:     ),",
          "1180:     ),",
          "1188:     ),",
          "1197:     ),",
          "1206:     ),",
          "",
          "[Removed Lines]",
          "40:     'core_cohort_create_cohorts' => array(",
          "41:         'classname'   => 'core_cohort_external',",
          "42:         'methodname'  => 'create_cohorts',",
          "43:         'classpath'   => 'cohort/externallib.php',",
          "44:         'description' => 'Creates new cohorts.',",
          "45:         'type'        => 'write',",
          "46:         'capabilities'=> 'moodle/cohort:manage',",
          "49:     'core_cohort_delete_cohorts' => array(",
          "50:         'classname'   => 'core_cohort_external',",
          "51:         'methodname'  => 'delete_cohorts',",
          "52:         'classpath'   => 'cohort/externallib.php',",
          "53:         'description' => 'Deletes all specified cohorts.',",
          "54:         'type'        => 'delete',",
          "55:         'capabilities'=> 'moodle/cohort:manage',",
          "58:     'core_cohort_get_cohorts' => array(",
          "59:         'classname'   => 'core_cohort_external',",
          "60:         'methodname'  => 'get_cohorts',",
          "61:         'classpath'   => 'cohort/externallib.php',",
          "62:         'description' => 'Returns cohort details.',",
          "63:         'type'        => 'read',",
          "64:         'capabilities'=> 'moodle/cohort:view',",
          "67:     'core_cohort_update_cohorts' => array(",
          "68:         'classname'   => 'core_cohort_external',",
          "69:         'methodname'  => 'update_cohorts',",
          "70:         'classpath'   => 'cohort/externallib.php',",
          "71:         'description' => 'Updates existing cohorts.',",
          "72:         'type'        => 'write',",
          "73:         'capabilities'=> 'moodle/cohort:manage',",
          "77:         'classname'   => 'core_cohort_external',",
          "78:         'methodname'  => 'add_cohort_members',",
          "79:         'classpath'   => 'cohort/externallib.php',",
          "81:         'type'        => 'write',",
          "82:         'capabilities'=> 'moodle/cohort:assign',",
          "86:         'classname'   => 'core_cohort_external',",
          "87:         'methodname'  => 'delete_cohort_members',",
          "88:         'classpath'   => 'cohort/externallib.php',",
          "90:         'type'        => 'delete',",
          "91:         'capabilities'=> 'moodle/cohort:assign',",
          "95:         'classname'   => 'core_cohort_external',",
          "96:         'methodname'  => 'get_cohort_members',",
          "97:         'classpath'   => 'cohort/externallib.php',",
          "99:         'type'        => 'read',",
          "100:         'capabilities'=> 'moodle/cohort:view',",
          "101:     ),",
          "105:     'core_comment_get_comments' => array(",
          "106:         'classname'     => 'core_comment_external',",
          "107:         'methodname'    => 'get_comments',",
          "108:         'description'   => 'Returns comments.',",
          "109:         'type'          => 'read',",
          "110:         'capabilities'  => 'moodle/comment:view',",
          "115:     'core_grades_get_grades' => array(",
          "116:         'classname'     => 'core_grades_external',",
          "117:         'methodname'    => 'get_grades',",
          "118:         'description'   => 'Returns student course total grade and grades for activities.",
          "119:                                 This function does not return category or manual items.",
          "120:                                 This function is suitable for managers or teachers not students.',",
          "121:         'type'          => 'read',",
          "122:         'capabilities'  => 'moodle/grade:view, moodle/grade:viewall, moodle/grade:viewhidden',",
          "125:     'core_grades_update_grades' => array(",
          "126:         'classname'     => 'core_grades_external',",
          "127:         'methodname'    => 'update_grades',",
          "128:         'description'   => 'Update a grade item and associated student grades.',",
          "129:         'type'          => 'write',",
          "130:         'capabilities'  => '',",
          "135:     'moodle_group_create_groups' => array(",
          "136:         'classname'   => 'moodle_group_external',",
          "137:         'methodname'  => 'create_groups',",
          "138:         'classpath'   => 'group/externallib.php',",
          "139:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_group_create_groups(). ',",
          "140:         'type'        => 'write',",
          "141:         'capabilities'=> 'moodle/course:managegroups',",
          "144:     'core_group_create_groups' => array(",
          "145:         'classname'   => 'core_group_external',",
          "146:         'methodname'  => 'create_groups',",
          "147:         'classpath'   => 'group/externallib.php',",
          "148:         'description' => 'Creates new groups.',",
          "149:         'type'        => 'write',",
          "150:         'capabilities'=> 'moodle/course:managegroups',",
          "153:     'moodle_group_get_groups' => array(",
          "154:         'classname'   => 'moodle_group_external',",
          "155:         'methodname'  => 'get_groups',",
          "156:         'classpath'   => 'group/externallib.php',",
          "157:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_group_get_groups()',",
          "158:         'type'        => 'read',",
          "159:         'capabilities'=> 'moodle/course:managegroups',",
          "162:     'core_group_get_groups' => array(",
          "163:         'classname'   => 'core_group_external',",
          "164:         'methodname'  => 'get_groups',",
          "165:         'classpath'   => 'group/externallib.php',",
          "166:         'description' => 'Returns group details.',",
          "167:         'type'        => 'read',",
          "168:         'capabilities'=> 'moodle/course:managegroups',",
          "171:     'moodle_group_get_course_groups' => array(",
          "172:         'classname'   => 'moodle_group_external',",
          "173:         'methodname'  => 'get_course_groups',",
          "174:         'classpath'   => 'group/externallib.php',",
          "175:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_group_get_course_groups()',",
          "176:         'type'        => 'read',",
          "177:         'capabilities'=> 'moodle/course:managegroups',",
          "180:     'core_group_get_course_groups' => array(",
          "181:         'classname'   => 'core_group_external',",
          "182:         'methodname'  => 'get_course_groups',",
          "183:         'classpath'   => 'group/externallib.php',",
          "184:         'description' => 'Returns all groups in specified course.',",
          "185:         'type'        => 'read',",
          "186:         'capabilities'=> 'moodle/course:managegroups',",
          "189:     'moodle_group_delete_groups' => array(",
          "190:         'classname'   => 'moodle_group_external',",
          "191:         'methodname'  => 'delete_groups',",
          "192:         'classpath'   => 'group/externallib.php',",
          "193:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_group_delete_groups()',",
          "194:         'type'        => 'delete',",
          "195:         'capabilities'=> 'moodle/course:managegroups',",
          "198:     'core_group_delete_groups' => array(",
          "199:         'classname'   => 'core_group_external',",
          "200:         'methodname'  => 'delete_groups',",
          "201:         'classpath'   => 'group/externallib.php',",
          "202:         'description' => 'Deletes all specified groups.',",
          "203:         'type'        => 'delete',",
          "204:         'capabilities'=> 'moodle/course:managegroups',",
          "207:     'moodle_group_get_groupmembers' => array(",
          "208:         'classname'   => 'moodle_group_external',",
          "209:         'methodname'  => 'get_groupmembers',",
          "210:         'classpath'   => 'group/externallib.php',",
          "211:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_group_get_group_members()',",
          "212:         'type'        => 'read',",
          "213:         'capabilities'=> 'moodle/course:managegroups',",
          "216:     'core_group_get_group_members' => array(",
          "217:         'classname'   => 'core_group_external',",
          "218:         'methodname'  => 'get_group_members',",
          "219:         'classpath'   => 'group/externallib.php',",
          "220:         'description' => 'Returns group members.',",
          "221:         'type'        => 'read',",
          "222:         'capabilities'=> 'moodle/course:managegroups',",
          "225:     'moodle_group_add_groupmembers' => array(",
          "226:         'classname'   => 'moodle_group_external',",
          "227:         'methodname'  => 'add_groupmembers',",
          "228:         'classpath'   => 'group/externallib.php',",
          "229:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_group_add_group_members()',",
          "230:         'type'        => 'write',",
          "231:         'capabilities'=> 'moodle/course:managegroups',",
          "234:     'core_group_add_group_members' => array(",
          "235:         'classname'   => 'core_group_external',",
          "236:         'methodname'  => 'add_group_members',",
          "237:         'classpath'   => 'group/externallib.php',",
          "238:         'description' => 'Adds group members.',",
          "239:         'type'        => 'write',",
          "240:         'capabilities'=> 'moodle/course:managegroups',",
          "243:     'moodle_group_delete_groupmembers' => array(",
          "244:         'classname'   => 'moodle_group_external',",
          "245:         'methodname'  => 'delete_groupmembers',",
          "246:         'classpath'   => 'group/externallib.php',",
          "247:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_group_delete_group_members()',",
          "248:         'type'        => 'delete',",
          "249:         'capabilities'=> 'moodle/course:managegroups',",
          "252:     'core_group_delete_group_members' => array(",
          "253:         'classname'   => 'core_group_external',",
          "254:         'methodname'  => 'delete_group_members',",
          "255:         'classpath'   => 'group/externallib.php',",
          "256:         'description' => 'Deletes group members.',",
          "257:         'type'        => 'delete',",
          "258:         'capabilities'=> 'moodle/course:managegroups',",
          "261:     'core_group_create_groupings' => array(",
          "262:         'classname'   => 'core_group_external',",
          "263:         'methodname'  => 'create_groupings',",
          "264:         'classpath'   => 'group/externallib.php',",
          "265:         'description' => 'Creates new groupings',",
          "266:         'type'        => 'write',",
          "269:     'core_group_update_groupings' => array(",
          "270:         'classname'   => 'core_group_external',",
          "271:         'methodname'  => 'update_groupings',",
          "272:         'classpath'   => 'group/externallib.php',",
          "273:         'description' => 'Updates existing groupings',",
          "274:         'type'        => 'write',",
          "277:     'core_group_get_groupings' => array(",
          "278:         'classname'   => 'core_group_external',",
          "279:         'methodname'  => 'get_groupings',",
          "280:         'classpath'   => 'group/externallib.php',",
          "281:         'description' => 'Returns groupings details.',",
          "282:         'type'        => 'read',",
          "285:     'core_group_get_course_groupings' => array(",
          "286:         'classname'   => 'core_group_external',",
          "287:         'methodname'  => 'get_course_groupings',",
          "288:         'classpath'   => 'group/externallib.php',",
          "289:         'description' => 'Returns all groupings in specified course.',",
          "290:         'type'        => 'read',",
          "293:     'core_group_delete_groupings' => array(",
          "294:         'classname'   => 'core_group_external',",
          "295:         'methodname'  => 'delete_groupings',",
          "296:         'classpath'   => 'group/externallib.php',",
          "297:         'description' => 'Deletes all specified groupings.',",
          "298:         'type'        => 'write',",
          "301:     'core_group_assign_grouping' => array(",
          "302:         'classname'   => 'core_group_external',",
          "303:         'methodname'  => 'assign_grouping',",
          "304:         'classpath'   => 'group/externallib.php',",
          "305:         'description' => 'Assing groups from groupings',",
          "306:         'type'        => 'write',",
          "309:     'core_group_unassign_grouping' => array(",
          "310:         'classname'   => 'core_group_external',",
          "311:         'methodname'  => 'unassign_grouping',",
          "312:         'classpath'   => 'group/externallib.php',",
          "313:         'description' => 'Unassing groups from groupings',",
          "314:         'type'        => 'write',",
          "317:     'core_group_get_course_user_groups' => array(",
          "318:         'classname'     => 'core_group_external',",
          "319:         'methodname'    => 'get_course_user_groups',",
          "320:         'classpath'     => 'group/externallib.php',",
          "321:         'description'   => 'Returns all groups in specified course for the specified user.',",
          "322:         'type'          => 'read',",
          "323:         'capabilities'  => 'moodle/course:managegroups',",
          "326:     'core_group_get_activity_allowed_groups' => array(",
          "327:         'classname'     => 'core_group_external',",
          "328:         'methodname'    => 'get_activity_allowed_groups',",
          "329:         'classpath'     => 'group/externallib.php',",
          "330:         'description'   => 'Gets a list of groups that the user is allowed to access within the specified activity.',",
          "331:         'type'          => 'read',",
          "332:         'capabilities'  => '',",
          "335:     'core_group_get_activity_groupmode' => array(",
          "336:         'classname'     => 'core_group_external',",
          "337:         'methodname'    => 'get_activity_groupmode',",
          "338:         'classpath'     => 'group/externallib.php',",
          "339:         'description'   => 'Returns effective groupmode used in a given activity.',",
          "340:         'type'          => 'read',",
          "341:         'capabilities'  => '',",
          "344:     'core_notes_get_course_notes' => array(",
          "345:         'classname'     => 'core_notes_external',",
          "346:         'methodname'    => 'get_course_notes',",
          "347:         'classpath'     => 'notes/externallib.php',",
          "348:         'description'   => 'Returns all notes in specified course (or site) for the specified user.',",
          "349:         'type'          => 'read',",
          "350:         'capabilities'  => 'moodle/notes:view',",
          "355:     'moodle_file_get_files' => array(",
          "356:         'classname'   => 'moodle_file_external',",
          "357:         'methodname'  => 'get_files',",
          "358:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_files_get_files()',",
          "359:         'type'        => 'read',",
          "360:         'classpath'   => 'files/externallib.php',",
          "364:         'classname'   => 'core_files_external',",
          "365:         'methodname'  => 'get_files',",
          "367:         'type'        => 'read',",
          "368:         'classpath'   => 'files/externallib.php',",
          "369:     ),",
          "371:     'moodle_file_upload' => array(",
          "372:         'classname'   => 'moodle_file_external',",
          "373:         'methodname'  => 'upload',",
          "374:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_files_upload()',",
          "375:         'type'        => 'write',",
          "376:         'classpath'   => 'files/externallib.php',",
          "380:         'classname'   => 'core_files_external',",
          "381:         'methodname'  => 'upload',",
          "389:     'moodle_user_create_users' => array(",
          "390:         'classname'   => 'moodle_user_external',",
          "391:         'methodname'  => 'create_users',",
          "392:         'classpath'   => 'user/externallib.php',",
          "393:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_user_create_users()',",
          "394:         'type'        => 'write',",
          "395:         'capabilities'=> 'moodle/user:create',",
          "396:     ),",
          "398:     'core_user_create_users' => array(",
          "399:         'classname'   => 'core_user_external',",
          "400:         'methodname'  => 'create_users',",
          "401:         'classpath'   => 'user/externallib.php',",
          "402:         'description' => 'Create users.',",
          "403:         'type'        => 'write',",
          "404:         'capabilities'=> 'moodle/user:create',",
          "405:     ),",
          "407:     'core_user_get_users' => array(",
          "408:         'classname'   => 'core_user_external',",
          "409:         'methodname'  => 'get_users',",
          "410:         'classpath'   => 'user/externallib.php',",
          "411:         'description' => 'search for users matching the parameters',",
          "412:         'type'        => 'read',",
          "413:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update',",
          "414:     ),",
          "416:     'moodle_user_get_users_by_id' => array(",
          "417:         'classname'   => 'moodle_user_external',",
          "418:         'methodname'  => 'get_users_by_id',",
          "419:         'classpath'   => 'user/externallib.php',",
          "420:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. Use core_user_get_users_by_field service instead',",
          "421:         'type'        => 'read',",
          "422:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update',",
          "423:     ),",
          "425:     'core_user_get_users_by_field' => array(",
          "426:         'classname'   => 'core_user_external',",
          "427:         'methodname'  => 'get_users_by_field',",
          "428:         'classpath'   => 'user/externallib.php',",
          "429:         'description' => 'Retrieve users information for a specified unique field - If you want to do a user search, use core_user_get_users()',",
          "430:         'type'        => 'read',",
          "431:         'ajax'        => true,",
          "432:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update',",
          "433:     ),",
          "435:     'core_user_get_users_by_id' => array(",
          "436:         'classname'   => 'core_user_external',",
          "437:         'methodname'  => 'get_users_by_id',",
          "438:         'classpath'   => 'user/externallib.php',",
          "439:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been replaced by core_user_get_users_by_field()',",
          "440:         'type'        => 'read',",
          "441:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update',",
          "442:     ),",
          "444:     'moodle_user_get_users_by_courseid' => array(",
          "445:         'classname'   => 'moodle_user_external',",
          "446:         'methodname'  => 'get_users_by_courseid',",
          "447:         'classpath'   => 'user/externallib.php',",
          "448:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_enrol_get_enrolled_users()',",
          "449:         'type'        => 'read',",
          "450:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update, moodle/site:accessallgroups',",
          "451:     ),",
          "453:     'moodle_user_get_course_participants_by_id' => array(",
          "454:         'classname'   => 'moodle_user_external',",
          "455:         'methodname'  => 'get_course_participants_by_id',",
          "456:         'classpath'   => 'user/externallib.php',",
          "457:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_user_get_course_user_profiles()',",
          "458:         'type'        => 'read',",
          "459:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update, moodle/site:accessallgroups',",
          "460:     ),",
          "462:     'core_user_get_course_user_profiles' => array(",
          "463:         'classname'   => 'core_user_external',",
          "464:         'methodname'  => 'get_course_user_profiles',",
          "465:         'classpath'   => 'user/externallib.php',",
          "466:         'description' => 'Get course user profiles (each of the profils matching a course id and a user id).',",
          "467:         'type'        => 'read',",
          "468:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update, moodle/site:accessallgroups',",
          "469:     ),",
          "471:     'moodle_user_delete_users' => array(",
          "472:         'classname'   => 'moodle_user_external',",
          "473:         'methodname'  => 'delete_users',",
          "474:         'classpath'   => 'user/externallib.php',",
          "475:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_user_delete_users()',",
          "476:         'type'        => 'write',",
          "477:         'capabilities'=> 'moodle/user:delete',",
          "478:     ),",
          "480:     'core_user_delete_users' => array(",
          "481:         'classname'   => 'core_user_external',",
          "482:         'methodname'  => 'delete_users',",
          "483:         'classpath'   => 'user/externallib.php',",
          "484:         'description' => 'Delete users.',",
          "485:         'type'        => 'write',",
          "486:         'capabilities'=> 'moodle/user:delete',",
          "487:     ),",
          "489:     'moodle_user_update_users' => array(",
          "490:         'classname'   => 'moodle_user_external',",
          "491:         'methodname'  => 'update_users',",
          "492:         'classpath'   => 'user/externallib.php',",
          "493:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_user_update_users()',",
          "494:         'type'        => 'write',",
          "495:         'capabilities'=> 'moodle/user:update',",
          "496:     ),",
          "498:     'core_user_update_users' => array(",
          "499:         'classname'   => 'core_user_external',",
          "500:         'methodname'  => 'update_users',",
          "501:         'classpath'   => 'user/externallib.php',",
          "502:         'description' => 'Update users.',",
          "503:         'type'        => 'write',",
          "504:         'capabilities'=> 'moodle/user:update',",
          "505:     ),",
          "507:     'core_user_add_user_device' => array(",
          "508:         'classname'   => 'core_user_external',",
          "509:         'methodname'  => 'add_user_device',",
          "510:         'classpath'   => 'user/externallib.php',",
          "511:         'description' => 'Store mobile user devices information for PUSH Notifications.',",
          "512:         'type'        => 'write',",
          "513:         'capabilities'=> '',",
          "514:     ),",
          "516:     'core_user_remove_user_device' => array(",
          "517:         'classname'     => 'core_user_external',",
          "518:         'methodname'    => 'remove_user_device',",
          "519:         'classpath'     => 'user/externallib.php',",
          "520:         'description'   => 'Remove a user device from the Moodle database.',",
          "521:         'type'          => 'write',",
          "522:         'capabilities'  => '',",
          "523:     ),",
          "525:     'core_user_view_user_list' => array(",
          "526:         'classname'     => 'core_user_external',",
          "527:         'methodname'    => 'view_user_list',",
          "528:         'classpath'     => 'user/externallib.php',",
          "529:         'description'   => 'Simulates the web-interface view of user/index.php (triggering events).',",
          "530:         'type'          => 'write',",
          "531:         'capabilities'  => 'moodle/course:viewparticipants',",
          "532:     ),",
          "534:     'core_user_view_user_profile' => array(",
          "535:         'classname'     => 'core_user_external',",
          "536:         'methodname'    => 'view_user_profile',",
          "537:         'classpath'     => 'user/externallib.php',",
          "538:         'description'   => 'Simulates the web-interface view of user/view.php and user/profile.php (triggering events).',",
          "539:         'type'          => 'write',",
          "540:         'capabilities'  => 'moodle/user:viewdetails',",
          "541:     ),",
          "543:     'core_user_add_user_private_files' => array(",
          "544:         'classname'     => 'core_user_external',",
          "545:         'methodname'    => 'add_user_private_files',",
          "546:         'classpath'     => 'user/externallib.php',",
          "547:         'description'   => 'Copy files from a draft area to users private files area.',",
          "548:         'type'          => 'write',",
          "549:         'capabilities'  => 'moodle/user:manageownfiles',",
          "550:     ),",
          "554:     'core_enrol_get_enrolled_users_with_capability' => array(",
          "555:         'classname'   => 'core_enrol_external',",
          "556:         'methodname'  => 'get_enrolled_users_with_capability',",
          "557:         'classpath'   => 'enrol/externallib.php',",
          "558:         'description' => 'For each course and capability specified, return a list of the users that are enrolled in the course",
          "559:                           and have that capability',",
          "560:         'type'        => 'read',",
          "561:     ),",
          "563:     'moodle_enrol_get_enrolled_users' => array(",
          "564:         'classname'   => 'moodle_enrol_external',",
          "565:         'methodname'  => 'get_enrolled_users',",
          "566:         'classpath'   => 'enrol/externallib.php',",
          "567:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. Please use core_enrol_get_enrolled_users() (previously known as moodle_user_get_users_by_courseid).',",
          "568:         'type'        => 'read',",
          "569:         'capabilities'=> 'moodle/site:viewparticipants, moodle/course:viewparticipants,",
          "570:             moodle/role:review, moodle/site:accessallgroups, moodle/course:enrolreview',",
          "571:     ),",
          "573:     'core_enrol_get_enrolled_users' => array(",
          "574:         'classname'   => 'core_enrol_external',",
          "575:         'methodname'  => 'get_enrolled_users',",
          "576:         'classpath'   => 'enrol/externallib.php',",
          "577:         'description' => 'Get enrolled users by course id.',",
          "578:         'type'        => 'read',",
          "579:         'capabilities'=> 'moodle/user:viewdetails, moodle/user:viewhiddendetails, moodle/course:useremail, moodle/user:update, moodle/site:accessallgroups',",
          "580:     ),",
          "582:     'moodle_enrol_get_users_courses' => array(",
          "583:         'classname'   => 'moodle_enrol_external',",
          "584:         'methodname'  => 'get_users_courses',",
          "585:         'classpath'   => 'enrol/externallib.php',",
          "586:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_enrol_get_users_courses()',",
          "587:         'type'        => 'read',",
          "588:         'capabilities'=> 'moodle/course:viewparticipants',",
          "591:     'core_enrol_get_users_courses' => array(",
          "592:         'classname'   => 'core_enrol_external',",
          "593:         'methodname'  => 'get_users_courses',",
          "594:         'classpath'   => 'enrol/externallib.php',",
          "595:         'description' => 'Get the list of courses where a user is enrolled in',",
          "596:         'type'        => 'read',",
          "597:         'capabilities'=> 'moodle/course:viewparticipants',",
          "600:     'core_enrol_get_course_enrolment_methods' => array(",
          "601:         'classname'   => 'core_enrol_external',",
          "602:         'methodname'  => 'get_course_enrolment_methods',",
          "603:         'classpath'   => 'enrol/externallib.php',",
          "604:         'description' => 'Get the list of course enrolment methods',",
          "605:         'type'        => 'read',",
          "610:     'moodle_role_assign' => array(",
          "611:         'classname'   => 'moodle_enrol_external',",
          "612:         'methodname'  => 'role_assign',",
          "613:         'classpath'   => 'enrol/externallib.php',",
          "614:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_role_assign_role()',",
          "615:         'type'        => 'write',",
          "616:         'capabilities'=> 'moodle/role:assign',",
          "619:     'core_role_assign_roles' => array(",
          "620:         'classname'   => 'core_role_external',",
          "621:         'methodname'  => 'assign_roles',",
          "622:         'classpath'   => 'enrol/externallib.php',",
          "623:         'description' => 'Manual role assignments.',",
          "624:         'type'        => 'write',",
          "625:         'capabilities'=> 'moodle/role:assign',",
          "628:     'moodle_role_unassign' => array(",
          "629:         'classname'   => 'moodle_enrol_external',",
          "630:         'methodname'  => 'role_unassign',",
          "631:         'classpath'   => 'enrol/externallib.php',",
          "632:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_role_unassign_role()',",
          "633:         'type'        => 'write',",
          "634:         'capabilities'=> 'moodle/role:assign',",
          "637:     'core_role_unassign_roles' => array(",
          "638:         'classname'   => 'core_role_external',",
          "639:         'methodname'  => 'unassign_roles',",
          "640:         'classpath'   => 'enrol/externallib.php',",
          "641:         'description' => 'Manual role unassignments.',",
          "642:         'type'        => 'write',",
          "643:         'capabilities'=> 'moodle/role:assign',",
          "648:     'core_course_get_contents' => array(",
          "649:         'classname'   => 'core_course_external',",
          "650:         'methodname'  => 'get_course_contents',",
          "651:         'classpath'   => 'course/externallib.php',",
          "652:         'description' => 'Get course contents',",
          "653:         'type'        => 'read',",
          "654:         'capabilities'=> 'moodle/course:update,moodle/course:viewhiddencourses',",
          "657:     'moodle_course_get_courses' => array(",
          "658:         'classname'   => 'moodle_course_external',",
          "659:         'methodname'  => 'get_courses',",
          "660:         'classpath'   => 'course/externallib.php',",
          "661:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_course_get_courses()',",
          "662:         'type'        => 'read',",
          "663:         'capabilities'=> 'moodle/course:view,moodle/course:update,moodle/course:viewhiddencourses',",
          "666:     'core_course_get_courses' => array(",
          "667:         'classname'   => 'core_course_external',",
          "668:         'methodname'  => 'get_courses',",
          "669:         'classpath'   => 'course/externallib.php',",
          "670:         'description' => 'Return course details',",
          "671:         'type'        => 'read',",
          "672:         'capabilities'=> 'moodle/course:view,moodle/course:update,moodle/course:viewhiddencourses',",
          "673:         'ajax'        => true,",
          "676:     'core_course_search_courses' => array(",
          "677:         'classname'     => 'core_course_external',",
          "678:         'methodname'    => 'search_courses',",
          "679:         'classpath'     => 'course/externallib.php',",
          "680:         'description'   => 'Search courses by (name, module, block, tag)',",
          "681:         'type'          => 'read',",
          "682:         'capabilities'  => '',",
          "683:         'ajax'          => true,",
          "686:     'moodle_course_create_courses' => array(",
          "687:         'classname'   => 'moodle_course_external',",
          "688:         'methodname'  => 'create_courses',",
          "689:         'classpath'   => 'course/externallib.php',",
          "690:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_course_create_courses()',",
          "691:         'type'        => 'write',",
          "692:         'capabilities'=> 'moodle/course:create,moodle/course:visibility',",
          "695:     'core_course_create_courses' => array(",
          "696:         'classname'   => 'core_course_external',",
          "697:         'methodname'  => 'create_courses',",
          "698:         'classpath'   => 'course/externallib.php',",
          "699:         'description' => 'Create new courses',",
          "700:         'type'        => 'write',",
          "701:         'capabilities'=> 'moodle/course:create,moodle/course:visibility',",
          "704:     'core_course_delete_courses' => array(",
          "705:         'classname'   => 'core_course_external',",
          "706:         'methodname'  => 'delete_courses',",
          "707:         'classpath'   => 'course/externallib.php',",
          "708:         'description' => 'Deletes all specified courses',",
          "709:         'type'        => 'write',",
          "710:         'capabilities'=> 'moodle/course:delete',",
          "713:     'core_course_delete_modules' => array(",
          "714:         'classname' => 'core_course_external',",
          "715:         'methodname' => 'delete_modules',",
          "716:         'classpath' => 'course/externallib.php',",
          "717:         'description' => 'Deletes all specified module instances',",
          "719:         'capabilities' => 'moodle/course:manageactivities'",
          "722:     'core_course_duplicate_course' => array(",
          "723:         'classname'   => 'core_course_external',",
          "724:         'methodname'  => 'duplicate_course',",
          "725:         'classpath'   => 'course/externallib.php',",
          "726:         'description' => 'Duplicate an existing course (creating a new one) without user data',",
          "727:         'type'        => 'write',",
          "728:         'capabilities'=> 'moodle/backup:backupcourse,moodle/restore:restorecourse,moodle/course:create',",
          "731:     'core_course_update_courses' => array(",
          "732:         'classname'   => 'core_course_external',",
          "733:         'methodname'  => 'update_courses',",
          "734:         'classpath'   => 'course/externallib.php',",
          "735:         'description' => 'Update courses',",
          "736:         'type'        => 'write',",
          "737:         'capabilities'=> 'moodle/course:update,moodle/course:changecategory,moodle/course:changefullname,moodle/course:changeshortname,moodle/course:changeidnumber,moodle/course:changesummary,moodle/course:visibility',",
          "740:     'core_course_view_course' => array(",
          "741:         'classname'   => 'core_course_external',",
          "742:         'methodname'  => 'view_course',",
          "743:         'classpath'   => 'course/externallib.php',",
          "744:         'description' => 'Log that the course was viewed',",
          "745:         'type'        => 'write'",
          "748:     'core_course_get_course_module' => array(",
          "749:         'classname'   => 'core_course_external',",
          "750:         'methodname'  => 'get_course_module',",
          "751:         'classpath'   => 'course/externallib.php',",
          "752:         'description' => 'Return information about a course module',",
          "753:         'type'        => 'read'",
          "756:     'core_course_get_course_module_by_instance' => array(",
          "757:         'classname'   => 'core_course_external',",
          "758:         'methodname'  => 'get_course_module_by_instance',",
          "759:         'classpath'   => 'course/externallib.php',",
          "760:         'description' => 'Return information about a given module name and instance id',",
          "761:         'type'        => 'read'",
          "766:     'core_course_get_categories' => array(",
          "767:         'classname'   => 'core_course_external',",
          "768:         'methodname'  => 'get_categories',",
          "769:         'classpath'   => 'course/externallib.php',",
          "770:         'description' => 'Return category details',",
          "771:         'type'        => 'read',",
          "772:         'capabilities'=> 'moodle/category:viewhiddencategories',",
          "775:     'core_course_create_categories' => array(",
          "776:         'classname'   => 'core_course_external',",
          "777:         'methodname'  => 'create_categories',",
          "778:         'classpath'   => 'course/externallib.php',",
          "779:         'description' => 'Create course categories',",
          "780:         'type'        => 'write',",
          "781:         'capabilities'=> 'moodle/category:manage',",
          "784:     'core_course_update_categories' => array(",
          "785:         'classname'   => 'core_course_external',",
          "786:         'methodname'  => 'update_categories',",
          "787:         'classpath'   => 'course/externallib.php',",
          "788:         'description' => 'Update categories',",
          "789:         'type'        => 'write',",
          "790:         'capabilities'=> 'moodle/category:manage',",
          "793:     'core_course_delete_categories' => array(",
          "794:         'classname'   => 'core_course_external',",
          "795:         'methodname'  => 'delete_categories',",
          "796:         'classpath'   => 'course/externallib.php',",
          "797:         'description' => 'Delete course categories',",
          "798:         'type'        => 'write',",
          "799:         'capabilities'=> 'moodle/category:manage',",
          "802:     'core_course_import_course' => array(",
          "803:         'classname'   => 'core_course_external',",
          "804:         'methodname'  => 'import_course',",
          "805:         'classpath'   => 'course/externallib.php',",
          "806:         'description' => 'Import course data from a course into another course. Does not include any user data.',",
          "807:         'type'        => 'write',",
          "808:         'capabilities'=> 'moodle/backup:backuptargetimport, moodle/restore:restoretargetimport',",
          "813:     'moodle_message_send_instantmessages' => array(",
          "814:         'classname'   => 'moodle_message_external',",
          "815:         'methodname'  => 'send_instantmessages',",
          "816:         'classpath'   => 'message/externallib.php',",
          "817:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_message_send_instant_messages()',",
          "818:         'type'        => 'write',",
          "819:         'capabilities'=> 'moodle/site:sendmessage',",
          "822:     'core_message_send_instant_messages' => array(",
          "823:         'classname'   => 'core_message_external',",
          "824:         'methodname'  => 'send_instant_messages',",
          "825:         'classpath'   => 'message/externallib.php',",
          "826:         'description' => 'Send instant messages',",
          "827:         'type'        => 'write',",
          "828:         'capabilities'=> 'moodle/site:sendmessage',",
          "832:         'classname'   => 'core_message_external',",
          "833:         'methodname'  => 'create_contacts',",
          "834:         'classpath'   => 'message/externallib.php',",
          "836:         'type'        => 'write',",
          "837:         'capabilities'=> '',",
          "841:         'classname'   => 'core_message_external',",
          "842:         'methodname'  => 'delete_contacts',",
          "843:         'classpath'   => 'message/externallib.php',",
          "845:         'type'        => 'write',",
          "846:         'capabilities'=> '',",
          "849:     'core_message_block_contacts' => array(",
          "850:         'classname'   => 'core_message_external',",
          "851:         'methodname'  => 'block_contacts',",
          "852:         'classpath'   => 'message/externallib.php',",
          "853:         'description' => 'Block contacts',",
          "854:         'type'        => 'write',",
          "855:         'capabilities'=> '',",
          "858:     'core_message_unblock_contacts' => array(",
          "859:         'classname'   => 'core_message_external',",
          "860:         'methodname'  => 'unblock_contacts',",
          "861:         'classpath'   => 'message/externallib.php',",
          "862:         'description' => 'Unblock contacts',",
          "863:         'type'        => 'write',",
          "864:         'capabilities'=> '',",
          "868:         'classname'   => 'core_message_external',",
          "869:         'methodname'  => 'get_contacts',",
          "870:         'classpath'   => 'message/externallib.php',",
          "872:         'type'        => 'read',",
          "873:         'capabilities'=> '',",
          "874:     ),",
          "876:     'core_message_search_contacts' => array(",
          "877:         'classname'   => 'core_message_external',",
          "878:         'methodname'  => 'search_contacts',",
          "879:         'classpath'   => 'message/externallib.php',",
          "880:         'description' => 'Search for contacts',",
          "881:         'type'        => 'read',",
          "882:         'capabilities'=> '',",
          "886:         'classname'     => 'core_message_external',",
          "887:         'methodname'    => 'get_messages',",
          "888:         'classpath'     => 'message/externallib.php',",
          "889:         'description'   => 'Retrieve a list of messages sent and received by a user (conversations, notifications or both)',",
          "890:         'type'          => 'read',",
          "891:         'capabilities'  => '',",
          "892:     ),",
          "894:     'core_message_get_blocked_users' => array(",
          "895:         'classname'     => 'core_message_external',",
          "896:         'methodname'    => 'get_blocked_users',",
          "897:         'classpath'     => 'message/externallib.php',",
          "898:         'description'   => 'Retrieve a list of users blocked',",
          "899:         'type'          => 'read',",
          "900:         'capabilities'  => '',",
          "904:         'classname'     => 'core_message_external',",
          "905:         'methodname'    => 'mark_message_read',",
          "906:         'classpath'     => 'message/externallib.php',",
          "907:         'description'   => 'Mark a single message as read, trigger message_viewed event.',",
          "908:         'type'          => 'write',",
          "909:         'capabilities'  => '',",
          "912:     'core_message_delete_message' => array(",
          "913:         'classname'     => 'core_message_external',",
          "914:         'methodname'    => 'delete_message',",
          "915:         'classpath'     => 'message/externallib.php',",
          "916:         'description'   => 'Deletes a message.',",
          "917:         'type'          => 'write',",
          "918:         'capabilities'  => 'moodle/site:deleteownmessage',",
          "923:     'moodle_notes_create_notes' => array(",
          "924:         'classname'   => 'moodle_notes_external',",
          "925:         'methodname'  => 'create_notes',",
          "926:         'classpath'   => 'notes/externallib.php',",
          "927:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_notes_create_notes()',",
          "928:         'type'        => 'write',",
          "929:         'capabilities'=> 'moodle/notes:manage',",
          "933:         'classname'   => 'core_notes_external',",
          "934:         'methodname'  => 'create_notes',",
          "935:         'classpath'   => 'notes/externallib.php',",
          "937:         'type'        => 'write',",
          "938:         'capabilities'=> 'moodle/notes:manage',",
          "942:         'classname'   => 'core_notes_external',",
          "943:         'methodname'  => 'delete_notes',",
          "944:         'classpath'   => 'notes/externallib.php',",
          "946:         'type'        => 'write',",
          "947:         'capabilities'=> 'moodle/notes:manage',",
          "951:         'classname'   => 'core_notes_external',",
          "952:         'methodname'  => 'get_notes',",
          "953:         'classpath'   => 'notes/externallib.php',",
          "955:         'type'        => 'read',",
          "956:         'capabilities'=> 'moodle/notes:view',",
          "960:         'classname'   => 'core_notes_external',",
          "961:         'methodname'  => 'update_notes',",
          "962:         'classpath'   => 'notes/externallib.php',",
          "964:         'type'        => 'write',",
          "965:         'capabilities'=> 'moodle/notes:manage',",
          "969:         'classname'     => 'core_notes_external',",
          "970:         'methodname'    => 'view_notes',",
          "971:         'classpath'     => 'notes/externallib.php',",
          "972:         'description'   => 'Simulates the web interface view of notes/index.php: trigger events.',",
          "973:         'type'          => 'write',",
          "974:         'capabilities'  => 'moodle/notes:view',",
          "975:     ),",
          "979:     'core_grading_get_definitions' => array(",
          "980:         'classname'   => 'core_grading_external',",
          "981:         'methodname'  => 'get_definitions',",
          "982:         'description' => 'Get grading definitions',",
          "983:         'type'        => 'read'",
          "984:     ),",
          "986:     'core_grade_get_definitions' => array(",
          "987:         'classname'   => 'core_grade_external',",
          "988:         'methodname'  => 'get_definitions',",
          "989:         'classpath'   => 'grade/externallib.php',",
          "990:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_grading_get_definitions()',",
          "991:         'type'        => 'read'",
          "994:     'core_grading_save_definitions' => array(",
          "995:         'classname'   => 'core_grading_external',",
          "996:         'methodname'  => 'save_definitions',",
          "997:         'description' => 'Save grading definitions',",
          "998:         'type'        => 'write'",
          "1001:     'core_grading_get_gradingform_instances' => array(",
          "1002:         'classname'   => 'core_grading_external',",
          "1003:         'methodname'  => 'get_gradingform_instances',",
          "1004:         'description' => 'Get grading form instances',",
          "1005:         'type'        => 'read'",
          "1010:     'moodle_webservice_get_siteinfo' => array(",
          "1011:         'classname'   => 'moodle_webservice_external',",
          "1012:         'methodname'  => 'get_siteinfo',",
          "1013:         'classpath'   => 'webservice/externallib.php',",
          "1014:         'description' => 'DEPRECATED: this deprecated function will be removed in a future version. This function has been renamed as core_webservice_get_site_info()',",
          "1015:         'type'        => 'read',",
          "1018:     'core_webservice_get_site_info' => array(",
          "1019:         'classname'   => 'core_webservice_external',",
          "1020:         'methodname'  => 'get_site_info',",
          "1021:         'classpath'   => 'webservice/externallib.php',",
          "1022:         'description' => 'Return some site info / user info / list web service functions',",
          "1023:         'type'        => 'read',",
          "1026:     'core_get_string' => array(",
          "1027:         'classname'   => 'core_external',",
          "1028:         'methodname'  => 'get_string',",
          "1029:         'classpath'   => 'lib/external/externallib.php',",
          "1030:         'description' => 'Return a translated string - similar to core get_string() call',",
          "1031:         'type'        => 'read',",
          "1032:         'loginrequired' => false,",
          "1033:         'ajax'        => true,",
          "1036:     'core_get_strings' => array(",
          "1037:         'classname'   => 'core_external',",
          "1038:         'methodname'  => 'get_strings',",
          "1039:         'classpath'   => 'lib/external/externallib.php',",
          "1040:         'description' => 'Return some translated strings - like several core get_string() calls',",
          "1041:         'type'        => 'read',",
          "1042:         'loginrequired' => false,",
          "1043:         'ajax'        => true,",
          "1046:     'core_get_component_strings' => array(",
          "1047:         'classname'   => 'core_external',",
          "1048:         'methodname'  => 'get_component_strings',",
          "1049:         'classpath'   => 'lib/external/externallib.php',",
          "1050:         'description' => 'Return all raw strings (with {$a->xxx}) for a specific component",
          "1051:             - similar to core get_component_strings() call',",
          "1052:         'type'        => 'read',",
          "1053:         'loginrequired' => false,",
          "1054:         'ajax'        => true,",
          "1057:     'core_get_fragment' => array(",
          "1058:         'classname'   => 'core_external',",
          "1059:         'methodname'  => 'get_fragment',",
          "1060:         'classpath'   => 'lib/external/externallib.php',",
          "1061:         'description' => 'Return a fragment for inclusion, such as a JavaScript page.',",
          "1062:         'type'        => 'read',",
          "1063:         'ajax'        => true,",
          "1067:         'classname'   => 'core_external',",
          "1068:         'methodname'  => 'update_inplace_editable',",
          "1069:         'classpath'   => 'lib/external/externallib.php',",
          "1071:         'type'        => 'write',",
          "1072:         'loginrequired' => true,",
          "1073:         'ajax'        => true,",
          "1074:     ),",
          "1076:     'core_fetch_notifications' => array(",
          "1077:         'classname'   => 'core_external',",
          "1078:         'methodname'  => 'fetch_notifications',",
          "1079:         'classpath'   => 'lib/external/externallib.php',",
          "1080:         'description' => 'Return a list of notifications for the current session',",
          "1081:         'type'        => 'read',",
          "1082:         'loginrequired' => false,",
          "1083:         'ajax'        => true,",
          "1084:     ),",
          "1088:     'core_calendar_delete_calendar_events' => array(",
          "1089:         'classname'   => 'core_calendar_external',",
          "1090:         'methodname'  => 'delete_calendar_events',",
          "1091:         'description' => 'Delete calendar events',",
          "1092:         'classpath'   => 'calendar/externallib.php',",
          "1093:         'type'        => 'write',",
          "1094:         'capabilities'=> 'moodle/calendar:manageentries', 'moodle/calendar:manageownentries', 'moodle/calendar:managegroupentries'",
          "1095:     ),",
          "1098:     'core_calendar_get_calendar_events' => array(",
          "1099:         'classname'   => 'core_calendar_external',",
          "1100:         'methodname'  => 'get_calendar_events',",
          "1101:         'description' => 'Get calendar events',",
          "1102:         'classpath'   => 'calendar/externallib.php',",
          "1103:         'type'        => 'read',",
          "1104:         'capabilities'=> 'moodle/calendar:manageentries', 'moodle/calendar:manageownentries', 'moodle/calendar:managegroupentries'",
          "1105:     ),",
          "1107:     'core_calendar_create_calendar_events' => array(",
          "1108:         'classname'   => 'core_calendar_external',",
          "1109:         'methodname'  => 'create_calendar_events',",
          "1110:         'description' => 'Create calendar events',",
          "1111:         'classpath'   => 'calendar/externallib.php',",
          "1112:         'type'        => 'write',",
          "1113:         'capabilities'=> 'moodle/calendar:manageentries', 'moodle/calendar:manageownentries', 'moodle/calendar:managegroupentries'",
          "1116:     'core_output_load_template' => array(",
          "1117:         'classname'   => 'core\\output\\external',",
          "1118:         'methodname'  => 'load_template',",
          "1119:         'description' => 'Load a template for a renderable',",
          "1120:         'type'        => 'read',",
          "1121:         'loginrequired' => false,",
          "1122:         'ajax'        => true,",
          "1126:     'core_completion_update_activity_completion_status_manually' => array(",
          "1127:         'classname'   => 'core_completion_external',",
          "1128:         'methodname'  => 'update_activity_completion_status_manually',",
          "1129:         'description' => 'Update completion status for the current user in an activity, only for activities with manual tracking.',",
          "1130:         'type'        => 'write',",
          "1133:     'core_completion_mark_course_self_completed' => array(",
          "1134:         'classname'   => 'core_completion_external',",
          "1135:         'methodname'  => 'mark_course_self_completed',",
          "1136:         'description' => 'Update the course completion status for the current user (if course self-completion is enabled).',",
          "1137:         'type'        => 'write',",
          "1140:     'core_completion_get_activities_completion_status' => array(",
          "1141:         'classname'     => 'core_completion_external',",
          "1142:         'methodname'    => 'get_activities_completion_status',",
          "1143:         'description'   => 'Return the activities completion status for a user in a course.',",
          "1144:         'type'          => 'read',",
          "1145:         'capabilities'  => '',",
          "1148:     'core_completion_get_course_completion_status' => array(",
          "1149:         'classname'    => 'core_completion_external',",
          "1150:         'methodname'   => 'get_course_completion_status',",
          "1151:         'description'  => 'Returns course completion status.',",
          "1152:         'type'         => 'read',",
          "1153:         'capabilities' => 'report/completion:view',",
          "1157:     'core_rating_get_item_ratings' => array(",
          "1158:         'classname'     => 'core_rating_external',",
          "1159:         'methodname'    => 'get_item_ratings',",
          "1160:         'description'   => 'Retrieve all the ratings for an item.',",
          "1161:         'type'          => 'read',",
          "1162:         'capabilities'  => 'moodle/rating:view'",
          "1166:     'core_tag_update_tags' => array(",
          "1167:         'classname'   => 'core_tag_external',",
          "1168:         'methodname'  => 'update_tags',",
          "1169:         'description' => 'Updates tags',",
          "1170:         'type'        => 'write',",
          "1171:         'ajax'        => true",
          "1174:     'core_tag_get_tags' => array(",
          "1175:         'classname'   => 'core_tag_external',",
          "1176:         'methodname'  => 'get_tags',",
          "1177:         'description' => 'Gets tags by their ids',",
          "1178:         'type'        => 'read',",
          "1179:         'ajax'        => true",
          "1182:     'core_tag_get_tagindex' => array(",
          "1183:         'classname'   => 'core_tag_external',",
          "1184:         'methodname'  => 'get_tagindex',",
          "1185:         'description' => 'Gets tag index page for one tag and one tag area',",
          "1186:         'type'        => 'read',",
          "1187:         'ajax'        => true",
          "1191:     'core_question_update_flag' => array(",
          "1192:         'classname'     => 'core_question_external',",
          "1193:         'methodname'    => 'update_flag',",
          "1194:         'description'   => 'Update the flag state of a question attempt.',",
          "1195:         'type'          => 'write',",
          "1196:         'capabilities'  => 'moodle/question:flag',",
          "1200:     'core_badges_get_user_badges' => array(",
          "1201:         'classname'     => 'core_badges_external',",
          "1202:         'methodname'    => 'get_user_badges',",
          "1203:         'description'   => 'Returns the list of badges awarded to a user.',",
          "1204:         'type'          => 'read',",
          "1205:         'capabilities'  => 'moodle/badges:viewotherbadges'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1935:         'capabilities'  => 'moodle/competency:evidencedelete',",
          "1936:         'ajax'          => true,",
          "1937:     ),",
          "1938: );",
          "1940: $services = array(",
          "1941:    'Moodle mobile web service'  => array(",
          "1942:         'functions' => array (",
          "1954:             'core_calendar_get_calendar_events',",
          "1957:             'core_enrol_get_course_enrolment_methods',",
          "1970:             'core_files_get_files',",
          "1972:             'core_message_create_contacts',",
          "1973:             'core_message_delete_contacts',",
          "1976:             'core_message_get_contacts',",
          "1977:             'core_message_search_contacts',",
          "1993:             'core_notes_get_course_notes',",
          "1998:             'core_notes_view_notes',",
          "2001:             'core_rating_get_item_ratings',",
          "2003:             'core_user_add_user_private_files',",
          "2007:         'enabled' => 0,",
          "2008:         'restrictedusers' => 0,",
          "2009:         'shortname' => MOODLE_OFFICIAL_MOBILE_SERVICE,",
          "",
          "[Removed Lines]",
          "1943:             'moodle_enrol_get_users_courses',",
          "1944:             'moodle_enrol_get_enrolled_users',",
          "1945:             'moodle_user_get_users_by_id',",
          "1946:             'moodle_webservice_get_siteinfo',",
          "1947:             'moodle_notes_create_notes',",
          "1948:             'moodle_user_get_course_participants_by_id',",
          "1949:             'moodle_user_get_users_by_courseid',",
          "1950:             'moodle_message_send_instantmessages',",
          "1951:             'core_course_get_contents',",
          "1952:             'core_get_component_strings',",
          "1953:             'core_user_add_user_device',",
          "1955:             'core_enrol_get_users_courses',",
          "1956:             'core_enrol_get_enrolled_users',",
          "1958:             'enrol_guest_get_instance_info',",
          "1959:             'enrol_self_enrol_user',",
          "1960:             'enrol_self_get_instance_info',",
          "1961:             'core_user_get_users_by_id',",
          "1962:             'core_webservice_get_site_info',",
          "1963:             'core_notes_create_notes',",
          "1964:             'core_notes_delete_notes',",
          "1965:             'core_user_get_course_user_profiles',",
          "1966:             'core_message_send_instant_messages',",
          "1967:             'message_airnotifier_is_system_configured',",
          "1968:             'message_airnotifier_are_notification_preferences_configured',",
          "1969:             'core_grades_update_grades',",
          "1971:             'core_message_get_messages',",
          "1974:             'core_message_block_contacts',",
          "1975:             'core_message_unblock_contacts',",
          "1978:             'core_message_get_blocked_users',",
          "1979:             'gradereport_user_get_grades_table',",
          "1980:             'core_group_get_course_user_groups',",
          "1981:             'core_group_get_activity_allowed_groups',",
          "1982:             'core_group_get_activity_groupmode',",
          "1983:             'core_user_remove_user_device',",
          "1984:             'core_course_get_courses',",
          "1985:             'core_completion_update_activity_completion_status_manually',",
          "1986:             'core_completion_mark_course_self_completed',",
          "1987:             'core_comment_get_comments',",
          "1988:             'core_course_view_course',",
          "1989:             'core_course_search_courses',",
          "1990:             'core_course_get_course_module',",
          "1991:             'core_course_get_course_module_by_instance',",
          "1992:             'core_completion_get_activities_completion_status',",
          "1994:             'core_completion_get_course_completion_status',",
          "1995:             'core_user_view_user_list',",
          "1996:             'core_message_mark_message_read',",
          "1997:             'core_message_delete_message',",
          "1999:             'core_user_view_user_profile',",
          "2000:             'gradereport_user_view_grade_report',",
          "2002:             'core_user_get_users_by_field',",
          "2004:             'core_question_update_flag',",
          "2005:             'core_badges_get_user_badges',",
          "2006:         ),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lidupgrade.php": [
          "File: lib/db/upgrade.php -> lidupgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2006:         upgrade_main_savepoint(true, 2016042100.00);",
          "2007:     }",
          "2008:     return true;",
          "2009: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1098:     }",
          "1100: }",
          "",
          "[Removed Lines]",
          "1112: class moodle_message_external extends external_api {",
          "1122:     public static function send_instantmessages_parameters() {",
          "1123:         return core_message_external::send_instant_messages_parameters();",
          "1124:     }",
          "1135:     public static function send_instantmessages($messages = array()) {",
          "1136:         return core_message_external::send_instant_messages($messages);",
          "1137:     }",
          "1147:     public static function send_instantmessages_returns() {",
          "1148:         return core_message_external::send_instant_messages_returns();",
          "1149:     }",
          "1156:     public static function send_instantmessages_is_deprecated() {",
          "1157:         return true;",
          "1158:     }",
          "1159: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/forum/db/services.php||mod/forum/dservices.php": [
          "File: mod/forum/db/services.php -> mod/forum/dservices.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE)",
          "38:     ),",
          "50:     'mod_forum_get_forum_discussion_posts' => array(",
          "51:         'classname' => 'mod_forum_external',",
          "52:         'methodname' => 'get_forum_discussion_posts',",
          "",
          "[Removed Lines]",
          "40:     'mod_forum_get_forum_discussions' => array(",
          "41:         'classname' => 'mod_forum_external',",
          "42:         'methodname' => 'get_forum_discussions',",
          "43:         'classpath' => 'mod/forum/externallib.php',",
          "44:         'description' => 'DEPRECATED (use mod_forum_get_forum_discussions_paginated instead):",
          "45:                             Returns a list of forum discussions contained within a given set of forums.',",
          "46:         'type' => 'read',",
          "47:         'capabilities' => 'mod/forum:viewdiscussion, mod/forum:viewqandawithoutposting'",
          "48:     ),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         );",
          "147:     }",
          "",
          "[Removed Lines]",
          "157:     public static function get_forum_discussions_parameters() {",
          "158:         return new external_function_parameters (",
          "159:             array(",
          "160:                 'forumids' => new external_multiple_structure(new external_value(PARAM_INT, 'forum ID',",
          "161:                         VALUE_REQUIRED, '', NULL_NOT_ALLOWED), 'Array of Forum IDs', VALUE_REQUIRED),",
          "162:                 'limitfrom' => new external_value(PARAM_INT, 'limit from', VALUE_DEFAULT, 0),",
          "163:                 'limitnum' => new external_value(PARAM_INT, 'limit number', VALUE_DEFAULT, 0)",
          "164:             )",
          "165:         );",
          "166:     }",
          "181:     public static function get_forum_discussions($forumids, $limitfrom = 0, $limitnum = 0) {",
          "182:         global $CFG, $DB, $USER;",
          "184:         require_once($CFG->dirroot . \"/mod/forum/lib.php\");",
          "187:         $params = self::validate_parameters(self::get_forum_discussions_parameters(),",
          "188:             array(",
          "189:                 'forumids'  => $forumids,",
          "190:                 'limitfrom' => $limitfrom,",
          "191:                 'limitnum'  => $limitnum,",
          "192:             ));",
          "193:         $forumids  = $params['forumids'];",
          "194:         $limitfrom = $params['limitfrom'];",
          "195:         $limitnum  = $params['limitnum'];",
          "198:         $arrdiscussions = array();",
          "200:         $arrusers = array();",
          "203:         foreach ($forumids as $id) {",
          "205:             $forum = $DB->get_record('forum', array('id' => $id), '*', MUST_EXIST);",
          "206:             $course = get_course($forum->course);",
          "208:             $modinfo = get_fast_modinfo($course);",
          "209:             $forums  = $modinfo->get_instances_of('forum');",
          "210:             $cm = $forums[$forum->id];",
          "213:             $modcontext = context_module::instance($cm->id);",
          "216:             self::validate_context($modcontext);",
          "218:             require_capability('mod/forum:viewdiscussion', $modcontext);",
          "221:             $params = array();",
          "223:             $groupselect = \"\";",
          "224:             $groupmode = groups_get_activity_groupmode($cm, $course);",
          "226:             if ($groupmode and $groupmode != VISIBLEGROUPS and !has_capability('moodle/site:accessallgroups', $modcontext)) {",
          "228:                 $usergroups = groups_get_user_groups($course->id);",
          "229:                 if (!empty($usergroups['0'])) {",
          "230:                     list($sql, $params) = $DB->get_in_or_equal($usergroups['0']);",
          "231:                     $groupselect = \"AND (groupid $sql OR groupid = -1)\";",
          "232:                 }",
          "233:             }",
          "234:             array_unshift($params, $id);",
          "235:             $select = \"forum = ? $groupselect\";",
          "237:             if ($discussions = $DB->get_records_select('forum_discussions', $select, $params, 'timemodified DESC', '*',",
          "238:                                                             $limitfrom, $limitnum)) {",
          "241:                 $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "243:                 $unreads = array();",
          "244:                 if ($cantrack = forum_tp_can_track_forums($forum)) {",
          "245:                     if ($forumtracked = forum_tp_is_tracked($forum)) {",
          "246:                         $unreads = forum_get_discussions_unread($cm);",
          "247:                     }",
          "248:                 }",
          "250:                 $replies = forum_count_discussion_replies($id);",
          "252:                 foreach ($discussions as $discussion) {",
          "254:                     if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
          "255:                         continue;",
          "256:                     }",
          "258:                     $usernamefields = user_picture::fields();",
          "260:                     if (empty($arrusers[$discussion->userid])) {",
          "261:                         $arrusers[$discussion->userid] = $DB->get_record('user', array('id' => $discussion->userid),",
          "262:                                 $usernamefields, MUST_EXIST);",
          "263:                     }",
          "265:                     $subject = $DB->get_field('forum_posts', 'subject', array('id' => $discussion->firstpost), MUST_EXIST);",
          "267:                     $return = new stdClass();",
          "268:                     $return->id = (int) $discussion->id;",
          "269:                     $return->course = $discussion->course;",
          "270:                     $return->forum = $discussion->forum;",
          "271:                     $return->name = $discussion->name;",
          "272:                     $return->userid = $discussion->userid;",
          "273:                     $return->groupid = $discussion->groupid;",
          "274:                     $return->assessed = $discussion->assessed;",
          "275:                     $return->timemodified = (int) $discussion->timemodified;",
          "276:                     $return->usermodified = $discussion->usermodified;",
          "277:                     $return->timestart = $discussion->timestart;",
          "278:                     $return->timeend = $discussion->timeend;",
          "279:                     $return->firstpost = (int) $discussion->firstpost;",
          "280:                     $return->firstuserfullname = fullname($arrusers[$discussion->userid], $canviewfullname);",
          "281:                     $return->firstuserimagealt = $arrusers[$discussion->userid]->imagealt;",
          "282:                     $return->firstuserpicture = $arrusers[$discussion->userid]->picture;",
          "283:                     $return->firstuseremail = $arrusers[$discussion->userid]->email;",
          "284:                     $return->subject = $subject;",
          "285:                     $return->numunread = '';",
          "286:                     if ($cantrack && $forumtracked) {",
          "287:                         if (isset($unreads[$discussion->id])) {",
          "288:                             $return->numunread = (int) $unreads[$discussion->id];",
          "289:                         }",
          "290:                     }",
          "292:                     if (!empty($replies[$discussion->id])) {",
          "293:                          $return->numreplies = (int) $replies[$discussion->id]->replies;",
          "294:                          $return->lastpost = (int) $replies[$discussion->id]->lastpostid;",
          "295:                     } else { // No replies, so the last post will be the first post.",
          "296:                         $return->numreplies = 0;",
          "297:                         $return->lastpost = (int) $discussion->firstpost;",
          "298:                     }",
          "300:                     $lastpost = $DB->get_record('forum_posts', array('id' => $return->lastpost), '*', MUST_EXIST);",
          "301:                     if (empty($arrusers[$lastpost->userid])) {",
          "302:                         $arrusers[$lastpost->userid] = $DB->get_record('user', array('id' => $lastpost->userid),",
          "303:                                 $usernamefields, MUST_EXIST);",
          "304:                     }",
          "305:                     $return->lastuserid = $lastpost->userid;",
          "306:                     $return->lastuserfullname = fullname($arrusers[$lastpost->userid], $canviewfullname);",
          "307:                     $return->lastuserimagealt = $arrusers[$lastpost->userid]->imagealt;",
          "308:                     $return->lastuserpicture = $arrusers[$lastpost->userid]->picture;",
          "309:                     $return->lastuseremail = $arrusers[$lastpost->userid]->email;",
          "311:                     $arrdiscussions[$return->id] = (array) $return;",
          "312:                 }",
          "313:             }",
          "314:         }",
          "316:         return $arrdiscussions;",
          "317:     }",
          "327:      public static function get_forum_discussions_returns() {",
          "328:         return new external_multiple_structure(",
          "329:             new external_single_structure(",
          "330:                 array(",
          "331:                     'id' => new external_value(PARAM_INT, 'Forum id'),",
          "332:                     'course' => new external_value(PARAM_INT, 'Course id'),",
          "333:                     'forum' => new external_value(PARAM_INT, 'The forum id'),",
          "334:                     'name' => new external_value(PARAM_TEXT, 'Discussion name'),",
          "335:                     'userid' => new external_value(PARAM_INT, 'User id'),",
          "336:                     'groupid' => new external_value(PARAM_INT, 'Group id'),",
          "337:                     'assessed' => new external_value(PARAM_INT, 'Is this assessed?'),",
          "338:                     'timemodified' => new external_value(PARAM_INT, 'Time modified'),",
          "339:                     'usermodified' => new external_value(PARAM_INT, 'The id of the user who last modified'),",
          "340:                     'timestart' => new external_value(PARAM_INT, 'Time discussion can start'),",
          "341:                     'timeend' => new external_value(PARAM_INT, 'Time discussion ends'),",
          "342:                     'firstpost' => new external_value(PARAM_INT, 'The first post in the discussion'),",
          "343:                     'firstuserfullname' => new external_value(PARAM_TEXT, 'The discussion creators fullname'),",
          "344:                     'firstuserimagealt' => new external_value(PARAM_TEXT, 'The discussion creators image alt'),",
          "345:                     'firstuserpicture' => new external_value(PARAM_INT, 'The discussion creators profile picture'),",
          "346:                     'firstuseremail' => new external_value(PARAM_TEXT, 'The discussion creators email'),",
          "347:                     'subject' => new external_value(PARAM_TEXT, 'The discussion subject'),",
          "348:                     'numreplies' => new external_value(PARAM_TEXT, 'The number of replies in the discussion'),",
          "349:                     'numunread' => new external_value(PARAM_TEXT, 'The number of unread posts, blank if this value is",
          "350:                         not available due to forum settings.'),",
          "351:                     'lastpost' => new external_value(PARAM_INT, 'The id of the last post in the discussion'),",
          "352:                     'lastuserid' => new external_value(PARAM_INT, 'The id of the user who made the last post'),",
          "353:                     'lastuserfullname' => new external_value(PARAM_TEXT, 'The last person to posts fullname'),",
          "354:                     'lastuserimagealt' => new external_value(PARAM_TEXT, 'The last person to posts image alt'),",
          "355:                     'lastuserpicture' => new external_value(PARAM_INT, 'The last person to posts profile picture'),",
          "356:                     'lastuseremail' => new external_value(PARAM_TEXT, 'The last person to posts email'),",
          "357:                 ), 'discussion'",
          "358:             )",
          "359:         );",
          "360:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:         $this->assertCount(0, $forums);",
          "173:     }",
          "",
          "[Removed Lines]",
          "178:     public function test_mod_forum_get_forum_discussions() {",
          "179:         global $USER, $CFG, $DB;",
          "181:         $this->resetAfterTest(true);",
          "184:         $CFG->forum_trackreadposts = true;",
          "187:         $record = new stdClass();",
          "188:         $record->trackforums = true;",
          "189:         $user1 = self::getDataGenerator()->create_user($record);",
          "191:         $user2 = self::getDataGenerator()->create_user();",
          "192:         $user3 = self::getDataGenerator()->create_user();",
          "193:         $user4 = self::getDataGenerator()->create_user();",
          "196:         self::setUser($user1);",
          "199:         $course1 = self::getDataGenerator()->create_course();",
          "200:         $course2 = self::getDataGenerator()->create_course();",
          "203:         $record = new stdClass();",
          "204:         $record->course = $course1->id;",
          "205:         $record->trackingtype = FORUM_TRACKING_OFF;",
          "206:         $forum1 = self::getDataGenerator()->create_module('forum', $record);",
          "209:         $record = new stdClass();",
          "210:         $record->course = $course2->id;",
          "211:         $record->type = 'qanda';",
          "212:         $record->trackingtype = FORUM_TRACKING_FORCED;",
          "213:         $forum2 = self::getDataGenerator()->create_module('forum', $record);",
          "216:         $record = new stdClass();",
          "217:         $record->course = $course1->id;",
          "218:         $record->userid = $user1->id;",
          "219:         $record->forum = $forum1->id;",
          "220:         $discussion1 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "222:         $record = new stdClass();",
          "223:         $record->course = $course2->id;",
          "224:         $record->userid = $user2->id;",
          "225:         $record->forum = $forum2->id;",
          "226:         $discussion2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "229:         $record = new stdClass();",
          "230:         $record->discussion = $discussion1->id;",
          "231:         $record->parent = $discussion1->firstpost;",
          "232:         $record->userid = $user2->id;",
          "233:         $discussion1reply1 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "235:         $record->parent = $discussion1reply1->id;",
          "236:         $record->userid = $user3->id;",
          "237:         $discussion1reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "239:         $record->userid = $user4->id;",
          "240:         $discussion1reply3 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "243:         $record = new stdClass();",
          "244:         $record->discussion = $discussion2->id;",
          "245:         $record->parent = $discussion2->firstpost;",
          "246:         $record->userid = $user1->id;",
          "247:         $discussion2reply1 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "249:         $record->parent = $discussion2reply1->id;",
          "250:         $record->userid = $user3->id;",
          "251:         $discussion2reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "254:         $this->assertEquals(2, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2',",
          "255:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
          "258:         $this->assertEquals(2, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2',",
          "259:                                                             array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
          "262:         $this->assertEquals(7, $DB->count_records_select('forum_posts', 'discussion = :discussion1 OR discussion = :discussion2',",
          "263:                 array('discussion1' => $discussion1->id, 'discussion2' => $discussion2->id)));",
          "266:         $enrol = enrol_get_plugin('manual');",
          "269:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "273:         $enrolinstances = enrol_get_instances($course2->id, true);",
          "274:         foreach ($enrolinstances as $courseenrolinstance) {",
          "275:             if ($courseenrolinstance->enrol == \"manual\") {",
          "276:                 $instance2 = $courseenrolinstance;",
          "277:                 break;",
          "278:             }",
          "279:         }",
          "280:         $enrol->enrol_user($instance2, $user1->id);",
          "283:         $cm = get_coursemodule_from_id('forum', $forum2->cmid, 0, false, MUST_EXIST);",
          "284:         $context = context_module::instance($cm->id);",
          "285:         $newrole = create_role('Role 2', 'role2', 'Role 2 description');",
          "286:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
          "289:         $expecteddiscussions = array();",
          "290:         $expecteddiscussions[] = array(",
          "291:                 'id' => $discussion1->id,",
          "292:                 'course' => $discussion1->course,",
          "293:                 'forum' => $discussion1->forum,",
          "294:                 'name' => $discussion1->name,",
          "295:                 'firstpost' => $discussion1->firstpost,",
          "296:                 'userid' => $discussion1->userid,",
          "297:                 'groupid' => $discussion1->groupid,",
          "298:                 'assessed' => $discussion1->assessed,",
          "299:                 'timemodified' => $discussion1reply3->created,",
          "300:                 'usermodified' => $discussion1reply3->userid,",
          "301:                 'timestart' => $discussion1->timestart,",
          "302:                 'timeend' => $discussion1->timeend,",
          "303:                 'firstuserfullname' => fullname($user1),",
          "304:                 'firstuserimagealt' => $user1->imagealt,",
          "305:                 'firstuserpicture' => $user1->picture,",
          "306:                 'firstuseremail' => $user1->email,",
          "307:                 'subject' => $discussion1->name,",
          "308:                 'numreplies' => 3,",
          "309:                 'numunread' => '',",
          "310:                 'lastpost' => $discussion1reply3->id,",
          "311:                 'lastuserid' => $user4->id,",
          "312:                 'lastuserfullname' => fullname($user4),",
          "313:                 'lastuserimagealt' => $user4->imagealt,",
          "314:                 'lastuserpicture' => $user4->picture,",
          "315:                 'lastuseremail' => $user4->email",
          "316:             );",
          "317:         $expecteddiscussions[] = array(",
          "318:                 'id' => $discussion2->id,",
          "319:                 'course' => $discussion2->course,",
          "320:                 'forum' => $discussion2->forum,",
          "321:                 'name' => $discussion2->name,",
          "322:                 'firstpost' => $discussion2->firstpost,",
          "323:                 'userid' => $discussion2->userid,",
          "324:                 'groupid' => $discussion2->groupid,",
          "325:                 'assessed' => $discussion2->assessed,",
          "326:                 'timemodified' => $discussion2reply2->created,",
          "327:                 'usermodified' => $discussion2reply2->userid,",
          "328:                 'timestart' => $discussion2->timestart,",
          "329:                 'timeend' => $discussion2->timeend,",
          "330:                 'firstuserfullname' => fullname($user2),",
          "331:                 'firstuserimagealt' => $user2->imagealt,",
          "332:                 'firstuserpicture' => $user2->picture,",
          "333:                 'firstuseremail' => $user2->email,",
          "334:                 'subject' => $discussion2->name,",
          "335:                 'numreplies' => 2,",
          "336:                 'numunread' => 3,",
          "337:                 'lastpost' => $discussion2reply2->id,",
          "338:                 'lastuserid' => $user3->id,",
          "339:                 'lastuserfullname' => fullname($user3),",
          "340:                 'lastuserimagealt' => $user3->imagealt,",
          "341:                 'lastuserpicture' => $user3->picture,",
          "342:                 'lastuseremail' => $user3->email",
          "343:             );",
          "346:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id));",
          "347:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "348:         $this->assertEquals($expecteddiscussions, $discussions);",
          "351:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
          "352:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
          "353:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "354:         $this->assertEquals(1, count($discussions));",
          "357:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
          "358:         try {",
          "359:             mod_forum_external::get_forum_discussions(array($forum1->id));",
          "360:             $this->fail('Exception expected due to missing capability.');",
          "361:         } catch (moodle_exception $e) {",
          "362:             $this->assertEquals('nopermissions', $e->errorcode);",
          "363:         }",
          "366:         $enrol->unenrol_user($instance2, $user1->id);",
          "369:         try {",
          "370:             mod_forum_external::get_forum_discussions(array($forum2->id));",
          "371:             $this->fail('Exception expected due to being unenrolled from the course.');",
          "372:         } catch (moodle_exception $e) {",
          "373:             $this->assertEquals('requireloginerror', $e->errorcode);",
          "374:         }",
          "375:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "user/externallib.php||user/externallib.php": [
          "File: user/externallib.php -> user/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749: <<<<<<< HEAD",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "856:     public static function get_course_user_profiles_parameters() {",
          "857:         return new external_function_parameters(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856: =======",
          "857: >>>>>>> MDL-49414 webservices: Remove deprecated functions",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1447:     }",
          "1449: }",
          "",
          "[Removed Lines]",
          "1461: class moodle_user_external extends external_api {",
          "1471:     public static function create_users_parameters() {",
          "1472:         return core_user_external::create_users_parameters();",
          "1473:     }",
          "1484:     public static function create_users($users) {",
          "1485:         return core_user_external::create_users($users);",
          "1486:     }",
          "1496:     public static function create_users_returns() {",
          "1497:         return core_user_external::create_users_returns();",
          "1498:     }",
          "1505:     public static function create_users_is_deprecated() {",
          "1506:         return true;",
          "1507:     }",
          "1517:     public static function delete_users_parameters() {",
          "1518:         return core_user_external::delete_users_parameters();",
          "1519:     }",
          "1530:     public static function delete_users($userids) {",
          "1531:         return core_user_external::delete_users($userids);",
          "1532:     }",
          "1542:     public static function delete_users_returns() {",
          "1543:         return core_user_external::delete_users_returns();",
          "1544:     }",
          "1551:     public static function delete_users_is_deprecated() {",
          "1552:         return true;",
          "1553:     }",
          "1563:     public static function update_users_parameters() {",
          "1564:         return core_user_external::update_users_parameters();",
          "1565:     }",
          "1576:     public static function update_users($users) {",
          "1577:         return core_user_external::update_users($users);",
          "1578:     }",
          "1588:     public static function update_users_returns() {",
          "1589:         return core_user_external::update_users_returns();",
          "1590:     }",
          "1597:     public static function update_users_is_deprecated() {",
          "1598:         return true;",
          "1599:     }",
          "1609:     public static function get_users_by_id_parameters() {",
          "1610:         return core_user_external::get_users_by_id_parameters();",
          "1611:     }",
          "1625:     public static function get_users_by_id($userids) {",
          "1626:         return core_user_external::get_users_by_id($userids);",
          "1627:     }",
          "1637:     public static function get_users_by_id_returns() {",
          "1638:         return core_user_external::get_users_by_id_returns();",
          "1639:     }",
          "1646:     public static function get_users_by_id_is_deprecated() {",
          "1647:         return true;",
          "1648:     }",
          "1658:     public static function get_course_participants_by_id_parameters() {",
          "1659:         return core_user_external::get_course_user_profiles_parameters();",
          "1660:     }",
          "1671:     public static function get_course_participants_by_id($userlist) {",
          "1672:         return core_user_external::get_course_user_profiles($userlist);",
          "1673:     }",
          "1683:     public static function get_course_participants_by_id_returns() {",
          "1684:         return core_user_external::get_course_user_profiles_returns();",
          "1685:     }",
          "1692:     public static function get_course_participants_by_id_is_deprecated() {",
          "1693:         return true;",
          "1694:     }",
          "1704:     public static function get_users_by_courseid_parameters() {",
          "1705:         global $CFG;",
          "1706:         require_once($CFG->dirroot . '/enrol/externallib.php');",
          "1707:         return core_enrol_external::get_enrolled_users_parameters();",
          "1708:     }",
          "1723:     public static function get_users_by_courseid($courseid, $options = array()) {",
          "1724:         global $CFG;",
          "1725:         require_once($CFG->dirroot . '/enrol/externallib.php');",
          "1726:         return core_enrol_external::get_enrolled_users($courseid, $options);",
          "1727:     }",
          "1736:     public static function get_users_by_courseid_returns() {",
          "1737:         global $CFG;",
          "1738:         require_once($CFG->dirroot . '/enrol/externallib.php');",
          "1739:         return core_enrol_external::get_enrolled_users_returns();",
          "1740:     }",
          "1747:     public static function get_users_by_courseid_is_deprecated() {",
          "1748:         return true;",
          "1749:     }",
          "1750: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "user/tests/externallib_test.php||user/tests/externallib_test.php": [
          "File: user/tests/externallib_test.php -> user/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:         core_user_external::delete_users(array($user1->id, $user2->id));",
          "559:     }",
          "",
          "[Removed Lines]",
          "564:     public function test_get_users_by_id() {",
          "565:         global $USER, $CFG;",
          "567:         $this->resetAfterTest(true);",
          "569:         $user1 = array(",
          "570:             'username' => 'usernametest1',",
          "571:             'idnumber' => 'idnumbertest1',",
          "572:             'firstname' => 'First Name User Test 1',",
          "573:             'lastname' => 'Last Name User Test 1',",
          "574:             'email' => 'usertest1@example.com',",
          "575:             'address' => '2 Test Street Perth 6000 WA',",
          "576:             'phone1' => '01010101010',",
          "577:             'phone2' => '02020203',",
          "578:             'icq' => 'testuser1',",
          "579:             'skype' => 'testuser1',",
          "580:             'yahoo' => 'testuser1',",
          "581:             'aim' => 'testuser1',",
          "582:             'msn' => 'testuser1',",
          "583:             'department' => 'Department of user 1',",
          "584:             'institution' => 'Institution of user 1',",
          "585:             'description' => 'This is a description for user 1',",
          "586:             'descriptionformat' => FORMAT_MOODLE,",
          "587:             'city' => 'Perth',",
          "588:             'url' => 'http://moodle.org',",
          "589:             'country' => 'AU'",
          "590:             );",
          "591:         $user1 = self::getDataGenerator()->create_user($user1);",
          "592:         if (!empty($CFG->usetags)) {",
          "593:             require_once($CFG->dirroot . '/user/editlib.php');",
          "594:             $user1->interests = array('Cinema', 'Tennis', 'Dance', 'Guitar', 'Cooking');",
          "595:             useredit_update_interests($user1, $user1->interests);",
          "596:         }",
          "597:         $user2 = self::getDataGenerator()->create_user();",
          "599:         $context = context_system::instance();",
          "600:         $roleid = $this->assignUserCapability('moodle/user:viewdetails', $context->id);",
          "603:         $returnedusers = core_user_external::get_users_by_id(array(",
          "604:                     $USER->id, $user1->id, $user2->id));",
          "607:         $returnedusers = external_api::clean_returnvalue(core_user_external::get_users_by_id_returns(), $returnedusers);",
          "610:         $this->assertEquals(3, count($returnedusers));",
          "613:         $this->setAdminUser();",
          "614:         $USER->email = \"admin@example.com\";",
          "617:         $returnedusers = core_user_external::get_users_by_id(array(",
          "618:                     $USER->id, $user1->id, $user2->id));",
          "621:         $returnedusers = external_api::clean_returnvalue(core_user_external::get_users_by_id_returns(), $returnedusers);",
          "623:         foreach($returnedusers as $enrolleduser) {",
          "624:             if ($enrolleduser['username'] == $user1->username) {",
          "625:                 $this->assertEquals($user1->idnumber, $enrolleduser['idnumber']);",
          "626:                 $this->assertEquals($user1->firstname, $enrolleduser['firstname']);",
          "627:                 $this->assertEquals($user1->lastname, $enrolleduser['lastname']);",
          "628:                 $this->assertEquals($user1->email, $enrolleduser['email']);",
          "629:                 $this->assertEquals($user1->address, $enrolleduser['address']);",
          "630:                 $this->assertEquals($user1->phone1, $enrolleduser['phone1']);",
          "631:                 $this->assertEquals($user1->phone2, $enrolleduser['phone2']);",
          "632:                 $this->assertEquals($user1->icq, $enrolleduser['icq']);",
          "633:                 $this->assertEquals($user1->skype, $enrolleduser['skype']);",
          "634:                 $this->assertEquals($user1->yahoo, $enrolleduser['yahoo']);",
          "635:                 $this->assertEquals($user1->aim, $enrolleduser['aim']);",
          "636:                 $this->assertEquals($user1->msn, $enrolleduser['msn']);",
          "637:                 $this->assertEquals($user1->department, $enrolleduser['department']);",
          "638:                 $this->assertEquals($user1->institution, $enrolleduser['institution']);",
          "639:                 $this->assertEquals($user1->description, $enrolleduser['description']);",
          "640:                 $this->assertEquals(FORMAT_HTML, $enrolleduser['descriptionformat']);",
          "641:                 $this->assertEquals($user1->city, $enrolleduser['city']);",
          "642:                 $this->assertEquals($user1->country, $enrolleduser['country']);",
          "643:                 $this->assertEquals($user1->url, $enrolleduser['url']);",
          "644:                 if (!empty($CFG->usetags)) {",
          "645:                     $this->assertEquals(implode(', ', $user1->interests), $enrolleduser['interests']);",
          "646:                 }",
          "647:             }",
          "648:         }",
          "649:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2016042600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2016042600.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ],
        "webservice/externallib.php||webservice/externallib.php": [
          "File: webservice/externallib.php -> webservice/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:         );",
          "263:     }",
          "264: }",
          "",
          "[Removed Lines]",
          "277: class moodle_webservice_external extends external_api {",
          "287:     public static function get_siteinfo_parameters() {",
          "288:         return core_webservice_external::get_site_info_parameters();",
          "289:     }",
          "302:     public function get_siteinfo($serviceshortnames = array()) {",
          "303:         return core_webservice_external::get_site_info($serviceshortnames);",
          "304:     }",
          "314:     public static function get_siteinfo_returns() {",
          "315:         return core_webservice_external::get_site_info_returns();",
          "316:     }",
          "323:     public static function get_siteinfo_is_deprecated() {",
          "324:         return true;",
          "325:     }",
          "326: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webservice/lib.php||webservice/lib.php": [
          "File: webservice/lib.php -> webservice/lib.php"
        ],
        "webservice/renderer.php||webservice/renderer.php": [
          "File: webservice/renderer.php -> webservice/renderer.php"
        ],
        "webservice/upload.php||webservice/upload.php": [
          "File: webservice/upload.php -> webservice/upload.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: if ($filearea === 'private') {",
          "74: }",
          "78:     throw new file_exception('error');",
          "79: }",
          "",
          "[Removed Lines]",
          "73:     require_capability('moodle/user:manageownfiles', $context);",
          "76: if ($filearea !== 'private' and $filearea !== 'draft') {",
          "",
          "[Added Lines]",
          "73:     throw new moodle_exception('privatefilesupload');",
          "76: if ($filearea !== 'draft') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: $maxareabytes = FILE_AREA_MAX_BYTES_UNLIMITED;",
          "138: $maxupload = get_user_max_upload_file_size($context, $CFG->maxbytes);",
          "159: if ($maxupload !== USER_CAN_IGNORE_FILE_SIZE_LIMITS && $totalsize > $maxupload) {",
          "",
          "[Removed Lines]",
          "139: if ($filearea == 'private') {",
          "141:     if (!has_capability('moodle/user:ignoreuserquota', $context)) {",
          "142:         $maxareabytes = $CFG->userquota;",
          "143:     }",
          "146:     if ($maxareabytes > 0) {",
          "147:         $usedspace = 0;",
          "148:         $existingfiles = $fs->get_area_files($context->id, 'user', $filearea, false, 'id', false);",
          "149:         foreach ($existingfiles as $file) {",
          "150:             $usedspace += $file->get_filesize();",
          "151:         }",
          "152:         if ($totalsize > ($maxareabytes - $usedspace)) {",
          "153:             throw new file_exception('userquotalimit');",
          "154:         }",
          "155:     }",
          "156: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "350397da93c557f577e7d62e7fc3e233792ad171",
      "candidate_info": {
        "commit_hash": "350397da93c557f577e7d62e7fc3e233792ad171",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/350397da93c557f577e7d62e7fc3e233792ad171",
        "files": [
          "files/externallib.php"
        ],
        "message": "MDL-49994 files: Prevent to browse private files when are disabled",
        "before_after_code_files": [
          "files/externallib.php||files/externallib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "files/externallib.php||files/externallib.php"
          ],
          "candidate": [
            "files/externallib.php||files/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "files/externallib.php||files/externallib.php": [
          "File: files/externallib.php -> files/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:         $context = self::get_context_from_params($fileinfo);",
          "322:         self::validate_context($context);",
          "323:         if (($fileinfo['component'] == 'user' and $fileinfo['filearea'] == 'private')) {",
          "324:             debugging('Uploading directly to user private files area is deprecated. Upload to a draft area and then move the files with core_user::add_user_private_files');",
          "325:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:             require_capability('moodle/user:manageownfiles', $context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e8ee7530427a10e409386657484e9fd5effc438",
      "candidate_info": {
        "commit_hash": "8e8ee7530427a10e409386657484e9fd5effc438",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8e8ee7530427a10e409386657484e9fd5effc438",
        "files": [
          "files/externallib.php"
        ],
        "message": "MDL-49994 files: Prevent to browse private files when are disabled",
        "before_after_code_files": [
          "files/externallib.php||files/externallib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "files/externallib.php||files/externallib.php"
          ],
          "candidate": [
            "files/externallib.php||files/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "files/externallib.php||files/externallib.php": [
          "File: files/externallib.php -> files/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:         $context = self::get_context_from_params($fileinfo);",
          "322:         self::validate_context($context);",
          "323:         if (($fileinfo['component'] == 'user' and $fileinfo['filearea'] == 'private')) {",
          "324:             debugging('Uploading directly to user private files area is deprecated. Upload to a draft area and then move the files with core_user::add_user_private_files');",
          "325:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:             require_capability('moodle/user:manageownfiles', $context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b6b64685affa66784fd238c1bbc1eb0651492a0",
      "candidate_info": {
        "commit_hash": "4b6b64685affa66784fd238c1bbc1eb0651492a0",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4b6b64685affa66784fd238c1bbc1eb0651492a0",
        "files": [
          "files/externallib.php"
        ],
        "message": "MDL-49994 files: Prevent to browse private files when are disabled",
        "before_after_code_files": [
          "files/externallib.php||files/externallib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "files/externallib.php||files/externallib.php"
          ],
          "candidate": [
            "files/externallib.php||files/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "files/externallib.php||files/externallib.php": [
          "File: files/externallib.php -> files/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:         $context = self::get_context_from_params($fileinfo);",
          "322:         self::validate_context($context);",
          "323:         if (($fileinfo['component'] == 'user' and $fileinfo['filearea'] == 'private')) {",
          "324:             debugging('Uploading directly to user private files area is deprecated. Upload to a draft area and then move the files with core_user::add_user_private_files');",
          "325:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:             require_capability('moodle/user:manageownfiles', $context);",
          "",
          "---------------"
        ]
      }
    }
  ]
}