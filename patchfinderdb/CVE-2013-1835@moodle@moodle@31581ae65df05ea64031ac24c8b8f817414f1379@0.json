{
  "cve_id": "CVE-2013-1835",
  "cve_desc": "Moodle 2.x through 2.1.10, 2.2.x before 2.2.8, 2.3.x before 2.3.5, and 2.4.x before 2.4.2 allows remote authenticated administrators to obtain sensitive information from the external repositories of arbitrary users by leveraging the login_as feature.",
  "repo": "moodle/moodle",
  "patch_hash": "31581ae65df05ea64031ac24c8b8f817414f1379",
  "patch_info": {
    "commit_hash": "31581ae65df05ea64031ac24c8b8f817414f1379",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/31581ae65df05ea64031ac24c8b8f817414f1379",
    "files": [
      "lang/en/repository.php",
      "repository/coursefiles/lib.php",
      "repository/equella/lib.php",
      "repository/filesystem/lib.php",
      "repository/flickr_public/lib.php",
      "repository/lib.php",
      "repository/local/lib.php",
      "repository/merlot/lib.php",
      "repository/recent/lib.php",
      "repository/s3/lib.php",
      "repository/upgrade.txt",
      "repository/upload/lib.php",
      "repository/url/lib.php",
      "repository/user/lib.php",
      "repository/webdav/lib.php",
      "repository/wikimedia/lib.php",
      "repository/youtube/lib.php"
    ],
    "message": "MDL-36426 repository: Prevent login_as() users to access private repositories",
    "before_after_code_files": [
      "lang/en/repository.php||lang/en/repository.php",
      "repository/coursefiles/lib.php||repository/coursefiles/lib.php",
      "repository/equella/lib.php||repository/equella/lib.php",
      "repository/filesystem/lib.php||repository/filesystem/lib.php",
      "repository/flickr_public/lib.php||repository/flickr_public/lib.php",
      "repository/lib.php||repository/lib.php",
      "repository/local/lib.php||repository/local/lib.php",
      "repository/merlot/lib.php||repository/merlot/lib.php",
      "repository/recent/lib.php||repository/recent/lib.php",
      "repository/s3/lib.php||repository/s3/lib.php",
      "repository/upload/lib.php||repository/upload/lib.php",
      "repository/url/lib.php||repository/url/lib.php",
      "repository/user/lib.php||repository/user/lib.php",
      "repository/webdav/lib.php||repository/webdav/lib.php",
      "repository/wikimedia/lib.php||repository/wikimedia/lib.php",
      "repository/youtube/lib.php||repository/youtube/lib.php"
    ]
  },
  "patch_diff": {
    "lang/en/repository.php||lang/en/repository.php": [
      "File: lang/en/repository.php -> lang/en/repository.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "158: $string['nofilesavailable'] = 'No files available';",
      "159: $string['nomorefiles'] = 'No more attachments allowed';",
      "160: $string['nopathselected'] = 'No destination path select yet (double click tree node to select)';",
      "162: $string['noresult'] = 'No search result';",
      "163: $string['norepositoriesavailable'] = 'Sorry, none of your current repositories can return files in the required format.';",
      "164: $string['norepositoriesexternalavailable'] = 'Sorry, none of your current repositories can return external files.';",
      "",
      "[Removed Lines]",
      "161: $string['nopermissiontoaccess'] = 'No permission to access this repository';",
      "",
      "[Added Lines]",
      "161: $string['nopermissiontoaccess'] = 'No permission to access this repository.';",
      "",
      "---------------"
    ],
    "repository/coursefiles/lib.php||repository/coursefiles/lib.php": [
      "File: repository/coursefiles/lib.php -> repository/coursefiles/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "217:         return 0;",
      "218:     }",
      "219: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "225:     public function contains_private_data() {",
      "226:         return false;",
      "227:     }",
      "",
      "---------------"
    ],
    "repository/equella/lib.php||repository/equella/lib.php": [
      "File: repository/equella/lib.php -> repository/equella/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "437:             return get_string('lostsource', 'repository', '');",
      "438:         }",
      "439:     }",
      "440: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "446:     public function contains_private_data() {",
      "447:         return false;",
      "448:     }",
      "",
      "---------------"
    ],
    "repository/filesystem/lib.php||repository/filesystem/lib.php": [
      "File: repository/filesystem/lib.php -> repository/filesystem/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "333:             send_file_not_found();",
      "334:         }",
      "335:     }",
      "336: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "342:     public function contains_private_data() {",
      "343:         return false;",
      "344:     }",
      "",
      "---------------"
    ],
    "repository/flickr_public/lib.php||repository/flickr_public/lib.php": [
      "File: repository/flickr_public/lib.php -> repository/flickr_public/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "550:     public function get_file_source_info($photoid) {",
      "551:         return $this->build_photo_url($photoid);",
      "552:     }",
      "553: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "559:     public function contains_private_data() {",
      "560:         return false;",
      "561:     }",
      "",
      "---------------"
    ],
    "repository/lib.php||repository/lib.php": [
      "File: repository/lib.php -> repository/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:     public $returntypes;",
      "489:     public $instance;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "491:     protected $typename;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "558:         }",
      "559:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "570:     public function get_typename() {",
      "571:         if (empty($this->typename)) {",
      "572:             $matches = array();",
      "573:             if (!preg_match(\"/^repository_(.*)$/\", get_class($this), $matches)) {",
      "574:                 throw new coding_exception('The class name of a repository should be repository_<typeofrepository>, '.",
      "575:                         'e.g. repository_dropbox');",
      "576:             }",
      "577:             $this->typename = $matches[1];",
      "578:         }",
      "579:         return $this->typename;",
      "580:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "620:     }",
      "627:     public final function check_capability() {",
      "632:         }",
      "635:         }",
      "636:     }",
      "",
      "[Removed Lines]",
      "628:         $capability = false;",
      "629:         if (preg_match(\"/^repository_(.*)$/\", get_class($this), $matches)) {",
      "630:             $type = $matches[1];",
      "631:             $capability = has_capability('repository/'.$type.':view', $this->context);",
      "633:         if (!$capability) {",
      "634:             throw new repository_exception('nopermissiontoaccess', 'repository');",
      "",
      "[Added Lines]",
      "650:         global $USER;",
      "653:         $can = has_capability('repository/'.$this->get_typename().':view', $this->context);",
      "656:         $repocontext = context::instance_by_id($this->instance->contextid);",
      "659:         if ($can && session_is_loggedinas()) {",
      "660:             if ($this->contains_private_data() || $repocontext->contextlevel == CONTEXT_USER) {",
      "661:                 $can = false;",
      "662:             }",
      "667:         if ($can) {",
      "668:             if ($repocontext->contextlevel == CONTEXT_USER && $repocontext->instanceid != $USER->id) {",
      "670:                 $can = false;",
      "671:             } else {",
      "672:                 $can = has_capability('repository/'.$this->get_typename().':view', $repocontext);",
      "673:             }",
      "674:         }",
      "676:         if ($can) {",
      "677:             return true;",
      "680:         throw new repository_exception('nopermissiontoaccess', 'repository');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1768:     public function get_name() {",
      "1769:         global $DB;",
      "1771:             return $name;",
      "1772:         } else {",
      "1774:         }",
      "1775:     }",
      "",
      "[Removed Lines]",
      "1770:         if ( $name = $this->instance->name ) {",
      "1773:             return get_string('pluginname', 'repository_' . $this->options['type']);",
      "",
      "[Added Lines]",
      "1815:         if ($name = $this->instance->name) {",
      "1818:             return get_string('pluginname', 'repository_' . $this->get_typename());",
      "1841:     public function contains_private_data() {",
      "1842:         return true;",
      "1843:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1806:         $meta = new stdClass();",
      "1807:         $meta->id   = $this->id;",
      "1808:         $meta->name = format_string($this->get_name());",
      "1810:         $meta->icon = $OUTPUT->pix_url('icon', 'repository_'.$meta->type)->out(false);",
      "1811:         $meta->supported_types = file_get_typegroup('extension', $this->supported_filetypes());",
      "1812:         $meta->return_types = $this->supported_returntypes();",
      "",
      "[Removed Lines]",
      "1809:         $meta->type = $this->options['type'];",
      "",
      "[Added Lines]",
      "1877:         $meta->type = $this->get_typename();",
      "",
      "---------------"
    ],
    "repository/local/lib.php||repository/local/lib.php": [
      "File: repository/local/lib.php -> repository/local/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "262:             'name' => $fileinfo->get_visible_name()",
      "263:         );",
      "264:     }",
      "265: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "271:     public function contains_private_data() {",
      "272:         return false;",
      "273:     }",
      "",
      "---------------"
    ],
    "repository/merlot/lib.php||repository/merlot/lib.php": [
      "File: repository/merlot/lib.php -> repository/merlot/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "161:     public function supported_filetypes() {",
      "162:         return array('link');",
      "163:     }",
      "164: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "170:     public function contains_private_data() {",
      "171:         return false;",
      "172:     }",
      "",
      "---------------"
    ],
    "repository/recent/lib.php||repository/recent/lib.php": [
      "File: repository/recent/lib.php -> repository/recent/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "203:     public function has_moodle_files() {",
      "204:         return true;",
      "205:     }",
      "206: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "212:     public function contains_private_data() {",
      "213:         return false;",
      "214:     }",
      "",
      "---------------"
    ],
    "repository/s3/lib.php||repository/s3/lib.php": [
      "File: repository/s3/lib.php -> repository/s3/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "249:     public function supported_returntypes() {",
      "250:         return FILE_INTERNAL;",
      "251:     }",
      "252: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "258:     public function contains_private_data() {",
      "259:         return false;",
      "260:     }",
      "",
      "---------------"
    ],
    "repository/upload/lib.php||repository/upload/lib.php": [
      "File: repository/upload/lib.php -> repository/upload/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "288:     public function supported_returntypes() {",
      "289:         return FILE_INTERNAL;",
      "290:     }",
      "291: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "297:     public function contains_private_data() {",
      "298:         return false;",
      "299:     }",
      "",
      "---------------"
    ],
    "repository/url/lib.php||repository/url/lib.php": [
      "File: repository/url/lib.php -> repository/url/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "237:     public function supported_filetypes() {",
      "238:         return array('web_image');",
      "239:     }",
      "240: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246:     public function contains_private_data() {",
      "247:         return false;",
      "248:     }",
      "",
      "---------------"
    ],
    "repository/user/lib.php||repository/user/lib.php": [
      "File: repository/user/lib.php -> repository/user/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "170:         return 0;",
      "171:     }",
      "172: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "178:     public function contains_private_data() {",
      "179:         return false;",
      "180:     }",
      "",
      "---------------"
    ],
    "repository/webdav/lib.php||repository/webdav/lib.php": [
      "File: repository/webdav/lib.php -> repository/webdav/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "185:     public function supported_returntypes() {",
      "186:         return (FILE_INTERNAL | FILE_EXTERNAL);",
      "187:     }",
      "188: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "195:     public function contains_private_data() {",
      "196:         return false;",
      "197:     }",
      "",
      "---------------"
    ],
    "repository/wikimedia/lib.php||repository/wikimedia/lib.php": [
      "File: repository/wikimedia/lib.php -> repository/wikimedia/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:     public function get_file_source_info($url) {",
      "190:         return $url;",
      "191:     }",
      "192: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:     public function contains_private_data() {",
      "199:         return false;",
      "200:     }",
      "",
      "---------------"
    ],
    "repository/youtube/lib.php||repository/youtube/lib.php": [
      "File: repository/youtube/lib.php -> repository/youtube/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "202:     public function supported_returntypes() {",
      "203:         return FILE_EXTERNAL;",
      "204:     }",
      "205: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211:     public function contains_private_data() {",
      "212:         return false;",
      "213:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e42861d4fa45f6aa4f25c043dadf6e809b89ba86",
      "candidate_info": {
        "commit_hash": "e42861d4fa45f6aa4f25c043dadf6e809b89ba86",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e42861d4fa45f6aa4f25c043dadf6e809b89ba86",
        "files": [
          "repository/lib.php"
        ],
        "message": "MDL-38474 repository: Correct context when checking permissions to access a repository",
        "before_after_code_files": [
          "repository/lib.php||repository/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "repository/lib.php||repository/lib.php"
          ],
          "candidate": [
            "repository/lib.php||repository/lib.php"
          ]
        }
      },
      "candidate_diff": {
        "repository/lib.php||repository/lib.php": [
          "File: repository/lib.php -> repository/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:     public final function check_capability() {",
          "650:         global $USER;",
          "656:         $repocontext = context::instance_by_id($this->instance->contextid);",
          "",
          "[Removed Lines]",
          "653:         $can = has_capability('repository/'.$this->get_typename().':view', $this->context);",
          "",
          "[Added Lines]",
          "653:         $currentcontext = $this->context;",
          "656:         $can = has_capability('repository/'.$this->get_typename().':view', $currentcontext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:             }",
          "663:         }",
          "667:         if ($can) {",
          "671:             } else {",
          "673:             }",
          "674:         }",
          "",
          "[Removed Lines]",
          "668:             if ($repocontext->contextlevel == CONTEXT_USER && $repocontext->instanceid != $USER->id) {",
          "670:                 $can = false;",
          "672:                 $can = has_capability('repository/'.$this->get_typename().':view', $repocontext);",
          "",
          "[Added Lines]",
          "671:             if ($repocontext->contextlevel == CONTEXT_USER) {",
          "673:                 if ($repocontext->instanceid != $USER->id) {",
          "674:                     $can = false;",
          "675:                 }",
          "676:             } else if ($repocontext->contextlevel == CONTEXT_COURSE) {",
          "678:                 if (in_array($currentcontext->contextlevel, array(CONTEXT_COURSE, CONTEXT_MODULE, CONTEXT_BLOCK))) {",
          "679:                     $coursecontext = $currentcontext->get_course_context();",
          "680:                     if ($coursecontext->instanceid != $repocontext->instanceid) {",
          "681:                         $can = false;",
          "682:                     }",
          "683:                 } else {",
          "686:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ded4050f1bb050770df3bc8e78dcfadf815011ea",
      "candidate_info": {
        "commit_hash": "ded4050f1bb050770df3bc8e78dcfadf815011ea",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ded4050f1bb050770df3bc8e78dcfadf815011ea",
        "files": [
          "lang/en/repository.php",
          "repository/lib.php"
        ],
        "message": "MDL-36426 repository: Prevent login_as() users to access",
        "before_after_code_files": [
          "lang/en/repository.php||lang/en/repository.php",
          "repository/lib.php||repository/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lang/en/repository.php||lang/en/repository.php",
            "repository/lib.php||repository/lib.php"
          ],
          "candidate": [
            "lang/en/repository.php||lang/en/repository.php",
            "repository/lib.php||repository/lib.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/repository.php||lang/en/repository.php": [
          "File: lang/en/repository.php -> lang/en/repository.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: $string['nofilesavailable'] = 'No files available';",
          "155: $string['nomorefiles'] = 'No more attachments allowed';",
          "156: $string['nopathselected'] = 'No destination path select yet (double click tree node to select)';",
          "158: $string['noresult'] = 'No search result';",
          "159: $string['norepositoriesavailable'] = 'Sorry, none of your current repositories can return files in the required format.';",
          "160: $string['norepositoriesexternalavailable'] = 'Sorry, none of your current repositories can return external files.';",
          "",
          "[Removed Lines]",
          "157: $string['nopermissiontoaccess'] = 'No permission to access this repository';",
          "",
          "[Added Lines]",
          "157: $string['nopermissiontoaccess'] = 'No permission to access this repository.';",
          "",
          "---------------"
        ],
        "repository/lib.php||repository/lib.php": [
          "File: repository/lib.php -> repository/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:     public $returntypes;",
          "489:     public $instance;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     public $type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:         $this->name = $this->get_name();",
          "520:         $this->returntypes = $this->supported_returntypes();",
          "521:         $this->super_called = true;",
          "522:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:         if (empty($this->type)) {",
          "528:             $matches = array();",
          "529:             if (!preg_match(\"/^repository_(.*)$/\", get_class($this), $matches)) {",
          "530:                 throw new coding_exception('The class name of a repository should be repository_<typeofrepository>, '.",
          "531:                         'e.g. repository_dropbox');",
          "532:             }",
          "533:             $this->type = $matches[1];",
          "534:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "620:     }",
          "627:     public final function check_capability() {",
          "632:         }",
          "635:         }",
          "636:     }",
          "",
          "[Removed Lines]",
          "628:         $capability = false;",
          "629:         if (preg_match(\"/^repository_(.*)$/\", get_class($this), $matches)) {",
          "630:             $type = $matches[1];",
          "631:             $capability = has_capability('repository/'.$type.':view', $this->context);",
          "633:         if (!$capability) {",
          "634:             throw new repository_exception('nopermissiontoaccess', 'repository');",
          "",
          "[Added Lines]",
          "642:         global $USER;",
          "645:         $can = has_capability('repository/'.$this->type.':view', $this->context);",
          "648:         $repocontext = context::instance_by_id($this->instance->contextid);",
          "651:         if (session_is_loggedinas()) {",
          "652:             $can = false;",
          "657:         if ($can) {",
          "658:             if ($repocontext->contextlevel == CONTEXT_USER && $repocontext->instanceid != $USER->id) {",
          "660:                 $can = false;",
          "661:             } else {",
          "662:                 $can = has_capability('repository/'.$this->type.':view', $repocontext);",
          "663:             }",
          "666:         if ($can) {",
          "667:             return true;",
          "668:         }",
          "670:         throw new repository_exception('nopermissiontoaccess', 'repository');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6153c8040dd6ecdf03070ad6b538845c263bf722",
      "candidate_info": {
        "commit_hash": "6153c8040dd6ecdf03070ad6b538845c263bf722",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6153c8040dd6ecdf03070ad6b538845c263bf722",
        "files": [
          "lang/en/repository.php",
          "repository/lib.php"
        ],
        "message": "MDL-36426 repository: Prevent login_as() users to access",
        "before_after_code_files": [
          "lang/en/repository.php||lang/en/repository.php",
          "repository/lib.php||repository/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lang/en/repository.php||lang/en/repository.php",
            "repository/lib.php||repository/lib.php"
          ],
          "candidate": [
            "lang/en/repository.php||lang/en/repository.php",
            "repository/lib.php||repository/lib.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/repository.php||lang/en/repository.php": [
          "File: lang/en/repository.php -> lang/en/repository.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: $string['nofilesavailable'] = 'No files available';",
          "155: $string['nomorefiles'] = 'No more attachments allowed';",
          "156: $string['nopathselected'] = 'No destination path select yet (double click tree node to select)';",
          "158: $string['noresult'] = 'No search result';",
          "159: $string['norepositoriesavailable'] = 'Sorry, none of your current repositories can return files in the required format.';",
          "160: $string['norepositoriesexternalavailable'] = 'Sorry, none of your current repositories can return external files.';",
          "",
          "[Removed Lines]",
          "157: $string['nopermissiontoaccess'] = 'No permission to access this repository';",
          "",
          "[Added Lines]",
          "157: $string['nopermissiontoaccess'] = 'No permission to access this repository.';",
          "",
          "---------------"
        ],
        "repository/lib.php||repository/lib.php": [
          "File: repository/lib.php -> repository/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:     public $returntypes;",
          "489:     public $instance;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     public $type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:         $this->name = $this->get_name();",
          "520:         $this->returntypes = $this->supported_returntypes();",
          "521:         $this->super_called = true;",
          "522:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:         if (empty($this->type)) {",
          "528:             $matches = array();",
          "529:             if (!preg_match(\"/^repository_(.*)$/\", get_class($this), $matches)) {",
          "530:                 throw new coding_exception('The class name of a repository should be repository_<typeofrepository>, '.",
          "531:                         'e.g. repository_dropbox');",
          "532:             }",
          "533:             $this->type = $matches[1];",
          "534:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "620:     }",
          "627:     public final function check_capability() {",
          "632:         }",
          "635:         }",
          "636:     }",
          "",
          "[Removed Lines]",
          "628:         $capability = false;",
          "629:         if (preg_match(\"/^repository_(.*)$/\", get_class($this), $matches)) {",
          "630:             $type = $matches[1];",
          "631:             $capability = has_capability('repository/'.$type.':view', $this->context);",
          "633:         if (!$capability) {",
          "634:             throw new repository_exception('nopermissiontoaccess', 'repository');",
          "",
          "[Added Lines]",
          "642:         global $USER;",
          "645:         $can = has_capability('repository/'.$this->type.':view', $this->context);",
          "648:         $repocontext = context::instance_by_id($this->instance->contextid);",
          "651:         if (session_is_loggedinas()) {",
          "652:             $can = false;",
          "653:         }",
          "657:         if ($can) {",
          "658:             if ($repocontext->contextlevel == CONTEXT_USER && $repocontext->instanceid != $USER->id) {",
          "660:                 $can = false;",
          "661:             } else {",
          "662:                 $can = has_capability('repository/'.$this->type.':view', $repocontext);",
          "663:             }",
          "666:         if ($can) {",
          "667:             return true;",
          "670:         throw new repository_exception('nopermissiontoaccess', 'repository');",
          "",
          "---------------"
        ]
      }
    }
  ]
}