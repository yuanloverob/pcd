{
  "cve_id": "CVE-2018-8785",
  "cve_desc": "FreeRDP prior to version 2.0.0-rc4 contains a Heap-Based Buffer Overflow in function zgfx_decompress() that results in a memory corruption and probably even a remote code execution.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "602f4a2e14b41703b5f431de3154cd46a5750a2d",
  "patch_info": {
    "commit_hash": "602f4a2e14b41703b5f431de3154cd46a5750a2d",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/602f4a2e14b41703b5f431de3154cd46a5750a2d",
    "files": [
      "include/freerdp/codec/zgfx.h",
      "libfreerdp/codec/zgfx.c"
    ],
    "message": "Fixed CVE-2018-8785\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
    "before_after_code_files": [
      "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h",
      "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
    ]
  },
  "patch_diff": {
    "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h": [
      "File: include/freerdp/codec/zgfx.h -> include/freerdp/codec/zgfx.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #define ZGFX_SEGMENTED_MAXSIZE   65535",
      "54: typedef struct _ZGFX_CONTEXT ZGFX_CONTEXT;",
      "56: #ifdef __cplusplus",
      "57: extern \"C\" {",
      "58: #endif",
      "64: FREERDP_API void zgfx_context_reset(ZGFX_CONTEXT* zgfx, BOOL flush);",
      "",
      "[Removed Lines]",
      "35: struct _ZGFX_CONTEXT",
      "36: {",
      "37:  BOOL Compressor;",
      "39:  const BYTE* pbInputCurrent;",
      "40:  const BYTE* pbInputEnd;",
      "42:  UINT32 bits;",
      "43:  UINT32 cBitsRemaining;",
      "44:  UINT32 BitsCurrent;",
      "45:  UINT32 cBitsCurrent;",
      "47:  BYTE OutputBuffer[65536];",
      "48:  UINT32 OutputCount;",
      "50:  BYTE HistoryBuffer[2500000];",
      "51:  UINT32 HistoryIndex;",
      "52:  UINT32 HistoryBufferSize;",
      "53: };",
      "60: FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData, UINT32* pDstSize, UINT32 flags);",
      "61: FREERDP_API int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags);",
      "62: FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst, const BYTE* pUncompressed, UINT32 uncompressedSize, UINT32* pFlags);",
      "",
      "[Added Lines]",
      "41: FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
      "42:                                 BYTE** ppDstData, UINT32* pDstSize, UINT32 flags);",
      "43: FREERDP_API int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
      "44:                               BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags);",
      "45: FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst,",
      "46:                                         const BYTE* pUncompressed, UINT32 uncompressedSize, UINT32* pFlags);",
      "",
      "---------------"
    ],
    "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
      "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: struct _ZGFX_TOKEN",
      "46: {",
      "51:  UINT32 valueBase;",
      "52: };",
      "53: typedef struct _ZGFX_TOKEN ZGFX_TOKEN;",
      "55: static const ZGFX_TOKEN ZGFX_TOKEN_TABLE[] =",
      "56: {",
      "",
      "[Removed Lines]",
      "47:  int prefixLength;",
      "48:  int prefixCode;",
      "49:  int valueBits;",
      "50:  int tokenType;",
      "",
      "[Added Lines]",
      "47:  UINT32 prefixLength;",
      "48:  UINT32 prefixCode;",
      "49:  UINT32 valueBits;",
      "50:  UINT32 tokenType;",
      "55: struct _ZGFX_CONTEXT",
      "56: {",
      "57:  BOOL Compressor;",
      "59:  const BYTE* pbInputCurrent;",
      "60:  const BYTE* pbInputEnd;",
      "62:  UINT32 bits;",
      "63:  UINT32 cBitsRemaining;",
      "64:  UINT32 BitsCurrent;",
      "65:  UINT32 cBitsCurrent;",
      "67:  BYTE OutputBuffer[65536];",
      "68:  UINT32 OutputCount;",
      "70:  BYTE HistoryBuffer[2500000];",
      "71:  UINT32 HistoryIndex;",
      "72:  UINT32 HistoryBufferSize;",
      "73: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:  { 0 }",
      "99: };",
      "111:  _zgfx->BitsCurrent &= ((1 << _zgfx->cBitsCurrent) - 1);",
      "113: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
      "114: {",
      "",
      "[Removed Lines]",
      "101: #define zgfx_GetBits(_zgfx, _nbits) \\",
      "102:  while (_zgfx->cBitsCurrent < _nbits) { \\",
      "103:   _zgfx->BitsCurrent <<= 8; \\",
      "104:   if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd) \\",
      "105:    _zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++; \\",
      "106:   _zgfx->cBitsCurrent += 8; \\",
      "107:  } \\",
      "108:  _zgfx->cBitsRemaining -= _nbits; \\",
      "109:  _zgfx->cBitsCurrent -= _nbits; \\",
      "110:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent; \\",
      "",
      "[Added Lines]",
      "121: static INLINE BOOL zgfx_GetBits(ZGFX_CONTEXT* _zgfx, UINT32 _nbits)",
      "122: {",
      "123:  if (!_zgfx)",
      "124:   return FALSE;",
      "126:  while (_zgfx->cBitsCurrent < _nbits)",
      "127:  {",
      "128:   _zgfx->BitsCurrent <<= 8;",
      "130:   if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd)",
      "131:    _zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++;",
      "133:   _zgfx->cBitsCurrent += 8;",
      "134:  }",
      "136:  _zgfx->cBitsRemaining -= _nbits;",
      "137:  _zgfx->cBitsCurrent -= _nbits;",
      "138:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent;",
      "140: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "193: {",
      "194:  BYTE c;",
      "195:  BYTE flags;",
      "197:  int opIndex;",
      "198:  int haveBits;",
      "199:  int inPrefix;",
      "",
      "[Removed Lines]",
      "196:  int extra;",
      "",
      "[Added Lines]",
      "225:  UINT32 extra = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "349:   UINT16 segmentCount;",
      "350:   UINT32 uncompressedSize;",
      "351:   BYTE* pConcatenated;",
      "353:   if (Stream_GetRemainingLength(stream) < 6)",
      "354:    goto fail;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "382:   size_t used = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "377:    if (!zgfx_decompress_segment(zgfx, stream, segmentSize))",
      "378:     goto fail;",
      "380:    CopyMemory(pConcatenated, zgfx->OutputBuffer, zgfx->OutputCount);",
      "381:    pConcatenated += zgfx->OutputCount;",
      "382:   }",
      "383:  }",
      "384:  else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "411:    if (zgfx->OutputCount > UINT32_MAX - used)",
      "412:     goto fail;",
      "414:    if (used + zgfx->OutputCount > uncompressedSize)",
      "415:     goto fail;",
      "419:    used += zgfx->OutputCount;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
      "candidate_info": {
        "commit_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "files": [
          "libfreerdp/codec/zgfx.c"
        ],
        "message": "Fixed CVE-2018-8784\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
          ],
          "candidate": [
            "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  _zgfx->cBitsCurrent -= _nbits;",
          "138:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent;",
          "139:  _zgfx->BitsCurrent &= ((1 << _zgfx->cBitsCurrent) - 1);",
          "140: }",
          "142: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:  UINT32 count;",
          "230:  UINT32 distance;",
          "231:  BYTE* pbSegment;",
          "235:   return FALSE;",
          "",
          "[Removed Lines]",
          "232:  size_t cbSegment = segmentSize - 1;",
          "234:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1))",
          "",
          "[Added Lines]",
          "233:  size_t cbSegment;",
          "235:  if (!zgfx || !stream)",
          "236:   return FALSE;",
          "238:  cbSegment = segmentSize - 1;",
          "240:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1) ||",
          "241:      (segmentSize > UINT32_MAX))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:  if (!(flags & PACKET_COMPRESSED))",
          "243:  {",
          "244:   zgfx_history_buffer_ring_write(zgfx, pbSegment, cbSegment);",
          "245:   CopyMemory(zgfx->OutputBuffer, pbSegment, cbSegment);",
          "246:   zgfx->OutputCount = cbSegment;",
          "247:   return TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   if (cbSegment > sizeof(zgfx->OutputBuffer))",
          "254:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:      if (++zgfx->HistoryIndex == zgfx->HistoryBufferSize)",
          "281:       zgfx->HistoryIndex = 0;",
          "283:      zgfx->OutputBuffer[zgfx->OutputCount++] = c;",
          "284:     }",
          "285:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:      if (zgfx->OutputCount >= sizeof(zgfx->OutputBuffer))",
          "295:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:        count += zgfx->bits;",
          "314:       }",
          "316:       zgfx_history_buffer_ring_read(zgfx, distance, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "317:       zgfx_history_buffer_ring_write(zgfx, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "318:       zgfx->OutputCount += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "331:        return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325:       zgfx->cBitsRemaining -= zgfx->cBitsCurrent;",
          "326:       zgfx->cBitsCurrent = 0;",
          "327:       zgfx->BitsCurrent = 0;",
          "328:       CopyMemory(&(zgfx->OutputBuffer[zgfx->OutputCount]), zgfx->pbInputCurrent, count);",
          "329:       zgfx_history_buffer_ring_write(zgfx, zgfx->pbInputCurrent, count);",
          "330:       zgfx->pbInputCurrent += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "347:        return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}