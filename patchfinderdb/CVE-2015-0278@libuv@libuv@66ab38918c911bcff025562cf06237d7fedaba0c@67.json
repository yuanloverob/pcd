{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4dc0d81ccbb7480d0511ed0b4b7e949cc7a225bb",
      "candidate_info": {
        "commit_hash": "4dc0d81ccbb7480d0511ed0b4b7e949cc7a225bb",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4dc0d81ccbb7480d0511ed0b4b7e949cc7a225bb",
        "files": [
          "src/unix/netbsd.c"
        ],
        "message": "netbsd: fix build\n\nThanks @ezra1!\n\nCloses #1391",
        "before_after_code_files": [
          "src/unix/netbsd.c||src/unix/netbsd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/netbsd.c||src/unix/netbsd.c": [
          "File: src/unix/netbsd.c -> src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <sys/resource.h>",
          "39: #include <sys/types.h>",
          "40: #include <sys/sysctl.h>",
          "42: #include <unistd.h>",
          "43: #include <time.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #include <uvm/uvm_extern.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b1422ba2b2abc7342298492b713aae99055248a",
      "candidate_info": {
        "commit_hash": "5b1422ba2b2abc7342298492b713aae99055248a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5b1422ba2b2abc7342298492b713aae99055248a",
        "files": [
          "checksparse.sh"
        ],
        "message": "unix: s/ngx-queue.h/queue.h/ in checksparse.sh",
        "before_after_code_files": [
          "checksparse.sh||checksparse.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "checksparse.sh||checksparse.sh": [
          "File: checksparse.sh -> checksparse.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: \"}",
          "29: SOURCES=\"",
          "31: include/uv-private/tree.h",
          "32: include/uv-private/uv-unix.h",
          "33: include/uv.h",
          "34: src/fs-poll.c",
          "35: src/inet.c",
          "36: src/unix/async.c",
          "37: src/unix/core.c",
          "38: src/unix/dl.c",
          "",
          "[Removed Lines]",
          "30: include/uv-private/ngx-queue.h",
          "",
          "[Added Lines]",
          "35: src/queue.h",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc56a4e05c9d4ea7fd8b2e4a8b148395fc3166e2",
      "candidate_info": {
        "commit_hash": "bc56a4e05c9d4ea7fd8b2e4a8b148395fc3166e2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bc56a4e05c9d4ea7fd8b2e4a8b148395fc3166e2",
        "files": [
          "src/win/core.c"
        ],
        "message": "windows: call idle handles on every loop iteration\n\nThis mimicks what the unix implementation does: call idle handles on\nevery loop iteration. The guarantee that it runs on every loop iteration\nmakes it easier to predict and opens up more use cases.\n\nNote that the name uv_idle is now a bit of a misnomer. There is\nactually no guarantee that libuv completely processed all i/o\nwhen an iteration ends. The windows implementation at least limits\nthe amount of callbacks processed in a single iteration to avoid some\nhandles getting a disproportionate amount of cpu attention.",
        "before_after_code_files": [
          "src/win/core.c||src/win/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     uv_update_time(loop);",
          "283:     uv_process_timers(loop);",
          "291:     uv_process_reqs(loop);",
          "292:     uv_process_endgames(loop);",
          "294:     uv_prepare_invoke(loop);",
          "296:     (*poll)(loop, loop->idle_handles == NULL &&",
          "",
          "[Removed Lines]",
          "286:     if (loop->pending_reqs_tail == NULL &&",
          "287:         loop->endgame_handles == NULL) {",
          "288:       uv_idle_invoke(loop);",
          "289:     }",
          "",
          "[Added Lines]",
          "288:     uv_idle_invoke(loop);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f44f8124e0466dd9a18defe34159eb342ccfde1f",
      "candidate_info": {
        "commit_hash": "f44f8124e0466dd9a18defe34159eb342ccfde1f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f44f8124e0466dd9a18defe34159eb342ccfde1f",
        "files": [
          "Makefile.am"
        ],
        "message": "build: hide dtrace rules unless needed\n\nWhen using configure, there are situations where libuv will attempt\nto build uv-dtrace.h, even if it is configured with --disable-dtrace.\nFor example, if libuv is first configured with dtrace enabled, then\nbuilt, the .deps files will contain references to include/uv-dtrace.h.\nAfter a make clean and configure --disable-dtrace, the build will still\nattempt to create include/uv-dtrace.h and fail. make will see the\ndependency reference (which survives the make clean), use the rule\n(which is always added to the Makefile), and fail since DTRACE is not\ndefined.\n\nThis commit protects the rules to make uv-dtrace.h with the proper\nconditionals to ensure the rules are not written if --disable-dtrace\nis chosen.\n\nFix #963.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: pkgconfig_DATA = @PACKAGE_NAME@.pc",
          "273: endif",
          "277: include/uv-dtrace.h: src/unix/uv-dtrace.d",
          "278:  $(AM_V_GEN)$(DTRACE) $(DTRACEFLAGS) -h -xnolibs -s $< -o $(top_srcdir)/$@",
          "280: src/unix/uv-dtrace.o: src/unix/uv-dtrace.d ${libuv_la_OBJECTS}",
          "",
          "[Removed Lines]",
          "275: SUFFIXES = .d",
          "",
          "[Added Lines]",
          "275: if HAVE_DTRACE",
          "278: endif",
          "280: if DTRACE_NEEDS_OBJECTS",
          "281: SUFFIXES = .d",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:   \"pic_object='uv-dtrace.o'\" \\",
          "292:   \"non_pic_object='uv-dtrace.o'\" \\",
          "293:  > ${top_builddir}/uv-dtrace.lo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17452cd0e2327c9d929215bbeabfd79d60f3ca4c",
      "candidate_info": {
        "commit_hash": "17452cd0e2327c9d929215bbeabfd79d60f3ca4c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/17452cd0e2327c9d929215bbeabfd79d60f3ca4c",
        "files": [
          "src/unix/udp.c"
        ],
        "message": "linux: fix setsockopt(SO_REUSEPORT) error handling\n\nLinux as of 3.9 has a SO_REUSEPORT option that is similar but not\nidentical to its BSD counterpart.\n\nOn the BSDs, it turns on SO_REUSEADDR _and_ makes it possible to share\nthe address and port across processes.\n\nOn Linux, it \"merely\" enables fair load distribution - port sharing\nstill requires that you set SO_REUSEADDR.\n\nFair distribution is a desirable trait but not an essential one.\nWe don't know in advance whether the kernel actually supports\nSO_REUSEPORT so don't treat EINVAL or ENOPROTOOPT as errors.\n\nAs an aside, on the BSDs we now omit the setsockopt(SO_REUSEADDR)\nsystem call because it's implied by SO_REUSEPORT.\n\nFixes #870.",
        "before_after_code_files": [
          "src/unix/udp.c||src/unix/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280: }",
          "283: static int uv__bind(uv_udp_t* handle,",
          "284:                     int domain,",
          "285:                     struct sockaddr* addr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: static int uv__set_reuse(int fd) {",
          "297:   int yes;",
          "298: #if defined(__linux__)",
          "299:   static int no_so_reuseport;",
          "301:   if (no_so_reuseport)",
          "302:     goto no_so_reuseport;",
          "304:   yes = 1;",
          "305:   if (setsockopt(fd, SOL_SOCKET, 15 /* SO_REUSEPORT */, &yes, sizeof(yes))) {",
          "306:     if (errno != EINVAL && errno != ENOPROTOOPT)",
          "307:       return -errno;",
          "308:     no_so_reuseport = 1;",
          "309:   }",
          "311: no_so_reuseport:",
          "313:   yes = 1;",
          "314:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)))",
          "315:     return -errno;",
          "316: #elif defined(SO_REUSEPORT)",
          "317:   yes = 1;",
          "318:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, &yes, sizeof(yes)))",
          "319:     return -errno;",
          "320: #else",
          "321:   yes = 1;",
          "322:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)))",
          "323:     return -errno;",
          "324: #endif",
          "326:   return 0;",
          "327: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     handle->io_watcher.fd = fd;",
          "309:   }",
          "329:     goto out;",
          "333:   if (flags & UV_UDP_IPV6ONLY) {",
          "334: #ifdef IPV6_V6ONLY",
          "",
          "[Removed Lines]",
          "311:   yes = 1;",
          "312:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof yes) == -1) {",
          "313:     err = -errno;",
          "314:     goto out;",
          "315:   }",
          "325: #ifdef SO_REUSEPORT",
          "326:   yes = 1;",
          "327:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, &yes, sizeof yes) == -1) {",
          "328:     err = -errno;",
          "330:   }",
          "331: #endif",
          "",
          "[Added Lines]",
          "358:   err = uv__set_reuse(fd);",
          "359:   if (err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "466: int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock) {",
          "470:   if (handle->io_watcher.fd != -1)",
          "491:   handle->io_watcher.fd = sock;",
          "492:   return 0;",
          "",
          "[Removed Lines]",
          "467:   int yes;",
          "473:   yes = 1;",
          "474:   if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof yes))",
          "475:     return -errno;",
          "485: #ifdef SO_REUSEPORT",
          "486:   yes = 1;",
          "487:   if (setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &yes, sizeof yes))",
          "488:     return -errno;",
          "489: #endif",
          "",
          "[Added Lines]",
          "496:   int err;",
          "502:   err = uv__set_reuse(sock);",
          "503:   if (err)",
          "504:     return err;",
          "",
          "---------------"
        ]
      }
    }
  ]
}