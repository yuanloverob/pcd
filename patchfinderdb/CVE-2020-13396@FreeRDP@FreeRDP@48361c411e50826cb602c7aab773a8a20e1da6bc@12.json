{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ece877b515f1f7f3800fac9bcfdbdf0ee56f3ce3",
      "candidate_info": {
        "commit_hash": "ece877b515f1f7f3800fac9bcfdbdf0ee56f3ce3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ece877b515f1f7f3800fac9bcfdbdf0ee56f3ce3",
        "files": [
          "libfreerdp/core/nla.c"
        ],
        "message": "Fixed some more resource cleanup leaks in nla\n\n(cherry picked from commit 354bb7d6ae98df282775d154b609a39c1068a09b)",
        "before_after_code_files": [
          "libfreerdp/core/nla.c||libfreerdp/core/nla.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/nla.c||libfreerdp/core/nla.c": [
          "File: libfreerdp/core/nla.c -> libfreerdp/core/nla.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1144:  const BOOL ntlm = (_tcsncmp(nla->packageName, NTLM_SSP_NAME, ARRAYSIZE(NTLM_SSP_NAME)) == 0);",
          "1145:  public_key_length = nla->PublicKey.cbBuffer;",
          "1147:  if (!sspi_SecBufferAlloc(&nla->pubKeyAuth,",
          "1148:                           public_key_length + nla->ContextSizes.cbSecurityTrailer))",
          "1149:   return SEC_E_INSUFFICIENT_MEMORY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1147:  sspi_SecBufferFree(&nla->pubKeyAuth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2465:  sspi_SecBufferFree(&nla->tsCredentials);",
          "2466:  free(nla->ServicePrincipalName);",
          "2467:  nla_identity_free(nla->identity);",
          "2468:  free(nla);",
          "2469: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2469:  nla_buffer_free(nla);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f25c2f265ee5dbd107a45ada7aaa49a12c643203",
      "candidate_info": {
        "commit_hash": "f25c2f265ee5dbd107a45ada7aaa49a12c643203",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f25c2f265ee5dbd107a45ada7aaa49a12c643203",
        "files": [
          "libfreerdp/codec/rfx_rlgr.c"
        ],
        "message": "Fixed undefined behaviour in rfx decoder\n\n(cherry picked from commit ef611d34d61c6590429c17db5c97f0a9a33147e8)",
        "before_after_code_files": [
          "libfreerdp/codec/rfx_rlgr.c||libfreerdp/codec/rfx_rlgr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/rfx_rlgr.c||libfreerdp/codec/rfx_rlgr.c": [
          "File: libfreerdp/codec/rfx_rlgr.c -> libfreerdp/codec/rfx_rlgr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     break;",
          "284:    bs->mask = ((1 << kr) - 1);",
          "286:    BitStream_Shift(bs, kr);",
          "",
          "[Removed Lines]",
          "285:    code = (UINT16)((bs->accumulator >> (32 - kr)) & bs->mask);",
          "",
          "[Added Lines]",
          "285:    if (kr > 0)",
          "286:     code = (UINT16)((bs->accumulator >> (32 - kr)) & bs->mask);",
          "287:    else",
          "288:     code = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390:     break;",
          "392:    bs->mask = ((1 << kr) - 1);",
          "394:    BitStream_Shift(bs, kr);",
          "",
          "[Removed Lines]",
          "393:    code = (UINT16)((bs->accumulator >> (32 - kr)) & bs->mask);",
          "",
          "[Added Lines]",
          "396:    if (kr > 0)",
          "397:     code = (UINT16)((bs->accumulator >> (32 - kr)) & bs->mask);",
          "398:    else",
          "399:     code = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "477:      break;",
          "479:     bs->mask = ((1 << nIdx) - 1);",
          "481:     BitStream_Shift(bs, nIdx);",
          "483:     val2 = code - val1;",
          "",
          "[Removed Lines]",
          "480:     val1 = ((bs->accumulator >> (32 - nIdx)) & bs->mask);",
          "",
          "[Added Lines]",
          "486:     if (nIdx > 0)",
          "487:      val1 = ((bs->accumulator >> (32 - nIdx)) & bs->mask);",
          "488:     else",
          "489:      val1 = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74629de51bdd83619254b2fc5e076e812b3d11ea",
      "candidate_info": {
        "commit_hash": "74629de51bdd83619254b2fc5e076e812b3d11ea",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/74629de51bdd83619254b2fc5e076e812b3d11ea",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c",
          "channels/drdynvc/client/drdynvc_main.h"
        ],
        "message": "drdynvc channel cleanup.\n\n* Clean channel listeners on channel close\n* Remove limit on listeners for channels\n* Remove limit on channels\n\n(cherry picked from commit 5b2a4434d8becd7b527d5b329eee9915ff8ca77a)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c",
          "channels/drdynvc/client/drdynvc_main.h||channels/drdynvc/client/drdynvc_main.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define TAG CHANNELS_TAG(\"drdynvc.client\")",
          "33: static void dvcman_channel_free(void* channel);",
          "34: static UINT drdynvc_write_data(drdynvcPlugin* drdynvc, UINT32 ChannelId, const BYTE* data,",
          "35:                                UINT32 dataSize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: static void dvcman_free(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "68:  DVCMAN_LISTENER* listener;",
          "105:   return ERROR_INTERNAL_ERROR;",
          "107: }",
          "109: static UINT dvcman_destroy_listener(IWTSVirtualChannelManager* pChannelMgr, IWTSListener* pListener)",
          "110: {",
          "112:  DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)pListener;",
          "114:  if (listener)",
          "115:  {",
          "116:   DVCMAN* dvcman = listener->dvcman;",
          "128:  }",
          "130:  return CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "70:  if (dvcman->num_listeners < MAX_PLUGINS)",
          "71:  {",
          "72:   WLog_DBG(TAG, \"create_listener: %d.%s.\", dvcman->num_listeners, pszChannelName);",
          "73:   listener = (DVCMAN_LISTENER*)calloc(1, sizeof(DVCMAN_LISTENER));",
          "75:   if (!listener)",
          "76:   {",
          "77:    WLog_ERR(TAG, \"calloc failed!\");",
          "78:    return CHANNEL_RC_NO_MEMORY;",
          "79:   }",
          "81:   listener->iface.GetConfiguration = dvcman_get_configuration;",
          "82:   listener->iface.pInterface = NULL;",
          "83:   listener->dvcman = dvcman;",
          "84:   listener->channel_name = _strdup(pszChannelName);",
          "86:   if (!listener->channel_name)",
          "87:   {",
          "88:    WLog_ERR(TAG, \"_strdup failed!\");",
          "89:    dvcman_wtslistener_free(listener);",
          "90:    return CHANNEL_RC_NO_MEMORY;",
          "91:   }",
          "93:   listener->flags = ulFlags;",
          "94:   listener->listener_callback = pListenerCallback;",
          "96:   if (ppListener)",
          "99:   dvcman->listeners[dvcman->num_listeners++] = (IWTSListener*)listener;",
          "100:   return CHANNEL_RC_OK;",
          "101:  }",
          "102:  else",
          "103:  {",
          "104:   WLog_ERR(TAG, \"create_listener: Maximum DVC listener number reached.\");",
          "106:  }",
          "111:  size_t x;",
          "117:   for (x = 0; x < dvcman->num_listeners; x++)",
          "118:   {",
          "119:    if (dvcman->listeners[x] == pListener)",
          "120:    {",
          "121:     size_t rest = (dvcman->num_listeners - x - 1) * sizeof(IWTSListener*);",
          "122:     MoveMemory(&dvcman->listeners[x], &dvcman->listeners[x + 1], rest);",
          "123:     dvcman->num_listeners--;",
          "124:     dvcman_wtslistener_free(listener);",
          "125:     break;",
          "126:    }",
          "127:   }",
          "",
          "[Added Lines]",
          "71:  WLog_DBG(TAG, \"create_listener: %d.%s.\", ArrayList_Count(dvcman->listeners) + 1,",
          "72:           pszChannelName);",
          "73:  listener = (DVCMAN_LISTENER*)calloc(1, sizeof(DVCMAN_LISTENER));",
          "75:  if (!listener)",
          "76:  {",
          "77:   WLog_ERR(TAG, \"calloc failed!\");",
          "78:   return CHANNEL_RC_NO_MEMORY;",
          "79:  }",
          "81:  listener->iface.GetConfiguration = dvcman_get_configuration;",
          "82:  listener->iface.pInterface = NULL;",
          "83:  listener->dvcman = dvcman;",
          "84:  listener->channel_name = _strdup(pszChannelName);",
          "86:  if (!listener->channel_name)",
          "87:  {",
          "88:   WLog_ERR(TAG, \"_strdup failed!\");",
          "89:   dvcman_wtslistener_free(listener);",
          "90:   return CHANNEL_RC_NO_MEMORY;",
          "91:  }",
          "93:  listener->flags = ulFlags;",
          "94:  listener->listener_callback = pListenerCallback;",
          "96:  if (ppListener)",
          "99:  if (ArrayList_Add(dvcman->listeners, listener) < 0)",
          "101:  return CHANNEL_RC_OK;",
          "108:  WINPR_UNUSED(pChannelMgr);",
          "113:   if (dvcman)",
          "114:    ArrayList_Remove(dvcman->listeners, listener);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140: {",
          "141:  DVCMAN* dvcman = ((DVCMAN_ENTRY_POINTS*)pEntryPoints)->dvcman;",
          "153:   return ERROR_INTERNAL_ERROR;",
          "155: }",
          "157: static IWTSPlugin* dvcman_get_plugin(IDRDYNVC_ENTRY_POINTS* pEntryPoints, const char* name)",
          "158: {",
          "160:  DVCMAN* dvcman = ((DVCMAN_ENTRY_POINTS*)pEntryPoints)->dvcman;",
          "163:  {",
          "165:   {",
          "167:   }",
          "168:  }",
          "171: }",
          "173: static ADDIN_ARGV* dvcman_get_plugin_data(IDRDYNVC_ENTRY_POINTS* pEntryPoints)",
          "",
          "[Removed Lines]",
          "143:  if (dvcman->num_plugins < MAX_PLUGINS)",
          "144:  {",
          "145:   dvcman->plugin_names[dvcman->num_plugins] = name;",
          "146:   dvcman->plugins[dvcman->num_plugins++] = pPlugin;",
          "147:   WLog_DBG(TAG, \"register_plugin: num_plugins %d\", dvcman->num_plugins);",
          "148:   return CHANNEL_RC_OK;",
          "149:  }",
          "150:  else",
          "151:  {",
          "152:   WLog_ERR(TAG, \"register_plugin: Maximum DVC plugin number %u reached.\", MAX_PLUGINS);",
          "154:  }",
          "159:  size_t i;",
          "162:  for (i = 0; i < dvcman->num_plugins; i++)",
          "164:   if (dvcman->plugin_names[i] == name || strcmp(dvcman->plugin_names[i], name) == 0)",
          "166:    return dvcman->plugins[i];",
          "170:  return NULL;",
          "",
          "[Added Lines]",
          "130:  if (ArrayList_Add(dvcman->plugin_names, _strdup(name)) < 0)",
          "132:  if (ArrayList_Add(dvcman->plugins, pPlugin) < 0)",
          "133:   return ERROR_INTERNAL_ERROR;",
          "135:  WLog_DBG(TAG, \"register_plugin: num_plugins %d\", ArrayList_Count(dvcman->plugins));",
          "136:  return CHANNEL_RC_OK;",
          "141:  IWTSPlugin* plugin = NULL;",
          "142:  size_t i, nc, pc;",
          "144:  if (!dvcman || !pEntryPoints || !name)",
          "145:   return NULL;",
          "147:  nc = ArrayList_Count(dvcman->plugin_names);",
          "148:  pc = ArrayList_Count(dvcman->plugins);",
          "149:  if (nc != pc)",
          "150:   return NULL;",
          "152:  ArrayList_Lock(dvcman->plugin_names);",
          "153:  ArrayList_Lock(dvcman->plugins);",
          "154:  for (i = 0; i < pc; i++)",
          "156:   const char* cur = ArrayList_GetItem(dvcman->plugin_names, i);",
          "157:   if (strcmp(cur, name) == 0)",
          "159:    plugin = ArrayList_GetItem(dvcman->plugins, i);",
          "160:    break;",
          "163:  ArrayList_Unlock(dvcman->plugin_names);",
          "164:  ArrayList_Unlock(dvcman->plugins);",
          "165:  return plugin;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:                                                      UINT32 ChannelId)",
          "197: {",
          "198:  int index;",
          "201:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "202:  ArrayList_Lock(dvcman->channels);",
          "207:  {",
          "209:   {",
          "211:    break;",
          "212:   }",
          "215:  }",
          "217:  ArrayList_Unlock(dvcman->channels);",
          "219: }",
          "221: static IWTSVirtualChannelManager* dvcman_new(drdynvcPlugin* plugin)",
          "222: {",
          "223:  DVCMAN* dvcman;",
          "224:  dvcman = (DVCMAN*)calloc(1, sizeof(DVCMAN));",
          "226:  if (!dvcman)",
          "229:   return NULL;",
          "232:  dvcman->iface.CreateListener = dvcman_create_listener;",
          "233:  dvcman->iface.DestroyListener = dvcman_destroy_listener;",
          "",
          "[Removed Lines]",
          "199:  BOOL found = FALSE;",
          "200:  DVCMAN_CHANNEL* channel;",
          "203:  index = 0;",
          "204:  channel = (DVCMAN_CHANNEL*)ArrayList_GetItem(dvcman->channels, index++);",
          "206:  while (channel)",
          "208:   if (channel->channel_id == ChannelId)",
          "210:    found = TRUE;",
          "214:   channel = (DVCMAN_CHANNEL*)ArrayList_GetItem(dvcman->channels, index++);",
          "218:  return (found) ? ((IWTSVirtualChannel*)channel) : NULL;",
          "227:  {",
          "228:   WLog_Print(plugin->log, WLOG_ERROR, \"calloc failed!\");",
          "230:  }",
          "",
          "[Added Lines]",
          "194:  IWTSVirtualChannel* channel = NULL;",
          "197:  for (index = 0; index < ArrayList_Count(dvcman->channels); index++)",
          "199:   DVCMAN_CHANNEL* cur = (DVCMAN_CHANNEL*)ArrayList_GetItem(dvcman->channels, index);",
          "200:   if (cur->channel_id == ChannelId)",
          "202:    channel = &cur->iface;",
          "208:  return channel;",
          "209: }",
          "211: static void dvcman_plugin_terminate(void* plugin)",
          "212: {",
          "213:  IWTSPlugin* pPlugin = plugin;",
          "215:  UINT error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Terminated, pPlugin);",
          "216:  if (error != CHANNEL_RC_OK)",
          "217:   WLog_ERR(TAG, \"Terminated failed with error %\" PRIu32 \"!\", error);",
          "222:  wObject* obj;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:  dvcman->channels = ArrayList_New(TRUE);",
          "240:  if (!dvcman->channels)",
          "250:  if (!dvcman->pool)",
          "259: }",
          "",
          "[Removed Lines]",
          "241:  {",
          "242:   WLog_Print(plugin->log, WLOG_ERROR, \"ArrayList_New failed!\");",
          "243:   free(dvcman);",
          "244:   return NULL;",
          "245:  }",
          "247:  dvcman->channels->object.fnObjectFree = dvcman_channel_free;",
          "248:  dvcman->pool = StreamPool_New(TRUE, 10);",
          "251:  {",
          "252:   WLog_Print(plugin->log, WLOG_ERROR, \"StreamPool_New failed!\");",
          "253:   ArrayList_Free(dvcman->channels);",
          "254:   free(dvcman);",
          "255:   return NULL;",
          "256:  }",
          "258:  return (IWTSVirtualChannelManager*)dvcman;",
          "",
          "[Added Lines]",
          "238:   goto fail;",
          "240:  obj = ArrayList_Object(dvcman->channels);",
          "241:  obj->fnObjectFree = dvcman_channel_free;",
          "243:  dvcman->pool = StreamPool_New(TRUE, 10);",
          "245:   goto fail;",
          "247:  dvcman->listeners = ArrayList_New(TRUE);",
          "248:  if (!dvcman->listeners)",
          "249:   goto fail;",
          "250:  obj = ArrayList_Object(dvcman->listeners);",
          "251:  obj->fnObjectFree = dvcman_wtslistener_free;",
          "253:  dvcman->plugin_names = ArrayList_New(TRUE);",
          "254:  if (!dvcman->plugin_names)",
          "255:   goto fail;",
          "256:  obj = ArrayList_Object(dvcman->plugin_names);",
          "257:  obj->fnObjectFree = free;",
          "259:  dvcman->plugins = ArrayList_New(TRUE);",
          "260:  if (!dvcman->plugins)",
          "261:   goto fail;",
          "262:  obj = ArrayList_Object(dvcman->plugins);",
          "263:  obj->fnObjectFree = dvcman_plugin_terminate;",
          "264:  return &dvcman->iface;",
          "265: fail:",
          "266:  dvcman_free(plugin, &dvcman->iface);",
          "267:  return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "304:  channel = (DVCMAN_CHANNEL*)calloc(1, sizeof(DVCMAN_CHANNEL));",
          "306:  if (!channel)",
          "312:  channel->dvcman = (DVCMAN*)pChannelMgr;",
          "313:  channel->channel_id = ChannelId;",
          "314:  channel->channel_name = _strdup(ChannelName);",
          "316:  if (!channel->channel_name)",
          "323:  if (!InitializeCriticalSectionEx(&(channel->lock), 0, 0))",
          "331:  return channel;",
          "332: }",
          "334: static void dvcman_channel_free(void* arg)",
          "",
          "[Removed Lines]",
          "307:  {",
          "308:   WLog_Print(drdynvc->log, WLOG_ERROR, \"calloc failed!\");",
          "309:   return NULL;",
          "310:  }",
          "317:  {",
          "318:   WLog_Print(drdynvc->log, WLOG_ERROR, \"_strdup failed!\");",
          "319:   free(channel);",
          "320:   return NULL;",
          "321:  }",
          "324:  {",
          "325:   WLog_Print(drdynvc->log, WLOG_ERROR, \"InitializeCriticalSectionEx failed!\");",
          "326:   free(channel->channel_name);",
          "327:   free(channel);",
          "328:   return NULL;",
          "329:  }",
          "",
          "[Added Lines]",
          "316:   goto fail;",
          "323:   goto fail;",
          "326:   goto fail;",
          "329: fail:",
          "330:  dvcman_channel_free(channel);",
          "331:  return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "377: static void dvcman_free(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "378: {",
          "381:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "404:  StreamPool_Free(dvcman->pool);",
          "405:  free(dvcman);",
          "406: }",
          "",
          "[Removed Lines]",
          "379:  size_t i;",
          "380:  IWTSPlugin* pPlugin;",
          "382:  UINT error;",
          "383:  ArrayList_Free(dvcman->channels);",
          "385:  for (i = 0; i < dvcman->num_listeners; i++)",
          "386:  {",
          "387:   DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)dvcman->listeners[i];",
          "388:   dvcman_wtslistener_free(listener);",
          "389:  }",
          "391:  dvcman->num_listeners = 0;",
          "393:  for (i = 0; i < dvcman->num_plugins; i++)",
          "394:  {",
          "395:   pPlugin = dvcman->plugins[i];",
          "397:   if (pPlugin->Terminated)",
          "398:    if ((error = pPlugin->Terminated(pPlugin)))",
          "399:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Terminated failed with error %\" PRIu32 \"!\",",
          "400:                error);",
          "401:  }",
          "403:  dvcman->num_plugins = 0;",
          "",
          "[Added Lines]",
          "381:  ArrayList_Free(dvcman->listeners);",
          "382:  ArrayList_Free(dvcman->channels);",
          "383:  ArrayList_Free(dvcman->plugin_names);",
          "384:  ArrayList_Free(dvcman->plugins);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "413: static UINT dvcman_init(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "414: {",
          "415:  size_t i;",
          "417:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "421:  {",
          "431:  }",
          "434: }",
          "",
          "[Removed Lines]",
          "416:  IWTSPlugin* pPlugin;",
          "418:  UINT error;",
          "420:  for (i = 0; i < dvcman->num_plugins; i++)",
          "422:   pPlugin = dvcman->plugins[i];",
          "424:   if (pPlugin->Initialize)",
          "425:    if ((error = pPlugin->Initialize(pPlugin, pChannelMgr)))",
          "426:    {",
          "427:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Initialize failed with error %\" PRIu32 \"!\",",
          "428:                error);",
          "429:     return error;",
          "430:    }",
          "433:  return CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "399:  UINT error = CHANNEL_RC_OK;",
          "401:  ArrayList_Lock(dvcman->plugins);",
          "402:  for (i = 0; i < ArrayList_Count(dvcman->plugins); i++)",
          "404:   IWTSPlugin* pPlugin = ArrayList_GetItem(dvcman->plugins, i);",
          "406:   error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Initialize, pPlugin, pChannelMgr);",
          "407:   if (error != CHANNEL_RC_OK)",
          "408:   {",
          "409:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Initialize failed with error %\" PRIu32 \"!\",",
          "410:               error);",
          "411:    goto fail;",
          "412:   }",
          "415: fail:",
          "416:  ArrayList_Unlock(dvcman->plugins);",
          "417:  return error;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "493:  }",
          "495:  channel->status = ERROR_NOT_CONNECTED;",
          "499:  {",
          "502:   if (strcmp(listener->channel_name, ChannelName) == 0)",
          "503:   {",
          "",
          "[Removed Lines]",
          "496:  ArrayList_Add(dvcman->channels, channel);",
          "498:  for (i = 0; i < dvcman->num_listeners; i++)",
          "500:   DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)dvcman->listeners[i];",
          "",
          "[Added Lines]",
          "480:  if (ArrayList_Add(dvcman->channels, channel) < 0)",
          "481:   return ERROR_INTERNAL_ERROR;",
          "483:  ArrayList_Lock(dvcman->listeners);",
          "484:  for (i = 0; i < ArrayList_Count(dvcman->listeners); i++)",
          "486:   DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)ArrayList_GetItem(dvcman->listeners, i);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "524:      WLog_Print(drdynvc->log, WLOG_ERROR,",
          "525:                 \"context.OnChannelConnected failed with error %\" PRIu32 \"\", error);",
          "528:    }",
          "529:    else",
          "530:    {",
          "",
          "[Removed Lines]",
          "527:     return error;",
          "",
          "[Added Lines]",
          "513:     goto fail;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "532:     {",
          "533:      WLog_Print(drdynvc->log, WLOG_ERROR,",
          "534:                 \"OnNewChannelConnection failed with error %\" PRIu32 \"!\", error);",
          "536:     }",
          "537:     else",
          "538:     {",
          "539:      WLog_Print(drdynvc->log, WLOG_ERROR,",
          "540:                 \"OnNewChannelConnection returned with bAccept FALSE!\");",
          "542:     }",
          "543:    }",
          "544:   }",
          "545:  }",
          "548: }",
          "",
          "[Removed Lines]",
          "535:      return error;",
          "541:      return ERROR_INTERNAL_ERROR;",
          "547:  return ERROR_INTERNAL_ERROR;",
          "",
          "[Added Lines]",
          "521:      goto fail;",
          "527:      error = ERROR_INTERNAL_ERROR;",
          "528:      goto fail;",
          "533:  error = ERROR_INTERNAL_ERROR;",
          "534: fail:",
          "535:  ArrayList_Unlock(dvcman->listeners);",
          "537:  return error;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "590: static UINT dvcman_close_channel(IWTSVirtualChannelManager* pChannelMgr, UINT32 ChannelId,",
          "591:                                  BOOL bSendClosePDU)",
          "592: {",
          "593:  DVCMAN_CHANNEL* channel;",
          "594:  UINT error = CHANNEL_RC_OK;",
          "595:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:  size_t i;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "609:  if (drdynvc && bSendClosePDU)",
          "610:  {",
          "612:   if (!s)",
          "613:   {",
          "615:    error = CHANNEL_RC_NO_MEMORY;",
          "616:   }",
          "617:   else",
          "",
          "[Removed Lines]",
          "611:   wStream* s = Stream_New(NULL, 5);",
          "614:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "602:   wStream* s = StreamPool_Take(dvcman->pool, 5);",
          "605:    WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "619:    Stream_Write_UINT8(s, (CLOSE_REQUEST_PDU << 4) | 0x02);",
          "620:    Stream_Write_UINT32(s, ChannelId);",
          "621:    error = drdynvc_send(drdynvc, s);",
          "622:   }",
          "623:  }",
          "625:  ArrayList_Remove(dvcman->channels, channel);",
          "626:  return error;",
          "627: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:    Stream_Release(s);",
          "617:  ArrayList_Lock(dvcman->listeners);",
          "618:  for (i = ArrayList_Count(dvcman->listeners); i > 0; i--)",
          "619:  {",
          "620:   DVCMAN_LISTENER* listener = ArrayList_GetItem(dvcman->listeners, i - 1);",
          "621:   if (strcmp(listener->channel_name, channel->channel_name) == 0)",
          "622:    ArrayList_Remove(dvcman->listeners, listener);",
          "623:  }",
          "624:  ArrayList_Unlock(dvcman->listeners);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "689:  if (channel->dvc_data)",
          "690:  {",
          "693:   {",
          "694:    WLog_Print(drdynvc->log, WLOG_ERROR, \"data exceeding declared length!\");",
          "695:    Stream_Release(channel->dvc_data);",
          "",
          "[Removed Lines]",
          "692:   if (Stream_GetPosition(channel->dvc_data) + dataSize > Stream_Capacity(channel->dvc_data))",
          "",
          "[Added Lines]",
          "692:   if (Stream_GetPosition(channel->dvc_data) + dataSize > channel->dvc_data_length)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "761:  switch (status)",
          "762:  {",
          "763:   case CHANNEL_RC_OK:",
          "764:    return CHANNEL_RC_OK;",
          "766:   case CHANNEL_RC_NOT_CONNECTED:",
          "768:    return CHANNEL_RC_OK;",
          "770:   case CHANNEL_RC_BAD_CHANNEL_HANDLE:",
          "772:    WLog_ERR(TAG, \"VirtualChannelWriteEx failed with CHANNEL_RC_BAD_CHANNEL_HANDLE\");",
          "773:    return status;",
          "775:   default:",
          "777:    WLog_Print(drdynvc->log, WLOG_ERROR,",
          "778:               \"VirtualChannelWriteEx failed with %s [%08\" PRIX32 \"]\",",
          "779:               WTSErrorToString(status), status);",
          "",
          "[Removed Lines]",
          "767:    Stream_Free(s, TRUE);",
          "771:    Stream_Free(s, TRUE);",
          "776:    Stream_Free(s, TRUE);",
          "",
          "[Added Lines]",
          "764:    Stream_AddRef(s);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "795:  UINT8 cbLen;",
          "796:  unsigned long chunkLength;",
          "797:  UINT status = CHANNEL_RC_BAD_INIT_HANDLE;",
          "799:  if (!drdynvc)",
          "800:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "802:  WLog_Print(drdynvc->log, WLOG_DEBUG, \"write_data: ChannelId=%\" PRIu32 \" size=%\" PRIu32 \"\",",
          "803:             ChannelId, dataSize);",
          "806:  if (!data_out)",
          "807:  {",
          "809:   return CHANNEL_RC_NO_MEMORY;",
          "810:  }",
          "",
          "[Removed Lines]",
          "804:  data_out = Stream_New(NULL, CHANNEL_CHUNK_LENGTH);",
          "808:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "796:  DVCMAN* dvcman;",
          "801:  dvcman = (DVCMAN*)drdynvc->channel_mgr;",
          "805:  data_out = StreamPool_Take(dvcman->pool, CHANNEL_CHUNK_LENGTH);",
          "809:   WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "816:  if (dataSize == 0)",
          "817:  {",
          "819:  }",
          "820:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "821:  {",
          "",
          "[Removed Lines]",
          "818:   status = dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "[Added Lines]",
          "819:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "842:   while (status == CHANNEL_RC_OK && dataSize > 0)",
          "843:   {",
          "846:    if (!data_out)",
          "847:    {",
          "849:     return CHANNEL_RC_NO_MEMORY;",
          "850:    }",
          "",
          "[Removed Lines]",
          "844:    data_out = Stream_New(NULL, CHANNEL_CHUNK_LENGTH);",
          "848:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "845:    data_out = StreamPool_Take(dvcman->pool, CHANNEL_CHUNK_LENGTH);",
          "849:     WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "886: {",
          "887:  UINT status;",
          "888:  wStream* s;",
          "890:  if (!drdynvc)",
          "891:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "893:  WLog_Print(drdynvc->log, WLOG_TRACE, \"capability_response\");",
          "896:  if (!s)",
          "897:  {",
          "",
          "[Removed Lines]",
          "894:  s = Stream_New(NULL, 4);",
          "",
          "[Added Lines]",
          "890:  DVCMAN* dvcman;",
          "895:  dvcman = (DVCMAN*)drdynvc->channel_mgr;",
          "897:  s = StreamPool_Take(dvcman->pool, 4);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1002:  UINT channel_status;",
          "1003:  char* name;",
          "1004:  size_t length;",
          "1006:  WINPR_UNUSED(Sp);",
          "1007:  if (!drdynvc)",
          "1008:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "1010:  if (drdynvc->state == DRDYNVC_STATE_CAPABILITIES)",
          "1011:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008:  DVCMAN* dvcman;",
          "1014:  dvcman = (DVCMAN*)drdynvc->channel_mgr;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1039:  WLog_Print(drdynvc->log, WLOG_DEBUG,",
          "1040:             \"process_create_request: ChannelId=%\" PRIu32 \" ChannelName=%s\", ChannelId, name);",
          "1041:  channel_status = dvcman_create_channel(drdynvc, drdynvc->channel_mgr, ChannelId, name);",
          "1044:  if (!data_out)",
          "1045:  {",
          "1047:   return CHANNEL_RC_NO_MEMORY;",
          "1048:  }",
          "",
          "[Removed Lines]",
          "1042:  data_out = Stream_New(NULL, pos + 4);",
          "1046:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "1047:  data_out = StreamPool_Take(dvcman->pool, pos + 4);",
          "1051:   WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1232:  if (dataFlags & CHANNEL_FLAG_FIRST)",
          "1233:  {",
          "1234:   if (drdynvc->data_in)",
          "1238:  }",
          "1240:  if (!(data_in = drdynvc->data_in))",
          "1241:  {",
          "1243:   return CHANNEL_RC_NO_MEMORY;",
          "1244:  }",
          "1246:  if (!Stream_EnsureRemainingCapacity(data_in, dataLength))",
          "1247:  {",
          "1248:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_EnsureRemainingCapacity failed!\");",
          "1250:   drdynvc->data_in = NULL;",
          "1251:   return ERROR_INTERNAL_ERROR;",
          "1252:  }",
          "",
          "[Removed Lines]",
          "1235:    Stream_Free(drdynvc->data_in, TRUE);",
          "1237:   drdynvc->data_in = Stream_New(NULL, totalLength);",
          "1242:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "1249:   Stream_Free(drdynvc->data_in, TRUE);",
          "",
          "[Added Lines]",
          "1239:   DVCMAN* mgr = (DVCMAN*)drdynvc->channel_mgr;",
          "1241:    Stream_Release(drdynvc->data_in);",
          "1243:   drdynvc->data_in = StreamPool_Take(mgr->pool, totalLength);",
          "1248:   WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "1255:   Stream_Release(drdynvc->data_in);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1256:  if (dataFlags & CHANNEL_FLAG_LAST)",
          "1257:  {",
          "1259:   {",
          "1260:    WLog_Print(drdynvc->log, WLOG_ERROR, \"drdynvc_plugin_process_received: read error\");",
          "1261:    return ERROR_INVALID_DATA;",
          "",
          "[Removed Lines]",
          "1258:   if (Stream_Capacity(data_in) != Stream_GetPosition(data_in))",
          "",
          "[Added Lines]",
          "1264:   const size_t cap = Stream_Capacity(data_in);",
          "1265:   const size_t pos = Stream_GetPosition(data_in);",
          "1266:   if (cap < pos)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1304:   case CHANNEL_EVENT_WRITE_COMPLETE:",
          "1305:   {",
          "1306:    wStream* s = (wStream*)pData;",
          "1308:   }",
          "1309:   break;",
          "",
          "[Removed Lines]",
          "1307:    Stream_Free(s, TRUE);",
          "",
          "[Added Lines]",
          "1315:    Stream_Release(s);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1359:                \"drdynvc_order_recv failed with error %\" PRIu32 \"!\", error);",
          "1360:    }",
          "1363:   }",
          "1364:  }",
          "",
          "[Removed Lines]",
          "1362:    Stream_Free(data, TRUE);",
          "",
          "[Added Lines]",
          "1370:    Stream_Release(data);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1397:  s = (wStream*)msg->wParam;",
          "1399:  if (s)",
          "1401: }",
          "",
          "[Removed Lines]",
          "1400:   Stream_Free(s, TRUE);",
          "",
          "[Added Lines]",
          "1408:   Stream_Release(s);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1530:  if (drdynvc->data_in)",
          "1531:  {",
          "1533:   drdynvc->data_in = NULL;",
          "1534:  }",
          "",
          "[Removed Lines]",
          "1532:   Stream_Free(drdynvc->data_in, TRUE);",
          "",
          "[Added Lines]",
          "1540:   Stream_Release(drdynvc->data_in);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1561: static UINT drdynvc_virtual_channel_event_attached(drdynvcPlugin* drdynvc)",
          "1562: {",
          "1563:  size_t i;",
          "1564:  DVCMAN* dvcman;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1571:  UINT error = CHANNEL_RC_OK;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1571:  if (!dvcman)",
          "1572:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "1575:  {",
          "1586:  }",
          "1589: }",
          "1591: static UINT drdynvc_virtual_channel_event_detached(drdynvcPlugin* drdynvc)",
          "1592: {",
          "1593:  size_t i;",
          "1594:  DVCMAN* dvcman;",
          "",
          "[Removed Lines]",
          "1574:  for (i = 0; i < dvcman->num_plugins; i++)",
          "1576:   UINT error;",
          "1577:   IWTSPlugin* pPlugin = dvcman->plugins[i];",
          "1579:   if (pPlugin->Attached)",
          "1580:    if ((error = pPlugin->Attached(pPlugin)))",
          "1581:    {",
          "1582:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Attach failed with error %\" PRIu32 \"!\",",
          "1583:                error);",
          "1584:     return error;",
          "1585:    }",
          "1588:  return CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "1583:  ArrayList_Lock(dvcman->plugins);",
          "1584:  for (i = 0; i < ArrayList_Count(dvcman->plugins); i++)",
          "1586:   IWTSPlugin* pPlugin = ArrayList_GetItem(dvcman->plugins, i);",
          "1588:   error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Attached, pPlugin);",
          "1589:   if (error != CHANNEL_RC_OK)",
          "1590:   {",
          "1591:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Attach failed with error %\" PRIu32 \"!\", error);",
          "1592:    goto fail;",
          "1593:   }",
          "1596: fail:",
          "1597:  ArrayList_Unlock(dvcman->plugins);",
          "1598:  return error;",
          "1603:  UINT error = CHANNEL_RC_OK;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1601:  if (!dvcman)",
          "1602:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "1605:  {",
          "1616:  }",
          "1619: }",
          "1621: static VOID VCAPITYPE drdynvc_virtual_channel_init_event_ex(LPVOID lpUserParam, LPVOID pInitHandle,",
          "",
          "[Removed Lines]",
          "1604:  for (i = 0; i < dvcman->num_plugins; i++)",
          "1606:   UINT error;",
          "1607:   IWTSPlugin* pPlugin = dvcman->plugins[i];",
          "1609:   if (pPlugin->Detached)",
          "1610:    if ((error = pPlugin->Detached(pPlugin)))",
          "1611:    {",
          "1612:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Detach failed with error %\" PRIu32 \"!\",",
          "1613:                error);",
          "1614:     return error;",
          "1615:    }",
          "1618:  return CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "1615:  ArrayList_Lock(dvcman->plugins);",
          "1616:  for (i = 0; i < ArrayList_Count(dvcman->plugins); i++)",
          "1618:   IWTSPlugin* pPlugin = ArrayList_GetItem(dvcman->plugins, i);",
          "1620:   error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Detached, pPlugin);",
          "1621:   if (error != CHANNEL_RC_OK)",
          "1622:   {",
          "1623:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Detach failed with error %\" PRIu32 \"!\", error);",
          "1624:    goto fail;",
          "1625:   }",
          "1628: fail:",
          "1629:  ArrayList_Unlock(dvcman->plugins);",
          "1631:  return error;",
          "",
          "---------------"
        ],
        "channels/drdynvc/client/drdynvc_main.h||channels/drdynvc/client/drdynvc_main.h": [
          "File: channels/drdynvc/client/drdynvc_main.h -> channels/drdynvc/client/drdynvc_main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: typedef struct drdynvc_plugin drdynvcPlugin;",
          "42: struct _DVCMAN",
          "43: {",
          "44:  IWTSVirtualChannelManager iface;",
          "46:  drdynvcPlugin* drdynvc;",
          "55:  wArrayList* channels;",
          "56:  wStreamPool* pool;",
          "57: };",
          "",
          "[Removed Lines]",
          "40: #define MAX_PLUGINS 32",
          "48:  size_t num_plugins;",
          "49:  const char* plugin_names[MAX_PLUGINS];",
          "50:  IWTSPlugin* plugins[MAX_PLUGINS];",
          "52:  size_t num_listeners;",
          "53:  IWTSListener* listeners[MAX_PLUGINS];",
          "",
          "[Added Lines]",
          "46:  wArrayList* plugin_names;",
          "47:  wArrayList* plugins;",
          "49:  wArrayList* listeners;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92fa258748d49d2476716c3a56f33005a532835f",
      "candidate_info": {
        "commit_hash": "92fa258748d49d2476716c3a56f33005a532835f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/92fa258748d49d2476716c3a56f33005a532835f",
        "files": [
          "winpr/include/winpr/stream.h"
        ],
        "message": "Fixed BehaviourSanitizer  warnings in streams.\n\n(cherry picked from commit 66ea3d0579841b468684e05936fabf654727e720)",
        "before_after_code_files": [
          "winpr/include/winpr/stream.h||winpr/include/winpr/stream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/include/winpr/stream.h||winpr/include/winpr/stream.h": [
          "File: winpr/include/winpr/stream.h -> winpr/include/winpr/stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:    Stream_Seek(_s, sizeof(_t)); \\",
          "75:  } while (0)",
          "83:  } while (0)",
          "100:  } while (0)",
          "103:  do                                                                                   \\",
          "104:  {                                                                                    \\",
          "107:   if (_p)                                                                          \\",
          "108:    Stream_Seek(_s, sizeof(_t));                                                 \\",
          "109:  } while (0)",
          "120:  } while (0)",
          "131:  } while (0)",
          "133: #define Stream_Read_UINT8(_s, _v) _stream_read_n8(UINT8, _s, _v, TRUE)",
          "",
          "[Removed Lines]",
          "77: #define _stream_read_n16_le(_t, _s, _v, _p)                                    \\",
          "78:  do                                                                         \\",
          "79:  {                                                                          \\",
          "80:   (_v) = (_t)(*(_s)->pointer) + (_t)(((_t)(*((_s)->pointer + 1))) << 8); \\",
          "81:   if (_p)                                                                \\",
          "82:    Stream_Seek(_s, sizeof(_t));                                       \\",
          "85: #define _stream_read_n16_be(_t, _s, _v, _p)                                    \\",
          "86:  do                                                                         \\",
          "87:  {                                                                          \\",
          "88:   (_v) = (_t)(((_t)(*(_s)->pointer)) << 8) + (_t)(*((_s)->pointer + 1)); \\",
          "89:   if (_p)                                                                \\",
          "90:    Stream_Seek(_s, sizeof(_t));                                       \\",
          "91:  } while (0)",
          "93: #define _stream_read_n32_le(_t, _s, _v, _p)                                                 \\",
          "94:  do                                                                                      \\",
          "95:  {                                                                                       \\",
          "96:   (_v) = (_t)(*(_s)->pointer) + (((_t)(*((_s)->pointer + 1))) << 8) +                 \\",
          "97:          (((_t)(*((_s)->pointer + 2))) << 16) + (((_t)(*((_s)->pointer + 3))) << 24); \\",
          "98:   if (_p)                                                                             \\",
          "99:    Stream_Seek(_s, sizeof(_t));                                                    \\",
          "102: #define _stream_read_n32_be(_t, _s, _v, _p)                                              \\",
          "105:   (_v) = (((_t)(*((_s)->pointer))) << 24) + (((_t)(*((_s)->pointer + 1))) << 16) + \\",
          "106:          (((_t)(*((_s)->pointer + 2))) << 8) + (((_t)(*((_s)->pointer + 3))));     \\",
          "111: #define _stream_read_n64_le(_t, _s, _v, _p)                                                  \\",
          "112:  do                                                                                       \\",
          "113:  {                                                                                        \\",
          "114:   (_v) = (_t)(*(_s)->pointer) + (((_t)(*((_s)->pointer + 1))) << 8) +                  \\",
          "115:          (((_t)(*((_s)->pointer + 2))) << 16) + (((_t)(*((_s)->pointer + 3))) << 24) + \\",
          "116:          (((_t)(*((_s)->pointer + 4))) << 32) + (((_t)(*((_s)->pointer + 5))) << 40) + \\",
          "117:          (((_t)(*((_s)->pointer + 6))) << 48) + (((_t)(*((_s)->pointer + 7))) << 56);  \\",
          "118:   if (_p)                                                                              \\",
          "119:    Stream_Seek(_s, sizeof(_t));                                                     \\",
          "122: #define _stream_read_n64_be(_t, _s, _v, _p)                                                  \\",
          "123:  do                                                                                       \\",
          "124:  {                                                                                        \\",
          "125:   (_v) = (((_t)(*((_s)->pointer))) << 56) + (((_t)(*((_s)->pointer + 1))) << 48) +     \\",
          "126:          (((_t)(*((_s)->pointer + 2))) << 40) + (((_t)(*((_s)->pointer + 3))) << 32) + \\",
          "127:          (((_t)(*((_s)->pointer + 4))) << 24) + (((_t)(*((_s)->pointer + 5))) << 16) + \\",
          "128:          (((_t)(*((_s)->pointer + 6))) << 8) + (((_t)(*((_s)->pointer + 7))));         \\",
          "129:   if (_p)                                                                              \\",
          "130:    Stream_Seek(_s, sizeof(_t));                                                     \\",
          "",
          "[Added Lines]",
          "77: #define _stream_read_n16_le(_t, _s, _v, _p)                                      \\",
          "78:  do                                                                           \\",
          "79:  {                                                                            \\",
          "80:   (_v) = (_t)((*(_s)->pointer) + (((UINT16)(*((_s)->pointer + 1))) << 8)); \\",
          "81:   if (_p)                                                                  \\",
          "82:    Stream_Seek(_s, sizeof(_t));                                         \\",
          "85: #define _stream_read_n16_be(_t, _s, _v, _p)                                              \\",
          "86:  do                                                                                   \\",
          "87:  {                                                                                    \\",
          "88:   (_v) = (_t)((((UINT16)(*(_s)->pointer)) << 8) + (UINT16)(*((_s)->pointer + 1))); \\",
          "89:   if (_p)                                                                          \\",
          "90:    Stream_Seek(_s, sizeof(_t));                                                 \\",
          "93: #define _stream_read_n32_le(_t, _s, _v, _p)                                              \\",
          "96:   (_v) = (_t)((UINT32)(*(_s)->pointer) + (((UINT32)(*((_s)->pointer + 1))) << 8) + \\",
          "97:               (((UINT32)(*((_s)->pointer + 2))) << 16) +                           \\",
          "98:               ((((UINT32) * ((_s)->pointer + 3))) << 24));                         \\",
          "103: #define _stream_read_n32_be(_t, _s, _v, _p)                                                        \\",
          "104:  do                                                                                             \\",
          "105:  {                                                                                              \\",
          "106:   (_v) = (_t)(((((UINT32) * ((_s)->pointer))) << 24) +                                       \\",
          "107:               (((UINT32)(*((_s)->pointer + 1))) << 16) +                                     \\",
          "108:               (((UINT32)(*((_s)->pointer + 2))) << 8) + (((UINT32)(*((_s)->pointer + 3))))); \\",
          "109:   if (_p)                                                                                    \\",
          "110:    Stream_Seek(_s, sizeof(_t));                                                           \\",
          "111:  } while (0)",
          "113: #define _stream_read_n64_le(_t, _s, _v, _p)                                                       \\",
          "114:  do                                                                                            \\",
          "115:  {                                                                                             \\",
          "116:   (_v) = (_t)(                                                                              \\",
          "117:       (UINT64)(*(_s)->pointer) + (((UINT64)(*((_s)->pointer + 1))) << 8) +                  \\",
          "118:       (((UINT64)(*((_s)->pointer + 2))) << 16) + (((UINT64)(*((_s)->pointer + 3))) << 24) + \\",
          "119:       (((UINT64)(*((_s)->pointer + 4))) << 32) + (((UINT64)(*((_s)->pointer + 5))) << 40) + \\",
          "120:       (((UINT64)(*((_s)->pointer + 6))) << 48) + (((UINT64)(*((_s)->pointer + 7))) << 56)); \\",
          "121:   if (_p)                                                                                   \\",
          "122:    Stream_Seek(_s, sizeof(_t));                                                          \\",
          "125: #define _stream_read_n64_be(_t, _s, _v, _p)                                                       \\",
          "126:  do                                                                                            \\",
          "127:  {                                                                                             \\",
          "128:   (_v) = (_t)(                                                                              \\",
          "129:       (((UINT64)(*((_s)->pointer))) << 56) + (((UINT64)(*((_s)->pointer + 1))) << 48) +     \\",
          "130:       (((UINT64)(*((_s)->pointer + 2))) << 40) + (((UINT64)(*((_s)->pointer + 3))) << 32) + \\",
          "131:       (((UINT64)(*((_s)->pointer + 4))) << 24) + (((UINT64)(*((_s)->pointer + 5))) << 16) + \\",
          "132:       (((UINT64)(*((_s)->pointer + 6))) << 8) + (((UINT64)(*((_s)->pointer + 7)))));        \\",
          "133:   if (_p)                                                                                   \\",
          "134:    Stream_Seek(_s, sizeof(_t));                                                          \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "630415e5237cfd661386f5a9b4f1ba3232aa4733",
      "candidate_info": {
        "commit_hash": "630415e5237cfd661386f5a9b4f1ba3232aa4733",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/630415e5237cfd661386f5a9b4f1ba3232aa4733",
        "files": [
          "winpr/include/winpr/sam.h",
          "winpr/libwinpr/utils/sam.c"
        ],
        "message": "Refactored sam functions to utilize strtok_s\n\n(cherry picked from commit ddb388e1527de69e47d55068d8a318ef270fc4a0)",
        "before_after_code_files": [
          "winpr/include/winpr/sam.h||winpr/include/winpr/sam.h",
          "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/include/winpr/sam.h||winpr/include/winpr/sam.h": [
          "File: winpr/include/winpr/sam.h -> winpr/include/winpr/sam.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <winpr/winpr.h>",
          "24: #include <winpr/wtypes.h>",
          "33: typedef struct winpr_sam WINPR_SAM;",
          "35: struct winpr_sam_entry",
          "",
          "[Removed Lines]",
          "26: struct winpr_sam",
          "27: {",
          "28:  FILE* fp;",
          "29:  char* line;",
          "30:  char* buffer;",
          "31:  BOOL readOnly;",
          "32: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c": [
          "File: winpr/libwinpr/utils/sam.c -> winpr/libwinpr/utils/sam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #endif",
          "44: #define TAG WINPR_TAG(\"utils\")",
          "46: WINPR_SAM* SamOpen(const char* filename, BOOL readOnly)",
          "47: {",
          "48:  FILE* fp = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: struct winpr_sam",
          "47: {",
          "48:  FILE* fp;",
          "49:  char* line;",
          "50:  char* buffer;",
          "51:  char* context;",
          "52:  BOOL readOnly;",
          "53: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  if (fileSize < 1)",
          "99:   return FALSE;",
          "101:  sam->buffer = (char*)malloc(fileSize + 2);",
          "103:  if (!sam->buffer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:  sam->context = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:  sam->buffer[fileSize] = '\\n';",
          "122:  sam->buffer[fileSize + 1] = '\\0';",
          "124:  return TRUE;",
          "125: }",
          "",
          "[Removed Lines]",
          "123:  sam->line = strtok(sam->buffer, \"\\n\");",
          "",
          "[Added Lines]",
          "133:  sam->line = strtok_s(sam->buffer, \"\\n\", &sam->context);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:   }",
          "302:   SamResetEntry(entry);",
          "304:  }",
          "306: out_fail:",
          "",
          "[Removed Lines]",
          "303:   sam->line = strtok(NULL, \"\\n\");",
          "",
          "[Added Lines]",
          "313:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "415:   }",
          "417:   SamResetEntry(entry);",
          "419:  }",
          "421: out_fail:",
          "",
          "[Removed Lines]",
          "418:   sam->line = strtok(NULL, \"\\n\");",
          "",
          "[Added Lines]",
          "428:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "---------------"
        ]
      }
    }
  ]
}