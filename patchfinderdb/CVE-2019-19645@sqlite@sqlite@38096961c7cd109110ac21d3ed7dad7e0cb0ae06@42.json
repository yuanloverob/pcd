{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
      "candidate_info": {
        "commit_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Add things to this branch that will be required to support the EXCLUDE clause.\n\nFossilOrigin-Name: 7d66cd2013206ebad50c7cdb7dab9211fa8b47f5cb7067dcb314b3e0180875f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b904517bd6c4c59082381577246d3d2351b4265fc9151438ee4c33cf16f2eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3564:   u8 eExclude;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3578:   int regFirst;",
          "3579: };",
          "3581: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3581:   int regStartRowid;",
          "3582:   int regEndRowid;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3613:   pCx->isTable = pOrig->isTable;",
          "3614:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3615:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "3616:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   pCx->isOrdered = pOrig->isOrdered;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   }",
          "199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: struct NthValueCtx {",
          "207:   i64 nStep;",
          "208:   sqlite3_value *pValue;",
          "209: };",
          "210: static void nth_valueStepFunc(",
          "211:   sqlite3_context *pCtx,",
          "212:   int nArg,",
          "213:   sqlite3_value **apArg",
          "214: ){",
          "215:   struct NthValueCtx *p;",
          "216:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "217:   if( p ){",
          "218:     i64 iVal = sqlite3_value_int64(apArg[1]);",
          "219:     p->nStep++;",
          "220:     if( iVal==p->nStep ){",
          "221:       p->pValue = sqlite3_value_dup(apArg[0]);",
          "222:     }",
          "223:   }",
          "224:   UNUSED_PARAMETER(nArg);",
          "225:   UNUSED_PARAMETER(apArg);",
          "226: }",
          "227: static void nth_valueValueFunc(sqlite3_context *pCtx){",
          "228:   struct NthValueCtx *p;",
          "229:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "230:   if( p && p->pValue ){",
          "231:     sqlite3_result_value(pCtx, p->pValue);",
          "232:   }",
          "233: }",
          "234: static void nth_valueFinalizeFunc(sqlite3_context *pCtx){",
          "235:   struct NthValueCtx *p;",
          "236:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "237:   if( p && p->pValue ){",
          "238:     sqlite3_result_value(pCtx, p->pValue);",
          "239:     sqlite3_value_free(p->pValue);",
          "240:     p->pValue = 0;",
          "241:   }",
          "242: }",
          "243: #define nth_valueInvFunc noopStepFunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     WINDOWFUNCX(row_number, 0, 0),",
          "518:     WINDOWFUNCX(dense_rank, 0, 0),",
          "519:     WINDOWFUNCX(rank, 0, 0),",
          "521:     WINDOWFUNCALL(percent_rank, 0, 0),",
          "522:     WINDOWFUNCALL(cume_dist, 0, 0),",
          "523:     WINDOWFUNCALL(ntile, 1, 0),",
          "526:     WINDOWFUNCALL(last_value, 1, 0),",
          "528:     WINDOWFUNCNOOP(first_value, 1, 0),",
          "529:     WINDOWFUNCNOOP(lead, 1, 0),",
          "530:     WINDOWFUNCNOOP(lead, 2, 0),",
          "",
          "[Removed Lines]",
          "527:     WINDOWFUNCNOOP(nth_value, 2, 0),",
          "",
          "[Added Lines]",
          "568:     WINDOWFUNCALL(nth_value, 2, 0),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:           pWin->eType = aUp[i].eType;",
          "623:           pWin->eStart = aUp[i].eStart;",
          "624:           pWin->eEnd = aUp[i].eEnd;",
          "625:           if( pWin->eStart==TK_FOLLOWING ){",
          "626:             pWin->pStart = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "627:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:           pWin->eExclude = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1102:   if( p1->eType!=p2->eType ) return 1;",
          "1103:   if( p1->eStart!=p2->eStart ) return 1;",
          "1104:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "1105:   if( sqlite3ExprCompare(pParse, p1->pStart, p2->pStart, -1) ) return 1;",
          "1106:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1107:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:   if( p1->eExclude!=p2->eExclude ) return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1131:   pMWin->regFirst = ++pParse->nMem;",
          "1132:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1134:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1135:     FuncDef *p = pWin->pFunc;",
          "1136:     if( (p->funcFlags & SQLITE_FUNC_MINMAX) && pWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1178:   if( pMWin->eExclude ){",
          "1179:     pMWin->regStartRowid = ++pParse->nMem;",
          "1180:     pMWin->regEndRowid = ++pParse->nMem;",
          "1181:     pMWin->csrApp = pParse->nTab++;",
          "1182:     sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "1183:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "1184:     sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->csrApp, pMWin->iEphCsr);",
          "1185:     return;",
          "1186:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1250: ){",
          "1251:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1252:   Window *pWin;",
          "1253:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1254:     int regArg;",
          "1255:     int nArg = windowArgCount(pWin);",
          "1265:     }",
          "1269:     ){",
          "1270:       int addrIsNull = sqlite3VdbeAddOp1(v, OP_IsNull, regArg);",
          "1271:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1257:     if( csr>=0 ){",
          "1258:       int i;",
          "1259:       for(i=0; i<nArg; i++){",
          "1260:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1261:       }",
          "1262:       regArg = reg;",
          "1263:     }else{",
          "1264:       regArg = reg + pWin->iArgCol;",
          "1267:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1268:       && pWin->eStart!=TK_UNBOUNDED",
          "",
          "[Added Lines]",
          "1307:     FuncDef *pFunc = pWin->pFunc;",
          "1310:     int i;",
          "1312:     for(i=0; i<nArg; i++){",
          "1313:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1315:     regArg = reg;",
          "1317:     if( pMWin->regStartRowid==0",
          "1318:      && (pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1319:      && (pWin->eStart!=TK_UNBOUNDED)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1282:       }",
          "1283:       sqlite3VdbeJumpHere(v, addrIsNull);",
          "1284:     }else if( pWin->regApp ){",
          "1287:       );",
          "1288:       assert( bInverse==0 || bInverse==1 );",
          "1289:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1295:       int addrIf = 0;",
          "1296:       if( pWin->pFilter ){",
          "1297:         int regTmp;",
          "1298:         assert( nArg==0 || nArg==pWin->pOwner->x.pList->nExpr );",
          "1299:         assert( nArg || pWin->pOwner->x.pList==0 );",
          "1306:         addrIf = sqlite3VdbeAddOp3(v, OP_IfNot, regTmp, 0, 1);",
          "1307:         VdbeCoverage(v);",
          "1311:       }",
          "1313:         CollSeq *pColl;",
          "1314:         assert( nArg>0 );",
          "1315:         pColl = sqlite3ExprNNCollSeq(pParse, pWin->pOwner->x.pList->a[0].pExpr);",
          "",
          "[Removed Lines]",
          "1285:       assert( pWin->pFunc->zName==nth_valueName",
          "1286:            || pWin->pFunc->zName==first_valueName",
          "1290:     }else if( pWin->pFunc->zName==leadName",
          "1291:            || pWin->pFunc->zName==lagName",
          "1292:     ){",
          "1294:     }else{",
          "1300:         if( csr>0 ){",
          "1301:           regTmp = sqlite3GetTempReg(pParse);",
          "1302:           sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1303:         }else{",
          "1304:           regTmp = regArg + nArg;",
          "1305:         }",
          "1308:         if( csr>0 ){",
          "1309:           sqlite3ReleaseTempReg(pParse, regTmp);",
          "1310:         }",
          "1312:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "[Added Lines]",
          "1336:       assert( pFunc->zName==nth_valueName",
          "1337:            || pFunc->zName==first_valueName",
          "1341:     }else if( pFunc->zName==leadName || pFunc->zName==lagName ){",
          "1343:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1349:         regTmp = sqlite3GetTempReg(pParse);",
          "1350:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1353:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1355:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1317:       }",
          "1318:       sqlite3VdbeAddOp3(v, bInverse? OP_AggInverse : OP_AggStep,",
          "1319:                         bInverse, regArg, pWin->regAccum);",
          "1321:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1322:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1323:     }",
          "",
          "[Removed Lines]",
          "1320:       sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "",
          "[Added Lines]",
          "1363:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1325: }",
          "1334:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1335:   Window *pWin;",
          "1337:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1340:     ){",
          "1341:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1342:       sqlite3VdbeAddOp1(v, OP_Last, pWin->csrApp);",
          "1343:       VdbeCoverage(v);",
          "1344:       sqlite3VdbeAddOp3(v, OP_Column, pWin->csrApp, 0, pWin->regResult);",
          "1345:       sqlite3VdbeJumpHere(v, sqlite3VdbeCurrentAddr(v)-2);",
          "1347:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1348:       }",
          "1349:     }else if( pWin->regApp ){",
          "1350:     }else{",
          "1353:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1354:         sqlite3VdbeAddOp2(v, OP_Copy, pWin->regAccum, pWin->regResult);",
          "1355:         sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1356:       }else{",
          "1359:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1360:       }",
          "1361:     }",
          "",
          "[Removed Lines]",
          "1333: static void windowAggFinal(Parse *pParse, Window *pMWin, int bFinal){",
          "1338:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1339:      && pWin->eStart!=TK_UNBOUNDED",
          "1346:       if( bFinal ){",
          "1351:       if( bFinal ){",
          "1352:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, windowArgCount(pWin));",
          "1357:         sqlite3VdbeAddOp3(v, OP_AggValue, pWin->regAccum, windowArgCount(pWin),",
          "1358:                              pWin->regResult);",
          "",
          "[Added Lines]",
          "1376: static void windowAggFinal(Parse *pParse, Window *pMWin, int regArg, int bFin){",
          "1380:   if( pMWin->regStartRowid ){",
          "1381:     int addrNext;",
          "1382:     int regRowid = sqlite3GetTempReg(pParse);",
          "1383:     assert( pMWin->csrApp );",
          "1384:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1385:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1386:     }",
          "1387:     sqlite3VdbeAddOp3(v, OP_SeekGE, pMWin->csrApp, 0, pMWin->regStartRowid);",
          "1388:     addrNext = sqlite3VdbeCurrentAddr(v);",
          "1389:     sqlite3VdbeAddOp2(v, OP_Rowid, pMWin->csrApp, regRowid);",
          "1390:     sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, 0, regRowid);",
          "1391:     windowAggStep(pParse, pMWin, pMWin->csrApp, 0, regArg);",
          "1392:     sqlite3VdbeAddOp2(v, OP_Next, pMWin->csrApp, addrNext);",
          "1393:     sqlite3VdbeJumpHere(v, addrNext-1);",
          "1394:     sqlite3VdbeJumpHere(v, addrNext+1);",
          "1395:     sqlite3ReleaseTempReg(pParse, regRowid);",
          "1396:   }",
          "1399:     if( pMWin->regStartRowid==0",
          "1400:      && (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1401:      && (pWin->eStart!=TK_UNBOUNDED)",
          "1408:       if( bFin ){",
          "1412:       assert( pMWin->regStartRowid==0 );",
          "1414:       int nArg = windowArgCount(pWin);",
          "1415:       if( bFin ){",
          "1416:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, nArg);",
          "1421:         sqlite3VdbeAddOp3(v, OP_AggValue,pWin->regAccum,nArg,pWin->regResult);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1388:     if( pFunc->zName==nth_valueName",
          "1389:      || pFunc->zName==first_valueName",
          "1390:     ){",
          "1392:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1393:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1394:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1396:       if( pFunc->zName==nth_valueName ){",
          "1398:         windowCheckValue(pParse, tmpReg, 2);",
          "1399:       }else{",
          "1400:         sqlite3VdbeAddOp2(v, OP_Integer, 1, tmpReg);",
          "1401:       }",
          "1408:       sqlite3VdbeResolveLabel(v, lbl);",
          "1409:       sqlite3ReleaseTempReg(pParse, tmpReg);",
          "1410:     }",
          "",
          "[Removed Lines]",
          "1391:       int csr = pWin->csrApp;",
          "1397:         sqlite3VdbeAddOp3(v, OP_Column, pMWin->iEphCsr, pWin->iArgCol+1,tmpReg);",
          "1402:       sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1403:       sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1404:       VdbeCoverageNeverNull(v);",
          "1405:       sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1406:       VdbeCoverageNeverTaken(v);",
          "1407:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "",
          "[Added Lines]",
          "1459:         sqlite3VdbeAddOp3(v, OP_Column,pMWin->iEphCsr,pWin->iArgCol+1,tmpReg);",
          "1464:       if( pWin->eExclude==0 ){",
          "1465:         int csr = pWin->csrApp;",
          "1466:         sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1467:         sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1468:         VdbeCoverageNeverNull(v);",
          "1469:         sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1470:         VdbeCoverageNeverTaken(v);",
          "1471:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "1472:       }else{",
          "1473:         int regRowid = sqlite3GetTempReg(pParse);",
          "1474:         int csr = pMWin->csrApp;",
          "1475:         int addrNext;",
          "1476:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+1, 1);",
          "1477:         sqlite3VdbeAddOp3(v, OP_SeekGE, csr, lbl, pMWin->regStartRowid);",
          "1478:         addrNext = sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1479:         sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lbl, regRowid);",
          "1480:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+3, 1);",
          "1481:         sqlite3VdbeAddOp3(v, OP_Column, csr, pMWin->iArgCol, pWin->regResult);",
          "1482:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "1483:         sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "1484:         sqlite3ReleaseTempReg(pParse, regRowid);",
          "1485:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1457:     FuncDef *pFunc = pWin->pFunc;",
          "1458:     sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1459:     nArg = MAX(nArg, windowArgCount(pWin));",
          "1471:     }",
          "1472:   }",
          "1473:   regArg = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "1460:     if( pFunc->zName==nth_valueName",
          "1461:      || pFunc->zName==first_valueName",
          "1462:     ){",
          "1463:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1464:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1465:     }",
          "1467:     if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1468:       assert( pWin->eStart!=TK_UNBOUNDED );",
          "1469:       sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1470:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "",
          "[Added Lines]",
          "1538:     if( pWin->eExclude==0 ){",
          "1539:       if( pFunc->zName==nth_valueName || pFunc->zName==first_valueName ){",
          "1540:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1541:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1542:       }",
          "1544:       if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1545:         assert( pWin->eStart!=TK_UNBOUNDED );",
          "1546:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1547:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1548:       }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1482: static int windowCacheFrame(Window *pMWin){",
          "1483:   Window *pWin;",
          "1484:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1485:     FuncDef *pFunc = pWin->pFunc;",
          "1486:     if( (pFunc->zName==nth_valueName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:   if( pMWin->regStartRowid ) return 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1684:   }",
          "1686:   if( op==WINDOW_RETURN_ROW ){",
          "1688:   }",
          "1689:   addrContinue = sqlite3VdbeCurrentAddr(v);",
          "1690:   switch( op ){",
          "",
          "[Removed Lines]",
          "1687:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "1766:     windowAggFinal(pParse, pMWin, p->regArg, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1697:     case WINDOW_AGGINVERSE:",
          "1698:       csr = p->start.csr;",
          "1699:       reg = p->start.reg;",
          "1701:       break;",
          "1703:     case WINDOW_AGGSTEP:",
          "1704:       csr = p->end.csr;",
          "1705:       reg = p->end.reg;",
          "1707:       break;",
          "1708:   }",
          "",
          "[Removed Lines]",
          "1700:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, 0);",
          "1706:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, 0);",
          "",
          "[Added Lines]",
          "1779:       if( pMWin->regStartRowid ){",
          "1780:         assert( pMWin->regEndRowid );",
          "1781:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regStartRowid, 1);",
          "1782:       }else{",
          "1783:         windowAggStep(pParse, pMWin, csr, 1, p->regArg);",
          "1784:       }",
          "1790:       if( pMWin->regStartRowid ){",
          "1791:         assert( pMWin->regEndRowid );",
          "1792:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regEndRowid, 1);",
          "1793:       }else{",
          "1794:         windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "1795:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2279:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "2280:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2281:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2283:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2284:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2285:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "",
          "[Removed Lines]",
          "2282:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "2371:     windowAggFinal(pParse, pMWin, s.regArg, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2416:   if( pMWin->pPartition ){",
          "2417:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2418:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "2419:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2506:     if( pMWin->regStartRowid ){",
          "2507:       sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "2508:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "2509:     }",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: ==========",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a REAL, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "94: execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "93: foreach {tn ex} {",
          "94:   1  { EXCLUDE NO OTHERS }",
          "95:   2  { EXCLUDE CURRENT ROW }",
          "96:   3  { EXCLUDE GROUP }",
          "97:   4  { EXCLUDE TIES }",
          "98: } {",
          "99:   execsql_test 2.$tn.1 \"",
          "100:     SELECT row_number() OVER win",
          "101:     FROM t3",
          "102:     WINDOW win AS (",
          "103:       ORDER BY c, b, a",
          "104:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex",
          "105:     )",
          "106:   \"",
          "108:   execsql_test 2.$tn.2 \"",
          "109:     SELECT nth_value(c, 14) OVER win",
          "110:     FROM t3",
          "111:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex)",
          "112:   \"",
          "113: }",
          "117: execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   11 { ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING }",
          "115:   12 { ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING }",
          "116: } {",
          "118:     SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ($frame)",
          "119:   \"",
          "120: }",
          "",
          "[Removed Lines]",
          "117:   execsql_test 2.$tn \"",
          "",
          "[Added Lines]",
          "140:   execsql_test 3.$tn \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: #==========================================================================",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a REAL, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "438: do_execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "436: do_execsql_test 2.1.1 {",
          "437:   SELECT row_number() OVER win",
          "438:     FROM t3",
          "439:     WINDOW win AS (",
          "440:       ORDER BY c, b, a",
          "441:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS",
          "442:     )",
          "443: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "445: do_execsql_test 2.1.2 {",
          "446:   SELECT nth_value(c, 14) OVER win",
          "447:     FROM t3",
          "448:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS )",
          "449: } {938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "451: do_execsql_test 2.2.1 {",
          "452:   SELECT row_number() OVER win",
          "453:     FROM t3",
          "454:     WINDOW win AS (",
          "455:       ORDER BY c, b, a",
          "456:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW",
          "457:     )",
          "458: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "460: do_execsql_test 2.2.2 {",
          "461:   SELECT nth_value(c, 14) OVER win",
          "462:     FROM t3",
          "463:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW )",
          "464: } {660   660   660   660   660   660   660   660   660   660   660   660   660   660   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "466: do_execsql_test 2.3.1 {",
          "467:   SELECT row_number() OVER win",
          "468:     FROM t3",
          "469:     WINDOW win AS (",
          "470:       ORDER BY c, b, a",
          "471:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP",
          "472:     )",
          "473: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "475: do_execsql_test 2.3.2 {",
          "476:   SELECT nth_value(c, 14) OVER win",
          "477:     FROM t3",
          "478:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP )",
          "479: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "481: do_execsql_test 2.4.1 {",
          "482:   SELECT row_number() OVER win",
          "483:     FROM t3",
          "484:     WINDOW win AS (",
          "485:       ORDER BY c, b, a",
          "486:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES",
          "487:     )",
          "488: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "490: do_execsql_test 2.4.2 {",
          "491:   SELECT nth_value(c, 14) OVER win",
          "492:     FROM t3",
          "493:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES )",
          "494: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "498: do_execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:       (15, 30), (20, 40), (22,80), (30, 90);",
          "444: } {}",
          "447:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "448: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "451:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "452: } {5 {}   10 10   13 10   13 10   15 30   20 102   22 82   30 120}",
          "455:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "456: } {5 {}   10 52   13 30   13 30   15 {}   20 80   22 {}   30 {}}",
          "459:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "460: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "463:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "464: } {30 {}   22 90   20 90   15 120   13 120   13 120   10 70   5 102}",
          "467:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "468: } {30 {}   22 40   20 {}   15 52   13 20   13 20   10 {}   5 {}}",
          "471:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING )",
          "472: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "475:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING )",
          "476: } {5 {}   10 {}   13 10   13 10   15 10   20 72   22 82   30 120}",
          "479:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING )",
          "480: } {5 {}   10 52   13 {}   13 {}   15 {}   20 {}   22 {}   30 {}}",
          "483:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING )",
          "484: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "487:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING )",
          "488: } {30 {}   22 90   20 90   15 170   13 210   13 210   10 210   5 292}",
          "491:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING )",
          "492: } {30 232   22 112   20 112   15 30   13 30   13 30   10 10   5 {}}",
          "",
          "[Removed Lines]",
          "446: do_execsql_test 2.1 {",
          "450: do_execsql_test 2.2 {",
          "454: do_execsql_test 2.3 {",
          "458: do_execsql_test 2.4 {",
          "462: do_execsql_test 2.5 {",
          "466: do_execsql_test 2.6 {",
          "470: do_execsql_test 2.7 {",
          "474: do_execsql_test 2.8 {",
          "478: do_execsql_test 2.9 {",
          "482: do_execsql_test 2.10 {",
          "486: do_execsql_test 2.11 {",
          "490: do_execsql_test 2.12 {",
          "",
          "[Added Lines]",
          "506: do_execsql_test 3.1 {",
          "510: do_execsql_test 3.2 {",
          "514: do_execsql_test 3.3 {",
          "518: do_execsql_test 3.4 {",
          "522: do_execsql_test 3.5 {",
          "526: do_execsql_test 3.6 {",
          "530: do_execsql_test 3.7 {",
          "534: do_execsql_test 3.8 {",
          "538: do_execsql_test 3.9 {",
          "542: do_execsql_test 3.10 {",
          "546: do_execsql_test 3.11 {",
          "550: do_execsql_test 3.12 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
      "candidate_info": {
        "commit_hash": "a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "Fix the foreign key logic to be compatible with generated columns.\n\nFossilOrigin-Name: 3de57145a18c62ff9b556c7218d8b276000d0052e4890212fa9335235f22d03c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e04ba22dfce3998e61331ac229ff543ecccc590284c9dd5def21efbe594fba0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:     VdbeCoverage(v);",
          "350:   }",
          "351:   for(i=0; i<pFKey->nCol; i++){",
          "353:     sqlite3VdbeAddOp2(v, OP_IsNull, iReg, iOk); VdbeCoverage(v);",
          "354:   }",
          "",
          "[Removed Lines]",
          "352:     int iReg = aiCol[i] + regData + 1;",
          "",
          "[Added Lines]",
          "352:     int iReg = sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[i]) + regData + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:       iMustBeInt = sqlite3VdbeAddOp2(v, OP_MustBeInt, regTemp, 0);",
          "370:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "368:       sqlite3VdbeAddOp2(v, OP_SCopy, aiCol[0]+1+regData, regTemp);",
          "",
          "[Added Lines]",
          "368:       sqlite3VdbeAddOp2(v, OP_SCopy,",
          "369:         sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[0])+1+regData, regTemp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:       sqlite3VdbeAddOp3(v, OP_OpenRead, iCur, pIdx->tnum, iDb);",
          "393:       sqlite3VdbeSetP4KeyInfo(pParse, pIdx);",
          "394:       for(i=0; i<nCol; i++){",
          "396:       }",
          "",
          "[Removed Lines]",
          "395:         sqlite3VdbeAddOp2(v, OP_Copy, aiCol[i]+1+regData, regTemp+i);",
          "",
          "[Added Lines]",
          "396:         sqlite3VdbeAddOp2(v, OP_Copy,",
          "397:                sqlite3TableColumnToStorage(pFKey->pFrom, aiCol[i])+1+regData,",
          "398:                regTemp+i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408:       if( pTab==pFKey->pFrom && nIncr==1 ){",
          "409:         int iJump = sqlite3VdbeCurrentAddr(v) + nCol + 1;",
          "410:         for(i=0; i<nCol; i++){",
          "413:           assert( pIdx->aiColumn[i]>=0 );",
          "414:           assert( aiCol[i]!=pTab->iPKey );",
          "415:           if( pIdx->aiColumn[i]==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "411:           int iChild = aiCol[i]+1+regData;",
          "412:           int iParent = pIdx->aiColumn[i]+1+regData;",
          "",
          "[Added Lines]",
          "414:           int iChild = sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[i])",
          "415:                               +1+regData;",
          "416:           int iParent = 1+regData;",
          "417:           iParent += sqlite3TableColumnToStorage(pIdx->pTable,",
          "418:                                                  pIdx->aiColumn[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f31327eeef9b039f6154fe8930b73e2989a7c29",
      "candidate_info": {
        "commit_hash": "0f31327eeef9b039f6154fe8930b73e2989a7c29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f31327eeef9b039f6154fe8930b73e2989a7c29",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json105.test"
        ],
        "message": "Enhance the path arguments in JSON functions to access \"#-N\" array indexes.\n\nFossilOrigin-Name: ffeec62cb5223ae70bc1889df4c0b241f5d17b1a10156362ca59953028741480",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json105.test||test/json105.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       }",
          "1177:       return pNode;",
          "1178:     }",
          "1181:     i = 0;",
          "1182:     j = 1;",
          "1183:     while( safe_isdigit(zPath[j]) ){",
          "1184:       i = i*10 + zPath[j] - '0';",
          "1185:       j++;",
          "1186:     }",
          "1190:     }",
          "1191:     zPath += j + 1;",
          "1192:     j = 1;",
          "1193:     for(;;){",
          "",
          "[Removed Lines]",
          "1179:   }else if( zPath[0]=='[' && safe_isdigit(zPath[1]) ){",
          "1180:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1187:     if( zPath[j]!=']' ){",
          "1189:       return 0;",
          "",
          "[Added Lines]",
          "1179:   }else if( zPath[0]=='[' ){",
          "1186:     if( j<2 || zPath[j]!=']' ){",
          "1187:       if( zPath[1]=='#' ){",
          "1188:         JsonNode *pBase = pRoot;",
          "1189:         int iBase = iRoot;",
          "1190:         if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1191:         for(;;){",
          "1192:           while( j<=pBase->n ){",
          "1193:             if( (pBase[j].jnFlags & JNODE_REMOVE)==0 ) i++;",
          "1194:             j += jsonNodeSize(&pBase[j]);",
          "1195:           }",
          "1196:           if( (pBase->jnFlags & JNODE_APPEND)==0 ) break;",
          "1197:           iBase += pBase->u.iAppend;",
          "1198:           pBase = &pParse->aNode[iBase];",
          "1199:           j = 1;",
          "1200:         }",
          "1201:         j = 2;",
          "1202:         if( zPath[2]=='-' && safe_isdigit(zPath[3]) ){",
          "1203:           unsigned int x = 0;",
          "1204:           j = 3;",
          "1205:           do{",
          "1206:             x = x*10 + zPath[j] - '0';",
          "1207:             j++;",
          "1208:           }while( safe_isdigit(zPath[j]) );",
          "1209:           if( x>i ) return 0;",
          "1210:           i -= x;",
          "1211:         }",
          "1212:         if( zPath[j]!=']' ){",
          "1214:           return 0;",
          "1215:         }",
          "1216:       }else{",
          "1218:         return 0;",
          "1219:       }",
          "1221:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de6637e15d95b7aee2caea8b8d5b9865f276cbbf152ecf0401c4c7bfdf6dee6f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json105.test||test/json105.test": [
          "File: test/json105.test -> test/json105.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-11-22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements tests for \"[#]\" extension to json-path",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix json104",
          "18: ifcapable !json1 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: # This is the example from pages 2 and 3 of RFC-7396",
          "24: db eval {",
          "25:   CREATE TABLE t1(j);",
          "26:   INSERT INTO t1(j) VALUES('{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}');",
          "27: }",
          "28: proc json_extract_test {testnum path result} {",
          "29:   do_execsql_test json105-1.$testnum \"SELECT quote(json_extract(j,$path)) FROM t1\" $result",
          "30: }",
          "31: json_extract_test 10 {'$.b[#]'}   NULL",
          "32: json_extract_test 20 {'$.b[#-1]'} 4",
          "33: json_extract_test 30 {'$.b[#-2]'} {'[2,3]'}",
          "34: json_extract_test 31 {'$.b[#-02]'} {'[2,3]'}",
          "35: json_extract_test 40 {'$.b[#-3]'} 1",
          "36: json_extract_test 50 {'$.b[#-4]'} NULL",
          "37: json_extract_test 60 {'$.b[#-2][#-1]'} 3",
          "38: json_extract_test 70 {'$.b[0]','$.b[#-1]'} {'[1,4]'}",
          "40: json_extract_test 100 {'$.a[#-1]'} NULL",
          "41: json_extract_test 110 {'$.b[#-000001]'} 4",
          "43: proc json_remove_test {testnum path result} {",
          "44:   do_execsql_test json105-2.$testnum \"SELECT quote(json_remove(j,$path)) FROM t1\" $result",
          "45: }",
          "46: json_remove_test 10 {'$.b[#]'}    {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "47: json_remove_test 20 {'$.b[#-0]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "48: json_remove_test 30 {'$.b[#-1]'}  {'{\"a\":1,\"b\":[1,[2,3]],\"c\":99}'}",
          "49: json_remove_test 40 {'$.b[#-2]'}  {'{\"a\":1,\"b\":[1,4],\"c\":99}'}",
          "50: json_remove_test 50 {'$.b[#-3]'}  {'{\"a\":1,\"b\":[[2,3],4],\"c\":99}'}",
          "51: json_remove_test 60 {'$.b[#-4]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "52: json_remove_test 70 {'$.b[#-2][#-1]'}  {'{\"a\":1,\"b\":[1,[2],4],\"c\":99}'}",
          "54: json_remove_test 100 {'$.b[0]','$.b[#-1]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "55: json_remove_test 110 {'$.b[#-1]','$.b[0]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "56: json_remove_test 120 {'$.b[#-1]','$.b[#-2]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "57: json_remove_test 130 {'$.b[#-1]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "58: json_remove_test 140 {'$.b[#-2]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "60: proc json_insert_test {testnum x result} {",
          "61:   do_execsql_test json105-3.$testnum \"SELECT quote(json_insert(j,$x)) FROM t1\" $result",
          "62: }",
          "63: json_insert_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "64: json_insert_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "65: json_insert_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "66:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "67: json_insert_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "68:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "70: proc json_set_test {testnum x result} {",
          "71:   do_execsql_test json105-4.$testnum \"SELECT quote(json_set(j,$x)) FROM t1\" $result",
          "72: }",
          "73: json_set_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "74: json_set_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "75: json_set_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "76:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "77: json_set_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "78:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "79: json_set_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "80: json_set_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "81: json_set_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "82:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "83: json_set_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "84:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "86: proc json_replace_test {testnum x result} {",
          "87:   do_execsql_test json105-5.$testnum \"SELECT quote(json_replace(j,$x)) FROM t1\" $result",
          "88: }",
          "89: json_replace_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "90: json_replace_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "91: json_replace_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "92:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "93: json_replace_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "94:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "95: json_replace_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "96: json_replace_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "97: json_replace_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "98:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "99: json_replace_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "100:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "102: do_catchsql_test json105-6.10 {",
          "103:   SELECT json_extract(j, '$.b[#-]') FROM t1;",
          "104: } {1 {JSON path error near '[#-]'}}",
          "105: do_catchsql_test json105-6.20 {",
          "106:   SELECT json_extract(j, '$.b[#9]') FROM t1;",
          "107: } {1 {JSON path error near '[#9]'}}",
          "108: do_catchsql_test json105-6.30 {",
          "109:   SELECT json_extract(j, '$.b[#+2]') FROM t1;",
          "110: } {1 {JSON path error near '[#+2]'}}",
          "111: do_catchsql_test json105-6.40 {",
          "112:   SELECT json_extract(j, '$.b[#-1') FROM t1;",
          "113: } {1 {JSON path error near '[#-1'}}",
          "114: do_catchsql_test json105-6.50 {",
          "115:   SELECT json_extract(j, '$.b[#-1x]') FROM t1;",
          "116: } {1 {JSON path error near '[#-1x]'}}",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "648d62995355ddc1a578d2fc1babd283f1186fe1",
      "candidate_info": {
        "commit_hash": "648d62995355ddc1a578d2fc1babd283f1186fe1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/648d62995355ddc1a578d2fc1babd283f1186fe1",
        "files": [
          "VERSION",
          "configure",
          "ext/fts3/fts3_write.c",
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/pcache1.c",
          "src/select.c",
          "src/sqlite.h.in",
          "src/test_devsym.c",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/vdbemem.c",
          "src/window.c",
          "test/dbfuzz2.c",
          "test/permutations.test",
          "test/quote.test",
          "test/releasetest.tcl",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl",
          "test/window9.test",
          "test/windowfault.test"
        ],
        "message": "Merge latest trunk changes into this branch.\n\nFossilOrigin-Name: 86ab963cc5743867e0535b78a5776e18c13835aa44bf2009f77642df8407cb3f",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/pcache1.c||src/pcache1.c",
          "src/select.c||src/select.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_devsym.c||src/test_devsym.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c",
          "src/window.c||src/window.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/permutations.test||test/permutations.test",
          "test/quote.test||test/quote.test",
          "test/releasetest.tcl||test/releasetest.tcl",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl",
          "test/window9.test||test/window9.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4283:       pNode = &pWriter->aNodeWriter[nHeight];",
          "4284:       pNode->iBlock = pWriter->iStart + pWriter->nLeafEst*nHeight;",
          "4286:       if( rc==SQLITE_OK ){",
          "4287:         memcpy(pNode->block.a, aRoot, nRoot);",
          "4288:         pNode->block.n = nRoot;",
          "4289:       }",
          "4291:       for(i=nHeight; i>=0 && rc==SQLITE_OK; i--){",
          "",
          "[Removed Lines]",
          "4285:       blobGrowBuffer(&pNode->block, MAX(nRoot, p->nNodeSize), &rc);",
          "",
          "[Added Lines]",
          "4285:       blobGrowBuffer(&pNode->block,",
          "4286:           MAX(nRoot, p->nNodeSize)+FTS3_NODE_PADDING, &rc",
          "4287:       );",
          "4291:         memset(&pNode->block.a[nRoot], 0, FTS3_NODE_PADDING);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4305:               pNode = &pWriter->aNodeWriter[i-1];",
          "4306:               pNode->iBlock = reader.iChild;",
          "4307:               rc = sqlite3Fts3ReadBlock(p, reader.iChild, &aBlock, &nBlock, 0);",
          "4309:               if( rc==SQLITE_OK ){",
          "4310:                 memcpy(pNode->block.a, aBlock, nBlock);",
          "4311:                 pNode->block.n = nBlock;",
          "4312:               }",
          "4313:               sqlite3_free(aBlock);",
          "4314:             }",
          "",
          "[Removed Lines]",
          "4308:               blobGrowBuffer(&pNode->block, MAX(nBlock, p->nNodeSize), &rc);",
          "",
          "[Added Lines]",
          "4311:               blobGrowBuffer(&pNode->block,",
          "4312:                   MAX(nBlock, p->nNodeSize)+FTS3_NODE_PADDING, &rc",
          "4313:               );",
          "4317:                 memset(&pNode->block.a[nBlock], 0, FTS3_NODE_PADDING);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   #include \"sqlite3.h\"",
          "64: #endif",
          "70: #ifndef SQLITE_AMALGAMATION",
          "71: #include \"sqlite3rtree.h\"",
          "72: typedef sqlite3_int64 i64;",
          "",
          "[Removed Lines]",
          "66: #include <string.h>",
          "67: #include <assert.h>",
          "68: #include <stdio.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: typedef unsigned char u8;",
          "75: typedef unsigned short u16;",
          "76: typedef unsigned int u32;",
          "77: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #if !defined(NDEBUG) && !defined(SQLITE_DEBUG)",
          "74: # define NDEBUG 1",
          "75: #endif",
          "76: #if defined(NDEBUG) && defined(SQLITE_DEBUG)",
          "77: # undef NDEBUG",
          "79: #endif",
          "81: #include <string.h>",
          "82: #include <stdio.h>",
          "83: #include <assert.h>",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7920f5569022f645ec4dbfce8c228880263785c708c2c0ac065e770c438b1d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: #ifdef SQLITE_DEBUG",
          "623:   int nLookaside = 0;",
          "625:     nLookaside = sqlite3LookasideUsed(db, 0);",
          "626:   }",
          "627: #endif",
          "",
          "[Removed Lines]",
          "624:   if( db && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "[Added Lines]",
          "628:   if( db && !db->mallocFailed && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3073:   db->szMmap = sqlite3GlobalConfig.szMmap;",
          "3074:   db->nextPagesize = 0;",
          "3075:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3077:                  | SQLITE_DqsDML",
          "3078: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3079:                  | SQLITE_AutoIndex",
          "3080: #endif",
          "",
          "[Removed Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "",
          "[Added Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames",
          "3077:                  | SQLITE_EnableTrigger",
          "3078:                  | SQLITE_CacheSpill",
          "3095: #if !defined(SQLITE_DQS)",
          "3096: # define SQLITE_DQS 3",
          "3097: #endif",
          "3098: #if (SQLITE_DQS&1)==1",
          "3100: #endif",
          "3101: #if (SQLITE_DQS&2)==2",
          "3102:                  | SQLITE_DqsDDL",
          "3103: #endif",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     }else{",
          "779:       pGroup = &pcache1.grp;",
          "780:     }",
          "781:     if( pGroup->lru.isAnchor==0 ){",
          "782:       pGroup->lru.isAnchor = 1;",
          "783:       pGroup->lru.pLruPrev = pGroup->lru.pLruNext = &pGroup->lru;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:     pcache1EnterMutex(pGroup);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "787:     pCache->szExtra = szExtra;",
          "788:     pCache->szAlloc = szPage + szExtra + ROUND8(sizeof(PgHdr1));",
          "789:     pCache->bPurgeable = (bPurgeable ? 1 : 0);",
          "791:     pcache1ResizeHash(pCache);",
          "792:     if( bPurgeable ){",
          "793:       pCache->nMin = 10;",
          "",
          "[Removed Lines]",
          "790:     pcache1EnterMutex(pGroup);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2096:   if( pTab==0 ){",
          "2097:     return 0;",
          "2098:   }",
          "2102:   pTab->nTabRef = 1;",
          "2103:   pTab->zName = 0;",
          "2104:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "",
          "[Removed Lines]",
          "2101:   assert( db->lookaside.bDisable );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: void devsym_unregister(){",
          "507:   sqlite3_vfs_unregister(&devsym_vfs);",
          "508:   g.pVfs = 0;",
          "509:   g.iDeviceChar = 0;",
          "510:   g.iSectorSize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   sqlite3_vfs_unregister(&writecrash_vfs);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2927: #endif",
          "2932:   pRec = pLast;",
          "2933:   do{",
          "2934:     assert( memIsValid(pRec) );",
          "",
          "[Removed Lines]",
          "2935:     serial_type = sqlite3VdbeSerialType(pRec, file_format, &len);",
          "2936:     if( pRec->flags & MEM_Zero ){",
          "2937:       if( serial_type==0 ){",
          "",
          "[Added Lines]",
          "2958:     if( pRec->flags & MEM_Null ){",
          "2959:       if( pRec->flags & MEM_Zero ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2944:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "2948:       }else{",
          "2951:       }",
          "2952:     }",
          "2958:     if( pRec==pData0 ) break;",
          "2959:     pRec--;",
          "2960:   }while(1);",
          "",
          "[Removed Lines]",
          "2945:         serial_type = 10;",
          "2946:       }else if( nData ){",
          "2947:         if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "2949:         nZero += pRec->u.nZero;",
          "2950:         len -= pRec->u.nZero;",
          "2953:     nData += len;",
          "2954:     testcase( serial_type==127 );",
          "2955:     testcase( serial_type==128 );",
          "2956:     nHdr += serial_type<=127 ? 1 : sqlite3VarintLen(serial_type);",
          "2957:     pRec->uTemp = serial_type;",
          "",
          "[Added Lines]",
          "2967:         pRec->uTemp = 10;",
          "2968:       }else{",
          "2969:         pRec->uTemp = 0;",
          "2970:       }",
          "2971:       nHdr++;",
          "2972:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "2974:       i64 i = pRec->u.i;",
          "2975:       u64 u;",
          "2976:       testcase( pRec->flags & MEM_Int );",
          "2977:       testcase( pRec->flags & MEM_IntReal );",
          "2978:       if( i<0 ){",
          "2979:         u = ~i;",
          "2980:       }else{",
          "2981:         u = i;",
          "2982:       }",
          "2983:       nHdr++;",
          "2984:       testcase( u==127 );               testcase( u==128 );",
          "2985:       testcase( u==32767 );             testcase( u==32768 );",
          "2986:       testcase( u==8388607 );           testcase( u==8388608 );",
          "2987:       testcase( u==2147483647 );        testcase( u==2147483648 );",
          "2988:       testcase( u==140737488355327LL ); testcase( u==140737488355328LL );",
          "2989:       if( u<=127 ){",
          "2990:         if( (i&1)==i && file_format>=4 ){",
          "2991:           pRec->uTemp = 8+(u32)u;",
          "2992:         }else{",
          "2993:           nData++;",
          "2994:           pRec->uTemp = 1;",
          "2995:         }",
          "2996:       }else if( u<=32767 ){",
          "2997:         nData += 2;",
          "2998:         pRec->uTemp = 2;",
          "2999:       }else if( u<=8388607 ){",
          "3000:         nData += 3;",
          "3001:         pRec->uTemp = 3;",
          "3002:       }else if( u<=2147483647 ){",
          "3003:         nData += 4;",
          "3004:         pRec->uTemp = 4;",
          "3005:       }else if( u<=140737488355327LL ){",
          "3006:         nData += 6;",
          "3007:         pRec->uTemp = 5;",
          "3009:         nData += 8;",
          "3010:         if( pRec->flags & MEM_IntReal ){",
          "3014:           pRec->u.r = (double)pRec->u.i;",
          "3015:           pRec->flags &= ~MEM_IntReal;",
          "3016:           pRec->flags |= MEM_Real;",
          "3017:           pRec->uTemp = 7;",
          "3018:         }else{",
          "3019:           pRec->uTemp = 6;",
          "3020:         }",
          "3021:       }",
          "3022:     }else if( pRec->flags & MEM_Real ){",
          "3023:       nHdr++;",
          "3024:       nData += 8;",
          "3025:       pRec->uTemp = 7;",
          "3026:     }else{",
          "3027:       assert( db->mallocFailed || pRec->flags&(MEM_Str|MEM_Blob) );",
          "3028:       assert( pRec->n>=0 );",
          "3029:       len = (u32)pRec->n;",
          "3030:       serial_type = (len*2) + 12 + ((pRec->flags & MEM_Str)!=0);",
          "3031:       if( pRec->flags & MEM_Zero ){",
          "3032:         serial_type += pRec->u.nZero*2;",
          "3033:         if( nData ){",
          "3034:           if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "3035:           len += pRec->u.nZero;",
          "3036:         }else{",
          "3037:           nZero += pRec->u.nZero;",
          "3038:         }",
          "3040:       nData += len;",
          "3041:       nHdr += sqlite3VarintLen(serial_type);",
          "3042:       pRec->uTemp = serial_type;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: int sqlite3VdbeCursorRestore(VdbeCursor*);",
          "487: u32 sqlite3VdbeSerialTypeLen(u32);",
          "488: u8 sqlite3VdbeOneByteSerialTypeLen(u8);",
          "489: u32 sqlite3VdbeSerialType(Mem*, int, u32*);",
          "490: u32 sqlite3VdbeSerialPut(unsigned char*, Mem*, u32);",
          "491: u32 sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);",
          "492: void sqlite3VdbeDeleteAuxData(sqlite3*, AuxData**, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "491: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3438: u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){",
          "3439:   int flags = pMem->flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3433: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "703:   double r2 = (double)i;",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "707: }",
          "",
          "[Removed Lines]",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "[Added Lines]",
          "706:           && i >= -2251799813685248LL && i < 2251799813685248LL);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:   Window *pWin;",
          "737:   SrcList *pSrc;",
          "738:   ExprList *pSub;",
          "740: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:   Table *pTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "796:         pExpr->op = TK_COLUMN;",
          "797:         pExpr->iColumn = p->pSub->nExpr-1;",
          "798:         pExpr->iTable = p->pWin->iEphCsr;",
          "799:       }",
          "801:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:         pExpr->y.pTab = p->pTab;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "839:   Window *pWin,",
          "840:   SrcList *pSrc,",
          "843: ){",
          "844:   Walker sWalker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:   Table *pTab,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "850:   sRewrite.pSub = *ppSub;",
          "851:   sRewrite.pWin = pWin;",
          "852:   sRewrite.pSrc = pSrc;",
          "854:   sWalker.pParse = pParse;",
          "855:   sWalker.xExprCallback = selectWindowRewriteExprCb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:   sRewrite.pTab = pTab;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "913:     p->pSrc = 0;",
          "914:     p->pWhere = 0;",
          "915:     p->pGroupBy = 0;",
          "916:     p->pHaving = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:     Table *pTab;",
          "918:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
          "919:     if( pTab==0 ){",
          "920:       return SQLITE_NOMEM;",
          "921:     }",
          "927:     p->selFlags &= ~SF_Aggregate;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "933:     pMWin->iEphCsr = pParse->nTab++;",
          "934:     pParse->nTab += 3;",
          "938:     pMWin->nBufferCol = (pSublist ? pSublist->nExpr : 0);",
          "",
          "[Removed Lines]",
          "936:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, &pSublist);",
          "937:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, &pSublist);",
          "",
          "[Added Lines]",
          "947:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, pTab, &pSublist);",
          "948:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, pTab, &pSublist);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "976:     );",
          "977:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "978:     if( p->pSrc ){",
          "979:       p->pSrc->a[0].pSelect = pSub;",
          "980:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "982:         rc = SQLITE_NOMEM;",
          "983:       }else{",
          "987:       }",
          "989:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, pSublist->nExpr);",
          "990:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "991:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "",
          "[Removed Lines]",
          "981:       if( sqlite3ExpandSubquery(pParse, &p->pSrc->a[0]) ){",
          "984:         pSub->selFlags |= SF_Expanded;",
          "985:         p->selFlags &= ~SF_Aggregate;",
          "986:         sqlite3SelectPrep(pParse, pSub, 0);",
          "",
          "[Added Lines]",
          "990:       Table *pTab2;",
          "993:       pSub->selFlags |= SF_Expanded;",
          "994:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "995:       if( pTab2==0 ){",
          "998:         memcpy(pTab, pTab2, sizeof(Table));",
          "999:         pTab->tabFlags |= TF_Ephemeral;",
          "1000:         p->pSrc->a[0].pTab = pTab;",
          "1001:         pTab = pTab2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "994:       sqlite3SelectDelete(db, pSub);",
          "995:     }",
          "996:     if( db->mallocFailed ) rc = SQLITE_NOMEM;",
          "997:   }",
          "999:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:     sqlite3DbFree(db, pTab);",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:       free(pIn);",
          "378:     }",
          "379:   }",
          "380:   if( eVerbosity>0 ){",
          "381:     struct rusage x;",
          "382:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #ifdef RUSAGE_SELF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "386:     }",
          "387:   }",
          "388:   return 0;",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389: #endif",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test chunksize.test",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DDL 0",
          "96: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DML 1",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     \"User-Auth\"               tcltest",
          "282:     \"Update-Delete-Limit\"     test",
          "283:     \"Extra-Robustness\"        test",
          "285:     \"No-lookaside\"            test",
          "286:     \"Devkit\"                  test",
          "287:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "284:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "284:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     \"User-Auth\"               tcltest",
          "247:     \"Update-Delete-Limit\"     test",
          "248:     \"Extra-Robustness\"        test",
          "250:     \"No-lookaside\"            test",
          "251:     \"Devkit\"                  test",
          "252:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "249:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "249:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 June 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix window9",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE fruits(",
          "25:      name TEXT COLLATE NOCASE,",
          "26:      color TEXT COLLATE NOCASE",
          "27:   );",
          "28: }",
          "30: do_execsql_test 1.1 {",
          "31:   INSERT INTO fruits (name, color) VALUES ('apple', 'RED');",
          "32:   INSERT INTO fruits (name, color) VALUES ('APPLE', 'yellow');",
          "33:   INSERT INTO fruits (name, color) VALUES ('pear', 'YELLOW');",
          "34:   INSERT INTO fruits (name, color) VALUES ('PEAR', 'green');",
          "35: }",
          "37: do_execsql_test 1.2 {",
          "38:   SELECT name, color, dense_rank() OVER (ORDER BY name) FROM fruits;",
          "39: } {",
          "40:   apple RED    1",
          "41:   APPLE yellow 1",
          "42:   pear  YELLOW 2",
          "43:   PEAR  green  2",
          "44: }",
          "46: do_execsql_test 1.3 {",
          "47:   SELECT name, color,",
          "48:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "49:   FROM fruits;",
          "50: } {",
          "51:   apple RED    1",
          "52:   APPLE yellow 2",
          "53:   PEAR green   1",
          "54:   pear YELLOW  2",
          "55: }",
          "57: do_execsql_test 1.4 {",
          "58:   SELECT name, color,",
          "59:     dense_rank() OVER (ORDER BY name),",
          "60:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "61:   FROM fruits;",
          "62: } {",
          "63:   apple RED    1 1",
          "64:   APPLE yellow 1 2",
          "65:   PEAR  green  2 1",
          "66:   pear  YELLOW 2 2",
          "67: }",
          "69: do_execsql_test 1.5 {",
          "70:   SELECT name, color,",
          "71:     dense_rank() OVER (ORDER BY name),",
          "72:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "73:   FROM fruits ORDER BY color;",
          "74: } {",
          "75:   PEAR  green  2 1",
          "76:   apple RED    1 1",
          "77:   APPLE yellow 1 2",
          "78:   pear  YELLOW 2 2",
          "79: }",
          "81: do_execsql_test 2.0 {",
          "82:   CREATE TABLE t1(a BLOB, b INTEGER, c COLLATE nocase);",
          "83:   INSERT INTO t1 VALUES(1, 2, 'abc');",
          "84:   INSERT INTO t1 VALUES(3, 4, 'ABC');",
          "85: }",
          "87: do_execsql_test 2.1.1 {",
          "88:   SELECT c=='Abc' FROM t1",
          "89: } {1     1}",
          "90: do_execsql_test 2.1.2 {",
          "91:   SELECT c=='Abc', rank() OVER (ORDER BY b) FROM t1",
          "92: } {1 1   1 2}",
          "94: do_execsql_test 2.2.1 {",
          "95:   SELECT b=='2' FROM t1",
          "96: } {1     0}",
          "97: do_execsql_test 2.2.2 {",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: set L [db eval {SELECT 0.0 FROM t}]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "221: }",
          "223: catch {db close}",
          "",
          "[Removed Lines]",
          "220:   faultsim_test_result {0 {}}",
          "",
          "[Added Lines]",
          "221:   faultsim_test_result [list 0 $::L]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
      "candidate_info": {
        "commit_hash": "4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/shell.c.in",
          "src/tokenize.c",
          "src/update.c",
          "test/fts4merge.test",
          "test/insert.test",
          "test/normalize.test"
        ],
        "message": "Merge trunk enhancements into the generated-columns branch.\n\nFossilOrigin-Name: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/shell.c.in||src/shell.c.in",
          "src/tokenize.c||src/tokenize.c",
          "src/update.c||src/update.c",
          "test/fts4merge.test||test/fts4merge.test",
          "test/insert.test||test/insert.test",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4950:     }",
          "4951:     if( SQLITE_OK==rc && pCsr->nSegment==nSeg",
          "4952:      && SQLITE_OK==(rc = sqlite3Fts3SegReaderStart(p, pCsr, pFilter))",
          "4954:     ){",
          "4955:       if( bUseHint && iIdx>0 ){",
          "4956:         const char *zKey = pCsr->zTerm;",
          "4957:         int nKey = pCsr->nTerm;",
          "",
          "[Removed Lines]",
          "4953:      && SQLITE_ROW==(rc = sqlite3Fts3SegReaderStep(p, pCsr))",
          "",
          "[Added Lines]",
          "4954:       int bEmpty = 0;",
          "4955:       rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4956:       if( rc==SQLITE_OK ){",
          "4957:         bEmpty = 1;",
          "4958:       }else if( rc!=SQLITE_ROW ){",
          "4959:         sqlite3Fts3SegReaderFinish(pCsr);",
          "4960:         break;",
          "4961:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4963:       if( rc==SQLITE_OK && pWriter->nLeafEst ){",
          "4964:         fts3LogMerge(nSeg, iAbsLevel);",
          "4972:         if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4965:         do {",
          "4966:           rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4967:           if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4968:           if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4969:         }while( rc==SQLITE_ROW );",
          "",
          "[Added Lines]",
          "4972:         if( bEmpty==0 ){",
          "4973:           do {",
          "4974:             rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4975:             if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4976:             if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4977:           }while( rc==SQLITE_ROW );",
          "4978:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9f409649ec4282a47f0a8b079b419f1922e0c24779b297f477ced168d5b7910d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1680:           sqlite3MultiWrite(pParse);",
          "1681:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1682:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1683:         }else{",
          "1684: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1685:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1683:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1684:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1934:       }",
          "1935:       default: {",
          "1936:         Trigger *pTrigger = 0;",
          "1937:         assert( onError==OE_Replace );",
          "1938:         if( db->flags&SQLITE_RecTriggers ){",
          "1939:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1940:         }",
          "1941:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1942:           sqlite3MultiWrite(pParse);",
          "1943:         }",
          "1944:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1945:             regR, nPkField, 0, OE_Replace,",
          "1946:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1947:         seenReplace = 1;",
          "1948:         break;",
          "1949:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1939:         int bRetryConstraintCheck = 0;",
          "1946:           bRetryConstraintCheck = 1;",
          "1951:         if( bRetryConstraintCheck ){",
          "1952:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1953:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "1954:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1955:         }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7770:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 0, 1);",
          "7771:       goto meta_command_exit;",
          "7772:     }",
          "7775:     sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7776:     sqlite3_free(zSql);",
          "7777:     if( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7778:       tnum = sqlite3_column_int(pStmt, 0);",
          "7779:     }",
          "7780:     sqlite3_finalize(pStmt);",
          "7786:     zSql = sqlite3_mprintf(\"PRAGMA index_xinfo='%q'\", azArg[1]);",
          "7787:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7788:     sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7773:     zSql = sqlite3_mprintf(\"SELECT rootpage FROM sqlite_master\"",
          "7774:                            \" WHERE name='%q' AND type='index'\", azArg[1]);",
          "7781:     if( tnum==0 ){",
          "7782:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7783:       rc = 1;",
          "7784:       goto meta_command_exit;",
          "7785:     }",
          "",
          "[Added Lines]",
          "7782:     zSql = sqlite3_mprintf(",
          "7783:       \"SELECT rootpage, 0 FROM sqlite_master\"",
          "7784:       \" WHERE name='%q' AND type='index'\"",
          "7785:       \"UNION ALL \"",
          "7786:       \"SELECT rootpage, 1 FROM sqlite_master\"",
          "7787:       \" WHERE name='%q' AND type='table'\"",
          "7788:       \"   AND sql LIKE '%%without%%rowid%%'\",",
          "7789:       azArg[1], azArg[1]",
          "7790:     );",
          "7795:       isWO = sqlite3_column_int(pStmt, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7799:           zCol = zLabel;",
          "7800:         }",
          "7801:       }",
          "7802:       if( zCollist==0 ){",
          "7803:         zCollist = sqlite3_mprintf(\"\\\"%w\\\"\", zCol);",
          "7804:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7814:       if( isWO && lenPK==0 && sqlite3_column_int(pStmt,5)==0 && zCollist ){",
          "7815:         lenPK = (int)strlen(zCollist);",
          "7816:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7806:       }",
          "7807:     }",
          "7808:     sqlite3_finalize(pStmt);",
          "7809:     zSql = sqlite3_mprintf(",
          "7812:     sqlite3_free(zCollist);",
          "7813:     rc = sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 1, tnum);",
          "7814:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "7810:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%s))WITHOUT ROWID\",",
          "7811:           azArg[2], zCollist, zCollist);",
          "",
          "[Added Lines]",
          "7824:     if( i==0 || tnum==0 ){",
          "7825:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7826:       rc = 1;",
          "7827:       sqlite3_free(zCollist);",
          "7828:       goto meta_command_exit;",
          "7829:     }",
          "7830:     if( lenPK==0 ) lenPK = 100000;",
          "7832:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%.*s))WITHOUT ROWID\",",
          "7833:           azArg[2], zCollist, lenPK, zCollist);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7819:       }else{",
          "7820:         utf8_printf(stdout, \"%s;\\n\", zSql);",
          "7821:         raw_printf(stdout,",
          "7823:         );",
          "7824:       }",
          "7825:     }else{",
          "",
          "[Removed Lines]",
          "7822:            \"WARNING: writing to an imposter table will corrupt the index!\\n\"",
          "",
          "[Added Lines]",
          "7844:           \"WARNING: writing to an imposter table will corrupt the \\\"%s\\\" %s!\\n\",",
          "7845:           azArg[1], isWO ? \"table\" : \"index\"",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:       }",
          "802:       case TK_RP: {",
          "803:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "805:           pStr->nChar = iStartIN+1;",
          "806:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "807:           iStartIN = 0;",
          "",
          "[Removed Lines]",
          "804:           assert( pStr->nChar>=iStartIN );",
          "",
          "[Added Lines]",
          "804:           assert( pStr->nChar>=(u32)iStartIN );",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   sNC.uNC.pUpsert = pUpsert;",
          "290:   sNC.ncFlags = NC_UUpsert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:   v = sqlite3GetVdbe(pParse);",
          "294:   if( v==0 ) goto update_cleanup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     memset(aToOpen, 1, nIdx+1);",
          "395:   }",
          "400:   if( pParse->nested==0 ) sqlite3VdbeCountChanges(v);",
          "401:   sqlite3BeginWriteOperation(pParse, pTrigger || hasFK, iDb);",
          "",
          "[Removed Lines]",
          "398:   v = sqlite3GetVdbe(pParse);",
          "399:   if( v==0 ) goto update_cleanup;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4merge.test||test/fts4merge.test": [
          "File: test/fts4merge.test -> test/fts4merge.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     execsql { INSERT INTO t1(t1) VALUES('merge=200,10') }",
          "327:     expr { ([db total_changes] - $x)>1 }",
          "328:   } {0}",
          "330: }",
          "332: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: }",
          "331: #-------------------------------------------------------------------------",
          "332: # Test cases 8.* - ticket [bf1aab89].",
          "333: #",
          "334: set testprefix fts4merge",
          "335: reset_db",
          "336: do_execsql_test 8.0 {",
          "337:   CREATE VIRTUAL TABLE t1 USING fts4(a, order=DESC);",
          "338:   INSERT INTO t1(a) VALUES (0);",
          "339:   INSERT INTO t1(a) VALUES (0);",
          "340:   UPDATE t1 SET a = NULL;",
          "341: }",
          "343: do_execsql_test 8.1 {",
          "344:   INSERT INTO t1(t1) VALUES('merge=1,4');",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2001 September 15",
          "",
          "[Added Lines]",
          "1: # 2001-09-15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the INSERT statement.",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "14: # $Id: insert.test,v 1.31 2007/04/05 11:25:59 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:   SELECT x FROM t14;",
          "459: } {1}",
          "463: # 2019-08-12.",
          "464: #",
          "",
          "[Removed Lines]",
          "461: integrity_check insert-99.0",
          "",
          "[Added Lines]",
          "460: integrity_check insert-14.2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475:   SELECT a, length(b) FROM t1;",
          "476: } {4 33000}",
          "479: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477: # 2019-10-16",
          "478: # ticket https://www.sqlite.org/src/info/a8a4847a2d96f5de",
          "479: # On a REPLACE INTO, if an AFTER trigger adds back the conflicting",
          "480: # row, you can end up with the wrong number of rows in an index.",
          "481: #",
          "482: db close",
          "483: sqlite3 db :memory:",
          "484: do_catchsql_test insert-16.1 {",
          "485:   PRAGMA recursive_triggers = true;",
          "486:   CREATE TABLE t0(c0,c1);",
          "487:   CREATE UNIQUE INDEX i0 ON t0(c0);",
          "488:   INSERT INTO t0(c0,c1) VALUES(123,1);",
          "489:   CREATE TRIGGER tr0 AFTER DELETE ON t0",
          "490:   BEGIN",
          "491:     INSERT INTO t0 VALUES(123,2);",
          "492:   END;",
          "493:   REPLACE INTO t0(c0,c1) VALUES(123,3);",
          "494: } {1 {UNIQUE constraint failed: t0.c0}}",
          "495: do_execsql_test insert-16.2 {",
          "496:   SELECT * FROM t0;",
          "497: } {123 1}",
          "498: integrity_check insert-16.3",
          "499: do_catchsql_test insert-16.4 {",
          "500:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "501:   CREATE INDEX t1b ON t1(b);",
          "502:   INSERT INTO t1 VALUES(1, 'one');",
          "503:   CREATE TRIGGER tr3 AFTER DELETE ON t1 BEGIN",
          "504:     INSERT INTO t1 VALUES(1, 'three');",
          "505:   END;",
          "506:   REPLACE INTO t1 VALUES(1, 'two');",
          "507: } {1 {UNIQUE constraint failed: t1.a}}",
          "508: integrity_check insert-16.5",
          "509: do_catchsql_test insert-16.6 {",
          "510:   PRAGMA foreign_keys = 1;",
          "511:   CREATE TABLE p1(a, b UNIQUE);",
          "512:   CREATE TABLE c1(c, d REFERENCES p1(b) ON DELETE CASCADE);",
          "513:   CREATE TRIGGER tr6 AFTER DELETE ON c1 BEGIN",
          "514:     INSERT INTO p1 VALUES(4, 1);",
          "515:   END;",
          "516:   INSERT INTO p1 VALUES(1, 1);",
          "517:   INSERT INTO c1 VALUES(2, 1);",
          "518:   REPLACE INTO p1 VALUES(3, 1);",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   800",
          "352:   {ATTACH \"normalize800.db\" AS somefile;}",
          "353:   0x2",
          "354:   {0 {ATTACH\"normalize800.db\"AS somefile;}}",
          "356:   810",
          "357:   {ATTACH DATABASE \"normalize810.db\" AS somefile;}",
          "358:   0x2",
          "359:   {0 {ATTACH DATABASE\"normalize810.db\"AS somefile;}}",
          "361:   900",
          "362:   {INSERT INTO t1 (x) VALUES(\"sl1\"), (1), (\"sl2\"), ('i');}",
          "363:   0x2",
          "364:   {0 {INSERT INTO t1(x)VALUES(?),(?),(?),(?);}}",
          "366:   910",
          "367:   {UPDATE t1 SET x = \"sl1\" WHERE x IN (1, \"sl2\", 'i');}",
          "368:   0x2",
          "369:   {0 {UPDATE t1 SET x=?WHERE x IN(?,?,?);}}",
          "371:   920",
          "372:   {UPDATE t1 SET x = \"y\" WHERE x IN (1, \"sl1\", 'i');}",
          "373:   0x2",
          "374:   {0 {UPDATE t1 SET x=y WHERE x IN(?,?,?);}}",
          "376:   930",
          "377:   {DELETE FROM t1 WHERE x IN (1, \"sl1\", 'i');}",
          "378:   0x2",
          "379:   {0 {DELETE FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}