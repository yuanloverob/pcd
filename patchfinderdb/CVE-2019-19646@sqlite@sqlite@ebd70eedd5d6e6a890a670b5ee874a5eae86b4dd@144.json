{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5df84280692df828b2c76d5a3a7ebf4c877f3900",
      "candidate_info": {
        "commit_hash": "5df84280692df828b2c76d5a3a7ebf4c877f3900",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5df84280692df828b2c76d5a3a7ebf4c877f3900",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "The experimental sqlite3_drop_modules_except() interface.\n\nFossilOrigin-Name: 0851db4d337a87f8b2d3ce2ae9f9c928b9483591ca41a9e39cc01548059b1888",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "3655:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3656:   \".vfslist                 List all available VFSes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3654:   \"    --allexcept             Unregister everything except those named\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6892:   int nArg = 0;",
          "6893:   int n, c;",
          "6894:   int rc = 0;",
          "6897: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "6898:   if( p->expert.pExpert ){",
          "",
          "[Removed Lines]",
          "6895:   char *azArg[50];",
          "",
          "[Added Lines]",
          "6896:   char *azArg[52];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6906:     while( IsSpace(zLine[h]) ){ h++; }",
          "6907:     if( zLine[h]==0 ) break;",
          "6908:     if( zLine[h]=='\\'' || zLine[h]=='\"' ){",
          "",
          "[Removed Lines]",
          "6905:   while( zLine[h] && nArg<ArraySize(azArg) ){",
          "",
          "[Added Lines]",
          "6906:   while( zLine[h] && nArg<ArraySize(azArg)-1 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6923:       resolve_backslashes(azArg[nArg-1]);",
          "6924:     }",
          "6925:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6927:   azArg[nArg] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "[Removed Lines]",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "",
          "[Added Lines]",
          "9412:     char *zOpt;",
          "9414:       raw_printf(stderr, \"Usage: .unmodule [--allexcept] NAME ...\\n\");",
          "9419:     zOpt = azArg[1];",
          "9420:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;",
          "9421:     if( strcmp(zOpt, \"-allexcept\")==0 ){",
          "9422:       assert( azArg[nArg]==0 );",
          "9423:       sqlite3_drop_modules_except(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "9424:     }else{",
          "9425:       for(ii=1; ii<nArg; ii++){",
          "9426:         sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9427:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6655: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6667: int sqlite3_drop_modules_except(",
          "6670: );",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   return TCL_OK;",
          "1111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_except(",
          "1121:   void *NotUsed,",
          "1125: ){",
          "1126:   int rc;",
          "1127:   sqlite3 *db;",
          "1129:   if( argc!=2 ){",
          "1130:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "1131:        \" DB\\\"\", 0);",
          "1132:     return TCL_ERROR;",
          "1133:   }",
          "1134:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1135:   sqlite3_drop_modules_except(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1136:   return TCL_OK;",
          "1137: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:      { \"sqlite3_close_v2\",              (Tcl_CmdProc*)sqlite_test_close_v2  },",
          "7861:      { \"sqlite3_create_function\",       (Tcl_CmdProc*)test_create_function  },",
          "7862:      { \"sqlite3_create_aggregate\",      (Tcl_CmdProc*)test_create_aggregate },",
          "7863:      { \"sqlite_register_test_function\", (Tcl_CmdProc*)test_register_func    },",
          "7864:      { \"sqlite_abort\",                  (Tcl_CmdProc*)sqlite_abort          },",
          "7865:      { \"sqlite_bind\",                   (Tcl_CmdProc*)test_bind             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7889:      { \"sqlite3_drop_modules_except\",   (Tcl_CmdProc*)test_drop_except      },",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: int sqlite3_drop_modules_except(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "147:     pNext = sqliteHashNext(pThis);",
          "148:     if( azNames ){",
          "149:       int ii;",
          "150:       for(ii=0; azNames[ii]!=0 && strcmp(azNames[ii],pMod->zName)!=0; ii++){}",
          "151:       if( azNames[ii]!=0 ) continue;",
          "152:     }",
          "153:     createModule(db, pMod->zName, 0, 0, 0);",
          "154:   }",
          "155:   return SQLITE_OK;",
          "156: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42e84ae1ab2774a881aa271660ec79889bf761d4",
      "candidate_info": {
        "commit_hash": "42e84ae1ab2774a881aa271660ec79889bf761d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42e84ae1ab2774a881aa271660ec79889bf761d4",
        "files": [
          "ext/rbu/rbufault3.test",
          "ext/rbu/rbumisc.test",
          "ext/rbu/rbutemplimit.test",
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add tests to improve code coverage of the RBU module.\n\nFossilOrigin-Name: ecb56b75a0e66462acdcce285b93f9fc56944c42902d886d6bada419059519a9",
        "before_after_code_files": [
          "ext/rbu/rbufault3.test||ext/rbu/rbufault3.test",
          "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test",
          "ext/rbu/rbutemplimit.test||ext/rbu/rbutemplimit.test",
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbufault3.test||ext/rbu/rbufault3.test": [
          "File: ext/rbu/rbufault3.test -> ext/rbu/rbufault3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   do_faultsim_test 3 -faults $fault -prep {",
          "85:     faultsim_restore_and_reopen",
          "87:   } -body {",
          "88:     sqlite3rbu_vacuum rbu test.db test.db2",
          "89:     rbu step",
          "",
          "[Removed Lines]",
          "86:     forcedelete test.db2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test": [
          "File: ext/rbu/rbumisc.test -> ext/rbu/rbumisc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 August 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbumisc",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "19: reset_db",
          "21: #-------------------------------------------------------------------------",
          "22: # Ensure that RBU is not confused by oddly named tables in an RBU",
          "23: # database.",
          "24: #",
          "25: do_execsql_test 1.0 {",
          "26:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "27: }",
          "28: do_test 1.1 {",
          "29:   forcedelete rbu.db",
          "30:   sqlite3 rbu rbu.db",
          "31:   rbu eval {",
          "32:     CREATE TABLE data_x1(a, b, c, rbu_control);",
          "33:     INSERT INTO data_x1 VALUES(1, 1, 1, 0);",
          "34:     INSERT INTO data_x1 VALUES(2, 2, 2, 0);",
          "36:     CREATE TABLE dat(a, b, c, rbu_control);",
          "37:     CREATE TABLE \"data x1\"(a, b, c, rbu_control);",
          "38:     CREATE TABLE datax1(a, b, c, rbu_control);",
          "39:     CREATE TABLE data_(a, b, c, rbu_control);",
          "41:     INSERT INTO \"data x1\" VALUES(3, 3, 3, 0);",
          "42:     INSERT INTO datax1 VALUES(3, 3, 3, 0);",
          "43:     INSERT INTO data_ VALUES(3, 3, 3, 0);",
          "44:     INSERT INTO dat VALUES(3, 3, 3, 0);",
          "45:   }",
          "46: } {}",
          "48: do_test 1.2 {",
          "49:   step_rbu test.db rbu.db",
          "50:   db eval { SELECT * FROM x1 }",
          "51: } {1 1 1 2 2 2}",
          "53: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/rbutemplimit.test||ext/rbu/rbutemplimit.test": [
          "File: ext/rbu/rbutemplimit.test -> ext/rbu/rbutemplimit.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   while 1 {",
          "66:     sqlite3rbu rbu $target $rbu",
          "67:     rbu temp_size_limit $temp_limit",
          "68:     sqlite3_exec_nr [rbu db 1] \"PRAGMA cache_size = $cachesize\"",
          "69:     for {set i 0} {$i < $stepsize} {incr i} {",
          "70:       set rc [rbu step]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     if { [rbu temp_size_limit -1]!=$temp_limit } { error \"round trip problem!\" }",
          "",
          "---------------"
        ],
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   INSERT INTO t1 VALUES(1, 2, 3);",
          "51:   INSERT INTO t1 VALUES(4, 5, 6);",
          "52:   INSERT INTO t1 VALUES(7, 8, 9);",
          "53: }",
          "55: do_rbu_vacuum_test 3.1 1",
          "57: do_execsql_test 3.2 {",
          "58:   SELECT * FROM t1;",
          "61: #-------------------------------------------------------------------------",
          "62: reset_db",
          "",
          "[Removed Lines]",
          "59: } {1 2 3 4 5 6 7 8 9}",
          "",
          "[Added Lines]",
          "54:   CREATE TABLE t2(a, b, c INTEGER, PRIMARY KEY(c));",
          "55:   CREATE INDEX i2 oN t2(b, a);",
          "56:   INSERT INTO t2 VALUES('a', 'b', -1);",
          "57:   INSERT INTO t2 VALUES('c', 'd', -2);",
          "58:   INSERT INTO t2 VALUES('e', 'f', -3);",
          "65:   SELECT * FROM t2;",
          "66: } {1 2 3 4 5 6 7 8 9 e f -3 c d -2 a b -1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   INSERT INTO \"a b c\" VALUES(3, 9, 1);",
          "97:   INSERT INTO \"a b c\" VALUES('aaa', 'bbb', 'ccc');",
          "99:   CREATE TABLE x(a);",
          "100:   INSERT INTO x VALUES('a'), ('b'), ('d');",
          "101:   CREATE UNIQUE INDEX y ON x(a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   CREATE INDEX abc2 ON \"a b c\"(\"c c\" DESC, a);",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1546:   char *zVector = 0;",
          "1547:   char *zRet = 0;",
          "1548:   int bFailed = 0;",
          "1575:       }else{",
          "1577:       }",
          "1590:     }",
          "1592:   }",
          "1593:   if( bFailed ) goto index_start_out;",
          "1595:   if( p->rc==SQLITE_OK ){",
          "1597:     sqlite3_stmt *pSel = 0;",
          "1606:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSel) ){",
          "1608:       for(iCol=0; iCol<pIter->nCol; iCol++){",
          "1609:         const char *zQuoted = (const char*)sqlite3_column_text(pSel, iCol);",
          "1610:         if( zQuoted[0]=='N' ){",
          "",
          "[Removed Lines]",
          "1550:   if( p->rc==SQLITE_OK ){",
          "1551:     const char *zSep = \"\";",
          "1552:     int iCol = 0;",
          "1553:     sqlite3_stmt *pXInfo = 0;",
          "1554:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1555:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1556:     );",
          "1557:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1558:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1559:       const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1560:       const char *zCol;",
          "1561:       if( sqlite3_column_int(pXInfo, 3) ){",
          "1562:         bFailed = 1;",
          "1563:         break;",
          "1564:       }",
          "1566:       if( iCid<0 ){",
          "1567:         if( pIter->eType==RBU_PK_IPK ){",
          "1568:           int i;",
          "1569:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1570:           assert( i<pIter->nTblCol );",
          "1571:           zCol = pIter->azTblCol[i];",
          "1572:         }else{",
          "1573:           zCol = \"_rowid_\";",
          "1574:         }",
          "1576:         zCol = pIter->azTblCol[iCid];",
          "1579:       zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1580:           zLhs, zSep, zCol, zCollate",
          "1581:       );",
          "1582:       zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1583:           zOrder, zSep, iCol, zCol, zCollate",
          "1584:       );",
          "1585:       zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1586:           zSelect, zSep, iCol, zCol",
          "1587:       );",
          "1588:       zSep = \", \";",
          "1589:       iCol++;",
          "1591:     rbuFinalize(p, pXInfo);",
          "1596:     int iCol;",
          "1599:     if( p->rc==SQLITE_OK ){",
          "1600:       p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1601:           sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1602:             zSelect, pIter->zTbl, zOrder",
          "1603:           )",
          "1604:       );",
          "1605:     }",
          "1607:       const char *zSep = \"\";",
          "",
          "[Added Lines]",
          "1549:   const char *zSep = \"\";",
          "1550:   int iCol = 0;",
          "1551:   sqlite3_stmt *pXInfo = 0;",
          "1553:   p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1554:       sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1555:   );",
          "1556:   while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1557:     int iCid = sqlite3_column_int(pXInfo, 1);",
          "1558:     const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1559:     const char *zCol;",
          "1560:     if( sqlite3_column_int(pXInfo, 3) ){",
          "1561:       bFailed = 1;",
          "1562:       break;",
          "1563:     }",
          "1565:     if( iCid<0 ){",
          "1566:       if( pIter->eType==RBU_PK_IPK ){",
          "1567:         int i;",
          "1568:         for(i=0; pIter->abTblPk[i]==0; i++);",
          "1569:         assert( i<pIter->nTblCol );",
          "1570:         zCol = pIter->azTblCol[i];",
          "1572:         zCol = \"_rowid_\";",
          "1574:     }else{",
          "1575:       zCol = pIter->azTblCol[iCid];",
          "1578:     zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1579:         zLhs, zSep, zCol, zCollate",
          "1580:         );",
          "1581:     zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1582:         zOrder, zSep, iCol, zCol, zCollate",
          "1583:         );",
          "1584:     zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1585:         zSelect, zSep, iCol, zCol",
          "1586:         );",
          "1587:     zSep = \", \";",
          "1588:     iCol++;",
          "1590:   rbuFinalize(p, pXInfo);",
          "1596:     p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1597:         sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1598:           zSelect, pIter->zTbl, zOrder",
          "1599:         )",
          "1600:     );",
          "1602:       zSep = \"\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eabe7f2d4ff0e0dd868dcab7ec1d4a9168a25f80d3a52f0eeea2f90bd33782f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
      "candidate_info": {
        "commit_hash": "1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fix handling of NULL, text and blob values in window queries that use \"RANGE BETWEEN A FOLLOWING AND B FOLLOWING\", or \"B PRECEDING AND A PRECEDING\", where A>B.\n\nFossilOrigin-Name: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3044cf6917ea8324175fc91657e9a5978af9748f72e1914bc361753f0b2d897d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2745:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2746:   }",
          "2749:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2750:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "[Removed Lines]",
          "2748:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "[Added Lines]",
          "2748:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:   INSERT INTO t2 VALUES(2, NULL);",
          "352:   INSERT INTO t2 VALUES(3, NULL);",
          "353:   INSERT INTO t2 VALUES(4, NULL);",
          "354: }",
          "358:   WINDOW win AS (",
          "359:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "360:   );",
          "361: }",
          "363: finish_test",
          "",
          "[Removed Lines]",
          "356: execsql_test 7.1 {",
          "357:   SELECT sum(a) OVER win FROM t2",
          "",
          "[Added Lines]",
          "354:   INSERT INTO t2 VALUES(5, 66);",
          "355:   INSERT INTO t2 VALUES(6, 67);",
          "358: foreach {tn f ex} {",
          "359:   1 sum \"\"",
          "360:   2 min \"\"",
          "361:   3 sum \"EXCLUDE CURRENT ROW\"",
          "362:   4 max \"EXCLUDE CURRENT ROW\"",
          "363: } {",
          "364: execsql_test 7.$tn.1 \"",
          "365:   SELECT $f (a) OVER win FROM t2",
          "369: \"",
          "370: execsql_test 7.$tn.2 \"",
          "371:   SELECT $f (a) OVER win FROM t2",
          "372:   WINDOW win AS (",
          "373:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "374:   );",
          "375: \"",
          "376: execsql_test 7.$tn.3 \"",
          "377:   SELECT $f (a) OVER win FROM t2",
          "378:   WINDOW win AS (",
          "379:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "380:   );",
          "381: \"",
          "382: execsql_test 7.$tn.4 \"",
          "383:   SELECT $f (a) OVER win FROM t2",
          "384:   WINDOW win AS (",
          "385:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "386:   );",
          "387: \"",
          "388: execsql_test 7.$tn.5 \"",
          "389:   SELECT $f (a) OVER win FROM t2",
          "390:   WINDOW win AS (",
          "391:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "392:   );",
          "393: \"",
          "395: execsql_test 7.$tn.6 \"",
          "396:   SELECT $f (a) OVER win FROM t2",
          "397:   WINDOW win AS (",
          "398:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "399:   );",
          "400: \"",
          "401: execsql_test 7.$tn.7 \"",
          "402:   SELECT $f (a) OVER win FROM t2",
          "403:   WINDOW win AS (",
          "404:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "405:   );",
          "406: \"",
          "407: execsql_test 7.$tn.8 \"",
          "408:   SELECT $f (a) OVER win FROM t2",
          "409:   WINDOW win AS (",
          "410:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "411:   );",
          "412: \"",
          "413: execsql_test 7.$tn.9 \"",
          "414:   SELECT $f (a) OVER win FROM t2",
          "415:   WINDOW win AS (",
          "416:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "417:   );",
          "418: \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6213:   INSERT INTO t2 VALUES(2, NULL);",
          "6214:   INSERT INTO t2 VALUES(3, NULL);",
          "6215:   INSERT INTO t2 VALUES(4, NULL);",
          "6216: } {}",
          "6220:   WINDOW win AS (",
          "6221:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6222:   );",
          "6225: finish_test",
          "",
          "[Removed Lines]",
          "6218: do_execsql_test 7.1 {",
          "6219:   SELECT sum(a) OVER win FROM t2",
          "6223: } {9   9   9   9}",
          "",
          "[Added Lines]",
          "6216:   INSERT INTO t2 VALUES(5, 66);",
          "6217:   INSERT INTO t2 VALUES(6, 67);",
          "6220: do_execsql_test 7.1.1 {",
          "6221:   SELECT sum (a) OVER win FROM t2",
          "6225: } {9   9   9   9   9   9}",
          "6227: do_execsql_test 7.1.2 {",
          "6228:   SELECT sum (a) OVER win FROM t2",
          "6229:   WINDOW win AS (",
          "6230:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6231:   );",
          "6232: } {{}   {}   {}   9   9   9}",
          "6234: do_execsql_test 7.1.3 {",
          "6235:   SELECT sum (a) OVER win FROM t2",
          "6236:   WINDOW win AS (",
          "6237:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6238:   );",
          "6239: } {{}   {}   {}   9   9   9}",
          "6241: do_execsql_test 7.1.4 {",
          "6242:   SELECT sum (a) OVER win FROM t2",
          "6243:   WINDOW win AS (",
          "6244:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6245:   );",
          "6246: } {9   9   9   {}   {}   {}}",
          "6248: do_execsql_test 7.1.5 {",
          "6249:   SELECT sum (a) OVER win FROM t2",
          "6250:   WINDOW win AS (",
          "6251:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6252:   );",
          "6253: } {9   9   9   {}   {}   {}}",
          "6255: do_execsql_test 7.1.6 {",
          "6256:   SELECT sum (a) OVER win FROM t2",
          "6257:   WINDOW win AS (",
          "6258:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6259:   );",
          "6260: } {{}   {}   1   9   9   9}",
          "6262: do_execsql_test 7.1.7 {",
          "6263:   SELECT sum (a) OVER win FROM t2",
          "6264:   WINDOW win AS (",
          "6265:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6266:   );",
          "6267: } {{}   {}   {}   9   9   9}",
          "6269: do_execsql_test 7.1.8 {",
          "6270:   SELECT sum (a) OVER win FROM t2",
          "6271:   WINDOW win AS (",
          "6272:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6273:   );",
          "6274: } {9   9   9   {}   {}   {}}",
          "6276: do_execsql_test 7.1.9 {",
          "6277:   SELECT sum (a) OVER win FROM t2",
          "6278:   WINDOW win AS (",
          "6279:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6280:   );",
          "6281: } {9   9   9   {}   {}   {}}",
          "6283: do_execsql_test 7.2.1 {",
          "6284:   SELECT min (a) OVER win FROM t2",
          "6285:   WINDOW win AS (",
          "6286:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6287:   );",
          "6288: } {2   2   2   2   2   2}",
          "6290: do_execsql_test 7.2.2 {",
          "6291:   SELECT min (a) OVER win FROM t2",
          "6292:   WINDOW win AS (",
          "6293:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6294:   );",
          "6295: } {{}   {}   {}   2   2   2}",
          "6297: do_execsql_test 7.2.3 {",
          "6298:   SELECT min (a) OVER win FROM t2",
          "6299:   WINDOW win AS (",
          "6300:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6301:   );",
          "6302: } {{}   {}   {}   2   2   2}",
          "6304: do_execsql_test 7.2.4 {",
          "6305:   SELECT min (a) OVER win FROM t2",
          "6306:   WINDOW win AS (",
          "6307:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6308:   );",
          "6309: } {2   2   2   {}   {}   {}}",
          "6311: do_execsql_test 7.2.5 {",
          "6312:   SELECT min (a) OVER win FROM t2",
          "6313:   WINDOW win AS (",
          "6314:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6315:   );",
          "6316: } {2   2   2   {}   {}   {}}",
          "6318: do_execsql_test 7.2.6 {",
          "6319:   SELECT min (a) OVER win FROM t2",
          "6320:   WINDOW win AS (",
          "6321:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6322:   );",
          "6323: } {{}   {}   1   2   2   2}",
          "6325: do_execsql_test 7.2.7 {",
          "6326:   SELECT min (a) OVER win FROM t2",
          "6327:   WINDOW win AS (",
          "6328:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6329:   );",
          "6330: } {{}   {}   {}   2   2   2}",
          "6332: do_execsql_test 7.2.8 {",
          "6333:   SELECT min (a) OVER win FROM t2",
          "6334:   WINDOW win AS (",
          "6335:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6336:   );",
          "6337: } {2   2   2   {}   {}   {}}",
          "6339: do_execsql_test 7.2.9 {",
          "6340:   SELECT min (a) OVER win FROM t2",
          "6341:   WINDOW win AS (",
          "6342:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6343:   );",
          "6344: } {2   2   2   {}   {}   {}}",
          "6346: do_execsql_test 7.3.1 {",
          "6347:   SELECT sum (a) OVER win FROM t2",
          "6348:   WINDOW win AS (",
          "6349:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6350:   );",
          "6351: } {9   9   9   9   9   9}",
          "6353: do_execsql_test 7.3.2 {",
          "6354:   SELECT sum (a) OVER win FROM t2",
          "6355:   WINDOW win AS (",
          "6356:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6357:   );",
          "6358: } {{}   {}   {}   9   9   9}",
          "6360: do_execsql_test 7.3.3 {",
          "6361:   SELECT sum (a) OVER win FROM t2",
          "6362:   WINDOW win AS (",
          "6363:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6364:   );",
          "6365: } {{}   {}   {}   9   9   9}",
          "6367: do_execsql_test 7.3.4 {",
          "6368:   SELECT sum (a) OVER win FROM t2",
          "6369:   WINDOW win AS (",
          "6370:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6371:   );",
          "6372: } {9   9   9   {}   {}   {}}",
          "6374: do_execsql_test 7.3.5 {",
          "6375:   SELECT sum (a) OVER win FROM t2",
          "6376:   WINDOW win AS (",
          "6377:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6378:   );",
          "6379: } {9   9   9   {}   {}   {}}",
          "6381: do_execsql_test 7.3.6 {",
          "6382:   SELECT sum (a) OVER win FROM t2",
          "6383:   WINDOW win AS (",
          "6384:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6385:   );",
          "6386: } {{}   {}   1   9   9   9}",
          "6388: do_execsql_test 7.3.7 {",
          "6389:   SELECT sum (a) OVER win FROM t2",
          "6390:   WINDOW win AS (",
          "6391:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6392:   );",
          "6393: } {{}   {}   {}   9   9   9}",
          "6395: do_execsql_test 7.3.8 {",
          "6396:   SELECT sum (a) OVER win FROM t2",
          "6397:   WINDOW win AS (",
          "6398:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6399:   );",
          "6400: } {9   9   9   {}   {}   {}}",
          "6402: do_execsql_test 7.3.9 {",
          "6403:   SELECT sum (a) OVER win FROM t2",
          "6404:   WINDOW win AS (",
          "6405:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6406:   );",
          "6407: } {9   9   9   {}   {}   {}}",
          "6409: do_execsql_test 7.4.1 {",
          "6410:   SELECT max (a) OVER win FROM t2",
          "6411:   WINDOW win AS (",
          "6412:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6413:   );",
          "6414: } {4   4   4   4   4   4}",
          "6416: do_execsql_test 7.4.2 {",
          "6417:   SELECT max (a) OVER win FROM t2",
          "6418:   WINDOW win AS (",
          "6419:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6420:   );",
          "6421: } {{}   {}   {}   4   4   4}",
          "6423: do_execsql_test 7.4.3 {",
          "6424:   SELECT max (a) OVER win FROM t2",
          "6425:   WINDOW win AS (",
          "6426:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6427:   );",
          "6428: } {{}   {}   {}   4   4   4}",
          "6430: do_execsql_test 7.4.4 {",
          "6431:   SELECT max (a) OVER win FROM t2",
          "6432:   WINDOW win AS (",
          "6433:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6434:   );",
          "6435: } {4   4   4   {}   {}   {}}",
          "6437: do_execsql_test 7.4.5 {",
          "6438:   SELECT max (a) OVER win FROM t2",
          "6439:   WINDOW win AS (",
          "6440:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6441:   );",
          "6442: } {4   4   4   {}   {}   {}}",
          "6444: do_execsql_test 7.4.6 {",
          "6445:   SELECT max (a) OVER win FROM t2",
          "6446:   WINDOW win AS (",
          "6447:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6448:   );",
          "6449: } {{}   {}   1   4   4   4}",
          "6451: do_execsql_test 7.4.7 {",
          "6452:   SELECT max (a) OVER win FROM t2",
          "6453:   WINDOW win AS (",
          "6454:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6455:   );",
          "6456: } {{}   {}   {}   4   4   4}",
          "6458: do_execsql_test 7.4.8 {",
          "6459:   SELECT max (a) OVER win FROM t2",
          "6460:   WINDOW win AS (",
          "6461:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6462:   );",
          "6463: } {4   4   4   {}   {}   {}}",
          "6465: do_execsql_test 7.4.9 {",
          "6466:   SELECT max (a) OVER win FROM t2",
          "6467:   WINDOW win AS (",
          "6468:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6469:   );",
          "6470: } {4   4   4   {}   {}   {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ac02a94ab5ee7496c053c417a77bc620bb548fb",
      "candidate_info": {
        "commit_hash": "8ac02a94ab5ee7496c053c417a77bc620bb548fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ac02a94ab5ee7496c053c417a77bc620bb548fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "test/expr2.test",
          "test/index7.test"
        ],
        "message": "Update the sqlite3ExprCompare() routine so that it does not think \"? IS NOT TRUE\" is the same as \"? IS TRUE\". Fix for [d3e7f2ba5b3].\n\nFossilOrigin-Name: 99eba69b3a64741c69d167bf7a05dbe138c9e7faecc54a1b8d8220cb23902830",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/expr2.test||test/expr2.test",
          "test/index7.test||test/index7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4862:      && (combinedFlags & EP_Reduced)==0",
          "4863:     ){",
          "4864:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4865:       if( pA->iTable!=pB->iTable",
          "4866:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "4867:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4865:       if( pA->op2!=pB->op2 ) return 2;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2484:   u8 op2;                /* TK_REGISTER: original value of Expr.op",
          "",
          "[Added Lines]",
          "2484:   u8 op2;                /* TK_REGISTER/TK_TRUTH: original value of Expr.op",
          "",
          "---------------"
        ],
        "test/expr2.test||test/expr2.test": [
          "File: test/expr2.test -> test/expr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 May 20",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing expressions.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix expr2",
          "19: do_execsql_test 1.0 {",
          "20:   CREATE TABLE t0(c0);",
          "21:   INSERT INTO t0(c0) VALUES ('val');",
          "22: }",
          "24: do_execsql_test 1.1 {",
          "25:   SELECT * FROM t0 WHERE (",
          "26:       ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) IS 0",
          "27:   )",
          "28: } {val}",
          "30: do_execsql_test 1.2.1 {",
          "31:   SELECT",
          "32:       ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) IS 0",
          "33:   FROM t0",
          "34: } {1}",
          "36: do_execsql_test 1.2.2 {",
          "37:   SELECT",
          "38:       ( (0 IS NOT FALSE) OR NOT (0 IS 0 OR (t0.c0 = 1)) ) IS 0",
          "39:   FROM t0",
          "40: } {1}",
          "42: do_execsql_test 1.3 {",
          "43:   SELECT ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) FROM t0",
          "44: } {0}",
          "46: do_execsql_test 1.4.1 {",
          "47:   SELECT (0 IS NOT FALSE) FROM t0",
          "48: } {0}",
          "49: do_execsql_test 1.4.2 {",
          "50:   SELECT NOT (0 IS FALSE OR (t0.c0 = 1)) FROM t0",
          "51: } {0}",
          "54: finish_test",
          "",
          "---------------"
        ],
        "test/index7.test||test/index7.test": [
          "File: test/index7.test -> test/index7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   CREATE INDEX t5a ON t5(a) WHERE a=#1;",
          "328: } {1 {near \"#1\": syntax error}}",
          "331: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: do_execsql_test index7-7.0 {",
          "331:   CREATE TABLE t6(x, y);",
          "332:   INSERT INTO t6 VALUES(1, 1);",
          "333:   INSERT INTO t6 VALUES(0, 0);",
          "334:   SELECT * FROM t6 WHERE y IS TRUE ORDER BY x;",
          "335: } {1 1}",
          "337: do_execsql_test index7-7.1 {",
          "338:   CREATE INDEX i6 ON t6(x) WHERE y IS NOT TRUE;",
          "339:   SELECT * FROM t6 WHERE y IS TRUE ORDER BY x;",
          "340: } {1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92107a38dccca75441fb080875e24822ec7a7695",
      "candidate_info": {
        "commit_hash": "92107a38dccca75441fb080875e24822ec7a7695",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92107a38dccca75441fb080875e24822ec7a7695",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test",
          "test/walfault2.test",
          "test/walvfs.test"
        ],
        "message": "Add a few more test cases to walfault2.test and walvfs.test.\n\nFossilOrigin-Name: 3873941c4fb9aa2d0de1129722c5fcdf2be1ea261677d4841ed99f896c778459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test",
          "test/walfault2.test||test/walfault2.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d9653380c455b4bf6c371540d677cbde6d17664c58662b5cc9a12929f46192dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:   walfault2.test",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2010 May 03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/malloc_common.tcl",
          "19: source $testdir/lock_common.tcl",
          "21: ifcapable !wal {finish_test ; return }",
          "22: set testprefix walfault2",
          "24: #-------------------------------------------------------------------------",
          "25: # Inject faults while truncating the wal file.",
          "26: #",
          "27: do_execsql_test 1.0 {",
          "28:   PRAGMA auto_vacuum = 0;",
          "29:   CREATE TABLE t1(a, b);",
          "30:   PRAGMA journal_mode = wal;",
          "31:   WITH s(i) AS (",
          "32:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "33:   )",
          "34:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "35: } {wal}",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "42:   execsql {",
          "43:     PRAGMA wal_checkpoint;",
          "44:     PRAGMA journal_size_limit = 10000;",
          "45:     PRAGMA synchronous = full;",
          "46:   }",
          "47: } -body {",
          "48:   execsql { INSERT INTO t1 VALUES(1,1) }",
          "49: } -test {",
          "50:   faultsim_test_result {0 {}}",
          "51: }",
          "53: #-------------------------------------------------------------------------",
          "54: # Inject faults while rewriting checksums.",
          "55: #",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   PRAGMA auto_vacuum = 0;",
          "59:   CREATE TABLE t1(a, b);",
          "60:   PRAGMA journal_mode = wal;",
          "61:   WITH s(i) AS (",
          "62:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "63:   )",
          "64:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "65: } {wal}",
          "66: faultsim_save_and_close",
          "68: do_faultsim_test 2 -prep {",
          "69:   faultsim_restore_and_reopen",
          "70:   execsql {",
          "71:     PRAGMA cache_size = 2;",
          "72:     BEGIN;",
          "73:     UPDATE t1 SET a=randomblob(400);",
          "74:     UPDATE t1 SET b=randomblob(400);",
          "75:     UPDATE t1 SET a=randomblob(400);",
          "76:     UPDATE t1 SET b=randomblob(400);",
          "77:     UPDATE t1 SET a=randomblob(400);",
          "78:     UPDATE t1 SET b=randomblob(400);",
          "79:     UPDATE t1 SET a=randomblob(400);",
          "80:     UPDATE t1 SET b=randomblob(400);",
          "81:   }",
          "82: } -body {",
          "83:   execsql COMMIT",
          "84: } -test {",
          "85:   faultsim_test_result {0 {}}",
          "86: }",
          "90: finish_test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "277: db close",
          "278: tvfs delete",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Check that a checkpoint fails if it cannot get the CHECKPOINTER lock",
          "280: #",
          "281: reset_db",
          "282: tvfs filter {}",
          "283: db close",
          "284: sqlite3 db test.db -vfs tvfs",
          "285: do_execsql_test 7.0 {",
          "286:   PRAGMA auto_vacuum = 0;",
          "287:   PRAGMA page_size = 1024;",
          "288:   CREATE TABLE t1(x);",
          "289:   PRAGMA journal_mode = wal;",
          "290:   WITH s(i) AS (",
          "291:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "292:   )",
          "293:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "294: } {wal}",
          "296: tvfs script xShmLock",
          "297: tvfs filter xShmLock",
          "298: proc xShmLock {method file handle spec} {",
          "299:   if {$spec==\"1 1 lock exclusive\"} {",
          "300:     return SQLITE_BUSY",
          "301:   }",
          "302:   return SQLITE_OK",
          "303: }",
          "305: do_execsql_test 7.1 {",
          "306:   PRAGMA wal_checkpoint",
          "307: } {1 -1 -1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}