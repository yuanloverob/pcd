{
  "cve_id": "CVE-2020-13397",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in security_fips_decrypt in libfreerdp/core/security.c due to an uninitialized value.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
  "patch_info": {
    "commit_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "files": [
      "libfreerdp/core/security.c"
    ],
    "message": "Fixed GHSL-2020-101 missing NULL check\n\n(cherry picked from commit b207dbba35c505bbc3ad5aadc10b34980c6b7e8e)",
    "before_after_code_files": [
      "libfreerdp/core/security.c||libfreerdp/core/security.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/security.c||libfreerdp/core/security.c": [
      "File: libfreerdp/core/security.c -> libfreerdp/core/security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "816: {",
      "817:  size_t olen;",
      "819:  if (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))",
      "820:   return FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "819:  if (!rdp || !rdp->fips_decrypt)",
      "820:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11eb374ef4306bec43213b5589e70995f236adc3",
      "candidate_info": {
        "commit_hash": "11eb374ef4306bec43213b5589e70995f236adc3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/11eb374ef4306bec43213b5589e70995f236adc3",
        "files": [
          "libfreerdp/codec/rfx_dwt.c"
        ],
        "message": "improve RFX DWT algorithm\n\nmerge multiple loops into the one loop for vertical DWT inverse\n\n(cherry picked from commit fff9eba34af8a54bd93b1a7ccdda0a6a6898f755)",
        "before_after_code_files": [
          "libfreerdp/codec/rfx_dwt.c||libfreerdp/codec/rfx_dwt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/rfx_dwt.c||libfreerdp/codec/rfx_dwt.c": [
          "File: libfreerdp/codec/rfx_dwt.c -> libfreerdp/codec/rfx_dwt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  for (x = 0; x < total_width; x++)",
          "89:  {",
          "102:   {",
          "109:   }",
          "110:  }",
          "111: }",
          "",
          "[Removed Lines]",
          "91:   for (n = 0; n < subband_width; n++)",
          "92:   {",
          "93:    y = n << 1;",
          "94:    dst = buffer + y * total_width + x;",
          "95:    l = idwt + n * total_width + x;",
          "96:    h = l + subband_width * total_width;",
          "97:    dst[0] = *l - (((n > 0 ? *(h - total_width) : *h) + (*h) + 1) >> 1);",
          "98:   }",
          "101:   for (n = 0; n < subband_width; n++)",
          "103:    y = n << 1;",
          "104:    dst = buffer + y * total_width + x;",
          "105:    l = idwt + n * total_width + x;",
          "106:    h = l + subband_width * total_width;",
          "107:    dst[total_width] =",
          "108:        (*h << 1) + ((dst[0] + dst[n < subband_width - 1 ? 2 * total_width : 0]) >> 1);",
          "",
          "[Added Lines]",
          "90:   l = idwt + x;",
          "91:   h = idwt + x + subband_width * total_width;",
          "92:   dst = buffer + x;",
          "96:   for (n = 1; n < subband_width; n++)",
          "98:    l += total_width;",
          "99:    h += total_width;",
          "102:    dst[2 * total_width] = *l - ((*(h - total_width) + *h + 1) >> 1);",
          "105:    dst[total_width] = (*(h - total_width) << 1) + ((*dst + dst[2 * total_width]) >> 1);",
          "107:    dst += 2 * total_width;",
          "110:   dst[total_width] = (*h << 1) + ((*dst * 2) >> 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "630415e5237cfd661386f5a9b4f1ba3232aa4733",
      "candidate_info": {
        "commit_hash": "630415e5237cfd661386f5a9b4f1ba3232aa4733",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/630415e5237cfd661386f5a9b4f1ba3232aa4733",
        "files": [
          "winpr/include/winpr/sam.h",
          "winpr/libwinpr/utils/sam.c"
        ],
        "message": "Refactored sam functions to utilize strtok_s\n\n(cherry picked from commit ddb388e1527de69e47d55068d8a318ef270fc4a0)",
        "before_after_code_files": [
          "winpr/include/winpr/sam.h||winpr/include/winpr/sam.h",
          "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/include/winpr/sam.h||winpr/include/winpr/sam.h": [
          "File: winpr/include/winpr/sam.h -> winpr/include/winpr/sam.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <winpr/winpr.h>",
          "24: #include <winpr/wtypes.h>",
          "33: typedef struct winpr_sam WINPR_SAM;",
          "35: struct winpr_sam_entry",
          "",
          "[Removed Lines]",
          "26: struct winpr_sam",
          "27: {",
          "28:  FILE* fp;",
          "29:  char* line;",
          "30:  char* buffer;",
          "31:  BOOL readOnly;",
          "32: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c": [
          "File: winpr/libwinpr/utils/sam.c -> winpr/libwinpr/utils/sam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #endif",
          "44: #define TAG WINPR_TAG(\"utils\")",
          "46: WINPR_SAM* SamOpen(const char* filename, BOOL readOnly)",
          "47: {",
          "48:  FILE* fp = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: struct winpr_sam",
          "47: {",
          "48:  FILE* fp;",
          "49:  char* line;",
          "50:  char* buffer;",
          "51:  char* context;",
          "52:  BOOL readOnly;",
          "53: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  if (fileSize < 1)",
          "99:   return FALSE;",
          "101:  sam->buffer = (char*)malloc(fileSize + 2);",
          "103:  if (!sam->buffer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:  sam->context = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:  sam->buffer[fileSize] = '\\n';",
          "122:  sam->buffer[fileSize + 1] = '\\0';",
          "124:  return TRUE;",
          "125: }",
          "",
          "[Removed Lines]",
          "123:  sam->line = strtok(sam->buffer, \"\\n\");",
          "",
          "[Added Lines]",
          "133:  sam->line = strtok_s(sam->buffer, \"\\n\", &sam->context);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:   }",
          "302:   SamResetEntry(entry);",
          "304:  }",
          "306: out_fail:",
          "",
          "[Removed Lines]",
          "303:   sam->line = strtok(NULL, \"\\n\");",
          "",
          "[Added Lines]",
          "313:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "415:   }",
          "417:   SamResetEntry(entry);",
          "419:  }",
          "421: out_fail:",
          "",
          "[Removed Lines]",
          "418:   sam->line = strtok(NULL, \"\\n\");",
          "",
          "[Added Lines]",
          "428:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "064a90c8b36b93f9d5c74dbb522203dfdca385c3",
      "candidate_info": {
        "commit_hash": "064a90c8b36b93f9d5c74dbb522203dfdca385c3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/064a90c8b36b93f9d5c74dbb522203dfdca385c3",
        "files": [
          "libfreerdp/core/capabilities.c"
        ],
        "message": "Fixed BehaviorSanitizer warnings\n\n(cherry picked from commit afdd81dab5c484ab95b977a0d71f3809c8fa89a3)",
        "before_after_code_files": [
          "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
          "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2702:  if (Stream_GetRemainingLength(s) < 16)",
          "2703:   return FALSE;",
          "2704:  Stream_Read(s, g, 16);",
          "2708:  guid->Data4[0] = g[8];",
          "2709:  guid->Data4[1] = g[9];",
          "2710:  guid->Data4[2] = g[10];",
          "",
          "[Removed Lines]",
          "2705:  guid->Data1 = (g[3] << 24) | (g[2] << 16) | (g[1] << 8) | g[0];",
          "2706:  guid->Data2 = (g[5] << 8) | g[4];",
          "2707:  guid->Data3 = (g[7] << 8) | g[6];",
          "",
          "[Added Lines]",
          "2705:  guid->Data1 = ((UINT32)g[3] << 24U) | ((UINT32)g[2] << 16U) | (g[1] << 8U) | g[0];",
          "2706:  guid->Data2 = (g[5] << 8U) | g[4];",
          "2707:  guid->Data3 = (g[7] << 8U) | g[6];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca246a6bfd3b085b61695f458b863f2d60e082c2",
      "candidate_info": {
        "commit_hash": "ca246a6bfd3b085b61695f458b863f2d60e082c2",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ca246a6bfd3b085b61695f458b863f2d60e082c2",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Clear dynamic channel lists on disconnect.\n\n(cherry picked from commit a1eb3e66b31579d3d878dee67913962140f75255)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:  free(channel);",
          "382: }",
          "384: static void dvcman_free(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "385: {",
          "386:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "388:  ArrayList_Free(dvcman->plugins);",
          "389:  ArrayList_Free(dvcman->channels);",
          "390:  ArrayList_Free(dvcman->plugin_names);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384: static void dvcman_clear(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "385: {",
          "386:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "388:  WINPR_UNUSED(drdynvc);",
          "390:  ArrayList_Clear(dvcman->plugins);",
          "391:  ArrayList_Clear(dvcman->channels);",
          "392:  ArrayList_Clear(dvcman->plugin_names);",
          "393:  ArrayList_Clear(dvcman->listeners);",
          "394: }",
          "400:  WINPR_UNUSED(drdynvc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:  BOOL bAccept;",
          "474:  DVCMAN_CHANNEL* channel;",
          "475:  DrdynvcClientContext* context;",
          "477:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "478:  UINT error;",
          "",
          "[Removed Lines]",
          "476:  IWTSVirtualChannelCallback* pCallback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:   if (strcmp(listener->channel_name, ChannelName) == 0)",
          "496:   {",
          "497:    channel->iface.Write = dvcman_write_channel;",
          "498:    channel->iface.Close = dvcman_close_channel_iface;",
          "499:    bAccept = TRUE;",
          "502:    if ((error = listener->listener_callback->OnNewChannelConnection(",
          "503:             listener->listener_callback, &channel->iface, NULL, &bAccept, &pCallback)) ==",
          "",
          "[Removed Lines]",
          "500:    pCallback = NULL;",
          "",
          "[Added Lines]",
          "510:    IWTSVirtualChannelCallback* pCallback = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1547:              WTSErrorToString(status), status);",
          "1548:  }",
          "1550:  drdynvc->OpenHandle = 0;",
          "1552:  if (drdynvc->data_in)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1563:  dvcman_clear(drdynvc, drdynvc->channel_mgr);",
          "1564:  MessageQueue_Clear(drdynvc->queue);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dfd915004b63e91c417f569af9f8516f7f942fc",
      "candidate_info": {
        "commit_hash": "6dfd915004b63e91c417f569af9f8516f7f942fc",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6dfd915004b63e91c417f569af9f8516f7f942fc",
        "files": [
          "libfreerdp/primitives/prim_colors.c"
        ],
        "message": "Fixed undefined behaviour\n\n(cherry picked from commit c15929d821ce99aa8c1069f790f4addbe9439593)",
        "before_after_code_files": [
          "libfreerdp/primitives/prim_colors.c||libfreerdp/primitives/prim_colors.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/primitives/prim_colors.c||libfreerdp/primitives/prim_colors.c": [
          "File: libfreerdp/primitives/prim_colors.c -> libfreerdp/primitives/prim_colors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   {",
          "51:    INT16 R, G, B;",
          "52:    const INT32 divisor = 16;",
          "54:    const INT32 Cb = (*pCb++);",
          "55:    const INT32 Cr = (*pCr++);",
          "60:    R = ((INT16)((CrR + Y) >> divisor) >> 5);",
          "61:    G = ((INT16)((Y - CbG - CrG) >> divisor) >> 5);",
          "62:    B = ((INT16)((CbB + Y) >> divisor) >> 5);",
          "",
          "[Removed Lines]",
          "53:    const INT32 Y = ((*pY++) + 4096) << divisor;",
          "56:    const INT32 CrR = Cr * (INT32)(1.402525f * (1 << divisor));",
          "57:    const INT32 CrG = Cr * (INT32)(0.714401f * (1 << divisor));",
          "58:    const INT32 CbG = Cb * (INT32)(0.343730f * (1 << divisor));",
          "59:    const INT32 CbB = Cb * (INT32)(1.769905f * (1 << divisor));",
          "",
          "[Added Lines]",
          "53:    const INT32 Y = (INT32)((UINT32)((*pY++) + 4096) << divisor);",
          "56:    const INT64 CrR = Cr * (INT64)(1.402525f * (1 << divisor)) * 1LL;",
          "57:    const INT64 CrG = Cr * (INT64)(0.714401f * (1 << divisor)) * 1LL;",
          "58:    const INT64 CbG = Cb * (INT64)(0.343730f * (1 << divisor)) * 1LL;",
          "59:    const INT64 CbB = Cb * (INT64)(1.769905f * (1 << divisor)) * 1LL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  {",
          "91:   for (x = 0; x < roi->width; x++)",
          "92:   {",
          "94:    const INT32 divisor = 16;",
          "96:    const INT32 Cb = (*pCb++);",
          "97:    const INT32 Cr = (*pCr++);",
          "105:    pRGB = (*writePixel)(pRGB, formatSize, DstFormat, CLIP(R), CLIP(G), CLIP(B), 0xFF);",
          "106:   }",
          "",
          "[Removed Lines]",
          "93:    INT16 R, G, B;",
          "95:    const INT32 Y = ((*pY++) + 4096) << divisor;",
          "98:    const INT32 CrR = Cr * (INT32)(1.402525f * (1 << divisor));",
          "99:    const INT32 CrG = Cr * (INT32)(0.714401f * (1 << divisor));",
          "100:    const INT32 CbG = Cb * (INT32)(0.343730f * (1 << divisor));",
          "101:    const INT32 CbB = Cb * (INT32)(1.769905f * (1 << divisor));",
          "102:    R = ((INT16)((CrR + Y) >> divisor) >> 5);",
          "103:    G = ((INT16)((Y - CbG - CrG) >> divisor) >> 5);",
          "104:    B = ((INT16)((CbB + Y) >> divisor) >> 5);",
          "",
          "[Added Lines]",
          "93:    INT64 R, G, B;",
          "95:    const INT32 Y = (INT32)((UINT32)((*pY++) + 4096) << divisor);",
          "98:    const INT64 CrR = Cr * (INT64)(1.402525f * (1 << divisor)) * 1LL;",
          "99:    const INT64 CrG = Cr * (INT64)(0.714401f * (1 << divisor)) * 1LL;",
          "100:    const INT64 CbG = Cb * (INT64)(0.343730f * (1 << divisor)) * 1LL;",
          "101:    const INT64 CbB = Cb * (INT64)(1.769905f * (1 << divisor)) * 1LL;",
          "102:    R = (INT64)((CrR + Y) >> (divisor + 5));",
          "103:    G = (INT64)((Y - CbG - CrG) >> (divisor + 5));",
          "104:    B = (INT64)((CbB + Y) >> (divisor + 5));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:    INT32 y = (INT32)(*yptr++);",
          "171:    INT32 cb = (INT32)(*cbptr++);",
          "172:    INT32 cr = (INT32)(*crptr++);",
          "",
          "[Removed Lines]",
          "173:    INT32 r, g, b;",
          "",
          "[Added Lines]",
          "173:    INT64 r, g, b;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "194:    y = (y + 4096) << 16;",
          "195:    r = y + cr * 91947;",
          "196:    g = y - cb * 22544 - cr * 46792;",
          "197:    b = y + cb * 115998;",
          "",
          "[Added Lines]",
          "194:    y = (INT32)((UINT32)(y + 4096) << 16);",
          "195:    r = y + cr * 91947LL;",
          "196:    g = y - cb * 22544LL - cr * 46792LL;",
          "197:    b = y + cb * 115998LL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}