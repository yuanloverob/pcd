{
  "cve_id": "CVE-2016-2538",
  "cve_desc": "Multiple integer overflows in the USB Net device emulator (hw/usb/dev-network.c) in QEMU before 2.5.1 allow local guest OS administrators to cause a denial of service (QEMU process crash) or obtain sensitive host memory information via a remote NDIS control message packet that is mishandled in the (1) rndis_query_response, (2) rndis_set_response, or (3) usb_net_handle_dataout function.",
  "repo": "qemu/qemu",
  "patch_hash": "fe3c546c5ff2a6210f9a4d8561cc64051ca8603e",
  "patch_info": {
    "commit_hash": "fe3c546c5ff2a6210f9a4d8561cc64051ca8603e",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/fe3c546c5ff2a6210f9a4d8561cc64051ca8603e",
    "files": [
      "hw/usb/dev-network.c"
    ],
    "message": "usb: check RNDIS buffer offsets & length\n\nWhen processing remote NDIS control message packets,\nthe USB Net device emulator uses a fixed length(4096) data buffer.\nThe incoming informationBufferOffset & Length combination could\noverflow and cross that range. Check control message buffer\noffsets and length to avoid it.\n\nReported-by: Qinghao Tang <luodalongde@gmail.com>\nSigned-off-by: Prasad J Pandit <pjp@fedoraproject.org>\nMessage-id: 1455648821-17340-3-git-send-email-ppandit@redhat.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
    "before_after_code_files": [
      "hw/usb/dev-network.c||hw/usb/dev-network.c"
    ]
  },
  "patch_diff": {
    "hw/usb/dev-network.c||hw/usb/dev-network.c": [
      "File: hw/usb/dev-network.c -> hw/usb/dev-network.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "917:     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;",
      "918:     buflen = le32_to_cpu(buf->InformationBufferLength);",
      "920:         return USB_RET_STALL;",
      "922:     infobuflen = ndis_query(s, le32_to_cpu(buf->OID),",
      "923:                             bufoffs + (uint8_t *) buf, buflen, infobuf,",
      "",
      "[Removed Lines]",
      "919:     if (bufoffs + buflen > length)",
      "",
      "[Added Lines]",
      "919:     if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {",
      "921:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "963:     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;",
      "964:     buflen = le32_to_cpu(buf->InformationBufferLength);",
      "966:         return USB_RET_STALL;",
      "968:     ret = ndis_set(s, le32_to_cpu(buf->OID),",
      "969:                     bufoffs + (uint8_t *) buf, buflen);",
      "",
      "[Removed Lines]",
      "965:     if (bufoffs + buflen > length)",
      "",
      "[Added Lines]",
      "966:     if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {",
      "968:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1213:     if (le32_to_cpu(msg->MessageType) == RNDIS_PACKET_MSG) {",
      "1214:         uint32_t offs = 8 + le32_to_cpu(msg->DataOffset);",
      "1215:         uint32_t size = le32_to_cpu(msg->DataLength);",
      "1217:             qemu_send_packet(qemu_get_queue(s->nic), s->out_buf + offs, size);",
      "1218:     }",
      "1219:     s->out_ptr -= len;",
      "1220:     memmove(s->out_buf, &s->out_buf[len], s->out_ptr);",
      "",
      "[Removed Lines]",
      "1216:         if (offs + size <= len)",
      "",
      "[Added Lines]",
      "1218:         if (offs < len && size < len && offs + size <= len) {",
      "1220:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3a2cdfcb5e282139217924044ec5af00c7f8eed",
      "candidate_info": {
        "commit_hash": "e3a2cdfcb5e282139217924044ec5af00c7f8eed",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/e3a2cdfcb5e282139217924044ec5af00c7f8eed",
        "files": [
          "hw/usb/dev-network.c"
        ],
        "message": "usb: check RNDIS buffer offsets & length\n\nWhen processing remote NDIS control message packets,\nthe USB Net device emulator uses a fixed length(4096) data buffer.\nThe incoming informationBufferOffset & Length combination could\noverflow and cross that range. Check control message buffer\noffsets and length to avoid it.\n\nReported-by: Qinghao Tang <luodalongde@gmail.com>\nSigned-off-by: Prasad J Pandit <pjp@fedoraproject.org>\nMessage-id: 1455648821-17340-3-git-send-email-ppandit@redhat.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\n(cherry picked from commit fe3c546c5ff2a6210f9a4d8561cc64051ca8603e)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/usb/dev-network.c||hw/usb/dev-network.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/usb/dev-network.c||hw/usb/dev-network.c"
          ],
          "candidate": [
            "hw/usb/dev-network.c||hw/usb/dev-network.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/usb/dev-network.c||hw/usb/dev-network.c": [
          "File: hw/usb/dev-network.c -> hw/usb/dev-network.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "915:     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;",
          "916:     buflen = le32_to_cpu(buf->InformationBufferLength);",
          "918:         return USB_RET_STALL;",
          "920:     infobuflen = ndis_query(s, le32_to_cpu(buf->OID),",
          "921:                             bufoffs + (uint8_t *) buf, buflen, infobuf,",
          "",
          "[Removed Lines]",
          "917:     if (bufoffs + buflen > length)",
          "",
          "[Added Lines]",
          "917:     if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {",
          "919:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "961:     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;",
          "962:     buflen = le32_to_cpu(buf->InformationBufferLength);",
          "964:         return USB_RET_STALL;",
          "966:     ret = ndis_set(s, le32_to_cpu(buf->OID),",
          "967:                     bufoffs + (uint8_t *) buf, buflen);",
          "",
          "[Removed Lines]",
          "963:     if (bufoffs + buflen > length)",
          "",
          "[Added Lines]",
          "964:     if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {",
          "966:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1211:     if (le32_to_cpu(msg->MessageType) == RNDIS_PACKET_MSG) {",
          "1212:         uint32_t offs = 8 + le32_to_cpu(msg->DataOffset);",
          "1213:         uint32_t size = le32_to_cpu(msg->DataLength);",
          "1215:             qemu_send_packet(qemu_get_queue(s->nic), s->out_buf + offs, size);",
          "1216:     }",
          "1217:     s->out_ptr -= len;",
          "1218:     memmove(s->out_buf, &s->out_buf[len], s->out_ptr);",
          "",
          "[Removed Lines]",
          "1214:         if (offs + size <= len)",
          "",
          "[Added Lines]",
          "1216:         if (offs < len && size < len && offs + size <= len) {",
          "1218:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}