{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
      "candidate_info": {
        "commit_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/08652b5ea00316539c913fc936e2966c8d58d283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/pragma.c",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Provide the SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA compile-time option to omit the case_sensitive_like pragma.  This change, in combination with documentation changes, is the current solution to ticket [a340eef47b0cad5].\n\nFossilOrigin-Name: eabe7f2d4ff0e0dd868dcab7ec1d4a9168a25f80d3a52f0eeea2f90bd33782f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658b84d7f4a0886591c5aab30ed9e31c4a0f56db303eb863f24833ca37085d14",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1824:   }",
          "1825:   sqlite3CreateFunc(db, \"like\", 2, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1826:   sqlite3CreateFunc(db, \"like\", 3, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1830:   setLikeOptFlag(db, \"like\",",
          "1831:       caseSensitive ? (SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE) : SQLITE_FUNC_LIKE);",
          "1832: }",
          "",
          "[Removed Lines]",
          "1827:   sqlite3CreateFunc(db, \"glob\", 2, SQLITE_UTF8,",
          "1828:       (struct compareInfo*)&globInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1829:   setLikeOptFlag(db, \"glob\", SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1424: #ifndef SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: #endif",
          "181:  {/* zName:     */ \"case_sensitive_like\",",
          "186:  {/* zName:     */ \"cell_size_check\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #if !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "187: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   NAME: case_sensitive_like",
          "303:   FLAG: NoColumns",
          "305:   NAME: integrity_check",
          "306:   FLAG: NeedSchema Result0 Result1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:   IF:   !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
      "candidate_info": {
        "commit_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/filter1.test"
        ],
        "message": "Fix a problem with queries containing a min() or max() function for which the FILTER clause excludes all rows.\n\nFossilOrigin-Name: b1d7e104e034655fe41bc55c562d91e8074a2973d538b8b29301458db45afc57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 601ce9532d34f97a5faa170b6d8a272e5c54f2eabff84660201a1840e0fd9929",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5343:   int i;",
          "5344:   int regHit = 0;",
          "5345:   int addrHitTest = 0;",
          "5346:   struct AggInfo_func *pF;",
          "5347:   struct AggInfo_col *pC;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5346:   int bFilterMinMax = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5356:     assert( !IsWindowFunc(pF->pExpr) );",
          "5357:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5358:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "5359:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5360:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5361:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5360:       if( pAggInfo->nAccumulator",
          "5361:        && (pF->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL)",
          "5362:       ){",
          "5363:         bFilterMinMax = 1;",
          "5364:         if( regHit==0 ) regHit = ++pParse->nMem;",
          "5369:         sqlite3VdbeAddOp2(v, OP_Copy, regAcc, regHit);",
          "5370:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5406:   for(i=0, pC=pAggInfo->aCol; i<pAggInfo->nAccumulator; i++, pC++){",
          "5407:     sqlite3ExprCode(pParse, pC->pExpr, pC->iMem);",
          "5408:   }",
          "5409:   pAggInfo->directMode = 0;",
          "5410:   if( addrHitTest ){",
          "5411:     sqlite3VdbeJumpHere(v, addrHitTest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5421:   if( bFilterMinMax ){",
          "5425:     sqlite3VdbeAddOp2(v, OP_Integer, 1, regHit);",
          "5426:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6581:       {",
          "6589:         if( sAggInfo.nAccumulator ){",
          "6590:           for(i=0; i<sAggInfo.nFunc; i++){",
          "6591:             if( sAggInfo.aFunc[i].pFunc->funcFlags&SQLITE_FUNC_NEEDCOLL ) break;",
          "6592:           }",
          "6593:           if( i==sAggInfo.nFunc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6614:             if( ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_WinFunc) ) continue;",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "102: } {1 {misuse of aggregate function count()}}",
          "104: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #-------------------------------------------------------------------------",
          "105: reset_db",
          "106: do_execsql_test 3.0 {",
          "107:   CREATE TABLE t1(a,b);",
          "108:   INSERT INTO t1 VALUES(1, 1);",
          "109: }",
          "110: do_execsql_test 3.1 {",
          "111:   SELECT b, max(a) FILTER (WHERE b='x') FROM t1;",
          "112: } {1 {}}",
          "114: do_execsql_test 3.2 {",
          "115:   CREATE TABLE t2(a, b, c);",
          "116:   INSERT INTO t2 VALUES(1, 2, 3);",
          "117:   INSERT INTO t2 VALUES(1, 3, 4);",
          "118:   INSERT INTO t2 VALUES(2, 5, 6);",
          "119:   INSERT INTO t2 VALUES(2, 7, 8);",
          "120: }",
          "121: do_execsql_test 3.3 {",
          "122:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "123: } {1 3 {} 2 6 {}}",
          "125: do_execsql_test 3.4 {",
          "126:   DELETE FROM t2;",
          "127:   INSERT INTO t2 VALUES(1, 5, 'x');",
          "128:   INSERT INTO t2 VALUES(1, 2, 3);",
          "129:   INSERT INTO t2 VALUES(1, 4, 'x');",
          "130:   INSERT INTO t2 VALUES(2, 5, 6);",
          "131:   INSERT INTO t2 VALUES(2, 7, 8);",
          "132: }",
          "133: do_execsql_test 3.5 {",
          "134:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "135: } {1 x 5 2 6 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
      "candidate_info": {
        "commit_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "files": [
          "ext/lsm1/lsm_vtab.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to the query planner for the LSM1 extension.\n\nFossilOrigin-Name: 7496e872a1a50ac65ad04709365a43038fb015ac9c690196de3cb02ce54c2e57",
        "before_after_code_files": [
          "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c": [
          "File: ext/lsm1/lsm_vtab.c -> ext/lsm1/lsm_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:   const struct sqlite3_index_constraint *pConstraint;",
          "844:   pConstraint = pIdxInfo->aConstraint;",
          "846:     if( pConstraint->usable==0 ) continue;",
          "847:     if( pConstraint->iColumn!=0 ) continue;",
          "848:     switch( pConstraint->op ){",
          "",
          "[Removed Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint && idxNum<16; i++, pConstraint++){",
          "",
          "[Added Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3374648545262810849a3b17fdb4435bbb255a07",
      "candidate_info": {
        "commit_hash": "3374648545262810849a3b17fdb4435bbb255a07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3374648545262810849a3b17fdb4435bbb255a07",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "tool/dbtotxt.c",
          "tool/dbtotxt.md"
        ],
        "message": "Add the \"dbtotxt\" utility program and the ability to read \"dbtotxt\" output as a deserialized input database in the CLI, using the --hexdb option to the \".open\" command.\n\nFossilOrigin-Name: e3bf1d3ea5f748c5142c2403813fdace5aedc1fc68f0dcd5eae40a2fe763fedb",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292:  $(LTLINK) -DDBDUMP_STANDALONE -o $@ \\",
          "1293:            $(TOP)/ext/misc/dbdump.c sqlite3.lo $(TLIBS)",
          "1295: showdb$(TEXE): $(TOP)/tool/showdb.c sqlite3.lo",
          "1296:  $(LTLINK) -o $@ $(TOP)/tool/showdb.c sqlite3.lo $(TLIBS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295: dbtotxt$(TEXE): $(TOP)/tool/dbtotxt.c",
          "1296:  $(LTLINK)-o $@ $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2425: testloadext.dll: testloadext.lo",
          "2426:  $(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /OUT:$@ testloadext.lo",
          "2428: showdb.exe: $(TOP)\\tool\\showdb.c $(SQLITE3C) $(SQLITE3H)",
          "2429:  $(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "2430:   $(TOP)\\tool\\showdb.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2428: dbtotxt.exe: $(TOP)\\tool\\dbtotxt.c",
          "2429:  $(LTLINK) $(NO_WARN) $(TOP)\\tool\\dbtotxt.c /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "976: extensiontest: testfixture$(EXE) $(TEST_EXTENSION)",
          "977:  ./testfixture$(EXE) $(TOP)/test/loadext.test",
          "979: showdb$(EXE): $(TOP)/tool/showdb.c sqlite3.o",
          "980:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION -o showdb$(EXE) \\",
          "981:   $(TOP)/tool/showdb.c sqlite3.o $(THREADLIB)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979: dbtotxt$(EXE): $(TOP)/tool/dbtotxt.c",
          "980:  $(TCC) -o dbtotxt$(EXE) $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eac9c0c49650b008951318a2225b932709a0a8dffbb01ed57684c40357b2e25c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3444:   \"        --append        Use appendvfs to append database to the end of FILE\",",
          "3445: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3446:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3447: #endif",
          "3448:   \"        --new           Initialize FILE to an empty database\",",
          "3449:   \"        --readonly      Open FILE readonly\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3448:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3723:   return rc;",
          "3724: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3728: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3734: static unsigned char *readHexDb(ShellState *p, int *pnData){",
          "3735:   unsigned char *a = 0;",
          "3736:   int nLine = 1;",
          "3737:   int n = 0;",
          "3738:   int pgsz = 0;",
          "3739:   int iOffset = 0;",
          "3740:   int j, k;",
          "3741:   int rc;",
          "3742:   FILE *in;",
          "3743:   unsigned char x[16];",
          "3744:   char zLine[100];",
          "3745:   if( p->zDbFilename ){",
          "3746:     in = fopen(p->zDbFilename, \"r\");",
          "3747:     if( in==0 ){",
          "3748:       utf8_printf(stderr, \"cannot open \\\"%s\\\" for reading\\n\", p->zDbFilename);",
          "3749:       return 0;",
          "3750:     }",
          "3751:   }else{",
          "3752:     in = stdin;",
          "3753:   }",
          "3755:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3756:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3757:   if( rc!=2 ) goto readHexDb_error;",
          "3758:   if( n<=0 ) goto readHexDb_error;",
          "3759:   a = sqlite3_malloc( n );",
          "3760:   if( a==0 ){",
          "3761:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "3762:     goto readHexDb_error;",
          "3763:   }",
          "3764:   memset(a, 0, n);",
          "3765:   if( pgsz<512 || pgsz>65536 || (pgsz & (pgsz-1))!=0 ){",
          "3766:     utf8_printf(stderr, \"invalid pagesize\\n\");",
          "3767:     goto readHexDb_error;",
          "3768:   }",
          "3769:   for(nLine=2; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "3770:     rc = sscanf(zLine, \"| page %d offset %d\", &j, &k);",
          "3771:     if( rc==2 ){",
          "3772:       iOffset = k;",
          "3773:       continue;",
          "3774:     }",
          "3775:     if( strncmp(zLine, \"| end \", 6)==0 ){",
          "3776:       break;",
          "3777:     }",
          "3778:     rc = sscanf(zLine,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "3779:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "3780:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "3781:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "3782:     if( rc==17 ){",
          "3783:       k = iOffset+j;",
          "3784:       if( k+16>n ){",
          "3785:         utf8_printf(stderr, \"continue exceeds file size\\n\");",
          "3786:         goto readHexDb_error;",
          "3787:       }",
          "3788:       memcpy(a+k, x, 16);",
          "3789:     }",
          "3790:   }",
          "3792:   if( in!=stdin ) fclose(in);",
          "3793:   return a;",
          "3795: readHexDb_error:",
          "3796:   if( in!=stdin ){",
          "3797:     fclose(in);",
          "3798:   }else{",
          "3799:     while( fgets(zLine, sizeof(zLine), in)!=0 ){",
          "3800:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3801:     }",
          "3802:   }",
          "3803:   sqlite3_free(a);",
          "3804:   utf8_printf(stderr,\"Error on line %d of --hexdb input\\n\", nLine);",
          "3805:   return 0;",
          "3806: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3756:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "3757:         break;",
          "3758:       }",
          "3759:       case SHELL_OPEN_DESERIALIZE: {",
          "3760:         sqlite3_open(0, &p->db);",
          "3761:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3842:       case SHELL_OPEN_HEXDB:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3810:       sqlite3_free(zSql);",
          "3811:     }",
          "3812: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3814:       int nData = 0;",
          "3816:       int rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "3817:                    SQLITE_DESERIALIZE_RESIZEABLE |",
          "3818:                    SQLITE_DESERIALIZE_FREEONCLOSE);",
          "",
          "[Removed Lines]",
          "3813:     else if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3815:       unsigned char *aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "",
          "[Added Lines]",
          "3897:     else",
          "3898:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){",
          "3900:       unsigned char *aData;",
          "3901:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3902:         aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "3903:       }else{",
          "3904:         aData = readHexDb(p, &nData);",
          "3905:         if( aData==0 ){",
          "3906:           utf8_printf(stderr, \"Error in hexdb input\\n\");",
          "3907:           return;",
          "3908:         }",
          "3909:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6749: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "6750:       }else if( optionMatch(z, \"deserialize\") ){",
          "6751:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "6753:       }else if( z[0]=='-' ){",
          "6754:         utf8_printf(stderr, \"unknown option: %s\\n\", z);",
          "6755:         rc = 1;",
          "",
          "[Removed Lines]",
          "6752: #endif",
          "",
          "[Added Lines]",
          "6846:       }else if( optionMatch(z, \"hexdb\") ){",
          "6847:         p->openMode = SHELL_OPEN_HEXDB;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6758:     }",
          "6760:     zNewFilename = nArg>iName ? sqlite3_mprintf(\"%s\", azArg[iName]) : 0;",
          "6762:       if( newFlag ) shellDeleteFile(zNewFilename);",
          "6763:       p->zDbFilename = zNewFilename;",
          "6764:       open_db(p, OPEN_DB_KEEPALIVE);",
          "",
          "[Removed Lines]",
          "6761:     if( zNewFilename ){",
          "",
          "[Added Lines]",
          "6857:     if( zNewFilename || p->openMode==SHELL_OPEN_HEXDB ){",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <stdio.h>",
          "28: #include <string.h>",
          "29: #include <stdlib.h>",
          "32: static int allZero(unsigned char *aLine){",
          "33:   int i;",
          "34:   for(i=0; i<16 && aLine[i]==0; i++){}",
          "35:   return i==16;",
          "36: }",
          "38: int main(int argc, char **argv){",
          "50:   for(i=1; i<argc; i++){",
          "51:     if( argv[i][0]=='-' ){",
          "52:       const char *z = argv[i];",
          "53:       z++;",
          "54:       if( z[0]=='-' ) z++;",
          "55:       if( strcmp(z,\"pagesize\")==0 ){",
          "56:         i++;",
          "57:         pgsz = atoi(argv[i]);",
          "58:         if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "59:           fprintf(stderr, \"Page size must be a power of two between\"",
          "60:                           \" 512 and 65536.\\n\");",
          "61:           nErr++;",
          "62:         }",
          "63:         continue;",
          "64:       }",
          "65:       fprintf(stderr, \"Unknown option: %s\\n\", argv[i]);",
          "66:       nErr++;",
          "67:     }else if( zInputFile ){",
          "68:       fprintf(stderr, \"Already using a different input file: [%s]\\n\", argv[i]);",
          "69:       nErr++;",
          "70:     }else{",
          "71:       zInputFile = argv[i];",
          "72:     }",
          "73:   }",
          "74:   if( zInputFile==0 ){",
          "75:     fprintf(stderr, \"No input file specified.\\n\");",
          "76:     nErr++;",
          "77:   }",
          "78:   if( nErr ){",
          "79:     fprintf(stderr, \"Usage: %s [--pagesize N] FILENAME\\n\", argv[0]);",
          "80:     exit(1);",
          "81:   }",
          "82:   in = fopen(zInputFile, \"rb\");",
          "83:   if( in==0 ){",
          "84:     fprintf(stderr, \"Cannot open input file [%s]\\n\", zInputFile);",
          "85:     exit(1);",
          "86:   }",
          "87:   fseek(in, 0, SEEK_END);",
          "88:   szFile = ftell(in);",
          "89:   rewind(in);",
          "90:   if( szFile<512 ){",
          "91:     fprintf(stderr, \"File too short. Minimum size is 512 bytes.\\n\");",
          "92:     exit(1);",
          "93:   }",
          "94:   if( fread(aHdr, 100, 1, in)!=1 ){",
          "95:     fprintf(stderr, \"Cannot read file header\\n\");",
          "96:     exit(1);",
          "97:   }",
          "98:   rewind(in);",
          "99:   if( pgsz==0 ){",
          "100:     pgsz = (aHdr[16]<<8) | aHdr[17];",
          "101:     if( pgsz==1 ) pgsz = 65536;",
          "102:     if( pgsz<512 || (pgsz&(pgsz-1))!=0 ){",
          "103:       fprintf(stderr, \"Invalid page size in header: %d\\n\", pgsz);",
          "104:       exit(1);",
          "105:     }",
          "106:   }",
          "107:   zBaseName = zInputFile;",
          "108:   for(i=0; zInputFile[i]; i++){",
          "109:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "110:   }",
          "111:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "112:   for(i=0; i<szFile; i+=16){",
          "113:     int got = (int)fread(aLine, 1, 16, in);",
          "114:     if( got!=16 ){",
          "115:       static int once = 1;",
          "116:       if( once ){",
          "117:         fprintf(stderr, \"Could not read input file starting at byte %d\\n\",",
          "118:                          i+got);",
          "119:       }",
          "120:       memset(aLine+got, 0, 16-got);",
          "121:     }",
          "122:     if( allZero(aLine) ) continue;",
          "123:     iPage = i/pgsz + 1;",
          "124:     if( lastPage!=iPage ){",
          "125:       printf(\"| page %d offset %d\\n\", iPage, (iPage-1)*pgsz);",
          "126:       lastPage = iPage;",
          "127:     }",
          "128:     printf(\"|  %5d:\", i-(iPage-1)*pgsz);",
          "129:     for(j=0; j<16; j++) printf(\" %02x\", aLine[j]);",
          "130:     printf(\"   \");",
          "131:     for(j=0; j<16; j++){",
          "132:       char c = aLine[j];",
          "133:       fputc(c>=0x20 && c<=0x7e ? c : '.', stdout);",
          "134:     }",
          "135:     fputc('\\n', stdout);",
          "136:   }",
          "137:   fclose(in);",
          "138:   printf(\"| end %s\\n\", zBaseName);",
          "139:   return 0;",
          "140: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
      "candidate_info": {
        "commit_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Avoid allocating excessive registers for the PARTITION BY expressions when processing window functions.\n\nFossilOrigin-Name: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ad553192051eaa0c6d929baacde2de07b93c6d09de861028bbce55a2c9bfdd3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:   int regResult;",
          "",
          "[Removed Lines]",
          "3574:   int regPart;            /* First in a set of registers holding PARTITION BY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118: void sqlite3WindowCodeInit(Parse *pParse, Window *pMWin){",
          "1119:   Window *pWin;",
          "1120:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1124:     pMWin->regPart = pParse->nMem+1;",
          "1127:   }",
          "1129:   pMWin->regFirst = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1121:   int nPart = (pMWin->pPartition ? pMWin->pPartition->nExpr : 0);",
          "1122:   nPart += (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1123:   if( nPart ){",
          "1125:     pParse->nMem += nPart;",
          "1126:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nPart-1);",
          "",
          "[Added Lines]",
          "1124:   if( pMWin->pPartition ){",
          "1125:     int nExpr = pMWin->pPartition->nExpr;",
          "1127:     pParse->nMem += nExpr;",
          "1128:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nExpr-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2302:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2303:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2307:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2308:   if( regPeer ){",
          "2309:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2306:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2354:       }",
          "2355:     }",
          "2356:   }",
          "2360:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2357:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2366:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2367:   }",
          "2370:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2371:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2372:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2369:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2417:   if( pMWin->pPartition ){",
          "2418:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2419:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2416:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}