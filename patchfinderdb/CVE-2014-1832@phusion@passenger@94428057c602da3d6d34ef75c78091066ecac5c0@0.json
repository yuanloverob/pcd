{
  "cve_id": "CVE-2014-1832",
  "cve_desc": "Phusion Passenger 4.0.37 allows local users to write to certain files and directories via a symlink attack on (1) control_process.pid or a (2) generation-* file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-1831.",
  "repo": "phusion/passenger",
  "patch_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
  "patch_info": {
    "commit_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
    "repo": "phusion/passenger",
    "commit_url": "https://github.com/phusion/passenger/commit/94428057c602da3d6d34ef75c78091066ecac5c0",
    "files": [
      "NEWS",
      "ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp",
      "ext/common/Utils.h"
    ],
    "message": "Fix a symlink-related security vulnerability.\n\nThe fix in commit 34b10878 and contained a small attack time window in\nbetween two filesystem operations. This has been fixed.",
    "before_after_code_files": [
      "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
      "ext/common/Utils.cpp||ext/common/Utils.cpp",
      "ext/common/Utils.h||ext/common/Utils.h"
    ]
  },
  "patch_diff": {
    "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
      "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "194:  void initialize(const string &path, bool owner) {",
      "195:   TRACE_POINT();",
      "196:   this->path  = path;",
      "197:   this->owner = owner;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "196:   struct stat buf;",
      "197:   int ret;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:   if (owner) {",
      "218:     createDirectory(path);",
      "225:    }",
      "227:    throw RuntimeException(\"Server instance directory '\" + path +",
      "228:     \"' does not exist\");",
      "229:   }",
      "",
      "[Removed Lines]",
      "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
      "217:    case FT_NONEXISTANT:",
      "219:     break;",
      "220:    case FT_DIRECTORY:",
      "221:     verifyDirectoryPermissions(path);",
      "222:     break;",
      "223:    default:",
      "224:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
      "226:   } else if (getFileType(path) != FT_DIRECTORY) {",
      "",
      "[Added Lines]",
      "219:   do {",
      "220:    ret = lstat(path.c_str(), &buf);",
      "221:   } while (ret == -1 && errno == EAGAIN);",
      "223:    if (ret == 0) {",
      "224:     if (S_ISDIR(buf.st_mode)) {",
      "225:      verifyDirectoryPermissions(path, buf);",
      "226:     } else {",
      "227:      throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
      "228:     }",
      "229:    } else if (errno == ENOENT) {",
      "231:    } else {",
      "232:     int e = errno;",
      "233:     throw FileSystemException(\"Cannot lstat '\" + path + \"'\",",
      "234:      e, path);",
      "236:   } else if (!S_ISDIR(buf.st_mode)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:   TRACE_POINT();",
      "270:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
      "271:     path + \", but it has wrong permissions\");",
      "272:   } else if (buf.st_uid != geteuid() || buf.st_gid != getegid()) {",
      "",
      "[Removed Lines]",
      "262:  void verifyDirectoryPermissions(const string &path) {",
      "264:   struct stat buf;",
      "266:   if (stat(path.c_str(), &buf) == -1) {",
      "267:    int e = errno;",
      "268:    throw FileSystemException(\"Cannot stat() \" + path, e, path);",
      "269:   } else if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
      "",
      "[Added Lines]",
      "272:  void verifyDirectoryPermissions(const string &path, struct stat &buf) {",
      "275:   if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
      "",
      "---------------"
    ],
    "ext/common/Utils.cpp||ext/common/Utils.cpp": [
      "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:  }",
      "144: }",
      "175: void",
      "176: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
      "177:  gid_t group, bool overwrite)",
      "",
      "[Removed Lines]",
      "146: FileType",
      "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
      "148:  struct stat buf;",
      "149:  int ret;",
      "151:  ret = lstat(filename.c_str(), &buf);",
      "152:  if (ret == 0) {",
      "153:   if (S_ISREG(buf.st_mode)) {",
      "154:    return FT_REGULAR;",
      "155:   } else if (S_ISDIR(buf.st_mode)) {",
      "156:    return FT_DIRECTORY;",
      "157:   } else if (S_ISLNK(buf.st_mode)) {",
      "158:    return FT_SYMLINK;",
      "159:   } else {",
      "160:    return FT_OTHER;",
      "161:   }",
      "162:  } else {",
      "163:   if (errno == ENOENT) {",
      "164:    return FT_NONEXISTANT;",
      "165:   } else {",
      "166:    int e = errno;",
      "167:    string message(\"Cannot lstat '\");",
      "168:    message.append(filename);",
      "169:    message.append(\"'\");",
      "170:    throw FileSystemException(message, e, filename);",
      "171:   }",
      "172:  }",
      "173: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ext/common/Utils.h||ext/common/Utils.h": [
      "File: ext/common/Utils.h -> ext/common/Utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:  FT_REGULAR,",
      "67:  FT_DIRECTORY,",
      "71:  FT_OTHER",
      "72: } FileType;",
      "",
      "[Removed Lines]",
      "69:  FT_SYMLINK,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "124: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
      "125:                      unsigned int throttleRate = 0);",
      "",
      "[Removed Lines]",
      "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
      "candidate_info": {
        "commit_hash": "5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
        "files": [
          "NEWS",
          "ext/common/ServerInstanceDir.h",
          "test/cxx/ServerInstanceDirTest.cpp"
        ],
        "message": "If the server instance directory already exists, it is now removed first in order get correct directory permissions. If the directory still exists after removal, Phusion Passenger aborts to avoid writing to a directory with unexpected permissions. Fixes issue #910.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "test/cxx/ServerInstanceDirTest.cpp||test/cxx/ServerInstanceDirTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <oxt/backtrace.hpp>",
          "32: #include <sys/types.h>",
          "33: #include <dirent.h>",
          "34: #include <unistd.h>",
          "35: #include <pwd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  }",
          "220:  bool isDirectory(const string &dir, struct dirent *entry) const {",
          "",
          "[Removed Lines]",
          "217:   makeDirTree(path, \"u=rwx,g=rx,o=rx\");",
          "",
          "[Added Lines]",
          "218:   if (owner) {",
          "219:    switch (getFileType(path)) {",
          "220:    case FT_NONEXISTANT:",
          "221:     createDirectory(path);",
          "222:     break;",
          "223:    case FT_DIRECTORY:",
          "224:     removeDirTree(path);",
          "225:     createDirectory(path);",
          "226:     break;",
          "227:    default:",
          "228:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "229:    }",
          "230:   } else if (getFileType(path) != FT_DIRECTORY) {",
          "231:    throw RuntimeException(\"Server instance directory '\" + path +",
          "232:     \"' does not exist\");",
          "233:   }",
          "234:  }",
          "236:  void createDirectory(const string &path) const {",
          "240:   if (mkdir(path.c_str(), parseModeString(\"u=rwx,g=rx,o=rx\")) == -1) {",
          "241:    int e = errno;",
          "242:    throw FileSystemException(\"Cannot create server instance directory '\" +",
          "243:     path + \"'\", e, path);",
          "244:   }",
          "",
          "---------------"
        ],
        "test/cxx/ServerInstanceDirTest.cpp||test/cxx/ServerInstanceDirTest.cpp": [
          "File: test/cxx/ServerInstanceDirTest.cpp -> test/cxx/ServerInstanceDirTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  }",
          "60:  TEST_METHOD(5) {",
          "63:   string path, path2;",
          "64:   {",
          "65:    ServerInstanceDir dir(parentDir + \"/passenger-test.1234\", false);",
          "66:    ServerInstanceDir dir2(parentDir + \"/passenger-test.5678\", false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   makeDirTree(parentDir + \"/passenger-test.1234\");",
          "65:   makeDirTree(parentDir + \"/passenger-test.5678\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3e7df9c599f60de01fd745d801e916fb89a6559",
      "candidate_info": {
        "commit_hash": "f3e7df9c599f60de01fd745d801e916fb89a6559",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/f3e7df9c599f60de01fd745d801e916fb89a6559",
        "files": [
          "ext/common/Utils.cpp"
        ],
        "message": "Fix a small bug.",
        "before_after_code_files": [
          "ext/common/Utils.cpp||ext/common/Utils.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ],
          "candidate": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:    ret = fchmod(fd, permissions);",
          "152:   } while (ret == -1 && errno == EINTR);",
          "153:   if (ret == -1) {",
          "154:    throw FileSystemException(\"Cannot set permissions on \" + filename,",
          "155:     e, filename);",
          "156:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:    e = errno;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5efaf1861702340c23afd154a4c8188be3302af6",
      "candidate_info": {
        "commit_hash": "5efaf1861702340c23afd154a4c8188be3302af6",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/5efaf1861702340c23afd154a4c8188be3302af6",
        "files": [
          "ext/common/Utils.cpp"
        ],
        "message": "createFile must fchmod() the file to fight umask problems.",
        "before_after_code_files": [
          "ext/common/Utils.cpp||ext/common/Utils.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ],
          "candidate": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:  if (fd != -1) {",
          "146:   FileGuard guard(filename);",
          "148:   if (owner != (uid_t) -1 && group != (gid_t) -1) {",
          "149:    do {",
          "150:     ret = fchown(fd, owner, group);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   do {",
          "151:    ret = fchmod(fd, permissions);",
          "152:   } while (ret == -1 && errno == EINTR);",
          "153:   if (ret == -1) {",
          "154:    throw FileSystemException(\"Cannot set permissions on \" + filename,",
          "155:     e, filename);",
          "156:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "355297c93db5a1dcc0d1a4b8113d58910b6fd7ba",
      "candidate_info": {
        "commit_hash": "355297c93db5a1dcc0d1a4b8113d58910b6fd7ba",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/355297c93db5a1dcc0d1a4b8113d58910b6fd7ba",
        "files": [
          "Rakefile",
          "bin/passenger-status",
          "ext/common/AccountsDatabase.cpp",
          "ext/common/AccountsDatabase.h",
          "ext/common/MessageServer.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h",
          "ext/nginx/HelperServer.cpp",
          "lib/phusion_passenger/admin_tools/server_instance.rb",
          "test/ruby/admin_tools_spec.rb"
        ],
        "message": "Yay, passenger-status account works.",
        "before_after_code_files": [
          "ext/common/AccountsDatabase.cpp||ext/common/AccountsDatabase.cpp",
          "ext/common/AccountsDatabase.h||ext/common/AccountsDatabase.h",
          "ext/common/MessageServer.h||ext/common/MessageServer.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h",
          "ext/nginx/HelperServer.cpp||ext/nginx/HelperServer.cpp",
          "lib/phusion_passenger/admin_tools/server_instance.rb||lib/phusion_passenger/admin_tools/server_instance.rb",
          "test/ruby/admin_tools_spec.rb||test/ruby/admin_tools_spec.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/AccountsDatabase.cpp||ext/common/AccountsDatabase.cpp": [
          "File: ext/common/AccountsDatabase.cpp -> ext/common/AccountsDatabase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <sys/types.h>",
          "27: #include <sys/stat.h>",
          "28: #include <unistd.h>",
          "29: #include \"AccountsDatabase.h\"",
          "30: #include \"MessageServer.h\"",
          "31: #include \"Utils.h\"",
          "33: namespace Passenger {",
          "35: AccountsDatabasePtr",
          "36: AccountsDatabase::createDefault() {",
          "37:  AccountsDatabasePtr database(new AccountsDatabase());",
          "38:  string infoDir;",
          "39:  struct stat buf;",
          "40:  int ret;",
          "42:  infoDir = getPassengerTempDir() + \"/info\";",
          "43:  do {",
          "44:   ret = stat(infoDir.c_str(), &buf);",
          "45:  } while (ret == -1 && errno == EINTR);",
          "46:  if (ret == -1) {",
          "47:   int e = errno;",
          "48:   throw FileSystemException(\"Cannot stat \" + infoDir, e, infoDir);",
          "49:  }",
          "51:  char passengerStatusPasswordBuf[MessageServer::MAX_PASSWORD_SIZE];",
          "52:  generateSecureToken(passengerStatusPasswordBuf, sizeof(passengerStatusPasswordBuf));",
          "53:  string passengerStatusPassword(passengerStatusPasswordBuf, sizeof(passengerStatusPasswordBuf));",
          "54:  database->add(\"_passenger-status\", passengerStatusPassword, false,",
          "55:   Account::INSPECT_BASIC_INFO | Account::INSPECT_BACKTRACES);",
          "56:  createFile(infoDir + \"/passenger-status-password.txt\",",
          "57:   passengerStatusPassword, S_IRUSR, buf.st_uid, buf.st_gid);",
          "59:  return database;",
          "60: }",
          "62: } // namespace Passenger",
          "",
          "---------------"
        ],
        "ext/common/AccountsDatabase.h||ext/common/AccountsDatabase.h": [
          "File: ext/common/AccountsDatabase.h -> ext/common/AccountsDatabase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: using namespace std;",
          "39: using namespace boost;",
          "41: class AccountsDatabase {",
          "42: private:",
          "43:  map<string, AccountPtr> accounts;",
          "45: public:",
          "46:  AccountPtr add(const string &username, const string &passwordOrHash, bool hashGiven, int rights = Account::ALL) {",
          "47:   AccountPtr account(new Account(username, passwordOrHash, hashGiven, rights));",
          "48:   accounts[username] = account;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: class AccountsDatabase;",
          "42: typedef shared_ptr<AccountsDatabase> AccountsDatabasePtr;",
          "50:  static AccountsDatabasePtr createDefault();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  }",
          "65: };",
          "69: } // namespace Passenger",
          "",
          "[Removed Lines]",
          "67: typedef shared_ptr<AccountsDatabase> AccountsDatabasePtr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/common/MessageServer.h||ext/common/MessageServer.h": [
          "File: ext/common/MessageServer.h -> ext/common/MessageServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: class MessageServer {",
          "157: public:",
          "158:  static const unsigned int CLIENT_THREAD_STACK_SIZE = 64 * 1024;",
          "161:  class ClientContext {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:  static const unsigned int MAX_PASSWORD_SIZE = 100;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:    }",
          "325:    try {",
          "327:      return AccountPtr();",
          "328:     }",
          "329:    } catch (const SecurityException &) {",
          "",
          "[Removed Lines]",
          "326:     if (!channel.readScalar(password, 100, &timeout)) {",
          "",
          "[Added Lines]",
          "327:     if (!channel.readScalar(password, MAX_PASSWORD_SIZE, &timeout)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:   this->socketFilename   = socketFilename;",
          "459:   this->accountsDatabase = accountsDatabase;",
          "460:   loginTimeout = 2000;",
          "",
          "[Removed Lines]",
          "457:  MessageServer(const string &socketFilename, AccountsDatabasePtr &accountsDatabase) {",
          "",
          "[Added Lines]",
          "458:  MessageServer(const string &socketFilename, AccountsDatabasePtr accountsDatabase) {",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <fcntl.h>",
          "34: #include <pwd.h>",
          "35: #include \"CachedFileStat.hpp\"",
          "36: #include \"Exceptions.h\"",
          "37: #include \"Utils.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"FileDescriptor.h\"",
          "37: #include \"MessageChannel.h\"",
          "38: #include \"MessageServer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: static string passengerTempDir;",
          "45: int",
          "46: atoi(const string &s) {",
          "47:  return ::atoi(s.c_str());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: namespace {",
          "54:  struct FileGuard {",
          "55:   string filename;",
          "56:   bool committed;",
          "58:   FileGuard(const string &filename) {",
          "59:    this->filename = filename;",
          "60:    committed = false;",
          "61:   }",
          "63:   ~FileGuard() {",
          "64:    if (!committed) {",
          "65:     int ret;",
          "66:     do {",
          "67:      ret = unlink(filename.c_str());",
          "68:     } while (ret == -1 && errno == EINTR);",
          "69:    }",
          "70:   }",
          "72:   void commit() {",
          "73:    committed = true;",
          "74:   }",
          "75:  };",
          "76: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:  }",
          "101: }",
          "103: string",
          "104: findSpawnServer(const char *passengerRoot) {",
          "105:  if (passengerRoot != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: void",
          "138: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner, gid_t group) {",
          "139:  FileDescriptor fd;",
          "140:  int ret, e;",
          "142:  do {",
          "143:   fd = open(filename.c_str(), O_WRONLY | O_CREAT | O_TRUNC, permissions);",
          "144:  } while (fd == -1 && errno == EINTR);",
          "145:  if (fd != -1) {",
          "146:   FileGuard guard(filename);",
          "148:   if (owner != (uid_t) -1 && group != (gid_t) -1) {",
          "149:    do {",
          "150:     ret = fchown(fd, owner, group);",
          "151:    } while (ret == -1 && errno == EINTR);",
          "152:    if (ret == -1) {",
          "153:     e = errno;",
          "154:     throw FileSystemException(\"Cannot set ownership for \" + filename,",
          "155:      e, filename);",
          "156:    }",
          "157:   }",
          "159:   try {",
          "160:    MessageChannel(fd).writeRaw(contents);",
          "161:    fd.close();",
          "162:   } catch (const SystemException &e) {",
          "163:    throw FileSystemException(\"Cannot write to file \" + filename,",
          "164:     e.code(), filename);",
          "165:   }",
          "166:   guard.commit();",
          "167:  } else {",
          "168:   e = errno;",
          "169:   throw FileSystemException(\"Cannot create file \" + filename,",
          "170:    e, filename);",
          "171:  }",
          "172: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356:  uid_t lowestUid;",
          "357:  gid_t lowestGid;",
          "358:  string structureVersionFile;",
          "361:  determineLowestUserAndGroup(lowestUser, lowestUid, lowestGid);",
          "",
          "[Removed Lines]",
          "359:  int fd, ret;",
          "",
          "[Added Lines]",
          "430:  int ret;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "377:  structureVersionFile = tmpDir + \"/structure_version.txt\";",
          "378:  do {",
          "",
          "[Removed Lines]",
          "376:  static const char structureVersion[] = \"1,0\"; // major,minor",
          "379:   fd = open(structureVersionFile.c_str(),",
          "380:    O_WRONLY | O_CREAT | O_TRUNC,",
          "381:    S_IRUSR | S_IRGRP | S_IROTH);",
          "382:  } while (fd == -1 && errno == EINTR);",
          "383:  if (fd != -1) {",
          "384:   do {",
          "386:    ret = fchown(fd, 0, 0);",
          "387:   } while (ret == -1 && errno == EINTR);",
          "389:   if (write(fd, structureVersion, sizeof(structureVersion) - 1) != sizeof(structureVersion) - 1) {",
          "390:    int e = errno;",
          "391:    do {",
          "392:     ret = close(fd);",
          "393:    } while (ret == -1 && errno == EINTR);",
          "394:    throw FileSystemException(\"Cannot write to file \" + structureVersionFile,",
          "395:     e, structureVersionFile);",
          "396:   } else {",
          "397:    do {",
          "398:     ret = close(fd);",
          "399:    } while (ret == -1 && errno == EINTR);",
          "400:   }",
          "401:  } else {",
          "402:   int e = errno;",
          "403:   throw FileSystemException(\"Cannot create file \" + structureVersionFile,",
          "404:    e, structureVersionFile);",
          "405:  }",
          "",
          "[Added Lines]",
          "448:  createFile(structureVersionFile, \"1.0\", S_IRUSR | S_IRGRP | S_IROTH);",
          "451:   ret = chown(structureVersionFile.c_str(), 0, 0);",
          "452:  } while (ret == -1 && errno == EINTR);",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: FileType getFileType(const char *filename, CachedFileStat *cstat = 0,",
          "186:                      unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: void createFile(const string &filename, const StaticString &contents, mode_t permissions,",
          "204:                 uid_t owner = (uid_t) -1, gid_t group = (gid_t) -1);",
          "",
          "---------------"
        ],
        "ext/nginx/HelperServer.cpp||ext/nginx/HelperServer.cpp": [
          "File: ext/nginx/HelperServer.cpp -> ext/nginx/HelperServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "662:   pool->setMaxIdleTime(poolIdleTime);",
          "669:   messageServer = ptr(new MessageServer(",
          "670:    getPassengerTempDir() + \"/master/pool_controller.socket\",",
          "672:   ));",
          "673:   messageServer->addHandler(ptr(new BacktracesServer()));",
          "674:   messageServer->addHandler(ptr(new ApplicationPool::Server(pool)));",
          "",
          "[Removed Lines]",
          "665:   accountsDatabase = ptr(new AccountsDatabase());",
          "667:   accountsDatabase->add(\"_passenger-status\", \"_passenger-status\", false,",
          "668:    Account::INSPECT_BASIC_INFO | Account::INSPECT_BACKTRACES);",
          "671:    accountsDatabase",
          "",
          "[Added Lines]",
          "667:    AccountsDatabase::createDefault()",
          "",
          "---------------"
        ],
        "lib/phusion_passenger/admin_tools/server_instance.rb||lib/phusion_passenger/admin_tools/server_instance.rb": [
          "File: lib/phusion_passenger/admin_tools/server_instance.rb -> lib/phusion_passenger/admin_tools/server_instance.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  end",
          "49:  class UnsupportedStructureVersionError < StandardError",
          "50:  end",
          "52:  # TODO: really need to do something about the terminology. it should be \"backend process\" or something.",
          "53:  class Instance",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:  class RoleDeniedError < StandardError",
          "52:  end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  attr_accessor :path",
          "59:  attr_accessor :pid",
          "62:   instances = []",
          "63:   Dir[\"#{AdminTools.tmpdir}/passenger.*\"].each do |dir|",
          "64:    next if dir !~ /passenger.(\\d+)\\Z/",
          "65:    begin",
          "66:     instances << ServerInstance.new(dir)",
          "67:    rescue StaleDirectoryError, CorruptedDirectoryError",
          "69:        File.stat(dir).ctime < current_time - STALE_TIME_THRESHOLD",
          "70:      log_cleaning_action(dir)",
          "71:      FileUtils.chmod_R(0700, dir) rescue nil",
          "",
          "[Removed Lines]",
          "61:  def self.list(clean_stale_or_corrupted = true)",
          "68:     if clean_stale_or_corrupted &&",
          "",
          "[Added Lines]",
          "63:  def self.list(options = {})",
          "64:   options = {",
          "65:    :clean_stale_or_corrupted => true",
          "66:   }.merge(options)",
          "74:     if options[:clean_stale_or_corrupted] &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   return instances",
          "79:  end",
          "83:  end",
          "85:  def initialize(path)",
          "",
          "[Removed Lines]",
          "81:  def self.for_pid(pid)",
          "82:   return list(false).find { |c| c.pid == pid }",
          "",
          "[Added Lines]",
          "87:  def self.for_pid(pid, options = {})",
          "88:   return list(options).find { |c| c.pid == pid }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:    raise CorruptedDirectoryError, \"Directory doesn't contain a structure version specification file.\"",
          "104:   else",
          "105:    version_data = File.read(\"#{path}/structure_version.txt\").strip",
          "107:    if major.nil? || minor.nil? || major !~ /\\A\\d+\\Z/ || minor !~ /\\A\\d+\\Z/",
          "108:     raise CorruptedDirectoryError, \"Directory doesn't contain a valid structure version specification file.\"",
          "109:    end",
          "",
          "[Removed Lines]",
          "106:    major, minor = version_data.split(\",\", 2)",
          "",
          "[Added Lines]",
          "112:    major, minor = version_data.split(\".\", 2)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:   end",
          "116:  end",
          "123:   end",
          "124:  end",
          "126:  def backtraces",
          "132:  end",
          "134:  def xml",
          "140:  end",
          "142:  def domains",
          "",
          "[Removed Lines]",
          "118:  def status",
          "119:   connect do |channel|",
          "120:    channel.write(\"inspect\")",
          "121:    check_security_response(channel)",
          "122:    return channel.read_scalar",
          "127:   connect do |channel|",
          "128:    channel.write(\"backtraces\")",
          "129:    check_security_response(channel)",
          "130:    return channel.read_scalar",
          "131:   end",
          "135:   connect do |channel|",
          "136:    channel.write(\"toXml\", true)",
          "137:    check_security_response(channel)",
          "138:    return channel.read_scalar",
          "139:   end",
          "",
          "[Added Lines]",
          "124:  # Raises:",
          "125:  # - +ArgumentError+",
          "126:  # - +RoleDeniedError+: The user that the current process is as is not authorized to utilize the given role.",
          "127:  # - +EOFError+: The server unexpectedly closed the connection during authentication.",
          "128:  # - +SecurityError+: The server denied our authentication credentials.",
          "129:  def connect(role_or_username, password = nil)",
          "130:   @channel = MessageChannel.new(UNIXSocket.new(\"#{path}/master/pool_controller.socket\"))",
          "131:   if role_or_username.is_a?(Symbol)",
          "132:    case role_or_username",
          "133:    when :passenger_status",
          "134:     username = \"_passenger-status\"",
          "135:     begin",
          "136:      password = File.read(\"#{path}/info/passenger-status-password.txt\")",
          "137:     rescue Errno::EACCES",
          "138:      raise RoleDeniedError",
          "139:     end",
          "140:    else",
          "141:     raise ArgumentError, \"Supported role #{role_or_username}\"",
          "142:    end",
          "143:   else",
          "144:    username = role_or_username",
          "145:   end",
          "147:   begin",
          "148:    @channel.write_scalar(username)",
          "149:    @channel.write_scalar(password)",
          "150:    result = @channel.read",
          "151:    if result.nil?",
          "152:     raise EOFError",
          "153:    elsif result[0] != \"ok\"",
          "154:     raise SecurityError, result[0]",
          "155:    end",
          "156:    yield self",
          "157:   ensure",
          "158:    @channel.close",
          "162:  def status",
          "163:   @channel.write(\"inspect\")",
          "164:   check_security_response",
          "165:   return @channel.read_scalar",
          "166:  end",
          "169:   @channel.write(\"backtraces\")",
          "170:   check_security_response",
          "171:   return @channel.read_scalar",
          "175:   @channel.write(\"toXml\", true)",
          "176:   check_security_response",
          "177:   return @channel.read_scalar",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188:   private :current_time",
          "189:  end",
          "212:   if result.nil?",
          "213:    raise EOFError",
          "214:   elsif result[0] != \"Passed security\"",
          "",
          "[Removed Lines]",
          "191:  def connect",
          "192:   channel = MessageChannel.new(UNIXSocket.new(\"#{path}/master/pool_controller.socket\"))",
          "193:   begin",
          "194:    @username = '_passenger-status'",
          "195:    @password = '_passenger-status'",
          "196:    channel.write_scalar(@username)",
          "197:    channel.write_scalar(@password)",
          "198:    result = channel.read",
          "199:    if result.nil?",
          "200:     raise EOFError",
          "201:    elsif result[0] != \"ok\"",
          "202:     raise SecurityError, result[0]",
          "203:    end",
          "204:    yield channel",
          "205:   ensure",
          "206:    channel.close",
          "207:   end",
          "208:  end",
          "210:  def check_security_response(channel)",
          "211:   result = channel.read",
          "",
          "[Added Lines]",
          "229:  def check_security_response",
          "230:   result = @channel.read",
          "",
          "---------------"
        ],
        "test/ruby/admin_tools_spec.rb||test/ruby/admin_tools_spec.rb": [
          "File: test/ruby/admin_tools_spec.rb -> test/ruby/admin_tools_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  def create_instance_dir(dir)",
          "46:   Dir.mkdir(dir)",
          "47:   File.write(\"#{dir}/structure_version.txt\",",
          "49:    AdminTools::ServerInstance::DIRECTORY_STRUCTURE_MINOR_VERSION.to_s)",
          "50:  end",
          "",
          "[Removed Lines]",
          "48:    AdminTools::ServerInstance::DIRECTORY_STRUCTURE_MAJOR_VERSION.to_s + \",\" +",
          "",
          "[Added Lines]",
          "48:    AdminTools::ServerInstance::DIRECTORY_STRUCTURE_MAJOR_VERSION.to_s + \".\" +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:    dir = \"#{passenger_tmpdir}/passenger.#{@process1.pid}\"",
          "86:    create_instance_dir(dir)",
          "89:    create_instance_dir(\"#{passenger_tmpdir}/passenger.#{@process2.pid}\")",
          "",
          "[Removed Lines]",
          "87:    File.write(\"#{dir}/structure_version.txt\", \"0,0\")",
          "",
          "[Added Lines]",
          "87:    File.write(\"#{dir}/structure_version.txt\", \"0.0\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:    dir = \"#{passenger_tmpdir}/passenger.#{@process1.pid}\"",
          "101:    create_instance_dir(dir)",
          "102:    File.write(\"#{dir}/structure_version.txt\",",
          "104:     \"9\" + AdminTools::ServerInstance::DIRECTORY_STRUCTURE_MINOR_VERSION.to_s)",
          "106:    create_instance_dir(\"#{passenger_tmpdir}/passenger.#{@process2.pid}\")",
          "",
          "[Removed Lines]",
          "103:     AdminTools::ServerInstance::DIRECTORY_STRUCTURE_MAJOR_VERSION.to_s + \",\" +",
          "",
          "[Added Lines]",
          "103:     AdminTools::ServerInstance::DIRECTORY_STRUCTURE_MAJOR_VERSION.to_s + \".\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:    create_instance_dir(\"#{passenger_tmpdir}/passenger.#{@process2.pid}\")",
          "165:    create_instance_dir(\"#{passenger_tmpdir}/passenger.#{@process3.pid}\")",
          "166:    File.write(\"#{passenger_tmpdir}/passenger.#{@process2.pid}/structure_version.txt\", \"\")",
          "169:    AdminTools::ServerInstance.should_receive(:log_cleaning_action).twice",
          "170:    instances = AdminTools::ServerInstance.list",
          "",
          "[Removed Lines]",
          "167:    File.write(\"#{passenger_tmpdir}/passenger.#{@process3.pid}/structure_version.txt\", \"1,x\")",
          "",
          "[Added Lines]",
          "167:    File.write(\"#{passenger_tmpdir}/passenger.#{@process3.pid}/structure_version.txt\", \"1.x\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "197:    File.write(\"#{passenger_tmpdir}/passenger.#{@process2.pid}/instance.pid\", \"\")",
          "199:    AdminTools::ServerInstance.should_not_receive(:log_cleaning_action)",
          "201:    instances.should have(1).item",
          "202:    instances[0].pid.should == @process1.pid",
          "203:    File.exist?(\"#{passenger_tmpdir}/passenger.#{@process2.pid}\").should be_true",
          "",
          "[Removed Lines]",
          "200:    instances = AdminTools::ServerInstance.list(false)",
          "",
          "[Added Lines]",
          "200:    instances = AdminTools::ServerInstance.list(:clean_stale_or_corrupted => false)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "154c8109e80e556a4d05afc51e5e6a78056e8414",
      "candidate_info": {
        "commit_hash": "154c8109e80e556a4d05afc51e5e6a78056e8414",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/154c8109e80e556a4d05afc51e5e6a78056e8414",
        "files": [
          "ext/apache2/Hooks.cpp",
          "ext/common/Logging.h",
          "ext/common/LoggingServer.h",
          "ext/common/PoolOptions.h",
          "ext/common/RandomGenerator.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h",
          "ext/common/md5.cpp",
          "ext/common/md5.h",
          "ext/nginx/HelperServer.cpp",
          "test/cxx/LoggingTest.cpp",
          "test/cxx/UtilsTest.cpp"
        ],
        "message": "Make the on-disk analytics group name an MD5 checksum instead of URL-encoded. The analytics group name is now the same as the app group name.",
        "before_after_code_files": [
          "ext/apache2/Hooks.cpp||ext/apache2/Hooks.cpp",
          "ext/common/Logging.h||ext/common/Logging.h",
          "ext/common/LoggingServer.h||ext/common/LoggingServer.h",
          "ext/common/PoolOptions.h||ext/common/PoolOptions.h",
          "ext/common/RandomGenerator.h||ext/common/RandomGenerator.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h",
          "ext/common/md5.cpp||ext/common/md5.cpp",
          "ext/common/md5.h||ext/common/md5.h",
          "ext/nginx/HelperServer.cpp||ext/nginx/HelperServer.cpp",
          "test/cxx/LoggingTest.cpp||test/cxx/LoggingTest.cpp",
          "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ],
          "candidate": [
            "ext/common/Utils.cpp||ext/common/Utils.cpp",
            "ext/common/Utils.h||ext/common/Utils.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/apache2/Hooks.cpp||ext/apache2/Hooks.cpp": [
          "File: ext/apache2/Hooks.cpp -> ext/apache2/Hooks.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:      config->getSpawnMethodString(),",
          "595:      mapper.getApplicationTypeString(),",
          "596:      \"\",",
          "598:      config->frameworkSpawnerTimeout,",
          "599:      config->appSpawnerTimeout,",
          "600:      config->getMaxRequests(),",
          "",
          "[Removed Lines]",
          "597:      \"\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/common/Logging.h||ext/common/Logging.h": [
          "File: ext/common/Logging.h -> ext/common/Logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include \"MessageClient.h\"",
          "47: #include \"StaticString.h\"",
          "48: #include \"Exceptions.h\"",
          "49: #include \"Utils.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include \"md5.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:  FileDescriptor handle;",
          "150:  string groupName;",
          "",
          "[Removed Lines]",
          "151:  string id;",
          "",
          "[Added Lines]",
          "152:  string txnId;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:  }",
          "174:   int size;",
          "",
          "[Removed Lines]",
          "173:  char *insertIdAndTimestamp(char *buffer) {",
          "177:   memcpy(buffer, id.c_str(), id.size());",
          "178:   buffer += id.size();",
          "",
          "[Added Lines]",
          "174:  char *insertTxnIdAndTimestamp(char *buffer) {",
          "178:   memcpy(buffer, txnId.c_str(), txnId.size());",
          "179:   buffer += txnId.size();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198: public:",
          "199:  TxnLog() { }",
          "202:   this->handle    = handle;",
          "205:   message(\"ATTACH\");",
          "206:  }",
          "",
          "[Removed Lines]",
          "201:  TxnLog(const FileDescriptor &handle, const string &sanitizedGroupName, const string &id) {",
          "203:   this->groupName = sanitizedGroupName;",
          "204:   this->id        = id;",
          "",
          "[Added Lines]",
          "202:  TxnLog(const FileDescriptor &handle, const string &groupName, const string &txnId) {",
          "204:   this->groupName = groupName;",
          "205:   this->txnId     = txnId;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:  void message(const StaticString &text) {",
          "215:   if (handle != -1) {",
          "218:    char *end;",
          "224:    memcpy(end, text.c_str(), text.size());",
          "",
          "[Removed Lines]",
          "217:    char data[id.size() + 1 + INT64_STR_BUFSIZE + 1 + text.size() + 1];",
          "221:    end = insertIdAndTimestamp(data);",
          "",
          "[Added Lines]",
          "218:    char data[txnId.size() + 1 + INT64_STR_BUFSIZE + 1 + text.size() + 1];",
          "222:    end = insertTxnIdAndTimestamp(data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:  void abort(const StaticString &text) {",
          "236:   if (handle != -1) {",
          "239:     (sizeof(\"ABORT: \") - 1) + text.size() + 1];",
          "240:    char *end;",
          "246:    memcpy(end, \"ABORT: \", sizeof(\"ABORT: \") - 1);",
          "",
          "[Removed Lines]",
          "238:    char data[id.size() + 1 + INT64_STR_BUFSIZE + 1 +",
          "243:    end = insertIdAndTimestamp(data);",
          "",
          "[Added Lines]",
          "239:    char data[txnId.size() + 1 + INT64_STR_BUFSIZE + 1 +",
          "244:    end = insertTxnIdAndTimestamp(data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "258:   return handle == -1;",
          "259:  }",
          "263:  }",
          "266:  string getGroupName() const {",
          "267:   return groupName;",
          "268:  }",
          "",
          "[Removed Lines]",
          "261:  string getId() const {",
          "262:   return id;",
          "",
          "[Added Lines]",
          "262:  string getTxnId() const {",
          "263:   return txnId;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "344:  boost::mutex lock;",
          "345:  Cache fileHandleCache;",
          "349:   Cache::iterator it;",
          "350:   lock_guard<boost::mutex> l(lock);",
          "",
          "[Removed Lines]",
          "347:  FileDescriptor openLogFile(const StaticString &sanitizedGroupName, unsigned long long timestamp) {",
          "348:   string logFile = determineLogFilename(dir, sanitizedGroupName, timestamp);",
          "",
          "[Added Lines]",
          "347:  FileDescriptor openLogFile(const StaticString &groupName, unsigned long long timestamp) {",
          "348:   string logFile = determineLogFilename(dir, groupName, timestamp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "375:    vector<string> args;",
          "377:    client.connect(socketFilename, username, password);",
          "380:    if (!client.read(args)) {",
          "",
          "[Removed Lines]",
          "378:    client.write(\"open log file\", sanitizedGroupName.c_str(),",
          "379:     toString(timestamp).c_str(), NULL);",
          "",
          "[Added Lines]",
          "378:    client.write(\"open log file\",",
          "379:     groupName.c_str(),",
          "380:     toString(timestamp).c_str(),",
          "381:     NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "394:   return it->second.fd;",
          "395:  }",
          "399:   if (timestampBegin != NULL) {",
          "400:    return atoll(timestampBegin + 1);",
          "401:   } else {",
          "",
          "[Removed Lines]",
          "397:  unsigned long long extractTimestamp(const string &id) const {",
          "398:   const char *timestampBegin = strchr(id.c_str(), '-');",
          "",
          "[Added Lines]",
          "399:  unsigned long long extractTimestamp(const string &txnId) const {",
          "400:   const char *timestampBegin = strchr(txnId.c_str(), '-');",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "403:   }",
          "404:  }",
          "418: public:",
          "419:  TxnLogger() { }",
          "",
          "[Removed Lines]",
          "406:  static bool saneGroupNameCharacter(char c) {",
          "412:   return (c >= 'a' && c <= 'z')",
          "413:    || (c >= 'A' && c <= 'Z')",
          "414:    || (c >= '0' && c <= '9')",
          "415:    || c == '_' || c == '-' || c == '%';",
          "416:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "425:   this->password       = password;",
          "426:  }",
          "430:    return false;",
          "431:   }",
          "434:   bool result = true;",
          "438:   }",
          "439:   return result;",
          "440:  }",
          "467:  }",
          "471:  {",
          "472:   struct tm tm;",
          "473:   time_t time_value;",
          "475:   char dateName[14];",
          "483:   time_value = timestamp / 1000000;",
          "484:   localtime_r(&time_value, &tm);",
          "486:   strftime(dateName, sizeof(dateName), \"%G/%m/%d/%H\", &tm);",
          "488:   filename.append(1, '/');",
          "489:   filename.append(dateName);",
          "490:   filename.append(\"/web_txns.txt\");",
          "491:   return filename;",
          "492:  }",
          "496:    return ptr(new TxnLog());",
          "497:   } else {",
          "498:    unsigned long long timestamp = SystemTime::getUsec();",
          "504:   }",
          "505:  }",
          "509:    return ptr(new TxnLog());",
          "510:   } else {",
          "511:    unsigned long long timestamp;",
          "514:    if (timestamp == 0) {",
          "515:     TRACE_POINT();",
          "517:    }",
          "520:   }",
          "521:  }",
          "",
          "[Removed Lines]",
          "428:  static bool groupNameIsSane(const StaticString &groupName) {",
          "429:   if (groupName.empty()) {",
          "433:   string::size_type i = 0;",
          "435:   while (i < groupName.size() && result) {",
          "436:    result = result && saneGroupNameCharacter(groupName[i]);",
          "437:    i++;",
          "442:  static string sanitizeGroupName(const string &groupName) {",
          "444:   char result[groupName.size() * 3];",
          "445:   char *end = result;",
          "446:   string::size_type i;",
          "447:   static const unsigned char hex_chars[] = {",
          "448:    '0', '1', '2', '3', '4', '5', '6', '7',",
          "449:    '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'",
          "450:   };",
          "452:   for (i = 0; i < groupName.size(); i++) {",
          "453:    unsigned char c = (unsigned char) groupName[i];",
          "455:    if (saneGroupNameCharacter(c) && c != '%') {",
          "457:     end++;",
          "458:    } else {",
          "459:     end[0] = '%';",
          "460:     end[1] = hex_chars[c / 16];",
          "461:     end[2] = hex_chars[c % 16];",
          "462:     end += 3;",
          "463:    }",
          "464:   }",
          "466:   return string(result, end - result);",
          "469:  static string determineLogFilename(const string &dir,",
          "470:   const StaticString &sanitizedGroupName, unsigned long long timestamp)",
          "474:   string filename = dir + \"/1/\";",
          "477:   if (!groupNameIsSane(sanitizedGroupName)) {",
          "478:    TRACE_POINT();",
          "479:    throw ArgumentException(\"Unsanitized analytics group name '\" +",
          "480:     sanitizedGroupName + \"'\");",
          "481:   }",
          "487:   filename.append(sanitizedGroupName.data(), sanitizedGroupName.size());",
          "494:  TxnLogPtr newTransaction(const string &sanitizedGroupName) {",
          "495:   if (dir.empty() || sanitizedGroupName.empty()) {",
          "499:    string id = toHex(randomGenerator.generateByteString(4));",
          "500:    id.append(\"-\");",
          "501:    id.append(toString(timestamp));",
          "502:    return ptr(new TxnLog(openLogFile(sanitizedGroupName, timestamp),",
          "503:     sanitizedGroupName, id));",
          "507:  TxnLogPtr continueTransaction(const string &sanitizedGroupName, const string &id) {",
          "508:   if (dir.empty() || sanitizedGroupName.empty()) {",
          "513:    timestamp = extractTimestamp(id);",
          "516:     throw ArgumentException(\"Invalid transaction ID '\" + id + \"'\");",
          "518:    return ptr(new TxnLog(openLogFile(sanitizedGroupName, timestamp),",
          "519:     sanitizedGroupName, id));",
          "",
          "[Added Lines]",
          "418:  static bool validateGroupId(const StaticString &groupId) {",
          "419:   if (groupId.empty()) {",
          "422:   string::size_type i;",
          "424:   for (i = 0; i < groupId.size() && result; i++) {",
          "425:    char c = groupId[i];",
          "426:    result = result && (",
          "427:     (c >= '0' && c <= '9') ||",
          "428:     (c >= 'a' && c <= 'f') ||",
          "429:     (c >= 'A' && c <= 'F')",
          "430:    );",
          "435:  static string determineGroupDir(const string &dir, const StaticString &groupName) {",
          "436:   string result = dir;",
          "437:   result.append(\"/1/\");",
          "439:   md5_state_t state;",
          "440:   md5_byte_t  digest[16];",
          "441:   char        groupId[32];",
          "443:   md5_init(&state);",
          "444:   md5_append(&state, (const md5_byte_t *) groupName.data(), groupName.size());",
          "445:   md5_finish(&state, digest);",
          "446:   toHex(StaticString((const char *) digest, 16), groupId);",
          "447:   result.append(groupId, 32);",
          "449:   return result;",
          "452:  static string determineLogFilename(const string &dir, const StaticString &groupName,",
          "453:   unsigned long long timestamp)",
          "463:   string filename = determineGroupDir(dir, groupName);",
          "470:  TxnLogPtr newTransaction(const string &groupName) {",
          "471:   if (dir.empty()) {",
          "475:    string txnId = randomGenerator.generateHexString(4);",
          "476:    txnId.append(\"-\");",
          "477:    txnId.append(toString(timestamp));",
          "478:    return ptr(new TxnLog(openLogFile(groupName, timestamp),",
          "479:     groupName, txnId));",
          "483:  TxnLogPtr continueTransaction(const string &groupName, const string &txnId) {",
          "484:   if (dir.empty()) {",
          "489:    timestamp = extractTimestamp(txnId);",
          "492:     throw ArgumentException(\"Invalid transaction ID '\" + txnId + \"'\");",
          "494:    return ptr(new TxnLog(openLogFile(groupName, timestamp),",
          "495:     groupName, txnId));",
          "",
          "---------------"
        ],
        "ext/common/LoggingServer.h||ext/common/LoggingServer.h": [
          "File: ext/common/LoggingServer.h -> ext/common/LoggingServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                              const vector<string> &args)",
          "70:  {",
          "71:   if (args[0] == \"open log file\") {",
          "73:    unsigned long long timestamp = atoll(args[2].c_str());",
          "74:    if (timestamp > SystemTime::getUsec()) {",
          "75:     commonContext.channel.write(\"error\",",
          "",
          "[Removed Lines]",
          "72:    string sanitizedGroupName = args[1];",
          "",
          "[Added Lines]",
          "72:    string groupName = args[1];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:     return true;",
          "78:    }",
          "80:    string filename;",
          "81:    try {",
          "82:     filename = TxnLogger::determineLogFilename(dir,",
          "84:    } catch (const ArgumentException &e) {",
          "85:     commonContext.channel.write(\"error\", e.what(), NULL);",
          "86:     return true;",
          "",
          "[Removed Lines]",
          "83:      sanitizedGroupName, timestamp);",
          "",
          "[Added Lines]",
          "80:    string groupDir;",
          "83:     groupDir = TxnLogger::determineGroupDir(dir, groupName);",
          "85:      groupName, timestamp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:    int ret;",
          "92:    try {",
          "95:    } catch (const IOException &e) {",
          "96:     string message = \"Cannot create directory \" + extractDirName(filename) +",
          "97:      \": \" + e.what();",
          "",
          "[Removed Lines]",
          "94:     makeDirTree(extractDirName(filename), dirPermissions, USER_NOT_GIVEN, gid);",
          "",
          "[Added Lines]",
          "95:     makeDirTree(extractDirName(filename), dirPermissions,",
          "96:      USER_NOT_GIVEN, gid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:     return true;",
          "105:    }",
          "107:    fd = syscalls::open(filename.c_str(),",
          "108:     O_CREAT | O_WRONLY | O_APPEND,",
          "109:     filePermissions);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:    try {",
          "110:     createFile(groupDir + \"/group_name.txt\", groupName,",
          "111:      S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH,",
          "112:      USER_NOT_GIVEN, GROUP_NOT_GIVEN,",
          "113:      false);",
          "114:    } catch (const FileSystemException &e) {",
          "115:     commonContext.channel.write(\"error\", e.what(), NULL);",
          "116:     return true;",
          "117:    }",
          "",
          "---------------"
        ],
        "ext/common/PoolOptions.h||ext/common/PoolOptions.h": [
          "File: ext/common/PoolOptions.h -> ext/common/PoolOptions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  string appGroupName;",
          "",
          "[Removed Lines]",
          "109:  string analyticsGroupName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:   const string &spawnMethod    = \"smart-lv2\",",
          "244:   const string &appType        = \"rails\",",
          "245:   string appGroupName          = \"\",",
          "247:   long frameworkSpawnerTimeout = -1,",
          "248:   long appSpawnerTimeout       = -1,",
          "249:   unsigned long maxRequests    = 0,",
          "",
          "[Removed Lines]",
          "246:   string analyticsGroupName    = \"\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:   this->spawnMethod             = spawnMethod;",
          "262:   this->appType                 = appType;",
          "263:   this->appGroupName            = appGroupName;",
          "265:   this->frameworkSpawnerTimeout = frameworkSpawnerTimeout;",
          "266:   this->appSpawnerTimeout       = appSpawnerTimeout;",
          "267:   this->maxRequests             = maxRequests;",
          "",
          "[Removed Lines]",
          "264:   this->analyticsGroupName      = analyticsGroupName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "307:   spawnMethod      = vec[startIndex + offset];                 offset += 2;",
          "308:   appType          = vec[startIndex + offset];                 offset += 2;",
          "309:   appGroupName     = vec[startIndex + offset];                 offset += 2;",
          "311:   frameworkSpawnerTimeout = atol(vec[startIndex + offset]);    offset += 2;",
          "312:   appSpawnerTimeout       = atol(vec[startIndex + offset]);    offset += 2;",
          "313:   maxRequests      = atol(vec[startIndex + offset]);           offset += 2;",
          "",
          "[Removed Lines]",
          "310:   analyticsGroupName = vec[startIndex + offset];               offset += 2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "341:  void toVector(vector<string> &vec, bool storeEnvVars = true) const {",
          "344:   }",
          "345:   appendKeyValue (vec, \"app_root\",           appRoot);",
          "346:   appendKeyValue4(vec, \"lower_privilege\",    lowerPrivilege);",
          "",
          "[Removed Lines]",
          "342:   if (vec.capacity() < vec.size() + 42) {",
          "343:    vec.reserve(vec.size() + 42);",
          "",
          "[Added Lines]",
          "333:   if (vec.capacity() < vec.size() + 40) {",
          "334:    vec.reserve(vec.size() + 40);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "349:   appendKeyValue (vec, \"spawn_method\",       spawnMethod);",
          "350:   appendKeyValue (vec, \"app_type\",           appType);",
          "351:   appendKeyValue (vec, \"app_group_name\",     getAppGroupName());",
          "353:   appendKeyValue2(vec, \"framework_spawner_timeout\", frameworkSpawnerTimeout);",
          "354:   appendKeyValue2(vec, \"app_spawner_timeout\",       appSpawnerTimeout);",
          "355:   appendKeyValue3(vec, \"max_requests\",       maxRequests);",
          "",
          "[Removed Lines]",
          "352:   appendKeyValue (vec, \"analytics_group_name\",      analyticsGroupName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/common/RandomGenerator.h||ext/common/RandomGenerator.h": [
          "File: ext/common/RandomGenerator.h -> ext/common/RandomGenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <oxt/system_calls.hpp>",
          "34: #include \"StaticString.h\"",
          "35: #include \"Exceptions.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"Utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   return string(buf, size);",
          "104:  }",
          "106:  int generateInt() {",
          "107:   int ret;",
          "108:   generateBytes(&ret, sizeof(ret));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:  string generateHexString(unsigned int size) {",
          "108:   char buf[size];",
          "109:   generateBytes(buf, size);",
          "110:   return toHex(StaticString(buf, size));",
          "111:  }",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: }",
          "139: void",
          "141:  FileDescriptor fd;",
          "144:  do {",
          "146:  } while (fd == -1 && errno == EINTR);",
          "147:  if (fd != -1) {",
          "148:   FileGuard guard(filename);",
          "",
          "[Removed Lines]",
          "140: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner, gid_t group) {",
          "142:  int ret, e;",
          "145:   fd = open(filename.c_str(), O_WRONLY | O_CREAT | O_TRUNC, permissions);",
          "",
          "[Added Lines]",
          "140: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
          "141:  gid_t group, bool overwrite)",
          "142: {",
          "144:  int ret, e, options;",
          "146:  options = O_WRONLY | O_CREAT | O_TRUNC;",
          "147:  if (!overwrite) {",
          "148:   options |= O_EXCL;",
          "149:  }",
          "151:   fd = open(filename.c_str(), options, permissions);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:   guard.commit();",
          "186:  } else {",
          "187:   e = errno;",
          "190:  }",
          "191: }",
          "",
          "[Removed Lines]",
          "188:   throw FileSystemException(\"Cannot create file \" + filename,",
          "189:    e, filename);",
          "",
          "[Added Lines]",
          "194:   if (overwrite || e != EEXIST) {",
          "195:    throw FileSystemException(\"Cannot create file \" + filename,",
          "196:     e, filename);",
          "197:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "620:  return fileExists(temp.c_str(), cstat, throttleRate);",
          "621: }",
          "634: void",
          "635: generateSecureToken(void *buf, unsigned int size) {",
          "636:  FILE *f;",
          "",
          "[Removed Lines]",
          "623: string",
          "624: appRootToAnalyticsGroupName(const StaticString &appRoot) {",
          "625:  string baseName = extractBaseName(appRoot);",
          "626:  if (baseName == \"current\") {",
          "627:   string dir = extractDirName(appRoot);",
          "628:   return extractBaseName(dir);",
          "629:  } else {",
          "630:   return baseName;",
          "631:  }",
          "632: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671: string",
          "672: toHex(const StaticString &data) {",
          "674:   '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',",
          "675:   'a', 'b', 'c', 'd', 'e', 'f'",
          "676:  };",
          "678:  string::size_type i;",
          "680:  for (i = 0; i < data.size(); i++) {",
          "683:  }",
          "685: }",
          "687: string",
          "",
          "[Removed Lines]",
          "673:  static const char chars[] = {",
          "677:  string result(data.size() * 2, '\\0');",
          "681:   result[i * 2] = chars[(unsigned char) data.at(i) / 16];",
          "682:   result[i * 2 + 1] = chars[(unsigned char) data.at(i) % 16];",
          "684:  return result;",
          "",
          "[Added Lines]",
          "670:  string result(data.size() * 2, '\\0');",
          "671:  toHex(data, (char *) result.data());",
          "672:  return result;",
          "673: }",
          "675: void",
          "676: toHex(const StaticString &data, char *output) {",
          "677:  static const char hex_chars[] = {",
          "681:  const char *data_buf = data.c_str();",
          "685:   output[i * 2] = hex_chars[(unsigned char) data_buf[i] / 16];",
          "686:   output[i * 2 + 1] = hex_chars[(unsigned char) data_buf[i] % 16];",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: void createFile(const string &filename, const StaticString &contents,",
          "207:                 mode_t permissions = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH,",
          "",
          "[Removed Lines]",
          "208:                 uid_t owner = USER_NOT_GIVEN, gid_t group = GROUP_NOT_GIVEN);",
          "",
          "[Added Lines]",
          "210:                 uid_t owner = USER_NOT_GIVEN, gid_t group = GROUP_NOT_GIVEN,",
          "211:                 bool overwrite = true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434: bool verifyWSGIDir(const string &dir, CachedFileStat *cstat = 0,",
          "435:                    unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "443: string appRootToAnalyticsGroupName(const StaticString &appRoot);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "484: string toHex(const StaticString &data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485: void toHex(const StaticString &data, char *output);",
          "",
          "---------------"
        ],
        "ext/common/md5.cpp||ext/common/md5.cpp": [
          "File: ext/common/md5.cpp -> ext/common/md5.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include \"md5.h\"",
          "55: #include <string.h>",
          "56: #include <boost/detail/endian.hpp>",
          "58: namespace Passenger {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"Utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389:  digest[i] = (md5_byte_t)(pms->abcd[i >> 2] >> ((i & 3) << 3));",
          "390: }",
          "392: } // namespace Passenger",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: static const char hex_chars[] = {",
          "394:  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',",
          "395:  'a', 'b', 'c', 'd', 'e', 'f'",
          "396: };",
          "398: std::string",
          "399: md5_hex(const StaticString &input)",
          "400: {",
          "401:     md5_state_t pms;",
          "402:     md5_byte_t digest[16];",
          "404:     md5_init(&pms);",
          "405:     md5_append(&pms, (const md5_byte_t *) input.data(), input.size());",
          "406:     md5_finish(&pms, digest);",
          "408:     return toHex(StaticString((const char *) digest, 16));",
          "409: }",
          "",
          "---------------"
        ],
        "ext/common/md5.h||ext/common/md5.h": [
          "File: ext/common/md5.h -> ext/common/md5.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #ifndef md5_INCLUDED",
          "51: #  define md5_INCLUDED",
          "53: #include <boost/cstdint.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #include <string>",
          "55: #include \"StaticString.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: void md5_finish(md5_state_t *pms, md5_byte_t digest[16]);",
          "86: } // namespace Passenger",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: std::string md5_hex(const StaticString &input);",
          "",
          "---------------"
        ],
        "ext/nginx/HelperServer.cpp||ext/nginx/HelperServer.cpp": [
          "File: ext/nginx/HelperServer.cpp -> ext/nginx/HelperServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:    }",
          "446:    if (appGroupName.empty()) {",
          "447:     options.appGroupName = options.appRoot;",
          "450:    } else {",
          "451:     options.appGroupName = appGroupName;",
          "454:    }",
          "455:    options.useGlobalQueue = parser.getHeader(\"PASSENGER_USE_GLOBAL_QUEUE\") == \"true\";",
          "456:    options.environment    = parser.getHeader(\"PASSENGER_ENVIRONMENT\");",
          "",
          "[Removed Lines]",
          "448:     options.analyticsGroupName = TxnLogger::sanitizeGroupName(",
          "449:      appRootToAnalyticsGroupName(options.appRoot));",
          "452:     options.analyticsGroupName = TxnLogger::sanitizeGroupName(",
          "453:      appGroupName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468:    TxnLogPtr log;",
          "469:    if (enableAnalytics) {",
          "471:    } else {",
          "472:     log.reset(new TxnLog());",
          "473:    }",
          "",
          "[Removed Lines]",
          "470:     log = txnLogger->newTransaction(options.analyticsGroupName);",
          "",
          "[Added Lines]",
          "466:     log = txnLogger->newTransaction(options.getAppGroupName());",
          "",
          "---------------"
        ],
        "test/cxx/LoggingTest.cpp||test/cxx/LoggingTest.cpp": [
          "File: test/cxx/LoggingTest.cpp -> test/cxx/LoggingTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   static const unsigned long long YESTERDAY = 1263299017000000ull;  // January 12, 2009, 13:23:37",
          "16:   static const unsigned long long TODAY     = 1263385422000000ull;  // January 13, 2009, 13:23:42",
          "17:   static const unsigned long long TOMORROW  = 1263471822000000ull;  // January 14, 2009, 13:23:42",
          "19:   ServerInstanceDirPtr serverInstanceDir;",
          "20:   ServerInstanceDir::GenerationPtr generation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   #define FOOBAR_MD5 \"3858f62230ac3c915f300c664312c63f\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   log->message(\"hello\");",
          "57:   log->message(\"world\");",
          "60:   ensure(data.find(\"hello\\n\") != string::npos);",
          "61:   ensure(data.find(\"world\\n\") != string::npos);",
          "",
          "[Removed Lines]",
          "59:   string data = readAll(loggingDir + \"/1/foobar/2010/01/12/13/web_txns.txt\");",
          "",
          "[Added Lines]",
          "60:   string data = readAll(loggingDir + \"/1/\" FOOBAR_MD5 \"/2010/01/12/13/web_txns.txt\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:   ensure_equals(log->getGroupName(), \"foobar\");",
          "73:   log->message(\"message 1\");",
          "76:   log->message(\"message 2\");",
          "79:   ensure(data.find(\"message 1\\n\") != string::npos);",
          "80:   ensure(data.find(\"message 2\\n\") != string::npos);",
          "81:  }",
          "",
          "[Removed Lines]",
          "75:   TxnLogPtr log2 = logger->continueTransaction(log->getGroupName(), log->getId());",
          "78:   string data = readAll(loggingDir + \"/1/foobar/2010/01/12/13/web_txns.txt\");",
          "",
          "[Added Lines]",
          "76:   TxnLogPtr log2 = logger->continueTransaction(log->getGroupName(), log->getTxnId());",
          "79:   string data = readAll(loggingDir + \"/1/\" FOOBAR_MD5 \"/2010/01/12/13/web_txns.txt\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:   log->message(\"message 2\");",
          "91:   SystemTime::forceUsec(TOMORROW);",
          "93:   log2->message(\"message 3\");",
          "95:   TxnLogPtr log3 = logger->newTransaction(\"foobar\");",
          "96:   log3->message(\"message 4\");",
          "101:   ensure(\"(1)\", yesterdayData.find(toString(YESTERDAY) + \" message 1\\n\") != string::npos);",
          "102:   ensure(\"(2)\", yesterdayData.find(toString(TODAY) + \" message 2\\n\") != string::npos);",
          "",
          "[Removed Lines]",
          "92:   TxnLogPtr log2 = logger->continueTransaction(log->getGroupName(), log->getId());",
          "98:   string yesterdayData = readAll(loggingDir + \"/1/foobar/2010/01/12/13/web_txns.txt\");",
          "99:   string tomorrowData = readAll(loggingDir + \"/1/foobar/2010/01/14/13/web_txns.txt\");",
          "",
          "[Added Lines]",
          "93:   TxnLogPtr log2 = logger->continueTransaction(log->getGroupName(), log->getTxnId());",
          "99:   string yesterdayData = readAll(loggingDir + \"/1/\" FOOBAR_MD5 \"/2010/01/12/13/web_txns.txt\");",
          "100:   string tomorrowData = readAll(loggingDir + \"/1/\" FOOBAR_MD5 \"/2010/01/14/13/web_txns.txt\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:   SystemTime::forceUsec(YESTERDAY);",
          "112:   TxnLogPtr log = logger->newTransaction(\"foobar\");",
          "113:   SystemTime::forceUsec(TODAY);",
          "115:   log2.reset();",
          "116:   SystemTime::forceUsec(TOMORROW);",
          "117:   log.reset();",
          "120:   ensure(\"(1)\", data.find(toString(YESTERDAY) + \" ATTACH\\n\") != string::npos);",
          "121:   ensure(\"(2)\", data.find(toString(TODAY) + \" ATTACH\\n\") != string::npos);",
          "122:   ensure(\"(3)\", data.find(toString(TODAY) + \" DETACH\\n\") != string::npos);",
          "",
          "[Removed Lines]",
          "114:   TxnLogPtr log2 = logger->continueTransaction(log->getGroupName(), log->getId());",
          "119:   string data = readAll(loggingDir + \"/1/foobar/2010/01/12/13/web_txns.txt\");",
          "",
          "[Added Lines]",
          "115:   TxnLogPtr log2 = logger->continueTransaction(log->getGroupName(), log->getTxnId());",
          "120:   string data = readAll(loggingDir + \"/1/\" FOOBAR_MD5 \"/2010/01/12/13/web_txns.txt\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129:   TxnLogPtr log = logger->newTransaction(\"foobar\");",
          "130:   TxnLogPtr log2 = logger->newTransaction(\"foobar\");",
          "137:  }",
          "139:  TEST_METHOD(6) {",
          "",
          "[Removed Lines]",
          "131:   TxnLogPtr log3 = logger->continueTransaction(log->getGroupName(), log->getId());",
          "132:   TxnLogPtr log4 = logger->continueTransaction(log2->getGroupName(), log2->getId());",
          "134:   ensure_equals(log->getId(), log3->getId());",
          "135:   ensure_equals(log2->getId(), log4->getId());",
          "136:   ensure(log->getId() != log2->getId());",
          "",
          "[Added Lines]",
          "132:   TxnLogPtr log3 = logger->continueTransaction(log->getGroupName(), log->getTxnId());",
          "133:   TxnLogPtr log4 = logger->continueTransaction(log2->getGroupName(), log2->getTxnId());",
          "135:   ensure_equals(log->getTxnId(), log3->getTxnId());",
          "136:   ensure_equals(log2->getTxnId(), log4->getTxnId());",
          "137:   ensure(log->getTxnId() != log2->getTxnId());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "154:   log->message(\"hello world\");",
          "155:   ensure_equals(getFileType(loggingDir), FT_NONEXISTANT);",
          "156:  }",
          "186: }",
          "",
          "[Removed Lines]",
          "158:  TEST_METHOD(8) {",
          "162:   ensure(\"(1)\", !TxnLogger::groupNameIsSane(\"\"));",
          "165:   const char *disallowedChars[] = { \"\\r\", \"\\n\", \"@\", \"$\",",
          "166:    \"~\", \"/\", \"\\\\\", \"{\", \"}\", \"?\", \"!\", \".\", \" \" };",
          "167:   for (unsigned int i = 0; i < sizeof(disallowedChars) / sizeof(char *); i++) {",
          "168:    ensure(string(\"'\") + disallowedChars[i] + \"' is disallowed\",",
          "169:     !TxnLogger::groupNameIsSane(disallowedChars[i]));",
          "170:   }",
          "172:   ensure(\"(10)\", TxnLogger::groupNameIsSane(\"hello\"));",
          "173:   ensure(\"(11)\", TxnLogger::groupNameIsSane(\"UPPERCaSE\"));",
          "174:   ensure(\"(12)\", TxnLogger::groupNameIsSane(\"foobar\"));",
          "175:   ensure(\"(13)\", TxnLogger::groupNameIsSane(\"SumiyoshiKanako\"));",
          "176:  }",
          "178:  TEST_METHOD(9) {",
          "180:   ensure_equals(TxnLogger::sanitizeGroupName(\"hello\"), \"hello\");",
          "181:   ensure_equals(TxnLogger::sanitizeGroupName(\"hello@world\"), \"hello%40world\");",
          "182:   ensure_equals(TxnLogger::sanitizeGroupName(\".hello world\"), \"%2ehello%20world\");",
          "183:   ensure_equals(TxnLogger::sanitizeGroupName(\"hello%20world\"), \"hello%2520world\");",
          "184:   ensure_equals(TxnLogger::sanitizeGroupName(\"hello@world%%$.com\"), \"hello%40world%25%25%24%2ecom\");",
          "185:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/cxx/UtilsTest.cpp||test/cxx/UtilsTest.cpp": [
          "File: test/cxx/UtilsTest.cpp -> test/cxx/UtilsTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   ensure_equals(toHex(StaticString(\"\\x00\\x01\\x02\", 3)), \"000102\");",
          "221:   ensure_equals(toHex(StaticString(\"\\x00\\x01\\xF0\\xAF\\xFF\\x98\", 6)), \"0001f0afff98\");",
          "222:   ensure_equals(toHex(\"hello world!\"), \"68656c6c6f20776f726c6421\");",
          "223:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:   char output[sizeof(\"hello world!\") * 2];",
          "225:   memset(output, 0, sizeof(output));",
          "226:   toHex(\"hello world!\", output);",
          "227:   ensure_equals(string(output), \"68656c6c6f20776f726c6421\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:   stat(\"tmp.dir\", &buf2);",
          "384:   ensure_equals(buf.st_mode, buf2.st_mode);",
          "385:  }",
          "396: }",
          "",
          "[Removed Lines]",
          "389:  TEST_METHOD(46) {",
          "390:   ensure_equals(appRootToAnalyticsGroupName(\"/var/webapps/foobar\"), \"foobar\");",
          "391:   ensure_equals(appRootToAnalyticsGroupName(\"/var/webapps/foobar/\"), \"foobar\");",
          "392:   ensure_equals(appRootToAnalyticsGroupName(\"/webapp.com\"), \"webapp.com\");",
          "393:   ensure_equals(appRootToAnalyticsGroupName(\"/u/apps/foobar/current\"), \"foobar\");",
          "394:   ensure_equals(appRootToAnalyticsGroupName(\"/u/apps/foobar/current/\"), \"foobar\");",
          "395:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}