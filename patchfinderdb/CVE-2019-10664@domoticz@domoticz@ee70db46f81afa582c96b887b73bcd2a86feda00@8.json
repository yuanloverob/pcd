{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a93e2f9cd04f8eaaadc4f49787b508ab6b7c0dbe",
      "candidate_info": {
        "commit_hash": "a93e2f9cd04f8eaaadc4f49787b508ab6b7c0dbe",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/a93e2f9cd04f8eaaadc4f49787b508ab6b7c0dbe",
        "files": [
          "hardware/TeleinfoBase.cpp",
          "hardware/TeleinfoBase.h",
          "hardware/TeleinfoSerial.cpp",
          "hardware/TeleinfoSerial.h"
        ],
        "message": "Teleinfo, using a std::string in parser, moved crc checking to base class so other classes can use it too",
        "before_after_code_files": [
          "hardware/TeleinfoBase.cpp||hardware/TeleinfoBase.cpp",
          "hardware/TeleinfoBase.h||hardware/TeleinfoBase.h",
          "hardware/TeleinfoSerial.cpp||hardware/TeleinfoSerial.cpp",
          "hardware/TeleinfoSerial.h||hardware/TeleinfoSerial.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/TeleinfoBase.cpp||hardware/TeleinfoBase.cpp": [
          "File: hardware/TeleinfoBase.cpp -> hardware/TeleinfoBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:  int level;",
          "52:  float flevel;",
          "55:  level = 1;",
          "56:  sprintf(text, \" < 80%% de %iA souscrits\", Isousc);",
          "57:  if (flevel > 80)",
          "",
          "[Removed Lines]",
          "54:  flevel = (float)(Iinst*100) / Isousc;",
          "",
          "[Added Lines]",
          "54:  flevel = (float)(Iinst * 100) / Isousc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  if ((rank < 1) || (rank > 4))",
          "87:  {",
          "89:   return;",
          "90:  }",
          "96:  if (((teleinfo.IINST == 0) && (teleinfo.IINST1 > 0)) || (teleinfo.IINST2 > 0) || (teleinfo.IINST3 > 0))",
          "100:  if (teleinfo.withPAPP == false)",
          "101:   teleinfo.PAPP = (teleinfo.triphase ? (teleinfo.IINST1 + teleinfo.IINST2 + teleinfo.IINST3) : (teleinfo.IINST)) * 230;",
          "104:  {",
          "107:  }",
          "109:  {",
          "110:   teleinfo.rate = \"Heures Creuses\";",
          "111:   m_pappHC = teleinfo.PAPP;",
          "112:   m_pappHP = 0;",
          "113:   rate_alert = 1;",
          "114:  }",
          "116:  {",
          "117:   teleinfo.rate = \"Heures Pleines\";",
          "118:   m_pappHC = 0;",
          "119:   m_pappHP = teleinfo.PAPP;",
          "120:   rate_alert = 2;",
          "121:  }",
          "123:  {",
          "124:   teleinfo.rate = \"Heures Normales\";",
          "125:   m_pappHC = teleinfo.PAPP;",
          "126:   m_pappHP = 0;",
          "127:   rate_alert = 1;",
          "128:  }",
          "130:  {",
          "131:   teleinfo.rate = \"Pointe Mobile\";",
          "132:   m_pappHC = 0;",
          "",
          "[Removed Lines]",
          "88:   _log.Log(LOG_ERROR,\"(%s) TeleinfoBase: Invalid rank passed to function (%i), must be between 1 and 4\", m_Name.c_str(), rank);",
          "91:  rank = rank -1;  // Now it is 0 to 3",
          "97:   teleinfo.triphase  = true;",
          "103:  if (teleinfo.PTEC.substr(0,2) == \"TH\")",
          "105:   teleinfo.rate=\"Toutes Heures\";",
          "106:   rate_alert=0;",
          "108:  else if (teleinfo.PTEC.substr(0,2) == \"HC\")",
          "115:  else if (teleinfo.PTEC.substr(0,2) == \"HP\")",
          "122:  else if (teleinfo.PTEC.substr(0,2) == \"HN\")",
          "129:  else if (teleinfo.PTEC.substr(0,2) == \"PM\")",
          "",
          "[Added Lines]",
          "88:   _log.Log(LOG_ERROR, \"(%s) TeleinfoBase: Invalid rank passed to function (%i), must be between 1 and 4\", m_Name.c_str(), rank);",
          "91:  rank = rank - 1;  // Now it is 0 to 3",
          "97:   teleinfo.triphase = true;",
          "103:  if (teleinfo.PTEC.substr(0, 2) == \"TH\")",
          "105:   teleinfo.rate = \"Toutes Heures\";",
          "106:   rate_alert = 0;",
          "108:  else if (teleinfo.PTEC.substr(0, 2) == \"HC\")",
          "115:  else if (teleinfo.PTEC.substr(0, 2) == \"HP\")",
          "122:  else if (teleinfo.PTEC.substr(0, 2) == \"HN\")",
          "129:  else if (teleinfo.PTEC.substr(0, 2) == \"PM\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:  if ((teleinfo.pAlertPAPP != teleinfo.PAPP) || (difftime(atime, teleinfo.last) >= 290))",
          "149:  {",
          "150:   teleinfo.pAlertPAPP = teleinfo.PAPP;",
          "",
          "[Removed Lines]",
          "145:  #ifdef DEBUG_TeleinfoBase",
          "146:  _log.Log(LOG_NORM,\"(%s) TeleinfoBase called. Power changed: %s, last update %.f sec\", m_Name.c_str(), (teleinfo.pAlertPAPP != teleinfo.PAPP)?\"true\":\"false\", difftime(atime, teleinfo.last));",
          "147:  #endif",
          "",
          "[Added Lines]",
          "145: #ifdef DEBUG_TeleinfoBase",
          "146:  _log.Log(LOG_NORM, \"(%s) TeleinfoBase called. Power changed: %s, last update %.f sec\", m_Name.c_str(), (teleinfo.pAlertPAPP != teleinfo.PAPP) ? \"true\" : \"false\", difftime(atime, teleinfo.last));",
          "147: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:    m_p1power.usagecurrent = teleinfo.PAPP;",
          "157:    if (teleinfo.OPTARIF == \"BASE\")",
          "158:    {",
          "163:     m_p1power.powerusage1 = teleinfo.BASE;",
          "164:     m_p1power.powerusage2 = 0;",
          "165:     sDecodeRXMessage(this, (const unsigned char *)&m_p1power, (name + \" kWh Total\").c_str(), 255);",
          "166:    }",
          "167:    else if (teleinfo.OPTARIF == \"HC..\")",
          "168:    {",
          "172:     m_p1power.powerusage1 = teleinfo.HCHP;",
          "173:     m_p1power.powerusage2 = teleinfo.HCHC;",
          "174:     sDecodeRXMessage(this, (const unsigned char *)&m_p1power, (name + \" kWh Total\").c_str(), 255);",
          "175:    }",
          "176:    else if (teleinfo.OPTARIF == \"EJP.\")",
          "177:    {",
          "181:     m_p1power.powerusage1 = teleinfo.EJPHPM;",
          "182:     m_p1power.powerusage2 = teleinfo.EJPHN;",
          "183:     sDecodeRXMessage(this, (const unsigned char *)&m_p1power, (name + \" kWh EJP\").c_str(), 255);",
          "185:     if (alertEJP != teleinfo.pAlertEJP)",
          "186:     {",
          "188:      teleinfo.pAlertEJP = alertEJP;",
          "189:     }",
          "190:    }",
          "192:    {",
          "201:     {",
          "203:      color_alert = 1;",
          "204:      if (teleinfo.rate == \"Heures Creuses\")",
          "206:      else",
          "208:     }",
          "210:     {",
          "212:      color_alert = 2;",
          "213:      if (teleinfo.rate == \"Heures Creuses\")",
          "215:      else",
          "217:     }",
          "219:     {",
          "221:      color_alert = 3;",
          "222:      if (teleinfo.rate == \"Heures Creuses\")",
          "224:      else",
          "226:     }",
          "227:     else",
          "228:     {",
          "229:      teleinfo.color = \"Unknown\";",
          "230:      color_alert = 3;",
          "231:     }",
          "234:     m_p1power.powerusage1 = teleinfo.BBRHPJB;",
          "235:     m_p1power.powerusage2 = teleinfo.BBRHCJB;",
          "236:     m_p1power.usagecurrent = m_pappHCJB + m_pappHPJB;",
          "",
          "[Removed Lines]",
          "159:     #ifdef DEBUG_TeleinfoBase",
          "160:     _log.Log(LOG_STATUS,\"Teleinfo Base: %i, PAPP: %i\", teleinfo.BASE, teleinfo.PAPP);",
          "161:     #endif",
          "162:     teleinfo.tariff=\"Tarif de Base\";",
          "169:     teleinfo.tariff=\"Tarif option Heures Creuses\";",
          "170:     SendKwhMeter(m_HwdID, 32*rank + 3, 255, m_pappHC, teleinfo.HCHC/1000.0, name + \" kWh Heures Creuses\");",
          "171:     SendKwhMeter(m_HwdID, 32*rank + 4, 255, m_pappHP, teleinfo.HCHP/1000.0, name + \" kWh Heures Pleines\");",
          "178:     teleinfo.tariff=\"Tarif option EJP\";",
          "179:     SendKwhMeter(m_HwdID, 32*rank + 6, 255, m_pappHC, teleinfo.EJPHN/1000.0, name + \" kWh Heures Normales\");",
          "180:     SendKwhMeter(m_HwdID, 32*rank + 7, 255, m_pappHP, teleinfo.EJPHPM/1000.0, name + \" kWh Pointe Mobile\");",
          "184:     alertEJP =  (teleinfo.PEJP == 30) ? 4 : 1;",
          "187:      SendAlertSensor(32*rank + 2, 255, alertEJP, teleinfo.rate, name + \" Preannonce Pointe Mobile\");",
          "191:    else if (teleinfo.OPTARIF.substr(0,3) == \"BBR\")",
          "193:     teleinfo.tariff=\"Tarif option TEMPO\";",
          "194:     m_pappHCJB=0;",
          "195:     m_pappHPJB=0;",
          "196:     m_pappHCJW=0;",
          "197:     m_pappHPJW=0;",
          "198:     m_pappHCJR=0;",
          "199:     m_pappHPJR=0;",
          "200:     if (teleinfo.PTEC.substr(3,1) == \"B\")",
          "202:      teleinfo.color=\"Bleu\";",
          "205:       m_pappHCJB=teleinfo.PAPP;",
          "207:       m_pappHPJB=teleinfo.PAPP;",
          "209:     else if (teleinfo.PTEC.substr(3,1) == \"W\")",
          "211:      teleinfo.color=\"Blanc\";",
          "214:       m_pappHCJW=teleinfo.PAPP;",
          "216:       m_pappHPJW=teleinfo.PAPP;",
          "218:     else if (teleinfo.PTEC.substr(3,1) == \"R\")",
          "220:      teleinfo.color=\"Rouge\";",
          "223:       m_pappHCJR=teleinfo.PAPP;",
          "225:       m_pappHPJR=teleinfo.PAPP;",
          "232:     SendKwhMeter(m_HwdID, 32*rank + 16, 255, teleinfo.PAPP, (teleinfo.BBRHCJB + teleinfo.BBRHPJB + teleinfo.BBRHCJW",
          "233:      + teleinfo.BBRHPJW + teleinfo.BBRHCJR + teleinfo.BBRHPJR)/1000.0, name + \" kWh Total\");",
          "",
          "[Added Lines]",
          "159: #ifdef DEBUG_TeleinfoBase",
          "160:     _log.Log(LOG_STATUS, \"Teleinfo Base: %i, PAPP: %i\", teleinfo.BASE, teleinfo.PAPP);",
          "161: #endif",
          "162:     teleinfo.tariff = \"Tarif de Base\";",
          "169:     teleinfo.tariff = \"Tarif option Heures Creuses\";",
          "170:     SendKwhMeter(m_HwdID, 32 * rank + 3, 255, m_pappHC, teleinfo.HCHC / 1000.0, name + \" kWh Heures Creuses\");",
          "171:     SendKwhMeter(m_HwdID, 32 * rank + 4, 255, m_pappHP, teleinfo.HCHP / 1000.0, name + \" kWh Heures Pleines\");",
          "178:     teleinfo.tariff = \"Tarif option EJP\";",
          "179:     SendKwhMeter(m_HwdID, 32 * rank + 6, 255, m_pappHC, teleinfo.EJPHN / 1000.0, name + \" kWh Heures Normales\");",
          "180:     SendKwhMeter(m_HwdID, 32 * rank + 7, 255, m_pappHP, teleinfo.EJPHPM / 1000.0, name + \" kWh Pointe Mobile\");",
          "184:     alertEJP = (teleinfo.PEJP == 30) ? 4 : 1;",
          "187:      SendAlertSensor(32 * rank + 2, 255, alertEJP, teleinfo.rate, name + \" Preannonce Pointe Mobile\");",
          "191:    else if (teleinfo.OPTARIF.substr(0, 3) == \"BBR\")",
          "193:     teleinfo.tariff = \"Tarif option TEMPO\";",
          "194:     m_pappHCJB = 0;",
          "195:     m_pappHPJB = 0;",
          "196:     m_pappHCJW = 0;",
          "197:     m_pappHPJW = 0;",
          "198:     m_pappHCJR = 0;",
          "199:     m_pappHPJR = 0;",
          "200:     if (teleinfo.PTEC.substr(3, 1) == \"B\")",
          "202:      teleinfo.color = \"Bleu\";",
          "205:       m_pappHCJB = teleinfo.PAPP;",
          "207:       m_pappHPJB = teleinfo.PAPP;",
          "209:     else if (teleinfo.PTEC.substr(3, 1) == \"W\")",
          "211:      teleinfo.color = \"Blanc\";",
          "214:       m_pappHCJW = teleinfo.PAPP;",
          "216:       m_pappHPJW = teleinfo.PAPP;",
          "218:     else if (teleinfo.PTEC.substr(3, 1) == \"R\")",
          "220:      teleinfo.color = \"Rouge\";",
          "223:       m_pappHCJR = teleinfo.PAPP;",
          "225:       m_pappHPJR = teleinfo.PAPP;",
          "232:     SendKwhMeter(m_HwdID, 32 * rank + 16, 255, teleinfo.PAPP, (teleinfo.BBRHCJB + teleinfo.BBRHPJB + teleinfo.BBRHCJW",
          "233:      + teleinfo.BBRHPJW + teleinfo.BBRHCJR + teleinfo.BBRHPJR) / 1000.0, name + \" kWh Total\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:     sDecodeRXMessage(this, (const unsigned char *)&m_p3power, (name + \"kWh Jours Rouges\").c_str(), 255);",
          "246:     if (color_alert != teleinfo.pAlertColor)",
          "247:     {",
          "249:      teleinfo.pAlertColor = color_alert;",
          "250:     }",
          "251:     if (teleinfo.DEMAIN == \"BLEU\")",
          "252:      demain_alert = 1;",
          "254:     {",
          "255:      demain_alert = 2;",
          "259:     {",
          "260:      demain_alert = 3;",
          "261:      teleinfo.DEMAIN = \"ROUGE\";",
          "",
          "[Removed Lines]",
          "248:      SendAlertSensor(32*rank + 2, 255, color_alert, \"Jour \" + teleinfo.color, name + \" Couleur du jour\");",
          "253:     else if  (teleinfo.DEMAIN == \"BLAN\")",
          "256:                                         teleinfo.DEMAIN = \"BLANC\";",
          "257:                                 }",
          "258:     else if  (teleinfo.DEMAIN == \"ROUG\")",
          "",
          "[Added Lines]",
          "248:      SendAlertSensor(32 * rank + 2, 255, color_alert, \"Jour \" + teleinfo.color, name + \" Couleur du jour\");",
          "253:     else if (teleinfo.DEMAIN == \"BLAN\")",
          "256:      teleinfo.DEMAIN = \"BLANC\";",
          "257:     }",
          "258:     else if (teleinfo.DEMAIN == \"ROUG\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:     else demain_alert = 0;",
          "264:     if (demain_alert != teleinfo.pAlertDemain)",
          "265:     {",
          "267:      teleinfo.pAlertDemain = demain_alert;",
          "268:     }",
          "269:    }",
          "270:    if (teleinfo.triphase == false)",
          "271:    {",
          "272:     SendCurrentSensor(m_HwdID + rank, 255, (float)teleinfo.IINST, 0, 0, name + \" Courant\");",
          "274:    }",
          "275:    else",
          "276:    {",
          "",
          "[Removed Lines]",
          "266:      SendAlertSensor(32*rank + 3, 255, demain_alert, \"Demain, jour \" + teleinfo.DEMAIN, name + \" Couleur demain\");",
          "273:     SendPercentageSensor(32* rank + 1, 0, 255, (teleinfo.IINST*100)/float(teleinfo.ISOUSC), name + \" Pourcentage de Charge\");",
          "",
          "[Added Lines]",
          "266:      SendAlertSensor(32 * rank + 3, 255, demain_alert, \"Demain, jour \" + teleinfo.DEMAIN, name + \" Couleur demain\");",
          "273:     SendPercentageSensor(32 * rank + 1, 0, 255, (teleinfo.IINST * 100) / float(teleinfo.ISOUSC), name + \" Pourcentage de Charge\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "278:      name + \" Courant\");",
          "279:     if (teleinfo.ISOUSC > 0)",
          "280:     {",
          "282:       name + \" Charge phase 1\");",
          "284:       name + \" Charge phase 2\");",
          "286:       name + \" charge phase 3\");",
          "287:     }",
          "288:    }",
          "",
          "[Removed Lines]",
          "281:      SendPercentageSensor(32 * rank + 1, 0, 255, (teleinfo.IINST1*100)/float(teleinfo.ISOUSC),",
          "283:      SendPercentageSensor(32 * rank + 2, 0, 255, (teleinfo.IINST2*100)/float(teleinfo.ISOUSC),",
          "285:      SendPercentageSensor(32 * rank + 3, 0, 255, (teleinfo.IINST3*100)/float(teleinfo.ISOUSC),",
          "",
          "[Added Lines]",
          "281:      SendPercentageSensor(32 * rank + 1, 0, 255, (teleinfo.IINST1 * 100) / float(teleinfo.ISOUSC),",
          "283:      SendPercentageSensor(32 * rank + 2, 0, 255, (teleinfo.IINST2 * 100) / float(teleinfo.ISOUSC),",
          "285:      SendPercentageSensor(32 * rank + 3, 0, 255, (teleinfo.IINST3 * 100) / float(teleinfo.ISOUSC),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "292:   if (rate_alert != teleinfo.pAlertRate)",
          "293:   {",
          "295:    teleinfo.pAlertRate = rate_alert;",
          "296:   }",
          "297:   if (teleinfo.triphase == false)",
          "298:   {",
          "300:    if (alertI1 != teleinfo.pAlertI1)",
          "301:    {",
          "303:     teleinfo.pAlertI1 = alertI1;",
          "304:    }",
          "305:   }",
          "",
          "[Removed Lines]",
          "294:    SendAlertSensor(32*rank + 1, 255, rate_alert, teleinfo.rate, name + \" Tarif en cours\");",
          "299:    alertI1 =  AlertLevel(teleinfo.IINST, teleinfo.ISOUSC, szTmp);",
          "302:     SendAlertSensor(32*rank + 4, 255, alertI1, szTmp, name + \" Alerte courant\");",
          "",
          "[Added Lines]",
          "294:    SendAlertSensor(32 * rank + 1, 255, rate_alert, teleinfo.rate, name + \" Tarif en cours\");",
          "299:    alertI1 = AlertLevel(teleinfo.IINST, teleinfo.ISOUSC, szTmp);",
          "302:     SendAlertSensor(32 * rank + 4, 255, alertI1, szTmp, name + \" Alerte courant\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "308:    alertI1 = AlertLevel(teleinfo.IINST1, teleinfo.ISOUSC, szTmp);",
          "309:    if (alertI1 != teleinfo.pAlertI1)",
          "310:    {",
          "312:     teleinfo.pAlertI1 = alertI1;",
          "313:    }",
          "314:    alertI2 = AlertLevel(teleinfo.IINST2, teleinfo.ISOUSC, szTmp);",
          "315:    if (alertI2 != teleinfo.pAlertI2)",
          "316:    {",
          "318:     teleinfo.pAlertI2 = alertI2;",
          "319:    }",
          "320:    alertI3 = AlertLevel(teleinfo.IINST3, teleinfo.ISOUSC, szTmp);",
          "321:    if (alertI3 != teleinfo.pAlertI3)",
          "322:    {",
          "324:     teleinfo.pAlertI3 = alertI3;",
          "325:    }",
          "326:    if (teleinfo.PPOT != teleinfo.pAlertPPOT)",
          "327:    {",
          "329:      alertPPOT = 4;",
          "330:     else",
          "331:      alertPPOT = 1;",
          "332:     teleinfo.pAlertPPOT = teleinfo.PPOT;",
          "334:     std::stringstream ss;",
          "336:     message = ss.str();",
          "338:    }",
          "339:   }",
          "340:  }",
          "341: }",
          "",
          "[Removed Lines]",
          "311:     SendAlertSensor(32*rank + 4, 255, alertI1, szTmp, name + \" Alerte phase 1\");",
          "317:     SendAlertSensor(32*rank + 5, 255, alertI2, szTmp, name + \" Alerte phase 2\");",
          "323:     SendAlertSensor(32*rank + 6, 255, alertI3, szTmp, name + \" Alerte phase 3\");",
          "328:     if (teleinfo.PPOT !=0)",
          "333:     teleinfo.PPOT>>=1;",
          "335:     ss << \"Bitmap phases: \" <<std::bitset<3>(~teleinfo.PPOT);",
          "337:     SendAlertSensor(32*rank+7, 255, alertPPOT, message, \" Alerte Potentiels\");",
          "",
          "[Added Lines]",
          "311:     SendAlertSensor(32 * rank + 4, 255, alertI1, szTmp, name + \" Alerte phase 1\");",
          "317:     SendAlertSensor(32 * rank + 5, 255, alertI2, szTmp, name + \" Alerte phase 2\");",
          "323:     SendAlertSensor(32 * rank + 6, 255, alertI3, szTmp, name + \" Alerte phase 3\");",
          "328:     if (teleinfo.PPOT != 0)",
          "333:     teleinfo.PPOT >>= 1;",
          "335:     ss << \"Bitmap phases: \" << std::bitset<3>(~teleinfo.PPOT);",
          "337:     SendAlertSensor(32 * rank + 7, 255, alertPPOT, message, \" Alerte Potentiels\");",
          "358: a \"checksum\" is calculated on the set of characters from the beginning of the label field to the end of the field given character SP included.",
          "359: We first make ??the sum of all ASCII codes of all characters.",
          "360: to avoid introduce ASCII (00 to 1F hex) functions, it retains only the six least significant bits of",
          "361: result (this translates into a logical AND between the amount previously calculated and 03Fh).",
          "362: Finally, we added 20 hexadecimal. The result will always be a printable ASCII character (sign, digit,",
          "363: capital letter) of from 0x20 to hexadecimal 0x5F",
          "365: Le \"checksum\" est calcule sur l'ensemble des caracteres allant du debut du champ etiquette a la fin du champ",
          "366: donnee, caractere SP inclus. On fait tout d'abord la somme des codes ASCII de tous ces caracteres. Pour eviter",
          "367: d'introduire des fonctions ASCII (00  1F en hexadcimal), on ne conserve que les six bits de poids faible du",
          "368: resultat obtenu (cette operation se traduit par un ET logique entre la somme precedemment calculee et 03Fh).",
          "369: Enfin, on ajoute 20 en hexadecimal. Le resultat sera donc toujours un caractre ASCII imprimable (signe, chiffre,",
          "370: lettre majuscule) allant de 20 a 5F en hexadcimal.",
          "372: Un deuxime mode de calcul existe qui prend aussi le caractre de sparation final dans le calcul.",
          "375: bool CTeleinfoBase::isCheckSumOk(const std::string &sLine, int &isMode1)",
          "376: {",
          "377:  if (sLine.size() < 2)",
          "378:   return false;",
          "379:  unsigned int checksum, mode1 = 0x00, mode2 = 0x00;",
          "380:  bool line_ok = false;",
          "382:  checksum = sLine[sLine.size() - 1];",
          "383:  int i = 0;",
          "384:  for (int i = 0; i < (int)sLine.size()-2; i++)",
          "385:  {",
          "386:   mode1 += sLine[i];",
          "387:  }",
          "388:  mode2 = ((mode1 + sLine[i]) & 0x3F) + 0x20;",
          "389:  mode1 = (mode1 & 0x3F) + 0x20;",
          "391:  if (mode1 == checksum)",
          "392:  {",
          "393:   line_ok = true;",
          "394:   if (isMode1 != (int)true)// This will evaluate to false when isMode still equals to 255 at second run",
          "395:   {",
          "396:    isMode1 = true;",
          "397:    _log.Log(LOG_STATUS, \"(%s) Teleinfo CRC check mode set to 1\", m_Name.c_str());",
          "398:   }",
          "399:  }",
          "400:  else if (mode2 == checksum)",
          "401:  {",
          "402:   line_ok = true;",
          "403:   if (isMode1 != false)  // if this is first run, will still be at 255",
          "404:   {",
          "405:    isMode1 = false;",
          "406:    _log.Log(LOG_STATUS, \"(%s) TeleinfoCRC check mode set to 2\", m_Name.c_str());",
          "407:   }",
          "408:  }",
          "409:  else       // Don't send an error on the first run as the line is probably truncated, wait for mode to be initialised",
          "410:   if (isMode1 != 255)",
          "411:    _log.Log(LOG_ERROR, \"(%s) CRC check failed on Teleinfo line '%s' using both modes 1 and 2. Line skipped.\", m_Name.c_str(), sLine.c_str());",
          "413:  if (line_ok)",
          "414:  {",
          "415:   _log.Debug(DEBUG_HARDWARE, \"(%s) CRC check passed on Teleinfo line '%s'. Line processed\", m_Name.c_str(), sLine.c_str());",
          "416:  }",
          "418:  return line_ok;",
          "419: }",
          "",
          "---------------"
        ],
        "hardware/TeleinfoBase.h||hardware/TeleinfoBase.h": [
          "File: hardware/TeleinfoBase.h -> hardware/TeleinfoBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: class CTeleinfoBase : public CDomoticzHardwareBase",
          "25: {",
          "41:   {",
          "122: };",
          "",
          "[Removed Lines]",
          "27:  public:",
          "29:   CTeleinfoBase();",
          "30:   ~CTeleinfoBase();",
          "32:  private:",
          "33:   int AlertLevel(int Iinst, int Isousc, char* text);",
          "34:   P1Power m_p1power, m_p2power, m_p3power;",
          "36:  protected:",
          "37:   int m_iRateLimit;",
          "38:   int m_iDataTimeout;",
          "40:   typedef struct _tTeleinfo",
          "42:    std::string ADCO;",
          "43:    std::string PTEC;",
          "44:    std::string OPTARIF;",
          "45:    uint32_t ISOUSC;",
          "46:    uint32_t IINST;",
          "47:    uint32_t IINST1;",
          "48:    uint32_t IINST2;",
          "49:    uint32_t IINST3;",
          "50:    uint32_t PPOT;",
          "51:    uint32_t ADPS;",
          "52:    uint32_t PAPP;",
          "53:    uint32_t BASE;",
          "54:    uint32_t HCHC;",
          "55:    uint32_t HCHP;",
          "56:    uint32_t PEJP;",
          "57:    uint32_t EJPHN;",
          "58:    uint32_t EJPHPM;",
          "59:    uint32_t BBRHPJB;",
          "60:    uint32_t BBRHCJB;",
          "61:    uint32_t BBRHPJW;",
          "62:    uint32_t BBRHCJW;",
          "63:    uint32_t BBRHPJR;",
          "64:    uint32_t BBRHCJR;",
          "65:    std::string DEMAIN;",
          "66:    uint32_t pAlertPAPP;",
          "67:    uint32_t pAlertI1;",
          "68:    uint32_t pAlertI2;",
          "69:    uint32_t pAlertI3;",
          "70:    uint32_t pAlertPPOT;",
          "71:    uint32_t pAlertRate;",
          "72:    uint32_t pAlertColor;",
          "73:    uint32_t pAlertEJP;",
          "74:    uint32_t pAlertDemain;",
          "75:    std::string rate;",
          "76:    std::string tariff;",
          "77:    std::string color;",
          "78:    time_t  last;",
          "79:    bool    triphase;",
          "80:    bool    withPAPP;  //For meters with no PAPP",
          "81:    int     CRCmode1; // really a bool, but with a special \"un-initialized state\"",
          "82:    _tTeleinfo()",
          "83:    {",
          "84:     ISOUSC = 0;",
          "85:     IINST = 0;",
          "86:     IINST1 = 0;",
          "87:     IINST2 = 0;",
          "88:     IINST3 = 0;",
          "89:     PPOT = 0;",
          "90:     ADPS = 0;",
          "91:     PAPP = 0;",
          "92:     BASE = 0;",
          "93:     HCHC = 0;",
          "94:     HCHP = 0;",
          "95:     PEJP = 0;",
          "96:     EJPHN = 0;",
          "97:     EJPHPM = 0;",
          "98:     BBRHPJB = 0;",
          "99:     BBRHCJB = 0;",
          "100:     BBRHPJW = 0;",
          "101:     BBRHCJW = 0;",
          "102:     BBRHPJR = 0;",
          "103:     BBRHCJR = 0;",
          "104:     pAlertPAPP = 10;",
          "105:     pAlertI1 = 10;",
          "106:     pAlertI2 = 10;",
          "107:     pAlertI3 = 10;",
          "108:     pAlertPPOT = 10;",
          "109:     pAlertRate = 10;",
          "110:     pAlertColor = 10;",
          "111:     pAlertEJP = 10;",
          "112:     pAlertDemain = 10;",
          "113:     last = 0;",
          "114:     triphase = false;",
          "115:                   withPAPP = false;",
          "116:     CRCmode1 = 255;  // means \"bool not initialized yet\", will be when running CRC Check for the first time",
          "117:    }",
          "118:   } Teleinfo;",
          "120:   void ProcessTeleinfo(Teleinfo &teleinfo);",
          "121:   void ProcessTeleinfo(const std::string &name, int rank, Teleinfo &teleinfo);",
          "",
          "[Added Lines]",
          "27: public:",
          "29:  CTeleinfoBase();",
          "30:  ~CTeleinfoBase();",
          "32: private:",
          "33:  int AlertLevel(int Iinst, int Isousc, char* text);",
          "34:  P1Power m_p1power, m_p2power, m_p3power;",
          "36: protected:",
          "37:  int m_iRateLimit;",
          "38:  int m_iDataTimeout;",
          "40:  typedef struct _tTeleinfo",
          "41:  {",
          "42:   std::string ADCO;",
          "43:   std::string PTEC;",
          "44:   std::string OPTARIF;",
          "45:   uint32_t ISOUSC;",
          "46:   uint32_t IINST;",
          "47:   uint32_t IINST1;",
          "48:   uint32_t IINST2;",
          "49:   uint32_t IINST3;",
          "50:   uint32_t PPOT;",
          "51:   uint32_t ADPS;",
          "52:   uint32_t PAPP;",
          "53:   uint32_t BASE;",
          "54:   uint32_t HCHC;",
          "55:   uint32_t HCHP;",
          "56:   uint32_t PEJP;",
          "57:   uint32_t EJPHN;",
          "58:   uint32_t EJPHPM;",
          "59:   uint32_t BBRHPJB;",
          "60:   uint32_t BBRHCJB;",
          "61:   uint32_t BBRHPJW;",
          "62:   uint32_t BBRHCJW;",
          "63:   uint32_t BBRHPJR;",
          "64:   uint32_t BBRHCJR;",
          "65:   std::string DEMAIN;",
          "66:   uint32_t pAlertPAPP;",
          "67:   uint32_t pAlertI1;",
          "68:   uint32_t pAlertI2;",
          "69:   uint32_t pAlertI3;",
          "70:   uint32_t pAlertPPOT;",
          "71:   uint32_t pAlertRate;",
          "72:   uint32_t pAlertColor;",
          "73:   uint32_t pAlertEJP;",
          "74:   uint32_t pAlertDemain;",
          "75:   std::string rate;",
          "76:   std::string tariff;",
          "77:   std::string color;",
          "78:   time_t  last;",
          "79:   bool    triphase;",
          "80:   bool    withPAPP;  //For meters with no PAPP",
          "81:   int     CRCmode1; // really a bool, but with a special \"un-initialized state\"",
          "82:   _tTeleinfo()",
          "84:    ISOUSC = 0;",
          "85:    IINST = 0;",
          "86:    IINST1 = 0;",
          "87:    IINST2 = 0;",
          "88:    IINST3 = 0;",
          "89:    PPOT = 0;",
          "90:    ADPS = 0;",
          "91:    PAPP = 0;",
          "92:    BASE = 0;",
          "93:    HCHC = 0;",
          "94:    HCHP = 0;",
          "95:    PEJP = 0;",
          "96:    EJPHN = 0;",
          "97:    EJPHPM = 0;",
          "98:    BBRHPJB = 0;",
          "99:    BBRHCJB = 0;",
          "100:    BBRHPJW = 0;",
          "101:    BBRHCJW = 0;",
          "102:    BBRHPJR = 0;",
          "103:    BBRHCJR = 0;",
          "104:    pAlertPAPP = 10;",
          "105:    pAlertI1 = 10;",
          "106:    pAlertI2 = 10;",
          "107:    pAlertI3 = 10;",
          "108:    pAlertPPOT = 10;",
          "109:    pAlertRate = 10;",
          "110:    pAlertColor = 10;",
          "111:    pAlertEJP = 10;",
          "112:    pAlertDemain = 10;",
          "113:    last = 0;",
          "114:    triphase = false;",
          "115:    withPAPP = false;",
          "116:    CRCmode1 = 255;  // means \"bool not initialized yet\", will be when running CRC Check for the first time",
          "117:   }",
          "118:  } Teleinfo;",
          "120:  void ProcessTeleinfo(Teleinfo &teleinfo);",
          "121:  void ProcessTeleinfo(const std::string &name, int rank, Teleinfo &teleinfo);",
          "122:  bool isCheckSumOk(const std::string &sLine, int &isMode1);",
          "",
          "---------------"
        ],
        "hardware/TeleinfoSerial.cpp||hardware/TeleinfoSerial.cpp": [
          "File: hardware/TeleinfoSerial.cpp -> hardware/TeleinfoSerial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <iostream>",
          "37: #include <string>",
          "43: CTeleinfoSerial::CTeleinfoSerial(const int ID, const std::string& devname, const int datatimeout, unsigned int baud_rate, const bool disable_crc, const int ratelimit)",
          "44: {",
          "45:  m_HwdID = ID;",
          "",
          "[Removed Lines]",
          "39: #ifdef _DEBUG",
          "40: #define DEBUG_TeleinfoSerial",
          "41: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: {",
          "76:  m_bufferpos = 0;",
          "77:  m_counter = 0;",
          "78: }",
          "81: bool CTeleinfoSerial::StartHardware()",
          "82: {",
          "83:  StartHeartbeatThread();",
          "85:  try",
          "86:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:  m_teleinfo.CRCmode1 = 255;  // Guess the CRC mode at first run",
          "81:  Init();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:  }",
          "90:  catch (boost::exception & e)",
          "91:  {",
          "98:   _log.Log(LOG_STATUS, \"Teleinfo: Serial port open failed, let's retry with CharSize:8 ...\");",
          "102:    _log.Log(LOG_STATUS, \"Teleinfo: Serial port open successfully with CharSize:8 ...\");",
          "103:   }",
          "104:   catch (...) {",
          "",
          "[Removed Lines]",
          "93: #ifdef DEBUG_TeleinfoSerial",
          "94:   _log.Log(LOG_ERROR, \"-----------------\\n%s\\n-----------------\", boost::diagnostic_information(e).c_str());",
          "95: #else",
          "96:   (void)e;",
          "97: #endif",
          "100:   try {",
          "101:    open(m_szSerialPort,m_iBaudRate,m_iOptParity,boost::asio::serial_port_base::character_size(8));",
          "",
          "[Added Lines]",
          "90:   _log.Debug(DEBUG_HARDWARE, \"-----------------\\n%s\\n-----------------\", boost::diagnostic_information(e).c_str());",
          "93:   try {",
          "94:    open(m_szSerialPort, m_iBaudRate, m_iOptParity, boost::asio::serial_port_base::character_size(8));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:  setReadCallback(boost::bind(&CTeleinfoSerial::readCallback, this, _1, _2));",
          "115:  m_bIsStarted = true;",
          "116:  sOnConnected(this);",
          "119:  if (m_bDisableCRC)",
          "120:   _log.Log(LOG_STATUS, \"(%s) CRC checks on incoming data are disabled\", m_Name.c_str());",
          "",
          "[Removed Lines]",
          "117:  teleinfo.CRCmode1 = 255;  // Guess the CRC mode at first run",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:  std::string label, vString;",
          "158:  std::vector<std::string> splitresults;",
          "159:  unsigned long value;",
          "168:  {",
          "172:   return;",
          "173:  }",
          "178:  {",
          "180:   return;",
          "181:  }",
          "",
          "[Removed Lines]",
          "160:  const char* line = m_buffer;",
          "162:  #ifdef DEBUG_TeleinfoSerial",
          "163:  _log.Log(LOG_NORM,\"Frame : #%s#\", line);",
          "164:  #endif",
          "167:  if ((strlen(line)<4) || (line[0] == 0x0a))",
          "169:   #ifdef DEBUG_TeleinfoSerial",
          "170:   _log.Log(LOG_NORM,\"Frame #%s# ignored, too short or irrelevant\", line);",
          "171:   #endif",
          "176:  StringSplit(line, \" \", splitresults);",
          "177:  if (splitresults.size() <3)",
          "179:   _log.Log(LOG_ERROR,\"Frame #%s# passed the checksum test but failed analysis\", line);",
          "",
          "[Added Lines]",
          "152:  std::string sline(m_buffer);",
          "154:  _log.Debug(DEBUG_HARDWARE, \"Frame : #%s#\", sline.c_str());",
          "157:  if ((sline.size() < 4) || (sline[0] == 0x0a))",
          "159:   _log.Debug(DEBUG_HARDWARE, \"Frame #%s# ignored, too short or irrelevant\", sline.c_str());",
          "164:  StringSplit(sline, \" \", splitresults);",
          "165:  if (splitresults.size() < 3)",
          "167:   _log.Log(LOG_ERROR, \"Frame #%s# passed the checksum test but failed analysis\", sline.c_str());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:  vString = splitresults[1];",
          "185:  value = atoi(splitresults[1].c_str());",
          "190:  else if (label == \"PAPP\")",
          "191:  {",
          "194:  }",
          "213:  else if (label == \"MOTDETAT\") m_counter++;",
          "217:  {",
          "218:   m_counter = 0;",
          "223:   mytime(&m_LastHeartbeat);// keep heartbeat happy",
          "224:  }",
          "225: }",
          "",
          "[Removed Lines]",
          "187:  if (label == \"ADCO\") teleinfo.ADCO = vString;",
          "188:  else if (label == \"OPTARIF\") teleinfo.OPTARIF = vString;",
          "189:  else if (label == \"ISOUSC\") teleinfo.ISOUSC = value;",
          "192:   teleinfo.PAPP = value;",
          "193:   teleinfo.withPAPP = true;",
          "195:  else if (label == \"PTEC\")  teleinfo.PTEC = vString;",
          "196:  else if (label == \"IINST\") teleinfo.IINST = value;",
          "197:  else if (label == \"BASE\") teleinfo.BASE = value;",
          "198:  else if (label == \"HCHC\") teleinfo.HCHC = value;",
          "199:  else if (label == \"HCHP\") teleinfo.HCHP = value;",
          "200:  else if (label == \"EJPHPM\") teleinfo.EJPHPM = value;",
          "201:  else if (label == \"EJPHN\") teleinfo.EJPHN = value;",
          "202:  else if (label == \"BBRHCJB\") teleinfo.BBRHCJB = value;",
          "203:  else if (label == \"BBRHPJB\") teleinfo.BBRHPJB = value;",
          "204:  else if (label == \"BBRHCJW\") teleinfo.BBRHCJW = value;",
          "205:  else if (label == \"BBRHPJW\") teleinfo.BBRHPJW = value;",
          "206:  else if (label == \"BBRHCJR\") teleinfo.BBRHCJR = value;",
          "207:  else if (label == \"BBRHPJR\") teleinfo.BBRHPJR = value;",
          "208:  else if (label == \"DEMAIN\") teleinfo.DEMAIN = vString;",
          "209:  else if (label == \"IINST1\") teleinfo.IINST1 = value;",
          "210:  else if (label == \"IINST2\") teleinfo.IINST2 = value;",
          "211:  else if (label == \"IINST3\") teleinfo.IINST3 = value;",
          "212:  else if (label == \"PPOT\")  teleinfo.PPOT = value;",
          "216:  if (m_counter >= m_iBaudRate/600)",
          "219:   #ifdef DEBUG_TeleinfoSerial",
          "220:   _log.Log(LOG_NORM,\"(%s) Teleinfo frame complete, PAPP: %i, PTEC: %s\", m_Name.c_str(), teleinfo.PAPP, teleinfo.PTEC.c_str());",
          "221:   #endif",
          "222:   ProcessTeleinfo(teleinfo);",
          "",
          "[Added Lines]",
          "175:  if (label == \"ADCO\") m_teleinfo.ADCO = vString;",
          "176:  else if (label == \"OPTARIF\") m_teleinfo.OPTARIF = vString;",
          "177:  else if (label == \"ISOUSC\") m_teleinfo.ISOUSC = value;",
          "180:   m_teleinfo.PAPP = value;",
          "181:   m_teleinfo.withPAPP = true;",
          "183:  else if (label == \"PTEC\")  m_teleinfo.PTEC = vString;",
          "184:  else if (label == \"IINST\") m_teleinfo.IINST = value;",
          "185:  else if (label == \"BASE\") m_teleinfo.BASE = value;",
          "186:  else if (label == \"HCHC\") m_teleinfo.HCHC = value;",
          "187:  else if (label == \"HCHP\") m_teleinfo.HCHP = value;",
          "188:  else if (label == \"EJPHPM\") m_teleinfo.EJPHPM = value;",
          "189:  else if (label == \"EJPHN\") m_teleinfo.EJPHN = value;",
          "190:  else if (label == \"BBRHCJB\") m_teleinfo.BBRHCJB = value;",
          "191:  else if (label == \"BBRHPJB\") m_teleinfo.BBRHPJB = value;",
          "192:  else if (label == \"BBRHCJW\") m_teleinfo.BBRHCJW = value;",
          "193:  else if (label == \"BBRHPJW\") m_teleinfo.BBRHPJW = value;",
          "194:  else if (label == \"BBRHCJR\") m_teleinfo.BBRHCJR = value;",
          "195:  else if (label == \"BBRHPJR\") m_teleinfo.BBRHPJR = value;",
          "196:  else if (label == \"DEMAIN\") m_teleinfo.DEMAIN = vString;",
          "197:  else if (label == \"IINST1\") m_teleinfo.IINST1 = value;",
          "198:  else if (label == \"IINST2\") m_teleinfo.IINST2 = value;",
          "199:  else if (label == \"IINST3\") m_teleinfo.IINST3 = value;",
          "200:  else if (label == \"PPOT\")  m_teleinfo.PPOT = value;",
          "204:  if (m_counter >= m_iBaudRate / 600)",
          "207:   _log.Debug(DEBUG_HARDWARE, \"(%s) Teleinfo frame complete, PAPP: %i, PTEC: %s\", m_Name.c_str(), m_teleinfo.PAPP, m_teleinfo.PTEC.c_str());",
          "208:   ProcessTeleinfo(m_teleinfo);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "228: void CTeleinfoSerial::ParseData(const char *pData, int Len)",
          "229: {",
          "230:  int ii = 0;",
          "232:  {",
          "233:   const char c = pData[ii];",
          "",
          "[Removed Lines]",
          "231:  while (ii<Len)",
          "",
          "[Added Lines]",
          "217:  while (ii < Len)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "246:     m_buffer[m_bufferpos] = 0;",
          "250:     MatchLine();",
          "252:    m_bufferpos = 0;",
          "253:   }",
          "254:   else",
          "",
          "[Removed Lines]",
          "249:    if ((m_bDisableCRC) || isCheckSumOk(teleinfo.CRCmode1))",
          "",
          "[Added Lines]",
          "235:    if ((m_bDisableCRC) || isCheckSumOk(std::string(m_buffer), m_teleinfo.CRCmode1))",
          "236:    {",
          "238:    }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "259:  }",
          "260: }",
          "",
          "[Removed Lines]",
          "278: a \"checksum\" is calculated on the set of characters from the beginning of the label field to the end of the field given character SP included.",
          "279: We first make ??the sum of all ASCII codes of all characters.",
          "280: to avoid introduce ASCII (00 to 1F hex) functions, it retains only the six least significant bits of",
          "281: result (this translates into a logical AND between the amount previously calculated and 03Fh).",
          "282: Finally, we added 20 hexadecimal. The result will always be a printable ASCII character (sign, digit,",
          "283: capital letter) of from 0x20 to hexadecimal 0x5F",
          "285: Le \"checksum\" est calcule sur l'ensemble des caracteres allant du debut du champ etiquette a la fin du champ",
          "286: donnee, caractere SP inclus. On fait tout d'abord la somme des codes ASCII de tous ces caracteres. Pour eviter",
          "287: d'introduire des fonctions ASCII (00  1F en hexadcimal), on ne conserve que les six bits de poids faible du",
          "288: resultat obtenu (cette operation se traduit par un ET logique entre la somme precedemment calculee et 03Fh).",
          "289: Enfin, on ajoute 20 en hexadecimal. Le resultat sera donc toujours un caractre ASCII imprimable (signe, chiffre,",
          "290: lettre majuscule) allant de 20 a 5F en hexadcimal.",
          "292: Un deuxime mode de calcul existe qui prend aussi le caractre de sparation final dans le calcul.",
          "295: bool CTeleinfoSerial::isCheckSumOk(int &isMode1)",
          "296: {",
          "297:  unsigned int checksum, mode1 = 0x00, mode2 = 0x00;",
          "298:  int i;",
          "299:  bool line_ok = false;",
          "301:  checksum = m_buffer[strlen((char*)m_buffer) - 1];",
          "302:  for (i = 0; i < int(strlen((char*)m_buffer)) - 2; i++)",
          "303:  {",
          "304:   mode1 += m_buffer[i];",
          "305:  }",
          "306:  mode2 = ((mode1 + m_buffer[i]) & 0x3F) + 0x20;",
          "307:  mode1 = (mode1 & 0x3F) + 0x20;",
          "309:  if (mode1 == checksum)",
          "310:  {",
          "311:   line_ok = true;",
          "312:   if (isMode1 != (int)true)// This will evaluate to false when isMode still equals to 255 at second run",
          "313:   {",
          "314:    isMode1 = true;",
          "315:    _log.Log(LOG_STATUS, \"(%s) Teleinfo CRC check mode set to 1\", m_Name.c_str());",
          "316:   }",
          "317:  }",
          "318:  else if (mode2 == checksum)",
          "319:  {",
          "320:   line_ok = true;",
          "321:   if (isMode1 != false)  // if this is first run, will still be at 255",
          "322:   {",
          "323:    isMode1 = false;",
          "324:    _log.Log(LOG_STATUS, \"(%s) TeleinfoCRC check mode set to 2\", m_Name.c_str());",
          "325:   }",
          "326:  }",
          "327:  else       // Don't send an error on the first run as the line is probably truncated, wait for mode to be initialised",
          "328:  if (isMode1 != 255)",
          "329:   _log.Log(LOG_ERROR, \"(%s) CRC check failed on Teleinfo line '%s' using both modes 1 and 2. Line skipped.\", m_Name.c_str(), m_buffer);",
          "331:  #ifdef DEBUG_TeleinfoSerial",
          "332:  if (line_ok) _log.Log(LOG_NORM, \"(%s) CRC check passed on Teleinfo line '%s'. Line processed\", m_Name.c_str(), m_buffer);",
          "333:  #endif",
          "334:  return line_ok;",
          "335: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/TeleinfoSerial.h||hardware/TeleinfoSerial.h": [
          "File: hardware/TeleinfoSerial.h -> hardware/TeleinfoSerial.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: class CTeleinfoSerial : public CTeleinfoBase, AsyncSerial",
          "33: {",
          "47: private:",
          "62: };",
          "",
          "[Removed Lines]",
          "34:  public:",
          "35:   CTeleinfoSerial(const int ID, const std::string& devname, const int datatimeout, unsigned int baud_rate,",
          "36:    const bool disable_crc, const int ratelimit);",
          "37:   ~CTeleinfoSerial();",
          "38:   bool WriteToHardware(const char *pdata, const unsigned char length) override;",
          "39:  private:",
          "40:   bool StartHardware() override;",
          "41:   bool StopHardware() override;",
          "42:   void Init();",
          "43:   void MatchLine();",
          "44:   void ParseData(const char *pData, int Len);",
          "45:   bool isCheckSumOk(int &isMode1);",
          "46:   void readCallback(const char *data, size_t len);",
          "48:   std::string m_szSerialPort;",
          "49:   Teleinfo teleinfo;",
          "51:   unsigned int m_iBaudRate;",
          "52:   bool m_bDisableCRC;",
          "53:   boost::asio::serial_port_base::parity m_iOptParity;",
          "54:   boost::asio::serial_port_base::character_size m_iOptCsize;",
          "55:   boost::asio::serial_port_base::flow_control m_iOptFlow;",
          "56:   boost::asio::serial_port_base::stop_bits m_iOptStop;",
          "58:   unsigned int m_counter;",
          "60:   char m_buffer[1024];",
          "61:   int m_bufferpos;",
          "",
          "[Added Lines]",
          "34: public:",
          "35:  CTeleinfoSerial(const int ID, const std::string& devname, const int datatimeout, unsigned int baud_rate,",
          "36:   const bool disable_crc, const int ratelimit);",
          "37:  ~CTeleinfoSerial();",
          "38:  bool WriteToHardware(const char *pdata, const unsigned char length) override;",
          "40:  bool StartHardware() override;",
          "41:  bool StopHardware() override;",
          "42:  void Init();",
          "43:  void MatchLine();",
          "44:  void ParseData(const char *pData, int Len);",
          "45:  void readCallback(const char *data, size_t len);",
          "46: private:",
          "47:  std::string m_szSerialPort;",
          "48:  Teleinfo m_teleinfo;",
          "50:  unsigned int m_iBaudRate;",
          "51:  bool m_bDisableCRC;",
          "52:  boost::asio::serial_port_base::parity m_iOptParity;",
          "53:  boost::asio::serial_port_base::character_size m_iOptCsize;",
          "54:  boost::asio::serial_port_base::flow_control m_iOptFlow;",
          "55:  boost::asio::serial_port_base::stop_bits m_iOptStop;",
          "57:  unsigned int m_counter;",
          "59:  char m_buffer[1024];",
          "60:  int m_bufferpos;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "063857839ae8de43813ba7a472aee02b7a2da506",
      "candidate_info": {
        "commit_hash": "063857839ae8de43813ba7a472aee02b7a2da506",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/063857839ae8de43813ba7a472aee02b7a2da506",
        "files": [
          "main/RFXNames.cpp"
        ],
        "message": "On/Off actions where incorrectly handled when setting the a RGB/W Color",
        "before_after_code_files": [
          "main/RFXNames.cpp||main/RFXNames.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3507:   (lstatus == \"Panic\") ||",
          "3508:   (lstatus == \"Light On\") ||",
          "3509:   (lstatus == \"Light 2 On\") ||",
          "3510:   (lstatus == \"Open inline relay\") ||",
          "3511:   (lstatus.find(\"Set Level\") != std::string::npos) ||",
          "3512:   (lstatus.find(\"Set Group Level\") != std::string::npos) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3510:   (lstatus == \"Set Color\") ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17a58a52b8ec53b87a500700b07fb570eb43ded3",
      "candidate_info": {
        "commit_hash": "17a58a52b8ec53b87a500700b07fb570eb43ded3",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/17a58a52b8ec53b87a500700b07fb570eb43ded3",
        "files": [
          "msbuild/domoticz.vcxproj"
        ],
        "message": "Reverting Target Platform for AppVeyor",
        "before_after_code_files": [
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     <ProjectGuid>{6AD96441-5B2C-467B-AAB6-A1B8368D503A}</ProjectGuid>",
          "15:     <Keyword>Win32Proj</Keyword>",
          "16:     <RootNamespace>domoticz</RootNamespace>",
          "18:   </PropertyGroup>",
          "19:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />",
          "20:   <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">",
          "",
          "[Removed Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>",
          "",
          "[Added Lines]",
          "17:     <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae76889d72bd83870a29db3b473b53e297fd9a91",
      "candidate_info": {
        "commit_hash": "ae76889d72bd83870a29db3b473b53e297fd9a91",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/ae76889d72bd83870a29db3b473b53e297fd9a91",
        "files": [
          "hardware/plugins/PluginTransports.cpp",
          "hardware/plugins/PythonObjects.cpp",
          "hardware/plugins/PythonObjects.h"
        ],
        "message": "Add Parent member to Connection",
        "before_after_code_files": [
          "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp",
          "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp",
          "hardware/plugins/PythonObjects.h||hardware/plugins/PythonObjects.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp": [
          "File: hardware/plugins/PluginTransports.cpp -> hardware/plugins/PluginTransports.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:    pConnection->Address = PyUnicode_FromString(sAddress.c_str());",
          "193:    Py_XDECREF(pConnection->Port);",
          "194:    pConnection->Port = PyUnicode_FromString(sPort.c_str());",
          "195:    pConnection->Transport = ((CConnection*)m_pConnection)->Transport;",
          "196:    Py_INCREF(pConnection->Transport);",
          "197:    pConnection->Protocol = ((CConnection*)m_pConnection)->Protocol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:    Py_XDECREF(pConnection->Parent);",
          "197:    pConnection->Parent = m_pConnection;",
          "198:    Py_INCREF(m_pConnection);",
          "",
          "---------------"
        ],
        "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp": [
          "File: hardware/plugins/PythonObjects.cpp -> hardware/plugins/PythonObjects.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:     if (!m_sql.m_bAcceptNewHardware)",
          "703:     {",
          "707:     }",
          "708:     else",
          "709:     {",
          "",
          "[Removed Lines]",
          "704: #ifdef _DEBUG",
          "705:      _log.Log(LOG_STATUS, \"(%s) Device creation failed, Domoticz settings prevent accepting new devices.\", self->pPlugin->m_Name.c_str());",
          "706: #endif",
          "",
          "[Added Lines]",
          "704:      _log.Log(LOG_ERROR, \"(%s) Device creation failed, Domoticz settings prevent accepting new devices.\", self->pPlugin->m_Name.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1081:   Py_XDECREF(self->LastSeen);",
          "1082:   Py_XDECREF(self->Transport);",
          "1083:   Py_XDECREF(self->Protocol);",
          "1085:   if (self->pTransport)",
          "1086:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082:   Py_XDECREF(self->Parent);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1146:      Py_DECREF(self);",
          "1147:      return NULL;",
          "1148:     }",
          "1149:     self->pPlugin = NULL;",
          "1150:     self->pTransport = NULL;",
          "1151:     self->pProtocol = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:     self->Parent = Py_None;",
          "1150:     Py_INCREF(Py_None);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1410:  PyObject * CConnection_str(CConnection * self)",
          "1411:  {",
          "1412:   if (self->pTransport)",
          "1413:   {",
          "1414:    time_t tLastSeen = self->pTransport->LastSeen();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1415:   std::string  sParent = \"None\";",
          "1416:   if (self->Parent != Py_None)",
          "1417:   {",
          "1418:    sParent = PyUnicode_AsUTF8(((CConnection*)self->Parent)->Name);",
          "1419:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1416:    localtime_r(&tLastSeen, &ltime);",
          "1417:    char date[32];",
          "1418:    strftime(date, sizeof(date), \"%Y-%m-%d %H:%M:%S\", &ltime);",
          "1420:     self->Name, self->Transport, self->Protocol, self->Address, self->Port, self->Baud,",
          "1421:     (self->pTransport ? self->pTransport->TotalBytes() : -1),",
          "1423:    return pRetVal;",
          "1424:   }",
          "1425:   else",
          "1426:   {",
          "1429:    return pRetVal;",
          "1430:   }",
          "1431:  }",
          "",
          "[Removed Lines]",
          "1419:    PyObject* pRetVal = PyUnicode_FromFormat(\"Name: '%U', Transport: '%U', Protocol: '%U', Address: '%U', Port: '%U', Baud: %d, Bytes: %d, Connected: %s, Last Seen: %s\",",
          "1422:     (self->pTransport ? (self->pTransport->IsConnected() ? \"True\" : \"False\") : \"False\"), date);",
          "1427:    PyObject* pRetVal = PyUnicode_FromFormat(\"Name: '%U', Transport: '%U', Protocol: '%U', Address: '%U', Port: '%U', Baud: %d, Connected: False\",",
          "1428:     self->Name, self->Transport, self->Protocol, self->Address, self->Port, self->Baud);",
          "",
          "[Added Lines]",
          "1428:    PyObject* pRetVal = PyUnicode_FromFormat(\"Name: '%U', Transport: '%U', Protocol: '%U', Address: '%U', Port: '%U', Baud: %d, Bytes: %d, Connected: %s, Last Seen: %s, Parent: '%s'\",",
          "1431:     (self->pTransport ? (self->pTransport->IsConnected() ? \"True\" : \"False\") : \"False\"), date, sParent.c_str());",
          "1436:    PyObject* pRetVal = PyUnicode_FromFormat(\"Name: '%U', Transport: '%U', Protocol: '%U', Address: '%U', Port: '%U', Baud: %d, Connected: False, Parent: '%s'\",",
          "1437:     self->Name, self->Transport, self->Protocol, self->Address, self->Port, self->Baud, sParent.c_str());",
          "",
          "---------------"
        ],
        "hardware/plugins/PythonObjects.h||hardware/plugins/PythonObjects.h": [
          "File: hardware/plugins/PythonObjects.h -> hardware/plugins/PythonObjects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   CPluginTransport* pTransport;",
          "205:   PyObject*   Protocol;",
          "206:   CPluginProtocol* pProtocol;",
          "207:  } CConnection;",
          "209:  void CConnection_dealloc(CConnection* self);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:   PyObject*   Parent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   { \"Address\", T_OBJECT, offsetof(CConnection, Address), READONLY, \"Address\" },",
          "225:   { \"Port\", T_OBJECT, offsetof(CConnection, Port), READONLY, \"Port\" },",
          "226:   { \"Baud\", T_INT, offsetof(CConnection, Baud), READONLY, \"Baud\" },",
          "228:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:   { \"Parent\", T_OBJECT, offsetof(CConnection, Parent), READONLY, \"Parent connection\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "600cb678cfa86f1ddfacfdb62c316c710f8ca1ca",
      "candidate_info": {
        "commit_hash": "600cb678cfa86f1ddfacfdb62c316c710f8ca1ca",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/600cb678cfa86f1ddfacfdb62c316c710f8ca1ca",
        "files": [
          "main/SQLHelper.cpp",
          "main/SQLHelper.h",
          "main/WebServer.cpp"
        ],
        "message": "Preparation for custom meter dividers",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h",
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8421:  return true;",
          "8422: }",
          "8425:  std::map<std::string, std::string> optionsMap;",
          "8426:  if (!options.empty()) {",
          "",
          "[Removed Lines]",
          "8424: std::map<std::string, std::string> CSQLHelper::BuildDeviceOptions(const std::string & options, const bool decode) {",
          "",
          "[Added Lines]",
          "8424: std::map<std::string, std::string> CSQLHelper::BuildDeviceOptions(const std::string & options, const bool decode)",
          "8425: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8447:  return optionsMap;",
          "8448: }",
          "8451:  std::map<std::string, std::string> optionsMap;",
          "8453:  if (idx.empty()) {",
          "",
          "[Removed Lines]",
          "8450: std::map<std::string, std::string> CSQLHelper::GetDeviceOptions(const std::string & idx) {",
          "",
          "[Added Lines]",
          "8451: std::map<std::string, std::string> CSQLHelper::GetDeviceOptions(const std::string & idx)",
          "8452: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8465:  return optionsMap;",
          "8466: }",
          "8469:  std::string options;",
          "8470:  int count = optionsMap.size();",
          "8471:  if (count > 0) {",
          "",
          "[Removed Lines]",
          "8468: std::string CSQLHelper::FormatDeviceOptions(const std::map<std::string, std::string> & optionsMap) {",
          "",
          "[Added Lines]",
          "8470: std::string CSQLHelper::FormatDeviceOptions(const std::map<std::string, std::string> & optionsMap)",
          "8471: {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8488:  return options;",
          "8489: }",
          "8492:  if (idx < 1) {",
          "8493:   _log.Log(LOG_ERROR, \"Cannot set options on device %\" PRIu64 \"\", idx);",
          "8494:   return false;",
          "",
          "[Removed Lines]",
          "8491: bool CSQLHelper::SetDeviceOptions(const uint64_t idx, const std::map<std::string, std::string> & optionsMap) {",
          "",
          "[Added Lines]",
          "8494: bool CSQLHelper::SetDeviceOptions(const uint64_t idx, const std::map<std::string, std::string> & optionsMap)",
          "8495: {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8509:  }",
          "8510:  return true;",
          "8511: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8517: float CSQLHelper::GetCounterDivider(const int metertype, const int dType, const float DefaultValue)",
          "8518: {",
          "8519:  float divider = float(DefaultValue);",
          "8520:  if (divider == 0)",
          "8521:  {",
          "8522:   int tValue;",
          "8523:   switch (metertype)",
          "8524:   {",
          "8525:   case MTYPE_ENERGY:",
          "8526:   case MTYPE_ENERGY_GENERATED:",
          "8527:    if (GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "8528:    {",
          "8529:     divider = float(tValue);",
          "8530:    }",
          "8531:    break;",
          "8532:   case MTYPE_GAS:",
          "8533:    if (GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "8534:    {",
          "8535:     divider = float(tValue);",
          "8536:    }",
          "8537:    break;",
          "8538:   case MTYPE_WATER:",
          "8539:    if (GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "8540:    {",
          "8541:     divider = float(tValue);",
          "8542:    }",
          "8543:    break;",
          "8544:   }",
          "8545:   if (dType == pTypeP1Gas)",
          "8546:    divider = 1000;",
          "8547:   else if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "8548:    divider *= 100.0f;",
          "8550:   if (divider == 0) divider = 1.0f;",
          "8551:  }",
          "8552:  return divider;",
          "8553: }",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:  std::map<std::string, std::string> GetDeviceOptions(const std::string & idx);",
          "407:  std::string FormatDeviceOptions(const std::map<std::string, std::string> & optionsMap);",
          "408:  bool SetDeviceOptions(const uint64_t idx, const std::map<std::string, std::string> & options);",
          "409: public:",
          "410:  std::string m_LastSwitchID; //for learning command",
          "411:  uint64_t m_LastSwitchRowID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:  float GetCounterDivider(const int metertype, const int dType, const float DefaultValue);",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9365:      }",
          "9366:      else if (dType == pTypeRFXMeter)",
          "9367:      {",
          "9371:       std::string ValueQuantity = options[\"ValueQuantity\"];",
          "9372:       std::string ValueUnits = options[\"ValueUnits\"];",
          "9386:       if (ValueQuantity.empty()) {",
          "9387:        ValueQuantity.assign(\"Count\");",
          "9388:       }",
          "",
          "[Removed Lines]",
          "9368:       float EnergyDivider = 1000.0f;",
          "9369:       float GasDivider = 100.0f;",
          "9370:       float WaterDivider = 100.0f;",
          "9373:       int tValue;",
          "9374:       if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "9375:       {",
          "9376:        EnergyDivider = float(tValue);",
          "9377:       }",
          "9378:       if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "9379:       {",
          "9380:        GasDivider = float(tValue);",
          "9381:       }",
          "9382:       if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "9383:       {",
          "9384:        WaterDivider = float(tValue);",
          "9385:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9409:        uint64_t total_real = total_max - total_min;",
          "9410:        sprintf(szTmp, \"%\" PRIu64, total_real);",
          "9413:        switch (metertype)",
          "9414:        {",
          "9415:        case MTYPE_ENERGY:",
          "9416:        case MTYPE_ENERGY_GENERATED:",
          "9418:         sprintf(szTmp, \"%g kWh\", musage);",
          "9419:         break;",
          "9420:        case MTYPE_GAS:",
          "9422:         sprintf(szTmp, \"%g m3\", musage);",
          "9423:         break;",
          "9424:        case MTYPE_WATER:",
          "9426:         sprintf(szTmp, \"%d Liter\", round(musage));",
          "9427:         break;",
          "9428:        case MTYPE_COUNTER:",
          "",
          "[Removed Lines]",
          "9412:        float musage = 0;",
          "9417:         musage = float(total_real) / EnergyDivider;",
          "9421:         musage = float(total_real) / GasDivider;",
          "9425:         musage = float(total_real) / (WaterDivider / 1000.0f);",
          "",
          "[Added Lines]",
          "9397:        float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "9398:        float musage = 0.0f;",
          "9403:         musage = float(total_real) / divider;",
          "9407:         musage = float(total_real) / divider;",
          "9411:         musage = float(total_real) / (divider / 1000.0f);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9446:       root[\"result\"][ii][\"ValueUnits\"] = \"\";",
          "9448:       double meteroffset = AddjValue;",
          "9449:       double dvalue = static_cast<double>(atof(sValue.c_str()));",
          "9451:       switch (metertype)",
          "9452:       {",
          "9453:       case MTYPE_ENERGY:",
          "9454:       case MTYPE_ENERGY_GENERATED:",
          "9456:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9457:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9458:        break;",
          "9459:       case MTYPE_GAS:",
          "9461:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9462:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9463:        break;",
          "9464:       case MTYPE_WATER:",
          "9466:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9467:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9468:        break;",
          "",
          "[Removed Lines]",
          "9455:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / EnergyDivider));",
          "9460:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / GasDivider));",
          "9465:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / WaterDivider));",
          "",
          "[Added Lines]",
          "9435:       float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "9443:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9448:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9453:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9483:      }",
          "9484:      else if ((dType == pTypeGeneral) && (dSubType == sTypeCounterIncremental))",
          "9485:      {",
          "9489:       std::string ValueQuantity = options[\"ValueQuantity\"];",
          "9490:       std::string ValueUnits = options[\"ValueUnits\"];",
          "9504:       if (ValueQuantity.empty()) {",
          "9505:        ValueQuantity.assign(\"Count\");",
          "9506:       }",
          "9507:       if (ValueUnits.empty()) {",
          "9508:        ValueUnits.assign(\"\");",
          "9509:       }",
          "9512:       time_t now = mytime(NULL);",
          "",
          "[Removed Lines]",
          "9486:       float EnergyDivider = 1000.0f;",
          "9487:       float GasDivider = 100.0f;",
          "9488:       float WaterDivider = 100.0f;",
          "9491:       int tValue;",
          "9492:       if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "9493:       {",
          "9494:        EnergyDivider = float(tValue);",
          "9495:       }",
          "9496:       if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "9497:       {",
          "9498:        GasDivider = float(tValue);",
          "9499:       }",
          "9500:       if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "9501:       {",
          "9502:        WaterDivider = float(tValue);",
          "9503:       }",
          "",
          "[Added Lines]",
          "9482:       float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9532:        {",
          "9533:        case MTYPE_ENERGY:",
          "9534:        case MTYPE_ENERGY_GENERATED:",
          "9536:         sprintf(szTmp, \"%g kWh\", musage);",
          "9537:         break;",
          "9538:        case MTYPE_GAS:",
          "9540:         sprintf(szTmp, \"%g m3\", musage);",
          "9541:         break;",
          "9542:        case MTYPE_WATER:",
          "9544:         sprintf(szTmp, \"%g m3\", musage);",
          "9545:         break;",
          "9546:        case MTYPE_COUNTER:",
          "",
          "[Removed Lines]",
          "9535:         musage = float(total_real) / EnergyDivider;",
          "9539:         musage = float(total_real) / GasDivider;",
          "9543:         musage = float(total_real) / WaterDivider;",
          "",
          "[Added Lines]",
          "9508:         musage = float(total_real) / divider;",
          "9512:         musage = float(total_real) / divider;",
          "9516:         musage = float(total_real) / divider;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9570:       {",
          "9571:       case MTYPE_ENERGY:",
          "9572:       case MTYPE_ENERGY_GENERATED:",
          "9574:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9575:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9576:        break;",
          "9577:       case MTYPE_GAS:",
          "9579:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9580:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9581:        break;",
          "9582:       case MTYPE_WATER:",
          "9584:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9585:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9586:        break;",
          "",
          "[Removed Lines]",
          "9573:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / EnergyDivider));",
          "9578:        sprintf(szTmp, \"%gm3\", meteroffset + (dvalue / GasDivider));",
          "9583:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / WaterDivider));",
          "",
          "[Added Lines]",
          "9546:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9551:        sprintf(szTmp, \"%gm3\", meteroffset + (dvalue / divider));",
          "9556:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9601:      }",
          "9602:      else if ((dType == pTypeGeneral) && (dSubType == sTypeManagedCounter))",
          "9603:      {",
          "9607:       std::string ValueQuantity = options[\"ValueQuantity\"];",
          "9608:       std::string ValueUnits = options[\"ValueUnits\"];",
          "9622:       if (ValueQuantity.empty()) {",
          "9623:        ValueQuantity.assign(\"Count\");",
          "9624:       }",
          "9625:       if (ValueUnits.empty()) {",
          "9626:        ValueUnits.assign(\"\");",
          "9627:       }",
          "9629:       std::vector<std::string> splitresults;",
          "9630:       StringSplit(sValue, \";\", splitresults);",
          "",
          "[Removed Lines]",
          "9604:       float EnergyDivider = 1000.0f;",
          "9605:       float GasDivider = 100.0f;",
          "9606:       float WaterDivider = 100.0f;",
          "9609:       int tValue;",
          "9610:       if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "9611:       {",
          "9612:        EnergyDivider = float(tValue);",
          "9613:       }",
          "9614:       if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "9615:       {",
          "9616:        GasDivider = float(tValue);",
          "9617:       }",
          "9618:       if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "9619:       {",
          "9620:        WaterDivider = float(tValue);",
          "9621:       }",
          "",
          "[Added Lines]",
          "9585:       float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9652:       {",
          "9653:       case MTYPE_ENERGY:",
          "9654:       case MTYPE_ENERGY_GENERATED:",
          "9656:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9657:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9658:        break;",
          "9659:       case MTYPE_GAS:",
          "9661:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9662:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9663:        break;",
          "9664:       case MTYPE_WATER:",
          "9666:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9667:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9668:        break;",
          "",
          "[Removed Lines]",
          "9655:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / EnergyDivider));",
          "9660:        sprintf(szTmp, \"%gm3\", meteroffset + (dvalue / GasDivider));",
          "9665:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / WaterDivider));",
          "",
          "[Added Lines]",
          "9613:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9618:        sprintf(szTmp, \"%gm3\", meteroffset + (dvalue / divider));",
          "9623:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9683:      }",
          "9684:      else if (dType == pTypeYouLess)",
          "9685:      {",
          "9689:       std::string ValueQuantity = options[\"ValueQuantity\"];",
          "9690:       std::string ValueUnits = options[\"ValueUnits\"];",
          "9691:       float musage = 0;",
          "9705:       if (ValueQuantity.empty()) {",
          "9706:        ValueQuantity.assign(\"Count\");",
          "9707:       }",
          "9708:       if (ValueUnits.empty()) {",
          "9709:        ValueUnits.assign(\"\");",
          "9710:       }",
          "9713:       time_t now = mytime(NULL);",
          "",
          "[Removed Lines]",
          "9686:       float EnergyDivider = 1000.0f;",
          "9687:       float GasDivider = 100.0f;",
          "9688:       float WaterDivider = 100.0f;",
          "9692:       int tValue;",
          "9693:       if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "9694:       {",
          "9695:        EnergyDivider = float(tValue);",
          "9696:       }",
          "9697:       if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "9698:       {",
          "9699:        GasDivider = float(tValue);",
          "9700:       }",
          "9701:       if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "9702:       {",
          "9703:        WaterDivider = float(tValue);",
          "9704:       }",
          "",
          "[Added Lines]",
          "9653:       float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "9735:        {",
          "9736:        case MTYPE_ENERGY:",
          "9737:        case MTYPE_ENERGY_GENERATED:",
          "9739:         sprintf(szTmp, \"%g kWh\", musage);",
          "9740:         break;",
          "9741:        case MTYPE_GAS:",
          "9743:         sprintf(szTmp, \"%g m3\", musage);",
          "9744:         break;",
          "9745:        case MTYPE_WATER:",
          "9747:         sprintf(szTmp, \"%g m3\", musage);",
          "9748:         break;",
          "9749:        case MTYPE_COUNTER:",
          "",
          "[Removed Lines]",
          "9738:         musage = float(total_real) / EnergyDivider;",
          "9742:         musage = float(total_real) / GasDivider;",
          "9746:         musage = float(total_real) / WaterDivider;",
          "",
          "[Added Lines]",
          "9681:         musage = float(total_real) / divider;",
          "9685:         musage = float(total_real) / divider;",
          "9689:         musage = float(total_real) / divider;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "9768:       {",
          "9769:       case MTYPE_ENERGY:",
          "9770:       case MTYPE_ENERGY_GENERATED:",
          "9772:        sprintf(szTmp, \"%.03f\", musage);",
          "9773:        break;",
          "9774:       case MTYPE_GAS:",
          "9775:       case MTYPE_WATER:",
          "9777:        sprintf(szTmp, \"%.03f\", musage);",
          "9778:        break;",
          "9779:       case MTYPE_COUNTER:",
          "",
          "[Removed Lines]",
          "9771:        musage = float(total_actual) / EnergyDivider;",
          "9776:        musage = float(total_actual) / GasDivider;",
          "",
          "[Added Lines]",
          "9714:        musage = float(total_actual) / divider;",
          "9719:        musage = float(total_actual) / divider;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "9793:       {",
          "9794:       case MTYPE_ENERGY:",
          "9795:       case MTYPE_ENERGY_GENERATED:",
          "9797:        sprintf(szTmp, \"%g kWh %s Watt\", musage, splitresults[1].c_str());",
          "9798:        break;",
          "9799:       case MTYPE_GAS:",
          "9801:        sprintf(szTmp, \"%g m3\", musage);",
          "9802:        break;",
          "9803:       case MTYPE_WATER:",
          "9805:        sprintf(szTmp, \"%g m3\", musage);",
          "9806:        break;",
          "9807:       case MTYPE_COUNTER:",
          "",
          "[Removed Lines]",
          "9796:        musage = float(acounter) / EnergyDivider;",
          "9800:        musage = float(acounter) / GasDivider;",
          "9804:        musage = float(acounter) / WaterDivider;",
          "",
          "[Added Lines]",
          "9739:        musage = float(acounter) / divider;",
          "9743:        musage = float(acounter) / divider;",
          "9747:        musage = float(acounter) / divider;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "9944:      {",
          "9945:       root[\"result\"][ii][\"SwitchTypeVal\"] = MTYPE_GAS;",
          "9949:       time_t now = mytime(NULL);",
          "9950:       struct tm ltime;",
          "",
          "[Removed Lines]",
          "9947:       float GasDivider = 1000.0f;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "9955:       std::vector<std::vector<std::string> > result2;",
          "9957:       strcpy(szTmp, \"0\");",
          "9958:       result2 = m_sql.safe_query(\"SELECT MIN(Value) FROM Meter WHERE (DeviceRowID='%q' AND Date>='%q')\",",
          "9959:        sd[0].c_str(), szDate);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9899:       float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "9965:        uint64_t gasactual = std::stoull(sValue);",
          "9966:        uint64_t total_real_gas = gasactual - total_min_gas;",
          "9969:        sprintf(szTmp, \"%.03f\", musage);",
          "9970:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9972:        sprintf(szTmp, \"%.03f m3\", musage);",
          "9973:        root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9974:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9976:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9977:       }",
          "9978:       else",
          "",
          "[Removed Lines]",
          "9968:        double musage = double(gasactual) / GasDivider;",
          "9971:        musage = double(total_real_gas) / GasDivider;",
          "9975:        sprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / GasDivider);",
          "",
          "[Added Lines]",
          "9912:        double musage = double(gasactual) / divider;",
          "9915:        musage = double(total_real_gas) / divider;",
          "9919:        sprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "9981:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9982:        sprintf(szTmp, \"%.03f m3\", 0.0f);",
          "9983:        root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9985:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9986:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9987:       }",
          "",
          "[Removed Lines]",
          "9984:        sprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / GasDivider);",
          "",
          "[Added Lines]",
          "9928:        sprintf(szTmp, \"%.03f\", atof(sValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "10075:         sd[0].c_str(), szDate);",
          "10076:        if (!result2.empty())",
          "10077:        {",
          "10089:         std::vector<std::string> sd2 = result2[0];",
          "10092:         sprintf(szData, \"%g kWh\", total);",
          "10093:         root[\"result\"][ii][\"Data\"] = szData;",
          "",
          "[Removed Lines]",
          "10078:         float EnergyDivider = 1000.0f;",
          "10079:         int tValue;",
          "10080:         if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "10081:         {",
          "10082:          EnergyDivider = float(tValue);",
          "10083:         }",
          "10084:         if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "10085:         {",
          "10086:          EnergyDivider *= 100.0;",
          "10087:         }",
          "10090:         double minimum = atof(sd2[0].c_str()) / EnergyDivider;",
          "",
          "[Added Lines]",
          "10022:         float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "10025:         double minimum = atof(sd2[0].c_str()) / divider;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "13021:    struct tm tm1;",
          "13022:    localtime_r(&now, &tm1);",
          "13025:     idx);",
          "13026:    if (result.empty())",
          "13027:     return;",
          "",
          "[Removed Lines]",
          "13024:    result = m_sql.safe_query(\"SELECT Type, SubType, SwitchType, AddjValue, AddjMulti, Options FROM DeviceStatus WHERE (ID == %\" PRIu64 \")\",",
          "",
          "[Added Lines]",
          "12959:    result = m_sql.safe_query(\"SELECT Type, SubType, SwitchType, AddjValue, AddjMulti, AddjValue2, Options FROM DeviceStatus WHERE (ID == %\" PRIu64 \")\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "13050:    double AddjValue = atof(result[0][3].c_str());",
          "13051:    double AddjMulti = atof(result[0][4].c_str());",
          "13053:    std::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sOptions);",
          "13055:    std::string dbasetable = \"\";",
          "13056:    if (srange == \"day\") {",
          "13057:     if (sensor == \"temp\")",
          "",
          "[Removed Lines]",
          "13052:    std::string sOptions = result[0][5].c_str();",
          "",
          "[Added Lines]",
          "12987:    double AddjValue2 = atof(result[0][5].c_str());",
          "12988:    std::string sOptions = result[0][6].c_str();",
          "12991:    float divider = m_sql.GetCounterDivider(int(metertype), int(dType), float(AddjValue2));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "13719:       root[\"ValueQuantity\"] = options[\"ValueQuantity\"];",
          "13720:       root[\"ValueUnits\"] = options[\"ValueUnits\"];",
          "13744:       bool bHaveUsage = true;",
          "13745:       result = m_sql.safe_query(\"SELECT MIN([Usage]), MAX([Usage]) FROM %s WHERE (DeviceRowID==%\" PRIu64 \")\", dbasetable.c_str(), idx);",
          "",
          "[Removed Lines]",
          "13722:       float EnergyDivider = 1000.0f;",
          "13723:       float GasDivider = 100.0f;",
          "13724:       float WaterDivider = 100.0f;",
          "13725:       int tValue;",
          "13726:       if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "13727:       {",
          "13728:        EnergyDivider = float(tValue);",
          "13729:       }",
          "13730:       if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "13731:       {",
          "13732:        GasDivider = float(tValue);",
          "13733:       }",
          "13734:       if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "13735:       {",
          "13736:        WaterDivider = float(tValue);",
          "13737:       }",
          "13738:       if (dType == pTypeP1Gas)",
          "13739:        GasDivider = 1000;",
          "13740:       else if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "13741:        EnergyDivider *= 100.0f;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "13770:       {",
          "13772:        if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "13774:       }",
          "13775:       root[\"method\"] = method;",
          "13776:       bool bHaveFirstValue = false;",
          "",
          "[Removed Lines]",
          "13773:         EnergyDivider /= 100.0f;",
          "",
          "[Added Lines]",
          "13690:         divider /= 100.0f;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "13813:            {",
          "13814:            case MTYPE_ENERGY:",
          "13815:            case MTYPE_ENERGY_GENERATED:",
          "13817:             break;",
          "13818:            case MTYPE_GAS:",
          "13820:             break;",
          "13821:            case MTYPE_WATER:",
          "13823:             break;",
          "13824:            case MTYPE_COUNTER:",
          "13825:             sprintf(szTmp, \"%.1f\", TotalValue);",
          "",
          "[Removed Lines]",
          "13816:             sprintf(szTmp, \"%.3f\", (TotalValue / EnergyDivider)*1000.0f); //from kWh -> Watt",
          "13819:             sprintf(szTmp, \"%.3f\", TotalValue / GasDivider);",
          "13822:             sprintf(szTmp, \"%.3f\", TotalValue / WaterDivider);",
          "",
          "[Added Lines]",
          "13733:             sprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f); //from kWh -> Watt",
          "13736:             sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "13739:             sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "13864:          {",
          "13865:          case MTYPE_ENERGY:",
          "13866:          case MTYPE_ENERGY_GENERATED:",
          "13868:           break;",
          "13869:          case MTYPE_GAS:",
          "13871:           break;",
          "13872:          case MTYPE_WATER:",
          "13874:           break;",
          "13875:          case MTYPE_COUNTER:",
          "13876:           sprintf(szTmp, \"%.1f\", TotalValue);",
          "",
          "[Removed Lines]",
          "13867:           sprintf(szTmp, \"%.3f\", (TotalValue / EnergyDivider)*1000.0f); //from kWh -> Watt",
          "13870:           sprintf(szTmp, \"%.2f\", TotalValue / GasDivider);",
          "13873:           sprintf(szTmp, \"%.3f\", TotalValue / WaterDivider);",
          "",
          "[Added Lines]",
          "13784:           sprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f); //from kWh -> Watt",
          "13787:           sprintf(szTmp, \"%.2f\", TotalValue / divider);",
          "13790:           sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "13892:       root[\"ValueQuantity\"] = options[\"ValueQuantity\"];",
          "13893:       root[\"ValueUnits\"] = options[\"ValueUnits\"];",
          "13916:       int ii = 0;",
          "13918:       bool bHaveFirstValue = false;",
          "",
          "[Removed Lines]",
          "13895:       float EnergyDivider = 1000.0f;",
          "13896:       float GasDivider = 100.0f;",
          "13897:       float WaterDivider = 100.0f;",
          "13898:       int tValue;",
          "13899:       if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "13900:       {",
          "13901:        EnergyDivider = float(tValue);",
          "13902:       }",
          "13903:       if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "13904:       {",
          "13905:        GasDivider = float(tValue);",
          "13906:       }",
          "13907:       if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "13908:       {",
          "13909:        WaterDivider = float(tValue);",
          "13910:       }",
          "13911:       if (dType == pTypeP1Gas)",
          "13912:        GasDivider = 1000.0f;",
          "13913:       else if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "13914:        EnergyDivider *= 100.0f;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "13982:             {",
          "13983:             case MTYPE_ENERGY:",
          "13984:             case MTYPE_ENERGY_GENERATED:",
          "13986:              break;",
          "13987:             case MTYPE_GAS:",
          "13989:              break;",
          "13990:             case MTYPE_WATER:",
          "13992:              break;",
          "13993:             case MTYPE_COUNTER:",
          "13994:              sprintf(szTmp, \"%.1f\", TotalValue);",
          "",
          "[Removed Lines]",
          "13985:              sprintf(szTmp, \"%.3f\", (TotalValue / EnergyDivider)*1000.0f); //from kWh -> Watt",
          "13988:              sprintf(szTmp, \"%.3f\", TotalValue / GasDivider);",
          "13991:              sprintf(szTmp, \"%.3f\", TotalValue / WaterDivider);",
          "",
          "[Added Lines]",
          "13881:              sprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f); //from kWh -> Watt",
          "13884:              sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "13887:              sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "14042:            {",
          "14043:            case MTYPE_ENERGY:",
          "14044:            case MTYPE_ENERGY_GENERATED:",
          "14046:             break;",
          "14047:            case MTYPE_GAS:",
          "14049:             break;",
          "14050:            case MTYPE_WATER:",
          "14052:             break;",
          "14053:            case MTYPE_COUNTER:",
          "14054:             sprintf(szTmp, \"%.1f\", TotalValue);",
          "",
          "[Removed Lines]",
          "14045:             sprintf(szTmp, \"%.3f\", (TotalValue / EnergyDivider)*1000.0f); //from kWh -> Watt",
          "14048:             sprintf(szTmp, \"%.2f\", TotalValue / GasDivider);",
          "14051:             sprintf(szTmp, \"%.3f\", TotalValue / WaterDivider);",
          "",
          "[Added Lines]",
          "13941:             sprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f); //from kWh -> Watt",
          "13944:             sprintf(szTmp, \"%.2f\", TotalValue / divider);",
          "13947:             sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "14086:         {",
          "14087:         case MTYPE_ENERGY:",
          "14088:         case MTYPE_ENERGY_GENERATED:",
          "14090:          break;",
          "14091:         case MTYPE_GAS:",
          "14093:          break;",
          "14094:         case MTYPE_WATER:",
          "14096:          break;",
          "14097:         case MTYPE_COUNTER:",
          "14098:          sprintf(szTmp, \"%.1f\", TotalValue);",
          "",
          "[Removed Lines]",
          "14089:          sprintf(szTmp, \"%.3f\", (TotalValue / EnergyDivider)*1000.0f); //from kWh -> Watt",
          "14092:          sprintf(szTmp, \"%.3f\", TotalValue / GasDivider);",
          "14095:          sprintf(szTmp, \"%.3f\", TotalValue / WaterDivider);",
          "",
          "[Added Lines]",
          "13985:          sprintf(szTmp, \"%.3f\", (TotalValue / divider)*1000.0f); //from kWh -> Watt",
          "13988:          sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "13991:          sprintf(szTmp, \"%.3f\", TotalValue / divider);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "14499:      root[\"ValueQuantity\"] = options[\"ValueQuantity\"];",
          "14500:      root[\"ValueUnits\"] = options[\"ValueUnits\"];",
          "14525:      char szDateStart[40];",
          "14526:      char szDateEnd[40];",
          "14527:      sprintf(szDateEnd, \"%04d-%02d-%02d\", tm1.tm_year + 1900, tm1.tm_mon + 1, tm1.tm_mday);",
          "",
          "[Removed Lines]",
          "14502:      float EnergyDivider = 1000.0f;",
          "14503:      float GasDivider = 100.0f;",
          "14504:      float WaterDivider = 100.0f;",
          "14505:      int tValue;",
          "14506:      if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "14507:      {",
          "14508:       EnergyDivider = float(tValue);",
          "14509:      }",
          "14510:      if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "14511:      {",
          "14512:       GasDivider = float(tValue);",
          "14513:      }",
          "14514:      if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "14515:      {",
          "14516:       WaterDivider = float(tValue);",
          "14517:      }",
          "14518:      if (dType == pTypeP1Gas)",
          "14519:       GasDivider = 1000.0f;",
          "14520:      else if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "14521:       EnergyDivider *= 100.0f;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "14559:         if ((fDeliv1 != 0) || (fDeliv2 != 0))",
          "14560:          bHaveDeliverd = true;",
          "14562:         root[\"result\"][ii][\"v\"] = szTmp;",
          "14564:         root[\"result\"][ii][\"v2\"] = szTmp;",
          "14566:         root[\"result\"][ii][\"r1\"] = szTmp;",
          "14568:         root[\"result\"][ii][\"r2\"] = szTmp;",
          "14569:         ii++;",
          "14570:        }",
          "",
          "[Removed Lines]",
          "14561:         sprintf(szTmp, \"%.3f\", fUsage1 / EnergyDivider);",
          "14563:         sprintf(szTmp, \"%.3f\", fUsage2 / EnergyDivider);",
          "14565:         sprintf(szTmp, \"%.3f\", fDeliv1 / EnergyDivider);",
          "14567:         sprintf(szTmp, \"%.3f\", fDeliv2 / EnergyDivider);",
          "",
          "[Added Lines]",
          "14434:         sprintf(szTmp, \"%.3f\", fUsage1 / divider);",
          "14436:         sprintf(szTmp, \"%.3f\", fUsage2 / divider);",
          "14438:         sprintf(szTmp, \"%.3f\", fDeliv1 / divider);",
          "14440:         sprintf(szTmp, \"%.3f\", fDeliv2 / divider);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "14589:         {",
          "14590:         case MTYPE_ENERGY:",
          "14591:         case MTYPE_ENERGY_GENERATED:",
          "14593:          szValue = szTmp;",
          "14594:          break;",
          "14595:         case MTYPE_GAS:",
          "14597:          szValue = szTmp;",
          "14598:          break;",
          "14599:         case MTYPE_WATER:",
          "14601:          szValue = szTmp;",
          "14602:          break;",
          "14603:         default:",
          "",
          "[Removed Lines]",
          "14592:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "14596:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / GasDivider);",
          "14600:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / WaterDivider);",
          "",
          "[Added Lines]",
          "14465:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14469:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14473:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "14645:        sprintf(szTmp, \"%llu\", total_real_usage_1);",
          "14646:        std::string szValue = szTmp;",
          "14648:        root[\"result\"][ii][\"v\"] = szTmp;",
          "14649:        sprintf(szTmp, \"%llu\", total_real_usage_2);",
          "14650:        szValue = szTmp;",
          "14652:        root[\"result\"][ii][\"v2\"] = szTmp;",
          "14654:        sprintf(szTmp, \"%llu\", total_real_deliv_1);",
          "14655:        szValue = szTmp;",
          "14657:        root[\"result\"][ii][\"r1\"] = szTmp;",
          "14658:        sprintf(szTmp, \"%llu\", total_real_deliv_2);",
          "14659:        szValue = szTmp;",
          "14661:        root[\"result\"][ii][\"r2\"] = szTmp;",
          "14663:        ii++;",
          "",
          "[Removed Lines]",
          "14647:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "14651:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "14656:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "14660:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "",
          "[Added Lines]",
          "14520:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14524:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14529:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14533:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "14686:        {",
          "14687:        case MTYPE_ENERGY:",
          "14688:        case MTYPE_ENERGY_GENERATED:",
          "14690:         szValue = szTmp;",
          "14691:         break;",
          "14692:        case MTYPE_GAS:",
          "14694:         szValue = szTmp;",
          "14695:         break;",
          "14696:        case MTYPE_WATER:",
          "14698:         szValue = szTmp;",
          "14699:         break;",
          "14700:        default:",
          "",
          "[Removed Lines]",
          "14689:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "14693:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / GasDivider);",
          "14697:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / WaterDivider);",
          "",
          "[Added Lines]",
          "14562:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14566:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14570:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "15244:       sValue = sd[1];",
          "15245:      }",
          "15270:      int ii = 0;",
          "15271:      iPrev = 0;",
          "15272:      if (dType == pTypeP1Power)",
          "",
          "[Removed Lines]",
          "15247:      float EnergyDivider = 1000.0f;",
          "15248:      float GasDivider = 100.0f;",
          "15249:      float WaterDivider = 100.0f;",
          "15250:      int tValue;",
          "15251:      if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "15252:      {",
          "15253:       EnergyDivider = float(tValue);",
          "15254:      }",
          "15255:      if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "15256:      {",
          "15257:       GasDivider = float(tValue);",
          "15258:      }",
          "15259:      if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "15260:      {",
          "15261:       WaterDivider = float(tValue);",
          "15262:      }",
          "15263:      if (dType == pTypeP1Gas)",
          "15264:       GasDivider = 1000.0f;",
          "15265:      else if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "15266:       EnergyDivider *= 100.0f;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "15308:         if ((fDeliv_1 != 0) || (fDeliv_2 != 0))",
          "15309:          bHaveDeliverd = true;",
          "15311:         root[\"result\"][ii][\"v\"] = szTmp;",
          "15313:         root[\"result\"][ii][\"v2\"] = szTmp;",
          "15315:         root[\"result\"][ii][\"r1\"] = szTmp;",
          "15317:         root[\"result\"][ii][\"r2\"] = szTmp;",
          "15319:         if (counter_1 != 0)",
          "15320:         {",
          "15322:         }",
          "15323:         else",
          "15324:         {",
          "",
          "[Removed Lines]",
          "15310:         sprintf(szTmp, \"%.3f\", fUsage_1 / EnergyDivider);",
          "15312:         sprintf(szTmp, \"%.3f\", fUsage_2 / EnergyDivider);",
          "15314:         sprintf(szTmp, \"%.3f\", fDeliv_1 / EnergyDivider);",
          "15316:         sprintf(szTmp, \"%.3f\", fDeliv_2 / EnergyDivider);",
          "15321:          sprintf(szTmp, \"%.3f\", (counter_1 - fUsage_1) / EnergyDivider);",
          "",
          "[Added Lines]",
          "15160:         sprintf(szTmp, \"%.3f\", fUsage_1 / divider);",
          "15162:         sprintf(szTmp, \"%.3f\", fUsage_2 / divider);",
          "15164:         sprintf(szTmp, \"%.3f\", fDeliv_1 / divider);",
          "15166:         sprintf(szTmp, \"%.3f\", fDeliv_2 / divider);",
          "15171:          sprintf(szTmp, \"%.3f\", (counter_1 - fUsage_1) / divider);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "15329:         if (counter_2 != 0)",
          "15330:         {",
          "15332:         }",
          "15333:         else",
          "15334:         {",
          "",
          "[Removed Lines]",
          "15331:          sprintf(szTmp, \"%.3f\", (counter_2 - fDeliv_1) / EnergyDivider);",
          "",
          "[Added Lines]",
          "15181:          sprintf(szTmp, \"%.3f\", (counter_2 - fDeliv_1) / divider);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "15339:         if (counter_3 != 0)",
          "15340:         {",
          "15342:         }",
          "15343:         else",
          "15344:         {",
          "",
          "[Removed Lines]",
          "15341:          sprintf(szTmp, \"%.3f\", (counter_3 - fUsage_2) / EnergyDivider);",
          "",
          "[Added Lines]",
          "15191:          sprintf(szTmp, \"%.3f\", (counter_3 - fUsage_2) / divider);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "15349:         if (counter_4 != 0)",
          "15350:         {",
          "15352:         }",
          "15353:         else",
          "15354:         {",
          "",
          "[Removed Lines]",
          "15351:          sprintf(szTmp, \"%.3f\", (counter_4 - fDeliv_2) / EnergyDivider);",
          "",
          "[Added Lines]",
          "15201:          sprintf(szTmp, \"%.3f\", (counter_4 - fDeliv_2) / divider);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "15391:         if ((fDeliv_1 != 0) || (fDeliv_2 != 0))",
          "15392:          bHaveDeliverd = true;",
          "15394:         root[\"resultprev\"][iPrev][\"v\"] = szTmp;",
          "15396:         root[\"resultprev\"][iPrev][\"v2\"] = szTmp;",
          "15398:         root[\"resultprev\"][iPrev][\"r1\"] = szTmp;",
          "15400:         root[\"resultprev\"][iPrev][\"r2\"] = szTmp;",
          "15401:         iPrev++;",
          "15402:        }",
          "",
          "[Removed Lines]",
          "15393:         sprintf(szTmp, \"%.3f\", fUsage_1 / EnergyDivider);",
          "15395:         sprintf(szTmp, \"%.3f\", fUsage_2 / EnergyDivider);",
          "15397:         sprintf(szTmp, \"%.3f\", fDeliv_1 / EnergyDivider);",
          "15399:         sprintf(szTmp, \"%.3f\", fDeliv_2 / EnergyDivider);",
          "",
          "[Added Lines]",
          "15243:         sprintf(szTmp, \"%.3f\", fUsage_1 / divider);",
          "15245:         sprintf(szTmp, \"%.3f\", fUsage_2 / divider);",
          "15247:         sprintf(szTmp, \"%.3f\", fDeliv_1 / divider);",
          "15249:         sprintf(szTmp, \"%.3f\", fDeliv_2 / divider);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "15779:        if (spos != std::string::npos)",
          "15780:        {",
          "15781:         float fvalue = static_cast<float>(atof(sValue.substr(spos + 1).c_str()));",
          "15783:         root[\"counter\"] = szTmp;",
          "15784:        }",
          "15785:       }",
          "",
          "[Removed Lines]",
          "15782:         sprintf(szTmp, \"%.3f\", fvalue / (EnergyDivider / 100.0f));",
          "",
          "[Added Lines]",
          "15632:         sprintf(szTmp, \"%.3f\", fvalue / (divider / 100.0f));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "15789:        if (spos != std::string::npos)",
          "15790:        {",
          "15791:         float fvalue = static_cast<float>(atof(sValue.substr(spos + 1).c_str()));",
          "15793:         root[\"counter\"] = szTmp;",
          "15794:        }",
          "15795:       }",
          "",
          "[Removed Lines]",
          "15792:         sprintf(szTmp, \"%.3f\", fvalue / EnergyDivider);",
          "",
          "[Added Lines]",
          "15642:         sprintf(szTmp, \"%.3f\", fvalue / divider);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "15801:        {",
          "15802:        case MTYPE_ENERGY:",
          "15803:        case MTYPE_ENERGY_GENERATED:",
          "15805:         break;",
          "15806:        case MTYPE_GAS:",
          "15808:         break;",
          "15809:        case MTYPE_WATER:",
          "15811:         break;",
          "15812:        default:",
          "15813:         strcpy(szTmp, \"\");",
          "",
          "[Removed Lines]",
          "15804:         sprintf(szTmp, \"%.3f\", AddjValue + (fvalue / EnergyDivider));",
          "15807:         sprintf(szTmp, \"%.2f\", AddjValue + (fvalue / GasDivider));",
          "15810:         sprintf(szTmp, \"%.3f\", AddjValue + (fvalue / WaterDivider));",
          "",
          "[Added Lines]",
          "15654:         sprintf(szTmp, \"%.3f\", AddjValue + (fvalue / divider));",
          "15657:         sprintf(szTmp, \"%.2f\", AddjValue + (fvalue / divider));",
          "15660:         sprintf(szTmp, \"%.3f\", AddjValue + (fvalue / divider));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "15827:         {",
          "15828:         case MTYPE_ENERGY:",
          "15829:         case MTYPE_ENERGY_GENERATED:",
          "15831:          break;",
          "15832:         case MTYPE_GAS:",
          "15834:          break;",
          "15835:         case MTYPE_WATER:",
          "15837:          break;",
          "15838:         default:",
          "15839:          strcpy(szTmp, \"\");",
          "",
          "[Removed Lines]",
          "15830:          sprintf(szTmp, \"%.3f\", fvalue / EnergyDivider);",
          "15833:          sprintf(szTmp, \"%.2f\", fvalue / GasDivider);",
          "15836:          sprintf(szTmp, \"%.3f\", fvalue / WaterDivider);",
          "",
          "[Added Lines]",
          "15680:          sprintf(szTmp, \"%.3f\", fvalue / divider);",
          "15683:          sprintf(szTmp, \"%.2f\", fvalue / divider);",
          "15686:          sprintf(szTmp, \"%.3f\", fvalue / divider);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "15866:         {",
          "15867:         case MTYPE_ENERGY:",
          "15868:         case MTYPE_ENERGY_GENERATED:",
          "15870:          root[\"result\"][ii][\"v\"] = szTmp;",
          "15871:          if (fcounter != 0)",
          "15873:          else",
          "15874:           strcpy(szTmp, \"0\");",
          "15875:          root[\"result\"][ii][\"c\"] = szTmp;",
          "15876:          break;",
          "15877:         case MTYPE_GAS:",
          "15879:          root[\"result\"][ii][\"v\"] = szTmp;",
          "15880:          if (fcounter != 0)",
          "15882:          else",
          "15883:           strcpy(szTmp, \"0\");",
          "15884:          root[\"result\"][ii][\"c\"] = szTmp;",
          "15885:          break;",
          "15886:         case MTYPE_WATER:",
          "15888:          root[\"result\"][ii][\"v\"] = szTmp;",
          "15889:          if (fcounter != 0)",
          "15891:          else",
          "15892:           strcpy(szTmp, \"0\");",
          "15893:          root[\"result\"][ii][\"c\"] = szTmp;",
          "",
          "[Removed Lines]",
          "15869:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "15872:           sprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / EnergyDivider));",
          "15878:          sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / GasDivider);",
          "15881:           sprintf(szTmp, \"%.2f\", AddjValue + ((fcounter - atof(szValue.c_str())) / GasDivider));",
          "15887:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / WaterDivider);",
          "15890:           sprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / WaterDivider));",
          "",
          "[Added Lines]",
          "15719:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "15722:           sprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));",
          "15728:          sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);",
          "15731:           sprintf(szTmp, \"%.2f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));",
          "15737:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "15740:           sprintf(szTmp, \"%.3f\", AddjValue + ((fcounter - atof(szValue.c_str())) / divider));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "15921:         {",
          "15922:         case MTYPE_ENERGY:",
          "15923:         case MTYPE_ENERGY_GENERATED:",
          "15925:          root[\"resultprev\"][iPrev][\"v\"] = szTmp;",
          "15926:          break;",
          "15927:         case MTYPE_GAS:",
          "15929:          root[\"resultprev\"][iPrev][\"v\"] = szTmp;",
          "15930:          break;",
          "15931:         case MTYPE_WATER:",
          "15933:          root[\"resultprev\"][iPrev][\"v\"] = szTmp;",
          "15934:          break;",
          "15935:         case MTYPE_COUNTER:",
          "",
          "[Removed Lines]",
          "15924:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "15928:          sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / GasDivider);",
          "15932:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / WaterDivider);",
          "",
          "[Added Lines]",
          "15774:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "15778:          sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);",
          "15782:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "16007:        sprintf(szTmp, \"%llu\", total_real_usage_1);",
          "16008:        szValue = szTmp;",
          "16010:        root[\"result\"][ii][\"v\"] = szTmp;",
          "16011:        sprintf(szTmp, \"%llu\", total_real_usage_2);",
          "16012:        szValue = szTmp;",
          "16014:        root[\"result\"][ii][\"v2\"] = szTmp;",
          "16016:        sprintf(szTmp, \"%llu\", total_real_deliv_1);",
          "16017:        szValue = szTmp;",
          "16019:        root[\"result\"][ii][\"r1\"] = szTmp;",
          "16020:        sprintf(szTmp, \"%llu\", total_real_deliv_2);",
          "16021:        szValue = szTmp;",
          "16023:        root[\"result\"][ii][\"r2\"] = szTmp;",
          "16025:        ii++;",
          "",
          "[Removed Lines]",
          "16009:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "16013:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "16018:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "16022:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "",
          "[Added Lines]",
          "15859:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "15863:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "15868:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "15872:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "16174:        case MTYPE_ENERGY:",
          "16175:        case MTYPE_ENERGY_GENERATED:",
          "16176:        {",
          "16178:         root[\"result\"][ii][\"v\"] = szTmp;",
          "16180:         std::vector<std::string> mresults;",
          "",
          "[Removed Lines]",
          "16177:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "",
          "[Added Lines]",
          "16027:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "16184:          sValue = mresults[1];",
          "16185:         }",
          "16186:         if (dType == pTypeENERGY)",
          "16188:         else",
          "16190:         root[\"result\"][ii][\"c\"] = szTmp;",
          "16191:        }",
          "16192:        break;",
          "16193:        case MTYPE_GAS:",
          "16195:         root[\"result\"][ii][\"v\"] = szTmp;",
          "16197:         root[\"result\"][ii][\"c\"] = szTmp;",
          "16198:         break;",
          "16199:        case MTYPE_WATER:",
          "16201:         root[\"result\"][ii][\"v\"] = szTmp;",
          "16203:         root[\"result\"][ii][\"c\"] = szTmp;",
          "16204:         break;",
          "16205:        case MTYPE_COUNTER:",
          "",
          "[Removed Lines]",
          "16187:          sprintf(szTmp, \"%.3f\", AddjValue + (((atof(sValue.c_str())*100.0f) - atof(szValue.c_str())) / EnergyDivider));",
          "16189:          sprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / EnergyDivider));",
          "16194:         sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / GasDivider);",
          "16196:         sprintf(szTmp, \"%.2f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / GasDivider));",
          "16200:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / WaterDivider);",
          "16202:         sprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / WaterDivider));",
          "",
          "[Added Lines]",
          "16037:          sprintf(szTmp, \"%.3f\", AddjValue + (((atof(sValue.c_str())*100.0f) - atof(szValue.c_str())) / divider));",
          "16039:          sprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));",
          "16044:         sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);",
          "16046:         sprintf(szTmp, \"%.2f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));",
          "16050:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "16052:         sprintf(szTmp, \"%.3f\", AddjValue + ((atof(sValue.c_str()) - atof(szValue.c_str())) / divider));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "16723:      root[\"ValueQuantity\"] = options[\"ValueQuantity\"];",
          "16724:      root[\"ValueUnits\"] = options[\"ValueUnits\"];",
          "16747:      int ii = 0;",
          "16748:      if (dType == pTypeP1Power)",
          "16749:      {",
          "",
          "[Removed Lines]",
          "16726:      float EnergyDivider = 1000.0f;",
          "16727:      float GasDivider = 100.0f;",
          "16728:      float WaterDivider = 100.0f;",
          "16729:      int tValue;",
          "16730:      if (m_sql.GetPreferencesVar(\"MeterDividerEnergy\", tValue))",
          "16731:      {",
          "16732:       EnergyDivider = float(tValue);",
          "16733:      }",
          "16734:      if (m_sql.GetPreferencesVar(\"MeterDividerGas\", tValue))",
          "16735:      {",
          "16736:       GasDivider = float(tValue);",
          "16737:      }",
          "16738:      if (m_sql.GetPreferencesVar(\"MeterDividerWater\", tValue))",
          "16739:      {",
          "16740:       WaterDivider = float(tValue);",
          "16741:      }",
          "16742:      if (dType == pTypeP1Gas)",
          "16743:       GasDivider = 1000.0f;",
          "16744:      else if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "16745:       EnergyDivider *= 100.0f;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "16772:         if (fDeliv != 0)",
          "16773:          bHaveDeliverd = true;",
          "16775:         root[\"result\"][ii][\"v\"] = szTmp;",
          "16777:         root[\"result\"][ii][\"v2\"] = szTmp;",
          "16778:         ii++;",
          "16779:        }",
          "",
          "[Removed Lines]",
          "16774:         sprintf(szTmp, \"%.3f\", fUsage / EnergyDivider);",
          "16776:         sprintf(szTmp, \"%.3f\", fDeliv / EnergyDivider);",
          "",
          "[Added Lines]",
          "16603:         sprintf(szTmp, \"%.3f\", fUsage / divider);",
          "16605:         sprintf(szTmp, \"%.3f\", fDeliv / divider);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "16797:         {",
          "16798:         case MTYPE_ENERGY:",
          "16799:         case MTYPE_ENERGY_GENERATED:",
          "16801:          szValue = szTmp;",
          "16802:          break;",
          "16803:         case MTYPE_GAS:",
          "16805:          szValue = szTmp;",
          "16806:          break;",
          "16807:         case MTYPE_WATER:",
          "16809:          szValue = szTmp;",
          "16810:          break;",
          "16811:         }",
          "",
          "[Removed Lines]",
          "16800:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "16804:          sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / GasDivider);",
          "16808:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / WaterDivider);",
          "",
          "[Added Lines]",
          "16629:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "16633:          sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);",
          "16637:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "16852:        sprintf(szTmp, \"%llu\", total_real_usage);",
          "16853:        std::string szValue = szTmp;",
          "16855:        root[\"result\"][ii][\"v\"] = szTmp;",
          "16856:        sprintf(szTmp, \"%llu\", total_real_deliv);",
          "16857:        szValue = szTmp;",
          "16859:        root[\"result\"][ii][\"v2\"] = szTmp;",
          "16860:        ii++;",
          "16861:        if (bHaveDeliverd)",
          "",
          "[Removed Lines]",
          "16854:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "16858:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "",
          "[Added Lines]",
          "16683:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "16687:        sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "16884:        {",
          "16885:        case MTYPE_ENERGY:",
          "16886:        case MTYPE_ENERGY_GENERATED:",
          "16888:         szValue = szTmp;",
          "16889:         break;",
          "16890:        case MTYPE_GAS:",
          "16892:         szValue = szTmp;",
          "16893:         break;",
          "16894:        case MTYPE_WATER:",
          "16896:         szValue = szTmp;",
          "16897:         break;",
          "16898:        }",
          "",
          "[Removed Lines]",
          "16887:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / EnergyDivider);",
          "16891:         sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / GasDivider);",
          "16895:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / WaterDivider);",
          "",
          "[Added Lines]",
          "16716:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "16720:         sprintf(szTmp, \"%.2f\", atof(szValue.c_str()) / divider);",
          "16724:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "",
          "---------------"
        ]
      }
    }
  ]
}