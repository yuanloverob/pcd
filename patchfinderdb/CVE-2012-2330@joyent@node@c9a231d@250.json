{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6a04ce78f9fcc07bc1ae108c402fba508344202",
      "candidate_info": {
        "commit_hash": "c6a04ce78f9fcc07bc1ae108c402fba508344202",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c6a04ce78f9fcc07bc1ae108c402fba508344202",
        "files": [
          "doc/api/crypto.markdown",
          "lib/crypto.js",
          "src/node_crypto.cc",
          "src/node_crypto_groups.h",
          "test/simple/test-crypto-dh.js"
        ],
        "message": "crypto: add function getDiffieHellman()\n\nReturns a well known, predefined RFC group.",
        "before_after_code_files": [
          "lib/crypto.js||licrypto.js",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_crypto_groups.h||src/node_crypto_groups.h",
          "test/simple/test-crypto-dh.js||test/simple/test-crypto-dh.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/crypto.js||licrypto.js": [
          "File: lib/crypto.js -> licrypto.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   var Sign = binding.Sign;",
          "31:   var Verify = binding.Verify;",
          "32:   var DiffieHellman = binding.DiffieHellman;",
          "33:   var PBKDF2 = binding.PBKDF2;",
          "34:   var randomBytes = binding.randomBytes;",
          "35:   var pseudoRandomBytes = binding.pseudoRandomBytes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:   }",
          "175: };",
          "177: exports.pbkdf2 = PBKDF2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node_crypto.h>",
          "23: #include <v8.h>",
          "25: #include <node.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <node_crypto_groups.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3535:     NODE_SET_PROTOTYPE_METHOD(t, \"setPrivateKey\", SetPrivateKey);",
          "3537:     target->Set(String::NewSymbol(\"DiffieHellman\"), t->GetFunction());",
          "3538:   }",
          "3540:   bool Init(int primeLength) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3540:     Local<FunctionTemplate> t2 = FunctionTemplate::New(DiffieHellmanGroup);",
          "3541:     t2->InstanceTemplate()->SetInternalFieldCount(1);",
          "3543:     NODE_SET_PROTOTYPE_METHOD(t2, \"generateKeys\", GenerateKeys);",
          "3544:     NODE_SET_PROTOTYPE_METHOD(t2, \"computeSecret\", ComputeSecret);",
          "3545:     NODE_SET_PROTOTYPE_METHOD(t2, \"getPrime\", GetPrime);",
          "3546:     NODE_SET_PROTOTYPE_METHOD(t2, \"getGenerator\", GetGenerator);",
          "3547:     NODE_SET_PROTOTYPE_METHOD(t2, \"getPublicKey\", GetPublicKey);",
          "3548:     NODE_SET_PROTOTYPE_METHOD(t2, \"getPrivateKey\", GetPrivateKey);",
          "3550:     target->Set(String::NewSymbol(\"DiffieHellmanGroup\"), t2->GetFunction());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3557:     return true;",
          "3558:   }",
          "3560:  protected:",
          "3561:   static Handle<Value> New(const Arguments& args) {",
          "3562:     HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3573:   bool Init(unsigned char* p, int p_len, unsigned char* g, int g_len) {",
          "3574:     dh = DH_new();",
          "3575:     dh->p = BN_bin2bn(p, p_len, 0);",
          "3576:     dh->g = BN_bin2bn(g, g_len, 0);",
          "3577:     initialised_ = true;",
          "3578:     return true;",
          "3579:   }",
          "3582:   static Handle<Value> DiffieHellmanGroup(const Arguments& args) {",
          "3583:     HandleScope scope;",
          "3585:     DiffieHellman* diffieHellman = new DiffieHellman();",
          "3587:     if (args.Length() != 1 || !args[0]->IsString()) {",
          "3588:       return ThrowException(Exception::Error(",
          "3589:           String::New(\"No group name given\")));",
          "3590:     }",
          "3592:     String::Utf8Value group_name(args[0]->ToString());",
          "3594:     modp_group* it = modp_groups;",
          "3596:     while(it->name != NULL) {",
          "3597:       if (!strcasecmp(*group_name, it->name))",
          "3598:           break;",
          "3599:       it++;",
          "3600:     }",
          "3602:     if (it->name != NULL) {",
          "3603:       diffieHellman->Init(it->prime, it->prime_size,",
          "3604:               it->gen, it->gen_size);",
          "3605:     } else {",
          "3606:       return ThrowException(Exception::Error(",
          "3607:           String::New(\"Unknown group\")));",
          "3608:     }",
          "3610:     diffieHellman->Wrap(args.This());",
          "3612:     return args.This();",
          "3613:   }",
          "",
          "---------------"
        ],
        "src/node_crypto_groups.h||src/node_crypto_groups.h": [
          "File: src/node_crypto_groups.h -> src/node_crypto_groups.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3:     These modular groups were literally taken from:",
          "6:     They all use 2 as a generator.",
          "10: unsigned char two_generator[] = { 2 };",
          "12: unsigned char group_modp1[] = {",
          "13:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "14:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "15:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "16:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "17:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "18:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "19:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "20:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "21:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x3a, 0x36, 0x20, 0xff, 0xff,",
          "22:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff };",
          "24: unsigned char group_modp2[] = {",
          "25:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "26:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "27:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "28:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "29:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "30:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "31:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "32:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "33:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,",
          "34:   0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,",
          "35:   0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,",
          "36:   0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe6, 0x53, 0x81,",
          "37:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };",
          "39: unsigned char group_modp5[] = {",
          "40:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "41:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "42:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "43:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "44:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "45:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "46:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "47:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "48:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,",
          "49:   0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,",
          "50:   0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,",
          "51:   0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,",
          "52:   0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,",
          "53:   0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,",
          "54:   0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3,",
          "55:   0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb,",
          "56:   0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c,",
          "57:   0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,",
          "58:   0xca, 0x23, 0x73, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "59:   0xff, 0xff };",
          "61: unsigned char group_modp14[] = {",
          "62:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "63:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "64:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "65:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "66:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "67:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "68:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "69:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "70:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,",
          "71:   0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,",
          "72:   0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,",
          "73:   0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,",
          "74:   0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,",
          "75:   0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,",
          "76:   0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3,",
          "77:   0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb,",
          "78:   0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c,",
          "79:   0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,",
          "80:   0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36,",
          "81:   0xce, 0x3b, 0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03,",
          "82:   0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5,",
          "83:   0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6,",
          "84:   0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c, 0xea, 0x95,",
          "85:   0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18, 0x98, 0xfa, 0x05, 0x10,",
          "86:   0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xac, 0xaa, 0x68, 0xff, 0xff,",
          "87:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff };",
          "89: unsigned char group_modp15[] = {",
          "90:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "91:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "92:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "93:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "94:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "95:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "96:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "97:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "98:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,",
          "99:   0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,",
          "100:   0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,",
          "101:   0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,",
          "102:   0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,",
          "103:   0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,",
          "104:   0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3,",
          "105:   0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb,",
          "106:   0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c,",
          "107:   0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,",
          "108:   0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36,",
          "109:   0xce, 0x3b, 0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03,",
          "110:   0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5,",
          "111:   0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6,",
          "112:   0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c, 0xea, 0x95,",
          "113:   0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18, 0x98, 0xfa, 0x05, 0x10,",
          "114:   0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xaa, 0xc4, 0x2d, 0xad, 0x33,",
          "115:   0x17, 0x0d, 0x04, 0x50, 0x7a, 0x33, 0xa8, 0x55, 0x21, 0xab,",
          "116:   0xdf, 0x1c, 0xba, 0x64, 0xec, 0xfb, 0x85, 0x04, 0x58, 0xdb,",
          "117:   0xef, 0x0a, 0x8a, 0xea, 0x71, 0x57, 0x5d, 0x06, 0x0c, 0x7d,",
          "118:   0xb3, 0x97, 0x0f, 0x85, 0xa6, 0xe1, 0xe4, 0xc7, 0xab, 0xf5,",
          "119:   0xae, 0x8c, 0xdb, 0x09, 0x33, 0xd7, 0x1e, 0x8c, 0x94, 0xe0,",
          "120:   0x4a, 0x25, 0x61, 0x9d, 0xce, 0xe3, 0xd2, 0x26, 0x1a, 0xd2,",
          "121:   0xee, 0x6b, 0xf1, 0x2f, 0xfa, 0x06, 0xd9, 0x8a, 0x08, 0x64,",
          "122:   0xd8, 0x76, 0x02, 0x73, 0x3e, 0xc8, 0x6a, 0x64, 0x52, 0x1f,",
          "123:   0x2b, 0x18, 0x17, 0x7b, 0x20, 0x0c, 0xbb, 0xe1, 0x17, 0x57,",
          "124:   0x7a, 0x61, 0x5d, 0x6c, 0x77, 0x09, 0x88, 0xc0, 0xba, 0xd9,",
          "125:   0x46, 0xe2, 0x08, 0xe2, 0x4f, 0xa0, 0x74, 0xe5, 0xab, 0x31,",
          "126:   0x43, 0xdb, 0x5b, 0xfc, 0xe0, 0xfd, 0x10, 0x8e, 0x4b, 0x82,",
          "127:   0xd1, 0x20, 0xa9, 0x3a, 0xd2, 0xca, 0xff, 0xff, 0xff, 0xff,",
          "128:   0xff, 0xff, 0xff, 0xff };",
          "130: unsigned char group_modp16[] = {",
          "131:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "132:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "133:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "134:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "135:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "136:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "137:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "138:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "139:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,",
          "140:   0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,",
          "141:   0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,",
          "142:   0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,",
          "143:   0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,",
          "144:   0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,",
          "145:   0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3,",
          "146:   0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb,",
          "147:   0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c,",
          "148:   0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,",
          "149:   0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36,",
          "150:   0xce, 0x3b, 0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03,",
          "151:   0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5,",
          "152:   0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6,",
          "153:   0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c, 0xea, 0x95,",
          "154:   0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18, 0x98, 0xfa, 0x05, 0x10,",
          "155:   0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xaa, 0xc4, 0x2d, 0xad, 0x33,",
          "156:   0x17, 0x0d, 0x04, 0x50, 0x7a, 0x33, 0xa8, 0x55, 0x21, 0xab,",
          "157:   0xdf, 0x1c, 0xba, 0x64, 0xec, 0xfb, 0x85, 0x04, 0x58, 0xdb,",
          "158:   0xef, 0x0a, 0x8a, 0xea, 0x71, 0x57, 0x5d, 0x06, 0x0c, 0x7d,",
          "159:   0xb3, 0x97, 0x0f, 0x85, 0xa6, 0xe1, 0xe4, 0xc7, 0xab, 0xf5,",
          "160:   0xae, 0x8c, 0xdb, 0x09, 0x33, 0xd7, 0x1e, 0x8c, 0x94, 0xe0,",
          "161:   0x4a, 0x25, 0x61, 0x9d, 0xce, 0xe3, 0xd2, 0x26, 0x1a, 0xd2,",
          "162:   0xee, 0x6b, 0xf1, 0x2f, 0xfa, 0x06, 0xd9, 0x8a, 0x08, 0x64,",
          "163:   0xd8, 0x76, 0x02, 0x73, 0x3e, 0xc8, 0x6a, 0x64, 0x52, 0x1f,",
          "164:   0x2b, 0x18, 0x17, 0x7b, 0x20, 0x0c, 0xbb, 0xe1, 0x17, 0x57,",
          "165:   0x7a, 0x61, 0x5d, 0x6c, 0x77, 0x09, 0x88, 0xc0, 0xba, 0xd9,",
          "166:   0x46, 0xe2, 0x08, 0xe2, 0x4f, 0xa0, 0x74, 0xe5, 0xab, 0x31,",
          "167:   0x43, 0xdb, 0x5b, 0xfc, 0xe0, 0xfd, 0x10, 0x8e, 0x4b, 0x82,",
          "168:   0xd1, 0x20, 0xa9, 0x21, 0x08, 0x01, 0x1a, 0x72, 0x3c, 0x12,",
          "169:   0xa7, 0x87, 0xe6, 0xd7, 0x88, 0x71, 0x9a, 0x10, 0xbd, 0xba,",
          "170:   0x5b, 0x26, 0x99, 0xc3, 0x27, 0x18, 0x6a, 0xf4, 0xe2, 0x3c,",
          "171:   0x1a, 0x94, 0x68, 0x34, 0xb6, 0x15, 0x0b, 0xda, 0x25, 0x83,",
          "172:   0xe9, 0xca, 0x2a, 0xd4, 0x4c, 0xe8, 0xdb, 0xbb, 0xc2, 0xdb,",
          "173:   0x04, 0xde, 0x8e, 0xf9, 0x2e, 0x8e, 0xfc, 0x14, 0x1f, 0xbe,",
          "174:   0xca, 0xa6, 0x28, 0x7c, 0x59, 0x47, 0x4e, 0x6b, 0xc0, 0x5d,",
          "175:   0x99, 0xb2, 0x96, 0x4f, 0xa0, 0x90, 0xc3, 0xa2, 0x23, 0x3b,",
          "176:   0xa1, 0x86, 0x51, 0x5b, 0xe7, 0xed, 0x1f, 0x61, 0x29, 0x70,",
          "177:   0xce, 0xe2, 0xd7, 0xaf, 0xb8, 0x1b, 0xdd, 0x76, 0x21, 0x70,",
          "178:   0x48, 0x1c, 0xd0, 0x06, 0x91, 0x27, 0xd5, 0xb0, 0x5a, 0xa9,",
          "179:   0x93, 0xb4, 0xea, 0x98, 0x8d, 0x8f, 0xdd, 0xc1, 0x86, 0xff,",
          "180:   0xb7, 0xdc, 0x90, 0xa6, 0xc0, 0x8f, 0x4d, 0xf4, 0x35, 0xc9,",
          "181:   0x34, 0x06, 0x31, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "182:   0xff, 0xff };",
          "184: unsigned char group_modp17[] = {",
          "185:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "186:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "187:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "188:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "189:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "190:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "191:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "192:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "193:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,",
          "194:   0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,",
          "195:   0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,",
          "196:   0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,",
          "197:   0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,",
          "198:   0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,",
          "199:   0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3,",
          "200:   0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb,",
          "201:   0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c,",
          "202:   0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,",
          "203:   0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36,",
          "204:   0xce, 0x3b, 0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03,",
          "205:   0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5,",
          "206:   0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6,",
          "207:   0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c, 0xea, 0x95,",
          "208:   0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18, 0x98, 0xfa, 0x05, 0x10,",
          "209:   0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xaa, 0xc4, 0x2d, 0xad, 0x33,",
          "210:   0x17, 0x0d, 0x04, 0x50, 0x7a, 0x33, 0xa8, 0x55, 0x21, 0xab,",
          "211:   0xdf, 0x1c, 0xba, 0x64, 0xec, 0xfb, 0x85, 0x04, 0x58, 0xdb,",
          "212:   0xef, 0x0a, 0x8a, 0xea, 0x71, 0x57, 0x5d, 0x06, 0x0c, 0x7d,",
          "213:   0xb3, 0x97, 0x0f, 0x85, 0xa6, 0xe1, 0xe4, 0xc7, 0xab, 0xf5,",
          "214:   0xae, 0x8c, 0xdb, 0x09, 0x33, 0xd7, 0x1e, 0x8c, 0x94, 0xe0,",
          "215:   0x4a, 0x25, 0x61, 0x9d, 0xce, 0xe3, 0xd2, 0x26, 0x1a, 0xd2,",
          "216:   0xee, 0x6b, 0xf1, 0x2f, 0xfa, 0x06, 0xd9, 0x8a, 0x08, 0x64,",
          "217:   0xd8, 0x76, 0x02, 0x73, 0x3e, 0xc8, 0x6a, 0x64, 0x52, 0x1f,",
          "218:   0x2b, 0x18, 0x17, 0x7b, 0x20, 0x0c, 0xbb, 0xe1, 0x17, 0x57,",
          "219:   0x7a, 0x61, 0x5d, 0x6c, 0x77, 0x09, 0x88, 0xc0, 0xba, 0xd9,",
          "220:   0x46, 0xe2, 0x08, 0xe2, 0x4f, 0xa0, 0x74, 0xe5, 0xab, 0x31,",
          "221:   0x43, 0xdb, 0x5b, 0xfc, 0xe0, 0xfd, 0x10, 0x8e, 0x4b, 0x82,",
          "222:   0xd1, 0x20, 0xa9, 0x21, 0x08, 0x01, 0x1a, 0x72, 0x3c, 0x12,",
          "223:   0xa7, 0x87, 0xe6, 0xd7, 0x88, 0x71, 0x9a, 0x10, 0xbd, 0xba,",
          "224:   0x5b, 0x26, 0x99, 0xc3, 0x27, 0x18, 0x6a, 0xf4, 0xe2, 0x3c,",
          "225:   0x1a, 0x94, 0x68, 0x34, 0xb6, 0x15, 0x0b, 0xda, 0x25, 0x83,",
          "226:   0xe9, 0xca, 0x2a, 0xd4, 0x4c, 0xe8, 0xdb, 0xbb, 0xc2, 0xdb,",
          "227:   0x04, 0xde, 0x8e, 0xf9, 0x2e, 0x8e, 0xfc, 0x14, 0x1f, 0xbe,",
          "228:   0xca, 0xa6, 0x28, 0x7c, 0x59, 0x47, 0x4e, 0x6b, 0xc0, 0x5d,",
          "229:   0x99, 0xb2, 0x96, 0x4f, 0xa0, 0x90, 0xc3, 0xa2, 0x23, 0x3b,",
          "230:   0xa1, 0x86, 0x51, 0x5b, 0xe7, 0xed, 0x1f, 0x61, 0x29, 0x70,",
          "231:   0xce, 0xe2, 0xd7, 0xaf, 0xb8, 0x1b, 0xdd, 0x76, 0x21, 0x70,",
          "232:   0x48, 0x1c, 0xd0, 0x06, 0x91, 0x27, 0xd5, 0xb0, 0x5a, 0xa9,",
          "233:   0x93, 0xb4, 0xea, 0x98, 0x8d, 0x8f, 0xdd, 0xc1, 0x86, 0xff,",
          "234:   0xb7, 0xdc, 0x90, 0xa6, 0xc0, 0x8f, 0x4d, 0xf4, 0x35, 0xc9,",
          "235:   0x34, 0x02, 0x84, 0x92, 0x36, 0xc3, 0xfa, 0xb4, 0xd2, 0x7c,",
          "236:   0x70, 0x26, 0xc1, 0xd4, 0xdc, 0xb2, 0x60, 0x26, 0x46, 0xde,",
          "237:   0xc9, 0x75, 0x1e, 0x76, 0x3d, 0xba, 0x37, 0xbd, 0xf8, 0xff,",
          "238:   0x94, 0x06, 0xad, 0x9e, 0x53, 0x0e, 0xe5, 0xdb, 0x38, 0x2f,",
          "239:   0x41, 0x30, 0x01, 0xae, 0xb0, 0x6a, 0x53, 0xed, 0x90, 0x27,",
          "240:   0xd8, 0x31, 0x17, 0x97, 0x27, 0xb0, 0x86, 0x5a, 0x89, 0x18,",
          "241:   0xda, 0x3e, 0xdb, 0xeb, 0xcf, 0x9b, 0x14, 0xed, 0x44, 0xce,",
          "242:   0x6c, 0xba, 0xce, 0xd4, 0xbb, 0x1b, 0xdb, 0x7f, 0x14, 0x47,",
          "243:   0xe6, 0xcc, 0x25, 0x4b, 0x33, 0x20, 0x51, 0x51, 0x2b, 0xd7,",
          "244:   0xaf, 0x42, 0x6f, 0xb8, 0xf4, 0x01, 0x37, 0x8c, 0xd2, 0xbf,",
          "245:   0x59, 0x83, 0xca, 0x01, 0xc6, 0x4b, 0x92, 0xec, 0xf0, 0x32,",
          "246:   0xea, 0x15, 0xd1, 0x72, 0x1d, 0x03, 0xf4, 0x82, 0xd7, 0xce,",
          "247:   0x6e, 0x74, 0xfe, 0xf6, 0xd5, 0x5e, 0x70, 0x2f, 0x46, 0x98,",
          "248:   0x0c, 0x82, 0xb5, 0xa8, 0x40, 0x31, 0x90, 0x0b, 0x1c, 0x9e,",
          "249:   0x59, 0xe7, 0xc9, 0x7f, 0xbe, 0xc7, 0xe8, 0xf3, 0x23, 0xa9,",
          "250:   0x7a, 0x7e, 0x36, 0xcc, 0x88, 0xbe, 0x0f, 0x1d, 0x45, 0xb7,",
          "251:   0xff, 0x58, 0x5a, 0xc5, 0x4b, 0xd4, 0x07, 0xb2, 0x2b, 0x41,",
          "252:   0x54, 0xaa, 0xcc, 0x8f, 0x6d, 0x7e, 0xbf, 0x48, 0xe1, 0xd8,",
          "253:   0x14, 0xcc, 0x5e, 0xd2, 0x0f, 0x80, 0x37, 0xe0, 0xa7, 0x97,",
          "254:   0x15, 0xee, 0xf2, 0x9b, 0xe3, 0x28, 0x06, 0xa1, 0xd5, 0x8b,",
          "255:   0xb7, 0xc5, 0xda, 0x76, 0xf5, 0x50, 0xaa, 0x3d, 0x8a, 0x1f,",
          "256:   0xbf, 0xf0, 0xeb, 0x19, 0xcc, 0xb1, 0xa3, 0x13, 0xd5, 0x5c,",
          "257:   0xda, 0x56, 0xc9, 0xec, 0x2e, 0xf2, 0x96, 0x32, 0x38, 0x7f,",
          "258:   0xe8, 0xd7, 0x6e, 0x3c, 0x04, 0x68, 0x04, 0x3e, 0x8f, 0x66,",
          "259:   0x3f, 0x48, 0x60, 0xee, 0x12, 0xbf, 0x2d, 0x5b, 0x0b, 0x74,",
          "260:   0x74, 0xd6, 0xe6, 0x94, 0xf9, 0x1e, 0x6d, 0xcc, 0x40, 0x24,",
          "261:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };",
          "263: unsigned char group_modp18[] = {",
          "264:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,",
          "265:   0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,",
          "266:   0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,",
          "267:   0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,",
          "268:   0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,",
          "269:   0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,",
          "270:   0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,",
          "271:   0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,",
          "272:   0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,",
          "273:   0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,",
          "274:   0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,",
          "275:   0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,",
          "276:   0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,",
          "277:   0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,",
          "278:   0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3,",
          "279:   0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb,",
          "280:   0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c,",
          "281:   0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,",
          "282:   0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36,",
          "283:   0xce, 0x3b, 0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03,",
          "284:   0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5,",
          "285:   0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6,",
          "286:   0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c, 0xea, 0x95,",
          "287:   0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18, 0x98, 0xfa, 0x05, 0x10,",
          "288:   0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xaa, 0xc4, 0x2d, 0xad, 0x33,",
          "289:   0x17, 0x0d, 0x04, 0x50, 0x7a, 0x33, 0xa8, 0x55, 0x21, 0xab,",
          "290:   0xdf, 0x1c, 0xba, 0x64, 0xec, 0xfb, 0x85, 0x04, 0x58, 0xdb,",
          "291:   0xef, 0x0a, 0x8a, 0xea, 0x71, 0x57, 0x5d, 0x06, 0x0c, 0x7d,",
          "292:   0xb3, 0x97, 0x0f, 0x85, 0xa6, 0xe1, 0xe4, 0xc7, 0xab, 0xf5,",
          "293:   0xae, 0x8c, 0xdb, 0x09, 0x33, 0xd7, 0x1e, 0x8c, 0x94, 0xe0,",
          "294:   0x4a, 0x25, 0x61, 0x9d, 0xce, 0xe3, 0xd2, 0x26, 0x1a, 0xd2,",
          "295:   0xee, 0x6b, 0xf1, 0x2f, 0xfa, 0x06, 0xd9, 0x8a, 0x08, 0x64,",
          "296:   0xd8, 0x76, 0x02, 0x73, 0x3e, 0xc8, 0x6a, 0x64, 0x52, 0x1f,",
          "297:   0x2b, 0x18, 0x17, 0x7b, 0x20, 0x0c, 0xbb, 0xe1, 0x17, 0x57,",
          "298:   0x7a, 0x61, 0x5d, 0x6c, 0x77, 0x09, 0x88, 0xc0, 0xba, 0xd9,",
          "299:   0x46, 0xe2, 0x08, 0xe2, 0x4f, 0xa0, 0x74, 0xe5, 0xab, 0x31,",
          "300:   0x43, 0xdb, 0x5b, 0xfc, 0xe0, 0xfd, 0x10, 0x8e, 0x4b, 0x82,",
          "301:   0xd1, 0x20, 0xa9, 0x21, 0x08, 0x01, 0x1a, 0x72, 0x3c, 0x12,",
          "302:   0xa7, 0x87, 0xe6, 0xd7, 0x88, 0x71, 0x9a, 0x10, 0xbd, 0xba,",
          "303:   0x5b, 0x26, 0x99, 0xc3, 0x27, 0x18, 0x6a, 0xf4, 0xe2, 0x3c,",
          "304:   0x1a, 0x94, 0x68, 0x34, 0xb6, 0x15, 0x0b, 0xda, 0x25, 0x83,",
          "305:   0xe9, 0xca, 0x2a, 0xd4, 0x4c, 0xe8, 0xdb, 0xbb, 0xc2, 0xdb,",
          "306:   0x04, 0xde, 0x8e, 0xf9, 0x2e, 0x8e, 0xfc, 0x14, 0x1f, 0xbe,",
          "307:   0xca, 0xa6, 0x28, 0x7c, 0x59, 0x47, 0x4e, 0x6b, 0xc0, 0x5d,",
          "308:   0x99, 0xb2, 0x96, 0x4f, 0xa0, 0x90, 0xc3, 0xa2, 0x23, 0x3b,",
          "309:   0xa1, 0x86, 0x51, 0x5b, 0xe7, 0xed, 0x1f, 0x61, 0x29, 0x70,",
          "310:   0xce, 0xe2, 0xd7, 0xaf, 0xb8, 0x1b, 0xdd, 0x76, 0x21, 0x70,",
          "311:   0x48, 0x1c, 0xd0, 0x06, 0x91, 0x27, 0xd5, 0xb0, 0x5a, 0xa9,",
          "312:   0x93, 0xb4, 0xea, 0x98, 0x8d, 0x8f, 0xdd, 0xc1, 0x86, 0xff,",
          "313:   0xb7, 0xdc, 0x90, 0xa6, 0xc0, 0x8f, 0x4d, 0xf4, 0x35, 0xc9,",
          "314:   0x34, 0x02, 0x84, 0x92, 0x36, 0xc3, 0xfa, 0xb4, 0xd2, 0x7c,",
          "315:   0x70, 0x26, 0xc1, 0xd4, 0xdc, 0xb2, 0x60, 0x26, 0x46, 0xde,",
          "316:   0xc9, 0x75, 0x1e, 0x76, 0x3d, 0xba, 0x37, 0xbd, 0xf8, 0xff,",
          "317:   0x94, 0x06, 0xad, 0x9e, 0x53, 0x0e, 0xe5, 0xdb, 0x38, 0x2f,",
          "318:   0x41, 0x30, 0x01, 0xae, 0xb0, 0x6a, 0x53, 0xed, 0x90, 0x27,",
          "319:   0xd8, 0x31, 0x17, 0x97, 0x27, 0xb0, 0x86, 0x5a, 0x89, 0x18,",
          "320:   0xda, 0x3e, 0xdb, 0xeb, 0xcf, 0x9b, 0x14, 0xed, 0x44, 0xce,",
          "321:   0x6c, 0xba, 0xce, 0xd4, 0xbb, 0x1b, 0xdb, 0x7f, 0x14, 0x47,",
          "322:   0xe6, 0xcc, 0x25, 0x4b, 0x33, 0x20, 0x51, 0x51, 0x2b, 0xd7,",
          "323:   0xaf, 0x42, 0x6f, 0xb8, 0xf4, 0x01, 0x37, 0x8c, 0xd2, 0xbf,",
          "324:   0x59, 0x83, 0xca, 0x01, 0xc6, 0x4b, 0x92, 0xec, 0xf0, 0x32,",
          "325:   0xea, 0x15, 0xd1, 0x72, 0x1d, 0x03, 0xf4, 0x82, 0xd7, 0xce,",
          "326:   0x6e, 0x74, 0xfe, 0xf6, 0xd5, 0x5e, 0x70, 0x2f, 0x46, 0x98,",
          "327:   0x0c, 0x82, 0xb5, 0xa8, 0x40, 0x31, 0x90, 0x0b, 0x1c, 0x9e,",
          "328:   0x59, 0xe7, 0xc9, 0x7f, 0xbe, 0xc7, 0xe8, 0xf3, 0x23, 0xa9,",
          "329:   0x7a, 0x7e, 0x36, 0xcc, 0x88, 0xbe, 0x0f, 0x1d, 0x45, 0xb7,",
          "330:   0xff, 0x58, 0x5a, 0xc5, 0x4b, 0xd4, 0x07, 0xb2, 0x2b, 0x41,",
          "331:   0x54, 0xaa, 0xcc, 0x8f, 0x6d, 0x7e, 0xbf, 0x48, 0xe1, 0xd8,",
          "332:   0x14, 0xcc, 0x5e, 0xd2, 0x0f, 0x80, 0x37, 0xe0, 0xa7, 0x97,",
          "333:   0x15, 0xee, 0xf2, 0x9b, 0xe3, 0x28, 0x06, 0xa1, 0xd5, 0x8b,",
          "334:   0xb7, 0xc5, 0xda, 0x76, 0xf5, 0x50, 0xaa, 0x3d, 0x8a, 0x1f,",
          "335:   0xbf, 0xf0, 0xeb, 0x19, 0xcc, 0xb1, 0xa3, 0x13, 0xd5, 0x5c,",
          "336:   0xda, 0x56, 0xc9, 0xec, 0x2e, 0xf2, 0x96, 0x32, 0x38, 0x7f,",
          "337:   0xe8, 0xd7, 0x6e, 0x3c, 0x04, 0x68, 0x04, 0x3e, 0x8f, 0x66,",
          "338:   0x3f, 0x48, 0x60, 0xee, 0x12, 0xbf, 0x2d, 0x5b, 0x0b, 0x74,",
          "339:   0x74, 0xd6, 0xe6, 0x94, 0xf9, 0x1e, 0x6d, 0xbe, 0x11, 0x59,",
          "340:   0x74, 0xa3, 0x92, 0x6f, 0x12, 0xfe, 0xe5, 0xe4, 0x38, 0x77,",
          "341:   0x7c, 0xb6, 0xa9, 0x32, 0xdf, 0x8c, 0xd8, 0xbe, 0xc4, 0xd0,",
          "342:   0x73, 0xb9, 0x31, 0xba, 0x3b, 0xc8, 0x32, 0xb6, 0x8d, 0x9d,",
          "343:   0xd3, 0x00, 0x74, 0x1f, 0xa7, 0xbf, 0x8a, 0xfc, 0x47, 0xed,",
          "344:   0x25, 0x76, 0xf6, 0x93, 0x6b, 0xa4, 0x24, 0x66, 0x3a, 0xab,",
          "345:   0x63, 0x9c, 0x5a, 0xe4, 0xf5, 0x68, 0x34, 0x23, 0xb4, 0x74,",
          "346:   0x2b, 0xf1, 0xc9, 0x78, 0x23, 0x8f, 0x16, 0xcb, 0xe3, 0x9d,",
          "347:   0x65, 0x2d, 0xe3, 0xfd, 0xb8, 0xbe, 0xfc, 0x84, 0x8a, 0xd9,",
          "348:   0x22, 0x22, 0x2e, 0x04, 0xa4, 0x03, 0x7c, 0x07, 0x13, 0xeb,",
          "349:   0x57, 0xa8, 0x1a, 0x23, 0xf0, 0xc7, 0x34, 0x73, 0xfc, 0x64,",
          "350:   0x6c, 0xea, 0x30, 0x6b, 0x4b, 0xcb, 0xc8, 0x86, 0x2f, 0x83,",
          "351:   0x85, 0xdd, 0xfa, 0x9d, 0x4b, 0x7f, 0xa2, 0xc0, 0x87, 0xe8,",
          "352:   0x79, 0x68, 0x33, 0x03, 0xed, 0x5b, 0xdd, 0x3a, 0x06, 0x2b,",
          "353:   0x3c, 0xf5, 0xb3, 0xa2, 0x78, 0xa6, 0x6d, 0x2a, 0x13, 0xf8,",
          "354:   0x3f, 0x44, 0xf8, 0x2d, 0xdf, 0x31, 0x0e, 0xe0, 0x74, 0xab,",
          "355:   0x6a, 0x36, 0x45, 0x97, 0xe8, 0x99, 0xa0, 0x25, 0x5d, 0xc1,",
          "356:   0x64, 0xf3, 0x1c, 0xc5, 0x08, 0x46, 0x85, 0x1d, 0xf9, 0xab,",
          "357:   0x48, 0x19, 0x5d, 0xed, 0x7e, 0xa1, 0xb1, 0xd5, 0x10, 0xbd,",
          "358:   0x7e, 0xe7, 0x4d, 0x73, 0xfa, 0xf3, 0x6b, 0xc3, 0x1e, 0xcf,",
          "359:   0xa2, 0x68, 0x35, 0x90, 0x46, 0xf4, 0xeb, 0x87, 0x9f, 0x92,",
          "360:   0x40, 0x09, 0x43, 0x8b, 0x48, 0x1c, 0x6c, 0xd7, 0x88, 0x9a,",
          "361:   0x00, 0x2e, 0xd5, 0xee, 0x38, 0x2b, 0xc9, 0x19, 0x0d, 0xa6,",
          "362:   0xfc, 0x02, 0x6e, 0x47, 0x95, 0x58, 0xe4, 0x47, 0x56, 0x77,",
          "363:   0xe9, 0xaa, 0x9e, 0x30, 0x50, 0xe2, 0x76, 0x56, 0x94, 0xdf,",
          "364:   0xc8, 0x1f, 0x56, 0xe8, 0x80, 0xb9, 0x6e, 0x71, 0x60, 0xc9,",
          "365:   0x80, 0xdd, 0x98, 0xed, 0xd3, 0xdf, 0xff, 0xff, 0xff, 0xff,",
          "366:   0xff, 0xff, 0xff, 0xff };",
          "368: typedef struct {",
          "369:   const char* name;",
          "370:   unsigned char* prime;",
          "371:   int prime_size;",
          "372:   unsigned char* gen;",
          "373:   int gen_size;",
          "374: } modp_group;",
          "376: modp_group modp_groups[] = {",
          "377:   { \"modp1\", group_modp1, sizeof(group_modp1) / sizeof(group_modp1[0]), two_generator, 1 },",
          "378:   { \"modp2\", group_modp2, sizeof(group_modp2) / sizeof(group_modp2[0]), two_generator, 1 },",
          "379:   { \"modp5\", group_modp5, sizeof(group_modp5) / sizeof(group_modp5[0]), two_generator, 1 },",
          "380:   { \"modp14\", group_modp14, sizeof(group_modp14) / sizeof(group_modp14[0]), two_generator, 1 },",
          "381:   { \"modp15\", group_modp15, sizeof(group_modp15) / sizeof(group_modp15[0]), two_generator, 1 },",
          "382:   { \"modp16\", group_modp16, sizeof(group_modp16) / sizeof(group_modp16[0]), two_generator, 1 },",
          "383:   { \"modp17\", group_modp17, sizeof(group_modp17) / sizeof(group_modp17[0]), two_generator, 1 },",
          "384:   { \"modp18\", group_modp18, sizeof(group_modp18) / sizeof(group_modp18[0]), two_generator, 1 },",
          "385:   { NULL, NULL, 0, NULL, 0 }",
          "386: };",
          "",
          "---------------"
        ],
        "test/simple/test-crypto-dh.js||test/simple/test-crypto-dh.js": [
          "File: test/simple/test-crypto-dh.js -> test/simple/test-crypto-dh.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: try {",
          "26:   var crypto = require('crypto');",
          "27: } catch (e) {",
          "28:   console.log('Not compiled with OPENSSL support.');",
          "29:   process.exit();",
          "30: }",
          "32: assert.throws(function() {",
          "33:   crypto.getDiffieHellman('unknown-group');",
          "34: });",
          "35: assert.throws(function() {",
          "36:   crypto.getDiffieHellman('modp1').setPrivateKey('');",
          "37: });",
          "38: assert.throws(function() {",
          "39:   crypto.getDiffieHellman('modp1').setPublicKey('');",
          "40: });",
          "42: var hashes = {",
          "43:   modp1 : \"b4b330a6ffeacfbd861e7fe2135b4431\",",
          "44:   modp2 : \"7c3c5cad8b9f378d88f1dd64a4b6413a\",",
          "45:   modp5 : \"b1d2acc22c542e08669a5c5ae812694d\",",
          "46:   modp14 : \"8d041538cecc1a7d915ba4b718f8ad20\",",
          "47:   modp15 : \"dc3b93def24e078c4fbf92d5e14ba69b\",",
          "48:   modp16 : \"a273487f46f699461f613b3878d9dfd9\",",
          "49:   modp17 : \"dc76e09935310348c492de9bd82014d0\",",
          "50:   modp18 : \"db08973bfd2371758a69db180871c993\"",
          "51: }",
          "53: for (var name in hashes) {",
          "54:   var group = crypto.getDiffieHellman(name);",
          "55:   var private_key = group.getPrime('hex');",
          "56:   var hash1 = hashes[name];",
          "57:   var hash2 = crypto.createHash('md5').update(private_key.toUpperCase()).digest('hex');",
          "58:   assert.equal(hash1, hash2);",
          "59:   assert.equal(group.getGenerator('hex'), '02');",
          "60: }",
          "62: for (var name in hashes) {",
          "63:   var group1 = crypto.getDiffieHellman(name);",
          "64:   var group2 = crypto.getDiffieHellman(name);",
          "65:   group1.generateKeys();",
          "66:   group2.generateKeys();",
          "67:   var key1 = group1.computeSecret(group2.getPublicKey());",
          "68:   var key2 = group2.computeSecret(group1.getPublicKey());",
          "69:   assert.equal(key1, key2);",
          "70: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b48684c6f1958930741e2cf34a6a6d5cafa7f478",
      "candidate_info": {
        "commit_hash": "b48684c6f1958930741e2cf34a6a6d5cafa7f478",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b48684c6f1958930741e2cf34a6a6d5cafa7f478",
        "files": [
          "lib/child_process.js",
          "test/simple/test-child-process-stdio.js"
        ],
        "message": "child_process: Fix stdout=null when stdio=['pipe']\n\nPreviously, a command with a short stdio array would result in the child's\nstdout and stderr objects set to null. For example:\n\nvar c = child_process.spawn(cmd, args, {stdio: ['pipe']});\n// results in c.stdout === null.\n\nThe expected behavior is the above line functioning the same as this one:\n\nvar c = child_process.spawn(cmd, args, {stdio: ['pipe', null, null]});\n// provides correct (non-null) c.stdout; as does the above, after this fix.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "test/simple/test-child-process-stdio.js||test/simple/test-child-process-stdio.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:   }",
          "",
          "[Removed Lines]",
          "712:   if (stdio.length < 3) {",
          "713:     stdio = stdio.concat(new Array(3 - stdio.length));",
          "714:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-stdio.js||test/simple/test-child-process-stdio.js": [
          "File: test/simple/test-child-process-stdio.js -> test/simple/test-child-process-stdio.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var spawn = require('child_process').spawn;",
          "26: var options = {stdio: ['pipe']};",
          "27: var child = common.spawnPwd(options);",
          "29: assert.notEqual(child.stdout, null);",
          "30: assert.notEqual(child.stderr, null);",
          "32: options = {stdio: 'ignore'};",
          "33: child = common.spawnPwd(options);",
          "35: assert.equal(child.stdout, null);",
          "36: assert.equal(child.stderr, null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a433b9637791d57c4ef2c94675e9a6ae1722b81",
      "candidate_info": {
        "commit_hash": "1a433b9637791d57c4ef2c94675e9a6ae1722b81",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1a433b9637791d57c4ef2c94675e9a6ae1722b81",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h"
        ],
        "message": "Add link-list of all isolates",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1894:   Isolate* isolate = Isolate::New();",
          "1896:   StartThread(isolate, ti->argc_, ti->argv_);",
          "1897:   delete ti;",
          "1898: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1897:   isolate->Dispose();",
          "1900:   delete isolate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1927: }",
          "1930: static Handle<Value> JoinIsolate(const Arguments& args) {",
          "1931:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933: static Handle<Value> CountIsolate(const Arguments& args) {",
          "1934:   HandleScope scope;",
          "1935:   return scope.Close(Integer::New(Isolate::Count()));",
          "1936: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2218:   NODE_SET_METHOD(process, \"binding\", Binding);",
          "2220:   NODE_SET_METHOD(process, \"_newIsolate\", NewIsolate);",
          "2221:   NODE_SET_METHOD(process, \"_joinIsolate\", JoinIsolate);",
          "2223:   return process;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2230:   NODE_SET_METHOD(process, \"_countIsolate\", CountIsolate);",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: namespace node {",
          "32: static volatile bool initialized;",
          "33: static volatile int id;",
          "36: void Isolate::Initialize() {",
          "37:   if (!initialized) {",
          "38:     initialized = true;",
          "40:   }",
          "41: }",
          "",
          "[Removed Lines]",
          "34: static uv_mutex_t id_lock;",
          "39:     if (uv_mutex_init(&id_lock)) abort();",
          "",
          "[Added Lines]",
          "35: static volatile int isolate_count;",
          "36: static uv_mutex_t list_lock;",
          "37: static ngx_queue_t list_head;",
          "43:     if (uv_mutex_init(&list_lock)) abort();",
          "44:     ngx_queue_init(&list_head);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: }",
          "49: Isolate::Isolate() {",
          "50:   assert(initialized && \"node::Isolate::Initialize() hasn't been called\");",
          "53:   id_ = ++id;",
          "56:   if (id_ == 1) {",
          "57:     loop_ = uv_default_loop();",
          "",
          "[Removed Lines]",
          "52:   uv_mutex_lock(&id_lock);",
          "54:   uv_mutex_unlock(&id_lock);",
          "",
          "[Added Lines]",
          "54: int Isolate::Count() {",
          "55:   return isolate_count;",
          "56: }",
          "60:   uv_mutex_lock(&list_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:   ngx_queue_init(&at_exit_callbacks_);",
          "64:   v8_isolate_ = v8::Isolate::GetCurrent();",
          "65:   if (v8_isolate_ == NULL) {",
          "66:     v8_isolate_ = v8::Isolate::New();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   ngx_queue_init(&list_member_);",
          "77:   ngx_queue_insert_tail(&list_head, &list_member_);",
          "78:   isolate_count++;",
          "80:   uv_mutex_unlock(&list_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97: void Isolate::Dispose() {",
          "98:   struct AtExitCallbackInfo* it;",
          "99:   ngx_queue_t* q;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   uv_mutex_lock(&list_lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:   v8_isolate_->Exit();",
          "116:   v8_isolate_->Dispose();",
          "117:   v8_isolate_ = NULL;",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:   ngx_queue_remove(&list_member_);",
          "140:   isolate_count--;",
          "141:   assert(isolate_count >= 0);",
          "142:   assert(isolate_count > 0 || ngx_queue_empty(&list_head));",
          "144:   uv_mutex_unlock(&list_lock);",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: public:",
          "47:   static void Initialize();",
          "49:   typedef void (*AtExitCallback)(void* arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   static int Count();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:   v8::Isolate* v8_isolate_;",
          "96:   uv_loop_t* loop_;",
          "99:   struct globals globals_;",
          "100: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   ngx_queue_t list_member_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "196207c2280770d649755ec923f56befc2650d80",
      "candidate_info": {
        "commit_hash": "196207c2280770d649755ec923f56befc2650d80",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/196207c2280770d649755ec923f56befc2650d80",
        "files": [
          "doc/api/modules.markdown",
          "doc/api/process.markdown",
          "src/node.cc",
          "src/node_config.h.in",
          "src/node_version.h"
        ],
        "message": "node: remove unused flags and files\n\nDrop vestigial `process.installPrefix`, `node --vars`, NODE_CFLAGS and\nNODE_PREFIX.\n\nAlso removed unused node_config.h.in (replaced with config.gypi a while back).",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_config.h.in||src/node_config.h.in",
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2135:   process->Set(String::NewSymbol(\"version\"), String::New(NODE_VERSION));",
          "2143:   module_load_list = Persistent<Array>::New(Array::New());",
          "2144:   process->Set(String::NewSymbol(\"moduleLoadList\"), module_load_list);",
          "",
          "[Removed Lines]",
          "2137: #ifdef NODE_PREFIX",
          "2139:   process->Set(String::NewSymbol(\"installPrefix\"), String::New(NODE_PREFIX));",
          "2140: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2378:          \"  -i, --interactive    always enter the REPL even if stdin\\n\"",
          "2379:          \"                       does not appear to be a terminal\\n\"",
          "2380:          \"  --v8-options         print v8 command line options\\n\"",
          "2382:          \"  --max-stack-size=val set max v8 stack size (bytes)\\n\"",
          "2383:          \"\\n\"",
          "2384:          \"Environment variables:\\n\"",
          "",
          "[Removed Lines]",
          "2381:          \"  --vars               print various compiled-in variables\\n\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2408:     } else if (strcmp(arg, \"--version\") == 0 || strcmp(arg, \"-v\") == 0) {",
          "2409:       printf(\"%s\\n\", NODE_VERSION);",
          "2410:       exit(0);",
          "2419:     } else if (strstr(arg, \"--max-stack-size=\") == arg) {",
          "2420:       const char *p = 0;",
          "2421:       p = 1 + strchr(arg, '=');",
          "",
          "[Removed Lines]",
          "2411:     } else if (strcmp(arg, \"--vars\") == 0) {",
          "2412: #ifdef NODE_PREFIX",
          "2413:       printf(\"NODE_PREFIX: %s\\n\", NODE_PREFIX);",
          "2414: #endif",
          "2415: #ifdef NODE_CFLAGS",
          "2416:       printf(\"NODE_CFLAGS: %s\\n\", NODE_CFLAGS);",
          "2417: #endif",
          "2418:       exit(0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_config.h.in||src/node_config.h.in": [
          "File: src/node_config.h.in -> src/node_config.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #ifndef NODE_VERSION_H",
          "27: #define NODE_VERSION_H",
          "",
          "[Removed Lines]",
          "23: #include \"node_config.h\"",
          "24: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f61d4b7a87123244e249a08c026ab0f941ef5cde",
      "candidate_info": {
        "commit_hash": "f61d4b7a87123244e249a08c026ab0f941ef5cde",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f61d4b7a87123244e249a08c026ab0f941ef5cde",
        "files": [
          "lib/_debugger.js"
        ],
        "message": "debugger: exit process on repl exit\n\n* When entering repl - clone 'SIGINT' listeners array (instead of using\nexisting), as it will be spliced in .removeAllListeners() call later.",
        "before_after_code_files": [
          "lib/_debugger.js||li_debugger.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/_debugger.js||li_debugger.js": [
          "File: lib/_debugger.js -> li_debugger.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:                                   this.controlEval.bind(this), false, true);",
          "758:   process.on('exit', function() {",
          "759:     self.killChild();",
          "760:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1486:   self.print('Press Ctrl + C to leave debug repl');",
          "1490:   this.repl.rli.removeAllListeners('SIGINT');",
          "",
          "[Removed Lines]",
          "1489:   var listeners = this.repl.rli.listeners('SIGINT');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}