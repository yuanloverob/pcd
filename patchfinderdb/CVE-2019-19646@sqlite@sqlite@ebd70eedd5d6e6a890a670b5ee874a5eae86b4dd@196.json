{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb5567123f13ff7f915069d2d4cdaf832ff0baa9",
      "candidate_info": {
        "commit_hash": "fb5567123f13ff7f915069d2d4cdaf832ff0baa9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb5567123f13ff7f915069d2d4cdaf832ff0baa9",
        "files": [
          "configure",
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --limit N option to dbfuzz2.  Set the default callback limit to 250K.\n\nFossilOrigin-Name: b99f8512c06b9d47e48b028781265512ce8b812ae4e6af0a7139a093cf9a8f74",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80e951fce3e5aaa224c8dba6449832d2efabcdc24e86eb6b7833f85cf08ecc00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: static int progress_handler(void *pNotUsed){",
          "171:   nCb++;",
          "172:   if( nCb<mxCb ) return 0;",
          "173:   if( eVerbosity>=1 ){",
          "174:     printf(\"-- Progress limit of %d reached\\n\", mxCb);",
          "175:   }",
          "176:   return 1;",
          "177: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   if( bVdbeDebug ){",
          "190:     sqlite3_exec(db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "191:   }",
          "192:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "193:     if( eVerbosity>=1 ){",
          "194:       printf(\"%s\\n\", azSql[i]);",
          "195:       fflush(stdout);",
          "196:     }",
          "197:     zErr = 0;",
          "198:     rc = sqlite3_exec(db, azSql[i], 0, 0, &zErr);",
          "199:     if( rc && eVerbosity>=1 ){",
          "200:       printf(\"-- rc=%d zErr=%s\\n\", rc, zErr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "220:     nCb = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:         bVdbeDebug = 1;",
          "250:         continue;",
          "251:       }",
          "252:       if( strcmp(z,\"memtrace\")==0 ){",
          "253:         sqlite3MemTraceActivate(stdout);",
          "254:         continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:       if( strcmp(z,\"limit\")==0 ){",
          "276:         if( i+1==argc ){",
          "277:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "278:           exit(1);",
          "279:         }",
          "280:         mxCb = strtol(argv[++i], 0, 0);",
          "281:         continue;",
          "282:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
      "candidate_info": {
        "commit_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Allow compile-time options -DHAVE_GETHOSTUUID=0 and -DHAVE_GETHOSTUUID=1.\n\nFossilOrigin-Name: 3bcb9cc104e0265a600b03415ad955187fc6445ea8e46dc656412cba5bc1d621",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 102ef64462cf0d78395ccc7ebb8e3bf6b7647c06b7657a037e051697bc08d6b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: # include <sys/param.h>",
          "115: #  endif",
          "116: #endif",
          "",
          "[Removed Lines]",
          "108: #if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "109:                            (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "110: #  if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "111:        && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "112: #    define HAVE_GETHOSTUUID 1",
          "113: #  else",
          "114: #    warning \"gethostuuid() is disabled.\"",
          "",
          "[Added Lines]",
          "120: #ifndef HAVE_GETHOSTUUID",
          "121: # define HAVE_GETHOSTUUID 0",
          "122: # if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "123:                             (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "124: #    if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "125:          && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "126: #      undef HAVE_GETHOSTUUID",
          "127: #      define HAVE_GETHOSTUUID 1",
          "128: #    else",
          "129: #      warning \"gethostuuid() is disabled.\"",
          "130: #    endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6934: extern int gethostuuid(uuid_t id, const struct timespec *wait);",
          "6935: #endif",
          "",
          "[Removed Lines]",
          "6932: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6948: #if HAVE_GETHOSTUUID",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6940: static int proxyGetHostID(unsigned char *pHostID, int *pError){",
          "6941:   assert(PROXY_HOSTIDLEN == sizeof(uuid_t));",
          "6942:   memset(pHostID, 0, PROXY_HOSTIDLEN);",
          "6944:   {",
          "6946:     if( gethostuuid(pHostID, &timeout) ){",
          "",
          "[Removed Lines]",
          "6943: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6959: #if HAVE_GETHOSTUUID",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
      "candidate_info": {
        "commit_hash": "9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another corruption related buffer overread in the sqlite_dbdata module.\n\nFossilOrigin-Name: 5cd728fb6b3a70f795306d4d6e12151a4de327f801733a8558139e3cd76fe66a",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   pCsr->iCell = 0;",
          "279:   pCsr->iField = 0;",
          "280:   pCsr->bOnePage = 0;",
          "281: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:   sqlite3_free(pCsr->aPage);",
          "282:   sqlite3_free(pCsr->pRec);",
          "283:   pCsr->pRec = 0;",
          "284:   pCsr->aPage = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:   while( 1 ){",
          "460:     int rc;",
          "461:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "463:     if( pCsr->aPage==0 ){",
          "464:       while( 1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     int bNextPage = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:         int iHdr;",
          "496:         int U, X;",
          "497:         int nLocal;",
          "500:         switch( pCsr->aPage[iOff] ){",
          "501:           case 0x02:",
          "",
          "[Removed Lines]",
          "498:         int bNextPage = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:             pCsr->iField = (bHasRowid ? -1 : 0);",
          "604:           }",
          "605:         }",
          "614:       }else{",
          "615:         pCsr->iField++;",
          "616:         if( pCsr->iField>0 ){",
          "617:           sqlite3_int64 iType;",
          "620:         }",
          "621:       }",
          "625:       }",
          "632:     }",
          "633:   }",
          "",
          "[Removed Lines]",
          "607:         if( bNextPage ){",
          "608:           sqlite3_free(pCsr->aPage);",
          "609:           pCsr->aPage = 0;",
          "610:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "611:           pCsr->iPgno++;",
          "612:           continue;",
          "613:         }",
          "618:           pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "619:           pCsr->pPtr += dbdataValueBytes(iType);",
          "623:       if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){",
          "624:         return SQLITE_OK;",
          "629:       sqlite3_free(pCsr->pRec);",
          "630:       pCsr->pRec = 0;",
          "631:       pCsr->iCell++;",
          "",
          "[Added Lines]",
          "614:           if( pCsr->pHdrPtr>&pCsr->pRec[pCsr->nRec] ){",
          "615:             bNextPage = 1;",
          "616:           }else{",
          "617:             pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "618:             pCsr->pPtr += dbdataValueBytes(iType);",
          "619:           }",
          "623:       if( bNextPage ){",
          "624:         sqlite3_free(pCsr->aPage);",
          "625:         sqlite3_free(pCsr->pRec);",
          "626:         pCsr->aPage = 0;",
          "627:         pCsr->pRec = 0;",
          "628:         if( pCsr->bOnePage ) return SQLITE_OK;",
          "629:         pCsr->iPgno++;",
          "630:       }else{",
          "631:         if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){",
          "632:           return SQLITE_OK;",
          "633:         }",
          "637:         sqlite3_free(pCsr->pRec);",
          "638:         pCsr->pRec = 0;",
          "639:         pCsr->iCell++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "737:           iOff += 8;",
          "738:         }else{",
          "739:           iOff += 12 + pCsr->iCell*2;",
          "740:           iOff = get_uint16(&pCsr->aPage[iOff]);",
          "741:         }",
          "743:         break;",
          "744:       }",
          "745:     }",
          "",
          "[Removed Lines]",
          "742:         sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "",
          "[Added Lines]",
          "749:           if( iOff>pCsr->nPage ) return SQLITE_OK;",
          "752:         if( iOff<=pCsr->nPage ){",
          "753:           sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "754:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dbc6a9f7f67256dea96d3245e7bec145ba65d64adf322e18f1f3ac9556b4e0b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
      "candidate_info": {
        "commit_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the obsolete \"fastfuzztest\" target from the makefiles.\n\nFossilOrigin-Name: 3d44f1ee0f606409bc9c091dae2c9d2e78ada318a0de08437f4f4835a1a5d203",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b738d086584191e8d2f44165f9f380610690e7f",
      "candidate_info": {
        "commit_hash": "8b738d086584191e8d2f44165f9f380610690e7f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b738d086584191e8d2f44165f9f380610690e7f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the command-line shell to accept bound parameters, using the TEMP table named \"$Parameters\" to look up the values for bound parameters.\n\nFossilOrigin-Name: 7c941ce5bcc872ec92cbe0e409fd773f44a5ab1f814e689ad57f756b911e2b96",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9da4fb59b28686630d63a79988b458726332cf06cc0e6e84d7c0a7600f5fcab0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2747: #endif",
          "2748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "2765: static void bind_prepared_stmt(ShellState *pArg, sqlite3_stmt *pStmt){",
          "2766:   int nVar;",
          "2767:   int i;",
          "2768:   int rc;",
          "2769:   sqlite3_stmt *pQ = 0;",
          "2771:   nVar = sqlite3_bind_parameter_count(pStmt);",
          "2773:   if( sqlite3_table_column_metadata(pArg->db, \"TEMP\", BIND_PARAM_TABLE,",
          "2774:                                     \"key\", 0, 0, 0, 0, 0)!=SQLITE_OK ){",
          "2776:   }",
          "2777:   rc = sqlite3_prepare_v2(pArg->db,",
          "2778:           \"SELECT value FROM temp.\\\"\" BIND_PARAM_TABLE \"\\\"\"",
          "2779:           \" WHERE key=?1\", -1, &pQ, 0);",
          "2780:   if( rc || pQ==0 ) return;",
          "2781:   for(i=1; i<=nVar; i++){",
          "2782:     char zNum[30];",
          "2783:     const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "2784:     if( zVar==0 ){",
          "2785:       sqlite3_snprintf(sizeof(zNum),zNum,\"?%d\",i);",
          "2786:       zVar = zNum;",
          "2787:     }",
          "2788:     sqlite3_bind_text(pQ, 1, zVar, -1, SQLITE_STATIC);",
          "2789:     if( sqlite3_step(pQ)==SQLITE_ROW ){",
          "2790:       sqlite3_bind_value(pStmt, i, sqlite3_column_value(pQ, 0));",
          "2791:     }else{",
          "2792:       sqlite3_bind_null(pStmt, i);",
          "2793:     }",
          "2794:     sqlite3_reset(pQ);",
          "2795:   }",
          "2796:   sqlite3_finalize(pQ);",
          "2797: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3066:         }",
          "3067:       }",
          "3069:       exec_prepared_stmt(pArg, pStmt);",
          "3070:       explain_data_delete(pArg);",
          "3071:       eqp_render(pArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3118:       bind_prepared_stmt(pArg, pStmt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}