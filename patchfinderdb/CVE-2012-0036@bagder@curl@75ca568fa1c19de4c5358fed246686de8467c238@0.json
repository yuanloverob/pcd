{
  "cve_id": "CVE-2012-0036",
  "cve_desc": "curl and libcurl 7.2x before 7.24.0 do not properly consider special characters during extraction of a pathname from a URL, which allows remote attackers to conduct data-injection attacks via a crafted URL, as demonstrated by a CRLF injection attack on the (1) IMAP, (2) POP3, or (3) SMTP protocol.",
  "repo": "bagder/curl",
  "patch_hash": "75ca568fa1c19de4c5358fed246686de8467c238",
  "patch_info": {
    "commit_hash": "75ca568fa1c19de4c5358fed246686de8467c238",
    "repo": "bagder/curl",
    "commit_url": "https://github.com/bagder/curl/commit/75ca568fa1c19de4c5358fed246686de8467c238",
    "files": [
      "lib/escape.c",
      "lib/escape.h",
      "lib/imap.c",
      "lib/pop3.c",
      "lib/smtp.c"
    ],
    "message": "URL sanitize: reject URLs containing bad data\n\nProtocols (IMAP, POP3 and SMTP) that use the path part of a URL in a\ndecoded manner now use the new Curl_urldecode() function to reject URLs\nwith embedded control codes (anything that is or decodes to a byte value\nless than 32).\n\nURLs containing such codes could easily otherwise be used to do harm and\nallow users to do unintended actions with otherwise innocent tools and\napplications. Like for example using a URL like\npop3://pop3.example.com/1%0d%0aDELE%201 when the app wants a URL to get\na mail and instead this would delete one.\n\nThis flaw is considered a security vulnerability: CVE-2012-0036\n\nSecurity advisory at: http://curl.haxx.se/docs/adv_20120124.html\n\nReported by: Dan Fandrich",
    "before_after_code_files": [
      "lib/escape.c||lib/escape.c",
      "lib/escape.h||lib/escape.h",
      "lib/imap.c||lib/imap.c",
      "lib/pop3.c||lib/pop3.c",
      "lib/smtp.c||lib/smtp.c"
    ]
  },
  "patch_diff": {
    "lib/escape.c||lib/escape.c": [
      "File: lib/escape.c -> lib/escape.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #include \"urldata.h\"",
      "32: #include \"warnless.h\"",
      "33: #include \"non-ascii.h\"",
      "36: #include <curl/mprintf.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #include \"escape.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:   char *testing_ptr = NULL;",
      "86:   size_t newlen = alloc;",
      "88:   size_t length;",
      "89:   CURLcode res;",
      "",
      "[Removed Lines]",
      "87:   int strindex=0;",
      "",
      "[Added Lines]",
      "88:   size_t strindex=0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "132: }",
      "142: {",
      "144:   char *ns = malloc(alloc);",
      "145:   unsigned char in;",
      "147:   unsigned long hex;",
      "148:   CURLcode res;",
      "150:   if(!ns)",
      "153:   while(--alloc > 0) {",
      "154:     in = *string;",
      "",
      "[Removed Lines]",
      "140: char *curl_easy_unescape(CURL *handle, const char *string, int length,",
      "141:                          int *olen)",
      "143:   int alloc = (length?length:(int)strlen(string))+1;",
      "146:   int strindex=0;",
      "151:     return NULL;",
      "",
      "[Added Lines]",
      "145: CURLcode Curl_urldecode(struct SessionHandle *data,",
      "146:                         const char *string, size_t length,",
      "147:                         char **ostring, size_t *olen,",
      "148:                         bool reject_ctrl)",
      "150:   size_t alloc = (length?length:strlen(string))+1;",
      "153:   size_t strindex=0;",
      "158:     return CURLE_OUT_OF_MEMORY;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "168:       if(res) {",
      "170:         free(ns);",
      "172:       }",
      "174:       string+=2;",
      "175:       alloc-=2;",
      "176:     }",
      "178:     ns[strindex++] = in;",
      "179:     string++;",
      "",
      "[Removed Lines]",
      "167:       res = Curl_convert_from_network(handle, &in, 1);",
      "171:         return NULL;",
      "",
      "[Added Lines]",
      "174:       res = Curl_convert_from_network(data, &in, 1);",
      "178:         return res;",
      "184:     if(reject_ctrl && (in < 0x20)) {",
      "185:       free(ns);",
      "186:       return CURLE_URL_MALFORMAT;",
      "187:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "183:   if(olen)",
      "187: }",
      "",
      "[Removed Lines]",
      "186:   return ns;",
      "",
      "[Added Lines]",
      "198:   if(ostring)",
      "202:   return CURLE_OK;",
      "203: }",
      "211: char *curl_easy_unescape(CURL *handle, const char *string, int length,",
      "212:                          int *olen)",
      "213: {",
      "214:   char *str = NULL;",
      "215:   size_t inputlen = length;",
      "216:   size_t outputlen;",
      "217:   CURLcode res = Curl_urldecode(handle, string, inputlen, &str, &outputlen,",
      "218:                                 FALSE);",
      "219:   if(res)",
      "220:     return NULL;",
      "221:   if(olen)",
      "223:   return str;",
      "",
      "---------------"
    ],
    "lib/escape.h||lib/escape.h": [
      "File: lib/escape.h -> lib/escape.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: #ifndef __ESCAPE_H",
      "2: #define __ESCAPE_H",
      "",
      "[Added Lines]",
      "1: #ifndef HEADER_CURL_ESCAPE_H",
      "2: #define HEADER_CURL_ESCAPE_H",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: CURLcode Curl_urldecode(struct SessionHandle *data,",
      "29:                         const char *string, size_t length,",
      "30:                         char **ostring, size_t *olen,",
      "31:                         bool reject_crlf);",
      "",
      "---------------"
    ],
    "lib/imap.c||lib/imap.c": [
      "File: lib/imap.c -> lib/imap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "953:   struct imap_conn *imapc = &conn->proto.imapc;",
      "954:   struct SessionHandle *data = conn->data;",
      "955:   const char *path = data->state.path;",
      "958:   if(!*path)",
      "959:     path = \"INBOX\";",
      "967: }",
      "",
      "[Removed Lines]",
      "956:   int len;",
      "962:   imapc->mailbox = curl_easy_unescape(data, path, 0, &len);",
      "963:   if(!imapc->mailbox)",
      "964:     return CURLE_OUT_OF_MEMORY;",
      "966:   return CURLE_OK;",
      "",
      "[Added Lines]",
      "961:   return Curl_urldecode(data, path, 0, &imapc->mailbox, NULL, TRUE);",
      "",
      "---------------"
    ],
    "lib/pop3.c||lib/pop3.c": [
      "File: lib/pop3.c -> lib/pop3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "914:   const char *path = data->state.path;",
      "922: }",
      "",
      "[Removed Lines]",
      "917:   pop3c->mailbox = curl_easy_unescape(data, path, 0, NULL);",
      "918:   if(!pop3c->mailbox)",
      "919:     return CURLE_OUT_OF_MEMORY;",
      "921:   return CURLE_OK;",
      "",
      "[Added Lines]",
      "917:   return Curl_urldecode(data, path, 0, &pop3c->mailbox, NULL, TRUE);",
      "",
      "---------------"
    ],
    "lib/smtp.c||lib/smtp.c": [
      "File: lib/smtp.c -> lib/smtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1244:   struct SessionHandle *data = conn->data;",
      "1245:   struct pingpong *pp = &smtpc->pp;",
      "1246:   const char *path = conn->data->state.path;",
      "1248:   char localhost[HOSTNAME_MAX + 1];",
      "",
      "[Removed Lines]",
      "1247:   int len;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1316:   }",
      "",
      "[Removed Lines]",
      "1319:   smtpc->domain = curl_easy_unescape(conn->data, path, 0, &len);",
      "1320:   if(!smtpc->domain)",
      "1321:     return CURLE_OUT_OF_MEMORY;",
      "",
      "[Added Lines]",
      "1318:   result = Curl_urldecode(conn->data, path, 0, &smtpc->domain, NULL, TRUE);",
      "1319:   if(result)",
      "1320:     return result;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "400055bfaaa1b13b3f3051f69df9630da793dc8b",
      "candidate_info": {
        "commit_hash": "400055bfaaa1b13b3f3051f69df9630da793dc8b",
        "repo": "bagder/curl",
        "commit_url": "https://github.com/bagder/curl/commit/400055bfaaa1b13b3f3051f69df9630da793dc8b",
        "files": [
          "lib/smtp.c"
        ],
        "message": "smtp_connect: use defined buffer length for hostname",
        "before_after_code_files": [
          "lib/smtp.c||lismtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/smtp.c||lib/smtp.c"
          ],
          "candidate": [
            "lib/smtp.c||lismtp.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/smtp.c||lismtp.c": [
          "File: lib/smtp.c -> lismtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1100:   struct pingpong *pp = &smtpc->pp;",
          "1101:   const char *path = conn->data->state.path;",
          "1102:   int len;",
          "",
          "[Removed Lines]",
          "1103:   char localhost[1024 + 1];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}