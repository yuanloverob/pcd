{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "401593e348028071e0fd59753df046216a137ef9",
      "candidate_info": {
        "commit_hash": "401593e348028071e0fd59753df046216a137ef9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/401593e348028071e0fd59753df046216a137ef9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl"
        ],
        "message": "Add new release tests for windows to releasetest_data.tcl.\n\nFossilOrigin-Name: 1b330ec24c350c59f6d3779f6c0819fe95b89f4dfca5a1f2c22f22b5fe9cd087",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8168021f9ab5fb8b4888257963c9ec68fd1dfeedaf6bba4b8e07438001d0be0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #",
          "5: set USAGE {",
          "9: $argv0 script ?-msvc? CONFIGURATION TARGET",
          "10:     Given a configuration and make target, return a bash (or, if -msvc",
          "11:     is specified, batch) script to execute the test. The first argument",
          "12:     passed to the script must be a directory containing SQLite source code.",
          "20: }",
          "22: # Omit comments (text between # and \\n) in a long multi-line string.",
          "",
          "[Removed Lines]",
          "2: # This file contains Configuration data used by \"wapptest.tcl\" and",
          "3: # \"releasetest.tcl\".",
          "6: $argv0 configurations",
          "7:     List available configurations.",
          "14: $argv0 platforms",
          "15:     List available platforms.",
          "17: $argv0 tests ?-nodebug? PLATFORM",
          "18:     List tests in a specified platform. If the -nodebug switch is",
          "19:     specified, synthetic debug/ndebug configurations are omitted.",
          "",
          "[Added Lines]",
          "1: # 2019 August 01",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file implements a program that produces scripts (either shell scripts",
          "13: # or batch files) to implement a particular test that is part of the SQLite",
          "14: # release testing procedure. For example, to run veryquick.test with a",
          "15: # specified set of -D compiler switches.",
          "16: #",
          "17: # A \"configuration\" is a set of options passed to [./configure] and [make]",
          "18: # to build the SQLite library in a particular fashion. A \"platform\" is a",
          "19: # list of tests; most platforms are named after the hardware/OS platform",
          "20: # that the tests will be run on as part of the release procedure. Each",
          "21: # \"test\" is a combination of a configuration and a makefile target (e.g.",
          "22: # \"fulltest\"). The program may be invoked as follows:",
          "25: $argv0 platforms",
          "26:     List available platforms.",
          "28: $argv0 tests ?-nodebug? PLATFORM",
          "29:     List tests in a specified platform. If the -nodebug switch is",
          "30:     specified, synthetic debug/ndebug configurations are omitted. Each",
          "31:     test is a combination of a configuration and a makefile target.",
          "38: $argv0 configurations",
          "39:     List available configurations.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     --enable-json1",
          "235:   }",
          "237:   # The next group of configurations are used only by the",
          "238:   # Failure-Detection platform.  They are all the same, but we need",
          "239:   # different names for them all so that they results appear in separate",
          "240:   # subdirectories.",
          "241:   #",
          "246:   FuzzFail1 {-O0}",
          "247:   FuzzFail2 {-O0}",
          "248: }]",
          "",
          "[Removed Lines]",
          "242:   Fail0 {-O0}",
          "243:   Fail2 {-O0}",
          "244:   Fail3 {-O0}",
          "245:   Fail4 {-O0}",
          "",
          "[Added Lines]",
          "257:   \"Windows-Memdebug\" {",
          "258:     MEMDEBUG=1",
          "259:     DEBUG=3",
          "260:   }",
          "261:   \"Windows-Win32Heap\" {",
          "262:     WIN32HEAP=1",
          "263:     DEBUG=4",
          "264:   }",
          "271:   Fail0     {-O0}",
          "272:   Fail2     {-O0}",
          "273:   Fail3     {-O0}",
          "274:   Fail4     {-O0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253: array set ::Platforms [strip_comments {",
          "254:   Linux-x86_64 {",
          "256:     \"Fast-One\"                \"fuzztest test\"",
          "257:     \"Debug-One\"               \"mptest test\"",
          "258:     \"Have-Not\"                test",
          "",
          "[Removed Lines]",
          "255:     \"Check-Symbols\"           checksymbols",
          "",
          "[Added Lines]",
          "284:     \"Check-Symbols*\"          checksymbols",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:     \"Sanitize\"                {QUICKTEST_OMIT=func4.test,nan.test test}",
          "269:     \"Device-One\"              fulltest",
          "270:     \"Default\"                 \"threadtest fulltest\"",
          "272:   }",
          "273:   Linux-i686 {",
          "274:     \"Devkit\"                  test",
          "",
          "[Removed Lines]",
          "271:     \"Valgrind\"                valgrindtest",
          "",
          "[Added Lines]",
          "300:     \"Valgrind*\"               valgrindtest",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291:   \"Windows NT-intel\" {",
          "292:     \"Stdcall\"                 test",
          "293:     \"Have-Not\"                test",
          "294:     \"Default\"                 \"mptest fulltestonly\"",
          "295:   }",
          "296:   \"Windows NT-amd64\" {",
          "297:     \"Stdcall\"                 test",
          "298:     \"Have-Not\"                test",
          "299:     \"Default\"                 \"mptest fulltestonly\"",
          "300:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     \"Windows-Memdebug*\"       test",
          "324:     \"Windows-Win32Heap*\"      test",
          "330:     \"Windows-Memdebug*\"       test",
          "331:     \"Windows-Win32Heap*\"      test",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "304:   # correctly identifies failures.",
          "305:   #",
          "306:   Failure-Detection {",
          "314:   }",
          "315: }]",
          "",
          "[Removed Lines]",
          "307:     Fail0     \"TEST_FAILURE=0 test\"",
          "308:     Sanitize  \"TEST_FAILURE=1 test\"",
          "309:     Fail2     \"TEST_FAILURE=2 valgrindtest\"",
          "310:     Fail3     \"TEST_FAILURE=3 valgrindtest\"",
          "311:     Fail4     \"TEST_FAILURE=4 test\"",
          "312:     FuzzFail1 \"TEST_FAILURE=5 test\"",
          "313:     FuzzFail2 \"TEST_FAILURE=5 valgrindtest\"",
          "",
          "[Added Lines]",
          "340:     Fail0*     \"TEST_FAILURE=0 test\"",
          "341:     Sanitize*  \"TEST_FAILURE=1 test\"",
          "342:     Fail2*     \"TEST_FAILURE=2 valgrindtest\"",
          "343:     Fail3*     \"TEST_FAILURE=3 valgrindtest\"",
          "344:     Fail4*     \"TEST_FAILURE=4 test\"",
          "345:     FuzzFail1* \"TEST_FAILURE=5 test\"",
          "346:     FuzzFail2* \"TEST_FAILURE=5 valgrindtest\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "319: #",
          "320: foreach {key value} [array get ::Platforms] {",
          "321:   foreach {v t} $value {",
          "322:     if {0==[info exists ::Configs($v)]} {",
          "323:       puts stderr \"No such configuration: \\\"$v\\\"\"",
          "324:       exit -1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:     if {[string range $v end end]==\"*\"} {",
          "356:       set v [string range $v 0 end-1]",
          "357:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "368:   set makeOpts   [list]                         ;# Extra args for [make]",
          "369:   set configOpts [list]                         ;# Extra args for [configure]",
          "372:     lappend opts -DSQLITE_OS_WIN=1",
          "373:   } else {",
          "374:     lappend opts -DSQLITE_OS_UNIX=1",
          "",
          "[Removed Lines]",
          "371:   if {$::tcl_platform(platform)==\"windows\"} {",
          "",
          "[Added Lines]",
          "407:   if {$::tcl_platform(platform)==\"windows\" || $bMsvc} {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "398:   # $opts, $cflags, $makeOpts and $configOpts along the way. Rules are as",
          "399:   # follows:",
          "400:   #",
          "403:   #",
          "405:   #",
          "407:   #      this command is preparing a script for MSVC - then add an",
          "408:   #      equivalent to $makeOpts or $opts.",
          "409:   #",
          "411:   #      mode and the parameter is an -O<integer> option, instead add",
          "412:   #      an OPTIMIZATIONS=<integer> switch to $makeOpts.",
          "413:   #",
          "415:   #",
          "416:   foreach param $::Configs($config) {",
          "417:     if {$bRemoveDebug} {",
          "418:       if {$param==\"-DSQLITE_DEBUG\" || $param==\"-DSQLITE_DEBUG=1\"",
          "419:        || $param==\"-DSQLITE_MEMDEBUG\" || $param==\"-DSQLITE_MEMDEBUG=1\"",
          "",
          "[Removed Lines]",
          "401:   #   1. If $bRemoveDebug is set and the parameter is -DSQLITE_DEBUG or",
          "402:   #      -DSQLITE_DEBUG=1, discard it.",
          "404:   #   2. If the parameter begins with \"-D\", add it to $opts.",
          "406:   #   3. If the parameter begins with \"--\" add it to $configOpts. Unless",
          "410:   #   4. If the parameter begins with \"-\" add it to $cflags. If in MSVC",
          "414:   #   5. If none of the above apply, add the parameter to $makeOpts",
          "",
          "[Added Lines]",
          "437:   #   1. If the parameter begins with a \"*\", discard it.",
          "438:   #",
          "439:   #   2. If $bRemoveDebug is set and the parameter is -DSQLITE_DEBUG or",
          "440:   #      -DSQLITE_DEBUG=1, discard it",
          "442:   #   3. If the parameter begins with \"-D\", add it to $opts.",
          "444:   #   4. If the parameter begins with \"--\" add it to $configOpts. Unless",
          "448:   #   5. If the parameter begins with \"-\" add it to $cflags. If in MSVC",
          "452:   #   6. If none of the above apply, add the parameter to $makeOpts",
          "455:     if {[string range $param 0 0]==\"*\"} continue",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "529:   }",
          "531:   foreach {config target} $::Platforms($p) {",
          "532:     puts \"$config \\\"$target\\\"\"",
          "543:       }",
          "544:     }",
          "545:   }",
          "",
          "[Removed Lines]",
          "533:     if {$bNodebug==0} {",
          "534:       if {$target!=\"checksymbols\" && $target!=\"valgrindtest\"",
          "535:        && $target!=\"fuzzoomtest\"",
          "536:       } {",
          "537:         set iHas [string first SQLITE_DEBUG $::Configs($config)]",
          "538:         if {$iHas>=0} {",
          "539:           puts \"$config-ndebug \\\"test\\\"\"",
          "540:         } else {",
          "541:           puts \"$config-debug \\\"test\\\"\"",
          "542:         }",
          "",
          "[Added Lines]",
          "572:     set bNosynthetic 0",
          "573:     if {[string range $config end end]==\"*\"} {",
          "574:       set bNosynthetic 1",
          "575:       set config [string range $config 0 end-1]",
          "576:     }",
          "578:     if {$bNodebug==0 && $bNosynthetic==0} {",
          "579:       set iHas [string first SQLITE_DEBUG $::Configs($config)]",
          "580:       if {$iHas>=0} {",
          "581:         puts \"$config-ndebug \\\"test\\\"\"",
          "582:       } else {",
          "583:         puts \"$config-debug \\\"test\\\"\"",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "304: }",
          "306: # Return the contents of the \"slave script\" - the script run by slave",
          "313: #",
          "314: proc wapptest_slave_script {} {",
          "315:   global G",
          "",
          "[Removed Lines]",
          "307: # processes to actually perform the test. It does two things:",
          "308: #",
          "309: #   1. Reads and [exec]s the contents of file wapptest_configure.sh.",
          "310: #   2. Reads and [exec]s the contents of file wapptest_make.sh.",
          "311: #",
          "312: # Step 1 is omitted if the test uses MSVC (which does not use configure).",
          "",
          "[Added Lines]",
          "307: # processes to actually perform the test. All it does is execute the",
          "308: # test script already written to disk (wapptest_cmd.sh or wapptest_cmd.bat).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ca98ad6b1ed5f1d0d4f66824c914f495ae8053c",
      "candidate_info": {
        "commit_hash": "6ca98ad6b1ed5f1d0d4f66824c914f495ae8053c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ca98ad6b1ed5f1d0d4f66824c914f495ae8053c",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak in fts5 that could occur if scalar function fts5_decode() was passed a corrupt record.\n\nFossilOrigin-Name: 240f1c0c92cad8a1c19438b38489aedb831f62a4603c53f22367e876d8f644ff",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6422:       }",
          "6423:       if( iEnd>szLeaf ){",
          "6424:         rc = FTS5_CORRUPT;",
          "6426:       }",
          "6428:       if( bFirst==0 ){",
          "6429:         iOff += fts5GetVarint32(&a[iOff], nByte);",
          "6430:         if( nByte>term.n ){",
          "6431:           rc = FTS5_CORRUPT;",
          "6433:         }",
          "6434:         term.n = nByte;",
          "6435:       }",
          "",
          "[Removed Lines]",
          "6425:         goto decode_out;",
          "6432:           goto decode_out;",
          "",
          "[Added Lines]",
          "6425:         break;",
          "6432:           break;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3546:   DELETE FROM t1 WHERE a MATCH X'6620e574f32a';",
          "3547: } {0 {}}",
          "3549: sqlite3_fts5_may_be_corrupt 0",
          "3550: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3549: #-------------------------------------------------------------------------",
          "3550: reset_db",
          "3551: do_test 32.0 {",
          "3552:   sqlite3 db {}",
          "3553:   db deserialize [decode_hexdb {",
          "3554: | size 40960 pagesize 4096 filename crash-e2d47e0624a42c.db",
          "3555: | page 1 offset 0",
          "3556: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3557: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 0a   .....@  ........",
          "3558: |     32: 00 00 00 00 00 00 00 00 00 00 00 0d 00 00 00 04   ................",
          "3559: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "3560: |     96: 00 00 00 00 0d 00 00 00 0d 0b 6e 00 0f a3 0f 4c   ..........n....L",
          "3561: |    112: 0e e1 0e 81 0e 24 0d cc 0d 72 0d 1b 0c b0 0c 50   .....$...r.....P",
          "3562: |    128: 0b f8 0b b3 0b 6e 00 00 00 00 00 00 00 00 00 00   .....n..........",
          "3563: |   2912: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 43 0d   ..............C.",
          "3564: |   2928: 06 17 11 11 08 75 74 61 62 6c 65 74 34 74 34 43   .....utablet4t4C",
          "3565: |   2944: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "3566: |   2960: 42 4c 45 20 74 34 20 55 53 49 4e 47 20 66 74 73   BLE t4 USING fts",
          "3567: |   2976: 35 76 6f 63 61 62 28 27 74 32 27 2c 20 27 72 6f   5vocab('t2', 'ro",
          "3568: |   2992: 77 27 29 43 0c 06 17 11 11 08 75 74 61 62 6c 65   w')C......utable",
          "3569: |   3008: 74 33 74 33 43 52 45 41 54 45 20 56 49 52 54 55   t3t3CREATE VIRTU",
          "3570: |   3024: 41 4c 20 54 41 42 4c 45 20 74 33 20 55 53 49 4e   AL TABLE t3 USIN",
          "3571: |   3040: 47 20 66 74 73 35 76 6f 63 61 62 28 27 74 31 27   G fts5vocab('t1'",
          "3572: |   3056: 2c 20 27 72 6f 77 27 29 56 0b 06 17 1f 1f 01 7d   , 'row')V.......",
          "3573: |   3072: 74 61 62 6c 65 74 32 5f 63 6f 6e 66 69 67 74 32   tablet2_configt2",
          "3574: |   3088: 5f 63 6f 6e 66 69 67 0a 43 52 45 41 54 45 20 54   _config.CREATE T",
          "3575: |   3104: 41 42 4c 45 20 27 74 32 5f 63 6f 6e 66 69 67 27   ABLE 't2_config'",
          "3576: |   3120: 28 6b 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   (k PRIMARY KEY,",
          "3577: |   3136: 76 29 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44   v) WITHOUT ROWID",
          "3578: |   3152: 5e 0a 07 17 21 21 01 81 07 74 61 62 6c 65 74 32   ^...!!...tablet2",
          "3579: |   3168: 5f 63 6f 6e 74 65 6e 74 74 32 5f 63 6f 6e 74 65   _contentt2_conte",
          "3580: |   3184: 6e 74 09 43 52 45 41 54 45 20 54 41 42 4c 45 20   nt.CREATE TABLE",
          "3581: |   3200: 27 74 32 5f 63 6f 6e 74 65 6e 74 27 28 69 64 20   't2_content'(id",
          "3582: |   3216: 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20   INTEGER PRIMARY",
          "3583: |   3232: 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32 29   KEY, c0, c1, c2)",
          "3584: |   3248: 69 09 07 17 19 19 01 81 2d 74 61 62 6c 65 74 32   i.......-tablet2",
          "3585: |   3264: 5f 69 64 78 74 32 5f 69 64 78 08 43 52 45 41 54   _idxt2_idx.CREAT",
          "3586: |   3280: 45 20 54 41 42 4c 45 20 27 74 32 5f 69 64 78 27   E TABLE 't2_idx'",
          "3587: |   3296: 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70 67   (segid, term, pg",
          "3588: |   3312: 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59 28   no, PRIMARY KEY(",
          "3589: |   3328: 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57 49   segid, term)) WI",
          "3590: |   3344: 54 48 4f 55 54 20 52 4f 57 49 44 55 08 07 17 1b   THOUT ROWIDU....",
          "3591: |   3360: 1b 01 81 01 74 61 62 6c 65 74 32 5f 64 61 74 61   ....tablet2_data",
          "3592: |   3376: 74 32 5f 64 61 74 61 07 43 52 45 41 54 45 20 54   t2_data.CREATE T",
          "3593: |   3392: 41 42 4c 45 20 27 74 32 5f 64 61 74 61 27 28 69   ABLE 't2_data'(i",
          "3594: |   3408: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "3595: |   3424: 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f   Y KEY, block BLO",
          "3596: |   3440: 42 29 58 07 07 17 11 11 08 81 1d 74 61 62 6c 65   B)X........table",
          "3597: |   3456: 74 32 74 32 43 52 45 41 54 45 20 56 49 52 54 55   t2t2CREATE VIRTU",
          "3598: |   3472: 41 4c 20 54 41 42 4c 45 20 74 32 20 55 53 49 4e   AL TABLE t2 USIN",
          "3599: |   3488: 47 20 66 74 73 35 28 27 61 27 2c 5b 62 5d 2c 22   G fts5('a',[b],.",
          "3600: |   3504: 63 22 2c 64 65 74 61 69 6c 3d 6e 6f 6e 65 2c 63   c.,detail=none,c",
          "3601: |   3520: 6f 6c 75 6d 6e 73 69 7a 65 3d 30 29 56 06 06 17   olumnsize=0)V...",
          "3602: |   3536: 1f 1f 01 7d 74 61 62 6c 65 74 31 5f 63 6f 6e 66   ....tablet1_conf",
          "3603: |   3552: 69 67 74 31 5f 63 6f 6e 66 69 67 06 43 52 45 41   igt1_config.CREA",
          "3604: |   3568: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "3605: |   3584: 66 69 67 27 28 6b 20 50 52 49 4d 41 52 59 20 4b   fig'(k PRIMARY K",
          "3606: |   3600: 45 59 2c 20 76 29 20 57 49 54 48 4f 55 54 20 52   EY, v) WITHOUT R",
          "3607: |   3616: 4f 57 49 44 5b 05 07 17 21 21 01 81 01 74 61 62   OWID[...!!...tab",
          "3608: |   3632: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "3609: |   3648: 6f 63 73 69 7a 65 05 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "3610: |   3664: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "3611: |   3680: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "3612: |   3696: 41 52 59 20 4b 45 59 2c 20 73 7a 20 42 4c 4f 42   ARY KEY, sz BLOB",
          "3613: |   3712: 29 5e 04 07 17 21 21 01 81 07 74 61 62 6c 65 74   )^...!!...tablet",
          "3614: |   3728: 31 5f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1_contentt1_cont",
          "3615: |   3744: 65 6e 74 04 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "3616: |   3760: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 69 64    't1_content'(id",
          "3617: |   3776: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "3618: |   3792: 20 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32    KEY, c0, c1, c2",
          "3619: |   3808: 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74   )i.......-tablet",
          "3620: |   3824: 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45 41   1_idxt1_idx.CREA",
          "3621: |   3840: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64 78   TE TABLE 't1_idx",
          "3622: |   3856: 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70   '(segid, term, p",
          "3623: |   3872: 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59   gno, PRIMARY KEY",
          "3624: |   3888: 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57   (segid, term)) W",
          "3625: |   3904: 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07 17   ITHOUT ROWIDU...",
          "3626: |   3920: 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61 74   .....tablet1_dat",
          "3627: |   3936: 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45 20   at1_data.CREATE",
          "3628: |   3952: 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27 28   TABLE 't1_data'(",
          "3629: |   3968: 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41   id INTEGER PRIMA",
          "3630: |   3984: 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c   RY KEY, block BL",
          "3631: |   4000: 4f 42 29 5b 01 07 17 11 11 08 81 23 74 61 62 6c   OB)[.......#tabl",
          "3632: |   4016: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "3633: |   4032: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "3634: |   4048: 4e 47 20 66 74 73 35 28 61 2c 62 20 75 6e 69 6e   NG fts5(a,b unin",
          "3635: |   4064: 64 65 78 65 64 2c 63 2c 74 6f 6b 65 6e 69 7a 65   dexed,c,tokenize",
          "3636: |   4080: 3d 22 70 6f 72 74 65 72 20 61 73 63 69 69 22 29   =.porter ascii.)",
          "3637: | page 2 offset 4096",
          "3638: |      0: 0d 0f 68 00 05 0f 13 00 0f e6 0f 13 0f a8 0f 7c   ..h............|",
          "3639: |     16: 0f 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 00   .*..............",
          "3640: |   3856: 00 00 00 15 0a 03 00 30 00 00 00 00 01 03 03 00   .......0........",
          "3641: |   3872: 03 01 01 01 02 01 01 03 01 01 37 8c 80 80 80 80   ..........7.....",
          "3642: |   3888: 01 03 00 74 00 00 00 2e 02 30 61 03 02 02 01 01   ...t.....0a.....",
          "3643: |   3904: 62 03 02 03 01 01 63 03 02 04 01 01 67 03 06 01   b.....c.....g...",
          "3644: |   3920: 02 02 01 01 68 03 06 01 02 03 01 01 69 03 06 01   ....h.......i...",
          "3645: |   3936: 02 04 04 06 06 06 08 08 0f ef 00 14 2a 00 00 00   ............*...",
          "3646: |   3952: 00 01 02 02 00 02 01 01 01 02 01 01 25 88 80 80   ............%...",
          "3647: |   3968: 80 80 01 03 00 50 00 00 00 1f 02 30 67 02 08 02   .....P.....0g...",
          "3648: |   3984: 01 02 02 01 01 68 02 08 03 01 02 03 01 01 69 02   .....h........i.",
          "3649: |   4000: 08 04 01 02 04 04 09 09 37 84 80 80 80 80 01 03   ........7.......",
          "3650: |   4016: 00 74 00 00 00 2e 02 30 61 01 02 02 01 01 62 01   .t.....0a.....b.",
          "3651: |   4032: 02 03 01 01 63 01 02 04 01 01 67 01 06 01 02 20   ....c.....g....",
          "3652: |   4048: 10 16 80 10 60 10 20 30 10 16 90 10 60 10 20 40   ....`. 0....`. @",
          "3653: |   4064: 40 60 60 60 80 80 70 10 30 01 40 30 90 00 90 00   @```..p.0.@0....",
          "3654: |   4080: 00 01 12 40 00 00 00 00 10 10 10 00 10 10 10 10   ...@............",
          "3655: | page 3 offset 8192",
          "3656: |      0: a0 00 00 00 30 fe c0 00 ff a0 ff 30 fe 00 00 00   ....0......0....",
          "3657: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 06 04 01 0c   ................",
          "3658: |   4080: 01 03 02 06 04 01 0c 01 02 02 05 04 09 0c 01 02   ................",
          "3659: | page 4 offset 12288",
          "3660: |      0: 0d 00 00 00 03 0f be 00 0f ea 0f d4 0f be 00 00   ................",
          "3661: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 03   ................",
          "3662: |   4032: 05 00 17 17 17 61 20 62 20 63 67 20 68 20 69 67   .....a b cg h ig",
          "3663: |   4048: 20 68 20 69 14 02 05 00 17 17 17 67 20 68 20 69    h i.......g h i",
          "3664: |   4064: 61 20 62 20 63 67 20 68 20 69 14 01 05 00 17 17   a b cg h i......",
          "3665: |   4080: 17 61 20 62 20 63 64 20 65 20 66 67 20 68 20 69   .a b cd e fg h i",
          "3666: | page 5 offset 16384",
          "3667: |      0: 0d 00 00 00 03 0f e8 00 0f f8 0f f0 0f e8 00 00   ................",
          "3668: |   4064: 00 00 00 00 00 00 00 00 06 03 03 00 12 03 00 03   ................",
          "3669: |   4080: 06 02 03 00 12 03 00 03 06 01 03 00 12 03 00 03   ................",
          "3670: | page 6 offset 20480",
          "3671: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "3672: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "3673: | page 7 offset 24576",
          "3674: |      0: 0d 00 00 00 03 0f 9e 00 0f e6 0f ef 0f 9e 00 00   ................",
          "3675: |   3984: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 84   ..............A.",
          "3676: |   4000: 80 80 80 80 01 04 00 81 06 00 00 00 34 02 30 61   ............4.0a",
          "3677: |   4016: 01 01 01 01 01 62 01 01 01 01 01 63 01 01 01 01   .....b.....c....",
          "3678: |   4032: 01 64 01 01 01 65 01 01 01 66 01 01 01 01 01 68   .d...e...f.....h",
          "3679: |   4048: 01 01 01 01 01 69 01 01 01 04 06 06 06 04 04 04   .....i..........",
          "3680: |   4064: 06 06 07 01 03 00 14 03 09 09 09 0f 0a 03 00 24   ...............$",
          "3681: |   4080: 00 00 00 00 01 01 01 00 01 01 01 01 0a 00 00 00   ................",
          "3682: | page 8 offset 28672",
          "3683: |      0: 01 0f fa 00 0f fa 00 00 00 00 00 00 00 00 00 00   ................",
          "3684: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "3685: | page 9 offset 32768",
          "3686: |      0: 0d 00 00 00 03 0f be 00 0f ea 0f d4 1f be 00 00   ................",
          "3687: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 03   ................",
          "3688: |   4032: 05 00 17 17 17 61 20 62 20 63 67 20 68 20 69 67   .....a b cg h ig",
          "3689: |   4048: 20 68 20 69 14 02 05 00 17 17 17 67 20 68 20 69    h i.......g h i",
          "3690: |   4064: 61 20 62 20 63 67 20 68 20 69 14 01 05 00 17 17   a b cg h i......",
          "3691: |   4080: 17 61 20 62 20 63 64 20 65 20 66 67 20 68 20 69   .a b cd e fg h i",
          "3692: | page 10 offset 36864",
          "3693: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "3694: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "3695: | end crash-e2d47e0624a42c.db",
          "3696: }]} {}",
          "3698: do_catchsql_test 32.1 {",
          "3699:   SELECT snippet(t1, -1, '.', '..', '[', ']'),",
          "3700:          highlight(t1, 2, '[', ']')",
          "3701:   FROM t1('g + h')",
          "3702:   WHERE rank MATCH 'bm25(1.0, 1.0)' ORDER BY rank;",
          "3703: } {1 {vtable constructor failed: t1}}",
          "3705: do_catchsql_test 32.2 {",
          "3706:   SELECT * FROM t3;",
          "3707: } {1 {database disk image is malformed}}",
          "3709: do_catchsql_test 32.3 {",
          "3710:   SELECT * FROM t4;",
          "3711: } {1 {database disk image is malformed}}",
          "3713: do_catchsql_test 32.4 {",
          "3714:   SELECT fts5_decode(id, block) FROM t1_data;",
          "3715: } {1 {database disk image is malformed}}",
          "3717: do_catchsql_test 32.5 {",
          "3718:   SELECT fts5_decode(id, block) FROM t2_data;",
          "3719: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ff3b011f17f4f02e486f3c8de607f62eddf3b86562e2df82dba57ea166994b65",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b88eaf1619cf1be8c8cf2a0ffb9a2767a840b27e",
      "candidate_info": {
        "commit_hash": "b88eaf1619cf1be8c8cf2a0ffb9a2767a840b27e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b88eaf1619cf1be8c8cf2a0ffb9a2767a840b27e",
        "files": [
          "ext/expert/sqlite3expert.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add header guard to the expert extension.\n\nFossilOrigin-Name: 7e3151855fd4370fb7d4fff20516c2c2d1980134620df924106e6989bc130583",
        "before_after_code_files": [
          "ext/expert/sqlite3expert.h||ext/expert/sqlite3expert.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/sqlite3expert.h||ext/expert/sqlite3expert.h": [
          "File: ext/expert/sqlite3expert.h -> ext/expert/sqlite3expert.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"sqlite3.h\"",
          "17: typedef struct sqlite3expert sqlite3expert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #if !defined(SQLITEEXPERT_H)",
          "14: #define SQLITEEXPERT_H 1",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa2416f623d83fe93253137302a74fcd6cdd041da337a0756df344d7d09a19f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cce6b8310da057f5c4ffce3ce117ac84264e2ab",
      "candidate_info": {
        "commit_hash": "8cce6b8310da057f5c4ffce3ce117ac84264e2ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8cce6b8310da057f5c4ffce3ce117ac84264e2ab",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the --no-rowids option to the \".recover\" command.\n\nFossilOrigin-Name: 01d71b947a7422081d5c7d6ac2c91b9c936dc41926ab58c92f4a088a64e8c051",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3dbed162518a73213bbfb137c763064518fdc2daeae3952cfab39ce0e6813d3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3588:   \"   --freelist-corrupt       Assume the freelist is corrupt\",",
          "3589:   \"   --recovery-db NAME       Store recovery metadata in database file NAME\",",
          "3590:   \"   --lost-and-found TABLE   Alternative name for the lost-and-found table\",",
          "3591: #endif",
          "3592:   \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",",
          "3593:   \".save FILE               Write in-memory database into FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3591:   \"   --no-rowids              Do not attempt to recover rowid values\",",
          "3592:   \"                            that are not also INTEGER PRIMARY KEYs\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6607:     if( n<=15 && memcmp(\"-lost-and-found\", z, n)==0 && i<(nArg-1) ){",
          "6608:       i++;",
          "6609:       zLostAndFound = azArg[i];",
          "6610:     }",
          "6611:     else{",
          "6612:       utf8_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6613:     }else",
          "6614:     if( n<=10 && memcmp(\"-no-rowids\", z, n)==0 ){",
          "6615:       bRowids = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6772:   shellPrepare(pState->db, &rc,",
          "6773:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "6774:   );",
          "6775:   shellPrepare(pState->db, &rc,",
          "6777:       \", min(field) \"",
          "6778:       \"FROM sqlite_dbdata WHERE pgno = ? AND field != ?\"",
          "6779:       \"GROUP BY cell\", &pCells",
          "",
          "[Removed Lines]",
          "6776:       \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)), ', ')\"",
          "",
          "[Added Lines]",
          "6783:       \"SELECT max(field), group_concat(shell_escape_crnl(quote\"",
          "6784:       \"(case when (? AND field<0) then NULL else value end)\"",
          "6785:       \"), ', ')\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6808:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6809:     }",
          "6810:     sqlite3_bind_int(pPages, 1, iRoot);",
          "6813:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6814:       int iPgno = sqlite3_column_int(pPages, 0);",
          "6816:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6817:         int nField = sqlite3_column_int(pCells, 0);",
          "6818:         int iMin = sqlite3_column_int(pCells, 2);",
          "",
          "[Removed Lines]",
          "6811:     sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6815:       sqlite3_bind_int(pCells, 1, iPgno);",
          "",
          "[Added Lines]",
          "6820:     if( bRowids==0 && pTab->iPk<0 ){",
          "6821:       sqlite3_bind_int(pCells, 1, 1);",
          "6822:     }else{",
          "6823:       sqlite3_bind_int(pCells, 1, 0);",
          "6824:     }",
          "6825:     sqlite3_bind_int(pCells, 3, pTab->iPk);",
          "6829:       sqlite3_bind_int(pCells, 2, iPgno);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec3dda5b11f527c69f1007fa60ba2765e0a5628b",
      "candidate_info": {
        "commit_hash": "ec3dda5b11f527c69f1007fa60ba2765e0a5628b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec3dda5b11f527c69f1007fa60ba2765e0a5628b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Invert the meaning of the regBignull flag so that it is 1 when doing the normal scan and 1 when scanning nulls.  This enables the re-do jump at the bottom of the loop to be coded with a single OP_IfNotZero opcode, rather than a sequence of OP_If, OP_Integer, OP_Goto.\n\nFossilOrigin-Name: bf875e1a259a4167694e06349458452dc36c1d38aa6843518d9ae46ce74e5559",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 649b08ead50f10a9ec0357a5e1ed020195d9f93be61ef703ea036a8e53f07a34",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5218:       VdbeCoverageIf(v, pLevel->op==OP_VNext);",
          "5219:       if( pLevel->regBignull ){",
          "5220:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5228:       }",
          "5229: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "5230:       if( addrSeek ) sqlite3VdbeJumpHere(v, addrSeek);",
          "",
          "[Removed Lines]",
          "5221:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5222:         VdbeComment((v, \"If NULL-scan done\"));",
          "5223:         VdbeCoverage(v);",
          "5224:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5225:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5226:         VdbeComment((v, \"Do the NULL-scan\"));",
          "5227:         sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "5221:         sqlite3VdbeAddOp2(v, OP_IfNotZero, pLevel->regBignull, pLevel->p2-1);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1690:         sqlite3VdbeAddOp1(v, OP_SeekHit, iIdxCur);",
          "1691:       }",
          "1692:       if( regBignull ){",
          "1695:       }",
          "1697:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "",
          "[Removed Lines]",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 0, regBignull);",
          "1694:         VdbeComment((v, \"NULL-scan flag\"));",
          "",
          "[Added Lines]",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 1, regBignull);",
          "1694:         VdbeComment((v, \"NULL-scan needed flag\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1777:     if( nConstraint ){",
          "1778:       if( regBignull ){",
          "1781:         VdbeCoverage(v);",
          "1782:       }",
          "1783:       op = aEndOp[bRev*2 + endEq];",
          "",
          "[Removed Lines]",
          "1779:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1780:         VdbeComment((v, \"If in NULL-scan\"));",
          "",
          "[Added Lines]",
          "1779:         sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1780:         VdbeComment((v, \"If NULL-scan active\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1788:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1789:     }",
          "1790:     if( regBignull ){",
          "1793:       VdbeCoverage(v);",
          "1794:       if( bStopAtNull ){",
          "1795:         op = aEndOp[bRev*2 + 0];",
          "",
          "[Removed Lines]",
          "1791:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1792:       VdbeComment((v, \"If not in NULL-scan\"));",
          "",
          "[Added Lines]",
          "1791:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1792:       VdbeComment((v, \"If NULL-scan pending\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}