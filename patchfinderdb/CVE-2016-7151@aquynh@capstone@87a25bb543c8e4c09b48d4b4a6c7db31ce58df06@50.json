{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "760940fdceb50a09f1a8ebee5dc807b6039f144e",
      "candidate_info": {
        "commit_hash": "760940fdceb50a09f1a8ebee5dc807b6039f144e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/760940fdceb50a09f1a8ebee5dc807b6039f144e",
        "files": [
          "cs.c",
          "include/capstone.h"
        ],
        "message": "Addressed compile/link errors when built on VS for drivers",
        "before_after_code_files": [
          "cs.c||cs.c",
          "include/capstone.h||include/capstone.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: #endif",
          "112: CAPSTONE_EXPORT",
          "114: {",
          "115:  archs_enable();",
          "",
          "[Removed Lines]",
          "113: unsigned int cs_version(int *major, int *minor)",
          "",
          "[Added Lines]",
          "113: unsigned int CAPSTONE_API cs_version(int *major, int *minor)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: }",
          "125: CAPSTONE_EXPORT",
          "127: {",
          "128:  archs_enable();",
          "",
          "[Removed Lines]",
          "126: bool cs_support(int query)",
          "",
          "[Added Lines]",
          "126: bool CAPSTONE_API cs_support(int query)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: }",
          "159: CAPSTONE_EXPORT",
          "161: {",
          "162:  struct cs_struct *ud;",
          "163:  if (!handle)",
          "",
          "[Removed Lines]",
          "160: cs_err cs_errno(csh handle)",
          "",
          "[Added Lines]",
          "160: cs_err CAPSTONE_API cs_errno(csh handle)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169: }",
          "171: CAPSTONE_EXPORT",
          "173: {",
          "174:  switch(code) {",
          "175:   default:",
          "",
          "[Removed Lines]",
          "172: const char *cs_strerror(cs_err code)",
          "",
          "[Added Lines]",
          "172: const char * CAPSTONE_API cs_strerror(cs_err code)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202: }",
          "204: CAPSTONE_EXPORT",
          "206: {",
          "207:  cs_err err;",
          "208:  struct cs_struct *ud;",
          "",
          "[Removed Lines]",
          "205: cs_err cs_open(cs_arch arch, cs_mode mode, csh *handle)",
          "",
          "[Added Lines]",
          "205: cs_err CAPSTONE_API cs_open(cs_arch arch, cs_mode mode, csh *handle)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "247: }",
          "249: CAPSTONE_EXPORT",
          "251: {",
          "252:  struct cs_struct *ud;",
          "",
          "[Removed Lines]",
          "250: cs_err cs_close(csh *handle)",
          "",
          "[Added Lines]",
          "250: cs_err CAPSTONE_API cs_close(csh *handle)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "358: }",
          "360: CAPSTONE_EXPORT",
          "362: {",
          "363:  struct cs_struct *handle;",
          "364:  archs_enable();",
          "",
          "[Removed Lines]",
          "361: cs_err cs_option(csh ud, cs_opt_type type, size_t value)",
          "",
          "[Added Lines]",
          "361: cs_err CAPSTONE_API cs_option(csh ud, cs_opt_type type, size_t value)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "411:  char *p = opstr;",
          "412:  int len;",
          "413:  size_t i;",
          "415:  if (!size) {",
          "416:   opstr[0] = '\\0';",
          "417:   return;",
          "418:  }",
          "421:  p+= len;",
          "423:  for(i = 1; i < size; i++) {",
          "425:   p+= len;",
          "426:  }",
          "427: }",
          "431: CAPSTONE_EXPORT",
          "433: {",
          "434:  struct cs_struct *handle;",
          "435:  MCInst mci;",
          "",
          "[Removed Lines]",
          "420:  len = sprintf(p, \"0x%02x\", buffer[0]);",
          "424:   len = sprintf(p, \", 0x%02x\", buffer[i]);",
          "432: size_t cs_disasm(csh ud, const uint8_t *buffer, size_t size, uint64_t offset, size_t count, cs_insn **insn)",
          "",
          "[Added Lines]",
          "414:  size_t available = sizeof(((cs_insn*)NULL)->op_str);",
          "421:  len = cs_snprintf(p, available, \"0x%02x\", buffer[0]);",
          "423:  available -= len;",
          "426:   len = cs_snprintf(p, available, \", 0x%02x\", buffer[i]);",
          "427:   if (len < 0) {",
          "428:    break;",
          "429:   }",
          "430:   if ((size_t)len > available - 1) {",
          "431:    break;",
          "432:   }",
          "434:   available -= len;",
          "441: size_t CAPSTONE_API cs_disasm(csh ud, const uint8_t *buffer, size_t size, uint64_t offset, size_t count, cs_insn **insn)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "628: CAPSTONE_EXPORT",
          "629: CAPSTONE_DEPRECATED",
          "631: {",
          "632:  return cs_disasm(ud, buffer, size, offset, count, insn);",
          "633: }",
          "635: CAPSTONE_EXPORT",
          "637: {",
          "638:  size_t i;",
          "",
          "[Removed Lines]",
          "630: size_t cs_disasm_ex(csh ud, const uint8_t *buffer, size_t size, uint64_t offset, size_t count, cs_insn **insn)",
          "636: void cs_free(cs_insn *insn, size_t count)",
          "",
          "[Added Lines]",
          "639: size_t CAPSTONE_API cs_disasm_ex(csh ud, const uint8_t *buffer, size_t size, uint64_t offset, size_t count, cs_insn **insn)",
          "645: void CAPSTONE_API cs_free(cs_insn *insn, size_t count)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "646: }",
          "648: CAPSTONE_EXPORT",
          "650: {",
          "651:  cs_insn *insn;",
          "652:  struct cs_struct *handle = (struct cs_struct *)(uintptr_t)ud;",
          "",
          "[Removed Lines]",
          "649: cs_insn *cs_malloc(csh ud)",
          "",
          "[Added Lines]",
          "658: cs_insn * CAPSTONE_API cs_malloc(csh ud)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "676: CAPSTONE_EXPORT",
          "678:   uint64_t *address, cs_insn *insn)",
          "679: {",
          "680:  struct cs_struct *handle;",
          "",
          "[Removed Lines]",
          "677: bool cs_disasm_iter(csh ud, const uint8_t **code, size_t *size,",
          "",
          "[Added Lines]",
          "686: bool CAPSTONE_API cs_disasm_iter(csh ud, const uint8_t **code, size_t *size,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "763: CAPSTONE_EXPORT",
          "765: {",
          "766:  struct cs_struct *handle = (struct cs_struct *)(uintptr_t)ud;",
          "",
          "[Removed Lines]",
          "764: const char *cs_reg_name(csh ud, unsigned int reg)",
          "",
          "[Added Lines]",
          "773: const char * CAPSTONE_API cs_reg_name(csh ud, unsigned int reg)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "773: }",
          "775: CAPSTONE_EXPORT",
          "777: {",
          "778:  struct cs_struct *handle = (struct cs_struct *)(uintptr_t)ud;",
          "",
          "[Removed Lines]",
          "776: const char *cs_insn_name(csh ud, unsigned int insn)",
          "",
          "[Added Lines]",
          "785: const char * CAPSTONE_API cs_insn_name(csh ud, unsigned int insn)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "785: }",
          "787: CAPSTONE_EXPORT",
          "789: {",
          "790:  struct cs_struct *handle = (struct cs_struct *)(uintptr_t)ud;",
          "",
          "[Removed Lines]",
          "788: const char *cs_group_name(csh ud, unsigned int group)",
          "",
          "[Added Lines]",
          "797: const char * CAPSTONE_API cs_group_name(csh ud, unsigned int group)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "809: }",
          "811: CAPSTONE_EXPORT",
          "813: {",
          "814:  struct cs_struct *handle;",
          "815:  if (!ud)",
          "",
          "[Removed Lines]",
          "812: bool cs_insn_group(csh ud, const cs_insn *insn, unsigned int group_id)",
          "",
          "[Added Lines]",
          "821: bool CAPSTONE_API cs_insn_group(csh ud, const cs_insn *insn, unsigned int group_id)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "836: }",
          "838: CAPSTONE_EXPORT",
          "840: {",
          "841:  struct cs_struct *handle;",
          "842:  if (!ud)",
          "",
          "[Removed Lines]",
          "839: bool cs_reg_read(csh ud, const cs_insn *insn, unsigned int reg_id)",
          "",
          "[Added Lines]",
          "848: bool CAPSTONE_API cs_reg_read(csh ud, const cs_insn *insn, unsigned int reg_id)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "863: }",
          "865: CAPSTONE_EXPORT",
          "867: {",
          "868:  struct cs_struct *handle;",
          "869:  if (!ud)",
          "",
          "[Removed Lines]",
          "866: bool cs_reg_write(csh ud, const cs_insn *insn, unsigned int reg_id)",
          "",
          "[Added Lines]",
          "875: bool CAPSTONE_API cs_reg_write(csh ud, const cs_insn *insn, unsigned int reg_id)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "890: }",
          "892: CAPSTONE_EXPORT",
          "894: {",
          "895:  struct cs_struct *handle;",
          "896:  unsigned int count = 0, i;",
          "",
          "[Removed Lines]",
          "893: int cs_op_count(csh ud, const cs_insn *insn, unsigned int op_type)",
          "",
          "[Added Lines]",
          "902: int CAPSTONE_API cs_op_count(csh ud, const cs_insn *insn, unsigned int op_type)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "966: }",
          "968: CAPSTONE_EXPORT",
          "970:   unsigned int post)",
          "971: {",
          "972:  struct cs_struct *handle;",
          "",
          "[Removed Lines]",
          "969: int cs_op_index(csh ud, const cs_insn *insn, unsigned int op_type,",
          "",
          "[Added Lines]",
          "978: int CAPSTONE_API cs_op_index(csh ud, const cs_insn *insn, unsigned int op_type,",
          "",
          "---------------"
        ],
        "include/capstone.h||include/capstone.h": [
          "File: include/capstone.h -> include/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: extern \"C\" {",
          "9: #endif",
          "12: #include <stdarg.h>",
          "13: #if defined(CAPSTONE_HAS_OSXKERNEL)",
          "14: #include <libkern/libkern.h>",
          "",
          "[Removed Lines]",
          "11: #include <stdint.h>",
          "",
          "[Added Lines]",
          "11: #include \"../myinttypes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: #ifdef _MSC_VER",
          "23: #pragma warning(disable:4201)",
          "24: #pragma warning(disable:4100)",
          "25: #ifdef CAPSTONE_SHARED",
          "26: #define CAPSTONE_EXPORT __declspec(dllexport)",
          "27: #else    // defined(CAPSTONE_STATIC)",
          "28: #define CAPSTONE_EXPORT",
          "29: #endif",
          "30: #else",
          "31: #ifdef __GNUC__",
          "32: #define CAPSTONE_EXPORT __attribute__((visibility(\"default\")))",
          "33: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #define CAPSTONE_API __stdcall",
          "26: #define CAPSTONE_CDECL __cdecl",
          "33: #define CAPSTONE_API",
          "34: #define CAPSTONE_CDECL",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:  CS_MODE_MIPS64 = CS_MODE_64, // Mips64 ISA (Mips)",
          "100: } cs_mode;",
          "",
          "[Removed Lines]",
          "102: typedef void* (*cs_malloc_t)(size_t size);",
          "103: typedef void* (*cs_calloc_t)(size_t nmemb, size_t size);",
          "104: typedef void* (*cs_realloc_t)(void *ptr, size_t size);",
          "105: typedef void (*cs_free_t)(void *ptr);",
          "106: typedef int (*cs_vsnprintf_t)(char *str, size_t size, const char *format, va_list ap);",
          "",
          "[Added Lines]",
          "106: typedef void* (CAPSTONE_CDECL*cs_malloc_t)(size_t size);",
          "107: typedef void* (CAPSTONE_CDECL*cs_calloc_t)(size_t nmemb, size_t size);",
          "108: typedef void* (CAPSTONE_CDECL*cs_realloc_t)(void *ptr, size_t size);",
          "109: typedef void (CAPSTONE_CDECL*cs_free_t)(void *ptr);",
          "110: typedef int (CAPSTONE_CDECL*cs_vsnprintf_t)(char *str, size_t size, const char *format, va_list ap);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120: typedef enum cs_opt_type {",
          "122:  CS_OPT_DETAIL, // Break down instruction structure into details",
          "123:  CS_OPT_MODE, // Change engine's mode at run-time",
          "124:  CS_OPT_MEM, // User-defined dynamic memory related functions",
          "",
          "[Removed Lines]",
          "121:  CS_OPT_SYNTAX = 1, // Assembly output syntax",
          "",
          "[Added Lines]",
          "125:  CS_OPT_NONE = 0, // No opetion specified",
          "126:  CS_OPT_SYNTAX, // Assembly output syntax",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:  set both @major & @minor arguments to NULL.",
          "318: CAPSTONE_EXPORT",
          "",
          "[Removed Lines]",
          "319: unsigned int cs_version(int *major, int *minor);",
          "",
          "[Added Lines]",
          "324: unsigned int CAPSTONE_API cs_version(int *major, int *minor);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "333:  @return True if this library supports the given arch, or in 'diet' mode.",
          "335: CAPSTONE_EXPORT",
          "339:  Initialize CS handle: this must be done before any usage of CS.",
          "",
          "[Removed Lines]",
          "336: bool cs_support(int query);",
          "",
          "[Added Lines]",
          "341: bool CAPSTONE_API cs_support(int query);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "346:  for detailed error).",
          "348: CAPSTONE_EXPORT",
          "352:  Close CS handle: MUST do to release the handle when it is not used anymore.",
          "",
          "[Removed Lines]",
          "349: cs_err cs_open(cs_arch arch, cs_mode mode, csh *handle);",
          "",
          "[Added Lines]",
          "354: cs_err CAPSTONE_API cs_open(cs_arch arch, cs_mode mode, csh *handle);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "363:  for detailed error).",
          "365: CAPSTONE_EXPORT",
          "369:  Set option for disassembling engine at runtime",
          "",
          "[Removed Lines]",
          "366: cs_err cs_close(csh *handle);",
          "",
          "[Added Lines]",
          "371: cs_err CAPSTONE_API cs_close(csh *handle);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "380:  even before cs_open()",
          "382: CAPSTONE_EXPORT",
          "386:  Report the last error number when some API function fail.",
          "",
          "[Removed Lines]",
          "383: cs_err cs_option(csh handle, cs_opt_type type, size_t value);",
          "",
          "[Added Lines]",
          "388: cs_err CAPSTONE_API cs_option(csh handle, cs_opt_type type, size_t value);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "391:  @return: error code of cs_err enum type (CS_ERR_*, see above)",
          "393: CAPSTONE_EXPORT",
          "",
          "[Removed Lines]",
          "394: cs_err cs_errno(csh handle);",
          "",
          "[Added Lines]",
          "399: cs_err CAPSTONE_API cs_errno(csh handle);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "403:  passed in the argument @code",
          "405: CAPSTONE_EXPORT",
          "409:  Disassemble binary code, given the code buffer, size, address and number",
          "",
          "[Removed Lines]",
          "406: const char *cs_strerror(cs_err code);",
          "",
          "[Added Lines]",
          "411: const char * CAPSTONE_API cs_strerror(cs_err code);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "439:  On failure, call cs_errno() for error code.",
          "441: CAPSTONE_EXPORT",
          "443:   const uint8_t *code, size_t code_size,",
          "444:   uint64_t address,",
          "445:   size_t count,",
          "",
          "[Removed Lines]",
          "442: size_t cs_disasm(csh handle,",
          "",
          "[Added Lines]",
          "447: size_t CAPSTONE_API cs_disasm(csh handle,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "452: CAPSTONE_EXPORT",
          "453: CAPSTONE_DEPRECATED",
          "455:   const uint8_t *code, size_t code_size,",
          "456:   uint64_t address,",
          "457:   size_t count,",
          "",
          "[Removed Lines]",
          "454: size_t cs_disasm_ex(csh handle,",
          "",
          "[Added Lines]",
          "459: size_t CAPSTONE_API cs_disasm_ex(csh handle,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "465:      to free memory allocated by cs_malloc().",
          "467: CAPSTONE_EXPORT",
          "",
          "[Removed Lines]",
          "468: void cs_free(cs_insn *insn, size_t count);",
          "",
          "[Added Lines]",
          "473: void CAPSTONE_API cs_free(cs_insn *insn, size_t count);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "477:  this instruction with cs_free(insn, 1)",
          "479: CAPSTONE_EXPORT",
          "483:  Fast API to disassemble binary code, given the code buffer, size, address",
          "",
          "[Removed Lines]",
          "480: cs_insn *cs_malloc(csh handle);",
          "",
          "[Added Lines]",
          "485: cs_insn * CAPSTONE_API cs_malloc(csh handle);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "515:  On failure, call cs_errno() for error code.",
          "517: CAPSTONE_EXPORT",
          "519:  const uint8_t **code, size_t *size,",
          "520:  uint64_t *address, cs_insn *insn);",
          "",
          "[Removed Lines]",
          "518: bool cs_disasm_iter(csh handle,",
          "",
          "[Added Lines]",
          "523: bool CAPSTONE_API cs_disasm_iter(csh handle,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "533:  @return: string name of the register, or NULL if @reg_id is invalid.",
          "535: CAPSTONE_EXPORT",
          "539:  Return friendly name of an instruction in a string.",
          "",
          "[Removed Lines]",
          "536: const char *cs_reg_name(csh handle, unsigned int reg_id);",
          "",
          "[Added Lines]",
          "541: const char * CAPSTONE_API cs_reg_name(csh handle, unsigned int reg_id);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "548:  @return: string name of the instruction, or NULL if @insn_id is invalid.",
          "550: CAPSTONE_EXPORT",
          "554:  Return friendly name of a group id (that an instruction can belong to)",
          "",
          "[Removed Lines]",
          "551: const char *cs_insn_name(csh handle, unsigned int insn_id);",
          "",
          "[Added Lines]",
          "556: const char * CAPSTONE_API cs_insn_name(csh handle, unsigned int insn_id);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "563:  @return: string name of the group, or NULL if @group_id is invalid.",
          "565: CAPSTONE_EXPORT",
          "569:  Check if a disassembled instruction belong to a particular group.",
          "",
          "[Removed Lines]",
          "566: const char *cs_group_name(csh handle, unsigned int group_id);",
          "",
          "[Added Lines]",
          "571: const char * CAPSTONE_API cs_group_name(csh handle, unsigned int group_id);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "582:  @return: true if this instruction indeed belongs to aboved group, or false otherwise.",
          "584: CAPSTONE_EXPORT",
          "588:  Check if a disassembled instruction IMPLICITLY used a particular register.",
          "",
          "[Removed Lines]",
          "585: bool cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id);",
          "",
          "[Added Lines]",
          "590: bool CAPSTONE_API cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "600:  @return: true if this instruction indeed implicitly used aboved register, or false otherwise.",
          "602: CAPSTONE_EXPORT",
          "606:  Check if a disassembled instruction IMPLICITLY modified a particular register.",
          "",
          "[Removed Lines]",
          "603: bool cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id);",
          "",
          "[Added Lines]",
          "608: bool CAPSTONE_API cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "618:  @return: true if this instruction indeed implicitly modified aboved register, or false otherwise.",
          "620: CAPSTONE_EXPORT",
          "624:  Count the number of operands of a given type.",
          "",
          "[Removed Lines]",
          "621: bool cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id);",
          "",
          "[Added Lines]",
          "626: bool CAPSTONE_API cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "634:  or -1 on failure.",
          "636: CAPSTONE_EXPORT",
          "640:  Retrieve the position of operand of given type in <arch>.operands[] array.",
          "",
          "[Removed Lines]",
          "637: int cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type);",
          "",
          "[Added Lines]",
          "642: int CAPSTONE_API cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "653:  in instruction @insn, or -1 on failure.",
          "655: CAPSTONE_EXPORT",
          "657:   unsigned int position);",
          "659: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "656: int cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type,",
          "",
          "[Added Lines]",
          "661: int CAPSTONE_API cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb1855f34fc966377720472f62bff7a1f9f1eda0",
      "candidate_info": {
        "commit_hash": "fb1855f34fc966377720472f62bff7a1f9f1eda0",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/fb1855f34fc966377720472f62bff7a1f9f1eda0",
        "files": [
          "include/capstone/m68k.h"
        ],
        "message": "Add ENDING constants to be consistent with other archs",
        "before_after_code_files": [
          "include/capstone/m68k.h||include/capstone/m68k.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/m68k.h||include/capstone/m68k.h": [
          "File: include/capstone/m68k.h -> include/capstone/m68k.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:  M68K_INS_TST,",
          "568:  M68K_INS_UNLK,",
          "569:  M68K_INS_UNPK,",
          "570: } m68k_insn;",
          "572: #ifdef __cplusplus",
          "573: }",
          "574: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:  M68K_INS_ENDING,   // <-- mark the end of the list of instructions",
          "575: typedef enum m68k_insn_group {",
          "576:  M68K_GRP_INVALID = 0, // = CS_GRP_INVALID",
          "577:  M68K_GRP_ENDING,// <-- mark the end of the list of groups",
          "578: } m68k_insn_group;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dc304f729a6e3987c82f5992a53457a9b0ec9dd",
      "candidate_info": {
        "commit_hash": "7dc304f729a6e3987c82f5992a53457a9b0ec9dd",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7dc304f729a6e3987c82f5992a53457a9b0ec9dd",
        "files": [
          "bindings/python/capstone/m68k.py",
          "bindings/python/capstone/m68k_const.py"
        ],
        "message": "Fixed python bindings to align with struct changes",
        "before_after_code_files": [
          "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py",
          "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py": [
          "File: bindings/python/capstone/m68k.py -> bindings/python/capstone/m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:         ('dimm', ctypes.c_double),",
          "26:         ('simm', ctypes.c_float),",
          "27:         ('reg', ctypes.c_uint),",
          "28:         ('mem', M68KOpMem),",
          "29:         ('register_bits', ctypes.c_uint),",
          "30:     )",
          "32: class M68KOp(ctypes.Structure):",
          "33:     _fields_ = (",
          "34:         ('value', M68KOpValue),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:         ('reg_pair', M68KOpRegPair),",
          "33: class M68KOpRegPair(ctypes.Structure):",
          "34:     _fields_ = (",
          "35:         ('reg_0', ctypes.c_uint),",
          "36:         ('reg_1', ctypes.c_uint),",
          "37:     )",
          "",
          "---------------"
        ],
        "bindings/python/capstone/m68k_const.py||bindings/python/capstone/m68k_const.py": [
          "File: bindings/python/capstone/m68k_const.py -> bindings/python/capstone/m68k_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: M68K_OP_REG = 1",
          "81: M68K_OP_IMM = 2",
          "82: M68K_OP_MEM = 3",
          "87: M68K_CPU_SIZE_NONE = 0",
          "88: M68K_CPU_SIZE_BYTE = 1",
          "",
          "[Removed Lines]",
          "83: M68K_OP_FP = 4",
          "84: M68K_OP_REG_BITS = 5",
          "85: M68K_OP_REG_PAIR = 6",
          "",
          "[Added Lines]",
          "83: M68K_OP_FP_SINGLE = 4",
          "84: M68K_OP_FP_DOUBLE = 5",
          "85: M68K_OP_REG_BITS = 6",
          "86: M68K_OP_REG_PAIR = 7",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa07e1c7f3894f2d9299c3a52c67fcd941505e12",
      "candidate_info": {
        "commit_hash": "aa07e1c7f3894f2d9299c3a52c67fcd941505e12",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/aa07e1c7f3894f2d9299c3a52c67fcd941505e12",
        "files": [
          "bindings/python/setup.py",
          "bindings/python/setup_cython.py"
        ],
        "message": "Python: remove special case for cygwin build",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py",
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         # Do not build tests & static library",
          "100:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "101:         os.system(\"nmake\")",
          "108:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "110:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "102:     elif SYSTEM == \"cygwin\":",
          "103:         if IS_64BITS:",
          "104:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "105:         else:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "107:     else:   # Unix",
          "",
          "[Added Lines]",
          "102:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ],
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         # Do not build tests & static library",
          "91:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "92:         os.system(\"nmake\")",
          "100:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "102:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "93:     elif SYSTEM == \"cygwin\":",
          "94:         if IS_64BITS:",
          "95:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "96:         else:",
          "97:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "99:     else:   # Unix",
          "",
          "[Added Lines]",
          "93:     else:   # Unix incl. cygwin",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5441d5c0f5a31ba4b909701dc66d403c4d4cc51f",
      "candidate_info": {
        "commit_hash": "5441d5c0f5a31ba4b909701dc66d403c4d4cc51f",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/5441d5c0f5a31ba4b909701dc66d403c4d4cc51f",
        "files": [
          "arch/PowerPC/PPCInstPrinter.c"
        ],
        "message": "Do not truncate branch target address to 32 bit",
        "before_after_code_files": [
          "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c": [
          "File: arch/PowerPC/PPCInstPrinter.c -> arch/PowerPC/PPCInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "565: static void printAbsBranchOperand(MCInst *MI, unsigned OpNo, SStream *O)",
          "566: {",
          "569:  if (!MCOperand_isImm(MCInst_getOperand(MI, OpNo))) {",
          "570:   printOperand(MI, OpNo, O);",
          "571:   return;",
          "572:  }",
          "576:  if (!PPC_abs_branch(MI->csh, MCInst_getOpcode(MI))) {",
          "578:  }",
          "582:  if (MI->csh->detail) {",
          "583:   MI->flat_insn->detail->ppc.operands[MI->flat_insn->detail->ppc.op_count].type = PPC_OP_IMM;",
          "",
          "[Removed Lines]",
          "567:  int imm;",
          "574:  imm = ((int)MCOperand_getImm(MCInst_getOperand(MI, OpNo)) << 2);",
          "577:   imm = (int)MI->address + imm;",
          "580:  SStream_concat(O, \"0x%x\", imm);",
          "",
          "[Added Lines]",
          "567:  int64_t imm;",
          "574:  imm = MCOperand_getImm(MCInst_getOperand(MI, OpNo)) << 2;",
          "577:   imm = MI->address + imm;",
          "580:  SStream_concat(O, \"0x%\"PRIx64, imm);",
          "",
          "---------------"
        ]
      }
    }
  ]
}