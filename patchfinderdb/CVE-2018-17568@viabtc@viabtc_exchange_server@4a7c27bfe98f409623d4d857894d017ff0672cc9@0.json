{
  "cve_id": "CVE-2018-17568",
  "cve_desc": "utils/ut_rpc.c in ViaBTC Exchange Server before 2018-08-21 has an integer overflow leading to memory corruption.",
  "repo": "viabtc/viabtc_exchange_server",
  "patch_hash": "4a7c27bfe98f409623d4d857894d017ff0672cc9",
  "patch_info": {
    "commit_hash": "4a7c27bfe98f409623d4d857894d017ff0672cc9",
    "repo": "viabtc/viabtc_exchange_server",
    "commit_url": "https://github.com/viabtc/viabtc_exchange_server/commit/4a7c27bfe98f409623d4d857894d017ff0672cc9",
    "files": [
      "network/nw_buf.c",
      "utils/ut_rpc.c",
      "utils/ut_rpc.h",
      "utils/ut_ws_svr.c",
      "utils/ut_ws_svr.h",
      "README.md",
      "matchengine/me_message.c"
    ],
    "message": "Merge pull request #131 from benjaminchodroff/master\n\nfix memory corruption and other 32bit overflows",
    "before_after_code_files": [
      "network/nw_buf.c||network/nw_buf.c",
      "utils/ut_rpc.c||utils/ut_rpc.c",
      "utils/ut_rpc.h||utils/ut_rpc.h",
      "utils/ut_ws_svr.c||utils/ut_ws_svr.c",
      "utils/ut_ws_svr.h||utils/ut_ws_svr.h"
    ]
  },
  "patch_diff": {
    "network/nw_buf.c||network/nw_buf.c": [
      "File: network/nw_buf.c -> network/nw_buf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: # include \"nw_buf.h\"",
      "10: # define NW_BUF_POOL_INIT_SIZE 64",
      "11: # define NW_CACHE_INIT_SIZE    64",
      "13: size_t nw_buf_size(nw_buf *buf)",
      "14: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: # define NW_BUF_POOL_MAX_SIZE  65535",
      "13: # define NW_CACHE_MAX_SIZE     65535",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85: {",
      "86:     if (pool->free < pool->free_total) {",
      "87:         pool->free_arr[pool->free++] = buf;",
      "89:         uint32_t new_free_total = pool->free_total * 2;",
      "90:         void *new_arr = realloc(pool->free_arr, new_free_total * sizeof(nw_buf *));",
      "91:         if (new_arr) {",
      "",
      "[Removed Lines]",
      "88:     } else {",
      "",
      "[Added Lines]",
      "90:     } else if (pool->free_total < NW_BUF_POOL_MAX_SIZE) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:         } else {",
      "96:             free(buf);",
      "97:         }",
      "98:     }",
      "99: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:     } else {",
      "101:         free(buf);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "230: {",
      "231:     if (cache->free < cache->free_total) {",
      "232:         cache->free_arr[cache->free++] = obj;",
      "234:         uint32_t new_free_total = cache->free_total * 2;",
      "235:         void *new_arr = realloc(cache->free_arr, new_free_total * sizeof(void *));",
      "236:         if (new_arr) {",
      "",
      "[Removed Lines]",
      "233:     } else {",
      "",
      "[Added Lines]",
      "237:     } else if (cache->free_total < NW_CACHE_MAX_SIZE) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "240:         } else {",
      "241:             free(obj);",
      "242:         }",
      "243:     }",
      "244: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "247:     } else {",
      "248:         free(obj);",
      "",
      "---------------"
    ],
    "utils/ut_rpc.c||utils/ut_rpc.c": [
      "File: utils/ut_rpc.c -> utils/ut_rpc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: {",
      "45:     static void *send_buf;",
      "46:     static size_t send_buf_size;",
      "48:     if (send_buf_size < pkg_size) {",
      "49:         if (send_buf)",
      "50:             free(send_buf);",
      "51:         send_buf_size = pkg_size * 2;",
      "52:         send_buf = malloc(send_buf_size);",
      "54:     }",
      "56:     memcpy(send_buf, pkg, RPC_PKG_HEAD_SIZE);",
      "",
      "[Removed Lines]",
      "47:     uint32_t pkg_size = RPC_PKG_HEAD_SIZE + pkg->ext_size + pkg->body_size;",
      "53:         assert(send_buf != NULL);",
      "",
      "[Added Lines]",
      "47:     uint32_t pkg_size;",
      "48:     if (pkg->body_size > RPC_PKG_MAX_BODY_SIZE) {",
      "49:         return -1;",
      "50:     }",
      "51:     pkg_size = RPC_PKG_HEAD_SIZE + pkg->ext_size + pkg->body_size;",
      "57:         if (send_buf == NULL) {",
      "58:             return -1;",
      "59:         }",
      "",
      "---------------"
    ],
    "utils/ut_rpc.h||utils/ut_rpc.h": [
      "File: utils/ut_rpc.h -> utils/ut_rpc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: # pragma pack()",
      "34: # define RPC_PKG_HEAD_SIZE (sizeof(rpc_pkg) - sizeof(void *) * 2)",
      "36: int rpc_decode(nw_ses *ses, void *data, size_t max);",
      "37: int rpc_pack(rpc_pkg *pkg, void **data, uint32_t *size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: # define RPC_PKG_MAX_BODY_SIZE ((UINT32_MAX / 2) - UINT16_MAX - sizeof(rpc_pkg))",
      "",
      "---------------"
    ],
    "utils/ut_ws_svr.c||utils/ut_ws_svr.c": [
      "File: utils/ut_ws_svr.c -> utils/ut_ws_svr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:     if (upgrade == NULL || strcasecmp(upgrade, \"websocket\") != 0)",
      "130:         goto error;",
      "131:     const char *connection = http_request_get_header(info->request, \"Connection\");",
      "133:         goto error;",
      "134:     else {",
      "135:         bool found_upgrade = false;",
      "",
      "[Removed Lines]",
      "132:     if (connection == NULL)",
      "",
      "[Added Lines]",
      "132:     if (connection == NULL || strlen(connection) > UT_WS_SVR_MAX_HEADER_SIZE)",
      "",
      "---------------"
    ],
    "utils/ut_ws_svr.h||utils/ut_ws_svr.h": [
      "File: utils/ut_ws_svr.h -> utils/ut_ws_svr.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: # include \"nw_buf.h\"",
      "13: # include \"nw_timer.h\"",
      "15: typedef struct ws_svr_cfg {",
      "16:     uint32_t bind_count;",
      "17:     nw_svr_bind *bind_arr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: # define UT_WS_SVR_MAX_HEADER_SIZE 1024",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c2dc2b7856a66338e2f113540fd2e8fcb847f9e",
      "candidate_info": {
        "commit_hash": "5c2dc2b7856a66338e2f113540fd2e8fcb847f9e",
        "repo": "viabtc/viabtc_exchange_server",
        "commit_url": "https://github.com/viabtc/viabtc_exchange_server/commit/5c2dc2b7856a66338e2f113540fd2e8fcb847f9e",
        "files": [
          "network/nw_buf.c",
          "utils/ut_rpc.c",
          "utils/ut_rpc.h",
          "utils/ut_ws_svr.c",
          "utils/ut_ws_svr.h"
        ],
        "message": "fix memory corruption and other 32bit overflows",
        "before_after_code_files": [
          "network/nw_buf.c||network/nw_buf.c",
          "utils/ut_rpc.c||utils/ut_rpc.c",
          "utils/ut_rpc.h||utils/ut_rpc.h",
          "utils/ut_ws_svr.c||utils/ut_ws_svr.c",
          "utils/ut_ws_svr.h||utils/ut_ws_svr.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/viabtc/viabtc_exchange_server/pull/131"
        ],
        "olp_code_files": {
          "patch": [
            "network/nw_buf.c||network/nw_buf.c",
            "utils/ut_rpc.c||utils/ut_rpc.c",
            "utils/ut_rpc.h||utils/ut_rpc.h",
            "utils/ut_ws_svr.c||utils/ut_ws_svr.c",
            "utils/ut_ws_svr.h||utils/ut_ws_svr.h"
          ],
          "candidate": [
            "network/nw_buf.c||network/nw_buf.c",
            "utils/ut_rpc.c||utils/ut_rpc.c",
            "utils/ut_rpc.h||utils/ut_rpc.h",
            "utils/ut_ws_svr.c||utils/ut_ws_svr.c",
            "utils/ut_ws_svr.h||utils/ut_ws_svr.h"
          ]
        }
      },
      "candidate_diff": {
        "network/nw_buf.c||network/nw_buf.c": [
          "File: network/nw_buf.c -> network/nw_buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: # include \"nw_buf.h\"",
          "10: # define NW_BUF_POOL_INIT_SIZE 64",
          "11: # define NW_CACHE_INIT_SIZE    64",
          "13: size_t nw_buf_size(nw_buf *buf)",
          "14: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: # define NW_BUF_POOL_MAX_SIZE  65535",
          "13: # define NW_CACHE_MAX_SIZE     65535",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: {",
          "86:     if (pool->free < pool->free_total) {",
          "87:         pool->free_arr[pool->free++] = buf;",
          "89:         uint32_t new_free_total = pool->free_total * 2;",
          "90:         void *new_arr = realloc(pool->free_arr, new_free_total * sizeof(nw_buf *));",
          "91:         if (new_arr) {",
          "",
          "[Removed Lines]",
          "88:     } else {",
          "",
          "[Added Lines]",
          "90:     } else if (pool->free_total < NW_BUF_POOL_MAX_SIZE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         } else {",
          "96:             free(buf);",
          "97:         }",
          "98:     }",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     } else {",
          "101:         free(buf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230: {",
          "231:     if (cache->free < cache->free_total) {",
          "232:         cache->free_arr[cache->free++] = obj;",
          "234:         uint32_t new_free_total = cache->free_total * 2;",
          "235:         void *new_arr = realloc(cache->free_arr, new_free_total * sizeof(void *));",
          "236:         if (new_arr) {",
          "",
          "[Removed Lines]",
          "233:     } else {",
          "",
          "[Added Lines]",
          "237:     } else if (cache->free_total < NW_CACHE_MAX_SIZE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240:         } else {",
          "241:             free(obj);",
          "242:         }",
          "243:     }",
          "244: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     } else {",
          "248:         free(obj);",
          "",
          "---------------"
        ],
        "utils/ut_rpc.c||utils/ut_rpc.c": [
          "File: utils/ut_rpc.c -> utils/ut_rpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: {",
          "45:     static void *send_buf;",
          "46:     static size_t send_buf_size;",
          "48:     if (send_buf_size < pkg_size) {",
          "49:         if (send_buf)",
          "50:             free(send_buf);",
          "51:         send_buf_size = pkg_size * 2;",
          "52:         send_buf = malloc(send_buf_size);",
          "54:     }",
          "56:     memcpy(send_buf, pkg, RPC_PKG_HEAD_SIZE);",
          "",
          "[Removed Lines]",
          "47:     uint32_t pkg_size = RPC_PKG_HEAD_SIZE + pkg->ext_size + pkg->body_size;",
          "53:         assert(send_buf != NULL);",
          "",
          "[Added Lines]",
          "47:     uint32_t pkg_size;",
          "48:     if (pkg->body_size > RPC_PKG_MAX_BODY_SIZE) {",
          "49:         return -1;",
          "50:     }",
          "51:     pkg_size = RPC_PKG_HEAD_SIZE + pkg->ext_size + pkg->body_size;",
          "57:         if (send_buf == NULL) {",
          "58:             return -1;",
          "59:         }",
          "",
          "---------------"
        ],
        "utils/ut_rpc.h||utils/ut_rpc.h": [
          "File: utils/ut_rpc.h -> utils/ut_rpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: # pragma pack()",
          "34: # define RPC_PKG_HEAD_SIZE (sizeof(rpc_pkg) - sizeof(void *) * 2)",
          "36: int rpc_decode(nw_ses *ses, void *data, size_t max);",
          "37: int rpc_pack(rpc_pkg *pkg, void **data, uint32_t *size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: # define RPC_PKG_MAX_BODY_SIZE ((UINT32_MAX / 2) - UINT16_MAX - sizeof(rpc_pkg))",
          "",
          "---------------"
        ],
        "utils/ut_ws_svr.c||utils/ut_ws_svr.c": [
          "File: utils/ut_ws_svr.c -> utils/ut_ws_svr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     if (upgrade == NULL || strcasecmp(upgrade, \"websocket\") != 0)",
          "130:         goto error;",
          "131:     const char *connection = http_request_get_header(info->request, \"Connection\");",
          "133:         goto error;",
          "134:     else {",
          "135:         bool found_upgrade = false;",
          "",
          "[Removed Lines]",
          "132:     if (connection == NULL)",
          "",
          "[Added Lines]",
          "132:     if (connection == NULL || strlen(connection) > UT_WS_SVR_MAX_HEADER_SIZE)",
          "",
          "---------------"
        ],
        "utils/ut_ws_svr.h||utils/ut_ws_svr.h": [
          "File: utils/ut_ws_svr.h -> utils/ut_ws_svr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # include \"nw_buf.h\"",
          "13: # include \"nw_timer.h\"",
          "15: typedef struct ws_svr_cfg {",
          "16:     uint32_t bind_count;",
          "17:     nw_svr_bind *bind_arr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: # define UT_WS_SVR_MAX_HEADER_SIZE 1024",
          "",
          "---------------"
        ]
      }
    }
  ]
}