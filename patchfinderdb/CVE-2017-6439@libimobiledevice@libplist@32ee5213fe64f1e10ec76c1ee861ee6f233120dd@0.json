{
  "cve_id": "CVE-2017-6439",
  "cve_desc": "Heap-based buffer overflow in the parse_string_node function in bplist.c in libimobiledevice libplist 1.12 allows local users to cause a denial of service (out-of-bounds write) via a crafted plist file.",
  "repo": "libimobiledevice/libplist",
  "patch_hash": "32ee5213fe64f1e10ec76c1ee861ee6f233120dd",
  "patch_info": {
    "commit_hash": "32ee5213fe64f1e10ec76c1ee861ee6f233120dd",
    "repo": "libimobiledevice/libplist",
    "commit_url": "https://github.com/libimobiledevice/libplist/commit/32ee5213fe64f1e10ec76c1ee861ee6f233120dd",
    "files": [
      "src/bplist.c"
    ],
    "message": "bplist: Fix data range check for string/data/dict/array nodes\n\nPassing a size of 0xFFFFFFFFFFFFFFFF to parse_string_node() might result\nin a memcpy with a size of -1, leading to undefined behavior.\nThis commit makes sure that the actual node data (which depends on the size)\nis in the range start_of_object..start_of_object+size.\n\nCredit to OSS-Fuzz",
    "before_after_code_files": [
      "src/bplist.c||src/bplist.c"
    ]
  },
  "patch_diff": {
    "src/bplist.c||src/bplist.c": [
      "File: src/bplist.c -> src/bplist.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "654:         return parse_date_node(object, size);",
      "656:     case BPLIST_DATA:",
      "658:             PLIST_BIN_ERR(\"%s: BPLIST_DATA data bytes point outside of valid range\\n\", __func__);",
      "659:             return NULL;",
      "660:         }",
      "661:         return parse_data_node(object, size);",
      "663:     case BPLIST_STRING:",
      "665:             PLIST_BIN_ERR(\"%s: BPLIST_STRING data bytes point outside of valid range\\n\", __func__);",
      "666:             return NULL;",
      "667:         }",
      "",
      "[Removed Lines]",
      "657:         if (*object + size > bplist->offset_table) {",
      "664:         if (*object + size > bplist->offset_table) {",
      "",
      "[Added Lines]",
      "657:         if (*object + size < *object || *object + size > bplist->offset_table) {",
      "664:         if (*object + size < *object || *object + size > bplist->offset_table) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "672:             PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);",
      "673:             return NULL;",
      "674:         }",
      "676:             PLIST_BIN_ERR(\"%s: BPLIST_UNICODE data bytes point outside of valid range\\n\", __func__);",
      "677:             return NULL;",
      "678:         }",
      "",
      "[Removed Lines]",
      "675:         if (*object + size*2 > bplist->offset_table) {",
      "",
      "[Added Lines]",
      "675:         if (*object + size*2 < *object || *object + size*2 > bplist->offset_table) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "681:     case BPLIST_SET:",
      "682:     case BPLIST_ARRAY:",
      "684:             PLIST_BIN_ERR(\"%s: BPLIST_ARRAY data bytes point outside of valid range\\n\", __func__);",
      "685:             return NULL;",
      "686:         }",
      "",
      "[Removed Lines]",
      "683:         if (*object + size > bplist->offset_table) {",
      "",
      "[Added Lines]",
      "683:         if (*object + size < *object || *object + size > bplist->offset_table) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "694:         return parse_uid_node(object, size);",
      "696:     case BPLIST_DICT:",
      "699:             return NULL;",
      "700:         }",
      "701:         return parse_dict_node(bplist, object, size);",
      "",
      "[Removed Lines]",
      "697:         if (*object + size > bplist->offset_table) {",
      "698:             PLIST_BIN_ERR(\"%s: BPLIST_REAL data bytes point outside of valid range\\n\", __func__);",
      "",
      "[Added Lines]",
      "697:         if (*object + size < *object || *object + size > bplist->offset_table) {",
      "698:             PLIST_BIN_ERR(\"%s: BPLIST_DICT data bytes point outside of valid range\\n\", __func__);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dccd9290745345896e3a4a73154576a599fd8b7b",
      "candidate_info": {
        "commit_hash": "dccd9290745345896e3a4a73154576a599fd8b7b",
        "repo": "libimobiledevice/libplist",
        "commit_url": "https://github.com/libimobiledevice/libplist/commit/dccd9290745345896e3a4a73154576a599fd8b7b",
        "files": [
          "src/bplist.c"
        ],
        "message": "bplist: Make sure sanity checks work on 32bit platforms\n\nBecause on 32-bit platforms 32-bit pointers and 64-bit sizes have been\nused for the sanity checks of the offset table and object references,\nthe range checks would fail in certain interger-overflowish situations,\ncausing heap buffer overflows or other unwanted behavior.\nFixed by wideing the operands in question to 64-bit.",
        "before_after_code_files": [
          "src/bplist.c||src/bplist.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bplist.c||src/bplist.c"
          ],
          "candidate": [
            "src/bplist.c||src/bplist.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bplist.c||src/bplist.c": [
          "File: src/bplist.c -> src/bplist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561: {",
          "562:     uint16_t type = 0;",
          "563:     uint64_t size = 0;",
          "565:     if (!object)",
          "566:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:     uint64_t pobject = 0;",
          "565:     uint64_t poffset_table = (uint64_t)bplist->offset_table;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:         }",
          "599:     }",
          "601:     switch (type)",
          "602:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:     pobject = (uint64_t)*object;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "629:         }",
          "631:     case BPLIST_UINT:",
          "633:             PLIST_BIN_ERR(\"%s: BPLIST_UINT data bytes point outside of valid range\\n\", __func__);",
          "634:             return NULL;",
          "635:         }",
          "636:         return parse_uint_node(object, size);",
          "638:     case BPLIST_REAL:",
          "640:             PLIST_BIN_ERR(\"%s: BPLIST_REAL data bytes point outside of valid range\\n\", __func__);",
          "641:             return NULL;",
          "642:         }",
          "",
          "[Removed Lines]",
          "632:         if (*object + (uint64_t)(1 << size) > bplist->offset_table) {",
          "639:         if (*object + (uint64_t)(1 << size) > bplist->offset_table) {",
          "",
          "[Added Lines]",
          "636:         if (pobject + (uint64_t)(1 << size) > poffset_table) {",
          "643:         if (pobject + (uint64_t)(1 << size) > poffset_table) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "647:             PLIST_BIN_ERR(\"%s: invalid data size for BPLIST_DATE node\\n\", __func__);",
          "648:             return NULL;",
          "649:         }",
          "651:             PLIST_BIN_ERR(\"%s: BPLIST_DATE data bytes point outside of valid range\\n\", __func__);",
          "652:             return NULL;",
          "653:         }",
          "654:         return parse_date_node(object, size);",
          "656:     case BPLIST_DATA:",
          "658:             PLIST_BIN_ERR(\"%s: BPLIST_DATA data bytes point outside of valid range\\n\", __func__);",
          "659:             return NULL;",
          "660:         }",
          "661:         return parse_data_node(object, size);",
          "663:     case BPLIST_STRING:",
          "665:             PLIST_BIN_ERR(\"%s: BPLIST_STRING data bytes point outside of valid range\\n\", __func__);",
          "666:             return NULL;",
          "667:         }",
          "",
          "[Removed Lines]",
          "650:         if (*object + (uint64_t)(1 << size) > bplist->offset_table) {",
          "657:         if (*object + size < *object || *object + size > bplist->offset_table) {",
          "664:         if (*object + size < *object || *object + size > bplist->offset_table) {",
          "",
          "[Added Lines]",
          "654:         if (pobject + (uint64_t)(1 << size) > poffset_table) {",
          "661:         if (pobject + size < pobject || pobject + size > poffset_table) {",
          "668:         if (pobject + size < pobject || pobject + size > poffset_table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "672:             PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);",
          "673:             return NULL;",
          "674:         }",
          "676:             PLIST_BIN_ERR(\"%s: BPLIST_UNICODE data bytes point outside of valid range\\n\", __func__);",
          "677:             return NULL;",
          "678:         }",
          "",
          "[Removed Lines]",
          "675:         if (*object + size*2 < *object || *object + size*2 > bplist->offset_table) {",
          "",
          "[Added Lines]",
          "679:         if (pobject + size*2 < pobject || pobject + size*2 > poffset_table) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "681:     case BPLIST_SET:",
          "682:     case BPLIST_ARRAY:",
          "684:             PLIST_BIN_ERR(\"%s: BPLIST_ARRAY data bytes point outside of valid range\\n\", __func__);",
          "685:             return NULL;",
          "686:         }",
          "687:         return parse_array_node(bplist, object, size);",
          "689:     case BPLIST_UID:",
          "691:             PLIST_BIN_ERR(\"%s: BPLIST_UID data bytes point outside of valid range\\n\", __func__);",
          "692:             return NULL;",
          "693:         }",
          "694:         return parse_uid_node(object, size);",
          "696:     case BPLIST_DICT:",
          "698:             PLIST_BIN_ERR(\"%s: BPLIST_DICT data bytes point outside of valid range\\n\", __func__);",
          "699:             return NULL;",
          "700:         }",
          "",
          "[Removed Lines]",
          "683:         if (*object + size < *object || *object + size > bplist->offset_table) {",
          "690:         if (*object + size+1 > bplist->offset_table) {",
          "697:         if (*object + size < *object || *object + size > bplist->offset_table) {",
          "",
          "[Added Lines]",
          "687:         if (pobject + size < pobject || pobject + size > poffset_table) {",
          "694:         if (pobject + size+1 > poffset_table) {",
          "701:         if (pobject + size < pobject || pobject + size > poffset_table) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "830:         return;",
          "831:     }",
          "834:         PLIST_BIN_ERR(\"offset table points outside of valid range\\n\");",
          "835:         return;",
          "836:     }",
          "",
          "[Removed Lines]",
          "833:     if (offset_table + num_objects * offset_size > end_data) {",
          "",
          "[Added Lines]",
          "837:     if ((uint64_t)offset_table + num_objects * offset_size > (uint64_t)end_data) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31d7cc5370f37cc6b9ecc4e26256e74634554343",
      "candidate_info": {
        "commit_hash": "31d7cc5370f37cc6b9ecc4e26256e74634554343",
        "repo": "libimobiledevice/libplist",
        "commit_url": "https://github.com/libimobiledevice/libplist/commit/31d7cc5370f37cc6b9ecc4e26256e74634554343",
        "files": [
          "src/bplist.c",
          "src/plist.c"
        ],
        "message": "bplist: Add error/debug logging (only if configured with --enable-debug)\n\nThis commit adds proper debug/error messages being printed if the binary\nplist parser encounters anything abnormal. To enable debug logging,\nlibplist must be configured with --enable-debug, and the environment\nvariable PLIST_BIN_DEBUG must be set to \"1\".",
        "before_after_code_files": [
          "src/bplist.c||src/bplist.c",
          "src/plist.c||src/plist.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bplist.c||src/bplist.c"
          ],
          "candidate": [
            "src/bplist.c||src/bplist.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bplist.c||src/bplist.c": [
          "File: src/bplist.c -> src/bplist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:     plist_t used_indexes;",
          "191: };",
          "193: static plist_t parse_bin_node_at_index(struct bplist_data *bplist, uint32_t node_index);",
          "195: static plist_t parse_uint_node(const char **bnode, uint8_t size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: #ifdef DEBUG",
          "194: static int plist_bin_debug = 0;",
          "195: #define PLIST_BIN_ERR(...) if (plist_bin_debug) { fprintf(stderr, \"libplist[binparser] ERROR: \" __VA_ARGS__); }",
          "196: #else",
          "197: #define PLIST_BIN_ERR(...)",
          "198: #endif",
          "200: void plist_bin_init(void)",
          "201: {",
          "203: #ifdef DEBUG",
          "204:     char *env_debug = getenv(\"PLIST_BIN_DEBUG\");",
          "205:     if (env_debug && !strcmp(env_debug, \"1\")) {",
          "206:         plist_bin_debug = 1;",
          "207:     }",
          "208: #endif",
          "209: }",
          "211: void plist_bin_deinit(void)",
          "212: {",
          "214: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:         break;",
          "211:     default:",
          "212:         free(data);",
          "213:         return NULL;",
          "214:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:         PLIST_BIN_ERR(\"%s: Invalid byte size for integer node\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239:         break;",
          "240:     default:",
          "241:         free(data);",
          "242:         return NULL;",
          "243:     }",
          "244:     data->type = PLIST_REAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:         PLIST_BIN_ERR(\"%s: Invalid byte size for real node\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:  if (!unistr || (len <= 0)) return NULL;",
          "276:  char *outbuf = (char*)malloc(4*(len+1));",
          "277:  int p = 0;",
          "280:  uint16_t wc;",
          "281:  uint32_t w;",
          "",
          "[Removed Lines]",
          "278:  int i = 0;",
          "",
          "[Added Lines]",
          "303:  long i = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "391:         if ((index1_ptr < bplist->data || index1_ptr + bplist->ref_size > bplist->offset_table) ||",
          "392:             (index2_ptr < bplist->data || index2_ptr + bplist->ref_size > bplist->offset_table)) {",
          "393:             plist_free(node);",
          "394:             return NULL;",
          "395:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:             PLIST_BIN_ERR(\"%s: dict entry %llu is outside of valid range\\n\", __func__, j);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "400:         if (index1 >= bplist->num_objects) {",
          "401:             plist_free(node);",
          "402:             return NULL;",
          "403:         }",
          "404:         if (index2 >= bplist->num_objects) {",
          "405:             plist_free(node);",
          "406:             return NULL;",
          "407:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428:             PLIST_BIN_ERR(\"%s: dict entry %llu key index (%llu) must be smaller than the number of objects (%llu)\\n\", __func__, j, index1, bplist->num_objects);",
          "433:             PLIST_BIN_ERR(\"%s: dict entry %llu value index (%llu) must be smaller than the number of objects (%llu)\\n\", __func__, j, index1, bplist->num_objects);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "414:         }",
          "416:         if (plist_get_data(key)->type != PLIST_STRING) {",
          "418:             plist_free(node);",
          "419:             return NULL;",
          "420:         }",
          "",
          "[Removed Lines]",
          "417:             fprintf(stderr, \"ERROR: Malformed binary plist dict, invalid node type for key!\\n\");",
          "",
          "[Added Lines]",
          "445:             PLIST_BIN_ERR(\"%s: malformed binary plist dict, invalid node type for key!\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "423:         plist_get_data(key)->type = PLIST_KEY;",
          "424:         if (!plist_get_data(key)->strval) {",
          "426:             plist_free(key);",
          "427:             plist_free(node);",
          "428:             return NULL;",
          "",
          "[Removed Lines]",
          "425:             fprintf(stderr, \"ERROR: Malformed binary plist dict, invalid key node encountered!\\n\");",
          "",
          "[Added Lines]",
          "453:             PLIST_BIN_ERR(\"%s: malformed binary plist dict, invalid key node encountered!\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "463:         if (index1_ptr < bplist->data || index1_ptr + bplist->ref_size > bplist->offset_table) {",
          "464:             plist_free(node);",
          "465:             return NULL;",
          "466:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:             PLIST_BIN_ERR(\"%s: array item %llu is outside of valid range\\n\", __func__, j);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "470:         if (index1 >= bplist->num_objects) {",
          "471:             plist_free(node);",
          "472:             return NULL;",
          "473:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:             PLIST_BIN_ERR(\"%s: array item %llu object index (%llu) must be smaller than the number of objects (%llu)\\n\", __func__, j, index1, bplist->num_objects);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "491:     size = size + 1;",
          "492:     data->intval = UINT_TO_HOST(*bnode, size);",
          "493:     if (data->intval > UINT32_MAX) {",
          "494:         free(data);",
          "495:         return NULL;",
          "496:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:         PLIST_BIN_ERR(\"%s: value %llu too large for UID node (must be <= %u)\\n\", __func__, (uint64_t)data->intval, UINT32_MAX);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "524:         case BPLIST_DICT:",
          "525:         {",
          "526:             uint16_t next_size = **object & BPLIST_FILL;",
          "528:                 return NULL;",
          "529:             (*object)++;",
          "530:             next_size = 1 << next_size;",
          "532:                 return NULL;",
          "533:             size = UINT_TO_HOST(*object, next_size);",
          "534:             (*object) += next_size;",
          "535:             break;",
          "",
          "[Removed Lines]",
          "527:             if ((**object & BPLIST_MASK) != BPLIST_UINT)",
          "531:             if (*object + next_size > bplist->offset_table)",
          "",
          "[Added Lines]",
          "558:             if ((**object & BPLIST_MASK) != BPLIST_UINT) {",
          "559:                 PLIST_BIN_ERR(\"%s: invalid size node type for node type 0x%02x: found 0x%02x, expected 0x%02x\\n\", __func__, type, **object & BPLIST_MASK, BPLIST_UINT);",
          "561:             }",
          "564:             if (*object + next_size > bplist->offset_table) {",
          "565:                 PLIST_BIN_ERR(\"%s: size node data bytes for node type 0x%02x point outside of valid range\\n\", __func__, type);",
          "567:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "570:         }",
          "572:     case BPLIST_UINT:",
          "574:             return NULL;",
          "575:         return parse_uint_node(object, size);",
          "577:     case BPLIST_REAL:",
          "579:             return NULL;",
          "580:         return parse_real_node(object, size);",
          "582:     case BPLIST_DATE:",
          "584:             return NULL;",
          "586:             return NULL;",
          "587:         return parse_date_node(object, size);",
          "589:     case BPLIST_DATA:",
          "591:             return NULL;",
          "592:         return parse_data_node(object, size);",
          "594:     case BPLIST_STRING:",
          "596:             return NULL;",
          "597:         return parse_string_node(object, size);",
          "599:     case BPLIST_UNICODE:",
          "601:             return NULL;",
          "602:         return parse_unicode_node(object, size);",
          "604:     case BPLIST_SET:",
          "605:     case BPLIST_ARRAY:",
          "607:             return NULL;",
          "608:         return parse_array_node(bplist, object, size);",
          "610:     case BPLIST_UID:",
          "612:             return NULL;",
          "613:         return parse_uid_node(object, size);",
          "615:     case BPLIST_DICT:",
          "617:             return NULL;",
          "618:         return parse_dict_node(bplist, object, size);",
          "620:     default:",
          "621:         return NULL;",
          "622:     }",
          "623:     return NULL;",
          "",
          "[Removed Lines]",
          "573:         if (*object + (uint64_t)(1 << size) > bplist->offset_table)",
          "578:         if (*object + (uint64_t)(1 << size) > bplist->offset_table)",
          "583:         if (3 != size)",
          "585:         if (*object + (uint64_t)(1 << size) > bplist->offset_table)",
          "590:         if (*object + size > bplist->offset_table)",
          "595:         if (*object + size > bplist->offset_table)",
          "600:         if (*object + size*2 > bplist->offset_table)",
          "606:         if (*object + size > bplist->offset_table)",
          "611:         if (*object + size+1 > bplist->offset_table)",
          "616:         if (*object + size > bplist->offset_table)",
          "",
          "[Added Lines]",
          "608:         if (*object + (uint64_t)(1 << size) > bplist->offset_table) {",
          "609:             PLIST_BIN_ERR(\"%s: BPLIST_UINT data bytes point outside of valid range\\n\", __func__);",
          "611:         }",
          "615:         if (*object + (uint64_t)(1 << size) > bplist->offset_table) {",
          "616:             PLIST_BIN_ERR(\"%s: BPLIST_REAL data bytes point outside of valid range\\n\", __func__);",
          "618:         }",
          "622:         if (3 != size) {",
          "623:             PLIST_BIN_ERR(\"%s: invalid data size for BPLIST_DATE node\\n\", __func__);",
          "625:         }",
          "626:         if (*object + (uint64_t)(1 << size) > bplist->offset_table) {",
          "627:             PLIST_BIN_ERR(\"%s: BPLIST_DATE data bytes point outside of valid range\\n\", __func__);",
          "629:         }",
          "633:         if (*object + size > bplist->offset_table) {",
          "634:             PLIST_BIN_ERR(\"%s: BPLIST_DATA data bytes point outside of valid range\\n\", __func__);",
          "636:         }",
          "640:         if (*object + size > bplist->offset_table) {",
          "641:             PLIST_BIN_ERR(\"%s: BPLIST_STRING data bytes point outside of valid range\\n\", __func__);",
          "643:         }",
          "647:         if (*object + size*2 > bplist->offset_table) {",
          "648:             PLIST_BIN_ERR(\"%s: BPLIST_UNICODE data bytes point outside of valid range\\n\", __func__);",
          "650:         }",
          "655:         if (*object + size > bplist->offset_table) {",
          "656:             PLIST_BIN_ERR(\"%s: BPLIST_ARRAY data bytes point outside of valid range\\n\", __func__);",
          "658:         }",
          "662:         if (*object + size+1 > bplist->offset_table) {",
          "663:             PLIST_BIN_ERR(\"%s: BPLIST_UID data bytes point outside of valid range\\n\", __func__);",
          "665:         }",
          "669:         if (*object + size > bplist->offset_table) {",
          "670:             PLIST_BIN_ERR(\"%s: BPLIST_REAL data bytes point outside of valid range\\n\", __func__);",
          "672:         }",
          "676:         PLIST_BIN_ERR(\"%s: unexpected node type 0x%02x\\n\", __func__, type);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "630:     plist_t plist = NULL;",
          "631:     const char* idx_ptr = NULL;",
          "634:         return NULL;",
          "636:     idx_ptr = bplist->offset_table + node_index * bplist->offset_size;",
          "637:     if (idx_ptr < bplist->offset_table ||",
          "639:         return NULL;",
          "641:     ptr = bplist->data + UINT_TO_HOST(idx_ptr, bplist->offset_size);",
          "643:     if ((ptr < bplist->data) || (ptr >= bplist->offset_table)) {",
          "644:         return NULL;",
          "645:     }",
          "",
          "[Removed Lines]",
          "633:     if (node_index >= bplist->num_objects)",
          "638:         idx_ptr >= bplist->offset_table + bplist->num_objects * bplist->offset_size)",
          "",
          "[Added Lines]",
          "689:     if (node_index >= bplist->num_objects) {",
          "690:         PLIST_BIN_ERR(\"node index (%u) must be smaller than the number of objects (%llu)\\n\", node_index, bplist->num_objects);",
          "692:     }",
          "696:         idx_ptr >= bplist->offset_table + bplist->num_objects * bplist->offset_size) {",
          "697:         PLIST_BIN_ERR(\"node index %u points outside of valid range\\n\", node_index);",
          "699:     }",
          "704:         PLIST_BIN_ERR(\"offset for node index %u points outside of valid range\\n\", node_index);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "659:             plist_t node_i = plist_array_get_item(bplist->used_indexes, i);",
          "660:             plist_t node_level = plist_array_get_item(bplist->used_indexes, bplist->level);",
          "661:             if (plist_compare_node_value(node_i, node_level)) {",
          "663:                 return NULL;",
          "664:             }",
          "665:         }",
          "",
          "[Removed Lines]",
          "662:                 fprintf(stderr, \"Recursion detected in binary plist. Aborting.\\n\");",
          "",
          "[Added Lines]",
          "723:                 PLIST_BIN_ERR(\"recursion detected in binary plist\\n\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "684:     const char *end_data = NULL;",
          "688:         return;",
          "691:         return;",
          "694:         return;",
          "696:     start_data = plist_bin + BPLIST_MAGIC_SIZE + BPLIST_VERSION_SIZE;",
          "697:     end_data = plist_bin + length - sizeof(bplist_trailer_t);",
          "",
          "[Removed Lines]",
          "687:     if (!(length >= BPLIST_MAGIC_SIZE + BPLIST_VERSION_SIZE + sizeof(bplist_trailer_t)))",
          "690:     if (memcmp(plist_bin, BPLIST_MAGIC, BPLIST_MAGIC_SIZE) != 0)",
          "693:     if (memcmp(plist_bin + BPLIST_MAGIC_SIZE, BPLIST_VERSION, BPLIST_VERSION_SIZE) != 0)",
          "",
          "[Added Lines]",
          "748:     if (!(length >= BPLIST_MAGIC_SIZE + BPLIST_VERSION_SIZE + sizeof(bplist_trailer_t))) {",
          "749:         PLIST_BIN_ERR(\"plist data is to small to hold a binary plist\\n\");",
          "751:     }",
          "753:     if (memcmp(plist_bin, BPLIST_MAGIC, BPLIST_MAGIC_SIZE) != 0) {",
          "754:         PLIST_BIN_ERR(\"bplist magic mismatch\\n\");",
          "756:     }",
          "758:     if (memcmp(plist_bin + BPLIST_MAGIC_SIZE, BPLIST_VERSION, BPLIST_VERSION_SIZE) != 0) {",
          "759:         PLIST_BIN_ERR(\"unsupported binary plist version '%.2s\\n\", plist_bin+BPLIST_MAGIC_SIZE);",
          "761:     }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "705:     root_object = be64toh(trailer->root_object_index);",
          "706:     offset_table = (char *)(plist_bin + be64toh(trailer->offset_table_offset));",
          "709:         return;",
          "712:         return;",
          "715:         return;",
          "718:         return;",
          "721:         return;",
          "724:         return;",
          "726:     struct bplist_data bplist;",
          "727:     bplist.data = plist_bin;",
          "",
          "[Removed Lines]",
          "708:     if (num_objects == 0)",
          "711:     if (offset_size == 0)",
          "714:     if (ref_size == 0)",
          "717:     if (root_object >= num_objects)",
          "720:     if (offset_table < start_data || offset_table >= end_data)",
          "723:     if (offset_table + num_objects * offset_size > end_data)",
          "",
          "[Added Lines]",
          "775:     if (num_objects == 0) {",
          "776:         PLIST_BIN_ERR(\"number of objects must be larger than 0\\n\");",
          "778:     }",
          "780:     if (offset_size == 0) {",
          "781:         PLIST_BIN_ERR(\"offset size in trailer must be larger than 0\\n\");",
          "783:     }",
          "785:     if (ref_size == 0) {",
          "786:         PLIST_BIN_ERR(\"object reference size in trailer must be larger than 0\\n\");",
          "788:     }",
          "790:     if (root_object >= num_objects) {",
          "791:         PLIST_BIN_ERR(\"root object index (%llu) must be smaller than number of objects (%llu)\\n\", root_object, num_objects);",
          "793:     }",
          "795:     if (offset_table < start_data || offset_table >= end_data) {",
          "796:         PLIST_BIN_ERR(\"offset table offset points outside of valid range\\n\");",
          "798:     }",
          "800:     if (offset_table + num_objects * offset_size > end_data) {",
          "801:         PLIST_BIN_ERR(\"offset table points outside of valid range\\n\");",
          "803:     }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "733:     bplist.level = 0;",
          "734:     bplist.used_indexes = plist_new_array();",
          "737:         return;",
          "",
          "[Removed Lines]",
          "736:     if (!bplist.used_indexes)",
          "",
          "[Added Lines]",
          "815:     if (!bplist.used_indexes) {",
          "816:         PLIST_BIN_ERR(\"failed to create array to hold used node indexes. Out of memory?\\n\");",
          "818:     }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "983: {",
          "984:  uint16_t *outbuf = (uint16_t*)malloc(((size*2)+1)*sizeof(uint16_t));",
          "985:  int p = 0;",
          "988:  unsigned char c0;",
          "989:  unsigned char c1;",
          "",
          "[Removed Lines]",
          "986:  int i = 0;",
          "",
          "[Added Lines]",
          "1067:  long i = 0;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1017:    i+=1;",
          "1018:   } else {",
          "1021:    break;",
          "1022:   }",
          "1023:  }",
          "",
          "[Removed Lines]",
          "1020:    fprintf(stderr, \"invalid utf8 sequence in string at index %d\\n\", i);",
          "",
          "[Added Lines]",
          "1101:    PLIST_BIN_ERR(\"%s: invalid utf8 sequence in string at index %lu\\n\", __func__, i);",
          "",
          "---------------"
        ],
        "src/plist.c||src/plist.c": [
          "File: src/plist.c -> src/plist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: extern void plist_xml_init(void);",
          "43: extern void plist_xml_deinit(void);",
          "45: static void internal_plist_init(void)",
          "46: {",
          "47:     plist_xml_init();",
          "48: }",
          "50: static void internal_plist_deinit(void)",
          "51: {",
          "52:     plist_xml_deinit();",
          "53: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: extern void plist_bin_init(void);",
          "45: extern void plist_bin_deinit(void);",
          "49:     plist_bin_init();",
          "55:     plist_bin_deinit();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67eb54ab73f07560ae72058ed6ab6b47936be695",
      "candidate_info": {
        "commit_hash": "67eb54ab73f07560ae72058ed6ab6b47936be695",
        "repo": "libimobiledevice/libplist",
        "commit_url": "https://github.com/libimobiledevice/libplist/commit/67eb54ab73f07560ae72058ed6ab6b47936be695",
        "files": [
          "src/bplist.c"
        ],
        "message": "bplist: Make sure node data is always before the offset table",
        "before_after_code_files": [
          "src/bplist.c||src/bplist.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bplist.c||src/bplist.c"
          ],
          "candidate": [
            "src/bplist.c||src/bplist.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bplist.c||src/bplist.c": [
          "File: src/bplist.c -> src/bplist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:     uint64_t str_i = 0, str_j = 0;",
          "375:     uint64_t index1, index2;",
          "376:     plist_data_t data = plist_new_plist_data();",
          "378:     const char *index1_ptr = NULL;",
          "379:     const char *index2_ptr = NULL;",
          "",
          "[Removed Lines]",
          "377:     const char *const end_data = bplist->data + bplist->size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389:         index1_ptr = (*bnode) + str_i;",
          "390:         index2_ptr = (*bnode) + str_j;",
          "394:             plist_free(node);",
          "395:             return NULL;",
          "396:         }",
          "",
          "[Removed Lines]",
          "392:         if ((index1_ptr < bplist->data || index1_ptr + bplist->ref_size >= end_data) ||",
          "393:             (index2_ptr < bplist->data || index2_ptr + bplist->ref_size >= end_data)) {",
          "",
          "[Added Lines]",
          "391:         if ((index1_ptr < bplist->data || index1_ptr + bplist->ref_size > bplist->offset_table) ||",
          "392:             (index2_ptr < bplist->data || index2_ptr + bplist->ref_size > bplist->offset_table)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "450:     uint64_t str_j = 0;",
          "451:     uint64_t index1;",
          "452:     plist_data_t data = plist_new_plist_data();",
          "454:     const char *index1_ptr = NULL;",
          "456:     data->type = PLIST_ARRAY;",
          "",
          "[Removed Lines]",
          "453:     const char *const end_data = bplist->data + bplist->size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "462:         str_j = j * bplist->ref_size;",
          "463:         index1_ptr = (*bnode) + str_j;",
          "466:             plist_free(node);",
          "467:             return NULL;",
          "468:         }",
          "",
          "[Removed Lines]",
          "465:         if (index1_ptr < bplist->data || index1_ptr + bplist->ref_size >= end_data) {",
          "",
          "[Added Lines]",
          "463:         if (index1_ptr < bplist->data || index1_ptr + bplist->ref_size > bplist->offset_table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "530:                 return NULL;",
          "531:             (*object)++;",
          "532:             next_size = 1 << next_size;",
          "534:                 return NULL;",
          "535:             size = UINT_TO_HOST(*object, next_size);",
          "536:             (*object) += next_size;",
          "",
          "[Removed Lines]",
          "533:             if (*object + next_size >= bplist->data + bplist->size)",
          "",
          "[Added Lines]",
          "531:             if (*object + next_size > bplist->offset_table)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "572:         }",
          "574:     case BPLIST_UINT:",
          "576:             return NULL;",
          "577:         return parse_uint_node(object, size);",
          "579:     case BPLIST_REAL:",
          "581:             return NULL;",
          "582:         return parse_real_node(object, size);",
          "584:     case BPLIST_DATE:",
          "585:         if (3 != size)",
          "586:             return NULL;",
          "588:             return NULL;",
          "589:         return parse_date_node(object, size);",
          "591:     case BPLIST_DATA:",
          "593:             return NULL;",
          "594:         return parse_data_node(object, size);",
          "596:     case BPLIST_STRING:",
          "598:             return NULL;",
          "599:         return parse_string_node(object, size);",
          "601:     case BPLIST_UNICODE:",
          "603:             return NULL;",
          "604:         return parse_unicode_node(object, size);",
          "606:     case BPLIST_SET:",
          "607:     case BPLIST_ARRAY:",
          "609:             return NULL;",
          "610:         return parse_array_node(bplist, object, size);",
          "612:     case BPLIST_UID:",
          "613:         return parse_uid_node(object, size);",
          "615:     case BPLIST_DICT:",
          "617:             return NULL;",
          "618:         return parse_dict_node(bplist, object, size);",
          "",
          "[Removed Lines]",
          "575:         if (*object - bplist->data + (uint64_t)(1 << size) >= bplist->size)",
          "580:         if (*object - bplist->data + (uint64_t)(1 << size) >= bplist->size)",
          "587:         if (*object - bplist->data + (uint64_t)(1 << size) >= bplist->size)",
          "592:         if (*object - bplist->data + size >= bplist->size)",
          "597:         if (*object - bplist->data + size >= bplist->size)",
          "602:         if (*object - bplist->data + size * 2 >= bplist->size)",
          "608:         if (*object - bplist->data + size >= bplist->size)",
          "616:         if (*object - bplist->data + size >= bplist->size)",
          "",
          "[Added Lines]",
          "573:         if (*object + (uint64_t)(1 << size) > bplist->offset_table)",
          "578:         if (*object + (uint64_t)(1 << size) > bplist->offset_table)",
          "585:         if (*object + (uint64_t)(1 << size) > bplist->offset_table)",
          "590:         if (*object + size > bplist->offset_table)",
          "595:         if (*object + size > bplist->offset_table)",
          "600:         if (*object + size*2 > bplist->offset_table)",
          "606:         if (*object + size > bplist->offset_table)",
          "611:         if (*object + size+1 > bplist->offset_table)",
          "612:             return NULL;",
          "616:         if (*object + size > bplist->offset_table)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b86a392b819518cf37db78140d4ed4418c0177da",
      "candidate_info": {
        "commit_hash": "b86a392b819518cf37db78140d4ed4418c0177da",
        "repo": "libimobiledevice/libplist",
        "commit_url": "https://github.com/libimobiledevice/libplist/commit/b86a392b819518cf37db78140d4ed4418c0177da",
        "files": [
          "src/bplist.c"
        ],
        "message": "bplist: Fix possible out-of-bounds reads in parse_bin_node() with proper bounds checking",
        "before_after_code_files": [
          "src/bplist.c||src/bplist.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bplist.c||src/bplist.c"
          ],
          "candidate": [
            "src/bplist.c||src/bplist.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bplist.c||src/bplist.c": [
          "File: src/bplist.c -> src/bplist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:         }",
          "570:     case BPLIST_UINT:",
          "571:         return parse_uint_node(object, size);",
          "573:     case BPLIST_REAL:",
          "574:         return parse_real_node(object, size);",
          "576:     case BPLIST_DATE:",
          "577:         if (3 != size)",
          "578:             return NULL;",
          "579:         else",
          "580:             return parse_date_node(object, size);",
          "582:     case BPLIST_DATA:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:         if (*object - bplist->data + (uint64_t)(1 << size) >= bplist->size)",
          "572:             return NULL;",
          "576:         if (*object - bplist->data + (uint64_t)(1 << size) >= bplist->size)",
          "577:             return NULL;",
          "584:             if (*object - bplist->data + (uint64_t)(1 << size) >= bplist->size)",
          "585:                 return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:             plist_get_uint_val(size_node, &size);",
          "588:             plist_free(size_node);",
          "589:         }",
          "590:         return parse_data_node(object, size);",
          "592:     case BPLIST_STRING:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:         if (*object - bplist->data + size >= bplist->size)",
          "598:             return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "597:             plist_get_uint_val(size_node, &size);",
          "598:             plist_free(size_node);",
          "599:         }",
          "600:         return parse_string_node(object, size);",
          "602:     case BPLIST_UNICODE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:         if (*object - bplist->data + size >= bplist->size)",
          "611:             return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "607:             plist_get_uint_val(size_node, &size);",
          "608:             plist_free(size_node);",
          "609:         }",
          "610:         return parse_unicode_node(object, size);",
          "612:     case BPLIST_SET:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:         if (*object - bplist->data + size * 2 >= bplist->size)",
          "624:             return NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "618:             plist_get_uint_val(size_node, &size);",
          "619:             plist_free(size_node);",
          "620:         }",
          "621:         return parse_array_node(bplist, object, size);",
          "623:     case BPLIST_UID:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637:         if (*object - bplist->data + size >= bplist->size)",
          "638:             return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "631:             plist_get_uint_val(size_node, &size);",
          "632:             plist_free(size_node);",
          "633:         }",
          "634:         return parse_dict_node(bplist, object, size);",
          "635:     default:",
          "636:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653:         if (*object - bplist->data + size >= bplist->size)",
          "654:             return NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}