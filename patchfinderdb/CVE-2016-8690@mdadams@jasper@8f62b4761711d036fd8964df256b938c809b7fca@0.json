{
  "cve_id": "CVE-2016-8690",
  "cve_desc": "The bmp_getdata function in libjasper/bmp/bmp_dec.c in JasPer before 1.900.5 allows remote attackers to cause a denial of service (NULL pointer dereference) via a crafted BMP image in an imginfo command.",
  "repo": "mdadams/jasper",
  "patch_hash": "8f62b4761711d036fd8964df256b938c809b7fca",
  "patch_info": {
    "commit_hash": "8f62b4761711d036fd8964df256b938c809b7fca",
    "repo": "mdadams/jasper",
    "commit_url": "https://github.com/mdadams/jasper/commit/8f62b4761711d036fd8964df256b938c809b7fca",
    "files": [
      "src/appl/imginfo.c",
      "src/libjasper/bmp/bmp_dec.c"
    ],
    "message": "Fixed a sanitizer failure in the BMP codec. Also, added a --debug-level command line option to the imginfo command for debugging purposes.",
    "before_after_code_files": [
      "src/appl/imginfo.c||src/appl/imginfo.c",
      "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c"
    ]
  },
  "patch_diff": {
    "src/appl/imginfo.c||src/appl/imginfo.c": [
      "File: src/appl/imginfo.c -> src/appl/imginfo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:  OPT_HELP,",
      "86:  OPT_VERSION,",
      "87:  OPT_VERBOSE,",
      "89: } optid_t;",
      "",
      "[Removed Lines]",
      "88:  OPT_INFILE",
      "",
      "[Added Lines]",
      "88:  OPT_INFILE,",
      "89:  OPT_DEBUG",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "104:  {OPT_VERSION, \"version\", 0},",
      "105:  {OPT_VERBOSE, \"verbose\", 0},",
      "106:  {OPT_INFILE, \"f\", JAS_OPT_HASARG},",
      "107:  {-1, 0, 0}",
      "108: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:  {OPT_DEBUG, \"debug-level\", JAS_OPT_HASARG},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "126:  int numcmpts;",
      "127:  int verbose;",
      "128:  char *fmtname;",
      "130:  if (jas_init()) {",
      "131:   abort();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "131:  int debug;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "136:  infile = 0;",
      "137:  verbose = 0;",
      "140:  while ((id = jas_getopt(argc, argv, opts)) >= 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141:  debug = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "146:    printf(\"%s\\n\", JAS_VERSION);",
      "147:    exit(EXIT_SUCCESS);",
      "148:    break;",
      "149:   case OPT_INFILE:",
      "150:    infile = jas_optarg;",
      "151:    break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "153:   case OPT_DEBUG:",
      "154:    debug = atoi(jas_optarg);",
      "155:    break;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "156:   }",
      "157:  }",
      "160:  if (infile) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166:  jas_setdbglevel(debug);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "179:  if (!(image = jas_image_decode(instream, fmtid, 0))) {",
      "180:   fprintf(stderr, \"cannot load image\\n\");",
      "181:   return EXIT_FAILURE;",
      "182:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "189:   jas_stream_close(instream);",
      "",
      "---------------"
    ],
    "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c": [
      "File: src/libjasper/bmp/bmp_dec.c -> src/libjasper/bmp/bmp_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: #include \"jasper/jas_stream.h\"",
      "78: #include \"jasper/jas_image.h\"",
      "79: #include \"jasper/jas_malloc.h\"",
      "81: #include \"bmp_cod.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: #include \"jasper/jas_debug.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "122:   jas_eprintf(\"cannot get header\\n\");",
      "123:   return 0;",
      "124:  }",
      "127:  if (!(info = bmp_getinfo(in))) {",
      "128:   jas_eprintf(\"cannot get info\\n\");",
      "129:   return 0;",
      "130:  }",
      "133:  if (!bmp_issupported(&hdr, info)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:  JAS_DBGLOG(1, (",
      "127:    \"BMP header: magic 0x%x; siz %d; res1 %d; res2 %d; off %d\\n\",",
      "128:    hdr.magic, hdr.siz, hdr.reserved1, hdr.reserved2, hdr.off",
      "129:    ));",
      "136:  JAS_DBGLOG(1,",
      "137:    (\"BMP information: len %d; width %d; height %d; numplanes %d; \"",
      "138:    \"depth %d; enctype %d; siz %d; hres %d; vres %d; numcolors %d; \"",
      "139:    \"mincolors %d\\n\", info->len, info->width, info->height, info->numplanes,",
      "140:    info->depth, info->enctype, info->siz, info->hres, info->vres,",
      "141:    info->numcolors, info->mincolors));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "440:   if ((c = jas_stream_getc(in)) == EOF) {",
      "441:    return -1;",
      "442:   }",
      "444:   if (--n <= 0) {",
      "445:    break;",
      "446:   }",
      "",
      "[Removed Lines]",
      "443:   v |= (c << 24);",
      "",
      "[Added Lines]",
      "454:   v |= (JAS_CAST(uint_fast32_t, c) << 24);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d66894d2313e3f3469f19066e149e08ff076698",
      "candidate_info": {
        "commit_hash": "5d66894d2313e3f3469f19066e149e08ff076698",
        "repo": "mdadams/jasper",
        "commit_url": "https://github.com/mdadams/jasper/commit/5d66894d2313e3f3469f19066e149e08ff076698",
        "files": [
          "src/libjasper/base/jas_seq.c",
          "src/libjasper/bmp/bmp_dec.c"
        ],
        "message": "Fixed a problem with a null pointer dereference in the BMP decoder.",
        "before_after_code_files": [
          "src/libjasper/base/jas_seq.c||src/libjasper/base/jas_seq.c",
          "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c"
          ],
          "candidate": [
            "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libjasper/base/jas_seq.c||src/libjasper/base/jas_seq.c": [
          "File: src/libjasper/base/jas_seq.c -> src/libjasper/base/jas_seq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  jas_matrix_t *matrix;",
          "103:  int i;",
          "105:  if (!(matrix = jas_malloc(sizeof(jas_matrix_t)))) {",
          "106:   return 0;",
          "107:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:  if (numrows < 0 || numcols < 0) {",
          "106:   return 0;",
          "107:  }",
          "",
          "---------------"
        ],
        "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c": [
          "File: src/libjasper/bmp/bmp_dec.c -> src/libjasper/bmp/bmp_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  uint_fast16_t numcmpts;",
          "108:  long n;",
          "110:  if (optstr) {",
          "111:   jas_eprintf(\"warning: ignoring BMP decoder options\\n\");",
          "112:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:  image = 0;",
          "111:  info = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:  if (bmp_gethdr(in, &hdr)) {",
          "123:   jas_eprintf(\"cannot get header\\n\");",
          "125:  }",
          "126:  JAS_DBGLOG(1, (",
          "127:    \"BMP header: magic 0x%x; siz %d; res1 %d; res2 %d; off %d\\n\",",
          "",
          "[Removed Lines]",
          "124:   return 0;",
          "",
          "[Added Lines]",
          "127:   goto error;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:  if (!(info = bmp_getinfo(in))) {",
          "133:   jas_eprintf(\"cannot get info\\n\");",
          "135:  }",
          "136:  JAS_DBGLOG(1,",
          "144:  if (!bmp_issupported(&hdr, info)) {",
          "145:   jas_eprintf(\"error: unsupported BMP encoding\\n\");",
          "148:  }",
          "152:  if ((n = hdr.off - (BMP_HDRLEN + BMP_INFOLEN + BMP_PALLEN(info))) < 0) {",
          "153:   jas_eprintf(\"error: possibly bad bitmap offset?\\n\");",
          "155:  }",
          "156:  if (n > 0) {",
          "157:   jas_eprintf(\"skipping unknown data in BMP file\\n\");",
          "158:   if (bmp_gobble(in, n)) {",
          "161:   }",
          "162:  }",
          "",
          "[Removed Lines]",
          "134:   return 0;",
          "137:    (\"BMP information: len %d; width %d; height %d; numplanes %d; \"",
          "138:    \"depth %d; enctype %d; siz %d; hres %d; vres %d; numcolors %d; \"",
          "139:    \"mincolors %d\\n\", info->len, info->width, info->height, info->numplanes,",
          "140:    info->depth, info->enctype, info->siz, info->hres, info->vres,",
          "141:    info->numcolors, info->mincolors));",
          "146:   bmp_info_destroy(info);",
          "147:   return 0;",
          "154:   return 0;",
          "159:    bmp_info_destroy(info);",
          "160:    return 0;",
          "",
          "[Added Lines]",
          "139:   goto error;",
          "142:    (\"BMP information: len %ld; width %ld; height %ld; numplanes %d; \"",
          "143:    \"depth %d; enctype %ld; siz %ld; hres %ld; vres %ld; numcolors %ld; \"",
          "144:    \"mincolors %ld\\n\", JAS_CAST(long, info->len),",
          "145:    JAS_CAST(long, info->width), JAS_CAST(long, info->height),",
          "146:    JAS_CAST(long, info->numplanes), JAS_CAST(long, info->depth),",
          "147:    JAS_CAST(long, info->enctype), JAS_CAST(long, info->siz),",
          "148:    JAS_CAST(long, info->hres), JAS_CAST(long, info->vres),",
          "149:    JAS_CAST(long, info->numcolors), JAS_CAST(long, info->mincolors)));",
          "151:  if (info->width < 0 || info->height < 0 || info->numplanes < 0 ||",
          "152:    info->depth < 0 || info->siz < 0 || info->hres < 0 || info->vres < 0) {",
          "153:   jas_eprintf(\"corrupt bit stream\\n\");",
          "154:   goto error;",
          "155:  }",
          "162:   goto error;",
          "169:   goto error;",
          "177:    goto error;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:  if (!(image = jas_image_create(numcmpts, cmptparms,",
          "181:    JAS_CLRSPC_UNKNOWN))) {",
          "184:  }",
          "186:  if (numcmpts == 3) {",
          "",
          "[Removed Lines]",
          "182:   bmp_info_destroy(info);",
          "183:   return 0;",
          "",
          "[Added Lines]",
          "201:   goto error;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:  if (bmp_getdata(in, info, image)) {",
          "205:  }",
          "207:  bmp_info_destroy(info);",
          "209:  return image;",
          "210: }",
          "212: int bmp_validate(jas_stream_t *in)",
          "",
          "[Removed Lines]",
          "202:   bmp_info_destroy(info);",
          "203:   jas_image_destroy(image);",
          "204:   return 0;",
          "",
          "[Added Lines]",
          "223:   goto error;",
          "230: error:",
          "231:  if (info) {",
          "232:   bmp_info_destroy(info);",
          "233:  }",
          "234:  if (image) {",
          "235:   jas_image_destroy(image);",
          "236:  }",
          "237:  return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80ed6228a260eee49d51af8b6a6fb3721b70b180",
      "candidate_info": {
        "commit_hash": "80ed6228a260eee49d51af8b6a6fb3721b70b180",
        "repo": "mdadams/jasper",
        "commit_url": "https://github.com/mdadams/jasper/commit/80ed6228a260eee49d51af8b6a6fb3721b70b180",
        "files": [
          "src/appl/imginfo.c",
          "src/libjasper/base/jas_image.c",
          "src/libjasper/include/jasper/jas_debug.h",
          "src/libjasper/jpg/jpg_dec.c",
          "test/bin/run_test_1"
        ],
        "message": "Added a command line option to imginfo to allow for arbitrary decoder options to be specified.\n\nAdjusted the debug level associated with some log messages.\n\nAdded an option to the JPEG decoder that makes it print the JPEG library\nversion to standard output and return without decoding\n(i.e., return with an error).\nAlso, added a debug log message that includes the JPEG library version.\n\nFixed a possible use of uninitialized data in the JPEG decoder.\n\nModified the run_test_1 script to try to better accommodate different\nversions of the JPEG library (which have different behaviors for some\nof the decoding tests).",
        "before_after_code_files": [
          "src/appl/imginfo.c||src/appl/imginfo.c",
          "src/libjasper/base/jas_image.c||src/libjasper/base/jas_image.c",
          "src/libjasper/include/jasper/jas_debug.h||src/libjasper/include/jasper/jas_debug.h",
          "src/libjasper/jpg/jpg_dec.c||src/libjasper/jpg/jpg_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/appl/imginfo.c||src/appl/imginfo.c"
          ],
          "candidate": [
            "src/appl/imginfo.c||src/appl/imginfo.c"
          ]
        }
      },
      "candidate_diff": {
        "src/appl/imginfo.c||src/appl/imginfo.c": [
          "File: src/appl/imginfo.c -> src/appl/imginfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:  OPT_INFILE,",
          "90:  OPT_DEBUG,",
          "91:  OPT_MAXSAMPLES,",
          "93: } optid_t;",
          "",
          "[Removed Lines]",
          "92:  OPT_MAXMEM",
          "",
          "[Added Lines]",
          "92:  OPT_MAXMEM,",
          "93:  OPT_DECOPT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "114:  {OPT_MAXMEM, \"memory-limit\", JAS_OPT_HASARG},",
          "115: #endif",
          "116:  {-1, 0, 0}",
          "117: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:  {OPT_DECOPT, \"decoder-option\", JAS_OPT_HASARG},",
          "118:  {OPT_DECOPT, \"o\", JAS_OPT_HASARG},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:  size_t max_samples;",
          "141:  bool max_samples_valid;",
          "142:  char optstr[32];",
          "144:  if (jas_init()) {",
          "145:   abort();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:  char dec_opt_spec[256];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "156:  max_mem = JAS_DEFAULT_MAX_MEM_USAGE;",
          "157: #endif",
          "160:  while ((id = jas_getopt(argc, argv, opts)) >= 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:  dec_opt_spec[0] = '\\0';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "179:   case OPT_MAXMEM:",
          "180:    max_mem = strtoull(jas_optarg, 0, 10);",
          "181:    break;",
          "182:   case OPT_HELP:",
          "183:   default:",
          "184:    usage();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:   case OPT_DECOPT:",
          "188:    if (dec_opt_spec[0] != '\\0') {",
          "189:     strncat(dec_opt_spec, \" \",",
          "190:       sizeof(dec_opt_spec) - 1 - strlen(dec_opt_spec));",
          "191:    }",
          "192:    strncat(dec_opt_spec, jas_optarg,",
          "193:      sizeof(dec_opt_spec) - 1 - strlen(dec_opt_spec));",
          "194:    break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217: #else",
          "218:   sprintf(optstr, \"max_samples=%-zu\", max_samples);",
          "219: #endif",
          "220:  }",
          "224:   jas_stream_close(instream);",
          "225:   fprintf(stderr, \"cannot load image\\n\");",
          "226:   return EXIT_FAILURE;",
          "",
          "[Removed Lines]",
          "223:  if (!(image = jas_image_decode(instream, fmtid, optstr))) {",
          "",
          "[Added Lines]",
          "233:   strncat(dec_opt_spec, optstr,",
          "234:     sizeof(dec_opt_spec) - 1 - strlen(dec_opt_spec));",
          "238:  if (!(image = jas_image_decode(instream, fmtid, dec_opt_spec))) {",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_image.c||src/libjasper/base/jas_image.c": [
          "File: src/libjasper/base/jas_image.c -> src/libjasper/base/jas_image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:  jas_seqent_t *d;",
          "489:  int drs;",
          "492:    image, cmptno, JAS_CAST(long, x), JAS_CAST(long, y),",
          "493:    JAS_CAST(long, width), JAS_CAST(long, height), data));",
          "",
          "[Removed Lines]",
          "491:  JAS_DBGLOG(10, (\"jas_image_readcmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\\n\",",
          "",
          "[Added Lines]",
          "491:  JAS_DBGLOG(100, (\"jas_image_readcmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "550:  int k;",
          "551:  int c;",
          "554:    image, cmptno, JAS_CAST(long, x), JAS_CAST(long, y),",
          "555:    JAS_CAST(long, width), JAS_CAST(long, height), data));",
          "",
          "[Removed Lines]",
          "553:  JAS_DBGLOG(10, (\"jas_image_writecmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\\n\",",
          "",
          "[Added Lines]",
          "553:  JAS_DBGLOG(100, (\"jas_image_writecmpt(%p, %d, %ld, %ld, %ld, %ld, %p)\\n\",",
          "",
          "---------------"
        ],
        "src/libjasper/include/jasper/jas_debug.h||src/libjasper/include/jasper/jas_debug.h": [
          "File: src/libjasper/include/jasper/jas_debug.h -> src/libjasper/include/jasper/jas_debug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: void jas_deprecated(const char *s);",
          "115: #ifdef __cplusplus",
          "116: }",
          "117: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: #define JAS_STRINGIFY(x) #x",
          "119: #define JAS_STRINGIFYX(x) JAS_STRINGIFY(x)",
          "",
          "---------------"
        ],
        "src/libjasper/jpg/jpg_dec.c||src/libjasper/jpg/jpg_dec.c": [
          "File: src/libjasper/jpg/jpg_dec.c -> src/libjasper/jpg/jpg_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: typedef struct {",
          "84:  size_t max_samples;",
          "85: } jpg_dec_importopts_t;",
          "87: typedef enum {",
          "88:  OPT_MAXSIZE,",
          "89: } optid_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:  bool print_version;",
          "90:  OPT_VERSION,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: static int jpg_copystreamtofile(FILE *out, jas_stream_t *in);",
          "135: static jas_image_t *jpg_mkimage(j_decompress_ptr cinfo);",
          "141: static jas_taginfo_t decopts[] = {",
          "142:  {OPT_MAXSIZE, \"max_samples\"},",
          "143:  {-1, 0}",
          "144: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: #if defined(LIBJPEG_TURBO_VERSION)",
          "144: #define JAS_LIBJPEG_TURBO_VERSION JAS_STRINGIFYX(LIBJPEG_TURBO_VERSION)",
          "145: #else",
          "146: #define JAS_LIBJPEG_TURBO_VERSION \"\"",
          "147: #endif",
          "148: static const char jas_libjpeg_turbo_version[] = JAS_LIBJPEG_TURBO_VERSION;",
          "155:  {OPT_VERSION, \"version\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:  jas_tvparser_t *tvp;",
          "150:  opts->max_samples = JAS_DEC_DEFAULT_MAX_SAMPLES;",
          "152:  if (!(tvp = jas_tvparser_create(optstr ? optstr : \"\"))) {",
          "153:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:  opts->print_version = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   case OPT_MAXSIZE:",
          "160:    opts->max_samples = strtoull(jas_tvparser_getval(tvp), 0, 10);",
          "161:    break;",
          "162:   default:",
          "163:    jas_eprintf(\"warning: ignoring invalid option %s\\n\",",
          "164:      jas_tvparser_gettag(tvp));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   case OPT_VERSION:",
          "178:    opts->print_version = true;",
          "179:    break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:  jpg_dec_importopts_t opts;",
          "191:  size_t num_samples;",
          "202:  memset(&cinfo, 0, sizeof(struct jpeg_decompress_struct));",
          "203:  memset(dest_mgr, 0, sizeof(jpg_dest_t));",
          "207:  image = 0;",
          "208:  input_file = 0;",
          "209:  if (!(input_file = tmpfile())) {",
          "210:   jas_eprintf(\"cannot make temporary file\\n\");",
          "211:   goto error;",
          "",
          "[Removed Lines]",
          "193:  JAS_DBGLOG(100, (\"jpg_decode(%p, \\\"%s\\\")\\n\", in, optstr));",
          "195:  if (jpg_dec_parseopts(optstr, &opts)) {",
          "196:   goto error;",
          "197:  }",
          "205:  dest_mgr->data = 0;",
          "",
          "[Added Lines]",
          "219:  dest_mgr->data = 0;",
          "221:  JAS_DBGLOG(10, (\"jpg_decode(%p, \\\"%s\\\")\\n\", in, optstr));",
          "223:  if (jpg_dec_parseopts(optstr, &opts)) {",
          "224:   goto error;",
          "225:  }",
          "227:  if (opts.print_version) {",
          "228:   printf(\"%d %s\\n\", JPEG_LIB_VERSION, jas_libjpeg_turbo_version);",
          "229:   goto error;",
          "230:  }",
          "232:  JAS_DBGLOG(10, (\"JPEG library version: %d\\n\", JPEG_LIB_VERSION));",
          "233:  JAS_DBGLOG(10, (\"JPEG Turbo library version: %s\\n\",",
          "234:    jas_libjpeg_turbo_version));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:  (*dest_mgr->start_output)(&cinfo, dest_mgr);",
          "285:  while (cinfo.output_scanline < cinfo.output_height) {",
          "287:     dest_mgr->buffer, JAS_CAST(unsigned long, dest_mgr->buffer_height)));",
          "288:   num_scanlines = jpeg_read_scanlines(&cinfo, dest_mgr->buffer,",
          "289:     dest_mgr->buffer_height);",
          "291:     JAS_CAST(unsigned long, num_scanlines)));",
          "292:   (*dest_mgr->put_pixel_rows)(&cinfo, dest_mgr, num_scanlines);",
          "293:  }",
          "",
          "[Removed Lines]",
          "286:   JAS_DBGLOG(10, (\"jpeg_read_scanlines(%p, %p, %lu)\\n\", &cinfo,",
          "290:   JAS_DBGLOG(10, (\"jpeg_read_scanlines return value %lu\\n\",",
          "",
          "[Added Lines]",
          "313:   JAS_DBGLOG(100, (\"jpeg_read_scanlines(%p, %p, %lu)\\n\", &cinfo,",
          "317:   JAS_DBGLOG(100, (\"jpeg_read_scanlines return value %lu\\n\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "427:  JDIMENSION x;",
          "428:  uint_fast32_t width;",
          "432:  if (dinfo->error) {",
          "433:   return;",
          "",
          "[Removed Lines]",
          "430:  JAS_DBGLOG(10, (\"jpg_put_pixel_rows(%p, %p)\\n\", cinfo, dinfo));",
          "",
          "[Added Lines]",
          "457:  JAS_DBGLOG(100, (\"jpg_put_pixel_rows(%p, %p)\\n\", cinfo, dinfo));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "442:    jas_matrix_set(dinfo->data, 0, x, GETJSAMPLE(*bufptr));",
          "443:    bufptr += cinfo->output_components;",
          "444:   }",
          "446:     \"jas_image_writecmpt called for component %d row %lu\\n\", cmptno,",
          "447:     JAS_CAST(unsigned long, dinfo->row)));",
          "448:   if (jas_image_writecmpt(dinfo->image, cmptno, 0, dinfo->row, width, 1,",
          "",
          "[Removed Lines]",
          "445:   JAS_DBGLOG(10, (",
          "",
          "[Added Lines]",
          "472:   JAS_DBGLOG(100, (",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65536647d380571d1a9a6c91fa03775fb5bbd256",
      "candidate_info": {
        "commit_hash": "65536647d380571d1a9a6c91fa03775fb5bbd256",
        "repo": "mdadams/jasper",
        "commit_url": "https://github.com/mdadams/jasper/commit/65536647d380571d1a9a6c91fa03775fb5bbd256",
        "files": [
          "configure.ac",
          "src/appl/imgcmp.c",
          "src/appl/imginfo.c",
          "src/appl/jasper.c",
          "src/appl/jiv.c",
          "src/libjasper/base/jas_image.c",
          "src/libjasper/base/jas_malloc.c",
          "src/libjasper/include/jasper/jas_config.h.in",
          "src/libjasper/include/jasper/jas_malloc.h",
          "src/libjasper/include/jasper/jas_math.h"
        ],
        "message": "A new experimental memory allocator has been introduced.  The allocator is experimental in the sense that its API is not considered stable and the allocator may change or disappear entirely in future versions of the code.  This new allocator tracks how much memory is being used by jas_malloc and friends.  A maximum upper bound on the memory usage can be set via the experimental API provided and a default value can be set at build time as well.  Such functionality may be useful in run-time environments where the user wants to be able to limit the amount of memory used by JasPer.  This allocator is not used by default. Note: This feature needs C11 functionality. Note: The memory allocator is not thread safe in its current form.\n\nA new --memory-limit CLI option has been added to the jasper, imginfo,\nimgcmp, and jiv programs.  The option is only available when the code is\nbuilt with the new memory allocator.\n\nThe support for my old debug memory allocator from the 1990s has been\npurged from the code.  The debug memory allocator is probably not\na very useful thing with the advent of GCC/Clang code sanitizers.\n\nThe safe size_t integer functions no longer set their result upon failure.\nA safe subtract operation was also added.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/appl/imgcmp.c||src/appl/imgcmp.c",
          "src/appl/imginfo.c||src/appl/imginfo.c",
          "src/appl/jasper.c||src/appl/jasper.c",
          "src/appl/jiv.c||src/appl/jiv.c",
          "src/libjasper/base/jas_image.c||src/libjasper/base/jas_image.c",
          "src/libjasper/base/jas_malloc.c||src/libjasper/base/jas_malloc.c",
          "src/libjasper/include/jasper/jas_config.h.in||src/libjasper/include/jasper/jas_config.h.in",
          "src/libjasper/include/jasper/jas_malloc.h||src/libjasper/include/jasper/jas_malloc.h",
          "src/libjasper/include/jasper/jas_math.h||src/libjasper/include/jasper/jas_math.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/appl/imginfo.c||src/appl/imginfo.c"
          ],
          "candidate": [
            "src/appl/imginfo.c||src/appl/imginfo.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: AH_TEMPLATE([DEBUG_OVERFLOW], [Debugging overflow detection])",
          "119: AH_TEMPLATE([JAS_CONFIGURE], [JasPer configure])",
          "120: AH_TEMPLATE([JAS_VERSION], [JasPer version])",
          "122: AH_TEMPLATE([DEBUG], [Extra debugging support])",
          "124: AH_TOP([",
          "",
          "[Removed Lines]",
          "121: AH_TEMPLATE([DEBUG_MEMALLOC], [Debugging memory allocator])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152: # Checks for programs.",
          "153: ############################################################",
          "157: AC_PROG_INSTALL",
          "158: # AC_PROG_AWK",
          "159: # AC_PROG_CPP",
          "",
          "[Removed Lines]",
          "155: #AC_PROG_CC",
          "156: AC_PROG_CC_C99",
          "",
          "[Added Lines]",
          "154: AC_PROG_CC",
          "155: #AC_PROG_CC_C11",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292: AC_FUNC_VPRINTF",
          "313: ############################################################",
          "314: # Enable/disable sanitizers.",
          "315: ############################################################",
          "",
          "[Removed Lines]",
          "294: ############################################################",
          "295: # Enable/disable special memory allocator for debugging.",
          "296: ############################################################",
          "298: AC_ARG_ENABLE(dmalloc,",
          "299: [  --enable-dmalloc    use special memory allocator for debugging],",
          "300: [",
          "301: case \"${enableval}\" in",
          "302: yes)",
          "303:  AC_DEFINE(DEBUG_MEMALLOC)",
          "304:  ;;",
          "305: no)",
          "306:  ;;",
          "308:  AC_MSG_ERROR(bad value ${enableval} for --enable-dmalloc)",
          "309:  ;;",
          "310: esac",
          "311: ], )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377: if test \"$GCC\" = yes; then",
          "378:  #CFLAGS=\"$CFLAGS\"",
          "380:  CFLAGS=\"$CFLAGS -pedantic\"",
          "381:  CFLAGS=\"$CFLAGS -pedantic-errors\"",
          "382:  CFLAGS=\"$CFLAGS -Wall\"",
          "",
          "[Removed Lines]",
          "379:  CFLAGS=\"$CFLAGS -std=c99\"",
          "",
          "[Added Lines]",
          "359: # CFLAGS=\"$CFLAGS -std=c99\"",
          "360: # CFLAGS=\"$CFLAGS -std=c11\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "404: esac",
          "405: ], [])",
          "409: fi",
          "411: ############################################################",
          "",
          "[Removed Lines]",
          "407: if test -n \"$EXTRACFLAGS\"; then",
          "408:  CFLAGS=\"$CFLAGS $EXTRACFLAGS\"",
          "",
          "[Added Lines]",
          "388: if test -n \"$EXTRA_CFLAGS\"; then",
          "389:  CFLAGS=\"$CFLAGS $EXTRA_CFLAGS\"",
          "",
          "---------------"
        ],
        "src/appl/imgcmp.c||src/appl/imgcmp.c": [
          "File: src/appl/imgcmp.c -> src/appl/imgcmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  OPT_METRIC,",
          "91:  OPT_MAXONLY,",
          "92:  OPT_MINONLY,",
          "94: } optid_t;",
          "96: typedef enum {",
          "",
          "[Removed Lines]",
          "93:  OPT_DIFFIMAGE",
          "",
          "[Added Lines]",
          "93:  OPT_DIFFIMAGE,",
          "94:  OPT_MAXMEM",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:  {OPT_MAXONLY, \"max\", 0},",
          "140:  {OPT_MINONLY, \"min\", 0},",
          "141:  {OPT_DIFFIMAGE, \"d\", JAS_OPT_HASARG},",
          "142:  {-1, 0, 0}",
          "143: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "144:  {OPT_MAXMEM, \"memory-limit\", JAS_OPT_HASARG},",
          "145: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:  int maxonly;",
          "178:  int minonly;",
          "179:  int fmtid;",
          "181:  verbose = 0;",
          "182:  origpath = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:  size_t max_mem;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:  diffpath = 0;",
          "187:  maxonly = 0;",
          "188:  minonly = 0;",
          "190:  if (jas_init()) {",
          "191:   abort();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "195:  max_mem = JAS_DEFAULT_MAX_MEM_USAGE;",
          "196: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:    printf(\"%s\\n\", JAS_VERSION);",
          "222:    exit(EXIT_SUCCESS);",
          "223:    break;",
          "224:   case OPT_HELP:",
          "225:   default:",
          "226:    usage();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:   case OPT_MAXMEM:",
          "233:    max_mem = strtoull(jas_optarg, 0, 10);",
          "234:    break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "246:   }",
          "247:  }",
          "250:  if (!(origstream = jas_stream_fopen(origpath, \"rb\"))) {",
          "251:   fprintf(stderr, \"cannot open %s\\n\", origpath);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "261:  jas_set_max_mem_usage(max_mem);",
          "262: #endif",
          "",
          "---------------"
        ],
        "src/appl/imginfo.c||src/appl/imginfo.c": [
          "File: src/appl/imginfo.c -> src/appl/imginfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #include <math.h>",
          "75: #include <float.h>",
          "76: #include <assert.h>",
          "78: #include <jasper/jasper.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  OPT_VERSION,",
          "87:  OPT_VERBOSE,",
          "88:  OPT_INFILE,",
          "90: } optid_t;",
          "",
          "[Removed Lines]",
          "89:  OPT_DEBUG",
          "",
          "[Added Lines]",
          "90:  OPT_DEBUG,",
          "91:  OPT_MAXMEM",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:  {OPT_VERBOSE, \"verbose\", 0},",
          "107:  {OPT_INFILE, \"f\", JAS_OPT_HASARG},",
          "108:  {OPT_DEBUG, \"debug-level\", JAS_OPT_HASARG},",
          "109:  {-1, 0, 0}",
          "110: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "112:  {OPT_MAXMEM, \"memory-limit\", JAS_OPT_HASARG},",
          "113: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:  int verbose;",
          "130:  char *fmtname;",
          "131:  int debug;",
          "133:  if (jas_init()) {",
          "134:   abort();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:  size_t max_mem;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:  infile = 0;",
          "140:  verbose = 0;",
          "141:  debug = 0;",
          "144:  while ((id = jas_getopt(argc, argv, opts)) >= 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "149:  max_mem = JAS_DEFAULT_MAX_MEM_USAGE;",
          "150: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:   case OPT_INFILE:",
          "157:    infile = jas_optarg;",
          "158:    break;",
          "159:   case OPT_HELP:",
          "160:   default:",
          "161:    usage();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:   case OPT_MAXMEM:",
          "169:    max_mem = strtoull(jas_optarg, 0, 10);",
          "170:    break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "164:  }",
          "166:  jas_setdbglevel(debug);",
          "169:  if (infile) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "180:  jas_set_max_mem_usage(max_mem);",
          "181: #endif",
          "",
          "---------------"
        ],
        "src/appl/jasper.c||src/appl/jasper.c": [
          "File: src/appl/jasper.c -> src/appl/jasper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #include <stdlib.h>",
          "76: #include <assert.h>",
          "77: #include <time.h>",
          "79: #include <jasper/jasper.h>",
          "80: #include <jasper/jas_debug.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:  int srgb;",
          "124: } cmdopts_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:  size_t max_mem;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:  }",
          "183:  jas_setdbglevel(cmdopts->debug);",
          "185:  if (cmdopts->verbose) {",
          "186:   cmdinfo();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "188:  jas_set_max_mem_usage(cmdopts->max_mem);",
          "189: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:   CMDOPT_VERSION,",
          "314:   CMDOPT_DEBUG,",
          "315:   CMDOPT_CMPTNO,",
          "317:  } cmdoptid_t;",
          "319:  static jas_opt_t cmdoptions[] = {",
          "",
          "[Removed Lines]",
          "316:   CMDOPT_SRGB",
          "",
          "[Added Lines]",
          "322:   CMDOPT_SRGB,",
          "323:   CMDOPT_MAXMEM",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "336:   {CMDOPT_CMPTNO, \"cmptno\", JAS_OPT_HASARG},",
          "337:   {CMDOPT_SRGB, \"force-srgb\", 0},",
          "338:   {CMDOPT_SRGB, \"S\", 0},",
          "339:   {-1, 0, 0}",
          "340:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "347:   {CMDOPT_MAXMEM, \"memory-limit\", JAS_OPT_HASARG},",
          "348: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "360:  cmdopts->cmptno = -1;",
          "361:  cmdopts->debug = 0;",
          "362:  cmdopts->srgb = 0;",
          "364:  while ((c = jas_getopt(argc, argv, cmdoptions)) != EOF) {",
          "365:   switch (c) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "374:  cmdopts->max_mem = JAS_DEFAULT_MAX_MEM_USAGE;",
          "375: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "408:   case CMDOPT_SRGB:",
          "409:    cmdopts->srgb = 1;",
          "410:    break;",
          "411:   default:",
          "412:    badusage();",
          "413:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:   case CMDOPT_MAXMEM:",
          "425:    cmdopts->max_mem = strtoull(jas_optarg, 0, 10);",
          "426:    break;",
          "",
          "---------------"
        ],
        "src/appl/jiv.c||src/appl/jiv.c": [
          "File: src/appl/jiv.c -> src/appl/jiv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:  int verbose;",
          "103: } cmdopts_t;",
          "105: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:  size_t max_mem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:  {'w', \"wait\", JAS_OPT_HASARG},",
          "191:  {'l', \"loop\", 0},",
          "192:  {'t', \"title\", JAS_OPT_HASARG},",
          "193:  {-1, 0, 0}",
          "194: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "196:  {'m', \"memory-limit\", JAS_OPT_HASARG},",
          "197: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:  cmdopts.tmout = 0;",
          "235:  cmdopts.loop = 0;",
          "236:  cmdopts.verbose = 0;",
          "238:  while ((c = jas_getopt(argc, argv, opts)) != EOF) {",
          "239:   switch (c) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "243:  cmdopts.max_mem = JAS_DEFAULT_MAX_MEM_USAGE;",
          "244: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:   case 'v':",
          "250:    cmdopts.verbose = 1;",
          "251:    break;",
          "252:   case 'V':",
          "253:    printf(\"%s\\n\", JAS_VERSION);",
          "254:    fprintf(stderr, \"libjasper %s\\n\", jas_getversion());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:   case 'm':",
          "261:    cmdopts.max_mem = strtoull(jas_optarg, 0, 10);",
          "262:    break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:   cmdopts.numfiles = 1;",
          "274:  }",
          "276:  streamin = jas_stream_fdopen(0, \"rb\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "288:  jas_set_max_mem_usage(cmdopts.max_mem);",
          "289: #endif",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_image.c||src/libjasper/base/jas_image.c": [
          "File: src/libjasper/base/jas_image.c -> src/libjasper/base/jas_image.c"
        ],
        "src/libjasper/base/jas_malloc.c||src/libjasper/base/jas_malloc.c": [
          "File: src/libjasper/base/jas_malloc.c -> src/libjasper/base/jas_malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #include <stdlib.h>",
          "76: #include <stdint.h>",
          "77: #include <stdbool.h>",
          "78: #include <assert.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #include <stddef.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: #endif",
          "101: void *jas_malloc(size_t size)",
          "102: {",
          "103:  void *result;",
          "",
          "[Removed Lines]",
          "91: #if defined(DEBUG_MEMALLOC)",
          "92: #include \"../../../local/src/memalloc.c\"",
          "95: #if !defined(DEBUG_MEMALLOC)",
          "",
          "[Added Lines]",
          "92: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "94: static size_t jas_mem = 0;",
          "95: static size_t jas_max_mem = JAS_DEFAULT_MAX_MEM_USAGE;",
          "97: typedef struct {",
          "98:  size_t size;",
          "99: } jas_mb_t;",
          "101: #define JAS_MB_ADJUST \\",
          "102:   ((sizeof(jas_mb_t) + sizeof(max_align_t) - 1) / sizeof(max_align_t))",
          "103: #define JAS_MB_SIZE (JAS_MB_ADJUST * sizeof(max_align_t))",
          "105: jas_mb_t *jas_get_mb(void *ptr)",
          "106: {",
          "107:  return JAS_CAST(jas_mb_t *, JAS_CAST(max_align_t *, ptr) - JAS_MB_ADJUST);",
          "108: }",
          "110: void *jas_mb_get_data(jas_mb_t *mb)",
          "111: {",
          "112:  return JAS_CAST(void *, JAS_CAST(max_align_t *, mb) + JAS_MB_ADJUST);",
          "113: }",
          "115: void jas_set_max_mem_usage(size_t max_mem)",
          "116: {",
          "117:  jas_max_mem = max_mem;",
          "118: }",
          "120: size_t jas_get_mem_usage()",
          "121: {",
          "122:  return jas_mem;",
          "123: }",
          "125: void *jas_malloc(size_t size)",
          "126: {",
          "127:  void *result;",
          "128:  jas_mb_t *mb;",
          "129:  size_t ext_size;",
          "130:  size_t mem;",
          "132:  JAS_DBGLOG(100, (\"jas_malloc(%zu)\\n\", size));",
          "133: #if defined(JAS_MALLOC_RETURN_NULL_PTR_FOR_ZERO_SIZE)",
          "134:  if (!size) {",
          "135:   return 0;",
          "136:  }",
          "138:  if (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)) {",
          "139:   jas_eprintf(\"requested memory size is too large\\n\");",
          "140:   result = 0;",
          "141:   mb = 0;",
          "142:  } else if (!jas_safe_size_add(jas_mem, size, &mem) || mem > jas_max_mem) {",
          "143:   jas_eprintf(\"maximum memory limit would be exceeded\\n\");",
          "144:   result = 0;",
          "145:   mb = 0;",
          "146:  } else {",
          "147:   JAS_DBGLOG(100, (\"jas_malloc: ext_size=%zu\\n\", ext_size));",
          "148:   if ((mb = malloc(ext_size))) {",
          "149:    result = jas_mb_get_data(mb);",
          "150:    mb->size = size;",
          "151:    jas_mem = mem;",
          "152:   } else {",
          "153:    result = 0;",
          "154:   }",
          "155:  }",
          "156:  JAS_DBGLOG(99, (\"jas_malloc(%zu) -> %p (mb=%p)\\n\", size, result, mb));",
          "157:  JAS_DBGLOG(102, (\"max_mem=%zu; mem=%zu\\n\", jas_max_mem, jas_mem));",
          "158:  return result;",
          "159: }",
          "161: void *jas_realloc(void *ptr, size_t size)",
          "162: {",
          "163:  void *result;",
          "164:  jas_mb_t *mb;",
          "165:  jas_mb_t *old_mb;",
          "166:  size_t old_size;",
          "167:  size_t ext_size;",
          "168:  size_t mem;",
          "170:  JAS_DBGLOG(100, (\"jas_realloc(%x, %zu)\\n\", ptr, size));",
          "171:  if (!ptr) {",
          "172:   return jas_malloc(size);",
          "173:  }",
          "174:  if (ptr && !size) {",
          "175:   jas_free(ptr);",
          "176:  }",
          "177:  if (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)) {",
          "178:   jas_eprintf(\"requested memory size is too large\\n\");",
          "179:   return 0;",
          "180:  }",
          "181:  old_mb = jas_get_mb(ptr);",
          "182:  old_size = old_mb->size;",
          "183:  JAS_DBGLOG(101, (\"jas_realloc: old_mb=%x; old_size=%zu\\n\", old_mb,",
          "184:    old_size));",
          "185:  if (size > old_size) {",
          "186:   if (!jas_safe_size_add(jas_mem, ext_size, &mem) || mem > jas_max_mem) {",
          "187:    jas_eprintf(\"maximum memory limit would be exceeded\\n\");",
          "188:    return 0;",
          "189:   }",
          "190:  } else {",
          "191:   if (!jas_safe_size_sub(jas_mem, old_size - size, &jas_mem)) {",
          "192:    jas_eprintf(\"heap corruption detected\\n\");",
          "193:    abort();",
          "194:   }",
          "195:  }",
          "196:  JAS_DBGLOG(100, (\"jas_realloc: realloc(%p, %zu)\\n\", old_mb, ext_size));",
          "197:  if (!(mb = realloc(old_mb, ext_size))) {",
          "198:   result = 0;",
          "199:  } else {",
          "200:   result = jas_mb_get_data(mb);",
          "201:   mb->size = size;",
          "202:   jas_mem = mem;",
          "203:  }",
          "204:  JAS_DBGLOG(100, (\"jas_realloc(%p, %zu) -> %p (%p)\\n\", ptr, size, result,",
          "205:    mb));",
          "206:  JAS_DBGLOG(102, (\"max_mem=%zu; mem=%zu\\n\", jas_max_mem, jas_mem));",
          "207:  return result;",
          "208: }",
          "210: void jas_free(void *ptr)",
          "211: {",
          "212:  jas_mb_t *mb;",
          "213:  size_t mem;",
          "214:  size_t size;",
          "215:  JAS_DBGLOG(100, (\"jas_free(%p)\\n\", ptr));",
          "216:  if (ptr) {",
          "217:   mb = jas_get_mb(ptr);",
          "218:   size = mb->size;",
          "219:   JAS_DBGLOG(101, (\"jas_free(%p) (mb=%p; size=%zu)\\n\", ptr, mb, size));",
          "220:   if (!jas_safe_size_sub(jas_mem, size, &jas_mem)) {",
          "221:    jas_eprintf(\"heap corruption detected\\n\");",
          "222:    abort();",
          "223:   }",
          "224:   JAS_DBGLOG(100, (\"jas_free: free(%p)\\n\", mb));",
          "225:   free(mb);",
          "226:  }",
          "227:  JAS_DBGLOG(102, (\"max_mem=%zu; mem=%zu\\n\", jas_max_mem, jas_mem));",
          "228: }",
          "230: #endif",
          "236: #if !defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:  free(ptr);",
          "123: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:  memset(ptr, 0, size);",
          "169:  return ptr;",
          "170: }",
          "",
          "[Removed Lines]",
          "172: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/libjasper/include/jasper/jas_config.h.in||src/libjasper/include/jasper/jas_config.h.in": [
          "File: src/libjasper/include/jasper/jas_config.h.in -> src/libjasper/include/jasper/jas_config.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #undef DEBUG",
          "28: #undef DEBUG_OVERFLOW",
          "",
          "[Removed Lines]",
          "25: #undef DEBUG_MEMALLOC",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/libjasper/include/jasper/jas_malloc.h||src/libjasper/include/jasper/jas_malloc.h": [
          "File: src/libjasper/include/jasper/jas_malloc.h -> src/libjasper/include/jasper/jas_malloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: extern \"C\" {",
          "84: #endif",
          "107: void *jas_malloc(size_t size);",
          "",
          "[Removed Lines]",
          "90: #if defined(DEBUG_MEMALLOC)",
          "93: #include \"../../../../local/src/memalloc.h\"",
          "94: #define jas_malloc MEMALLOC",
          "95: #define jas_free MEMFREE",
          "96: #define jas_realloc MEMREALLOC",
          "97: #define jas_calloc MEMCALLOC",
          "98: #endif",
          "104: #if !defined(DEBUG_MEMALLOC)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125: void *jas_realloc2(void *ptr, size_t num_elements, size_t element_size);",
          "127: #endif",
          "129: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: #if defined(JAS_DEFAULT_MAX_MEM_USAGE)",
          "113: void jas_set_max_mem_usage(size_t max_mem);",
          "115: size_t jas_get_mem_usage();",
          "",
          "---------------"
        ],
        "src/libjasper/include/jasper/jas_math.h||src/libjasper/include/jasper/jas_math.h": [
          "File: src/libjasper/include/jasper/jas_math.h -> src/libjasper/include/jasper/jas_math.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:  if (x && y > SIZE_MAX / x) {",
          "170:   return false;",
          "171:  }",
          "173:  return true;",
          "174: }",
          "176: inline static bool jas_safe_size_add(size_t x, size_t y, size_t *result)",
          "177: {",
          "178:  if (y > SIZE_MAX - x) {",
          "180:   return false;",
          "181:  }",
          "183:  return true;",
          "184: }",
          "186: #ifdef __cplusplus",
          "187: }",
          "188: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186: inline static bool jas_safe_size_sub(size_t x, size_t y, size_t *result)",
          "187: {",
          "188:  if (y > x) {",
          "189:   return false;",
          "190:  }",
          "192:  return true;",
          "193: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}