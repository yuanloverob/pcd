{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c063317b74b6ac163d751cdeb3b3d3c43a6cffd",
      "candidate_info": {
        "commit_hash": "6c063317b74b6ac163d751cdeb3b3d3c43a6cffd",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6c063317b74b6ac163d751cdeb3b3d3c43a6cffd",
        "files": [
          "Makefile.am",
          "configure.ac",
          "libuv.pc.in"
        ],
        "message": "build: add support for pkg-config",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "libuv.pc.in||libuv.pc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: CLEANFILES += src/unix/uv-dtrace.o src/unix/uv-dtrace.lo",
          "268: endif",
          "270: SUFFIXES = .d",
          "272: include/uv-dtrace.h: src/unix/uv-dtrace.d",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: if HAVE_PKG_CONFIG",
          "271: pkgconfigdir = $(libdir)/pkgconfig",
          "272: pkgconfig_DATA = @PACKAGE_NAME@.pc",
          "273: endif",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: AM_CONDITIONAL([OPENBSD], [AS_CASE([$host_os], [openbsd*], [true], [false])])",
          "46: AM_CONDITIONAL([SUNOS],   [AS_CASE([$host_os], [solaris*], [true], [false])])",
          "47: AM_CONDITIONAL([WINNT],   [AS_CASE([$host_os], [mingw*],   [true], [false])])",
          "48: PANDORA_ENABLE_DTRACE",
          "49: AC_CONFIG_FILES([Makefile])",
          "50: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: PKG_PROG_PKG_CONFIG([0.20])",
          "49: AM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" != \"x\"])",
          "50: AC_SUBST(HAVE_PKG_CONFIG)",
          "52: AS_IF([test \"x$PKG_CONFIG\" != \"x\"], [",
          "53:  AC_CONFIG_FILES([libuv.pc])",
          "54: ])",
          "",
          "---------------"
        ],
        "libuv.pc.in||libuv.pc.in": [
          "File: libuv.pc.in -> libuv.pc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: prefix=@prefix@",
          "2: exec_prefix=@prefix@",
          "3: libdir=@libdir@",
          "4: includedir=@includedir@",
          "6: Name: @PACKAGE_NAME@",
          "7: Version: @PACKAGE_VERSION@",
          "8: Description: multi-platform support library with a focus on asynchronous I/O.",
          "10: Libs: -L${libdir} -luv",
          "11: Cflags: -I${includedir}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21c37a7db83e5e06cb28f61112325751fb41661c",
      "candidate_info": {
        "commit_hash": "21c37a7db83e5e06cb28f61112325751fb41661c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/21c37a7db83e5e06cb28f61112325751fb41661c",
        "files": [
          "src/unix/aix.c",
          "src/unix/core.c",
          "src/unix/darwin.c",
          "src/unix/freebsd.c",
          "src/unix/internal.h",
          "src/unix/linux-core.c",
          "src/unix/loop.c",
          "src/unix/netbsd.c",
          "src/unix/openbsd.c",
          "src/unix/sunos.c",
          "src/unix/thread.c"
        ],
        "message": "linux: use CLOCK_MONOTONIC_COARSE if available\n\nOn some systems, clock_gettime(CLOCK_MONOTONIC) is only serviced from\nthe vDSO when the __vdso_clock_gettime() wrapper is confident enough\nthat the vDSO timestamp is highly accurate.  When in doubt, it falls\nback to making a traditional SYS_clock_gettime system call with all\nthe overhead that entails.\n\nWhile a commendable approach, it's overkill for our purposes because we\ndon't usually need high precision time. That's why this commit switches\nto CLOCK_MONOTONIC_COARSE for low-precision timekeeping, provided said\nclock has at least a one millisecond resolution.\n\nThis change should eliminate the system call on almost all systems,\nincluding virtualized ones, provided the kernel is >= 2.6.32 and glibc\nis new enough to find and parse the vDSO.",
        "before_after_code_files": [
          "src/unix/aix.c||src/unix/aix.c",
          "src/unix/core.c||src/unix/core.c",
          "src/unix/darwin.c||src/unix/darwin.c",
          "src/unix/freebsd.c||src/unix/freebsd.c",
          "src/unix/internal.h||src/unix/internal.h",
          "src/unix/linux-core.c||src/unix/linux-core.c",
          "src/unix/loop.c||src/unix/loop.c",
          "src/unix/netbsd.c||src/unix/netbsd.c",
          "src/unix/openbsd.c||src/unix/openbsd.c",
          "src/unix/sunos.c||src/unix/sunos.c",
          "src/unix/thread.c||src/unix/thread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/aix.c||src/unix/aix.c": [
          "File: src/unix/aix.c -> src/unix/aix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include <sys/proc.h>",
          "46: #include <sys/procfs.h>",
          "49:   uint64_t G = 1000000000;",
          "50:   timebasestruct_t t;",
          "51:   read_wall_time(&t, TIMEBASE_SZ);",
          "",
          "[Removed Lines]",
          "48: uint64_t uv__hrtime(void) {",
          "",
          "[Added Lines]",
          "48: uint64_t uv__hrtime(uv_clocktype_t type) {",
          "",
          "---------------"
        ],
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: uint64_t uv_hrtime(void) {",
          "77: }",
          "",
          "[Removed Lines]",
          "76:   return uv__hrtime();",
          "",
          "[Added Lines]",
          "76:   return uv__hrtime(UV_CLOCK_PRECISE);",
          "",
          "---------------"
        ],
        "src/unix/darwin.c||src/unix/darwin.c": [
          "File: src/unix/darwin.c -> src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "56:   mach_timebase_info_data_t info;",
          "58:   if (mach_timebase_info(&info) != KERN_SUCCESS)",
          "",
          "[Removed Lines]",
          "55: uint64_t uv__hrtime(void) {",
          "",
          "[Added Lines]",
          "55: uint64_t uv__hrtime(uv_clocktype_t type) {",
          "",
          "---------------"
        ],
        "src/unix/freebsd.c||src/unix/freebsd.c": [
          "File: src/unix/freebsd.c -> src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: }",
          "71:   struct timespec ts;",
          "72:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "73:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "[Removed Lines]",
          "70: uint64_t uv__hrtime(void) {",
          "",
          "[Added Lines]",
          "70: uint64_t uv__hrtime(uv_clocktype_t type) {",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: };",
          "132: int uv__nonblock(int fd, int set);",
          "133: int uv__close(int fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: typedef enum {",
          "134: } uv_clocktype_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: void uv__work_done(uv_async_t* handle, int status);",
          "195: int uv__kqueue_init(uv_loop_t* loop);",
          "196: int uv__platform_loop_init(uv_loop_t* loop, int default_loop);",
          "197: void uv__platform_loop_delete(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "194: uint64_t uv__hrtime(void);",
          "",
          "[Added Lines]",
          "199: uint64_t uv__hrtime(uv_clocktype_t type);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:   uv__req_init((loop), (uv_req_t*)(req), (type))",
          "265: UV_UNUSED(static void uv__update_time(uv_loop_t* loop)) {",
          "267: }",
          "269: UV_UNUSED(static char* uv__basename_r(const char* path)) {",
          "",
          "[Removed Lines]",
          "266:   loop->time = uv__hrtime() / 1000000;",
          "",
          "[Added Lines]",
          "273:   loop->time = uv__hrtime(UV_CLOCK_FAST) / 1000000;",
          "",
          "---------------"
        ],
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: # include <linux/if_packet.h>",
          "53: #endif",
          "",
          "[Removed Lines]",
          "55: #undef NANOSEC",
          "56: #define NANOSEC ((uint64_t) 1e9)",
          "",
          "[Added Lines]",
          "56: #ifndef CLOCK_MONOTONIC_COARSE",
          "57: # define CLOCK_MONOTONIC_COARSE 6",
          "58: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245: }",
          "252: }",
          "",
          "[Removed Lines]",
          "248: uint64_t uv__hrtime(void) {",
          "249:   struct timespec ts;",
          "250:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "251:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "[Added Lines]",
          "250: uint64_t uv__hrtime(uv_clocktype_t type) {",
          "251:   static clock_t fast_clock_id = -1;",
          "252:   struct timespec t;",
          "253:   clock_t clock_id;",
          "263:   if (type == UV_CLOCK_FAST && fast_clock_id == -1) {",
          "264:     if (clock_getres(CLOCK_MONOTONIC_COARSE, &t) == 0 &&",
          "265:         t.tv_nsec <= 1 * 1000 * 1000) {",
          "266:       fast_clock_id = CLOCK_MONOTONIC_COARSE;",
          "267:     } else {",
          "268:       fast_clock_id = CLOCK_MONOTONIC;",
          "269:     }",
          "270:   }",
          "272:   clock_id = CLOCK_MONOTONIC;",
          "273:   if (type == UV_CLOCK_FAST)",
          "274:     clock_id = fast_clock_id;",
          "276:   if (clock_gettime(clock_id, &t))",
          "279:   return t.tv_sec * (uint64_t) 1e9 + t.tv_nsec;",
          "",
          "---------------"
        ],
        "src/unix/loop.c||src/unix/loop.c": [
          "File: src/unix/loop.c -> src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   QUEUE_INIT(&loop->watcher_queue);",
          "98:   loop->closing_handles = NULL;",
          "100:   uv__async_init(&loop->async_watcher);",
          "101:   loop->signal_pipefd[0] = -1;",
          "102:   loop->signal_pipefd[1] = -1;",
          "",
          "[Removed Lines]",
          "99:   loop->time = uv__hrtime() / 1000000;",
          "",
          "[Added Lines]",
          "99:   uv__update_time(loop);",
          "",
          "---------------"
        ],
        "src/unix/netbsd.c||src/unix/netbsd.c": [
          "File: src/unix/netbsd.c -> src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: }",
          "61:   struct timespec ts;",
          "62:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "63:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "[Removed Lines]",
          "60: uint64_t uv__hrtime(void) {",
          "",
          "[Added Lines]",
          "60: uint64_t uv__hrtime(uv_clocktype_t type) {",
          "",
          "---------------"
        ],
        "src/unix/openbsd.c||src/unix/openbsd.c": [
          "File: src/unix/openbsd.c -> src/unix/openbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: }",
          "60:   struct timespec ts;",
          "61:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "62:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "[Removed Lines]",
          "59: uint64_t uv__hrtime(void) {",
          "",
          "[Added Lines]",
          "59: uint64_t uv__hrtime(uv_clocktype_t type) {",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: }",
          "243:   return gethrtime();",
          "244: }",
          "",
          "[Removed Lines]",
          "242: uint64_t uv__hrtime(void) {",
          "",
          "[Added Lines]",
          "242: uint64_t uv__hrtime(uv_clocktype_t type) {",
          "",
          "---------------"
        ],
        "src/unix/thread.c||src/unix/thread.c": [
          "File: src/unix/thread.c -> src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:   ts.tv_nsec = timeout % NANOSEC;",
          "336:   r = pthread_cond_timedwait_relative_np(cond, mutex, &ts);",
          "337: #else",
          "339:   ts.tv_sec = timeout / NANOSEC;",
          "340:   ts.tv_nsec = timeout % NANOSEC;",
          "341: #if defined(__ANDROID__)",
          "",
          "[Removed Lines]",
          "338:   timeout += uv__hrtime();",
          "",
          "[Added Lines]",
          "338:   timeout += uv__hrtime(UV_CLOCK_PRECISE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c7717c6b2d3f65143272d98b10da615a20a16fe",
      "candidate_info": {
        "commit_hash": "7c7717c6b2d3f65143272d98b10da615a20a16fe",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7c7717c6b2d3f65143272d98b10da615a20a16fe",
        "files": [
          "src/win/stream.c"
        ],
        "message": "windows: remove duplicate check in stream.c\n\nFixes #937.",
        "before_after_code_files": [
          "src/win/stream.c||src/win/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/stream.c||src/win/stream.c": [
          "File: src/win/stream.c -> src/win/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     return UV_EPIPE;",
          "210:   }",
          "216:   uv_req_init(loop, (uv_req_t*) req);",
          "217:   req->type = UV_SHUTDOWN;",
          "218:   req->handle = handle;",
          "",
          "[Removed Lines]",
          "212:   if (!(handle->flags & UV_HANDLE_WRITABLE)) {",
          "213:     return UV_EPIPE;",
          "214:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "daa457b1c043b46fb0936bb08787752f1daa445e",
      "candidate_info": {
        "commit_hash": "daa457b1c043b46fb0936bb08787752f1daa445e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/daa457b1c043b46fb0936bb08787752f1daa445e",
        "files": [
          "src/unix/fs.c"
        ],
        "message": "openbsd, osx: fix compilation warning on scandir\n\nThe select function takes a const struct on newer OSX versions but it\ndoesn't on OSX <= 10.7 or OpenBSD.",
        "before_after_code_files": [
          "src/unix/fs.c||src/unix/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271: }",
          "274: static int uv__fs_readdir_filter(const struct dirent* dent) {",
          "275:   return strcmp(dent->d_name, \".\") != 0 && strcmp(dent->d_name, \"..\") != 0;",
          "276: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: #if defined(__OpenBSD__) || (defined(__APPLE__) && !defined(MAC_OS_X_VERSION_10_8))",
          "275: static int uv__fs_readdir_filter(struct dirent* dent) {",
          "276: #else",
          "278: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbcc0c963c4f2255c24ee9bf84c182f19b32b3a1",
      "candidate_info": {
        "commit_hash": "bbcc0c963c4f2255c24ee9bf84c182f19b32b3a1",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bbcc0c963c4f2255c24ee9bf84c182f19b32b3a1",
        "files": [
          "Makefile.am"
        ],
        "message": "build: freebsd link with libelf if dtrace enabled",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "269: if HAVE_DTRACE",
          "270: BUILT_SOURCES = include/uv-dtrace.h",
          "271: CLEANFILES += include/uv-dtrace.h",
          "272: endif",
          "274: if DTRACE_NEEDS_OBJECTS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: if FREEBSD",
          "273: libuv_la_LDFLAGS += -lelf",
          "274: endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}