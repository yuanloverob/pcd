{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
      "candidate_info": {
        "commit_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Performance optimizations in the rtreeStepToLeaf() routine of RTree.\n\nFossilOrigin-Name: 4e34e3615ff31f4a6432033797b2e1a6604007ea0e501d714ecb362632776150",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1565:   eInt = pRtree->eCoordType==RTREE_COORD_INT32;",
          "1566:   while( (p = rtreeSearchPointFirst(pCur))!=0 && p->iLevel>0 ){",
          "1567:     pNode = rtreeNodeOfFirstSearchPoint(pCur, &rc);",
          "1568:     if( rc ) return rc;",
          "1569:     nCell = NCELL(pNode);",
          "1570:     assert( nCell<200 );",
          "1571:     while( p->iCell<nCell ){",
          "1572:       sqlite3_rtree_dbl rScore = (sqlite3_rtree_dbl)-1;",
          "1574:       eWithin = FULLY_WITHIN;",
          "1575:       for(ii=0; ii<nConstraint; ii++){",
          "1576:         RtreeConstraint *pConstraint = pCur->aConstraint + ii;",
          "",
          "[Removed Lines]",
          "1573:       u8 *pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "[Added Lines]",
          "1567:     u8 *pCellData;",
          "1572:     pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1583:         }else{",
          "1584:           rtreeNonleafConstraint(pConstraint, eInt, pCellData, &eWithin);",
          "1585:         }",
          "1587:       }",
          "1589:       if( eWithin==NOT_WITHIN ) continue;",
          "1590:       x.iLevel = p->iLevel - 1;",
          "1591:       if( x.iLevel ){",
          "1592:         x.id = readInt64(pCellData);",
          "",
          "[Removed Lines]",
          "1586:         if( eWithin==NOT_WITHIN ) break;",
          "1588:       p->iCell++;",
          "",
          "[Added Lines]",
          "1587:         if( eWithin==NOT_WITHIN ){",
          "1588:           p->iCell++;",
          "1589:           pCellData += pRtree->nBytesPerCell;",
          "1590:           break;",
          "1591:         }",
          "1594:       p->iCell++;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39be3c61bd809cc89bdfdba90afc391ac9c2f81dfd8bb68a9b085b0ca8cd1fba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7579a53fb91ec9c0a473bc928518239671235a2",
      "candidate_info": {
        "commit_hash": "e7579a53fb91ec9c0a473bc928518239671235a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7579a53fb91ec9c0a473bc928518239671235a2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Further simplifications to window-function code.\n\nFossilOrigin-Name: 5fe15c1d8383989257e11d1806e6b035acacd1b504ae385ba58d20db10f26eee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77b0db22d6c7a031f332bfcf1c8fcd94e464de9f2396f0327ee761a30ebc8b60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1599:         VdbeCoverage(v);",
          "1600:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1601:       }",
          "1634:       if( pWin->bExprArgs ){",
          "1635:         int iStart = sqlite3VdbeCurrentAddr(v);",
          "1636:         VdbeOp *pOp, *pEnd;",
          "",
          "[Removed Lines]",
          "1611:       if( pWin->eFrmType==TK_RANGE",
          "1612:        && pWin->eStart==pWin->eEnd",
          "1613:        && pWin->eStart==TK_PRECEDING",
          "1614:       ){",
          "1615:         int regPeer = sqlite3GetTempReg(pParse);",
          "1616:         int regString = sqlite3GetTempReg(pParse);",
          "1617:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1618:         VdbeModuleComment((v, \"windowAggStep \\\"peer is numeric?\\\" test\"));",
          "1620:         sqlite3VdbeAddOp3(v, OP_Le, p->regStart, lbl, p->regEnd);",
          "1622:         windowReadPeerValues(p, csr, regPeer);",
          "1623:         sqlite3VdbeAddOp2(v, OP_IsNull, regPeer, lbl);",
          "1624:         sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1625:         addrIf2 = sqlite3VdbeAddOp3(v, OP_Lt, regString, 0, regPeer);",
          "1626:         sqlite3ReleaseTempReg(pParse, regPeer);",
          "1627:         sqlite3ReleaseTempReg(pParse, regString);",
          "1628:         sqlite3VdbeResolveLabel(v, lbl);",
          "1629:         VdbeModuleComment((v, \"windowAggStep end \\\"peer is numeric?\\\"\"));",
          "1630:         assert( pWin->eStart==TK_PRECEDING || pWin->eStart==TK_FOLLOWING );",
          "1631:         assert( pMWin->pOrderBy && pMWin->pOrderBy->nExpr==1 );",
          "1632:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2180:     windowAggFinal(p, 0);",
          "2181:   }",
          "2182:   addrContinue = sqlite3VdbeCurrentAddr(v);",
          "2183:   switch( op ){",
          "2184:     case WINDOW_RETURN_ROW:",
          "2185:       csr = p->current.csr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2155:   if( pMWin->eStart==pMWin->eEnd && regCountdown",
          "2156:    && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2157:   ){",
          "2158:     int regRowid1 = sqlite3GetTempReg(pParse);",
          "2159:     int regRowid2 = sqlite3GetTempReg(pParse);",
          "2160:     sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2161:     sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2162:     sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2163:     sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2164:     sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2165:     assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING );",
          "2166:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2231:   if( bPeer ){",
          "2232:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "2250:     windowReadPeerValues(p, csr, regTmp);",
          "2251:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "2252:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "",
          "[Removed Lines]",
          "2233:     int regTmp;",
          "2238:     if( pMWin->eStart==TK_FOLLOWING && pMWin->eEnd==TK_FOLLOWING",
          "2239:      && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2240:     ){",
          "2241:       int regRowid1 = sqlite3GetTempReg(pParse);",
          "2242:       int regRowid2 = sqlite3GetTempReg(pParse);",
          "2243:       sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2244:       sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2245:       sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2246:       sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2247:       sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2248:     }",
          "2249:     regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "[Added Lines]",
          "2218:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2761:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "2763:   }",
          "2764:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "2766:   }",
          "",
          "[Removed Lines]",
          "2762:     s.regStart = ++pParse->nMem;",
          "2765:     s.regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "2733:     regStart = ++pParse->nMem;",
          "2736:     regEnd = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2818:   s.regArg = windowInitAccum(pParse, pMWin);",
          "2823:   }",
          "2827:   }",
          "2830:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2834:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "2820:   if( s.regStart ){",
          "2821:     sqlite3ExprCode(pParse, pMWin->pStart, s.regStart);",
          "2822:     windowCheckValue(pParse, s.regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2824:   if( s.regEnd ){",
          "2825:     sqlite3ExprCode(pParse, pMWin->pEnd, s.regEnd);",
          "2826:     windowCheckValue(pParse, s.regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2829:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && s.regStart ){",
          "2831:     int addrGe = sqlite3VdbeAddOp3(v, op, s.regStart, 0, s.regEnd);",
          "",
          "[Added Lines]",
          "2791:   if( regStart ){",
          "2792:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2793:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2795:   if( regEnd ){",
          "2796:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2797:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2800:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "2802:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2839:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2840:     sqlite3VdbeJumpHere(v, addrGe);",
          "2841:   }",
          "2843:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2845:   }",
          "2847:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "2842:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && s.regEnd ){",
          "2844:     sqlite3VdbeAddOp3(v, OP_Subtract, s.regStart, s.regEnd, s.regStart);",
          "",
          "[Added Lines]",
          "2813:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "2815:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2873:       if( pMWin->eFrmType==TK_RANGE ){",
          "2874:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2875:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2878:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2879:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "2880:         sqlite3VdbeResolveLabel(v, lbl);",
          "2881:       }else{",
          "2884:       }",
          "2885:     }",
          "2886:   }else",
          "2887:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2888:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2891:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2893:   }else{",
          "2894:     int addr = 0;",
          "2895:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2876:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, s.regEnd, s.end.csr, lbl);",
          "2877:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2882:         windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 0);",
          "2883:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2889:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2890:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2892:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2847:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2848:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2853:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "2854:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2860:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2861:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2863:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2897:       if( pMWin->eFrmType==TK_RANGE ){",
          "2898:         int lbl = 0;",
          "2899:         addr = sqlite3VdbeCurrentAddr(v);",
          "2901:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "2903:         }",
          "2904:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2907:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "2908:           sqlite3VdbeResolveLabel(v, lbl);",
          "2909:         }",
          "2910:       }else{",
          "2913:           VdbeCoverage(v);",
          "2914:         }",
          "2915:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2918:       }",
          "2919:     }",
          "2920:   }",
          "",
          "[Removed Lines]",
          "2900:         if( s.regEnd ){",
          "2902:           windowCodeRangeTest(&s, OP_Ge, s.current.csr,s.regEnd,s.end.csr,lbl);",
          "2905:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2906:         if( s.regEnd ){",
          "2911:         if( s.regEnd ){",
          "2912:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, s.regEnd, 0, 1);",
          "2916:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2917:         if( s.regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "2871:         if( regEnd ){",
          "2873:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2876:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2877:         if( regEnd ){",
          "2882:         if( regEnd ){",
          "2883:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2887:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2888:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2933:   VdbeCoverage(v);",
          "2934:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2935:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2938:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2939:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2940:     int addrStart;",
          "",
          "[Removed Lines]",
          "2936:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2937:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2907:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2908:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2944:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2945:     if( pMWin->eFrmType==TK_RANGE ){",
          "2946:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2948:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2949:     }else",
          "2950:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "2951:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2953:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, 0, 1);",
          "2954:     }else{",
          "2955:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "2956:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2959:     }",
          "2960:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2961:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "",
          "[Removed Lines]",
          "2947:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "2952:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regStart, 1);",
          "2957:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 1);",
          "2958:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "",
          "[Added Lines]",
          "2918:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2923:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "2928:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 1);",
          "2929:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2970:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2971:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2972:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2974:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2975:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2976:   }",
          "",
          "[Removed Lines]",
          "2973:     windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2944:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   ) FROM t1;",
          "298: } {7 {} 8 {} abc 1001}",
          "300: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300: #-------------------------------------------------------------------------",
          "301: reset_db",
          "302: do_execsql_test 7.0 {",
          "303:   CREATE TABLE t1(a, c);",
          "304:   CREATE INDEX i1 ON t1(a);",
          "306:   INSERT INTO t1 VALUES(NULL, 46);",
          "307:   INSERT INTO t1 VALUES(NULL, 45);",
          "308:   INSERT INTO t1 VALUES(7,  997);",
          "309:   INSERT INTO t1 VALUES(7,  1000);",
          "310:   INSERT INTO t1 VALUES(8,  997);",
          "311:   INSERT INTO t1 VALUES(8,  1000);",
          "312:   INSERT INTO t1 VALUES('abc', 1001);",
          "313:   INSERT INTO t1 VALUES('abc', 1004);",
          "314:   INSERT INTO t1 VALUES('xyz', 3333);",
          "315: }",
          "317: do_execsql_test 7.1 {",
          "318:   SELECT a, max(c) OVER (",
          "319:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "320:   ) FROM t1;",
          "321: } {{} 46 {} 46  7 {} 7 {} 8 {} 8 {}  abc 1004 abc 1004 xyz 3333}",
          "322: do_execsql_test 7.2 {",
          "323:   SELECT a, min(c) OVER (",
          "324:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "325:   ) FROM t1;",
          "326: } {{} 45 {} 45  7 {} 7 {} 8 {} 8 {}  abc 1001 abc 1001 xyz 3333}",
          "328: do_execsql_test 7.3 {",
          "329:   SELECT a, max(c) OVER (",
          "330:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 2 PRECEDING",
          "331:   ) FROM t1;",
          "332: } {{} 46 {} 46  7 {} 7 {} 8 {} 8 {}  abc 1004 abc 1004 xyz 3333}",
          "333: do_execsql_test 7.4 {",
          "334:   SELECT a, min(c) OVER (",
          "335:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 2 PRECEDING",
          "336:   ) FROM t1;",
          "337: } {{} 45 {} 45  7 {} 7 {} 8 {} 8 {}  abc 1001 abc 1001 xyz 3333}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71f059c88067736471c631cba95211c1bd100392",
      "candidate_info": {
        "commit_hash": "71f059c88067736471c631cba95211c1bd100392",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/71f059c88067736471c631cba95211c1bd100392",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem in ALTER TABLE triggered by views or triggers that include the construction \"ORDER BY true\" or \"ORDER BY false\".\n\nFossilOrigin-Name: 8168021f9ab5fb8b4888257963c9ec68fd1dfeedaf6bba4b8e07438001d0be0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 559c2dd6724b2fc238760863d4be7132b591457e72ca5758fdd4002fbf7df4bc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:   ExprList *pEList;",
          "1279:   struct ExprList_item *pItem;",
          "1282:   if( pOrderBy->nExpr>db->aLimit[SQLITE_LIMIT_COLUMN] ){",
          "1283:     sqlite3ErrorMsg(pParse, \"too many terms in %s BY clause\", zType);",
          "1284:     return 1;",
          "",
          "[Removed Lines]",
          "1281:   if( pOrderBy==0 || pParse->db->mallocFailed ) return 0;",
          "",
          "[Added Lines]",
          "1281:   if( pOrderBy==0 || pParse->db->mallocFailed || IN_RENAME_OBJECT ) return 0;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:   ALTER TABLE t1 RENAME TO t1x;",
          "346: } {1 {error in trigger AFTER: no such column: a}}",
          "348: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: #-------------------------------------------------------------------------",
          "349: reset_db",
          "351: do_execsql_test 16.1 {",
          "352:   CREATE TABLE t1(x);",
          "353:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "354:     SELECT (WITH t2 AS (WITH t3 AS (SELECT true)",
          "355:           SELECT * FROM t3 ORDER BY true COLLATE nocase)",
          "356:         SELECT 11);",
          "358:     WITH t4 AS (SELECT * FROM t1) SELECT 33;",
          "359:   END;",
          "360: }",
          "362: do_execsql_test 16.2 {",
          "363:   ALTER TABLE t1 RENAME TO t1x;",
          "364: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76baf799a284623a4c73c518b7814bf0c92fb60c",
      "candidate_info": {
        "commit_hash": "76baf799a284623a4c73c518b7814bf0c92fb60c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76baf799a284623a4c73c518b7814bf0c92fb60c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "ALWAYS macro added for coverage.\n\nFossilOrigin-Name: a1e1ba9145049491c593ac70d9e05149662d34770129c270d702f284cd19a481",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6d1bbba9a004a2491c76b4a7d09edb9b738102c46fdcb3e0f7b22bffa719518e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1076:   if( A ){",
          "1077:     A->x.pList = pList;",
          "1079:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1080:     }",
          "1081:   }else{",
          "",
          "[Removed Lines]",
          "1078:     if( pList->nExpr ){",
          "",
          "[Added Lines]",
          "1078:     if( ALWAYS(pList->nExpr) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0e16a22614ae2fb63487cff12f71551baedc005",
      "candidate_info": {
        "commit_hash": "a0e16a22614ae2fb63487cff12f71551baedc005",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0e16a22614ae2fb63487cff12f71551baedc005",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Improved detection of attempts to use a generated column as part of the primary key.  Ticket [91e86951016a6802]\n\nFossilOrigin-Name: 6d1bbba9a004a2491c76b4a7d09edb9b738102c46fdcb3e0f7b22bffa719518e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5b4c0f2ddc6f324e23bbde0ee3d1ab672cfe8ab5044c9b693f4c33cdd75c211e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1649:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1650:   assert( TF_HasStored==COLFLAG_STORED );",
          "1651:   pTab->tabFlags |= eType;",
          "1652:   pCol->pDflt = pExpr;",
          "1653:   pExpr = 0;",
          "1654:   goto generated_done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1652:   if( pCol->colFlags & COLFLAG_PRIMKEY ){",
          "1654:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}