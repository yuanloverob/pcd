{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc6084b9ac5cf1d4fe5e7165b71e8fc05d11be1f",
      "candidate_info": {
        "commit_hash": "cc6084b9ac5cf1d4fe5e7165b71e8fc05d11be1f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/cc6084b9ac5cf1d4fe5e7165b71e8fc05d11be1f",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.07.09, Version 0.8.2 (Stable)\n\n* npm: Upgrade to 1.1.36\n\n* readline: don't use Function#call() (Nathan Rajlich)\n\n* Code cleanup to pass 'use strict' (Jonas Westerlund)\n\n* module: add filename to require() json errors (TJ Holowaychuk)\n\n* readline: fix for unicode prompts (Tim Macfarlane)\n\n* timers: fix handling of large timeouts (Ben Noordhuis)\n\n* repl: fix passing an empty line inserting \"undefined\" into the buffer (Nathan Rajlich)\n\n* repl: fix crashes when buffering command (Maciej Ma\u0142ecki)\n\n* build: rename strict_aliasing to node_no_strict_aliasing (Ben Noordhuis)\n\n* build: disable -fstrict-aliasing for any gcc < 4.6.0 (Ben Noordhuis)\n\n* build: detect cc version with -dumpversion (Ben Noordhuis)\n\n* build: handle output of localized gcc or clang (Ben Noordhuis)\n\n* unix: fix memory corruption in freebsd.c (Ben Noordhuis)\n\n* unix: fix 'zero handles, one request' busy loop (Ben Noordhuis)\n\n* unix: fix busy loop on unexpected tcp message (Ben Noordhuis)\n\n* unix: fix EINPROGRESS busy loop (Ben Noordhuis)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "27: #define NODE_PATCH_VERSION 2",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ab95a536abf62f9d5177613a8f4201cfc0c5b2b",
      "candidate_info": {
        "commit_hash": "1ab95a536abf62f9d5177613a8f4201cfc0c5b2b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1ab95a536abf62f9d5177613a8f4201cfc0c5b2b",
        "files": [
          "lib/dgram.js",
          "src/udp_wrap.cc"
        ],
        "message": "udp_wrap: use new slab allocator",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "343: };",
          "347:   var self = handle.socket;",
          "356: }",
          "",
          "[Removed Lines]",
          "346: function onMessage(handle, nread, buf, rinfo) {",
          "349:   if (nread == -1) {",
          "350:     self.emit('error', errnoException(errno, 'recvmsg'));",
          "351:   }",
          "352:   else {",
          "353:     rinfo.size = buf.length; // compatibility",
          "354:     self.emit('message', buf, rinfo);",
          "355:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "23: #include \"node_buffer.h\"",
          "25: #include \"req_wrap.h\"",
          "26: #include \"handle_wrap.h\"",
          "28: #include <stdlib.h>",
          "32: #if defined(__MINGW32__) || defined(_MSC_VER)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"slab_allocator.h\"",
          "30: #define SLAB_SIZE (1024 * 1024)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     return scope.Close(Integer::New(-1));                                   \\",
          "60:   }",
          "67: void AddressToJS(Handle<Object> info,",
          "68:                  const sockaddr* addr,",
          "69:                  int addrlen);",
          "74: class UDPWrap: public HandleWrap {",
          "",
          "[Removed Lines]",
          "63: Persistent<String> address_symbol;",
          "64: Persistent<String> port_symbol;",
          "65: Persistent<String> buffer_sym;",
          "71: typedef ReqWrap<uv_udp_send_t> SendWrap;",
          "",
          "[Added Lines]",
          "64: typedef ReqWrap<uv_udp_send_t> SendWrap;",
          "71: static Persistent<String> address_symbol;",
          "72: static Persistent<String> port_symbol;",
          "73: static Persistent<String> buffer_sym;",
          "74: static SlabAllocator slab_allocator(SLAB_SIZE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404: uv_buf_t UDPWrap::OnAlloc(uv_handle_t* handle, size_t suggested_size) {",
          "406: }",
          "",
          "[Removed Lines]",
          "405:   return uv_buf_init(new char[suggested_size], suggested_size);",
          "",
          "[Added Lines]",
          "408:   UDPWrap* wrap = static_cast<UDPWrap*>(handle->data);",
          "409:   char* buf = slab_allocator.Allocate(wrap->object_, suggested_size);",
          "410:   return uv_buf_init(buf, suggested_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "413:                      unsigned flags) {",
          "414:   HandleScope scope;",
          "418:     return;",
          "419:   }",
          "424:     Local<Object>::New(wrap->object_),",
          "428:   };",
          "442:   MakeCallback(wrap->object_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "443: }",
          "",
          "[Removed Lines]",
          "416:   if (nread == 0) {",
          "417:     free(buf.base);",
          "421:   UDPWrap* wrap = reinterpret_cast<UDPWrap*>(handle->data);",
          "423:   Local<Value> argv[4] = {",
          "425:     Integer::New(nread),",
          "426:     Local<Value>::New(Null()),",
          "427:     Local<Value>::New(Null())",
          "430:   if (nread == -1) {",
          "431:     SetErrno(uv_last_error(uv_default_loop()));",
          "432:   }",
          "433:   else {",
          "434:     Local<Object> rinfo = Object::New();",
          "435:     AddressToJS(rinfo, addr, sizeof *addr);",
          "436:     argv[2] = Local<Object>::New(",
          "437:         Buffer::New(buf.base, nread, NULL, NULL)->handle_);",
          "438:     argv[3] = rinfo;",
          "439:   }",
          "440:   free(buf.base);",
          "",
          "[Added Lines]",
          "421:   UDPWrap* wrap = reinterpret_cast<UDPWrap*>(handle->data);",
          "422:   Local<Object> slab = slab_allocator.Shrink(wrap->object_,",
          "423:                                              buf.base,",
          "424:                                              nread < 0 ? 0 : nread);",
          "425:   if (nread == 0) return;",
          "427:   if (nread < 0) {",
          "428:     Local<Value> argv[] = { Local<Object>::New(wrap->object_) };",
          "429:     SetErrno(uv_last_error(uv_default_loop()));",
          "430:     MakeCallback(wrap->object_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "434:   Local<Object> rinfo = Object::New();",
          "435:   AddressToJS(rinfo, addr, sizeof(*addr));",
          "437:   Local<Value> argv[] = {",
          "439:     slab,",
          "440:     Integer::NewFromUnsigned(buf.base - Buffer::Data(slab)),",
          "441:     Integer::NewFromUnsigned(nread),",
          "442:     rinfo",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d5a6b2d9d5070606065eb9e0a7af1e4d7831777",
      "candidate_info": {
        "commit_hash": "0d5a6b2d9d5070606065eb9e0a7af1e4d7831777",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0d5a6b2d9d5070606065eb9e0a7af1e4d7831777",
        "files": [
          "deps/uv/test/test-list.h"
        ],
        "message": "uv: upgrade to f5c2a4a",
        "before_after_code_files": [
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h"
        ]
      }
    },
    {
      "candidate_hash": "3219616f43d4512932f85106f02fe697fdc57051",
      "candidate_info": {
        "commit_hash": "3219616f43d4512932f85106f02fe697fdc57051",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3219616f43d4512932f85106f02fe697fdc57051",
        "files": [
          "doc/api/util.markdown",
          "lib/util.js"
        ],
        "message": "util: mark util.pump() as deprecated",
        "before_after_code_files": [
          "lib/util.js||liutil.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/util.js||liutil.js": [
          "File: lib/util.js -> liutil.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "482: }, 'util.exec is now called `child_process.exec`.');",
          "486:   var callbackCalled = false;",
          "488:   function call(a, b, c) {",
          "",
          "[Removed Lines]",
          "485: exports.pump = function(readStream, writeStream, callback) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     readStream.destroy();",
          "518:     call(err);",
          "519:   });",
          "",
          "[Removed Lines]",
          "520: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "edea94c332f07ed81ea7de9b93bbcec806c81544",
      "candidate_info": {
        "commit_hash": "edea94c332f07ed81ea7de9b93bbcec806c81544",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/edea94c332f07ed81ea7de9b93bbcec806c81544",
        "files": [
          "src/v8constants.h",
          "src/v8ustack.d"
        ],
        "message": "dtrace ustack helper improvements\n\nFixes #2852",
        "before_after_code_files": [
          "src/v8constants.h||src/v8constants.h",
          "src/v8ustack.d||src/v8ustack.d"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/v8constants.h||src/v8constants.h": [
          "File: src/v8constants.h -> src/v8constants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #define V8_IT_FIXEDARRAY 0x9f",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #define V8_IT_CODE  0x81",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: #define V8_SmiTag  0x0",
          "66: #define V8_SmiValueShift V8_SmiTagMask",
          "68: #define V8_IsNotStringMask 0x80",
          "69: #define V8_StringTag  0x0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #define V8_HeapObjectTagMask 0x3",
          "70: #define V8_HeapObjectTag 0x1",
          "",
          "---------------"
        ],
        "src/v8ustack.d||src/v8ustack.d": [
          "File: src/v8ustack.d -> src/v8ustack.d",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #define IS_SMI(value)   ((value & V8_SmiTagMask) == V8_SmiTag)",
          "",
          "[Removed Lines]",
          "20: #define SMI_VALUE(value)  ((int32_t)(value) >> V8_SmiValueShift)",
          "",
          "[Added Lines]",
          "20: #define SMI_VALUE(value)  ((uint32_t)(value) >> V8_SmiValueShift)",
          "28: #define V8_MAP_PTR(ptr)  \\",
          "29:     ((ptr & ~V8_HeapObjectTagMask) | V8_HeapObjectTag)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: #define LOAD_STRFIELDS(str, len, attrs)     \\",
          "90:     len = SMI_VALUE(COPYIN_UINT32(str + V8_OFF_STR_LENGTH));  \\",
          "92:     attrs = COPYIN_UINT8(this->map + V8_OFF_MAP_ATTRS);",
          "",
          "[Removed Lines]",
          "91:     this->map = COPYIN_UINT32(str + V8_OFF_HEAPOBJ_MAP);  \\",
          "",
          "[Added Lines]",
          "100:     this->map = V8_MAP_PTR(COPYIN_UINT32(str + V8_OFF_HEAPOBJ_MAP)); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:  this->func = 0;",
          "262:  this->shared = 0;",
          "263:  this->map = 0;",
          "264:  this->funcnamestr = 0;",
          "265:  this->funcnamelen = 0;",
          "266:  this->funcnameattrs = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:  this->attrs = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "435:  stringof(this->buf);",
          "436: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: dtrace:helper:ustack:",
          "454: /!this->done/",
          "455: {",
          "456:  this->func = COPYIN_UINT32(this->fp + V8_OFF_FP_FUNC);",
          "457:  this->map = V8_MAP_PTR(COPYIN_UINT32(this->func + V8_OFF_HEAPOBJ_MAP));",
          "458:  this->attrs = COPYIN_UINT8(this->map + V8_OFF_MAP_ATTRS);",
          "459: }",
          "461: dtrace:helper:ustack:",
          "462: /!this->done && this->attrs == V8_IT_CODE/",
          "463: {",
          "464:  this->done = 1;",
          "465:  APPEND_CHR('<');",
          "466:  APPEND_CHR('<');",
          "467:  APPEND_CHR(' ');",
          "468:  APPEND_CHR('i');",
          "469:  APPEND_CHR('n');",
          "470:  APPEND_CHR('t');",
          "471:  APPEND_CHR('e');",
          "472:  APPEND_CHR('r');",
          "473:  APPEND_CHR('n');",
          "474:  APPEND_CHR('a');",
          "475:  APPEND_CHR('l');",
          "476:  APPEND_CHR(' ');",
          "477:  APPEND_CHR('c');",
          "478:  APPEND_CHR('o');",
          "479:  APPEND_CHR('d');",
          "480:  APPEND_CHR('e');",
          "481:  APPEND_CHR(' ');",
          "482:  APPEND_CHR('>');",
          "483:  APPEND_CHR('>');",
          "484:  APPEND_CHR('\\0');",
          "485:  stringof(this->buf);",
          "486: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "443: dtrace:helper:ustack:",
          "444: /!this->done/",
          "445: {",
          "447:  this->shared = COPYIN_UINT32(this->func + V8_OFF_FUNC_SHARED);",
          "448:  this->funcnamestr = COPYIN_UINT32(this->shared + V8_OFF_SHARED_NAME);",
          "449:  LOAD_STRFIELDS(this->funcnamestr, this->funcnamelen,",
          "",
          "[Removed Lines]",
          "446:  this->func = COPYIN_UINT32(this->fp + V8_OFF_FP_FUNC);",
          "",
          "[Added Lines]",
          "496:  this->map = 0;",
          "497:  this->attrs = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "515: {",
          "516:  this->position = COPYIN_UINT32(this->shared + V8_OFF_SHARED_FUNTOK);",
          "517:  this->line_ends = COPYIN_UINT32(this->script + V8_OFF_SCRIPT_LENDS);",
          "519:  this->le_attrs = COPYIN_UINT8(this->map + V8_OFF_MAP_ATTRS);",
          "520: }",
          "",
          "[Removed Lines]",
          "518:  this->map = COPYIN_UINT32(this->line_ends + V8_OFF_HEAPOBJ_MAP);",
          "",
          "[Added Lines]",
          "570:  this->map = V8_MAP_PTR(COPYIN_UINT32(this->line_ends +",
          "571:      V8_OFF_HEAPOBJ_MAP));",
          "",
          "---------------"
        ]
      }
    }
  ]
}