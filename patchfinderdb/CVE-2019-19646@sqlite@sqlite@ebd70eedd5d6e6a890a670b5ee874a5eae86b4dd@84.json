{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
      "candidate_info": {
        "commit_hash": "992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vacuum-into.test"
        ],
        "message": "Add test cases for commit [6c6fb1c6].\n\nFossilOrigin-Name: 3961995cb56b43f1753c53fc869edf336f1c17ec994d67dc74e44e8e02493894",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c6fb1c6ea452c70b56fd4ac796affebee21512adba0455ae81c291b715f544f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_catchsql_test vacuum-into-320 {",
          "69:   VACUUM INTO x;",
          "70: } {1 {no such column: x}}",
          "72: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: } {1 {no such column: nosuchcol}}",
          "72: do_catchsql_test vacuum-into-330 {",
          "73:   VACUUM INTO t1.nosuchcol;",
          "74: } {1 {no such column: t1.nosuchcol}}",
          "76: forcedelete test.db2",
          "77: db func target target",
          "78: proc target {} { return \"test.db2\" }",
          "79: do_test vacuum-into-410 {",
          "80:   execsql { VACUUM INTO target() }",
          "81:   file exists test.db2",
          "82: } 1",
          "83: do_catchsql_test vacuum-into-420 {",
          "84:   VACUUM INTO target2()",
          "85: } {1 {no such function: target2}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3374648545262810849a3b17fdb4435bbb255a07",
      "candidate_info": {
        "commit_hash": "3374648545262810849a3b17fdb4435bbb255a07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3374648545262810849a3b17fdb4435bbb255a07",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "tool/dbtotxt.c",
          "tool/dbtotxt.md"
        ],
        "message": "Add the \"dbtotxt\" utility program and the ability to read \"dbtotxt\" output as a deserialized input database in the CLI, using the --hexdb option to the \".open\" command.\n\nFossilOrigin-Name: e3bf1d3ea5f748c5142c2403813fdace5aedc1fc68f0dcd5eae40a2fe763fedb",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292:  $(LTLINK) -DDBDUMP_STANDALONE -o $@ \\",
          "1293:            $(TOP)/ext/misc/dbdump.c sqlite3.lo $(TLIBS)",
          "1295: showdb$(TEXE): $(TOP)/tool/showdb.c sqlite3.lo",
          "1296:  $(LTLINK) -o $@ $(TOP)/tool/showdb.c sqlite3.lo $(TLIBS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295: dbtotxt$(TEXE): $(TOP)/tool/dbtotxt.c",
          "1296:  $(LTLINK)-o $@ $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2425: testloadext.dll: testloadext.lo",
          "2426:  $(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /OUT:$@ testloadext.lo",
          "2428: showdb.exe: $(TOP)\\tool\\showdb.c $(SQLITE3C) $(SQLITE3H)",
          "2429:  $(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "2430:   $(TOP)\\tool\\showdb.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2428: dbtotxt.exe: $(TOP)\\tool\\dbtotxt.c",
          "2429:  $(LTLINK) $(NO_WARN) $(TOP)\\tool\\dbtotxt.c /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "976: extensiontest: testfixture$(EXE) $(TEST_EXTENSION)",
          "977:  ./testfixture$(EXE) $(TOP)/test/loadext.test",
          "979: showdb$(EXE): $(TOP)/tool/showdb.c sqlite3.o",
          "980:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION -o showdb$(EXE) \\",
          "981:   $(TOP)/tool/showdb.c sqlite3.o $(THREADLIB)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979: dbtotxt$(EXE): $(TOP)/tool/dbtotxt.c",
          "980:  $(TCC) -o dbtotxt$(EXE) $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eac9c0c49650b008951318a2225b932709a0a8dffbb01ed57684c40357b2e25c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3444:   \"        --append        Use appendvfs to append database to the end of FILE\",",
          "3445: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3446:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3447: #endif",
          "3448:   \"        --new           Initialize FILE to an empty database\",",
          "3449:   \"        --readonly      Open FILE readonly\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3448:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3723:   return rc;",
          "3724: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3728: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3734: static unsigned char *readHexDb(ShellState *p, int *pnData){",
          "3735:   unsigned char *a = 0;",
          "3736:   int nLine = 1;",
          "3737:   int n = 0;",
          "3738:   int pgsz = 0;",
          "3739:   int iOffset = 0;",
          "3740:   int j, k;",
          "3741:   int rc;",
          "3742:   FILE *in;",
          "3743:   unsigned char x[16];",
          "3744:   char zLine[100];",
          "3745:   if( p->zDbFilename ){",
          "3746:     in = fopen(p->zDbFilename, \"r\");",
          "3747:     if( in==0 ){",
          "3748:       utf8_printf(stderr, \"cannot open \\\"%s\\\" for reading\\n\", p->zDbFilename);",
          "3749:       return 0;",
          "3750:     }",
          "3751:   }else{",
          "3752:     in = stdin;",
          "3753:   }",
          "3755:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3756:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3757:   if( rc!=2 ) goto readHexDb_error;",
          "3758:   if( n<=0 ) goto readHexDb_error;",
          "3759:   a = sqlite3_malloc( n );",
          "3760:   if( a==0 ){",
          "3761:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "3762:     goto readHexDb_error;",
          "3763:   }",
          "3764:   memset(a, 0, n);",
          "3765:   if( pgsz<512 || pgsz>65536 || (pgsz & (pgsz-1))!=0 ){",
          "3766:     utf8_printf(stderr, \"invalid pagesize\\n\");",
          "3767:     goto readHexDb_error;",
          "3768:   }",
          "3769:   for(nLine=2; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "3770:     rc = sscanf(zLine, \"| page %d offset %d\", &j, &k);",
          "3771:     if( rc==2 ){",
          "3772:       iOffset = k;",
          "3773:       continue;",
          "3774:     }",
          "3775:     if( strncmp(zLine, \"| end \", 6)==0 ){",
          "3776:       break;",
          "3777:     }",
          "3778:     rc = sscanf(zLine,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "3779:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "3780:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "3781:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "3782:     if( rc==17 ){",
          "3783:       k = iOffset+j;",
          "3784:       if( k+16>n ){",
          "3785:         utf8_printf(stderr, \"continue exceeds file size\\n\");",
          "3786:         goto readHexDb_error;",
          "3787:       }",
          "3788:       memcpy(a+k, x, 16);",
          "3789:     }",
          "3790:   }",
          "3792:   if( in!=stdin ) fclose(in);",
          "3793:   return a;",
          "3795: readHexDb_error:",
          "3796:   if( in!=stdin ){",
          "3797:     fclose(in);",
          "3798:   }else{",
          "3799:     while( fgets(zLine, sizeof(zLine), in)!=0 ){",
          "3800:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3801:     }",
          "3802:   }",
          "3803:   sqlite3_free(a);",
          "3804:   utf8_printf(stderr,\"Error on line %d of --hexdb input\\n\", nLine);",
          "3805:   return 0;",
          "3806: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3756:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "3757:         break;",
          "3758:       }",
          "3759:       case SHELL_OPEN_DESERIALIZE: {",
          "3760:         sqlite3_open(0, &p->db);",
          "3761:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3842:       case SHELL_OPEN_HEXDB:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3810:       sqlite3_free(zSql);",
          "3811:     }",
          "3812: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3814:       int nData = 0;",
          "3816:       int rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "3817:                    SQLITE_DESERIALIZE_RESIZEABLE |",
          "3818:                    SQLITE_DESERIALIZE_FREEONCLOSE);",
          "",
          "[Removed Lines]",
          "3813:     else if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3815:       unsigned char *aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "",
          "[Added Lines]",
          "3897:     else",
          "3898:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){",
          "3900:       unsigned char *aData;",
          "3901:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3902:         aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "3903:       }else{",
          "3904:         aData = readHexDb(p, &nData);",
          "3905:         if( aData==0 ){",
          "3906:           utf8_printf(stderr, \"Error in hexdb input\\n\");",
          "3907:           return;",
          "3908:         }",
          "3909:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6749: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "6750:       }else if( optionMatch(z, \"deserialize\") ){",
          "6751:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "6753:       }else if( z[0]=='-' ){",
          "6754:         utf8_printf(stderr, \"unknown option: %s\\n\", z);",
          "6755:         rc = 1;",
          "",
          "[Removed Lines]",
          "6752: #endif",
          "",
          "[Added Lines]",
          "6846:       }else if( optionMatch(z, \"hexdb\") ){",
          "6847:         p->openMode = SHELL_OPEN_HEXDB;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6758:     }",
          "6760:     zNewFilename = nArg>iName ? sqlite3_mprintf(\"%s\", azArg[iName]) : 0;",
          "6762:       if( newFlag ) shellDeleteFile(zNewFilename);",
          "6763:       p->zDbFilename = zNewFilename;",
          "6764:       open_db(p, OPEN_DB_KEEPALIVE);",
          "",
          "[Removed Lines]",
          "6761:     if( zNewFilename ){",
          "",
          "[Added Lines]",
          "6857:     if( zNewFilename || p->openMode==SHELL_OPEN_HEXDB ){",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <stdio.h>",
          "28: #include <string.h>",
          "29: #include <stdlib.h>",
          "32: static int allZero(unsigned char *aLine){",
          "33:   int i;",
          "34:   for(i=0; i<16 && aLine[i]==0; i++){}",
          "35:   return i==16;",
          "36: }",
          "38: int main(int argc, char **argv){",
          "50:   for(i=1; i<argc; i++){",
          "51:     if( argv[i][0]=='-' ){",
          "52:       const char *z = argv[i];",
          "53:       z++;",
          "54:       if( z[0]=='-' ) z++;",
          "55:       if( strcmp(z,\"pagesize\")==0 ){",
          "56:         i++;",
          "57:         pgsz = atoi(argv[i]);",
          "58:         if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "59:           fprintf(stderr, \"Page size must be a power of two between\"",
          "60:                           \" 512 and 65536.\\n\");",
          "61:           nErr++;",
          "62:         }",
          "63:         continue;",
          "64:       }",
          "65:       fprintf(stderr, \"Unknown option: %s\\n\", argv[i]);",
          "66:       nErr++;",
          "67:     }else if( zInputFile ){",
          "68:       fprintf(stderr, \"Already using a different input file: [%s]\\n\", argv[i]);",
          "69:       nErr++;",
          "70:     }else{",
          "71:       zInputFile = argv[i];",
          "72:     }",
          "73:   }",
          "74:   if( zInputFile==0 ){",
          "75:     fprintf(stderr, \"No input file specified.\\n\");",
          "76:     nErr++;",
          "77:   }",
          "78:   if( nErr ){",
          "79:     fprintf(stderr, \"Usage: %s [--pagesize N] FILENAME\\n\", argv[0]);",
          "80:     exit(1);",
          "81:   }",
          "82:   in = fopen(zInputFile, \"rb\");",
          "83:   if( in==0 ){",
          "84:     fprintf(stderr, \"Cannot open input file [%s]\\n\", zInputFile);",
          "85:     exit(1);",
          "86:   }",
          "87:   fseek(in, 0, SEEK_END);",
          "88:   szFile = ftell(in);",
          "89:   rewind(in);",
          "90:   if( szFile<512 ){",
          "91:     fprintf(stderr, \"File too short. Minimum size is 512 bytes.\\n\");",
          "92:     exit(1);",
          "93:   }",
          "94:   if( fread(aHdr, 100, 1, in)!=1 ){",
          "95:     fprintf(stderr, \"Cannot read file header\\n\");",
          "96:     exit(1);",
          "97:   }",
          "98:   rewind(in);",
          "99:   if( pgsz==0 ){",
          "100:     pgsz = (aHdr[16]<<8) | aHdr[17];",
          "101:     if( pgsz==1 ) pgsz = 65536;",
          "102:     if( pgsz<512 || (pgsz&(pgsz-1))!=0 ){",
          "103:       fprintf(stderr, \"Invalid page size in header: %d\\n\", pgsz);",
          "104:       exit(1);",
          "105:     }",
          "106:   }",
          "107:   zBaseName = zInputFile;",
          "108:   for(i=0; zInputFile[i]; i++){",
          "109:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "110:   }",
          "111:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "112:   for(i=0; i<szFile; i+=16){",
          "113:     int got = (int)fread(aLine, 1, 16, in);",
          "114:     if( got!=16 ){",
          "115:       static int once = 1;",
          "116:       if( once ){",
          "117:         fprintf(stderr, \"Could not read input file starting at byte %d\\n\",",
          "118:                          i+got);",
          "119:       }",
          "120:       memset(aLine+got, 0, 16-got);",
          "121:     }",
          "122:     if( allZero(aLine) ) continue;",
          "123:     iPage = i/pgsz + 1;",
          "124:     if( lastPage!=iPage ){",
          "125:       printf(\"| page %d offset %d\\n\", iPage, (iPage-1)*pgsz);",
          "126:       lastPage = iPage;",
          "127:     }",
          "128:     printf(\"|  %5d:\", i-(iPage-1)*pgsz);",
          "129:     for(j=0; j<16; j++) printf(\" %02x\", aLine[j]);",
          "130:     printf(\"   \");",
          "131:     for(j=0; j<16; j++){",
          "132:       char c = aLine[j];",
          "133:       fputc(c>=0x20 && c<=0x7e ? c : '.', stdout);",
          "134:     }",
          "135:     fputc('\\n', stdout);",
          "136:   }",
          "137:   fclose(in);",
          "138:   printf(\"| end %s\\n\", zBaseName);",
          "139:   return 0;",
          "140: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab45fc041389b937cf82c20bec231905105f829d",
      "candidate_info": {
        "commit_hash": "ab45fc041389b937cf82c20bec231905105f829d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab45fc041389b937cf82c20bec231905105f829d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "INSERT with named columns for a table with generated columns.\n\nFossilOrigin-Name: 64db39f92d68d1b9f23e48af35e16b969c38b58041fbe900066eeb3ddb291cef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 120c6b78cb51532f783014605f1107d40b2e4f54e3852fb1f8f167d0c0b78c69",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3382: ){",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "3384:   assert( v!=0 );",
          "3385:   if( pTab==0 ){",
          "3386:     sqlite3VdbeAddOp3(v, OP_Column, iTabCur, iCol, regOut);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3384:   Column *pCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3395:       op = OP_VColumn;",
          "3396:       x = iCol;",
          "3397: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3403:       return;",
          "3404: #endif",
          "3405:     }else if( !HasRowid(pTab) ){",
          "",
          "[Removed Lines]",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "",
          "[Added Lines]",
          "3399:     }else if( (pCol = &pTab->aCol[iCol])->colFlags & COLFLAG_VIRTUAL ){",
          "3400:       if( pCol->colFlags & COLFLAG_BUSY ){",
          "3401:         sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\", pCol->zName);",
          "3402:       }else{",
          "3403:         int savedSelfTab = pParse->iSelfTab;",
          "3404:         pCol->colFlags |= COLFLAG_BUSY;",
          "3405:         pParse->iSelfTab = iTabCur+1;",
          "3406:         sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "3407:         pParse->iSelfTab = savedSelfTab;",
          "3408:         pCol->colFlags &= ~COLFLAG_BUSY;",
          "3409:       }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){",
          "134:   char *zColAff = pTab->zColAff;",
          "135:   if( zColAff==0 ){",
          "136:     sqlite3 *db = sqlite3VdbeDb(v);",
          "",
          "[Removed Lines]",
          "133:   int i;",
          "",
          "[Added Lines]",
          "133:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:       return;",
          "141:     }",
          "144:       assert( pTab->aCol[i].affinity!=0 );",
          "146:     }",
          "147:     do{",
          "150:     pTab->zColAff = zColAff;",
          "151:   }",
          "152:   assert( zColAff!=0 );",
          "",
          "[Removed Lines]",
          "143:     for(i=0; i<pTab->nCol; i++){",
          "145:       zColAff[i] = pTab->aCol[i].affinity;",
          "148:       zColAff[i--] = 0;",
          "149:     }while( i>=0 && zColAff[i]<=SQLITE_AFF_BLOB );",
          "",
          "[Added Lines]",
          "143:     for(i=j=0; i<pTab->nCol; i++){",
          "145:       if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ){",
          "146:         zColAff[j++] = pTab->aCol[i].affinity;",
          "147:       }",
          "150:       zColAff[j--] = 0;",
          "151:     }while( j>=0 && zColAff[j]<=SQLITE_AFF_BLOB );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1006:     nHidden = 0;",
          "1007:     iRegStore = regRowid+1;",
          "1008:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1009:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:       int k;",
          "1012:       assert( i>=nHidden );",
          "1013:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1015:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1016:         continue;",
          "1017:       }",
          "1026:         }else{",
          "1032:         }",
          "1033:       }",
          "1035:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1038:       }else if( pSelect ){",
          "1039:         if( regFromSelect!=regData ){",
          "1041:         }",
          "1042:       }else{",
          "1044:       }",
          "1045:     }",
          "",
          "[Removed Lines]",
          "1018:       if( pColumn==0 ){",
          "1019:         if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1020:           j = -1;",
          "1021:           nHidden++;",
          "1022:           if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1023:             iRegStore--;",
          "1024:             continue;",
          "1025:           }",
          "1027:           j = i - nHidden;",
          "1028:         }",
          "1029:       }else{",
          "1030:         for(j=0; j<pColumn->nId; j++){",
          "1031:           if( pColumn->a[j].idx==i ) break;",
          "1034:       if( j<0 || nColumn==0 || (pColumn && j>=pColumn->nId) ){",
          "1036:       }else if( useTempTable ){",
          "1037:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, j, iRegStore);",
          "1040:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+j, iRegStore);",
          "1043:         sqlite3ExprCode(pParse, pList->a[j].pExpr, iRegStore);",
          "",
          "[Added Lines]",
          "1023:       if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1024:         nHidden++;",
          "1025:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1027:           iRegStore--;",
          "1030:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1032:         continue;",
          "1034:       if( pColumn ){",
          "1035:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1036:         if( j>=pColumn->nId ){",
          "1039:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1040:           continue;",
          "1041:         }",
          "1042:         k = j;",
          "1043:       }else if( nColumn==0 ){",
          "1045:         continue;",
          "1046:       }else{",
          "1047:         k = i - nHidden;",
          "1048:       }",
          "1050:       if( useTempTable ){",
          "1051:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1054:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1057:         sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "76baf799a284623a4c73c518b7814bf0c92fb60c",
      "candidate_info": {
        "commit_hash": "76baf799a284623a4c73c518b7814bf0c92fb60c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76baf799a284623a4c73c518b7814bf0c92fb60c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "ALWAYS macro added for coverage.\n\nFossilOrigin-Name: a1e1ba9145049491c593ac70d9e05149662d34770129c270d702f284cd19a481",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6d1bbba9a004a2491c76b4a7d09edb9b738102c46fdcb3e0f7b22bffa719518e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1076:   if( A ){",
          "1077:     A->x.pList = pList;",
          "1079:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1080:     }",
          "1081:   }else{",
          "",
          "[Removed Lines]",
          "1078:     if( pList->nExpr ){",
          "",
          "[Added Lines]",
          "1078:     if( ALWAYS(pList->nExpr) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
      "candidate_info": {
        "commit_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Slightly faster keyword hash table.\n\nFossilOrigin-Name: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: static Keyword aKeywordTable[] = {",
          "306: };",
          "",
          "[Removed Lines]",
          "161:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER       },",
          "162:   { \"ACTION\",           \"TK_ACTION\",       FKEY                   },",
          "163:   { \"ADD\",              \"TK_ADD\",          ALTER                  },",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "168:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "169:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "170:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "171:   { \"ASC\",              \"TK_ASC\",          ALWAYS                 },",
          "172:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH                 },",
          "173:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR               },",
          "174:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER                },",
          "175:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS                 },",
          "176:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS                 },",
          "177:   { \"BY\",               \"TK_BY\",           ALWAYS                 },",
          "178:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY                   },",
          "179:   { \"CASE\",             \"TK_CASE\",         ALWAYS                 },",
          "180:   { \"CAST\",             \"TK_CAST\",         CAST                   },",
          "181:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS                 },",
          "182:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS                 },",
          "183:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER                  },",
          "184:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS                 },",
          "185:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT               },",
          "186:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS                 },",
          "187:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS                 },",
          "188:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "189:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC             },",
          "190:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "191:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "192:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS                 },",
          "193:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH                 },",
          "194:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS                 },",
          "195:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS                 },",
          "196:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY                   },",
          "197:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS                 },",
          "198:   { \"DESC\",             \"TK_DESC\",         ALWAYS                 },",
          "199:   { \"DETACH\",           \"TK_DETACH\",       ATTACH                 },",
          "200:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS                 },",
          "201:   { \"DO\",               \"TK_DO\",           UPSERT                 },",
          "202:   { \"DROP\",             \"TK_DROP\",         ALWAYS                 },",
          "203:   { \"END\",              \"TK_END\",          ALWAYS                 },",
          "204:   { \"EACH\",             \"TK_EACH\",         TRIGGER                },",
          "205:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS                 },",
          "206:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS                 },",
          "207:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND               },",
          "208:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS                 },",
          "209:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC             },",
          "210:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS                 },",
          "211:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "212:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "213:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "214:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "215:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "216:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "217:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "218:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "219:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "221:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "222:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "223:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "224:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS                 },",
          "225:   { \"IF\",               \"TK_IF\",           ALWAYS                 },",
          "226:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER       },",
          "227:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS                 },",
          "228:   { \"IN\",               \"TK_IN\",           ALWAYS                 },",
          "229:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS                 },",
          "230:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS                 },",
          "231:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY                   },",
          "232:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "233:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS                 },",
          "234:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER                },",
          "235:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND               },",
          "236:   { \"INTO\",             \"TK_INTO\",         ALWAYS                 },",
          "237:   { \"IS\",               \"TK_IS\",           ALWAYS                 },",
          "238:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "239:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "240:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "241:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "242:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "243:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "244:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "245:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS                 },",
          "246:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS                 },",
          "247:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC        },",
          "248:   { \"NOT\",              \"TK_NOT\",          ALWAYS                 },",
          "249:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "250:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "251:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "252:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "253:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "254:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "255:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "256:   { \"OR\",               \"TK_OR\",           ALWAYS                 },",
          "257:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS                 },",
          "258:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC             },",
          "259:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "260:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC             },",
          "261:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC             },",
          "262:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN                },",
          "263:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA                 },",
          "264:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC             },",
          "265:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS                 },",
          "266:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN                },",
          "267:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER                },",
          "268:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC             },",
          "269:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE                    },",
          "270:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY                   },",
          "271:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS                 },",
          "272:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX                },",
          "273:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS                 },",
          "274:   { \"RENAME\",           \"TK_RENAME\",       ALTER                  },",
          "275:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT               },",
          "276:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY                   },",
          "277:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "278:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS                 },",
          "279:   { \"ROW\",              \"TK_ROW\",          TRIGGER                },",
          "280:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS                 },",
          "281:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS                 },",
          "282:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS                 },",
          "283:   { \"SET\",              \"TK_SET\",          ALWAYS                 },",
          "284:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS                 },",
          "285:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS                 },",
          "286:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS                 },",
          "287:   { \"THEN\",             \"TK_THEN\",         ALWAYS                 },",
          "288:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC             },",
          "289:   { \"TO\",               \"TK_TO\",           ALWAYS                 },",
          "290:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS                 },",
          "291:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER                },",
          "292:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC             },",
          "293:   { \"UNION\",            \"TK_UNION\",        COMPOUND               },",
          "294:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS                 },",
          "295:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS                 },",
          "296:   { \"USING\",            \"TK_USING\",        ALWAYS                 },",
          "297:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM                 },",
          "298:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS                 },",
          "299:   { \"VIEW\",             \"TK_VIEW\",         VIEW                   },",
          "300:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB                   },",
          "301:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "302:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "303:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC             },",
          "304:   { \"WITH\",             \"TK_WITH\",         CTE                    },",
          "305:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS                 },",
          "",
          "[Added Lines]",
          "162:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER, 0      },",
          "163:   { \"ACTION\",           \"TK_ACTION\",       FKEY,             0      },",
          "164:   { \"ADD\",              \"TK_ADD\",          ALTER,            1      },",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "172:   { \"ASC\",              \"TK_ASC\",          ALWAYS,           0      },",
          "173:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH,           1      },",
          "174:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR,         0      },",
          "175:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER,          0      },",
          "176:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS,           1      },",
          "177:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS,           5      },",
          "178:   { \"BY\",               \"TK_BY\",           ALWAYS,           10     },",
          "179:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY,             1      },",
          "180:   { \"CASE\",             \"TK_CASE\",         ALWAYS,           5      },",
          "181:   { \"CAST\",             \"TK_CAST\",         CAST,             5      },",
          "182:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS,           1      },",
          "183:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS,           1      },",
          "184:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER,            1      },",
          "185:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS,           1      },",
          "186:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT,         0      },",
          "187:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS,           1      },",
          "188:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS,           2      },",
          "189:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "190:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC,       1      },",
          "191:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "192:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "193:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS,           1      },",
          "194:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH,           0      },",
          "195:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS,           1      },",
          "196:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS,           1      },",
          "197:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY,             1      },",
          "198:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS,           10     },",
          "199:   { \"DESC\",             \"TK_DESC\",         ALWAYS,           3      },",
          "200:   { \"DETACH\",           \"TK_DETACH\",       ATTACH,           0      },",
          "201:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS,           5      },",
          "202:   { \"DO\",               \"TK_DO\",           UPSERT,           2      },",
          "203:   { \"DROP\",             \"TK_DROP\",         ALWAYS,           1      },",
          "204:   { \"END\",              \"TK_END\",          ALWAYS,           1      },",
          "205:   { \"EACH\",             \"TK_EACH\",         TRIGGER,          1      },",
          "206:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS,           2      },",
          "207:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS,           4      },",
          "208:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND,         4      },",
          "209:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS,           1      },",
          "210:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC,       1      },",
          "211:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS,           4      },",
          "212:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN,          1      },",
          "213:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER, 1      },",
          "214:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC,       4      },",
          "215:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS,           4      },",
          "216:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC,       4      },",
          "217:   { \"FOR\",              \"TK_FOR\",          TRIGGER,          2      },",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "225:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS,           5      },",
          "226:   { \"IF\",               \"TK_IF\",           ALWAYS,           2      },",
          "227:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER, 1      },",
          "228:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS,           1      },",
          "229:   { \"IN\",               \"TK_IN\",           ALWAYS,           10     },",
          "230:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS,           1      },",
          "231:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS,           0      },",
          "232:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY,             1      },",
          "233:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS,           1      },",
          "234:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS,           10     },",
          "235:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER,          1      },",
          "236:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND,         5      },",
          "237:   { \"INTO\",             \"TK_INTO\",         ALWAYS,           10     },",
          "238:   { \"IS\",               \"TK_IS\",           ALWAYS,           5      },",
          "239:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS,           5      },",
          "240:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS,           5      },",
          "241:   { \"KEY\",              \"TK_KEY\",          ALWAYS,           1      },",
          "242:   { \"LAST\",             \"TK_LAST\",         ALWAYS,           4      },",
          "243:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "244:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS,           5      },",
          "245:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS,           3      },",
          "246:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS,           2      },",
          "247:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "248:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC,  2      },",
          "249:   { \"NOT\",              \"TK_NOT\",          ALWAYS,           10     },",
          "250:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT,           1      },",
          "251:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS,           3      },",
          "252:   { \"NULL\",             \"TK_NULL\",         ALWAYS,           10     },",
          "253:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS,           3      },",
          "254:   { \"OF\",               \"TK_OF\",           ALWAYS,           3      },",
          "255:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS,           1      },",
          "256:   { \"ON\",               \"TK_ON\",           ALWAYS,           1      },",
          "257:   { \"OR\",               \"TK_OR\",           ALWAYS,           9      },",
          "258:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS,           10     },",
          "259:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC,       3      },",
          "260:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "261:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC,       3      },",
          "262:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC,       3      },",
          "263:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN,          0      },",
          "264:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA,           0      },",
          "265:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC,       3      },",
          "266:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS,           1      },",
          "267:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN,          0      },",
          "268:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER,          1      },",
          "269:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC,       3      },",
          "270:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE,              3      },",
          "271:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY,             1      },",
          "272:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "273:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX,          1      },",
          "274:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS,           1      },",
          "275:   { \"RENAME\",           \"TK_RENAME\",       ALTER,            1      },",
          "276:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT,         10     },",
          "277:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY,             1      },",
          "278:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS,           0      },",
          "279:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS,           1      },",
          "280:   { \"ROW\",              \"TK_ROW\",          TRIGGER,          1      },",
          "281:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS,           1      },",
          "282:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS,           1      },",
          "283:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS,           10     },",
          "284:   { \"SET\",              \"TK_SET\",          ALWAYS,           10     },",
          "285:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS,           1      },",
          "286:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS,           1      },",
          "287:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS,           1      },",
          "288:   { \"THEN\",             \"TK_THEN\",         ALWAYS,           3      },",
          "289:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC,       3      },",
          "290:   { \"TO\",               \"TK_TO\",           ALWAYS,           3      },",
          "291:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS,           1      },",
          "292:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER,          1      },",
          "293:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC,       3      },",
          "294:   { \"UNION\",            \"TK_UNION\",        COMPOUND,         3      },",
          "295:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS,           1      },",
          "296:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS,           10     },",
          "297:   { \"USING\",            \"TK_USING\",        ALWAYS,           8      },",
          "298:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM,           1      },",
          "299:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS,           10     },",
          "300:   { \"VIEW\",             \"TK_VIEW\",         VIEW,             1      },",
          "301:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB,             1      },",
          "302:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS,           1      },",
          "303:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS,           10     },",
          "304:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC,       3      },",
          "305:   { \"WITH\",             \"TK_WITH\",         CTE,              4      },",
          "306:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS,           1      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:   return &aKeywordTable[i];",
          "358: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "367:   int j = aKeywordTable[i].iNext;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "371:   aKeywordTable[i].iNext = aKeywordTable[j].iNext;",
          "372:   aKeywordTable[j].iNext = i+1;",
          "374:   reorder(&aKeywordTable[i].iNext);",
          "375: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491:     h = aKeywordTable[i].hash % bestSize;",
          "492:     aKeywordTable[i].iNext = aKWHash[h];",
          "493:     aKWHash[h] = i+1;",
          "494:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:     reorder(&aKWHash[h]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:     }",
          "606:   }",
          "607:   printf(\"%s};\\n\", j==0 ? \"\" : \"\\n\");",
          "608:   printf(\"/* Check to see if z[0..n-1] is a keyword. If it is, write the\\n\");",
          "609:   printf(\"** parser symbol code for that keyword into *pType.  Always\\n\");",
          "610:   printf(\"** return the integer n (the length of the token). */\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:   printf(\"/* Hash table decoded:\\n\");",
          "627:   for(i=0; i<bestSize; i++){",
          "628:     j = aKWHash[i];",
          "629:     printf(\"** %3d:\", i);",
          "630:     while( j ){",
          "631:       printf(\" %s\", aKeywordTable[j-1].zOrigName);",
          "632:       j = aKeywordTable[j-1].iNext;",
          "633:     }",
          "634:     printf(\"\\n\");",
          "635:   }",
          "636:   printf(\"*/\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}