{
  "cve_id": "CVE-2013-1797",
  "cve_desc": "Use-after-free vulnerability in arch/x86/kvm/x86.c in the Linux kernel through 3.8.4 allows guest OS users to cause a denial of service (host OS memory corruption) or possibly have unspecified other impact via a crafted application that triggers use of a guest physical address (GPA) in (1) movable or (2) removable memory during an MSR_KVM_SYSTEM_TIME kvm_set_msr_common operation.",
  "repo": "torvalds/linux",
  "patch_hash": "0b79459b482e85cb7426aa7da683a9f2c97aeae1",
  "patch_info": {
    "commit_hash": "0b79459b482e85cb7426aa7da683a9f2c97aeae1",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/0b79459b482e85cb7426aa7da683a9f2c97aeae1",
    "files": [
      "arch/x86/include/asm/kvm_host.h",
      "arch/x86/kvm/x86.c"
    ],
    "message": "KVM: x86: Convert MSR_KVM_SYSTEM_TIME to use gfn_to_hva_cache functions (CVE-2013-1797)\n\nThere is a potential use after free issue with the handling of\nMSR_KVM_SYSTEM_TIME.  If the guest specifies a GPA in a movable or removable\nmemory such as frame buffers then KVM might continue to write to that\naddress even after it's removed via KVM_SET_USER_MEMORY_REGION.  KVM pins\nthe page in memory so it's unlikely to cause an issue, but if the user\nspace component re-purposes the memory previously used for the guest, then\nthe guest will be able to corrupt that memory.\n\nTested: Tested against kvmclock unit test\n\nSigned-off-by: Andrew Honig <ahonig@google.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>",
    "before_after_code_files": [
      "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h",
      "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
    ]
  },
  "patch_diff": {
    "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h": [
      "File: arch/x86/include/asm/kvm_host.h -> arch/x86/include/asm/kvm_host.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "414:  gpa_t time;",
      "415:  struct pvclock_vcpu_time_info hv_clock;",
      "416:  unsigned int hw_tsc_khz;",
      "420:  bool pvclock_set_guest_stopped_request;",
      "",
      "[Removed Lines]",
      "417:  unsigned int time_offset;",
      "418:  struct page *time_page;",
      "",
      "[Added Lines]",
      "417:  struct gfn_to_hva_cache pv_time;",
      "418:  bool pv_time_enabled;",
      "",
      "---------------"
    ],
    "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
      "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1406:  unsigned long flags, this_tsc_khz;",
      "1407:  struct kvm_vcpu_arch *vcpu = &v->arch;",
      "1408:  struct kvm_arch *ka = &v->kvm->arch;",
      "1410:  s64 kernel_ns, max_kernel_ns;",
      "1411:  u64 tsc_timestamp, host_tsc;",
      "1413:  u8 pvclock_flags;",
      "1414:  bool use_master_clock;",
      "",
      "[Removed Lines]",
      "1409:  void *shared_kaddr;",
      "1412:  struct pvclock_vcpu_time_info *guest_hv_clock;",
      "",
      "[Added Lines]",
      "1411:  struct pvclock_vcpu_time_info guest_hv_clock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1464:  local_irq_restore(flags);",
      "1467:   return 0;",
      "",
      "[Removed Lines]",
      "1466:  if (!vcpu->time_page)",
      "",
      "[Added Lines]",
      "1465:  if (!vcpu->pv_time_enabled)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1526:  vcpu->hv_clock.version += 2;",
      "1535:  if (vcpu->pvclock_set_guest_stopped_request) {",
      "1536:   pvclock_flags |= PVCLOCK_GUEST_STOPPED;",
      "",
      "[Removed Lines]",
      "1528:  shared_kaddr = kmap_atomic(vcpu->time_page);",
      "1530:  guest_hv_clock = shared_kaddr + vcpu->time_offset;",
      "1533:  pvclock_flags = (guest_hv_clock->flags & PVCLOCK_GUEST_STOPPED);",
      "",
      "[Added Lines]",
      "1527:  if (unlikely(kvm_read_guest_cached(v->kvm, &vcpu->pv_time,",
      "1528:   &guest_hv_clock, sizeof(guest_hv_clock))))",
      "1529:   return 0;",
      "1532:  pvclock_flags = (guest_hv_clock.flags & PVCLOCK_GUEST_STOPPED);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1544:  vcpu->hv_clock.flags = pvclock_flags;",
      "1552:  return 0;",
      "1553: }",
      "",
      "[Removed Lines]",
      "1546:  memcpy(shared_kaddr + vcpu->time_offset, &vcpu->hv_clock,",
      "1547:         sizeof(vcpu->hv_clock));",
      "1549:  kunmap_atomic(shared_kaddr);",
      "1551:  mark_page_dirty(v->kvm, vcpu->time >> PAGE_SHIFT);",
      "",
      "[Added Lines]",
      "1545:  kvm_write_guest_cached(v->kvm, &vcpu->pv_time,",
      "1546:     &vcpu->hv_clock,",
      "1547:     sizeof(vcpu->hv_clock));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1838: static void kvmclock_reset(struct kvm_vcpu *vcpu)",
      "1839: {",
      "1844: }",
      "1846: static void accumulate_steal_time(struct kvm_vcpu *vcpu)",
      "",
      "[Removed Lines]",
      "1840:  if (vcpu->arch.time_page) {",
      "1841:   kvm_release_page_dirty(vcpu->arch.time_page);",
      "1842:   vcpu->arch.time_page = NULL;",
      "1843:  }",
      "",
      "[Added Lines]",
      "1836:  vcpu->arch.pv_time_enabled = false;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1947:   break;",
      "1948:  case MSR_KVM_SYSTEM_TIME_NEW:",
      "1949:  case MSR_KVM_SYSTEM_TIME: {",
      "1950:   kvmclock_reset(vcpu);",
      "1952:   vcpu->arch.time = data;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1943:   u64 gpa_offset;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1956:   if (!(data & 1))",
      "1957:    break;",
      "1965:    break;",
      "1973:   break;",
      "1974:  }",
      "",
      "[Removed Lines]",
      "1960:   vcpu->arch.time_offset = data & ~(PAGE_MASK | 1);",
      "1963:   if (vcpu->arch.time_offset &",
      "1964:     (sizeof(struct pvclock_vcpu_time_info) - 1))",
      "1967:   vcpu->arch.time_page =",
      "1968:     gfn_to_page(vcpu->kvm, data >> PAGE_SHIFT);",
      "1970:   if (is_error_page(vcpu->arch.time_page))",
      "1971:    vcpu->arch.time_page = NULL;",
      "",
      "[Added Lines]",
      "1953:   gpa_offset = data & ~(PAGE_MASK | 1);",
      "1956:   if (gpa_offset & (sizeof(struct pvclock_vcpu_time_info) - 1))",
      "1959:   if (kvm_gfn_to_hva_cache_init(vcpu->kvm,",
      "1960:        &vcpu->arch.pv_time, data & ~1ULL))",
      "1961:    vcpu->arch.pv_time_enabled = false;",
      "1962:   else",
      "1963:    vcpu->arch.pv_time_enabled = true;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2973: static int kvm_set_guest_paused(struct kvm_vcpu *vcpu)",
      "2974: {",
      "2976:   return -EINVAL;",
      "2977:  vcpu->arch.pvclock_set_guest_stopped_request = true;",
      "2978:  kvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);",
      "",
      "[Removed Lines]",
      "2975:  if (!vcpu->arch.time_page)",
      "",
      "[Added Lines]",
      "2967:  if (!vcpu->arch.pv_time_enabled)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "6723:   goto fail_free_wbinvd_dirty_mask;",
      "6725:  vcpu->arch.ia32_tsc_adjust_msr = 0x0;",
      "6726:  kvm_async_pf_hash_reset(vcpu);",
      "6727:  kvm_pmu_init(vcpu);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6718:  vcpu->arch.pv_time_enabled = false;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f964525a121f2ff2df948dac908dcc65be21b5b",
      "candidate_info": {
        "commit_hash": "8f964525a121f2ff2df948dac908dcc65be21b5b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8f964525a121f2ff2df948dac908dcc65be21b5b",
        "files": [
          "arch/x86/kvm/lapic.c",
          "arch/x86/kvm/x86.c",
          "include/linux/kvm_host.h",
          "include/linux/kvm_types.h",
          "virt/kvm/kvm_main.c"
        ],
        "message": "KVM: Allow cross page reads and writes from cached translations.\n\nThis patch adds support for kvm_gfn_to_hva_cache_init functions for\nreads and writes that will cross a page.  If the range falls within\nthe same memslot, then this will be a fast operation.  If the range\nis split between two memslots, then the slower kvm_read_guest and\nkvm_write_guest are used.\n\nTested: Test against kvm_clock unit tests.\n\nSigned-off-by: Andrew Honig <ahonig@google.com>\nSigned-off-by: Gleb Natapov <gleb@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kvm/lapic.c||arch/x86/kvm/lapic.c",
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c",
          "include/linux/kvm_host.h||include/linux/kvm_host.h",
          "include/linux/kvm_types.h||include/linux/kvm_types.h",
          "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kvm/lapic.c||arch/x86/kvm/lapic.c": [
          "File: arch/x86/kvm/lapic.c -> arch/x86/kvm/lapic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1857:  if (!pv_eoi_enabled(vcpu))",
          "1858:   return 0;",
          "1859:  return kvm_gfn_to_hva_cache_init(vcpu->kvm, &vcpu->arch.pv_eoi.data,",
          "1861: }",
          "1863: void kvm_lapic_init(void)",
          "",
          "[Removed Lines]",
          "1860:       addr);",
          "",
          "[Added Lines]",
          "1860:       addr, sizeof(u8));",
          "",
          "---------------"
        ],
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1823:   return 0;",
          "1824:  }",
          "1827:   return 1;",
          "1829:  vcpu->arch.apf.send_user_only = !(data & KVM_ASYNC_PF_SEND_ALWAYS);",
          "",
          "[Removed Lines]",
          "1826:  if (kvm_gfn_to_hva_cache_init(vcpu->kvm, &vcpu->arch.apf.data, gpa))",
          "",
          "[Added Lines]",
          "1826:  if (kvm_gfn_to_hva_cache_init(vcpu->kvm, &vcpu->arch.apf.data, gpa,",
          "1827:      sizeof(u32)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1953:   gpa_offset = data & ~(PAGE_MASK | 1);",
          "1959:   if (kvm_gfn_to_hva_cache_init(vcpu->kvm,",
          "1961:    vcpu->arch.pv_time_enabled = false;",
          "1962:   else",
          "1963:    vcpu->arch.pv_time_enabled = true;",
          "",
          "[Removed Lines]",
          "1956:   if (gpa_offset & (sizeof(struct pvclock_vcpu_time_info) - 1))",
          "1957:    break;",
          "1960:        &vcpu->arch.pv_time, data & ~1ULL))",
          "",
          "[Added Lines]",
          "1957:        &vcpu->arch.pv_time, data & ~1ULL,",
          "1958:        sizeof(struct pvclock_vcpu_time_info)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1977:    return 1;",
          "1979:   if (kvm_gfn_to_hva_cache_init(vcpu->kvm, &vcpu->arch.st.stime,",
          "1981:    return 1;",
          "1983:   vcpu->arch.st.msr_val = data;",
          "",
          "[Removed Lines]",
          "1980:        data & KVM_STEAL_VALID_BITS))",
          "",
          "[Added Lines]",
          "1978:       data & KVM_STEAL_VALID_BITS,",
          "1979:       sizeof(struct kvm_steal_time)))",
          "",
          "---------------"
        ],
        "include/linux/kvm_host.h||include/linux/kvm_host.h": [
          "File: include/linux/kvm_host.h -> include/linux/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "518: int kvm_write_guest_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,",
          "519:       void *data, unsigned long len);",
          "520: int kvm_gfn_to_hva_cache_init(struct kvm *kvm, struct gfn_to_hva_cache *ghc,",
          "522: int kvm_clear_guest_page(struct kvm *kvm, gfn_t gfn, int offset, int len);",
          "523: int kvm_clear_guest(struct kvm *kvm, gpa_t gpa, unsigned long len);",
          "524: struct kvm_memory_slot *gfn_to_memslot(struct kvm *kvm, gfn_t gfn);",
          "",
          "[Removed Lines]",
          "521:          gpa_t gpa);",
          "",
          "[Added Lines]",
          "521:          gpa_t gpa, unsigned long len);",
          "",
          "---------------"
        ],
        "include/linux/kvm_types.h||include/linux/kvm_types.h": [
          "File: include/linux/kvm_types.h -> include/linux/kvm_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  u64 generation;",
          "72:  gpa_t gpa;",
          "73:  unsigned long hva;",
          "74:  struct kvm_memory_slot *memslot;",
          "75: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:  unsigned long len;",
          "",
          "---------------"
        ],
        "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c": [
          "File: virt/kvm/kvm_main.c -> virt/kvm/kvm_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1541: }",
          "1543: int kvm_gfn_to_hva_cache_init(struct kvm *kvm, struct gfn_to_hva_cache *ghc,",
          "1545: {",
          "1546:  struct kvm_memslots *slots = kvm_memslots(kvm);",
          "1547:  int offset = offset_in_page(gpa);",
          "1550:  ghc->gpa = gpa;",
          "1551:  ghc->generation = slots->generation;",
          "1555:   ghc->hva += offset;",
          "1559:  return 0;",
          "1560: }",
          "1561: EXPORT_SYMBOL_GPL(kvm_gfn_to_hva_cache_init);",
          "",
          "[Removed Lines]",
          "1544:          gpa_t gpa)",
          "1548:  gfn_t gfn = gpa >> PAGE_SHIFT;",
          "1552:  ghc->memslot = gfn_to_memslot(kvm, gfn);",
          "1553:  ghc->hva = gfn_to_hva_many(ghc->memslot, gfn, NULL);",
          "1554:  if (!kvm_is_error_hva(ghc->hva))",
          "1556:  else",
          "1557:   return -EFAULT;",
          "",
          "[Added Lines]",
          "1544:          gpa_t gpa, unsigned long len)",
          "1548:  gfn_t start_gfn = gpa >> PAGE_SHIFT;",
          "1549:  gfn_t end_gfn = (gpa + len - 1) >> PAGE_SHIFT;",
          "1550:  gfn_t nr_pages_needed = end_gfn - start_gfn + 1;",
          "1551:  gfn_t nr_pages_avail;",
          "1555:  ghc->len = len;",
          "1556:  ghc->memslot = gfn_to_memslot(kvm, start_gfn);",
          "1557:  ghc->hva = gfn_to_hva_many(ghc->memslot, start_gfn, &nr_pages_avail);",
          "1558:  if (!kvm_is_error_hva(ghc->hva) && nr_pages_avail >= nr_pages_needed) {",
          "1560:  } else {",
          "1565:   while (start_gfn <= end_gfn) {",
          "1566:    ghc->memslot = gfn_to_memslot(kvm, start_gfn);",
          "1567:    ghc->hva = gfn_to_hva_many(ghc->memslot, start_gfn,",
          "1568:          &nr_pages_avail);",
          "1569:    if (kvm_is_error_hva(ghc->hva))",
          "1570:     return -EFAULT;",
          "1571:    start_gfn += nr_pages_avail;",
          "1572:   }",
          "1574:   ghc->memslot = NULL;",
          "1575:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1566:  struct kvm_memslots *slots = kvm_memslots(kvm);",
          "1567:  int r;",
          "1569:  if (slots->generation != ghc->generation)",
          "1572:  if (kvm_is_error_hva(ghc->hva))",
          "1573:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "1570:   kvm_gfn_to_hva_cache_init(kvm, ghc, ghc->gpa);",
          "",
          "[Added Lines]",
          "1586:  BUG_ON(len > ghc->len);",
          "1589:   kvm_gfn_to_hva_cache_init(kvm, ghc, ghc->gpa, ghc->len);",
          "1591:  if (unlikely(!ghc->memslot))",
          "1592:   return kvm_write_guest(kvm, ghc->gpa, data, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1587:  struct kvm_memslots *slots = kvm_memslots(kvm);",
          "1588:  int r;",
          "1590:  if (slots->generation != ghc->generation)",
          "1593:  if (kvm_is_error_hva(ghc->hva))",
          "1594:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "1591:   kvm_gfn_to_hva_cache_init(kvm, ghc, ghc->gpa);",
          "",
          "[Added Lines]",
          "1612:  BUG_ON(len > ghc->len);",
          "1615:   kvm_gfn_to_hva_cache_init(kvm, ghc, ghc->gpa, ghc->len);",
          "1617:  if (unlikely(!ghc->memslot))",
          "1618:   return kvm_read_guest(kvm, ghc->gpa, data, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51d59c6b422f3f95940ae4e5b42f165595906aee",
      "candidate_info": {
        "commit_hash": "51d59c6b422f3f95940ae4e5b42f165595906aee",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/51d59c6b422f3f95940ae4e5b42f165595906aee",
        "files": [
          "arch/x86/include/asm/kvm_host.h",
          "arch/x86/kvm/x86.c"
        ],
        "message": "KVM: x86: fix pvclock guest stopped flag reporting\n\nkvm_guest_time_update unconditionally clears hv_clock.flags field,\nso the notification never reaches the guest.\n\nFix it by allowing PVCLOCK_GUEST_STOPPED to passthrough.\n\nReviewed-by: Eric B Munson <emunson@mgebm.net>\nReviewed-by: Amit Shah <amit.shah@redhat.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>",
        "before_after_code_files": [
          "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h",
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h",
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h",
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h": [
          "File: arch/x86/include/asm/kvm_host.h -> arch/x86/include/asm/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:  unsigned int hw_tsc_khz;",
          "421:  unsigned int time_offset;",
          "422:  struct page *time_page;",
          "424:  struct {",
          "425:   u64 msr_val;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:  bool pvclock_set_guest_stopped_request;",
          "",
          "---------------"
        ],
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:  unsigned long this_tsc_khz;",
          "1135:  s64 kernel_ns, max_kernel_ns;",
          "1136:  u64 tsc_timestamp;",
          "1139:  local_irq_save(flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1137:  u8 pvclock_flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1215:  vcpu->hv_clock.system_time = kernel_ns + v->kvm->arch.kvmclock_offset;",
          "1216:  vcpu->last_kernel_ns = kernel_ns;",
          "1217:  vcpu->last_guest_tsc = tsc_timestamp;",
          "",
          "[Removed Lines]",
          "1218:  vcpu->hv_clock.flags = 0;",
          "",
          "[Added Lines]",
          "1220:  pvclock_flags = 0;",
          "1221:  if (vcpu->pvclock_set_guest_stopped_request) {",
          "1222:   pvclock_flags |= PVCLOCK_GUEST_STOPPED;",
          "1223:   vcpu->pvclock_set_guest_stopped_request = false;",
          "1224:  }",
          "1226:  vcpu->hv_clock.flags = pvclock_flags;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2625: static int kvm_set_guest_paused(struct kvm_vcpu *vcpu)",
          "2626: {",
          "2628:  if (!vcpu->arch.time_page)",
          "2629:   return -EINVAL;",
          "2631:  kvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);",
          "2632:  return 0;",
          "2633: }",
          "",
          "[Removed Lines]",
          "2627:  struct pvclock_vcpu_time_info *src = &vcpu->arch.hv_clock;",
          "2630:  src->flags |= PVCLOCK_GUEST_STOPPED;",
          "",
          "[Added Lines]",
          "2637:  vcpu->arch.pvclock_set_guest_stopped_request = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fd75e1216e0ba601a746177e6c102d5593b572f",
      "candidate_info": {
        "commit_hash": "8fd75e1216e0ba601a746177e6c102d5593b572f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8fd75e1216e0ba601a746177e6c102d5593b572f",
        "files": [
          "arch/x86/crypto/aesni-intel_glue.c",
          "arch/x86/kernel/crash_dump_32.c",
          "arch/x86/kvm/lapic.c",
          "arch/x86/kvm/paging_tmpl.h",
          "arch/x86/kvm/x86.c",
          "arch/x86/lib/usercopy_32.c"
        ],
        "message": "x86: remove the second argument of k[un]map_atomic()\n\nAcked-by: Avi Kivity <avi@redhat.com>\nAcked-by: Herbert Xu <herbert@gondor.apana.org.au>\nSigned-off-by: Cong Wang <amwang@redhat.com>",
        "before_after_code_files": [
          "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c",
          "arch/x86/kernel/crash_dump_32.c||arch/x86/kernel/crash_dump_32.c",
          "arch/x86/kvm/lapic.c||arch/x86/kvm/lapic.c",
          "arch/x86/kvm/paging_tmpl.h||arch/x86/kvm/paging_tmpl.h",
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c",
          "arch/x86/lib/usercopy_32.c||arch/x86/lib/usercopy_32.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c": [
          "File: arch/x86/crypto/aesni-intel_glue.c -> arch/x86/crypto/aesni-intel_glue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1107:   one_entry_in_sg = 1;",
          "1108:   scatterwalk_start(&src_sg_walk, req->src);",
          "1109:   scatterwalk_start(&assoc_sg_walk, req->assoc);",
          "1112:   dst = src;",
          "1113:   if (unlikely(req->src != req->dst)) {",
          "1114:    scatterwalk_start(&dst_sg_walk, req->dst);",
          "1116:   }",
          "1118:  } else {",
          "",
          "[Removed Lines]",
          "1110:   src = scatterwalk_map(&src_sg_walk, 0);",
          "1111:   assoc = scatterwalk_map(&assoc_sg_walk, 0);",
          "1115:    dst = scatterwalk_map(&dst_sg_walk, 0);",
          "",
          "[Added Lines]",
          "1110:   src = scatterwalk_map(&src_sg_walk);",
          "1111:   assoc = scatterwalk_map(&assoc_sg_walk);",
          "1115:    dst = scatterwalk_map(&dst_sg_walk);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1137:  if (one_entry_in_sg) {",
          "1138:   if (unlikely(req->src != req->dst)) {",
          "1140:    scatterwalk_done(&dst_sg_walk, 0, 0);",
          "1141:   }",
          "1144:   scatterwalk_done(&src_sg_walk, 0, 0);",
          "1145:   scatterwalk_done(&assoc_sg_walk, 0, 0);",
          "1146:  } else {",
          "",
          "[Removed Lines]",
          "1139:    scatterwalk_unmap(dst, 0);",
          "1142:   scatterwalk_unmap(src, 0);",
          "1143:   scatterwalk_unmap(assoc, 0);",
          "",
          "[Added Lines]",
          "1139:    scatterwalk_unmap(dst);",
          "1142:   scatterwalk_unmap(src);",
          "1143:   scatterwalk_unmap(assoc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1189:   one_entry_in_sg = 1;",
          "1190:   scatterwalk_start(&src_sg_walk, req->src);",
          "1191:   scatterwalk_start(&assoc_sg_walk, req->assoc);",
          "1194:   dst = src;",
          "1195:   if (unlikely(req->src != req->dst)) {",
          "1196:    scatterwalk_start(&dst_sg_walk, req->dst);",
          "1198:   }",
          "1200:  } else {",
          "",
          "[Removed Lines]",
          "1192:   src = scatterwalk_map(&src_sg_walk, 0);",
          "1193:   assoc = scatterwalk_map(&assoc_sg_walk, 0);",
          "1197:    dst = scatterwalk_map(&dst_sg_walk, 0);",
          "",
          "[Added Lines]",
          "1192:   src = scatterwalk_map(&src_sg_walk);",
          "1193:   assoc = scatterwalk_map(&assoc_sg_walk);",
          "1197:    dst = scatterwalk_map(&dst_sg_walk);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1220:  if (one_entry_in_sg) {",
          "1221:   if (unlikely(req->src != req->dst)) {",
          "1223:    scatterwalk_done(&dst_sg_walk, 0, 0);",
          "1224:   }",
          "1227:   scatterwalk_done(&src_sg_walk, 0, 0);",
          "1228:   scatterwalk_done(&assoc_sg_walk, 0, 0);",
          "1229:  } else {",
          "",
          "[Removed Lines]",
          "1222:    scatterwalk_unmap(dst, 0);",
          "1225:   scatterwalk_unmap(src, 0);",
          "1226:   scatterwalk_unmap(assoc, 0);",
          "",
          "[Added Lines]",
          "1222:    scatterwalk_unmap(dst);",
          "1225:   scatterwalk_unmap(src);",
          "1226:   scatterwalk_unmap(assoc);",
          "",
          "---------------"
        ],
        "arch/x86/kernel/crash_dump_32.c||arch/x86/kernel/crash_dump_32.c": [
          "File: arch/x86/kernel/crash_dump_32.c -> arch/x86/kernel/crash_dump_32.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  if (!userbuf) {",
          "64:   memcpy(buf, (vaddr + offset), csize);",
          "66:  } else {",
          "67:   if (!kdump_buf_page) {",
          "68:    printk(KERN_WARNING \"Kdump: Kdump buffer page not\"",
          "69:     \" allocated\\n\");",
          "71:    return -EFAULT;",
          "72:   }",
          "73:   copy_page(kdump_buf_page, vaddr);",
          "75:   if (copy_to_user(buf, (kdump_buf_page + offset), csize))",
          "76:    return -EFAULT;",
          "77:  }",
          "",
          "[Removed Lines]",
          "65:   kunmap_atomic(vaddr, KM_PTE0);",
          "70:    kunmap_atomic(vaddr, KM_PTE0);",
          "74:   kunmap_atomic(vaddr, KM_PTE0);",
          "",
          "[Added Lines]",
          "65:   kunmap_atomic(vaddr);",
          "70:    kunmap_atomic(vaddr);",
          "74:   kunmap_atomic(vaddr);",
          "",
          "---------------"
        ],
        "arch/x86/kvm/lapic.c||arch/x86/kvm/lapic.c": [
          "File: arch/x86/kvm/lapic.c -> arch/x86/kvm/lapic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1283:  if (!irqchip_in_kernel(vcpu->kvm) || !vcpu->arch.apic->vapic_addr)",
          "1284:   return;",
          "1287:  data = *(u32 *)(vapic + offset_in_page(vcpu->arch.apic->vapic_addr));",
          "1290:  apic_set_tpr(vcpu->arch.apic, data & 0xff);",
          "1291: }",
          "",
          "[Removed Lines]",
          "1286:  vapic = kmap_atomic(vcpu->arch.apic->vapic_page, KM_USER0);",
          "1288:  kunmap_atomic(vapic, KM_USER0);",
          "",
          "[Added Lines]",
          "1286:  vapic = kmap_atomic(vcpu->arch.apic->vapic_page);",
          "1288:  kunmap_atomic(vapic);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1310:   max_isr = 0;",
          "1311:  data = (tpr & 0xff) | ((max_isr & 0xf0) << 8) | (max_irr << 24);",
          "1316: }",
          "1318: void kvm_lapic_set_vapic_addr(struct kvm_vcpu *vcpu, gpa_t vapic_addr)",
          "",
          "[Removed Lines]",
          "1313:  vapic = kmap_atomic(vcpu->arch.apic->vapic_page, KM_USER0);",
          "1315:  kunmap_atomic(vapic, KM_USER0);",
          "",
          "[Added Lines]",
          "1313:  vapic = kmap_atomic(vcpu->arch.apic->vapic_page);",
          "1315:  kunmap_atomic(vapic);",
          "",
          "---------------"
        ],
        "arch/x86/kvm/paging_tmpl.h||arch/x86/kvm/paging_tmpl.h": [
          "File: arch/x86/kvm/paging_tmpl.h -> arch/x86/kvm/paging_tmpl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:  if (unlikely(npages != 1))",
          "93:   return -EFAULT;",
          "96:  ret = CMPXCHG(&table[index], orig_pte, new_pte);",
          "99:  kvm_release_page_dirty(page);",
          "",
          "[Removed Lines]",
          "95:  table = kmap_atomic(page, KM_USER0);",
          "97:  kunmap_atomic(table, KM_USER0);",
          "",
          "[Added Lines]",
          "95:  table = kmap_atomic(page);",
          "97:  kunmap_atomic(table);",
          "",
          "---------------"
        ],
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1163:  vcpu->hv_clock.version += 2;",
          "1167:  memcpy(shared_kaddr + vcpu->time_offset, &vcpu->hv_clock,",
          "1168:         sizeof(vcpu->hv_clock));",
          "1172:  mark_page_dirty(v->kvm, vcpu->time >> PAGE_SHIFT);",
          "1173:  return 0;",
          "",
          "[Removed Lines]",
          "1165:  shared_kaddr = kmap_atomic(vcpu->time_page, KM_USER0);",
          "1170:  kunmap_atomic(shared_kaddr, KM_USER0);",
          "",
          "[Added Lines]",
          "1165:  shared_kaddr = kmap_atomic(vcpu->time_page);",
          "1170:  kunmap_atomic(shared_kaddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3848:   goto emul_write;",
          "3849:  }",
          "3852:  kaddr += offset_in_page(gpa);",
          "3853:  switch (bytes) {",
          "3854:  case 1:",
          "",
          "[Removed Lines]",
          "3851:  kaddr = kmap_atomic(page, KM_USER0);",
          "",
          "[Added Lines]",
          "3851:  kaddr = kmap_atomic(page);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3866:  default:",
          "3867:   BUG();",
          "3868:  }",
          "3870:  kvm_release_page_dirty(page);",
          "3872:  if (!exchanged)",
          "",
          "[Removed Lines]",
          "3869:  kunmap_atomic(kaddr, KM_USER0);",
          "",
          "[Added Lines]",
          "3869:  kunmap_atomic(kaddr);",
          "",
          "---------------"
        ],
        "arch/x86/lib/usercopy_32.c||arch/x86/lib/usercopy_32.c": [
          "File: arch/x86/lib/usercopy_32.c -> arch/x86/lib/usercopy_32.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:     break;",
          "761:    }",
          "764:    memcpy(maddr + offset, from, len);",
          "766:    set_page_dirty_lock(pg);",
          "767:    put_page(pg);",
          "768:    up_read(&current->mm->mmap_sem);",
          "",
          "[Removed Lines]",
          "763:    maddr = kmap_atomic(pg, KM_USER0);",
          "765:    kunmap_atomic(maddr, KM_USER0);",
          "",
          "[Added Lines]",
          "763:    maddr = kmap_atomic(pg);",
          "765:    kunmap_atomic(maddr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32cad84f44d186654492f1a50a1424c8906ccbd9",
      "candidate_info": {
        "commit_hash": "32cad84f44d186654492f1a50a1424c8906ccbd9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/32cad84f44d186654492f1a50a1424c8906ccbd9",
        "files": [
          "arch/powerpc/kvm/44x_tlb.c",
          "arch/powerpc/kvm/book3s_pr.c",
          "arch/x86/kvm/svm.c",
          "arch/x86/kvm/vmx.c",
          "arch/x86/kvm/x86.c",
          "include/linux/kvm_host.h",
          "virt/kvm/async_pf.c",
          "virt/kvm/kvm_main.c"
        ],
        "message": "KVM: do not release the error page\n\nAfter commit a2766325cf9f9, the error page is replaced by the\nerror code, it need not be released anymore\n\n[ The patch has been compiling tested for powerpc ]\n\nSigned-off-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>",
        "before_after_code_files": [
          "arch/powerpc/kvm/44x_tlb.c||arch/powerpc/kvm/44x_tlb.c",
          "arch/powerpc/kvm/book3s_pr.c||arch/powerpc/kvm/book3s_pr.c",
          "arch/x86/kvm/svm.c||arch/x86/kvm/svm.c",
          "arch/x86/kvm/vmx.c||arch/x86/kvm/vmx.c",
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c",
          "include/linux/kvm_host.h||include/linux/kvm_host.h",
          "virt/kvm/async_pf.c||virt/kvm/async_pf.c",
          "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kvm/44x_tlb.c||arch/powerpc/kvm/44x_tlb.c": [
          "File: arch/powerpc/kvm/44x_tlb.c -> arch/powerpc/kvm/44x_tlb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:  if (is_error_page(new_page)) {",
          "320:   printk(KERN_ERR \"Couldn't get guest page for gfn %llx!\\n\",",
          "321:    (unsigned long long)gfn);",
          "323:   return;",
          "324:  }",
          "325:  hpaddr = page_to_phys(new_page);",
          "",
          "[Removed Lines]",
          "322:   kvm_release_page_clean(new_page);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/book3s_pr.c||arch/powerpc/kvm/book3s_pr.c": [
          "File: arch/powerpc/kvm/book3s_pr.c -> arch/powerpc/kvm/book3s_pr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:  int i;",
          "244:  hpage = gfn_to_page(vcpu->kvm, pte->raddr >> PAGE_SHIFT);",
          "247:   return;",
          "250:  hpage_offset = pte->raddr & ~PAGE_MASK;",
          "251:  hpage_offset &= ~0xFFFULL;",
          "",
          "[Removed Lines]",
          "245:  if (is_error_page(hpage)) {",
          "246:   kvm_release_page_clean(hpage);",
          "248:  }",
          "",
          "[Added Lines]",
          "245:  if (is_error_page(hpage))",
          "",
          "---------------"
        ],
        "arch/x86/kvm/svm.c||arch/x86/kvm/svm.c": [
          "File: arch/x86/kvm/svm.c -> arch/x86/kvm/svm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2105:  return kmap(page);",
          "2107: error:",
          "2109:  kvm_inject_gp(&svm->vcpu, 0);",
          "2111:  return NULL;",
          "",
          "[Removed Lines]",
          "2108:  kvm_release_page_clean(page);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/x86/kvm/vmx.c||arch/x86/kvm/vmx.c": [
          "File: arch/x86/kvm/vmx.c -> arch/x86/kvm/vmx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "596: static struct page *nested_get_page(struct kvm_vcpu *vcpu, gpa_t addr)",
          "597: {",
          "598:  struct page *page = gfn_to_page(vcpu->kvm, addr >> PAGE_SHIFT);",
          "601:   return NULL;",
          "603:  return page;",
          "604: }",
          "",
          "[Removed Lines]",
          "599:  if (is_error_page(page)) {",
          "600:   kvm_release_page_clean(page);",
          "602:  }",
          "",
          "[Added Lines]",
          "599:  if (is_error_page(page))",
          "",
          "---------------"
        ],
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1639:   vcpu->arch.time_page =",
          "1640:     gfn_to_page(vcpu->kvm, data >> PAGE_SHIFT);",
          "1644:    vcpu->arch.time_page = NULL;",
          "1646:   break;",
          "1647:  }",
          "1648:  case MSR_KVM_ASYNC_PF_EN:",
          "",
          "[Removed Lines]",
          "1642:   if (is_error_page(vcpu->arch.time_page)) {",
          "1643:    kvm_release_page_clean(vcpu->arch.time_page);",
          "1645:   }",
          "",
          "[Added Lines]",
          "1642:   if (is_error_page(vcpu->arch.time_page))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3945:   goto emul_write;",
          "3947:  page = gfn_to_page(vcpu->kvm, gpa >> PAGE_SHIFT);",
          "3950:   goto emul_write;",
          "3953:  kaddr = kmap_atomic(page);",
          "3954:  kaddr += offset_in_page(gpa);",
          "",
          "[Removed Lines]",
          "3948:  if (is_error_page(page)) {",
          "3949:   kvm_release_page_clean(page);",
          "3951:  }",
          "",
          "[Added Lines]",
          "3947:  if (is_error_page(page))",
          "",
          "---------------"
        ],
        "include/linux/kvm_host.h||include/linux/kvm_host.h": [
          "File: include/linux/kvm_host.h -> include/linux/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "457: pfn_t gfn_to_pfn_prot(struct kvm *kvm, gfn_t gfn, bool write_fault,",
          "458:         bool *writable);",
          "459: pfn_t gfn_to_pfn_memslot(struct kvm_memory_slot *slot, gfn_t gfn);",
          "461: void kvm_release_pfn_clean(pfn_t pfn);",
          "462: void kvm_set_pfn_dirty(pfn_t pfn);",
          "463: void kvm_set_pfn_accessed(pfn_t pfn);",
          "",
          "[Removed Lines]",
          "460: void kvm_release_pfn_dirty(pfn_t);",
          "",
          "[Added Lines]",
          "460: void kvm_release_pfn_dirty(pfn_t pfn);",
          "",
          "---------------"
        ],
        "virt/kvm/async_pf.c||virt/kvm/async_pf.c": [
          "File: virt/kvm/async_pf.c -> virt/kvm/async_pf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:    list_entry(vcpu->async_pf.done.next,",
          "112:        typeof(*work), link);",
          "113:   list_del(&work->link);",
          "115:    kvm_release_page_clean(work->page);",
          "116:   kmem_cache_free(async_pf_cache, work);",
          "117:  }",
          "",
          "[Removed Lines]",
          "114:   if (work->page)",
          "",
          "[Added Lines]",
          "114:   if (!is_error_page(work->page))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:   list_del(&work->queue);",
          "140:   vcpu->async_pf.queued--;",
          "142:    kvm_release_page_clean(work->page);",
          "143:   kmem_cache_free(async_pf_cache, work);",
          "144:  }",
          "",
          "[Removed Lines]",
          "141:   if (work->page)",
          "",
          "[Added Lines]",
          "141:   if (!is_error_page(work->page))",
          "",
          "---------------"
        ],
        "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c": [
          "File: virt/kvm/kvm_main.c -> virt/kvm/kvm_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1187: void kvm_release_page_clean(struct page *page)",
          "1188: {",
          "1191: }",
          "1192: EXPORT_SYMBOL_GPL(kvm_release_page_clean);",
          "",
          "[Removed Lines]",
          "1189:  if (!is_error_page(page))",
          "1190:   kvm_release_pfn_clean(page_to_pfn(page));",
          "",
          "[Added Lines]",
          "1189:  WARN_ON(is_error_page(page));",
          "1191:  kvm_release_pfn_clean(page_to_pfn(page));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78c0337a38450f809113dd46fe038874b93909f1",
      "candidate_info": {
        "commit_hash": "78c0337a38450f809113dd46fe038874b93909f1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/78c0337a38450f809113dd46fe038874b93909f1",
        "files": [
          "arch/x86/kvm/x86.c"
        ],
        "message": "KVM: x86: retain pvclock guest stopped bit in guest memory\n\nOtherwise its possible for an unrelated KVM_REQ_UPDATE_CLOCK (such as due to CPU\nmigration) to clear the bit.\n\nNoticed by Paolo Bonzini.\n\nReviewed-by: Gleb Natapov <gleb@redhat.com>\nReviewed-by: Glauber Costa <glommer@parallels.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1145:  unsigned long this_tsc_khz;",
          "1146:  s64 kernel_ns, max_kernel_ns;",
          "1147:  u64 tsc_timestamp;",
          "1148:  u8 pvclock_flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:  struct pvclock_vcpu_time_info *guest_hv_clock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1228:  vcpu->last_kernel_ns = kernel_ns;",
          "1229:  vcpu->last_guest_tsc = tsc_timestamp;",
          "",
          "[Removed Lines]",
          "1231:  pvclock_flags = 0;",
          "1232:  if (vcpu->pvclock_set_guest_stopped_request) {",
          "1233:   pvclock_flags |= PVCLOCK_GUEST_STOPPED;",
          "1234:   vcpu->pvclock_set_guest_stopped_request = false;",
          "1235:  }",
          "1237:  vcpu->hv_clock.flags = pvclock_flags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1246:  shared_kaddr = kmap_atomic(vcpu->time_page);",
          "1248:  memcpy(shared_kaddr + vcpu->time_offset, &vcpu->hv_clock,",
          "1249:         sizeof(vcpu->hv_clock));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:  guest_hv_clock = shared_kaddr + vcpu->time_offset;",
          "1245:  pvclock_flags = (guest_hv_clock->flags & PVCLOCK_GUEST_STOPPED);",
          "1247:  if (vcpu->pvclock_set_guest_stopped_request) {",
          "1248:   pvclock_flags |= PVCLOCK_GUEST_STOPPED;",
          "1249:   vcpu->pvclock_set_guest_stopped_request = false;",
          "1250:  }",
          "1252:  vcpu->hv_clock.flags = pvclock_flags;",
          "",
          "---------------"
        ]
      }
    }
  ]
}