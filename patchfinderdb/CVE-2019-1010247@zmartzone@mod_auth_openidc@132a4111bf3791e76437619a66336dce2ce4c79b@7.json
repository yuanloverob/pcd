{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6890b13c481f12debbd7c65a79e9dc5197deb794",
      "candidate_info": {
        "commit_hash": "6890b13c481f12debbd7c65a79e9dc5197deb794",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6890b13c481f12debbd7c65a79e9dc5197deb794",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/proto.c"
        ],
        "message": "ensure all Apache processing is completed on OIDCRedirectURI\n\nreturn OK instead of DONE in the redirect URI handlers to make\nsure the content handler is called for every request to the\nconfigured Redirect URI so all Apache processing is executed\n(e.g. setting headers with mod_headers) before returning the\nresponse\n\nthanks Don Sengpiehl\n\nNB: this may affect browser behavior and backwards compatibility\n\nbump to 2.4.0rc11\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc10],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc11],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:  } else {",
          "476:   oidc_util_html_send(r, \"Preserving...\", jscript, jmethod,",
          "478:  }",
          "480:  return TRUE;",
          "",
          "[Removed Lines]",
          "477:     \"<p>Preserving...</p>\", DONE);",
          "",
          "[Added Lines]",
          "477:     \"<p>Preserving...</p>\", OK);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:    \"    <form method=\\\"post\\\"></form>\\n\";",
          "521:  return oidc_util_html_send(r, \"Restoring...\", script, method, body,",
          "523: }",
          "",
          "[Removed Lines]",
          "522:    DONE);",
          "",
          "[Added Lines]",
          "522:    OK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "845:     apr_psprintf(r->pool,",
          "846:       \"This is due to a timeout; please restart your authentication session by re-entering the URL/bookmark you originally wanted to access: %s\",",
          "847:       oidc_proto_state_get_original_url(*proto_state)),",
          "849:   oidc_proto_state_destroy(*proto_state);",
          "850:   return FALSE;",
          "851:  }",
          "",
          "[Removed Lines]",
          "848:       DONE);",
          "",
          "[Added Lines]",
          "848:       OK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1683:    \"    </script>\\n\", oidc_get_redirect_uri(r, c));",
          "1685:  return oidc_util_html_send(r, \"Redirecting...\", java_script, NULL, NULL,",
          "1687: }",
          "",
          "[Removed Lines]",
          "1686:    DONE);",
          "",
          "[Added Lines]",
          "1686:    OK);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1702:  }",
          "1703:  return oidc_util_html_send_error(r, c->error_template,",
          "1704:    apr_psprintf(r->pool, \"OpenID Connect Provider error: %s\", error),",
          "1706: }",
          "",
          "[Removed Lines]",
          "1705:    error_description, DONE);",
          "",
          "[Added Lines]",
          "1705:    error_description, OK);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2258:   if (oidc_post_preserve_javascript(r, url, NULL, NULL) == TRUE)",
          "2262:   oidc_util_hdr_out_location_set(r, url);",
          "",
          "[Removed Lines]",
          "2259:    return DONE;",
          "",
          "[Added Lines]",
          "2259:    return OK;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2358:  return oidc_util_html_send(r, \"OpenID Connect Provider Discovery\",",
          "2360: }",
          "",
          "[Removed Lines]",
          "2359:    html_head, javascript_method, s, DONE);",
          "",
          "[Added Lines]",
          "2359:    html_head, javascript_method, s, OK);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2806:    return oidc_util_http_send(r,",
          "2807:      (const char *) &oidc_transparent_pixel,",
          "2808:      sizeof(oidc_transparent_pixel), OIDC_CONTENT_TYPE_IMAGE_PNG,",
          "2810:   }",
          "2813:   return oidc_util_html_send(r, \"Logged Out\", NULL, NULL,",
          "2815:  }",
          "2818:  if (url == NULL)",
          "2819:   return oidc_util_html_send(r, \"Logged Out\", NULL, NULL,",
          "2823:  oidc_util_hdr_out_location_set(r, url);",
          "",
          "[Removed Lines]",
          "2809:      DONE);",
          "2814:     \"<p>Logged Out</p>\", DONE);",
          "2820:     \"<p>Logged Out</p>\", DONE);",
          "",
          "[Added Lines]",
          "2809:      OK);",
          "2814:     \"<p>Logged Out</p>\", OK);",
          "2820:     \"<p>Logged Out</p>\", OK);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2997:  oidc_cache_set_sid(r, sid, NULL, 0);",
          "2998:  oidc_cache_set_session(r, uuid, NULL, 0);",
          "3002: out:",
          "",
          "[Removed Lines]",
          "3000:  rc = DONE;",
          "",
          "[Added Lines]",
          "3000:  rc = OK;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3154:  jwks = apr_psprintf(r->pool, \"%s ] }\", jwks);",
          "3156:  return oidc_util_http_send(r, jwks, strlen(jwks), OIDC_CONTENT_TYPE_JSON,",
          "3158: }",
          "3160: static int oidc_handle_session_management_iframe_op(request_rec *r, oidc_cfg *c,",
          "",
          "[Removed Lines]",
          "3157:    DONE);",
          "",
          "[Added Lines]",
          "3157:    OK);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3222:  if (session_state == NULL) {",
          "3223:   oidc_warn(r,",
          "3224:     \"no session_state found in the session; the OP does probably not support session management!?\");",
          "3226:  }",
          "3228:  char *s_poll_interval = NULL;",
          "",
          "[Removed Lines]",
          "3225:   return DONE;",
          "",
          "[Added Lines]",
          "3225:   return OK;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3236:    session_state, op_iframe_id, poll_interval, redirect_uri,",
          "3237:    redirect_uri);",
          "3240: }",
          "",
          "[Removed Lines]",
          "3239:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
          "",
          "[Added Lines]",
          "3239:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, OK);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3420:  oidc_cache_set_request_uri(r, request_ref, NULL, 0);",
          "3423: }",
          "",
          "[Removed Lines]",
          "3422:  return oidc_util_http_send(r, jwt, strlen(jwt), OIDC_CONTENT_TYPE_JWT, DONE);",
          "",
          "[Added Lines]",
          "3422:  return oidc_util_http_send(r, jwt, strlen(jwt), OIDC_CONTENT_TYPE_JWT, OK);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3441:  oidc_cache_set_access_token(r, access_token, NULL, 0);",
          "3444: }",
          "3446: #define OIDC_INFO_PARAM_ACCESS_TOKEN_REFRESH_INTERVAL \"access_token_refresh_interval\"",
          "",
          "[Removed Lines]",
          "3443:  return DONE;",
          "",
          "[Added Lines]",
          "3443:  return OK;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3607:  return oidc_util_http_send(r, r_value, strlen(r_value),",
          "3608:    OIDC_CONTENT_TYPE_JSON,",
          "3610: }",
          "",
          "[Removed Lines]",
          "3609:    DONE);",
          "",
          "[Added Lines]",
          "3609:    OK);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3679:   if (session->remote_user == NULL)",
          "3680:    return HTTP_UNAUTHORIZED;",
          "3685:  } else if ((r->args == NULL) || (apr_strnatcmp(r->args, \"\") == 0)) {",
          "",
          "[Removed Lines]",
          "3683:   return oidc_handle_existing_session(r, c, session);",
          "",
          "[Added Lines]",
          "3683:   oidc_handle_existing_session(r, c, session);",
          "3685:   return oidc_handle_info_request(r, c, session);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4083: int oidc_content_handler(request_rec *r) {",
          "4084:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "4085:    &auth_openidc_module);",
          "4106: }",
          "4108: extern const command_rec oidc_config_cmds[];",
          "",
          "[Removed Lines]",
          "4087:  int rc = DECLINED;",
          "4088:  if (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c))) {",
          "4090:   if (oidc_util_request_has_parameter(r,",
          "4091:     OIDC_REDIRECT_URI_REQUEST_INFO)) {",
          "4093:    oidc_session_t *session = NULL;",
          "4094:    oidc_session_load(r, &session);",
          "4097:    rc = oidc_handle_info_request(r, c, session);",
          "4100:    oidc_session_free(r, session);",
          "4102:   }",
          "4104:  }",
          "4105:  return rc;",
          "",
          "[Added Lines]",
          "4088:  return oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c)) ?",
          "4089:    OK : DECLINED;",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: #ifndef USE_URANDOM",
          "82:  rv = apr_generate_random_bytes(buf, length);",
          "83:  oidc_debug(r, \"apr_generate_random_bytes returned\");",
          "",
          "[Removed Lines]",
          "81:  oidc_debug(r, \"apr_generate_random_bytes call for %\" APR_SIZE_T_FMT \" bytes\", length);",
          "",
          "[Added Lines]",
          "81:  oidc_debug(r,",
          "82:    \"apr_generate_random_bytes call for %\" APR_SIZE_T_FMT \" bytes\",",
          "83:    length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "604:    \"    </form>\\n\");",
          "606:  return oidc_util_html_send(r, \"Submitting...\", NULL,",
          "608: }",
          "610: void add_auth_request_params(request_rec *r, apr_table_t *params,",
          "",
          "[Removed Lines]",
          "607:    \"document.forms[0].submit\", html_body, DONE);",
          "",
          "[Added Lines]",
          "609:    \"document.forms[0].submit\", html_body, OK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "648:    oidc_proto_state_to_string(r, proto_state), code_challenge,",
          "649:    auth_request_params, path_scope);",
          "652:  char *authorization_request = NULL;",
          "",
          "[Removed Lines]",
          "651:  int rv = DONE;",
          "",
          "[Added Lines]",
          "653:  int rv = OK;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2456:    \"    </form>\\n\";",
          "2458:  return oidc_util_html_send(r, \"Submitting...\", java_script, \"postOnLoad\",",
          "2460: }",
          "",
          "[Removed Lines]",
          "2459:    html_body, DONE);",
          "",
          "[Added Lines]",
          "2461:    html_body, OK);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a22e6a27c7a3fe458ec9cb6b34881d7b7ce82ed9",
      "candidate_info": {
        "commit_hash": "a22e6a27c7a3fe458ec9cb6b34881d7b7ce82ed9",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/a22e6a27c7a3fe458ec9cb6b34881d7b7ce82ed9",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "make cleaning of expired state cookies log with a warning\n\n- rather than an error\n- thanks Pavel Drobov\n- bump to 2.4.1rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:        json_int_t ts = oidc_proto_state_get_timestamp(",
          "758:          proto_state);",
          "759:        if (apr_time_now() > ts + apr_time_from_sec(c->state_timeout)) {",
          "761:           \"state (%s) has expired (original_url=%s)\",",
          "762:           cookieName,",
          "763:           oidc_proto_state_get_original_url(",
          "",
          "[Removed Lines]",
          "760:         oidc_error(r,",
          "",
          "[Added Lines]",
          "760:         oidc_warn(r,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e894744c7e3f2b91eb9ea54e97dfbfa6ea5760f",
      "candidate_info": {
        "commit_hash": "6e894744c7e3f2b91eb9ea54e97dfbfa6ea5760f",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6e894744c7e3f2b91eb9ea54e97dfbfa6ea5760f",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c",
          "src/proto.c"
        ],
        "message": "enforce OIDCIDTokenSignedResponseAlg and OIDCUserInfoSignedResponseAlg\n\nsee #435; bump to 2.4.1rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.1rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2578:     oidc_set_signed_response_alg,",
          "2579:     (void *)APR_OFFSETOF(oidc_cfg, provider.id_token_signed_response_alg),",
          "2580:     RSRC_CONF,",
          "2582:   AP_INIT_TAKE1(OIDCIDTokenEncryptedResponseAlg,",
          "2583:     oidc_set_encrypted_response_alg,",
          "2584:     (void *)APR_OFFSETOF(oidc_cfg, provider.id_token_encrypted_response_alg),",
          "",
          "[Removed Lines]",
          "2581:     \"The algorithm that the OP should use to sign the id_token (used only in dynamic client registration); must be one of [RS256|RS384|RS512|PS256|PS384|PS512|HS256|HS384|HS512]\"),",
          "",
          "[Added Lines]",
          "2581:     \"The algorithm that the OP must use to sign the ID token.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "666:  oidc_jwks_uri_t jwks_uri = { provider->jwks_uri,",
          "667:    provider->jwks_refresh_interval, provider->ssl_validate_server };",
          "668:  if (oidc_proto_jwt_verify(r, c, jwt, &jwks_uri,",
          "670:   oidc_error(r, \"state JWT could not be validated, aborting\");",
          "671:   oidc_jwt_destroy(jwt);",
          "672:   return FALSE;",
          "",
          "[Removed Lines]",
          "669:    oidc_util_merge_symmetric_key(r->pool, NULL, jwk)) == FALSE) {",
          "",
          "[Added Lines]",
          "669:    oidc_util_merge_symmetric_key(r->pool, NULL, jwk), NULL) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2894:  oidc_jwks_uri_t jwks_uri = { provider->jwks_uri,",
          "2895:    provider->jwks_refresh_interval, provider->ssl_validate_server };",
          "2896:  if (oidc_proto_jwt_verify(r, cfg, jwt, &jwks_uri,",
          "2899:   oidc_error(r, \"id_token signature could not be validated, aborting\");",
          "2900:   goto out;",
          "",
          "[Removed Lines]",
          "2897:    oidc_util_merge_symmetric_key(r->pool, NULL, jwk)) == FALSE) {",
          "",
          "[Added Lines]",
          "2897:    oidc_util_merge_symmetric_key(r->pool, NULL, jwk),",
          "2898:    provider->id_token_signed_response_alg) == FALSE) {",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "639: apr_array_header_t *oidc_proto_supported_flows(apr_pool_t *pool);",
          "640: apr_byte_t oidc_proto_flow_is_supported(apr_pool_t *pool, const char *flow);",
          "641: apr_byte_t oidc_proto_validate_authorization_response(request_rec *r, const char *response_type, const char *requested_response_mode, char **code, char **id_token, char **access_token, char **token_type, const char *used_response_mode);",
          "643: apr_byte_t oidc_proto_validate_jwt(request_rec *r, oidc_jwt_t *jwt, const char *iss, apr_byte_t exp_is_mandatory, apr_byte_t iat_is_mandatory, int iat_slack, int token_binding_policy);",
          "644: apr_byte_t oidc_proto_generate_nonce(request_rec *r, char **nonce, int len);",
          "645: apr_byte_t oidc_proto_validate_aud_and_azp(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, oidc_jwt_payload_t *id_token_payload);",
          "",
          "[Removed Lines]",
          "642: apr_byte_t oidc_proto_jwt_verify(request_rec *r, oidc_cfg *cfg, oidc_jwt_t *jwt, const oidc_jwks_uri_t *jwks_uri, apr_hash_t *symmetric_keys);",
          "",
          "[Added Lines]",
          "642: apr_byte_t oidc_proto_jwt_verify(request_rec *r, oidc_cfg *cfg, oidc_jwt_t *jwt, const oidc_jwks_uri_t *jwks_uri, apr_hash_t *symmetric_keys, const char *alg);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "642:    c->provider.jwks_refresh_interval, c->oauth.ssl_validate_server };",
          "643:  if (oidc_proto_jwt_verify(r, c, jwt, &jwks_uri,",
          "644:    oidc_util_merge_key_sets(r->pool, c->oauth.verify_public_keys,",
          "646:   oidc_error(r,",
          "647:     \"JWT access token signature could not be validated, aborting\");",
          "648:   oidc_jwt_destroy(jwt);",
          "",
          "[Removed Lines]",
          "645:      c->oauth.verify_shared_keys)) == FALSE) {",
          "",
          "[Added Lines]",
          "645:      c->oauth.verify_shared_keys), NULL) == FALSE) {",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1532: apr_byte_t oidc_proto_jwt_verify(request_rec *r, oidc_cfg *cfg, oidc_jwt_t *jwt,",
          "1535:  oidc_jose_error_t err;",
          "1539:  if (jwks_uri->url == NULL) {",
          "",
          "[Removed Lines]",
          "1533:   const oidc_jwks_uri_t *jwks_uri, apr_hash_t *static_keys) {",
          "1536:  apr_hash_t *dynamic_keys = apr_hash_make(r->pool);",
          "",
          "[Added Lines]",
          "1533:   const oidc_jwks_uri_t *jwks_uri, apr_hash_t *static_keys,",
          "1534:   const char *alg) {",
          "1537:  apr_hash_t *dynamic_keys = NULL;",
          "1539:  if (alg != NULL) {",
          "1540:   if (apr_strnatcmp(jwt->header.alg, alg) != 0) {",
          "1541:    oidc_error(r,",
          "1542:      \"JWT was not signed with the expected configured algorithm: %s != %s\",",
          "1543:      jwt->header.alg, alg);",
          "1544:    return FALSE;",
          "1545:   }",
          "1546:  }",
          "1548:  dynamic_keys = apr_hash_make(r->pool);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1650:   oidc_jwks_uri_t jwks_uri = { provider->jwks_uri,",
          "1651:     provider->jwks_refresh_interval, provider->ssl_validate_server };",
          "1652:   if (oidc_proto_jwt_verify(r, cfg, *jwt, &jwks_uri,",
          "1655:    oidc_error(r,",
          "1656:      \"id_token signature could not be validated, aborting\");",
          "",
          "[Removed Lines]",
          "1653:     oidc_util_merge_symmetric_key(r->pool, NULL, jwk)) == FALSE) {",
          "",
          "[Added Lines]",
          "1665:     oidc_util_merge_symmetric_key(r->pool, NULL, jwk),",
          "1666:     provider->id_token_signed_response_alg) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2150:   oidc_jwks_uri_t jwks_uri = { provider->jwks_uri,",
          "2151:     provider->jwks_refresh_interval, provider->ssl_validate_server };",
          "2152:   if (oidc_proto_jwt_verify(r, cfg, jwt, &jwks_uri,",
          "2155:    oidc_error(r, \"JWT signature could not be validated, aborting\");",
          "2156:    oidc_jwt_destroy(jwt);",
          "",
          "[Removed Lines]",
          "2153:     oidc_util_merge_symmetric_key(r->pool, NULL, jwk)) == FALSE) {",
          "",
          "[Added Lines]",
          "2166:     oidc_util_merge_symmetric_key(r->pool, NULL, jwk),",
          "2167:     provider->userinfo_signed_response_alg) == FALSE) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e90e5893c7af6e6dac9d8dbc2c26b79696bd1923",
      "candidate_info": {
        "commit_hash": "e90e5893c7af6e6dac9d8dbc2c26b79696bd1923",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e90e5893c7af6e6dac9d8dbc2c26b79696bd1923",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c"
        ],
        "message": "avoid decoding non-form-encoded POST data; closes #443\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc19],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc20],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1523:  const apr_array_header_t *arr = NULL;",
          "1524:  const apr_table_entry_t *elts = NULL;",
          "1525:  int i = 0;",
          "1528:   goto end;",
          "1530:  if (oidc_util_read(r, &data) != TRUE)",
          "",
          "[Removed Lines]",
          "1527:  if (r->method_number != M_POST)",
          "",
          "[Added Lines]",
          "1526:  const char *content_type = NULL;",
          "1528:  content_type = oidc_util_hdr_in_content_type_get(r);",
          "1529:  if ((r->method_number != M_POST) || (apr_strnatcmp(content_type,",
          "1530:    OIDC_CONTENT_TYPE_FORM_ENCODED) != 0))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1543:   if (apr_strnatcmp(elts[i].key, strip_param_name) != 0)",
          "1544:    oidc_userdata_set_post_param(r, elts[i].key, elts[i].val);",
          "1548:  return rc;",
          "1549: }",
          "",
          "[Removed Lines]",
          "1546: end:",
          "",
          "[Added Lines]",
          "1549:  end:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "081362401d4c7dd655c6f74fa8f9b53c75323d44",
      "candidate_info": {
        "commit_hash": "081362401d4c7dd655c6f74fa8f9b53c75323d44",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/081362401d4c7dd655c6f74fa8f9b53c75323d44",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "document logout_on_error and bump version\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc21],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc22],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    }
  ]
}