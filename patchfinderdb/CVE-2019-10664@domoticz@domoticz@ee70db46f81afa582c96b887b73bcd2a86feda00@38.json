{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a402ae901c4be5dbce1ae0815b74b50aea97784",
      "candidate_info": {
        "commit_hash": "3a402ae901c4be5dbce1ae0815b74b50aea97784",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3a402ae901c4be5dbce1ae0815b74b50aea97784",
        "files": [
          "appversion.default"
        ],
        "message": "Bumped version",
        "before_after_code_files": [
          "appversion.default||appversion.default"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "appversion.default||appversion.default": [
          "File: appversion.default -> appversion.default",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #define APPHASH \"b97777b\"",
          "3: #define APPDATE 1478691222",
          "",
          "[Removed Lines]",
          "1: #define APPVERSION 5876",
          "",
          "[Added Lines]",
          "1: #define APPVERSION 9700",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cad0ff95765ccf66a7cf72246089d5566a0807a",
      "candidate_info": {
        "commit_hash": "7cad0ff95765ccf66a7cf72246089d5566a0807a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/7cad0ff95765ccf66a7cf72246089d5566a0807a",
        "files": [
          "hardware/plugins/PluginTransports.cpp"
        ],
        "message": "ICMP: Supress Windows 'handle' error reporting on disconnect (ignored anyway)",
        "before_after_code_files": [
          "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp": [
          "File: hardware/plugins/PluginTransports.cpp -> hardware/plugins/PluginTransports.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:    m_Socket->shutdown(boost::asio::ip::icmp::socket::shutdown_both, e);",
          "877:    if (e)",
          "878:    {",
          "880:     if (e.value() != boost::asio::error::not_connected)  // Linux always reports error 107, Windows does not",
          "881: #endif",
          "882:      _log.Log(LOG_ERROR, \"(%s) Socket Shutdown Error: %d, %s\", pPlugin->m_Name.c_str(), e.value(), e.message().c_str());",
          "",
          "[Removed Lines]",
          "879: #ifndef WIN32",
          "",
          "[Added Lines]",
          "879: #ifdef WIN32",
          "880:     if (e.value() != 10009)  // Windows can report 10009, The file handle supplied is not valid",
          "881: #else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e726266e9d860e7ff9daf02dc1c5926ea91ae95d",
      "candidate_info": {
        "commit_hash": "e726266e9d860e7ff9daf02dc1c5926ea91ae95d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e726266e9d860e7ff9daf02dc1c5926ea91ae95d",
        "files": [
          "hardware/ColorSwitch.h",
          "hardware/EvohomeBase.h",
          "hardware/EvohomeRadio.cpp",
          "hardware/EvohomeScript.cpp",
          "hardware/EvohomeWeb.cpp",
          "hardware/OpenZWave.cpp",
          "hardware/hardwaretypes.h",
          "main/mainworker.cpp"
        ],
        "message": "corrected boost::lexical_cast conversion to unsigned int type Changed union for EvoHome to normal structs Added some serialize functions to a few structs, some still need to be done",
        "before_after_code_files": [
          "hardware/ColorSwitch.h||hardware/ColorSwitch.h",
          "hardware/EvohomeBase.h||hardware/EvohomeBase.h",
          "hardware/EvohomeRadio.cpp||hardware/EvohomeRadio.cpp",
          "hardware/EvohomeScript.cpp||hardware/EvohomeScript.cpp",
          "hardware/EvohomeWeb.cpp||hardware/EvohomeWeb.cpp",
          "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp",
          "hardware/hardwaretypes.h||hardware/hardwaretypes.h",
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/ColorSwitch.h||hardware/ColorSwitch.h": [
          "File: hardware/ColorSwitch.h -> hardware/ColorSwitch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  uint8_t command;",
          "62:  uint32_t value;  // Value of command",
          "63:  _tColor color;   // Color",
          "64:  _tColorSwitch()",
          "65:  {",
          "66:   id = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  template <class Archive>",
          "66:  void serialize(Archive & ar)",
          "67:  {",
          "68:   ar & cereal::make_nvp(\"len\", len);",
          "69:   ar & cereal::make_nvp(\"type\", type);",
          "70:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "71:   ar & cereal::make_nvp(\"id\", id);",
          "72:   ar & cereal::make_nvp(\"dunit\", dunit);",
          "73:   ar & cereal::make_nvp(\"command\", command);",
          "74:   ar & cereal::make_nvp(\"value\", value);",
          "75:   ar & cereal::make_nvp(\"color\", color);",
          "76:  }",
          "",
          "---------------"
        ],
        "hardware/EvohomeBase.h||hardware/EvohomeBase.h": [
          "File: hardware/EvohomeBase.h -> hardware/EvohomeBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:  CEvohomeDateTime(const unsigned char* msg, unsigned char nOfs){Decode(msg,nOfs);}",
          "195:  ~CEvohomeDateTime(){}",
          "199:  template <class T> static unsigned char DecodeTime(T &out, const unsigned char* msg, unsigned char nOfs)",
          "200:  {",
          "",
          "[Removed Lines]",
          "197:  template <class T> CEvohomeDateTime& operator = (const T &in){year=in.year;month=in.month;day=in.day;hrs=in.hrs;mins=in.mins;return *this;}",
          "",
          "[Added Lines]",
          "197:  template <class T> CEvohomeDateTime& operator = (const T &in){year=in->year;month=in->month;day=in->day;hrs=in->hrs;mins=in->mins;return *this;}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:  template <class T> static std::string GetISODate(const T &in)",
          "231:  {",
          "233:    return \"\";",
          "234:   char szTmp[256];",
          "236:   return szTmp;",
          "237:  }",
          "",
          "[Removed Lines]",
          "232:   if(in.year==0xFFFF)",
          "235:   sprintf(szTmp,std::string(\"%d-%02d-%02d\").append((in.hrs!=0xFF)?\"T%02d:%02d:00\":\"T00:00:00\").c_str(),in.year,in.month,in.day,in.hrs,in.mins);",
          "",
          "[Added Lines]",
          "232:   if(in->year==0xFFFF)",
          "235:   sprintf(szTmp,std::string(\"%d-%02d-%02d\").append((in->hrs!=0xFF)?\"T%02d:%02d:00\":\"T00:00:00\").c_str(),in->year,in->month,in->day,in->hrs,in->mins);",
          "",
          "---------------"
        ],
        "hardware/EvohomeRadio.cpp||hardware/EvohomeRadio.cpp": [
          "File: hardware/EvohomeRadio.cpp -> hardware/EvohomeRadio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: {",
          "208:  if(!pdata)",
          "209:   return false;",
          "211:  switch (pdata[1])",
          "212:  {",
          "213:   case pTypeEvohome:",
          "217:    break;",
          "218:   case pTypeEvohomeZone:",
          "222:    break;",
          "223:   case pTypeEvohomeWater:",
          "227:    break;",
          "228:   case pTypeEvohomeRelay:",
          "232:    break;",
          "233:  }",
          "234:  return true;",
          "",
          "[Removed Lines]",
          "210:  REVOBUF *tsen=(REVOBUF*)pdata;",
          "214:    if (length<sizeof(REVOBUF::_tEVOHOME1))",
          "215:     return false;",
          "216:    AddSendQueue(CEvohomeMsg(CEvohomeMsg::pktwrt,GetControllerID(),cmdControllerMode).Add(ConvertMode(m_dczToEvoControllerMode,tsen->EVOHOME1.status)).Add((tsen->EVOHOME1.mode==1)?CEvohomeDateTime(tsen->EVOHOME1):CEvohomeDateTime()).Add(tsen->EVOHOME1.mode));",
          "219:    if (length<sizeof(REVOBUF::_tEVOHOME2))",
          "220:     return false;",
          "221:    AddSendQueue(CEvohomeMsg(CEvohomeMsg::pktwrt,GetControllerID(),cmdSetpointOverride).Add((uint8_t)(tsen->EVOHOME2.zone-1)).Add(tsen->EVOHOME2.temperature).Add(ConvertMode(m_dczToEvoZoneMode,tsen->EVOHOME2.mode)).Add((uint16_t)0xFFFF).Add((uint8_t)0xFF).Add_if(CEvohomeDateTime(tsen->EVOHOME2),(tsen->EVOHOME2.mode==2)));",
          "224:    if (length<sizeof(REVOBUF::_tEVOHOME2))",
          "225:     return false;",
          "226:    AddSendQueue(CEvohomeMsg(CEvohomeMsg::pktwrt,GetControllerID(),cmdDHWState).Add((uint8_t)(tsen->EVOHOME2.zone-1)).Add((uint8_t)tsen->EVOHOME2.temperature).Add(ConvertMode(m_dczToEvoZoneMode,tsen->EVOHOME2.mode)).Add((uint16_t)0).Add((uint8_t)0).Add_if(CEvohomeDateTime(tsen->EVOHOME2),(tsen->EVOHOME2.mode==2)));",
          "229:    if (length<sizeof(REVOBUF::_tEVOHOME3))",
          "230:     return false;",
          "231:    SetRelayHeatDemand(tsen->EVOHOME3.devno,tsen->EVOHOME3.demand);",
          "",
          "[Added Lines]",
          "213:    {",
          "214:     if (length < sizeof(_tEVOHOME1))",
          "215:      return false;",
          "216:     _tEVOHOME1 *tsen = (_tEVOHOME1*)pdata;",
          "217:     AddSendQueue(",
          "218:      CEvohomeMsg(",
          "219:       CEvohomeMsg::pktwrt,",
          "220:       GetControllerID(),",
          "221:       cmdControllerMode).Add(",
          "222:        ConvertMode(",
          "223:         m_dczToEvoControllerMode,",
          "224:         tsen->status",
          "225:        )",
          "226:       ).Add(",
          "227:        (tsen->mode == 1) ? CEvohomeDateTime(tsen) : CEvohomeDateTime()",
          "228:       ).Add(",
          "229:        tsen->mode",
          "230:       )",
          "231:     );",
          "232:    }",
          "235:    {",
          "236:     if (length < sizeof(_tEVOHOME2))",
          "237:      return false;",
          "238:     _tEVOHOME2 *tsen = (_tEVOHOME2*)pdata;",
          "239:     AddSendQueue(",
          "240:      CEvohomeMsg(",
          "241:       CEvohomeMsg::pktwrt,",
          "242:       GetControllerID(),",
          "243:       cmdSetpointOverride).Add(",
          "244:        (uint8_t)(tsen->zone - 1)",
          "245:       ).Add(",
          "246:        tsen->temperature",
          "247:       ).Add(",
          "248:        ConvertMode(",
          "249:         m_dczToEvoZoneMode,",
          "250:         tsen->mode",
          "251:        )",
          "252:       ).Add(",
          "253:        (uint16_t)0xFFFF",
          "254:       ).Add(",
          "255:        (uint8_t)0xFF",
          "256:       ).Add_if(",
          "257:        CEvohomeDateTime(tsen),",
          "258:        (tsen->mode == 2)",
          "259:       )",
          "260:     );",
          "261:    }",
          "264:    {",
          "265:     if (length < sizeof(_tEVOHOME2))",
          "266:      return false;",
          "267:     _tEVOHOME2 *tsen = (_tEVOHOME2*)pdata;",
          "268:     AddSendQueue(",
          "269:      CEvohomeMsg(",
          "270:       CEvohomeMsg::pktwrt,",
          "271:       GetControllerID(),",
          "272:       cmdDHWState",
          "273:      ).Add(",
          "274:       (uint8_t)(tsen->zone - 1)",
          "275:      ).Add(",
          "276:       (uint8_t)tsen->temperature).Add(",
          "277:        ConvertMode(",
          "278:         m_dczToEvoZoneMode,",
          "279:         tsen->mode)",
          "280:       ).Add(",
          "281:        (uint16_t)0",
          "282:       ).Add(",
          "283:        (uint8_t)0",
          "284:       ).Add_if(",
          "285:        CEvohomeDateTime(tsen),",
          "286:        (tsen->mode == 2)",
          "287:       )",
          "288:     );",
          "289:    }",
          "292:    {",
          "293:     if (length < sizeof(_tEVOHOME3))",
          "294:      return false;",
          "295:     _tEVOHOME3 *tsen = (_tEVOHOME3*)pdata;",
          "296:     SetRelayHeatDemand(tsen->devno, tsen->demand);",
          "297:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:     Log(true, LOG_STATUS, \"evohome: Send Temp Zone msg Zone: %d DeviceID: 0x%x Name:%s Temp:%f \", i, ID, SensorName.c_str(), dbTemp);",
          "438:     AddSendQueue(CEvohomeMsg(CEvohomeMsg::pktinf, 0, ID, cmdZoneTemp).Add((uint8_t)0).Add(static_cast<int16_t>(dbTemp*100.0)));",
          "449:    }",
          "450:   }",
          "451:  }",
          "",
          "[Removed Lines]",
          "440:     REVOBUF tsen;",
          "441:     memset(&tsen, 0, sizeof(REVOBUF));",
          "442:     tsen.EVOHOME2.len = sizeof(tsen.EVOHOME2) - 1;",
          "443:     tsen.EVOHOME2.type = pTypeEvohomeZone;",
          "444:     tsen.EVOHOME2.subtype = sTypeEvohomeZone;",
          "445:     tsen.EVOHOME2.zone = i;",
          "446:     tsen.EVOHOME2.temperature = static_cast<uint16_t>(dbTemp * 100);",
          "447:     RFX_SETID3(ID, tsen.EVOHOME2.id1, tsen.EVOHOME2.id2, tsen.EVOHOME2.id3);",
          "448:     sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"Zone Temp\", -1);",
          "",
          "[Added Lines]",
          "506:     _tEVOHOME2 tsen;",
          "507:     memset(&tsen, 0, sizeof(_tEVOHOME2));",
          "508:     tsen.len = sizeof(_tEVOHOME2) - 1;",
          "509:     tsen.type = pTypeEvohomeZone;",
          "510:     tsen.subtype = sTypeEvohomeZone;",
          "511:     tsen.zone = i;",
          "512:     tsen.temperature = static_cast<uint16_t>(dbTemp * 100);",
          "513:     RFX_SETID3(ID, tsen.id1, tsen.id2, tsen.id3);",
          "514:     sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Zone Temp\", -1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "767:   Log(false,LOG_ERROR,\"evohome: %s: Error decoding zone setpoint payload, size incorrect: %d\", tag, msg.payloadsize);",
          "768:   return false;",
          "769:  }",
          "779:  for (int i = 0 ; i < msg.payloadsize ; i += 3) {",
          "783:   {",
          "784:    Log(true,LOG_STATUS,\"evohome: %s: Warning setpoint not set for zone %d\",tag, msg.payload[0]);",
          "785:    continue;",
          "786:   }",
          "",
          "[Removed Lines]",
          "770:  REVOBUF tsen;",
          "771:  memset(&tsen,0,sizeof(REVOBUF));",
          "772:  tsen.EVOHOME2.len=sizeof(tsen.EVOHOME2)-1;",
          "773:  tsen.EVOHOME2.type=pTypeEvohomeZone;",
          "774:  tsen.EVOHOME2.subtype=sTypeEvohomeZone;",
          "775:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME2.id1,tsen.EVOHOME2.id2,tsen.EVOHOME2.id3) //this message can be received from other than the controller...is zone always valid though? (when a local override is in action we get different values one from the controller the other from the zone valve but the zone number is still ok)",
          "776:  tsen.EVOHOME2.mode=zmNotSp;",
          "777:  tsen.EVOHOME2.updatetype=updSetPoint;//setpoint",
          "780:   tsen.EVOHOME2.zone = msg.payload[i]+1;",
          "781:   tsen.EVOHOME2.temperature =  msg.payload[i + 1] << 8 | msg.payload[i + 2];",
          "782:   if(tsen.EVOHOME2.temperature==0x7FFF)",
          "787:   SetMaxZoneCount(tsen.EVOHOME2.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "788:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d: %d\", tag, tsen.EVOHOME2.zone, tsen.EVOHOME2.temperature);",
          "",
          "[Added Lines]",
          "836:  _tEVOHOME2 tsen;",
          "837:  memset(&tsen,0,sizeof(_tEVOHOME2));",
          "838:  tsen.len=sizeof(_tEVOHOME2)-1;",
          "839:  tsen.type=pTypeEvohomeZone;",
          "840:  tsen.subtype=sTypeEvohomeZone;",
          "841:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3) //this message can be received from other than the controller...is zone always valid though? (when a local override is in action we get different values one from the controller the other from the zone valve but the zone number is still ok)",
          "842:  tsen.mode=zmNotSp;",
          "843:  tsen.updatetype=updSetPoint;//setpoint",
          "846:   tsen.zone = msg.payload[i]+1;",
          "847:   tsen.temperature =  msg.payload[i + 1] << 8 | msg.payload[i + 2];",
          "848:   if(tsen.temperature==0x7FFF)",
          "853:   SetMaxZoneCount(tsen.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "854:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d: %d\", tag, tsen.zone, tsen.temperature);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "795:   if (msg.GetID(0) == GetControllerID())",
          "797:   else if (AllSensors)",
          "798:   {",
          "799:    char zstrname[40];",
          "805:   }",
          "806:  }",
          "808:  return true;",
          "809: }",
          "",
          "[Removed Lines]",
          "796:    sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"Setpoint\", -1);",
          "801:    sprintf(zstrname, \"Zone %d\", tsen.EVOHOME2.zone);",
          "802:    tsen.EVOHOME2.zone += 12; //zone number offset by 12",
          "803:    Log(true, LOG_STATUS, \"evohome: %s: Setting: %d (0x%x): %d\", tag, tsen.EVOHOME2.zone, msg.GetID(0), tsen.EVOHOME2.temperature);",
          "804:    sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, zstrname, -1);",
          "",
          "[Added Lines]",
          "862:    sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Setpoint\", -1);",
          "866:    sprintf(zstrname, \"Zone %d\", tsen.zone);",
          "867:    tsen.zone += 12; //zone number offset by 12",
          "868:    Log(true, LOG_STATUS, \"evohome: %s: Setting: %d (0x%x): %d\", tag, tsen.zone, msg.GetID(0), tsen.temperature);",
          "869:    sDecodeRXMessage(this, (const unsigned char *)&tsen, zstrname, -1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "825:   Log(false,LOG_ERROR,\"evohome: %s: Error decoding payload unknown size: %d\", tag, msg.payloadsize);",
          "826:   return false;",
          "827:  }",
          "837:  {",
          "839:   return false;",
          "840:  }",
          "844:  {",
          "846:   return true;",
          "847:  }",
          "850:  {",
          "852:   return true;",
          "853:  }",
          "854:  int nMode=ConvertMode(m_evoToDczOverrideMode,msg.payload[3]);",
          "",
          "[Removed Lines]",
          "828:  REVOBUF tsen;",
          "829:  memset(&tsen,0,sizeof(REVOBUF));",
          "830:  tsen.EVOHOME2.len=sizeof(tsen.EVOHOME2)-1;",
          "831:  tsen.EVOHOME2.type=pTypeEvohomeZone;",
          "832:  tsen.EVOHOME2.subtype=sTypeEvohomeZone;",
          "833:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME2.id1,tsen.EVOHOME2.id2,tsen.EVOHOME2.id3) //will be id of controller so must use zone number",
          "835:  tsen.EVOHOME2.zone = msg.payload[0]+1;//controller is 0 so let our zones start from 1...",
          "836:  if(tsen.EVOHOME2.zone>m_nMaxZones)",
          "838:   Log(false,LOG_ERROR,\"evohome: %s: Error zone number out of bounds: %d\", tag, tsen.EVOHOME2.zone);",
          "841:  tsen.EVOHOME2.updatetype = updSetPoint;//setpoint",
          "842:  tsen.EVOHOME2.temperature = msg.payload[1] << 8 | msg.payload[2];",
          "843:  if(tsen.EVOHOME2.temperature==0x7FFF)",
          "845:   Log(true,LOG_STATUS,\"evohome: %s: Warning setpoint not set for zone %d\",tag, tsen.EVOHOME2.zone);",
          "848:  SetMaxZoneCount(tsen.EVOHOME2.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "849:  if(m_ZoneOverrideLocal[tsen.EVOHOME2.zone-1]==zmWind || m_ZoneOverrideLocal[tsen.EVOHOME2.zone-1]==zmLocal)",
          "851:   Log(true,LOG_STATUS,\"evohome: %s: A local override is in effect for zone %d\",tag,tsen.EVOHOME2.zone);",
          "",
          "[Added Lines]",
          "892:  _tEVOHOME2 tsen;",
          "893:  memset(&tsen,0,sizeof(_tEVOHOME2));",
          "894:  tsen.len=sizeof(_tEVOHOME2)-1;",
          "895:  tsen.type=pTypeEvohomeZone;",
          "896:  tsen.subtype=sTypeEvohomeZone;",
          "897:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3) //will be id of controller so must use zone number",
          "899:  tsen.zone = msg.payload[0]+1;//controller is 0 so let our zones start from 1...",
          "900:  if(tsen.zone>m_nMaxZones)",
          "902:   Log(false,LOG_ERROR,\"evohome: %s: Error zone number out of bounds: %d\", tag, tsen.zone);",
          "905:  tsen.updatetype = updSetPoint;//setpoint",
          "906:  tsen.temperature = msg.payload[1] << 8 | msg.payload[2];",
          "907:  if(tsen.temperature==0x7FFF)",
          "909:   Log(true,LOG_STATUS,\"evohome: %s: Warning setpoint not set for zone %d\",tag, tsen.zone);",
          "912:  SetMaxZoneCount(tsen.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "913:  if(m_ZoneOverrideLocal[tsen.zone-1]==zmWind || m_ZoneOverrideLocal[tsen.zone-1]==zmLocal)",
          "915:   Log(true,LOG_STATUS,\"evohome: %s: A local override is in effect for zone %d\",tag,tsen.zone);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "857:   Log(false,LOG_STATUS,\"evohome: %s: WARNING unexpected mode %d\",tag,msg.payload[3]);",
          "858:   return false;",
          "859:  }",
          "862:  if(msg.payloadsize == 13)",
          "863:  {",
          "866:  }",
          "867:  else",
          "868:  {",
          "870:  }",
          "873:  return true;",
          "874: }",
          "",
          "[Removed Lines]",
          "860:  tsen.EVOHOME2.mode=static_cast<uint8_t>(nMode);",
          "861:  tsen.EVOHOME2.controllermode=ConvertMode(m_evoToDczControllerMode,GetControllerMode());",
          "864:   CEvohomeDateTime::DecodeDateTime(tsen.EVOHOME2,msg.payload,7);",
          "865:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d (0x%x): %d (%d=%s) %s\", tag, tsen.EVOHOME2.zone, msg.GetID(0), tsen.EVOHOME2.temperature, tsen.EVOHOME2.mode, GetZoneModeName(tsen.EVOHOME2.mode),CEvohomeDateTime::GetStrDate(tsen.EVOHOME2).c_str());",
          "869:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d (0x%x): %d (%d=%s)\", tag, tsen.EVOHOME2.zone, msg.GetID(0), tsen.EVOHOME2.temperature, tsen.EVOHOME2.mode, GetZoneModeName(tsen.EVOHOME2.mode));",
          "872:  sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"Setpoint\", -1);",
          "",
          "[Added Lines]",
          "924:  tsen.mode=static_cast<uint8_t>(nMode);",
          "925:  tsen.controllermode=ConvertMode(m_evoToDczControllerMode,GetControllerMode());",
          "928:   CEvohomeDateTime::DecodeDateTime(tsen,msg.payload,7);",
          "929:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d (0x%x): %d (%d=%s) %s\", tag, tsen.zone, msg.GetID(0), tsen.temperature, tsen.mode, GetZoneModeName(tsen.mode),CEvohomeDateTime::GetStrDate(tsen).c_str());",
          "933:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d (0x%x): %d (%d=%s)\", tag, tsen.zone, msg.GetID(0), tsen.temperature, tsen.mode, GetZoneModeName(tsen.mode));",
          "936:  sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Setpoint\", -1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "903:  }",
          "905:  bool bRefresh=false;",
          "912:  for (int i = 0 ; i < msg.payloadsize ; i += 3) {",
          "915:   if (msg.GetID(0) == GetControllerID())",
          "917:   else",
          "923:   {",
          "925:    if (msg.GetID(0) == GetControllerID())",
          "927:   }",
          "928:  }",
          "",
          "[Removed Lines]",
          "906:  REVOBUF tsen;",
          "907:  memset(&tsen,0,sizeof(REVOBUF));",
          "908:  tsen.EVOHOME2.len=sizeof(tsen.EVOHOME2)-1;",
          "909:  tsen.EVOHOME2.type=pTypeEvohomeZone;",
          "910:  tsen.EVOHOME2.subtype=sTypeEvohomeZone;",
          "911:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME2.id1,tsen.EVOHOME2.id2,tsen.EVOHOME2.id3);",
          "916:    tsen.EVOHOME2.zone = msg.payload[i]+1;",
          "918:    tsen.EVOHOME2.zone = 0;",
          "919:   tsen.EVOHOME2.temperature = msg.payload[i + 1] << 8 | msg.payload[i + 2];",
          "921:   Log(true, LOG_STATUS, \"evohome: %s: Zone sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.EVOHOME2.zone, tsen.EVOHOME2.temperature);",
          "922:   if(tsen.EVOHOME2.temperature!=0x7FFF)//afaik this is the error value just ignore it right now as we have no way to report errors...also perhaps could be returned if DHW is not installed?",
          "924:    sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"Zone Temp\", -1);",
          "926:     bRefresh=SetMaxZoneCount(tsen.EVOHOME2.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "",
          "[Added Lines]",
          "970:  _tEVOHOME2 tsen;",
          "971:  memset(&tsen,0,sizeof(_tEVOHOME2));",
          "972:  tsen.len=sizeof(_tEVOHOME2)-1;",
          "973:  tsen.type=pTypeEvohomeZone;",
          "974:  tsen.subtype=sTypeEvohomeZone;",
          "975:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3);",
          "980:    tsen.zone = msg.payload[i]+1;",
          "982:    tsen.zone = 0;",
          "983:   tsen.temperature = msg.payload[i + 1] << 8 | msg.payload[i + 2];",
          "985:   Log(true, LOG_STATUS, \"evohome: %s: Zone sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.zone, tsen.temperature);",
          "986:   if(tsen.temperature!=0x7FFF)//afaik this is the error value just ignore it right now as we have no way to report errors...also perhaps could be returned if DHW is not installed?",
          "988:    sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Zone Temp\", -1);",
          "990:     bRefresh=SetMaxZoneCount(tsen.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "947:    result = m_sql.safe_query(\"SELECT Unit FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID == '%q') AND (Type == %d)\", m_HwdID, zstrid.c_str(), (int)pTypeEvohomeZone);",
          "948:    if (!result.empty()) // Update existing temp sensor with value directly from sensor",
          "949:    {",
          "953:    }",
          "954:    else // If matching relay with same deviceID then create a new Zone Temp sensor with zone number offset by 12",
          "955:    {",
          "956:     result = m_sql.safe_query(\"SELECT Unit FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID == '%q') AND (Type == %d)\", m_HwdID, zstrid.c_str(), (int)pTypeEvohomeRelay);",
          "957:     if (!result.empty())",
          "958:     {",
          "960:      char zstrname[40];",
          "961:      sprintf(zstrname, \"Zone %d\", atoi(result[0][0].c_str()));",
          "964:     }",
          "965:    }",
          "966:   }",
          "",
          "[Removed Lines]",
          "950:     tsen.EVOHOME2.zone = atoi(result[0][0].c_str());",
          "951:     Log(true, LOG_STATUS, \"evohome: %s: Zone sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.EVOHOME2.zone, tsen.EVOHOME2.temperature);",
          "952:     sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"Zone Temp\", -1);",
          "959:      tsen.EVOHOME2.zone = atoi(result[0][0].c_str()) + 12;",
          "962:      Log(true, LOG_STATUS, \"evohome: %s: Zone sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.EVOHOME2.zone, tsen.EVOHOME2.temperature);",
          "963:      sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, zstrname, -1);",
          "",
          "[Added Lines]",
          "1014:     tsen.zone = atoi(result[0][0].c_str());",
          "1015:     Log(true, LOG_STATUS, \"evohome: %s: Zone sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.zone, tsen.temperature);",
          "1016:     sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Zone Temp\", -1);",
          "1023:      tsen.zone = atoi(result[0][0].c_str()) + 12;",
          "1026:      Log(true, LOG_STATUS, \"evohome: %s: Zone sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.zone, tsen.temperature);",
          "1027:      sDecodeRXMessage(this, (const unsigned char *)&tsen, zstrname, -1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "995:   return false;",
          "996:  }",
          "1009:   return true;",
          "1010:  int nMode=ConvertMode(m_evoToDczOverrideMode,msg.payload[2]);",
          "1011:  if(nMode==-1)",
          "",
          "[Removed Lines]",
          "998:  REVOBUF tsen;",
          "999:  memset(&tsen,0,sizeof(REVOBUF));",
          "1000:  tsen.EVOHOME2.len=sizeof(tsen.EVOHOME2)-1;",
          "1001:  tsen.EVOHOME2.type=pTypeEvohomeWater;",
          "1002:  tsen.EVOHOME2.subtype=sTypeEvohomeWater;",
          "1003:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME2.id1,tsen.EVOHOME2.id2,tsen.EVOHOME2.id3) //will be id of controller so must use zone number",
          "1005:  tsen.EVOHOME2.zone = msg.payload[0]+1;////NA to DHW...controller is 0 so let our zones start from 1...",
          "1006:  tsen.EVOHOME2.updatetype = updSetPoint;//state",
          "1007:  tsen.EVOHOME2.temperature = msg.payload[1];//just on or off for DHW",
          "1008:  if(tsen.EVOHOME2.temperature == 0xFF)// temperature = 255 if DHW not installed",
          "",
          "[Added Lines]",
          "1062:  _tEVOHOME2 tsen;",
          "1063:  memset(&tsen,0,sizeof(_tEVOHOME2));",
          "1064:  tsen.len=sizeof(_tEVOHOME2)-1;",
          "1065:  tsen.type=pTypeEvohomeWater;",
          "1066:  tsen.subtype=sTypeEvohomeWater;",
          "1067:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3) //will be id of controller so must use zone number",
          "1069:  tsen.zone = msg.payload[0]+1;////NA to DHW...controller is 0 so let our zones start from 1...",
          "1070:  tsen.updatetype = updSetPoint;//state",
          "1071:  tsen.temperature = msg.payload[1];//just on or off for DHW",
          "1072:  if(tsen.temperature == 0xFF)// temperature = 255 if DHW not installed",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1013:   Log(false,LOG_STATUS,\"evohome: %s: WARNING unexpected mode %d\",tag, msg.payload[2]);",
          "1014:   return false;",
          "1015:  }",
          "1018:  if(msg.payloadsize == 12)",
          "1019:  {",
          "1022:  }",
          "1023:  else",
          "1024:  {",
          "1026:  }",
          "1029:  return true;",
          "1030: }",
          "",
          "[Removed Lines]",
          "1016:  tsen.EVOHOME2.mode=static_cast<uint8_t>(nMode);",
          "1017:  tsen.EVOHOME2.controllermode=ConvertMode(m_evoToDczControllerMode,GetControllerMode());",
          "1020:   CEvohomeDateTime::DecodeDateTime(tsen.EVOHOME2,msg.payload,6);",
          "1021:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d: %d (%d=%s) %s\", tag, tsen.EVOHOME2.zone, tsen.EVOHOME2.temperature, tsen.EVOHOME2.mode, GetZoneModeName(tsen.EVOHOME2.mode),CEvohomeDateTime::GetStrDate(tsen.EVOHOME2).c_str());",
          "1025:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d: %d (%d=%s)\", tag, tsen.EVOHOME2.zone, tsen.EVOHOME2.temperature, tsen.EVOHOME2.mode, GetZoneModeName(tsen.EVOHOME2.mode));",
          "1028:  sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"DHW\", -1);",
          "",
          "[Added Lines]",
          "1080:  tsen.mode=static_cast<uint8_t>(nMode);",
          "1081:  tsen.controllermode=ConvertMode(m_evoToDczControllerMode,GetControllerMode());",
          "1084:   CEvohomeDateTime::DecodeDateTime(tsen,msg.payload,6);",
          "1085:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d: %d (%d=%s) %s\", tag, tsen.zone, tsen.temperature, tsen.mode, GetZoneModeName(tsen.mode),CEvohomeDateTime::GetStrDate(tsen).c_str());",
          "1089:   Log(true,LOG_STATUS,\"evohome: %s: Setting: %d: %d (%d=%s)\", tag, tsen.zone, tsen.temperature, tsen.mode, GetZoneModeName(tsen.mode));",
          "1092:  sDecodeRXMessage(this, (const unsigned char *)&tsen, \"DHW\", -1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1060:   Log(true,LOG_STATUS,\"evohome: %s: WARNING: sensor reading with zone != 0: 0x%x - %d\", tag, msg.GetID(0), msg.payload[0]);",
          "1061:  }",
          "1070:  for (int i = 0 ; i < msg.payloadsize ; i += 3) {",
          "1076:  }",
          "1078:  return true;",
          "",
          "[Removed Lines]",
          "1063:  REVOBUF tsen;",
          "1064:  memset(&tsen,0,sizeof(REVOBUF));",
          "1065:  tsen.EVOHOME2.len=sizeof(tsen.EVOHOME2)-1;",
          "1066:  tsen.EVOHOME2.type=pTypeEvohomeWater;",
          "1067:  tsen.EVOHOME2.subtype=sTypeEvohomeWater;",
          "1068:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME2.id1,tsen.EVOHOME2.id2,tsen.EVOHOME2.id3);",
          "1071:   tsen.EVOHOME2.zone = msg.payload[i]+1;//we're using zone 0 to trigger a lookup on ID rather than zone number (not relevant for DHW)",
          "1072:   tsen.EVOHOME2.temperature = msg.payload[i + 1] << 8 | msg.payload[i + 2];",
          "1073:   Log(true,LOG_STATUS,\"evohome: %s: DHW sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.EVOHOME2.zone, tsen.EVOHOME2.temperature);",
          "1074:   if(tsen.EVOHOME2.temperature!=0x7FFF)// DHW is not installed, discard value",
          "1075:    sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"DHW Temp\", -1);",
          "",
          "[Added Lines]",
          "1127:  _tEVOHOME2 tsen;",
          "1128:  memset(&tsen,0,sizeof(_tEVOHOME2));",
          "1129:  tsen.len=sizeof(_tEVOHOME2)-1;",
          "1130:  tsen.type=pTypeEvohomeWater;",
          "1131:  tsen.subtype=sTypeEvohomeWater;",
          "1132:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3);",
          "1135:   tsen.zone = msg.payload[i]+1;//we're using zone 0 to trigger a lookup on ID rather than zone number (not relevant for DHW)",
          "1136:   tsen.temperature = msg.payload[i + 1] << 8 | msg.payload[i + 2];",
          "1137:   Log(true,LOG_STATUS,\"evohome: %s: DHW sensor msg: 0x%x: %d: %d\", tag, msg.GetID(0), tsen.zone, tsen.temperature);",
          "1138:   if(tsen.temperature!=0x7FFF)// DHW is not installed, discard value",
          "1139:    sDecodeRXMessage(this, (const unsigned char *)&tsen, \"DHW Temp\", -1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1095:   return false;",
          "1096:  }",
          "1105:  int nControllerMode=msg.payload[0];",
          "1106:  int nMode=ConvertMode(m_evoToDczControllerMode,nControllerMode);//this converts to the modes originally setup with the web client ver",
          "",
          "[Removed Lines]",
          "1098:  REVOBUF tsen;",
          "1099:  memset(&tsen,0,sizeof(REVOBUF));",
          "1100:  tsen.EVOHOME1.len=sizeof(tsen.EVOHOME1)-1;",
          "1101:  tsen.EVOHOME1.type=pTypeEvohome;",
          "1102:  tsen.EVOHOME1.subtype=sTypeEvohome;",
          "1103:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME1.id1,tsen.EVOHOME1.id2,tsen.EVOHOME1.id3);",
          "",
          "[Added Lines]",
          "1162:  _tEVOHOME1 tsen;",
          "1163:  memset(&tsen,0,sizeof(_tEVOHOME1));",
          "1164:  tsen.len=sizeof(_tEVOHOME1)-1;",
          "1165:  tsen.type=pTypeEvohome;",
          "1166:  tsen.subtype=sTypeEvohome;",
          "1167:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1109:   Log(false,LOG_STATUS,\"evohome: %s: WARNING unexpected mode %d\",tag, nControllerMode);",
          "1110:   return false;",
          "1111:  }",
          "1118:  if(SetControllerMode(nControllerMode))//if only the until time changed we should be ok as the unit will broadcast a new controller mode when the current mode ends",
          "1119:   RequestZoneState();//This can conflict with our startup polling but will still succeed ok",
          "",
          "[Removed Lines]",
          "1112:  tsen.EVOHOME1.status=static_cast<uint8_t>(nMode);",
          "1113:  CEvohomeDateTime::DecodeDateTime(tsen.EVOHOME1,msg.payload,1);",
          "1114:  tsen.EVOHOME1.mode=msg.payload[7];//1 is tmp 0 is perm",
          "1115:  Log(true,LOG_STATUS,\"evohome: %s: Setting: (%d=%s) (%d=%s) %s\", tag, tsen.EVOHOME1.status, GetControllerModeName(tsen.EVOHOME1.status),tsen.EVOHOME1.mode,tsen.EVOHOME1.mode?\"Temporary\":\"Permanent\",CEvohomeDateTime::GetStrDate(tsen.EVOHOME1).c_str());",
          "1116:  sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME1, \"Controller Mode\", -1);",
          "",
          "[Added Lines]",
          "1176:  tsen.status=static_cast<uint8_t>(nMode);",
          "1177:  CEvohomeDateTime::DecodeDateTime(tsen,msg.payload,1);",
          "1178:  tsen.mode=msg.payload[7];//1 is tmp 0 is perm",
          "1179:  Log(true,LOG_STATUS,\"evohome: %s: Setting: (%d=%s) (%d=%s) %s\", tag, tsen.status, GetControllerModeName(tsen.status),tsen.mode,tsen.mode?\"Temporary\":\"Permanent\",CEvohomeDateTime::GetStrDate(tsen).c_str());",
          "1180:  sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Controller Mode\", -1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1241:   Log(false,LOG_ERROR,\"evohome: %s: Error decoding command, packet size too small: %d\", tag, msg.payloadsize);",
          "1242:   return false;",
          "1243:  }",
          "1251:  uint8_t nWindow,nMisc;",
          "1254:  {",
          "1256:   return false;",
          "1257:  }",
          "1265:  if(nWindow!=0 && nWindow!=0xC8)",
          "1266:   Log(true,LOG_STATUS,\"evohome: %s: Unexpected zone state Window=%d\",tag,nWindow);",
          "1267:  if(nMisc!=0)",
          "1268:   Log(true,LOG_STATUS,\"evohome: %s: Unexpected zone state nMisc=%d\",tag,nMisc);",
          "1271:  if (msg.GetID(0) == GetControllerID())",
          "1274:  return true;",
          "1275: }",
          "",
          "[Removed Lines]",
          "1244:  REVOBUF tsen;",
          "1245:  memset(&tsen,0,sizeof(REVOBUF));",
          "1246:  tsen.EVOHOME2.len=sizeof(tsen.EVOHOME2)-1;",
          "1247:  tsen.EVOHOME2.type=pTypeEvohomeZone;",
          "1248:  tsen.EVOHOME2.subtype=sTypeEvohomeZone;",
          "1249:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME2.id1,tsen.EVOHOME2.id2,tsen.EVOHOME2.id3)",
          "1252:  msg.Get(tsen.EVOHOME2.zone).Get(nWindow).Get(nMisc);//not sure what the last byte is seems to always be 0",
          "1253:  if(tsen.EVOHOME2.zone>=m_nMaxZones)",
          "1255:   Log(false,LOG_ERROR,\"evohome: %s: Error zone number out of bounds: %d\", tag, tsen.EVOHOME2.zone+1);",
          "1258:  tsen.EVOHOME2.mode=(nWindow?zmWind:zmAuto);",
          "1259:  tsen.EVOHOME2.updatetype = updOverride;//zone modde override (window / local)",
          "1260:  m_ZoneOverrideLocal[tsen.EVOHOME2.zone]=static_cast<zoneModeType>(tsen.EVOHOME2.mode);",
          "1262:  tsen.EVOHOME2.zone++;",
          "1263:  SetMaxZoneCount(tsen.EVOHOME2.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "1269:  Log(true, LOG_STATUS, \"evohome: %s: %d: Window %d\", tag, tsen.EVOHOME2.zone, nWindow);",
          "1272:   sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"Zone Window\", -1);",
          "",
          "[Added Lines]",
          "1308:  _tEVOHOME2 tsen;",
          "1309:  memset(&tsen,0,sizeof(_tEVOHOME2));",
          "1310:  tsen.len=sizeof(_tEVOHOME2)-1;",
          "1311:  tsen.type=pTypeEvohomeZone;",
          "1312:  tsen.subtype=sTypeEvohomeZone;",
          "1313:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3)",
          "1316:  msg.Get(tsen.zone).Get(nWindow).Get(nMisc);//not sure what the last byte is seems to always be 0",
          "1317:  if(tsen.zone>=m_nMaxZones)",
          "1319:   Log(false,LOG_ERROR,\"evohome: %s: Error zone number out of bounds: %d\", tag, tsen.zone+1);",
          "1322:  tsen.mode=(nWindow?zmWind:zmAuto);",
          "1323:  tsen.updatetype = updOverride;//zone modde override (window / local)",
          "1324:  m_ZoneOverrideLocal[tsen.zone]=static_cast<zoneModeType>(tsen.mode);",
          "1326:  tsen.zone++;",
          "1327:  SetMaxZoneCount(tsen.zone);//this should increase on startup as we poll all zones so we don't respond to changes here",
          "1333:  Log(true, LOG_STATUS, \"evohome: %s: %d: Window %d\", tag, tsen.zone, nWindow);",
          "1336:   sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Zone Window\", -1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1310: void CEvohomeRadio::RXRelay(uint8_t nDevNo, uint8_t nDemand, int nID)",
          "1311: {",
          "1322: }",
          "1324: bool CEvohomeRadio::DecodeHeatDemand(CEvohomeMsg &msg)",
          "",
          "[Removed Lines]",
          "1312:  REVOBUF tsen;",
          "1313:  memset(&tsen,0,sizeof(REVOBUF));",
          "1314:  tsen.EVOHOME3.len=sizeof(tsen.EVOHOME3)-1;",
          "1315:  tsen.EVOHOME3.type=pTypeEvohomeRelay;",
          "1316:  tsen.EVOHOME3.subtype=sTypeEvohomeRelay;",
          "1317:  RFX_SETID3(nID,tsen.EVOHOME3.id1,tsen.EVOHOME3.id2,tsen.EVOHOME3.id3);",
          "1318:  tsen.EVOHOME3.devno=nDevNo;",
          "1319:  tsen.EVOHOME3.demand=nDemand;",
          "1320:  tsen.EVOHOME3.updatetype = CEvohomeRadio::updDemand;",
          "1321:  sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME3, NULL, -1);",
          "",
          "[Added Lines]",
          "1376:  _tEVOHOME3 tsen;",
          "1377:  memset(&tsen,0,sizeof(_tEVOHOME3));",
          "1378:  tsen.len=sizeof(_tEVOHOME3)-1;",
          "1379:  tsen.type=pTypeEvohomeRelay;",
          "1380:  tsen.subtype=sTypeEvohomeRelay;",
          "1381:  RFX_SETID3(nID,tsen.id1,tsen.id2,tsen.id3);",
          "1382:  tsen.devno=nDevNo;",
          "1383:  tsen.demand=nDemand;",
          "1384:  tsen.updatetype = CEvohomeRadio::updDemand;",
          "1385:  sDecodeRXMessage(this, (const unsigned char *)&tsen, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1473:  std::string szType(\"Unknown\");",
          "1474:  uint8_t nDevNo,nBattery,nLowBat;",
          "1475:  msg.Get(nDevNo).Get(nBattery).Get(nLowBat);",
          "1482:  if (nBattery == 0xFF)",
          "1483:   nBattery = 100; // recode full battery (0xFF) to 100 for consistency across device types",
          "",
          "[Removed Lines]",
          "1476:  REVOBUF tsen;",
          "1477:  memset(&tsen,0,sizeof(REVOBUF));",
          "1478:  tsen.EVOHOME2.len=sizeof(tsen.EVOHOME2)-1;",
          "1479:  RFX_SETID3(msg.GetID(0),tsen.EVOHOME2.id1,tsen.EVOHOME2.id2,tsen.EVOHOME2.id3)",
          "1480:  tsen.EVOHOME2.updatetype = updBattery;",
          "",
          "[Added Lines]",
          "1540:  _tEVOHOME2 tsen;",
          "1541:  memset(&tsen,0,sizeof(_tEVOHOME2));",
          "1542:  tsen.len=sizeof(_tEVOHOME2)-1;",
          "1543:  RFX_SETID3(msg.GetID(0),tsen.id1,tsen.id2,tsen.id3)",
          "1544:  tsen.updatetype = updBattery;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1487:  if(nLowBat==0)",
          "1488:   nBattery=0;",
          "1490:  if(msg.id[0].GetIDType()==CEvohomeID::devZone)",
          "1491:  {",
          "1492:   if(msg.id[2].GetIDType()==CEvohomeID::devController)",
          "1493:   {",
          "1494:    szType=\"Zone\";",
          "1495:    nDevNo++;",
          "1501:    if (AllSensors)",
          "1502:    {",
          "1507:    }",
          "1518:   }",
          "1519:   else",
          "1520:   {",
          "1521:    szType=\"Dev\";",
          "1526:   }",
          "1527:  }",
          "1528:  else if(msg.id[0].GetIDType()==CEvohomeID::devSensor)",
          "1529:  {",
          "1530:   szType=\"DHW\";",
          "1531:   nDevNo++;",
          "1537:  }",
          "1538:  Log(true,LOG_STATUS,\"evohome: %s: %s=%d charge=%d(%%) level=%d (%s)\",tag,szType.c_str(),nDevNo,nBattery,nLowBat,(nLowBat==0)?\"Low\":\"OK\");",
          "",
          "[Removed Lines]",
          "1489:  tsen.EVOHOME2.battery_level=nBattery;",
          "1496:    tsen.EVOHOME2.type=pTypeEvohomeZone;",
          "1497:    tsen.EVOHOME2.subtype=sTypeEvohomeZone;",
          "1498:    tsen.EVOHOME2.zone=nDevNo;",
          "1499:    sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, NULL, nBattery);",
          "1503:     tsen.EVOHOME2.type = pTypeEvohomeZone;",
          "1504:     tsen.EVOHOME2.subtype = sTypeEvohomeZone;",
          "1505:     tsen.EVOHOME2.zone += 12;",
          "1506:     sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, NULL, nBattery); // Update Zone device battery level",
          "1509:    tsen.EVOHOME3.len = sizeof(tsen.EVOHOME3) - 1;",
          "1510:    tsen.EVOHOME3.type = pTypeEvohomeRelay;",
          "1511:    tsen.EVOHOME3.subtype = sTypeEvohomeRelay;",
          "1512:    RFX_SETID3(msg.GetID(0), tsen.EVOHOME3.id1, tsen.EVOHOME3.id2, tsen.EVOHOME3.id3);",
          "1513:    tsen.EVOHOME3.devno = nDevNo;",
          "1514:    tsen.EVOHOME3.demand = 0;",
          "1515:    tsen.EVOHOME3.updatetype = CEvohomeRadio::updBattery;",
          "1516:    tsen.EVOHOME3.battery_level = nBattery;",
          "1517:    sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME3, NULL, nBattery);",
          "1522:    tsen.EVOHOME2.type = pTypeEvohomeZone;",
          "1523:    tsen.EVOHOME2.subtype = sTypeEvohomeZone;",
          "1524:    tsen.EVOHOME2.zone = nDevNo;",
          "1525:    sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, NULL, nBattery);  // Update Relay device battery level",
          "1532:   tsen.EVOHOME2.type=pTypeEvohomeWater;",
          "1533:   tsen.EVOHOME2.subtype=sTypeEvohomeWater;",
          "1534:   tsen.EVOHOME2.zone=nDevNo;",
          "1535:   RFX_SETID3(GetControllerID(), tsen.EVOHOME2.id1, tsen.EVOHOME2.id2, tsen.EVOHOME2.id3);",
          "1536:   sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME2, \"DHW Temp\", nBattery);  // Update DHW Zone sensor",
          "",
          "[Added Lines]",
          "1553:  tsen.battery_level=nBattery;",
          "1560:    tsen.type=pTypeEvohomeZone;",
          "1561:    tsen.subtype=sTypeEvohomeZone;",
          "1562:    tsen.zone=nDevNo;",
          "1563:    sDecodeRXMessage(this, (const unsigned char *)&tsen, NULL, nBattery);",
          "1567:     tsen.type = pTypeEvohomeZone;",
          "1568:     tsen.subtype = sTypeEvohomeZone;",
          "1569:     tsen.zone += 12;",
          "1570:     sDecodeRXMessage(this, (const unsigned char *)&tsen, NULL, nBattery); // Update Zone device battery level",
          "1573:    _tEVOHOME3 tsen2;",
          "1574:    memset(&tsen2, 0, sizeof(_tEVOHOME3));",
          "1575:    tsen2.len = sizeof(tsen) - 1;",
          "1576:    tsen2.type = pTypeEvohomeRelay;",
          "1577:    tsen2.subtype = sTypeEvohomeRelay;",
          "1578:    RFX_SETID3(msg.GetID(0), tsen2.id1, tsen2.id2, tsen2.id3);",
          "1579:    tsen2.devno = nDevNo;",
          "1580:    tsen2.demand = 0;",
          "1581:    tsen2.updatetype = CEvohomeRadio::updBattery;",
          "1582:    tsen2.battery_level = nBattery;",
          "1583:    sDecodeRXMessage(this, (const unsigned char *)&tsen2, NULL, nBattery);",
          "1588:    tsen.type = pTypeEvohomeZone;",
          "1589:    tsen.subtype = sTypeEvohomeZone;",
          "1590:    tsen.zone = nDevNo;",
          "1591:    sDecodeRXMessage(this, (const unsigned char *)&tsen, NULL, nBattery);  // Update Relay device battery level",
          "1598:   tsen.type=pTypeEvohomeWater;",
          "1599:   tsen.subtype=sTypeEvohomeWater;",
          "1600:   tsen.zone=nDevNo;",
          "1601:   RFX_SETID3(GetControllerID(), tsen.id1, tsen.id2, tsen.id3);",
          "1602:   sDecodeRXMessage(this, (const unsigned char *)&tsen, \"DHW Temp\", nBattery);  // Update DHW Zone sensor",
          "",
          "---------------"
        ],
        "hardware/EvohomeScript.cpp||hardware/EvohomeScript.cpp": [
          "File: hardware/EvohomeScript.cpp -> hardware/EvohomeScript.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: {",
          "73:  if(!pdata)",
          "74:   return false;",
          "76:  switch (pdata[1])",
          "77:  {",
          "78:   case pTypeEvohome:",
          "80:     return false;",
          "82:    break;",
          "83:   case pTypeEvohomeZone:",
          "85:     return false;",
          "86:    RunScript(pdata,length);",
          "87:    break;",
          "88:   case pTypeEvohomeWater:",
          "90:     return false;",
          "91:    RunScript(pdata,length);",
          "92:    break;",
          "93:   case pTypeEvohomeRelay:",
          "95:     return false;",
          "97:    break;",
          "",
          "[Removed Lines]",
          "75:  REVOBUF *tsen=(REVOBUF*)pdata;",
          "79:    if (length<sizeof(REVOBUF::_tEVOHOME1))",
          "84:    if (length<sizeof(REVOBUF::_tEVOHOME2))",
          "89:    if (length<sizeof(REVOBUF::_tEVOHOME2))",
          "94:    if (length<sizeof(REVOBUF::_tEVOHOME3))",
          "",
          "[Added Lines]",
          "78:    if (length<sizeof(_tEVOHOME1))",
          "83:    if (length<sizeof(_tEVOHOME2))",
          "88:    if (length<sizeof(_tEVOHOME2))",
          "93:    if (length<sizeof(_tEVOHOME3))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: {",
          "105:  if(!pdata)",
          "106:   return;",
          "108:  std::vector<std::vector<std::string> > result;",
          "110:  if (!result.empty())",
          "111:  {",
          "112:   unsigned long ID;",
          "",
          "[Removed Lines]",
          "107:  REVOBUF *tsen=(REVOBUF*)pdata;",
          "109:  result = m_sql.safe_query(\"SELECT  HardwareID, DeviceID,Unit,Type,SubType,SwitchType,StrParam1 FROM DeviceStatus WHERE (HardwareID==%d) AND (Unit==%d) AND (Type==%d)\", m_HwdID, (int)tsen->EVOHOME2.zone, (int)tsen->EVOHOME2.type);",
          "",
          "[Added Lines]",
          "106:  _tEVOHOME2 *tsen=(_tEVOHOME2*)pdata;",
          "108:  result = m_sql.safe_query(\"SELECT  HardwareID, DeviceID,Unit,Type,SubType,SwitchType,StrParam1 FROM DeviceStatus WHERE (HardwareID==%d) AND (Unit==%d) AND (Type==%d)\", m_HwdID, (int)tsen->zone, (int)tsen->type);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:    boost::replace_all(OnAction, \"{deviceid}\", s_strid.str());",
          "125:    s_strid.clear();",
          "126:    s_strid.str(\"\");",
          "128:    boost::replace_all(OnAction, \"{unit}\", s_strid.str());",
          "129:    s_strid.clear();",
          "130:    s_strid.str(\"\");",
          "132:    boost::replace_all(OnAction, \"{mode}\", s_strid.str());",
          "133:    s_strid.clear();",
          "134:    s_strid.str(\"\");",
          "136:    boost::replace_all(OnAction, \"{setpoint}\", s_strid.str());",
          "137:    s_strid.clear();",
          "138:    s_strid.str(\"\");",
          "140:    boost::replace_all(OnAction, \"{state}\", s_strid.str());",
          "143:    std::string scriptname = OnAction.substr(9);",
          "144: #if !defined WIN32",
          "",
          "[Removed Lines]",
          "127:    s_strid << (int)tsen->EVOHOME2.zone;",
          "131:    s_strid << (int)tsen->EVOHOME2.mode;",
          "135:    s_strid << tsen->EVOHOME2.temperature / 100.0f;",
          "139:    s_strid << (int)tsen->EVOHOME2.temperature;",
          "141:    boost::replace_all(OnAction, \"{until}\", CEvohomeDateTime::GetISODate(tsen->EVOHOME2));",
          "",
          "[Added Lines]",
          "126:    s_strid << (int)tsen->zone;",
          "130:    s_strid << (int)tsen->mode;",
          "134:    s_strid << tsen->temperature / 100.0f;",
          "138:    s_strid << (int)tsen->temperature;",
          "140:    boost::replace_all(OnAction, \"{until}\", CEvohomeDateTime::GetISODate(tsen));",
          "",
          "---------------"
        ],
        "hardware/EvohomeWeb.cpp||hardware/EvohomeWeb.cpp": [
          "File: hardware/EvohomeWeb.cpp -> hardware/EvohomeWeb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   return false;",
          "229:  m_lastconnect=0;",
          "231:  switch (pdata[1])",
          "232:  {",
          "233:  case pTypeEvohome:",
          "235:    return false;",
          "237:   break;",
          "238:  case pTypeEvohomeZone:",
          "240:    return false;",
          "241:   return SetSetpoint(pdata);",
          "242:   break;",
          "243:  case pTypeEvohomeWater:",
          "245:    return false;",
          "246:   return SetDHWState(pdata);",
          "247:   break;",
          "",
          "[Removed Lines]",
          "230:  REVOBUF *tsen = (REVOBUF*)pdata;",
          "234:   if (length < sizeof(REVOBUF::_tEVOHOME1))",
          "236:   return SetSystemMode(tsen->EVOHOME1.status);",
          "239:   if (length < sizeof(REVOBUF::_tEVOHOME2))",
          "244:   if (length < sizeof(REVOBUF::_tEVOHOME2))",
          "",
          "[Added Lines]",
          "233:   if (length < sizeof(_tEVOHOME1))",
          "235:   return SetSystemMode(((_tEVOHOME1*)pdata)->status);",
          "238:   if (length < sizeof(_tEVOHOME2))",
          "243:   if (length < sizeof(_tEVOHOME2))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384: bool CEvohomeWeb::SetSetpoint(const char *pdata)",
          "385: {",
          "389:  zone* hz = get_zone_by_ID(zoneId);",
          "390:  if (hz == NULL) // zone number not known by installation (manually added?)",
          "",
          "[Removed Lines]",
          "386:  REVOBUF *pEvo = (REVOBUF*)pdata;",
          "387:  std::string zoneId(std::to_string((int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3)));",
          "",
          "[Added Lines]",
          "385:  _tEVOHOME2 *pEvo = (_tEVOHOME2*)pdata;",
          "386:  std::string zoneId(std::to_string((int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:   return false;",
          "394:  }",
          "397:  {",
          "398:   if (!cancel_temperature_override(zoneId))",
          "399:    return false;",
          "",
          "[Removed Lines]",
          "396:  if ((pEvo->EVOHOME2.mode) == 0) // cancel override",
          "",
          "[Added Lines]",
          "395:  if ((pEvo->mode) == 0) // cancel override",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "403:   if ((!hz->schedule.isNull()) || get_zone_schedule(hz->zoneId))",
          "404:   {",
          "405:    szuntil = local_to_utc(get_next_switchpoint_ex(hz->schedule, szsetpoint));",
          "407:   }",
          "409:   if ((m_showschedule) && (!szuntil.empty()))",
          "410:   {",
          "416:   }",
          "417:   else",
          "419:   return true;",
          "420:  }",
          "424:  std::stringstream s_setpoint;",
          "425:  s_setpoint << temperature_int << \".\" << temperature_frac;",
          "428:  {",
          "429:   return set_temperature(zoneId, s_setpoint.str(), \"\");",
          "430:  }",
          "432:  {",
          "434:   return set_temperature(zoneId, s_setpoint.str(), szISODate);",
          "435:  }",
          "436:  return false;",
          "",
          "[Removed Lines]",
          "406:    pEvo->EVOHOME2.temperature = (int16_t)(strtod(szsetpoint.c_str(), NULL) * 100);",
          "411:    pEvo->EVOHOME2.year = (uint16_t)(atoi(szuntil.substr(0, 4).c_str()));",
          "412:    pEvo->EVOHOME2.month = (uint8_t)(atoi(szuntil.substr(5, 2).c_str()));",
          "413:    pEvo->EVOHOME2.day = (uint8_t)(atoi(szuntil.substr(8, 2).c_str()));",
          "414:    pEvo->EVOHOME2.hrs = (uint8_t)(atoi(szuntil.substr(11, 2).c_str()));",
          "415:    pEvo->EVOHOME2.mins = (uint8_t)(atoi(szuntil.substr(14, 2).c_str()));",
          "418:    pEvo->EVOHOME2.year = 0;",
          "422:  int temperature_int = (int)pEvo->EVOHOME2.temperature / 100;",
          "423:  int temperature_frac = (int)pEvo->EVOHOME2.temperature % 100;",
          "427:  if ((pEvo->EVOHOME2.mode) == 1) // permanent override",
          "431:  if ((pEvo->EVOHOME2.mode) == 2) // temporary override",
          "433:   std::string szISODate(CEvohomeDateTime::GetISODate(pEvo->EVOHOME2));",
          "",
          "[Added Lines]",
          "405:    pEvo->temperature = (int16_t)(strtod(szsetpoint.c_str(), NULL) * 100);",
          "410:    pEvo->year = (uint16_t)(atoi(szuntil.substr(0, 4).c_str()));",
          "411:    pEvo->month = (uint8_t)(atoi(szuntil.substr(5, 2).c_str()));",
          "412:    pEvo->day = (uint8_t)(atoi(szuntil.substr(8, 2).c_str()));",
          "413:    pEvo->hrs = (uint8_t)(atoi(szuntil.substr(11, 2).c_str()));",
          "414:    pEvo->mins = (uint8_t)(atoi(szuntil.substr(14, 2).c_str()));",
          "417:    pEvo->year = 0;",
          "421:  int temperature_int = (int)pEvo->temperature / 100;",
          "422:  int temperature_frac = (int)pEvo->temperature % 100;",
          "426:  if ((pEvo->mode) == 1) // permanent override",
          "430:  if ((pEvo->mode) == 2) // temporary override",
          "432:   std::string szISODate(CEvohomeDateTime::GetISODate(pEvo));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "445:   return false;",
          "446:  }",
          "455:  {",
          "456:   DHWstate = \"auto\";",
          "457:  }",
          "459:  {",
          "460:   return set_dhw_mode(dhwId, DHWstate, \"\");",
          "461:  }",
          "463:  {",
          "465:   return set_dhw_mode(dhwId, DHWstate, szISODate);",
          "466:  }",
          "467:  return false;",
          "",
          "[Removed Lines]",
          "448:  REVOBUF *pEvo = (REVOBUF*)pdata;",
          "450:  std::string dhwId(std::to_string((int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3)));",
          "452:  std::string DHWstate = (pEvo->EVOHOME2.temperature == 0) ? \"off\" : \"on\";",
          "454:  if ((pEvo->EVOHOME2.mode) == 0) // cancel override (web front end does not appear to support this?)",
          "458:  if ((pEvo->EVOHOME2.mode) <= 1) // permanent override",
          "462:  if ((pEvo->EVOHOME2.mode) == 2) // temporary override",
          "464:   std::string szISODate(CEvohomeDateTime::GetISODate(pEvo->EVOHOME2));",
          "",
          "[Added Lines]",
          "447:  _tEVOHOME2 *pEvo = (_tEVOHOME2*)pdata;",
          "449:  std::string dhwId(std::to_string((int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3)));",
          "451:  std::string DHWstate = (pEvo->temperature == 0) ? \"off\" : \"on\";",
          "453:  if ((pEvo->mode) == 0) // cancel override (web front end does not appear to support this?)",
          "457:  if ((pEvo->mode) <= 1) // permanent override",
          "461:  if ((pEvo->mode) == 2) // temporary override",
          "463:   std::string szISODate(CEvohomeDateTime::GetISODate(pEvo));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "481:  while (sysmode < 7 && strcmp(szsystemMode.c_str(), m_szWebAPIMode[sysmode]) != 0)",
          "482:   sysmode++;",
          "494:  if (GetControllerName().empty() || m_updatedev)",
          "495:  {",
          "",
          "[Removed Lines]",
          "484:  REVOBUF tsen;",
          "485:  memset(&tsen, 0, sizeof(REVOBUF));",
          "486:  tsen.EVOHOME1.len = sizeof(tsen.EVOHOME1) - 1;",
          "487:  tsen.EVOHOME1.type = pTypeEvohome;",
          "488:  tsen.EVOHOME1.subtype = sTypeEvohome;",
          "489:  RFX_SETID3(ID, tsen.EVOHOME1.id1, tsen.EVOHOME1.id2, tsen.EVOHOME1.id3);",
          "490:  tsen.EVOHOME1.mode = 0; // web API does not support temp override of controller mode",
          "491:  tsen.EVOHOME1.status = sysmode;",
          "492:  sDecodeRXMessage(this, (const unsigned char *)&tsen.EVOHOME1, \"Controller mode\", -1);",
          "",
          "[Added Lines]",
          "483:  _tEVOHOME1 tsen;",
          "484:  memset(&tsen, 0, sizeof(_tEVOHOME1));",
          "485:  tsen.len = sizeof(_tEVOHOME1) - 1;",
          "486:  tsen.type = pTypeEvohome;",
          "487:  tsen.subtype = sTypeEvohome;",
          "488:  RFX_SETID3(ID, tsen.id1, tsen.id2, tsen.id3);",
          "489:  tsen.mode = 0; // web API does not support temp override of controller mode",
          "490:  tsen.status = sysmode;",
          "491:  sDecodeRXMessage(this, (const unsigned char *)&tsen, \"Controller mode\", -1);",
          "",
          "---------------"
        ],
        "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp": [
          "File: hardware/OpenZWave.cpp -> hardware/OpenZWave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3376:  {",
          "3377:   std::vector<std::string> sd = *itt;",
          "3378:   int nodeID = atoi(sd[1].c_str());",
          "3380:   NodeInfo *pNode = GetNodeInfo(homeID, nodeID);",
          "3381:   if (pNode == NULL)",
          "3382:    continue;",
          "",
          "[Removed Lines]",
          "3379:   unsigned int homeID = (unsigned int)atoi(sd[0].c_str());",
          "",
          "[Added Lines]",
          "3379:   unsigned int homeID = static_cast<unsigned int>(std::stoul(sd[0]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4632:     {",
          "4633:      std::vector<std::string> sd = *itt;",
          "4636:      int nodeID = atoi(sd[2].c_str());",
          "4638:      {",
          "",
          "[Removed Lines]",
          "4635:      unsigned int homeID = (unsigned int)atoi(sd[1].c_str());",
          "",
          "[Added Lines]",
          "4635:      unsigned int homeID = static_cast<unsigned int>(std::stoul(sd[1]));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4703:    if (!result.empty())",
          "4704:    {",
          "4705:     int hwid = atoi(result[0][0].c_str());",
          "4707:     int nodeID = atoi(result[0][2].c_str());",
          "4708:     CDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hwid);",
          "4709:     if (pHardware != NULL)",
          "",
          "[Removed Lines]",
          "4706:     unsigned int homeID = (unsigned int)atoi(result[0][1].c_str());",
          "",
          "[Added Lines]",
          "4706:     unsigned int homeID = static_cast<unsigned int>(std::stoul(result[0][1]));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4731:    if (!result.empty())",
          "4732:    {",
          "4733:     int hwid = atoi(result[0][0].c_str());",
          "4735:     int nodeID = atoi(result[0][2].c_str());",
          "4736:     CDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hwid);",
          "4737:     if (pHardware != NULL)",
          "",
          "[Removed Lines]",
          "4734:     unsigned int homeID = (unsigned int)atoi(result[0][1].c_str());",
          "",
          "[Added Lines]",
          "4734:     unsigned int homeID = static_cast<unsigned int>(std::stoul(result[0][1]));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5088:      for (itt = result.begin(); itt != result.end(); ++itt)",
          "5089:      {",
          "5090:       std::vector<std::string> sd = *itt;",
          "5092:       int nodeID = atoi(sd[2].c_str());",
          "5093:       COpenZWave::NodeInfo *pNode = pOZWHardware->GetNodeInfo(homeID, nodeID);",
          "5094:       if (pNode == NULL)",
          "",
          "[Removed Lines]",
          "5091:       unsigned int homeID = (unsigned int)atoi(sd[1].c_str());",
          "",
          "[Added Lines]",
          "5091:       unsigned int homeID = static_cast<unsigned int>(std::stoul(sd[1]));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5169:    if (!result.empty())",
          "5170:    {",
          "5171:     int hwid = atoi(result[0][0].c_str());",
          "5173:     int nodeID = atoi(result[0][2].c_str());",
          "5174:     CDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hwid);",
          "5175:     if (pHardware != NULL)",
          "",
          "[Removed Lines]",
          "5172:     unsigned int homeID = (unsigned int)atoi(result[0][1].c_str());",
          "",
          "[Added Lines]",
          "5172:     unsigned int homeID = static_cast<unsigned int>(std::stoul(result[0][1]));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5193:    if (!result.empty())",
          "5194:    {",
          "5195:     int hwid = atoi(result[0][0].c_str());",
          "5197:     int nodeID = atoi(result[0][2].c_str());",
          "5198:     CDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hwid);",
          "5199:     if (pHardware != NULL)",
          "",
          "[Removed Lines]",
          "5196:     unsigned int homeID = (unsigned int)atoi(result[0][1].c_str());",
          "",
          "[Added Lines]",
          "5196:     unsigned int homeID = static_cast<unsigned int>(std::stoul(result[0][1]));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5639:    if (!result.empty())",
          "5640:    {",
          "5641:     int hwid = atoi(result[0][0].c_str());",
          "5643:     int nodeID = atoi(result[0][2].c_str());",
          "5644:     CDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hwid);",
          "5645:     if (pHardware != NULL)",
          "",
          "[Removed Lines]",
          "5642:     unsigned int homeID = (unsigned int)atoi(result[0][1].c_str());",
          "",
          "[Added Lines]",
          "5642:     unsigned int homeID = static_cast<unsigned int>(std::stoul(result[0][1]));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5664:    if (!result.empty())",
          "5665:    {",
          "5666:     int hwid = atoi(result[0][0].c_str());",
          "5668:     int nodeID = atoi(result[0][2].c_str());",
          "5669:     CDomoticzHardwareBase *pHardware = m_mainworker.GetHardware(hwid);",
          "5670:     if (pHardware != NULL)",
          "",
          "[Removed Lines]",
          "5667:     unsigned int homeID = (unsigned int)atoi(result[0][1].c_str());",
          "",
          "[Added Lines]",
          "5667:     unsigned int homeID = static_cast<unsigned int>(std::stoul(result[0][1]));",
          "",
          "---------------"
        ],
        "hardware/hardwaretypes.h||hardware/hardwaretypes.h": [
          "File: hardware/hardwaretypes.h -> hardware/hardwaretypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:  uint8_t utemp2;",
          "282:  uint8_t utemp3;",
          "284:  _tThermostat()",
          "285:  {",
          "302:  }",
          "303: } tThermostat;",
          "",
          "[Removed Lines]",
          "286:   len=sizeof(_tThermostat)-1;",
          "287:   type=pTypeThermostat;",
          "288:   subtype=sTypeThermTemperature;",
          "289:   battery_level=255;",
          "290:   id1=1;",
          "291:   id2=0;",
          "292:   id3=0;",
          "293:   id4=0;",
          "294:   dunit=0;",
          "295:   temp=0;",
          "296:   temp1=0;",
          "297:   temp2=0;",
          "298:   temp3=0;",
          "299:   utemp1=0;",
          "300:   utemp2=0;",
          "301:   utemp3=0;",
          "",
          "[Added Lines]",
          "284:  template <class Archive>",
          "285:  void serialize(Archive & ar)",
          "286:  {",
          "287:   ar & cereal::make_nvp(\"len\", len);",
          "288:   ar & cereal::make_nvp(\"type\", type);",
          "289:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "290:   ar & cereal::make_nvp(\"id1\", id1);",
          "291:   ar & cereal::make_nvp(\"id2\", id2);",
          "292:   ar & cereal::make_nvp(\"id3\", id3);",
          "293:   ar & cereal::make_nvp(\"id4\", id4);",
          "294:   ar & cereal::make_nvp(\"dunit\", dunit);",
          "295:   ar & cereal::make_nvp(\"battery_level\", battery_level);",
          "296:   ar & cereal::make_nvp(\"temp\", temp);",
          "297:   ar & cereal::make_nvp(\"temp1\", temp1);",
          "298:   ar & cereal::make_nvp(\"temp2\", temp2);",
          "299:   ar & cereal::make_nvp(\"temp3\", temp3);",
          "300:   ar & cereal::make_nvp(\"utemp1\", utemp1);",
          "301:   ar & cereal::make_nvp(\"utemp2\", utemp2);",
          "302:   ar & cereal::make_nvp(\"utemp3\", utemp3);",
          "303:  }",
          "307:   len = sizeof(_tThermostat) - 1;",
          "308:   type = pTypeThermostat;",
          "309:   subtype = sTypeThermTemperature;",
          "310:   battery_level = 255;",
          "311:   id1 = 1;",
          "312:   id2 = 0;",
          "313:   id3 = 0;",
          "314:   id4 = 0;",
          "315:   dunit = 0;",
          "316:   temp = 0;",
          "317:   temp1 = 0;",
          "318:   temp2 = 0;",
          "319:   temp3 = 0;",
          "320:   utemp1 = 0;",
          "321:   utemp2 = 0;",
          "322:   utemp3 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:  float altitude;",
          "313:  uint8_t forecast;",
          "315:  _tTempBaro()",
          "316:  {",
          "325:  }",
          "326: } _tTempBaro;",
          "",
          "[Removed Lines]",
          "317:   len=sizeof(_tTempBaro)-1;",
          "318:   type=pTypeTEMP_BARO;",
          "319:   subtype=sTypeBMP085;",
          "320:   id1=1;",
          "321:   temp=0;",
          "322:   baro=0;",
          "323:   altitude=0;",
          "324:   forecast=0;",
          "",
          "[Added Lines]",
          "336:  template <class Archive>",
          "337:  void serialize(Archive & ar)",
          "338:  {",
          "339:   ar & cereal::make_nvp(\"len\", len);",
          "340:   ar & cereal::make_nvp(\"type\", type);",
          "341:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "342:   ar & cereal::make_nvp(\"id1\", id1);",
          "343:   ar & cereal::make_nvp(\"temp\", temp);",
          "344:   ar & cereal::make_nvp(\"baro\", baro);",
          "345:   ar & cereal::make_nvp(\"altitude\", altitude);",
          "346:   ar & cereal::make_nvp(\"forecast\", forecast);",
          "347:  }",
          "351:   len = sizeof(_tTempBaro) - 1;",
          "352:   type = pTypeTEMP_BARO;",
          "353:   subtype = sTypeBMP085;",
          "354:   id1 = 1;",
          "355:   temp = 0;",
          "356:   baro = 0;",
          "357:   altitude = 0;",
          "358:   forecast = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:  uint8_t id1;",
          "333:  uint8_t id2;",
          "334:  int32_t airquality;",
          "335:  _tAirQualityMeter()",
          "336:  {",
          "340:   id1 = 0;",
          "341:   id2 = 1;",
          "342:   airquality = 0;",
          "",
          "[Removed Lines]",
          "337:   len=sizeof(_tAirQualityMeter)-1;",
          "338:   type=pTypeAirQuality;",
          "339:   subtype=sTypeVoltcraft;",
          "",
          "[Added Lines]",
          "370:  template <class Archive>",
          "371:  void serialize(Archive & ar)",
          "372:  {",
          "373:   ar & cereal::make_nvp(\"len\", len);",
          "374:   ar & cereal::make_nvp(\"type\", type);",
          "375:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "376:   ar & cereal::make_nvp(\"id1\", id1);",
          "377:   ar & cereal::make_nvp(\"id2\", id2);",
          "378:   ar & cereal::make_nvp(\"airquality\", airquality);",
          "379:  }",
          "383:   len = sizeof(_tAirQualityMeter) - 1;",
          "384:   type = pTypeAirQuality;",
          "385:   subtype = sTypeVoltcraft;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "354:  uint8_t dunit;",
          "355:  float fusage;",
          "357:  _tUsageMeter()",
          "358:  {",
          "368:  }",
          "369: } UsageMeter;",
          "",
          "[Removed Lines]",
          "359:   len=sizeof(_tUsageMeter)-1;",
          "360:   type=pTypeUsage;",
          "361:   subtype=sTypeElectric;",
          "362:   id1=0;",
          "363:   id2=0;",
          "364:   id3=0;",
          "365:   id4=0;",
          "366:   dunit=0;",
          "367:   fusage=0;",
          "",
          "[Added Lines]",
          "403:  template <class Archive>",
          "404:  void serialize(Archive & ar)",
          "405:  {",
          "406:   ar & cereal::make_nvp(\"len\", len);",
          "407:   ar & cereal::make_nvp(\"type\", type);",
          "408:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "409:   ar & cereal::make_nvp(\"id1\", id1);",
          "410:   ar & cereal::make_nvp(\"id2\", id2);",
          "411:   ar & cereal::make_nvp(\"id3\", id3);",
          "412:   ar & cereal::make_nvp(\"id4\", id4);",
          "413:   ar & cereal::make_nvp(\"dunit\", dunit);",
          "414:   ar & cereal::make_nvp(\"fusage\", fusage);",
          "415:  }",
          "419:   len = sizeof(_tUsageMeter) - 1;",
          "420:   type = pTypeUsage;",
          "421:   subtype = sTypeElectric;",
          "422:   id1 = 0;",
          "423:   id2 = 0;",
          "424:   id3 = 0;",
          "425:   id4 = 0;",
          "426:   dunit = 0;",
          "427:   fusage = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "380:  uint8_t battery_level;",
          "381:  float fLux;",
          "383:  _tLightMeter()",
          "384:  {",
          "395:  }",
          "396: } LightMeter;",
          "",
          "[Removed Lines]",
          "385:   len=sizeof(_tLightMeter)-1;",
          "386:   type=pTypeLux;",
          "387:   subtype=sTypeLux;",
          "388:   id1=0;",
          "389:   id2=0;",
          "390:   id3=0;",
          "391:   id4=0;",
          "392:   battery_level=255;",
          "393:   dunit=0;",
          "394:   fLux=0;",
          "",
          "[Added Lines]",
          "443:  template <class Archive>",
          "444:  void serialize(Archive & ar)",
          "445:  {",
          "446:   ar & cereal::make_nvp(\"len\", len);",
          "447:   ar & cereal::make_nvp(\"type\", type);",
          "448:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "449:   ar & cereal::make_nvp(\"id1\", id1);",
          "450:   ar & cereal::make_nvp(\"id2\", id2);",
          "451:   ar & cereal::make_nvp(\"id3\", id3);",
          "452:   ar & cereal::make_nvp(\"id4\", id4);",
          "453:   ar & cereal::make_nvp(\"dunit\", dunit);",
          "454:   ar & cereal::make_nvp(\"battery_level\", battery_level);",
          "455:   ar & cereal::make_nvp(\"fLux\", fLux);",
          "456:  }",
          "460:   len = sizeof(_tLightMeter) - 1;",
          "461:   type = pTypeLux;",
          "462:   subtype = sTypeLux;",
          "463:   id1 = 0;",
          "464:   id2 = 0;",
          "465:   id3 = 0;",
          "466:   id4 = 0;",
          "467:   battery_level = 255;",
          "468:   dunit = 0;",
          "469:   fLux = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "405:  int32_t intval1;",
          "406:  int32_t intval2;",
          "407:  char text[64];",
          "408:  _tGeneralDevice()",
          "409:  {",
          "418:   text[0] = 0;",
          "419:  }",
          "420: } GeneralDevice;",
          "",
          "[Removed Lines]",
          "410:   len=sizeof(_tGeneralDevice)-1;",
          "411:   type=pTypeGeneral;",
          "412:   subtype=sTypeVisibility;",
          "413:   id=0;",
          "414:   floatval1=0;",
          "415:   floatval2=0;",
          "416:   intval1=0;",
          "417:   intval2=0;",
          "",
          "[Added Lines]",
          "484:  template <class Archive>",
          "485:  void serialize(Archive & ar)",
          "486:  {",
          "487:   ar & cereal::make_nvp(\"len\", len);",
          "488:   ar & cereal::make_nvp(\"type\", type);",
          "489:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "490:   ar & cereal::make_nvp(\"id\", id);",
          "491:   ar & cereal::make_nvp(\"floatval1\", floatval1);",
          "492:   ar & cereal::make_nvp(\"floatval2\", floatval2);",
          "493:   ar & cereal::make_nvp(\"intval1\", intval1);",
          "494:   ar & cereal::make_nvp(\"intval2\", intval2);",
          "495:   ar & cereal::make_nvp(\"text\", text);",
          "496:  }",
          "500:   len = sizeof(_tGeneralDevice) - 1;",
          "501:   type = pTypeGeneral;",
          "502:   subtype = sTypeVisibility;",
          "503:   id = 0;",
          "504:   floatval1 = 0;",
          "505:   floatval2 = 0;",
          "506:   intval1 = 0;",
          "507:   intval2 = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "432:  uint8_t seqnbr;",
          "433:  int32_t reserved_int;",
          "434:  float reserved_float;",
          "435:  _tGeneralSwitch()",
          "436:  {",
          "437:   len = sizeof(_tGeneralSwitch) - 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:  template <class Archive>",
          "527:  void serialize(Archive & ar)",
          "528:  {",
          "529:   ar & cereal::make_nvp(\"len\", len);",
          "530:   ar & cereal::make_nvp(\"type\", type);",
          "531:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "532:   ar & cereal::make_nvp(\"id\", id);",
          "533:   ar & cereal::make_mvp(\"unitcode\", unitcode);",
          "534:   ar & cereal::make_mvp(\"cmnd\", cmnd);",
          "535:   ar & cereal::make_mvp(\"level\", level);",
          "536:   ar & cereal::make_mvp(\"rssi\", rssi);",
          "537:   ar & cereal::make_mvp(\"battery_level\", battery_level);",
          "538:   ar & cereal::make_mvp(\"seqnbr\", seqnbr);",
          "539:   ar & cereal::make_mvp(\"reserved_int\", reserved_int);",
          "540:   ar & cereal::make_mvp(\"reserved_float\", reserved_float);",
          "541:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "450: } GeneralSwitch;",
          "452: typedef struct _tP1Power {",
          "453:  uint8_t len;",
          "454:  uint8_t type;",
          "455:  uint8_t subtype;",
          "464:  {",
          "475:  }",
          "479:  uint8_t len;",
          "480:  uint8_t type;",
          "481:  uint8_t subtype;",
          "485:  {",
          "491:  }",
          "",
          "[Removed Lines]",
          "456:  uint32_t powerusage1;",
          "457:  uint32_t powerusage2;",
          "458:  uint32_t powerdeliv1;",
          "459:  uint32_t powerdeliv2;",
          "460:  uint32_t usagecurrent;",
          "461:  uint32_t delivcurrent;",
          "462:  int32_t ID;",
          "463:  _tP1Power()",
          "465:   len = sizeof(_tP1Power) - 1;",
          "466:   type = pTypeP1Power;",
          "467:   subtype = sTypeP1Power;",
          "468:   ID = 1;",
          "469:   powerusage1 = 0;",
          "470:   powerusage2 = 0;",
          "471:   powerdeliv1 = 0;",
          "472:   powerdeliv2 = 0;",
          "473:   usagecurrent = 0;",
          "474:   delivcurrent = 0;",
          "476: } P1Power;",
          "478: typedef struct _tP1Gas {",
          "482:  uint32_t gasusage;",
          "483:  int32_t ID;",
          "484:  _tP1Gas()",
          "486:   len = sizeof(_tP1Gas) - 1;",
          "487:   type = pTypeP1Gas;",
          "488:   subtype = sTypeP1Gas;",
          "489:   ID = 1;",
          "490:   gasusage = 0;",
          "492: } P1Gas;",
          "494: typedef union tREVOBUF {",
          "495:  struct _tEVOHOME1 {",
          "496:   uint8_t len;",
          "497:   uint8_t type;",
          "498:   uint8_t subtype;",
          "499:   uint8_t id1;",
          "500:   uint8_t id2;",
          "501:   uint8_t id3;",
          "502:   uint8_t status;",
          "503:   uint8_t mode;",
          "504:   uint16_t year;",
          "505:   uint8_t month;",
          "506:   uint8_t day;",
          "507:   uint8_t hrs;",
          "508:   uint8_t mins;",
          "509:   uint8_t action;",
          "510:  } EVOHOME1;",
          "512:  struct _tEVOHOME2 {",
          "513:   uint8_t len;",
          "514:   uint8_t type;",
          "515:   uint8_t subtype;",
          "516:   uint8_t id1;",
          "517:   uint8_t id2;",
          "518:   uint8_t id3;",
          "519:   uint8_t zone;",
          "520:   uint8_t updatetype;",
          "521:   int16_t temperature;",
          "522:   uint8_t mode;",
          "523:   uint8_t controllermode;",
          "524:   uint16_t year;",
          "525:   uint8_t month;",
          "526:   uint8_t day;",
          "527:   uint8_t hrs;",
          "528:   uint8_t mins;",
          "529:   uint8_t battery_level;",
          "530:  } EVOHOME2;",
          "532:  struct _tEVOHOME3 {",
          "533:   uint8_t len;",
          "534:   uint8_t type;",
          "535:   uint8_t subtype;",
          "536:   uint8_t id1;",
          "537:   uint8_t id2;",
          "538:   uint8_t id3;",
          "539:   uint8_t devno;",
          "540:   uint8_t demand;",
          "541:   uint8_t updatetype;",
          "542:   uint8_t battery_level;",
          "543:  } EVOHOME3;",
          "544: } REVOBUF;",
          "",
          "[Added Lines]",
          "561:  uint8_t len = sizeof(_tP1Power) - 1;",
          "562:  uint8_t type = pTypeP1Power;",
          "563:  uint8_t subtype = sTypeP1Power;",
          "564:  uint32_t powerusage1 = 0;",
          "565:  uint32_t powerusage2 = 0;",
          "566:  uint32_t powerdeliv1 = 0;",
          "567:  uint32_t powerdeliv2 = 0;",
          "568:  uint32_t usagecurrent = 0;",
          "569:  uint32_t delivcurrent = 0;",
          "570:  int32_t ID = 1;",
          "572:  template <class Archive>",
          "573:  void serialize(Archive & ar)",
          "574:  {",
          "575:   ar & cereal::make_nvp(\"len\", len);",
          "576:   ar & cereal::make_nvp(\"type\", type);",
          "577:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "578:   ar & cereal::make_nvp(\"powerusage1\", powerusage1);",
          "579:   ar & cereal::make_nvp(\"powerusage2\", powerusage2);",
          "580:   ar & cereal::make_nvp(\"powerdeliv1\", powerdeliv1);",
          "581:   ar & cereal::make_nvp(\"powerdeliv2\", powerdeliv2);",
          "582:   ar & cereal::make_nvp(\"usagecurrent\", usagecurrent);",
          "583:   ar & cereal::make_nvp(\"delivcurrent\", delivcurrent);",
          "584:   ar & cereal::make_nvp(\"ID\", ID);",
          "585:  }",
          "586: } P1Power;",
          "588: typedef struct _tP1Gas {",
          "589:  uint8_t len = sizeof(_tP1Gas) - 1;",
          "590:  uint8_t type = pTypeP1Gas;",
          "591:  uint8_t subtype = sTypeP1Gas;",
          "592:  uint32_t gasusage = 0;",
          "593:  int32_t ID = 1;",
          "595:  template <class Archive>",
          "596:  void serialize(Archive & ar)",
          "597:  {",
          "598:   ar & cereal::make_nvp(\"len\", len);",
          "599:   ar & cereal::make_nvp(\"type\", type);",
          "600:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "601:   ar & cereal::make_nvp(\"gasusage\", gasusage);",
          "602:   ar & cereal::make_nvp(\"ID\", ID);",
          "603:  }",
          "604: } P1Gas;",
          "606: typedef struct _tEVOHOME1 {",
          "610:  uint8_t id1;",
          "611:  uint8_t id2;",
          "612:  uint8_t id3;",
          "613:  uint8_t status;",
          "614:  uint8_t mode;",
          "615:  uint16_t year;",
          "616:  uint8_t month;",
          "617:  uint8_t day;",
          "618:  uint8_t hrs;",
          "619:  uint8_t mins;",
          "620:  uint8_t action;",
          "622:  template <class Archive>",
          "623:  void serialize(Archive & ar)",
          "625:   ar & cereal::make_nvp(\"len\", len);",
          "626:   ar & cereal::make_nvp(\"type\", type);",
          "627:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "628:   ar & cereal::make_nvp(\"id1\", id1);",
          "629:   ar & cereal::make_nvp(\"id2\", id2);",
          "630:   ar & cereal::make_nvp(\"id3\", id3);",
          "631:   ar & cereal::make_nvp(\"status\", status);",
          "632:   ar & cereal::make_nvp(\"mode\", mode);",
          "633:   ar & cereal::make_nvp(\"year\", year);",
          "634:   ar & cereal::make_nvp(\"month\", month);",
          "635:   ar & cereal::make_nvp(\"day\", day);",
          "636:   ar & cereal::make_nvp(\"hrs\", hrs);",
          "637:   ar & cereal::make_nvp(\"mins\", mins);",
          "638:   ar & cereal::make_nvp(\"action\", action);",
          "640: } EVOHOME1;",
          "642: typedef struct _tEVOHOME2 {",
          "646:  uint8_t id1;",
          "647:  uint8_t id2;",
          "648:  uint8_t id3;",
          "649:  uint8_t zone;",
          "650:  uint8_t updatetype;",
          "651:  int16_t temperature;",
          "652:  uint8_t mode;",
          "653:  uint8_t controllermode;",
          "654:  uint16_t year;",
          "655:  uint8_t month;",
          "656:  uint8_t day;",
          "657:  uint8_t hrs;",
          "658:  uint8_t mins;",
          "659:  uint8_t battery_level;",
          "661:  template <class Archive>",
          "662:  void serialize(Archive & ar)",
          "664:   ar & cereal::make_nvp(\"len\", len);",
          "665:   ar & cereal::make_nvp(\"type\", type);",
          "666:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "667:   ar & cereal::make_nvp(\"id1\", id1);",
          "668:   ar & cereal::make_nvp(\"id2\", id2);",
          "669:   ar & cereal::make_nvp(\"id3\", id3);",
          "670:   ar & cereal::make_nvp(\"zone\", zone);",
          "671:   ar & cereal::make_nvp(\"updatetype\", updatetype);",
          "672:   ar & cereal::make_nvp(\"temperature\", temperature);",
          "673:   ar & cereal::make_nvp(\"mode\", mode);",
          "674:   ar & cereal::make_nvp(\"controllermode\", controllermode);",
          "675:   ar & cereal::make_nvp(\"year\", year);",
          "676:   ar & cereal::make_nvp(\"month\", month);",
          "677:   ar & cereal::make_nvp(\"day\", day);",
          "678:   ar & cereal::make_nvp(\"hrs\", hrs);",
          "679:   ar & cereal::make_nvp(\"mins\", mins);",
          "680:   ar & cereal::make_nvp(\"battery_level\", battery_level);",
          "682: } EVOHOME2;",
          "684: typedef struct _tEVOHOME3 {",
          "685:  uint8_t len;",
          "686:  uint8_t type;",
          "687:  uint8_t subtype;",
          "688:  uint8_t id1;",
          "689:  uint8_t id2;",
          "690:  uint8_t id3;",
          "691:  uint8_t devno;",
          "692:  uint8_t demand;",
          "693:  uint8_t updatetype;",
          "694:  uint8_t battery_level;",
          "696:  template <class Archive>",
          "697:  void serialize(Archive & ar)",
          "698:  {",
          "699:   ar & cereal::make_nvp(\"len\", len);",
          "700:   ar & cereal::make_nvp(\"type\", type);",
          "701:   ar & cereal::make_nvp(\"subtype\", subtype);",
          "702:   ar & cereal::make_nvp(\"id1\", id1);",
          "703:   ar & cereal::make_nvp(\"id2\", id2);",
          "704:   ar & cereal::make_nvp(\"id3\", id3);",
          "705:   ar & cereal::make_nvp(\"devno\", devno);",
          "706:   ar & cereal::make_nvp(\"demand\", demand);",
          "707:   ar & cereal::make_nvp(\"updatetype\", updatetype);",
          "708:   ar & cereal::make_nvp(\"battery_level\", battery_level);",
          "709:  }",
          "710: } EVOHOME3;",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6459:  procResult.DeviceRowIdx = DevRowIdx;",
          "6460: }",
          "6462: void MainWorker::decode_evohome2(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6463: {",
          "6464:  char szTmp[100];",
          "6466:  unsigned char cmnd = 0;",
          "6467:  unsigned char SignalLevel = 255;//Unknown",
          "6468:  unsigned char BatteryLevel = 255;//Unknown",
          "6471:  std::vector<std::vector<std::string> > result;",
          "6473:  {",
          "6474:   result = m_sql.safe_query(",
          "6475:    \"SELECT HardwareID, DeviceID,Unit,Type,SubType,sValue,BatteryLevel \"",
          "6476:    \"FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID == '%x') AND (Type==%d)\",",
          "6478:  }",
          "6480:  {",
          "6481:   result = m_sql.safe_query(",
          "6482:    \"SELECT HardwareID, DeviceID,Unit,Type,SubType,sValue,BatteryLevel \"",
          "6483:    \"FROM DeviceStatus WHERE (HardwareID==%d) AND (Unit == %d) AND (Type==%d)\",",
          "6485:  }",
          "6486:  else//unit number not available then id3 should be the zone device id",
          "6487:  {",
          "6488:   result = m_sql.safe_query(",
          "6489:    \"SELECT HardwareID, DeviceID,Unit,Type,SubType,sValue,BatteryLevel \"",
          "6490:    \"FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID == '%x') AND (Type==%d)\",",
          "6492:  }",
          "6494:   return;",
          "6496:  CEvohomeBase *pEvoHW = reinterpret_cast<CEvohomeBase*>(GetHardware(HwdID));",
          "",
          "[Removed Lines]",
          "6465:  const REVOBUF *pEvo = reinterpret_cast<const REVOBUF*>(pResponse);",
          "6472:  if (pEvo->EVOHOME2.type == pTypeEvohomeZone && pEvo->EVOHOME2.zone > 12) //Allow for additional Zone Temp devices which require DeviceID",
          "6477:    HwdID, (int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3), (int)pEvo->EVOHOME2.type);",
          "6479:  else if (pEvo->EVOHOME2.zone)//if unit number is available the id3 will be the controller device id",
          "6484:    HwdID, (int)pEvo->EVOHOME2.zone, (int)pEvo->EVOHOME2.type);",
          "6491:    HwdID, (int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3), (int)pEvo->EVOHOME2.type);",
          "6493:  if (result.size() < 1 && !pEvo->EVOHOME2.zone)",
          "",
          "[Added Lines]",
          "6462: void MainWorker::decode_evohome1(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6463: {",
          "6464:  char szTmp[100];",
          "6465:  const _tEVOHOME1 *pEvo = reinterpret_cast<const _tEVOHOME1*>(pResponse);",
          "6466:  unsigned char devType = pTypeEvohome;",
          "6467:  unsigned char subType = pEvo->subtype;",
          "6468:  std::stringstream szID;",
          "6469:  if (HwdType == HTYPE_EVOHOME_SERIAL || HwdType == HTYPE_EVOHOME_TCP)",
          "6470:   szID << std::hex << (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3);",
          "6471:  else //GB3: web based evohome uses decimal device ID's",
          "6472:   szID << std::dec << (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3);",
          "6473:  std::string ID(szID.str());",
          "6474:  unsigned char Unit = 0;",
          "6475:  unsigned char cmnd = pEvo->status;",
          "6476:  unsigned char SignalLevel = 255;//Unknown",
          "6477:  unsigned char BatteryLevel = 255;//Unknown",
          "6479:  std::string szUntilDate;",
          "6480:  if (pEvo->mode == CEvohomeBase::cmTmp)//temporary",
          "6481:   szUntilDate = CEvohomeDateTime::GetISODate(pEvo);",
          "6483:  CEvohomeBase *pEvoHW = reinterpret_cast<CEvohomeBase*>(GetHardware(HwdID));",
          "6486:  std::vector<std::vector<std::string> > result;",
          "6487:  result = m_sql.safe_query(",
          "6488:   \"SELECT HardwareID, DeviceID,Unit,Type,SubType,SwitchType,StrParam1,nValue,sValue FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID == '%q')\",",
          "6489:   HwdID, ID.c_str());",
          "6490:  bool bNewDev = false;",
          "6491:  std::string name;",
          "6492:  if (!result.empty())",
          "6493:  {",
          "6494:   std::vector<std::string> sd = result[0];",
          "6495:   if (atoi(sd[7].c_str()) == cmnd && sd[8] == szUntilDate)",
          "6496:    return;",
          "6497:  }",
          "6498:  else",
          "6499:  {",
          "6500:   bNewDev = true;",
          "6501:   if (!pEvoHW)",
          "6502:    return;",
          "6503:   name = pEvoHW->GetControllerName();",
          "6504:   if (name.empty())",
          "6505:    return;",
          "6506:  }",
          "6508:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szUntilDate.c_str(), procResult.DeviceName, pEvo->action != 0);",
          "6509:  if (DevRowIdx == -1)",
          "6510:   return;",
          "6511:  if (bNewDev)",
          "6512:  {",
          "6513:   m_sql.safe_query(\"UPDATE DeviceStatus SET Name='%q' WHERE (ID == %\" PRIu64 \")\",",
          "6514:    name.c_str(), DevRowIdx);",
          "6515:   procResult.DeviceName = name;",
          "6516:  }",
          "6518:  CheckSceneCode(DevRowIdx, devType, subType, cmnd, \"\");",
          "6519:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "6520:  {",
          "6521:   WriteMessageStart();",
          "6522:   switch (pEvo->subtype)",
          "6523:   {",
          "6524:   case sTypeEvohome:",
          "6525:    WriteMessage(\"subtype       = Evohome\");",
          "6526:    break;",
          "6527:   default:",
          "6528:    sprintf(szTmp, \"ERROR: Unknown Sub type for Packet type= %02X:%02X\", pEvo->type, pEvo->subtype);",
          "6529:    WriteMessage(szTmp);",
          "6530:    break;",
          "6531:   }",
          "6533:   if (HwdType == HTYPE_EVOHOME_SERIAL || HwdType == HTYPE_EVOHOME_TCP)",
          "6534:    sprintf(szTmp, \"id            = %02X:%02X:%02X\", pEvo->id1, pEvo->id2, pEvo->id3);",
          "6535:   else //GB3: web based evohome uses decimal device ID's",
          "6536:    sprintf(szTmp, \"id            = %u\", (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3));",
          "6537:   WriteMessage(szTmp);",
          "6538:   sprintf(szTmp, \"action        = %d\", (int)pEvo->action);",
          "6539:   WriteMessage(szTmp);",
          "6540:   WriteMessage(\"status        = \");",
          "6541:   WriteMessage(pEvoHW->GetControllerModeName(pEvo->status));",
          "6543:   WriteMessageEnd();",
          "6544:  }",
          "6545:  procResult.DeviceRowIdx = DevRowIdx;",
          "6546: }",
          "6551:  const _tEVOHOME2 *pEvo = reinterpret_cast<const _tEVOHOME2*>(pResponse);",
          "6558:  if (pEvo->type == pTypeEvohomeZone && pEvo->zone > 12) //Allow for additional Zone Temp devices which require DeviceID",
          "6563:    HwdID, (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3), (int)pEvo->type);",
          "6565:  else if (pEvo->zone)//if unit number is available the id3 will be the controller device id",
          "6570:    HwdID, (int)pEvo->zone, (int)pEvo->type);",
          "6577:    HwdID, (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3), (int)pEvo->type);",
          "6579:  if (result.size() < 1 && !pEvo->zone)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6514:  else",
          "6515:  {",
          "6516:   bNewDev = true;",
          "6522:   szDevID = szID.str();",
          "6524:   if (!pEvoHW)",
          "",
          "[Removed Lines]",
          "6517:   Unit = pEvo->EVOHOME2.zone;//should always be non zero",
          "6518:   dType = pEvo->EVOHOME2.type;",
          "6519:   dSubType = pEvo->EVOHOME2.subtype;",
          "6521:   szID << std::hex << (int)RFX_GETID3(pEvo->EVOHOME2.id1, pEvo->EVOHOME2.id2, pEvo->EVOHOME2.id3);",
          "",
          "[Added Lines]",
          "6603:   Unit = pEvo->zone;//should always be non zero",
          "6604:   dType = pEvo->type;",
          "6605:   dSubType = pEvo->subtype;",
          "6607:   szID << std::hex << (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6534:   szUpdateStat = \"0.0;0.0;Auto\";",
          "6535:  }",
          "6539:  else",
          "6540:  {",
          "6543:   else",
          "6546:   std::vector<std::string> strarray;",
          "6547:   StringSplit(szUpdateStat, \";\", strarray);",
          "6548:   if (strarray.size() >= 3)",
          "6549:   {",
          "6551:    {",
          "6552:     strarray[1] = szTmp;",
          "6554:     {",
          "6556:      if (dType == pTypeEvohomeWater && (nControllerMode == pEvoHW->cmEvoHeatingOff || nControllerMode == pEvoHW->cmEvoAutoWithEco || nControllerMode == pEvoHW->cmEvoCustom))//dhw has no economy mode and does not turn off for heating off also appears custom does not support the dhw zone",
          "6557:       nControllerMode = pEvoHW->cmEvoAuto;",
          "6559:       strarray[2] = pEvoHW->GetWebAPIModeName(nControllerMode);//the web front end ultimately uses these names for images etc.",
          "6560:      else",
          "6563:      {",
          "6565:       if (strarray.size() < 4) //add or set until",
          "6566:        strarray.push_back(szISODate);",
          "6567:       else",
          "6568:        strarray[3] = szISODate;",
          "6569:      }",
          "6571:      {",
          "6572:       strarray[2] = \"FollowSchedule\";",
          "6574:       {",
          "6576:        if (strarray.size() < 4) //add or set until",
          "6577:         strarray.push_back(szISODate);",
          "6578:        else",
          "",
          "[Removed Lines]",
          "6537:  if (pEvo->EVOHOME2.updatetype == CEvohomeBase::updBattery)",
          "6538:   BatteryLevel = pEvo->EVOHOME2.battery_level;",
          "6541:   if (dType == pTypeEvohomeWater && pEvo->EVOHOME2.updatetype == pEvoHW->updSetPoint)",
          "6542:    sprintf(szTmp, \"%s\", pEvo->EVOHOME2.temperature ? \"On\" : \"Off\");",
          "6544:    sprintf(szTmp, \"%.2f\", pEvo->EVOHOME2.temperature / 100.0f);",
          "6550:    if (pEvo->EVOHOME2.updatetype == pEvoHW->updSetPoint)//SetPoint",
          "6553:     if (pEvo->EVOHOME2.mode <= pEvoHW->zmTmp)//for the moment only update this if we get a valid setpoint mode as we can now send setpoint on its own",
          "6555:      int nControllerMode = pEvo->EVOHOME2.controllermode;",
          "6558:      if (pEvo->EVOHOME2.mode == pEvoHW->zmAuto || nControllerMode == pEvoHW->cmEvoHeatingOff)//if zonemode is auto (followschedule) or controllermode is heatingoff",
          "6561:       strarray[2] = pEvoHW->GetZoneModeName(pEvo->EVOHOME2.mode);",
          "6562:      if (pEvo->EVOHOME2.mode == pEvoHW->zmTmp)",
          "6564:       std::string szISODate(CEvohomeDateTime::GetISODate(pEvo->EVOHOME2));",
          "6570:      else if ((pEvo->EVOHOME2.mode == pEvoHW->zmAuto) && (HwdType == HTYPE_EVOHOME_WEB))",
          "6573:       if ((pEvo->EVOHOME2.year != 0) && (pEvo->EVOHOME2.year != 0xFFFF))",
          "6575:        std::string szISODate(CEvohomeDateTime::GetISODate(pEvo->EVOHOME2));",
          "",
          "[Added Lines]",
          "6623:  if (pEvo->updatetype == CEvohomeBase::updBattery)",
          "6624:   BatteryLevel = pEvo->battery_level;",
          "6627:   if (dType == pTypeEvohomeWater && pEvo->updatetype == pEvoHW->updSetPoint)",
          "6628:    sprintf(szTmp, \"%s\", pEvo->temperature ? \"On\" : \"Off\");",
          "6630:    sprintf(szTmp, \"%.2f\", pEvo->temperature / 100.0f);",
          "6636:    if (pEvo->updatetype == pEvoHW->updSetPoint)//SetPoint",
          "6639:     if (pEvo->mode <= pEvoHW->zmTmp)//for the moment only update this if we get a valid setpoint mode as we can now send setpoint on its own",
          "6641:      int nControllerMode = pEvo->controllermode;",
          "6644:      if (pEvo->mode == pEvoHW->zmAuto || nControllerMode == pEvoHW->cmEvoHeatingOff)//if zonemode is auto (followschedule) or controllermode is heatingoff",
          "6647:       strarray[2] = pEvoHW->GetZoneModeName(pEvo->mode);",
          "6648:      if (pEvo->mode == pEvoHW->zmTmp)",
          "6650:       std::string szISODate(CEvohomeDateTime::GetISODate(pEvo));",
          "6656:      else if ((pEvo->mode == pEvoHW->zmAuto) && (HwdType == HTYPE_EVOHOME_WEB))",
          "6659:       if ((pEvo->year != 0) && (pEvo->year != 0xFFFF))",
          "6661:        std::string szISODate(CEvohomeDateTime::GetISODate(pEvo));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6585:        strarray.resize(3);",
          "6586:     }",
          "6587:    }",
          "6589:    {",
          "6591:     if (strarray.size() >= 4) //remove until",
          "6592:      strarray.resize(3);",
          "6593:    }",
          "",
          "[Removed Lines]",
          "6588:    else if (pEvo->EVOHOME2.updatetype == pEvoHW->updOverride)",
          "6590:     strarray[2] = pEvoHW->GetZoneModeName(pEvo->EVOHOME2.mode);",
          "",
          "[Added Lines]",
          "6674:    else if (pEvo->updatetype == pEvoHW->updOverride)",
          "6676:     strarray[2] = pEvoHW->GetZoneModeName(pEvo->mode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6608:  procResult.DeviceRowIdx = DevRowIdx;",
          "6609: }",
          "6697: void MainWorker::decode_evohome3(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6698: {",
          "6699:  char szTmp[100];",
          "6701:  unsigned char devType = pTypeEvohomeRelay;",
          "6703:  std::stringstream szID;",
          "6705:  szID << std::hex << nDevID;",
          "6706:  std::string ID(szID.str());",
          "6710:  std::string szDemand(szTmp);",
          "6711:  unsigned char SignalLevel = 255;//Unknown",
          "6712:  unsigned char BatteryLevel = 255;//Unknown",
          "",
          "[Removed Lines]",
          "6611: void MainWorker::decode_evohome1(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6612: {",
          "6613:  char szTmp[100];",
          "6614:  const REVOBUF *pEvo = reinterpret_cast<const REVOBUF*>(pResponse);",
          "6615:  unsigned char devType = pTypeEvohome;",
          "6616:  unsigned char subType = pEvo->EVOHOME1.subtype;",
          "6617:  std::stringstream szID;",
          "6618:  if (HwdType == HTYPE_EVOHOME_SERIAL || HwdType == HTYPE_EVOHOME_TCP)",
          "6619:   szID << std::hex << (int)RFX_GETID3(pEvo->EVOHOME1.id1, pEvo->EVOHOME1.id2, pEvo->EVOHOME1.id3);",
          "6620:  else //GB3: web based evohome uses decimal device ID's",
          "6621:   szID << std::dec << (int)RFX_GETID3(pEvo->EVOHOME1.id1, pEvo->EVOHOME1.id2, pEvo->EVOHOME1.id3);",
          "6622:  std::string ID(szID.str());",
          "6623:  unsigned char Unit = 0;",
          "6624:  unsigned char cmnd = pEvo->EVOHOME1.status;",
          "6625:  unsigned char SignalLevel = 255;//Unknown",
          "6626:  unsigned char BatteryLevel = 255;//Unknown",
          "6628:  std::string szUntilDate;",
          "6629:  if (pEvo->EVOHOME1.mode == CEvohomeBase::cmTmp)//temporary",
          "6630:   szUntilDate = CEvohomeDateTime::GetISODate(pEvo->EVOHOME1);",
          "6632:  CEvohomeBase *pEvoHW = reinterpret_cast<CEvohomeBase*>(GetHardware(HwdID));",
          "6635:  std::vector<std::vector<std::string> > result;",
          "6636:  result = m_sql.safe_query(",
          "6637:   \"SELECT HardwareID, DeviceID,Unit,Type,SubType,SwitchType,StrParam1,nValue,sValue FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID == '%q')\",",
          "6638:   HwdID, ID.c_str());",
          "6639:  bool bNewDev = false;",
          "6640:  std::string name;",
          "6641:  if (!result.empty())",
          "6642:  {",
          "6643:   std::vector<std::string> sd = result[0];",
          "6644:   if (atoi(sd[7].c_str()) == cmnd && sd[8] == szUntilDate)",
          "6645:    return;",
          "6646:  }",
          "6647:  else",
          "6648:  {",
          "6649:   bNewDev = true;",
          "6650:   if (!pEvoHW)",
          "6651:    return;",
          "6652:   name = pEvoHW->GetControllerName();",
          "6653:   if (name.empty())",
          "6654:    return;",
          "6655:  }",
          "6657:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szUntilDate.c_str(), procResult.DeviceName, pEvo->EVOHOME1.action != 0);",
          "6658:  if (DevRowIdx == -1)",
          "6659:   return;",
          "6660:  if (bNewDev)",
          "6661:  {",
          "6662:   m_sql.safe_query(\"UPDATE DeviceStatus SET Name='%q' WHERE (ID == %\" PRIu64 \")\",",
          "6663:    name.c_str(), DevRowIdx);",
          "6664:   procResult.DeviceName = name;",
          "6665:  }",
          "6667:  CheckSceneCode(DevRowIdx, devType, subType, cmnd, \"\");",
          "6668:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "6669:  {",
          "6670:   WriteMessageStart();",
          "6671:   switch (pEvo->EVOHOME1.subtype)",
          "6672:   {",
          "6673:   case sTypeEvohome:",
          "6674:    WriteMessage(\"subtype       = Evohome\");",
          "6675:    break;",
          "6676:   default:",
          "6677:    sprintf(szTmp, \"ERROR: Unknown Sub type for Packet type= %02X:%02X\", pEvo->EVOHOME1.type, pEvo->EVOHOME1.subtype);",
          "6678:    WriteMessage(szTmp);",
          "6679:    break;",
          "6680:   }",
          "6682:   if (HwdType == HTYPE_EVOHOME_SERIAL || HwdType == HTYPE_EVOHOME_TCP)",
          "6683:    sprintf(szTmp, \"id            = %02X:%02X:%02X\", pEvo->EVOHOME1.id1, pEvo->EVOHOME1.id2, pEvo->EVOHOME1.id3);",
          "6684:   else //GB3: web based evohome uses decimal device ID's",
          "6685:    sprintf(szTmp, \"id            = %u\", (int)RFX_GETID3(pEvo->EVOHOME1.id1, pEvo->EVOHOME1.id2, pEvo->EVOHOME1.id3));",
          "6686:   WriteMessage(szTmp);",
          "6687:   sprintf(szTmp, \"action        = %d\", (int)pEvo->EVOHOME1.action);",
          "6688:   WriteMessage(szTmp);",
          "6689:   WriteMessage(\"status        = \");",
          "6690:   WriteMessage(pEvoHW->GetControllerModeName(pEvo->EVOHOME1.status));",
          "6692:   WriteMessageEnd();",
          "6693:  }",
          "6694:  procResult.DeviceRowIdx = DevRowIdx;",
          "6695: }",
          "6700:  const REVOBUF *pEvo = reinterpret_cast<const REVOBUF*>(pResponse);",
          "6702:  unsigned char subType = pEvo->EVOHOME1.subtype;",
          "6704:  int nDevID = (int)RFX_GETID3(pEvo->EVOHOME3.id1, pEvo->EVOHOME3.id2, pEvo->EVOHOME3.id3);",
          "6707:  unsigned char Unit = pEvo->EVOHOME3.devno;",
          "6708:  unsigned char cmnd = (pEvo->EVOHOME3.demand > 0) ? light1_sOn : light1_sOff;",
          "6709:  sprintf(szTmp, \"%d\", pEvo->EVOHOME3.demand);",
          "",
          "[Added Lines]",
          "6700:  const _tEVOHOME3 *pEvo = reinterpret_cast<const _tEVOHOME3*>(pResponse);",
          "6702:  unsigned char subType = pEvo->subtype;",
          "6704:  int nDevID = (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3);",
          "6707:  unsigned char Unit = pEvo->devno;",
          "6708:  unsigned char cmnd = (pEvo->demand > 0) ? light1_sOn : light1_sOff;",
          "6709:  sprintf(szTmp, \"%d\", pEvo->demand);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6725:   result = m_sql.safe_query(",
          "6726:    \"SELECT HardwareID,DeviceID,Unit,Type,SubType,nValue,sValue,BatteryLevel \"",
          "6727:    \"FROM DeviceStatus WHERE (HardwareID==%d) AND (Unit == '%d') AND (Type==%d) AND (DeviceID == '%q')\",",
          "6729:  if (!result.empty())",
          "6730:  {",
          "6732:    return;",
          "6733:   unsigned char cur_cmnd = atoi(result[0][5].c_str());",
          "6734:   BatteryLevel = atoi(result[0][7].c_str());",
          "6737:   {",
          "6739:    szDemand = result[0][6];",
          "6740:    cmnd = (atoi(szDemand.c_str()) > 0) ? light1_sOn : light1_sOff;",
          "6741:   }",
          "",
          "[Removed Lines]",
          "6728:    HwdID, (int)Unit, (int)pEvo->EVOHOME3.type, ID.c_str());",
          "6731:   if (pEvo->EVOHOME3.demand == 0xFF)//we sometimes get a 0418 message after the initial device creation but it will mess up the logging as we don't have a demand",
          "6736:   if (pEvo->EVOHOME3.updatetype == CEvohomeBase::updBattery)",
          "6738:    BatteryLevel = pEvo->EVOHOME3.battery_level;",
          "",
          "[Added Lines]",
          "6728:    HwdID, (int)Unit, (int)pEvo->type, ID.c_str());",
          "6731:   if (pEvo->demand == 0xFF)//we sometimes get a 0418 message after the initial device creation but it will mess up the logging as we don't have a demand",
          "6736:   if (pEvo->updatetype == CEvohomeBase::updBattery)",
          "6738:    BatteryLevel = pEvo->battery_level;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6756:   if (Unit == 0xFF || (nDevID == 0 && Unit > 12))",
          "6757:    return;",
          "6758:   bNewDev = true;",
          "6760:    szDemand = \"0\";",
          "6763:  }",
          "6765:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szDemand.c_str(), procResult.DeviceName);",
          "",
          "[Removed Lines]",
          "6759:   if (pEvo->EVOHOME3.demand == 0xFF)//0418 allows us to associate unit and deviceid but no state information other messages only contain one or the other",
          "6761:   if (pEvo->EVOHOME3.updatetype == CEvohomeBase::updBattery)",
          "6762:    BatteryLevel = pEvo->EVOHOME3.battery_level;",
          "",
          "[Added Lines]",
          "6759:   if (pEvo->demand == 0xFF)//0418 allows us to associate unit and deviceid but no state information other messages only contain one or the other",
          "6761:   if (pEvo->updatetype == CEvohomeBase::updBattery)",
          "6762:    BatteryLevel = pEvo->battery_level;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6774:    procResult.DeviceName = \"DHW Valve\";",
          "6775:   else if (Unit == 0xFC)",
          "6776:   {",
          "6778:     procResult.DeviceName = \"Boiler (OT Bridge)\";",
          "6779:    else",
          "6780:     procResult.DeviceName = \"Boiler\";",
          "",
          "[Removed Lines]",
          "6777:    if (pEvo->EVOHOME3.id1 >> 2 == CEvohomeID::devBridge) // Evohome OT Bridge",
          "",
          "[Added Lines]",
          "6777:    if (pEvo->id1 >> 2 == CEvohomeID::devBridge) // Evohome OT Bridge",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "11646:  break;",
          "11647:  case pTypeEvohomeRelay:",
          "11648:  {",
          "11656:   if (switchcmd == \"On\")",
          "11658:   else",
          "11662:    return false;",
          "11663:   if (!IsTesting) {",
          "",
          "[Removed Lines]",
          "11649:   REVOBUF lcmd;",
          "11650:   memset(&lcmd, 0, sizeof(REVOBUF));",
          "11651:   lcmd.EVOHOME3.len = sizeof(lcmd.EVOHOME3) - 1;",
          "11652:   lcmd.EVOHOME3.type = pTypeEvohomeRelay;",
          "11653:   lcmd.EVOHOME3.subtype = sTypeEvohomeRelay;",
          "11654:   RFX_SETID3(ID, lcmd.EVOHOME3.id1, lcmd.EVOHOME3.id2, lcmd.EVOHOME3.id3)",
          "11655:    lcmd.EVOHOME3.devno = Unit;",
          "11657:    lcmd.EVOHOME3.demand = 200;",
          "11659:    lcmd.EVOHOME3.demand = level;",
          "11661:   if (!WriteToHardware(HardwareID, (const char*)&lcmd, sizeof(lcmd.EVOHOME3)))",
          "",
          "[Added Lines]",
          "11649:   _tEVOHOME3 lcmd;",
          "11650:   memset(&lcmd, 0, sizeof(_tEVOHOME3));",
          "11651:   lcmd.len = sizeof(_tEVOHOME3) - 1;",
          "11652:   lcmd.type = pTypeEvohomeRelay;",
          "11653:   lcmd.subtype = sTypeEvohomeRelay;",
          "11654:   RFX_SETID3(ID, lcmd.id1, lcmd.id2, lcmd.id3)",
          "11655:    lcmd.devno = Unit;",
          "11657:    lcmd.demand = 200;",
          "11659:    lcmd.demand = level;",
          "11661:   if (!WriteToHardware(HardwareID, (const char*)&lcmd, sizeof(_tEVOHOME3)))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "11814:  s_strid >> ID;",
          "11832:  PushRxMessage(pHardware, (const unsigned char *)&tsen, NULL, 255);",
          "",
          "[Removed Lines]",
          "11817:  REVOBUF tsen;",
          "11818:  memset(&tsen, 0, sizeof(REVOBUF));",
          "11819:  tsen.EVOHOME1.len = sizeof(tsen.EVOHOME1) - 1;",
          "11820:  tsen.EVOHOME1.type = pTypeEvohome;",
          "11821:  tsen.EVOHOME1.subtype = sTypeEvohome;",
          "11822:  RFX_SETID3(ID, tsen.EVOHOME1.id1, tsen.EVOHOME1.id2, tsen.EVOHOME1.id3)",
          "11823:   tsen.EVOHOME1.action = (action == \"1\") ? 1 : 0;",
          "11824:  tsen.EVOHOME1.status = nStatus;",
          "11826:  tsen.EVOHOME1.mode = until.empty() ? CEvohomeBase::cmPerm : CEvohomeBase::cmTmp;",
          "11827:  if (tsen.EVOHOME1.mode == CEvohomeBase::cmTmp)",
          "11828:   CEvohomeDateTime::DecodeISODate(tsen.EVOHOME1, until.c_str());",
          "11829:  WriteToHardware(HardwareID, (const char*)&tsen, sizeof(tsen.EVOHOME1));",
          "",
          "[Added Lines]",
          "11817:  _tEVOHOME1 tsen;",
          "11818:  memset(&tsen, 0, sizeof(_tEVOHOME1));",
          "11819:  tsen.len = sizeof(_tEVOHOME1) - 1;",
          "11820:  tsen.type = pTypeEvohome;",
          "11821:  tsen.subtype = sTypeEvohome;",
          "11822:  RFX_SETID3(ID, tsen.id1, tsen.id2, tsen.id3)",
          "11823:  tsen.action = (action == \"1\") ? 1 : 0;",
          "11824:  tsen.status = nStatus;",
          "11826:  tsen.mode = until.empty() ? CEvohomeBase::cmPerm : CEvohomeBase::cmTmp;",
          "11827:  if (tsen.mode == CEvohomeBase::cmTmp)",
          "11828:   CEvohomeDateTime::DecodeISODate(tsen, until.c_str());",
          "11829:  WriteToHardware(HardwareID, (const char*)&tsen, sizeof(_tEVOHOME1));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "11940:  if (pHardware->HwdType == HTYPE_EVOHOME_SCRIPT || pHardware->HwdType == HTYPE_EVOHOME_SERIAL || pHardware->HwdType == HTYPE_EVOHOME_WEB || pHardware->HwdType == HTYPE_EVOHOME_TCP)",
          "11941:  {",
          "11953:   if (nEvoMode == CEvohomeBase::zmTmp)",
          "11958:   result = m_sql.safe_query(",
          "",
          "[Removed Lines]",
          "11942:   REVOBUF tsen;",
          "11943:   memset(&tsen, 0, sizeof(tsen.EVOHOME2));",
          "11944:   tsen.EVOHOME2.len = sizeof(tsen.EVOHOME2) - 1;",
          "11945:   tsen.EVOHOME2.type = dType;",
          "11946:   tsen.EVOHOME2.subtype = dSubType;",
          "11947:   RFX_SETID3(ID, tsen.EVOHOME2.id1, tsen.EVOHOME2.id2, tsen.EVOHOME2.id3)",
          "11949:    tsen.EVOHOME2.zone = Unit;//controller is 0 so let our zones start from 1...",
          "11950:   tsen.EVOHOME2.updatetype = CEvohomeBase::updSetPoint;//setpoint",
          "11951:   tsen.EVOHOME2.temperature = static_cast<int16_t>((dType == pTypeEvohomeWater) ? TempValue : TempValue*100.0f);",
          "11952:   tsen.EVOHOME2.mode = nEvoMode;",
          "11954:    CEvohomeDateTime::DecodeISODate(tsen.EVOHOME2, until.c_str());",
          "11955:   WriteToHardware(HardwareID, (const char*)&tsen, sizeof(tsen.EVOHOME2));",
          "",
          "[Added Lines]",
          "11942:   _tEVOHOME2 tsen;",
          "11943:   memset(&tsen, 0, sizeof(_tEVOHOME2));",
          "11944:   tsen.len = sizeof(_tEVOHOME2) - 1;",
          "11945:   tsen.type = dType;",
          "11946:   tsen.subtype = dSubType;",
          "11947:   RFX_SETID3(ID, tsen.id1, tsen.id2, tsen.id3)",
          "11948:   tsen.zone = Unit;//controller is 0 so let our zones start from 1...",
          "11949:   tsen.updatetype = CEvohomeBase::updSetPoint;//setpoint",
          "11950:   tsen.temperature = static_cast<int16_t>((dType == pTypeEvohomeWater) ? TempValue : TempValue*100.0f);",
          "11951:   tsen.mode = nEvoMode;",
          "11953:    CEvohomeDateTime::DecodeISODate(tsen, until.c_str());",
          "11954:   WriteToHardware(HardwareID, (const char*)&tsen, sizeof(_tEVOHOME2));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "11961:   if (!result.empty())",
          "11962:   {",
          "11963:    sd = result[0];",
          "11965:   }",
          "11967:   PushAndWaitRxMessage(pHardware, (const unsigned char*)&tsen, NULL, -1);",
          "",
          "[Removed Lines]",
          "11964:    tsen.EVOHOME2.controllermode = atoi(sd[2].c_str());",
          "",
          "[Added Lines]",
          "11963:    tsen.controllermode = atoi(sd[2].c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "716a5255657edd5c1638ca79126183ecc772f1ea",
      "candidate_info": {
        "commit_hash": "716a5255657edd5c1638ca79126183ecc772f1ea",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/716a5255657edd5c1638ca79126183ecc772f1ea",
        "files": [
          "hardware/Winddelen.cpp"
        ],
        "message": "Winddelen added start log message",
        "before_after_code_files": [
          "hardware/Winddelen.cpp||hardware/Winddelen.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Winddelen.cpp||hardware/Winddelen.cpp": [
          "File: hardware/Winddelen.cpp -> hardware/Winddelen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: void CWinddelen::Do_Work()",
          "101: {",
          "102:  int sec_counter = WINDDELEN_POLL_INTERVAL - 2;",
          "104:  while (!m_stoprequested)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:  _log.Log(LOG_STATUS, \"Winddelen: Worker started...\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2da1f3a01e3e4bda0a1548f3dd319169baff7eba",
      "candidate_info": {
        "commit_hash": "2da1f3a01e3e4bda0a1548f3dd319169baff7eba",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2da1f3a01e3e4bda0a1548f3dd319169baff7eba",
        "files": [
          "webserver/cWebem.cpp"
        ],
        "message": "Changed random generator (removed boost implementation), could solve #2982",
        "before_after_code_files": [
          "webserver/cWebem.cpp||webserver/cWebem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webserver/cWebem.cpp||webserver/cWebem.cpp": [
          "File: webserver/cWebem.cpp -> webserver/cWebem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"stdafx.h\"",
          "7: #include \"cWebem.h\"",
          "8: #include <boost/bind.hpp>",
          "12: #include \"reply.hpp\"",
          "13: #include \"request.hpp\"",
          "14: #include \"mime_types.hpp\"",
          "",
          "[Removed Lines]",
          "9: #include <boost/uuid/uuid.hpp>            // uuid class",
          "10: #include <boost/uuid/uuid_generators.hpp> // uuid generators",
          "11: #include <boost/uuid/uuid_io.hpp>         // streaming operators etc.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: #include <stdarg.h>",
          "20: #include <fstream>",
          "21: #include <sstream>",
          "22: #include \"../main/Helper.h\"",
          "23: #include \"../main/localtime_r.h\"",
          "24: #include \"../main/Logger.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <cstdlib>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1328:    reply::add_header(&rep, \"Set-Cookie\", sstr.str(), false);",
          "1329:   }",
          "1331:   std::string cWebemRequestHandler::generateSessionID()",
          "1332:   {",
          "1342:    std::string sessionId = GenerateMD5Hash(base64_encode(randomValue));",
          "",
          "[Removed Lines]",
          "1334:    boost::uuids::random_generator gen;",
          "1335:    std::stringstream ss;",
          "1336:    std::string randomValue;",
          "1338:    boost::uuids::uuid u = gen();",
          "1339:    ss << u;",
          "1340:    randomValue = ss.str();",
          "",
          "[Added Lines]",
          "1330:   const std::string hexCHARS = \"0123456789abcdef\";",
          "1331:   std::string GenerateUUID() // DCE/RFC 4122",
          "1332:   {",
          "1333:    std::srand((unsigned int)std::time(nullptr));",
          "1334:    std::string uuid = std::string(36, ' ');",
          "1336:    uuid[8] = '-';",
          "1337:    uuid[13] = '-';",
          "1338:    uuid[14] = '4'; //M",
          "1339:    uuid[18] = '-';",
          "1341:    uuid[23] = '-';",
          "1343:    for (size_t ii = 0; ii < uuid.size(); ii++)",
          "1344:    {",
          "1345:     if (uuid[ii] == ' ')",
          "1346:     {",
          "1347:      uuid[ii] = hexCHARS[(ii == 19) ? (8 + (std::rand() & 0x03)) : std::rand() & 0x0F];",
          "1348:     }",
          "1349:    }",
          "1350:    return uuid;",
          "1351:   }",
          "1356:    std::string randomValue = GenerateUUID();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1349:   std::string cWebemRequestHandler::generateAuthToken(const WebEmSession & session, const request & req)",
          "1350:   {",
          "1360:    std::string authToken = base64_encode(randomValue);",
          "",
          "[Removed Lines]",
          "1352:    boost::uuids::random_generator gen;",
          "1353:    std::stringstream ss;",
          "1354:    std::string randomValue;",
          "1356:    boost::uuids::uuid u = gen();",
          "1357:    ss << u;",
          "1358:    randomValue = ss.str();",
          "",
          "[Added Lines]",
          "1368:    std::string randomValue = GenerateUUID();",
          "",
          "---------------"
        ]
      }
    }
  ]
}