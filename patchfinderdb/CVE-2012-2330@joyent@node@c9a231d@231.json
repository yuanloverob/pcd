{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b894521bd2ed81d3abfa3fc8931bd1b376a47b52",
      "candidate_info": {
        "commit_hash": "b894521bd2ed81d3abfa3fc8931bd1b376a47b52",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b894521bd2ed81d3abfa3fc8931bd1b376a47b52",
        "files": [
          "src/node.cc",
          "src/node.js"
        ],
        "message": "process: ensure that \"exit\" doesn't get emitted twice on a natural exit\n\nFixes \"test/simple/test-process-exit.js\".",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2773: void EmitExit(v8::Handle<v8::Object> process_l) {",
          "2775:   Local<Value> emit_v = process_l->Get(String::New(\"emit\"));",
          "2776:   assert(emit_v->IsFunction());",
          "2777:   Local<Function> emit = Local<Function>::Cast(emit_v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2775:   process_l->Set(String::NewSymbol(\"_exiting\"), True());",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:   };",
          "411:   startup.processKillAndExit = function() {",
          "414:     process.exit = function(code) {",
          "417:         process.emit('exit', code || 0);",
          "418:       }",
          "419:       process.reallyExit(code || 0);",
          "",
          "[Removed Lines]",
          "412:     var exiting = false;",
          "415:       if (!exiting) {",
          "416:         exiting = true;",
          "",
          "[Added Lines]",
          "413:       if (!process._exiting) {",
          "414:         process._exiting = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ddafbd5633827b4e855472acebf4525c817e011",
      "candidate_info": {
        "commit_hash": "4ddafbd5633827b4e855472acebf4525c817e011",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4ddafbd5633827b4e855472acebf4525c817e011",
        "files": [
          "benchmark/http_simple.js"
        ],
        "message": "Benchmark: add /unicode/nnn bench to http_simple.js",
        "before_after_code_files": [
          "benchmark/http_simple.js||benchmark/http_simple.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http_simple.js||benchmark/http_simple.js": [
          "File: benchmark/http_simple.js -> benchmark/http_simple.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: var fixed = makeString(20 * 1024, 'C'),",
          "10:     storedBytes = {},",
          "13: var useDomains = process.env.NODE_USE_DOMAINS;",
          "",
          "[Removed Lines]",
          "11:     storedBuffer = {};",
          "",
          "[Added Lines]",
          "11:     storedBuffer = {},",
          "12:     storedUnicode = {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     }",
          "61:     body = storedBuffer[n];",
          "63:   } else if (command == 'quit') {",
          "64:     res.connection.server.close();",
          "65:     body = 'quitting';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   } else if (command == 'unicode') {",
          "65:     var n = ~~arg;",
          "66:     if (n <= 0)",
          "67:       throw new Error('unicode called with n <= 0');",
          "68:     if (storedUnicode[n] === undefined) {",
          "69:       console.log('create storedUnicode[n]');",
          "70:       storedUnicode[n] = makeString(n, '\\u263A');",
          "71:     }",
          "72:     body = storedUnicode[n];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a946c2ee7aba1722aab9773bbf8534d063870e4",
      "candidate_info": {
        "commit_hash": "8a946c2ee7aba1722aab9773bbf8534d063870e4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8a946c2ee7aba1722aab9773bbf8534d063870e4",
        "files": [
          "benchmark/fs-readfile.js",
          "benchmark/http.sh",
          "benchmark/http_simple.js",
          "benchmark/io.js"
        ],
        "message": "benchmark: Backport improvements made in master\n\nPorted to v0.6 for easier comparison in the 0.8.0 blog post.",
        "before_after_code_files": [
          "benchmark/fs-readfile.js||benchmark/fs-readfile.js",
          "benchmark/http.sh||benchmark/http.sh",
          "benchmark/http_simple.js||benchmark/http_simple.js",
          "benchmark/io.js||benchmark/io.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/fs-readfile.js||benchmark/fs-readfile.js": [
          "File: benchmark/fs-readfile.js -> benchmark/fs-readfile.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: var path = require('path');",
          "6: var filename = path.resolve(__dirname, 'http.sh');",
          "7: var fs = require('fs');",
          "8: var count = 0;",
          "9: var go = true;",
          "10: var len = -1;",
          "11: var assert = require('assert');",
          "13: var concurrency = 1;",
          "14: var encoding = null;",
          "15: var time = 10;",
          "17: for (var i = 2; i < process.argv.length; i++) {",
          "18:   var arg = process.argv[i];",
          "19:   if (arg.match(/^-e$/)) {",
          "20:     encoding = process.argv[++i] || null;",
          "21:   } else if (arg.match(/^-c$/)) {",
          "22:     concurrency = ~~process.argv[++i];",
          "23:     if (concurrency < 1) concurrency = 1;",
          "24:   } else if (arg === '-t') {",
          "25:     time = ~~process.argv[++i];",
          "26:     if (time < 1) time = 1;",
          "27:   }",
          "28: }",
          "31: setTimeout(function() {",
          "32:   go = false;",
          "33: }, time * 1000);",
          "35: function round(n) {",
          "36:   return Math.floor(n * 100) / 100;",
          "37: }",
          "39: var start = Date.now();",
          "40: while (concurrency--) readFile();",
          "42: function readFile() {",
          "43:   if (!go) {",
          "44:     process.stdout.write('\\n');",
          "45:     console.log('read the file %d times (higher is better)', count);",
          "46:     var end = Date.now();",
          "47:     var elapsed = (end - start) / 1000;",
          "48:     var ns = elapsed * 1E9;",
          "49:     var nsper = round(ns / count);",
          "50:     console.log('%d ns per read (lower is better)', nsper);",
          "51:     var readsper = round(count / (ns / 1E9));",
          "52:     console.log('%d reads per sec (higher is better)', readsper);",
          "53:     process.exit(0);",
          "54:     return;",
          "55:   }",
          "57:   if (!(count % 1000)) {",
          "58:     process.stdout.write('.');",
          "59:   }",
          "61:   if (encoding) fs.readFile(filename, encoding, then);",
          "62:   else fs.readFile(filename, then);",
          "64:   function then(er, data) {",
          "65:     assert.ifError(er);",
          "66:     count++;",
          "68:     if (count === 1) len = data.length;",
          "69:     else assert(len === data.length);",
          "70:     readFile();",
          "71:   }",
          "72: }",
          "",
          "---------------"
        ],
        "benchmark/http.sh||benchmark/http.sh": [
          "File: benchmark/http.sh -> benchmark/http.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "2: cd \"$(dirname \"$(dirname $0)\")\"",
          "3: sudo sysctl -w net.inet.ip.portrange.first=12000",
          "4: sudo sysctl -w net.inet.tcp.msl=1000",
          "5: sudo sysctl -w kern.maxfiles=1000000 kern.maxfilesperproc=1000000",
          "6: ulimit -n 100000",
          "8: ./node benchmark/http_simple.js || exit 1 &",
          "9: sleep 1",
          "11: ab -n 30000 -c 100 http://127.0.0.1:8000/${TYPE:-bytes}/${LENGTH:-1024} | grep Req",
          "12: killall node",
          "",
          "---------------"
        ],
        "benchmark/http_simple.js||benchmark/http_simple.js": [
          "File: benchmark/http_simple.js -> benchmark/http_simple.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: console.log('pid ' + process.pid);",
          "12: }",
          "17: var server = http.createServer(function (req, res) {",
          "19:   var command = commands[1];",
          "21:   var arg = commands[2];",
          "22:   var n_chunks = parseInt(commands[3], 10);",
          "23:   var status = 200;",
          "27:     if (n <= 0)",
          "35:     }",
          "41:     if (storedBuffer[n] === undefined) {",
          "43:       storedBuffer[n] = new Buffer(n);",
          "44:       for (var i = 0; i < n; i++) {",
          "46:       }",
          "47:     }",
          "48:     body = storedBuffer[n];",
          "51:     res.connection.server.close();",
          "55:     body = fixed;",
          "60:     req.pipe(res);",
          "61:     return;",
          "63:   } else {",
          "64:     status = 404;",
          "66:   }",
          "70:   if (n_chunks > 0) {",
          "74:     var len = body.length;",
          "75:     var step = ~~(len / n_chunks) || len;",
          "",
          "[Removed Lines]",
          "1: path = require(\"path\");",
          "2: exec = require(\"child_process\").exec;",
          "3: http = require(\"http\");",
          "5: port = parseInt(process.env.PORT || 8000);",
          "9: fixed = \"\"",
          "10: for (var i = 0; i < 20*1024; i++) {",
          "11:   fixed += \"C\";",
          "14: stored = {};",
          "15: storedBuffer = {};",
          "18:   var commands = req.url.split(\"/\");",
          "20:   var body = \"\";",
          "25:   if (command == \"bytes\") {",
          "26:     var n = parseInt(arg, 10)",
          "28:       throw \"bytes called with n <= 0\"",
          "29:     if (stored[n] === undefined) {",
          "30:       console.log(\"create stored[n]\");",
          "31:       stored[n] = \"\";",
          "32:       for (var i = 0; i < n; i++) {",
          "33:         stored[n] += \"C\"",
          "34:       }",
          "36:     body = stored[n];",
          "38:   } else if (command == \"buffer\") {",
          "39:     var n = parseInt(arg, 10)",
          "40:     if (n <= 0) throw new Error(\"bytes called with n <= 0\");",
          "42:       console.log(\"create storedBuffer[n]\");",
          "45:         storedBuffer[n][i] = \"C\".charCodeAt(0);",
          "50:   } else if (command == \"quit\") {",
          "52:     body = \"quitting\";",
          "54:   } else if (command == \"fixed\") {",
          "57:   } else if (command == \"echo\") {",
          "58:     res.writeHead(200, { \"Content-Type\": \"text/plain\",",
          "59:                          \"Transfer-Encoding\": \"chunked\" });",
          "65:     body = \"not found\\n\";",
          "71:     res.writeHead(status, { \"Content-Type\": \"text/plain\",",
          "72:                             \"Transfer-Encoding\": \"chunked\" });",
          "",
          "[Added Lines]",
          "1: var path = require('path'),",
          "2:     exec = require('child_process').exec,",
          "3:     http = require('http');",
          "5: var port = parseInt(process.env.PORT || 8000);",
          "9: var fixed = makeString(20 * 1024, 'C'),",
          "10:     storedBytes = {},",
          "11:     storedBuffer = {},",
          "12:     storedUnicode = {};",
          "14: var useDomains = process.env.NODE_USE_DOMAINS;",
          "17: if (useDomains) {",
          "18:   var domain = require('domain');",
          "19:   var gdom = domain.create();",
          "20:   gdom.on('error', function(er) {",
          "21:     console.log('Error on global domain', er);",
          "22:     throw er;",
          "23:   });",
          "24:   gdom.enter();",
          "28:   if (useDomains) {",
          "29:     var dom = domain.create();",
          "30:     dom.add(req);",
          "31:     dom.add(res);",
          "32:   }",
          "34:   var commands = req.url.split('/');",
          "36:   var body = '';",
          "41:   if (command == 'bytes') {",
          "42:     var n = ~~arg;",
          "44:       throw new Error('bytes called with n <= 0')",
          "45:     if (storedBytes[n] === undefined) {",
          "46:       console.log('create storedBytes[n]');",
          "47:       storedBytes[n] = makeString(n, 'C');",
          "49:     body = storedBytes[n];",
          "51:   } else if (command == 'buffer') {",
          "52:     var n = ~~arg;",
          "53:     if (n <= 0)",
          "54:       throw new Error('buffer called with n <= 0');",
          "56:       console.log('create storedBuffer[n]');",
          "59:         storedBuffer[n][i] = 'C'.charCodeAt(0);",
          "64:   } else if (command == 'unicode') {",
          "65:     var n = ~~arg;",
          "66:     if (n <= 0)",
          "67:       throw new Error('unicode called with n <= 0');",
          "68:     if (storedUnicode[n] === undefined) {",
          "69:       console.log('create storedUnicode[n]');",
          "70:       storedUnicode[n] = makeString(n, '\\u263A');",
          "71:     }",
          "72:     body = storedUnicode[n];",
          "74:   } else if (command == 'quit') {",
          "76:     body = 'quitting';",
          "78:   } else if (command == 'fixed') {",
          "81:   } else if (command == 'echo') {",
          "82:     res.writeHead(200, { 'Content-Type': 'text/plain',",
          "83:                          'Transfer-Encoding': 'chunked' });",
          "89:     body = 'not found\\n';",
          "95:     res.writeHead(status, { 'Content-Type': 'text/plain',",
          "96:                             'Transfer-Encoding': 'chunked' });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   } else {",
          "83:     var content_length = body.length.toString();",
          "87:     res.end(body);",
          "88:   }",
          "90: });",
          "92: server.listen(port, function () {",
          "93:   console.log('Listening at http://127.0.0.1:'+port+'/');",
          "94: });",
          "",
          "[Removed Lines]",
          "85:     res.writeHead(status, { \"Content-Type\": \"text/plain\",",
          "86:                             \"Content-Length\": content_length });",
          "",
          "[Added Lines]",
          "109:     res.writeHead(status, { 'Content-Type': 'text/plain',",
          "110:                             'Content-Length': content_length });",
          "115: function makeString(size, c) {",
          "116:   var s = '';",
          "117:   while (s.length < size) {",
          "118:     s += c;",
          "119:   }",
          "120:   return s;",
          "121: }",
          "",
          "---------------"
        ],
        "benchmark/io.js||benchmark/io.js": [
          "File: benchmark/io.js -> benchmark/io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: function wt(tsize, bsize, done) {",
          "64:   var start = Date.now();",
          "66:   s.addListener('close', function() {",
          "67:     var end = Date.now();",
          "68:     var diff = end - start;",
          "",
          "[Removed Lines]",
          "65:   s = writetest(tsize, bsizes[0]);",
          "",
          "[Added Lines]",
          "65:   s = writetest(tsize, bsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: function rt(tsize, bsize, done) {",
          "75:   var start = Date.now();",
          "77:   s.addListener('close', function() {",
          "78:     var end = Date.now();",
          "79:     var diff = end - start;",
          "",
          "[Removed Lines]",
          "76:   s = readtest(tsize, bsizes[0]);",
          "",
          "[Added Lines]",
          "76:   s = readtest(tsize, bsize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4eb2804db9e3bbc06ebda6296620ce5bf6f7b02e",
      "candidate_info": {
        "commit_hash": "4eb2804db9e3bbc06ebda6296620ce5bf6f7b02e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4eb2804db9e3bbc06ebda6296620ce5bf6f7b02e",
        "files": [
          "lib/fs.js"
        ],
        "message": "fs: fix typo in fs.readFile of lying size=0 stat",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     fs.close(fd, function(er) {",
          "168:       if (size === 0) {",
          "171:       }",
          "173:       if (encoding) buffer = buffer.toString(encoding);",
          "",
          "[Removed Lines]",
          "170:         buffer = Buffer.concat(buffer.length, pos);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dee8c51547860c05d33b695b37daa06633a022b8",
      "candidate_info": {
        "commit_hash": "dee8c51547860c05d33b695b37daa06633a022b8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/dee8c51547860c05d33b695b37daa06633a022b8",
        "files": [
          "src/node.cc"
        ],
        "message": "node: don't check return value of unsetenv()\n\nIt returns void on some platforms, notably FreeBSD.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1937:   HandleScope scope;",
          "1938: #ifdef __POSIX__",
          "1939:   String::Utf8Value key(property);",
          "1946: #else",
          "1947:   String::Value key(property);",
          "1948:   WCHAR* key_ptr = reinterpret_cast<WCHAR*>(*key);",
          "",
          "[Removed Lines]",
          "1941:   if (unsetenv(*key) < 0) {",
          "1944:     return scope.Close(Boolean::New(getenv(*key) == NULL));",
          "1945:   };",
          "",
          "[Added Lines]",
          "1940:   if (!getenv(*key)) return False();",
          "1941:   unsetenv(*key); // can't check return value, it's void on some platforms",
          "1942:   return True();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1953:               GetLastError() != ERROR_SUCCESS;",
          "1954:     return scope.Close(Boolean::New(rv));",
          "1955:   }",
          "1956: #endif",
          "1959: }",
          "",
          "[Removed Lines]",
          "1958:   return v8::True();",
          "",
          "[Added Lines]",
          "1953:   return True();",
          "",
          "---------------"
        ]
      }
    }
  ]
}