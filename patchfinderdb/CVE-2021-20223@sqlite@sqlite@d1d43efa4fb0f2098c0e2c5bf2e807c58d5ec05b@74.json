{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca439a49677779b7cc1f3fd3c6d4b8d373276347",
      "candidate_info": {
        "commit_hash": "ca439a49677779b7cc1f3fd3c6d4b8d373276347",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca439a49677779b7cc1f3fd3c6d4b8d373276347",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/prepare.c",
          "src/test1.c",
          "test/corruptL.test",
          "test/dbfuzz001.test",
          "test/fts3corrupt4.test",
          "test/pager1.test",
          "test/tester.tcl"
        ],
        "message": "Disable rootpage bounds checking when the SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS setting is off, to facilitate reaching obscure error states during testing.\n\nFossilOrigin-Name: d7dd4fc464c791915f646b1ad228697d1fa16f530fc7d0e9aa702c8df3068c65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/prepare.c||src/prepare.c",
          "src/test1.c||src/test1.c",
          "test/corruptL.test||test/corruptL.test",
          "test/dbfuzz001.test||test/dbfuzz001.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/pager1.test||test/pager1.test",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75599a9731be19e213a8ae174b038a43381bc6883a6b7f4058c2c1625fdea432",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "889: ){",
          "890:   sqlite3 *db = pParse->db;",
          "893:     return SQLITE_OK;",
          "894:   }",
          "",
          "[Removed Lines]",
          "891:   if( sqlite3WritableSchema(db) || db->init.imposterTable ){",
          "",
          "[Added Lines]",
          "891:   if( sqlite3WritableSchema(db)",
          "892:    || db->init.imposterTable",
          "893:    || !sqlite3Config.bExtraSchemaChecks",
          "894:   ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:      || sqlite3_stricmp(zName, db->init.azInit[1])",
          "898:      || sqlite3_stricmp(zTblName, db->init.azInit[2])",
          "899:     ){",
          "904:     }",
          "905:   }else{",
          "906:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
          "",
          "[Removed Lines]",
          "900:       if( sqlite3Config.bExtraSchemaChecks ){",
          "902:         return SQLITE_ERROR;",
          "903:       }",
          "",
          "[Added Lines]",
          "904:       return SQLITE_ERROR;",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     if( sqlite3GetUInt32(argv[3], &db->init.newTnum)==0",
          "119:      || (db->init.newTnum>pData->mxPage && pData->mxPage>0)",
          "120:     ){",
          "122:     }",
          "123:     db->init.orphanTrigger = 0;",
          "124:     db->init.azInit = argv;",
          "",
          "[Removed Lines]",
          "121:       corruptSchema(pData, argv[1], \"invalid rootpage\");",
          "",
          "[Added Lines]",
          "121:       if( sqlite3Config.bExtraSchemaChecks ){",
          "122:         corruptSchema(pData, argv[1], \"invalid rootpage\");",
          "123:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:      || (pIndex->tnum>pData->mxPage && pData->mxPage!=0)",
          "161:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "162:     ){",
          "164:     }",
          "165:   }",
          "166:   return 0;",
          "",
          "[Removed Lines]",
          "163:       corruptSchema(pData, argv[1], \"invalid roopage\");",
          "",
          "[Added Lines]",
          "165:       if( sqlite3Config.bExtraSchemaChecks ){",
          "166:         corruptSchema(pData, argv[1], \"invalid roopage\");",
          "167:       }",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6437:   return TCL_OK;",
          "6438: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6448: static int SQLITE_TCLAPI extra_schema_checks(",
          "6453: ){",
          "6454:   int i = 0;",
          "6455:   if( objc!=2 ){",
          "6456:     Tcl_WrongNumArgs(interp, 1, objv, \"BOOLEAN\");",
          "6457:     return TCL_ERROR;",
          "6458:   }",
          "6459:   if( Tcl_GetBooleanFromObj(interp,objv[1],&i) ) return TCL_ERROR;",
          "6460:   sqlite3_test_control(SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS, i);",
          "6461:   return TCL_OK;",
          "6462: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8003:      { \"restore_prng_state\",            restore_prng_state, 0 },",
          "8004:      { \"reset_prng_state\",              reset_prng_state,   0 },",
          "8005:      { \"prng_seed\",                     prng_seed,          0 },",
          "8006:      { \"database_never_corrupt\",        database_never_corrupt, 0},",
          "8007:      { \"database_may_be_corrupt\",       database_may_be_corrupt, 0},",
          "8008:      { \"optimization_control\",          optimization_control,0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8030:      { \"extra_schema_checks\",           extra_schema_checks,    0},",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1174: | end clusterfuzz-testcase-minimized-sqlite3_dbfuzz2_fuzzer-4806406219825152",
          "1175: }]} {}",
          "1177: do_catchsql_test 14.1 {",
          "1178:   PRAGMA integrity_check;",
          "1179: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1177: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1181: do_catchsql_test 14.2 {",
          "1182:   ALTER TABLE t1 RENAME TO alkjalkjdfiiiwuer987lkjwer82mx97sf98788s9789s;",
          "1183: } {1 {database disk image is malformed}}",
          "1185: #-------------------------------------------------------------------------",
          "1186: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185: extra_schema_checks 1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1263: | end crash-3afa1ca9e9c1bd.db",
          "1264: }]} {}",
          "1266: do_execsql_test 15.1 {",
          "1267:   UPDATE c1 SET c= NOT EXISTS(SELECT 1 FROM c1 ORDER BY (SELECT 1 FROM c1 ORDER BY a)) +10 WHERE d BETWEEN 4 AND 7;",
          "1268: } {}",
          "1270: #-------------------------------------------------------------------------",
          "1271: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1268: extra_schema_checks 0",
          "1272: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:   }]",
          "362: } {}",
          "364: do_catchsql_test dbfuzz001-320 {",
          "365:   PRAGMA integrity_check;",
          "366: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: do_catchsql_test dbfuzz001-330 {",
          "369:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "370: } {1 {database disk image is malformed}}",
          "372: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: sqlite3_fts3_may_be_corrupt 1",
          "29: database_may_be_corrupt",
          "31: do_execsql_test 1.0 {",
          "32:   BEGIN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6281: } {1 {database disk image is malformed}}",
          "6283: set sqlite_fts3_enable_parentheses $saved",
          "6285: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6285: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/pager1.test||test/pager1.test": [
          "File: test/pager1.test -> test/pager1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1930:   catchsql { SELECT length(x||'') FROM t2 } db2",
          "1931: } {1 {database disk image is malformed}}",
          "1932: db2 close",
          "1933: do_test pager1-18.5 {",
          "1934:   sqlite3 db \"\"",
          "1935:   sqlite3_db_config db DEFENSIVE 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1944:   catchsql { SELECT * FROM x1 }",
          "1945: } {1 {database disk image is malformed}}",
          "1946: db close",
          "1948: do_test pager1-18.6 {",
          "1949:   faultsim_delete_and_reopen",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1948: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2479: # this setting by invoking \"database_can_be_corrupt\"",
          "2480: #",
          "2481: database_never_corrupt",
          "2483: source $testdir/thread_common.tcl",
          "2484: source $testdir/malloc_common.tcl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2482: extra_schema_checks 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8deae5ade337b578599b5e3c22d9480f24e7e53e",
      "candidate_info": {
        "commit_hash": "8deae5ade337b578599b5e3c22d9480f24e7e53e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8deae5ade337b578599b5e3c22d9480f24e7e53e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/build.c",
          "src/insert.c",
          "src/util.c",
          "src/vdbe.c",
          "src/wal.c"
        ],
        "message": "Fix signed/unsigned compiler warnings.\n\nFossilOrigin-Name: 1d69eee8b085d514f442840346f001b4785f8ec64f5ba66943e9577b26e2e29c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 805bb67a82be51dc6077480691ed815c63a37bd8fc00cf7e67e020349c6e322e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10150:   BtShared *pBt = p->pBt;",
          "10151:   u64 savedDbFlags = pBt->db->flags;",
          "10152:   char zErr[100];",
          "10156:   assert( nRoot>0 );",
          "",
          "[Removed Lines]",
          "10153:   VVA_ONLY( int nRef );",
          "",
          "[Added Lines]",
          "10155:   VVA_ONLY( int nRef );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2891:   Pgno iTab = pTab->tnum;",
          "2894:   while( 1 ){",
          "2895:     Index *pIdx;",
          "2898:     if( iDestroyed==0 || iTab<iDestroyed ){",
          "2899:       iLargest = iTab;",
          "",
          "[Removed Lines]",
          "2892:   int iDestroyed = 0;",
          "2896:     int iLargest = 0;",
          "",
          "[Added Lines]",
          "2892:   Pgno iDestroyed = 0;",
          "2896:     Pgno iLargest = 0;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     assert( pOp!=0 );",
          "181:     if( pOp->opcode==OP_OpenRead && pOp->p3==iDb ){",
          "182:       Index *pIndex;",
          "184:       if( tnum==pTab->tnum ){",
          "185:         return 1;",
          "186:       }",
          "",
          "[Removed Lines]",
          "183:       int tnum = pOp->p2;",
          "",
          "[Added Lines]",
          "183:       Pgno tnum = pOp->p2;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:   u64 x;",
          "606:   char zTemp[22];",
          "607:   if( v<0 ){",
          "609:   }else{",
          "610:     x = v;",
          "611:   }",
          "",
          "[Removed Lines]",
          "608:     x = (v==SMALLEST_INT64) ? ((u64)1)<<63 : -v;",
          "",
          "[Added Lines]",
          "608:     x = (v==SMALLEST_INT64) ? ((u64)1)<<63 : (u64)-v;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2282:   }",
          "2284:   for(i=0; i<n; i++){",
          "2286:     assert( memIsValid(&aMem[p1+idx]) );",
          "2287:     assert( memIsValid(&aMem[p2+idx]) );",
          "2288:     REGISTER_TRACE(p1+idx, &aMem[p1+idx]);",
          "",
          "[Removed Lines]",
          "2285:     idx = aPermute ? aPermute[i] : i;",
          "",
          "[Added Lines]",
          "2285:     idx = aPermute ? aPermute[i] : (u32)i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2738:           offset64 += sqlite3VdbeSerialTypeLen(t);",
          "2739:         }",
          "2740:         aOffset[++i] = (u32)(offset64 & 0xffffffff);",
          "",
          "[Removed Lines]",
          "2741:       }while( i<=p2 && zHdr<zEndHdr );",
          "",
          "[Added Lines]",
          "2741:       }while( (u32)i<=p2 && zHdr<zEndHdr );",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:        && (iHash>=2 || iFrame<=HASHTABLE_NPAGE_ONE+HASHTABLE_NPAGE)",
          "968:        && (iHash<=2 || iFrame>(HASHTABLE_NPAGE_ONE+2*HASHTABLE_NPAGE))",
          "969:   );",
          "970:   return iHash;",
          "971: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "970:   assert( iHash>=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1246:     iLastFrame = (nSize - WAL_HDRSIZE) / szFrame;",
          "1248:       u32 *aShare;",
          "1253:       rc = walIndexPage(pWal, iPg, (volatile u32**)&aShare);",
          "1254:       if( rc ) break;",
          "1255:       pWal->apWiData[iPg] = aPrivate;",
          "",
          "[Removed Lines]",
          "1247:     for(iPg=0; iPg<=walFramePage(iLastFrame); iPg++){",
          "1250:       int iLast = MIN(iLastFrame, HASHTABLE_NPAGE_ONE+iPg*HASHTABLE_NPAGE);",
          "1251:       int iFirst = 1 + (iPg==0?0:HASHTABLE_NPAGE_ONE+(iPg-1)*HASHTABLE_NPAGE);",
          "1252:       int nHdr, nHdr32;",
          "",
          "[Added Lines]",
          "1248:     for(iPg=0; iPg<=(u32)walFramePage(iLastFrame); iPg++){",
          "1251:       u32 iLast = MIN(iLastFrame, HASHTABLE_NPAGE_ONE+iPg*HASHTABLE_NPAGE);",
          "1252:       u32 iFirst = 1 + (iPg==0?0:HASHTABLE_NPAGE_ONE+(iPg-1)*HASHTABLE_NPAGE);",
          "1253:       u32 nHdr, nHdr32;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b39aab08d371123b7a83bc0162dc9a1c29984b0",
      "candidate_info": {
        "commit_hash": "1b39aab08d371123b7a83bc0162dc9a1c29984b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1b39aab08d371123b7a83bc0162dc9a1c29984b0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Ifdef-out code that is only possible with the sessions extension.\n\nFossilOrigin-Name: 4fcf07f79672d203efbc90ad21d97f6a131c3885306f8e0bab015d5ac44b8644",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 937be22106f7e3f08712febd342d6cb81d129f2d5ab24ce80b3a5c3f9bbde54e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131:   pMem->flags = flags;",
          "1132:   if( enc ){",
          "1133:     pMem->enc = enc;",
          "1137:     pMem->enc = SQLITE_UTF8;",
          "1138:   }",
          "1141: #ifndef SQLITE_OMIT_UTF16",
          "1142:   if( enc>SQLITE_UTF8 && sqlite3VdbeMemHandleBom(pMem) ){",
          "1143:     return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "1134:   }else if( pMem->db ){",
          "1135:     pMem->enc = ENC(pMem->db);",
          "1136:   }else{",
          "",
          "[Added Lines]",
          "1134: #ifdef SQLITE_ENABLE_SESSION",
          "1135:   }else if( pMem->db==0 ){",
          "1137: #endif",
          "1138:   }else{",
          "1139:     assert( pMem->db!=0 );",
          "1140:     pMem->enc = ENC(pMem->db);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41cee66848afe40aba1e4d4a83bd50b6c33aaff0",
      "candidate_info": {
        "commit_hash": "41cee66848afe40aba1e4d4a83bd50b6c33aaff0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41cee66848afe40aba1e4d4a83bd50b6c33aaff0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/treeview.c",
          "src/trigger.c",
          "src/update.c"
        ],
        "message": "Change the name of the Expr.a.zName field to zEName, so that it has a name that is distinct from other fields and variables and is hence easier to grep for.\n\nFossilOrigin-Name: d3783357f8fa76c42a86f12b214522f0388c37773c36ab8c5ce0623abbc4436a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c",
          "src/trigger.c||src/trigger.c",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5e1949bca998f3c8c23a8ebf01c7a2e7a2af1fdad43886271e1fe0f25411551d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:   if( ALWAYS(p->pEList) ){",
          "765:     ExprList *pList = p->pEList;",
          "766:     for(i=0; i<pList->nExpr; i++){",
          "769:       }",
          "770:     }",
          "771:   }",
          "",
          "[Removed Lines]",
          "767:       if( pList->a[i].zName ){",
          "768:         sqlite3RenameTokenRemap(pParse, 0, (void*)pList->a[i].zName);",
          "",
          "[Added Lines]",
          "767:       if( pList->a[i].zEName ){",
          "768:         sqlite3RenameTokenRemap(pParse, 0, (void*)pList->a[i].zEName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808:     sWalker.xExprCallback = renameUnmapExprCb;",
          "809:     sqlite3WalkExprList(&sWalker, pEList);",
          "810:     for(i=0; i<pEList->nExpr; i++){",
          "812:     }",
          "813:   }",
          "814: }",
          "",
          "[Removed Lines]",
          "811:       sqlite3RenameTokenRemap(pParse, 0, (void*)pEList->a[i].zName);",
          "",
          "[Added Lines]",
          "811:       sqlite3RenameTokenRemap(pParse, 0, (void*)pEList->a[i].zEName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "946:   if( pEList ){",
          "947:     int i;",
          "948:     for(i=0; i<pEList->nExpr; i++){",
          "950:       if( 0==sqlite3_stricmp(zName, zOld) ){",
          "951:         renameTokenFind(pParse, pCtx, (void*)zName);",
          "952:       }",
          "",
          "[Removed Lines]",
          "949:       char *zName = pEList->a[i].zName;",
          "",
          "[Added Lines]",
          "949:       char *zName = pEList->a[i].zEName;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3091:   nByte = sizeof(*pFKey) + (nCol-1)*sizeof(pFKey->aCol[0]) + pTo->n + 1;",
          "3092:   if( pToCol ){",
          "3093:     for(i=0; i<pToCol->nExpr; i++){",
          "3095:     }",
          "3096:   }",
          "3097:   pFKey = sqlite3DbMallocZero(db, nByte );",
          "",
          "[Removed Lines]",
          "3094:       nByte += sqlite3Strlen30(pToCol->a[i].zName) + 1;",
          "",
          "[Added Lines]",
          "3094:       nByte += sqlite3Strlen30(pToCol->a[i].zEName) + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3116:     for(i=0; i<nCol; i++){",
          "3117:       int j;",
          "3118:       for(j=0; j<p->nCol; j++){",
          "3120:           pFKey->aCol[i].iFrom = j;",
          "3121:           break;",
          "3122:         }",
          "",
          "[Removed Lines]",
          "3119:         if( sqlite3StrICmp(p->aCol[j].zName, pFromCol->a[i].zName)==0 ){",
          "",
          "[Added Lines]",
          "3119:         if( sqlite3StrICmp(p->aCol[j].zName, pFromCol->a[i].zEName)==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3124:       if( j>=p->nCol ){",
          "3125:         sqlite3ErrorMsg(pParse,",
          "3126:           \"unknown column \\\"%s\\\" in foreign key definition\",",
          "3128:         goto fk_end;",
          "3129:       }",
          "3130:       if( IN_RENAME_OBJECT ){",
          "3132:       }",
          "3133:     }",
          "3134:   }",
          "3135:   if( pToCol ){",
          "3136:     for(i=0; i<nCol; i++){",
          "3138:       pFKey->aCol[i].zCol = z;",
          "3139:       if( IN_RENAME_OBJECT ){",
          "3141:       }",
          "3143:       z[n] = 0;",
          "3144:       z += n+1;",
          "3145:     }",
          "",
          "[Removed Lines]",
          "3127:           pFromCol->a[i].zName);",
          "3131:         sqlite3RenameTokenRemap(pParse, &pFKey->aCol[i], pFromCol->a[i].zName);",
          "3137:       int n = sqlite3Strlen30(pToCol->a[i].zName);",
          "3140:         sqlite3RenameTokenRemap(pParse, z, pToCol->a[i].zName);",
          "3142:       memcpy(z, pToCol->a[i].zName, n);",
          "",
          "[Added Lines]",
          "3127:           pFromCol->a[i].zEName);",
          "3131:         sqlite3RenameTokenRemap(pParse, &pFKey->aCol[i], pFromCol->a[i].zEName);",
          "3137:       int n = sqlite3Strlen30(pToCol->a[i].zEName);",
          "3140:         sqlite3RenameTokenRemap(pParse, z, pToCol->a[i].zEName);",
          "3142:       memcpy(z, pToCol->a[i].zEName, n);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1436:         pNewExpr->pLeft = pPriorSelectCol;",
          "1437:       }",
          "1438:     }",
          "1440:     pItem->zSpan = sqlite3DbStrDup(db, pOldItem->zSpan);",
          "1441:     pItem->sortFlags = pOldItem->sortFlags;",
          "1442:     pItem->done = 0;",
          "",
          "[Removed Lines]",
          "1439:     pItem->zName = sqlite3DbStrDup(db, pOldItem->zName);",
          "",
          "[Added Lines]",
          "1439:     pItem->zEName = sqlite3DbStrDup(db, pOldItem->zEName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1608:     pList = pNew;",
          "1609:   }",
          "1610:   pItem = &pList->a[pList->nExpr++];",
          "1612:   assert( offsetof(struct ExprList_item,pExpr)==0 );",
          "1614:   pItem->pExpr = pExpr;",
          "1615:   return pList;",
          "",
          "[Removed Lines]",
          "1611:   assert( offsetof(struct ExprList_item,zName)==sizeof(pItem->pExpr) );",
          "1613:   memset(&pItem->zName,0,sizeof(*pItem)-offsetof(struct ExprList_item,zName));",
          "",
          "[Added Lines]",
          "1611:   assert( offsetof(struct ExprList_item,zEName)==sizeof(pItem->pExpr) );",
          "1613:   memset(&pItem->zEName,0,sizeof(*pItem)-offsetof(struct ExprList_item,zEName));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1667:     pList = sqlite3ExprListAppend(pParse, pList, pSubExpr);",
          "1668:     if( pList ){",
          "1669:       assert( pList->nExpr==iFirst+i+1 );",
          "1671:       pColumns->a[i].zName = 0;",
          "1672:     }",
          "1673:   }",
          "",
          "[Removed Lines]",
          "1670:       pList->a[pList->nExpr-1].zName = pColumns->a[i].zName;",
          "",
          "[Added Lines]",
          "1670:       pList->a[pList->nExpr-1].zEName = pColumns->a[i].zName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1745:     struct ExprList_item *pItem;",
          "1746:     assert( pList->nExpr>0 );",
          "1747:     pItem = &pList->a[pList->nExpr-1];",
          "1751:     if( IN_RENAME_OBJECT ){",
          "1753:     }",
          "1754:   }",
          "1755: }",
          "",
          "[Removed Lines]",
          "1748:     assert( pItem->zName==0 );",
          "1749:     pItem->zName = sqlite3DbStrNDup(pParse->db, pName->z, pName->n);",
          "1750:     if( dequote ) sqlite3Dequote(pItem->zName);",
          "1752:       sqlite3RenameTokenMap(pParse, (void*)pItem->zName, pName);",
          "",
          "[Added Lines]",
          "1748:     assert( pItem->zEName==0 );",
          "1749:     pItem->zEName = sqlite3DbStrNDup(pParse->db, pName->z, pName->n);",
          "1750:     if( dequote ) sqlite3Dequote(pItem->zEName);",
          "1752:       sqlite3RenameTokenMap(pParse, (void*)pItem->zEName, pName);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1804:   assert( pList->nExpr>0 );",
          "1805:   do{",
          "1806:     sqlite3ExprDelete(db, pItem->pExpr);",
          "1808:     sqlite3DbFree(db, pItem->zSpan);",
          "1809:     pItem++;",
          "1810:   }while( --i>0 );",
          "",
          "[Removed Lines]",
          "1807:     sqlite3DbFree(db, pItem->zName);",
          "",
          "[Added Lines]",
          "1807:     sqlite3DbFree(db, pItem->zEName);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1635:       if( onError==OE_Ignore ){",
          "1636:         sqlite3VdbeGoto(v, ignoreDest);",
          "1637:       }else{",
          "1639:         if( zName==0 ) zName = pTab->zName;",
          "1641:         sqlite3HaltConstraint(pParse, SQLITE_CONSTRAINT_CHECK,",
          "",
          "[Removed Lines]",
          "1638:         char *zName = pCheck->a[i].zName;",
          "",
          "[Added Lines]",
          "1638:         char *zName = pCheck->a[i].zEName;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:       pEList = pNC->uNC.pEList;",
          "449:       assert( pEList!=0 );",
          "450:       for(j=0; j<pEList->nExpr; j++){",
          "452:         if( zAs!=0 && sqlite3StrICmp(zAs, zCol)==0 ){",
          "453:           Expr *pOrig;",
          "454:           assert( pExpr->pLeft==0 && pExpr->pRight==0 );",
          "",
          "[Removed Lines]",
          "451:         char *zAs = pEList->a[j].zName;",
          "",
          "[Added Lines]",
          "451:         char *zAs = pEList->a[j].zEName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1115:   if( pE->op==TK_ID ){",
          "1116:     char *zCol = pE->u.zToken;",
          "1117:     for(i=0; i<pEList->nExpr; i++){",
          "1119:       if( zAs!=0 && sqlite3StrICmp(zAs, zCol)==0 ){",
          "1120:         return i+1;",
          "1121:       }",
          "",
          "[Removed Lines]",
          "1118:       char *zAs = pEList->a[i].zName;",
          "",
          "[Added Lines]",
          "1118:       char *zAs = pEList->a[i].zEName;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:   if( srcTab>=0 ){",
          "919:     for(i=0; i<nResultCol; i++){",
          "920:       sqlite3VdbeAddOp3(v, OP_Column, srcTab, i, regResult+i);",
          "922:     }",
          "923:   }else if( eDest!=SRT_Exists ){",
          "924: #ifdef SQLITE_ENABLE_SORTER_REFERENCES",
          "",
          "[Removed Lines]",
          "921:       VdbeComment((v, \"%s\", p->pEList->a[i].zName));",
          "",
          "[Added Lines]",
          "921:       VdbeComment((v, \"%s\", p->pEList->a[i].zEName));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1539:         iRead = iCol--;",
          "1540:       }",
          "1541:       sqlite3VdbeAddOp3(v, OP_Column, iSortTab, iRead, regRow+i);",
          "1543:     }",
          "1544:   }",
          "1545:   switch( eDest ){",
          "",
          "[Removed Lines]",
          "1542:       VdbeComment((v, \"%s\", aOutEx[i].zName?aOutEx[i].zName : aOutEx[i].zSpan));",
          "",
          "[Added Lines]",
          "1542:       VdbeComment((v, \"%s\", aOutEx[i].zEName?aOutEx[i].zEName:aOutEx[i].zSpan));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1873:     assert( p!=0 );",
          "1879:       sqlite3VdbeSetColName(v, i, COLNAME_NAME, zName, SQLITE_TRANSIENT);",
          "1880:     }else if( srcName && p->op==TK_COLUMN ){",
          "1881:       char *zCol;",
          "",
          "[Removed Lines]",
          "1876:     if( pEList->a[i].zName ){",
          "1878:       char *zName = pEList->a[i].zName;",
          "",
          "[Added Lines]",
          "1876:     if( pEList->a[i].zEName ){",
          "1878:       char *zName = pEList->a[i].zEName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1959:   for(i=0, pCol=aCol; i<nCol && !db->mallocFailed; i++, pCol++){",
          "1964:     }else{",
          "1965:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "[Removed Lines]",
          "1962:     if( (zName = pEList->a[i].zName)!=0 ){",
          "",
          "[Added Lines]",
          "1962:     if( (zName = pEList->a[i].zEName)!=0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5004:         pNew = sqlite3ExprListAppend(pParse, pNew, a[k].pExpr);",
          "5005:         if( pNew ){",
          "5007:           pNew->a[pNew->nExpr-1].zSpan = a[k].zSpan;",
          "5009:           a[k].zSpan = 0;",
          "5010:         }",
          "5011:         a[k].pExpr = 0;",
          "",
          "[Removed Lines]",
          "5006:           pNew->a[pNew->nExpr-1].zName = a[k].zName;",
          "5008:           a[k].zName = 0;",
          "",
          "[Added Lines]",
          "5006:           pNew->a[pNew->nExpr-1].zEName = a[k].zEName;",
          "5008:           a[k].zEName = 0;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:         char cSep = '(';",
          "107:         int j;",
          "108:         for(j=0; j<pCte->pCols->nExpr; j++){",
          "110:           cSep = ',';",
          "111:         }",
          "112:         sqlite3_str_appendf(&x, \")\");",
          "",
          "[Removed Lines]",
          "109:           sqlite3_str_appendf(&x, \"%c%s\", cSep, pCte->pCols->a[j].zName);",
          "",
          "[Added Lines]",
          "109:           sqlite3_str_appendf(&x, \"%c%s\", cSep, pCte->pCols->a[j].zEName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "727:     sqlite3TreeViewLine(pView, \"%s\", zLabel);",
          "728:     for(i=0; i<pList->nExpr; i++){",
          "729:       int j = pList->a[i].u.x.iOrderByCol;",
          "731:       int moreToFollow = i<pList->nExpr - 1;",
          "732:       if( j || zName ){",
          "733:         sqlite3TreeViewPush(pView, moreToFollow);",
          "",
          "[Removed Lines]",
          "730:       char *zName = pList->a[i].zName;",
          "",
          "[Added Lines]",
          "730:       char *zName = pList->a[i].zEName;",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:   int e;",
          "689:   if( pIdList==0 || NEVER(pEList==0) ) return 1;",
          "690:   for(e=0; e<pEList->nExpr; e++){",
          "692:   }",
          "693:   return 0;",
          "694: }",
          "",
          "[Removed Lines]",
          "691:     if( sqlite3IdListIndex(pIdList, pEList->a[e].zName)>=0 ) return 1;",
          "",
          "[Added Lines]",
          "691:     if( sqlite3IdListIndex(pIdList, pEList->a[e].zEName)>=0 ) return 1;",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:       goto update_cleanup;",
          "306:     }",
          "307:     for(j=0; j<pTab->nCol; j++){",
          "309:         if( j==pTab->iPKey ){",
          "310:           chngRowid = 1;",
          "311:           pRowidExpr = pChanges->a[i].pExpr;",
          "",
          "[Removed Lines]",
          "308:       if( sqlite3StrICmp(pTab->aCol[j].zName, pChanges->a[i].zName)==0 ){",
          "",
          "[Added Lines]",
          "308:       if( sqlite3StrICmp(pTab->aCol[j].zName, pChanges->a[i].zEName)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:       }",
          "328:     }",
          "329:     if( j>=pTab->nCol ){",
          "331:         j = -1;",
          "332:         chngRowid = 1;",
          "333:         pRowidExpr = pChanges->a[i].pExpr;",
          "334:       }else{",
          "336:         pParse->checkSchema = 1;",
          "337:         goto update_cleanup;",
          "338:       }",
          "",
          "[Removed Lines]",
          "330:       if( pPk==0 && sqlite3IsRowid(pChanges->a[i].zName) ){",
          "335:         sqlite3ErrorMsg(pParse, \"no such column: %s\", pChanges->a[i].zName);",
          "",
          "[Added Lines]",
          "330:       if( pPk==0 && sqlite3IsRowid(pChanges->a[i].zEName) ){",
          "335:         sqlite3ErrorMsg(pParse, \"no such column: %s\", pChanges->a[i].zEName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a34cf551cf68dc5778082fa5e7eefc41f9970b6",
      "candidate_info": {
        "commit_hash": "0a34cf551cf68dc5778082fa5e7eefc41f9970b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a34cf551cf68dc5778082fa5e7eefc41f9970b6",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "In lemon, add \"%if\" and \"%else\" and allow boolean expressions as the argument to \"%if\", \"%ifdef\", and \"%ifndef\".\n\nFossilOrigin-Name: 951d22b72f80de9e23df645abcc3d88ca1a275b46ea23b84152ef48716922b37",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07f849dee3d245ecf80ba3c3ce8dfc630e71ddb1e9c0bcc1f08cee22001fcb07",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1636:   static int nolinenosflag = 0;",
          "1637:   static int noResort = 0;",
          "1638:   static int sqlFlag = 0;",
          "1640:   static struct s_options options[] = {",
          "1641:     {OPT_FLAG, \"b\", (char*)&basisflag, \"Print only the basis in report.\"},",
          "1642:     {OPT_FLAG, \"c\", (char*)&compress, \"Don't compress the action table.\"},",
          "1643:     {OPT_FSTR, \"d\", (char*)&handle_d_option, \"Output directory.  Default '.'\"},",
          "1644:     {OPT_FSTR, \"D\", (char*)handle_D_option, \"Define an %ifdef macro.\"},",
          "1645:     {OPT_FSTR, \"f\", 0, \"Ignored.  (Placeholder for -f compiler options.)\"},",
          "1646:     {OPT_FLAG, \"g\", (char*)&rpflag, \"Print grammar without actions.\"},",
          "1647:     {OPT_FSTR, \"I\", 0, \"Ignored.  (Placeholder for '-I' compiler options.)\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1640:   static int printPP = 0;",
          "1647:     {OPT_FLAG, \"E\", (char*)&printPP, \"Print input file after preprocessing.\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1686:   lem.filename = OptArg(0);",
          "1687:   lem.basisflag = basisflag;",
          "1688:   lem.nolinenosflag = nolinenosflag;",
          "1689:   Symbol_new(\"$\");",
          "1692:   Parse(&lem);",
          "1694:   if( lem.nrule==0 ){",
          "1695:     fprintf(stderr,\"Empty grammar.\\n\");",
          "1696:     exit(1);",
          "",
          "[Removed Lines]",
          "1693:   if( lem.errorcnt ) exit(lem.errorcnt);",
          "",
          "[Added Lines]",
          "1692:   lem.printPreprocessed = printPP;",
          "1697:   if( lem.printPreprocessed || lem.errorcnt ) exit(lem.errorcnt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2779:   }",
          "2780: }",
          "2787: static void preprocess_input(char *z){",
          "2789:   int exclude = 0;",
          "2790:   int start = 0;",
          "2791:   int lineno = 1;",
          "",
          "[Removed Lines]",
          "2788:   int i, j, k, n;",
          "",
          "[Added Lines]",
          "2789: static int eval_preprocessor_boolean(char *z, int lineno){",
          "2790:   int neg = 0;",
          "2791:   int res = 0;",
          "2792:   int okTerm = 1;",
          "2793:   int i;",
          "2794:   for(i=0; z[i]!=0; i++){",
          "2795:     if( ISSPACE(z[i]) ) continue;",
          "2796:     if( z[i]=='!' ){",
          "2797:       if( !okTerm ) goto pp_syntax_error;",
          "2798:       neg = !neg;",
          "2799:       continue;",
          "2800:     }",
          "2801:     if( z[i]=='|' && z[i+1]=='|' ){",
          "2802:       if( okTerm ) goto pp_syntax_error;",
          "2803:       if( res ) return 1;",
          "2804:       i++;",
          "2805:       okTerm = 1;",
          "2806:       continue;",
          "2807:     }",
          "2808:     if( z[i]=='&' && z[i+1]=='&' ){",
          "2809:       if( okTerm ) goto pp_syntax_error;",
          "2810:       if( !res ) return 0;",
          "2811:       i++;",
          "2812:       okTerm = 1;",
          "2813:       continue;",
          "2814:     }",
          "2815:     if( z[i]=='(' ){",
          "2816:       int k;",
          "2817:       int n = 1;",
          "2818:       if( !okTerm ) goto pp_syntax_error;",
          "2819:       for(k=i+1; z[k]; k++){",
          "2820:         if( z[k]==')' ){",
          "2821:           n--;",
          "2822:           if( n==0 ){",
          "2823:             z[k] = 0;",
          "2824:             res = eval_preprocessor_boolean(&z[i+1], -1);",
          "2825:             z[k] = ')';",
          "2826:             if( res<0 ){",
          "2827:               i = i-res;",
          "2828:               goto pp_syntax_error;",
          "2829:             }",
          "2830:             i = k;",
          "2831:             break;",
          "2832:           }",
          "2833:         }else if( z[k]=='(' ){",
          "2834:           n++;",
          "2835:         }else if( z[k]==0 ){",
          "2836:           i = k;",
          "2837:           goto pp_syntax_error;",
          "2838:         }",
          "2839:       }",
          "2840:       if( neg ){",
          "2841:         res = !res;",
          "2842:         neg = 0;",
          "2843:       }",
          "2844:       okTerm = 0;",
          "2845:       continue;",
          "2846:     }",
          "2847:     if( ISALPHA(z[i]) ){",
          "2848:       int j, k, n;",
          "2849:       if( !okTerm ) goto pp_syntax_error;",
          "2850:       for(k=i+1; ISALNUM(z[k]) || z[k]=='_'; k++){}",
          "2851:       n = k - i;",
          "2852:       res = 0;",
          "2853:       for(j=0; j<nDefine; j++){",
          "2854:         if( strncmp(azDefine[j],&z[i],n)==0 && azDefine[j][n]==0 ){",
          "2855:           res = 1;",
          "2856:           break;",
          "2857:         }",
          "2858:       }",
          "2859:       i = k-1;",
          "2860:       if( neg ){",
          "2861:         res = !res;",
          "2862:         neg = 0;",
          "2863:       }",
          "2864:       okTerm = 0;",
          "2865:       continue;",
          "2866:     }",
          "2867:     goto pp_syntax_error;",
          "2868:   }",
          "2869:   return res;",
          "2871: pp_syntax_error:",
          "2872:   if( lineno>0 ){",
          "2873:     fprintf(stderr, \"%%if syntax error on line %d.\\n\", lineno);",
          "2874:     fprintf(stderr, \"  %.*s <-- syntax error here\\n\", i+1, z);",
          "2875:     exit(1);",
          "2876:   }else{",
          "2877:     return -(i+1);",
          "2878:   }",
          "2879: }",
          "2887:   int i, j, k;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2801:         }",
          "2802:       }",
          "2803:       for(j=i; z[j] && z[j]!='\\n'; j++) z[j] = ' ';",
          "2806:       if( exclude ){",
          "2807:         exclude++;",
          "2808:       }else{",
          "2819:         if( exclude ){",
          "2820:           start = i;",
          "2821:           start_lineno = lineno;",
          "",
          "[Removed Lines]",
          "2804:     }else if( (strncmp(&z[i],\"%ifdef\",6)==0 && ISSPACE(z[i+6]))",
          "2805:           || (strncmp(&z[i],\"%ifndef\",7)==0 && ISSPACE(z[i+7])) ){",
          "2809:         for(j=i+7; ISSPACE(z[j]); j++){}",
          "2810:         for(n=0; z[j+n] && !ISSPACE(z[j+n]); n++){}",
          "2811:         exclude = 1;",
          "2812:         for(k=0; k<nDefine; k++){",
          "2813:           if( strncmp(azDefine[k],&z[j],n)==0 && lemonStrlen(azDefine[k])==n ){",
          "2814:             exclude = 0;",
          "2815:             break;",
          "2816:           }",
          "2817:         }",
          "2818:         if( z[i+3]=='n' ) exclude = !exclude;",
          "",
          "[Added Lines]",
          "2903:     }else if( strncmp(&z[i],\"%else\",5)==0 && ISSPACE(z[i+5]) ){",
          "2904:       if( exclude==1){",
          "2905:         exclude = 0;",
          "2906:         for(j=start; j<i; j++) if( z[j]!='\\n' ) z[j] = ' ';",
          "2907:       }else if( exclude==0 ){",
          "2908:         exclude = 1;",
          "2909:         start = i;",
          "2910:         start_lineno = lineno;",
          "2911:       }",
          "2912:       for(j=i; z[j] && z[j]!='\\n'; j++) z[j] = ' ';",
          "2913:     }else if( strncmp(&z[i],\"%ifdef \",7)==0",
          "2914:           || strncmp(&z[i],\"%if \",4)==0",
          "2915:           || strncmp(&z[i],\"%ifndef \",8)==0 ){",
          "2919:         int isNot;",
          "2920:         int iBool;",
          "2921:         for(j=i; z[j] && !ISSPACE(z[j]); j++){}",
          "2922:         iBool = j;",
          "2923:         isNot = (j==i+7);",
          "2924:         while( z[j] && z[j]!='\\n' ){ j++; }",
          "2925:         k = z[j];",
          "2926:         z[j] = 0;",
          "2927:         exclude = eval_preprocessor_boolean(&z[iBool], lineno);",
          "2928:         z[j] = k;",
          "2929:         if( !isNot ) exclude = !exclude;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2885:   preprocess_input(filebuf);",
          "2888:   lineno = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2997:   if( gp->printPreprocessed ){",
          "2998:     printf(\"%s\\n\", filebuf);",
          "2999:     return;",
          "3000:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}