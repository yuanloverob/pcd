{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "adcc2273f429fea9751dab3888d9336fb9792925",
      "candidate_info": {
        "commit_hash": "adcc2273f429fea9751dab3888d9336fb9792925",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/adcc2273f429fea9751dab3888d9336fb9792925",
        "files": [
          "include/uv.h"
        ],
        "message": "include: update uv_is_active() documentation\n\nSeems to have been overlooked in the reference counting refactor back\nin May 2012 in commit 9efa8b3.  Clarify what \"active\" means for\ndifferent kinds of handles.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    },
    {
      "candidate_hash": "ac879ed8f8078a6dd72e1929c29ca302bab6e3f2",
      "candidate_info": {
        "commit_hash": "ac879ed8f8078a6dd72e1929c29ca302bab6e3f2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ac879ed8f8078a6dd72e1929c29ca302bab6e3f2",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: add support for UNC paths on uv_spawn",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:                                     size_t cwd_len) {",
          "172:   WCHAR *result, *result_pos;",
          "173:   DWORD attrs;",
          "177:     cwd_len = 2;",
          "178:   } else if (dir_len >= 2 && dir[1] == L':' &&",
          "",
          "[Removed Lines]",
          "175:   if (dir_len >= 1 && (dir[0] == L'/' || dir[0] == L'\\\\')) {",
          "",
          "[Added Lines]",
          "174:   if (dir_len > 2 && dir[0] == L'\\\\' && dir[1] == L'\\\\') {",
          "176:     cwd_len = 0;",
          "177:   } else if (dir_len >= 1 && (dir[0] == L'/' || dir[0] == L'\\\\')) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f44933c43f9f549963d68f27e2911bd9941c0e9",
      "candidate_info": {
        "commit_hash": "7f44933c43f9f549963d68f27e2911bd9941c0e9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7f44933c43f9f549963d68f27e2911bd9941c0e9",
        "files": [
          "Makefile.am",
          "checksparse.sh",
          "include/uv.h",
          "src/unix/pipe.c",
          "src/uv-common.c",
          "test/test-list.h",
          "test/test-util.c",
          "uv.gyp"
        ],
        "message": "include: remove uv_strlcat() and uv_strlcpy()\n\nIt was pointed out that they don't quite work like their BSD namesakes\nand they arguably shouldn't have been part of the API anyway.\n\nFixes #983.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "checksparse.sh||checksparse.sh",
          "include/uv.h||include/uv.h",
          "src/unix/pipe.c||src/unix/pipe.c",
          "src/uv-common.c||src/uv-common.c",
          "test/test-list.h||test/test-list.h",
          "test/test-util.c||test/test-util.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:                          test/test-udp-open.c \\",
          "194:                          test/test-udp-options.c \\",
          "195:                          test/test-udp-send-and-recv.c \\",
          "197:                          test/test-walk-handles.c",
          "198: test_run_tests_LDADD = libuv.la",
          "",
          "[Removed Lines]",
          "196:                          test/test-util.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "checksparse.sh||checksparse.sh": [
          "File: checksparse.sh -> checksparse.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: test/test-udp-open.c",
          "159: test/test-udp-options.c",
          "160: test/test-udp-send-and-recv.c",
          "162: test/test-walk-handles.c",
          "163: \"",
          "",
          "[Removed Lines]",
          "161: test/test-util.c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "567: UV_EXTERN uv_buf_t uv_buf_init(char* base, unsigned int len);",
          "585: #define UV_STREAM_FIELDS                                                      \\",
          "587:   size_t write_queue_size;                                                    \\",
          "",
          "[Removed Lines]",
          "574: UV_EXTERN size_t uv_strlcpy(char* dst, const char* src, size_t size);",
          "582: UV_EXTERN size_t uv_strlcat(char* dst, const char* src, size_t size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/pipe.c||src/unix/pipe.c": [
          "File: src/unix/pipe.c -> src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   sockfd = err;",
          "74:   memset(&saddr, 0, sizeof saddr);",
          "76:   saddr.sun_family = AF_UNIX;",
          "78:   if (bind(sockfd, (struct sockaddr*)&saddr, sizeof saddr)) {",
          "",
          "[Removed Lines]",
          "75:   uv_strlcpy(saddr.sun_path, pipe_fname, sizeof(saddr.sun_path));",
          "",
          "[Added Lines]",
          "75:   strncpy(saddr.sun_path, pipe_fname, sizeof(saddr.sun_path) - 1);",
          "76:   saddr.sun_path[sizeof(saddr.sun_path) - 1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:   }",
          "169:   memset(&saddr, 0, sizeof saddr);",
          "171:   saddr.sun_family = AF_UNIX;",
          "173:   do {",
          "",
          "[Removed Lines]",
          "170:   uv_strlcpy(saddr.sun_path, name, sizeof(saddr.sun_path));",
          "",
          "[Added Lines]",
          "171:   strncpy(saddr.sun_path, name, sizeof(saddr.sun_path) - 1);",
          "172:   saddr.sun_path[sizeof(saddr.sun_path) - 1] = '\\0';",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #undef XX",
          "104: uv_buf_t uv_buf_init(char* base, unsigned int len) {",
          "105:   uv_buf_t buf;",
          "",
          "[Removed Lines]",
          "69: size_t uv_strlcpy(char* dst, const char* src, size_t size) {",
          "70:   size_t n;",
          "72:   if (size == 0)",
          "73:     return 0;",
          "75:   for (n = 0; n < (size - 1) && *src != '\\0'; n++)",
          "80:   return n;",
          "81: }",
          "84: size_t uv_strlcat(char* dst, const char* src, size_t size) {",
          "85:   size_t n;",
          "87:   if (size == 0)",
          "88:     return 0;",
          "90:   for (n = 0; n < size && *dst != '\\0'; n++, dst++);",
          "92:   if (n == size)",
          "93:     return n;",
          "95:   while (n < (size - 1) && *src != '\\0')",
          "96:     n++, *dst++ = *src++;",
          "100:   return n;",
          "101: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "209: TEST_DECLARE   (thread_mutex)",
          "210: TEST_DECLARE   (thread_rwlock)",
          "211: TEST_DECLARE   (thread_create)",
          "214: TEST_DECLARE   (dlerror)",
          "215: TEST_DECLARE   (poll_duplex)",
          "216: TEST_DECLARE   (poll_unidirectional)",
          "",
          "[Removed Lines]",
          "212: TEST_DECLARE   (strlcpy)",
          "213: TEST_DECLARE   (strlcat)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:   TEST_ENTRY  (thread_mutex)",
          "506:   TEST_ENTRY  (thread_rwlock)",
          "507:   TEST_ENTRY  (thread_create)",
          "510:   TEST_ENTRY  (dlerror)",
          "511:   TEST_ENTRY  (ip6_addr_link_local)",
          "512: #if 0",
          "",
          "[Removed Lines]",
          "508:   TEST_ENTRY  (strlcpy)",
          "509:   TEST_ENTRY  (strlcat)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test-util.c||test/test-util.c": [
          "File: test/test-util.c -> test/test-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:         'test/runner.h',",
          "298:         'test/test-get-loadavg.c',",
          "299:         'test/task.h',",
          "301:         'test/test-active.c',",
          "302:         'test/test-async.c',",
          "303:         'test/test-async-null-cb.c',",
          "",
          "[Removed Lines]",
          "300:         'test/test-util.c',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ab3e3f1dde5cf87acdc1c3dc8efc57e3ed328d7",
      "candidate_info": {
        "commit_hash": "1ab3e3f1dde5cf87acdc1c3dc8efc57e3ed328d7",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1ab3e3f1dde5cf87acdc1c3dc8efc57e3ed328d7",
        "files": [
          "src/win/udp.c"
        ],
        "message": "windows: \"else\" keyword is missing",
        "before_after_code_files": [
          "src/win/udp.c||src/win/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:                         &buf,",
          "489:                         (const struct sockaddr*) &from,",
          "490:                         UV_UDP_PARTIAL);",
          "493:         handle->recv_cb(handle, 0, &buf, NULL, 0);",
          "494:       } else if (err != WSAECONNRESET && err != WSAENETRESET) {",
          "",
          "[Removed Lines]",
          "491:       } if (err == WSAEWOULDBLOCK) {",
          "",
          "[Added Lines]",
          "491:       } else if (err == WSAEWOULDBLOCK) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a97685e7029afebf3781d694509dc9530bb7c6af",
      "candidate_info": {
        "commit_hash": "a97685e7029afebf3781d694509dc9530bb7c6af",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a97685e7029afebf3781d694509dc9530bb7c6af",
        "files": [
          "configure.ac"
        ],
        "message": "build: add automake serial-tests version check\n\nThe serial-tests directive was added in automake v0.11. Add an ad-hoc\nversion check to find out if it's safe to enable. Fixes the autotools\nbuild with older versions of automake.",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: AC_PREREQ(2.57)",
          "16: AC_INIT([libuv], [0.11.5], [https://github.com/joyent/libuv/issues])",
          "18: AC_CONFIG_MACRO_DIR([m4])",
          "19: AC_CANONICAL_HOST",
          "20: AC_ENABLE_SHARED",
          "",
          "[Removed Lines]",
          "17: AM_INIT_AUTOMAKE([foreign serial-tests subdir-objects -Wall -Werror])",
          "",
          "[Added Lines]",
          "17: # Use AM_SILENT_RULES as an ad-hoc version check to find out if it's safe",
          "18: # to use the serial-tests directive. Both were added in automake v0.11.",
          "19: AM_INIT_AUTOMAKE(m4_ifdef([AM_SILENT_RULES],",
          "20:                           [-Wall -Werror foreign subdir-objects serial-tests],",
          "21:                           [-Wall -Werror foreign subdir-objects]))",
          "",
          "---------------"
        ]
      }
    }
  ]
}