{
  "cve_id": "CVE-2022-1714",
  "cve_desc": "Out-of-bounds Read in GitHub repository radareorg/radare2 prior to 5.7.0. The bug causes the program reads data past the end of the intented buffer. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash.",
  "repo": "radareorg/radare2",
  "patch_hash": "3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e",
  "patch_info": {
    "commit_hash": "3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e",
    "files": [
      "libr/anal/p/anal_msp430.c",
      "libr/bin/format/elf/elf.c"
    ],
    "message": "Fix 4 byte oobread in msp430 disassembler ##crash\n\n* Only crashes with asan builds\n* Add missing =SN register\n* Reported by cnitlrt via huntrdev\n* BountyID: 1c22055b-b015-47a8-a57b-4982978751d0",
    "before_after_code_files": [
      "libr/anal/p/anal_msp430.c||libr/anal/p/anal_msp430.c",
      "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
    ]
  },
  "patch_diff": {
    "libr/anal/p/anal_msp430.c||libr/anal/p/anal_msp430.c": [
      "File: libr/anal/p/anal_msp430.c -> libr/anal/p/anal_msp430.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #include \"../arch/msp430/msp430_disas.h\"",
      "12: static int msp430_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {",
      "18:  op->size = -1;",
      "19:  op->nopcode = 1;",
      "20:  op->type = R_ANAL_OP_TYPE_UNK;",
      "21:  op->family = R_ANAL_OP_FAMILY_CPU;",
      "24:  if (mask & R_ANAL_OP_MASK_DISASM) {",
      "25:   if (ret < 1) {",
      "26:    op->mnemonic = strdup (\"invalid\");",
      "",
      "[Removed Lines]",
      "13:  int ret;",
      "14:  struct msp430_cmd cmd;",
      "16:  memset (&cmd, 0, sizeof (cmd));",
      "23:  ret = op->size = msp430_decode_command (buf, len, &cmd);",
      "",
      "[Added Lines]",
      "13:  struct msp430_cmd cmd = {0};",
      "19:  int ret = op->size = msp430_decode_command (buf, len, &cmd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:   case MSP430_CALL:",
      "60:    op->type = R_ANAL_OP_TYPE_CALL;",
      "61:    op->fail = addr + op->size;",
      "63:    break;",
      "64:   case MSP430_RETI:",
      "65:    op->type = R_ANAL_OP_TYPE_RET;",
      "",
      "[Removed Lines]",
      "62:    op->jump = r_read_at_le16 (buf, 2);",
      "",
      "[Added Lines]",
      "58:    if (len > 4) {",
      "59:     op->jump = r_read_at_le16 (buf, 2);",
      "60:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "111:  const char *p = \\",
      "112:   \"=PC pc\\n\"",
      "113:   \"=SP sp\\n\"",
      "115:   \"=A0 r12\\n\"",
      "116:   \"=A1 r13\\n\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112:   \"=SN r0\\n\"",
      "",
      "---------------"
    ],
    "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c": [
      "File: libr/bin/format/elf/elf.c -> libr/bin/format/elf/elf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  ut8 ehdr[sizeof (Elf_(Ehdr))] = {0};",
      "125:  int i, len;",
      "126:  if (r_buf_read_at (bin->b, 0, e_ident, EI_NIDENT) == -1) {",
      "128:   return false;",
      "129:  }",
      "130:  sdb_set (bin->kv, \"elf_type.cparse\", \"enum elf_type { ET_NONE=0, ET_REL=1,\"",
      "",
      "[Removed Lines]",
      "127:   R_LOG_ERROR (\"read (magic)\");",
      "",
      "[Added Lines]",
      "127:   R_LOG_DEBUG (\"read (magic)\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:  memset (&bin->ehdr, 0, sizeof (Elf_(Ehdr)));",
      "189:  len = r_buf_read_at (bin->b, 0, ehdr, sizeof (ehdr));",
      "190:  if (len < 32) { // tinyelf != sizeof (Elf_(Ehdr))) {",
      "192:   return false;",
      "193:  }",
      "",
      "[Removed Lines]",
      "191:   R_LOG_ERROR (\"read (ehdr)\");",
      "",
      "[Added Lines]",
      "191:   R_LOG_DEBUG (\"read (ehdr)\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "257:   const size_t rsize = bin->ehdr.e_phoff + i * sizeof (Elf_(Phdr));",
      "258:   int len = r_buf_read_at (bin->b, rsize, phdr, sizeof (Elf_(Phdr)));",
      "259:   if (len < 1) {",
      "261:    R_FREE (bin->phdr);",
      "262:    return false;",
      "263:   }",
      "",
      "[Removed Lines]",
      "260:    R_LOG_ERROR (\"read (phdr)\");",
      "",
      "[Added Lines]",
      "260:    R_LOG_DEBUG (\"read (phdr)\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "397:   j = 0;",
      "398:   len = r_buf_read_at (bin->b, bin->ehdr.e_shoff + i * sizeof (Elf_(Shdr)), shdr, sizeof (Elf_(Shdr)));",
      "399:   if (len < 1) {",
      "401:    R_FREE (bin->shdr);",
      "402:    return false;",
      "403:   }",
      "",
      "[Removed Lines]",
      "400:    R_LOG_ERROR (\"read (shdr) at 0x%\" PFMT64x, (ut64) bin->ehdr.e_shoff);",
      "",
      "[Added Lines]",
      "400:    R_LOG_DEBUG (\"read (shdr) at 0x%\" PFMT64x, (ut64) bin->ehdr.e_shoff);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "475:  int res = r_buf_read_at (bin->b, bin->shstrtab_section->sh_offset, (ut8*)bin->shstrtab,",
      "476:   bin->shstrtab_section->sh_size);",
      "477:  if (res < 1) {",
      "479:   R_FREE (bin->shstrtab);",
      "480:   return false;",
      "481:  }",
      "",
      "[Removed Lines]",
      "478:   R_LOG_ERROR (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);",
      "",
      "[Added Lines]",
      "478:   R_LOG_DEBUG (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "970:  }",
      "971:  Elf_(Verdef) *defs = calloc (shdr->sh_size, 1);",
      "972:  if (!defs) {",
      "974:   return false;",
      "975:  }",
      "976:  if (bin->shstrtab && shdr->sh_name < bin->shstrtab_size) {",
      "",
      "[Removed Lines]",
      "973:   R_LOG_ERROR (\"Cannot allocate memory (Check Elf_(Verdef))\");",
      "",
      "[Added Lines]",
      "973:   R_LOG_DEBUG (\"Cannot allocate memory (Check Elf_(Verdef))\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1798:   return UT64_MAX;",
      "1799:  }",
      "1800:  if (r_buf_read_at (bin->b, entry + 16, buf, sizeof (buf)) < 1) {",
      "1802:   return 0;",
      "1803:  }",
      "1804:  if (buf[0] == 0x68) { // push // x86 only",
      "",
      "[Removed Lines]",
      "1801:   R_LOG_ERROR (\"read (init_offset)\");",
      "",
      "[Added Lines]",
      "1801:   R_LOG_DEBUG (\"read (init_offset)\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e92a476cbec81ed4172b918ddd7f427e949f173",
      "candidate_info": {
        "commit_hash": "5e92a476cbec81ed4172b918ddd7f427e949f173",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/5e92a476cbec81ed4172b918ddd7f427e949f173",
        "files": [
          "dist/plugins-cfg/plugins.def.cfg",
          "dist/plugins-cfg/plugins.mingw.cfg",
          "dist/plugins-cfg/plugins.nocs.cfg",
          "dist/plugins-cfg/plugins.nogpl.cfg",
          "libr/anal/arch/msp430/msp430_disas.c",
          "libr/anal/arch/msp430/msp430_disas.h",
          "libr/anal/meson.build",
          "libr/anal/p/anal_msp430.c",
          "libr/anal/p/msp430.mk",
          "libr/asm/arch/msp430/msp430_disas.c",
          "libr/asm/arch/msp430/msp430_disas.h",
          "libr/asm/meson.build",
          "libr/asm/p/Makefile",
          "libr/asm/p/asm_msp430.c",
          "libr/asm/p/msp430.mk",
          "libr/include/r_asm.h",
          "libr/meson.build"
        ],
        "message": "Merge asm.msp430 into anal (#19639)",
        "before_after_code_files": [
          "dist/plugins-cfg/plugins.def.cfg||dist/plugins-cfg/plugins.def.cfg",
          "dist/plugins-cfg/plugins.mingw.cfg||dist/plugins-cfg/plugins.mingw.cfg",
          "dist/plugins-cfg/plugins.nocs.cfg||dist/plugins-cfg/plugins.nocs.cfg",
          "dist/plugins-cfg/plugins.nogpl.cfg||dist/plugins-cfg/plugins.nogpl.cfg",
          "libr/anal/meson.build||libr/anal/meson.build",
          "libr/anal/p/anal_msp430.c||libr/anal/p/anal_msp430.c",
          "libr/anal/p/msp430.mk||libr/anal/p/msp430.mk",
          "libr/asm/meson.build||libr/asm/meson.build",
          "libr/asm/p/asm_msp430.c||libr/asm/p/asm_msp430.c",
          "libr/asm/p/msp430.mk||libr/asm/p/msp430.mk",
          "libr/include/r_asm.h||libr/include/r_asm.h",
          "libr/meson.build||libr/meson.build"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/anal/p/anal_msp430.c||libr/anal/p/anal_msp430.c"
          ],
          "candidate": [
            "libr/anal/p/anal_msp430.c||libr/anal/p/anal_msp430.c"
          ]
        }
      },
      "candidate_diff": {
        "dist/plugins-cfg/plugins.def.cfg||dist/plugins-cfg/plugins.def.cfg": [
          "File: dist/plugins-cfg/plugins.def.cfg -> dist/plugins-cfg/plugins.def.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: asm.mcore",
          "88: asm.mips_cs",
          "89: asm.mips_gnu",
          "91: asm.nios2",
          "92: asm.or1k",
          "93: asm.ppc_as",
          "",
          "[Removed Lines]",
          "90: asm.msp430",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dist/plugins-cfg/plugins.mingw.cfg||dist/plugins-cfg/plugins.mingw.cfg": [
          "File: dist/plugins-cfg/plugins.mingw.cfg -> dist/plugins-cfg/plugins.mingw.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: asm.mcore",
          "82: asm.mips_cs",
          "83: asm.mips_gnu",
          "85: asm.nios2",
          "86: asm.or1k",
          "87: asm.ppc_as",
          "",
          "[Removed Lines]",
          "84: asm.msp430",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dist/plugins-cfg/plugins.nocs.cfg||dist/plugins-cfg/plugins.nocs.cfg": [
          "File: dist/plugins-cfg/plugins.nocs.cfg -> dist/plugins-cfg/plugins.nocs.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: asm.malbolge",
          "69: asm.mcore",
          "70: asm.mips_gnu",
          "72: asm.nios2",
          "73: asm.or1k",
          "74: asm.ppc_as",
          "",
          "[Removed Lines]",
          "71: asm.msp430",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dist/plugins-cfg/plugins.nogpl.cfg||dist/plugins-cfg/plugins.nogpl.cfg": [
          "File: dist/plugins-cfg/plugins.nogpl.cfg -> dist/plugins-cfg/plugins.nogpl.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: asm.m680x_cs",
          "42: asm.malbolge",
          "43: asm.mips_cs",
          "45: asm.ppc_cs",
          "46: asm.sparc_cs",
          "47: asm.s390_cs",
          "",
          "[Removed Lines]",
          "44: asm.msp430",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/anal/meson.build||libr/anal/meson.build": [
          "File: libr/anal/meson.build -> libr/anal/meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   join_paths('arch','loongarch','gnu','loongarch-coder.c'),",
          "112:   join_paths('arch','loongarch','gnu','loongarch-dis.c'),",
          "113:   join_paths('arch','loongarch','gnu','loongarch-opc.c'),",
          "114:   join_paths('..','asm','arch','amd29k','amd29k.c'),",
          "115:   join_paths('..','asm','arch','v850','v850_disas.c'),",
          "116:   join_paths('..','asm','arch','arm','winedbg','be_arm.c'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:   join_paths('arch','msp430','msp430_disas.c'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   join_paths('..','asm','arch','cr16','cr16_disas.c'),",
          "121:   join_paths('..','asm','arch','h8300','h8300_disas.c'),",
          "122:   join_paths('..','asm','arch','mcore','mcore.c'),",
          "124:   join_paths('..','asm','arch','or1k','or1k_disas.c'),",
          "125:   join_paths('..','asm','arch','pic','pic_midrange.c'),",
          "126:   join_paths('..','asm','arch','ppc','libvle','vle.c'),",
          "",
          "[Removed Lines]",
          "123:   join_paths('..','asm','arch','msp430','msp430_disas.c'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/anal/p/anal_msp430.c||libr/anal/p/anal_msp430.c": [
          "File: libr/anal/p/anal_msp430.c -> libr/anal/p/anal_msp430.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <r_anal.h>",
          "6: #include <r_util.h>",
          "10: static int msp430_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {",
          "11:  int ret;",
          "",
          "[Removed Lines]",
          "8: #include <msp430_disas.h>",
          "",
          "[Added Lines]",
          "10: #include \"../arch/msp430/msp430_disas.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:  op->family = R_ANAL_OP_FAMILY_CPU;",
          "21:  ret = op->size = msp430_decode_command (buf, len, &cmd);",
          "23:  if (ret < 0) {",
          "24:   return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  if (mask & R_ANAL_OP_MASK_DISASM) {",
          "25:   if (ret < 1) {",
          "26:    op->mnemonic = strdup (\"invalid\");",
          "27:   } else if (ret > 0) {",
          "28:    if (cmd.operands[0]) {",
          "29:     op->mnemonic = r_str_newf (\"%s %s\",cmd.instr, cmd.operands);",
          "30:    } else {",
          "31:     op->mnemonic = strdup (cmd.instr);",
          "32:    }",
          "33:   }",
          "34:   { // if (a->syntax != R_ASM_SYNTAX_ATT)",
          "35:    char *ba = op->mnemonic;",
          "36:    r_str_replace_ch (ba, '#', 0, 1);",
          "38:    r_str_replace_ch (ba, '&', 0, 1);",
          "39:    r_str_replace_ch (ba, '%', 0, 1);",
          "40:   }",
          "41:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:   break;",
          "80:  default:",
          "81:   op->type = R_ANAL_OP_TYPE_UNK;",
          "82:  }",
          "84:  return ret;",
          "85: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   break;",
          "",
          "---------------"
        ],
        "libr/anal/p/msp430.mk||libr/anal/p/msp430.mk": [
          "File: libr/anal/p/msp430.mk -> libr/anal/p/msp430.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  ${CC} $(call libname,anal_msp430) ${CFLAGS} \\",
          "",
          "[Removed Lines]",
          "1: OBJ_msp430=anal_msp430.o",
          "2: CFLAGS+=-I../asm/arch/msp430/",
          "4: STATIC_OBJ+=${OBJ_msp430}",
          "5: OBJ_msp430+=../../asm/arch/msp430/msp430_disas.o",
          "6: TARGET_msp430=anal_msp430.${EXT_SO}",
          "8: ALL_TARGETS+=${TARGET_msp430}",
          "10: ${TARGET_msp430}: ${OBJ_msp430} ${SHARED_OBJ}",
          "12:   -o ${TARGET_msp430} ${OBJ_msp430}",
          "",
          "[Added Lines]",
          "1: OBJ_MSP430=anal_msp430.o",
          "3: STATIC_OBJ+=${OBJ_MSP430}",
          "4: OBJ_MSP430+=../arch/msp430/msp430_disas.o",
          "5: TARGET_MSP430=anal_msp430.${EXT_SO}",
          "7: ALL_TARGETS+=${TARGET_MSP430}",
          "9: ${TARGET_MSP430}: ${OBJ_MSP430} ${SHARED_OBJ}",
          "11:   -o ${TARGET_MSP430} ${OBJ_MSP430}",
          "",
          "---------------"
        ],
        "libr/asm/meson.build||libr/asm/meson.build": [
          "File: libr/asm/meson.build -> libr/asm/meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   join_paths('p','asm_mcs96.c'),",
          "37:   join_paths('p','asm_mips_cs.c'),",
          "38:   join_paths('p','asm_mips_gnu.c'),",
          "40:   join_paths('p','asm_nios2.c'),",
          "41:   join_paths('p','asm_or1k.c'),",
          "42:   join_paths('p','asm_pic.c'),",
          "",
          "[Removed Lines]",
          "39:   join_paths('p','asm_msp430.c'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   join_paths('arch','mips','gnu','mips16-opc.c'),",
          "120:   join_paths('arch','mips','gnu','micromips-opc.c'),",
          "121:   join_paths('arch','mips','mipsasm.c'),",
          "123:   join_paths('arch','nios','gnu','nios2-dis.c'),",
          "124:   join_paths('arch','nios','gnu','nios2-opc.c'),",
          "125:   join_paths('arch','or1k','or1k_disas.c'),",
          "",
          "[Removed Lines]",
          "122:   join_paths('arch','msp430','msp430_disas.c'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:     join_paths('arch','include'),",
          "180:     join_paths('arch'),",
          "181:     join_paths('arch','h8300'),",
          "183:     join_paths('arch','rsp'),",
          "184:     join_paths('arch','mcore'),",
          "185:     join_paths('arch','v850'),",
          "",
          "[Removed Lines]",
          "182:     join_paths('arch','msp430'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/asm/p/asm_msp430.c||libr/asm/p/asm_msp430.c": [
          "File: libr/asm/p/asm_msp430.c -> libr/asm/p/asm_msp430.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/asm/p/msp430.mk||libr/asm/p/msp430.mk": [
          "File: libr/asm/p/msp430.mk -> libr/asm/p/msp430.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/include/r_asm.h||libr/include/r_asm.h": [
          "File: libr/include/r_asm.h -> libr/include/r_asm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: extern RAsmPlugin r_asm_plugin_mcs96;",
          "233: extern RAsmPlugin r_asm_plugin_mips_cs;",
          "234: extern RAsmPlugin r_asm_plugin_mips_gnu;",
          "236: extern RAsmPlugin r_asm_plugin_nios2;",
          "237: extern RAsmPlugin r_asm_plugin_or1k;",
          "238: extern RAsmPlugin r_asm_plugin_pic;",
          "",
          "[Removed Lines]",
          "235: extern RAsmPlugin r_asm_plugin_msp430;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/meson.build||libr/meson.build": [
          "File: libr/meson.build -> libr/meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   'mcore',",
          "201:   'mcs96',",
          "202:   'mips_cs',",
          "204:   'nios2',",
          "205:   'or1k',",
          "206:   'pic',",
          "",
          "[Removed Lines]",
          "203:   'msp430',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7816e4d6799440552ea5a5e952970168b31961d",
      "candidate_info": {
        "commit_hash": "e7816e4d6799440552ea5a5e952970168b31961d",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/e7816e4d6799440552ea5a5e952970168b31961d",
        "files": [
          "libr/bin/bin.c",
          "libr/bin/bobj.c",
          "libr/bin/format/elf/elf.c",
          "libr/cons/cons.c",
          "libr/core/cbin.c",
          "libr/core/cconfig.c",
          "libr/core/cfile.c",
          "libr/core/cmd_api.c",
          "libr/core/cmd_search.c",
          "libr/core/panels.c",
          "libr/include/r_util/r_assert.h",
          "libr/include/r_util/r_log.h",
          "libr/main/radare2.c",
          "libr/util/assert.c",
          "libr/util/file.c",
          "libr/util/log.c",
          "test/db/cmd/cmd_i",
          "test/db/cmd/dwarf"
        ],
        "message": "Improve RLog API and usage, document R2_LOG_ vars in r2 -hh ##core",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/bin/bobj.c||libr/bin/bobj.c",
          "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c",
          "libr/cons/cons.c||libr/cons/cons.c",
          "libr/core/cbin.c||libr/core/cbin.c",
          "libr/core/cconfig.c||libr/core/cconfig.c",
          "libr/core/cfile.c||libr/core/cfile.c",
          "libr/core/cmd_api.c||libr/core/cmd_api.c",
          "libr/core/cmd_search.c||libr/core/cmd_search.c",
          "libr/core/panels.c||libr/core/panels.c",
          "libr/include/r_util/r_assert.h||libr/include/r_util/r_assert.h",
          "libr/include/r_util/r_log.h||libr/include/r_util/r_log.h",
          "libr/main/radare2.c||libr/main/radare2.c",
          "libr/util/assert.c||libr/util/assert.c",
          "libr/util/file.c||libr/util/file.c",
          "libr/util/log.c||libr/util/log.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
          ],
          "candidate": [
            "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_bin.h>",
          "4: #include <r_types.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"bin\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "900:  RBinFile *binfile = r_bin_file_find_by_arch_bits (bin, arch, bits);",
          "901:  if (!binfile) {",
          "903:   return false;",
          "904:  }",
          "",
          "[Removed Lines]",
          "902:   R_LOG_WARN (\"Cannot find binfile with arch/bits %s/%d\\n\", arch, bits);",
          "",
          "[Added Lines]",
          "904:   R_LOG_WARN (\"Cannot find binfile with arch/bits %s/%d\", arch, bits);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1174:  RBinPlugin *plugin = r_bin_get_binplugin_by_name (bin, p);",
          "1175:  if (!plugin) {",
          "1177:   return NULL;",
          "1178:  }",
          "1179:  if (!plugin->create) {",
          "1181:   return NULL;",
          "1182:  }",
          "1183:  codelen = R_MAX (codelen, 0);",
          "",
          "[Removed Lines]",
          "1176:   R_LOG_WARN (\"Cannot find RBin plugin named '%s'.\\n\", p);",
          "1180:   R_LOG_WARN (\"RBin plugin '%s' does not implement \\\"create\\\" method.\\n\", p);",
          "",
          "[Added Lines]",
          "1178:   R_LOG_WARN (\"Cannot find RBin plugin named '%s'.\", p);",
          "1182:   R_LOG_WARN (\"RBin plugin '%s' does not implement \\\"create\\\" method.\", p);",
          "",
          "---------------"
        ],
        "libr/bin/bobj.c||libr/bin/bobj.c": [
          "File: libr/bin/bobj.c -> libr/bin/bobj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_bin.h>",
          "4: #include <r_util.h>",
          "5: #include \"i/private.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"bin.obj\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:    return NULL;",
          "154:   }",
          "155:  } else {",
          "157:   sdb_free (bo->kv);",
          "158:   free (bo);",
          "159:   return NULL;",
          "",
          "[Removed Lines]",
          "156:   R_LOG_WARN (\"Plugin %s should implement load_buffer method.\\n\", plugin->name);",
          "",
          "[Added Lines]",
          "158:   R_LOG_WARN (\"Plugin %s should implement load_buffer method.\", plugin->name);",
          "",
          "---------------"
        ],
        "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c": [
          "File: libr/bin/format/elf/elf.c -> libr/bin/format/elf/elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_types.h>",
          "4: #include <r_util.h>",
          "5: #include \"elf.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"elf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: #define R_ELF_PART_RELRO 1",
          "23: #define R_ELF_FULL_RELRO 2",
          "27: #define MAX_REL_RELA_SZ (sizeof (Elf_(Rel)) > sizeof (Elf_(Rela))? sizeof (Elf_(Rel)): sizeof (Elf_(Rela)))",
          "29: #define READ8(x, i) r_read_ble8((x) + (i)); (i) += 1",
          "",
          "[Removed Lines]",
          "25: #define bprintf if(bin->verbose) R_LOG_WARN",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:  ut8 ehdr[sizeof (Elf_(Ehdr))] = {0};",
          "126:  int i, len;",
          "127:  if (r_buf_read_at (bin->b, 0, e_ident, EI_NIDENT) == -1) {",
          "129:   return false;",
          "130:  }",
          "131:  sdb_set (bin->kv, \"elf_type.cparse\", \"enum elf_type { ET_NONE=0, ET_REL=1,\"",
          "",
          "[Removed Lines]",
          "128:   bprintf (\"read (magic)\\n\");",
          "",
          "[Added Lines]",
          "127:   R_LOG_ERROR (\"read (magic)\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:  memset (&bin->ehdr, 0, sizeof (Elf_(Ehdr)));",
          "190:  len = r_buf_read_at (bin->b, 0, ehdr, sizeof (ehdr));",
          "191:  if (len < 32) { // tinyelf != sizeof (Elf_(Ehdr))) {",
          "193:   return false;",
          "194:  }",
          "",
          "[Removed Lines]",
          "192:   bprintf (\"read (ehdr)\\n\");",
          "",
          "[Added Lines]",
          "191:   R_LOG_ERROR (\"read (ehdr)\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "258:   const size_t rsize = bin->ehdr.e_phoff + i * sizeof (Elf_(Phdr));",
          "259:   int len = r_buf_read_at (bin->b, rsize, phdr, sizeof (Elf_(Phdr)));",
          "260:   if (len < 1) {",
          "262:    R_FREE (bin->phdr);",
          "263:    return false;",
          "264:   }",
          "",
          "[Removed Lines]",
          "261:    bprintf (\"read (phdr)\\n\");",
          "",
          "[Added Lines]",
          "260:    R_LOG_ERROR (\"read (phdr)\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "398:   j = 0;",
          "399:   len = r_buf_read_at (bin->b, bin->ehdr.e_shoff + i * sizeof (Elf_(Shdr)), shdr, sizeof (Elf_(Shdr)));",
          "400:   if (len < 1) {",
          "402:    R_FREE (bin->shdr);",
          "403:    return false;",
          "404:   }",
          "",
          "[Removed Lines]",
          "401:    bprintf (\"read (shdr) at 0x%\" PFMT64x \"\\n\", (ut64) bin->ehdr.e_shoff);",
          "",
          "[Added Lines]",
          "400:    R_LOG_ERROR (\"read (shdr) at 0x%\" PFMT64x, (ut64) bin->ehdr.e_shoff);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "476:  int res = r_buf_read_at (bin->b, bin->shstrtab_section->sh_offset, (ut8*)bin->shstrtab,",
          "477:   bin->shstrtab_section->sh_size);",
          "478:  if (res < 1) {",
          "480:   R_FREE (bin->shstrtab);",
          "481:   return false;",
          "482:  }",
          "",
          "[Removed Lines]",
          "479:   bprintf (\"read (shstrtab) at 0x%\" PFMT64x \"\\n\", (ut64) bin->shstrtab_section->sh_offset);",
          "",
          "[Added Lines]",
          "478:   R_LOG_ERROR (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "666:    if ((d.d_tag >= DT_VERSYM) && (d.d_tag <= DT_VERNEEDNUM)) {",
          "667:     bin->version_info[DT_VERSIONTAGIDX (d.d_tag)] = d.d_un.d_val;",
          "668:    } else {",
          "670:    }",
          "671:    break;",
          "672:   }",
          "",
          "[Removed Lines]",
          "669:     R_LOG_DEBUG (\"Dynamic tag %\" PFMT64d \" not handled\\n\", (ut64) d.d_tag);",
          "",
          "[Added Lines]",
          "668:     R_LOG_DEBUG (\"Dynamic tag %\" PFMT64d \" not handled\", (ut64) d.d_tag);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "717:  if (strtabaddr == UT64_MAX || strtabaddr > bin->size || strsize > ST32_MAX || !strsize || strsize > bin->size || strtabaddr + strsize > bin->size) {",
          "718:   if (!strtabaddr) {",
          "720:   }",
          "721:   return false;",
          "722:  }",
          "",
          "[Removed Lines]",
          "719:    bprintf (\"DT_STRTAB not found or invalid\\n\");",
          "",
          "[Added Lines]",
          "718:    R_LOG_DEBUG (\"DT_STRTAB not found or invalid\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "848:        goto beach;",
          "849:       }",
          "850:       if (r_buf_read_at (bin->b, offset, svn, sizeof (svn)) < 0) {",
          "852:        goto beach;",
          "853:       }",
          "854:       k = 0;",
          "",
          "[Removed Lines]",
          "851:        bprintf (\"Cannot read Verneed for Versym\\n\");",
          "",
          "[Added Lines]",
          "850:        R_LOG_DEBUG (\"Cannot read Verneed for Versym\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "863:         goto beach;",
          "864:        }",
          "865:        if (r_buf_read_at (bin->b, a_off, svna, sizeof (svna)) < 0) {",
          "867:         goto beach;",
          "868:        }",
          "869:        k = 0;",
          "",
          "[Removed Lines]",
          "866:         bprintf (\"Cannot read Vernaux for Versym\\n\");",
          "",
          "[Added Lines]",
          "865:         R_LOG_DEBUG (\"Cannot read Vernaux for Versym\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "899:      }",
          "900:      do {",
          "901:       if (r_buf_read_at (bin->b, offset, svd, sizeof (svd)) < 0) {",
          "903:        goto beach;",
          "904:       }",
          "905:       k = 0;",
          "",
          "[Removed Lines]",
          "902:        bprintf (\"Cannot read Verdef for Versym\\n\");",
          "",
          "[Added Lines]",
          "901:        R_LOG_DEBUG (\"Cannot read Verdef for Versym\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "921:        goto beach;",
          "922:       }",
          "923:       if (r_buf_read_at (bin->b, off_vda, svda, sizeof (svda)) < 0) {",
          "925:        goto beach;",
          "926:       }",
          "927:       k = 0;",
          "",
          "[Removed Lines]",
          "924:        bprintf (\"Cannot read Verdaux for Versym\\n\");",
          "",
          "[Added Lines]",
          "923:        R_LOG_DEBUG (\"Cannot read Verdaux for Versym\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "971:  }",
          "972:  Elf_(Verdef) *defs = calloc (shdr->sh_size, 1);",
          "973:  if (!defs) {",
          "975:   return false;",
          "976:  }",
          "977:  if (bin->shstrtab && shdr->sh_name < bin->shstrtab_size) {",
          "",
          "[Removed Lines]",
          "974:   bprintf (\"Cannot allocate memory (Check Elf_(Verdef))\\n\");",
          "",
          "[Added Lines]",
          "973:   R_LOG_ERROR (\"Cannot allocate memory (Check Elf_(Verdef))\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1092:    goto out_error;",
          "1093:   }",
          "1094:   if ((st32)verdef->vd_next < 1) {",
          "1096:    break;",
          "1097:   }",
          "1098:   i += verdef->vd_next;",
          "",
          "[Removed Lines]",
          "1095:    bprintf (\"Invalid vd_next in the ELF version\\n\");",
          "",
          "[Added Lines]",
          "1094:    R_LOG_DEBUG (\"Invalid vd_next in the ELF version\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1141:   link_section_name = &bin->shstrtab[link_shdr->sh_name];",
          "1142:  }",
          "1143:  if (!(need = (ut8*) calloc (R_MAX (1, shdr->sh_size), sizeof (ut8)))) {",
          "1145:   goto beach;",
          "1146:  }",
          "1147:  end = need + shdr->sh_size;",
          "",
          "[Removed Lines]",
          "1144:   bprintf (\"Cannot allocate memory for Elf_(Verneed)\\n\");",
          "",
          "[Added Lines]",
          "1143:   R_LOG_ERROR (\"Cannot allocate memory for Elf_(Verneed)\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1242: #endif",
          "1243:   }",
          "1244:   if ((int)entry->vn_next < 0) {",
          "1246:    break;",
          "1247:   }",
          "1248:   i += entry->vn_next;",
          "",
          "[Removed Lines]",
          "1245:    bprintf (\"Invalid vn_next\\n\");",
          "",
          "[Added Lines]",
          "1244:    R_LOG_DEBUG (\"Invalid vn_next at 0x%08\" PFMT64x, shdr->sh_offset);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1328:   section_name = &bin->shstrtab[bin->shdr[i].sh_name];",
          "1329:   if (bin->shdr[i].sh_type == SHT_STRTAB && !strcmp (section_name, \".dynstr\")) {",
          "1330:    if (!(bin->dynstr = (char*) calloc (bin->shdr[i].sh_size + 1, sizeof (char)))) {",
          "1332:     return false;",
          "1333:    }",
          "1334:    if (bin->shdr[i].sh_offset > bin->size) {",
          "",
          "[Removed Lines]",
          "1331:     bprintf(\"Cannot allocate memory for dynamic strings\\n\");",
          "",
          "[Added Lines]",
          "1330:     R_LOG_ERROR (\"Cannot allocate memory for dynamic strings\\n\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1375:   return false;",
          "1376:  }",
          "1377:  if (!init_phdr (bin) && !is_bin_etrel (bin)) {",
          "1379:  }",
          "1380:  if (bin->ehdr.e_type != ET_CORE) {",
          "1381:   if (!init_shdr (bin)) {",
          "1383:   }",
          "1384:   if (!init_strtab (bin)) {",
          "1386:   }",
          "1387:   if (!init_dynstr (bin) && !is_bin_etrel (bin)) {",
          "1389:   }",
          "1390:   bin->baddr = Elf_(r_bin_elf_get_baddr) (bin);",
          "1391:   if (!init_dynamic_section (bin) && !Elf_(r_bin_elf_is_static) (bin) && !is_bin_etrel (bin)) {",
          "1393:   }",
          "1394:  }",
          "1396:  bin->imports_by_ord_size = 0;",
          "1397:  bin->imports_by_ord = NULL;",
          "1398:  bin->symbols_by_ord_size = 0;",
          "",
          "[Removed Lines]",
          "1378:   bprintf (\"Cannot initialize program headers\\n\");",
          "1382:    bprintf (\"Cannot initialize section headers\\n\");",
          "1385:    bprintf (\"Cannot initialize strings table\\n\");",
          "1388:    bprintf (\"Cannot initialize dynamic strings\\n\");",
          "1392:    bprintf (\"Cannot initialize dynamic section\\n\");",
          "",
          "[Added Lines]",
          "1377:   R_LOG_DEBUG (\"Cannot initialize program headers\\n\");",
          "1381:    R_LOG_DEBUG (\"Cannot initialize section headers\\n\");",
          "1384:    R_LOG_DEBUG (\"Cannot initialize strings table\\n\");",
          "1387:    R_LOG_DEBUG (\"Cannot initialize dynamic strings\\n\");",
          "1391:    R_LOG_DEBUG (\"Cannot initialize dynamic section\\n\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1456:   }",
          "1457:   return plt_addr;",
          "1458:  case R_AARCH64_RELATIVE:",
          "1460:   return UT64_MAX;",
          "1461:  case R_AARCH64_IRELATIVE:",
          "1462:   if (rel->addend > plt_addr) { // start",
          "",
          "[Removed Lines]",
          "1459:   eprintf (\"Unsupported relocation type for imports %d\\n\", rel->type);",
          "",
          "[Added Lines]",
          "1457:   R_LOG_WARN (\"Unsupported relocation type for imports %d\", rel->type);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1467:  case R_AARCH64_JUMP_SLOT:",
          "1468:   return plt_addr + pos * 16 + 32;",
          "1469:  default:",
          "1471:   return UT64_MAX;",
          "1472:  }",
          "1473:  return UT64_MAX;",
          "",
          "[Removed Lines]",
          "1470:   bprintf (\"Unsupported relocation type for imports %d\\n\", rel->type);",
          "",
          "[Added Lines]",
          "1468:   R_LOG_WARN (\"Unsupported relocation type for imports %d\", rel->type);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1542: }",
          "1543: static ut64 get_import_addr_sparc(ELFOBJ *bin, RBinElfReloc *rel) {",
          "1544:  if (rel->type != R_SPARC_JMP_SLOT) {",
          "1546:   return UT64_MAX;",
          "1547:  }",
          "1548:  ut64 tmp = get_got_entry (bin, rel);",
          "",
          "[Removed Lines]",
          "1545:   bprintf (\"Unknown sparc reloc type %d\\n\", rel->type);",
          "",
          "[Added Lines]",
          "1543:   R_LOG_DEBUG (\"Unknown sparc reloc type %d\", rel->type);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1800:   return UT64_MAX;",
          "1801:  }",
          "1802:  if (r_buf_read_at (bin->b, entry + 16, buf, sizeof (buf)) < 1) {",
          "1804:   return 0;",
          "1805:  }",
          "1806:  if (buf[0] == 0x68) { // push // x86 only",
          "",
          "[Removed Lines]",
          "1803:   bprintf (\"read (init_offset)\\n\");",
          "",
          "[Added Lines]",
          "1801:   R_LOG_ERROR (\"read (init_offset)\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1820:  }",
          "1821:  ut8 buf[512];",
          "1822:  if (r_buf_read_at (bin->b, entry + 11, buf, sizeof (buf)) == -1) {",
          "1824:   return 0;",
          "1825:  }",
          "1826:  if (*buf == 0x68) { // push // x86/32 only",
          "",
          "[Removed Lines]",
          "1823:   bprintf (\"read (get_fini)\\n\");",
          "",
          "[Added Lines]",
          "1821:   R_LOG_ERROR (\"read (get_fini)\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1876:  }",
          "1878:  if (r_buf_read_at (bin->b, entry, buf, sizeof (buf)) < 1) {",
          "1880:   return UT64_MAX;",
          "1881:  }",
          "",
          "[Removed Lines]",
          "1879:   bprintf (\"read (main)\\n\");",
          "",
          "[Added Lines]",
          "1877:   R_LOG_ERROR (\"read (main)\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1972:    ut8 n32s[sizeof (ut32)] = {0};",
          "1973:    maddr = entry + 0x24 + r_read_le32 (buf + 0x20);",
          "1974:    if (r_buf_read_at (bin->b, maddr, n32s, sizeof (ut32)) == -1) {",
          "1976:     return 0;",
          "1977:    }",
          "1978:    maddr = (ut64)r_read_le32 (&n32s[0]);",
          "",
          "[Removed Lines]",
          "1975:     bprintf (\"read (maddr) 2\\n\");",
          "",
          "[Added Lines]",
          "1973:     R_LOG_ERROR (\"read (maddr) 2\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2072:     return NULL;",
          "2073:    }",
          "2074:    if (r_buf_read_at (bin->b, addr, (ut8*)str, sz) < 1) {",
          "2076:     free (str);",
          "2077:     return 0;",
          "2078:    }",
          "",
          "[Removed Lines]",
          "2075:     bprintf (\"read (main)\\n\");",
          "",
          "[Added Lines]",
          "2073:     R_LOG_ERROR (\"read (main)\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2581:     int ret;",
          "2582:     ret = r_buf_read_at (bin->b, bin->phdr[i].p_offset + offset, elf_nhdr, elf_nhdr_size);",
          "2583:     if (ret != elf_nhdr_size) {",
          "2585:      free (elf_nhdr);",
          "2586:      return NULL;",
          "2587:     }",
          "",
          "[Removed Lines]",
          "2584:      bprintf (\"Cannot read NOTES hdr from CORE file\\n\");",
          "",
          "[Added Lines]",
          "2582:      R_LOG_DEBUG (\"Cannot read NOTES hdr from CORE file\");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2625:    ut8 *buf = malloc (regsize);",
          "2626:    if (r_buf_read_at (bin->b, bin->phdr[i].p_offset + offset + regdelta, buf, regsize) != regsize) {",
          "2627:     free (buf);",
          "2629:     return NULL;",
          "2630:    }",
          "2631:    if (len) {",
          "",
          "[Removed Lines]",
          "2628:     bprintf (\"Cannot read register state from CORE file\\n\");",
          "",
          "[Added Lines]",
          "2626:     R_LOG_DEBUG (\"Cannot read register state from CORE file\");",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2634:    return buf;",
          "2635:   }",
          "2636:  }",
          "2638:  return NULL;",
          "2639: }",
          "",
          "[Removed Lines]",
          "2637:  bprintf (\"Cannot find NOTE section\\n\");",
          "",
          "[Added Lines]",
          "2635:  R_LOG_DEBUG (\"Cannot find NOTE section.\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3641:    }",
          "3642:    strtab_section = &bin->shdr[bin->shdr[i].sh_link];",
          "3643:    if (strtab_section->sh_size > ST32_MAX || strtab_section->sh_size+8 > bin->size) {",
          "3645:     free (ret);",
          "3646:     free (strtab);",
          "3647:     return NULL;",
          "3648:    }",
          "3649:    if (!strtab) {",
          "3650:     if (!(strtab = (char *)calloc (1, 8 + strtab_section->sh_size))) {",
          "3652:      goto beach;",
          "3653:     }",
          "3654:     if (strtab_section->sh_offset > bin->size ||",
          "",
          "[Removed Lines]",
          "3644:     bprintf (\"size (syms strtab)\");",
          "3651:      bprintf (\"malloc (syms strtab)\");",
          "",
          "[Added Lines]",
          "3642:     R_LOG_ERROR (\"size (syms strtab)\");",
          "3649:      R_LOG_ERROR (\"malloc (syms strtab)\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3657:     }",
          "3658:     if (r_buf_read_at (bin->b, strtab_section->sh_offset,",
          "3659:        (ut8*)strtab, strtab_section->sh_size) == -1) {",
          "3661:      goto beach;",
          "3662:     }",
          "3663:    }",
          "3665:    newsize = 1 + bin->shdr[i].sh_size;",
          "3666:    if (newsize < 0 || newsize > bin->size) {",
          "3668:     goto beach;",
          "3669:    }",
          "3670:    nsym = (int)(bin->shdr[i].sh_size / sizeof (Elf_(Sym)));",
          "",
          "[Removed Lines]",
          "3660:      bprintf (\"read (syms strtab)\\n\");",
          "3667:     bprintf (\"invalid shdr %d size\\n\", i);",
          "",
          "[Added Lines]",
          "3658:      R_LOG_ERROR (\"read (syms strtab)\");",
          "3665:     R_LOG_ERROR (\"invalid shdr %d size\", i);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3683:     }",
          "3684:    }",
          "3685:    if (!(sym = (Elf_(Sym) *)calloc (nsym, sizeof (Elf_(Sym))))) {",
          "3687:     goto beach;",
          "3688:    }",
          "3689:    if (!UT32_MUL (&size, nsym, sizeof (Elf_(Sym)))) {",
          "",
          "[Removed Lines]",
          "3686:     bprintf (\"calloc (syms)\");",
          "",
          "[Added Lines]",
          "3684:     R_LOG_ERROR (\"calloc (syms)\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3702:     int k = 0;",
          "3703:     r = r_buf_read_at (bin->b, bin->shdr[i].sh_offset + j * sizeof (Elf_(Sym)), s, sizeof (Elf_(Sym)));",
          "3704:     if (r < 1) {",
          "3706:      goto beach;",
          "3707:     }",
          "3708: #if R_BIN_ELF64",
          "",
          "[Removed Lines]",
          "3705:      bprintf (\"read (sym)\\n\");",
          "",
          "[Added Lines]",
          "3703:      R_LOG_ERROR (\"read (sym)\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3723:    }",
          "3724:    void *rett = realloc (ret, (ret_size + nsym) * sizeof (RBinElfSymbol));",
          "3725:    if (!rett) {",
          "3727:     goto beach;",
          "3728:    }",
          "3729:    ret = rett;",
          "",
          "[Removed Lines]",
          "3726:     bprintf (\"Cannot allocate %d symbols\\n\", (int)(nsym + ret_size));",
          "",
          "[Added Lines]",
          "3724:     R_LOG_ERROR (\"Cannot allocate %d symbols.\", (int)(nsym + ret_size));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3766:     }",
          "3767:     ret[ret_ctr].size = tsize;",
          "3768:     if (sym[k].st_name + 1 > strtab_section->sh_size) {",
          "3770:      continue;",
          "3771:     }",
          "3772:     {",
          "",
          "[Removed Lines]",
          "3769:      bprintf (\"index out of strtab range\\n\");",
          "",
          "[Added Lines]",
          "3767:      R_LOG_DEBUG (\"index out of strtab range (%d / %d)\\n\",",
          "3768:       (int)sym[k].st_name, strtab_section->sh_size);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3841:   bin->symbols_by_ord = (RBinSymbol**)calloc (R_MAX (1, nsym + 1), sizeof (RBinSymbol*));",
          "3842:   import_ret = calloc (import_ret_ctr + 1, sizeof (RBinElfSymbol));",
          "3843:   if (!import_ret) {",
          "3845:    goto beach;",
          "3846:   }",
          "3847:   import_ret_ctr = 0;",
          "",
          "[Removed Lines]",
          "3844:    bprintf (\"Cannot allocate %d symbols\\n\", nsym);",
          "",
          "[Added Lines]",
          "3843:    R_LOG_DEBUG (\"Cannot allocate %d symbols\", nsym);",
          "",
          "---------------"
        ],
        "libr/cons/cons.c||libr/cons/cons.c": [
          "File: libr/cons/cons.c -> libr/cons/cons.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1860:     r_sys_perror (\"r_cons_set_utf8\");",
          "1861:    }",
          "1862:   } else {",
          "1864:   }",
          "1865:  } else {",
          "1866:   UINT acp = GetACP ();",
          "",
          "[Removed Lines]",
          "1863:    R_LOG_WARN (\"UTF-8 Codepage not installed.\\n\");",
          "",
          "[Added Lines]",
          "1863:    R_LOG_WARN (\"UTF-8 Codepage not installed.\");",
          "",
          "---------------"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_core.h>",
          "4: #include <r_config.h>",
          "5: #include <r_util.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"cbin\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2240:  } else {",
          "2241:   if (core->bin->verbose) {",
          "2243:   }",
          "2244:  }",
          "2245: }",
          "",
          "[Removed Lines]",
          "2242:    R_LOG_WARN (\"Special symbol %s not handled\\n\", symbol->name);",
          "",
          "[Added Lines]",
          "2243:    R_LOG_WARN (\"Special symbol %s not handled\", symbol->name);",
          "",
          "---------------"
        ],
        "libr/core/cconfig.c||libr/core/cconfig.c": [
          "File: libr/core/cconfig.c -> libr/core/cconfig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1611:   ? COLOR_MODE_16M: node->i_value;",
          "1612:  r_cons_pal_update_event ();",
          "1613:  r_print_set_flags (core->print, core->print->flags);",
          "1614:  return true;",
          "1615: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1614:  r_log_set_colors (node->i_value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2005:  return true;",
          "2006: }",
          "2015: static bool cb_hexcomments(void *user, void *data) {",
          "2016:  RCore *core = (RCore *) user;",
          "2017:  RConfigNode *node = (RConfigNode *) data;",
          "",
          "[Removed Lines]",
          "2008: static bool cb_log_events(void *user, void *data) {",
          "2009:  RCore *core = (RCore *) user;",
          "2010:  RConfigNode *node = (RConfigNode *) data;",
          "2011:  core->log_events = node->i_value;",
          "2012:  return true;",
          "2013: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3207:  return true;",
          "3208: }",
          "3211:  RConfigNode *node = (RConfigNode *)nodeptr;",
          "3212:  const char *value = node->value;",
          "3214:  return true;",
          "3215: }",
          "3218:  RConfigNode *node = (RConfigNode *)nodeptr;",
          "3219:  const char *value = node->value;",
          "3228:  return true;",
          "3229: }",
          "3231: static bool cb_log_config_colors(void *coreptr, void *nodeptr) {",
          "3232:  RConfigNode *node = (RConfigNode *)nodeptr;",
          "3242:  return true;",
          "3243: }",
          "",
          "[Removed Lines]",
          "3210: static bool cb_log_config_file(void *coreptr, void *nodeptr) {",
          "3213:  r_log_set_file (value);",
          "3217: static bool cb_log_config_srcinfo(void *coreptr, void *nodeptr) {",
          "3220:  switch (value[0]) {",
          "3221:  case 't':",
          "3222:  case 'T':",
          "3223:   r_log_set_srcinfo (true);",
          "3224:   break;",
          "3225:  default:",
          "3226:   r_log_set_srcinfo (false);",
          "3227:  }",
          "3233:  const char *value = node->value;",
          "3234:  switch (value[0]) {",
          "3235:  case 't':",
          "3236:  case 'T':",
          "3237:   r_log_set_colors (true);",
          "3238:   break;",
          "3239:  default:",
          "3240:   r_log_set_colors (false);",
          "3241:  }",
          "",
          "[Added Lines]",
          "3204: static bool cb_log_config_ts(void *coreptr, void *nodeptr) {",
          "3205:  RConfigNode *node = (RConfigNode *)nodeptr;",
          "3206:  r_log_set_ts (node->i_value);",
          "3207:  return true;",
          "3208: }",
          "3210: static bool cb_log_config_filter(void *coreptr, void *nodeptr) {",
          "3213:  r_log_set_filter (value);",
          "3217: static bool cb_log_config_file(void *coreptr, void *nodeptr) {",
          "3220:  r_log_set_file (value);",
          "3226:  r_log_set_colors (r_str_is_true (node->value));",
          "3227:  return true;",
          "3228: }",
          "3230: static bool cb_log_config_quiet(void *coreptr, void *nodeptr) {",
          "3231:  RConfigNode *node = (RConfigNode *)nodeptr;",
          "3232:  r_log_set_quiet (r_str_is_true (node->value));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3699:  p = r_sys_getenv (\"R2_LOGLEVEL\");",
          "3700:  SETICB (\"log.level\", p? atoi(p): R_DEFAULT_LOGLVL, cb_log_config_level, \"target log level/severity\"\\",
          "3701:   \" (0:SILLY, 1:DEBUG, 2:VERBOSE, 3:INFO, 4:WARN, 5:ERROR, 6:FATAL)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3690: #if 0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3721:  free (p);",
          "3723:  SETCB (\"log.events\", \"false\", &cb_log_events, \"remote HTTP server to sync events with\");",
          "3726:  SETPREF (\"zign.prefix\", \"sign\", \"default prefix for zignatures matches\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3716: #endif",
          "3717:  SETICB (\"log.level\", R_LOGLVL_DEFAULT, cb_log_config_level, \"Target log level/severity\"\\",
          "3718:   \" (0:NONE, 1:INFO, 2:WARN, 3:DEBUG, 4:ERROR, 5:FATAL)\"",
          "3719:  );",
          "3721:  SETCB (\"log.ts\", \"false\", cb_log_config_ts, \"Show timestamp in log messages\");",
          "3723:  SETICB (\"log.traplevel\", 0, cb_log_config_traplevel, \"Log level for trapping R2 when hit\");",
          "3724:  SETCB (\"log.file\", \"\", cb_log_config_file, \"Logging output filename / path\");",
          "3725:  SETCB (\"log.filter\", \"\", cb_log_config_filter, \"Filter only messages matching given origin\");",
          "3726:  SETCB (\"log.color\", \"false\", cb_log_config_colors, \"Should the log output use colors\");",
          "3727:  SETCB (\"log.quiet\", \"false\", cb_log_config_quiet, \"Be quiet, dont log anything to console\");",
          "",
          "---------------"
        ],
        "libr/core/cfile.c||libr/core/cfile.c": [
          "File: libr/core/cfile.c -> libr/core/cfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_core.h>",
          "4: #include <stdlib.h>",
          "5: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"cfile\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:  binfile = r_bin_cur (r->bin);",
          "440:  if (r_core_bin_set_env (r, binfile)) {",
          "441:   if (r->anal->verbose && !sdb_const_get (r->anal->sdb_cc, \"default.cc\", 0)) {",
          "443:   }",
          "444:  }",
          "445:  plugin = r_bin_file_cur_plugin (binfile);",
          "",
          "[Removed Lines]",
          "442:    R_LOG_WARN (\"No calling convention defined for this file, analysis may be inaccurate.\\n\");",
          "",
          "[Added Lines]",
          "443:    R_LOG_WARN (\"No calling convention defined for this file, analysis may be inaccurate.\");",
          "",
          "---------------"
        ],
        "libr/core/cmd_api.c||libr/core/cmd_api.c": [
          "File: libr/core/cmd_api.c -> libr/core/cmd_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_core.h>",
          "4: #include \"ht_pp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"cmdapi\"",
          "",
          "---------------"
        ],
        "libr/core/cmd_search.c||libr/core/cmd_search.c": [
          "File: libr/core/cmd_search.c -> libr/core/cmd_search.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1188:   char *opst = aop.mnemonic;",
          "1189:   if (!opst) {",
          "1191:    RAsmOp asmop;",
          "1192:    r_asm_set_pc (core->rasm, addr);",
          "1193:    if (r_asm_disassemble (core->rasm, &asmop, buf + idx, buflen - idx) < 0) {",
          "",
          "[Removed Lines]",
          "1190:    R_LOG_WARN (\"Anal plugin %s did not return disassembly\\n\", core->anal->cur->name);",
          "",
          "[Added Lines]",
          "1190:    eprintf (\"Missing mnemonic after disasm with '%s'\\n\", core->anal->cur->name);",
          "",
          "---------------"
        ],
        "libr/core/panels.c||libr/core/panels.c": [
          "File: libr/core/panels.c -> libr/core/panels.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #define COUNT(x) (sizeof((x)) / sizeof((*x)) - 1)",
          "68: typedef enum {",
          "69:  LEFT,",
          "",
          "[Removed Lines]",
          "64: static bool firstRun = true;",
          "65: static bool fromVisual = false;",
          "66: static char *menus_Colors[128];",
          "",
          "[Added Lines]",
          "64: static R_TH_LOCAL bool firstRun = true;",
          "65: static R_TH_LOCAL bool fromVisual = false;",
          "66: static R_TH_LOCAL char *menus_Colors[128];",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_assert.h||libr/include/r_util/r_assert.h": [
          "File: libr/include/r_util/r_assert.h -> libr/include/r_util/r_assert.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  case (x):;\\",
          "14:  }",
          "18: #if defined (__GNUC__) && defined (__cplusplus)",
          "19: #define R_FUNCTION ((const char*) (__PRETTY_FUNCTION__))",
          "",
          "[Removed Lines]",
          "16: R_API void r_assert_log(RLogLevel level, const char *fmt, ...) R_PRINTF_CHECK(2, 3);",
          "",
          "[Added Lines]",
          "16: R_API void r_assert_log(RLogLevel level, const char *origin, const char *fmt, ...) R_PRINTF_CHECK(3, 4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #define r_warn_if_reached() \\",
          "30:  do { \\",
          "32:    __FILE__, __LINE__, R_FUNCTION, R_FUNCTION[0] ? \":\" : \"\"); \\",
          "33:  } while (0)",
          "35: #define r_warn_if_fail(expr) \\",
          "36:  do { \\",
          "37:   if (!(expr)) { \\",
          "39:     __FILE__, __LINE__, R_FUNCTION, R_FUNCTION[0] ? \":\" : \"\", #expr); \\",
          "40:   } \\",
          "41:  } while (0)",
          "",
          "[Removed Lines]",
          "31:   r_assert_log (R_LOGLVL_WARN, \"(%s:%d):%s%s code should not be reached\\n\", \\",
          "38:    r_assert_log (R_LOGLVL_WARN, \"WARNING (%s:%d):%s%s runtime check failed: (%s)\\n\", \\",
          "",
          "[Added Lines]",
          "31:   r_assert_log (R_LOGLVL_WARN, R_LOG_ORIGIN, \"(%s:%d):%s%s code should not be reached\\n\", \\",
          "38:    r_assert_log (R_LOGLVL_WARN, R_LOG_ORIGIN, \"WARNING (%s:%d):%s%s runtime check failed: (%s)\\n\", \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: #if R_CHECKS_LEVEL == 1",
          "65: #define H_LOG_(loglevel, fmt, ...)",
          "66: #else",
          "68: #endif",
          "",
          "[Removed Lines]",
          "67: #define H_LOG_(loglevel, fmt, ...) r_assert_log (loglevel, fmt, __VA_ARGS__)",
          "",
          "[Added Lines]",
          "67: #define H_LOG_(loglevel, fmt, ...) r_assert_log (loglevel, R_LOG_ORIGIN, fmt, __VA_ARGS__)",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_log.h||libr/include/r_util/r_log.h": [
          "File: libr/include/r_util/r_log.h -> libr/include/r_util/r_log.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #define R_LOG_H",
          "4: #include <r_userconf.h>",
          "16: #endif",
          "18: typedef enum r_log_level {",
          "24:  R_LOGLVL_ERROR = 5,",
          "27: } RLogLevel;",
          "35: typedef void (*RLogCallback) (const char *output, const char *funcname, const char *filename,",
          "36:  ut32 lineno, RLogLevel level, const char *tag, const char *fmtstr, ...) R_PRINTF_CHECK(7, 8);",
          "42:  __LINE__, lvl, tag, fmtstr, ##__VA_ARGS__);",
          "44:  __LINE__, R_LOGLVL_SILLY, NULL, fmtstr, ##__VA_ARGS__);",
          "46:  __LINE__, R_LOGLVL_DEBUG, NULL, fmtstr, ##__VA_ARGS__);",
          "48:  __LINE__, R_LOGLVL_VERBOSE, NULL, fmtstr, ##__VA_ARGS__);",
          "50:  __LINE__, R_LOGLVL_INFO, NULL, fmtstr, ##__VA_ARGS__);",
          "52:  __LINE__, R_LOGLVL_WARN, NULL, fmtstr, ##__VA_ARGS__);",
          "54:  __LINE__, R_LOGLVL_ERROR, NULL, fmtstr, ##__VA_ARGS__);",
          "56:  __LINE__, R_LOGLVL_FATAL, NULL, fmtstr, ##__VA_ARGS__);",
          "60: #endif",
          "66: R_API void r_log_set_colors(bool show_colors);",
          "67: R_API void r_log_set_traplevel(RLogLevel level);",
          "76:    This allows another method of output redirection on POSIX (Windows?)",
          "79:  ut32 lineno, RLogLevel level, const char *tag, const char *fmtstr, ...) R_PRINTF_CHECK(6, 7);",
          "82:  ut32 lineno, RLogLevel level, const char *tag, const char *fmtstr, va_list args);",
          "84: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "6: #if __MINGW32__ || (defined(_WIN32) || defined(_WIN64)) && !defined(__GNUC__)",
          "7: #define MACRO_LOG_FUNC __FUNCTION__",
          "8: #define MACRO_WEAK_SYM",
          "10: #elif defined(__EMSCRIPTEN__) // TODO: test upon Emscripten's version once it supports weak symbols",
          "11: #define MACRO_LOG_FUNC __func__",
          "12: #define MACRO_WEAK_SYM",
          "13: #else",
          "14: #define MACRO_LOG_FUNC __func__",
          "15: #define MACRO_WEAK_SYM __attribute__ ((weak))",
          "19:  R_LOGLVL_SILLY = 0,",
          "20:  R_LOGLVL_DEBUG = 1,",
          "21:  R_LOGLVL_VERBOSE = 2,",
          "22:  R_LOGLVL_INFO = 3,",
          "23:  R_LOGLVL_WARN = 4,",
          "25:  R_LOGLVL_FATAL = 6, // This will call r_sys_breakpoint() and trap the process for debugging!",
          "26:  R_LOGLVL_NONE = 0xFF",
          "29: #if R_CHECKS_LEVEL >= 2",
          "30: #define R_DEFAULT_LOGLVL R_LOGLVL_WARN",
          "31: #else",
          "32: #define R_DEFAULT_LOGLVL R_LOGLVL_ERROR",
          "33: #endif",
          "38: #define R_VLOG(lvl, tag, fmtstr, args) r_vlog (MACRO_LOG_FUNC, __FILE__, \\",
          "39:  __LINE__, lvl, tag, fmtstr, args);",
          "41: #define R_LOG(lvl, tag, fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "43: #define R_LOG_SILLY(fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "45: #define R_LOG_DEBUG(fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "47: #define R_LOG_VERBOSE(fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "49: #define R_LOG_INFO(fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "51: #define R_LOG_WARN(fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "53: #define R_LOG_ERROR(fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "55: #define R_LOG_FATAL(fmtstr, ...) r_log (MACRO_LOG_FUNC, __FILE__, \\",
          "58: #ifdef __cplusplus",
          "59: extern \"C\" {",
          "63: R_API void r_log_set_level(RLogLevel level);",
          "64: R_API void r_log_set_file(const char *filename);",
          "65: R_API void r_log_set_srcinfo(bool show_info);",
          "71: R_API void r_log_add_callback(RLogCallback cbfunc);",
          "72: R_API void r_log_del_callback(RLogCallback cbfunc);",
          "78: R_API MACRO_WEAK_SYM void r_log(const char *funcname, const char *filename,",
          "81: R_API MACRO_WEAK_SYM void r_vlog(const char *funcname, const char *filename,",
          "",
          "[Added Lines]",
          "5: #include <r_list.h>",
          "7: #ifdef __cplusplus",
          "8: extern \"C\" {",
          "9: #endif",
          "11: #ifndef R_LOG_ORIGIN",
          "12: #define R_LOG_ORIGIN __FILE__",
          "16:  R_LOGLVL_NONE = 0,",
          "17:  R_LOGLVL_FATAL = 1, // This will call r_sys_breakpoint() and trap the process for debugging!",
          "18:  R_LOGLVL_INFO = 2,",
          "19:  R_LOGLVL_WARN = 3,",
          "20:  R_LOGLVL_DEBUG = 4,",
          "24: #define R_LOGLVL_DEFAULT R_LOGLVL_WARN",
          "26: typedef bool (*RLogCallback)(void *user, int type, const char *origin, const char *msg);",
          "28: typedef struct r_log_t {",
          "29:  int level; // skip messages lower than this level",
          "30:  int traplevel; // skip messages lower than this level",
          "31:  void *user;",
          "32:  char *file;",
          "33:  char *filter;",
          "34:  bool color; // colorize depending on msg level",
          "35:  bool quiet; // be quiet in the console",
          "36:  bool ts;",
          "37:  RList *cbs;",
          "39: } RLog;",
          "41: typedef struct r_log_source_t {",
          "42:  const char *file;",
          "43:  ut32 lineno;",
          "44:  const char *source;",
          "45: } RLogSource;",
          "47: R_API void r_log_init(void);",
          "48: R_API void r_log_fini(void);",
          "49: R_API bool r_log_match(int level, const char *origin);",
          "50: R_API void r_log_message(RLogLevel level, const char *origin, const char *fmt, ...);",
          "51: R_API void r_log_vmessage(RLogLevel level, const char *origin, const char *fmt, va_list ap);",
          "52: R_API void r_log_add_callback(RLogCallback cb);",
          "53: R_API void r_log_del_callback(RLogCallback cb);",
          "55: #define R_LOG(f,...) if (r_log_match(R_LOGLVL_INFO, R_LOG_ORIGIN)) {r_log_message(R_LOGLVL_INFO, R_LOG_ORIGIN, f, ##__VA_ARGS__);}",
          "56: #define R_LOG_WARN(f,...) if (r_log_match(R_LOGLVL_WARN, R_LOG_ORIGIN)) {r_log_message(R_LOGLVL_WARN, R_LOG_ORIGIN, f, ##__VA_ARGS__);}",
          "57: #define R_LOG_INFO(f,...) if (r_log_match(R_LOGLVL_INFO, R_LOG_ORIGIN)) {r_log_message(R_LOGLVL_INFO, R_LOG_ORIGIN, f, ##__VA_ARGS__);}",
          "58: #define R_LOG_DEBUG(f,...) if (r_log_match(R_LOGLVL_DEBUG, R_LOG_ORIGIN)) {r_log_message(R_LOGLVL_DEBUG, R_LOG_ORIGIN, f, ##__VA_ARGS__);}",
          "59: #define R_LOG_ERROR(f,...) if (r_log_match(R_LOGLVL_ERROR, R_LOG_ORIGIN)) {r_log_message(R_LOGLVL_ERROR, R_LOG_ORIGIN, f, ##__VA_ARGS__);}",
          "60: #define R_LOG_FATAL(f,...) if (r_log_match(R_LOGLVL_FATAL, R_LOG_ORIGIN)) {r_log_message(R_LOGLVL_FATAL, R_LOG_ORIGIN, f, ##__VA_ARGS__);}",
          "62: #if 0",
          "63: RLogSource s = { __FILE__, R_FUNCTION, __LINE__, \"bin\" };",
          "67: #define R_LOG(lvl, tag, fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "69: #define R_LOG_SILLY(fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "71: #define R_LOG_DEBUG(fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "73: #define R_LOG_VERBOSE(fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "75: #define R_LOG_INFO(fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "77: #define R_LOG_WARN(fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "79: #define R_LOG_ERROR(fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "81: #define R_LOG_FATAL(fmtstr, ...) r_log (R_FUNCTION, __FILE__, \\",
          "87: R_API void r_log_set_file(const char *expr);",
          "88: R_API void r_log_set_filter(const char *expr);",
          "91: R_API void r_log_set_quiet(bool be_quiet);",
          "92: R_API void r_log_set_level(RLogLevel level);",
          "93: R_API void r_log_set_ts(bool ts);",
          "98: R_API void r_log_set_callback(RLogCallback cbfunc);",
          "104: R_API R_WEAK void r_log(const char *funcname, const char *filename,",
          "107: R_API R_WEAK void r_vlog(const char *funcname, const char *filename,",
          "",
          "---------------"
        ],
        "libr/main/radare2.c||libr/main/radare2.c": [
          "File: libr/main/radare2.c -> libr/main/radare2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   const char *dirPrefix = r_sys_prefix (NULL);",
          "141:   printf (",
          "142:   \"Scripts:\\n\"",
          "146:   \"Plugins:\\n\"",
          "149:   \" R2_LIBR_PLUGINS \" R_JOIN_2_PATHS (\"%s\", R2_PLUGINS) \"\\n\"",
          "151:   \"Environment:\\n\"",
          "160:   \"Paths:\\n\"",
          "162:   \" R2_INCDIR    \"R2_INCDIR\"\\n\"",
          "163:   \" R2_LIBDIR    \"R2_LIBDIR\"\\n\"",
          "164:   \" R2_LIBEXT    \"R_LIB_EXT\"\\n\"",
          "165:   , dirPrefix, datahome, dirPrefix);",
          "166:   free (datahome);",
          "167:  }",
          "",
          "[Removed Lines]",
          "143:   \" system       ${R2_PREFIX}/share/radare2/radare2rc\\n\"",
          "144:   \" user         ~/.radare2rc \" R_JOIN_2_PATHS (\"~\", R2_HOME_RC) \" (and \" R_JOIN_3_PATHS (\"~\", R2_HOME_RC_DIR,\"\") \")\\n\"",
          "145:   \" file         ${filename}.r2\\n\"",
          "147:   \" binrc        \" R_JOIN_4_PATHS (\"~\", R2_HOME_BINRC, \"bin-<format>\",  \"\") \" (elf, elf64, mach0, ..)\\n\"",
          "148:   \" R2_USER_PLUGINS \" R_JOIN_2_PATHS (\"~\", R2_HOME_PLUGINS) \"\\n\"",
          "150:   \" R2_USER_ZIGNS \" R_JOIN_2_PATHS (\"~\", R2_HOME_ZIGNS) \"\\n\"",
          "152:   \" R2_DEBUG      if defined, show error messages and crash signal.\\n\"",
          "153:   \" R2_DEBUG_ASSERT=1 set a breakpoint when hitting an assert.\\n\"",
          "154:   \" R2_IGNVER=1   load plugins ignoring the specified version. (be careful)\\n\"",
          "155:   \" R2_MAGICPATH \" R_JOIN_2_PATHS (\"%s\", R2_SDB_MAGIC) \"\\n\"",
          "156:   \" R2_NOPLUGINS do not load r2 shared plugins\\n\"",
          "157:   \" R2_RCFILE    ~/.radare2rc (user preferences, batch script)\\n\" // TOO GENERIC",
          "158:   \" R2_RDATAHOME %s\\n\" // TODO: rename to RHOME R2HOME?",
          "159:   \" R2_VERSION   contains the current version of r2\\n\"",
          "161:   \" R2_PREFIX    \"R2_PREFIX\"\\n\"",
          "",
          "[Added Lines]",
          "143:   \" system          ${R2_PREFIX}/share/radare2/radare2rc\\n\"",
          "144:   \" user            ~/.radare2rc \" R_JOIN_2_PATHS (\"~\", R2_HOME_RC) \" (and \" R_JOIN_3_PATHS (\"~\", R2_HOME_RC_DIR,\"\") \")\\n\"",
          "145:   \" file            ${filename}.r2\\n\"",
          "147:   \" binrc           \" R_JOIN_4_PATHS (\"~\", R2_HOME_BINRC, \"bin-<format>\",  \"\") \" (elf, elf64, mach0, ..)\\n\"",
          "149:   \" R2_USER_PLUGINS \" R_JOIN_2_PATHS (\"~\", R2_HOME_PLUGINS) \"\\n\"",
          "150:   \" R2_USER_ZIGNS   \" R_JOIN_2_PATHS (\"~\", R2_HOME_ZIGNS) \"\\n\"",
          "152:   \" R2_DEBUG        if defined, show error messages and crash signal.\\n\"",
          "153:   \" R2_DEBUG_ASSERT set a breakpoint when hitting an assert.\\n\"",
          "154:   \" R2_IGNVER       load plugins ignoring the specified version. (be careful)\\n\"",
          "155:   \" R2_MAGICPATH    \" R_JOIN_2_PATHS (\"%s\", R2_SDB_MAGIC) \"\\n\"",
          "156:   \" R2_NOPLUGINS    do not load r2 shared plugins\\n\"",
          "157:   \" R2_RCFILE       ~/.radare2rc (user preferences, batch script)\\n\" // TOO GENERIC",
          "158:   \" R2_RDATAHOME    %s\\n\" // TODO: rename to RHOME R2HOME?",
          "159:   \" R2_VERSION      contains the current version of r2\\n\"",
          "160:   \" R2_LOG_LEVEL    numeric value of the max level of messages to show\\n\"",
          "161:   \" R2_LOG_FILE     dump all logs to a file\\n\"",
          "162: #if 0",
          "163:   \" R2_LOGCOLOR     \\n\"",
          "164:   \" R2_COLOR     \\n\"",
          "165: #endif",
          "170:   \" R2_PREFIX    \"R2_PREFIX\"\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   return;",
          "321:  }",
          "322: #endif",
          "323:  char *tmp = r_sys_getenv (\"COLORTERM\");",
          "324:  if (tmp) {",
          "325:   if ((r_str_endswith (tmp, \"truecolor\") || r_str_endswith (tmp, \"24bit\"))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:  char *log_level = r_sys_getenv (\"R2_LOG_LEVEL\");",
          "330:  if (R_STR_ISNOTEMPTY (log_level)) {",
          "331:   r_config_set (r->config, \"log.level\", log_level);",
          "332:  }",
          "333:  R_FREE (log_level);",
          "334:  char *log_file = r_sys_getenv (\"R2_LOG_FILE\");",
          "335:  if (R_STR_ISNOTEMPTY (log_file)) {",
          "336:   r_config_set (r->config, \"log.file\", log_file);",
          "337:  }",
          "338:  R_FREE (log_file);",
          "",
          "---------------"
        ],
        "libr/util/assert.c||libr/util/assert.c": [
          "File: libr/util/assert.c -> libr/util/assert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  printf (\"%s\", output);",
          "9: }",
          "12:  r_log_add_callback (stdout_log);",
          "14:  r_log_del_callback (stdout_log);",
          "15: }",
          "16: #else",
          "19: }",
          "20: #endif",
          "26:  va_list args;",
          "27:  va_start (args, fmt);",
          "29:  va_end (args);",
          "30:  char *env = r_sys_getenv (\"R2_DEBUG_ASSERT\");",
          "31:  if (env) {",
          "",
          "[Removed Lines]",
          "11: static void print_message(RLogLevel level, const char *fmt, va_list args) {",
          "13:  R_VLOG (level, NULL, fmt, args);",
          "17: static void print_message(RLogLevel level, const char *fmt, va_list args) {",
          "18:  R_VLOG (level, NULL, fmt, args);",
          "25: R_API void r_assert_log(RLogLevel level, const char *fmt, ...) {",
          "28:  print_message (level, fmt, args);",
          "",
          "[Added Lines]",
          "11: static void print_message(RLogLevel level, const char *origin, const char *fmt, va_list ap) {",
          "13:  r_log_vmessage (level, origin, fmt, ap);",
          "17: static void print_message(RLogLevel level, const char *origin, const char *fmt, va_list ap) {",
          "18:  r_log_vmessage (level, origin, fmt, ap);",
          "25: R_API void r_assert_log(RLogLevel level, const char *origin, const char *fmt, ...) {",
          "28:  print_message (level, origin, fmt, args);",
          "",
          "---------------"
        ],
        "libr/util/file.c||libr/util/file.c": [
          "File: libr/util/file.c -> libr/util/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"r_types.h\"",
          "4: #include \"r_util.h\"",
          "5: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"filter\"",
          "",
          "---------------"
        ],
        "libr/util/log.c||libr/util/log.c": [
          "File: libr/util/log.c -> libr/util/log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <r_core.h>",
          "7: #include <stdarg.h>",
          "16: static const char *level_tags[] = { // Log level to tag string lookup array",
          "20:  [R_LOGLVL_INFO]      = \"INFO\",",
          "21:  [R_LOGLVL_WARN]      = \"WARNING\",",
          "22:  [R_LOGLVL_ERROR]     = \"ERROR\",",
          "23:  [R_LOGLVL_FATAL]     = \"FATAL\"",
          "24: };",
          "29: }",
          "33: }",
          "38: }",
          "42: }",
          "46: }",
          "59: }",
          "68:  }",
          "69: }",
          "89:  }",
          "93:  }",
          "99:   RLogCallback cb;",
          "103:   }",
          "106:  }",
          "114:   }",
          "118:   } else {",
          "120:   }",
          "121:  }",
          "128:  }",
          "129: }",
          "142:  va_list args;",
          "144:  va_start (args, fmtstr);",
          "146:  va_end (args);",
          "147: }",
          "",
          "[Removed Lines]",
          "3: #define LOG_CONFIGSTR_SIZE 128",
          "4: #define LOG_OUTPUTBUF_SIZE 512",
          "10: static R_TH_LOCAL RList *log_cbs = NULL; // Functions to call when outputting log string",
          "11: static R_TH_LOCAL int cfg_loglvl = R_LOGLVL_ERROR; // Log level output",
          "12: static R_TH_LOCAL int cfg_logtraplvl = R_LOGLVL_FATAL; // Log trap level",
          "13: static R_TH_LOCAL bool cfg_logsrcinfo = false; // Print out debug source info with the output",
          "14: static R_TH_LOCAL bool cfg_logcolors = false; // Output colored log text based on level",
          "15: static R_TH_LOCAL char cfg_logfile[LOG_CONFIGSTR_SIZE] = \"\"; // Output text to filename",
          "17:  [R_LOGLVL_SILLY]     = \"SILLY\",",
          "18:  [R_LOGLVL_VERBOSE]   = \"VERBOSE\",",
          "19:  [R_LOGLVL_DEBUG]     = \"DEBUG\",",
          "27: R_API void r_log_set_level(RLogLevel level) {",
          "28:  cfg_loglvl = level;",
          "31: R_API void r_log_set_traplevel(RLogLevel level) {",
          "32:  cfg_logtraplvl = level;",
          "35: R_API void r_log_set_file(const char *filename) {",
          "36:  int value_len = r_str_nlen (filename, LOG_CONFIGSTR_SIZE) + 1;",
          "37:  strncpy (cfg_logfile, filename, value_len);",
          "40: R_API void r_log_set_srcinfo(bool show_info) {",
          "41:  cfg_logsrcinfo = show_info;",
          "44: R_API void r_log_set_colors(bool show_info) {",
          "45:  cfg_logcolors = show_info;",
          "52: R_API void r_log_add_callback(RLogCallback cbfunc) {",
          "53:  if (!log_cbs) {",
          "54:   log_cbs = r_list_new ();",
          "55:  }",
          "56:  if (!r_list_contains (log_cbs, cbfunc)) {",
          "57:   r_list_append (log_cbs, cbfunc);",
          "58:  }",
          "65: R_API void r_log_del_callback(RLogCallback cbfunc) {",
          "66:  if (log_cbs) {",
          "67:   r_list_delete_data (log_cbs, cbfunc);",
          "71: R_API void r_vlog(const char *funcname, const char *filename,",
          "72:  ut32 lineno, RLogLevel level, const char *tag, const char *fmtstr, va_list args) {",
          "73:  va_list args_copy;",
          "74:  va_copy (args_copy, args);",
          "76:  if (level < cfg_loglvl && level < cfg_logtraplvl) {",
          "79:   va_end (args_copy);",
          "80:   return;",
          "81:  }",
          "86:  char output_buf[LOG_OUTPUTBUF_SIZE] = \"\"; // Big buffer for building the output string",
          "87:  if (!tag) {",
          "88:   tag = R_BETWEEN (0, level, R_ARRAY_SIZE (level_tags) - 1)? level_tags[level]: \"\";",
          "90:  int offset = snprintf (output_buf, LOG_OUTPUTBUF_SIZE, \"%s: \", tag);",
          "91:  if (cfg_logsrcinfo) {",
          "92:   offset += snprintf (output_buf + offset, LOG_OUTPUTBUF_SIZE - offset, \"%s in %s:%i: \", funcname, filename, lineno);",
          "94:  vsnprintf (output_buf + offset, LOG_OUTPUTBUF_SIZE - offset, fmtstr, args);",
          "97:  if (log_cbs && r_list_length (log_cbs) > 0) {",
          "98:   RListIter *it;",
          "101:   r_list_foreach (log_cbs, it, cb) {",
          "102:    cb (output_buf, funcname, filename, lineno, level, NULL, fmtstr, args_copy);",
          "104:  } else {",
          "105:   fprintf (stderr, \"%s\", output_buf);",
          "107:  va_end (args_copy);",
          "110:  if (cfg_logfile[0] != 0x00) {",
          "111:   FILE *file = r_sandbox_fopen (cfg_logfile, \"a+\"); // TODO: Optimize (static? Needs to remake on cfg change though)",
          "112:   if (!file) {",
          "113:    file = r_sandbox_fopen (cfg_logfile, \"w+\");",
          "115:   if (file) {",
          "116:    fprintf (file, \"%s\", output_buf);",
          "117:    fclose (file);",
          "119:    eprintf (\"%s failed to write to file: %s\\n\", MACRO_LOG_FUNC, cfg_logfile);",
          "123:  if (level >= cfg_logtraplvl && level != R_LOGLVL_NONE) {",
          "124:   fflush (stdout); // We're about to exit HARD, flush buffers before dying",
          "125:   fflush (stderr);",
          "127:   r_sys_breakpoint (); // *oof*",
          "139:   This function is used by the R_LOG_* preprocessor macros for logging",
          "141: R_API void r_log(const char *funcname, const char *filename, ut32 lineno, RLogLevel level, const char *tag, const char *fmtstr, ...) {",
          "145:  r_vlog (funcname, filename, lineno, level, tag, fmtstr, args);",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"util.log\"",
          "9:  [R_LOGLVL_NONE]      = \"NONE\",",
          "12:  [R_LOGLVL_DEBUG]     = \"DEBUG\",",
          "17: static const char *level_name(int i) {",
          "18:  if (i >= 0 && i < 6) {",
          "19:   return level_tags[i];",
          "20:  }",
          "21:  return \"UNKNOWN\";",
          "24: static R_TH_LOCAL RLog *log = NULL;",
          "27: R_API void r_log_init(void) {",
          "28:  if (!log) {",
          "29:   log = R_NEW0 (RLog);",
          "30:  }",
          "33: R_API void r_log_fini(void) {",
          "34:  if (log) {",
          "35:   free (log->file);",
          "36:   free (log->filter);",
          "37:   free (log);",
          "38:   log = NULL;",
          "39:  }",
          "42: R_API void r_log_set_ts(bool ts) {",
          "43:  r_log_init ();",
          "44:  log->ts = ts;",
          "47: R_API void r_log_set_level(RLogLevel level) {",
          "48:  r_log_init ();",
          "49:  log->level = level;",
          "52: R_API void r_log_set_traplevel(RLogLevel level) {",
          "53:  r_log_init ();",
          "54:  log->traplevel = level;",
          "57: R_API void r_log_set_filter(const char *s) {",
          "58:  r_log_init ();",
          "59:  R_FREE (log->filter);",
          "60:  if (R_STR_ISNOTEMPTY (s)) {",
          "61:   log->filter = strdup (s);",
          "65: R_API void r_log_set_file(const char *filename) {",
          "66:  r_log_init ();",
          "67:  free (log->file);",
          "68:  log->file = strdup (filename);",
          "69: }",
          "71: R_API void r_log_set_colors(bool color) {",
          "72:  r_log_init ();",
          "73:  log->color = color;",
          "74: }",
          "76: R_API void r_log_set_quiet(bool bq) {",
          "77:  r_log_init ();",
          "78:  log->quiet = bq;",
          "79: }",
          "81: R_API bool r_log_match(int level, const char *origin) { // , const char *sub_origin, const char *fmt, ...) {",
          "82:  r_log_init ();",
          "83:  if (R_STR_ISNOTEMPTY (log->filter)) {",
          "84:   if (strstr (origin, log->filter)) {",
          "85:    return false;",
          "86:   }",
          "88:  if (log->cbs) {",
          "89:   RListIter *iter;",
          "90:   RLogCallback cb;",
          "91:   r_list_foreach (log->cbs, iter, cb) {",
          "92:    if (cb (log->user, level, origin, NULL)) {",
          "93:     return true;",
          "94:    }",
          "95:   }",
          "98:  return level < log->level;",
          "99: }",
          "101: R_API void r_log_vmessage(RLogLevel level, const char *origin, const char *fmt, va_list ap) {",
          "102:  char out[512];",
          "103:  r_log_init ();",
          "104:  int type = 3;",
          "105:  vsnprintf (out, sizeof (out), fmt, ap);",
          "106:  if (log->cbs) {",
          "107:   RListIter *iter;",
          "109:   r_list_foreach (log->cbs, iter, cb) {",
          "110:    cb (log->user, type, NULL, out);",
          "113:  RStrBuf *sb = r_strbuf_new (\"\");",
          "114:  if (log->color) {",
          "115:   if (level > 3) {",
          "116:    r_strbuf_appendf (sb, Color_RED \"[%s] \" Color_YELLOW \"[%s] \" Color_RESET, level_name (level), origin);",
          "117:   } else {",
          "118:    r_strbuf_appendf (sb, Color_GREEN \"[%s] \" Color_YELLOW \"[%s] \" Color_RESET, level_name (level), origin);",
          "120:  } else {",
          "121:   r_strbuf_appendf (sb, \"[%s] [%s] \", level_name (level), origin);",
          "122:  }",
          "123:  char ts[32] = {0};",
          "124:  if (log->ts) {",
          "125:   ut64 now = r_time_now ();",
          "126:   if (log->color) {",
          "127:    r_strbuf_appendf (sb, ts, sizeof (ts), Color_CYAN \"[ts:%\" PFMT64u \"] \" Color_RESET, now);",
          "129:    r_strbuf_appendf (sb, ts, sizeof (ts), \"[ts:%\" PFMT64u \"] \", now);",
          "132:  r_strbuf_appendf (sb, \"%s%s\\n\", ts, out);",
          "133:  char * s = r_strbuf_drain (sb);",
          "134:  sb = NULL;",
          "135:  if (!log->quiet) {",
          "136:   eprintf (\"%s\", s);",
          "137:  }",
          "138:  if (R_STR_ISNOTEMPTY (log->file)) {",
          "139:   r_file_dump (log->file, (const ut8*)s, strlen (s), true);",
          "140:  }",
          "141:  if (log->traplevel && (level >= log->traplevel || level == R_LOGLVL_FATAL)) {",
          "142:   r_sys_backtrace ();",
          "143:   r_sys_breakpoint ();",
          "144:  }",
          "145: }",
          "147: R_API void r_log_message(RLogLevel level, const char *origin, const char *fmt, ...) {",
          "148:  va_list ap;",
          "149:  va_start (ap, fmt);",
          "150:  r_log_vmessage (level, origin, fmt, ap);",
          "151:  va_end (ap);",
          "152: }",
          "154: R_API void r_log_add_callback(RLogCallback cb) {",
          "155:  r_log_init ();",
          "156:  if (!log->cbs) {",
          "157:   log->cbs = r_list_new ();",
          "158:  }",
          "159:  if (!r_list_contains (log->cbs, cb)) {",
          "160:   r_list_append (log->cbs, cb);",
          "164: R_API void r_log_del_callback(RLogCallback cb) {",
          "165:  r_log_init ();",
          "166:  r_list_delete_data (log->cbs, cb);",
          "167: }",
          "169: R_API void r_log(const char *funcname, const char *filename, ut32 lineno, RLogLevel level, const char *origin, const char *fmtstr, ...) {",
          "173:  r_log_vmessage (level, origin, fmtstr, args);",
          "",
          "---------------"
        ]
      }
    }
  ]
}