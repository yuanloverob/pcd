{
  "cve_id": "CVE-2018-7254",
  "cve_desc": "The ParseCaffHeaderConfig function of the cli/caff.c file of WavPack 5.1.0 allows a remote attacker to cause a denial-of-service (global buffer over-read), or possibly trigger a buffer overflow or incorrect memory allocation, via a maliciously crafted CAF file.",
  "repo": "dbry/WavPack",
  "patch_hash": "8e3fe45a7bac31d9a3b558ae0079e2d92a04799e",
  "patch_info": {
    "commit_hash": "8e3fe45a7bac31d9a3b558ae0079e2d92a04799e",
    "repo": "dbry/WavPack",
    "commit_url": "https://github.com/dbry/WavPack/commit/8e3fe45a7bac31d9a3b558ae0079e2d92a04799e",
    "files": [
      "cli/caff.c"
    ],
    "message": "issue #28, fix buffer overflows and bad allocs on corrupt CAF files",
    "before_after_code_files": [
      "cli/caff.c||cli/caff.c"
    ]
  },
  "patch_diff": {
    "cli/caff.c||cli/caff.c": [
      "File: cli/caff.c -> cli/caff.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: #define CAFChannelDescriptionFormat \"LLLLL\"",
      "95: static struct {",
      "96:     uint32_t mChannelLayoutTag;     // Core Audio layout, 100 - 146 in high word, num channels in low word",
      "",
      "[Removed Lines]",
      "92: static const char TMH_full [] = { 1,2,3,13,9,10,5,6,12,14,15,16,17,9,4,18,7,8,19,20,21 };",
      "93: static const char TMH_std [] = { 1,2,3,11,8,9,5,6,10,12,13,14,15,7,4,16 };",
      "",
      "[Added Lines]",
      "92: static const char TMH_full [] = { 1,2,3,13,9,10,5,6,12,14,15,16,17,9,4,18,7,8,19,20,21,0 };",
      "93: static const char TMH_std [] = { 1,2,3,11,8,9,5,6,10,12,13,14,15,7,4,16,0 };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "274:             }",
      "275:         }",
      "276:         else if (!strncmp (caf_chunk_header.mChunkType, \"chan\", 4)) {",
      "281:                 bcount != caf_chunk_header.mChunkSize) {",
      "282:                     error_line (\"%s is not a valid .CAF file!\", infilename);",
      "283:                     free (caf_channel_layout);",
      "",
      "[Removed Lines]",
      "277:             CAFChannelLayout *caf_channel_layout = malloc ((size_t) caf_chunk_header.mChunkSize);",
      "279:             if (caf_chunk_header.mChunkSize < sizeof (CAFChannelLayout) ||",
      "280:                 !DoReadFile (infile, caf_channel_layout, (uint32_t) caf_chunk_header.mChunkSize, &bcount) ||",
      "",
      "[Added Lines]",
      "277:             CAFChannelLayout *caf_channel_layout;",
      "279:             if (caf_chunk_header.mChunkSize < sizeof (CAFChannelLayout) || caf_chunk_header.mChunkSize > 1024) {",
      "280:                 error_line (\"this .CAF file has an invalid 'chan' chunk!\");",
      "281:                 return WAVPACK_SOFT_ERROR;",
      "282:             }",
      "284:             if (debug_logging_mode)",
      "285:                 error_line (\"'chan' chunk is %d bytes\", (int) caf_chunk_header.mChunkSize);",
      "287:             caf_channel_layout = malloc ((size_t) caf_chunk_header.mChunkSize);",
      "289:             if (!DoReadFile (infile, caf_channel_layout, (uint32_t) caf_chunk_header.mChunkSize, &bcount) ||",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "495:         }",
      "496:         else {          // just copy unknown chunks to output file",
      "501:             if (debug_logging_mode)",
      "502:                 error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\",",
      "",
      "[Removed Lines]",
      "498:             int bytes_to_copy = (uint32_t) caf_chunk_header.mChunkSize;",
      "499:             char *buff = malloc (bytes_to_copy);",
      "",
      "[Added Lines]",
      "507:             uint32_t bytes_to_copy = (uint32_t) caf_chunk_header.mChunkSize;",
      "508:             char *buff;",
      "510:             if (caf_chunk_header.mChunkSize < 0 || caf_chunk_header.mChunkSize > 1048576) {",
      "511:                 error_line (\"%s is not a valid .CAF file!\", infilename);",
      "512:                 return WAVPACK_SOFT_ERROR;",
      "513:             }",
      "515:             buff = malloc (bytes_to_copy);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36a24c7881427d2e1e4dc1cef58f19eee0d13aec",
      "candidate_info": {
        "commit_hash": "36a24c7881427d2e1e4dc1cef58f19eee0d13aec",
        "repo": "dbry/WavPack",
        "commit_url": "https://github.com/dbry/WavPack/commit/36a24c7881427d2e1e4dc1cef58f19eee0d13aec",
        "files": [
          "cli/dsdiff.c"
        ],
        "message": "issue #28, do not overwrite heap on corrupt DSDIFF file",
        "before_after_code_files": [
          "cli/dsdiff.c||cli/dsdiff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cli/dsdiff.c||cli/dsdiff.c": [
          "File: cli/dsdiff.c -> cli/dsdiff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:                 error_line (\"dsdiff file version = 0x%08x\", version);",
          "154:         }",
          "155:         else if (!strncmp (dff_chunk_header.ckID, \"PROP\", 4)) {",
          "158:             if (!DoReadFile (infile, prop_chunk, (uint32_t) dff_chunk_header.ckDataSize, &bcount) ||",
          "159:                 bcount != dff_chunk_header.ckDataSize) {",
          "",
          "[Removed Lines]",
          "156:             char *prop_chunk = malloc ((size_t) dff_chunk_header.ckDataSize);",
          "",
          "[Added Lines]",
          "156:             char *prop_chunk;",
          "158:             if (dff_chunk_header.ckDataSize < 4 || dff_chunk_header.ckDataSize > 1024) {",
          "159:                 error_line (\"%s is not a valid .DFF file!\", infilename);",
          "160:                 return WAVPACK_SOFT_ERROR;",
          "161:             }",
          "163:             if (debug_logging_mode)",
          "164:                 error_line (\"got PROP chunk of %d bytes total\", (int) dff_chunk_header.ckDataSize);",
          "166:             prop_chunk = malloc ((size_t) dff_chunk_header.ckDataSize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "919c2a2a29b70076b17b8ced273fa77ddc00c99f",
      "candidate_info": {
        "commit_hash": "919c2a2a29b70076b17b8ced273fa77ddc00c99f",
        "repo": "dbry/WavPack",
        "commit_url": "https://github.com/dbry/WavPack/commit/919c2a2a29b70076b17b8ced273fa77ddc00c99f",
        "files": [
          "cli/caff.c"
        ],
        "message": "issue #42: make sure channel chunk does not have negative length",
        "before_after_code_files": [
          "cli/caff.c||cli/caff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cli/caff.c||cli/caff.c"
          ],
          "candidate": [
            "cli/caff.c||cli/caff.c"
          ]
        }
      },
      "candidate_diff": {
        "cli/caff.c||cli/caff.c": [
          "File: cli/caff.c -> cli/caff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:         else if (!strncmp (caf_chunk_header.mChunkType, \"chan\", 4)) {",
          "277:             CAFChannelLayout *caf_channel_layout;",
          "282:             }",
          "284:             if (debug_logging_mode)",
          "",
          "[Removed Lines]",
          "279:             if (caf_chunk_header.mChunkSize < sizeof (CAFChannelLayout) || caf_chunk_header.mChunkSize > 1024) {",
          "280:                 error_line (\"this .CAF file has an invalid 'chan' chunk!\");",
          "281:                 return WAVPACK_SOFT_ERROR;",
          "",
          "[Added Lines]",
          "279:             if (caf_chunk_header.mChunkSize < 0 || caf_chunk_header.mChunkSize > 1024 ||",
          "280:                 caf_chunk_header.mChunkSize < sizeof (CAFChannelLayout)) {",
          "281:                     error_line (\"this .CAF file has an invalid 'chan' chunk!\");",
          "282:                     return WAVPACK_SOFT_ERROR;",
          "",
          "---------------"
        ]
      }
    }
  ]
}