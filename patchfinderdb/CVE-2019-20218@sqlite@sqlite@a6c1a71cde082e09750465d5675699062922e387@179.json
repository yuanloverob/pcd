{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
      "candidate_info": {
        "commit_hash": "bf9ff256fe17526a995ac3e470aa120c3c173414",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf9ff256fe17526a995ac3e470aa120c3c173414",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/sqliteInt.h",
          "test/without_rowid1.test"
        ],
        "message": "Disable index seek optimizations on REINDEX when the order of primary keys in the index differs from the main table. Fix for ticket [bba7b69f9849b5bf11b4].\n\nFossilOrigin-Name: f7aadfab3bb8eb8eb2cd62dc8a6823538387b3329f1efc23ef75482488109478",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f158c048be1dc7c80d38787a20495caa55b86416967efd57f4888548d42b4819",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1928:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1929:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1930:         pIdx->azColl[j] = pPk->azColl[i];",
          "1931:         j++;",
          "1932:       }",
          "1933:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1931:         if( pPk->aSortOrder[i] ){",
          "1933:           pIdx->bAscKeyBug = 1;",
          "1934:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3049:     addr2 = sqlite3VdbeCurrentAddr(v);",
          "3050:   }",
          "3051:   sqlite3VdbeAddOp3(v, OP_SorterData, iSorter, regRecord, iIdx);",
          "3053:   sqlite3VdbeAddOp2(v, OP_IdxInsert, iIdx, regRecord);",
          "3054:   sqlite3VdbeChangeP5(v, OPFLAG_USESEEKRESULT);",
          "3055:   sqlite3ReleaseTempReg(pParse, regRecord);",
          "",
          "[Removed Lines]",
          "3052:   sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "",
          "[Added Lines]",
          "3056:   if( !pIndex->bAscKeyBug ){",
          "3064:     sqlite3VdbeAddOp1(v, OP_SeekEnd, iIdx);",
          "3065:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "403: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: # 2019-05-13 ticket https://www.sqlite.org/src/info/bba7b69f9849b5b",
          "404: do_execsql_test 12.1 {",
          "405:   DROP TABLE IF EXISTS t0;",
          "406:   CREATE TABLE t0 (c0 INTEGER PRIMARY KEY DESC, c1 UNIQUE DEFAULT NULL) WITHOUT ROWID;",
          "407:   INSERT INTO t0(c0) VALUES (1), (2), (3), (4), (5);",
          "408:   REINDEX;",
          "409:   PRAGMA integrity_check;",
          "410: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9ebfe20309d5aeec90337099a27e68454d16ff6",
      "candidate_info": {
        "commit_hash": "a9ebfe20309d5aeec90337099a27e68454d16ff6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a9ebfe20309d5aeec90337099a27e68454d16ff6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "When the sqlite3WindowRewrite() routine detects and error, have it convert the SELECT statement into just \"SELECT null\" so that it does not leave the parse tree in a goofy state that can cause problems with subsequent code before the stack has a chance to unwind and report the error. Ticket [d87336c81c7d0873]\n\nFossilOrigin-Name: fa58aad48a788802b13a819e49f9b8787f713bbe395c46c7295e821c52c81738",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 76f54ee86777cbf530654323c953388ef64d0608516722d2522be6c859fa1382",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "595:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "597:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "598:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "599:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:   if( pParse->nErr ) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2688: void sqlite3SubselectError(Parse *pParse, int nActual, int nExpect){",
          "2691: }",
          "2692: #endif",
          "",
          "[Removed Lines]",
          "2689:   const char *zFmt = \"sub-select returns %d columns - expected %d\";",
          "2690:   sqlite3ErrorMsg(pParse, zFmt, nActual, nExpect);",
          "",
          "[Added Lines]",
          "2690:   if( pParse->nErr==0 ){",
          "2691:     const char *zFmt = \"sub-select returns %d columns - expected %d\";",
          "2692:     sqlite3ErrorMsg(pParse, zFmt, nActual, nExpect);",
          "2693:   }",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:   if( OK_IF_ALWAYS_TRUE(p) ) clearSelect(db, p, 1);",
          "189: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: void sqlite3SelectReset(Parse *pParse, Select *p){",
          "200:   if( ALWAYS(p) ){",
          "201:     clearSelect(pParse->db, p, 0);",
          "202:     memset(&p->iLimit, 0, sizeof(Select) - offsetof(Select,iLimit));",
          "203:     p->pEList = sqlite3ExprListAppend(pParse, 0,",
          "204:                      sqlite3ExprAlloc(pParse->db,TK_NULL,0,0));",
          "205:   }",
          "206: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2713:         assert( unionTab==dest.iSDParm || dest.eDest!=priorOp );",
          "2715:           int iCont, iBreak, iStart;",
          "2717:           iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2718:           iCont = sqlite3VdbeMakeLabel(pParse);",
          "2719:           computeLimitRegisters(pParse, p, iBreak);",
          "",
          "[Removed Lines]",
          "2714:         if( dest.eDest!=priorOp ){",
          "2716:           assert( p->pEList );",
          "",
          "[Added Lines]",
          "2731:         assert( p->pEList || db->mallocFailed );",
          "2732:         if( dest.eDest!=priorOp && db->mallocFailed==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5738:   }",
          "5740: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5742:     goto select_end;",
          "5743:   }",
          "5744: #if SELECTTRACE_ENABLED",
          "",
          "[Removed Lines]",
          "5741:   if( sqlite3WindowRewrite(pParse, p) ){",
          "",
          "[Added Lines]",
          "5758:   rc = sqlite3WindowRewrite(pParse, p);",
          "5759:   if( rc ){",
          "5760:     assert( pParse->nErr>0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4092: Select *sqlite3SelectNew(Parse*,ExprList*,SrcList*,Expr*,ExprList*,",
          "4093:                          Expr*,ExprList*,u32,Expr*);",
          "4094: void sqlite3SelectDelete(sqlite3*, Select*);",
          "4095: Table *sqlite3SrcListLookup(Parse*, SrcList*);",
          "4096: int sqlite3IsReadOnly(Parse*, Table*, int);",
          "4097: void sqlite3OpenTable(Parse*, int iCur, int iDb, Table*, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4095: void sqlite3SelectReset(Parse*, Select*);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:     sqlite3DbFree(db, pTab);",
          "1040:   }",
          "1045:   }",
          "1046:   return rc;",
          "1047: }",
          "",
          "[Removed Lines]",
          "1042:   if( rc && pParse->nErr==0 ){",
          "1043:     assert( pParse->db->mallocFailed );",
          "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
          "",
          "[Added Lines]",
          "1045:   if( rc ){",
          "1046:     if( pParse->nErr==0 ){",
          "1047:       assert( pParse->db->mallocFailed );",
          "1048:       sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
          "1049:     }",
          "1050:     sqlite3SelectReset(pParse, p);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1329:   SELECT c FROM v0 WHERE c BETWEEN -10 AND 20;",
          "1330: } {}",
          "1333: # in a join.",
          "1334: #",
          "1335: reset_db",
          "",
          "[Removed Lines]",
          "1332: # 2019-20-20 mrigger reported problem with a FILTER clause on an aggregate",
          "",
          "[Added Lines]",
          "1332: # 2019-12-20 mrigger reported problem with a FILTER clause on an aggregate",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1361:   SELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0);",
          "1362: }",
          "1365: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1364: # 2019-12-25 ticket d87336c81c7d0873",
          "1365: #",
          "1366: reset_db",
          "1367: do_catchsql_test 40.1 {",
          "1368:   CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369:   SELECT * FROM t0",
          "1370:    WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: } {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "971194aca3cfdaedd78a8498f553628fca3cc899",
      "candidate_info": {
        "commit_hash": "971194aca3cfdaedd78a8498f553628fca3cc899",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/971194aca3cfdaedd78a8498f553628fca3cc899",
        "files": [
          "ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix RBU so that it does not write rows that should be excluded into partial indexes (corrupting the database).\n\nFossilOrigin-Name: 31eb27f438ad727b095a518bfe0f7ed37cb806fc1e6929b821eddcc6cc9de260",
        "before_after_code_files": [
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 11",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbupartial",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "20: foreach {tn without_rowid a b c d} {",
          "21:   1 \"\"              a b c d",
          "22:   2 \"WITHOUT ROWID\" aaa bbb ccc ddd",
          "23:   3 \"WITHOUT ROWID\" \"\\\"hello\\\"\" {\"one'two\"}  {[c]} ddd",
          "24:   4 \"WITHOUT ROWID\" {`a b`} {\"one'two\"}  {[c c c]} ddd",
          "25:   5 \"\" a b c {\"d\"\"d\"}",
          "26:   6 \"\" {'one''two'} b {\"c\"\"c\"} {\"d\"\"d\"}",
          "27: } {",
          "28:   eval [string map [list \\",
          "29:     %WITHOUT_ROWID% $without_rowid %A% $a %B% $b %C% $c %D% $d",
          "30:   ] {",
          "31:   reset_db",
          "32:   do_execsql_test $tn.1.0 {",
          "33:     CREATE TABLE t1(%A% PRIMARY KEY, %B%, %C%, %D%) %WITHOUT_ROWID% ;",
          "34:     CREATE INDEX i1b  ON t1(%B%);",
          "35:     CREATE INDEX i1b2 ON t1(%B%) WHERE %C%<5;",
          "36:     CREATE INDEX i1b3 ON t1(%B%) WHERE %C%>=5;",
          "38:     CREATE INDEX i1c  ON t1(%C%);",
          "39:     CREATE INDEX i1c2 ON t1(%C%) WHERE %C% IS NULL;",
          "40:     CREATE INDEX i1c3 ON t1(%C%) WHERE %C% IS NOT NULL;",
          "42:     CREATE INDEX i1c4 ON t1(%C%) WHERE %D% < 'd';",
          "43:   }",
          "45:   do_execsql_test $tn.1.1 {",
          "46:     INSERT INTO t1 VALUES(0, NULL, NULL, 'a');",
          "47:     INSERT INTO t1 VALUES(1, 2, 3, 'b');",
          "48:     INSERT INTO t1 VALUES(4, 5, 6, 'c');",
          "49:     INSERT INTO t1 VALUES(7, 8, 9, 'd');",
          "50:   }",
          "52:   forcedelete rbu.db",
          "53:   do_test $tn.1.2 {",
          "54:     sqlite3 rbu rbu.db",
          "55:     rbu eval {",
          "56:       CREATE TABLE data_t1(%A%, %B%, %C%, %D%, rbu_control);",
          "58:       INSERT INTO data_t1 VALUES(10, 11, 12, 'e', 0);",
          "59:       INSERT INTO data_t1 VALUES(13, 14, NULL, 'f', 0);",
          "61:       INSERT INTO data_t1 VALUES(0, NULL, NULL, NULL, 1);",
          "62:       INSERT INTO data_t1 VALUES(4, NULL, NULL, NULL, 1);",
          "64:       INSERT INTO data_t1 VALUES(7, NULL, 4, NULL, '..x.');",
          "65:       INSERT INTO data_t1 VALUES(1, 10, NULL, NULL, '.xx.');",
          "66:     }",
          "67:     rbu close",
          "68:   } {}",
          "70:   do_test $tn.1.3 {",
          "71:     run_rbu test.db rbu.db",
          "72:     execsql { PRAGMA integrity_check }",
          "73:   } {ok}",
          "75:   do_execsql_test $tn.1.4 {",
          "76:     SELECT * FROM t1 ORDER BY %A%;",
          "77:   } {",
          "78:     1 10 {} b   7 8 4 d   10 11 12 e   13 14 {} f",
          "79:   }",
          "81:   set step 0",
          "82:   do_rbu_vacuum_test $tn.1.5 0",
          "83:   }]",
          "84: }",
          "86: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1250:   pIter->nIndex = 0;",
          "1251:   while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pList) ){",
          "1252:     const char *zIdx = (const char*)sqlite3_column_text(pList, 1);",
          "1253:     sqlite3_stmt *pXInfo = 0;",
          "1254:     if( zIdx==0 ) break;",
          "1255:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1256:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", zIdx)",
          "1257:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1258:     int bPartial = sqlite3_column_int(pList, 4);",
          "1261:     if( bPartial ){",
          "1262:       memset(pIter->abIndexed, 0x01, sizeof(u8)*pIter->nTblCol);",
          "1263:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1958:   }",
          "1959: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1970: static char *rbuObjIterGetIndexWhere(sqlite3rbu *p, RbuObjIter *pIter){",
          "1971:   sqlite3_stmt *pStmt = 0;",
          "1972:   int rc = p->rc;",
          "1973:   char *zRet = 0;",
          "1975:   if( rc==SQLITE_OK ){",
          "1976:     rc = prepareAndCollectError(p->dbMain, &pStmt, &p->zErrmsg,",
          "1977:         \"SELECT trim(sql) FROM sqlite_master WHERE type='index' AND name=?\"",
          "1978:     );",
          "1979:   }",
          "1980:   if( rc==SQLITE_OK ){",
          "1981:     int rc2;",
          "1982:     rc = sqlite3_bind_text(pStmt, 1, pIter->zIdx, -1, SQLITE_STATIC);",
          "1983:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "1984:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "1985:       if( zSql ){",
          "1987:         int i;",
          "1988:         for(i=0; zSql[i]; i++){",
          "1989:           char c = zSql[i];",
          "1990:           if( c=='(' ){",
          "1991:             nParen++;",
          "1992:           }",
          "1993:           else if( c==')' ){",
          "1994:             nParen--;",
          "1995:             if( nParen==0 ){",
          "1996:               i++;",
          "1997:               break;",
          "1998:             }",
          "1999:           }else if( c=='\"' || c=='\\'' || c=='`' ){",
          "2000:             for(i++; 1; i++){",
          "2001:               if( zSql[i]==c ){",
          "2002:                 if( zSql[i+1]!=c ) break;",
          "2003:                 i++;",
          "2004:               }",
          "2005:             }",
          "2006:           }else if( c=='[' ){",
          "2007:             for(i++; 1; i++){",
          "2008:               if( zSql[i]==']' ) break;",
          "2009:             }",
          "2010:           }",
          "2011:         }",
          "2012:         if( zSql[i] ){",
          "2013:           zRet = rbuStrndup(&zSql[i], &rc);",
          "2014:         }",
          "2015:       }",
          "2016:     }",
          "2018:     rc2 = sqlite3_finalize(pStmt);",
          "2019:     if( rc==SQLITE_OK ) rc = rc2;",
          "2020:   }",
          "2022:   p->rc = rc;",
          "2023:   return zRet;",
          "2024: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1989:       char *zBind = 0;",
          "1990:       int nBind = 0;",
          "1992:       assert( pIter->eType!=RBU_PK_VTAB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2055:       char *zPart = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1994:           p, pIter, &zImposterCols, &zImposterPK, &zWhere, &nBind",
          "1995:       );",
          "1996:       zBind = rbuObjIterGetBindlist(p, nBind);",
          "1999:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->dbMain, \"main\", 0, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2063:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2026:         char *zSql;",
          "2027:         if( rbuIsVacuum(p) ){",
          "2028:           zSql = sqlite3_mprintf(",
          "2030:               zCollist,",
          "2031:               pIter->zDataTbl,",
          "2033:           );",
          "2034:         }else",
          "2036:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "2037:           zSql = sqlite3_mprintf(",
          "2039:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "2041:           );",
          "2042:         }else{",
          "2043:           zSql = sqlite3_mprintf(",
          "2045:               \"UNION ALL \"",
          "2046:               \"SELECT %s, rbu_control FROM '%q' \"",
          "2048:               \"ORDER BY %s%s\",",
          "2050:               zCollist, pIter->zDataTbl,",
          "2051:               zCollist, zLimit",
          "2052:           );",
          "2053:         }",
          "",
          "[Removed Lines]",
          "2029:               \"SELECT %s, 0 AS rbu_control FROM '%q' ORDER BY %s%s\",",
          "2032:               zCollist, zLimit",
          "2038:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' ORDER BY %s%s\",",
          "2040:               zCollist, zLimit",
          "2044:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' \"",
          "2047:               \"WHERE typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2049:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "",
          "[Added Lines]",
          "2096:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2099:               zPart, zCollist, zLimit",
          "2105:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s ORDER BY %s%s\",",
          "2107:               zPart, zCollist, zLimit",
          "2111:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s \"",
          "2114:               \"%s %s typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2116:               zCollist, p->zStateDb, pIter->zDataTbl, zPart,",
          "2118:               zPart,",
          "2119:               (zPart ? \"AND\" : \"WHERE\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2058:       sqlite3_free(zImposterPK);",
          "2059:       sqlite3_free(zWhere);",
          "2060:       sqlite3_free(zBind);",
          "2061:     }else{",
          "2062:       int bRbuRowid = (pIter->eType==RBU_PK_VTAB)",
          "2063:                     ||(pIter->eType==RBU_PK_NONE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2130:       sqlite3_free(zPart);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f294cfc173c5653ef161dbff63b7838dbccdcad797f5163c49b3173f9f35ab0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62742fd2647ccd6a5cd2f899db70b6062f671c33",
      "candidate_info": {
        "commit_hash": "62742fd2647ccd6a5cd2f899db70b6062f671c33",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62742fd2647ccd6a5cd2f899db70b6062f671c33",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Ensure collation sequences and affinities work in window function queries. Fix for [9ece23d2].\n\nFossilOrigin-Name: 28196d894ac9fad9d8f877c7bf17ec9d299d12acdcc942f9ea0783777b14fdc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3dec427e399064eeec31c15565346f045bd7c46d2f7860b1cd346bbcccb124",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2096:   if( pTab==0 ){",
          "2097:     return 0;",
          "2098:   }",
          "2102:   pTab->nTabRef = 1;",
          "2103:   pTab->zName = 0;",
          "2104:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "",
          "[Removed Lines]",
          "2101:   assert( db->lookaside.bDisable );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:   Window *pWin;",
          "737:   SrcList *pSrc;",
          "738:   ExprList *pSub;",
          "740: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:   Table *pTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "796:         pExpr->op = TK_COLUMN;",
          "797:         pExpr->iColumn = p->pSub->nExpr-1;",
          "798:         pExpr->iTable = p->pWin->iEphCsr;",
          "799:       }",
          "801:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:         pExpr->y.pTab = p->pTab;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "839:   Window *pWin,",
          "840:   SrcList *pSrc,",
          "843: ){",
          "844:   Walker sWalker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:   Table *pTab,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "850:   sRewrite.pSub = *ppSub;",
          "851:   sRewrite.pWin = pWin;",
          "852:   sRewrite.pSrc = pSrc;",
          "854:   sWalker.pParse = pParse;",
          "855:   sWalker.xExprCallback = selectWindowRewriteExprCb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:   sRewrite.pTab = pTab;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "913:     p->pSrc = 0;",
          "914:     p->pWhere = 0;",
          "915:     p->pGroupBy = 0;",
          "916:     p->pHaving = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:     Table *pTab;",
          "918:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
          "919:     if( pTab==0 ){",
          "920:       return SQLITE_NOMEM;",
          "921:     }",
          "927:     p->selFlags &= ~SF_Aggregate;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "933:     pMWin->iEphCsr = pParse->nTab++;",
          "934:     pParse->nTab += 3;",
          "938:     pMWin->nBufferCol = (pSublist ? pSublist->nExpr : 0);",
          "",
          "[Removed Lines]",
          "936:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, &pSublist);",
          "937:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, &pSublist);",
          "",
          "[Added Lines]",
          "947:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, pTab, &pSublist);",
          "948:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, pTab, &pSublist);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "976:     );",
          "977:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "978:     if( p->pSrc ){",
          "979:       p->pSrc->a[0].pSelect = pSub;",
          "980:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "982:         rc = SQLITE_NOMEM;",
          "983:       }else{",
          "987:       }",
          "989:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, pSublist->nExpr);",
          "990:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "991:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "",
          "[Removed Lines]",
          "981:       if( sqlite3ExpandSubquery(pParse, &p->pSrc->a[0]) ){",
          "984:         pSub->selFlags |= SF_Expanded;",
          "985:         p->selFlags &= ~SF_Aggregate;",
          "986:         sqlite3SelectPrep(pParse, pSub, 0);",
          "",
          "[Added Lines]",
          "990:       Table *pTab2;",
          "993:       pSub->selFlags |= SF_Expanded;",
          "994:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "995:       if( pTab2==0 ){",
          "998:         memcpy(pTab, pTab2, sizeof(Table));",
          "999:         pTab->tabFlags |= TF_Ephemeral;",
          "1000:         p->pSrc->a[0].pTab = pTab;",
          "1001:         pTab = pTab2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "994:       sqlite3SelectDelete(db, pSub);",
          "995:     }",
          "996:     if( db->mallocFailed ) rc = SQLITE_NOMEM;",
          "997:   }",
          "999:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:     sqlite3DbFree(db, pTab);",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 June 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix window9",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE fruits(",
          "25:      name TEXT COLLATE NOCASE,",
          "26:      color TEXT COLLATE NOCASE",
          "27:   );",
          "28: }",
          "30: do_execsql_test 1.1 {",
          "31:   INSERT INTO fruits (name, color) VALUES ('apple', 'RED');",
          "32:   INSERT INTO fruits (name, color) VALUES ('APPLE', 'yellow');",
          "33:   INSERT INTO fruits (name, color) VALUES ('pear', 'YELLOW');",
          "34:   INSERT INTO fruits (name, color) VALUES ('PEAR', 'green');",
          "35: }",
          "37: do_execsql_test 1.2 {",
          "38:   SELECT name, color, dense_rank() OVER (ORDER BY name) FROM fruits;",
          "39: } {",
          "40:   apple RED    1",
          "41:   APPLE yellow 1",
          "42:   pear  YELLOW 2",
          "43:   PEAR  green  2",
          "44: }",
          "46: do_execsql_test 1.3 {",
          "47:   SELECT name, color,",
          "48:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "49:   FROM fruits;",
          "50: } {",
          "51:   apple RED    1",
          "52:   APPLE yellow 2",
          "53:   PEAR green   1",
          "54:   pear YELLOW  2",
          "55: }",
          "57: do_execsql_test 1.4 {",
          "58:   SELECT name, color,",
          "59:     dense_rank() OVER (ORDER BY name),",
          "60:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "61:   FROM fruits;",
          "62: } {",
          "63:   apple RED    1 1",
          "64:   APPLE yellow 1 2",
          "65:   PEAR  green  2 1",
          "66:   pear  YELLOW 2 2",
          "67: }",
          "69: do_execsql_test 1.5 {",
          "70:   SELECT name, color,",
          "71:     dense_rank() OVER (ORDER BY name),",
          "72:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "73:   FROM fruits ORDER BY color;",
          "74: } {",
          "75:   PEAR  green  2 1",
          "76:   apple RED    1 1",
          "77:   APPLE yellow 1 2",
          "78:   pear  YELLOW 2 2",
          "79: }",
          "81: do_execsql_test 2.0 {",
          "82:   CREATE TABLE t1(a BLOB, b INTEGER, c COLLATE nocase);",
          "83:   INSERT INTO t1 VALUES(1, 2, 'abc');",
          "84:   INSERT INTO t1 VALUES(3, 4, 'ABC');",
          "85: }",
          "87: do_execsql_test 2.1.1 {",
          "88:   SELECT c=='Abc' FROM t1",
          "89: } {1     1}",
          "90: do_execsql_test 2.1.2 {",
          "91:   SELECT c=='Abc', rank() OVER (ORDER BY b) FROM t1",
          "92: } {1 1   1 2}",
          "94: do_execsql_test 2.2.1 {",
          "95:   SELECT b=='2' FROM t1",
          "96: } {1     0}",
          "97: do_execsql_test 2.2.2 {",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e427337fe5df62439b980e2e091a89b36001d79",
      "candidate_info": {
        "commit_hash": "7e427337fe5df62439b980e2e091a89b36001d79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e427337fe5df62439b980e2e091a89b36001d79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Faster and smaller implementation of sqlite3StrICmp().\n\nFossilOrigin-Name: 7ac500fb5abfe1ad60f2ffdcc8fbe5ccc1c641bbeed53f00940e9ff78788e53d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322: }",
          "323: int sqlite3StrICmp(const char *zLeft, const char *zRight){",
          "324:   unsigned char *a, *b;",
          "326:   a = (unsigned char *)zLeft;",
          "327:   b = (unsigned char *)zRight;",
          "328:   for(;;){",
          "331:     a++;",
          "332:     b++;",
          "333:   }",
          "",
          "[Removed Lines]",
          "325:   int c;",
          "329:     c = (int)UpperToLower[*a] - (int)UpperToLower[*b];",
          "330:     if( c || *a==0 ) break;",
          "",
          "[Added Lines]",
          "325:   int c, x;",
          "329:     c = *a;",
          "330:     x = *b;",
          "331:     if( c==x ){",
          "332:       if( c==0 ) break;",
          "333:     }else{",
          "334:       c = (int)UpperToLower[c] - (int)UpperToLower[x];",
          "335:       if( c ) break;",
          "336:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}