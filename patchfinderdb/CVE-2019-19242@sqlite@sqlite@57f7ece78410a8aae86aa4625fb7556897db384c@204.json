{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2566c4132bc85ec7a11bd2ce0bf012e24817cee",
      "candidate_info": {
        "commit_hash": "f2566c4132bc85ec7a11bd2ce0bf012e24817cee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2566c4132bc85ec7a11bd2ce0bf012e24817cee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Improved comments on the elements of the array constant used to implement the sqlite3_value_type() interface.\n\nFossilOrigin-Name: f73a7de7a53f6aa6517221550a9c9882893206edfd7433e80e5fc0f441db9fc4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dba836e31cb29d339b4520acb06188a892a52e45c50aba9742966b01108e251a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c"
        ]
      }
    },
    {
      "candidate_hash": "b8a8d523cbfa1371e35a4e5d1fc4727128e74ead",
      "candidate_info": {
        "commit_hash": "b8a8d523cbfa1371e35a4e5d1fc4727128e74ead",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b8a8d523cbfa1371e35a4e5d1fc4727128e74ead",
        "files": [
          "ext/rbu/rbuprogress.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with RBU function sqlite3rbu_bp_progress() when used during an RBU vacuum.\n\nFossilOrigin-Name: 8c44b02f1479cec61554800702a3c1d806e4ee64b41ba2af17320f62794a02fe",
        "before_after_code_files": [
          "ext/rbu/rbuprogress.test||ext/rbu/rbuprogress.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuprogress.test||ext/rbu/rbuprogress.test": [
          "File: ext/rbu/rbuprogress.test -> ext/rbu/rbuprogress.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:   }",
          "415: }",
          "418: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417: #-------------------------------------------------------------------------",
          "418: # Test that sqlite3_bp_progress() works with an RBU vacuum if there",
          "419: # is an rbu_count table in the db being vacuumed.",
          "420: #",
          "421: reset_db",
          "422: do_execsql_test 6.0 {",
          "423:   CREATE TABLE t1(a, b, c);",
          "424:   CREATE INDEX i1 ON t1(a);",
          "425:   CREATE INDEX i2 ON t1(b);",
          "426:   WITH s(i) AS (",
          "427:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<100",
          "428:   )",
          "429:   INSERT INTO t1 SELECT i, i, i FROM s;",
          "430:   CREATE TABLE rbu_count(tbl TEXT PRIMARY KEY, cnt INTEGER) WITHOUT ROWID;",
          "431:   INSERT INTO rbu_count VALUES('t1', (SELECT count(*) FROM t1));",
          "432:   INSERT INTO rbu_count VALUES('rbu_count', 2);",
          "433: }",
          "435: forcedelete state.db",
          "436: do_test 6.1 {",
          "437:   set maxA 0",
          "438:   set maxB 0",
          "439:   sqlite3rbu_vacuum rbu test.db state.db",
          "440:   while {[rbu step]==\"SQLITE_OK\"} {",
          "441:     foreach {a b} [rbu bp_progress] {",
          "442:       if {$a > $maxA} { set maxA $a }",
          "443:       if {$b > $maxB} { set maxB $b }",
          "444:     }",
          "445:   }",
          "446:   list [rbu close] $maxA $maxB",
          "447: } {SQLITE_DONE 10000 10000}",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:   zIn = (const char*)sqlite3_value_text(argv[0]);",
          "945:   if( zIn ){",
          "946:     if( rbuIsVacuum(p) ){",
          "949:         sqlite3_result_text(pCtx, zIn, -1, SQLITE_STATIC);",
          "950:       }",
          "951:     }else{",
          "",
          "[Removed Lines]",
          "947:       assert( argc==2 );",
          "948:       if( 0==sqlite3_value_int(argv[1]) ){",
          "",
          "[Added Lines]",
          "947:       assert( argc==2 || argc==1 );",
          "948:       if( argc==1 || 0==sqlite3_value_int(argv[1]) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3860:   sqlite3_stmt *pStmt = 0;",
          "3861:   char *zErrmsg = 0;",
          "3862:   int rc;",
          "3864:   assert( nVal==1 );",
          "3867:       sqlite3_mprintf(\"SELECT count(*) FROM sqlite_master \"",
          "3868:         \"WHERE type='index' AND tbl_name = %Q\", sqlite3_value_text(apVal[0]))",
          "3869:   );",
          "",
          "[Removed Lines]",
          "3866:   rc = prepareFreeAndCollectError(p->dbMain, &pStmt, &zErrmsg,",
          "",
          "[Added Lines]",
          "3863:   sqlite3 *db = (rbuIsVacuum(p) ? p->dbRbu : p->dbMain);",
          "3867:   rc = prepareFreeAndCollectError(db, &pStmt, &zErrmsg,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3878:     if( rc==SQLITE_OK ){",
          "3879:       sqlite3_result_int(pCtx, nIndex);",
          "3880:     }else{",
          "3882:     }",
          "3883:   }",
          "",
          "[Removed Lines]",
          "3881:       sqlite3_result_error(pCtx, sqlite3_errmsg(p->dbMain), -1);",
          "",
          "[Added Lines]",
          "3882:       sqlite3_result_error(pCtx, sqlite3_errmsg(db), -1);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7dae7b969ed314605a3a2da2cfdce4d81152740f5d3bfbc2a6e311b13ee325a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec9b2a132b7bd9d8e8d4890161d7ddbc79877729",
      "candidate_info": {
        "commit_hash": "ec9b2a132b7bd9d8e8d4890161d7ddbc79877729",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec9b2a132b7bd9d8e8d4890161d7ddbc79877729",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Call ioctl() with the correct signature on both Android and stock Linux.\n\nFossilOrigin-Name: 68e12e063fe41bcd65cf8a120f838b9b1723ed803ea85240fe0f2145b78df2d7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0fff105a3e501fd91877d67761459eb0323e6cf79916242027cce0d05697f554",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521: #if defined(__linux__) && defined(SQLITE_ENABLE_BATCH_ATOMIC_WRITE)",
          "522: # ifdef __ANDROID__",
          "523:   { \"ioctl\", (sqlite3_syscall_ptr)(int(*)(int, int, ...))ioctl, 0 },",
          "524: # else",
          "525:   { \"ioctl\",         (sqlite3_syscall_ptr)ioctl,          0 },",
          "526: # endif",
          "527: #else",
          "528:   { \"ioctl\",         (sqlite3_syscall_ptr)0,              0 },",
          "529: #endif",
          "",
          "[Removed Lines]",
          "530: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "",
          "[Added Lines]",
          "524: #define osIoctl ((int(*)(int,int,...))aSyscall[28].pCurrent)",
          "527: #define osIoctl ((int(*)(int,unsigned long,...))aSyscall[28].pCurrent)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49b0572302bd0117210dff47021077b72e8829a9",
      "candidate_info": {
        "commit_hash": "49b0572302bd0117210dff47021077b72e8829a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/49b0572302bd0117210dff47021077b72e8829a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/msvc.h"
        ],
        "message": "Fix for 8-byte alignment asserts that can trigger in some circumstances with 32-bit MSVC.\n\nFossilOrigin-Name: 4c02832e0c4351ced9d2391f09ee071c65a74b85a0509bf58f045afeb166f48c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/msvc.h||src/msvc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 930842470da27d72650033ef2c1df413e70f7c40eb46f91027b35f5ee156af38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/msvc.h||src/msvc.h": [
          "File: src/msvc.h -> src/msvc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #pragma warning(disable : 4706)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #if !defined(_WIN64)",
          "37: #undef SQLITE_4_BYTE_ALIGNED_MALLOC",
          "38: #define SQLITE_4_BYTE_ALIGNED_MALLOC",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
      "candidate_info": {
        "commit_hash": "af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af5a2e166dfce85cfa195a9e48b2786b9a9e51b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improvements to the help text in the CLI.\n\nFossilOrigin-Name: 919fec91dac4cb0d5f67404d4f47a65f353d752f5da0aa7b071bf3caf19e0522",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f11c89595dc65f89be6df62830c8cddd3933acfd4baaecd348ecd99e71db5831",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3452:   \".archive ...             Manage SQL archives\",",
          "3453:   \"   Each command must have exactly one of the following options:\",",
          "3454:   \"     -c, --create               Create a new archive\",",
          "3456:   \"     -i, --insert               Like -u but always add even if mtime unchanged\",",
          "3457:   \"     -t, --list                 List contents of archive\",",
          "3458:   \"     -x, --extract              Extract files from archive\",",
          "",
          "[Removed Lines]",
          "3455:   \"     -u, --update               Add files or update files with newer mtime\",",
          "",
          "[Added Lines]",
          "3455:   \"     -u, --update               Add files or update files with changed mtime\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}