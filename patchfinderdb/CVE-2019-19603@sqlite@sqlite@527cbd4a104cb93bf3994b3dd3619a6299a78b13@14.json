{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
      "candidate_info": {
        "commit_hash": "d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereInt.h",
          "tool/lemon.c"
        ],
        "message": "Fix some harmless compiler warnings.\n\nFossilOrigin-Name: ca068d82387fc3cda9d2050cedb4f9c61b6d9dc54f89015b4b2ee492243ed5c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereInt.h||src/whereInt.h",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6d5fee8cdbdce8515957e8288e4d1e7b06f417fd3f9deeeb636fbf5b995af51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #ifndef SQLITE_WHEREINT_H",
          "18: #define SQLITE_WHEREINT_H",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: static struct action *Action_new(void){",
          "487:   struct action *newaction;",
          "490:     int i;",
          "491:     int amt = 100;",
          "494:       fprintf(stderr,\"Unable to allocate memory for a new parser action.\");",
          "495:       exit(1);",
          "496:     }",
          "499:   }",
          "502:   return newaction;",
          "503: }",
          "",
          "[Removed Lines]",
          "486:   static struct action *freelist = 0;",
          "489:   if( freelist==0 ){",
          "492:     freelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( freelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) freelist[i].next = &freelist[i+1];",
          "498:     freelist[amt-1].next = 0;",
          "500:   newaction = freelist;",
          "501:   freelist = freelist->next;",
          "",
          "[Added Lines]",
          "486:   static struct action *actionfreelist = 0;",
          "489:   if( actionfreelist==0 ){",
          "492:     actionfreelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( actionfreelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) actionfreelist[i].next = &actionfreelist[i+1];",
          "498:     actionfreelist[amt-1].next = 0;",
          "500:   newaction = actionfreelist;",
          "501:   actionfreelist = actionfreelist->next;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1907:   return ep;",
          "1908: }",
          "1911: static struct s_options *op;",
          "1912: static FILE *errstream;",
          "",
          "[Removed Lines]",
          "1910: static char **argv;",
          "",
          "[Added Lines]",
          "1910: static char **g_argv;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1920: static void errline(int n, int k, FILE *err)",
          "1921: {",
          "1922:   int spcnt, i;",
          "1928:   }",
          "1929:   spcnt += k;",
          "1931:   if( spcnt<20 ){",
          "1932:     fprintf(err,\"\\n%*s^-- here\\n\",spcnt,\"\");",
          "1933:   }else{",
          "",
          "[Removed Lines]",
          "1923:   if( argv[0] ) fprintf(err,\"%s\",argv[0]);",
          "1924:   spcnt = lemonStrlen(argv[0]) + 1;",
          "1925:   for(i=1; i<n && argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",argv[i]);",
          "1927:     spcnt += lemonStrlen(argv[i])+1;",
          "1930:   for(; argv[i]; i++) fprintf(err,\" %s\",argv[i]);",
          "",
          "[Added Lines]",
          "1923:   if( g_argv[0] ) fprintf(err,\"%s\",g_argv[0]);",
          "1924:   spcnt = lemonStrlen(g_argv[0]) + 1;",
          "1925:   for(i=1; i<n && g_argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",g_argv[i]);",
          "1927:     spcnt += lemonStrlen(g_argv[i])+1;",
          "1930:   for(; g_argv[i]; i++) fprintf(err,\" %s\",g_argv[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1943: {",
          "1944:   int i;",
          "1945:   int dashdash = 0;",
          "1949:         if( n==0 ) return i;",
          "1950:         n--;",
          "1951:       }",
          "1953:     }",
          "1954:   }",
          "1955:   return -1;",
          "",
          "[Removed Lines]",
          "1946:   if( argv!=0 && *argv!=0 ){",
          "1947:     for(i=1; argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(argv[i]) ){",
          "1952:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "1946:   if( g_argv!=0 && *g_argv!=0 ){",
          "1947:     for(i=1; g_argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(g_argv[i]) ){",
          "1952:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1966:   int errcnt = 0;",
          "1967:   int j;",
          "1968:   for(j=0; op[j].label; j++){",
          "1970:   }",
          "1972:   if( op[j].label==0 ){",
          "1973:     if( err ){",
          "1974:       fprintf(err,\"%sundefined option.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1969:     if( strncmp(&argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = argv[i][0]=='-' ? 1 : 0;",
          "",
          "[Added Lines]",
          "1969:     if( strncmp(&g_argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = g_argv[i][0]=='-' ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1982:   }else if( op[j].type==OPT_FFLAG ){",
          "1983:     (*(void(*)(int))(op[j].arg))(v);",
          "1984:   }else if( op[j].type==OPT_FSTR ){",
          "1986:   }else{",
          "1987:     if( err ){",
          "1988:       fprintf(err,\"%smissing argument on switch.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&argv[i][2]);",
          "",
          "[Added Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&g_argv[i][2]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2004:   char *cp;",
          "2005:   int j;",
          "2006:   int errcnt = 0;",
          "2008:   assert( cp!=0 );",
          "2010:   for(j=0; op[j].label; j++){",
          "2012:   }",
          "2014:   if( op[j].label==0 ){",
          "",
          "[Removed Lines]",
          "2007:   cp = strchr(argv[i],'=');",
          "2011:     if( strcmp(argv[i],op[j].label)==0 ) break;",
          "",
          "[Added Lines]",
          "2007:   cp = strchr(g_argv[i],'=');",
          "2011:     if( strcmp(g_argv[i],op[j].label)==0 ) break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2035:           if( err ){",
          "2036:             fprintf(err,",
          "2037:                \"%sillegal character in floating-point argument.\\n\",emsg);",
          "2039:           }",
          "2040:           errcnt++;",
          "2041:         }",
          "",
          "[Removed Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2046:         if( *end ){",
          "2047:           if( err ){",
          "2048:             fprintf(err,\"%sillegal character in integer argument.\\n\",emsg);",
          "2050:           }",
          "2051:           errcnt++;",
          "2052:         }",
          "",
          "[Removed Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2086: int OptInit(char **a, struct s_options *o, FILE *err)",
          "2087: {",
          "2088:   int errcnt = 0;",
          "2090:   op = o;",
          "2091:   errstream = err;",
          "2093:     int i;",
          "2096:         errcnt += handleflags(i,err);",
          "2098:         errcnt += handleswitch(i,err);",
          "2099:       }",
          "2100:     }",
          "",
          "[Removed Lines]",
          "2089:   argv = a;",
          "2092:   if( argv && *argv && op ){",
          "2094:     for(i=1; argv[i]; i++){",
          "2095:       if( argv[i][0]=='+' || argv[i][0]=='-' ){",
          "2097:       }else if( strchr(argv[i],'=') ){",
          "",
          "[Added Lines]",
          "2089:   g_argv = a;",
          "2092:   if( g_argv && *g_argv && op ){",
          "2094:     for(i=1; g_argv[i]; i++){",
          "2095:       if( g_argv[i][0]=='+' || g_argv[i][0]=='-' ){",
          "2097:       }else if( strchr(g_argv[i],'=') ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2111:   int cnt = 0;",
          "2112:   int dashdash = 0;",
          "2113:   int i;",
          "2118:     }",
          "2119:   }",
          "2120:   return cnt;",
          "",
          "[Removed Lines]",
          "2114:   if( argv!=0 && argv[0]!=0 ){",
          "2115:     for(i=1; argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(argv[i]) ) cnt++;",
          "2117:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "2114:   if( g_argv!=0 && g_argv[0]!=0 ){",
          "2115:     for(i=1; g_argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(g_argv[i]) ) cnt++;",
          "2117:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2124: {",
          "2125:   int i;",
          "2126:   i = argindex(n);",
          "2128: }",
          "2130: void OptErr(int n)",
          "",
          "[Removed Lines]",
          "2127:   return i>=0 ? argv[i] : 0;",
          "",
          "[Added Lines]",
          "2127:   return i>=0 ? g_argv[i] : 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2728:     case WAITING_FOR_CLASS_ID:",
          "2729:       if( !ISLOWER(x[0]) ){",
          "2730:         ErrorMsg(psp->filename, psp->tokenlineno,",
          "2732:         psp->errorcnt++;",
          "2733:         psp->state = RESYNC_AFTER_DECL_ERROR;",
          "2734:      }else if( Symbol_find(x) ){",
          "",
          "[Removed Lines]",
          "2731:           \"%%token_class must be followed by an identifier: \", x);",
          "",
          "[Added Lines]",
          "2731:           \"%%token_class must be followed by an identifier: %s\", x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b454e0335cbe14bc96b460ff3695007185fbb6e",
      "candidate_info": {
        "commit_hash": "2b454e0335cbe14bc96b460ff3695007185fbb6e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b454e0335cbe14bc96b460ff3695007185fbb6e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c"
        ],
        "message": "Fix a harmless compiler warning that only comes up during debug builds.\n\nFossilOrigin-Name: 848869ced988ca4d0ac76d43f984360fd11997a580719cccf8d55becea4e8fb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35cbee7fe4a0b7ca06206ca2f69fc35abe3de4929070d6585ab765af82027438",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564: #ifdef sqlite3Parser_ENGINEALWAYSONSTACK",
          "566: #endif",
          "568:   assert( zSql!=0 );",
          "569:   mxSqlLen = db->aLimit[SQLITE_LIMIT_SQL_LENGTH];",
          "",
          "[Removed Lines]",
          "563:   VVA_ONLY( u8 startedWithOom = db->mallocFailed );",
          "",
          "[Added Lines]",
          "566:   VVA_ONLY( u8 startedWithOom = db->mallocFailed );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b33487b0b6df3b669ba76d386b3a42c75fd904af",
      "candidate_info": {
        "commit_hash": "b33487b0b6df3b669ba76d386b3a42c75fd904af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b33487b0b6df3b669ba76d386b3a42c75fd904af",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window4.tcl"
        ],
        "message": "Improvements to the way built-in window functions are handled.\n\nFossilOrigin-Name: e8eee566dfca6f4c8af074731dfe91f7fbcd9ca72f0303235b52e4e2e80d5b71",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window4.tcl||test/window4.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af0ea1363548461b2aad8fd54ee3f2f616111dcae2d6480f5294da44c87a0a5d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3581:   int regFirst;",
          "3582: };",
          "3584: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3582:   int regSize;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1093:   pMWin->regFirst = ++pParse->nMem;",
          "1094:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1096:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1097:     FuncDef *p = pWin->pFunc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1095:   pMWin->regSize = ++pParse->nMem;",
          "1096:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1841:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1842: }",
          "1844: static void windowCodeStep(",
          "1845:   Parse *pParse,",
          "1846:   Select *p,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1850: static int windowCachePartition(Window *pMWin){",
          "1851:   Window *pWin;",
          "1852:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1853:     FuncDef *pFunc = pWin->pFunc;",
          "1854:     if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "1855:      || (pFunc->zName==nth_valueName)",
          "1856:      || (pFunc->zName==first_valueName)",
          "1857:      || (pFunc->zName==leadName)",
          "1858:      || (pFunc->zName==lagName)",
          "1859:     ){",
          "1860:       return 1;",
          "1861:     }",
          "1862:   }",
          "1863:   return 0;",
          "1864: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1871:   int addrIfStart;",
          "1872:   int addrGosubFlush;",
          "1873:   int addrInteger;",
          "1875:   int addrShortcut = 0;",
          "1877:   int reg = pParse->nMem+1;",
          "1878:   int regRecord = reg+nSub;",
          "1879:   int regRowid = regRecord+1;",
          "1881:   pParse->nMem += 1 + nSub + 1;",
          "1883:   regFlushPart = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1896:   int addrCacheRewind;",
          "1897:   int addrCacheNext;",
          "1901:   int bCache = windowCachePartition(pMWin);",
          "1907:   bCache = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1914:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1915:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1916:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1918:     VdbeCoverageEqNe(v);",
          "1919:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1920:     VdbeComment((v, \"call flush_partition\"));",
          "1921:     sqlite3VdbeJumpHere(v, addrIf);",
          "1922:   }",
          "1925:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "1926:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "1934:   }",
          "1936:   regArg = windowInitAccum(pParse, pMWin);",
          "1938:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "",
          "[Removed Lines]",
          "1917:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+3, addr+2);",
          "1929:   addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "1930:   if( pMWin->pPartition ){",
          "1931:     sqlite3VdbeAddOp3(v, OP_Copy,",
          "1932:         reg+pMWin->nBufferCol, pMWin->regPart, pMWin->pPartition->nExpr-1",
          "1933:     );",
          "",
          "[Added Lines]",
          "1950:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "1955:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPart, pMWin->regPart, nPart-1);",
          "1961:   sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regSize, 1);",
          "1963:   if( bCache ){",
          "1964:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1965:     sqlite3WhereEnd(pWInfo);",
          "1966:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "1967:     if( pMWin->pPartition ){",
          "1968:       sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "1969:     }",
          "1970:     addrCacheRewind = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "1971:   }else{",
          "1972:     addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1944:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1945:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "1946:     windowAggFinal(pParse, pMWin, 0);",
          "1950:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1951:     sqlite3VdbeJumpHere(v, addrGe);",
          "1952:   }",
          "",
          "[Removed Lines]",
          "1947:     sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "1948:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1949:     sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "",
          "[Added Lines]",
          "1987:     if( bCache ){",
          "1988:       sqlite3VdbeAddOp2(v, OP_Rowid, csrWrite, regRowid);",
          "1989:       sqlite3VdbeAddOp3(v, OP_NotExists, csrCurrent, 0, regRowid);",
          "1990:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1991:       sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheRewind+1);",
          "1992:     }else{",
          "1993:       sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "1994:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1995:       sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1996:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1962:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1967:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1968:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "",
          "[Removed Lines]",
          "1965:   sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "2012:   if( bCache ){",
          "2013:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "2014:   }else{",
          "2015:     sqlite3VdbeJumpHere(v, addrIf);",
          "2016:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1974:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1975:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1977:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1978:   }else",
          "1979:   if( pMWin->eEnd==TK_PRECEDING ){",
          "1980:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1981:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1983:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1985:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Removed Lines]",
          "1976:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1982:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "",
          "[Added Lines]",
          "2027:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "2033:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1989:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1990:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1992:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1993:   }else{",
          "1994:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "",
          "[Removed Lines]",
          "1991:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2042:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1997:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1998:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1999:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2001:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2002:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2003:   }",
          "",
          "[Removed Lines]",
          "2000:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2051:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2005:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2006:   if( pMWin->eEnd!=TK_PRECEDING ){",
          "2007:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2009:   }",
          "2018:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2019:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2020:   }",
          "",
          "[Removed Lines]",
          "2008:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "2012:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2013:   sqlite3WhereEnd(pWInfo);",
          "2017:   if( pMWin->pPartition ){",
          "",
          "[Added Lines]",
          "2059:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "2063:   if( bCache ){",
          "2064:     sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheNext);",
          "2065:     sqlite3VdbeJumpHere(v, addrCacheRewind);",
          "2066:   }else{",
          "2067:     if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2068:     sqlite3WhereEnd(pWInfo);",
          "2069:   }",
          "2073:   if( pMWin->pPartition && bCache==0 ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2031:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2032:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "2033:     sqlite3VdbeAddOp0(v, OP_Goto);",
          "2035:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2036:     sqlite3VdbeJumpHere(v, addrIfStart+2);",
          "",
          "[Removed Lines]",
          "2034:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2090:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2043:     if( pMWin->eEnd==TK_PRECEDING ){",
          "2044:       addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2045:       sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2047:       sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2048:       windowAggFinal(pParse, pMWin, 0);",
          "2049:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "2046:       windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "",
          "[Added Lines]",
          "2102:       windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2052:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2053:       addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2054:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2056:       sqlite3VdbeJumpHere(v, addrIfStart);",
          "2057:       sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "2058:     }",
          "",
          "[Removed Lines]",
          "2055:       windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2111:       windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2060:   }",
          "2063:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "2065:   if( pMWin->pPartition ){",
          "2066:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2067:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2064:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "[Added Lines]",
          "2119:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2121:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2122:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2530:   if( pMWin->eType==TK_ROWS",
          "2531:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2532:   ){",
          "2550:     ){",
          "2551:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2552:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "2533:     Window *pWin;",
          "2535:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "2536:       FuncDef *pFunc = pWin->pFunc;",
          "2537:       if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "2538:         || (pFunc->zName==nth_valueName)",
          "2539:         || (pFunc->zName==first_valueName)",
          "2540:         || (pFunc->zName==leadName)",
          "2541:         || (pFunc->zName==lagName)",
          "2542:       ){",
          "2543:         bCache = 1;",
          "2544:         break;",
          "2545:       }",
          "2546:     }",
          "2547:     if( bCache",
          "2548:     || (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2549:     || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "",
          "[Added Lines]",
          "2591:     if( (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2592:      || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "",
          "---------------"
        ],
        "test/window4.tcl||test/window4.tcl": [
          "File: test/window4.tcl -> test/window4.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2018 May 19",
          "",
          "[Added Lines]",
          "1: ## 2018 May 19",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90294961da64434c4fbb495567b39bf560b9531b",
      "candidate_info": {
        "commit_hash": "90294961da64434c4fbb495567b39bf560b9531b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/90294961da64434c4fbb495567b39bf560b9531b",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a segfault in fts3 prompted by a corrupted database.\n\nFossilOrigin-Name: 2d7b1d1d41ff69d5465fcb861420816ecb066c25a9015eefdab5fae15a2e1c9f",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2903:         sqlite3_int64 *pi = (isPrefix ? &iLeavesEndBlock : 0);",
          "2904:         rc = fts3SelectLeaf(p, zTerm, nTerm, zRoot, nRoot, &iStartBlock, pi);",
          "2905:         if( rc!=SQLITE_OK ) goto finished;",
          "",
          "[Removed Lines]",
          "2902:       if( iStartBlock && zTerm ){",
          "",
          "[Added Lines]",
          "2902:       if( iStartBlock && zTerm && zRoot ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bf811ea89a133d481a86407683a7518e909eccb7aa3aa02f7932bdb33387572",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "250: } {1 {malformed database schema (sqlite_autoindey_t1_segdir_1) - orphan index}}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #-------------------------------------------------------------------------",
          "254: reset_db",
          "255: do_execsql_test 6.0 {",
          "256:   CREATE VIRTUAL TABLE Table0 USING fts3();",
          "257:   INSERT INTO Table0_segdir VALUES(1,NULL,1,NULL,NULL,NULL);",
          "258: }",
          "260: do_catchsql_test 6.1 {",
          "261:   SELECT * FROM Table0 WHERE Table0 MATCH 'a';",
          "262: } {0 {}}",
          "264: do_catchsql_test 6.2 {",
          "265:   INSERT INTO Table0(Table0) VALUES('optimize');",
          "266: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36c9301816ab0acb23db36517754f66295542e3b",
      "candidate_info": {
        "commit_hash": "36c9301816ab0acb23db36517754f66295542e3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/36c9301816ab0acb23db36517754f66295542e3b",
        "files": [
          "ext/fts5/test/fts5corrupt4.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add new test file fts5corrupt4.test.\n\nFossilOrigin-Name: 5dfc4fe98a4821cbdbfd7dfddf221b00251b2a26bf58767a3956b64e9a4e92da",
        "before_after_code_files": [
          "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5corrupt4.test||ext/fts5/test/fts5corrupt4.test": [
          "File: ext/fts5/test/fts5corrupt4.test -> ext/fts5/test/fts5corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 May 16",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: #",
          "14: source [file join [file dirname [info script]] fts5_common.tcl]",
          "15: set testprefix fts5corrupt4",
          "17: # If SQLITE_ENABLE_FTS5 is defined, omit this file.",
          "18: ifcapable !fts5 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "22: sqlite3_fts5_may_be_corrupt 1",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE ttt USING fts5(a, b);",
          "26:   INSERT INTO ttt",
          "27:      VALUES('e ee eee e ee eee e ee eee', 'eee ee e e e ee eee ee ee');",
          "28:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "29:   INSERT INTO ttt SELECT a||a, b||b FROM ttt;",
          "30: }",
          "32: proc mutate {blob i} {",
          "33:   set o [expr {$i % [string length $blob]}]",
          "34:   set a [string range $blob 0 $o-1]",
          "35:   set b [string range $blob $o+1 end]",
          "36:   set v [expr int(rand()*255) - 127]",
          "37:   return \"$a[binary format c $v]$b\"",
          "38: }",
          "39: db func mutate mutate",
          "41: for {set j 1000} {$j <= 5000} {incr j 1000} {",
          "42:   do_test 1.$j {",
          "43:     for {set i 0} {$i < 1000} {incr i} {",
          "44:       execsql {",
          "45:         BEGIN;",
          "46:           UPDATE ttt_data SET block = mutate(block, $i) WHERE id>10;",
          "47:       }",
          "48:       foreach sql {",
          "49:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e*')}",
          "50:         {SELECT snippet(ttt, -1, '.', '..', '[', ']'), * FROM ttt('e* NOT ee*')}",
          "51:       } {",
          "52:         catch { execsql $sql }",
          "53:       }",
          "54:       execsql ROLLBACK",
          "55:     }",
          "56:   } {}",
          "57: }",
          "59: sqlite3_fts5_may_be_corrupt 0",
          "60: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3dac90728a6a1962da478afe751582ddf8b6d4666548a805564817b21e07a246",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}