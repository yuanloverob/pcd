{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4c4b6507559b78318429ff4c249bd6bd9cf41e4",
      "candidate_info": {
        "commit_hash": "e4c4b6507559b78318429ff4c249bd6bd9cf41e4",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/e4c4b6507559b78318429ff4c249bd6bd9cf41e4",
        "files": [
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiJSON.c",
          "src/jsiSqlite.c",
          "src/jsiUtils.c",
          "tools/mkref.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.6\": add getOpts, JSON stringify format\n\nFossilOrigin-Name: 302024614cdf8b34de0ad9f15ba734b4d0214d3a90102fcce89e4c3bc34f7d46",
        "before_after_code_files": [
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiJSON.c||src/jsiJSON.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/mkref.jsi||tools/mkref.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiJSON.c||src/jsiJSON.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiJSON.c||src/jsiJSON.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:         if (msg)",
          "346:             throw msg;",
          "347:     },",
          "348:     ajax:function(opts) { // Ajax",
          "349:         function none(){};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:     getUrl:function(url, success, error) {",
          "349:         return jsi.ajax({url:url, success:success, error:error});",
          "350:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:         }",
          "468:     },",
          "471:     filesave: function(filename, data, mime) {  $jsig(\"filename:string, data:string, mime='text/html'\", arguments)();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:      getOpts: function(opts, vals, target) {",
          "475:         if (typeof(target) == 'undefined')",
          "476:             target = Object.assign(opts);",
          "477:         else",
          "478:             for (var i in opts)",
          "479:                 if (typeof(target[i]) === 'undefined')",
          "480:                     target[i] = opts[i];",
          "481:         for (var i in vals) {",
          "482:             var ti, tt = gettype(opts[i]);",
          "483:             if (tt == 'undefined')",
          "484:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "485:             else {",
          "486:                 if (opts[i] !== null && tt !== (ti=gettype(vals[i])))",
          "487:                     LogWarn('type mismatch of '+i+': '+tt+'!='+ti);",
          "488:                 target[i] = vals[i];",
          "489:             }",
          "490:         }",
          "491:         return target;",
          "492:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:         if (onload)",
          "508:             f.onload = onload;",
          "509:         if (onerror)",
          "511:         var h = document.querySelector(\"head\");",
          "512:         h.appendChild(f);",
          "513:     },",
          "",
          "[Removed Lines]",
          "510:             f.onload = onerror;",
          "",
          "[Added Lines]",
          "532:             f.onerror = onerror;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:     JSI_OUTPUT_STDERR = 0x8,",
          "200:     JSI_JSON_STATIC_DEFAULT =100,",
          "202:     JSI_STUBS_STRICT  = 0x1, JSI_STUBS_SIG = 0xdeadaa00, JSI_SIG_TYPEDEF,",
          "203:     JSI_SIG_OPTS = 0xdeadab00,",
          "204:     JSI_SIG_OPTS_STRUCT, JSI_SIG_OPTS_ENUM, JSI_SIG_OPTS_VARDEF, JSI_SIG_OPTS_FIELD,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:     JSI_JSON_FORMAT   = 0x200,",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4715: }",
          "4717: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4719: {",
          "4720:     bool nofreeze = interp->subOpts.nofreeze;",
          "4721:     Jsi_TreeEntry *tPtr, *tPtr2;",
          "",
          "[Removed Lines]",
          "4718:     Jsi_Value **ret, Jsi_Func *funcPtr, bool parse)",
          "",
          "[Added Lines]",
          "4718:     Jsi_Value **ret, Jsi_Func *funcPtr, int parse)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4723:     Jsi_RC rc = JSI_OK;",
          "4724:     jsi_Frame *fp = interp->framePtr, *pf = fp->parent;",
          "4725:     Jsi_Func *evfunc = fp->evalFuncPtr;",
          "4732:         return Jsi_LogError(\"arg 1: expected object 'self'\");",
          "4733:     else",
          "4737:         return Jsi_LogError(\"arg 2: expected object 'options'\");",
          "4740:         tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4741:         Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "4742:         if (v==NULL) continue;",
          "4743:         const char *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "4746:     }",
          "4748:         Jsi_TreeSearchDone(&search);",
          "4752:         else {",
          "4754:         }",
          "4755:     }",
          "4759:         else {",
          "4761:         }",
          "4762:     }",
          "4766:             return Jsi_LogError(\"arg 3: expected object|null|undefined\");",
          "4768:         Jsi_Value *oVal;",
          "4769:         int cnt = 0;",
          "4771:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4772:             Jsi_Value *val;",
          "4773:             const char *key;",
          "",
          "[Removed Lines]",
          "4726:     Jsi_Value *v1 = Jsi_ValueArrayIndex(interp, args, (parse?0:1)),",
          "4729:     if (!v1)",
          "4730:         v1 = Jsi_ValueMakeObject(interp, ret,  Jsi_ObjNewType(interp, JSI_OT_OBJECT));",
          "4731:     else if (!Jsi_ValueIsObjType(interp, v1, JSI_OT_OBJECT))",
          "4734:         Jsi_ValueMakeObject(interp, ret, v1->d.obj);",
          "4736:     if (v2 && !Jsi_ValueIsObjType(interp, v2, JSI_OT_OBJECT))",
          "4739:     for (tPtr = (v2?Jsi_TreeSearchFirst(v2->d.obj->tree, &search, 0, NULL):NULL);",
          "4744:         if (!Jsi_ValueObjLookup(interp, v1, key, 1))",
          "4745:             Jsi_ValueInsert(interp, v1, key, v, 0);",
          "4747:     if (v2)",
          "4749:     if (!parse && !v3 && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((v3=pf->arguments))) {",
          "4750:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4751:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4753:             v3 = NULL;",
          "4756:     if (!parse && !v3 && (v3=interp->framePtr->fargs)) {",
          "4757:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4758:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4760:             v3 = NULL;",
          "4764:     if (v3 && !Jsi_ValueIsNull(interp, v3) && !Jsi_ValueIsUndef(interp, v3)) {",
          "4765:         if (!Jsi_ValueIsObjType(interp, v3, JSI_OT_OBJECT))",
          "4770:         for (tPtr = Jsi_TreeSearchFirst(v3->d.obj->tree, &search, 0, NULL);",
          "",
          "[Added Lines]",
          "4729:     enum { VO_OPTS, VO_SELF, VO_CONF};",
          "4730:     int vi[3] = {VO_OPTS, VO_SELF, VO_CONF};",
          "4731:     switch (parse) {",
          "4732:         case 0: break; // moduleOpts",
          "4733:         case 1: vi[VO_CONF]=0; vi[VO_OPTS]=1; break; // parseOpts",
          "4734:         case 2: // modOpts",
          "4735:         case 3: vi[VO_CONF]=1; vi[VO_SELF]=2; break; // getOpts",
          "4736:         default: Jsi_LogBug(\"bad index\");",
          "4737:     }",
          "4738:     Jsi_Value *vopts = Jsi_ValueArrayIndex(interp, args, vi[VO_OPTS]),",
          "4741:     if (!vself)",
          "4742:         vself = Jsi_ValueMakeObject(interp, ret,  Jsi_ObjNewType(interp, JSI_OT_OBJECT));",
          "4743:     else if (!Jsi_ValueIsObjType(interp, vself, JSI_OT_OBJECT))",
          "4746:         Jsi_ValueMakeObject(interp, ret, vself->d.obj);",
          "4748:     if (vopts && !Jsi_ValueIsObjType(interp, vopts, JSI_OT_OBJECT))",
          "4751:     for (tPtr = (vopts?Jsi_TreeSearchFirst(vopts->d.obj->tree, &search, 0, NULL):NULL);",
          "4756:         if (!Jsi_ValueObjLookup(interp, vself, key, 1))",
          "4757:             Jsi_ValueInsert(interp, vself, key, v, 0);",
          "4759:     if (vopts)",
          "4761:     if (!parse && !vconf && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((vconf=pf->arguments))) {",
          "4762:         if (Jsi_ValueIsObjType(interp, vconf, JSI_OT_ARRAY))",
          "4763:             vconf = Jsi_ValueArrayIndex(interp, vconf, 1);",
          "4765:             vconf = NULL;",
          "4768:     if (!parse && !vconf && (vconf=interp->framePtr->fargs)) {",
          "4769:         if (Jsi_ValueIsObjType(interp, vconf, JSI_OT_ARRAY))",
          "4770:             vconf = Jsi_ValueArrayIndex(interp, vconf, 1);",
          "4772:             vconf = NULL;",
          "4776:     if (vconf && !Jsi_ValueIsNull(interp, vconf) && !Jsi_ValueIsUndef(interp, vconf)) {",
          "4777:         if (!Jsi_ValueIsObjType(interp, vconf, JSI_OT_OBJECT))",
          "4782:         for (tPtr = Jsi_TreeSearchFirst(vconf->d.obj->tree, &search, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4780:                 break;",
          "4781:             }",
          "4784:                 int isLong = 1;//Jsi_ValueIsTrue(interp, val);",
          "4785:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = fp->ip->filePtr->fileName;",
          "4786:                 Jsi_TreeSearchDone(&search);",
          "",
          "[Removed Lines]",
          "4783:             if (!parse && cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "",
          "[Added Lines]",
          "4795:             if (!parse && cnt == 1 && !Jsi_Strcmp(key, \"help\") && vconf->d.obj->tree->numEntries==1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4811:                     Jsi_DSPrintf(&dStr, \"\\n%s\\nOptions are:\\n\", help);",
          "4812:                 else",
          "4813:                     Jsi_DSPrintf(&dStr, \"\\n%s.  Options are:\\n    \", help);",
          "4815:                     tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4816:                     Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "4817:                     const char *vstr, *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "",
          "[Removed Lines]",
          "4814:                 for (tPtr = (v2?Jsi_TreeSearchFirst(v2->d.obj->tree, &search, 0, NULL):NULL);",
          "",
          "[Added Lines]",
          "4826:                 for (tPtr = (vopts?Jsi_TreeSearchFirst(vopts->d.obj->tree, &search, 0, NULL):NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4842:             if (!parse && jsi_isDebugKey(key)) {",
          "4843:                 oTyp = JSI_VT_BOOL; // Accept these as builtin options.",
          "4844:                 oVal = NULL;",
          "4846:                 continue;",
          "4848:                 Jsi_TreeSearchDone(&search);",
          "4849:                 Jsi_DString dStr = {};",
          "4850:                 int cnt = 0;",
          "4852:                     tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4853:                     const char *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "4854:                     if (!key) continue;",
          "",
          "[Removed Lines]",
          "4845:             } else if (!v2) {",
          "4847:             } else if (!(tPtr2=Jsi_TreeEntryFind(v2->d.obj->tree, key)) || !(oVal = (Jsi_Value*)Jsi_TreeValueGet(tPtr2))) {",
          "4851:                 for (tPtr = Jsi_TreeSearchFirst(v2->d.obj->tree, &search, 0, NULL);",
          "",
          "[Added Lines]",
          "4857:             } else if (!vopts) {",
          "4859:             } else if (!(tPtr2=Jsi_TreeEntryFind(vopts->d.obj->tree, key)) || !(oVal = (Jsi_Value*)Jsi_TreeValueGet(tPtr2))) {",
          "4863:                 for (tPtr = Jsi_TreeSearchFirst(vopts->d.obj->tree, &search, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4878:                     }",
          "4879:             }",
          "4880:             if (rc == JSI_OK)",
          "4882:         }",
          "4883:         Jsi_TreeSearchDone(&search);",
          "4884:     }",
          "",
          "[Removed Lines]",
          "4881:                 Jsi_ValueInsert(interp, v1, key, val, 0);",
          "",
          "[Added Lines]",
          "4893:                 Jsi_ValueInsert(interp, vself, key, val, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4899:             uint iff = (1<<i);",
          "4900:             if ((mo->log&iff))",
          "4901:                 continue;",
          "4903:                  if (Jsi_ValueIsFalse(interp, vlv)) {",
          "4904:                      pf->pkg->logmask |= iff;",
          "4905:                  } else {",
          "",
          "[Removed Lines]",
          "4902:             if ((vlv = Jsi_ValueObjLookup(interp, v1, jsi_LogCodesU[i], 0))) {",
          "",
          "[Added Lines]",
          "4914:             if ((vlv = Jsi_ValueObjLookup(interp, vself, jsi_LogCodesU[i], 0))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4909:         }",
          "4910:     }",
          "4911:     if (rc == JSI_OK && !nofreeze) {",
          "4913:         obj->freeze = 1;",
          "4914:         obj->freezeNoModify = 0;",
          "4915:         obj->freezeReadCheck = 1;",
          "",
          "[Removed Lines]",
          "4912:         Jsi_Obj *obj = v1->d.obj;",
          "",
          "[Added Lines]",
          "4924:         Jsi_Obj *obj = vself->d.obj;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4927: {",
          "4928:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 0);",
          "4929: }",
          "4931: static Jsi_CmdSpec consoleCmds[] = {",
          "4932:     { \"assert\", jsi_AssertCmd,      1,  3, \"expr:boolean|number|function, msg:string=void, options:object=void\",  .help=\"Same as System.assert()\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=AssertOptions},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4942: static Jsi_RC SysGetOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4943:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4944: {",
          "4945:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 3);",
          "4946: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5070:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "5071:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "5072:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "5073:     { \"import\",     SysImportCmd,    1,  2, \"file:string, options:object=void\",  .help=\"Same as source with {import:true}\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "5074:     { \"isFinite\",   isFiniteCmd,     1,  1, \"val\", .help=\"Return true if is a finite number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "5075:     { \"isMain\",     InfoIsMainCmd,   0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5090:     { \"getOpts\",    SysGetOptsCmd,   2,  3, \"options:object, conf:object, self:object\", .help=\"Get options\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5080:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5081:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Validate that object matches given name:type string. With single arg returns generated string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "5082:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but will invoke cmd if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "5084:     { \"moduleRun\",  SysModuleRunCmd, 1,  2, \"cmd:string|function, args:array=undefined\", .help=\"Invoke named module with given args or command-line args\", .retType=(uint)JSI_TT_ANY},",
          "5085:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "5086:     { \"parseInt\",   parseIntCmd,     1,  2, \"val:any, base:number=10\", .help=\"Convert string to an integer\", .retType=(uint)JSI_TT_NUMBER },",
          "5087:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "5089:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5090:     { \"provide\",    SysProvideCmd,   0,  3, \"cmd:string|function=void, version:number|string=1, options:object=void\", .help=\"Make a package available for use by require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "5091:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "[Removed Lines]",
          "5083:     { \"moduleOpts\", SysModuleOptsCmd,1,  3, \"options:object, self:object|userobj=void, conf:object|null|undefined=void\", .help=\"Parse module options\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5088:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "[Added Lines]",
          "5101:     { \"moduleOpts\", SysModuleOptsCmd,1,  3, \"options:object, self:object|userobj=void, conf:object|null|undefined=void\", .help=\"Parse module options\", .retType=(uint)JSI_TT_OBJECT},",
          "5106:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=JSI_OPT_DEPRECATED},",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     bool time;    // Prefix with time",
          "1019:     bool date;    // Prefix with date",
          "1020:     bool before;  // Print file:line before message instead of at end.",
          "1021:     bool isUTC;",
          "1022:     const char* timeFmt;",
          "1023:     Jsi_Value *chan;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021:     bool capture; // Capture first error.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1505: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags);",
          "1506: extern bool jsi_isDebugKey(const char *key);",
          "1507: extern Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique);",
          "1509: #if !defined(_JSI_MEMCLEAR) && defined(JSI_MEM_DEBUG)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1509: extern const char* jsiValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote, int indent);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     JSI_OPT(BOOL,   jsi_LogOptions, before,  .help=\"Output file:line before message string\" ),",
          "50:     JSI_OPT(BOOL,   jsi_LogOptions, isUTC,   .help=\"Time is to be UTC\" ),",
          "51:     JSI_OPT(STRKEY, jsi_LogOptions, timeFmt, .help=\"A format string to use with strftime\" ),",
          "52:     JSI_OPT(USEROBJ,jsi_LogOptions, chan,    .help=\"Channel to send output to\", .flags=0, .custom=0, .data=(void*)\"Channel\" ),",
          "53:     JSI_OPT_END(jsi_LogOptions, .help=\"Interp options for logging\")",
          "54: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     JSI_OPT(BOOL,   jsi_LogOptions, capture, .help=\"Capture first error\" ),",
          "",
          "---------------"
        ],
        "src/jsiJSON.c||src/jsiJSON.c": [
          "File: src/jsiJSON.c -> src/jsiJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443: static Jsi_RC JSONStringifyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "444:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "445: {",
          "447:     Jsi_Value *jsv = Jsi_ValueArrayIndex(interp, args, 1);",
          "450:     int quote = JSI_OUTPUT_JSON;",
          "451:     if (strict) quote|=JSI_JSON_STRICT;",
          "452:     Jsi_DString dStr = {};",
          "453:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "455:         return JSI_ERROR;",
          "456:     Jsi_ValueFromDS(interp, &dStr, ret);",
          "457:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "446:     bool strict = 1;",
          "448:     if (jsv && Jsi_ValueGetBoolean(interp, jsv, &strict) != JSI_OK)",
          "449:         return Jsi_LogError(\"Expected boolean\");",
          "454:     if (!Jsi_ValueGetDString(interp, arg, &dStr, quote))",
          "",
          "[Added Lines]",
          "446:     bool strict = 1, fmt = 0;",
          "447:     int indent = 2;",
          "448:     Jsi_Number num;",
          "450:     Jsi_Value *jsi = Jsi_ValueArrayIndex(interp, args, 2);",
          "451:     if (jsv) {",
          "452:         if (Jsi_ValueIsNull(interp, jsv))",
          "453:             fmt = 1;",
          "454:         else if (Jsi_ValueGetBoolean(interp, jsv, &strict) != JSI_OK)",
          "455:             return Jsi_LogError(\"Expected boolean|null\");",
          "456:     }",
          "457:     if (jsi) {",
          "458:         if (Jsi_ValueGetNumber(interp, jsi, &num) != JSI_OK)",
          "459:             return Jsi_LogError(\"Expected number\");",
          "460:         fmt = 1;",
          "461:         indent = num;",
          "462:     }",
          "465:     if (fmt) quote|=JSI_JSON_FORMAT;",
          "468:     if (!jsiValueGetDString(interp, arg, &dStr, quote, indent))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468: static Jsi_CmdSpec jsonCmds[] = {",
          "469:     { \"check\",      JSONCheckCmd,       1, 2, \"str:string, strict:boolean=true\", .help=\"Return true if str is JSON\", .retType=(uint)JSI_TT_BOOLEAN },",
          "470:     { \"parse\",      JSONParseCmd,       1, 2, \"str:string, strict:boolean=true\", .help=\"Parse JSON and return js\", .retType=(uint)JSI_TT_ANY },",
          "472:     { NULL, 0,0,0,0, .help=\"Commands for handling JSON data\" }",
          "473: };",
          "",
          "[Removed Lines]",
          "471:     { \"stringify\",  JSONStringifyCmd,   1, 2, \"value:any,  strict:boolean=true\", .help=\"Return JSON from a js object\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Added Lines]",
          "485:     { \"stringify\",  JSONStringifyCmd,   1, 3, \"value:any,  strict:null|boolean=true, indent:number=2\", .help=\"Return JSON from a js object\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:     if( pPreStmt==0 ) {",
          "716:         int nByte;",
          "721:         if( pStmt==0 ) {",
          "722:             if( SQLITE_OK!=sqlite3_errcode(db->db) ) {",
          "",
          "[Removed Lines]",
          "718:         if( SQLITE_OK!=sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, pzOut) )",
          "720:             return Jsi_LogErrorExt(\"PREPARE: %s\", sqlite3_errmsg(db->db));",
          "",
          "[Added Lines]",
          "718:         if( SQLITE_OK!=sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, pzOut) ) {",
          "719:             const char *em2 = \"\", *emsg = sqlite3_errmsg(db->db);",
          "720:             if (emsg && Jsi_Strstr(emsg, \"near \\\"%\\\":\") && Jsi_Strstr(zSql, \"%v\"))",
          "721:                 em2 = \".  Note use of %v requires an \\\"obj\\\" option?\";",
          "722:             return Jsi_LogErrorExt(\"PREPARE: %s%s\", emsg, em2 );",
          "723:         }",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         log &= (1<<maskidx);",
          "124:     return log;",
          "125: }",
          "127: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: void jsi_GetLineOfs(Jsi_Interp *interp, jsi_Frame* fp, int *line, int *lofs, const char** curFile) {",
          "128:     if (interp->inParse && interp->parseLine) {",
          "131:     } else if (interp->inParse && interp->parsePs) {",
          "134:     } else if (interp->curIp) {",
          "135:         if (interp->callerErr && fp && fp->parent) {",
          "136:             jsi_Frame *fptr = fp->parent;",
          "140:         } else {",
          "143:             if (*line<=0)",
          "145:         }",
          "146:     }",
          "147: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:             && (!interp->tryList || !(interp->tryList->inCatch|interp->tryList->inFinal))) {",
          "191:             if (!interp->errMsgBuf[0]) {",
          "192:                 vsnprintf(interp->errMsgBuf, sizeof(interp->errMsgBuf), format, va);",
          "196:                 emsg = interp->errMsgBuf;",
          "197:             }",
          "198:             goto done;",
          "",
          "[Removed Lines]",
          "194:                 interp->errFile =  jsi_GetCurFile(interp);",
          "195:                 interp->errLine = (interp->curIp?interp->curIp->Line:0);",
          "",
          "[Added Lines]",
          "216:                 interp->errFile =  curFile;",
          "217:                 interp->errLine = line;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:             snprintf(pbuf, sizeof(pbuf), \"    (at or near \\\"%s\\\")\\n\", ss);",
          "228:     }",
          "229:     pbuf[sizeof(pbuf)-1] = 0;",
          "249:     islog = (interp->parent && interp->debugOpts.msgCallback && code != JSI_LOG_BUG);",
          "250:     Jsi_DString pStr;",
          "251:     Jsi_DSInit(&pStr);",
          "",
          "[Removed Lines]",
          "230:     if (interp->inParse && interp->parseLine) {",
          "231:         line = interp->parseLine->first_line;",
          "232:         lofs = interp->parseLine->first_column;",
          "233:     } else if (interp->inParse && interp->parsePs) {",
          "234:         line = interp->parsePs->lexer->cur_line;",
          "235:         lofs = interp->parsePs->lexer->cur_char;",
          "236:     } else if (interp->curIp) {",
          "237:         if (interp->callerErr && fp && fp->parent) {",
          "238:             jsi_Frame *fptr = fp->parent;",
          "239:             line = fptr->line;",
          "240:             lofs = 0;",
          "241:             curFile = fptr->filePtr->fileName;",
          "242:         } else {",
          "243:             line = interp->curIp->Line;",
          "244:             lofs = interp->curIp->Lofs;",
          "245:             if (line<=0)",
          "246:                 line = fp->line;",
          "247:         }",
          "248:     }",
          "",
          "[Added Lines]",
          "252:     jsi_GetLineOfs(interp, fp, &line, &lofs, &curFile);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:     if (logHook)",
          "275:         (*logHook)(buf, va);",
          "276:     else if (interp->subOpts.logAllowDups)",
          "277:         vfprintf(stderr, buf, va);",
          "278:     else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:     else if (code == JSI_LOG_ERROR && interp->logOpts.capture && !interp->errMsgBuf[0])",
          "282:         vsnprintf(interp->errMsgBuf, sizeof(interp->errMsgBuf), buf, va);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "492:     Jsi_DString *dStr;",
          "494:     int depth;",
          "495: } objwalker;",
          "497: bool Jsi_StrIsAlnum(const char *cp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:     int indent;",
          "503:     int subcnt;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "655: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr);",
          "657: static Jsi_RC jsi_ObjectGetFmt(Jsi_Interp *interp, const char *key, Jsi_Value *v, objwalker *ow)",
          "658: {",
          "659:     Jsi_DString *dStr = ow->dStr;",
          "661:     if ((ow->quote&JSI_OUTPUT_JSON) && v && v->vt == JSI_VT_UNDEF)",
          "662:         return JSI_OK;",
          "666:         Jsi_DSAppend(dStr, \", \", NULL);",
          "667:     if (((ow->quote&JSI_OUTPUT_JSON) == 0 || (ow->quote&JSI_JSON_STRICT) == 0) && Jsi_StrIsAlnum(key)",
          "668:         && !Jsi_HashEntryFind(interp->lexkeyTbl, key))",
          "669:         Jsi_DSAppend(dStr, key, NULL);",
          "",
          "[Removed Lines]",
          "660:     int len;",
          "663:     char *cp = Jsi_DSValue(dStr);",
          "664:     len = Jsi_DSLength(dStr);",
          "665:     if (len>=2 && (cp[len-2] != '{' || cp[len-1] == '}'))",
          "",
          "[Added Lines]",
          "666: static void jsiJsonIndent(objwalker *ow) {",
          "667:     Jsi_DString *dStr = ow->dStr;",
          "668:     int i, n, ind = ow->indent;",
          "669:     if (ind<=0) ind = 2;",
          "670:     Jsi_DSAppend(dStr, \"\\n\", NULL);",
          "671:     for (i=0; i<ow->depth; i++) {",
          "672:         for (n=0; n<ind; n++)",
          "673:             Jsi_DSAppend(dStr, \" \", NULL);",
          "674:     }",
          "675: }",
          "679:     int isfmt = ow->quote&JSI_JSON_FORMAT;",
          "680:     ow->subcnt++;",
          "683:     if (ow->subcnt>1)",
          "685:     if (isfmt)",
          "686:         jsiJsonIndent(ow);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "672:         Jsi_DSAppend(dStr, \"\\\"\", key, \"\\\"\", NULL);",
          "673:     Jsi_DSAppend(dStr, \":\", NULL);",
          "675:     Jsi_RC rc = jsiValueGetString(interp, v, dStr, ow);",
          "677:     return rc;",
          "678: }",
          "",
          "[Removed Lines]",
          "674:     ow->depth++;",
          "676:     ow->depth--;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "709:         return Jsi_LogError(\"recursive ToString\");",
          "710:     int quote = owPtr->quote, len = -1, i;",
          "711:     int isjson = owPtr->quote&JSI_OUTPUT_JSON;",
          "712:     Jsi_Number num;",
          "713:     switch(v->vt) {",
          "714:         case JSI_VT_UNDEF:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730:     int isfmt = owPtr->quote&JSI_JSON_FORMAT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "827:                 if (!o->arr)",
          "828:                     len = Jsi_ValueGetLength(interp, v);",
          "830:                 for (i = 0; i < len; ++i) {",
          "831:                     nv = Jsi_ValueArrayIndex(interp, v, i);",
          "832:                     if (i) Jsi_DSAppend(dStr,\", \", NULL);",
          "",
          "[Removed Lines]",
          "829:                 Jsi_DSAppend(dStr,\"[\",len?\" \":\"\", NULL);",
          "",
          "[Added Lines]",
          "848:                 Jsi_DSAppend(dStr,\"[\",(len?\" \":\"\"), NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "840:                     else Jsi_DSAppend(dStr, \"undefined\", NULL);",
          "841:                     owPtr->depth--;",
          "842:                 }",
          "844:             } else {",
          "845:                 int len = Jsi_TreeSize(o->tree);",
          "846:                 if (len==0 && o->getters && o->accessorSpec && (len=o->getters->numEntries)) {",
          "847:                     Jsi_HashEntry *hPtr;",
          "848:                     Jsi_HashSearch search;",
          "850:                     for (hPtr = Jsi_HashSearchFirst(o->getters, &search);",
          "851:                         hPtr != NULL && rc == JSI_OK; hPtr = Jsi_HashSearchNext(&search)) {",
          "852:                         rc = jsi_objectGetterFmt(interp, hPtr, owPtr, v);",
          "853:                     }",
          "854:                 } else {",
          "856:                     owPtr->depth++;",
          "857:                     rc = Jsi_TreeWalk(o->tree, _object_get_callback, owPtr, 0);",
          "858:                     owPtr->depth--;",
          "859:                 }",
          "861:             }",
          "862:             return rc;",
          "863:         }",
          "",
          "[Removed Lines]",
          "843:                 Jsi_DSAppend(dStr,len?\" \":\"\",\"]\", NULL);",
          "849:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "855:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "860:                 Jsi_DSAppend(dStr,len?\" \":\"\",\"}\", NULL);",
          "",
          "[Added Lines]",
          "862:                 Jsi_DSAppend(dStr,(len?\" \":\"\"),\"]\", NULL);",
          "865:                 if (len<=0) {",
          "866:                     Jsi_DSAppend(dStr, \"{}\", NULL);",
          "867:                     return rc;",
          "868:                 }",
          "869:                 Jsi_DSAppend(dStr, \"{\", (isfmt?\"\":\" \"), NULL);",
          "879:                     int oldcnt = owPtr->subcnt;",
          "880:                     owPtr->subcnt = 0;",
          "882:                     owPtr->subcnt = oldcnt;",
          "885:                 if (isfmt)",
          "886:                     jsiJsonIndent(owPtr);",
          "887:                 Jsi_DSAppend(dStr, (isfmt?\"\":\" \"), \"}\", NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "870: }",
          "874: {",
          "875:     objwalker ow;",
          "876:     ow.quote = quote;",
          "877:     ow.depth = 0;",
          "878:     ow.dStr = dStr;",
          "879:     if (jsiValueGetString(interp, v, dStr, &ow) != JSI_OK)",
          "880:         return NULL;",
          "881:     return Jsi_DSValue(dStr);",
          "882: }",
          "884: char* jsi_KeyFind(Jsi_Interp *interp, const char *str, int nocreate, int *isKey)",
          "885: {",
          "886:     Jsi_MapEntry *hPtr;",
          "",
          "[Removed Lines]",
          "873: const char* Jsi_ValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote)",
          "",
          "[Added Lines]",
          "900: const char* jsiValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote, int indent)",
          "906:     ow.indent = indent;",
          "912: const char* Jsi_ValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote) {",
          "913:     return jsiValueGetDString(interp, v, dStr, quote, 4);",
          "914: }",
          "",
          "---------------"
        ],
        "tools/mkref.jsi||tools/mkref.jsi": [
          "File: tools/mkref.jsi -> tools/mkref.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:             rv += \"|\"+cnam+\"|(\"+tblEsc(aastr)+\")\"+tblEsc(tret)+\" |\"+conhelp.map(['\\n',' '])+'|\\n';",
          "140:         }",
          "141:         if (cmds !== undefined) {",
          "142:             for (var cmd of cmds) {",
          "143:                 var namspl = cmd.split('.'), nam = namspl[namspl.length-1];",
          "144:                 tret = '';",
          "145:                 if (nam == cnam)",
          "146:                     continue;",
          "147:                 ci = Info.cmds(cnam+'.'+nam);",
          "148:                 if (ci.retType !== \"any\")",
          "149:                     tret = ':'+ci.retType;",
          "150:                 conhelp = (ci.help?ci.help+'.':'');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:             var deprecated = (1<<17);",
          "149:                 var cflags = ci.flags;",
          "150:                 if (cflags&deprecated)",
          "151:                     continue;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: var JSON = function(cmd,args) {};",
          "132: JSON.prototype.check = function(str:string, strict:boolean=true):boolean {};",
          "133: JSON.prototype.parse = function(str:string, strict:boolean=true):any {};",
          "135: var LogDebug = function(str:string|boolean,...):void {};",
          "136: var LogError = function(str:string|boolean,...):void {};",
          "137: var LogInfo = function(str:string|boolean,...):void {};",
          "",
          "[Removed Lines]",
          "134: JSON.prototype.stringify = function(value:any,  strict:boolean=true):string {};",
          "",
          "[Added Lines]",
          "134: JSON.prototype.stringify = function(value:any,  strict:null|boolean=true, indent:number=2):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "272: System.prototype.exit = function(code:number=0):void {};",
          "273: System.prototype.format = function(format:string, ...):string {};",
          "274: System.prototype.import = function(file:string, options:object=void):any {};",
          "275: System.prototype.isFinite = function(val):boolean {};",
          "276: System.prototype.isMain = function():boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: System.prototype.getOpts = function(options:object, conf:object, self:object):object {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370: var exec = function(val:string, options:string|object=void):any {};",
          "371: var exit = function(code:number=0):void {};",
          "372: var format = function(format:string, ...):string {};",
          "373: var import = function(file:string, options:object=void):any {};",
          "374: var isFinite = function(val):boolean {};",
          "375: var isMain = function():boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374: var getOpts = function(options:object, conf:object, self:object):object {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10bc0978b53d160d969d803d31023b34a3538506",
      "candidate_info": {
        "commit_hash": "10bc0978b53d160d969d803d31023b34a3538506",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/10bc0978b53d160d969d803d31023b34a3538506",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/web/docs/app.css",
          "lib/web/docs/app.js",
          "lib/web/docs/index.html",
          "lib/web/md/Builds.md",
          "lib/web/md/Makefile",
          "lib/web/md/Modules.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Using.md",
          "lib/web/md/index.json",
          "lib/web/md/index.txt",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "src/jsiZvfs.c",
          "tools/mdanal.jsi",
          "tools/mkdocs.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.2\": WebSocket fix for dir listing, docs\n\nFossilOrigin-Name: 59522103aa03502d06751dac518cfec72b56ea56ed2b109323f30f068e2dab1a",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tools/mdanal.jsi||tools/mdanal.jsi",
          "tools/mkdocs.jsi||tools/mkdocs.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         useridPass  :'',        // USER:PASS for web GUI.",
          "53:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "54:         wsdebug     :0,         // Debug option for websockets.",
          "55:         wsOpts      :{},        // Websocket options.",
          "56:         zip         :'',        // A .zip, .sqlar, or .fossil file to mount and use as rootdir.",
          "57:         zipVer      :'',        // Version to mount in fossil.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         wsinc       :'',        // Name of file to include.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             File.write(to, out);",
          "384:         }",
          "385:     }",
          "447:         }",
          "452:         }",
          "487:         }",
          "489:             self.timeout = 0;",
          "512:         }",
          "540:     }",
          "547: }",
          "",
          "[Removed Lines]",
          "387:     function main() {",
          "388:         var pal=null, urlarg, urlOrig = self.url;",
          "389:         if (typeof args === 'string')",
          "390:             args = [args];",
          "391:         if (self.vueConvert) {",
          "392:             return vueConvAll(args);",
          "393:         }",
          "394:         urlarg = args[0];",
          "395:         args.shift();",
          "396:         if (urlarg) {",
          "397:             var fext = File.extension(urlarg);",
          "398:             var zexts = ['.zip', '.sqlar', '.fossil'];",
          "399:             if (zexts.indexOf(fext)>=0) {",
          "400:                 self.zip = urlarg;",
          "401:                 urlarg = args[0];",
          "402:                 args.shift();",
          "403:             }",
          "404:         }",
          "405:         if (urlarg) {",
          "406:             if (self.url)",
          "407:                 throw('can not have args and specify -url');",
          "408:             var iiq;",
          "409:             if (self.query === '' && (iiq=urlarg.indexOf('?'))>0) {",
          "410:                 self.query = urlarg.substr(iiq+1);",
          "411:                 urlarg = urlarg.substr(0, iiq);",
          "412:             }",
          "413:             self.url = urlarg;",
          "414:         }",
          "415:         if (self.app) {",
          "416:             pal = {app:self.app};",
          "417:             self.url = self.app+'/index.html';",
          "418:             self.rootdir = '/zvfs/lib/web';",
          "419:             if (self.timeout != options.timeout)",
          "420:                 self.timeout = 0;",
          "421:         } if (self.docs) {",
          "422:             if (self.rootdir || self.zip)",
          "423:                 throw('can not use rootdir/zip with docs');",
          "424:             self.rootdir = '/zvfs/lib/web';",
          "425:             self.url = 'docs/index.html';",
          "426:             if (self.timeout != options.timeout)",
          "427:                 self.timeout = 0;",
          "430:         } else if (self.zip) {",
          "431:             self.mnt = Jsi_Archive([self.zip], {noRun:true, version:self.zipVer});",
          "432:             if (!self.rootdir)",
          "433:                 self.rootdir = self.mnt;",
          "434:             else",
          "435:                 self.rootdir = self.mnt + '/' + self.rootdir;",
          "436:             if (!self.url)",
          "437:                 self.url = getUrlInDir(self.mnt);",
          "439:         } else if (!self.rootdir) {",
          "440:             if (!self.url.length)",
          "441:                 self.rootdir = Info.scriptDir();",
          "442:             else",
          "443:                 self.rootdir = File.dirname(self.url);",
          "444:             var rlen = self.rootdir.length;",
          "445:             if (self.url.substr(0, rlen) === self.rootdir)",
          "446:                 self.url = self.url.substr(rlen);",
          "448:         if (self.sslDir) {",
          "449:             if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "450:             if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "451:             self.ssl = true;",
          "453:         if (!self.rootdir)",
          "454:             self.rootdir = '.';",
          "456:         var wo = self.wsopts = {",
          "457:             pathAlias:pal,",
          "458:             local:self.local,",
          "459:             debug:self.wsdebug,",
          "460:             extHandlers:true,",
          "461:             onOpen:WsOpen,",
          "462:             onClose:WsClose,",
          "463:             onCloseLast:WsCloseLast,",
          "464:             onRecv:WsRecv,",
          "465:             onUpload:WsUpload,",
          "466:             onFilter:WsFilter,",
          "467:             port:self.port,",
          "468:             rootdir:self.rootdir,",
          "469:             urlPrefix:self.urlPrefix,",
          "470:             urlUnknown:self.urlUnknown,",
          "471:             sslCert:self.sslcert,",
          "472:             sslKey:self.sslkey,",
          "473:             ssl:self.ssl,",
          "474:             mimeLookupFunc:mimeLookup,",
          "475:         };",
          "476:         switch (self.mode) {",
          "477:             case 'admin':",
          "478:                 self.url = '/admin';",
          "479:                 wo.getRegexp=/^\\/admin/;",
          "480:                 wo.onGet=WebAdmin;",
          "481:                 break;",
          "482:             case 'menu':",
          "483:                 self.url = '/jsi/web/Websrv.htmli';",
          "484:                 break;",
          "485:             case '': break;",
          "486:             default: throw('mode \"'+self.mode+'\" not one of: admin, menu');",
          "488:         if (urlOrig!=='' && self.timeout === 60000)",
          "490:         if (!self.docs && !self.server && !self.pageStr && self.mode === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))",
          "491:             throw(\"url file empty or not found: \"+self.url);",
          "492:         if (self.urlPrefix.length && self.urlPrefix[0] != '/')",
          "493:             throw('urlPrefix must start with a slash');",
          "495:         if (self.local)",
          "496:             wo.noCompress = true;",
          "497:         if (self.server) {",
          "498:             self.noGui = true;",
          "499:             if (self.timeout !== options.timeout)",
          "500:                 self.timeout = 0;",
          "501:         } else if (!self.noReload)",
          "502:             wo.onModify = onModify;",
          "503:         if (self.pageStr !== '') {",
          "504:             wo.getRegexp=/^\\/page/;",
          "505:             self.url = '/page';",
          "506:             wo.onGet=WebGetString;",
          "507:         }",
          "508:         if (self.useridPass != '') {",
          "509:             wo.useridPass = self.useridPass;",
          "510:             if (self.useridPass === ':') // Exercise onAuth callback.",
          "511:                 wo.onAuth = WsAuth;",
          "513:         if (typeof self.wsOpts === 'string')",
          "514:             self.wsOpts = JSON.parse(self.wsOpts, false);",
          "515:         if (typeof self.udata === 'string')",
          "516:             self.udata = JSON.parse(self.udata, false);",
          "517:         if (self.udata && self.udata.length)",
          "518:             self.wsOpts.udata = self.udata;",
          "519:         for (var i in self.wsOpts)",
          "520:             wo[i] = self.wsOpts[i];",
          "522:         OpenWebsock();",
          "525:         LogTrace(\"Listening on port:\",self.port);",
          "527:         if (!self.noGui && self.url && self.url.length) {",
          "528:             OpenBrowser(self.url, self.anchor, self.query);",
          "529:         }",
          "531:         if (self.noWait) {",
          "532:             self.openWebsock = OpenWebsock;",
          "533:             return self;",
          "534:         }",
          "536:         if (self.timeout)",
          "537:             setTimeout(function () { DoTimeout(); }, self.timeout<0?-self.timeout:self.timeout);",
          "538:         while (self.done == 0 && Event.update(100) ) ;",
          "542:     if (self.srcFile !== '')",
          "543:         source(self.srcFile);",
          "545:     main();",
          "",
          "[Added Lines]",
          "388:     if (self.srcFile !== '')",
          "389:         source(self.srcFile);",
          "391:     var pal=null, urlarg, urlOrig = self.url;",
          "392:     if (typeof args === 'string')",
          "393:         args = [args];",
          "394:     if (self.vueConvert) {",
          "395:         return vueConvAll(args);",
          "396:     }",
          "397:     urlarg = args[0];",
          "398:     args.shift();",
          "399:     if (urlarg) {",
          "400:         var fext = File.extension(urlarg);",
          "401:         var zexts = ['.zip', '.sqlar', '.fossil'];",
          "402:         if (zexts.indexOf(fext)>=0) {",
          "403:             self.zip = urlarg;",
          "404:             urlarg = args[0];",
          "405:             args.shift();",
          "407:     }",
          "408:     if (urlarg) {",
          "409:         if (self.url)",
          "410:             throw('can not have args and specify -url');",
          "411:         var iiq;",
          "412:         if (self.query === '' && (iiq=urlarg.indexOf('?'))>0) {",
          "413:             self.query = urlarg.substr(iiq+1);",
          "414:             urlarg = urlarg.substr(0, iiq);",
          "416:         self.url = urlarg;",
          "417:     }",
          "418:     if (self.app) {",
          "419:         pal = {app:self.app};",
          "420:         self.url = self.app+'/index.html';",
          "421:         self.rootdir = '/zvfs/lib/web';",
          "422:         if (!self.wsinc) {",
          "423:             self.wsinc = self.app+'/wsinc.jsi';",
          "424:             if (!File.exists(self.wsinc))",
          "425:                 self.wsinc = '';",
          "427:         if (self.timeout != options.timeout)",
          "429:     } if (self.docs) {",
          "430:         if (self.rootdir || self.zip)",
          "431:             throw('can not use rootdir/zip with docs');",
          "432:         var surl = self.url = 'docs/index.html', sd = self.docs;",
          "433:         if (sd == '/')",
          "434:             self.rootdir = '/zvfs/lib/web';",
          "435:         else if (File.isdir(sd) && File.exists(sd+'/'+surl))",
          "436:             self.rootdir = self.docs;",
          "437:         else",
          "438:             throw('-docs must be a docs dir or \"/\"'+self.docs);",
          "439:         if (!self.wsinc) {",
          "440:             self.wsinc = self.rootdir+'/docs/wsinc.jsi';",
          "441:             if (!File.exists(self.wsinc))",
          "442:                 self.wsinc = '';",
          "444:         if (self.timeout != options.timeout)",
          "445:             self.timeout = 0;",
          "448:     } else if (self.zip) {",
          "449:         self.mnt = Jsi_Archive([self.zip], {noRun:true, version:self.zipVer});",
          "450:         if (!self.rootdir)",
          "451:             self.rootdir = self.mnt;",
          "452:         else",
          "453:             self.rootdir = self.mnt + '/' + self.rootdir;",
          "454:         if (!self.url)",
          "455:             self.url = getUrlInDir(self.mnt);",
          "457:     } else if (!self.rootdir) {",
          "458:         if (!self.url.length)",
          "459:             self.rootdir = Info.scriptDir();",
          "460:         else",
          "461:             self.rootdir = File.dirname(self.url);",
          "462:         var rlen = self.rootdir.length;",
          "463:         if (self.url.substr(0, rlen) === self.rootdir)",
          "464:             self.url = self.url.substr(rlen);",
          "465:     }",
          "466:     if (self.sslDir) {",
          "467:         if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "468:         if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "469:         self.ssl = true;",
          "470:     }",
          "471:     if (!self.rootdir)",
          "472:         self.rootdir = '.';",
          "475:     var wo = self.wsopts = {",
          "476:         pathAlias:pal,",
          "477:         local:self.local,",
          "478:         debug:self.wsdebug,",
          "479:         extHandlers:true,",
          "480:         onOpen:WsOpen,",
          "481:         onClose:WsClose,",
          "482:         onCloseLast:WsCloseLast,",
          "483:         onRecv:WsRecv,",
          "484:         onUpload:WsUpload,",
          "485:         onFilter:WsFilter,",
          "486:         port:self.port,",
          "487:         rootdir:self.rootdir,",
          "488:         urlPrefix:self.urlPrefix,",
          "489:         urlUnknown:self.urlUnknown,",
          "490:         sslCert:self.sslcert,",
          "491:         sslKey:self.sslkey,",
          "492:         ssl:self.ssl,",
          "493:         mimeLookupFunc:mimeLookup,",
          "494:     };",
          "495:     if (self.wsinc)",
          "496:         source(self.wsinc);",
          "497:     switch (self.mode) {",
          "498:         case 'admin':",
          "499:             self.url = '/admin';",
          "500:             wo.getRegexp=/^\\/admin/;",
          "501:             wo.onGet=WebAdmin;",
          "502:             break;",
          "503:         case 'menu':",
          "504:             self.url = '/jsi/web/Websrv.htmli';",
          "505:             break;",
          "506:         case '': break;",
          "507:         default: throw('mode \"'+self.mode+'\" not one of: admin, menu');",
          "509:     if (urlOrig!=='' && self.timeout === 60000)",
          "510:         self.timeout = 0;",
          "511:     if (!self.docs && !self.server && !self.pageStr && self.mode === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))",
          "512:         throw(\"url file empty or not found: \"+self.url);",
          "513:     if (self.urlPrefix.length && self.urlPrefix[0] != '/')",
          "514:         throw('urlPrefix must start with a slash');",
          "516:     if (self.local)",
          "517:         wo.noCompress = true;",
          "518:     if (self.server) {",
          "519:         self.noGui = true;",
          "520:         if (self.timeout !== options.timeout)",
          "521:             self.timeout = 0;",
          "522:     } else if (!self.noReload)",
          "523:         wo.onModify = onModify;",
          "524:     if (self.pageStr !== '') {",
          "525:         wo.getRegexp=/^\\/page/;",
          "526:         self.url = '/page';",
          "527:         wo.onGet=WebGetString;",
          "528:     }",
          "529:     if (self.useridPass != '') {",
          "530:         wo.useridPass = self.useridPass;",
          "531:         if (self.useridPass === ':') // Exercise onAuth callback.",
          "532:             wo.onAuth = WsAuth;",
          "533:     }",
          "534:     if (typeof self.wsOpts === 'string')",
          "535:         self.wsOpts = JSON.parse(self.wsOpts, false);",
          "536:     if (typeof self.udata === 'string')",
          "537:         self.udata = JSON.parse(self.udata, false);",
          "538:     if (self.udata && self.udata.length)",
          "539:         self.wsOpts.udata = self.udata;",
          "540:     for (var i in self.wsOpts)",
          "541:         wo[i] = self.wsOpts[i];",
          "543:     OpenWebsock();",
          "546:     LogTrace(\"Listening on port:\",self.port);",
          "548:     if (!self.noGui && self.url && self.url.length) {",
          "549:         OpenBrowser(self.url, self.anchor, self.query);",
          "550:     }",
          "552:     if (self.noWait) {",
          "553:         self.openWebsock = OpenWebsock;",
          "554:         return self;",
          "555:     }",
          "557:     if (self.timeout)",
          "558:         setTimeout(function () { DoTimeout(); }, self.timeout<0?-self.timeout:self.timeout);",
          "559:     while (self.done == 0 && Event.update(100) ) ;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:     const char *fname;",
          "252:     Jsi_Value *fileVal;",
          "253:     time_t loadLast, loadFirst;",
          "254:     int flags;",
          "255: } jsi_wsFile;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:     bool native;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:     }",
          "603:     const char *fnb = Jsi_ValueToString(interp, fname, NULL);",
          "604:     Jsi_DString dStr = {}, tStr = {};",
          "606:     bool isroot = (fn[0]=='/'&&!fn[1]);",
          "608:     if (jsonp)",
          "609:         Jsi_DSAppend(&dStr, \"/* callback */\\n\", callback, \"([\", NULL);",
          "610:     else if (json)",
          "",
          "[Removed Lines]",
          "605:     int fnlen = Jsi_Strlen(fn);",
          "607:     const char fne = (fnlen>=1?fn[fnlen-1]:0), *fns = (fne=='/' || isroot?\"\":\"/\");",
          "",
          "[Added Lines]",
          "606:     int fnlen = Jsi_Strlen(fn), fblen = Jsi_Strlen(fnb);",
          "608:     const char fne = (fnlen>=1?fn[fnlen-1]:0), *fns = (fne=='/' || isroot?\"\":\"/\"),",
          "609:         fbe = (fblen>=1?fnb[fblen-1]:0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "637: #endif",
          "638:         uint sz = 0;",
          "639:         char pbuf[PATH_MAX];",
          "641:         Jsi_StatBuf stat = {};",
          "642:         Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "643:         Jsi_IncrRefCount(interp, vpath);",
          "",
          "[Removed Lines]",
          "640:         snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", fnb, (fne!='/' && fnb[0]?\"/\":\"\"),  z);",
          "",
          "[Added Lines]",
          "642:         snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", fnb, (fbe!='/' && fnb[0]?\"/\":\"\"),  z);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "982:     return true;",
          "983: }",
          "986:     const char *sname = Jsi_ValueString(interp, name, NULL);",
          "987:     if (cmdPtr->onModify && sname) {",
          "988:         bool isNew = 0;",
          "",
          "[Removed Lines]",
          "985: static Jsi_RC jsi_wsFileAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, Jsi_Value *name) {",
          "",
          "[Added Lines]",
          "987: static Jsi_RC jsi_wsFileAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, Jsi_Value *name, int native) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "992:             if (!isNew)",
          "993:                 fPtr = (typeof(fPtr))Jsi_HashValueGet(hPtr);",
          "994:             else {",
          "995:                 fPtr = (jsi_wsFile *)Jsi_Calloc(1, sizeof(*fPtr));",
          "996:                 fPtr->fileVal = name;",
          "997:                 fPtr->fname = sname;",
          "998:                 fPtr->loadFirst = time(NULL);",
          "999:                 Jsi_IncrRefCount(interp, name);",
          "1000:                 fPtr->flags = 0;",
          "1001:                 Jsi_HashValueSet(hPtr, fPtr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "997:                 if (native<0)",
          "998:                     native = Jsi_FSNative(interp, name);",
          "1003:                 fPtr->native = native;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1014:     if (!n && sb.st_size>0) {",
          "1015:         char fdir[PATH_MAX];",
          "1016:         const char* cr = cmdPtr->curRoot, *fpath=NULL;",
          "1018:             && cr && !Jsi_Strncmp(fpath, cr, Jsi_Strlen(cr)))) {",
          "1019:             rc = Jsi_FileRead(interp, name, dStr);",
          "1020:             if (rc == JSI_OK && cmdPtr->onModify && Jsi_FSNative(interp, name))",
          "1022:         } else",
          "1023:             fprintf(stderr, \"Skip read file %s in %s\\n\", Jsi_ValueString(interp, name, NULL), (cr?cr:\"\"));",
          "1024:     }",
          "",
          "[Removed Lines]",
          "1017:         if (!Jsi_FSNative(interp, name) || ((fpath= Jsi_Realpath(interp, name, fdir))",
          "1021:                 jsi_wsFileAdd(interp, cmdPtr, name);",
          "",
          "[Added Lines]",
          "1022:         bool native = Jsi_FSNative(interp, name);",
          "1023:         if (!native || ((fpath= Jsi_Realpath(interp, name, fdir))",
          "1027:                 jsi_wsFileAdd(interp, cmdPtr, name, native);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1278:     return cmdPtr->jsishPathCache;",
          "1279: }",
          "1282:     const char *ce, *cp = NULL;",
          "1283:     char *lcp;",
          "1284:     Jsi_Value *val;",
          "",
          "[Removed Lines]",
          "1281: static void jsi_wsPathAlias(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char **inPtr, Jsi_DString *dStr) {",
          "",
          "[Added Lines]",
          "1287: static void jsi_wsPathAlias(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, char **inPtr, Jsi_DString *dStr) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1447: static int jsi_wsHttp(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, struct lws *wsi, void *user,",
          "1449: {",
          "1450:     const char *ext = NULL;",
          "1451:     unsigned char buffer[JSI_BUFSIZ];",
          "1452:     const char *mime = NULL;",
          "1453:     time_t now = time(NULL);",
          "1455:     int rc = 0;",
          "1456:     buf[0] = 0;",
          "1457:     uchar *p = buffer, *end = &buffer[sizeof(buffer)-1];",
          "",
          "[Removed Lines]",
          "1448:     struct lws_context *context, const char* inPtr, Jsi_DString *tStr, jsi_wsPss *pss)",
          "1454:     char buf[JSI_BUFSIZ];",
          "",
          "[Added Lines]",
          "1454:     struct lws_context *context, char* inPtr, Jsi_DString *iStr, Jsi_DString *tStr, jsi_wsPss *pss)",
          "1460:     char buf[JSI_BUFSIZ], *bufp;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1460:     bool isJsiWeb = 0, isSSI = 0;",
          "1461:     cmdPtr->stats.httpLast = now;",
          "1464:     if (lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI))",
          "1465:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:     if (inPtr[0] != '~')",
          "1470:         inPtr = Jsi_NormalPath(interp, inPtr, iStr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1479:     }",
          "1481:     if ((cmdPtr->urlRedirect && (inPtr == 0 || *inPtr == 0 || !Jsi_Strcmp(inPtr, \"/\")) && !cmdPtr->redirDisable)",
          "1483:         cmdPtr->stats.redirCnt++;",
          "1485:         if (cmdPtr->redirMax>0 && !cmdPtr->redirDisable && cmdPtr->redirMax>0 && cmdPtr->stats.redirLast",
          "",
          "[Removed Lines]",
          "1482:         && (inPtr = cmdPtr->urlRedirect) && inPtr[0]) {",
          "",
          "[Added Lines]",
          "1490:         && (inPtr = (char*)cmdPtr->urlRedirect) && inPtr[0])",
          "1491:     {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1489:         rc = lws_http_redirect(wsi, 301, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "1490:         return (rc == 100 ? 0 : 1);",
          "1491:     }",
          "1495:     if (cmdPtr->useridPass || cmdPtr->onAuth) {",
          "1496:         int ok = 0;",
          "1497:         int alen;",
          "",
          "[Removed Lines]",
          "1492:     if (!inPtr || !*inPtr)",
          "1493:         inPtr = \"/\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1577:     Jsi_DString sStr;",
          "1578:     Jsi_DSInit(&sStr);",
          "1579:     jsi_wsPathAlias(interp, cmdPtr, &inPtr, &sStr);",
          "1581:     snprintf(buf, sizeof(buf), \"%s/%s\", cmdPtr->curRoot, inPtr);",
          "1582:     Jsi_DSFree(&sStr);",
          "1583:     if (cmdPtr->debug>1)",
          "1584:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1588:     Jsi_DSSetLength(&sStr, 0);",
          "1589:     bufp = Jsi_NormalPath(interp, buf, &sStr);",
          "1590:     Jsi_Strcpy(buf, bufp);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1669:                     hrc = -1;",
          "1670:                 else {",
          "1671:                     hrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&tStr), 0, NULL, mime);",
          "1673:                 }",
          "1674:                 Jsi_DecrRefCount(interp, fname);",
          "1675:                 return hrc;",
          "",
          "[Removed Lines]",
          "1672:                     jsi_wsFileAdd(interp, cmdPtr, fname);",
          "",
          "[Added Lines]",
          "1681:                     jsi_wsFileAdd(interp, cmdPtr, fname, -1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1762:             if (cmdPtr->onModify) {",
          "1763:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1764:                 Jsi_IncrRefCount(interp, fname);",
          "1766:                 Jsi_DecrRefCount(interp, fname);",
          "1767:             }",
          "1768:             return 1;",
          "",
          "[Removed Lines]",
          "1765:                 jsi_wsFileAdd(interp, cmdPtr, fname);",
          "",
          "[Added Lines]",
          "1774:                 jsi_wsFileAdd(interp, cmdPtr, fname, -1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1780:     Jsi_StatBuf jsb;",
          "1781:     bool native = Jsi_FSNative(interp, fname);",
          "1782:     if ((native && Jsi_InterpSafe(interp) && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_READ) != JSI_OK) ||",
          "1784: nofile:",
          "1785:         if (cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1786:             rc = lws_http_redirect(wsi, 301, (uchar*)cmdPtr->urlUnknown, Jsi_Strlen(cmdPtr->urlUnknown), &p, end);",
          "",
          "[Removed Lines]",
          "1783:         (Jsi_Stat(interp, fname, &jsb) || jsb.st_size<=0)) {",
          "",
          "[Added Lines]",
          "1792:         (Jsi_Stat(interp, fname, &jsb) || (jsb.st_size<=0 && !S_ISDIR(jsb.st_mode)))) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1881:         }",
          "1882:         int hrc = lws_serve_http_file(wsi, buf, mime, Jsi_DSValue(&hStr), Jsi_DSLength(&hStr));",
          "1883:         if (hrc >= 0 && cmdPtr->onModify)",
          "1885:         Jsi_DecrRefCount(interp, fname);",
          "1886:         if (hrc<0) {",
          "1887:             if (cmdPtr->noWarn==0)",
          "",
          "[Removed Lines]",
          "1884:             jsi_wsFileAdd(interp, cmdPtr, fname);",
          "",
          "[Added Lines]",
          "1891:             jsi_wsFileAdd(interp, cmdPtr, fname, native);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2269:     case LWS_CALLBACK_HTTP:",
          "2270:     {",
          "2272:         Jsi_DSInit(&dStr);",
          "2273:         if (cmdPtr->debug)",
          "2274:             fprintf(stderr, \"HTTP GET: %s\\n\", inPtr);",
          "2276:         Jsi_DSFree(&dStr);",
          "2277:         if (rc<0)",
          "2278:             return -1;",
          "2279:         if (rc==1) {",
          "",
          "[Removed Lines]",
          "2271:         Jsi_DString dStr;",
          "2275:         rc = jsi_wsHttp(interp, cmdPtr, wsi, user, context, inPtr, &dStr, pss);",
          "",
          "[Added Lines]",
          "2278:         Jsi_DString dStr, iStr, pStr;",
          "2280:         Jsi_DSInit(&iStr);",
          "2281:         Jsi_DSInit(&pStr);",
          "2284:         Jsi_DSAppend(&pStr, !inPtr||!inPtr[0]?\"/\":inPtr, NULL);",
          "2285:         rc = jsi_wsHttp(interp, cmdPtr, wsi, user, context, Jsi_DSValue(&pStr), &iStr, &dStr, pss);",
          "2287:         Jsi_DSFree(&iStr);",
          "2288:         Jsi_DSFree(&pStr);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2987:     for (hPtr = Jsi_HashSearchFirst(cmdPtr->fileHash, &cursor);",
          "2988:         hPtr != NULL; hPtr = Jsi_HashSearchNext(&cursor)) {",
          "2989:         jsi_wsFile* fPtr = (jsi_wsFile*)Jsi_HashValueGet(hPtr);",
          "2991:             Jsi_StatBuf sb;",
          "2992:             int n = Jsi_Stat(interp, fPtr->fileVal, &sb);",
          "2993:             if (!n && sb.st_mtime > ll) {",
          "",
          "[Removed Lines]",
          "2990:         if (fPtr && fPtr->fileVal) {",
          "",
          "[Added Lines]",
          "3002:         if (fPtr && fPtr->fileVal) {  //TODO: only native files need to be checked.",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3215:         return Jsi_LogError(\"Apply to non-websock object\");",
          "3216:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
          "3217:     if (val)",
          "3219:     if (cmdPtr->fileHash)",
          "3220:         return Jsi_HashKeysDump(interp, cmdPtr->fileHash, ret, 0);",
          "3221:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "3218:         return jsi_wsFileAdd(interp, cmdPtr, val);",
          "",
          "[Added Lines]",
          "3230:         return jsi_wsFileAdd(interp, cmdPtr, val, -1);",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:         return -1;",
          "1303:     }",
          "1304:     memset(buf, 0, sizeof(*buf));",
          "1309:     buf->st_ino = 0;",
          "1310:     buf->st_size = pFile->nByte;",
          "1311:     buf->st_mtime = pFile->timestamp;",
          "1312:     buf->st_ctime = pFile->timestamp;",
          "1313:     buf->st_atime = pFile->timestamp;",
          "1314:     return 0;",
          "1315: }",
          "",
          "[Removed Lines]",
          "1305:     if (pFile->isdir)",
          "1306:         buf->st_mode = 040555;",
          "1307:     else",
          "1308:         buf->st_mode = (0100000|pFile->permissions);",
          "",
          "[Added Lines]",
          "1310:     if (pFile->isdir) {",
          "1311:         buf->st_mode = 040555;",
          "1312:         if (!buf->st_size)",
          "1313:             buf->st_size = 1;",
          "1314:     } else",
          "1315:         buf->st_mode = (0100000|pFile->permissions);",
          "",
          "---------------"
        ],
        "tools/mdanal.jsi||tools/mdanal.jsi": [
          "File: tools/mdanal.jsi -> tools/mdanal.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/mkdocs.jsi||tools/mkdocs.jsi": [
          "File: tools/mkdocs.jsi -> tools/mkdocs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "3: function mkdocs(args, opts) {",
          "5:     var options = { // Analyse markdown",
          "6:         O   :'stdout',  // Output index file",
          "7:     };",
          "8:     var self = {",
          "9:         fall:{},",
          "10:         fdata:{},",
          "11:         flabels:{},",
          "12:         flinks:{},",
          "13:         fblocks:{},",
          "14:         aflist:[],",
          "15:         result:{},",
          "16:     };",
          "17:     moduleOpts(options, self);",
          "21:     function slugify(s) {",
          "22:         s = s.toLowerCase().trim();",
          "23:         s = s.replace(/`~!@#$%^&*()_\\-+=\\[\\]\\{\\};:'\"\\\\|\\/,.<>?\\s]/g, ' ');",
          "24:         s = s.map(['\\\"', '', '    ', ' ', '   ', ' ', '  ', ' ', ' ', '-']);",
          "26:         return s;",
          "27:     }",
          "29:     var fdir, fn = (typeof(args) === 'array'? args[0]: args);",
          "30:     var tr, j, r, t, d, f, i, th, tt;",
          "31:     var lst;",
          "32:     if (File.isdir(fn)) {",
          "33:         fdir = fn;",
          "34:         if (fn[fn.length-1]!='/') fn+='/';",
          "35:         lst = File.glob('*.md', {dir:fn, prefix:fn, tails:true});",
          "36:         fdir = fn;",
          "37:     } else {",
          "38:         lst = [fn];",
          "39:         fdir = File.dirname(fn);",
          "40:     }",
          "41:     var re = /^#+ [^#]+$/gm,",
          "42:         rel = /\\[[^]]+\\]\\([^)]+\\)/gm,",
          "43:         reb = /```.*```/g;",
          "44:     var aflist = [];",
          "45:     for (i of lst) {",
          "46:         f = File.tail(i);",
          "47:         aflist.push(f);",
          "48:     }",
          "49:     for (i of lst) {",
          "50:         f = File.tail(i);",
          "51:         LogDebug(\"DO HEADERS\", i);",
          "52:         d = self.fdata[f] = File.read(i);",
          "53:         r = d.match(re);",
          "54:         t = [], tt = [];",
          "55:         if (r) {",
          "56:             for (j of r) {",
          "57:                 tr = j.match(/ [^#]+/);",
          "58:                 if (tr) {",
          "59:                     var strl = slugify(tr[0].trim());",
          "60:                     t.push(strl);",
          "61:                     tt.push(strl, j);",
          "62:                 }",
          "63:             }",
          "64:         }",
          "65:         LogDebug('R', t);",
          "66:         self.flabels[f] = t;",
          "67:         self.fall[f] = tt;",
          "69:         r = d.match(rel);",
          "70:         LogDebug('DO LINKS', r);",
          "71:         t = [];",
          "72:         if (r) {",
          "73:             for (j of r) {",
          "74:                 tr = j.match(/\\(.*\\)+/);",
          "75:                 if (tr) {",
          "76:                     var ta;",
          "77:                     tr = tr[0];",
          "78:                     tr = tr.substr(1,tr.length-2).split('\"')[0];",
          "79:                     if (tr[0] == '#') {",
          "80:                         var tr0a = slugify(tr.substr(1));",
          "81:                         if (self.flabels[f].indexOf(tr0a)<0)",
          "82:                             puts(\"IN\", f, \"LOCAL-LINK TO UNKNOWN SECTION:\", tr);",
          "83:                         continue;",
          "85:                     } else {",
          "86:                         if (tr.indexOf('://')>0) continue;",
          "87:                         th = tr.trim().split('#');",
          "88:                         var t0 = th[0].trim();",
          "89:                         if (aflist.indexOf(t0)<0) {",
          "90:                             puts('IN',f,'FILE NOT FOUND:\"'+t0+'\" FROM \"'+tr+'\"');",
          "91:                             continue;",
          "92:                         }",
          "93:                         if (th.length!=2)",
          "95:                             continue;",
          "96:                         else",
          "97:                             ta = th[0] + '#' + th[1];",
          "98:                     }",
          "99:                     t.push(ta.trim());",
          "100:                 }",
          "101:             }",
          "102:         }",
          "103:         self.flinks[f] = t;",
          "104:         LogDebug('L', t);",
          "105:         r = d.match(reb);",
          "106:         LogDebug('DO BLOCKS', r);",
          "107:         self.fblocks[f] = r;",
          "108:     }",
          "109:     for (f in self.flinks) {",
          "110:         var fl = self.flinks[f];",
          "111:         if (!fl) {log('no links',f); continue; }",
          "112:         LogDebug(f,'fl',fl);",
          "113:         for (tr of fl) {",
          "114:             th = tr.trim().split('#');",
          "115:             if (th.length!=2) {",
          "117:                 continue;",
          "118:             } else {",
          "119:                 var x0 = th[0].trim();",
          "120:                 ta = x0 + '#' + th[1];",
          "121:                 var xx = self.flabels[x0];",
          "122:                 if (!xx || xx.indexOf(th[1].toLowerCase())<0)",
          "123:                     puts(\"IN\", f, \"NONLOCAL-LINK TO UNKNOWN SECTION:\", tr);",
          "124:             }",
          "125:         }",
          "126:     }",
          "127:     self.result = {",
          "128:         sections: self.fall,",
          "129:         files:Object.keys(self.fall).sort(),",
          "130:     };",
          "131:     var fdirt = fdir+'/index.txt';",
          "132:     if (File.exists(fdirt))",
          "133:         self.result.files = File.read(fdirt).trim().split(' ');",
          "134:     if (self.O)",
          "135:         File.write(self.O, JSON.stringify(self.result));",
          "136:     else",
          "137:         return self.result;",
          "138: }",
          "140: moduleRun(mkdocs);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "5c723f7e1f9d26141d3acf2a2dcb443cc9c9e981",
      "candidate_info": {
        "commit_hash": "5c723f7e1f9d26141d3acf2a2dcb443cc9c9e981",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/5c723f7e1f9d26141d3acf2a2dcb443cc9c9e981",
        "files": [
          "lib/Cdata.jsi",
          "lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFilesys.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.40\": Fix try/catch bug. Add LogXX to CData\n\nFossilOrigin-Name: ce0ecd9114b6ed6c5c3106bac2a4ca5f76ccd0a142a4ffd7f2eda5c74ebee956",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "lib/Safe.jsi||lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFilesys.c||src/jsiFilesys.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFilesys.c||src/jsiFilesys.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:             inits.push(sinit);",
          "433:             evItems.push(evIt);",
          "434:         }",
          "435:         crc = 0;",
          "436:         if (!port) // Non-portable fields add platform crc.",
          "437:             crc = Info.platform().crc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:         if (name == self.name)",
          "436:             sc += '  Jsi_PkgOpts* popts;\\n';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:             }",
          "695:             var fcprefix = '(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr';",
          "696:             ifpre += '\\nstatic Jsi_RC '+fcmdName2 + fcprefix + ifprecc2 + ') {\\n';",
          "697:             if (isObj && !fconstr) {",
          "698:                 if (!self.setCons)",
          "699:                     self.out += '#define CDATA_CONSTRUCTOR 1\\n';",
          "700:                 self.setCons=1;",
          "701:                 ifpre += '  '+otyp+' *cmdPtr = ('+otyp+' *)Jsi_UserObjGetData(interp, _this, funcPtr);\\n'",
          "703:             } else if (intData) {",
          "704:                 ifpre += '#ifdef JSI_INI_DEFN_'+otyp+'\\n  '+otyp+' *cmdPtr = ('+otyp+' *)Jsi_InterpGetData(interp, \"'+name+'\", NULL);\\n'",
          "706:             }",
          "707:             var rettyp = typeValidate('return', fre[3].substr(1));",
          "708:             if (rettyp.length>1 || rettyp[0] != 'any') {",
          "",
          "[Removed Lines]",
          "702:                     + '  if (!cmdPtr) { Jsi_LogError(\"Apply in a non object\"); return JSI_ERROR; }\\n';",
          "705:                     + '  if (!cmdPtr) { Jsi_LogError(\"Missing interp data\"); return JSI_ERROR; }\\n#endif\\n';",
          "",
          "[Added Lines]",
          "699:             var svendx = 'Jsi_LogTraceExt(\"'+name+fname+'\");\\n';",
          "705:                     + '  if (!cmdPtr) return Jsi_LogError(\"Apply in a non object\"); \\n'+svendx;",
          "708:                     + '  if (!cmdPtr) return Jsi_LogError(\"Missing interp data\"); \\n'+svendx+'#endif\\n';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "962:         var scnm = self.icode[name+'_'];",
          "963:         if (!scnm) scnm = '';",
          "964:         self.out = self.preface + ' ' + self.verStr + ' from: '+self.infile+'\\n\\n'",
          "965:             + self.jscHeaderStr.replace(/Demo/g, name) + self.outcode",
          "967:         + \"#define _JSI_CDEFS_\"+name+\"_H_\\n\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:             + '#define JSI_EXT_OPTS cmdPtr->popts \\n'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1555: #ifdef CDATA_CODE_PER_INTERP_Demo",
          "1556:     cmdPtr->_ = (void *)Jsi_InterpGetData(interp, \"Demo_InterpData\", NULL);",
          "1557: #endif",
          "1559:     bool hasOpts = (arg != NULL && !Jsi_ValueIsNull(interp,arg));",
          "1560:     if ((hasOpts && Jsi_OptionsProcess(interp, Demo_Specs, cmdPtr, arg, 0) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:     cmdPtr->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1562:         DemoObjFree(interp, cmdPtr);",
          "1563:         return JSI_ERROR;",
          "1564:     }",
          "1566:     Jsi_Value *toacc = NULL;",
          "1567:     if (Jsi_FunctionIsConstructor(funcPtr)) {",
          "1568:         toacc = _this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1570:     Jsi_LogDebugExt(\"Starting\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1695: }",
          "1696: #endif",
          "1697: #endif",
          "1698: ';",
          "1700:     var retval = main();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1703: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "lib/Safe.jsi||lib/Safe.jsi": [
          "File: lib/Safe.jsi -> lib/Safe.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         putsCmd     :null,      // Command to relay Interp.putsCallback.",
          "14:         quiet       :false,     // Quiet mode",
          "15:         retAll      :false,     // Return object with these fields: retVal, putsVal, msgVal.",
          "17:     };",
          "18:     var self = {",
          "19:         srcFile:null,",
          "",
          "[Removed Lines]",
          "16:         unitTest    :false      // Enable unit test output (ie. like -U).",
          "",
          "[Added Lines]",
          "16:         unitTest    :false,     // Enable unit test output (ie. like -U).",
          "17:         write       :false,     // Enable write to given dir.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:             if (isdir) {",
          "87:                 sopts.scriptFile='';",
          "88:                 sopts.safeReadDirs = [fn];",
          "89:             } else {",
          "90:                 sopts.safeReadDirs = [File.dirname(fn)];",
          "91:                 sopts.scriptFile=fn;",
          "92:             }",
          "94:             if (self.unitTest) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:                 if (self.write)",
          "91:                     sopts.safeWriteDirs = [fn];",
          "95:                 if (self.write)",
          "96:                     sopts.safeWriteDirs = sopts.safeReadDirs;",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> lib/SqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:             if (req.where !== '') req.where = ' WHERE '+req.where;",
          "192:             if (req.orderby !== '') req.orderby = ' ORDER BY '+req.orderby;",
          "193:             req.limit = parseInt(req.limit);",
          "195:             req.offset = parseInt(req.offset);",
          "197:             var query = 'select '+cols+' from \"'+table+'\" '+req.where;",
          "198:             query += ' ' + req.orderby + ' limit '+req.limit;",
          "199:             if (req.offset)",
          "",
          "[Removed Lines]",
          "194:             if (req.limit === NaN || req.limit<=0) req.limit = 20;",
          "196:             if (req.offset === NaN || req.offset<=0) req.offset = 0;",
          "",
          "[Added Lines]",
          "194:             if (isNaN(req.limit)|| req.limit<=0) req.limit = 20;",
          "196:             if (isNaN(req.offset) || req.offset<=0) req.offset = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:             WsSend(id,'loadTable', lst);",
          "209:         }",
          "210:         catch (e) {",
          "211:             WsSend(id,'error', e);",
          "212:         }",
          "213:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:             LogWarn(\"ERROR:\", e);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:             WsSend(id,'loadTable', lst);",
          "225:         }",
          "226:         catch (e) {",
          "227:             WsSend(id,'error', e);",
          "228:         }",
          "229:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:             LogWarn(\"ERROR:\", e);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 39",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 40",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392: } Jsi_CmdSpec;",
          "394: typedef struct {",
          "396:     int traceCall;",
          "397:     bool coverage;",
          "398:     bool profile;",
          "",
          "[Removed Lines]",
          "395:     int log, logmask;",
          "",
          "[Added Lines]",
          "395:     uint log, logmask;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401: typedef struct {",
          "402:     struct Jsi_OptionSpec *spec;",
          "404:     Jsi_CmdSpec *cmdSpec;",
          "405:     Jsi_Value *info;",
          "406:     void *reserved[3]; // Reserved for future use.",
          "",
          "[Removed Lines]",
          "403:     void *data;",
          "",
          "[Added Lines]",
          "403:     void *data; // \"status\" output in Info.package",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1250: typedef struct {",
          "",
          "[Removed Lines]",
          "1237: #define Jsi_LogBug(fmt,...) Jsi_LogMsg(interp, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1238: #define Jsi_LogError(fmt,...) Jsi_LogMsg(interp, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1239: #define Jsi_LogParse(fmt,...) Jsi_LogMsg(interp, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1240: #define Jsi_LogWarn(fmt,...) Jsi_LogMsg(interp, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1241: #define Jsi_LogInfo(fmt,...) Jsi_LogMsg(interp, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1242: #define Jsi_LogDebug(fmt,...) Jsi_LogMsg(interp, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1243: #define Jsi_LogTrace(fmt,...) Jsi_LogMsg(interp, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogTest(fmt,...) Jsi_LogMsg(interp, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1246: JSI_EXTERN Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,3,4)));",
          "",
          "[Added Lines]",
          "1238: #define Jsi_LogBug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1239: #define Jsi_LogError(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1240: #define Jsi_LogParse(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1241: #define Jsi_LogWarn(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1242: #define Jsi_LogInfo(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1243: #define Jsi_LogDebug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogTrace(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogTest(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1247: #ifndef JSI_EXT_OPTS_OMIT",
          "1248: #define Jsi_LogBugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1251: #define Jsi_LogWarnExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogInfoExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogTestExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1256: #else",
          "1257: #define Jsi_LogBugExt(fmt,...)",
          "1258: #define Jsi_LogErrorExt(fmt,...)",
          "1259: #define Jsi_LogParseExt(fmt,...)",
          "1260: #define Jsi_LogWarnExt(fmt,...)",
          "1261: #define Jsi_LogInfoExt(fmt,...)",
          "1262: #define Jsi_LogDebugExt(fmt,...)",
          "1263: #define Jsi_LogTraceExt(fmt,...)",
          "1264: #define Jsi_LogTestExt(fmt,...)",
          "1265: #endif",
          "1267: JSI_EXTERN Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,4, 5)));",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756:     return rc;",
          "757: }",
          "759: Jsi_Number Jsi_PkgRequireEx(Jsi_Interp *interp, const char *name, Jsi_Number version, Jsi_PkgOpts **poptsPtr)",
          "760: {",
          "761:     jsi_PkgInfo *ptr = jsi_PkgGet(interp, name), *ptr2 = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759: Jsi_PkgOpts *Jsi_CommandPkgOpts(Jsi_Interp *interp, Jsi_Func *func) {",
          "760:     if (!func || func->type != FC_BUILDIN || !func->fobj->func->pkg) return NULL;",
          "761:     Jsi_PkgOpts *popts = &func->fobj->func->pkg->popts;",
          "762:     return popts;",
          "763: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "767:                 return -1;",
          "768:             ptr->needInit = 0;",
          "769:         }",
          "772:         return ptr->version;",
          "773:     } else if ((ptr2 = jsi_PkgGet(interp->topInterp, name)) && ptr2->initProc) {",
          "",
          "[Removed Lines]",
          "770:             if (poptsPtr)",
          "",
          "[Added Lines]",
          "776:         if (poptsPtr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "975:     jsi_PkgInfo *ptr;",
          "976:     Jsi_HashEntry *hPtr = Jsi_HashEntryFind(interp->packageHash, name);",
          "977:     Jsi_Value *opts = (popts?popts->info:NULL);",
          "978:     if (version<0) {",
          "979:         if (hPtr) {",
          "980:             ptr = (jsi_PkgInfo*)Jsi_HashValueGet(hPtr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "984:     jsi_Frame *fp = interp->framePtr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "988:     else {",
          "989:         if (hPtr) {",
          "990:             ptr = (jsi_PkgInfo*)Jsi_HashValueGet(hPtr);",
          "992:                 return Jsi_LogError(\"package %s already provided from: %s\", name, ptr->loadFile?ptr->loadFile:\"\");",
          "993:             return JSI_OK;",
          "994:         }",
          "",
          "[Removed Lines]",
          "991:             if (ptr && ptr->needInit==0)",
          "",
          "[Added Lines]",
          "998:             if (ptr && ptr->needInit==0 && fp->filePtr->fileName != ptr->loadFile)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "999:         ptr = (jsi_PkgInfo*)Jsi_Calloc(1, sizeof(*ptr));",
          "1000:         ptr->version = version;",
          "1001:         ptr->initProc = initProc;",
          "1003:         if (popts) {",
          "1004:             ptr->popts = *popts;",
          "1005:             if (popts->info)",
          "",
          "[Removed Lines]",
          "1002:         jsi_Frame *fp = interp->framePtr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1616: }",
          "1618: static Jsi_RC SysPutsCmd_(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1620: {",
          "1621:     int i = 0, cnt = 0, argc = 0, quote = (popts->file);",
          "1623:     const char *fn = NULL;",
          "1624:     Jsi_DString dStr, oStr;",
          "1625:     Jsi_Value *v;",
          "1626:     if (args)",
          "1627:         argc = Jsi_ValueGetLength(interp, args);",
          "1629:         v = Jsi_ValueArrayIndex(interp, args, 1);",
          "1630:         if ((isbool=Jsi_ValueIsBoolean(interp, v)))",
          "1631:             if (Jsi_ValueIsFalse(interp, v)) return JSI_OK;",
          "",
          "[Removed Lines]",
          "1619:     Jsi_Func *funcPtr, bool stdErr, jsi_LogOptions *popts, const char *argStr, bool conLog, int islog)",
          "1622:     bool isbool = 0;",
          "1628:     if (islog == 2 && argc > 2) {",
          "",
          "[Added Lines]",
          "1625:     Jsi_Func *funcPtr, bool stdErr, jsi_LogOptions *popts, const char *argStr, int islog)",
          "1628:     bool isbool = 0, isbool0 = 0;",
          "1634:     if (islog == 3 && argc > 1) {",
          "1635:         v = Jsi_ValueArrayIndex(interp, args, 0);",
          "1636:         if ((isbool0=Jsi_ValueIsBoolean(interp, v)))",
          "1637:             if (Jsi_ValueIsFalse(interp, v)) return JSI_OK;",
          "1638:     }",
          "1639:     else if (islog == 2 && argc > 2) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1648:     if (argStr)",
          "1649:         Jsi_DSAppend(&dStr, argStr, NULL);",
          "1650:     if (args) { // Assert may call with a null args",
          "1657:         for (; i < argc; ++i) {",
          "1658:             if (isbool && i==1)",
          "1659:                 continue;",
          "1660:             v = Jsi_ValueArrayIndex(interp, args, i);",
          "1661:             if (!v) continue;",
          "1662:             int len = 0;",
          "",
          "[Removed Lines]",
          "1652:             if (   ((!(interp->log&(1<<JSI_LOG_ERROR))) && jsi_PrefixMatch(argStr, \"ERROR: \"))",
          "1653:                 || ((!(interp->log&(1<<JSI_LOG_WARN))) && jsi_PrefixMatch(argStr, \"WARN: \"))",
          "1654:                 || ((!(interp->log&(1<<JSI_LOG_INFO))) && jsi_PrefixMatch(argStr, \"INFO: \")))",
          "1655:                 goto done;",
          "",
          "[Added Lines]",
          "1665:             if (isbool0 && i==0)",
          "1666:                 continue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1723: static Jsi_RC consoleErrorCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1724:     Jsi_Func *funcPtr)",
          "1725: {",
          "1728: }",
          "1730: static Jsi_RC consoleLogCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1731:     Jsi_Func *funcPtr)",
          "1732: {",
          "1735: }",
          "1736: static Jsi_RC consoleLogPCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1737:     Jsi_Func *funcPtr)",
          "1738: {",
          "1741: }",
          "1742: static Jsi_RC consolePutsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1743:     Jsi_Func *funcPtr)",
          "1744: {",
          "1745:     jsi_LogOptions lo = {};",
          "1747: }",
          "1749: #define FN_puts JSI_INFO(\"\\",
          "",
          "[Removed Lines]",
          "1726:     int conLog = ((interp->log&jsi_LogDefMaskVal)==jsi_LogDefMaskVal);",
          "1727:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", conLog, 1);",
          "1733:     int conLog = ((interp->log&jsi_LogDefMaskVal)==jsi_LogDefMaskVal);",
          "1734:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, conLog, 1);",
          "1739:     int conLog = ((interp->log&jsi_LogDefMaskVal)==jsi_LogDefMaskVal);",
          "1740:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, conLog, 2);",
          "1746:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0, 0);",
          "",
          "[Added Lines]",
          "1733:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 1);",
          "1739:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, 1);",
          "1744:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, 2);",
          "1750:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1752:     Jsi_Func *funcPtr)",
          "1753: {",
          "1754:     jsi_LogOptions lo = {};",
          "1756: }",
          "1758: static Jsi_RC SysLogCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1759:     Jsi_Func *funcPtr)",
          "1760: {",
          "1762: }",
          "1764: typedef struct {",
          "",
          "[Removed Lines]",
          "1755:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0, 0);",
          "1761:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, &interp->logOpts, NULL, 0, 1);",
          "",
          "[Added Lines]",
          "1759:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0);",
          "1765:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, &interp->logOpts, NULL, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1791:             logmask |= fp->filePtr->pkg->logmask;",
          "1792:         }",
          "1793:      }",
          "1796:     if (maskidx)",
          "1797:         logflag = logflag&(1<<maskidx);",
          "1798:     return logflag;",
          "",
          "[Removed Lines]",
          "1794:     if (logmask)",
          "1795:         logflag &= ~logmask;",
          "",
          "[Added Lines]",
          "1798:     logflag &= ~logmask;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1877:             jsi_LogOptions lo = {}, *loPtr = ((udata.mode==jsi_AssertModeLog || interp->tracePuts)?&interp->logOpts:&lo);",
          "1878:             Jsi_DSInit(&dStr);",
          "1879:             const char *imsg = Jsi_DSAppend(&dStr, msg, NULL);",
          "1881:             Jsi_DSFree(&dStr);",
          "1882:         } else",
          "1883:             rv = Jsi_LogError(\"%s\", msg);",
          "",
          "[Removed Lines]",
          "1880:             SysPutsCmd_(interp, NULL, _this, ret, funcPtr, !udata.noStderr, loPtr, imsg, 0, 0);",
          "",
          "[Added Lines]",
          "1883:             SysPutsCmd_(interp, NULL, _this, ret, funcPtr, !udata.noStderr, loPtr, imsg, 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4619:     }",
          "4620:     return \"\";",
          "4621: }",
          "4653: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4654:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "4623:     Jsi_Value *v2 = Jsi_ValueObjLookup(interp, v1, name, 0);",
          "4624:     if (v2 && Jsi_ValueIsFalse(interp, v2)) return true;",
          "4625:     return false;",
          "4626: }",
          "4628: static bool jsi_ModLogEnabled(Jsi_Interp *interp, Jsi_Value *v1, const char *name) {",
          "4629:     jsi_Frame *fptr = interp->framePtr;",
          "4630:     Jsi_Value *v2 = Jsi_ValueObjLookup(interp, v1, name, 0);",
          "4631:     if (v2 && Jsi_ValueIsTrue(interp, v2)) return true;",
          "4632: #ifndef JSI_OMIT_INTERP_ENV",
          "4633:     const char *fname = fptr->funcName;",
          "4634:     if (!fname) return false;",
          "4635:     const char *cp;",
          "4636:     static int isinit = 0;",
          "4637:     static const char *ce = NULL;",
          "4638:     if (!isinit) {",
          "4639:         isinit = 1;",
          "4640:         ce = getenv(\"JSI_PARSEOPTS\");",
          "4641:     }",
          "4642:     if (!ce) return false;",
          "4643:     int len = Jsi_Strlen(fname);",
          "4644:     cp = Jsi_Strstr(ce, fname);",
          "4645:     if (!cp || cp[len]!='=') return false;",
          "4646:     char buf[JSI_BUFSIZ];",
          "4647:     snprintf(buf, sizeof(buf), \"%s=%s\", fname, name);",
          "4648:     return (Jsi_Strstr(ce, buf) != NULL);",
          "4649: #endif",
          "4650:     return false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4823:                  }",
          "4824:             }",
          "4825:         }",
          "4856:     }",
          "4857:     return rc;",
          "4858: }",
          "",
          "[Removed Lines]",
          "4828:         if (mo && mo->name) { \\",
          "4829:             evfunc->callflags.bits.logFlag |= (1<<jsi_Oplf_##lname);\\",
          "4830:         } else if ((vlv = Jsi_ValueObjLookup(interp, v1, #name, 0))) { \\",
          "4831:              if (Jsi_ValueIsFalse(interp, vlv)) { \\",
          "4832:                  puts(\"LOGMASK\"); \\",
          "4833:                  evfunc->callflags.bits.nologFlag |= (1<<jsi_Oplf_##lname); \\",
          "4834:              } else \\",
          "4835:                 evfunc->callflags.bits.logFlag |= (1<<jsi_Oplf_##lname);\\",
          "4836:         }",
          "4837:         jsiModLogCheck(Debug, debug)",
          "4838:         jsiModLogCheck(Trace, trace)",
          "4842:             evfunc->callflags.bits.nologFlag |= (1<<jsi_Oplf_debug);",
          "4843:         } else if (jsi_ModLogEnabled(interp, v1, \"Debug\") || (mo && mo->Debug)) {",
          "4845:             cptr->logflag |= (1<<jsi_Oplf_debug);",
          "4846:             evfunc->callflags.bits.logFlag |= (1<<jsi_Oplf_debug);",
          "4847:         }",
          "4848:         if (jsi_ModLogEnabled(interp, v1, \"Trace\") || (mo && mo->Trace)) {",
          "4850:             cptr->logflag |= (1<<jsi_Oplf_trace);",
          "4851:         }",
          "4852:         if (jsi_ModLogEnabled(interp, v1, \"Test\") || (mo && mo->Test)) {",
          "4854:             cptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4955: }",
          "4957: static Jsi_RC SysLogDebugCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4959: static Jsi_RC SysLogTraceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4961: static Jsi_RC SysLogTestCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4963: static Jsi_RC SysLogInfoCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4965: static Jsi_RC SysLogWarnCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4967: static Jsi_RC SysLogErrorCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4971: static Jsi_CmdSpec utilCmds[] = {",
          "",
          "[Removed Lines]",
          "4958: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"DEBUG: \", 3, 2); }",
          "4960: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TRACE: \", 3, 2); }",
          "4962: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TEST: \", 3, 2); }",
          "4964: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"INFO: \", 3, 2); }",
          "4966: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"WARN: \", 3, 2); }",
          "4968: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 3, 2); }",
          "",
          "[Added Lines]",
          "4901: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"DEBUG: \", 3); }",
          "4903: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TRACE: \", 3); }",
          "4905: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TEST: \", 3); }",
          "4907: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"INFO: \", 3); }",
          "4909: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"WARN: \", 3); }",
          "4911: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 3); }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define _jsi_THIS (interp->Obj_this)",
          "13: #define _jsi_THISIDX(s) interp->Obj_this[s]",
          "17: #define _jsi_StrictChk(v) ((strict==0 || !Jsi_NumberIsNaN(v->d.num)) ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "18: #define _jsi_StrictChk2(v1,v2)  ((strict==0  || (Jsi_NumberIsNaN(v1->d.num)==0 && Jsi_NumberIsNaN(v2->d.num)==0))  ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "",
          "[Removed Lines]",
          "15: static Jsi_RC jsiEvalLogErr(Jsi_Interp *interp, const char *str) { Jsi_LogMsg(interp, JSI_ERROR, \"%s\", str); return JSI_ERROR; }",
          "",
          "[Added Lines]",
          "15: static Jsi_RC jsiEvalLogErr(Jsi_Interp *interp, const char *str) { return Jsi_LogError(\"Eval error: %s\", str); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348: }",
          "352: static int jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "353:      jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id, Jsi_Value *top, const char *nam) {",
          "",
          "[Removed Lines]",
          "350: #define JSI_DO_THROW(nam) if (jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam) != JSI_OK) { rc = JSI_ERROR; break; }",
          "",
          "[Added Lines]",
          "350: #define JSI_DO_THROW(nam) if ((rc=jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam)) != JSI_OK) break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsiEvalPrint(_jsi_STACKIDX(i)));",
          "412:     }",
          "413:     Jsi_Printf(interp, jsi_Stderr, \"]\");",
          "415:         const char *fn = ip->filePtr->fileName,  *cp = Jsi_Strrchr(fn, '/');",
          "416:         if (cp) fn = cp+1;",
          "417:         Jsi_Printf(interp, jsi_Stderr, \", %s:%d\", fn, ip->Line);",
          "",
          "[Removed Lines]",
          "414:     if (ip->filePtr->fileName[0]) {",
          "",
          "[Added Lines]",
          "414:     if (ip->filePtr && ip->filePtr->fileName[0]) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1989:                 Jsi_LogBug(\"invalid op ceod: %d\", ip->op);",
          "1990: #endif",
          "1991:         }",
          "1992:         lop = plop;",
          "1993:         ip++;",
          "1994:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1992:         if (rc == JSI_ERROR) {",
          "1993:             JSI_DO_THROW(\"error\");",
          "1994:             rc = JSI_OK;",
          "1995:         }",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     Jsi_Chan *ch = NULL;",
          "437:     void *data;",
          "438:     int fnl = 0;",
          "439:     const char *fileName = Jsi_ValueString(interp, file, &fnl), *oldFN = fileName;",
          "440:     if (!fileName || !fnl) {",
          "441:         Jsi_LogError(\"expected string filename\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:     char pbuf[FILENAME_MAX];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "518:         else",
          "519:             Jsi_LogError(\"File open failed '%s'\", fileName);",
          "520:     } else {",
          "525:         }",
          "526:         FILE *fp = fopen(fileName, Mode);",
          "527:         fsPtr = &jsiFilesystem;",
          "",
          "[Removed Lines]",
          "521:         if (interp->isSafe && ((rc && Jsi_InterpAccess(interp, file, JSI_INTACCESS_CREATE) != JSI_OK)",
          "522:         || Jsi_InterpAccess(interp, file, aflag) != JSI_OK)) {",
          "523:             Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "524:             goto done;",
          "",
          "[Added Lines]",
          "522:         if (interp->isSafe) {",
          "523:             if ((rc && Jsi_InterpAccess(interp, file, JSI_INTACCESS_CREATE) != JSI_OK)",
          "524:             || (Jsi_InterpAccess(interp, file, aflag) != JSI_OK",
          "525:                 && (aflag || !interp->opts.argv[0] || Jsi_Strcmp(fileName, Jsi_FileRealpathStr(interp, interp->opts.argv[0], pbuf))))",
          "526:             ) {",
          "527:                 Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "528:                 goto done;",
          "529:             }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     JSI_SIG_NAMEDATA",
          "260: } jsi_Sig;",
          "264: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "265: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask);",
          "",
          "[Removed Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "263: #define jsi_LogDefMaskVal (uint)~((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "",
          "[Added Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsgExt(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "263: #define jsi_LogDefVal (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1137:     jsi_SubOptions subOpts;",
          "1138:     bool isInteractive;",
          "1139:     const char *confArgs;",
          "1140:     Jsi_Value *stdinStr;",
          "1141:     Jsi_Value *stdoutStr;",
          "1142:     Jsi_TypeCheck typeCheck;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140:     const char *lockDown;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1190:     Jsi_Value *callee;",
          "1191:     jsi_Pstate *ps, *parsePs;",
          "1192:     Jsi_Value *argv0;",
          "1193:     Jsi_Value *args;",
          "1194:     Jsi_Value *console;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193:     const char *Argv0;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     JSI_OPT(STRKEY,Jsi_Interp, jsppChars,   .help=\"Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string\"),",
          "98:     JSI_OPT(FUNC,  Jsi_Interp, jsppCallback,.help=\"Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number)\"),",
          "99:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
          "100:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
          "101:     JSI_OPT(CUSTOM,Jsi_Interp, log,         .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     JSI_OPT(STRKEY,Jsi_Interp, lockDown,    .help=\"Directory to Safe-lockdown interpreter to\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:         dohelp:",
          "772:         puts(\"USAGE:\\n  jsish [PREFIX-OPTS] [COMMAND-OPTS|FILE] ...\\n\"",
          "773:           \"\\nPREFIX-OPTS:\\n\"",
          "783:           \"\\nCOMMAND-OPTS:\\n\"",
          "784:           \"  -a\\t\\tArchive: mount an archive (zip, sqlar or fossil repo) and run module.\\n\"",
          "785:           \"  -c\\t\\tCData: generate .c or JSON output from a .jsc description.\\n\"",
          "786:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "788:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "789:           \"  -m\\t\\tModule: utility create/manage/invoke a Module.\\n\"",
          "790:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "",
          "[Removed Lines]",
          "774:           \"  --C FILE\\tOption file of config options.\\n\"",
          "775:           \"  --F\\t\\tTrace all function calls and returns.\\n\"",
          "776:           \"  --I OPT=VAL\\tInterp option bits: equivalent to Interp.conf({OPT:VAL}).\\n\"",
          "777:           \"  --L OPT\\tLogging bits: equivalent to Interp.conf({log:'XXX'})..\\n\"",
          "778:           \"  --S PATH\\tSet safeMode to \\\"lockdown\\\" using PATH for safe(Read/Write)Dirs.\\n\"",
          "779:           \"  --T OPT\\tTypechecking bits: equivalent to Interp.conf({typeCheck:'XXX'})..\\n\"",
          "780:           \"  --U\\t\\tDisplay unittest output, minus pass/fail compare.\\n\"",
          "781:           \"  --V\\t\\tSame as --U, but adds file and line number to output.\\n\"",
          "782:           \"  --X OPT\\tTracing bits: equivalent to Interp.conf({traceCall:'XXX'})..\\n\"",
          "787:           \"  -e CODE ...\\tEvaluate javascript CODE.\\n\"",
          "",
          "[Added Lines]",
          "775:           \"  --E CODE\\tJavascript to evaluate before program starts\\n\"",
          "776:           \"  --I OPT=VAL\\tInterp option bits: equivalent to Interp.conf({OPT:VAL}); VAL defaults to true.\\n\"",
          "781:           \"  -e CODE\\tEvaluate javascript and exit.\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:                 rc = Jsi_EvalString(interp, \"moduleRun('Zip');\", JSI_EVAL_ISMAIN);",
          "886:                 break;",
          "887:             default:",
          "890:                 return jsi_DoExit(interp, 1);",
          "891:         }",
          "892:     } else {",
          "",
          "[Removed Lines]",
          "888:                 puts(\"usage: jsish [  --C FILE | --I OPT:VAL | --L OPT | --T OPT | --X OPT | --S PATH | --U | --V | --F ] | -e STRING |\\n\\t\"",
          "889:                 \"| -a | -c | -d | -D | -h | -m | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "[Added Lines]",
          "882:                 puts(\"usage: jsish [ --E CODE | --I OPT:VAL ] \\n\\t\"",
          "883:                 \"-a | -c | -d | -D | -e CODE | -h | J | -m | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1056:     return rc;",
          "1057: }",
          "1059: static Jsi_Interp* jsi_InterpNew(Jsi_Interp *parent, Jsi_Value *opts, Jsi_InterpOpts *iopts)",
          "1060: {",
          "1061:     Jsi_Interp* interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1053: static void jsi_UnitTestSetup(Jsi_Interp *interp)  {",
          "1054:     if (interp->unitTest&2) {",
          "1055:         interp->logOpts.before = 1;",
          "1056:         interp->logOpts.full = 1;",
          "1057:         interp->tracePuts = 1;",
          "1058:         interp->noStderr = 1;",
          "1059:     }",
          "1060:     if (interp->unitTest&1)",
          "1061:         interp->log |= JSI_LOG_ASSERT;",
          "1062:     if ((interp->unitTest&3) == 3)",
          "1063:         interp->tracePuts = 1;",
          "1064: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1103:     interp->logOpts.func = 1;",
          "1104:     interp->logOpts.before = 1;",
          "1105:     interp->typeCheck.strict = 1;",
          "1107:     int argc = interp->opts.argc;",
          "1108:     char **argv = interp->opts.argv;",
          "1109:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1106:     interp->log = jsi_LogDefMaskVal;",
          "",
          "[Added Lines]",
          "1113:     interp->log = ~jsi_LogDefVal;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1148:             break;",
          "1149:         else {",
          "1150:             switch (aio[2]) {",
          "1154:                     continue;",
          "1155:                 case 'I': {",
          "1156:                     const char *aio2 = argv[iocnt+1];",
          "",
          "[Removed Lines]",
          "1151:                 case 'T': case 'S': case 'C': case 'L': case 'X':",
          "1152:                     continue;",
          "1153:                 case 'F': case 'U': case 'V':  iocnt--;",
          "",
          "[Added Lines]",
          "1158:                 case 'E':",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1219:             break;",
          "1220:         else {",
          "1221:             switch (aio[2]) {",
          "1288:                     interp->iskips+=2;",
          "1289:                     continue;",
          "1290:                 }",
          "",
          "[Removed Lines]",
          "1222:                 case 'F':",
          "1223:                     interp->traceCall |= (jsi_callTraceFuncs |jsi_callTraceArgs |jsi_callTraceReturn | jsi_callTraceBefore | jsi_callTraceFullPath);",
          "1224:                     iocnt--;",
          "1225:                     interp->iskips++;",
          "1226:                     continue;",
          "1227:                 case 'U':",
          "1228:                     interp->log |= JSI_LOG_ASSERT;",
          "1229:                     interp->unitTest = 1;",
          "1230:                     iocnt--;",
          "1231:                     interp->iskips++;",
          "1232:                     continue;",
          "1233:                 case 'V':",
          "1234:                     interp->log |= JSI_LOG_ASSERT;",
          "1235:                     interp->unitTest = 5;",
          "1236:                     interp->tracePuts = 1;",
          "1237:                     iocnt--;",
          "1238:                     interp->iskips++;",
          "1239:                     continue;",
          "1240:                 case 'C':",
          "1241:                     if (interp->confFile)",
          "1242:                        Jsi_LogWarn(\"overriding confFile: %s\", interp->confFile);",
          "1243:                     interp->confFile = argv[iocnt+1];",
          "1244:                     interp->iskips+=2;",
          "1245:                     continue;",
          "1246:                 case 'S': {",
          "1247:                     struct stat sb;",
          "1248:                     const char* path = argv[iocnt+1]; //TODO: convert to Jsi_Value first?",
          "1249:                     if (!path || stat(path, &sb)",
          "1250:                         || !((S_ISREG(sb.st_mode) && !access(path, W_OK)) || (S_ISDIR(sb.st_mode) && !access(path, X_OK)))) {",
          "1251:                         Jsi_LogError(\"Lockdown path must exist and be a writable file or executable dir: %s\", path);",
          "1252:                         Jsi_InterpDelete(interp);",
          "1253:                         return NULL;",
          "1254:                     }",
          "1255:                     interp->isSafe = true;",
          "1256:                     interp->safeMode = jsi_safe_Lockdown;",
          "1257:                     if (interp->safeWriteDirs) {",
          "1258:                         Jsi_LogWarn(\"Overriding safeWriteDirs\");",
          "1259:                         Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "1260:                     }",
          "1261:                     const char *vda[2] = {};",
          "1262:                     char npath[PATH_MAX];",
          "1263:                     vda[0] = Jsi_FileRealpathStr(interp, path, npath);",
          "1264:                     interp->safeWriteDirs = Jsi_ValueNewArray(interp, vda, 1);",
          "1265:                     Jsi_IncrRefCount(interp, interp->safeWriteDirs);",
          "1266:                     if (!interp->safeReadDirs) {",
          "1267:                         interp->safeReadDirs = interp->safeWriteDirs;",
          "1268:                         Jsi_IncrRefCount(interp, interp->safeReadDirs);",
          "1269:                     }",
          "1270:                     interp->iskips+=2;",
          "1271:                     continue;",
          "1272:                 }",
          "1273:                 case 'T': case 'L': case 'X': {",
          "1274:                     Jsi_Value *lv = Jsi_ValueNewStringConst(interp, argv[iocnt+1], -1);",
          "1275:                     Jsi_IncrRefCount(interp, lv);",
          "1276:                     if (aio[2]=='L')",
          "1277:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"log\", lv, 0);",
          "1278:                     else if (aio[2]=='T')",
          "1279:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"typeCheck\", lv, 0);",
          "1280:                     else",
          "1281:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"traceCall\", lv, 0);",
          "1282:                     Jsi_DecrRefCount(interp, lv);",
          "1283:                     if (JSI_OK != rc) {",
          "1285:                         Jsi_InterpDelete(interp);",
          "1286:                         return NULL;",
          "1287:                     }",
          "",
          "[Added Lines]",
          "1228:                 case 'E': {",
          "1229:                     Jsi_DSAppend(&interp->interpEvalQ, argv[iocnt+1], NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1484:     interp->framePtr->ingsc = interp->gsc = jsi_ScopeChainNew(interp, 0);",
          "1493:     if (interp->args && argc) {",
          "1494:         Jsi_LogBug(\"args may not be specified both as options and parameter\");",
          "1495:         Jsi_InterpDelete(interp);",
          "",
          "[Removed Lines]",
          "1487:     if (interp->unitTest&2) {",
          "1488:         interp->logOpts.before = 1;",
          "1489:         interp->logOpts.full = 1;",
          "1490:         interp->tracePuts = 1;",
          "1491:         interp->noStderr = 1;",
          "1492:     }",
          "",
          "[Added Lines]",
          "1429:     jsi_UnitTestSetup(interp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1580:     }",
          "1581: #endif",
          "1582:     Jsi_PkgProvide(interp, \"Jsi\", JSI_VERSION, NULL);",
          "1583:     if (argc > 0) {",
          "1584:         char *ss = argv0;",
          "1585:         char epath[PATH_MAX] = \"\"; // Path of executable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1519:     if (Jsi_DSLength(&interp->interpEvalQ)) {",
          "1520:         rc = Jsi_EvalString(interp, Jsi_DSValue(&interp->interpEvalQ), 0);",
          "1521:         Jsi_DSSetLength(&interp->interpEvalQ, 0);",
          "1522:         if (JSI_OK != rc) {",
          "1523:             Jsi_InterpDelete(interp);",
          "1524:             return NULL;",
          "1525:         }",
          "1526:     }",
          "1527:     if (interp->lockDown) {",
          "1528:         struct stat sb;",
          "1529:         const char* path = interp->lockDown;",
          "1530:         if (!path || stat(path, &sb)",
          "1531:             || !((S_ISREG(sb.st_mode) && !access(path, W_OK)) || (S_ISDIR(sb.st_mode) && !access(path, X_OK)))) {",
          "1532:             Jsi_LogError(\"Lockdown path must exist and be a writable file or executable dir: %s\", path);",
          "1533:             Jsi_InterpDelete(interp);",
          "1534:             return NULL;",
          "1535:         }",
          "1536:         interp->isSafe = true;",
          "1537:         interp->safeMode = jsi_safe_Lockdown;",
          "1538:         if (interp->safeWriteDirs) {",
          "1539:             Jsi_LogWarn(\"Overriding safeWriteDirs\");",
          "1540:             Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "1541:         }",
          "1542:         const char *vda[2] = {};",
          "1543:         char npath[PATH_MAX];",
          "1544:         vda[0] = Jsi_FileRealpathStr(interp, path, npath);",
          "1545:         interp->safeWriteDirs = Jsi_ValueNewArray(interp, vda, 1);",
          "1546:         Jsi_IncrRefCount(interp, interp->safeWriteDirs);",
          "1547:         if (!interp->safeReadDirs) {",
          "1548:             interp->safeReadDirs = interp->safeWriteDirs;",
          "1549:             Jsi_IncrRefCount(interp, interp->safeReadDirs);",
          "1550:         }",
          "1551:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2904:             Jsi_DecrRefCount(sinterp, popts);",
          "2905:         Jsi_CleanValue(sinterp, interp, *ret, ret);",
          "2906:     }",
          "2907:     return rc;",
          "2908: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2876:     jsi_UnitTestSetup(sinterp);",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #if JSI__MYSQL==1",
          "4: typedef enum { MYSQL_SIG_DB = 0xbeefdeaa, MYSQL_SIG_FUNC, MYSQL_SIG_EXEC, MYSQL_SIG_STMT } MySql_Sig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #define JSI_EXT_OPTS jdb->popts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: #define JSI_DBQUERY_PRINTF(fmt, ...) fprintf(stderr, fmt, ##__VA_ARGS__)",
          "46: #endif",
          "49:     int init;",
          "56: static Jsi_OptionSpec mydb_ObjCmd_Specs[] =",
          "57: {",
          "62: };",
          "",
          "[Removed Lines]",
          "48: typedef struct mydb_ObjCmd {",
          "52: } mydb_ObjCmd;",
          "54: static mydb_ObjCmd mydbObjCmd = {};",
          "58:     JSI_OPT(INT,   mydb_ObjCmd, init, .help=\"Init counter\"),",
          "59:     JSI_OPT(INT,   mydb_ObjCmd, activeCnt, .help=\"Number of active objects\"),",
          "60:     JSI_OPT(INT,   mydb_ObjCmd, newCnt,    .help=\"Number of new calls\"),",
          "61:     JSI_OPT_END(mydb_ObjCmd, .help=\"Options for Sqlite module\")",
          "",
          "[Added Lines]",
          "49: typedef struct mydb_Pkg_Status {",
          "53: } mydb_Pkg_Status;",
          "55: static mydb_Pkg_Status mydb_PkgStatus = {};",
          "59:     JSI_OPT(INT,   mydb_Pkg_Status, init, .help=\"Init counter\"),",
          "60:     JSI_OPT(INT,   mydb_Pkg_Status, activeCnt, .help=\"Number of active objects\"),",
          "61:     JSI_OPT(INT,   mydb_Pkg_Status, newCnt,    .help=\"Number of new calls\"),",
          "62:     JSI_OPT_END(mydb_Pkg_Status, .help=\"Options for Sqlite module\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:     MySql_Sig sig;",
          "193:     Jsi_Value *host;",
          "194:     const char *user;",
          "195:     const char *password;",
          "",
          "[Removed Lines]",
          "192:     mydb_ObjCmd *_;",
          "",
          "[Added Lines]",
          "193:     mydb_Pkg_Status *_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:     Jsi_Value* udata;",
          "225:     Jsi_Value *sslKey, *sslCert, *sslCA, *sslCAPath, *sslCipher;",
          "226:     Jsi_Hash *typeNameHash;",
          "227: } MySqlObj;",
          "229: typedef struct MyDbEvalContext {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:     Jsi_PkgOpts *popts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "401:     if (m == MYSQL_NO_DATA)",
          "402:         return JSI_BREAK;",
          "403:     if (m)",
          "405:     return JSI_OK;",
          "406: }",
          "",
          "[Removed Lines]",
          "404:         return Jsi_LogError(\"fetch failed: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "406:         return Jsi_LogErrorExt(\"fetch failed: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "574:                             const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "575:                             Jsi_DSAppend(&eStr, (n++?\", \":\"\"), key, NULL);",
          "576:                         }",
          "578:                         Jsi_DSFree(&eStr);",
          "579:                     }",
          "580:                     Jsi_DSFree(&tStr);",
          "",
          "[Removed Lines]",
          "577:                         Jsi_LogWarn(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "[Added Lines]",
          "579:                         Jsi_LogWarnExt(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "650:     if (!prep) {",
          "651:         myStmt = mysql_stmt_init(jdb->db);",
          "652:         if (!myStmt)",
          "654:         char **paramNames;",
          "655:         int paramCnt;",
          "656:         int namedParams = 0;",
          "",
          "[Removed Lines]",
          "653:             return Jsi_LogError(\"can't get statement: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "655:             return Jsi_LogErrorExt(\"can't get statement: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "662:             Jsi_DSInit(&nsStr);",
          "663:             Jsi_DSInit(&nnStr);",
          "664:             if (MySqlExtractParmNames(jdb, zSql, &nsStr, &nnStr) != JSI_OK)",
          "666:             else if (Jsi_DSLength(&nnStr)) {",
          "667:                 namedParams = 1;",
          "668:                 zSql = Jsi_DSFreeDup(&nsStr);",
          "",
          "[Removed Lines]",
          "665:                 rc = Jsi_LogError(\"parsing names from query: %s\", zSql);",
          "",
          "[Added Lines]",
          "667:                 rc = Jsi_LogErrorExt(\"parsing names from query: %s\", zSql);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "678:         if (mysql_stmt_prepare(myStmt, zSql, Jsi_Strlen(zSql)) )",
          "679:         {",
          "681:             mysql_stmt_close(myStmt);",
          "682:             if (namedParams) {",
          "683:                 Jsi_DSFree(naStr);",
          "",
          "[Removed Lines]",
          "680:             Jsi_LogError(\"error in sql: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "682:             Jsi_LogErrorExt(\"error in sql: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "737: static Jsi_RC mdbEvalPrep(MyDbEvalContext *p) {",
          "738:     MysqlPrep *prep = p->prep;",
          "739:     Jsi_Interp *interp = p->jdb->interp;",
          "740:     Jsi_RC rc = JSI_OK;",
          "741:     if( p->prep==0 ) {",
          "742:         rc = mdbPrepareAndBind(p); //p->jdb, p->zSql, &p->zSql, &p->prep);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     MySqlObj *jdb = p->jdb;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "749:         }",
          "750:         if (mysql_stmt_execute(prep->myStmt)) {",
          "751:             Jsi_Interp *interp = p->jdb->interp;",
          "753:         }",
          "754:         if (p->jdb->optPtr->prefetch && mysql_stmt_store_result(prep->myStmt)) {",
          "756:             p->jdb->optPtr->prefetch = 0;",
          "757:         }",
          "758:         MYSQL_RES *res = mysql_stmt_result_metadata(prep->myStmt);",
          "",
          "[Removed Lines]",
          "752:             rc = Jsi_LogError(\"execute failed: %s\", mysql_error(p->jdb->db));",
          "755:             Jsi_LogWarn(\"prefetch failed, disabling: %s\", mysql_error(p->jdb->db));",
          "",
          "[Added Lines]",
          "755:             rc = Jsi_LogErrorExt(\"execute failed: %s\", mysql_error(p->jdb->db));",
          "758:             Jsi_LogWarnExt(\"prefetch failed, disabling: %s\", mysql_error(p->jdb->db));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "929:         tname[0] = 0;",
          "930:         if (zVar == NULL) {",
          "931:             if (!jdb->optPtr || !(apv=jdb->optPtr->values))",
          "933:             if (!(pv =Jsi_ValueArrayIndex(interp, apv, i-1)))",
          "935:         }",
          "936:         else if ((zVar[0]!='$' && zVar[0]!=':' && zVar[0]!='@') )",
          "939:             int zvLen = Jsi_Strlen(zVar);",
          "940:             char *zcp;",
          "",
          "[Removed Lines]",
          "932:                 return Jsi_LogError(\"? bind without values for param %d\", i);",
          "934:                 return Jsi_LogError(\"array element %d missing\", nVar);",
          "937:             return Jsi_LogError(\"can not find bind var %s\", zVar); else {",
          "",
          "[Added Lines]",
          "935:                 return Jsi_LogErrorExt(\"? bind without values for param %d\", i);",
          "937:                 return Jsi_LogErrorExt(\"array element %d missing\", nVar);",
          "940:             return Jsi_LogErrorExt(\"can not find bind var %s\", zVar); else {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "980:         if(!pv ) {",
          "981:             if (!jdb->bindWarn) {",
          "983:                 break;",
          "984:             } else",
          "986:         } else {",
          "987:             if (btype && !Jsi_ValueIsUndef(interp, pv)) {",
          "988:                 int done = 0, match = 1, cast = (jdb->optPtr->typeCheck==mdbTypeCheck_Cast);",
          "",
          "[Removed Lines]",
          "982:                 rc = Jsi_LogError(\"unknown bind param: %s\", zVar);",
          "985:                 Jsi_LogWarn(\"unknown bind param: %s\", zVar);",
          "",
          "[Added Lines]",
          "985:                 rc = Jsi_LogErrorExt(\"unknown bind param: %s\", zVar);",
          "988:                 Jsi_LogWarnExt(\"unknown bind param: %s\", zVar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1039: errout:",
          "1040:                  {",
          "1041:                     int ltyp = (jdb->optPtr->typeCheck==mdbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "1043:                     if (ltyp == JSI_LOG_ERROR)",
          "1044:                         return JSI_ERROR;",
          "1045:                 }",
          "",
          "[Removed Lines]",
          "1042:                     Jsi_LogMsg(interp, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "1045:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1090:                     bind->buffer_type = MYSQL_TYPE_BLOB;",
          "1091:             } else {",
          "1092:                 if (!jdb->bindWarn) {",
          "1094:                     break;",
          "1095:                 } else {",
          "1097:                     goto bindnull;",
          "1098:                 }",
          "1099:             }",
          "1100:         }",
          "1101:     }",
          "1102:     if (mysql_stmt_bind_param(prep->myStmt, prep->bindParam))",
          "1104:     return rc;",
          "1105: }",
          "",
          "[Removed Lines]",
          "1093:                     rc = Jsi_LogError(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1096:                     Jsi_LogWarn(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1103:         rc = Jsi_LogError(\"bind failed: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "1096:                     rc = Jsi_LogErrorExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1099:                     Jsi_LogWarnExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1106:         rc = Jsi_LogErrorExt(\"bind failed: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1215:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "1216:     MysqlPrep *prep = p->prep;",
          "1217:     SqlFieldResults *field = prep->fieldResult+iCol;",
          "1218:     Jsi_Interp *interp = p->jdb->interp;",
          "1219:     if (field->isnull)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1220:     MySqlObj *jdb = p->jdb;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1256:             return;",
          "1257:         }",
          "1258:         default:",
          "1261:     }",
          "1262: }",
          "",
          "[Removed Lines]",
          "1259:             Jsi_LogWarn(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "[Added Lines]",
          "1263:             Jsi_LogWarnExt(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1265: static Jsi_Value* mdbEvalSetColumnValue(MyDbEvalContext *p, int iCol, Jsi_Value **val) {",
          "1266:     Jsi_Interp *interp = p->jdb->interp;",
          "1267:     MysqlPrep *prep = p->prep;",
          "1268:     SqlFieldResults *field = prep->fieldResult+iCol;",
          "1269:     if (field->isnull)",
          "1270:         return Jsi_ValueMakeNull(interp, val);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1272:     MySqlObj *jdb = p->jdb;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1294:         case JSI_OPTION_DOUBLE:",
          "1295:              return Jsi_ValueMakeNumber(interp, val, (Jsi_Number)field->buffer.vdouble);",
          "1296:         default:",
          "1298:     }",
          "1299:     return Jsi_ValueNew1(interp);",
          "1300: }",
          "",
          "[Removed Lines]",
          "1297:             Jsi_LogWarn(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "[Added Lines]",
          "1302:             Jsi_LogWarnExt(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1347: {",
          "1348:     MySqlObj *jdb = (MySqlObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1349:     if (!jdb) {",
          "1351:         return NULL;",
          "1352:     }",
          "1353:     if (!jdb->db)",
          "1354:     {",
          "1356:         return NULL;",
          "1357:     }",
          "1358:     return jdb;",
          "",
          "[Removed Lines]",
          "1350:         Jsi_LogError(\"MySql call to a non-mysql object\");",
          "1355:         Jsi_LogError(\"MySql db is closed\");",
          "",
          "[Added Lines]",
          "1355:         Jsi_LogErrorExt(\"MySql call to a non-mysql object\");",
          "1360:         Jsi_LogErrorExt(\"MySql db is closed\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1414:     mysql_close(jdb->db);",
          "1415:     jdb->db = mysql_init(NULL);",
          "1416:     if (!mdbConnect(interp, jdb))",
          "1418:     return JSI_OK;",
          "1419: }",
          "",
          "[Removed Lines]",
          "1417:         return Jsi_LogError(\"reconnect failed: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "1422:         return Jsi_LogErrorExt(\"reconnect failed: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1430:     Jsi_RC rc = JSI_OK;",
          "1431:     const char *zSql = Jsi_ValueArrayIndexToStr(interp, args, 0, &zLen);",
          "1433:     if (mysql_real_query(jdb->db, zSql, zLen))",
          "1435:     else if (jdb->enableMulti) {",
          "1436:         MYSQL_RES *results;",
          "1437:         int sr = mysql_next_result(jdb->db);",
          "",
          "[Removed Lines]",
          "1434:         rc = Jsi_LogError(\"mysql error: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "1438:     Jsi_LogTraceExt(\"MYSQL-EVAL: %s\", zSql);",
          "1440:         rc = Jsi_LogErrorExt(\"mysql error: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1594:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_OBJECT))",
          "1595:             isopts = 1;",
          "1596:         else  {",
          "1598:             goto bail;",
          "1599:         }",
          "1600:     }",
          "",
          "[Removed Lines]",
          "1597:             rc = Jsi_LogError(\"argument must be null, a function, string, array or options\");",
          "",
          "[Added Lines]",
          "1603:             rc = Jsi_LogErrorExt(\"argument must be null, a function, string, array or options\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1611:         char *cdata = (char*)jdb->queryOpts.CData;",
          "1612:         MySqlObjMultipleBind* copts = Jsi_CarrayLookup(interp, cdata);",
          "1613:         if (!copts)",
          "1615:         int n = MySqlObjQuery(jdb, copts->opts, copts->data, copts->numData, zSql, copts->flags);",
          "1616:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)n);",
          "1617:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "1614:             return Jsi_LogError(\"unknown CData option: %s\", jdb->queryOpts.CData);",
          "",
          "[Added Lines]",
          "1620:             return Jsi_LogErrorExt(\"unknown CData option: %s\", jdb->queryOpts.CData);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1625:         if (opts.obj.name)",
          "1626:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "1627:         else",
          "1629:         goto bail;",
          "1630:     }",
          "1631:     if (!opts.separator) {",
          "",
          "[Removed Lines]",
          "1628:             rc = Jsi_LogError(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "[Added Lines]",
          "1634:             rc = Jsi_LogErrorExt(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1657:             goto bail;",
          "1658:         }",
          "1659:     }",
          "1660:     if (opts.mode == _mdb_EF_NONE)",
          "1661:         goto bail;",
          "1662:     if (callback) {",
          "1663:         sEval.tocall = callback;",
          "1664:         if (opts.mode != _mdb_EF_ROWS)",
          "1666:         else",
          "1667:             rc = mdbEvalCallCmd(&sEval, interp, JSI_OK);",
          "1668:         goto bail;",
          "",
          "[Removed Lines]",
          "1665:             rc = Jsi_LogError(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "[Added Lines]",
          "1666:     Jsi_LogTraceExt(\"MYSQL-QUERY: %s\", zSql);",
          "1672:             rc = Jsi_LogErrorExt(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2257:     jdb->maxStmts = oldMax;",
          "2258:     Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)mysql_reset_connection(jdb->db));",
          "2259: #else",
          "2261: #endif",
          "2262:     return JSI_OK;",
          "2263: }",
          "",
          "[Removed Lines]",
          "2260:     Jsi_LogWarn(\"mysql reset unavailable: requires version 5.7.3+\");",
          "",
          "[Added Lines]",
          "2267:     Jsi_LogWarnExt(\"mysql reset unavailable: requires version 5.7.3+\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2274:     if (val)",
          "2275:         Jsi_ValueGetBoolean(interp, val, &noErr);",
          "2276:     if (n && noErr==0)",
          "2278:     Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)n);",
          "2280:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2277:         return Jsi_LogError(\"ping failed: (%d) %s\", n, mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "2284:         return Jsi_LogErrorExt(\"ping failed: (%d) %s\", n, mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2387:     jdb = (MySqlObj*)Jsi_Calloc(1, sizeof(*jdb));",
          "2388:     SQLSIGINIT(jdb, DB);",
          "2389:     const char *groupname = \"mysqljsi\";",
          "2391:     jdb->_->newCnt++;",
          "2392:     jdb->_->activeCnt++;",
          "",
          "[Removed Lines]",
          "2390:     jdb->_ = &mydbObjCmd;",
          "",
          "[Added Lines]",
          "2397:     jdb->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "2398:     jdb->_ = &mydb_PkgStatus;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2400:         mysqlObjFree(interp, jdb);",
          "2401:         return JSI_ERROR;",
          "2402:     }",
          "2403:     if (!jdb->udata) {",
          "2404:         jdb->udata = Jsi_ValueNewObj(interp, NULL);",
          "2405:         Jsi_IncrRefCount(interp, jdb->udata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2411:     Jsi_LogDebugExt(\"Starting MyDB\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2429: #endif",
          "2431:     if (!mdbConnect(interp, jdb)) {",
          "2433:         mysqlObjFree(interp, jdb);",
          "2434:         return JSI_ERROR;",
          "2435:     }",
          "2437:     if (jdb->enableMulti) {",
          "2438:         if (mysql_set_server_option(jdb->db, MYSQL_OPTION_MULTI_STATEMENTS_ON))",
          "2440:     }",
          "2442:     Jsi_Value *toacc = NULL;",
          "",
          "[Removed Lines]",
          "2432:         Jsi_LogError(\"connect failed %s\", mysql_error(jdb->db));",
          "2439:             Jsi_LogWarn(\"multi on failed %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "2441:         Jsi_LogErrorExt(\"connect failed %s\", mysql_error(jdb->db));",
          "2448:             Jsi_LogWarnExt(\"multi on failed %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2474: Jsi_RC Jsi_InitMySql(Jsi_Interp *interp, int release)",
          "2475: {",
          "2476:     if (release) {",
          "2478:             mysql_library_end();",
          "2479:         return Jsi_DoneMySql(interp);",
          "2480:     }",
          "",
          "[Removed Lines]",
          "2477:         if (!--mydbObjCmd.init)",
          "",
          "[Added Lines]",
          "2486:         if (!--mydb_PkgStatus.init)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2484:     return JSI_ERROR;",
          "2485: #endif",
          "2486: #ifndef JSI_OMIT_THREADS",
          "2488:         return Jsi_LogError(\"failed to initialize MySQL library\\n\");",
          "2489: #else",
          "2491: #endif",
          "2493:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "2494:     Jsi_JSONParseFmt(interp, &info, \"{pkgVer:%d}\", MYSQL_VERSION_ID);",
          "2496:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"MySql\", 1.1, Jsi_InitMySql, &dbPkgOpts);",
          "2497:     Jsi_DecrRefCount(interp, info);",
          "2498:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2487:     if (mydbObjCmd.init == 0 && mysql_library_init(0, NULL, NULL))",
          "2490:     return Jsi_LogError(\"Threads required for mysql\");",
          "2495:     Jsi_PkgOpts dbPkgOpts = { mydb_ObjCmd_Specs, &mydbObjCmd, mysqlCmds, info};",
          "",
          "[Added Lines]",
          "2496:     if (mydb_PkgStatus.init == 0 && mysql_library_init(0, NULL, NULL))",
          "2499:     return Jsi_LogErrorExt(\"Threads required for mysql\");",
          "2504:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds, .info=info};",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2502:     else if (!Jsi_CommandCreateSpecs(interp, mysqlobject.name, mysqlCmds, dbSys, JSI_CMDSPEC_ISOBJ))",
          "2503:         rc = JSI_ERROR;",
          "2504:     if (rc == JSI_OK)",
          "2506:     else",
          "2507:         mysql_library_end();",
          "2508:     return rc;",
          "2509: }",
          "2511: #endif",
          "",
          "[Removed Lines]",
          "2505:         mydbObjCmd.init++;",
          "",
          "[Added Lines]",
          "2514:         mydb_PkgStatus.init++;",
          "2520: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define JSI_SQLITE_DB_VFS \"SQLITE_DB_VFS\"",
          "3: #ifndef JSI_AMALGAMATION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define JSI_EXT_OPTS db->popts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: typedef struct jsi_DbVfs {",
          "15:     int sig;",
          "18:     Jsi_Db* (*dbNew)(const char *zFile, int inFlags /* JSI_DBI_* */);",
          "19: } jsi_DbVfs;",
          "",
          "[Removed Lines]",
          "16:     int (*dbcQuery)(Jsi_Db *jdb, Jsi_CDataDb *dbc, const char *query);",
          "17:     void *(*dbHandle)(Jsi_Interp *interp, Jsi_Db* jdb);",
          "",
          "[Added Lines]",
          "17:     int (*dbcQuery)(Jsi_Db *db, Jsi_CDataDb *dbc, const char *query);",
          "18:     void *(*dbHandle)(Jsi_Interp *interp, Jsi_Db* db);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102: # define UTF_TRANSLATION_NEEDED 1",
          "103: #endif",
          "110: #ifndef JSI_LITE_ONLY",
          "113: static Jsi_OptionSpec db_ObjCmd_Specs[] =",
          "114: {",
          "118: };",
          "119: #endif",
          "",
          "[Removed Lines]",
          "105: typedef struct db_ObjCmd {",
          "108: } db_ObjCmd;",
          "111: static db_ObjCmd dbObjCmd = {};",
          "115:     JSI_OPT(INT,   db_ObjCmd, activeCnt, .help=\"Number of active objects\"),",
          "116:     JSI_OPT(INT,   db_ObjCmd, newCnt,    .help=\"Number of new calls\"),",
          "117:     JSI_OPT_END(db_ObjCmd, .help=\"Options for Sqlite module\")",
          "",
          "[Added Lines]",
          "106: typedef struct {",
          "109: } db_Pkg_Status;",
          "112: static db_Pkg_Status db_PkgStatus = {};",
          "116:     JSI_OPT(INT,   db_Pkg_Status, activeCnt, .help=\"Number of active objects\"),",
          "117:     JSI_OPT(INT,   db_Pkg_Status, newCnt,    .help=\"Number of new calls\"),",
          "118:     JSI_OPT_END(db_Pkg_Status, .help=\"Options for Sqlite module\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     Sqlite_Sig sig;",
          "147: };",
          "",
          "[Removed Lines]",
          "145:     Jsi_Db      *jdb;",
          "",
          "[Added Lines]",
          "146:     Jsi_Db      *db;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "207:     Sqlite_Sig sig;",
          "",
          "[Removed Lines]",
          "210:     db_ObjCmd *_;              // Module data.",
          "",
          "[Added Lines]",
          "211:     db_Pkg_Status *_;              // Module data.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:     Jsi_DString name;",
          "257:     Jsi_Hash *typeNameHash;",
          "258:     Jsi_Hash *regexpHash;",
          "259: } Jsi_Db;",
          "261: static const int jsi_DbPkgVersion = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     Jsi_PkgOpts *popts;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "368: #endif",
          "373:     Jsi_HashSet(hPtr, (void*)\"blob\", (void*)JSI_OPTION_STRBUF);",
          "374:     Jsi_HashSet(hPtr, (void*)\"string\", (void*)JSI_OPTION_STRING);",
          "375:     Jsi_HashSet(hPtr, (void*)\"double\", (void*)JSI_OPTION_DOUBLE);",
          "",
          "[Removed Lines]",
          "370: void dbTypeNameHashInit(Jsi_Db *jdb) {",
          "371:     Jsi_Interp *interp = jdb->interp;",
          "372:     Jsi_Hash *hPtr = jdb->typeNameHash = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "[Added Lines]",
          "372: void dbTypeNameHashInit(Jsi_Db *db) {",
          "373:     Jsi_Interp *interp = db->interp;",
          "374:     Jsi_Hash *hPtr = db->typeNameHash = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386: #define SQLITE_OMIT_INCRBLOB",
          "390: {",
          "392:     if (rc == SQLITE_BUSY) {",
          "393:         if (erc) *erc = -2;",
          "394:     } else if (rc != SQLITE_OK) {",
          "",
          "[Removed Lines]",
          "389: static int dbExecCmd(Jsi_Db *jdb, const char *zQuery, int *erc)",
          "391:     int rc = sqlite3_exec(jdb->db, zQuery, 0, 0, 0);",
          "",
          "[Added Lines]",
          "391: static int dbExecCmd(Jsi_Db *db, const char *zQuery, int *erc)",
          "393:     int rc = sqlite3_exec(db->db, zQuery, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "475: }",
          "477: #ifndef JSI_LITE_ONLY",
          "479: #endif",
          "480: static void dbReleaseColumnNames(DbEvalContext *p);",
          "485: static Jsi_RC dbEvalStepSub(DbEvalContext *p, int release, int *erc) {",
          "486:     int rcs;",
          "489:     JSI_NOTUSED(interp);",
          "490:     SqlPreparedStmt *pPreStmt = p->pPreStmt;",
          "491:     SQLSIGASSERT(pPreStmt, STMT);",
          "492:     sqlite3_stmt *pStmt = pPreStmt->pStmt;",
          "495:         JSI_DBQUERY_PRINTF( \"DEBUG: step: %s\\n\", pPreStmt->zSql);",
          "496:     rcs = sqlite3_step(pStmt);",
          "497:     if( rcs==SQLITE_BUSY ) {",
          "",
          "[Removed Lines]",
          "478: static Jsi_RC dbPrepareAndBind( Jsi_Db *jdb, char const *zIn, char const **pzOut,  SqlPreparedStmt **ppPreStmt );",
          "481: static void dbReleaseStmt( Jsi_Db *jdb, SqlPreparedStmt *pPreStmt, int discard );",
          "487:     Jsi_Db *jdb = p->jdb;",
          "488:     Jsi_Interp *interp = jdb->interp;",
          "494:     if (jdb->debug & TMODE_STEP)",
          "",
          "[Added Lines]",
          "480: static Jsi_RC dbPrepareAndBind( Jsi_Db *db, char const *zIn, char const **pzOut,  SqlPreparedStmt **ppPreStmt );",
          "483: static void dbReleaseStmt( Jsi_Db *db, SqlPreparedStmt *pPreStmt, int discard );",
          "489:     Jsi_Db *db = p->db;",
          "490:     Jsi_Interp *interp = db->interp;",
          "496:     if (db->debug & TMODE_STEP)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "506:     }",
          "507:     rcs = sqlite3_reset(pStmt);",
          "511:     if (release==0 && rcs==SQLITE_OK)",
          "512:         return JSI_BREAK;",
          "513:     dbReleaseColumnNames(p);",
          "",
          "[Removed Lines]",
          "509:     jdb->stepCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_FULLSCAN_STEP,1);",
          "510:     jdb->sortCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_SORT,1);",
          "",
          "[Added Lines]",
          "511:     db->stepCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_FULLSCAN_STEP,1);",
          "512:     db->sortCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_SORT,1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "516:     if( rcs!=SQLITE_OK ) {",
          "521:         return JSI_ERROR;",
          "522:     } else {",
          "524:     }",
          "525:     return JSI_BREAK;",
          "526: }",
          "",
          "[Removed Lines]",
          "519:         Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "520:         dbReleaseStmt(jdb, pPreStmt, 1);",
          "523:         dbReleaseStmt(jdb, pPreStmt, p->nocache);",
          "",
          "[Added Lines]",
          "521:         Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "522:         dbReleaseStmt(db, pPreStmt, 1);",
          "525:         dbReleaseStmt(db, pPreStmt, p->nocache);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "536: ) {",
          "537:     p->dSql = dStr;",
          "538:     p->zSql = Jsi_DSAppend(p->dSql, zSql?zSql:\"\", NULL);",
          "540:     return JSI_OK;",
          "541: }",
          "544: {",
          "545:     if (prep->deleting)",
          "546:         return;",
          "",
          "[Removed Lines]",
          "539:     p->jdb = jdb;",
          "543: static void dbPrepStmtFree( Jsi_Db *jdb, SqlPreparedStmt *prep)",
          "",
          "[Added Lines]",
          "541:     p->db = db;",
          "545: static void dbPrepStmtFree( Jsi_Db *db, SqlPreparedStmt *prep)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "555:     if (prep->elPtr)",
          "556:         Jsi_ListEntryDelete(prep->elPtr);",
          "557:     Jsi_Free( (char*)prep );",
          "559: }",
          "566: {",
          "571:     }",
          "572: }",
          "575: static Jsi_RC dbStmtFreeProc(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *value) {",
          "577:     Jsi_ListEntry *l = (Jsi_ListEntry*)hPtr;",
          "578:     SqlPreparedStmt *prep = (SqlPreparedStmt *)Jsi_ListValueGet(l);",
          "579:     prep->elPtr = NULL;",
          "581:     return JSI_OK;",
          "582: }",
          "",
          "[Removed Lines]",
          "558:     jdb->stmtCacheCnt--;",
          "565: static void dbPrepStmtLimit( Jsi_Db *jdb)",
          "567:     while(jdb->stmtCacheCnt>jdb->stmtCacheMax ) {",
          "568:         Jsi_ListEntry *l = Jsi_ListPopBack(jdb->stmtCache);",
          "569:         dbPrepStmtFree(jdb, (SqlPreparedStmt*)Jsi_ListValueGet(l));",
          "570:         jdb->stmtCacheCnt = Jsi_ListSize(jdb->stmtCache);",
          "576:     Jsi_Db *jdb = (Jsi_Db*)interp;",
          "580:     dbPrepStmtFree(jdb, prep);",
          "",
          "[Added Lines]",
          "560:     db->stmtCacheCnt--;",
          "567: static void dbPrepStmtLimit( Jsi_Db *db)",
          "569:     while(db->stmtCacheCnt>db->stmtCacheMax ) {",
          "570:         Jsi_ListEntry *l = Jsi_ListPopBack(db->stmtCache);",
          "571:         dbPrepStmtFree(db, (SqlPreparedStmt*)Jsi_ListValueGet(l));",
          "572:         db->stmtCacheCnt = Jsi_ListSize(db->stmtCache);",
          "578:     Jsi_Db *db = (Jsi_Db*)interp;",
          "582:     dbPrepStmtFree(db, prep);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "592: }",
          "594: #endif",
          "",
          "[Removed Lines]",
          "589: static void dbFlushStmtCache( Jsi_Db *jdb ) {",
          "590:     Jsi_ListClear(jdb->stmtCache);",
          "591:     jdb->stmtCacheCnt = 0;",
          "",
          "[Added Lines]",
          "591: static void dbFlushStmtCache( Jsi_Db *db ) {",
          "592:     Jsi_ListClear(db->stmtCache);",
          "593:     db->stmtCacheCnt = 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "622:     } else {",
          "624:         if (!pPreStmt->elPtr)",
          "626:         else",
          "630:     }",
          "631: }",
          "",
          "[Removed Lines]",
          "619:     if( jdb->stmtCacheMax<=0 || discard ) {",
          "621:         dbPrepStmtFree(jdb, pPreStmt);",
          "625:             pPreStmt->elPtr = Jsi_ListPushFrontNew(jdb->stmtCache, pPreStmt);",
          "627:             Jsi_ListPushFront(jdb->stmtCache, pPreStmt->elPtr);",
          "628:         dbPrepStmtLimit(jdb);",
          "629:         jdb->stmtCacheCnt = Jsi_ListSize(jdb->stmtCache);",
          "",
          "[Added Lines]",
          "621:     if( db->stmtCacheMax<=0 || discard ) {",
          "623:         dbPrepStmtFree(db, pPreStmt);",
          "627:             pPreStmt->elPtr = Jsi_ListPushFrontNew(db->stmtCache, pPreStmt);",
          "629:             Jsi_ListPushFront(db->stmtCache, pPreStmt->elPtr);",
          "630:         dbPrepStmtLimit(db);",
          "631:         db->stmtCacheCnt = Jsi_ListSize(db->stmtCache);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "682:     Jsi_RC rc = JSI_OK;",
          "684:     JSI_NOTUSED(interp);",
          "",
          "[Removed Lines]",
          "683:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "685:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "690:         zSql++;",
          "691:     }",
          "694:     if (entry && ((pPreStmt = (SqlPreparedStmt*)Jsi_HashValueGet(entry)))) {",
          "697:             JSI_DBQUERY_PRINTF( \"DEBUG: prepare cache-hit: %s\\n\", zSql);",
          "698:         pStmt = pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "693:     Jsi_HashEntry *entry = Jsi_HashEntryFind(jdb->stmtHash, zSql);",
          "696:         if (jdb->debug & TMODE_PREPARE)",
          "",
          "[Added Lines]",
          "695:     Jsi_HashEntry *entry = Jsi_HashEntryFind(db->stmtHash, zSql);",
          "698:         if (db->debug & TMODE_PREPARE)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "708:     }",
          "",
          "[Removed Lines]",
          "705:         Jsi_ListPop(jdb->stmtCache, pPreStmt->elPtr);",
          "706:         jdb->stmtCacheCnt = Jsi_ListSize(jdb->stmtCache);",
          "",
          "[Added Lines]",
          "707:         Jsi_ListPop(db->stmtCache, pPreStmt->elPtr);",
          "708:         db->stmtCacheCnt = Jsi_ListSize(db->stmtCache);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "712:     if( pPreStmt==0 ) {",
          "713:         int nByte;",
          "718:         if( pStmt==0 ) {",
          "722:                 return JSI_ERROR;",
          "723:             } else {",
          "",
          "[Removed Lines]",
          "715:         if( SQLITE_OK!=sqlite3_prepare_v2(jdb->db, zSql, -1, &pStmt, pzOut) )",
          "717:             return Jsi_LogError(\"PREPARE: %s\", sqlite3_errmsg(jdb->db));",
          "719:             if( SQLITE_OK!=sqlite3_errcode(jdb->db) ) {",
          "721:                 Jsi_LogError(\"PREP: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "717:         if( SQLITE_OK!=sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, pzOut) )",
          "719:             return Jsi_LogErrorExt(\"PREPARE: %s\", sqlite3_errmsg(db->db));",
          "721:             if( SQLITE_OK!=sqlite3_errcode(db->db) ) {",
          "723:                 Jsi_LogErrorExt(\"PREP: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "728:             }",
          "729:         }",
          "732:             JSI_DBQUERY_PRINTF( \"DEBUG: prepare new: %s\\n\", zSql);",
          "733:         assert( pPreStmt==0 );",
          "736:         nByte = sizeof(SqlPreparedStmt); // + nVar*sizeof(Jsi_Obj *);",
          "737:         pPreStmt = (SqlPreparedStmt*)Jsi_Calloc(1, nByte);",
          "738:         pPreStmt->sig = SQLITE_SIG_STMT;",
          "",
          "[Removed Lines]",
          "731:         if (jdb->debug & TMODE_PREPARE)",
          "735:         jdb->stmtCacheCnt++;",
          "",
          "[Added Lines]",
          "733:         if (db->debug & TMODE_PREPARE)",
          "737:         db->stmtCacheCnt++;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "741:         pPreStmt->nSql = (*pzOut - zSql);",
          "742:         pPreStmt->zSql = sqlite3_sql(pStmt);",
          "743:         bool isNew = 0;",
          "745:         if (!isNew)",
          "746:             JSI_DBQUERY_PRINTF( \"sqlite dup stmt entry\");",
          "747:         Jsi_HashValueSet(pPreStmt->entry, pPreStmt);",
          "",
          "[Removed Lines]",
          "744:         pPreStmt->entry = Jsi_HashEntryNew(jdb->stmtHash, zSql, &isNew);",
          "",
          "[Added Lines]",
          "746:         pPreStmt->entry = Jsi_HashEntryNew(db->stmtHash, zSql, &isNew);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "774:     while( p->zSql[0] || p->pPreStmt ) {",
          "775:         Jsi_RC rc;",
          "776:         if( p->pPreStmt==0 ) {",
          "778:             if( rc!=JSI_OK ) return rc;",
          "779:         }",
          "780:         rc = dbEvalStepSub(p, 1, NULL);",
          "",
          "[Removed Lines]",
          "777:             rc = dbPrepareAndBind(p->jdb, p->zSql, &p->zSql, &p->pPreStmt);",
          "",
          "[Added Lines]",
          "779:             rc = dbPrepareAndBind(p->db, p->zSql, &p->zSql, &p->pPreStmt);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "786:     return JSI_BREAK;",
          "787: }",
          "790: {",
          "793:     int i, btype = 0, bindArr=0, n;",
          "794:     Jsi_RC rc = JSI_OK;",
          "795:     Jsi_Number r;",
          "",
          "[Removed Lines]",
          "789: static Jsi_RC dbBindStmt(Jsi_Db *jdb, SqlPreparedStmt *prep)",
          "792:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "791: static Jsi_RC dbBindStmt(Jsi_Db *db, SqlPreparedStmt *prep)",
          "794:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "805:         int isInt = 0, isBlob = 0;",
          "806:         const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "807:         if (zVar == NULL) {",
          "810:             if (!(pv =Jsi_ValueArrayIndex(interp, apv, i-1)))",
          "812:         }",
          "813:         else if((zVar[0]=='$' || zVar[0]==':' || zVar[0]=='@') ) {",
          "814:             int zvLen = Jsi_Strlen(zVar);",
          "",
          "[Removed Lines]",
          "808:             if (!jdb->optPtr || !(apv=jdb->optPtr->values))",
          "809:                 return Jsi_LogError(\"? bind without values for param %d\", i);",
          "811:                 return Jsi_LogError(\"array element %d missing\", nVar);",
          "",
          "[Added Lines]",
          "810:             if (!db->optPtr || !(apv=db->optPtr->values))",
          "811:                 return Jsi_LogErrorExt(\"? bind without values for param %d\", i);",
          "813:                 return Jsi_LogErrorExt(\"array element %d missing\", nVar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "825:                     Jsi_DString tStr = {};",
          "826:                     int tlen = Jsi_Strlen(ttp+1);",
          "827:                     Jsi_DSAppendLen(&tStr, ttp+1, tlen-1);",
          "831:                     int rc = ( htPtr != NULL);",
          "832:                     if (!htPtr) {",
          "833:                         Jsi_DString eStr = {};",
          "834:                         Jsi_HashSearch search;",
          "836:                         int n = 0;",
          "837:                         Jsi_HashEntry *hPtr;",
          "839:                             hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "840:                             const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "841:                             Jsi_DSAppend(&eStr, (n++?\", \":\"\"), key, NULL);",
          "842:                         }",
          "844:                         Jsi_DSFree(&eStr);",
          "845:                     }",
          "846:                     Jsi_Strcpy(tname, Jsi_DSValue(&tStr));",
          "",
          "[Removed Lines]",
          "828:                     if (!jdb->typeNameHash)",
          "829:                         dbTypeNameHashInit(jdb);",
          "830:                     Jsi_HashEntry *htPtr = Jsi_HashEntryFind(jdb->typeNameHash, Jsi_DSValue(&tStr));",
          "835:                         Jsi_Interp *interp = jdb->interp;",
          "838:                         for (hPtr = Jsi_HashSearchFirst(jdb->typeNameHash, &search);",
          "843:                         Jsi_LogWarn(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "[Added Lines]",
          "830:                     if (!db->typeNameHash)",
          "831:                         dbTypeNameHashInit(db);",
          "832:                     Jsi_HashEntry *htPtr = Jsi_HashEntryFind(db->typeNameHash, Jsi_DSValue(&tStr));",
          "837:                         Jsi_Interp *interp = db->interp;",
          "840:                         for (hPtr = Jsi_HashSearchFirst(db->typeNameHash, &search);",
          "845:                         Jsi_LogWarnExt(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "867:             } else",
          "868:                 pv = Jsi_VarLookup(interp, &zVar[1]);",
          "869:         } else",
          "872:         if(!pv ) {",
          "875:                 rc = JSI_ERROR;",
          "876:                 break;",
          "877:             } else",
          "879:         } else {",
          "881:             if (btype && !Jsi_ValueIsUndef(interp, pv)) {",
          "882:                 switch (btype) {",
          "883:                     case JSI_OPTION_STRBUF:",
          "",
          "[Removed Lines]",
          "870:             return Jsi_LogError(\"can not find bind var %s\", zVar);",
          "873:             if (!jdb->bindWarn) {",
          "874:                 Jsi_LogError(\"unknown bind param: %s\", zVar);",
          "878:                 Jsi_LogWarn(\"unknown bind param: %s\", zVar);",
          "880:             int match = 1, cast = (jdb->optPtr->typeCheck==dbTypeCheck_Cast);",
          "",
          "[Added Lines]",
          "872:             return Jsi_LogErrorExt(\"can not find bind var %s\", zVar);",
          "875:             if (!db->bindWarn) {",
          "876:                 Jsi_LogErrorExt(\"unknown bind param: %s\", zVar);",
          "880:                 Jsi_LogWarnExt(\"unknown bind param: %s\", zVar);",
          "882:             int match = 1, cast = (db->optPtr->typeCheck==dbTypeCheck_Cast);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "920:                         Jsi_LogBug(\"Unhandled bind type: %s = %d\", tname, btype);",
          "921:                 }",
          "922:                 if (cast == 0 && match == 0) {",
          "925:                     if (ltyp == JSI_LOG_ERROR)",
          "926:                         return JSI_ERROR;",
          "927:                 }",
          "",
          "[Removed Lines]",
          "923:                     int ltyp = (jdb->optPtr->typeCheck==dbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "924:                     Jsi_LogMsg(interp, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "925:                     int ltyp = (db->optPtr->typeCheck==dbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "926:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "934:             } else if (Jsi_ValueIsNumber(interp, pv)) {",
          "935:                 Jsi_GetNumberFromValue(interp, pv, &r);",
          "936:                 wv = (Jsi_Wide)r;",
          "938:                     sqlite3_bind_int64(pStmt, i,wv);",
          "939:                 else",
          "940:                     sqlite3_bind_double(pStmt, i,(double)r);",
          "942:                 sqlite3_bind_null(pStmt, i);",
          "943:             } else if (Jsi_ValueIsString(interp, pv)) {",
          "944:                 const char *sstr = Jsi_ValueGetStringLen(interp, pv, &n);",
          "",
          "[Removed Lines]",
          "937:                 if (isInt || (jdb->forceInt && (((Jsi_Number)wv)-r)==0))",
          "941:             } else if (Jsi_ValueIsNull(interp, pv) || (Jsi_ValueIsUndef(interp, pv) && jdb->queryOpts.mapundef)) {",
          "",
          "[Added Lines]",
          "939:                 if (isInt || (db->forceInt && (((Jsi_Number)wv)-r)==0))",
          "943:             } else if (Jsi_ValueIsNull(interp, pv) || (Jsi_ValueIsUndef(interp, pv) && db->queryOpts.mapundef)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "947:                     sqlite3_bind_blob(pStmt, i, (char *)sstr, n, SQLITE_TRANSIENT );",
          "948:                 else",
          "949:                     sqlite3_bind_text(pStmt, i, (char *)sstr, n, SQLITE_TRANSIENT );",
          "951:                 || Jsi_ValueIsObjType(interp, pv, JSI_OT_OBJECT))",
          "952:                 && (((dectyp = sqlite3_column_decltype(pStmt, i))==NULL) ||",
          "953:                     !Jsi_Strncasecmp(dectyp,\"charjson\",8))) {",
          "",
          "[Removed Lines]",
          "950:             } else if (!jdb->noJsonConv && bindArr && ((isArr=Jsi_ValueIsArray(interp, pv))",
          "",
          "[Added Lines]",
          "952:             } else if (!db->noJsonConv && bindArr && ((isArr=Jsi_ValueIsArray(interp, pv))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "958:                     sqlite3_bind_text(pStmt, i, Jsi_DSValue(&jStr), n, SQLITE_TRANSIENT );",
          "959:                     Jsi_DSFree(&jStr);",
          "960:             } else {",
          "963:                     rc = JSI_ERROR;",
          "964:                     break;",
          "965:                 } else",
          "967:                 sqlite3_bind_null(pStmt, i);",
          "968:             }",
          "",
          "[Removed Lines]",
          "961:                 if (!jdb->bindWarn) {",
          "962:                     Jsi_LogError(\"bind param must be string/number/bool/null: %s\", zVar);",
          "966:                     Jsi_LogWarn(\"bind param must be string/number/bool/null: %s\", zVar);",
          "",
          "[Added Lines]",
          "963:                 if (!db->bindWarn) {",
          "964:                     Jsi_LogErrorExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "968:                     Jsi_LogWarnExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "973: }",
          "975: static Jsi_RC dbPrepareAndBind(",
          "980: ) {",
          "982:         return JSI_ERROR;",
          "984: }",
          "985: #endif",
          "",
          "[Removed Lines]",
          "981:     if (dbPrepareStmt(jdb, zIn, pzOut, ppPreStmt) != JSI_OK)",
          "983:     return dbBindStmt(jdb, *ppPreStmt);",
          "",
          "[Added Lines]",
          "983:     if (dbPrepareStmt(db, zIn, pzOut, ppPreStmt) != JSI_OK)",
          "985:     return dbBindStmt(db, *ppPreStmt);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "992: static void dbEvalFinalize(DbEvalContext *p) {",
          "995:     if( p->pPreStmt ) {",
          "996:         sqlite3_reset(p->pPreStmt->pStmt);",
          "998:         p->pPreStmt = 0;",
          "999:     }",
          "1000:     if (p->dSql)",
          "",
          "[Removed Lines]",
          "997:         dbReleaseStmt(p->jdb, p->pPreStmt, p->nocache);",
          "",
          "[Added Lines]",
          "999:         dbReleaseStmt(p->db, p->pPreStmt, p->nocache);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1034: {",
          "1037:         JSI_DBQUERY_PRINTF( \"DEBUG: delete\\n\");",
          "1052:         Jsi_DSFree(&pFunc->dScript);",
          "1053:         Jsi_DecrRefCount(interp, pFunc->tocall);",
          "1054:         Jsi_Free((char*)pFunc);",
          "1055:     }",
          "1059:         Jsi_Free((char*)pCollate);",
          "1060:     }",
          "1065: }",
          "1067: static int dbGetIntBool(Jsi_Interp *interp, Jsi_Value* v)",
          "",
          "[Removed Lines]",
          "1033: static void dbDeleteCmd(Jsi_Db *jdb)",
          "1035:     Jsi_Interp *interp = jdb->interp;",
          "1036:     if (jdb->debug & TMODE_DELETE)",
          "1038:     dbFlushStmtCache(jdb);",
          "1039:     if (jdb->stmtHash)",
          "1040:         Jsi_HashDelete(jdb->stmtHash);",
          "1041:     if (jdb->typeNameHash)",
          "1042:         Jsi_HashDelete(jdb->typeNameHash);",
          "1043:     if (jdb->regexpHash)",
          "1044:         Jsi_HashDelete(jdb->regexpHash);",
          "1046:     if (jdb->db) {",
          "1047:         DbClose(jdb->db);",
          "1048:     }",
          "1049:     while( jdb->pFunc ) {",
          "1050:         SqlFunc *pFunc = jdb->pFunc;",
          "1051:         jdb->pFunc = pFunc->pNext;",
          "1056:     while( jdb->pCollate ) {",
          "1057:         SqlCollate *pCollate = jdb->pCollate;",
          "1058:         jdb->pCollate = pCollate->pNext;",
          "1062:     Jsi_OptionsFree(interp, SqlOptions, jdb, 0);",
          "1063:     if (jdb->stmtCache)",
          "1064:         Jsi_ListDelete(jdb->stmtCache);",
          "",
          "[Added Lines]",
          "1035: static void dbDeleteCmd(Jsi_Db *db)",
          "1037:     Jsi_Interp *interp = db->interp;",
          "1038:     if (db->debug & TMODE_DELETE)",
          "1040:     dbFlushStmtCache(db);",
          "1041:     if (db->stmtHash)",
          "1042:         Jsi_HashDelete(db->stmtHash);",
          "1043:     if (db->typeNameHash)",
          "1044:         Jsi_HashDelete(db->typeNameHash);",
          "1045:     if (db->regexpHash)",
          "1046:         Jsi_HashDelete(db->regexpHash);",
          "1048:     if (db->db) {",
          "1049:         DbClose(db->db);",
          "1050:     }",
          "1051:     while( db->pFunc ) {",
          "1052:         SqlFunc *pFunc = db->pFunc;",
          "1053:         db->pFunc = pFunc->pNext;",
          "1058:     while( db->pCollate ) {",
          "1059:         SqlCollate *pCollate = db->pCollate;",
          "1060:         db->pCollate = pCollate->pNext;",
          "1064:     Jsi_OptionsFree(interp, SqlOptions, db, 0);",
          "1065:     if (db->stmtCache)",
          "1066:         Jsi_ListDelete(db->stmtCache);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1087: static int dbBusyHandler(void *cd, int nTries) {",
          "1088:     int rc;",
          "1090:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1094:     items[1] = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)nTries);",
          "1095:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 2, 0));",
          "1096:     Jsi_IncrRefCount(interp, vpargs);",
          "1097:     ret = Jsi_ValueNew1(interp);",
          "1099:     if( JSI_OK!=rc ) {",
          "1101:         rc = 1;",
          "1102:     } else",
          "1103:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1089:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1091:     Jsi_Interp *interp = jdb->interp;",
          "1093:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1098:     rc = Jsi_FunctionInvoke(interp, jdb->onBusy, vpargs, &ret, NULL);",
          "1100:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1091:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1093:     Jsi_Interp *interp = db->interp;",
          "1095:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1100:     rc = Jsi_FunctionInvoke(interp, db->onBusy, vpargs, &ret, NULL);",
          "1102:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1112: static int dbProgressHandler(void *cd) {",
          "1114:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1118:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 1, 0));",
          "1119:     Jsi_IncrRefCount(interp, vpargs);",
          "1120:     ret = Jsi_ValueNew1(interp);",
          "1122:     if( JSI_OK!=rc ) {",
          "1124:         rc = 1;",
          "1125:     } else",
          "1126:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1113:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1115:     Jsi_Interp *interp = jdb->interp;",
          "1117:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1121:     int rc = Jsi_FunctionInvoke(interp, jdb->onProgress, vpargs, &ret, NULL);",
          "1123:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1115:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1117:     Jsi_Interp *interp = db->interp;",
          "1119:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1123:     int rc = Jsi_FunctionInvoke(interp, db->onProgress, vpargs, &ret, NULL);",
          "1125:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1136: static void dbTraceHandler(void *cd, const char *zSql)",
          "1137: {",
          "1138:     int rc;",
          "1140:     Jsi_Value *vpargs, *items[2] = {}, *ret;",
          "1143:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zSql);",
          "1144:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 2, 0));",
          "1145:     Jsi_IncrRefCount(interp, vpargs);",
          "1146:     ret = Jsi_ValueNew1(interp);",
          "1148:     Jsi_DecrRefCount(interp, vpargs);",
          "1149:     Jsi_DecrRefCount(interp, ret);",
          "1150:     if (rc != JSI_OK)",
          "1152: }",
          "1158: static void dbProfileHandler(void *cd, const char *zSql, sqlite_uint64 tm) {",
          "1159:     int rc;",
          "1162:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1165:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zSql);",
          "1166:     items[2] = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)tm);",
          "1167:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 3, 0));",
          "1168:     Jsi_IncrRefCount(interp, vpargs);",
          "1169:     ret = Jsi_ValueNew1(interp);",
          "1171:     Jsi_DecrRefCount(interp, vpargs);",
          "1172:     Jsi_DecrRefCount(interp, ret);",
          "1173:     if (rc != JSI_OK)",
          "1175: }",
          "1183: static int dbCommitHandler(void *cd) {",
          "1184:     int rc = 0;",
          "1187:     Jsi_Value *vpargs, *items[2] = {}, *ret = Jsi_ValueNew1(interp);",
          "1190:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 1, 0));",
          "1191:     Jsi_IncrRefCount(interp, vpargs);",
          "1194:         rc = 1;",
          "1195:     } else",
          "1196:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1139:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1141:     Jsi_Interp *interp = jdb->interp;",
          "1142:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1147:     rc = Jsi_FunctionInvoke(interp, jdb->onTrace, vpargs, &ret, NULL);",
          "1151:         jdb->errCnt++;",
          "1160:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1161:     Jsi_Interp *interp = jdb->interp;",
          "1164:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1170:     rc = Jsi_FunctionInvoke(interp, jdb->onProfile, vpargs, &ret, NULL);",
          "1174:         jdb->errCnt++;",
          "1185:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1186:     Jsi_Interp *interp = jdb->interp;",
          "1189:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1192:     if( JSI_OK!=Jsi_FunctionInvoke(interp, jdb->onCommit, NULL, &ret, NULL) ) {",
          "1193:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1141:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1143:     Jsi_Interp *interp = db->interp;",
          "1144:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1149:     rc = Jsi_FunctionInvoke(interp, db->onTrace, vpargs, &ret, NULL);",
          "1153:         db->errCnt++;",
          "1162:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1163:     Jsi_Interp *interp = db->interp;",
          "1166:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1172:     rc = Jsi_FunctionInvoke(interp, db->onProfile, vpargs, &ret, NULL);",
          "1176:         db->errCnt++;",
          "1187:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1188:     Jsi_Interp *interp = db->interp;",
          "1191:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1194:     if( JSI_OK!=Jsi_FunctionInvoke(interp, db->onCommit, NULL, &ret, NULL) ) {",
          "1195:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1206:     int rc;",
          "1209:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1212:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zDb);",
          "1213:     items[2] = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)nEntry);",
          "1214:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 3, 0));",
          "1215:     Jsi_IncrRefCount(interp, vpargs);",
          "1216:     ret = Jsi_ValueNew(interp);",
          "1218:     Jsi_DecrRefCount(interp, vpargs);",
          "1219:     if (rc != JSI_OK) {",
          "1221:         rc = 1;",
          "1222:     } else",
          "1224:     Jsi_DecrRefCount(interp, ret);",
          "1225:     return rc;",
          "1226: }",
          "1228: static void dbRollbackHandler(void *cd) {",
          "1231:     Jsi_Value *vpargs, *items[2] = {}, *ret = Jsi_ValueNew1(interp);",
          "1234:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 1, 0));",
          "1235:     Jsi_IncrRefCount(interp, vpargs);",
          "1237:     Jsi_DecrRefCount(interp, vpargs);",
          "1238:     Jsi_DecrRefCount(interp, ret);",
          "1239: }",
          "",
          "[Removed Lines]",
          "1205: static int dbWalHandler( void *cd, sqlite3 *db, const char *zDb, int nEntry ){",
          "1207:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1208:     Jsi_Interp *interp = jdb->interp;",
          "1211:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1217:     rc = Jsi_FunctionInvoke(interp, jdb->onWalHook, vpargs, &ret, NULL);",
          "1220:         jdb->errCnt++;",
          "1223:         rc = dbGetIntBool(jdb->interp, ret);",
          "1229:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1230:     Jsi_Interp *interp = jdb->interp;",
          "1233:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1236:     Jsi_FunctionInvoke(interp, jdb->onRollback, NULL, &ret, NULL);",
          "",
          "[Added Lines]",
          "1207: static int dbWalHandler( void *cd, sqlite3 *sdb, const char *zDb, int nEntry ){",
          "1209:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1210:     Jsi_Interp *interp = db->interp;",
          "1213:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1219:     rc = Jsi_FunctionInvoke(interp, db->onWalHook, vpargs, &ret, NULL);",
          "1222:         db->errCnt++;",
          "1225:         rc = dbGetIntBool(db->interp, ret);",
          "1231:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1232:     Jsi_Interp *interp = db->interp;",
          "1235:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1238:     Jsi_FunctionInvoke(interp, db->onRollback, NULL, &ret, NULL);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1246:     const char *zTbl,",
          "1247:     sqlite_int64 rowid",
          "1248: ) {",
          "1251:     int rc, i = 0;",
          "1252:     Jsi_Value *vpargs, *items[10] = {}, *ret;",
          "1254:     assert( op==SQLITE_INSERT || op==SQLITE_UPDATE || op==SQLITE_DELETE );",
          "1256:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, (op==SQLITE_INSERT)?\"INSERT\":(op==SQLITE_UPDATE)?\"UPDATE\":\"DELETE\");",
          "1257:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zDb);",
          "1258:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zTbl);",
          "",
          "[Removed Lines]",
          "1249:     Jsi_Db *jdb = (Jsi_Db *)p;",
          "1250:     Jsi_Interp *interp = jdb->interp;",
          "1255:     items[i++] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "",
          "[Added Lines]",
          "1251:     Jsi_Db *db = (Jsi_Db *)p;",
          "1252:     Jsi_Interp *interp = db->interp;",
          "1257:     items[i++] = Jsi_ValueNewObj(interp, db->fobj);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1260:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, i, 0));",
          "1261:     Jsi_IncrRefCount(interp, vpargs);",
          "1262:     ret = Jsi_ValueNew1(interp);",
          "1264:     Jsi_DecrRefCount(interp, vpargs);",
          "1265:     Jsi_DecrRefCount(interp, ret);",
          "1266:     if (rc != JSI_OK)",
          "1268: }",
          "1270: static void dbCollateNeeded(",
          "1271:     void *cd,",
          "1273:     int enc,",
          "1274:     const char *zName",
          "1275: ) {",
          "1276:     int rc;",
          "1279:     Jsi_Value *vpargs, *items[2], *ret;",
          "1281:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zName);",
          "1282:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 2, 0));",
          "1283:     Jsi_IncrRefCount(interp, vpargs);",
          "1284:     ret = Jsi_ValueNew1(interp);",
          "1286:     Jsi_DecrRefCount(interp, vpargs);",
          "1287:     Jsi_DecrRefCount(interp, ret);",
          "1288:     if (rc != JSI_OK)",
          "1291: }",
          "",
          "[Removed Lines]",
          "1263:     rc = Jsi_FunctionInvoke(interp, jdb->onUpdate, vpargs, &ret, NULL);",
          "1267:         jdb->errCnt++;",
          "1272:     sqlite3 *db,",
          "1277:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1278:     Jsi_Interp *interp = jdb->interp;",
          "1280:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1285:     rc = Jsi_FunctionInvoke(interp, jdb->onNeedCollate, vpargs,& ret, NULL);",
          "1289:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1265:     rc = Jsi_FunctionInvoke(interp, db->onUpdate, vpargs, &ret, NULL);",
          "1269:         db->errCnt++;",
          "1274:     sqlite3 *sdb,",
          "1279:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1280:     Jsi_Interp *interp = db->interp;",
          "1282:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1287:     rc = Jsi_FunctionInvoke(interp, db->onNeedCollate, vpargs,& ret, NULL);",
          "1291:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1305:     Jsi_Interp *interp = p->interp;",
          "1307:     int rc;",
          "1309:     Jsi_Value *vpargs, *items[3], *ret;",
          "1312:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, (char*)zA);",
          "1313:     items[2] = Jsi_ValueMakeStringDup(interp, NULL, (char*)zB);",
          "1314:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 3, 0));",
          "1315:     ret = Jsi_ValueNew1(interp);",
          "1316:     rc = Jsi_FunctionInvoke(interp, p->zScript, vpargs, &ret, NULL);",
          "1317:     if( JSI_OK!=rc ) {",
          "1319:         rc = 0;",
          "1320:     } else",
          "1321:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1311:     items[0] = Jsi_ValueNewObj(interp, p->jdb->fobj);",
          "",
          "[Added Lines]",
          "1313:     items[0] = Jsi_ValueNewObj(interp, p->db->fobj);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1361: }",
          "1363: static void jsiSqlFuncUnixTime(sqlite3_context *context, int argc, sqlite3_value**argv) {",
          "1367:     if (argc>3) {",
          "1369:         return;",
          "1370:     }",
          "1371:     const char *str = NULL, *fmt = NULL;",
          "",
          "[Removed Lines]",
          "1364:     Jsi_Db *jdb = (Jsi_Db*)sqlite3_user_data(context);",
          "1365:     SQLSIGASSERT(jdb,DB);",
          "1366:     Jsi_Interp *interp = jdb->interp;",
          "1368:         Jsi_LogWarn(\"sqlite unixtime, expected: str fmt isutc\");",
          "",
          "[Added Lines]",
          "1366:     Jsi_Db *db = (Jsi_Db*)sqlite3_user_data(context);",
          "1367:     SQLSIGASSERT(db,DB);",
          "1368:     Jsi_Interp *interp = db->interp;",
          "1370:         Jsi_LogWarnExt(\"sqlite unixtime, expected: str fmt isutc\");",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1389: }",
          "1391: static void jsiSqlFuncRegexp(sqlite3_context *context, int argc, sqlite3_value**argv) {",
          "1395:     if (argc!=2 && argc!=3) {",
          "1397:         return;",
          "1398:     }",
          "1399:     const char *str = (char *)sqlite3_value_text(argv[1]);",
          "",
          "[Removed Lines]",
          "1392:     Jsi_Db *jdb = (Jsi_Db*)sqlite3_user_data(context);",
          "1393:     SQLSIGASSERT(jdb,DB);",
          "1394:     Jsi_Interp *interp = jdb->interp;",
          "1396:         Jsi_LogWarn(\"sqlite regex, expected: str pattern ?modifier?\");",
          "",
          "[Added Lines]",
          "1394:     Jsi_Db *db = (Jsi_Db*)sqlite3_user_data(context);",
          "1395:     SQLSIGASSERT(db,DB);",
          "1396:     Jsi_Interp *interp = db->interp;",
          "1398:         Jsi_LogWarnExt(\"sqlite regex, expected: str pattern ?modifier?\");",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1402:     bool isNew = 0;",
          "1403:     Jsi_Value *pat = NULL;",
          "1404:     Jsi_HashEntry *hPtr;",
          "1406:         pat = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "1407:     if (!pat) {",
          "1410:             return;",
          "1411:         }",
          "1412:         pat = Jsi_ValueNewRegExp(interp, spat, mod);",
          "1413:         if (!pat)",
          "1414:             return;",
          "1415:         Jsi_IncrRefCount(interp, pat);",
          "1420:             if (!hPtr) {",
          "1421:                 Jsi_DecrRefCount(interp, pat);",
          "1422:                 return;",
          "",
          "[Removed Lines]",
          "1405:     if (jdb->regexpHash && ((hPtr = Jsi_HashEntryFind(jdb->regexpHash, spat))))",
          "1408:         if (jdb->regexpHash && jdb->maxRegexCache>0 && (int)Jsi_HashSize(jdb->regexpHash)>=jdb->maxRegexCache) {",
          "1409:             Jsi_LogError(\"Regex hash reached max size: %d\", jdb->maxRegexCache);",
          "1416:         if (jdb->maxRegexCache) {",
          "1417:             if (!jdb->regexpHash)",
          "1418:                 jdb->regexpHash = Jsi_HashNew(interp, JSI_KEYS_STRING, jsiSqlfreeValueTbl);",
          "1419:             hPtr = Jsi_HashEntryNew(jdb->regexpHash, spat, &isNew);",
          "",
          "[Added Lines]",
          "1407:     if (db->regexpHash && ((hPtr = Jsi_HashEntryFind(db->regexpHash, spat))))",
          "1410:         if (db->regexpHash && db->maxRegexCache>0 && (int)Jsi_HashSize(db->regexpHash)>=db->maxRegexCache) {",
          "1411:             Jsi_LogErrorExt(\"Regex hash reached max size: %d\", db->maxRegexCache);",
          "1418:         if (db->maxRegexCache) {",
          "1419:             if (!db->regexpHash)",
          "1420:                 db->regexpHash = Jsi_HashNew(interp, JSI_KEYS_STRING, jsiSqlfreeValueTbl);",
          "1421:             hPtr = Jsi_HashEntryNew(db->regexpHash, spat, &isNew);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1426:     }",
          "1427:     if (Jsi_RegExpMatch(interp, pat, str, &rc, NULL)==JSI_OK)",
          "1428:         sqlite3_result_int(context, rc);",
          "1430:         Jsi_DecrRefCount(interp, pat);",
          "1431: }",
          "",
          "[Removed Lines]",
          "1429:     if (!jdb->maxRegexCache)",
          "",
          "[Added Lines]",
          "1431:     if (!db->maxRegexCache)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1494:     const char *zCode;",
          "1495:     int rc;",
          "1496:     const char *zReply;",
          "1501:     switch( code ) {",
          "1502:     case SQLITE_COPY              :",
          "",
          "[Removed Lines]",
          "1497:     Jsi_Db *jdb = (Jsi_Db*)pArg;",
          "1498:     Jsi_Interp *interp = jdb->interp;",
          "1499:     if( jdb->disableAuth ) return SQLITE_OK;",
          "",
          "[Added Lines]",
          "1499:     Jsi_Db *db = (Jsi_Db*)pArg;",
          "1500:     Jsi_Interp *interp = db->interp;",
          "1501:     if( db->disableAuth ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1604:     }",
          "1605:     int i = 0;",
          "1606:     Jsi_Value *vpargs, *items[10] = {}, *ret;",
          "1608:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zCode);",
          "1609:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zArg1 ? zArg1 : \"\");",
          "1610:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zArg2 ? zArg2 : \"\");",
          "",
          "[Removed Lines]",
          "1607:     items[i++] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "",
          "[Added Lines]",
          "1609:     items[i++] = Jsi_ValueNewObj(interp, db->fobj);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1613:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, i, 0));",
          "1614:     Jsi_IncrRefCount(interp, vpargs);",
          "1615:     ret = Jsi_ValueNew(interp);",
          "1617:     Jsi_DecrRefCount(interp, vpargs);",
          "1619:     if (rc == JSI_OK && (zReply = Jsi_ValueGetStringLen(interp, ret, NULL)))",
          "",
          "[Removed Lines]",
          "1616:     rc = Jsi_FunctionInvoke(interp, jdb->onAuth, vpargs, &ret, NULL);",
          "",
          "[Added Lines]",
          "1618:     rc = Jsi_FunctionInvoke(interp, db->onAuth, vpargs, &ret, NULL);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1705:     Jsi_RC rc = result;",
          "1706:     const char *zEnd;",
          "",
          "[Removed Lines]",
          "1708:     jdb->nTransaction--;",
          "1709:     zEnd = azEnd[(rc==JSI_ERROR)*2 + (jdb->nTransaction==0)];",
          "1711:     jdb->disableAuth++;",
          "1712:     if( sqlite3_exec(jdb->db, zEnd, 0, 0, 0)) {",
          "",
          "[Added Lines]",
          "1710:     db->nTransaction--;",
          "1711:     zEnd = azEnd[(rc==JSI_ERROR)*2 + (db->nTransaction==0)];",
          "1713:     db->disableAuth++;",
          "1714:     if( sqlite3_exec(db->db, zEnd, 0, 0, 0)) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1723:         if( rc!=JSI_ERROR ) {",
          "1725:             rc = JSI_ERROR;",
          "1726:         }",
          "1728:     }",
          "1731:     return rc;",
          "1732: }",
          "",
          "[Removed Lines]",
          "1724:             Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "1727:         sqlite3_exec(jdb->db, \"ROLLBACK\", 0, 0, 0);",
          "1729:     jdb->disableAuth--;",
          "",
          "[Added Lines]",
          "1726:             Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "1729:         sqlite3_exec(db->db, \"ROLLBACK\", 0, 0, 0);",
          "1731:     db->disableAuth--;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1739: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1741:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "1743:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "1740:     Jsi_Interp *interp = p->jdb->interp;",
          "",
          "[Added Lines]",
          "1742:     Jsi_Interp *interp = p->db->interp;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1782:     }",
          "1783:     const char *str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1784:     if (!str)",
          "1786:     Jsi_JSONQuote(interp, str?str:\"\", -1, dStr);",
          "1787: }",
          "1789: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1791:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "1793:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "1785:         str = p->jdb->optPtr->nullvalue;",
          "1790:     Jsi_Interp *interp = p->jdb->interp;",
          "",
          "[Added Lines]",
          "1787:         str = p->db->optPtr->nullvalue;",
          "1792:     Jsi_Interp *interp = p->db->interp;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1830:     }",
          "1831:     const char *str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1832:     if (!str)",
          "1834:     Jsi_DSAppend(dStr, str?str:\"\", NULL);",
          "1835: }",
          "1838: static Jsi_Value* dbEvalSetColumnValue(DbEvalContext *p, int iCol, Jsi_Value **val) {",
          "1841:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "1842:     const char *str;",
          "",
          "[Removed Lines]",
          "1833:         str = p->jdb->optPtr->nullvalue;",
          "1839:     Jsi_Interp *interp = p->jdb->interp;",
          "",
          "[Added Lines]",
          "1835:         str = p->db->optPtr->nullvalue;",
          "1841:     Jsi_Interp *interp = p->db->interp;",
          "1842:     Jsi_Db *db = p->db;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1877:         break;;",
          "1878:     }",
          "1879:     case SQLITE_TEXT: {",
          "1881:             const char *dectyp = sqlite3_column_decltype(pStmt, iCol);",
          "1882:             if (dectyp && !Jsi_Strncasecmp(dectyp, \"charjson\", 8)) {",
          "1883:                 Jsi_Value *v = NULL; //Jsi_ValueNew1(interp);",
          "1884:                 str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1885:                 if (JSI_OK != Jsi_JSONParse(interp, str, &v, 0))",
          "1887:                 return v;",
          "1888:             }",
          "1889:         }",
          "",
          "[Removed Lines]",
          "1880:         if (!p->jdb->noJsonConv) {",
          "1886:                     Jsi_LogWarn(\"JSON parse failure for CHARJSON column\");",
          "",
          "[Added Lines]",
          "1882:         if (!p->db->noJsonConv) {",
          "1888:                     Jsi_LogWarnExt(\"JSON parse failure for CHARJSON column\");",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1891:     default:",
          "1892:         str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1893:         if (!str)",
          "1895:         return Jsi_ValueMakeStringDup(interp, val, str?str:\"\");",
          "1896:     }",
          "1897:     return Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "1894:             str = p->jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "1896:             str = p->db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1914:     Jsi_Obj *argso;",
          "1915:     char **apColName = NULL;",
          "1916:     int *apColType = NULL;",
          "1918:         JSI_DBQUERY_PRINTF( \"DEBUG: eval\\n\");",
          "1920:     while( (rc==JSI_OK) && JSI_OK==(rc = dbEvalStep(p)) ) {",
          "",
          "[Removed Lines]",
          "1917:     if (p->jdb->debug & TMODE_EVAL)",
          "",
          "[Added Lines]",
          "1919:     if (p->db->debug & TMODE_EVAL)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1953: static Jsi_Db *dbGetDbHandle(Jsi_Interp *interp, Jsi_Value *_this, Jsi_Func *funcPtr)",
          "1954: {",
          "1958:         return NULL;",
          "1959:     }",
          "1961:     {",
          "1963:         return NULL;",
          "1964:     }",
          "1966: }",
          "1969: {",
          "1972: }",
          "1974: static Jsi_RC sqliteObjFree(Jsi_Interp *interp, void *data)",
          "",
          "[Removed Lines]",
          "1955:     Jsi_Db *jdb = (Jsi_Db*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1956:     if (!jdb) {",
          "1957:         Jsi_LogError(\"Sqlite call to a non-sqlite object\");",
          "1960:     if (!jdb->db)",
          "1962:         Jsi_LogError(\"Sqlite db closed\");",
          "1965:     return jdb;",
          "1968: static void sqliteObjErase(Jsi_Db *jdb)",
          "1970:     dbDeleteCmd(jdb);",
          "1971:     jdb->db = NULL;",
          "",
          "[Added Lines]",
          "1957:     Jsi_Db *db = (Jsi_Db*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1958:     if (!db) {",
          "1959:         Jsi_LogErrorExt(\"Sqlite call to a non-sqlite object\");",
          "1962:     if (!db->db)",
          "1964:         Jsi_LogErrorExt(\"Sqlite db closed\");",
          "1967:     return db;",
          "1970: static void sqliteObjErase(Jsi_Db *db)",
          "1972:     dbDeleteCmd(db);",
          "1973:     db->db = NULL;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2005: static Jsi_RC SqliteCollateCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2006:                             Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2007: {",
          "2009:     Jsi_Value *func;",
          "2011:     SqlCollate *pCollate;",
          "2012:     char *zName;",
          "2015:     zName = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2016:     func = Jsi_ValueArrayIndex(interp, args, 1);",
          "2017:     pCollate = (SqlCollate*)Jsi_Calloc(1, sizeof(*pCollate));",
          "2018:     if( pCollate==0 ) return JSI_ERROR;",
          "2020:     pCollate->interp = interp;",
          "2028:     return JSI_OK;",
          "2029: }",
          "",
          "[Removed Lines]",
          "2008:     Jsi_Db *jdb;",
          "2013:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2019:     pCollate->jdb = jdb;",
          "2021:     pCollate->pNext = jdb->pCollate;",
          "2023:     jdb->pCollate = pCollate;",
          "2025:     if( sqlite3_create_collation(jdb->db, zName, SQLITE_UTF8, pCollate, dbSqlCollate) )",
          "2027:         return Jsi_LogError(\"%s\", (char *)sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "2010:     Jsi_Db *db;",
          "2015:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2021:     pCollate->db = db;",
          "2023:     pCollate->pNext = db->pCollate;",
          "2025:     db->pCollate = pCollate;",
          "2027:     if( sqlite3_create_collation(db->db, zName, SQLITE_UTF8, pCollate, dbSqlCollate) )",
          "2029:         return Jsi_LogErrorExt(\"%s\", (char *)sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2067: static Jsi_RC SqliteImportCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2068:                          Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2069: {",
          "2071:     Jsi_RC rv = JSI_OK;",
          "2072:     int rc;",
          "",
          "[Removed Lines]",
          "2070:     Jsi_Db *jdb;",
          "",
          "[Added Lines]",
          "2072:     Jsi_Db *db;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2089:     const char *zSep;",
          "2090:     const char *zNull;",
          "2093:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 2);",
          "2094:     ImportData opts = {};",
          "",
          "[Removed Lines]",
          "2092:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "2094:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2115:     nSep = Jsi_Strlen(zSep);",
          "2116:     nNull = Jsi_Strlen(zNull);",
          "2117:     if( nSep==0 )",
          "2121:     zSql = sqlite3_mprintf(\"SELECT * FROM '%q'\", zTable);",
          "2122:     if (zSql==0)",
          "2125:     if (opts.headers) {",
          "2126:         in = Jsi_Open(interp, fname, \"rb\");",
          "2127:         if( in==0 )",
          "2129:         if ((zLine = dbLocalGetline(interp, 0, in))==0 ) {",
          "2130:             Jsi_Close(interp, in);",
          "2131:             return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "2118:         return Jsi_LogError(\"Error: non-null separator required for copy\");",
          "2123:         return Jsi_LogError(\"Error: bad table: %s\", zTable);",
          "2128:             return Jsi_LogError(\"Error: cannot open file: %s\", zFile);",
          "",
          "[Added Lines]",
          "2120:         return Jsi_LogErrorExt(\"Error: non-null separator required for copy\");",
          "2125:         return Jsi_LogErrorExt(\"Error: bad table: %s\", zTable);",
          "2130:             return Jsi_LogErrorExt(\"Error: cannot open file: %s\", zFile);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2155:         Jsi_Free(zLine);",
          "2156:         if (zlen<=0) {",
          "2157:             Jsi_DSFree(&cStr);",
          "2159:             return JSI_ERROR;",
          "2160:         }",
          "2162:         Jsi_DSFree(&cStr);",
          "2163:         if (rc)",
          "2165:         created = 1;",
          "2166:     }",
          "2168:     nByte = Jsi_Strlen(zSql);",
          "2170:         sqlite3_free(zSql);",
          "2171:     if( rc ) {",
          "2173:         nCol = 0;",
          "2174:     } else {",
          "2175:         nCol = sqlite3_column_count(pStmt);",
          "",
          "[Removed Lines]",
          "2158:             Jsi_LogError(\"null header problem\");",
          "2161:         rc = sqlite3_exec(jdb->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "2164:             return Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "2169:     rc = sqlite3_prepare(jdb->db, zSql, -1, &pStmt, 0);",
          "2172:         Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "2160:             Jsi_LogErrorExt(\"null header problem\");",
          "2163:         rc = sqlite3_exec(db->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "2166:             return Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "2171:     rc = sqlite3_prepare(db->db, zSql, -1, &pStmt, 0);",
          "2174:         Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2181:     }",
          "2182:     zSql = (char*)Jsi_Malloc( nByte + 50 + nCol*2 );",
          "2183:     if( zSql==0 ) {",
          "2185:         rc = JSI_ERROR;",
          "2186:         goto bail;",
          "2187:     }",
          "",
          "[Removed Lines]",
          "2184:         Jsi_LogError(\"Error: can't malloc()\");",
          "",
          "[Added Lines]",
          "2186:         Jsi_LogErrorExt(\"Error: can't malloc()\");",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2194:     }",
          "2195:     zSql[j++] = ')';",
          "2196:     zSql[j] = 0;",
          "2198:     Jsi_Free(zSql);",
          "2199:     if( rc ) {",
          "2201:         sqlite3_finalize(pStmt);",
          "2202:         return JSI_ERROR;",
          "2203:     }",
          "2204:     in = Jsi_Open(interp, fname, \"rb\");",
          "2205:     if( in==0 ) {",
          "2207:         sqlite3_finalize(pStmt);",
          "2208:         return JSI_ERROR;",
          "2209:     }",
          "2210:     azCol = (char**)Jsi_Malloc( sizeof(azCol[0])*(nCol+1) );",
          "2211:     if( azCol==0 ) {",
          "2213:         Jsi_Close(interp, in);",
          "2214:         rc = JSI_ERROR;",
          "2215:         goto bail;",
          "2216:     }",
          "2218:     onCommit = \"COMMIT\";",
          "2219:     while ((zLine = dbLocalGetline(interp, 0, in))!=0 ) {",
          "2220:         char *z;",
          "",
          "[Removed Lines]",
          "2197:     rc = sqlite3_prepare(jdb->db, zSql, -1, &pStmt, 0);",
          "2200:         Jsi_LogError(\"Error: %s\", sqlite3_errmsg(jdb->db));",
          "2206:         Jsi_LogError(\"Error: cannot open file: %s\", zFile);",
          "2212:         Jsi_LogError(\"Error: can't malloc()\");",
          "2217:     (void)sqlite3_exec(jdb->db, \"BEGIN\", 0, 0, 0);",
          "",
          "[Added Lines]",
          "2199:     rc = sqlite3_prepare(db->db, zSql, -1, &pStmt, 0);",
          "2202:         Jsi_LogErrorExt(\"Error: %s\", sqlite3_errmsg(db->db));",
          "2208:         Jsi_LogErrorExt(\"Error: cannot open file: %s\", zFile);",
          "2214:         Jsi_LogErrorExt(\"Error: can't malloc()\");",
          "2219:     (void)sqlite3_exec(db->db, \"BEGIN\", 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2254:                 Jsi_DSFree(&sStr);",
          "2255:                 Jsi_Free(zLine);",
          "2256:                 Jsi_Close(interp, in);",
          "2258:                 break;",
          "2259:             }",
          "2260:             while (z) {",
          "",
          "[Removed Lines]",
          "2257:                 Jsi_LogError(\"unterminated string at line: %d\", lineno);",
          "",
          "[Added Lines]",
          "2259:                 Jsi_LogErrorExt(\"unterminated string at line: %d\", lineno);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2311:             }",
          "2312:         }",
          "2313:         if( i+1!=nCol ) {",
          "2315:                  zFile, lineno, nCol, i+1);",
          "2316:             onCommit = \"ROLLBACK\";",
          "2317:             break;",
          "",
          "[Removed Lines]",
          "2314:             Jsi_LogError(\"%s line %d: expected %d columns of data but found %d\",",
          "",
          "[Added Lines]",
          "2316:             Jsi_LogErrorExt(\"%s line %d: expected %d columns of data but found %d\",",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2331:         if (zLine)",
          "2332:             Jsi_Free(zLine);",
          "2333:         if( rc!=SQLITE_OK ) {",
          "2335:             onCommit = \"ROLLBACK\";",
          "2336:             break;",
          "2337:         }",
          "",
          "[Removed Lines]",
          "2334:             Jsi_LogError(\"%s at line: %d\", sqlite3_errmsg(jdb->db), lineno);",
          "",
          "[Added Lines]",
          "2336:             Jsi_LogErrorExt(\"%s at line: %d\", sqlite3_errmsg(db->db), lineno);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2339:     Jsi_Free(azCol);",
          "2340:     Jsi_Close(interp, in);",
          "2341:     sqlite3_finalize(pStmt);",
          "2344:     if( onCommit[0] == 'C' ) {",
          "",
          "[Removed Lines]",
          "2342:     (void)sqlite3_exec(jdb->db, onCommit, 0, 0, 0);",
          "",
          "[Added Lines]",
          "2344:     (void)sqlite3_exec(db->db, onCommit, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2353:     if (rc != JSI_OK && created && opts.conflict == CC_ROLLBACK) {",
          "2354:         Jsi_DString cStr = {};",
          "2355:         Jsi_DSAppend(&cStr, \"DROP TABLE IF EXISTS '\", zTable, \"';\", NULL);",
          "2357:         Jsi_DSFree(&cStr);",
          "2358:     }",
          "2359:     return rv;",
          "",
          "[Removed Lines]",
          "2356:         (void)sqlite3_exec(jdb->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "",
          "[Added Lines]",
          "2358:         (void)sqlite3_exec(db->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2367:                          Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2368: {",
          "2369:     int rc = SQLITE_OK, rc2;",
          "2371:     sqlite3_stmt *pStmt = NULL;",
          "2375:     const char *zSql = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2376:     const char *zStart = zSql, *zLeftover = NULL, *zErrMsg = NULL;",
          "2377:     int lnum = 1;",
          "2381:     while( zSql && zSql[0] && (SQLITE_OK == rc) ) {",
          "2384:         if( SQLITE_OK != rc ) {",
          "2385:             break;",
          "",
          "[Removed Lines]",
          "2370:     Jsi_Db *jdb;",
          "2373:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2374:     sqlite3 *db = jdb->db;",
          "2378:     if (jdb->echo && zSql)",
          "2379:         Jsi_LogInfo(\"SQL-EVAL: %s\\n\", zSql);",
          "2382:         rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zLeftover);",
          "",
          "[Added Lines]",
          "2372:     Jsi_Db *db;",
          "2375:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2379:     if (db->echo && zSql)",
          "2380:         Jsi_LogInfo(\"SQL-EVAL: %s\", zSql);",
          "2381:     Jsi_LogTraceExt(\"SQL-EVAL: %s\", zSql);",
          "2384:         rc = sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, &zLeftover);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2392:             }",
          "2394:             do {",
          "2396:                     JSI_DBQUERY_PRINTF( \"DEBUG: step: %s\\n\", zSql);",
          "2397:                 rc = sqlite3_step(pStmt);",
          "2398:             } while( rc == SQLITE_ROW );",
          "",
          "[Removed Lines]",
          "2395:                 if (jdb->debug & TMODE_STEP)",
          "",
          "[Added Lines]",
          "2397:                 if (db->debug & TMODE_STEP)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2407:     }",
          "2409:     if (rc == SQLITE_OK) {",
          "2411:         return JSI_OK;",
          "2412:     }",
          "2413:     while (zSql && zStart<zSql) {",
          "2414:         if (zStart[0] == '\\n') lnum++;",
          "2415:         zStart++;",
          "2416:     }",
          "2419:     return JSI_ERROR;",
          "2420: }",
          "",
          "[Removed Lines]",
          "2410:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(jdb->db));",
          "2417:     zErrMsg = sqlite3_errmsg(db);",
          "2418:     Jsi_LogError(\"sqlite error: %s in statement at line %d\", (zErrMsg ? zErrMsg : \"\"), lnum);",
          "",
          "[Added Lines]",
          "2412:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(db->db));",
          "2419:     zErrMsg = sqlite3_errmsg(db->db);",
          "2420:     Jsi_LogErrorExt(\"sqlite error: %s in statement at line %d\", (zErrMsg ? zErrMsg : \"\"), lnum);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2561:                              Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2562: {",
          "2563:     Jsi_RC rc = JSI_OK;",
          "2566:     Jsi_Value *vSql = Jsi_ValueArrayIndex(interp, args, 0);",
          "2567:     Jsi_DString eStr = {};",
          "2568: #ifdef JSI_DB_DSTRING_SIZE",
          "",
          "[Removed Lines]",
          "2564:     Jsi_Db *jdb;",
          "2565:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "2566:     Jsi_Db *db;",
          "2567:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2577:     char **apColName = NULL;",
          "2578:     int *apColType = NULL, isopts = 0;",
          "2579:     DbEvalContext sEval = {};",
          "2582:     opts.callback = NULL;",
          "2583:     opts.width = NULL;",
          "2584:     opts.obj.name = NULL;",
          "",
          "[Removed Lines]",
          "2580:     QueryOpts opts, *oEopt = jdb->optPtr;",
          "2581:     opts = jdb->queryOpts;",
          "",
          "[Added Lines]",
          "2582:     QueryOpts opts, *oEopt = db->optPtr;",
          "2583:     opts = db->queryOpts;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2595:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_OBJECT))",
          "2596:             isopts = 1;",
          "2597:         else {",
          "2599:             goto bail;",
          "2600:         }",
          "2601:     }",
          "",
          "[Removed Lines]",
          "2598:             rc = Jsi_LogError(\"arg 2: expected function, string, array or options\");",
          "",
          "[Added Lines]",
          "2600:             rc = Jsi_LogErrorExt(\"arg 2: expected function, string, array or options\");",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2605:             rc = JSI_ERROR;",
          "2606:             goto bail;",
          "2607:         }",
          "2610:     }",
          "2611:     if (opts.retChanged) {",
          "2612:         if (opts.callback) {",
          "2614:             goto bail;",
          "2615:         }",
          "2616:         opts.mode = _JSI_EF_NONE;",
          "",
          "[Removed Lines]",
          "2608:         callback = (opts.callback ? opts.callback : jdb->queryOpts.callback);",
          "2609:         width = (opts.width ? opts.width : jdb->queryOpts.width);",
          "2613:             rc = Jsi_LogError(\"can not use retChanged with callback\");",
          "",
          "[Added Lines]",
          "2610:         callback = (opts.callback ? opts.callback : db->queryOpts.callback);",
          "2611:         width = (opts.width ? opts.width : db->queryOpts.width);",
          "2615:             rc = Jsi_LogErrorExt(\"can not use retChanged with callback\");",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2619:     if (opts.cdata) {",
          "2620:         Jsi_CDataDb* copts = Jsi_CDataLookup(interp, opts.cdata);",
          "2621:         if (!copts)",
          "2623:         else {",
          "2625:             Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)n);",
          "2626:         }",
          "2627:         goto bail;",
          "",
          "[Removed Lines]",
          "2622:             rc = Jsi_LogError(\"unknown cdata name: %s\", opts.cdata);",
          "2624:             int n = Jsi_DbQuery(jdb, copts, zSql);",
          "",
          "[Added Lines]",
          "2624:             rc = Jsi_LogErrorExt(\"unknown cdata name: %s\", opts.cdata);",
          "2626:             int n = Jsi_DbQuery(db, copts, zSql);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2631:             goto bail;",
          "2632:         zSql = Jsi_DSValue(&eStr);",
          "2633:     }",
          "2636:     if ((opts.obj.getSql)) {",
          "2637:         if (opts.obj.name)",
          "2638:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "2639:         else",
          "2641:         goto bail;",
          "2642:     }",
          "2643:     if (!opts.separator) {",
          "",
          "[Removed Lines]",
          "2634:     if ((jdb->echo || opts.echo) && zSql)",
          "2635:         Jsi_LogInfo(\"SQL-ECHO: %s\\n\", zSql);",
          "2640:             rc = Jsi_LogError(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "[Added Lines]",
          "2636:     if ((db->echo || opts.echo) && zSql)",
          "2637:         Jsi_LogInfo(\"SQL-ECHO: %s\", zSql);",
          "2638:     Jsi_LogTraceExt(\"SQL-QUERY: %s\", zSql);",
          "2643:             rc = Jsi_LogErrorExt(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2651:     Jsi_DString sStr;",
          "2652:     Jsi_DSInit(&sStr);",
          "2653:     sEval.nocache = opts.nocache;",
          "2655:         goto bail;",
          "2656:     sEval.ret = *ret;",
          "2658:     if (callback) {",
          "2659:         sEval.tocall = callback;",
          "2660:         if (opts.mode != _JSI_EF_ROWS) {",
          "2662:             rc = JSI_ERROR;",
          "2663:             goto bail;",
          "2664:         }",
          "",
          "[Removed Lines]",
          "2654:     if ((rc = dbEvalInit(interp, &sEval, jdb, zSql, &sStr, 0, 0)) != JSI_OK)",
          "2657:     jdb->optPtr = &opts;",
          "2661:             Jsi_LogError(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "[Added Lines]",
          "2657:     if ((rc = dbEvalInit(interp, &sEval, db, zSql, &sStr, 0, 0)) != JSI_OK)",
          "2660:     db->optPtr = &opts;",
          "2664:             Jsi_LogErrorExt(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2672:             if (opts.limit && cnt>=opts.limit) break;",
          "2673:         }",
          "2674:         if (opts.retChanged)",
          "2676:         if (rc == JSI_BREAK)",
          "2677:             rc = JSI_OK;",
          "2678:         goto bail;",
          "",
          "[Removed Lines]",
          "2675:             Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(jdb->db));",
          "",
          "[Added Lines]",
          "2678:             Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(db->db));",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3095:     }",
          "3096:     }",
          "3097:     if (opts.retChanged)",
          "3099:     else",
          "3100:         Jsi_ValueFromDS(interp, dStr, ret);",
          "3101:     if( rc==JSI_BREAK )",
          "",
          "[Removed Lines]",
          "3098:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(jdb->db));",
          "",
          "[Added Lines]",
          "3101:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(db->db));",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3107:     }",
          "3108:     Jsi_DSFree(dStr);",
          "3109:     Jsi_DSFree(&eStr);",
          "3111:     return rc;",
          "3112: }",
          "",
          "[Removed Lines]",
          "3110:     jdb->optPtr = oEopt;",
          "",
          "[Added Lines]",
          "3113:     db->optPtr = oEopt;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3115:                           Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3116: {",
          "3117:     Jsi_RC rc;",
          "3120:     Jsi_Value *vSql = Jsi_ValueArrayIndex(interp, args, 0);",
          "3121:     Jsi_DString dStr;",
          "3122:     Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "3118:     Jsi_Db *jdb;",
          "3119:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3121:     Jsi_Db *db;",
          "3122:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3125:     DbEvalContext sEval = {};",
          "3126:     const char *zSql = Jsi_ValueGetDString(interp, vSql, &dStr, 0);",
          "3130:         return rc;",
          "3131:     sEval.ret = *ret;",
          "3132:     sEval.tocall = NULL;",
          "",
          "[Removed Lines]",
          "3128:     sEval.nocache = jdb->queryOpts.nocache;",
          "3129:     if ((rc = dbEvalInit(interp, &sEval, jdb, zSql, &sStr, 0, 0)) != JSI_OK)",
          "",
          "[Added Lines]",
          "3131:     sEval.nocache = db->queryOpts.nocache;",
          "3132:     if ((rc = dbEvalInit(interp, &sEval, db, zSql, &sStr, 0, 0)) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3152:                            Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3153: {",
          "3154:     Jsi_RC rc;",
          "3157:     Jsi_Value *vSql = Jsi_ValueArrayIndex(interp, args, 0);",
          "3158:     const char *zSql;",
          "3159:     Jsi_DString dStr = {};",
          "",
          "[Removed Lines]",
          "3155:     Jsi_Db *jdb;",
          "3156:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3158:     Jsi_Db *db;",
          "3159:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3163:     Jsi_DString sStr;",
          "3164:     Jsi_DSInit(&sStr);",
          "3167:         return JSI_ERROR;",
          "3168:     sEval.ret = *ret;",
          "3169:     int cnt = 0;",
          "",
          "[Removed Lines]",
          "3165:     sEval.nocache = jdb->queryOpts.nocache;",
          "3166:     if (dbEvalInit(interp, &sEval, jdb, zSql, &sStr, 0, 0) != JSI_OK)",
          "",
          "[Added Lines]",
          "3168:     sEval.nocache = db->queryOpts.nocache;",
          "3169:     if (dbEvalInit(interp, &sEval, db, zSql, &sStr, 0, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3190: #if (SQLITE_VERSION_NUMBER>3007009)",
          "3191:     const char *zName = \"main\";",
          "3192:     int argc = Jsi_ValueGetLength(interp, args);",
          "3196:     if (argc)",
          "3197:         zName = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "3199:     if (zName)",
          "3200:         Jsi_ValueMakeStringDup(interp, ret, zName);",
          "3201: #endif",
          "",
          "[Removed Lines]",
          "3193:     Jsi_Db *jdb;",
          "3195:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3198:     zName = sqlite3_db_filename(jdb->db, zName);",
          "",
          "[Added Lines]",
          "3196:     Jsi_Db *db;",
          "3198:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3201:     zName = sqlite3_db_filename(db->db, zName);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3211:     SqlFunc *p, *pNew;",
          "3212:     int i;",
          "3213:     pNew = (SqlFunc*)Jsi_Calloc(1, sizeof(*pNew) + Jsi_Strlen(zName) + 1 );",
          "",
          "[Removed Lines]",
          "3210: static SqlFunc *dbFindSqlFunc(Jsi_Db *jdb, const char *zName) {",
          "",
          "[Added Lines]",
          "3213: static SqlFunc *dbFindSqlFunc(Jsi_Db *db, const char *zName) {",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3217:         pNew->zName[i] = tolower(zName[i]);",
          "3218:     }",
          "3219:     pNew->zName[i] = 0;",
          "3221:         if( Jsi_Strcmp(p->zName, pNew->zName)==0 ) {",
          "3222:             Jsi_Free((char*)pNew);",
          "3223:             return p;",
          "3224:         }",
          "3225:     }",
          "3227:     pNew->pScript = 0;",
          "3228:     Jsi_DSInit(&pNew->dScript);",
          "3231:     return pNew;",
          "3232: }",
          "",
          "[Removed Lines]",
          "3220:     for(p=jdb->pFunc; p; p=p->pNext) {",
          "3226:     pNew->interp = jdb->interp;",
          "3229:     pNew->pNext = jdb->pFunc;",
          "3230:     jdb->pFunc = pNew;",
          "",
          "[Added Lines]",
          "3223:     for(p=db->pFunc; p; p=p->pNext) {",
          "3229:     pNew->interp = db->interp;",
          "3232:     pNew->pNext = db->pFunc;",
          "3233:     db->pFunc = pNew;",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3239:     char *zName;",
          "3240:     int rc, nArg = -1, argc;",
          "3241:     argc = Jsi_ValueGetLength(interp, args);",
          "3246:     zName = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "3247:     tocall = Jsi_ValueArrayIndex(interp, args, 1);",
          "3248:     if (zName == NULL)",
          "3250:     if (!Jsi_ValueIsFunction(interp, tocall))",
          "3252:     if (argc == 3) {",
          "3253:         nVal = Jsi_ValueArrayIndex(interp, args, 2);",
          "3254:         if (Jsi_GetIntFromValue(interp, nVal, &nArg) != JSI_OK)",
          "",
          "[Removed Lines]",
          "3242:     Jsi_Db *jdb;",
          "3244:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3249:         return Jsi_LogError(\"expected name\");",
          "3251:         return Jsi_LogError(\"expected function\");",
          "",
          "[Added Lines]",
          "3245:     Jsi_Db *db;",
          "3247:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3252:         return Jsi_LogErrorExt(\"expected name\");",
          "3254:         return Jsi_LogErrorExt(\"expected function\");",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3257:         Jsi_FunctionArguments(interp, tocall, &nArg);",
          "3258:     }",
          "3259:     if (nArg > SQLITE_LIMIT_FUNCTION_ARG)",
          "3262:         const char *z = Jsi_GetString(objv[3]);",
          "3263:         int n = Jsi_Strlen(z);",
          "3264:         if( n>2 && strncmp(z, \"-argcount\",n)==0 ){",
          "3265:           if( Jsi_GetIntFromObj(interp, objv[4], &nArg) ) return JSI_ERROR;",
          "3266:           if( nArg<0 )",
          "3268:         }",
          "3269:         pScript = objv[5];",
          "3270:       }else if( argc!=4 ){",
          "",
          "[Removed Lines]",
          "3260:         return Jsi_LogError(\"to many args\");",
          "3267:               return Jsi_LogError( \"number of arguments must be non-negative\");",
          "",
          "[Added Lines]",
          "3263:         return Jsi_LogErrorExt(\"to many args\");",
          "3270:               return Jsi_LogErrorExt( \"number of arguments must be non-negative\");",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3273:       }else{",
          "3274:         pScript = objv[3];",
          "3277:     if( pFunc==0 ) return JSI_ERROR;",
          "3278:     SQLSIGASSERT(pFunc,FUNC);",
          "3280:     pFunc->tocall = tocall;",
          "3281:     Jsi_IncrRefCount(interp, pFunc->tocall);",
          "3283:                                  pFunc, jsiSqlFunc, 0, 0);",
          "3285:     if( rc!=SQLITE_OK ) {",
          "3286:         rc = JSI_ERROR;",
          "3288:     }",
          "3289:     return JSI_OK;",
          "3290: }",
          "",
          "[Removed Lines]",
          "3276:     pFunc = dbFindSqlFunc(jdb, zName);",
          "3282:     rc = sqlite3_create_function(jdb->db, zName, nArg, SQLITE_UTF8,",
          "3287:         Jsi_LogError(\"function create error: %s\", (char *)sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3279:     pFunc = dbFindSqlFunc(db, zName);",
          "3285:     rc = sqlite3_create_function(db->db, zName, nArg, SQLITE_UTF8,",
          "3290:         Jsi_LogErrorExt(\"function create error: %s\", (char *)sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3293: static Jsi_RC SqliteInterruptCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3294:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3295: {",
          "3299:     return JSI_OK;",
          "3300: }",
          "",
          "[Removed Lines]",
          "3296:     Jsi_Db *jdb;",
          "3297:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3298:     sqlite3_interrupt(jdb->db);",
          "",
          "[Added Lines]",
          "3299:     Jsi_Db *db;",
          "3300:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3301:     sqlite3_interrupt(db->db);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3303: static Jsi_RC SqliteCompleteCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3304:                              Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3305: {",
          "3308:     Jsi_Value *s = Jsi_ValueArrayIndex(interp, args, 0);",
          "3309:     const char *str =  Jsi_ValueString(interp, s, NULL);",
          "3310:     int isComplete = 0;",
          "",
          "[Removed Lines]",
          "3306:     Jsi_Db *jdb;",
          "3307:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3309:     Jsi_Db *db;",
          "3310:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3323: static Jsi_RC SqliteRestoreCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3324:                             Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3325: {",
          "3327:     const char *zSrcFile;",
          "3328:     const char *zDestDb;",
          "3329:     sqlite3 *pSrc;",
          "",
          "[Removed Lines]",
          "3326:     Jsi_Db *jdb;",
          "",
          "[Added Lines]",
          "3329:     Jsi_Db *db;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3331:     int nTimeout = 0;",
          "3332:     int rc;",
          "3335:     Jsi_Value *vFile = Jsi_ValueArrayIndex(interp, args, 0);",
          "3336:     int argc = Jsi_ValueGetLength(interp, args);",
          "3337:     if( argc==1 ) {",
          "",
          "[Removed Lines]",
          "3334:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3337:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3345:     else {",
          "3346:         zSrcFile = Jsi_ValueNormalPath(interp, vFile, &dStr);",
          "3347:         if (zSrcFile == NULL)",
          "3349:     }",
          "3350:     rc = sqlite3_open_v2(zSrcFile, &pSrc, SQLITE_OPEN_READONLY, 0);",
          "3352:     if( rc!=SQLITE_OK ) {",
          "3354:         DbClose(pSrc);",
          "3355:         Jsi_DSFree(&dStr);",
          "3356:         return JSI_ERROR;",
          "3357:     }",
          "3359:     if( pBackup==0 ) {",
          "3361:         DbClose(pSrc);",
          "3362:         Jsi_DSFree(&dStr);",
          "3363:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "3348:             return Jsi_LogError(\"bad or missing file name\");",
          "3353:         Jsi_LogError(\"cannot open source database: %s\", sqlite3_errmsg(pSrc));",
          "3358:     pBackup = sqlite3_backup_init(jdb->db, zDestDb, pSrc, \"main\");",
          "3360:         Jsi_LogError(\"restore failed: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3351:             return Jsi_LogErrorExt(\"bad or missing file name\");",
          "3356:         Jsi_LogErrorExt(\"cannot open source database: %s\", sqlite3_errmsg(pSrc));",
          "3361:     pBackup = sqlite3_backup_init(db->db, zDestDb, pSrc, \"main\");",
          "3363:         Jsi_LogErrorExt(\"restore failed: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3374:     if( rc==SQLITE_DONE ) {",
          "3375:         rv = JSI_OK;",
          "3376:     } else if( rc==SQLITE_BUSY || rc==SQLITE_LOCKED ) {",
          "3378:         rv = JSI_ERROR;",
          "3379:     } else {",
          "3381:         rv = JSI_ERROR;",
          "3382:     }",
          "3383:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "3377:         Jsi_LogError(\"restore failed: source database busy\");",
          "3380:         Jsi_LogError(\"restore failed: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3380:         Jsi_LogErrorExt(\"restore failed: source database busy\");",
          "3383:         Jsi_LogErrorExt(\"restore failed: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3395:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3396: {",
          "3397:     int rc;",
          "3400:     int argc = Jsi_ValueGetLength(interp, args);",
          "3403:     Jsi_Value *pScript;",
          "3404:     const char *zBegin = \"SAVEPOINT _jsi_transaction\";",
          "3407:         Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3408:         static const char *TTYPE_strs[] = {",
          "3409:             \"deferred\",   \"exclusive\",  \"immediate\", 0",
          "",
          "[Removed Lines]",
          "3398:     Jsi_Db *jdb;",
          "3401:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3406:     if( jdb->nTransaction==0 && argc==2 ) {",
          "",
          "[Added Lines]",
          "3401:     Jsi_Db *db;",
          "3404:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3409:     if( db->nTransaction==0 && argc==2 ) {",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3430:     }",
          "3431:     pScript = Jsi_ValueArrayIndex(interp, args, argc-1);",
          "3432:     if(!Jsi_ValueIsFunction(interp, pScript))",
          "3439:     if( rc!=SQLITE_OK )",
          "3446:     Jsi_RC rv = Jsi_FunctionInvoke(interp, pScript, NULL, NULL, NULL);",
          "3448:     return rv;",
          "3449: }",
          "",
          "[Removed Lines]",
          "3433:         return Jsi_LogError(\"expected function\");",
          "3436:     jdb->disableAuth++;",
          "3437:     rc = sqlite3_exec(jdb->db, zBegin, 0, 0 ,0);",
          "3438:     jdb->disableAuth--;",
          "3440:         return Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "3441:     jdb->nTransaction++;",
          "3447:     rv = dbTransPostCmd(jdb, interp, rv);",
          "",
          "[Added Lines]",
          "3436:         return Jsi_LogErrorExt(\"expected function\");",
          "3439:     db->disableAuth++;",
          "3440:     rc = sqlite3_exec(db->db, zBegin, 0, 0 ,0);",
          "3441:     db->disableAuth--;",
          "3443:         return Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "3444:     db->nTransaction++;",
          "3450:     rv = dbTransPostCmd(db, interp, rv);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3456: static Jsi_RC SqliteBackupCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3457:                            Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3458: {",
          "3460:     Jsi_RC rv = JSI_OK;",
          "3461:     int rc;",
          "3462:     const char *zDestFile;",
          "",
          "[Removed Lines]",
          "3459:     Jsi_Db *jdb;",
          "",
          "[Added Lines]",
          "3462:     Jsi_Db *db;",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3464:     sqlite3 *pDest;",
          "3465:     sqlite3_backup *pBackup;",
          "3468:     Jsi_Value *vFile = Jsi_ValueArrayIndex(interp, args, 0);",
          "3469:     int argc = Jsi_ValueGetLength(interp, args);",
          "3470:     if( argc==1 ) {",
          "",
          "[Removed Lines]",
          "3467:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3470:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3478:     else {",
          "3479:         zDestFile = Jsi_ValueNormalPath(interp, vFile, &dStr);",
          "3480:         if (zDestFile == NULL)",
          "3482:     }",
          "3483:     rc = sqlite3_open(zDestFile, &pDest);",
          "3484:     if( rc!=SQLITE_OK ) {",
          "3486:         DbClose(pDest);",
          "3487:         Jsi_DSFree(&dStr);",
          "3488:         return JSI_ERROR;",
          "3489:     }",
          "3491:     if( pBackup==0 ) {",
          "3493:         DbClose(pDest);",
          "3494:         Jsi_DSFree(&dStr);",
          "3495:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "3481:             return Jsi_LogError(\"bad or missing file name\");",
          "3485:         Jsi_LogError(\"cannot open target database %s: %s\", zDestFile, sqlite3_errmsg(pDest));",
          "3490:     pBackup = sqlite3_backup_init(pDest, \"main\", jdb->db, zSrcDb);",
          "3492:         Jsi_LogError(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "[Added Lines]",
          "3484:             return Jsi_LogErrorExt(\"bad or missing file name\");",
          "3488:         Jsi_LogErrorExt(\"cannot open target database %s: %s\", zDestFile, sqlite3_errmsg(pDest));",
          "3493:     pBackup = sqlite3_backup_init(pDest, \"main\", db->db, zSrcDb);",
          "3495:         Jsi_LogErrorExt(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3499:     if( rc==SQLITE_DONE ) {",
          "3500:         rv = JSI_OK;",
          "3501:     } else {",
          "3503:         rv = JSI_ERROR;",
          "3504:     }",
          "3505:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "3502:         Jsi_LogError(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "[Added Lines]",
          "3505:         Jsi_LogErrorExt(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3507:     return rv;",
          "3508: }",
          "3511: {",
          "3514:     else",
          "3519:     else",
          "3524:     else",
          "3529:     else",
          "3534:     else",
          "3539:     else",
          "3544:     else",
          "3549:     else",
          "3554:     else",
          "3559:     else",
          "3570:     else",
          "3573: }",
          "",
          "[Removed Lines]",
          "3510: void dbSetupCallbacks(Jsi_Db *jdb, Jsi_Db *ojdb)",
          "3512:     if (jdb->onAuth && (!ojdb || !ojdb->onAuth) )",
          "3513:         sqlite3_set_authorizer(jdb->db, dbAuthCallback, jdb);",
          "3515:         sqlite3_set_authorizer(jdb->db, 0, 0);",
          "3517:     if (jdb->onCommit && (!ojdb || !ojdb->onCommit) )",
          "3518:         sqlite3_commit_hook(jdb->db, dbCommitHandler, jdb);",
          "3520:         sqlite3_commit_hook(jdb->db, 0, 0);",
          "3522:     if (jdb->onBusy && (!ojdb || !ojdb->onBusy) )",
          "3523:         sqlite3_busy_handler(jdb->db, dbBusyHandler, jdb);",
          "3525:         sqlite3_busy_handler(jdb->db, 0, 0);",
          "3527:     if (jdb->onTrace && (!ojdb || !ojdb->onTrace) )",
          "3528:         sqlite3_trace(jdb->db, dbTraceHandler, jdb);",
          "3530:         sqlite3_trace(jdb->db, 0, 0);",
          "3532:     if (jdb->onNeedCollate && (!ojdb || !ojdb->onNeedCollate) )",
          "3533:         sqlite3_collation_needed(jdb->db, jdb, dbCollateNeeded);",
          "3535:         sqlite3_collation_needed(jdb->db, 0, 0);",
          "3537:     if (jdb->onUpdate && (!ojdb || !ojdb->onUpdate) )",
          "3538:         sqlite3_update_hook(jdb->db, dbUpdateHandler, jdb);",
          "3540:         sqlite3_update_hook(jdb->db, 0, 0);",
          "3542:     if (jdb->onWalHook && (!ojdb || !ojdb->onWalHook) )",
          "3543:         sqlite3_wal_hook(jdb->db, dbWalHandler, jdb);",
          "3545:         sqlite3_wal_hook(jdb->db, 0, 0);",
          "3547:     if (jdb->onRollback && (!ojdb || !ojdb->onRollback) )",
          "3548:         sqlite3_rollback_hook(jdb->db, dbRollbackHandler, jdb);",
          "3550:         sqlite3_rollback_hook(jdb->db, 0, 0);",
          "3552:     if (jdb->onProfile && (!ojdb || !ojdb->onProfile) )",
          "3553:         sqlite3_profile(jdb->db, dbProfileHandler, jdb);",
          "3555:         sqlite3_profile(jdb->db, 0, 0);",
          "3557:     if (jdb->onProgress && jdb->progressSteps && (!ojdb || !ojdb->onProgress || ojdb->progressSteps != jdb->progressSteps) )",
          "3558:         sqlite3_progress_handler(jdb->db, jdb->progressSteps, dbProgressHandler, jdb);",
          "3560:         sqlite3_progress_handler(jdb->db, 0, 0, 0);",
          "3562:     if (!ojdb || jdb->load != ojdb->load)",
          "3563:         sqlite3_enable_load_extension(jdb->db, jdb->load);",
          "3565:     if (!ojdb || jdb->timeout != ojdb->timeout)",
          "3566:         sqlite3_busy_timeout( jdb->db, jdb->timeout );",
          "3569:         sqlite3_unlock_notify(jdb->db, dbUnlockNotify, (void*)jdb);",
          "3571:         sqlite3_unlock_notify(jdb->db, 0, 0);",
          "",
          "[Added Lines]",
          "3513: void dbSetupCallbacks(Jsi_Db *db, Jsi_Db *ojdb)",
          "3515:     if (db->onAuth && (!ojdb || !ojdb->onAuth) )",
          "3516:         sqlite3_set_authorizer(db->db, dbAuthCallback, db);",
          "3518:         sqlite3_set_authorizer(db->db, 0, 0);",
          "3520:     if (db->onCommit && (!ojdb || !ojdb->onCommit) )",
          "3521:         sqlite3_commit_hook(db->db, dbCommitHandler, db);",
          "3523:         sqlite3_commit_hook(db->db, 0, 0);",
          "3525:     if (db->onBusy && (!ojdb || !ojdb->onBusy) )",
          "3526:         sqlite3_busy_handler(db->db, dbBusyHandler, db);",
          "3528:         sqlite3_busy_handler(db->db, 0, 0);",
          "3530:     if (db->onTrace && (!ojdb || !ojdb->onTrace) )",
          "3531:         sqlite3_trace(db->db, dbTraceHandler, db);",
          "3533:         sqlite3_trace(db->db, 0, 0);",
          "3535:     if (db->onNeedCollate && (!ojdb || !ojdb->onNeedCollate) )",
          "3536:         sqlite3_collation_needed(db->db, db, dbCollateNeeded);",
          "3538:         sqlite3_collation_needed(db->db, 0, 0);",
          "3540:     if (db->onUpdate && (!ojdb || !ojdb->onUpdate) )",
          "3541:         sqlite3_update_hook(db->db, dbUpdateHandler, db);",
          "3543:         sqlite3_update_hook(db->db, 0, 0);",
          "3545:     if (db->onWalHook && (!ojdb || !ojdb->onWalHook) )",
          "3546:         sqlite3_wal_hook(db->db, dbWalHandler, db);",
          "3548:         sqlite3_wal_hook(db->db, 0, 0);",
          "3550:     if (db->onRollback && (!ojdb || !ojdb->onRollback) )",
          "3551:         sqlite3_rollback_hook(db->db, dbRollbackHandler, db);",
          "3553:         sqlite3_rollback_hook(db->db, 0, 0);",
          "3555:     if (db->onProfile && (!ojdb || !ojdb->onProfile) )",
          "3556:         sqlite3_profile(db->db, dbProfileHandler, db);",
          "3558:         sqlite3_profile(db->db, 0, 0);",
          "3560:     if (db->onProgress && db->progressSteps && (!ojdb || !ojdb->onProgress || ojdb->progressSteps != db->progressSteps) )",
          "3561:         sqlite3_progress_handler(db->db, db->progressSteps, dbProgressHandler, db);",
          "3563:         sqlite3_progress_handler(db->db, 0, 0, 0);",
          "3565:     if (!ojdb || db->load != ojdb->load)",
          "3566:         sqlite3_enable_load_extension(db->db, db->load);",
          "3568:     if (!ojdb || db->timeout != ojdb->timeout)",
          "3569:         sqlite3_busy_timeout( db->db, db->timeout );",
          "3572:         sqlite3_unlock_notify(db->db, dbUnlockNotify, (void*)db);",
          "3574:         sqlite3_unlock_notify(db->db, 0, 0);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3576: static Jsi_RC SqliteConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3577:                          Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3578: {",
          "3581:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "3596:         rc = JSI_ERROR;",
          "3597:     }",
          "3600:     return rc;",
          "3601: }",
          "",
          "[Removed Lines]",
          "3579:     Jsi_Db *jdb, ojdb;",
          "3580:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3582:     if (jdb->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "3583:         return Jsi_LogError(\"Socket conf() is disabled for set\");",
          "3584:     ojdb = *jdb;",
          "3586:     jdb->lastInsertId = sqlite3_last_insert_rowid(jdb->db);",
          "3587:     jdb->changeCnt = sqlite3_changes(jdb->db);",
          "3588:     jdb->changeCntAll = sqlite3_total_changes(jdb->db);",
          "3589:     jdb->errorCode = sqlite3_errcode(jdb->db);",
          "3591:     Jsi_RC rc = Jsi_OptionsConf(interp, SqlOptions, jdb, opts, ret, 0);",
          "3593:     if (jdb->stmtCacheMax<0 || jdb->stmtCacheMax>MAX_PREPARED_STMTS) {",
          "3594:         JSI_DBQUERY_PRINTF( \"option stmtCacheMax value %d is not in range 0..%d\", jdb->stmtCacheMax, MAX_PREPARED_STMTS);",
          "3595:         jdb->stmtCacheMax = ojdb.stmtCacheMax;",
          "3598:     dbSetupCallbacks(jdb, &ojdb);",
          "3599:     dbPrepStmtLimit(jdb);",
          "",
          "[Added Lines]",
          "3582:     Jsi_Db *db, ojdb;",
          "3583:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3585:     if (db->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "3586:         return Jsi_LogErrorExt(\"Socket conf() is disabled for set\");",
          "3587:     ojdb = *db;",
          "3589:     db->lastInsertId = sqlite3_last_insert_rowid(db->db);",
          "3590:     db->changeCnt = sqlite3_changes(db->db);",
          "3591:     db->changeCntAll = sqlite3_total_changes(db->db);",
          "3592:     db->errorCode = sqlite3_errcode(db->db);",
          "3594:     Jsi_RC rc = Jsi_OptionsConf(interp, SqlOptions, db, opts, ret, 0);",
          "3596:     if (db->stmtCacheMax<0 || db->stmtCacheMax>MAX_PREPARED_STMTS) {",
          "3597:         JSI_DBQUERY_PRINTF( \"option stmtCacheMax value %d is not in range 0..%d\", db->stmtCacheMax, MAX_PREPARED_STMTS);",
          "3598:         db->stmtCacheMax = ojdb.stmtCacheMax;",
          "3601:     dbSetupCallbacks(db, &ojdb);",
          "3602:     dbPrepStmtLimit(db);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3687:     Jsi_Db *db = (Jsi_Db*)Jsi_Calloc(1, sizeof(*db) );",
          "3688:     if( db==0 ) {",
          "3689:         Jsi_DSFree(&dStr);",
          "3691:         return JSI_ERROR;",
          "3692:     }",
          "3693:     db->sig = SQLITE_SIG_DB;",
          "3695:     db->_->newCnt++;",
          "3696:     db->_->activeCnt++;",
          "3697:     db->stmtCacheMax = NUM_PREPARED_STMTS;",
          "",
          "[Removed Lines]",
          "3690:         Jsi_LogError(\"malloc failed\");",
          "3694:     db->_ = &dbObjCmd;",
          "",
          "[Added Lines]",
          "3692:         Jsi_LogErrorExt(\"malloc failed\");",
          "3695:     db->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "3696:     Jsi_LogDebugExt(\"Starting DB\");",
          "3698:     db->_ = &db_PkgStatus;",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3705:     if (ismem == 0 &&",
          "3706:         (Jsi_InterpAccess(interp, vFile, (db->readonly ? JSI_INTACCESS_READ : JSI_INTACCESS_WRITE)) != JSI_OK",
          "3707:         || (create && Jsi_InterpAccess(interp, vFile, JSI_INTACCESS_CREATE) != JSI_OK))) {",
          "3709:         goto bail;",
          "3710:     }",
          "3712:     if (db->stmtCacheMax<0 || db->stmtCacheMax>MAX_PREPARED_STMTS) {",
          "3714:         goto bail;",
          "3715:     }",
          "3716:     if (!db->udata) {",
          "",
          "[Removed Lines]",
          "3708:         Jsi_LogError(\"Safe accces denied\");",
          "3713:         Jsi_LogError(\"option stmtCacheMax value %d is not in range 0..%d\", db->stmtCacheMax, MAX_PREPARED_STMTS);",
          "",
          "[Added Lines]",
          "3712:         Jsi_LogErrorExt(\"Safe accces denied\");",
          "3717:         Jsi_LogErrorExt(\"option stmtCacheMax value %d is not in range 0..%d\", db->stmtCacheMax, MAX_PREPARED_STMTS);",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3743:     }",
          "3745:     if (SQLITE_OK != sqlite3_open_v2(zFile, &db->db, flags, vfs)) {",
          "3747:         goto bail;",
          "3748:     }",
          "",
          "[Removed Lines]",
          "3746:         Jsi_LogError(\"db open failed: %s\", zFile);",
          "",
          "[Added Lines]",
          "3750:         Jsi_LogErrorExt(\"db open failed: %s\", zFile);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3816:     return NULL;",
          "3817: }",
          "3820:                             int dataIdx, int bindMax, Jsi_CDataDb *dbopts)",
          "3821: {",
          "3823:     int j, k, cnt = 0, idx, sidx = -1, rc = 0;",
          "3824:     Jsi_StructSpec *specPtr, *specs;",
          "3825:     void *rec;",
          "",
          "[Removed Lines]",
          "3819: static Jsi_RC dbBindOptionStmt(Jsi_Db *jdb, sqlite3_stmt *pStmt, OptionBind *obPtr,",
          "3822:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "3823: static Jsi_RC dbBindOptionStmt(Jsi_Db *db, sqlite3_stmt *pStmt, OptionBind *obPtr,",
          "3826:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3849:             if (bindMax>0 && k>=bindMax)",
          "3850:                 continue;",
          "3851:             if (!dbopts[k].sf) {",
          "3853:                 continue;",
          "3854:             }",
          "3855:         }",
          "",
          "[Removed Lines]",
          "3852:                 Jsi_LogError(\"bad bind: %s\", bName);",
          "",
          "[Added Lines]",
          "3856:                 Jsi_LogErrorExt(\"bad bind: %s\", bName);",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3880:             }",
          "3881:         }",
          "3882:         if (specPtr->id<JSI_OPTION_BOOL || specPtr->id>=JSI_OPTION_END)",
          "3885:         char *ptr = (char *)rec + specPtr->offset;",
          "3886:         switch (specPtr->id) {",
          "",
          "[Removed Lines]",
          "3883:             return Jsi_LogError(\"unknown bind: %s\", bName);",
          "",
          "[Added Lines]",
          "3887:             return Jsi_LogErrorExt(\"unknown bind: %s\", bName);",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "3930:                 rc = sqlite3_bind_text(pStmt, idx, Jsi_DSValue(&dStr), -1, SQLITE_TRANSIENT );",
          "3931:                 Jsi_DSFree(&dStr);",
          "3932:             } else",
          "3934:             break;",
          "3935:         }",
          "3936:         case JSI_OPTION_DSTRING:",
          "3937:             eStr = (Jsi_DString*)ptr;",
          "3939:                 rc = sqlite3_bind_text(pStmt, idx, NULL, -1, statFlags );",
          "3940:             else",
          "3941:                 rc = sqlite3_bind_text(pStmt, idx, Jsi_DSValue(eStr), -1, statFlags );",
          "3942:             break;",
          "3943:         case JSI_OPTION_STRBUF:",
          "3945:                 rc = sqlite3_bind_text(pStmt, idx, NULL, -1, statFlags );",
          "3946:             else",
          "3947:                 rc = sqlite3_bind_text(pStmt, idx, (char*)ptr, -1, statFlags );",
          "",
          "[Removed Lines]",
          "3933:                 return Jsi_LogError(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "3938:             if (jdb->optPtr->nullvalue && !Jsi_Strcmp(jdb->optPtr->nullvalue, Jsi_DSValue(eStr)))",
          "3944:             if (jdb->optPtr->nullvalue && ptr && !Jsi_Strcmp(jdb->optPtr->nullvalue, (char*)ptr))",
          "",
          "[Added Lines]",
          "3937:                 return Jsi_LogErrorExt(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "3942:             if (db->optPtr->nullvalue && !Jsi_Strcmp(db->optPtr->nullvalue, Jsi_DSValue(eStr)))",
          "3948:             if (db->optPtr->nullvalue && ptr && !Jsi_Strcmp(db->optPtr->nullvalue, (char*)ptr))",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "3968: #else",
          "3969:         default:",
          "3970: #endif",
          "3972:             return JSI_ERROR;",
          "3974:         }",
          "3975:         if (rc != SQLITE_OK)",
          "3977:     }",
          "3978:     cnt++;",
          "3979:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "3971:             Jsi_LogError(\"unsupported jdb option type \\\"%s\\\" for \\\"%s\\\"\", jsi_DbOptionTypeStr(specPtr->id, 0), specPtr->name);",
          "3976:             Jsi_LogError(\"bind failure: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3975:             Jsi_LogErrorExt(\"unsupported db option type \\\"%s\\\" for \\\"%s\\\"\", jsi_DbOptionTypeStr(specPtr->id, 0), specPtr->name);",
          "3980:             Jsi_LogErrorExt(\"bind failure: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "3985: static Jsi_RC dbEvalStepOption(DbEvalContext *p, OptionBind *obPtr, int *cntPtr, int dataIdx, int bindMax, Jsi_CDataDb *dbopts, int *erc) {",
          "3987:     int cnt = 0;",
          "3988:     while( p->zSql[0] || p->pPreStmt ) {",
          "3989:         Jsi_RC rc;",
          "3990:         cnt++;",
          "3991:         if( p->pPreStmt==0 ) {",
          "3993:             if( rc!=JSI_OK ) return rc;",
          "3994:         }",
          "3995:         if (bindMax!=0) {",
          "3997:             if( rc!=JSI_OK ) return rc;",
          "3998:         }",
          "3999:         rc = dbEvalStepSub(p, 1, erc);",
          "",
          "[Removed Lines]",
          "3986:     Jsi_Db *jdb = p->jdb;",
          "3992:             rc = dbPrepareStmt(p->jdb, p->zSql, &p->zSql, &p->pPreStmt);",
          "3996:             rc = dbBindOptionStmt(jdb, p->pPreStmt->pStmt, obPtr, dataIdx, bindMax, dbopts);",
          "",
          "[Added Lines]",
          "3990:     Jsi_Db *db = p->db;",
          "3996:             rc = dbPrepareStmt(p->db, p->zSql, &p->zSql, &p->pPreStmt);",
          "4000:             rc = dbBindOptionStmt(db, p->pPreStmt->pStmt, obPtr, dataIdx, bindMax, dbopts);",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "4018:     return NULL;",
          "4019: }",
          "4022: {",
          "4023: #ifndef JSI_LITE_ONLY",
          "4026: #endif",
          "4027:     Jsi_HashEntry *hPtr;",
          "4028:     bool isNew;",
          "4030:     assert(hPtr) ;",
          "4031:     return (const char*)Jsi_HashKeyGet(hPtr);",
          "4032: }",
          "4035: {",
          "4036:     void *rec = dbopts[0].data, **recPtrPtr = NULL;",
          "4038:     Jsi_StructSpec *specPtr, *specs = dbopts[0].sf;",
          "4039:     DbEvalContext sEval = {};",
          "4040:     int ccnt = 0;",
          "",
          "[Removed Lines]",
          "4021: const char* Jsi_DbKeyAdd(Jsi_Db *jdb, const char *str)",
          "4024:     if (jdb->interp)",
          "4025:         return Jsi_KeyAdd(jdb->interp, str);",
          "4029:     hPtr = Jsi_HashEntryNew(jdb->strKeyTbl, str, &isNew);",
          "4034: static int dbOptSelect(Jsi_Db *jdb, const char *cmd, OptionBind *obPtr, Jsi_CDataDb *dbopts)",
          "4037:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "4025: const char* Jsi_DbKeyAdd(Jsi_Db *db, const char *str)",
          "4028:     if (db->interp)",
          "4029:         return Jsi_KeyAdd(db->interp, str);",
          "4033:     hPtr = Jsi_HashEntryNew(db->strKeyTbl, str, &isNew);",
          "4038: static int dbOptSelect(Jsi_Db *db, const char *cmd, OptionBind *obPtr, Jsi_CDataDb *dbopts)",
          "4041:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "4048:     Jsi_DString sStr, *dStr = &sStr;",
          "4049:     Jsi_DSInit(dStr);",
          "4050: #endif",
          "4052:     if (dbopts->noCache)",
          "4053:         sEval.nocache = 1;",
          "4054:     Jsi_DSAppendLen(dStr, cmd, cPtr?(cPtr-cmd):-1);",
          "",
          "[Removed Lines]",
          "4051:     dbEvalInit(interp, &sEval, jdb, NULL, dStr, 0, 0);",
          "",
          "[Added Lines]",
          "4055:     dbEvalInit(interp, &sEval, db, NULL, dStr, 0, 0);",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "4065:         Jsi_DSAppend(dStr, cPtr+3, NULL);",
          "4066:     }",
          "4067:     sEval.zSql = Jsi_DSValue(dStr);",
          "4069:     int rc = JSI_ERROR, erc = -1, structSize = 0;",
          "4070:     int cnt = 0, dataMax = (dbopts->isPtr2?0:1);",
          "4071:     int multi = (dbopts->isPtr2!=0);",
          "",
          "[Removed Lines]",
          "4068:     sEval.nocache = jdb->optPtr->nocache;",
          "",
          "[Added Lines]",
          "4072:     sEval.nocache = db->optPtr->nocache;",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "4140:         for (idx=0; idx<nCol; idx++) {",
          "4141:             specPtr = dbLookupSpecFromName(specs, apColName[idx]);",
          "4142:             if (!specPtr) {",
          "4144:                 goto bail;",
          "4145:             }",
          "4146:             if (specPtr->id<JSI_OPTION_BOOL || specPtr->id>=JSI_OPTION_END) {",
          "4148:                 goto bail;",
          "4149:             }",
          "4150:             char *ptr = (char*)prec + specPtr->offset;",
          "",
          "[Removed Lines]",
          "4143:                 Jsi_LogError(\"unknown column name: %s\", apColName[idx]);",
          "4147:                 Jsi_LogError(\"unknown option type \\\"%d\\\" for \\\"%s\\\"\", specPtr->id, specPtr->name);",
          "",
          "[Added Lines]",
          "4147:                 Jsi_LogErrorExt(\"unknown column name: %s\", apColName[idx]);",
          "4151:                 Jsi_LogErrorExt(\"unknown option type \\\"%d\\\" for \\\"%s\\\"\", specPtr->id, specPtr->name);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "4192:                     eStr = (Jsi_DString*)ptr;",
          "4193:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4194:                     if (!str)",
          "4196:                     Jsi_DSSet(eStr, str?str:\"\");",
          "4197:                     break;",
          "4198:                 case JSI_OPTION_STRBUF:",
          "4199:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4200:                     if (!str)",
          "4202:                     strncpy((char*)ptr, str?str:\"\", specPtr->size);",
          "4203:                     ((char*)ptr)[specPtr->size-1] = 0;",
          "4204:                     break;",
          "",
          "[Removed Lines]",
          "4195:                         str = jdb->optPtr->nullvalue;",
          "4201:                         str = jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "4199:                         str = db->optPtr->nullvalue;",
          "4205:                         str = db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "4210:                             goto bail;",
          "4211:                         }",
          "4212:                     } else {",
          "4214:                         goto bail;",
          "4215:                     }",
          "4216:                     break;",
          "",
          "[Removed Lines]",
          "4213:                         Jsi_LogError(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "",
          "[Added Lines]",
          "4217:                         Jsi_LogErrorExt(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "4218:                 case JSI_OPTION_STRKEY:",
          "4219:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4220:                     if (!str)",
          "4223:                     break;",
          "4224: #ifndef JSI_LITE_ONLY",
          "4225:                 case JSI_OPTION_STRING: {",
          "",
          "[Removed Lines]",
          "4221:                         str = jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "4225:                         str = db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "4230:                     }",
          "4231:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4232:                     if (!str)",
          "4234:                     if (str) {",
          "4235:                         vPtr = Jsi_ValueNewStringDup(interp, str);",
          "",
          "[Removed Lines]",
          "4233:                         str = jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "4237:                         str = db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "4275:     return erc;",
          "4276: }",
          "4279: {",
          "4280:     int k, cnt, erc = -1;",
          "4281:     Jsi_CDataDb statbinds[] = {{}, {}};",
          "4282:     if (!dbopts) dbopts = statbinds;",
          "4283:     OptionBind ob = {.binds = dbopts};",
          "4284:     Jsi_StructSpec *specPtr, *specs;",
          "4286:     if (!query) query=\"\";",
          "4287:     if (query[0]==';') {",
          "4290:             return erc;",
          "4291:         }",
          "4292:         return 0;",
          "",
          "[Removed Lines]",
          "4278: static int jsi_DbQuery(Jsi_Db *jdb, Jsi_CDataDb *dbopts, const char *query)",
          "4285:     Jsi_Interp *interp = jdb->interp;",
          "4288:         if (!dbExecCmd(jdb, query+1, &erc)) {",
          "4289:             Jsi_LogError(\"EXEC ERROR=\\\"%s\\\", SQL=\\\"%s\\\"\", sqlite3_errmsg(jdb->db), query);",
          "",
          "[Added Lines]",
          "4282: static int jsi_DbQuery(Jsi_Db *db, Jsi_CDataDb *dbopts, const char *query)",
          "4289:     Jsi_Interp *interp = db->interp;",
          "4292:         if (!dbExecCmd(db, query+1, &erc)) {",
          "4293:             Jsi_LogErrorExt(\"EXEC ERROR=\\\"%s\\\", SQL=\\\"%s\\\"\", sqlite3_errmsg(db->db), query);",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4294:     const char *cPtr = Jsi_Strstr(query, \" %s\");",
          "4295:     if (!cPtr) cPtr = Jsi_Strstr(query, \"\\t%s\");",
          "4296:     if (!dbopts) {",
          "4298:         return -1;",
          "4299:     }",
          "4300:     if (!dbopts[0].data) {",
          "4302:         return -1;",
          "4303:     }",
          "4304:     if (!dbopts[0].sf) {",
          "4306:         return -1;",
          "4307:     }",
          "4308:     for (k=0; dbopts[k].sf; k++) {",
          "",
          "[Removed Lines]",
          "4297:         Jsi_LogError(\"dbopts may not be null\");",
          "4301:         Jsi_LogError(\"data may not be null\");",
          "4305:         Jsi_LogError(\"specs may not be null\");",
          "",
          "[Added Lines]",
          "4301:         Jsi_LogErrorExt(\"dbopts may not be null\");",
          "4305:         Jsi_LogErrorExt(\"data may not be null\");",
          "4309:         Jsi_LogErrorExt(\"specs may not be null\");",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4315:                 if (k==0) {",
          "4316:                     if (specPtr->flags&JSI_OPT_DB_ROWID) {",
          "4317:                         if (specPtr->id != JSI_OPTION_INT64) {",
          "4319:                             return -1;",
          "4320:                         }",
          "4321:                         ob.rowidPtr = specPtr;",
          "",
          "[Removed Lines]",
          "4318:                             Jsi_LogError(\"rowid flag must be a wide field: %s\", specPtr->name);",
          "",
          "[Added Lines]",
          "4322:                             Jsi_LogErrorExt(\"rowid flag must be a wide field: %s\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4324:                         if (specPtr->id == JSI_OPTION_BOOL || specPtr->id == JSI_OPTION_INT) {",
          "4325:                             ob.dirtyPtr = specPtr;",
          "4326:                         } else {",
          "4328:                             return -1;",
          "4329:                         }",
          "4330:                     }",
          "",
          "[Removed Lines]",
          "4327:                             Jsi_LogError(\"dirty flag must be a int/bool field: %s\", specPtr->name);",
          "",
          "[Added Lines]",
          "4331:                             Jsi_LogErrorExt(\"dirty flag must be a int/bool field: %s\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "4371:     }",
          "4373:     if (!Jsi_Strncasecmp(query, \"SELECT\", 6))",
          "4376:     DbEvalContext sEval = {};",
          "4377:     int insert = 0, replace = 0, update = 0;",
          "",
          "[Removed Lines]",
          "4374:         return dbOptSelect(jdb, query, &ob, dbopts);",
          "",
          "[Added Lines]",
          "4378:         return dbOptSelect(db, query, &ob, dbopts);",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "4384: #endif",
          "4385:     if (dbopts->noCache)",
          "4386:         sEval.nocache = 1;",
          "4388:         return -1;",
          "4389:     int dataMax = dbopts[0].arrSize;",
          "4390:     cnt = 0;",
          "",
          "[Removed Lines]",
          "4387:     if (dbEvalInit(interp, &sEval, jdb, NULL, dStr, 0, 0) != JSI_OK)",
          "",
          "[Added Lines]",
          "4391:     if (dbEvalInit(interp, &sEval, db, NULL, dStr, 0, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "4450:     } else if (!Jsi_Strncasecmp(query, \"DELETE\", 6)) {",
          "4451:         Jsi_DSAppend(dStr, query, NULL);",
          "4452:     } else {",
          "4454:         return -1;",
          "4455:     }",
          "4456:     sEval.zSql = Jsi_DSValue(dStr);",
          "4460:     int rc, bindMax = -1, dataIdx = 0;",
          "4461:     cnt = 0;",
          "",
          "[Removed Lines]",
          "4453:         Jsi_LogError(\"unrecognized query \\\"%s\\\": expected one of: SELECT, UPDATE, INSERT, REPLACE or DELETE\", query);",
          "4457:     if (jdb->echo && sEval.zSql)",
          "4458:         Jsi_LogInfo(\"SQL-ECHO: %s\\n\", sEval.zSql);",
          "",
          "[Added Lines]",
          "4457:         Jsi_LogErrorExt(\"unrecognized query \\\"%s\\\": expected one of: SELECT, UPDATE, INSERT, REPLACE or DELETE\", query);",
          "4461:     if (db->echo && sEval.zSql)",
          "4462:         Jsi_LogInfoExt(\"SQL-ECHO: %s\", sEval.zSql);",
          "4463:     Jsi_LogTraceExt(\"SQL-QUERY: %s\", sEval.zSql);",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "4463:     int isnew = (replace||insert);",
          "4464:     int didBegin = 0;",
          "4465:     DbEvalContext *p = &sEval;",
          "4467:     if( rc!=JSI_OK ) return -1;",
          "4468:     if (dataMax>1 && !dbopts->noBegin) {",
          "4469:         didBegin = 1;",
          "4471:             goto bail;",
          "4472:     }",
          "4473:     while (dataIdx<dataMax) {",
          "",
          "[Removed Lines]",
          "4466:     rc = dbPrepareStmt(p->jdb, p->zSql, &p->zSql, &p->pPreStmt);",
          "4470:         if (!dbExecCmd(jdb, JSI_DBQUERY_BEGIN_STR, &erc))",
          "",
          "[Added Lines]",
          "4471:     rc = dbPrepareStmt(p->db, p->zSql, &p->zSql, &p->pPreStmt);",
          "4475:         if (!dbExecCmd(db, JSI_DBQUERY_BEGIN_STR, &erc))",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "4489:             isDirty &= ~(1<<(bit));",
          "4491:         }",
          "4493:         if( rc!=JSI_OK )",
          "4494:             goto bail;",
          "4495:         bindMax = 1;",
          "4496:         rc = dbEvalStepSub(p, (dataIdx>=dataMax), &erc);",
          "4497:         if (rc == JSI_ERROR)",
          "4498:             goto bail;",
          "4500:         if (rc != JSI_OK && rc != JSI_BREAK)",
          "4501:             break;",
          "4502:         if (ob.rowidPtr && isnew) {",
          "",
          "[Removed Lines]",
          "4492:         rc = dbBindOptionStmt(jdb, p->pPreStmt->pStmt, &ob, dataIdx, bindMax, dbopts);",
          "4499:         cnt += sqlite3_changes(jdb->db);",
          "",
          "[Added Lines]",
          "4497:         rc = dbBindOptionStmt(db, p->pPreStmt->pStmt, &ob, dataIdx, bindMax, dbopts);",
          "4504:         cnt += sqlite3_changes(db->db);",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "4506:             else",
          "4507:                 rec = (char*)rec + (dataIdx * structSize);",
          "4508:             char *ptr = (char*)rec + ob.rowidPtr->offset;",
          "4510:         }",
          "4511:         dataIdx++;",
          "4512:     }",
          "4514:         rc = JSI_ERROR;",
          "4515:     dbEvalFinalize(&sEval);",
          "4516:     if( rc==JSI_BREAK ) {",
          "",
          "[Removed Lines]",
          "4513:     if (didBegin && !dbExecCmd(jdb, JSI_DBQUERY_COMMIT_STR, &erc))",
          "",
          "[Added Lines]",
          "4518:     if (didBegin && !dbExecCmd(db, JSI_DBQUERY_COMMIT_STR, &erc))",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "4521: bail:",
          "4522:     dbEvalFinalize(&sEval);",
          "4523:     if (didBegin)",
          "4525:     return erc;",
          "4526: }",
          "",
          "[Removed Lines]",
          "4524:         dbExecCmd(jdb, JSI_DBQUERY_ROLLBACK_STR, NULL);",
          "",
          "[Added Lines]",
          "4529:         dbExecCmd(db, JSI_DBQUERY_ROLLBACK_STR, NULL);",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "4531: #undef Jsi_DbNew",
          "4532: #endif",
          "4533: int",
          "4535: {",
          "4537: #ifdef JSI_DBQUERY_ERRORCMD",
          "4538:     if (rc<0)",
          "4540: #endif",
          "4541:     return rc;",
          "4542: }",
          "4545: {",
          "4548: }",
          "",
          "[Removed Lines]",
          "4534: Jsi_DbQuery(Jsi_Db *jdb, Jsi_CDataDb *dbopts, const char *query)",
          "4536:     int rc = jsi_DbQuery(jdb, dbopts, query);",
          "4539:         rc = JSI_DBQUERY_ERRORCMD(jdb, specs, data, arrSize, query, dopts, rc);",
          "4544: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* jdb)",
          "4546:     SQLSIGASSERT(jdb,DB);",
          "4547:     return jdb->db;",
          "",
          "[Added Lines]",
          "4539: Jsi_DbQuery(Jsi_Db *db, Jsi_CDataDb *dbopts, const char *query)",
          "4541:     int rc = jsi_DbQuery(db, dbopts, query);",
          "4544:         rc = JSI_DBQUERY_ERRORCMD(db, specs, data, arrSize, query, dopts, rc);",
          "4549: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* db)",
          "4551:     SQLSIGASSERT(db,DB);",
          "4552:     return db->db;",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "4648:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "4649:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "4650:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "4652:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"Sqlite\", jsi_DbPkgVersion, Jsi_InitSqlite, &dbPkgOpts);",
          "4653:     Jsi_DecrRefCount(interp, info);",
          "4654:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "4651:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&dbObjCmd, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "[Added Lines]",
          "4656:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "4689: #endif",
          "4691: int",
          "4693: {",
          "4694:     if (!jsi_dbVfsPtr) {",
          "4695:         printf( \"Sqlite unsupported\\n\");",
          "4696:         return -1;",
          "4697:     }",
          "4699: }",
          "4702: {",
          "4703:     if (!jsi_dbVfsPtr) {",
          "4704:         printf( \"Sqlite unsupported\\n\");",
          "4705:         return NULL;",
          "4706:     }",
          "4708: }",
          "4710: Jsi_Db* Jsi_DbNew(const char *zFile, int inFlags /* JSI_DBI_* */)",
          "",
          "[Removed Lines]",
          "4692: Jsi_DbQuery(Jsi_Db *jdb, Jsi_CDataDb *dPtr, const char *query)",
          "4698:     return jsi_dbVfsPtr->dbcQuery(jdb, dPtr, query);",
          "4701: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* jdb)",
          "4707:     return jsi_dbVfsPtr->dbHandle(interp, jdb);",
          "",
          "[Added Lines]",
          "4697: Jsi_DbQuery(Jsi_Db *db, Jsi_CDataDb *dPtr, const char *query)",
          "4703:     return jsi_dbVfsPtr->dbcQuery(db, dPtr, query);",
          "4706: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* db)",
          "4712:     return jsi_dbVfsPtr->dbHandle(interp, db);",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "4717: }",
          "4719: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4725: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"d977e4091854ba810b69d2f9aba2c778\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"b43953bc9ba7fc791f74958478337968\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:     Jsi_Mutex*(*_Jsi_MutexNew)(Jsi_Interp *interp, int timeout, int flags);",
          "377:     void*(*_Jsi_CurrentThread)(void);",
          "378:     void*(*_Jsi_InterpThread)(Jsi_Interp *interp);",
          "380:     Jsi_Event*(*_Jsi_EventNew)(Jsi_Interp *interp, Jsi_EventHandlerProc *callback, void* data);",
          "381:     void(*_Jsi_EventFree)(Jsi_Interp *interp, Jsi_Event* event);",
          "382:     int(*_Jsi_EventProcess)(Jsi_Interp *interp, int maxEvents);",
          "",
          "[Removed Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsg)(Jsi_Interp *interp, uint level, const char *format,...);",
          "",
          "[Added Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsgExt)(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *val);",
          "452:     void *endPtr;",
          "453: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     Jsi_PkgOpts*(*_Jsi_CommandPkgOpts)(Jsi_Interp *interp, Jsi_Func *func);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "804:     Jsi_MutexNew,\\",
          "805:     Jsi_CurrentThread,\\",
          "806:     Jsi_InterpThread,\\",
          "808:     Jsi_EventNew,\\",
          "809:     Jsi_EventFree,\\",
          "810:     Jsi_EventProcess,\\",
          "",
          "[Removed Lines]",
          "807:     Jsi_LogMsg,\\",
          "",
          "[Added Lines]",
          "808:     Jsi_LogMsgExt,\\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "877:     Jsi_UserObjName,\\",
          "878:     Jsi_ValueNewRegExp,\\",
          "879:     Jsi_ObjGetValues,\\",
          "880:     NULL",
          "882: #ifdef JSI_USE_STUBS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "881:     Jsi_CommandPkgOpts,\\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1228: #define Jsi_MutexNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_MutexNew(n0,n1,n2))",
          "1229: #define Jsi_CurrentThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_CurrentThread(n0))",
          "1230: #define Jsi_InterpThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpThread(n0))",
          "1232: #define Jsi_EventNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_EventNew(n0,n1,n2))",
          "1233: #define Jsi_EventFree(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventFree(n0,n1))",
          "1234: #define Jsi_EventProcess(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventProcess(n0,n1))",
          "",
          "[Removed Lines]",
          "1231: #define Jsi_LogMsg(n0,n1,n2,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsg(n0,n1,n2,##__VA_ARGS__))",
          "",
          "[Added Lines]",
          "1233: #define Jsi_LogMsgExt(n0,n1,n2,n3,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsgExt(n0,n1,n2,n3,##__VA_ARGS__))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1301: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1302: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "1303: #define Jsi_ObjGetValues(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2))",
          "1305: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306: #define Jsi_CommandPkgOpts(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_CommandPkgOpts(n0,n1))",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: jsi_IntData jsiIntData = {};",
          "75: #ifdef JSI_LITE_ONLY",
          "77:     va_list va;",
          "78:     va_start (va, format);",
          "79:     const char *mt = (code <= JSI__LOGLAST ? jsi_LogCodes[code] : \"\");",
          "",
          "[Removed Lines]",
          "76: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, uint code, const char *format,...) {",
          "",
          "[Added Lines]",
          "76: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts *popts, uint code, const char *format,...) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "114:         return JSI_ERROR;",
          "117:     char pbuf[JSI_BUFSIZ/8] = \"\";",
          "118:     char buf[JSI_BUFSIZ/2];",
          "119:     const char *term = \"\", *pterm=pbuf;",
          "",
          "[Removed Lines]",
          "112: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, uint code, const char *format,...) {",
          "113:     if (Jsi_InterpGone(interp))",
          "115:     va_list va;",
          "116:     va_start (va, format);",
          "",
          "[Added Lines]",
          "112: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint code, const char *format,...) {",
          "113:     if (!interp || Jsi_InterpGone(interp))",
          "115:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "116:     uint log = 0, mask, cshift = (1<<code);",
          "117:     if (!popts)",
          "118:         log = jsi_GetLogFlag(interp, code);",
          "119:     else {",
          "120:         mask = popts->modConf.logmask;",
          "121:         log = popts->modConf.log;",
          "122:         log = ((~mask|log)&cshift);",
          "123:         isExt = 1;",
          "124:         ftail = 1;",
          "125:     }",
          "126:     if (!log) {",
          "127:         if (code == JSI_LOG_ERROR)",
          "128:             puts(\"FUCK\");",
          "129:         else",
          "130:             return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "131:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     Jsi_OptionSpec *oep = interp->parseMsgSpec;",
          "128:     const char *pps = \"\", *curFile = \"\";",
          "129:     char *ss = interp->lastPushStr;",
          "131:     jsi_Frame *fp = interp->framePtr;",
          "134:     if (interp==NULL)",
          "135:         interp = jsiIntData.mainInterp;",
          "136:     LastInterp = interp;",
          "",
          "[Removed Lines]",
          "130:     uint log = jsi_GetLogFlag(interp, code);",
          "132:     if (!log)",
          "133:         return JSI_OK;",
          "",
          "[Added Lines]",
          "146:     va_list va;",
          "147:     va_start (va, format);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:     if (!Jsi_Strchr(format,'\\n')) term = \"\\n\";",
          "175:     if (interp->typeCheck.strict && interp->lastParseOpt)",
          "176:         ss = (char*)Jsi_ValueToString(interp, interp->lastParseOpt, NULL);",
          "178:         char psbuf[JSI_BUFSIZ/6];",
          "179:         if (Jsi_Strchr(ss,'%')) {",
          "180:             char *s = ss, *sd = psbuf;",
          "",
          "[Removed Lines]",
          "177:     if (code != JSI_LOG_INFO && code < JSI_LOG_TEST && interp && ss && ss[0]) {",
          "",
          "[Added Lines]",
          "191:     if (isExt)",
          "192:         snprintf(pbuf, sizeof(pbuf), \"    (c-extn [%s])\", popts->cmdSpec->name);",
          "193:     else if (code != JSI_LOG_INFO && code < JSI_LOG_TEST && ss && ss[0]) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:         }",
          "226:     }",
          "227:     char *cpt;",
          "229:         curFile = cpt+1;",
          "230:     if (curFile && curFile[0] && Jsi_Strchr(curFile,'%')==0 && !islog) {",
          "231:         if (!interp->subOpts.logColNums)",
          "",
          "[Removed Lines]",
          "228:     if (curFile && interp->logOpts.ftail && (cpt =Jsi_Strrchr(curFile, '/')) && cpt[1])",
          "",
          "[Added Lines]",
          "244:     if (curFile && ftail && (cpt =Jsi_Strrchr(curFile, '/')) && cpt[1])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "283:     if ((code & jsi_fatalexit) && !interp->opts.no_exit)",
          "284:         jsi_DoExit(interp, 1);",
          "285:     return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "289: }",
          "291: const char* Jsi_KeyAdd(Jsi_Interp *interp, const char *str)",
          "",
          "[Removed Lines]",
          "287:     va_end(va);",
          "288:     return JSI_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #ifndef JSI_LITE_ONLY",
          "2: #if JSI__WEBSOCKET==1",
          "3: #if JSI__MEMDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define JSI_EXT_OPTS cmdPtr->popts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: typedef struct {",
          "98: static Jsi_OptionSpec wsObjCmd_Specs[] =",
          "99: {",
          "103: };",
          "105: typedef struct {",
          "",
          "[Removed Lines]",
          "94: } ws_ObjCmd;",
          "96: static ws_ObjCmd wsObjCmd = {};",
          "100:     JSI_OPT(INT,   ws_ObjCmd, activeCnt, .help=\"Number of active objects\"),",
          "101:     JSI_OPT(INT,   ws_ObjCmd, newCnt,    .help=\"Number of new calls\"),",
          "102:     JSI_OPT_END(ws_ObjCmd, .help=\"Options for WebSocket module\")",
          "",
          "[Added Lines]",
          "95: } ws_Pkg_Status;",
          "97: static ws_Pkg_Status ws_PkgStatus = {};",
          "101:     JSI_OPT(INT,   ws_Pkg_Status, activeCnt, .help=\"Number of active objects\"),",
          "102:     JSI_OPT(INT,   ws_Pkg_Status, newCnt,    .help=\"Number of new calls\"),",
          "103:     JSI_OPT_END(ws_Pkg_Status, .help=\"Options for WebSocket module\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:     uint sig;",
          "118:     Jsi_Interp *interp;",
          "120:     Jsi_Hash *pssTable, *handlers, *fileHash;",
          "121:     Jsi_Value *onAuth, *onCloseLast, *onClose, *onFilter, *onOpen, *onRecv,",
          "",
          "[Removed Lines]",
          "119:     ws_ObjCmd *_;",
          "",
          "[Added Lines]",
          "120:     ws_Pkg_Status *_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:     const char *curRoot;",
          "182:     int sfd;        // File descriptor for http.",
          "183:     Jsi_DString cName;",
          "184: } jsi_wsCmdObj;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     Jsi_PkgOpts *popts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:         const char *hn = Jsi_ValueArrayIndexToStr(interp, hdrs, i, NULL),",
          "828:         if (!hn || !hv || !(len=Jsi_Strlen(hn))) {",
          "830:             return false;",
          "831:         }",
          "832:         if (hn[len-1] != ':') {",
          "834:             return false;",
          "835:         }",
          "836:         if (lws_add_http_header_by_name(wsi, (const uchar *)hn, (const uchar *)hv, hvl, &p, end))",
          "",
          "[Removed Lines]",
          "829:             Jsi_LogWarn(\"Header invalid: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "833:             Jsi_LogWarn(\"Header name must end in colon: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "",
          "[Added Lines]",
          "831:             Jsi_LogWarnExt(\"Header invalid: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "835:             Jsi_LogWarnExt(\"Header name must end in colon: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "910:         if (mVal) {",
          "911:             bool b = 0;",
          "912:             if (Jsi_ValueGetBoolean(interp, mVal, &b) != JSI_OK) {",
          "914:                 Jsi_DecrRefCount(interp, cmdPtr->ssiExts);",
          "915:                 cmdPtr->ssiExts = NULL;",
          "916:             }",
          "",
          "[Removed Lines]",
          "913:                 Jsi_LogWarn(\"expected bool for ssiExts '%s': disabling all\\n\", ext);",
          "",
          "[Added Lines]",
          "915:                 Jsi_LogWarnExt(\"expected bool for ssiExts '%s': disabling all\\n\", ext);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "979:         llen = se-sp;",
          "980:         Jsi_DSSetLength(&lStr, 0);",
          "981:         cp = Jsi_DSAppendLen(&lStr, sp, llen);",
          "983:         if (!II[ii].elide)",
          "984:             Jsi_DSAppendLen(dStr, cs, sp-cs-4);",
          "",
          "[Removed Lines]",
          "982:         if (Jsi_Strchr(cp, '\\n')) { rc = Jsi_LogError(\"unexpected newline in directive \\\"%.10s\\\"\", cp); break; }",
          "",
          "[Added Lines]",
          "984:         if (Jsi_Strchr(cp, '\\n')) { rc = Jsi_LogErrorExt(\"unexpected newline in directive \\\"%.10s\\\"\", cp); break; }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1093:                 val = Jsi_ValueObjLookup(interp, pss->queryObj, cp, 0);",
          "1094:             if (!val) {",
          "1095:                 if (req) { msg = \"symbol not found\"; break; }",
          "1097:             } else if (Jsi_ValueGetBoolean(interp, val, &nifval) != JSI_OK) {",
          "1098:                 const char *valStr = NULL;",
          "1099:                 if (val) valStr = Jsi_ValueString(interp, val, NULL);",
          "1100:                 if (!valStr || Jsi_GetBool(interp, valStr, &nifval) != JSI_OK) {",
          "1101:                     if (!warn) { msg = \"symbol not a boolean\"; break; }",
          "1103:                 }",
          "1104:             }",
          "1105:             if (inot) nifval = !nifval;",
          "",
          "[Removed Lines]",
          "1096:                 if (warn) Jsi_LogWarn(\"symbol \\\"%s\\\" not found: %s\", cp, fbuf);",
          "1102:                     Jsi_LogWarn(\"symbol \\\"%s\\\" should be a boolean: %s\", cp, fbuf);",
          "",
          "[Added Lines]",
          "1098:                 if (warn) Jsi_LogWarnExt(\"symbol \\\"%s\\\" not found: %s\", cp, fbuf);",
          "1104:                     Jsi_LogWarnExt(\"symbol \\\"%s\\\" should be a boolean: %s\", cp, fbuf);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1139:     }",
          "1140:     if (msg) {",
          "1141:         while (*fname=='/') fname++;",
          "1143:     }",
          "1144:     Jsi_DSFree(&tStr);",
          "1145:     Jsi_DSFree(&lStr);",
          "",
          "[Removed Lines]",
          "1142:         rc = Jsi_LogError(\"SHTML Error in \\\"%s\\\": %s: at \\\"%.40s\\\" \", fname, msg, sp);",
          "",
          "[Added Lines]",
          "1144:         rc = Jsi_LogErrorExt(\"SHTML Error in \\\"%s\\\": %s: at \\\"%.40s\\\" \", fname, msg, sp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1192: {",
          "1193:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1194:     if (!cmdPtr)",
          "1196:     int vlen, nlen;",
          "1197:     const char *kstr, *vstr, *nstr = Jsi_ValueArrayIndexToStr(interp, args, 0, &nlen);",
          "1198:     if (!nstr)",
          "1200:     Jsi_Value *v, *a = cmdPtr->pathAliases;",
          "1201:     if (!a|| !Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) return JSI_OK;",
          "1202:     Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "",
          "[Removed Lines]",
          "1195:         return Jsi_LogError(\"Apply to non-websock object\");",
          "1199:         return Jsi_LogError(\"arg 1: expected string\");",
          "",
          "[Added Lines]",
          "1197:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "1201:         return Jsi_LogErrorExt(\"arg 1: expected string\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1355:                     Jsi_DecrRefCount(interp, ret);",
          "1357:                     if (rc != JSI_OK) {",
          "1359:                         return -1;",
          "1360:                     }",
          "1361:                     ok = rb;",
          "",
          "[Removed Lines]",
          "1358:                         Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "1360:                         Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1464:             Jsi_DecrRefCount(interp, ret);",
          "1466:             if (rc != JSI_OK) {",
          "1468:             } else {",
          "1469:                 Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1470:                 if (mVal)",
          "",
          "[Removed Lines]",
          "1467:                 Jsi_LogWarn(\"websock mimeLookupFunc bad eval\");",
          "",
          "[Added Lines]",
          "1469:                 Jsi_LogWarnExt(\"websock mimeLookupFunc bad eval\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1517:                 if (!vrc || !Jsi_ValueIsFunction(interp, vrc)) {",
          "1518:                     if (vrc)",
          "1519:                         Jsi_DecrRefCount(interp, vrc);",
          "1521:                     jsi_wsServeString(pss, wsi, \"Failed to autoload handler\", 404, NULL, NULL);",
          "1522:                     return -1;",
          "1523:                 }",
          "",
          "[Removed Lines]",
          "1520:                     Jsi_LogError(\"Failed to autoload handle: %s\", hstr);",
          "",
          "[Added Lines]",
          "1522:                     Jsi_LogErrorExt(\"Failed to autoload handle: %s\", hstr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1538:                 if (Jsi_InterpGone(interp))",
          "1539:                     return -1;",
          "1540:                 if (evrc != JSI_OK || !vrc || !Jsi_ValueIsObjType(interp, vrc, JSI_OT_OBJECT)) {",
          "1542:                     jsi_wsServeString(pss, wsi, \"Failed to load obj\", 404, NULL, NULL);",
          "1543:                     return -1;",
          "1544:                 }",
          "1545:                 Jsi_Value *fvrc = Jsi_ValueObjLookup(interp, vrc, \"parse\", 0);",
          "1546:                 if (!fvrc || !Jsi_ValueIsFunction(interp, fvrc)) {",
          "1548:                     jsi_wsServeString(pss, wsi, \"Failed to find parse\", 404, NULL, NULL);",
          "1549:                     return -1;",
          "1550:                 }",
          "",
          "[Removed Lines]",
          "1541:                     Jsi_LogError(\"Failed to load obj: %s\", hstr);",
          "1547:                     Jsi_LogError(\"Failed to find parse: %s\", hstr);",
          "",
          "[Added Lines]",
          "1543:                     Jsi_LogErrorExt(\"Failed to load obj: %s\", hstr);",
          "1549:                     Jsi_LogErrorExt(\"Failed to find parse: %s\", hstr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1576:             }",
          "1578:             if (evrc != JSI_OK) {",
          "1580:             } else if ((!vrc) ||",
          "1581:                 (!(vStr = Jsi_ValueString(interp, vrc, &strLen)))) {",
          "1583:             } else {",
          "1584:                 hrc = jsi_wsServeString(pss, wsi, vStr, 0, NULL, mime);",
          "1585:             }",
          "",
          "[Removed Lines]",
          "1579:                 Jsi_LogError(\"failure in websocket handler\");",
          "1582:                 Jsi_LogError(\"failed to get result\");",
          "",
          "[Added Lines]",
          "1581:                 Jsi_LogErrorExt(\"failure in websocket handler\");",
          "1584:                 Jsi_LogErrorExt(\"failed to get result\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1779:             return JSI_OK;",
          "1780:         vargs[n++]  = Jsi_ValueNewBlob(interp, (uchar*)inPtr, nlen);",
          "1781:         if ((cmdPtr->echo||(pss && pss->echo)) && inPtr)",
          "1783:     }",
          "1784:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, n, 0));",
          "1785:     Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "1782:             Jsi_LogInfo(\"WS-RECV: %s\\n\", inPtr);",
          "",
          "[Added Lines]",
          "1784:             Jsi_LogInfo(\"WS-RECV: %s\", inPtr);",
          "1785:         Jsi_LogTraceExt(\"WS-RECV: %s\", inPtr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1834:     Jsi_DecrRefCount(interp, vpargs);",
          "1835:     Jsi_DecrRefCount(interp, ret);",
          "1836:     if (rc != JSI_OK) {",
          "1838:         return -1;",
          "1839:     }",
          "1840:     return 0;",
          "",
          "[Removed Lines]",
          "1837:         Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "1840:         Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2044:             Jsi_DecrRefCount(interp, vpargs);",
          "2045:             Jsi_DecrRefCount(interp, ret);",
          "2046:             if (rc != JSI_OK) {",
          "2048:                 return 1;",
          "2049:             }",
          "2050:             if (killcon)",
          "",
          "[Removed Lines]",
          "2047:                 Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2050:                 Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2333:             Jsi_DecrRefCount(interp, vpargs);",
          "2334:             Jsi_DecrRefCount(interp, ret);",
          "2335:             if (rc != JSI_OK) {",
          "2337:                 return 1;",
          "2338:             }",
          "2339:             if (killcon)",
          "",
          "[Removed Lines]",
          "2336:                 Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2339:                 Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2368:             Jsi_DecrRefCount(interp, vpargs);",
          "2369:             Jsi_DecrRefCount(interp, ret);",
          "2370:             if (rc != JSI_OK)",
          "2372:         }",
          "2373:         break;",
          "",
          "[Removed Lines]",
          "2371:                 return Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2374:                 return Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2382:         if (cmdPtr->onClose || pss->onClose) {",
          "2383:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1, 0);",
          "2384:             if (rc != JSI_OK)",
          "2386:         }",
          "2387:         jsi_wsdeletePss(pss);",
          "2388:         if (cmdPtr->stats.connectCnt<=0 && cmdPtr->onCloseLast && !Jsi_InterpGone(interp)) {",
          "",
          "[Removed Lines]",
          "2385:                 return Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2388:                 return Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2481:             if (inPtr != in)",
          "2482:                 Jsi_Free(inPtr);",
          "2483:             if (rc != JSI_OK) {",
          "2485:                 return 1;",
          "2486:             }",
          "2487:         }",
          "",
          "[Removed Lines]",
          "2484:                 Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2487:                 Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2502:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2504:     if (!cmdPtr)",
          "2506:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "2507:     if (cmdPtr->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "2509:     jsi_ws_loadMimeTypes(interp, cmdPtr, 0);",
          "2510:     return Jsi_OptionsConf(interp, WSOptions, cmdPtr, opts, ret, 0);",
          "",
          "[Removed Lines]",
          "2505:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "2508:         return Jsi_LogError(\"WebSocket conf() is disabled for set\");",
          "",
          "[Added Lines]",
          "2508:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "2511:         return Jsi_LogErrorExt(\"WebSocket conf() is disabled for set\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2517:     Jsi_RC rc = JSI_OK;",
          "2518:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2519:     if (!cmdPtr)",
          "2521:     Jsi_Value *v, *valPtr = Jsi_ValueArrayIndex(interp, args, 0);",
          "2522:     Jsi_Number vid;",
          "2523:     if (Jsi_ValueGetNumber(interp, valPtr, &vid) != JSI_OK || vid < 0)",
          "2525:     int id = (int)vid;",
          "2526:     jsi_wsPss *pss = NULL;",
          "2527:     Jsi_HashEntry *hPtr;",
          "",
          "[Removed Lines]",
          "2520:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "2524:         return Jsi_LogError(\"Expected connection number id\");",
          "",
          "[Added Lines]",
          "2523:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "2527:         return Jsi_LogErrorExt(\"Expected connection number id\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2537:     }",
          "2539:     if (!pss)",
          "2541:     switch (op) {",
          "2542:         case 0:",
          "2543:             v = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Removed Lines]",
          "2540:         return Jsi_LogError(\"No such id: %d\", id);",
          "",
          "[Added Lines]",
          "2543:         return Jsi_LogErrorExt(\"No such id: %d\", id);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2578: {",
          "2579:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2580:     if (!cmdPtr)",
          "2582:     const char *val = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2583:     Jsi_DString dStr = {\"[\"};",
          "2584:     jsi_wsPss *pss = NULL;",
          "",
          "[Removed Lines]",
          "2581:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "",
          "[Added Lines]",
          "2584:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2615:     if (ts<0||te<0||se<0||sx<0)",
          "2617:     else {",
          "2618:         Jsi_DSAppendLen(tStr, s, ts-s);",
          "2619:         Jsi_DSAppend(tStr, \"let template=`\", NULL);",
          "",
          "[Removed Lines]",
          "2616:         rc = Jsi_LogError(\"bad template: %s\", Jsi_ValueString(interp, fn, NULL));",
          "",
          "[Added Lines]",
          "2619:         rc = Jsi_LogErrorExt(\"bad template: %s\", Jsi_ValueString(interp, fn, NULL));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2654:     Jsi_HashEntry *hPtr;",
          "2655:     jsi_wsHander *hdlPtr;",
          "2656:     if (!cmdPtr)",
          "2658:     WSSIGASSERT(cmdPtr, OBJ);",
          "2659:     int argc = Jsi_ValueGetLength(interp, args);",
          "2660:     if (argc == 0) {",
          "",
          "[Removed Lines]",
          "2657:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "",
          "[Added Lines]",
          "2660:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2678:     }",
          "2679:     const char *key = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2680:     if (!key || !*key)",
          "2682:     Jsi_Value *valPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "2683:     if (Jsi_ValueIsNull(interp, valPtr)) {",
          "2684:         hPtr = Jsi_HashEntryFind(cmdPtr->handlers, key);",
          "",
          "[Removed Lines]",
          "2681:         return Jsi_LogError(\"handler: extension key must not be empty: %s\", key);",
          "",
          "[Added Lines]",
          "2684:         return Jsi_LogErrorExt(\"handler: extension key must not be empty: %s\", key);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2694:         return JSI_OK;",
          "2695:     }",
          "2696:     if (Jsi_ValueIsFunction(interp, valPtr)==0 && Jsi_ValueIsString(interp, valPtr)==0)",
          "2698:     Jsi_Value *argPtr = Jsi_ValueArrayIndex(interp, args, 2);",
          "2699:     if (argPtr) {",
          "2700:         if (Jsi_ValueIsNull(interp, argPtr))",
          "2701:             argPtr = NULL;",
          "2702:         else if (!Jsi_ValueIsString(interp, argPtr))",
          "2704:     }",
          "2705:     hPtr = Jsi_HashEntryNew(cmdPtr->handlers, key, NULL);",
          "2706:     if (!hPtr)",
          "",
          "[Removed Lines]",
          "2697:         return Jsi_LogError(\"expected string, function or null\");",
          "2703:             return Jsi_LogError(\"expected a string\");",
          "",
          "[Added Lines]",
          "2700:         return Jsi_LogErrorExt(\"expected string, function or null\");",
          "2706:             return Jsi_LogErrorExt(\"expected a string\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2725: {",
          "2726:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2727:     if (!cmdPtr)",
          "2729:     WSSIGASSERT(cmdPtr, OBJ);",
          "2730:     jsi_wsPss *pss;",
          "2731:     Jsi_HashEntry *hPtr;",
          "",
          "[Removed Lines]",
          "2728:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "",
          "[Added Lines]",
          "2731:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2735:     int id = -1, argc = Jsi_ValueGetLength(interp, args);",
          "2736:     Jsi_DString eStr = {};",
          "2737:     if (argc!=2)",
          "2739:     Jsi_Number dnum;",
          "2740:     Jsi_Value *darg = Jsi_ValueArrayIndex(interp, args, 0);",
          "2741:     if (Jsi_ValueGetNumber(interp, darg, &dnum) != JSI_OK)",
          "2743:     id = (int)dnum;",
          "2745:     if (!str)",
          "2746:         str = (char*)Jsi_ValueGetDString(interp, arg, &eStr, JSI_OUTPUT_JSON);",
          "2748:     if (cmdPtr->echo)",
          "2751:     for (hPtr = Jsi_HashSearchFirst(cmdPtr->pssTable, &cursor);",
          "2752:         hPtr != NULL; hPtr = Jsi_HashSearchNext(&cursor)) {",
          "",
          "[Removed Lines]",
          "2738:         return Jsi_LogError(\"wrong args\");",
          "2742:         return Jsi_LogError(\"invalid id\");",
          "2749:         Jsi_LogInfo(\"WS-SEND: %s\\n\", str);",
          "",
          "[Added Lines]",
          "2741:         return Jsi_LogErrorExt(\"wrong args\");",
          "2745:         return Jsi_LogErrorExt(\"invalid id\");",
          "2752:         Jsi_LogInfo(\"WS-SEND: %s\", str);",
          "2753:     Jsi_LogTraceExt(\"WS-SEND: %s\", str);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2760:             Jsi_StackPush(pss->stack, msg);",
          "2761:             pss->stats.msgQLen++;",
          "2762:             if (!cmdPtr->echo && pss->echo)",
          "2764:         }",
          "2765:     }",
          "",
          "[Removed Lines]",
          "2763:                 Jsi_LogInfo(\"WS-SEND: %s\\n\", str);",
          "",
          "[Added Lines]",
          "2767:                 Jsi_LogInfo(\"WS-SEND: %s\", str);",
          "2768:             Jsi_LogTraceExt(\"WS-SEND: %s\", str);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2832:     Jsi_DecrRefCount(interp, vpargs);",
          "2833:     Jsi_DecrRefCount(interp, ret);",
          "2834:     if (rc != JSI_OK) {",
          "2836:         Jsi_DecrRefCount(interp, cmdPtr->onModify);",
          "2837:         cmdPtr->onModify = NULL;",
          "2838:     }",
          "",
          "[Removed Lines]",
          "2835:         Jsi_LogWarn(\"websock bad onModify eval: disabling\");",
          "",
          "[Added Lines]",
          "2840:         Jsi_LogWarnExt(\"websock bad onModify eval: disabling\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2916: {",
          "2917:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2918:     if (!cmdPtr)",
          "2920:     if (!cmdPtr->noUpdate)",
          "2921:         jsi_wsService(cmdPtr);",
          "2922:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2919:         return Jsi_LogError(\"Apply to non-websock object\");",
          "",
          "[Added Lines]",
          "2924:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3030: {",
          "3031:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "3032:     if (!cmdPtr)",
          "3034:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
          "3035:     if (val)",
          "3036:         return jsi_wsFileAdd(interp, cmdPtr, val);",
          "",
          "[Removed Lines]",
          "3033:         return Jsi_LogError(\"Apply to non-websock object\");",
          "",
          "[Added Lines]",
          "3038:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3044: {",
          "3045:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "3046:     if (!cmdPtr)",
          "3048: #ifndef OMIT_LWS_WITH_SERVER_STATUS",
          "3049:     char cbuf[JSI_BUFSIZ*2];",
          "3050:     lws_json_dump_context(cmdPtr->context, cbuf, sizeof(cbuf), 0);",
          "3051:     return Jsi_JSONParse(interp, cbuf, ret, 0);",
          "3052: #else",
          "3054: #endif",
          "3055: }",
          "",
          "[Removed Lines]",
          "3047:         return Jsi_LogError(\"Apply to non-websock object\");",
          "3053:     return Jsi_LogError(\"unsupported\");",
          "",
          "[Added Lines]",
          "3052:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "3058:     return Jsi_LogErrorExt(\"unsupported\");",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3114:     cmdPtr = (jsi_wsCmdObj*)Jsi_Calloc(1, sizeof(*cmdPtr));",
          "3115:     cmdPtr->sig = JWS_SIG_OBJ;",
          "3117:     cmdPtr->_->newCnt++;",
          "3118:     cmdPtr->_->activeCnt++;",
          "3119:     cmdPtr->port = 8080;",
          "",
          "[Removed Lines]",
          "3116:     cmdPtr->_ = &wsObjCmd;",
          "",
          "[Added Lines]",
          "3121:     cmdPtr->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "3122:     cmdPtr->_ = &ws_PkgStatus;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3134:         jsi_wswebsocketObjFree(interp, cmdPtr);",
          "3135:         return JSI_ERROR;",
          "3136:     }",
          "3137:     if (cmdPtr->mimeTypes)",
          "3138:         jsi_ws_loadMimeTypes(interp, cmdPtr, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3143:     Jsi_LogDebugExt(\"Starting WS: %d\", cmdPtr->port);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3144:     Jsi_PathNormalize(interp, &cmdPtr->rootdir);",
          "3146:     if (cmdPtr->headers && (Jsi_ValueGetLength(interp, cmdPtr->headers)%2)) {",
          "3148:         goto bail;",
          "3149:     }",
          "3150:     const char *up = cmdPtr->urlPrefix, *ur = cmdPtr->urlRedirect;",
          "3151:     if (up && ur && Jsi_Strncmp(ur, up, Jsi_Strlen(up))) {",
          "3153:         goto bail;",
          "3154:     }",
          "3155:     const char* subprot = (cmdPtr->protocol&&cmdPtr->protocol[0]?cmdPtr->protocol:\"ws\");",
          "3156:     if (cmdPtr->protocol && !cmdPtr->protocol[0])",
          "3158:     cmdPtr->protocols[JWS_PROTOCOL_HTTP].name=\"http-only\";",
          "3159:     cmdPtr->protocols[JWS_PROTOCOL_HTTP].callback=jsi_wscallback_http;",
          "3160:     cmdPtr->protocols[JWS_PROTOCOL_HTTP].per_session_data_size=sizeof(jsi_wsUser);",
          "",
          "[Removed Lines]",
          "3147:         Jsi_LogError(\"Odd header length\");",
          "3152:         Jsi_LogError(\"urlRedirect does not start with urlPrefix\");",
          "3157:         Jsi_LogWarn(\"empty protocol string: forcing to 'ws'\");",
          "",
          "[Added Lines]",
          "3154:         Jsi_LogErrorExt(\"Odd header length\");",
          "3159:         Jsi_LogErrorExt(\"urlRedirect does not start with urlPrefix\");",
          "3164:         Jsi_LogWarnExt(\"empty protocol string: forcing to 'ws'\");",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3166:         cmdPtr->bufferPwr2 = 16;",
          "3167:     if (cmdPtr->bufferPwr2>0) {",
          "3168:         if (cmdPtr->bufferPwr2>20) {",
          "3170:             goto bail;",
          "3171:         }",
          "3172:         cmdPtr->protocols[JWS_PROTOCOL_WEBSOCK].rx_buffer_size=(1<<cmdPtr->bufferPwr2);",
          "",
          "[Removed Lines]",
          "3169:             Jsi_LogError(\"bufferPwr2 not in 0-20: %d\", cmdPtr->bufferPwr2);",
          "",
          "[Added Lines]",
          "3176:             Jsi_LogErrorExt(\"bufferPwr2 not in 0-20: %d\", cmdPtr->bufferPwr2);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3220:     }",
          "3221:     if (cmdPtr->ssl) {",
          "3222: #ifndef LWS_OPENSSL_SUPPORT",
          "3224:         goto bail;",
          "3225: #endif",
          "3226:         cmdPtr->info.options |= LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;",
          "",
          "[Removed Lines]",
          "3223:         Jsi_LogError(\"WebSocket not compiled with SSL\");",
          "",
          "[Added Lines]",
          "3230:         Jsi_LogErrorExt(\"WebSocket not compiled with SSL\");",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3228:     cmdPtr->context = lws_create_context(&cmdPtr->info);",
          "3229:     if (cmdPtr->context == NULL) {",
          "3230: fail:",
          "3232:         goto bail;",
          "3233:     }",
          "3234:     if (cmdPtr->info.options & LWS_SERVER_OPTION_EXPLICIT_VHOSTS) {",
          "",
          "[Removed Lines]",
          "3231:         Jsi_LogError(\"WebSocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "[Added Lines]",
          "3238:         Jsi_LogErrorExt(\"WebSocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3259:         if (NULL == lws_client_connect_via_info(&lci))",
          "3260:         {",
          "3262:             jsi_wswebsocketObjFree(interp, cmdPtr);",
          "3263:             return JSI_ERROR;",
          "3264:         }",
          "",
          "[Removed Lines]",
          "3261:             Jsi_LogError(\"websock connect failed\");",
          "",
          "[Added Lines]",
          "3268:             Jsi_LogErrorExt(\"websock connect failed\");",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3340: #endif",
          "3341:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d, ssl:%s, sslVer:%ld, sslVerStr:\\\"%s\\\", sslCompat:%ld}\",",
          "3342:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion, (hasSSL?\"true\":\"false\"), sslVer, sslVerStr, sslCompat);",
          "3344:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"WebSocket\", jsi_WsPkgVersion, Jsi_InitWebSocket, &wsPkgOpts);",
          "3345:     Jsi_DecrRefCount(interp, info);",
          "3346:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "3343:     Jsi_PkgOpts wsPkgOpts = { wsObjCmd_Specs, &wsObjCmd, websockCmds, info };",
          "",
          "[Added Lines]",
          "3350:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .info=info };",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3358: #endif",
          "3359: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3367: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "631: <tr><td>jsppChars</td><td><i>STRKEY</i></td><td>Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string.</td><td><i></i></td></tr>",
          "632: <tr><td>jsppCallback</td><td><i>FUNC</i></td><td>Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number).</td><td><i></i></td></tr>",
          "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
          "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
          "635: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "636: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634: <tr><td>lockDown</td><td><i>STRKEY</i></td><td>Directory to Safe-lockdown interpreter to.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0396ea209e3faddcc2807d3d3daf0ebf340792a9",
      "candidate_info": {
        "commit_hash": "0396ea209e3faddcc2807d3d3daf0ebf340792a9",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0396ea209e3faddcc2807d3d3daf0ebf340792a9",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiLexer.c",
          "src/jsiPstate.c",
          "src/jsiUtils.c",
          "tests/info.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.29\": refactor file refs\n\nFossilOrigin-Name: d7399d5384c36db0153897075f9cd7123d013c2cd41ff1bb070f97ad6d037efe",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiLexer.c||src/jsiLexer.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tests/info.jsi||tests/info.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiPstate.c||src/jsiPstate.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiPstate.c||src/jsiPstate.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 28",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 29",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:             goto done;",
          "689:     }",
          "692:         if ((cp = Jsi_Strrchr(path, '/'))) {",
          "693:             len = (cp-path);",
          "694:             rc = jsi_PkgLoadOne(interp, name, path, len, &fval, ver);",
          "",
          "[Removed Lines]",
          "691:     if ((path = interp->framePtr->fileName) || (interp->argv0 && (path = Jsi_ValueString(interp, interp->argv0, NULL)))) {",
          "",
          "[Added Lines]",
          "691:     if (*(path = interp->framePtr->filePtr->fileName) || (interp->argv0 && (path = Jsi_ValueString(interp, interp->argv0, NULL)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "991:             if (popts->info)",
          "992:                 Jsi_IncrRefCount(interp, popts->info);",
          "993:         }",
          "996:         Jsi_HashSet(interp->packageHash, (void*)name, ptr);",
          "997:         if (initProc && interp->parent) { // Provide C extensions to topInterp.",
          "998:             ptr = jsi_PkgGet(interp->topInterp, name);",
          "",
          "[Removed Lines]",
          "994:         if (interp->framePtr->fileName && !initProc)",
          "995:             ptr->loadFile = Jsi_KeyAdd(interp->topInterp, interp->framePtr->fileName);",
          "",
          "[Added Lines]",
          "994:         if (interp->framePtr->filePtr->fileName[0] && !initProc)",
          "995:             ptr->loadFile = Jsi_KeyAdd(interp->topInterp, interp->framePtr->filePtr->fileName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1554: void jsi_SysPutsCmdPrefix(Jsi_Interp *interp, jsi_LogOptions *popts,Jsi_DString *dStr, int* quote, const char **fnPtr) {",
          "1555:     int didx = 0;",
          "1556:     const char *cp;",
          "1558:     if (fn && !popts->full && (cp=Jsi_Strrchr(fn, '/')))",
          "1559:         fn = cp +1;",
          "1560:     if (popts->time || (didx=popts->date)) {",
          "",
          "[Removed Lines]",
          "1557:     const char *fn = interp->curIp->fname;",
          "",
          "[Added Lines]",
          "1557:     const char *fn = interp->curIp->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2379:     if (func->retType)",
          "2380:         Jsi_ObjInsert(interp, nobj, \"retType\", Jsi_ValueNewStringKey(interp, jsi_typeName(interp, func->retType, &dStr)), 0);",
          "2381:     Jsi_DSFree(&dStr);",
          "2384:         Jsi_ObjInsert(interp, nobj, \"script\", lval, 0);",
          "2386:         if (!func->opcodes) {",
          "2387:             ftype = (func->callback == jsi_AliasInvoke ? \"alias\" : \"builtin\");",
          "2388:         } else {",
          "",
          "[Removed Lines]",
          "2382:     if (func->script) {",
          "2383:         lval = Jsi_ValueNewStringKey(interp, func->script);",
          "2385:         const char *ftype = (func->scriptFile?\"script\":\"eval\");",
          "",
          "[Added Lines]",
          "2382:     if (func->scriptData) {",
          "2383:         lval = Jsi_ValueNewStringKey(interp, func->scriptData);",
          "2385:         const char *ftype = (func->scriptData?\"eval\":\"script\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2462:     int line = (f->line ? f->line : (interp->curIp ? interp->curIp->Line : 0));",
          "2463:     snprintf(buf, sizeof(buf), \"{funcName:\\\"%s\\\", fileName:\\\"%s\\\", line:%d, level:%d, tryDepth:%d, withDepth:%d}\",",
          "2465:         );",
          "2467:     Jsi_RC rc = Jsi_JSONParse(interp, buf, ret, 0);",
          "",
          "[Removed Lines]",
          "2464:         f->funcName?f->funcName:\"\", f->fileName?f->fileName:\"\", line, f->level, f->tryDepth, f->withDepth",
          "",
          "[Added Lines]",
          "2464:         f->funcName?f->funcName:\"\", f->filePtr->fileName, line, f->level, f->tryDepth, f->withDepth",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2632: static bool jsi_isMain(Jsi_Interp *interp) {",
          "2633:     int isi = (interp->isMain);",
          "2634:     if (isi == 0) {",
          "2636:         Jsi_Value *v1 = interp->argv0;",
          "2637:         if (c2 && v1 && Jsi_ValueIsString(interp, v1)) {",
          "2638:             char *c1 = Jsi_ValueString(interp, v1, NULL);",
          "",
          "[Removed Lines]",
          "2635:         const char *c2 = interp->curFile;",
          "",
          "[Added Lines]",
          "2635:         const char *c2 = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2679:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args, 0);",
          "2680:     if (Jsi_ValueGetNumber(interp, v, &vnum) == JSI_OK) {",
          "2681:         bp.line = (int)vnum;",
          "2683:     } else {",
          "2684:         const char *val = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2685:         const char *cp;",
          "",
          "[Removed Lines]",
          "2682:         bp.file = interp->curFile;",
          "",
          "[Added Lines]",
          "2682:         bp.file = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2687:         if (isdigit(val[0])) {",
          "2688:             if (Jsi_GetInt(interp, val, &bp.line, 0) != JSI_OK)",
          "2689:                 return Jsi_LogError(\"bad number\");",
          "2691:         } else if ((cp = Jsi_Strchr(val, ':'))) {",
          "2692:             if (Jsi_GetInt(interp, cp+1, &bp.line, 0) != JSI_OK)",
          "2693:                 return Jsi_LogError(\"bad number\");",
          "",
          "[Removed Lines]",
          "2690:             bp.file = interp->curFile;",
          "",
          "[Added Lines]",
          "2690:             bp.file = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2802:     } else {",
          "2803:         if (arg->vt == JSI_VT_OBJECT) {",
          "2804:             switch (arg->d.obj->ot) {",
          "2806:                 case JSI_OT_REGEXP: isreg = 1; break;",
          "2807:                 default: break;",
          "2808:             }",
          "",
          "[Removed Lines]",
          "2805:                 case JSI_OT_FUNCTION: name = arg->d.obj->d.fobj->func->script; break;",
          "",
          "[Added Lines]",
          "2805:                 case JSI_OT_FUNCTION: name = arg->d.obj->d.fobj->func->filePtr->fileName; break;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3650:     }",
          "3651:     if (f->argnames==NULL && cmdSpec->argStr) {",
          "3654:         jsi_Pline *opl = interp->parseLine, pline;",
          "3655:         interp->parseLine = &pline;",
          "3656:         pline.first_line = 1;",
          "3658:         f->argnames = jsi_ParseArgStr(interp, cmdSpec->argStr);",
          "3660:         interp->parseLine = opl;",
          "3661:     }",
          "3662:     return rc;",
          "",
          "[Removed Lines]",
          "3653:         const char *ocfile = interp->curFile;",
          "3657:         interp->curFile = cmdSpec->name;",
          "3659:         interp->curFile = ocfile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4415:     if (v2 && !Jsi_ValueIsObjType(interp, v2, JSI_OT_ARRAY))",
          "4416:         return Jsi_LogError(\"arg 2: expected array|undefined\");",
          "4417:     if (!v1 || Jsi_ValueIsNull(interp, v1)) {",
          "4421:         mod++;",
          "4422:         cp = Jsi_Strrchr(mod, '.');",
          "4423:         int len = (cp?(cp-mod):(int)Jsi_Strlen(mod));",
          "",
          "[Removed Lines]",
          "4418:         mod = interp->framePtr->fileName;",
          "4419:         if (mod) mod = Jsi_Strrchr(mod, '/');",
          "4420:         if (!mod) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "4415:         mod = interp->framePtr->filePtr->fileName;",
          "4416:         if (*mod) mod = Jsi_Strrchr(mod, '/');",
          "4417:         if (!*mod) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4625:             if (cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "4626:                 int isLong = 1;//Jsi_ValueIsTrue(interp, val);",
          "4628:                 Jsi_TreeSearchDone(&search);",
          "4629:                 if (fname) {",
          "4630:                     jsi_FileInfo  *fi = (typeof(fi))Jsi_HashGet(interp->fileTbl, fname, 0);",
          "",
          "[Removed Lines]",
          "4627:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = interp->framePtr->ip->fname;",
          "",
          "[Added Lines]",
          "4624:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = interp->framePtr->ip->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4640:                     help = Jsi_DSAppendLen(&hStr, fstr+1, es-fstr-1);",
          "4641:                     fstr = es;",
          "4642:                 }",
          "4644:                 if (mod && (mod = Jsi_Strrchr(mod, '/')))",
          "4645:                     mod++;",
          "4646:                 while (help && isspace(help[0])) help++;",
          "",
          "[Removed Lines]",
          "4643:                 const char *mod = (fname?fname:interp->framePtr->fileName);",
          "",
          "[Added Lines]",
          "4640:                 const char *mod = (fname?fname:interp->framePtr->filePtr->fileName);",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     c->codes[c->code_len].data = extra;",
          "156:     c->codes[c->code_len].Line = line->first_line;",
          "157:     c->codes[c->code_len].Lofs = line->first_column;",
          "159:     c->codes[c->code_len].alloc = doalloc;",
          "160:     c->code_len ++;",
          "161:     return 0;",
          "",
          "[Removed Lines]",
          "158:     c->codes[c->code_len].fname = jsi_PstateGetFilename(pstate);",
          "",
          "[Added Lines]",
          "158:     c->codes[c->code_len].filePtr = pstate->filePtr;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define _jsi_StrictUChk2(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF && v2->vt != JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"value is undefined\"))",
          "21: #define _jsi_StrictUChk3(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF || v2->vt == JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"lhs value undefined in ===/!==\") )",
          "24: {",
          "25:     bool isNew;",
          "26:     Jsi_HashEntry *hPtr = NULL;",
          "",
          "[Removed Lines]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval)",
          "",
          "[Added Lines]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval, jsi_FileInfo *fi)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         return ps;",
          "34:     }",
          "35:     ps = jsi_PstateNew(interp);",
          "36:     ps->eval_flag = iseval;",
          "37:     if (codeStr)",
          "38:         jsi_PstateSetString(ps, codeStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     ps->filePtr = fi;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:                        jsi_ScopeChain *scope, Jsi_Value *currentScope, Jsi_Value *_this, Jsi_Value **ret)",
          "65: {",
          "66:     Jsi_RC r = JSI_OK;",
          "68:     if (newps) {",
          "69:         int oef = newps->eval_flag;",
          "70:         newps->eval_flag = 1;",
          "",
          "[Removed Lines]",
          "67:     jsi_Pstate *newps = jsiNewParser(interp, program, NULL, 1);",
          "",
          "[Added Lines]",
          "68:     jsi_Pstate *newps = jsiNewParser(interp, program, NULL, 1, interp->framePtr->filePtr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsiEvalPrint(_jsi_STACKIDX(i)));",
          "411:     }",
          "412:     Jsi_Printf(interp, jsi_Stderr, \"]\");",
          "415:         if (cp) fn = cp+1;",
          "416:         Jsi_Printf(interp, jsi_Stderr, \", %s:%d\", fn, ip->Line);",
          "417:     }",
          "",
          "[Removed Lines]",
          "413:     if (ip->fname) {",
          "414:         const char *fn = ip->fname,  *cp = Jsi_Strrchr(fn, '/');",
          "",
          "[Added Lines]",
          "414:     if (ip->filePtr->fileName[0]) {",
          "415:         const char *fn = ip->filePtr->fileName,  *cp = Jsi_Strrchr(fn, '/');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "578:     Jsi_DString dStr = {};",
          "579:     Jsi_Value *v;",
          "580:     int i;",
          "583:     for (i=0; i<2; i++) {",
          "584:         Jsi_DSAppend(&dStr, \"Jsi_Auto.\", str, NULL);",
          "585:         Jsi_VarLookup(interp, Jsi_DSValue(&dStr));",
          "",
          "[Removed Lines]",
          "581:     const char *curFile = interp->curFile;",
          "582:     interp->curFile = \"<jsiLoadFunction>\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618:             interp->autoLoaded++;",
          "619:         }",
          "620:     }",
          "622:     return tret;",
          "623: }",
          "",
          "[Removed Lines]",
          "621:     interp->curFile = curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "628:     jsi_OpCode *ip = (iPtr ? iPtr : interp->curIp);",
          "629:     if (!ip)",
          "630:         return;",
          "632:     if ((tc&jsi_callTraceFullPath)==0 && ((ff=Jsi_Strrchr(fname,'/'))))",
          "633:         fname = ff+1;",
          "634:     if (interp->traceHook)",
          "636:     else {",
          "637:         const char *fp = ((tc&jsi_callTraceNoParent)?NULL:fstatic->parentName);",
          "638:         if (fp && !*fp)",
          "",
          "[Removed Lines]",
          "631:     const char *ff, *fname = ip->fname?ip->fname:\"\";",
          "635:         (*interp->traceHook)(interp, fstatic->name, ip->fname, ip->Line, fstatic->cmdSpec, _this, args, ret);",
          "",
          "[Added Lines]",
          "632:     const char *ff, *fname = ip->filePtr->fileName;",
          "636:         (*interp->traceHook)(interp, fstatic->name, fname, ip->Line, fstatic->cmdSpec, _this, args, ret);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1141:             ip->Line = curLine;",
          "1142:         else",
          "1143:             curLine = ip->Line;",
          "1148:         if (interp->debugOpts.hook) {",
          "1150:             interp->framePtr->line = curLine;",
          "1151:             if ((rc = (*interp->debugOpts.hook)(interp, curFile, curLine, interp->framePtr->level, interp->curFunction, jsi_opcode_string(ip->op), ip, NULL)) != JSI_OK)",
          "1152:                 break;",
          "",
          "[Removed Lines]",
          "1144:         if (!ip->fname)",
          "1145:             ip->fname = curFile;",
          "1146:         else",
          "1147:             curFile = ip->fname;",
          "1149:             interp->framePtr->fileName = curFile;",
          "",
          "[Added Lines]",
          "1145:         if (!ip->filePtr)",
          "1146:             ip->filePtr = interp->framePtr->filePtr;",
          "1147:         curFile = ip->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2033:     frame.inthis = _this;",
          "2034:     frame.opcodes = opcodes;",
          "2035:     frame.filePtr = fi;",
          "2037:     frame.funcName = interp->curFunction;",
          "2038:     frame.dirName = interp->curDir;",
          "2039:     frame.level = frame.parent->level+1;",
          "",
          "[Removed Lines]",
          "2036:     frame.fileName = ((func && func->script)?func->script:interp->curFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2159:     int oldef = interp->evalFlags;",
          "2160:     jsi_Pstate *oldps = interp->ps;",
          "2161:     jsi_FileInfo *fi = interp->framePtr->filePtr;",
          "2163:     char *origFile = Jsi_ValueString(interp, path, &fnLen);",
          "2164:     const char *fname = origFile;",
          "2165:     char *oldDir = interp->curDir, *cp;",
          "",
          "[Removed Lines]",
          "2162:     const char *oldFile = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2266:                 }",
          "2267:                 fi = (jsi_FileInfo *)Jsi_HashValueGet(hPtr);",
          "2268:                 if (!fi) goto bail;",
          "2270:                 interp->curDir = fi->dirName;",
          "2272:             } else {",
          "",
          "[Removed Lines]",
          "2269:                 interp->curFile = fi->fileName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2274:                 if (!fi) goto bail;",
          "2275:                 Jsi_HashValueSet(hPtr, fi);",
          "2276:                 fi->origFile = (char*)Jsi_KeyAdd(interp, origFile);",
          "2278:                 char *dfname = Jsi_Strdup(fname);",
          "2279:                 if ((cp = Jsi_Strrchr(dfname,'/')))",
          "",
          "[Removed Lines]",
          "2277:                 interp->curFile = fi->fileName = (char*)Jsi_KeyAdd(interp, fname);",
          "",
          "[Added Lines]",
          "2278:                 fi->fileName = (char*)Jsi_KeyAdd(interp, fname);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2282:                 Jsi_Free(dfname);",
          "2283:             }",
          "2284:             if (!input->fname)",
          "2287:             int cnt = 0, noncmt = 0, jppOpts[4]={};",
          "2288:             uint ilen;",
          "",
          "[Removed Lines]",
          "2285:                 input->fname = interp->curFile;",
          "",
          "[Added Lines]",
          "2286:                 input->fname = interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2348:     oldSp = interp->framePtr->Sp;",
          "2350:     rc = JSI_OK;",
          "2352:     interp->evalFlags = flags;",
          "2353:     if (!ps)",
          "2354:         rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "2351:     ps = jsiNewParser(interp, str, input, 0);",
          "",
          "[Added Lines]",
          "2352:     ps = jsiNewParser(interp, str, input, 0, fi);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2358:         Jsi_Value *retValue = interp->retValue;",
          "2359:         if (!interp->strict)",
          "2360:             interp->strict = (jsi_GetDirective(interp, ps->opcodes, \"use strict\")!=NULL);",
          "2363:         if (level <= 0)",
          "2364:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue, fi);",
          "",
          "[Removed Lines]",
          "2361:         const char *curFile = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2371:             else",
          "2372:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue, fi);",
          "2373:         }",
          "2375:         if (rc != JSI_OK)",
          "2376:             rc = (ignore?JSI_OK:JSI_ERROR);",
          "2377:         else if (ps->last_exception || oldps->last_exception)",
          "",
          "[Removed Lines]",
          "2374:         interp->curFile = curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2383:     }",
          "2385: bail:",
          "2387:     interp->curDir = oldDir;",
          "2388:     interp->framePtr->Sp = oldSp;",
          "2389:     interp->isMain = oisi;",
          "",
          "[Removed Lines]",
          "2386:     interp->curFile = oldFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:         Jsi_DSPrintf(dStr, \", in call to '%s'\", func->name);",
          "173:     else",
          "174:         Jsi_DSPrintf(dStr, \", in call to function\");",
          "177:         if (cp)",
          "178:             cp++;",
          "179:         else",
          "181:         Jsi_DSPrintf(dStr, \" declared at %s:%d.%d\", cp, func->bodyline.first_line, func->bodyline.first_column);",
          "182:     }",
          "184:         Jsi_DSAppend(dStr, \" <\", NULL);",
          "185:         Jsi_ValueGetDString(interp, arg, dStr, 0);",
          "186:         Jsi_DSAppend(dStr, \">.\", NULL);",
          "",
          "[Removed Lines]",
          "175:     if (func->script) {",
          "176:         const char *cp = Jsi_Strrchr(func->script, '/');",
          "180:             cp = func->script;",
          "183:         if (arg) {",
          "",
          "[Added Lines]",
          "175:     const char *file = interp->framePtr->filePtr->fileName;",
          "176:     if (file[0]) {",
          "177:         const char *cp = Jsi_Strrchr(file, '/');",
          "181:             cp = file;",
          "184:     if (arg) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:     f->opcodes = ops;",
          "509:     f->argnames = args;",
          "510:     f->localnames = localvar;",
          "512:     f->bodyline = *line;",
          "513:     f->retType = (Jsi_otype)args->retType;",
          "515:         f->scriptFile = f->script;",
          "517:     if (l->ltype == LT_STRING)",
          "518:         f->bodyStr = l->d.str;",
          "519:     f->endPos = l->cur;",
          "",
          "[Removed Lines]",
          "511:     f->script = interp->curFile;",
          "514:     if (!pstate->eval_flag) {",
          "516:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "578:                     if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "579:                         if (line)",
          "580:                             interp->parseLine = line;",
          "582:                         if (line)",
          "583:                             interp->parseLine = NULL;",
          "584:                         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "581:                         Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->script, fo->bodyline.first_line);",
          "",
          "[Added Lines]",
          "582:                         Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->filePtr->fileName, fo->bodyline.first_line);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "719:         if (name)",
          "720:             f->cmdSpec->name = (char*)Jsi_KeyAdd(interp, name);",
          "721:     }",
          "723:     f->callback = callback;",
          "724:     return Jsi_ValueMakeObject(interp, toVal, o);",
          "725: }",
          "",
          "[Removed Lines]",
          "722:     f->script = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "734:     f->callback = cmdSpec->proc;",
          "735:     f->privData = privData;",
          "736:     f->f.flags = (cmdSpec->flags & JSI_CMD_MASK);",
          "738:     o->d.fobj = jsi_FuncObjNew(interp, f);",
          "739:     return Jsi_ValueMakeObject(interp, NULL, o);",
          "740: }",
          "",
          "[Removed Lines]",
          "737:     f->script = interp->curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "969:     if (profile || cover) {",
          "970:         Jsi_DString dStr;",
          "971:         Jsi_DSInit(&dStr);",
          "973:         if (!file)",
          "974:             file = \"\";",
          "975:         int line = func->bodyline.last_line;",
          "",
          "[Removed Lines]",
          "972:         const char *file = func->script;",
          "",
          "[Added Lines]",
          "973:         const char *file = func->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1076:      SIGINIT(func, FUNC);",
          "1077:      func->hPtr = Jsi_HashSet(interp->funcsTbl, func, func);",
          "1078:      func->refCnt = 1;",
          "1080:      interp->funcCnt++;",
          "1081:      return func;",
          "1082: }",
          "",
          "[Removed Lines]",
          "1079:      func->filePtr = interp->framePtr->filePtr;",
          "",
          "[Added Lines]",
          "1080:      func->filePtr = (interp->inParse? interp->parsePs->filePtr: interp->framePtr->filePtr);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: #endif",
          "340: } Jsi_InterpDebug;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: typedef struct {",
          "347:     int useCnt;",
          "348:     int logflag;",
          "349: } jsi_FileInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:     unsigned char isof:1;",
          "435:     unsigned char local:1;",
          "436:     jsi_OpLogFlags logflag:3;",
          "438: } jsi_OpCode;",
          "",
          "[Removed Lines]",
          "437:     const char *fname;",
          "",
          "[Added Lines]",
          "446:     jsi_FileInfo* filePtr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "680:     int retType;",
          "681: } Jsi_ScopeStrs;",
          "693: typedef struct jsi_Frame {",
          "694:     int level;",
          "696:     const char *funcName;",
          "697:     const char *dirName;",
          "698:     jsi_FileInfo *filePtr;",
          "",
          "[Removed Lines]",
          "683: typedef struct {",
          "688:     int useCnt;",
          "689:     int logflag;",
          "690: } jsi_FileInfo;",
          "695:     const char *fileName;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "731:     Jsi_Hash *strTbl;",
          "732:     int argType;                // Used during parsing to aggregate type.",
          "733:     Jsi_ScopeStrs *args;        // Last push.",
          "734: } jsi_Pstate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "734:     jsi_FileInfo *filePtr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "849:     Jsi_CmdSpec *parentSpec;",
          "851:     int callCnt;",
          "854:     const char *bodyStr; // Non-builtin func script body.",
          "855:     int endPos, startPos;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     const char *scriptData;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1193:     const char *scriptStr;",
          "1194:     jsi_Frame topFrame;",
          "1195:     jsi_FileInfo topFile;",
          "1197:     const char *curFunction;",
          "1198:     const char *homeDir;",
          "1199:     const char *historyFile;",
          "",
          "[Removed Lines]",
          "1196:     const char *curFile;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2835:     } else {",
          "2837:         if (sinterp->scriptStr != 0) {",
          "2840:             rc = Jsi_EvalString(sinterp, sinterp->scriptStr, JSI_EVAL_ISMAIN);",
          "2841:         } else if (sinterp->scriptFile && !sinterp->debugOpts.debugCallback) {",
          "2842:             int len;",
          "",
          "[Removed Lines]",
          "2838:             if (sinterp->scriptFile && !interp->curFile)",
          "2839:                 sinterp->curFile = Jsi_ValueString(sinterp, sinterp->scriptFile, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiLexer.c||src/jsiLexer.c": [
          "File: src/jsiLexer.c -> src/jsiLexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     Jsi_Interp *interp = ps->interp;",
          "515:     interp->errLine = yylloc->first_line;",
          "516:     interp->errCol = yylloc->first_column;",
          "518:         yylloc->first_column, msg);",
          "520:         fprintf(stderr, \"%s:%d.%d: %s\\n\",  interp->curFile, yylloc->first_line, yylloc->first_column, msg);",
          "",
          "[Removed Lines]",
          "517:     Jsi_LogParse(\"%s:%d.%d: error: %s\", interp->curFile?interp->curFile:\"@\", yylloc->first_line,",
          "",
          "[Added Lines]",
          "517:     Jsi_LogParse(\"%s:%d.%d: error: %s\", interp->framePtr->filePtr->fileName, yylloc->first_line,",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     return ps;",
          "205: }",
          "213: void jsi_PstateClear(jsi_Pstate *ps)",
          "214: {",
          "215:     jsi_Lexer* l = ps->lexer;",
          "",
          "[Removed Lines]",
          "207: const char *jsi_PstateGetFilename(jsi_Pstate *ps)",
          "208: {",
          "209:     Jsi_Interp *interp = ps->interp;",
          "210:     return interp->curFile;",
          "211: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: int jsi_fatalexit = JSI_LOG_BUG;",
          "88: const char *jsi_GetCurFile(Jsi_Interp *interp)",
          "89: {",
          "91:     if (!interp)",
          "93:     if (interp->inParse)",
          "100: }",
          "101: extern void jsi_TypeMismatch(Jsi_Interp* interp)",
          "102: {",
          "",
          "[Removed Lines]",
          "90:     const char *curFile = NULL;",
          "92:         return NULL;",
          "94:         curFile = interp->curFile;",
          "95:     else",
          "96:         curFile = (interp->curIp && interp->curIp->fname? interp->curIp->fname:interp->curFile);",
          "97:     if (!curFile) curFile = interp->framePtr->fileName;",
          "98:     if (!curFile) curFile = \"\";",
          "99:     return curFile;",
          "",
          "[Added Lines]",
          "91:         return \"\";",
          "93:         return interp->parsePs->filePtr->fileName;",
          "94:     return interp->framePtr->filePtr->fileName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:             jsi_Frame *fptr = interp->framePtr->parent;",
          "225:             line = fptr->line;",
          "226:             lofs = 0;",
          "228:         } else {",
          "229:             line = interp->curIp->Line;",
          "230:             lofs = interp->curIp->Lofs;",
          "",
          "[Removed Lines]",
          "227:             curFile = fptr->fileName;",
          "",
          "[Added Lines]",
          "222:             curFile = fptr->filePtr->fileName;",
          "",
          "---------------"
        ],
        "tests/info.jsi||tests/info.jsi": [
          "File: tests/info.jsi -> tests/info.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: K = {} ==> {}",
          "58: K.f(1) ==> 'F'",
          "59: undefined",
          "62: [ \"z\" ]",
          "63: Info.funcs(K) ==> [ \"f\", \"g\" ]",
          "",
          "[Removed Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' <function (z) {...}>.    (at or near \"f\")",
          "",
          "[Added Lines]",
          "60: Info.funcs(K.f).argList ==> /home/pmacdona/src/jsi3/tests/info.jsi:29: warn: type mismatch for argument arg 1 'arg': expected \"string|object|regexp\" but got \"function\", in call to 'funcs' declared at info.jsi:0.0 <function (z) {...}>.    (at or near \"f\")",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "fa0ff924859c1df28e77268f359b1c2fa34e6edd",
      "candidate_info": {
        "commit_hash": "fa0ff924859c1df28e77268f359b1c2fa34e6edd",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/fa0ff924859c1df28e77268f359b1c2fa34e6edd",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/web/docs/app.css",
          "lib/web/docs/app.js",
          "lib/web/md/Builds.md",
          "lib/web/md/Index.md",
          "lib/web/md/Misc.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Start.md",
          "lib/web/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiProto.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.3\": Fix crash from issue #18\n\nFossilOrigin-Name: 930e210f5d990ed4953cf49cb9d7528247c0d55d19b9158d60cec49f46649986",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "23:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "24:         docs        :'',        // Display markdown docs from this directory.",
          "25:         ignoreExit  :false,     // Ignore exit request.",
          "26:         initArg     :[],        // List of app modules to run.",
          "27:         isFile      :false,     // Url is a file, so throw if not exists.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         onRecv      :null,      // Callback command to handle websocket msgs.",
          "35:         pageStr     :'',        // String to serve out as url.",
          "36:         port        :0,         // Start search for port.",
          "38:         query       :'',        // Query to append to url.",
          "39:         rootdir     :null,      // Base directory.",
          "40:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "",
          "[Removed Lines]",
          "37:         portMax     :1000,      // Max times to increment-retry port if busy.",
          "",
          "[Added Lines]",
          "38:         portMax     :999,       // Max times to increment-retry port if busy.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         sslFnCert   :'cert.pem',// File name in sslDir of cert.",
          "43:         sslFnKey    :'privkey.pem',// File name in sslDir of key.",
          "44:         srcFile     :'',        // File of code to source inside the Websrv function.",
          "47:         trace       :false,     // Tracing output.",
          "48:         udata       :{},        // Shortcut add of udata to wsOpts.",
          "49:         url         :\"\",        // The file/url to serve out and clears timeout.",
          "50:         urlPrefix   :'',        // Prefix for urls",
          "51:         urlUnknown  :'',        // Url to redirect 404 to.",
          "52:         useridPass  :'',        // USER:PASS for web GUI.",
          "53:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "54:         wsdebug     :0,         // Debug option for websockets.",
          "",
          "[Removed Lines]",
          "45:         uploadDir   :'/tmp',    // Upload files go here",
          "46:         timeout     :60000,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "",
          "[Added Lines]",
          "46:         timeout     :59999,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "49:         uploadDir   :'/tmp',    // Upload files go here",
          "53:         urlFallback :'',        // File-url to serve out if page not found.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:             if (!File.exists(self.wsinc))",
          "431:                 self.wsinc = '';",
          "432:         }",
          "434:             self.timeout = 0;",
          "435:     } if (self.docs) {",
          "436:         if (self.rootdir || self.zip)",
          "",
          "[Removed Lines]",
          "433:         if (self.timeout != options.timeout)",
          "",
          "[Added Lines]",
          "435:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "441:         else if (File.isdir(sd) && File.exists(sd+'/'+surl))",
          "442:             self.rootdir = self.docs;",
          "443:         else",
          "445:         if (!self.wsinc) {",
          "446:             self.wsinc = self.rootdir+'/docs/wsinc.jsi';",
          "447:             if (!File.exists(self.wsinc))",
          "448:                 self.wsinc = '';",
          "449:         }",
          "451:             self.timeout = 0;",
          "",
          "[Removed Lines]",
          "444:             throw('-docs must be a docs dir or \"/\"'+self.docs);",
          "450:         if (self.timeout != options.timeout)",
          "",
          "[Added Lines]",
          "446:             throw('expected docs dir or \"/\" in -docs '+self.docs);",
          "452:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "476:     }",
          "477:     if (!self.rootdir)",
          "478:         self.rootdir = '.';",
          "481:     var wopts = self.wsopts = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     if (self.hist && !self.urlFallback)",
          "482:         self.urlFallback = self.url;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "491:         onFilter:WsFilter,",
          "492:         port:self.port,",
          "493:         rootdir:self.rootdir,",
          "496:         sslCert:self.sslcert,",
          "497:         sslKey:self.sslkey,",
          "498:         ssl:self.ssl,",
          "",
          "[Removed Lines]",
          "494:         urlPrefix:self.urlPrefix,",
          "495:         urlUnknown:self.urlUnknown,",
          "",
          "[Added Lines]",
          "498:         urlPrefix:(self.urlPrefix?self.urlPrefix:null),",
          "499:         urlUnknown:(self.urlUnknown?self.urlUnknown:null),",
          "500:         urlFallback:(self.urlFallback?self.urlFallback:null),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "512:             if (!self.app && !self.docs)",
          "513:                 throw('mod \"'+self.mod+'\" not one of: admin, menu');",
          "514:     }",
          "516:         self.timeout = 0;",
          "517:     if (!self.app && !self.docs && !self.server && !self.pageStr && self.mod === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))",
          "518:         throw(\"url file empty or not found: \"+self.url);",
          "",
          "[Removed Lines]",
          "515:     if (urlOrig!=='' && self.timeout === 60000)",
          "",
          "[Added Lines]",
          "520:     if (urlOrig!=='' && self.timeout === options.timeout)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "523:         wopts.noCompress = true;",
          "524:     if (self.server) {",
          "525:         self.noGui = true;",
          "527:             self.timeout = 0;",
          "528:     } else if (!self.noReload)",
          "529:         wopts.onModify = onModify;",
          "",
          "[Removed Lines]",
          "526:         if (self.timeout !== options.timeout)",
          "",
          "[Added Lines]",
          "531:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "551:     OpenWebsock();",
          "556:     if (!self.noGui && self.url && self.url.length) {",
          "557:         OpenBrowser(self.url, self.anchor, self.query);",
          "",
          "[Removed Lines]",
          "554:     LogTrace(\"Listening on port:\",self.port);",
          "",
          "[Added Lines]",
          "559:     LogTrace(\"Listening on port:\",wsopts.port);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "972:     if (bsc == 0 && interp->lastSubscriptFail && interp->lastSubscriptFail->vt != JSI_VT_UNDEF)",
          "973:         Jsi_ValueReset(interp, &interp->lastSubscriptFail);",
          "975:     Jsi_Value res = VALINIT,",
          "",
          "[Removed Lines]",
          "974:         Jsi_ValueToObject(interp, src);",
          "",
          "[Added Lines]",
          "974:     rc = Jsi_ValueToObject(interp, src);",
          "975:     if (rc != JSI_OK)",
          "976:         return rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1265:             }",
          "1266:             case OP_ASSIGN: {",
          "1267:                 Jsi_Value *sval = _jsi_TOP, *dval = _jsi_TOQ;",
          "1269:                 if ((uintptr_t)ip->data & 1) {",
          "1270:                     jsiVarDeref(interp,1);",
          "1271:                     rc = jsiValueAssign(interp, dval, sval, lop);",
          "",
          "[Removed Lines]",
          "1268:                 bool globThis = (sval->vt == JSI_VT_OBJECT && sval->d.obj == interp->csc->d.obj);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1285:                     jsiClearStack(interp,3);",
          "1286:                     Jsi_ValueCopy(interp,v3, sval);",
          "1287:                     dval = v3;",
          "1294:                 }",
          "1295:                 break;",
          "1296:             }",
          "1297:             case OP_PUSHREG: {",
          "",
          "[Removed Lines]",
          "1288:                     jsiPop(interp, 2);",
          "1289:                 }",
          "1290:                 if (fp->level<=1 && globThis && rc == JSI_OK && dval && dval->vt == JSI_VT_VARIABLE) {",
          "1291:                     dval = dval->d.lval;",
          "1293:                     Jsi_HashSet(interp->genValueTbl, dval, dval);",
          "",
          "[Added Lines]",
          "1289:                     jsiPop(interp, 2);\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1352:                     if (v->vt == JSI_VT_VARIABLE) {",
          "1353:                         Jsi_ValueCopy(interp, v, v->d.lval);",
          "1354:                     }",
          "1356:                 }",
          "1357:                 break;",
          "1358:             }",
          "",
          "[Removed Lines]",
          "1355:                     Jsi_ValueToObject(interp, v);",
          "",
          "[Added Lines]",
          "1352:                     rc = Jsi_ValueToObject(interp, v);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1587:                     break;",
          "1588:                 }",
          "1589:                 if (_jsi_TOP->vt != JSI_VT_UNDEF && _jsi_TOP->vt != JSI_VT_NULL)",
          "1591:                 Jsi_Value *spret = Jsi_ValueNew1(interp);",
          "1592:                 jsi_ValueObjGetKeys(interp, _jsi_TOP, spret, ip->isof);",
          "1593:                 Jsi_ValueReplace(interp, _jsi_STACK+fp->Sp, spret);",
          "",
          "[Removed Lines]",
          "1590:                     Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "[Added Lines]",
          "1587:                     rc = Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2024:                     break;",
          "2025:                 }",
          "2026:                 jsiVarDeref(interp,1);",
          "2029:                 jsi_TryList *n = jsiTrylistNew(jsi_TL_WITH, scope, currentScope);",
          "",
          "[Removed Lines]",
          "2027:                 Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "[Added Lines]",
          "2024:                 rc = Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     int flags;",
          "143:     jsi_wsStatData stats;",
          "144:     char *iface;",
          "146:     const char *localhostName;",
          "147:     const char *clientName;",
          "148:     const char *clientIP;",
          "",
          "[Removed Lines]",
          "145:     const char* urlPrefix, *urlRedirect, *urlUnknown;",
          "",
          "[Added Lines]",
          "145:     const char* urlPrefix, *urlRedirect, *urlUnknown, *urlFallback;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     int recvBufMax;",
          "165:     int recvBufCnt;",
          "166:     int recvBufTimeout;",
          "167:     int lastRevCnt; // For update",
          "168:     time_t createLast;",
          "169:     time_t startTime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     int sessFlag;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:     JSI_OPT(BOOL,   jsi_wsCmdObj, redirMax,   .help=\"Temporarily disable redirects when see more than this in 10 minutes\"),",
          "366:     JSI_OPT(STRING, jsi_wsCmdObj, rootdir,    .help=\"Directory to serve html from (\\\".\\\")\"),",
          "367:     JSI_OPT(STRKEY, jsi_wsCmdObj, server,     .help=\"String to send out int the header SERVER (jsiWebSocket)\"),",
          "368:     JSI_OPT(OBJ,    jsi_wsCmdObj, ssiExts,    .help=\"Object map of file extensions to apply SSI.  eg. {myext:true, shtml:false} \", jsi_IIOF),",
          "369:     JSI_OPT(BOOL,   jsi_wsCmdObj, ssl,        .help=\"Use https\", jsi_IIOF),",
          "370:     JSI_OPT(STRKEY, jsi_wsCmdObj, sslCert,    .help=\"SSL certificate file\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:     JSI_OPT(INT,    jsi_wsCmdObj, sessFlag,   .help=\"Flag to send in sessionJsi cookie\", jsi_IIOF),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "373:     JSI_OPT(TIME_T, jsi_wsCmdObj, startTime,  .help=\"Time of websocket start\", jsi_IIRO),",
          "374:     JSI_OPT(STRKEY, jsi_wsCmdObj, includeFile,.help=\"Default file when no extension given (include.shtml)\"),",
          "375:     JSI_OPT(OBJ,    jsi_wsCmdObj, udata,      .help=\"User data\"),",
          "376:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlPrefix,  .help=\"Prefix in url to strip from path; for reverse proxy.\"),",
          "377:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlRedirect,.help=\"Redirect when no url or /, and adds cookie sessionJsi.\"),",
          "379:     JSI_OPT(STRKEY, jsi_wsCmdObj, useridPass, .help=\"The USERID:PASSWORD to use for basic authentication\"),",
          "380:     JSI_OPT(OBJ,    jsi_wsCmdObj, version,    .help=\"WebSocket version info\", jsi_IIRO),",
          "381:     JSI_OPT_END(jsi_wsCmdObj, .help=\"Websocket options\")",
          "",
          "[Removed Lines]",
          "378:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlUnknown, .help=\"Redirect for unknown page or 404.\"),",
          "",
          "[Added Lines]",
          "378:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlFallback,.help=\"Fallback to serve when file not found.\"),",
          "381:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlUnknown, .help=\"Redirect for 404 unknown page.\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "402:     Jsi_DString *hStr);",
          "404: static void wss_MakeSessionKey( jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss) {",
          "406: }",
          "",
          "[Removed Lines]",
          "405:     snprintf(pss->key, sizeof(pss->key), \"sessionJsi=%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "",
          "[Added Lines]",
          "408:     int flag = (cmdPtr->urlFallback && cmdPtr->urlFallback[0]);",
          "409:     snprintf(pss->key, sizeof(pss->key), \"sessionJsi=%d%p%d.%d.%d\",",
          "410:         pss->wid, pss, (int)cmdPtr->startTime, flag, cmdPtr->sessFlag);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1463:     uchar *p = buffer, *end = &buffer[sizeof(buffer)-1];",
          "1464:     int n;",
          "1465:     Jsi_Value* fname = NULL;",
          "1467:     cmdPtr->stats.httpLast = now;",
          "1469:     if (inPtr[0] != '~')",
          "1470:         inPtr = Jsi_NormalPath(interp, inPtr, iStr);",
          "",
          "[Removed Lines]",
          "1466:     bool isJsiWeb = 0, isSSI = 0;",
          "",
          "[Added Lines]",
          "1471:     bool isJsiWeb = 0, isSSI = 0, fallbackTry = 0;",
          "1474: falltry:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1485:         else",
          "1486:             cmdPtr->redirDisable--;",
          "1487:     }",
          "1491:     {",
          "1492:         cmdPtr->stats.redirCnt++;",
          "1494:         if (cmdPtr->redirMax>0 && !cmdPtr->redirDisable && cmdPtr->redirMax>0 && cmdPtr->stats.redirLast",
          "1495:             && difftime(now, cmdPtr->stats.redirLast)<600 && ++cmdPtr->redirAllCnt>cmdPtr->redirMax)",
          "1496:             cmdPtr->redirDisable = 100;",
          "1497:         cmdPtr->stats.redirLast = now;",
          "1499:         return (rc == 100 ? 0 : 1);",
          "1500:     }",
          "",
          "[Removed Lines]",
          "1489:     if ((cmdPtr->urlRedirect && (inPtr == 0 || *inPtr == 0 || !Jsi_Strcmp(inPtr, \"/\")) && !cmdPtr->redirDisable)",
          "1490:         && (inPtr = (char*)cmdPtr->urlRedirect) && inPtr[0])",
          "1498:         rc = lws_http_redirect(wsi, 301, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "",
          "[Added Lines]",
          "1494:     int redirCode = 301;",
          "1496:     bool doRedir = (inPtr == 0 || *inPtr == 0 || (inPtr[0] =='/' && !inPtr[1]));",
          "1497:     if (doRedir && !cmdPtr->redirDisable && cmdPtr->urlRedirect && cmdPtr->urlRedirect[0])",
          "1499:         inPtr = (char*)cmdPtr->urlRedirect;",
          "1500: doredir:",
          "1507:         rc = lws_http_redirect(wsi, redirCode, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1791:     if ((native && Jsi_InterpSafe(interp) && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_READ) != JSI_OK) ||",
          "1792:         (Jsi_Stat(interp, fname, &jsb) || (jsb.st_size<=0 && !S_ISDIR(jsb.st_mode)))) {",
          "1793: nofile:",
          "1797:         }",
          "1798:         if (cmdPtr->onUnknown || pss->onUnknown) {",
          "1799:             Jsi_Value *uk = (pss->onUnknown?pss->onUnknown:cmdPtr->onUnknown);",
          "",
          "[Removed Lines]",
          "1794:         if (cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1795:             rc = lws_http_redirect(wsi, 301, (uchar*)cmdPtr->urlUnknown, Jsi_Strlen(cmdPtr->urlUnknown), &p, end);",
          "1796:             goto done;",
          "",
          "[Added Lines]",
          "1803:         if (cmdPtr->urlFallback && cmdPtr->urlFallback[0] && !fallbackTry) {",
          "1804:             inPtr = (char*)cmdPtr->urlFallback;",
          "1805:             fallbackTry=1;",
          "1806:             goto falltry;",
          "1807:         }",
          "1808:         if (!cmdPtr->redirDisable && cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1809:             redirCode = 404;",
          "1810:             inPtr = (char*)cmdPtr->urlUnknown;",
          "1811:             goto doredir;",
          "1812:         }",
          "1813:         if (!cmdPtr->redirDisable && cmdPtr->urlRedirect && cmdPtr->urlRedirect[0]) {",
          "1814:             inPtr = (char*)cmdPtr->urlRedirect;",
          "1815:             goto doredir;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}