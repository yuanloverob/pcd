{
  "cve_id": "CVE-2014-9767",
  "cve_desc": "Directory traversal vulnerability in the ZipArchive::extractTo function in ext/zip/php_zip.c in PHP before 5.4.45, 5.5.x before 5.5.29, and 5.6.x before 5.6.13 and ext/zip/ext_zip.cpp in HHVM before 3.12.1 allows remote attackers to create arbitrary empty directories via a crafted ZIP archive.",
  "repo": "facebook/hhvm",
  "patch_hash": "65c95a01541dd2fbc9c978ac53bed235b5376686",
  "patch_info": {
    "commit_hash": "65c95a01541dd2fbc9c978ac53bed235b5376686",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/65c95a01541dd2fbc9c978ac53bed235b5376686",
    "files": [
      "hphp/runtime/ext/zip/ext_zip.cpp",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
    ],
    "message": "ZipArchive::extractTo bug 70350\n\nSummary:Don't allow upward directory traversal when extracting zip archive files.\n\nFiles in zip files with `..` or starting at main root `/` should be normalized\nto something where the file being extracted winds up within the directory or\na subdirectory where the actual extraction is taking place.\n\nhttp://git.php.net/?p=php-src.git;a=commit;h=f9c2bf73adb2ede0a486b0db466c264f2b27e0bb\n\nReviewed By: FBNeal\n\nDifferential Revision: D2798452\n\nfb-gh-sync-id: 844549c93e011d1e991bb322bf85822246b04e30\nshipit-source-id: 844549c93e011d1e991bb322bf85822246b04e30",
    "before_after_code_files": [
      "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
      "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp": [
      "File: hphp/runtime/ext/zip/ext_zip.cpp -> hphp/runtime/ext/zip/ext_zip.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <zip.h>",
      "19: #include \"hphp/runtime/base/array-init.h\"",
      "20: #include \"hphp/runtime/base/preg.h\"",
      "21: #include \"hphp/runtime/base/stream-wrapper-registry.h\"",
      "22: #include \"hphp/runtime/ext/extension.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"hphp/runtime/base/file-util.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "650:   return true;",
      "651: }",
      "653: static bool extractFileTo(zip* zip, const std::string &file, std::string& to,",
      "654:                           char* buf, size_t len) {",
      "656:   if (sep != std::string::npos) {",
      "658:     if (!HHVM_FN(is_dir)(path) && !HHVM_FN(mkdir)(path, 0777, true)) {",
      "659:       return false;",
      "660:     }",
      "663:       return true;",
      "664:     }",
      "665:   }",
      "673:   auto zipFile = zip_fopen_index(zip, zipStat.index, 0);",
      "674:   FAIL_IF_INVALID_PTR(zipFile);",
      "",
      "[Removed Lines]",
      "655:   auto sep = file.rfind('/');",
      "657:     auto path = to + file.substr(0, sep);",
      "662:     if (sep == file.length() - 1) {",
      "667:   to.append(file);",
      "668:   struct zip_stat zipStat;",
      "669:   if (zip_stat(zip, file.c_str(), 0, &zipStat) != 0) {",
      "670:     return false;",
      "671:   }",
      "",
      "[Added Lines]",
      "659: static std::string make_relative_path(const std::string& path) {",
      "660:   if (path.empty()) {",
      "661:     return path;",
      "662:   }",
      "666:   std::string canonical(FileUtil::canonicalize(path));",
      "672:   if (FileUtil::isDirSeparator(canonical[0])) {",
      "673:     return canonical.substr(1);",
      "674:   }",
      "682:   std::string relative(canonical);",
      "683:   int idx = canonical.length() - 1;",
      "684:   while (1) {",
      "685:     while (idx > 0 && !(FileUtil::isDirSeparator(canonical[idx]))) {",
      "686:       idx--;",
      "687:     }",
      "689:     if (idx == 0) {",
      "690:       return canonical;",
      "691:     }",
      "692:     if (idx >= 1 && (canonical[idx - 1] == '.' || canonical[idx - 1] == ':')) {",
      "693:       relative = canonical.substr(idx + 1);",
      "694:       break;",
      "695:     }",
      "696:     idx--;",
      "697:   }",
      "698:   return relative;",
      "699: }",
      "704:   struct zip_stat zipStat;",
      "706:   if (zip_stat(zip, file.c_str(), 0, &zipStat) != 0) {",
      "707:     return false;",
      "708:   }",
      "710:   auto clean_file = file;",
      "711:   auto sep = std::string::npos;",
      "715:   int idx = file.length() - 1;",
      "716:   while (idx >= 0) {",
      "717:     if (FileUtil::isDirSeparator(file[idx])) {",
      "718:       sep = idx;",
      "719:       break;",
      "720:     }",
      "721:     idx--;",
      "722:   }",
      "726:     clean_file = make_relative_path(file);",
      "727:     std::string path = to + clean_file;",
      "728:     bool is_dir_only = true;",
      "729:     if (sep < file.length() - 1) { // not just a directory",
      "730:       auto clean_file_dir = HHVM_FN(dirname)(clean_file);",
      "731:       path = to + clean_file_dir.toCppString();",
      "732:       is_dir_only = false;",
      "733:     }",
      "742:     if (is_dir_only) { // directory, like /usr/bin/",
      "750:   to.append(clean_file);",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php": [
      "File: hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php -> hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "2: $dir = tempnam(sys_get_temp_dir(), __FILE__);",
      "3: unlink($dir);",
      "4: mkdir($dir);",
      "5: $archive = new ZipArchive();",
      "6: $archive->open(\"$dir/a.zip\",ZipArchive::CREATE);",
      "7: $archive->addEmptyDir(\"../dir1/\");",
      "8: $archive->addEmptyDir(\"/var/www/dir2/\");",
      "9: $archive->addEmptyDir(\"a/b/../../../dir3\");",
      "10: $archive->addEmptyDir(\"a/b/../dir4/\");",
      "11: $archive->addEmptyDir(\"a/b/../c/../../d/dir5/\");",
      "12: $archive->addEmptyDir(\"./dir6\");",
      "13: $archive->addEmptyDir(\"x/y/dir7/..\");",
      "14: $archive->addEmptyDir(\"z/dir8/.\");",
      "15: $archive->addEmptyDir(\"simple\");",
      "16: $archive->close();",
      "17: $archive2 = new ZipArchive();",
      "18: $archive2->open(\"$dir/a.zip\");",
      "19: $archive2->extractTo($dir);",
      "20: $archive2->close();",
      "21: var_dump(file_exists(\"$dir/dir1/\")); // true",
      "22: var_dump(file_exists(\"../dir1/\")); // false",
      "23: var_dump(file_exists(\"$dir/var/www/dir2\")); // true",
      "24: var_dump(file_exists(\"/var/www/dir2/\")); // false",
      "25: var_dump(file_exists(\"$dir/dir3/\")); // true",
      "26: var_dump(file_exists(\"a/b/../../../dir3/\")); // false",
      "27: var_dump(file_exists(\"$dir/a/dir4/\")); // true",
      "28: var_dump(file_exists(\"a/b/../dir4/\")); // false",
      "29: var_dump(file_exists(\"$dir/d/dir5/\")); // true",
      "30: var_dump(file_exists(\"a/b/../c/../../d/dir5/\")); // false",
      "31: var_dump(file_exists(\"$dir/dir6\")); // true",
      "32: var_dump(file_exists(\"./dir6\")); // false",
      "33: var_dump(file_exists(\"$dir/x/y/\")); // true",
      "34: var_dump(file_exists(\"x/y/dir7/..\")); // false",
      "35: var_dump(file_exists(\"$dir/z/dir8\")); // true",
      "36: var_dump(file_exists(\"z/dir8/.\")); // false",
      "37: var_dump(file_exists(\"$dir/simple\")); // true",
      "38: var_dump(file_exists(\"simple\")); // false",
      "41: rmdir(\"$dir/dir1\");",
      "42: rmdir(\"$dir/var/www/dir2\");",
      "43: rmdir(\"$dir/var/www\");",
      "44: rmdir(\"$dir/var\");",
      "45: rmdir(\"$dir/dir3\");",
      "46: rmdir(\"$dir/a/dir4\");",
      "47: rmdir(\"$dir/a\");",
      "48: rmdir(\"$dir/d/dir5\");",
      "49: rmdir(\"$dir/d\");",
      "50: rmdir(\"$dir/dir6\");",
      "51: rmdir(\"$dir/x/y\");",
      "52: rmdir(\"$dir/x\");",
      "53: rmdir(\"$dir/z/dir8\");",
      "54: rmdir(\"$dir/z\");",
      "55: rmdir(\"$dir/simple\");",
      "56: unlink(\"$dir/a.zip\");",
      "57: rmdir($dir);",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect": [
      "File: hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect -> hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: bool(true)",
      "2: bool(false)",
      "3: bool(true)",
      "4: bool(false)",
      "5: bool(true)",
      "6: bool(false)",
      "7: bool(true)",
      "8: bool(false)",
      "9: bool(true)",
      "10: bool(false)",
      "11: bool(true)",
      "12: bool(false)",
      "13: bool(true)",
      "14: bool(false)",
      "15: bool(true)",
      "16: bool(false)",
      "17: bool(true)",
      "18: bool(false)",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php": [
      "File: hphp/test/slow/ext_zlib/ziparchive_extractto_file.php -> hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "2: $str = 'temp';",
      "3: $dir = tempnam(sys_get_temp_dir(), __FILE__);",
      "4: unlink($dir);",
      "5: mkdir($dir);",
      "6: $archive = new ZipArchive();",
      "7: $archive->open(\"$dir/a.zip\",ZipArchive::CREATE);",
      "8: $archive->addFromString(\"../dir1/A.txt\", $str);",
      "9: $archive->addFromString(\"/var/www/dir2/B\", $str);",
      "10: $archive->addFromString(\"a/b/../../../dir3/C.txt.other\", $str);",
      "11: $archive->addFromString(\"a/b/../dir4/D.not.a.file/D.a.file\", $str);",
      "12: $archive->addFromString(\"a/b/../c/../../d/dir5/E\", $str);",
      "13: $archive->addFromString(\"./dir6/F.exe\", $str);",
      "14: $archive->addFromString(\"./G.txt\", $str);",
      "15: $archive->addFromString(\"H.txt\", $str);",
      "16: $archive->addFromString(\"x/y/dir7/../I.txt\", $str);",
      "17: $archive->addFromString(\"z/dir8/./J.txt\", $str);",
      "18: $archive->addFromString(\"SIMPLE.txt\", $str);",
      "19: $archive->close();",
      "20: $archive2 = new ZipArchive();",
      "21: $archive2->open(\"$dir/a.zip\");",
      "22: $archive2->extractTo($dir);",
      "23: $archive2->close();",
      "24: var_dump(file_exists(\"$dir/dir1/A.txt\")); // true",
      "25: var_dump(file_exists(\"../dir1/A.txt\")); // false",
      "26: var_dump(file_exists(\"$dir/var/www/dir2/B\")); // true",
      "27: var_dump(file_exists(\"/var/www/dir2/B\")); // false",
      "28: var_dump(file_exists(\"$dir/dir3/C.txt.other\")); // true",
      "29: var_dump(file_exists(\"a/b/../../../dir3/C.txt.other\")); // false",
      "30: var_dump(file_exists(\"$dir/a/dir4/D.not.a.file/D.a.file\")); // true",
      "31: var_dump(file_exists(\"a/b/../dir4/D.not.a.file/D.a.file\")); // false",
      "32: var_dump(file_exists(\"$dir/d/dir5/E\")); // true",
      "33: var_dump(file_exists(\"a/b/../c/../../d/dir5/E\")); // false",
      "34: var_dump(file_exists(\"$dir/dir6/F.exe\")); // true",
      "35: var_dump(file_exists(\"./dir6/F.exe\")); // false",
      "36: var_dump(file_exists(\"$dir/G.txt\")); // true",
      "37: var_dump(file_exists(\"./G.txt\")); // false",
      "38: var_dump(file_exists(\"$dir/H.txt\")); // true",
      "39: var_dump(file_exists(\"H.txt\")); // false",
      "40: var_dump(file_exists(\"$dir/x/y/I.txt\")); // true",
      "41: var_dump(file_exists(\"x/y/dir7/../I.txt\")); // false",
      "42: var_dump(file_exists(\"$dir/z/dir8/J.txt\")); // true",
      "43: var_dump(file_exists(\"z/dir8/./J.txt\")); // false",
      "44: var_dump(file_exists(\"$dir/SIMPLE.txt\")); // true",
      "45: var_dump(file_exists(\"SIMPLE.txt\")); // false",
      "48: unlink(\"$dir/dir1/A.txt\");",
      "49: rmdir(\"$dir/dir1\");",
      "50: unlink(\"$dir/var/www/dir2/B\");",
      "51: rmdir(\"$dir/var/www/dir2\");",
      "52: rmdir(\"$dir/var/www\");",
      "53: rmdir(\"$dir/var\");",
      "54: unlink(\"$dir/dir3/C.txt.other\");",
      "55: rmdir(\"$dir/dir3\");",
      "56: unlink(\"$dir/a/dir4/D.not.a.file/D.a.file\");",
      "57: rmdir(\"$dir/a/dir4/D.not.a.file\");",
      "58: rmdir(\"$dir/a/dir4\");",
      "59: rmdir(\"$dir/a\");",
      "60: unlink(\"$dir/d/dir5/E\");",
      "61: rmdir(\"$dir/d/dir5\");",
      "62: rmdir(\"$dir/d\");",
      "63: unlink(\"$dir/dir6/F.exe\");",
      "64: rmdir(\"$dir/dir6\");",
      "65: unlink(\"$dir/x/y/I.txt\");",
      "66: rmdir(\"$dir/x/y\");",
      "67: rmdir(\"$dir/x\");",
      "68: unlink(\"$dir/z/dir8/J.txt\");",
      "69: rmdir(\"$dir/z/dir8\");",
      "70: rmdir(\"$dir/z\");",
      "71: unlink(\"$dir/G.txt\");",
      "72: unlink(\"$dir/H.txt\");",
      "73: unlink(\"$dir/a.zip\");",
      "74: unlink(\"$dir/SIMPLE.txt\");",
      "75: rmdir($dir);",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect": [
      "File: hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect -> hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: bool(true)",
      "2: bool(false)",
      "3: bool(true)",
      "4: bool(false)",
      "5: bool(true)",
      "6: bool(false)",
      "7: bool(true)",
      "8: bool(false)",
      "9: bool(true)",
      "10: bool(false)",
      "11: bool(true)",
      "12: bool(false)",
      "13: bool(true)",
      "14: bool(false)",
      "15: bool(true)",
      "16: bool(false)",
      "17: bool(true)",
      "18: bool(false)",
      "19: bool(true)",
      "20: bool(false)",
      "21: bool(true)",
      "22: bool(false)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d99c98137156e99f061c56aee7977059e333b323",
      "candidate_info": {
        "commit_hash": "d99c98137156e99f061c56aee7977059e333b323",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/d99c98137156e99f061c56aee7977059e333b323",
        "files": [
          "hphp/runtime/ext/zip/ext_zip.cpp",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
        ],
        "message": "ZipArchive::extractTo bug 70350\n\nSummary:Don't allow upward directory traversal when extracting zip archive files.\n\nFiles in zip files with `..` or starting at main root `/` should be normalized\nto something where the file being extracted winds up within the directory or\na subdirectory where the actual extraction is taking place.\n\nhttp://git.php.net/?p=php-src.git;a=commit;h=f9c2bf73adb2ede0a486b0db466c264f2b27e0bb\n\nReviewed By: FBNeal\n\nDifferential Revision: D2798452\n\nfb-gh-sync-id: 844549c93e011d1e991bb322bf85822246b04e30\nshipit-source-id: 844549c93e011d1e991bb322bf85822246b04e30",
        "before_after_code_files": [
          "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
          ],
          "candidate": [
            "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp": [
          "File: hphp/runtime/ext/zip/ext_zip.cpp -> hphp/runtime/ext/zip/ext_zip.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <zip.h>",
          "19: #include \"hphp/runtime/base/array-init.h\"",
          "20: #include \"hphp/runtime/base/preg.h\"",
          "21: #include \"hphp/runtime/base/stream-wrapper-registry.h\"",
          "22: #include \"hphp/runtime/ext/extension.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"hphp/runtime/base/file-util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "764:   return true;",
          "765: }",
          "767: static bool extractFileTo(zip* zip, const std::string &file, std::string& to,",
          "768:                           char* buf, size_t len) {",
          "770:   if (sep != std::string::npos) {",
          "772:     if (!HHVM_FN(is_dir)(path) && !HHVM_FN(mkdir)(path, 0777, true)) {",
          "773:       return false;",
          "774:     }",
          "777:       return true;",
          "778:     }",
          "779:   }",
          "787:   auto zipFile = zip_fopen_index(zip, zipStat.index, 0);",
          "788:   FAIL_IF_INVALID_PTR(zipFile);",
          "",
          "[Removed Lines]",
          "769:   auto sep = file.rfind('/');",
          "771:     auto path = to + file.substr(0, sep);",
          "776:     if (sep == file.length() - 1) {",
          "781:   to.append(file);",
          "782:   struct zip_stat zipStat;",
          "783:   if (zip_stat(zip, file.c_str(), 0, &zipStat) != 0) {",
          "784:     return false;",
          "785:   }",
          "",
          "[Added Lines]",
          "773: static std::string make_relative_path(const std::string& path) {",
          "774:   if (path.empty()) {",
          "775:     return path;",
          "776:   }",
          "780:   std::string canonical(FileUtil::canonicalize(path));",
          "786:   if (canonical[0] == '/') {",
          "787:     return canonical.substr(1);",
          "788:   }",
          "796:   std::string relative(canonical);",
          "797:   int idx = canonical.length() - 1;",
          "798:   while (1) {",
          "799:     while (idx > 0 && canonical[idx] != '/') {",
          "800:       idx--;",
          "801:     }",
          "803:     if (idx == 0) {",
          "804:       return canonical;",
          "805:     }",
          "806:     if (idx >= 1 && (canonical[idx - 1] == '.' || canonical[idx - 1] == ':')) {",
          "807:       relative = canonical.substr(idx + 1);",
          "808:       break;",
          "809:     }",
          "810:     idx--;",
          "811:   }",
          "812:   return relative;",
          "813: }",
          "818:   struct zip_stat zipStat;",
          "820:   if (zip_stat(zip, file.c_str(), 0, &zipStat) != 0) {",
          "821:     return false;",
          "822:   }",
          "824:   auto clean_file = file;",
          "825:   auto sep = std::string::npos;",
          "829:   int idx = file.length() - 1;",
          "830:   while (idx >= 0) {",
          "831:     if (file[idx] == '/') {",
          "832:       sep = idx;",
          "833:       break;",
          "834:     }",
          "835:     idx--;",
          "836:   }",
          "840:     clean_file = make_relative_path(file);",
          "841:     std::string path = to + clean_file;",
          "842:     bool is_dir_only = true;",
          "843:     if (sep < file.length() - 1) { // not just a directory",
          "844:       auto clean_file_dir = HHVM_FN(dirname)(clean_file);",
          "845:       path = to + clean_file_dir.toCppString();",
          "846:       is_dir_only = false;",
          "847:     }",
          "856:     if (is_dir_only) { // directory, like /usr/bin/",
          "864:   to.append(clean_file);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php -> hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "2: $dir = tempnam(sys_get_temp_dir(), __FILE__);",
          "3: unlink($dir);",
          "4: mkdir($dir);",
          "5: $archive = new ZipArchive();",
          "6: $archive->open(\"$dir/a.zip\",ZipArchive::CREATE);",
          "7: $archive->addEmptyDir(\"../dir1/\");",
          "8: $archive->addEmptyDir(\"/var/www/dir2/\");",
          "9: $archive->addEmptyDir(\"a/b/../../../dir3\");",
          "10: $archive->addEmptyDir(\"a/b/../dir4/\");",
          "11: $archive->addEmptyDir(\"a/b/../c/../../d/dir5/\");",
          "12: $archive->addEmptyDir(\"./dir6\");",
          "13: $archive->addEmptyDir(\"x/y/dir7/..\");",
          "14: $archive->addEmptyDir(\"z/dir8/.\");",
          "15: $archive->addEmptyDir(\"simple\");",
          "16: $archive->close();",
          "17: $archive2 = new ZipArchive();",
          "18: $archive2->open(\"$dir/a.zip\");",
          "19: $archive2->extractTo($dir);",
          "20: $archive2->close();",
          "21: var_dump(file_exists(\"$dir/dir1/\")); // true",
          "22: var_dump(file_exists(\"../dir1/\")); // false",
          "23: var_dump(file_exists(\"$dir/var/www/dir2\")); // true",
          "24: var_dump(file_exists(\"/var/www/dir2/\")); // false",
          "25: var_dump(file_exists(\"$dir/dir3/\")); // true",
          "26: var_dump(file_exists(\"a/b/../../../dir3/\")); // false",
          "27: var_dump(file_exists(\"$dir/a/dir4/\")); // true",
          "28: var_dump(file_exists(\"a/b/../dir4/\")); // false",
          "29: var_dump(file_exists(\"$dir/d/dir5/\")); // true",
          "30: var_dump(file_exists(\"a/b/../c/../../d/dir5/\")); // false",
          "31: var_dump(file_exists(\"$dir/dir6\")); // true",
          "32: var_dump(file_exists(\"./dir6\")); // false",
          "33: var_dump(file_exists(\"$dir/x/y/\")); // true",
          "34: var_dump(file_exists(\"x/y/dir7/..\")); // false",
          "35: var_dump(file_exists(\"$dir/z/dir8\")); // true",
          "36: var_dump(file_exists(\"z/dir8/.\")); // false",
          "37: var_dump(file_exists(\"$dir/simple\")); // true",
          "38: var_dump(file_exists(\"simple\")); // false",
          "41: rmdir(\"$dir/dir1\");",
          "42: rmdir(\"$dir/var/www/dir2\");",
          "43: rmdir(\"$dir/var/www\");",
          "44: rmdir(\"$dir/var\");",
          "45: rmdir(\"$dir/dir3\");",
          "46: rmdir(\"$dir/a/dir4\");",
          "47: rmdir(\"$dir/a\");",
          "48: rmdir(\"$dir/d/dir5\");",
          "49: rmdir(\"$dir/d\");",
          "50: rmdir(\"$dir/dir6\");",
          "51: rmdir(\"$dir/x/y\");",
          "52: rmdir(\"$dir/x\");",
          "53: rmdir(\"$dir/z/dir8\");",
          "54: rmdir(\"$dir/z\");",
          "55: rmdir(\"$dir/simple\");",
          "56: unlink(\"$dir/a.zip\");",
          "57: rmdir($dir);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect -> hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: bool(true)",
          "2: bool(false)",
          "3: bool(true)",
          "4: bool(false)",
          "5: bool(true)",
          "6: bool(false)",
          "7: bool(true)",
          "8: bool(false)",
          "9: bool(true)",
          "10: bool(false)",
          "11: bool(true)",
          "12: bool(false)",
          "13: bool(true)",
          "14: bool(false)",
          "15: bool(true)",
          "16: bool(false)",
          "17: bool(true)",
          "18: bool(false)",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_file.php -> hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "2: $str = 'temp';",
          "3: $dir = tempnam(sys_get_temp_dir(), __FILE__);",
          "4: unlink($dir);",
          "5: mkdir($dir);",
          "6: $archive = new ZipArchive();",
          "7: $archive->open(\"$dir/a.zip\",ZipArchive::CREATE);",
          "8: $archive->addFromString(\"../dir1/A.txt\", $str);",
          "9: $archive->addFromString(\"/var/www/dir2/B\", $str);",
          "10: $archive->addFromString(\"a/b/../../../dir3/C.txt.other\", $str);",
          "11: $archive->addFromString(\"a/b/../dir4/D.not.a.file/D.a.file\", $str);",
          "12: $archive->addFromString(\"a/b/../c/../../d/dir5/E\", $str);",
          "13: $archive->addFromString(\"./dir6/F.exe\", $str);",
          "14: $archive->addFromString(\"./G.txt\", $str);",
          "15: $archive->addFromString(\"H.txt\", $str);",
          "16: $archive->addFromString(\"x/y/dir7/../I.txt\", $str);",
          "17: $archive->addFromString(\"z/dir8/./J.txt\", $str);",
          "18: $archive->addFromString(\"SIMPLE.txt\", $str);",
          "19: $archive->close();",
          "20: $archive2 = new ZipArchive();",
          "21: $archive2->open(\"$dir/a.zip\");",
          "22: $archive2->extractTo($dir);",
          "23: $archive2->close();",
          "24: var_dump(file_exists(\"$dir/dir1/A.txt\")); // true",
          "25: var_dump(file_exists(\"../dir1/A.txt\")); // false",
          "26: var_dump(file_exists(\"$dir/var/www/dir2/B\")); // true",
          "27: var_dump(file_exists(\"/var/www/dir2/B\")); // false",
          "28: var_dump(file_exists(\"$dir/dir3/C.txt.other\")); // true",
          "29: var_dump(file_exists(\"a/b/../../../dir3/C.txt.other\")); // false",
          "30: var_dump(file_exists(\"$dir/a/dir4/D.not.a.file/D.a.file\")); // true",
          "31: var_dump(file_exists(\"a/b/../dir4/D.not.a.file/D.a.file\")); // false",
          "32: var_dump(file_exists(\"$dir/d/dir5/E\")); // true",
          "33: var_dump(file_exists(\"a/b/../c/../../d/dir5/E\")); // false",
          "34: var_dump(file_exists(\"$dir/dir6/F.exe\")); // true",
          "35: var_dump(file_exists(\"./dir6/F.exe\")); // false",
          "36: var_dump(file_exists(\"$dir/G.txt\")); // true",
          "37: var_dump(file_exists(\"./G.txt\")); // false",
          "38: var_dump(file_exists(\"$dir/H.txt\")); // true",
          "39: var_dump(file_exists(\"H.txt\")); // false",
          "40: var_dump(file_exists(\"$dir/x/y/I.txt\")); // true",
          "41: var_dump(file_exists(\"x/y/dir7/../I.txt\")); // false",
          "42: var_dump(file_exists(\"$dir/z/dir8/J.txt\")); // true",
          "43: var_dump(file_exists(\"z/dir8/./J.txt\")); // false",
          "44: var_dump(file_exists(\"$dir/SIMPLE.txt\")); // true",
          "45: var_dump(file_exists(\"SIMPLE.txt\")); // false",
          "48: unlink(\"$dir/dir1/A.txt\");",
          "49: rmdir(\"$dir/dir1\");",
          "50: unlink(\"$dir/var/www/dir2/B\");",
          "51: rmdir(\"$dir/var/www/dir2\");",
          "52: rmdir(\"$dir/var/www\");",
          "53: rmdir(\"$dir/var\");",
          "54: unlink(\"$dir/dir3/C.txt.other\");",
          "55: rmdir(\"$dir/dir3\");",
          "56: unlink(\"$dir/a/dir4/D.not.a.file/D.a.file\");",
          "57: rmdir(\"$dir/a/dir4/D.not.a.file\");",
          "58: rmdir(\"$dir/a/dir4\");",
          "59: rmdir(\"$dir/a\");",
          "60: unlink(\"$dir/d/dir5/E\");",
          "61: rmdir(\"$dir/d/dir5\");",
          "62: rmdir(\"$dir/d\");",
          "63: unlink(\"$dir/dir6/F.exe\");",
          "64: rmdir(\"$dir/dir6\");",
          "65: unlink(\"$dir/x/y/I.txt\");",
          "66: rmdir(\"$dir/x/y\");",
          "67: rmdir(\"$dir/x\");",
          "68: unlink(\"$dir/z/dir8/J.txt\");",
          "69: rmdir(\"$dir/z/dir8\");",
          "70: rmdir(\"$dir/z\");",
          "71: unlink(\"$dir/G.txt\");",
          "72: unlink(\"$dir/H.txt\");",
          "73: unlink(\"$dir/a.zip\");",
          "74: unlink(\"$dir/SIMPLE.txt\");",
          "75: rmdir($dir);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect -> hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: bool(true)",
          "2: bool(false)",
          "3: bool(true)",
          "4: bool(false)",
          "5: bool(true)",
          "6: bool(false)",
          "7: bool(true)",
          "8: bool(false)",
          "9: bool(true)",
          "10: bool(false)",
          "11: bool(true)",
          "12: bool(false)",
          "13: bool(true)",
          "14: bool(false)",
          "15: bool(true)",
          "16: bool(false)",
          "17: bool(true)",
          "18: bool(false)",
          "19: bool(true)",
          "20: bool(false)",
          "21: bool(true)",
          "22: bool(false)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bb3bb1d7deeef57a3805b9a6831c5ae64ae36c1",
      "candidate_info": {
        "commit_hash": "1bb3bb1d7deeef57a3805b9a6831c5ae64ae36c1",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/1bb3bb1d7deeef57a3805b9a6831c5ae64ae36c1",
        "files": [
          "hphp/runtime/ext/zip/ext_zip.cpp",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
        ],
        "message": "ZipArchive::extractTo bug 70350\n\nSummary:Don't allow upward directory traversal when extracting zip archive files.\n\nFiles in zip files with `..` or starting at main root `/` should be normalized\nto something where the file being extracted winds up within the directory or\na subdirectory where the actual extraction is taking place.\n\nhttp://git.php.net/?p=php-src.git;a=commit;h=f9c2bf73adb2ede0a486b0db466c264f2b27e0bb\n\nReviewed By: FBNeal\n\nDifferential Revision: D2798452\n\nfb-gh-sync-id: 844549c93e011d1e991bb322bf85822246b04e30\nshipit-source-id: 844549c93e011d1e991bb322bf85822246b04e30",
        "before_after_code_files": [
          "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
          "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
          ],
          "candidate": [
            "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
            "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/zip/ext_zip.cpp||hphp/runtime/ext/zip/ext_zip.cpp": [
          "File: hphp/runtime/ext/zip/ext_zip.cpp -> hphp/runtime/ext/zip/ext_zip.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <zip.h>",
          "19: #include \"hphp/runtime/base/array-init.h\"",
          "20: #include \"hphp/runtime/base/preg.h\"",
          "21: #include \"hphp/runtime/base/stream-wrapper-registry.h\"",
          "22: #include \"hphp/runtime/ext/extension.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"hphp/runtime/base/file-util.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "654:   return true;",
          "655: }",
          "657: static bool extractFileTo(zip* zip, const std::string &file, std::string& to,",
          "658:                           char* buf, size_t len) {",
          "660:   if (sep != std::string::npos) {",
          "662:     if (!HHVM_FN(is_dir)(path) && !HHVM_FN(mkdir)(path, 0777, true)) {",
          "663:       return false;",
          "664:     }",
          "667:       return true;",
          "668:     }",
          "669:   }",
          "677:   auto zipFile = zip_fopen_index(zip, zipStat.index, 0);",
          "678:   FAIL_IF_INVALID_PTR(zipFile);",
          "",
          "[Removed Lines]",
          "659:   auto sep = file.rfind('/');",
          "661:     auto path = to + file.substr(0, sep);",
          "666:     if (sep == file.length() - 1) {",
          "671:   to.append(file);",
          "672:   struct zip_stat zipStat;",
          "673:   if (zip_stat(zip, file.c_str(), 0, &zipStat) != 0) {",
          "674:     return false;",
          "675:   }",
          "",
          "[Added Lines]",
          "663: static std::string make_relative_path(const std::string& path) {",
          "664:   if (path.empty()) {",
          "665:     return path;",
          "666:   }",
          "670:   std::string canonical(FileUtil::canonicalize(path));",
          "676:   if (FileUtil::isDirSeparator(canonical[0])) {",
          "677:     return canonical.substr(1);",
          "678:   }",
          "686:   std::string relative(canonical);",
          "687:   int idx = canonical.length() - 1;",
          "688:   while (1) {",
          "689:     while (idx > 0 && !(FileUtil::isDirSeparator(canonical[idx]))) {",
          "690:       idx--;",
          "691:     }",
          "693:     if (idx == 0) {",
          "694:       return canonical;",
          "695:     }",
          "696:     if (idx >= 1 && (canonical[idx - 1] == '.' || canonical[idx - 1] == ':')) {",
          "697:       relative = canonical.substr(idx + 1);",
          "698:       break;",
          "699:     }",
          "700:     idx--;",
          "701:   }",
          "702:   return relative;",
          "703: }",
          "708:   struct zip_stat zipStat;",
          "710:   if (zip_stat(zip, file.c_str(), 0, &zipStat) != 0) {",
          "711:     return false;",
          "712:   }",
          "714:   auto clean_file = file;",
          "715:   auto sep = std::string::npos;",
          "719:   int idx = file.length() - 1;",
          "720:   while (idx >= 0) {",
          "721:     if (FileUtil::isDirSeparator(file[idx])) {",
          "722:       sep = idx;",
          "723:       break;",
          "724:     }",
          "725:     idx--;",
          "726:   }",
          "730:     clean_file = make_relative_path(file);",
          "731:     std::string path = to + clean_file;",
          "732:     bool is_dir_only = true;",
          "733:     if (sep < file.length() - 1) { // not just a directory",
          "734:       auto clean_file_dir = HHVM_FN(dirname)(clean_file);",
          "735:       path = to + clean_file_dir.toCppString();",
          "736:       is_dir_only = false;",
          "737:     }",
          "746:     if (is_dir_only) { // directory, like /usr/bin/",
          "754:   to.append(clean_file);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php -> hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "2: $dir = tempnam(sys_get_temp_dir(), __FILE__);",
          "3: unlink($dir);",
          "4: mkdir($dir);",
          "5: $archive = new ZipArchive();",
          "6: $archive->open(\"$dir/a.zip\",ZipArchive::CREATE);",
          "7: $archive->addEmptyDir(\"../dir1/\");",
          "8: $archive->addEmptyDir(\"/var/www/dir2/\");",
          "9: $archive->addEmptyDir(\"a/b/../../../dir3\");",
          "10: $archive->addEmptyDir(\"a/b/../dir4/\");",
          "11: $archive->addEmptyDir(\"a/b/../c/../../d/dir5/\");",
          "12: $archive->addEmptyDir(\"./dir6\");",
          "13: $archive->addEmptyDir(\"x/y/dir7/..\");",
          "14: $archive->addEmptyDir(\"z/dir8/.\");",
          "15: $archive->addEmptyDir(\"simple\");",
          "16: $archive->close();",
          "17: $archive2 = new ZipArchive();",
          "18: $archive2->open(\"$dir/a.zip\");",
          "19: $archive2->extractTo($dir);",
          "20: $archive2->close();",
          "21: var_dump(file_exists(\"$dir/dir1/\")); // true",
          "22: var_dump(file_exists(\"../dir1/\")); // false",
          "23: var_dump(file_exists(\"$dir/var/www/dir2\")); // true",
          "24: var_dump(file_exists(\"/var/www/dir2/\")); // false",
          "25: var_dump(file_exists(\"$dir/dir3/\")); // true",
          "26: var_dump(file_exists(\"a/b/../../../dir3/\")); // false",
          "27: var_dump(file_exists(\"$dir/a/dir4/\")); // true",
          "28: var_dump(file_exists(\"a/b/../dir4/\")); // false",
          "29: var_dump(file_exists(\"$dir/d/dir5/\")); // true",
          "30: var_dump(file_exists(\"a/b/../c/../../d/dir5/\")); // false",
          "31: var_dump(file_exists(\"$dir/dir6\")); // true",
          "32: var_dump(file_exists(\"./dir6\")); // false",
          "33: var_dump(file_exists(\"$dir/x/y/\")); // true",
          "34: var_dump(file_exists(\"x/y/dir7/..\")); // false",
          "35: var_dump(file_exists(\"$dir/z/dir8\")); // true",
          "36: var_dump(file_exists(\"z/dir8/.\")); // false",
          "37: var_dump(file_exists(\"$dir/simple\")); // true",
          "38: var_dump(file_exists(\"simple\")); // false",
          "41: rmdir(\"$dir/dir1\");",
          "42: rmdir(\"$dir/var/www/dir2\");",
          "43: rmdir(\"$dir/var/www\");",
          "44: rmdir(\"$dir/var\");",
          "45: rmdir(\"$dir/dir3\");",
          "46: rmdir(\"$dir/a/dir4\");",
          "47: rmdir(\"$dir/a\");",
          "48: rmdir(\"$dir/d/dir5\");",
          "49: rmdir(\"$dir/d\");",
          "50: rmdir(\"$dir/dir6\");",
          "51: rmdir(\"$dir/x/y\");",
          "52: rmdir(\"$dir/x\");",
          "53: rmdir(\"$dir/z/dir8\");",
          "54: rmdir(\"$dir/z\");",
          "55: rmdir(\"$dir/simple\");",
          "56: unlink(\"$dir/a.zip\");",
          "57: rmdir($dir);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect -> hphp/test/slow/ext_zlib/ziparchive_extractto_directory.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: bool(true)",
          "2: bool(false)",
          "3: bool(true)",
          "4: bool(false)",
          "5: bool(true)",
          "6: bool(false)",
          "7: bool(true)",
          "8: bool(false)",
          "9: bool(true)",
          "10: bool(false)",
          "11: bool(true)",
          "12: bool(false)",
          "13: bool(true)",
          "14: bool(false)",
          "15: bool(true)",
          "16: bool(false)",
          "17: bool(true)",
          "18: bool(false)",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_file.php -> hphp/test/slow/ext_zlib/ziparchive_extractto_file.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "2: $str = 'temp';",
          "3: $dir = tempnam(sys_get_temp_dir(), __FILE__);",
          "4: unlink($dir);",
          "5: mkdir($dir);",
          "6: $archive = new ZipArchive();",
          "7: $archive->open(\"$dir/a.zip\",ZipArchive::CREATE);",
          "8: $archive->addFromString(\"../dir1/A.txt\", $str);",
          "9: $archive->addFromString(\"/var/www/dir2/B\", $str);",
          "10: $archive->addFromString(\"a/b/../../../dir3/C.txt.other\", $str);",
          "11: $archive->addFromString(\"a/b/../dir4/D.not.a.file/D.a.file\", $str);",
          "12: $archive->addFromString(\"a/b/../c/../../d/dir5/E\", $str);",
          "13: $archive->addFromString(\"./dir6/F.exe\", $str);",
          "14: $archive->addFromString(\"./G.txt\", $str);",
          "15: $archive->addFromString(\"H.txt\", $str);",
          "16: $archive->addFromString(\"x/y/dir7/../I.txt\", $str);",
          "17: $archive->addFromString(\"z/dir8/./J.txt\", $str);",
          "18: $archive->addFromString(\"SIMPLE.txt\", $str);",
          "19: $archive->close();",
          "20: $archive2 = new ZipArchive();",
          "21: $archive2->open(\"$dir/a.zip\");",
          "22: $archive2->extractTo($dir);",
          "23: $archive2->close();",
          "24: var_dump(file_exists(\"$dir/dir1/A.txt\")); // true",
          "25: var_dump(file_exists(\"../dir1/A.txt\")); // false",
          "26: var_dump(file_exists(\"$dir/var/www/dir2/B\")); // true",
          "27: var_dump(file_exists(\"/var/www/dir2/B\")); // false",
          "28: var_dump(file_exists(\"$dir/dir3/C.txt.other\")); // true",
          "29: var_dump(file_exists(\"a/b/../../../dir3/C.txt.other\")); // false",
          "30: var_dump(file_exists(\"$dir/a/dir4/D.not.a.file/D.a.file\")); // true",
          "31: var_dump(file_exists(\"a/b/../dir4/D.not.a.file/D.a.file\")); // false",
          "32: var_dump(file_exists(\"$dir/d/dir5/E\")); // true",
          "33: var_dump(file_exists(\"a/b/../c/../../d/dir5/E\")); // false",
          "34: var_dump(file_exists(\"$dir/dir6/F.exe\")); // true",
          "35: var_dump(file_exists(\"./dir6/F.exe\")); // false",
          "36: var_dump(file_exists(\"$dir/G.txt\")); // true",
          "37: var_dump(file_exists(\"./G.txt\")); // false",
          "38: var_dump(file_exists(\"$dir/H.txt\")); // true",
          "39: var_dump(file_exists(\"H.txt\")); // false",
          "40: var_dump(file_exists(\"$dir/x/y/I.txt\")); // true",
          "41: var_dump(file_exists(\"x/y/dir7/../I.txt\")); // false",
          "42: var_dump(file_exists(\"$dir/z/dir8/J.txt\")); // true",
          "43: var_dump(file_exists(\"z/dir8/./J.txt\")); // false",
          "44: var_dump(file_exists(\"$dir/SIMPLE.txt\")); // true",
          "45: var_dump(file_exists(\"SIMPLE.txt\")); // false",
          "48: unlink(\"$dir/dir1/A.txt\");",
          "49: rmdir(\"$dir/dir1\");",
          "50: unlink(\"$dir/var/www/dir2/B\");",
          "51: rmdir(\"$dir/var/www/dir2\");",
          "52: rmdir(\"$dir/var/www\");",
          "53: rmdir(\"$dir/var\");",
          "54: unlink(\"$dir/dir3/C.txt.other\");",
          "55: rmdir(\"$dir/dir3\");",
          "56: unlink(\"$dir/a/dir4/D.not.a.file/D.a.file\");",
          "57: rmdir(\"$dir/a/dir4/D.not.a.file\");",
          "58: rmdir(\"$dir/a/dir4\");",
          "59: rmdir(\"$dir/a\");",
          "60: unlink(\"$dir/d/dir5/E\");",
          "61: rmdir(\"$dir/d/dir5\");",
          "62: rmdir(\"$dir/d\");",
          "63: unlink(\"$dir/dir6/F.exe\");",
          "64: rmdir(\"$dir/dir6\");",
          "65: unlink(\"$dir/x/y/I.txt\");",
          "66: rmdir(\"$dir/x/y\");",
          "67: rmdir(\"$dir/x\");",
          "68: unlink(\"$dir/z/dir8/J.txt\");",
          "69: rmdir(\"$dir/z/dir8\");",
          "70: rmdir(\"$dir/z\");",
          "71: unlink(\"$dir/G.txt\");",
          "72: unlink(\"$dir/H.txt\");",
          "73: unlink(\"$dir/a.zip\");",
          "74: unlink(\"$dir/SIMPLE.txt\");",
          "75: rmdir($dir);",
          "",
          "---------------"
        ],
        "hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect||hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect": [
          "File: hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect -> hphp/test/slow/ext_zlib/ziparchive_extractto_file.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: bool(true)",
          "2: bool(false)",
          "3: bool(true)",
          "4: bool(false)",
          "5: bool(true)",
          "6: bool(false)",
          "7: bool(true)",
          "8: bool(false)",
          "9: bool(true)",
          "10: bool(false)",
          "11: bool(true)",
          "12: bool(false)",
          "13: bool(true)",
          "14: bool(false)",
          "15: bool(true)",
          "16: bool(false)",
          "17: bool(true)",
          "18: bool(false)",
          "19: bool(true)",
          "20: bool(false)",
          "21: bool(true)",
          "22: bool(false)",
          "",
          "---------------"
        ]
      }
    }
  ]
}