{
  "cve_id": "CVE-2014-3506",
  "cve_desc": "d1_both.c in the DTLS implementation in OpenSSL 0.9.8 before 0.9.8zb, 1.0.0 before 1.0.0n, and 1.0.1 before 1.0.1i allows remote attackers to cause a denial of service (memory consumption) via crafted DTLS handshake messages that trigger memory allocations corresponding to large length values.",
  "repo": "openssl/openssl",
  "patch_hash": "1250f12613b61758675848f6600ebd914ccd7636",
  "patch_info": {
    "commit_hash": "1250f12613b61758675848f6600ebd914ccd7636",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/1250f12613b61758675848f6600ebd914ccd7636",
    "files": [
      "ssl/d1_both.c"
    ],
    "message": "Fix DTLS handshake message size checks.\n\nIn |dtls1_reassemble_fragment|, the value of\n|msg_hdr->frag_off+frag_len| was being checked against the maximum\nhandshake message size, but then |msg_len| bytes were allocated for the\nfragment buffer. This means that so long as the fragment was within the\nallowed size, the pending handshake message could consume 16MB + 2MB\n(for the reassembly bitmap). Approx 10 outstanding handshake messages\nare allowed, meaning that an attacker could consume ~180MB per DTLS\nconnection.\n\nIn the non-fragmented path (in |dtls1_process_out_of_seq_message|), no\ncheck was applied.\n\nFixes CVE-2014-3506\n\nWholly based on patch by Adam Langley with one minor amendment.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
    "before_after_code_files": [
      "ssl/d1_both.c||ssl/d1_both.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_both.c||ssl/d1_both.c": [
      "File: ssl/d1_both.c -> ssl/d1_both.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "592:   return 0;",
      "593:  }",
      "596: static int",
      "597: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "598: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
      "599:  {",
      "600:  unsigned long max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
      "601:  if (max_len < (unsigned long)s->max_cert_list)",
      "602:   return s->max_cert_list;",
      "603:  return max_len;",
      "604:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "600:  pitem *item = NULL;",
      "601:  int i = -1, is_complete;",
      "602:  unsigned char seq64be[8];",
      "617:   goto err;",
      "",
      "[Removed Lines]",
      "603:  unsigned long frag_len = msg_hdr->frag_len, max_len;",
      "605:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len)",
      "606:   goto err;",
      "611:  if (DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH < s->max_cert_list)",
      "612:   max_len = s->max_cert_list;",
      "613:  else",
      "614:   max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
      "616:  if ((msg_hdr->frag_off+frag_len) > max_len)",
      "",
      "[Added Lines]",
      "613:  unsigned long frag_len = msg_hdr->frag_len;",
      "615:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len ||",
      "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
      "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
      "757:   frag = dtls1_hm_fragment_new(frag_len, 0);",
      "758:   if ( frag == NULL)",
      "759:    goto err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
      "758:    goto err;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
      "candidate_info": {
        "commit_hash": "d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix memory leak from zero-length DTLS fragments.\n\nThe |pqueue_insert| function can fail if one attempts to insert a\nduplicate sequence number. When handling a fragment of an out of\nsequence message, |dtls1_process_out_of_seq_message| would not call\n|dtls1_reassemble_fragment| if the fragment's length was zero. It would\nthen allocate a fresh fragment and attempt to insert it, but ignore the\nreturn value, leaking the fragment.\n\nThis allows an attacker to exhaust the memory of a DTLS peer.\n\nFixes CVE-2014-3507\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "617:   goto err;",
          "620:  memset(seq64be,0,sizeof(seq64be));",
          "621:  seq64be[6] = (unsigned char) (msg_hdr->seq>>8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:  if (frag_len == 0)",
          "620:   return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693:    goto err;",
          "694:    }",
          "697:   }",
          "699:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "696:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "699:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "704:   OPENSSL_assert(item != NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "751:   }",
          "752:  else",
          "753:   {",
          "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "762:   if (frag_len < msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "780:   if ( item == NULL)",
          "781:    goto err;",
          "784:   }",
          "786:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "783:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "791:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "799:   OPENSSL_assert(item != NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b74d1d260f07bf0836610d6b1a53b32101913886",
      "candidate_info": {
        "commit_hash": "b74d1d260f07bf0836610d6b1a53b32101913886",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b74d1d260f07bf0836610d6b1a53b32101913886",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix return code for truncated DTLS fragment.\n\nPreviously, a truncated DTLS fragment in\n|dtls1_process_out_of_seq_message| would cause *ok to be cleared, but\nthe return value would still be the number of bytes read. This would\ncause |dtls1_get_message| not to consider it an error and it would\ncontinue processing as normal until the calling function noticed that\n*ok was zero.\n\nI can't see an exploit here because |dtls1_get_message| uses\n|s->init_num| as the length, which will always be zero from what I can\nsee.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "777:    i = s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE,",
          "778:     frag->fragment,frag_len,0);",
          "780:     goto err;",
          "781:    }",
          "",
          "[Removed Lines]",
          "779:    if (i<=0 || (unsigned long)i!=frag_len)",
          "",
          "[Added Lines]",
          "779:    if ((unsigned long)i!=frag_len)",
          "780:     i = -1;",
          "781:    if (i<=0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6663338cb0f5c21b8635d0b84d69554b0f51b56",
      "candidate_info": {
        "commit_hash": "f6663338cb0f5c21b8635d0b84d69554b0f51b56",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f6663338cb0f5c21b8635d0b84d69554b0f51b56",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Applying same fix as in dtls1_process_out_of_seq_message. A truncated DTLS fragment would cause *ok to be clear, but the return value would still be the number of bytes read.\n\nProblem identified by Emilia K\u00e4sper, based on previous issue/patch by Adam\nLangley.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:  i = s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE,",
          "670:   frag->fragment + msg_hdr->frag_off,frag_len,0);",
          "672:   goto err;",
          "674:  RSMBLY_BITMASK_MARK(frag->reassembly, (long)msg_hdr->frag_off,",
          "",
          "[Removed Lines]",
          "671:  if (i<=0 || (unsigned long)i!=frag_len)",
          "",
          "[Added Lines]",
          "671:  if ((unsigned long)i!=frag_len)",
          "672:   i=-1;",
          "673:  if (i<=0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f2011d981c2489b10e174cbda28a20303f655d1",
      "candidate_info": {
        "commit_hash": "4f2011d981c2489b10e174cbda28a20303f655d1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4f2011d981c2489b10e174cbda28a20303f655d1",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Remove some duplicate DTLS code.\n\nIn a couple of functions, a sequence number would be calculated twice.\n\nAdditionally, in |dtls1_process_out_of_seq_message|, we know that\n|frag_len| <= |msg_hdr->msg_len| so the later tests for |frag_len <\nmsg_hdr->msg_len| can be more clearly written as |frag_len !=\nmsg_hdr->msg_len|, since that's the only remaining case.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "604:  }",
          "606: static int",
          "608:  {",
          "609:  hm_fragment *frag = NULL;",
          "610:  pitem *item = NULL;",
          "",
          "[Removed Lines]",
          "607: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Added Lines]",
          "607: dtls1_reassemble_fragment(SSL *s, const struct hm_header_st* msg_hdr, int *ok)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:  if (item == NULL)",
          "689:   {",
          "694:   item = pitem_new(seq64be, frag);",
          "695:   if (item == NULL)",
          "696:    {",
          "",
          "[Removed Lines]",
          "690:   memset(seq64be,0,sizeof(seq64be));",
          "691:   seq64be[6] = (unsigned char)(msg_hdr->seq>>8);",
          "692:   seq64be[7] = (unsigned char)(msg_hdr->seq);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "718: static int",
          "720: {",
          "721:  int i=-1;",
          "722:  hm_fragment *frag = NULL;",
          "",
          "[Removed Lines]",
          "719: dtls1_process_out_of_seq_message(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Added Lines]",
          "715: dtls1_process_out_of_seq_message(SSL *s, const struct hm_header_st* msg_hdr, int *ok)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "740:   item = NULL;",
          "",
          "[Removed Lines]",
          "739:  if (item != NULL && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "735:  if (item != NULL && frag_len != msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "761:   }",
          "762:  else",
          "763:   {",
          "765:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "767:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "764:   if (frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "760:   if (frag_len != msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "784:     goto err;",
          "785:    }",
          "791:   item = pitem_new(seq64be, frag);",
          "792:   if ( item == NULL)",
          "793:    goto err;",
          "",
          "[Removed Lines]",
          "787:   memset(seq64be,0,sizeof(seq64be));",
          "788:   seq64be[6] = (unsigned char)(msg_hdr->seq>>8);",
          "789:   seq64be[7] = (unsigned char)(msg_hdr->seq);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "657da85eea3a5825b2dd25ff25b99ec206c48136",
      "candidate_info": {
        "commit_hash": "657da85eea3a5825b2dd25ff25b99ec206c48136",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/657da85eea3a5825b2dd25ff25b99ec206c48136",
        "files": [
          "include/openssl/ssl.h",
          "include/openssl/ssl3.h",
          "ssl/d1_both.c",
          "ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/record.h",
          "ssl/s3_both.c",
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Move TLS CCS processing into the state machine\n\nThe handling of incoming CCS records is a little strange. Since CCS is not\na handshake message it is handled differently to normal handshake messages.\nUnfortunately whilst technically it is not a handhshake message the reality\nis that it must be processed in accordance with the state of the handshake.\nCurrently CCS records are processed entirely within the record layer. In\norder to ensure that it is handled in accordance with the handshake state\na flag is used to indicate that it is an acceptable time to receive a CCS.\n\nPreviously this flag did not exist (see CVE-2014-0224), but the flag should\nonly really be considered a workaround for the problem that CCS is not\nvisible to the state machine.\n\nOutgoing CCS messages are already handled within the state machine.\n\nThis patch makes CCS visible to the TLS state machine. A separate commit\nwill handle DTLS.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "ssl/d1_both.c||ssl/d1_both.c",
          "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/record.h||ssl/record/record.h",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1943: # define SSL_F_SSL3_GET_CERTIFICATE_REQUEST               135",
          "1944: # define SSL_F_SSL3_GET_CERT_STATUS                       289",
          "1945: # define SSL_F_SSL3_GET_CERT_VERIFY                       136",
          "1946: # define SSL_F_SSL3_GET_CLIENT_CERTIFICATE                137",
          "1947: # define SSL_F_SSL3_GET_CLIENT_HELLO                      138",
          "1948: # define SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE               139",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1946: # define SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC                348",
          "",
          "---------------"
        ],
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "365: # define TLS1_FLAGS_TLS_PADDING_BUG              0x0",
          "367: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
          "375: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
          "",
          "[Removed Lines]",
          "372: # define SSL3_FLAGS_CCS_OK                       0x0080",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499: # endif",
          "500: # define DTLS1_MT_HELLO_VERIFY_REQUEST    3",
          "502: # define SSL3_MT_CCS                             1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: # define SSL3_MT_CHANGE_CIPHER_SPEC              0x0101",
          "",
          "---------------"
        ],
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:         unsigned char devnull[256];",
          "681:         while (frag_len) {",
          "683:                                           devnull,",
          "684:                                           frag_len >",
          "685:                                           sizeof(devnull) ? sizeof(devnull) :",
          "",
          "[Removed Lines]",
          "682:             i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE,",
          "",
          "[Added Lines]",
          "682:             i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:     }",
          "696:                                   frag->fragment + msg_hdr->frag_off,",
          "697:                                   frag_len, 0);",
          "698:     if ((unsigned long)i != frag_len)",
          "",
          "[Removed Lines]",
          "695:     i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE,",
          "",
          "[Added Lines]",
          "695:     i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "775:         unsigned char devnull[256];",
          "777:         while (frag_len) {",
          "779:                                           devnull,",
          "780:                                           frag_len >",
          "781:                                           sizeof(devnull) ? sizeof(devnull) :",
          "",
          "[Removed Lines]",
          "778:             i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE,",
          "",
          "[Added Lines]",
          "778:             i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:                                           frag->fragment, frag_len, 0);",
          "806:             if ((unsigned long)i != frag_len)",
          "807:                 i = -1;",
          "",
          "[Removed Lines]",
          "804:             i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE,",
          "",
          "[Added Lines]",
          "804:             i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "851:     }",
          "855:                                   DTLS1_HM_HEADER_LENGTH, 0);",
          "857:         s->rwstate = SSL_READING;",
          "",
          "[Removed Lines]",
          "854:     i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, wire,",
          "",
          "[Added Lines]",
          "854:     i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL, wire,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "926:         unsigned char *p =",
          "927:             (unsigned char *)s->init_buf->data + DTLS1_HM_HEADER_LENGTH;",
          "930:                                       &p[frag_off], frag_len, 0);",
          "",
          "[Removed Lines]",
          "929:         i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE,",
          "",
          "[Added Lines]",
          "929:         i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL,",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
          "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "399: {",
          "400:     int al, i, j, ret;",
          "401:     unsigned int n;",
          "",
          "[Removed Lines]",
          "398: int dtls1_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)",
          "",
          "[Added Lines]",
          "398: int dtls1_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,",
          "399:                      int len, int peek)",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "975: {",
          "976:     int al, i, j, ret;",
          "977:     unsigned int n;",
          "",
          "[Removed Lines]",
          "974: int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)",
          "",
          "[Added Lines]",
          "975: int ssl3_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,",
          "976:                     int len, int peek)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:         return (0);",
          "1067:     }",
          "",
          "[Removed Lines]",
          "1069:     if (type == SSL3_RECORD_get_type(rr)) {",
          "",
          "[Added Lines]",
          "1071:     if (type == SSL3_RECORD_get_type(rr)",
          "1072:             || (SSL3_RECORD_get_type(rr) == SSL3_RT_CHANGE_CIPHER_SPEC",
          "1073:                 && type == SSL3_RT_HANDSHAKE && recvd_type != NULL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1080:             goto f_err;",
          "1081:         }",
          "1083:         if (len <= 0)",
          "1084:             return (len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1090:         if (type == SSL3_RT_HANDSHAKE",
          "1091:                 && SSL3_RECORD_get_type(rr) == SSL3_RT_CHANGE_CIPHER_SPEC",
          "1092:                 && s->rlayer.handshake_fragment_len > 0) {",
          "1093:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1094:             SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_CCS_RECEIVED_EARLY);",
          "1095:             goto f_err;",
          "1096:         }",
          "1098:         if (recvd_type != NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130:     if (rr->type == SSL3_RT_HANDSHAKE && type == SSL3_RT_CHANGE_CIPHER_SPEC) {",
          "1131:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1132:         SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_UNEXPECTED_MESSAGE);",
          "1133:         goto f_err;",
          "1134:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1344:     }",
          "1346:     if (SSL3_RECORD_get_type(rr) == SSL3_RT_CHANGE_CIPHER_SPEC) {",
          "1386:     }",
          "",
          "[Removed Lines]",
          "1351:         if ((SSL3_RECORD_get_length(rr) != 1)",
          "1352:             || (SSL3_RECORD_get_off(rr) != 0)",
          "1353:             || (SSL3_RECORD_get_data(rr)[0] != SSL3_MT_CCS)) {",
          "1354:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "1355:             SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "1356:             goto f_err;",
          "1357:         }",
          "1360:         if (s->s3->tmp.new_cipher == NULL) {",
          "1361:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1362:             SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_CCS_RECEIVED_EARLY);",
          "1363:             goto f_err;",
          "1364:         }",
          "1366:         if (!(s->s3->flags & SSL3_FLAGS_CCS_OK)) {",
          "1367:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1368:             SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_CCS_RECEIVED_EARLY);",
          "1369:             goto f_err;",
          "1370:         }",
          "1372:         s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "1374:         SSL3_RECORD_set_length(rr, 0);",
          "1376:         if (s->msg_callback)",
          "1377:             s->msg_callback(0, s->version, SSL3_RT_CHANGE_CIPHER_SPEC,",
          "1378:                             SSL3_RECORD_get_data(rr), 1, s,",
          "1379:                             s->msg_callback_arg);",
          "1381:         s->s3->change_cipher_spec = 1;",
          "1382:         if (!ssl3_do_change_cipher_spec(s))",
          "1383:             goto err;",
          "1384:         else",
          "1385:             goto start;",
          "",
          "[Added Lines]",
          "1372:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1373:         SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_CCS_RECEIVED_EARLY);",
          "1374:         goto f_err;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1478:  f_err:",
          "1479:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1481:     return (-1);",
          "1482: }",
          "",
          "[Removed Lines]",
          "1480:  err:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/record/record.h||ssl/record/record.h": [
          "File: ssl/record/record.h -> ssl/record/record.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "331: __owur int ssl3_write_bytes(SSL *s, int type, const void *buf, int len);",
          "332: __owur int do_ssl3_write(SSL *s, int type, const unsigned char *buf,",
          "333:                          unsigned int len, int create_empty_fragment);",
          "335: __owur int ssl3_setup_buffers(SSL *s);",
          "336: __owur int ssl3_enc(SSL *s, int send_data);",
          "337: __owur int n_ssl3_mac(SSL *ssl, unsigned char *md, int send_data);",
          "",
          "[Removed Lines]",
          "334: __owur int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek);",
          "",
          "[Added Lines]",
          "334: __owur int ssl3_read_bytes(SSL *s, int type, int *recvd_type,",
          "335:                            unsigned char *buf, int len, int peek);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345: void DTLS_RECORD_LAYER_set_saved_w_epoch(RECORD_LAYER *rl, unsigned short e);",
          "346: void DTLS_RECORD_LAYER_clear(RECORD_LAYER *rl);",
          "347: void DTLS_RECORD_LAYER_resync_write(RECORD_LAYER *rl);",
          "349: __owur int dtls1_write_bytes(SSL *s, int type, const void *buf, int len);",
          "350: __owur int do_dtls1_write(SSL *s, int type, const unsigned char *buf,",
          "351:                    unsigned int len, int create_empty_fragement);",
          "",
          "[Removed Lines]",
          "348: __owur int dtls1_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek);",
          "",
          "[Added Lines]",
          "349: __owur int dtls1_read_bytes(SSL *s, int type, int *recvd_type,",
          "350:                             unsigned char *buf, int len, int peek);",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228: }",
          "229: #endif",
          "231: int ssl3_get_finished(SSL *s, int a, int b)",
          "232: {",
          "233:     int al, i, ok;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: int ssl3_get_change_cipher_spec(SSL *s, int a, int b)",
          "232: {",
          "233:     int ok, al;",
          "234:     long n;",
          "236:     n = s->method->ssl_get_message(s, a, b, SSL3_MT_CHANGE_CIPHER_SPEC, 1, &ok);",
          "238:     if (!ok)",
          "239:         return ((int)n);",
          "245:     if (n != 0) {",
          "246:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "247:         SSLerr(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC, SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "248:         goto f_err;",
          "249:     }",
          "252:     if (s->s3->tmp.new_cipher == NULL) {",
          "253:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "254:         SSLerr(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC, SSL_R_CCS_RECEIVED_EARLY);",
          "255:         goto f_err;",
          "256:     }",
          "258:     s->s3->change_cipher_spec = 1;",
          "259:     if (!ssl3_do_change_cipher_spec(s)) {",
          "260:         al = SSL_AD_INTERNAL_ERROR;",
          "261:         SSLerr(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);",
          "262:         goto f_err;",
          "263:     }",
          "265:     return 1;",
          "266:  f_err:",
          "267:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "268:     return 0;",
          "269: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:     unsigned char *p;",
          "346:     unsigned long l;",
          "347:     long n;",
          "350:     if (s->s3->tmp.reuse_message) {",
          "351:         s->s3->tmp.reuse_message = 0;",
          "",
          "[Removed Lines]",
          "348:     int i, al;",
          "",
          "[Added Lines]",
          "389:     int i, al, recvd_type;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:         do {",
          "371:             while (s->init_num < SSL3_HM_HEADER_LENGTH) {",
          "373:                     &p[s->init_num], SSL3_HM_HEADER_LENGTH - s->init_num, 0);",
          "374:                 if (i <= 0) {",
          "375:                     s->rwstate = SSL_READING;",
          "377:                     return i;",
          "378:                 }",
          "379:                 s->init_num += i;",
          "380:             }",
          "",
          "[Removed Lines]",
          "372:                 i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE,",
          "",
          "[Added Lines]",
          "413:                 i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, &recvd_type,",
          "420:                 if (s->init_num == 0",
          "421:                         && recvd_type == SSL3_RT_CHANGE_CIPHER_SPEC",
          "422:                         && (mt < 0 || mt == SSL3_MT_CHANGE_CIPHER_SPEC)) {",
          "423:                     if (*p != SSL3_MT_CCS) {",
          "424:                         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "425:                         SSLerr(SSL_F_SSL3_GET_MESSAGE,",
          "426:                                SSL_R_UNEXPECTED_MESSAGE);",
          "427:                         goto f_err;",
          "428:                     }",
          "429:                     s->init_num = i - 1;",
          "430:                     s->init_msg = p + 1;",
          "431:                     s->s3->tmp.message_type = SSL3_MT_CHANGE_CIPHER_SPEC;",
          "432:                     s->s3->tmp.message_size = i - 1;",
          "433:                     s->state = stn;",
          "435:                     if (s->msg_callback)",
          "436:                         s->msg_callback(0, s->version,",
          "437:                                         SSL3_RT_CHANGE_CIPHER_SPEC, p, 1, s,",
          "438:                                         s->msg_callback_arg);",
          "439:                     return i - 1;",
          "440:                 } else if (recvd_type != SSL3_RT_HANDSHAKE) {",
          "441:                     al = SSL_AD_UNEXPECTED_MESSAGE;",
          "442:                     SSLerr(SSL_F_SSL3_GET_MESSAGE, SSL_R_CCS_RECEIVED_EARLY);",
          "443:                     goto f_err;",
          "444:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "458:     p = s->init_msg;",
          "459:     n = s->s3->tmp.message_size - s->init_num;",
          "460:     while (n > 0) {",
          "463:         if (i <= 0) {",
          "464:             s->rwstate = SSL_READING;",
          "",
          "[Removed Lines]",
          "461:         i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, &p[s->init_num],",
          "462:                                       n, 0);",
          "",
          "[Added Lines]",
          "527:         i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL,",
          "528:                                       &p[s->init_num], n, 0);",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: static int ssl_set_version(SSL *s);",
          "167: static int ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b);",
          "169: static int ssl_cipher_list_to_bytes(SSL *s, STACK_OF(SSL_CIPHER) *sk,",
          "170:                                     unsigned char *p,",
          "171:                                     int (*put_cb) (const SSL_CIPHER *,",
          "",
          "[Removed Lines]",
          "168: static int ssl3_check_finished(SSL *s);",
          "",
          "[Added Lines]",
          "168: static int ssl3_check_change(SSL *s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:             s->state = SSL3_ST_CW_CLNT_HELLO_A;",
          "277:             s->ctx->stats.sess_connect++;",
          "278:             s->init_num = 0;",
          "",
          "[Removed Lines]",
          "279:             s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:                 goto end;",
          "308:             if (s->hit) {",
          "310:                 if (s->tlsext_ticket_expected) {",
          "312:                     s->state = SSL3_ST_CR_SESSION_TICKET_A;",
          "",
          "[Removed Lines]",
          "309:                 s->state = SSL3_ST_CR_FINISHED_A;",
          "",
          "[Added Lines]",
          "308:                 s->state = SSL3_ST_CR_CHANGE_A;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:         case SSL3_ST_CR_CERT_A:",
          "320:         case SSL3_ST_CR_CERT_B:",
          "323:             if (ret < 0)",
          "324:                 goto end;",
          "325:             if (ret == 1) {",
          "326:                 s->hit = 1;",
          "328:                 s->init_num = 0;",
          "329:                 break;",
          "330:             }",
          "",
          "[Removed Lines]",
          "322:             ret = ssl3_check_finished(s);",
          "327:                 s->state = SSL3_ST_CR_FINISHED_A;",
          "",
          "[Added Lines]",
          "321:             ret = ssl3_check_change(s);",
          "326:                 s->state = SSL3_ST_CR_CHANGE_A;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "525:                 if (s->tlsext_ticket_expected)",
          "526:                     s->s3->tmp.next_state = SSL3_ST_CR_SESSION_TICKET_A;",
          "527:                 else",
          "529:             }",
          "530:             s->init_num = 0;",
          "531:             break;",
          "",
          "[Removed Lines]",
          "528:                     s->s3->tmp.next_state = SSL3_ST_CR_FINISHED_A;",
          "",
          "[Added Lines]",
          "527:                     s->s3->tmp.next_state = SSL3_ST_CR_CHANGE_A;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "535:             ret = ssl3_get_new_session_ticket(s);",
          "536:             if (ret <= 0)",
          "537:                 goto end;",
          "539:             s->init_num = 0;",
          "540:             break;",
          "",
          "[Removed Lines]",
          "538:             s->state = SSL3_ST_CR_FINISHED_A;",
          "",
          "[Added Lines]",
          "537:             s->state = SSL3_ST_CR_CHANGE_A;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "548:             s->init_num = 0;",
          "549:             break;",
          "551:         case SSL3_ST_CR_FINISHED_A:",
          "552:         case SSL3_ST_CR_FINISHED_B:",
          "555:             ret = ssl3_get_finished(s, SSL3_ST_CR_FINISHED_A,",
          "556:                                     SSL3_ST_CR_FINISHED_B);",
          "557:             if (ret <= 0)",
          "",
          "[Removed Lines]",
          "553:             if (!s->s3->change_cipher_spec)",
          "554:                 s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "550:         case SSL3_ST_CR_CHANGE_A:",
          "551:         case SSL3_ST_CR_CHANGE_B:",
          "552:             ret = ssl3_get_change_cipher_spec(s, SSL3_ST_CR_CHANGE_A,",
          "553:                                               SSL3_ST_CR_CHANGE_B);",
          "554:             if (ret <= 0)",
          "555:                 goto end;",
          "557:             s->state = SSL3_ST_CR_FINISHED_A;",
          "558:             s->init_num = 0;",
          "559:             break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3376: {",
          "3377:     int ok = 0;",
          "",
          "[Removed Lines]",
          "3375: static int ssl3_check_finished(SSL *s)",
          "",
          "[Added Lines]",
          "3383: static int ssl3_check_change(SSL *s)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3380:         !s->session->tlsext_tick)",
          "3381:         return 0;",
          "",
          "[Removed Lines]",
          "3384:     s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3392:                                SSL3_ST_CR_CERT_A,",
          "3393:                                SSL3_ST_CR_CERT_B,",
          "3394:                                -1, s->max_cert_list, &ok);",
          "3397:     if (!ok)",
          "3398:         return -1;",
          "3400:     s->s3->tmp.reuse_message = 1;",
          "3403:         return 1;",
          "3412:     return 0;",
          "3413: }",
          "",
          "[Removed Lines]",
          "3395:     s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "3402:     if (s->s3->tmp.message_type == SSL3_MT_FINISHED)",
          "3406:     if (s->s3->change_cipher_spec) {",
          "3407:         SSLerr(SSL_F_SSL3_CHECK_FINISHED, SSL_R_CCS_RECEIVED_EARLY);",
          "3408:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_UNEXPECTED_MESSAGE);",
          "3409:         return -1;",
          "3410:     }",
          "",
          "[Added Lines]",
          "3407:     if (s->s3->tmp.message_type == SSL3_MT_CHANGE_CIPHER_SPEC)",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4812:         if (!(s->shutdown & SSL_RECEIVED_SHUTDOWN)) {",
          "4814:         }",
          "",
          "[Removed Lines]",
          "4811:         s->method->ssl_read_bytes(s, 0, NULL, 0, 0);",
          "",
          "[Added Lines]",
          "4811:         s->method->ssl_read_bytes(s, 0, NULL, NULL, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4840:         ssl3_renegotiate_check(s);",
          "4841:     s->s3->in_read_app_data = 1;",
          "4842:     ret =",
          "4844:                                   peek);",
          "4845:     if ((ret == -1) && (s->s3->in_read_app_data == 2)) {",
          "",
          "[Removed Lines]",
          "4843:         s->method->ssl_read_bytes(s, SSL3_RT_APPLICATION_DATA, buf, len,",
          "",
          "[Added Lines]",
          "4843:         s->method->ssl_read_bytes(s, SSL3_RT_APPLICATION_DATA, NULL, buf, len,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4853:         s->in_handshake++;",
          "4854:         ret =",
          "4857:         s->in_handshake--;",
          "4858:     } else",
          "4859:         s->s3->in_read_app_data = 0;",
          "",
          "[Removed Lines]",
          "4855:             s->method->ssl_read_bytes(s, SSL3_RT_APPLICATION_DATA, buf, len,",
          "4856:                                       peek);",
          "",
          "[Added Lines]",
          "4855:             s->method->ssl_read_bytes(s, SSL3_RT_APPLICATION_DATA, NULL, buf,",
          "4856:                                       len, peek);",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:             s->init_num = 0;",
          "283:             s->s3->flags &= ~TLS1_FLAGS_SKIP_CERT_VERIFY;",
          "",
          "[Removed Lines]",
          "284:             s->s3->flags &= ~SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:                 s->init_num = 0;",
          "588:             } else if (SSL_USE_SIGALGS(s)) {",
          "589:                 s->state = SSL3_ST_SR_CERT_VRFY_A;",
          "",
          "[Removed Lines]",
          "579: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "580:                 s->state = SSL3_ST_SR_FINISHED_A;",
          "581: #else",
          "582:                 if (s->s3->next_proto_neg_seen)",
          "583:                     s->state = SSL3_ST_SR_NEXT_PROTO_A;",
          "584:                 else",
          "585:                     s->state = SSL3_ST_SR_FINISHED_A;",
          "586: #endif",
          "",
          "[Added Lines]",
          "578:                 s->state = SSL3_ST_SR_CHANGE_A;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650:             if (ret <= 0)",
          "651:                 goto end;",
          "661:             s->init_num = 0;",
          "662:             break;",
          "664: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "665:         case SSL3_ST_SR_NEXT_PROTO_A:",
          "666:         case SSL3_ST_SR_NEXT_PROTO_B:",
          "679:             ret = ssl3_get_next_proto(s);",
          "680:             if (ret <= 0)",
          "681:                 goto end;",
          "",
          "[Removed Lines]",
          "653: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "654:             s->state = SSL3_ST_SR_FINISHED_A;",
          "655: #else",
          "656:             if (s->s3->next_proto_neg_seen)",
          "657:                 s->state = SSL3_ST_SR_NEXT_PROTO_A;",
          "658:             else",
          "659:                 s->state = SSL3_ST_SR_FINISHED_A;",
          "660: #endif",
          "676:             if (!s->s3->change_cipher_spec)",
          "677:                 s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "645:             s->state = SSL3_ST_SR_CHANGE_A;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "684:             break;",
          "685: #endif",
          "687:         case SSL3_ST_SR_FINISHED_A:",
          "688:         case SSL3_ST_SR_FINISHED_B:",
          "699:             ret = ssl3_get_finished(s, SSL3_ST_SR_FINISHED_A,",
          "700:                                     SSL3_ST_SR_FINISHED_B);",
          "701:             if (ret <= 0)",
          "",
          "[Removed Lines]",
          "697:             if (!s->s3->change_cipher_spec)",
          "698:                 s->s3->flags |= SSL3_FLAGS_CCS_OK;",
          "",
          "[Added Lines]",
          "661:         case SSL3_ST_SR_CHANGE_A:",
          "662:         case SSL3_ST_SR_CHANGE_B:",
          "663:             ret = ssl3_get_change_cipher_spec(s, SSL3_ST_SR_CHANGE_A,",
          "664:                                               SSL3_ST_SR_CHANGE_B);",
          "665:             if (ret <= 0)",
          "666:                 goto end;",
          "668: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "669:             s->state = SSL3_ST_SR_FINISHED_A;",
          "670: #else",
          "671:             if (s->s3->next_proto_neg_seen)",
          "672:                 s->state = SSL3_ST_SR_NEXT_PROTO_A;",
          "673:             else",
          "674:                 s->state = SSL3_ST_SR_FINISHED_A;",
          "675: #endif",
          "676:             s->init_num = 0;",
          "677:             break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "769:                 goto end;",
          "770:             s->state = SSL3_ST_SW_FLUSH;",
          "771:             if (s->hit) {",
          "780:             } else",
          "781:                 s->s3->tmp.next_state = SSL_ST_OK;",
          "782:             s->init_num = 0;",
          "",
          "[Removed Lines]",
          "772: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "773:                 s->s3->tmp.next_state = SSL3_ST_SR_FINISHED_A;",
          "774: #else",
          "775:                 if (s->s3->next_proto_neg_seen) {",
          "776:                     s->s3->tmp.next_state = SSL3_ST_SR_NEXT_PROTO_A;",
          "777:                 } else",
          "778:                     s->s3->tmp.next_state = SSL3_ST_SR_FINISHED_A;",
          "779: #endif",
          "",
          "[Added Lines]",
          "754:                 s->s3->tmp.next_state = SSL3_ST_SR_CHANGE_A;",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:      \"ssl3_get_certificate_request\"},",
          "132:     {ERR_FUNC(SSL_F_SSL3_GET_CERT_STATUS), \"ssl3_get_cert_status\"},",
          "133:     {ERR_FUNC(SSL_F_SSL3_GET_CERT_VERIFY), \"ssl3_get_cert_verify\"},",
          "134:     {ERR_FUNC(SSL_F_SSL3_GET_CLIENT_CERTIFICATE),",
          "135:      \"ssl3_get_client_certificate\"},",
          "136:     {ERR_FUNC(SSL_F_SSL3_GET_CLIENT_HELLO), \"ssl3_get_client_hello\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     {ERR_FUNC(SSL_F_SSL3_GET_CHANGE_CIPHER_SPEC),",
          "135:      \"ssl3_get_change_cipher_spec\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:     int (*ssl_renegotiate_check) (SSL *s);",
          "564:     long (*ssl_get_message) (SSL *s, int st1, int stn, int mt, long",
          "565:                              max, int *ok);",
          "568:     int (*ssl_write_bytes) (SSL *s, int type, const void *buf_, int len);",
          "569:     int (*ssl_dispatch_alert) (SSL *s);",
          "570:     long (*ssl_ctrl) (SSL *s, int cmd, long larg, void *parg);",
          "",
          "[Removed Lines]",
          "566:     int (*ssl_read_bytes) (SSL *s, int type, unsigned char *buf, int len,",
          "567:                            int peek);",
          "",
          "[Added Lines]",
          "566:     int (*ssl_read_bytes) (SSL *s, int type, int *recvd_type,",
          "567:                            unsigned char *buf, int len, int peek);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1912: __owur int ssl3_send_server_certificate(SSL *s);",
          "1913: __owur int ssl3_send_newsession_ticket(SSL *s);",
          "1914: __owur int ssl3_send_cert_status(SSL *s);",
          "1915: __owur int ssl3_get_finished(SSL *s, int state_a, int state_b);",
          "1916: __owur int ssl3_setup_key_block(SSL *s);",
          "1917: __owur int ssl3_send_change_cipher_spec(SSL *s, int state_a, int state_b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915: __owur int ssl3_get_change_cipher_spec(SSL *s, int a, int b);",
          "",
          "---------------"
        ]
      }
    }
  ]
}