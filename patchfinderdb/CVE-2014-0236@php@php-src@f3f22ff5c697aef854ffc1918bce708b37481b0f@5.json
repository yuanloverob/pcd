{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c79fe6afa25c87f89b46d48968fdaf36b085f8c",
      "candidate_info": {
        "commit_hash": "4c79fe6afa25c87f89b46d48968fdaf36b085f8c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/4c79fe6afa25c87f89b46d48968fdaf36b085f8c",
        "files": [
          ".gitignore",
          "Makefile.frag",
          "config.m4",
          "phpdbg.h",
          "phpdbg_lexer.c",
          "phpdbg_lexer.h",
          "phpdbg_lexer.l",
          "phpdbg_parser.c",
          "phpdbg_parser.h",
          "phpdbg_parser.y",
          "phpdbg_prompt.c"
        ],
        "message": "Updated parser & leer to be usable with re2c Fixes some weird temporary compilation errors too",
        "before_after_code_files": [
          "Makefile.frag||Makefile.frag",
          "config.m4||config.m4",
          "phpdbg.h||phpdbg.h",
          "phpdbg_lexer.c||phpdbg_lexer.c",
          "phpdbg_lexer.h||phpdbg_lexer.h",
          "phpdbg_lexer.l||phpdbg_lexer.l",
          "phpdbg_parser.c||phpdbg_parser.c",
          "phpdbg_parser.h||phpdbg_parser.h",
          "phpdbg_parser.y||phpdbg_parser.y",
          "phpdbg_prompt.c||phpdbg_prompt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.frag||Makefile.frag": [
          "File: Makefile.frag -> Makefile.frag",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: $(BUILD_BINARY): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_PHPDBG_OBJS)",
          "9:  $(BUILD_PHPDBG)",
          "20: install-phpdbg: $(BUILD_BINARY)",
          "21:  @echo \"Installing phpdbg binary:         $(INSTALL_ROOT)$(bindir)/\"",
          "",
          "[Removed Lines]",
          "11: $(builddir)/sapi/phpdbg/phpdbg_lexer.lo: $(srcdir)/sapi/phpdbg/phpdbg_parser.h",
          "13: $(srcdir)/sapi/phpdbg/phpdbg_lexer.c: $(srcdir)/sapi/phpdbg/phpdbg_lexer.l",
          "14:  @(cd $(top_srcdir); $(RE2C) $(RE2C_FLAGS) --no-generation-date -cbdFo sapi/phpdbg/phpdbg_lexer.c sapi/phpdbg/phpdbg_lexer.l)",
          "16: $(srcdir)/sapi/phpdbg/phpdbg_parser.h: $(srcdir)/sapi/phpdbg/phpdbg_parser.c",
          "17: $(srcdir)/sapi/phpdbg/phpdbg_parser.c: $(srcdir)/sapi/phpdbg/phpdbg_parser.y",
          "18:  @$(YACC) -p phpdbg_ -v -d $(srcdir)/sapi/phpdbg/phpdbg_parser.y -o $@",
          "",
          "[Added Lines]",
          "11: %.c: %.y",
          "12: %.c: %.l",
          "14: $(builddir)/phpdbg_lexer.lo: $(srcdir)/phpdbg_parser.h",
          "16: $(srcdir)/phpdbg_lexer.c: $(srcdir)/phpdbg_lexer.l",
          "17:  @(cd $(top_srcdir); $(RE2C) $(RE2C_FLAGS) --no-generation-date -cbdFo $(srcdir)/phpdbg_lexer.c $(srcdir)/phpdbg_lexer.l)",
          "19: $(srcdir)/phpdbg_parser.h: $(srcdir)/phpdbg_parser.c",
          "20: $(srcdir)/phpdbg_parser.c: $(srcdir)/phpdbg_parser.y",
          "21:  @$(YACC) -p phpdbg_ -v -d $(srcdir)/phpdbg_parser.y -o $@",
          "",
          "---------------"
        ],
        "config.m4||config.m4": [
          "File: config.m4 -> config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   PHP_SUBST(PHP_PHPDBG_FILES)",
          "29:   PHP_SUBST(PHPDBG_EXTRA_LIBS)",
          "32:   PHP_SELECT_SAPI(phpdbg, program, $PHP_PHPDBG_FILES, $PHP_PHPDBG_CFLAGS, [$(SAPI_PHPDBG_PATH)])",
          "34:   BUILD_BINARY=\"sapi/phpdbg/phpdbg\"",
          "",
          "[Removed Lines]",
          "31:   PHP_ADD_MAKEFILE_FRAGMENT([$abs_srcdir/sapi/phpdbg/Makefile.frag])",
          "",
          "[Added Lines]",
          "31:   PHP_ADD_MAKEFILE_FRAGMENT([$abs_srcdir/sapi/phpdbg/Makefile.frag], [$abs_srcdir/sapi/phpdbg], [$abs_builddir/sapi/phpdbg])",
          "",
          "---------------"
        ],
        "phpdbg.h||phpdbg.h": [
          "File: phpdbg.h -> phpdbg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #   include <readline/history.h>",
          "70: #endif",
          "72: #include \"phpdbg_cmd.h\"",
          "73: #include \"phpdbg_utils.h\"",
          "74: #include \"phpdbg_btree.h\"",
          "75: #include \"phpdbg_watch.h\"",
          "77: #ifdef ZTS",
          "78: # define PHPDBG_G(v) TSRMG(phpdbg_globals_id, zend_phpdbg_globals *, v)",
          "79: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #include \"phpdbg_lexer.h\"",
          "78: int phpdbg_do_parse(phpdbg_param_t *stack, char *input TSRMLS_DC);",
          "",
          "---------------"
        ],
        "phpdbg_lexer.c||phpdbg_lexer.c": [
          "File: phpdbg_lexer.c -> phpdbg_lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: #include \"phpdbg.h\"",
          "620: #include \"phpdbg_cmd.h\"",
          "623: #include \"phpdbg_parser.h\"",
          "631: #define RAW 1",
          "872: {",
          "886:   {",
          "912:   }",
          "915:   }",
          "918:   {",
          "943:     }",
          "947:    }",
          "963:     }",
          "967:    }",
          "1110:  phpdbg_init_param(yylval, STR_PARAM);",
          "1111:  yylval->str = zend_strndup(yytext, yyleng);",
          "1112:  yylval->len = yyleng;",
          "1135:   {",
          "1157:    }",
          "1200:    }",
          "1254:   }",
          "1290:    }",
          "1298:    }",
          "1299:   }",
          "1316:   {",
          "1326:    }",
          "1336:   }",
          "1339:   {",
          "1351:    }",
          "1352:   }",
          "1388:   {",
          "1395:    }",
          "1398:   }",
          "1415:   {",
          "1419:   }",
          "1458:   }",
          "1481:   {",
          "1531:    }",
          "1532:   }",
          "1539: }",
          "1555:  }",
          "1584:   }",
          "1711: }",
          "1729:   {",
          "1734:   }",
          "2185: }",
          "2197:  }",
          "2218: }",
          "2264: }",
          "",
          "[Removed Lines]",
          "1: #line 2 \"sapi/phpdbg/phpdbg_lexer.c\"",
          "3: #line 4 \"sapi/phpdbg/phpdbg_lexer.c\"",
          "5: #define  YY_INT_ALIGNED short int",
          "9: #define FLEX_SCANNER",
          "10: #define YY_FLEX_MAJOR_VERSION 2",
          "11: #define YY_FLEX_MINOR_VERSION 5",
          "12: #define YY_FLEX_SUBMINOR_VERSION 37",
          "13: #if YY_FLEX_SUBMINOR_VERSION > 0",
          "14: #define FLEX_BETA",
          "15: #endif",
          "20: #include <stdio.h>",
          "21: #include <string.h>",
          "22: #include <errno.h>",
          "23: #include <stdlib.h>",
          "29: #ifndef FLEXINT_H",
          "30: #define FLEXINT_H",
          "34: #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L",
          "39: #ifndef __STDC_LIMIT_MACROS",
          "40: #define __STDC_LIMIT_MACROS 1",
          "41: #endif",
          "43: #include <inttypes.h>",
          "44: typedef int8_t flex_int8_t;",
          "45: typedef uint8_t flex_uint8_t;",
          "46: typedef int16_t flex_int16_t;",
          "47: typedef uint16_t flex_uint16_t;",
          "48: typedef int32_t flex_int32_t;",
          "49: typedef uint32_t flex_uint32_t;",
          "50: #else",
          "51: typedef signed char flex_int8_t;",
          "52: typedef short int flex_int16_t;",
          "53: typedef int flex_int32_t;",
          "54: typedef unsigned char flex_uint8_t;",
          "55: typedef unsigned short int flex_uint16_t;",
          "56: typedef unsigned int flex_uint32_t;",
          "59: #ifndef INT8_MIN",
          "60: #define INT8_MIN               (-128)",
          "61: #endif",
          "62: #ifndef INT16_MIN",
          "63: #define INT16_MIN              (-32767-1)",
          "64: #endif",
          "65: #ifndef INT32_MIN",
          "66: #define INT32_MIN              (-2147483647-1)",
          "67: #endif",
          "68: #ifndef INT8_MAX",
          "69: #define INT8_MAX               (127)",
          "70: #endif",
          "71: #ifndef INT16_MAX",
          "72: #define INT16_MAX              (32767)",
          "73: #endif",
          "74: #ifndef INT32_MAX",
          "75: #define INT32_MAX              (2147483647)",
          "76: #endif",
          "77: #ifndef UINT8_MAX",
          "78: #define UINT8_MAX              (255U)",
          "79: #endif",
          "80: #ifndef UINT16_MAX",
          "81: #define UINT16_MAX             (65535U)",
          "82: #endif",
          "83: #ifndef UINT32_MAX",
          "84: #define UINT32_MAX             (4294967295U)",
          "85: #endif",
          "91: #ifdef __cplusplus",
          "94: #define YY_USE_CONST",
          "99: #if defined (__STDC__)",
          "101: #define YY_USE_CONST",
          "106: #ifdef YY_USE_CONST",
          "107: #define yyconst const",
          "108: #else",
          "109: #define yyconst",
          "110: #endif",
          "113: #define YY_NULL 0",
          "120: #define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)",
          "123: #ifndef YY_TYPEDEF_YY_SCANNER_T",
          "124: #define YY_TYPEDEF_YY_SCANNER_T",
          "125: typedef void* yyscan_t;",
          "126: #endif",
          "130: #define yyin yyg->yyin_r",
          "131: #define yyout yyg->yyout_r",
          "132: #define yyextra yyg->yyextra_r",
          "133: #define yyleng yyg->yyleng_r",
          "134: #define yytext yyg->yytext_r",
          "135: #define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)",
          "136: #define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)",
          "137: #define yy_flex_debug yyg->yy_flex_debug_r",
          "143: #define BEGIN yyg->yy_start = 1 + 2 *",
          "149: #define YY_START ((yyg->yy_start - 1) / 2)",
          "150: #define YYSTATE YY_START",
          "153: #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)",
          "156: #define YY_NEW_FILE yyrestart(yyin ,yyscanner )",
          "158: #define YY_END_OF_BUFFER_CHAR 0",
          "161: #ifndef YY_BUF_SIZE",
          "162: #define YY_BUF_SIZE 16384",
          "163: #endif",
          "167: #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))",
          "169: #ifndef YY_TYPEDEF_YY_BUFFER_STATE",
          "170: #define YY_TYPEDEF_YY_BUFFER_STATE",
          "171: typedef struct yy_buffer_state *YY_BUFFER_STATE;",
          "172: #endif",
          "174: #ifndef YY_TYPEDEF_YY_SIZE_T",
          "175: #define YY_TYPEDEF_YY_SIZE_T",
          "176: typedef size_t yy_size_t;",
          "177: #endif",
          "179: #define EOB_ACT_CONTINUE_SCAN 0",
          "180: #define EOB_ACT_END_OF_FILE 1",
          "181: #define EOB_ACT_LAST_MATCH 2",
          "183:     #define YY_LESS_LINENO(n)",
          "186: #define yyless(n) \\",
          "187:  do \\",
          "188:   { \\",
          "190:         int yyless_macro_arg = (n); \\",
          "191:         YY_LESS_LINENO(yyless_macro_arg);\\",
          "193:   YY_RESTORE_YY_MORE_OFFSET \\",
          "194:   yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \\",
          "195:   YY_DO_BEFORE_ACTION; /* set up yytext again */ \\",
          "196:   } \\",
          "197:  while ( 0 )",
          "199: #define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )",
          "201: #ifndef YY_STRUCT_YY_BUFFER_STATE",
          "202: #define YY_STRUCT_YY_BUFFER_STATE",
          "203: struct yy_buffer_state",
          "204:  {",
          "205:  FILE *yy_input_file;",
          "213:  yy_size_t yy_buf_size;",
          "218:  yy_size_t yy_n_chars;",
          "224:  int yy_is_our_buffer;",
          "231:  int yy_is_interactive;",
          "237:  int yy_at_bol;",
          "245:  int yy_fill_buffer;",
          "247:  int yy_buffer_status;",
          "249: #define YY_BUFFER_NEW 0",
          "250: #define YY_BUFFER_NORMAL 1",
          "261: #define YY_BUFFER_EOF_PENDING 2",
          "263:  };",
          "272: #define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \\",
          "273:                           ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \\",
          "274:                           : NULL)",
          "279: #define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]",
          "281: void yyrestart (FILE *input_file ,yyscan_t yyscanner );",
          "282: void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );",
          "283: YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );",
          "284: void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );",
          "285: void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );",
          "286: void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );",
          "287: void yypop_buffer_state (yyscan_t yyscanner );",
          "289: static void yyensure_buffer_stack (yyscan_t yyscanner );",
          "290: static void yy_load_buffer_state (yyscan_t yyscanner );",
          "291: static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );",
          "293: #define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)",
          "295: YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );",
          "296: YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );",
          "297: YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );",
          "299: void *yyalloc (yy_size_t ,yyscan_t yyscanner );",
          "300: void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );",
          "301: void yyfree (void * ,yyscan_t yyscanner );",
          "303: #define yy_new_buffer yy_create_buffer",
          "305: #define yy_set_interactive(is_interactive) \\",
          "306:  { \\",
          "307:  if ( ! YY_CURRENT_BUFFER ){ \\",
          "308:         yyensure_buffer_stack (yyscanner); \\",
          "309:   YY_CURRENT_BUFFER_LVALUE =    \\",
          "310:             yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \\",
          "311:  } \\",
          "312:  YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \\",
          "313:  }",
          "315: #define yy_set_bol(at_bol) \\",
          "316:  { \\",
          "317:  if ( ! YY_CURRENT_BUFFER ){\\",
          "318:         yyensure_buffer_stack (yyscanner); \\",
          "319:   YY_CURRENT_BUFFER_LVALUE =    \\",
          "320:             yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \\",
          "321:  } \\",
          "322:  YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \\",
          "323:  }",
          "325: #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)",
          "329: #define yywrap(yyscanner) 1",
          "330: #define YY_SKIP_YYWRAP",
          "332: typedef unsigned char YY_CHAR;",
          "334: typedef int yy_state_type;",
          "336: #define yytext_ptr yytext_r",
          "338: static yy_state_type yy_get_previous_state (yyscan_t yyscanner );",
          "339: static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);",
          "340: static int yy_get_next_buffer (yyscan_t yyscanner );",
          "341: static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );",
          "346: #define YY_DO_BEFORE_ACTION \\",
          "347:  yyg->yytext_ptr = yy_bp; \\",
          "348:  yyleng = (size_t) (yy_cp - yy_bp); \\",
          "349:  yyg->yy_hold_char = *yy_cp; \\",
          "351:  yyg->yy_c_buf_p = yy_cp;",
          "353: #define YY_NUM_RULES 18",
          "354: #define YY_END_OF_BUFFER 19",
          "357: struct yy_trans_info",
          "358:  {",
          "359:  flex_int32_t yy_verify;",
          "360:  flex_int32_t yy_nxt;",
          "361:  };",
          "362: static yyconst flex_int16_t yy_acclist[229] =",
          "363:     {   0,",
          "364:        19,    4,   15,   18,    4,   17,   18,   17,   18,    4,",
          "365:         7,   18,    4,   12,   15,   18,    4,   12,   15,   18,",
          "366:         4,    9,   18,    4,   15,   18,    4,   15,   18,    4,",
          "367:        15,   18,    4,   15,   18,    4,   15,   18,    4,   15,",
          "368:        18,    3,    4,   15,   18,    4,   15,   18,    4,   15,",
          "369:        18,    4,   15,   18,    4,   15,   18,   16,   18,   16,",
          "370:        17,   18,   15,   18,    7,   18,   12,   15,   18,   12,",
          "371:        15,   18,    9,   18,   15,   18,   15,   18,   15,   18,",
          "372:        15,   18,   15,   18,   15,   18,   15,   18,   15,   18,",
          "373:        15,   18,   15,   18,    4,   15,    4,    4,    4,   17,",
          "375:        17,    4,   12,   15,    4,   15,    4,    8,    4,   15,",
          "376:         4,   15,    4,   15,    1,    4,   15,    4,   15,    4,",
          "377:        11,   15,    4,   15,    4,   10,   15,    4,   15,    2,",
          "378:         4,   15,    4,   15,    4,   15,    4,   15,   16,   16,",
          "379:        17,   15,   12,   15,   15,    8,   15,   15,   15,   15,",
          "380:         5,   15,   11,   15,   15,   10,   15,   15,   15,   15,",
          "381:         4,    4,   13,   15,    4,   15,    4,   15,    4,   15,",
          "382:         4,   15,    3,    4,   15,    4,   15,    4,   15,   13,",
          "383:        15,   15,   15,   15,   15,   15,   15,    4,    6,    4,",
          "384:        15,    4,   15,    4,   15,    4,   15,    4,   15,    6,",
          "386:        15,   15,   15,   15,   15,    4,   15,    4,   15,    4,",
          "387:        15,   15,   15,   15,    4,   14,   15,    4,   15,    4,",
          "388:        15,   14,   15,   15,   15,    4,   15,   15",
          "389:     } ;",
          "391: static yyconst flex_int16_t yy_accept[127] =",
          "392:     {   0,",
          "393:         1,    1,    1,    1,    1,    1,    1,    2,    5,    8,",
          "394:        10,   13,   17,   21,   24,   27,   30,   33,   36,   39,",
          "395:        42,   46,   49,   52,   55,   58,   60,   63,   65,   67,",
          "396:        70,   73,   75,   77,   79,   81,   83,   85,   87,   89,",
          "397:        91,   93,   95,   97,   98,   99,  101,  102,  105,  107,",
          "398:       109,  111,  113,  115,  118,  120,  123,  125,  128,  130,",
          "399:       133,  135,  137,  139,  140,  142,  143,  143,  145,  146,",
          "400:       147,  148,  149,  150,  151,  153,  155,  156,  158,  159,",
          "401:       160,  161,  162,  165,  167,  169,  171,  173,  176,  178,",
          "402:       180,  180,  182,  183,  184,  185,  186,  187,  188,  190,",
          "404:       192,  194,  196,  198,  200,  201,  202,  203,  204,  205,",
          "405:       206,  208,  210,  212,  213,  214,  215,  218,  220,  222,",
          "406:       224,  225,  226,  228,  229,  229",
          "407:     } ;",
          "409: static yyconst flex_int32_t yy_ec[256] =",
          "410:     {   0,",
          "411:         1,    1,    1,    1,    1,    1,    1,    1,    2,    3,",
          "412:         1,    1,    2,    1,    1,    1,    1,    1,    1,    1,",
          "413:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "414:         1,    2,    1,    1,    4,    1,    1,    1,    1,    1,",
          "415:         1,    1,    1,    1,    1,    5,    6,    7,    8,    8,",
          "416:         8,    8,    8,    8,    8,    8,    8,    9,    1,    1,",
          "417:         1,    1,    1,    1,   10,   10,   10,   11,   12,   10,",
          "418:        13,   13,   13,   13,   13,   13,   13,   14,   13,   13,",
          "419:        13,   13,   13,   13,   13,   13,   13,   13,   13,   15,",
          "420:         1,    1,    1,    1,   16,    1,   17,   18,   10,   19,",
          "422:        20,   21,   13,   22,   23,   13,   13,   24,   13,   25,",
          "423:        26,   13,   13,   27,   28,   29,   30,   31,   13,   32,",
          "424:        33,   34,    1,    1,    1,    1,    1,    1,    1,    1,",
          "425:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "426:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "427:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "428:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "429:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "430:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "431:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "433:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "434:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "435:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "436:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "437:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "438:         1,    1,    1,    1,    1",
          "439:     } ;",
          "441: static yyconst flex_int32_t yy_meta[35] =",
          "442:     {   0,",
          "443:         1,    2,    3,    2,    1,    1,    1,    1,    1,    1,",
          "444:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "445:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "446:         1,    1,    1,    1",
          "447:     } ;",
          "449: static yyconst flex_int16_t yy_base[133] =",
          "450:     {   0,",
          "451:         0,    0,   33,   35,   38,    0,  357,   71,   74,   76,",
          "452:       352,   79,   87,   90,   96,  100,  108,  109,  112,  120,",
          "453:       123,  126,  138,  142,  148,    0,  104,  316,  455,  151,",
          "454:       162,  313,   73,   92,   65,  146,  122,   94,  152,  127,",
          "455:       155,  163,  172,  318,  131,  176,  182,  288,  190,  314,",
          "456:       178,  184,  187,  211,  212,  215,  221,  224,  225,  235,",
          "457:       236,  239,  245,    0,  203,  260,  259,  248,  264,  455,",
          "458:       237,  190,  243,  253,  255,  222,  259,  194,  249,  250,",
          "459:       277,  229,    0,  285,  286,  289,  295,  304,  307,  310,",
          "460:       184,    0,  252,  283,  292,  296,  306,  309,  163,  328,",
          "462:       329,  332,  341,  344,  455,  326,  331,  330,  342,  343,",
          "463:       362,  370,  371,  394,  368,  356,  410,  384,  404,  426,",
          "464:       376,  378,  420,  411,  455,  442,  445,  447,  450,  148,",
          "465:       452,   96",
          "466:     } ;",
          "468: static yyconst flex_int16_t yy_def[133] =",
          "469:     {   0,",
          "470:       125,    1,  126,  126,  125,    5,  125,  127,  128,  125,",
          "471:       128,  127,  127,  128,  127,  127,  127,  127,  127,  127,",
          "472:       127,  127,  127,  127,  127,  129,  129,  130,  125,  130,",
          "473:       130,  125,  130,  130,  130,  130,  130,  130,  130,  130,",
          "474:       130,  130,  127,  128,  128,  128,  125,   13,   13,  128,",
          "475:       127,  127,  127,  127,  127,  127,  127,  127,  127,  127,",
          "476:       127,  127,  127,  129,  129,  130,  125,  130,  130,  125,",
          "477:       130,  130,  130,  130,  130,  130,  130,  130,  130,  130,",
          "478:       130,  128,   49,  127,  127,  127,  127,  127,  127,  127,",
          "479:       125,   69,  130,  130,  130,  130,  130,  130,  128,  127,",
          "481:       127,  127,  127,  127,  125,  130,  130,  130,  130,  130,",
          "482:       131,  127,  127,  132,  130,  130,  131,  127,  127,  132,",
          "483:       130,  130,  127,  130,    0,  125,  125,  125,  125,  125,",
          "484:       125,  125",
          "485:     } ;",
          "487: static yyconst flex_int16_t yy_nxt[490] =",
          "488:     {   0,",
          "489:         8,    9,   10,   11,   12,    8,   13,   12,   14,    8,",
          "490:         8,    8,    8,    8,   15,    8,    8,    8,   16,   17,",
          "491:        18,    8,    8,    8,   19,   20,   21,   22,   23,    8,",
          "492:         8,    8,   24,   25,   27,   10,   27,   10,   28,   10,",
          "493:        10,   29,   30,   28,   31,   30,   32,   28,   28,   28,",
          "494:        28,   28,   33,   28,   28,   28,   34,   35,   36,   28,",
          "495:        37,   28,   38,   39,   28,   28,   40,   28,   28,   28,",
          "496:        41,   42,   44,   67,   44,   46,   47,   47,   47,   45,",
          "497:        44,   67,   44,   48,   71,   48,   48,   45,   44,   73,",
          "498:        44,   48,  125,   48,   48,   45,  120,   44,   50,   44,",
          "500:        67,   44,   67,   44,   45,   65,   47,   51,   45,   44,",
          "501:        44,   44,   44,   44,   72,   44,   45,   45,   49,   76,",
          "502:        45,   44,   52,   44,   44,   55,   44,   44,   45,   44,",
          "503:        67,   45,   53,  125,   45,   67,   82,   56,   54,   44,",
          "504:        57,   44,   75,   44,   58,   44,   45,   60,   66,   44,",
          "505:        45,   44,   59,   79,   67,   68,   45,   68,   68,   67,",
          "506:        67,   62,   74,   67,   61,  125,   68,   63,   68,   68,",
          "507:        67,   67,   77,   44,   80,   44,   78,   46,   47,   44,",
          "508:        45,   44,   81,   47,   47,   44,   45,   44,   44,  105,",
          "509:        44,   84,   45,   69,   43,   45,   83,   83,   67,   83,",
          "511:        83,   83,   67,   86,   65,   47,   83,   83,   83,   83,",
          "512:        83,   85,   44,   44,   44,   44,   44,   94,   44,   45,",
          "513:        45,   43,   44,   45,   44,   44,   44,   44,   44,   45,",
          "514:        67,  125,   45,   45,   99,   87,   44,   44,   44,   44,",
          "515:        44,   56,   44,   45,   45,   67,   44,   45,   44,   88,",
          "516:        93,   67,   68,   45,   68,   68,   67,   67,   67,   95,",
          "517:        67,   67,  106,   67,   91,   89,   58,   67,   67,   90,",
          "518:        92,   92,   67,   92,   92,   92,   96,   78,   97,   76,",
          "519:        92,   92,   92,   92,   92,   67,   44,   44,   44,   44,",
          "520:        44,   67,   44,   45,   45,  100,   44,   45,   44,  107,",
          "522:        67,   98,  101,   45,   67,   44,  102,   44,   44,  108,",
          "523:        44,   44,   45,   44,   67,   45,  125,   67,   45,   43,",
          "524:       125,   70,  103,  109,   67,   78,   58,  110,  104,   44,",
          "525:        44,   44,   44,   44,   67,   44,   45,   45,   67,   67,",
          "526:        45,  114,   44,  111,   44,   44,  112,   44,  115,   45,",
          "527:        67,   67,   45,  116,  125,  113,  125,  125,  114,  111,",
          "528:        56,   76,   43,   44,   67,   44,   43,   43,   43,   43,",
          "529:        45,   44,   44,   44,   44,  122,   67,   43,   45,   45,",
          "530:       125,  125,  125,  125,   67,   44,   67,   44,  125,  125,",
          "531:       119,  121,   45,  118,   66,  124,   78,  125,   66,   66,",
          "533:        66,   66,   67,  123,  125,   44,  125,   44,  125,   66,",
          "534:        43,   44,   45,   44,   43,   43,   43,   43,   45,   67,",
          "535:       125,   44,   58,   44,  125,   43,   66,  125,   45,   76,",
          "536:        66,   66,   66,   66,   67,  125,  125,  125,   56,  125,",
          "537:       125,   66,   26,   26,   26,   43,   43,   44,   44,   44,",
          "538:        64,   64,  117,  117,    7,  125,  125,  125,  125,  125,",
          "539:       125,  125,  125,  125,  125,  125,  125,  125,  125,  125,",
          "540:       125,  125,  125,  125,  125,  125,  125,  125,  125,  125,",
          "541:       125,  125,  125,  125,  125,  125,  125,  125,  125",
          "542:     } ;",
          "544: static yyconst flex_int16_t yy_chk[490] =",
          "545:     {   0,",
          "546:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "547:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "548:         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,",
          "549:         1,    1,    1,    1,    3,    3,    4,    4,    5,    5,",
          "550:         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,",
          "551:         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,",
          "552:         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,",
          "553:         5,    5,    8,   35,    8,    9,    9,   10,   10,    8,",
          "554:        12,   33,   12,   12,   33,   12,   12,   12,   13,   35,",
          "555:        13,   13,   14,   13,   13,   13,  132,   15,   14,   15,",
          "557:        34,   16,   38,   16,   15,   27,   27,   15,   16,   17,",
          "558:        18,   17,   18,   19,   34,   19,   17,   18,   13,   38,",
          "559:        19,   20,   16,   20,   21,   18,   21,   22,   20,   22,",
          "560:        37,   21,   17,   45,   22,   40,   45,   19,   17,   23,",
          "561:        20,   23,   37,   24,   20,   24,   23,   22,  130,   25,",
          "562:        24,   25,   21,   40,   36,   30,   25,   30,   30,   30,",
          "563:        39,   24,   36,   41,   23,   99,   31,   25,   31,   31,",
          "564:        31,   42,   39,   43,   41,   43,   39,   46,   46,   51,",
          "565:        43,   51,   42,   47,   47,   52,   51,   52,   53,   91,",
          "566:        53,   51,   52,   31,   49,   53,   49,   49,   72,   49,",
          "568:        49,   49,   78,   53,   65,   65,   49,   49,   49,   49,",
          "569:        49,   52,   54,   55,   54,   55,   56,   72,   56,   54,",
          "570:        55,   49,   57,   56,   57,   58,   59,   58,   59,   57,",
          "571:        76,   82,   58,   59,   82,   55,   60,   61,   60,   61,",
          "572:        62,   57,   62,   60,   61,   71,   63,   62,   63,   59,",
          "573:        71,   73,   68,   63,   68,   68,   68,   79,   80,   73,",
          "574:        93,   74,   93,   75,   67,   61,   62,   77,   66,   63,",
          "575:        69,   69,   69,   69,   69,   69,   74,   80,   79,   77,",
          "576:        69,   69,   69,   69,   69,   81,   84,   85,   84,   85,",
          "577:        86,   94,   86,   84,   85,   84,   87,   86,   87,   94,",
          "579:        95,   81,   85,   87,   96,   88,   86,   88,   89,   95,",
          "580:        89,   90,   88,   90,   97,   89,   50,   98,   90,   48,",
          "581:        44,   32,   87,   96,   28,   97,   89,   98,   90,  100,",
          "582:       101,  100,  101,  102,  106,  102,  100,  101,  108,  107,",
          "583:       102,  106,  103,  100,  103,  104,  101,  104,  107,  103,",
          "584:       109,  110,  104,  108,   11,  102,    7,    0,  110,  104,",
          "585:       103,  109,  111,  111,  116,  111,  111,  111,  111,  111,",
          "586:       111,  112,  113,  112,  113,  116,  115,  111,  112,  113,",
          "587:         0,    0,    0,    0,  121,  118,  122,  118,    0,    0,",
          "588:       113,  115,  118,  112,  114,  121,  122,    0,  114,  114,",
          "590:       114,  114,  114,  118,    0,  119,    0,  119,    0,  114,",
          "591:       117,  117,  119,  117,  117,  117,  117,  117,  117,  124,",
          "592:         0,  123,  119,  123,    0,  117,  120,    0,  123,  124,",
          "593:       120,  120,  120,  120,  120,    0,    0,    0,  123,    0,",
          "594:         0,  120,  126,  126,  126,  127,  127,  128,  128,  128,",
          "595:       129,  129,  131,  131,  125,  125,  125,  125,  125,  125,",
          "596:       125,  125,  125,  125,  125,  125,  125,  125,  125,  125,",
          "597:       125,  125,  125,  125,  125,  125,  125,  125,  125,  125,",
          "598:       125,  125,  125,  125,  125,  125,  125,  125,  125",
          "599:     } ;",
          "601: #define REJECT \\",
          "602: { \\",
          "604: yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \\",
          "605: ++yyg->yy_lp; \\",
          "606: goto find_rule; \\",
          "607: }",
          "609: #define yymore() yymore_used_but_not_detected",
          "610: #define YY_MORE_ADJ 0",
          "611: #define YY_RESTORE_YY_MORE_OFFSET",
          "612: #line 1 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "613: #line 2 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "621: #define YYSTYPE phpdbg_param_t",
          "627: #define YY_NO_UNISTD_H 1",
          "628: #line 629 \"sapi/phpdbg/phpdbg_lexer.c\"",
          "630: #define INITIAL 0",
          "632: #define NORMAL 2",
          "634: #ifndef YY_NO_UNISTD_H",
          "639: #include <unistd.h>",
          "640: #endif",
          "642: #ifndef YY_EXTRA_TYPE",
          "643: #define YY_EXTRA_TYPE void *",
          "644: #endif",
          "647: struct yyguts_t",
          "648:     {",
          "651:     YY_EXTRA_TYPE yyextra_r;",
          "654:     FILE *yyin_r, *yyout_r;",
          "658:     char yy_hold_char;",
          "659:     yy_size_t yy_n_chars;",
          "660:     yy_size_t yyleng_r;",
          "661:     char *yy_c_buf_p;",
          "662:     int yy_init;",
          "663:     int yy_start;",
          "664:     int yy_did_buffer_switch_on_eof;",
          "665:     int yy_start_stack_ptr;",
          "666:     int yy_start_stack_depth;",
          "667:     int *yy_start_stack;",
          "668:     yy_state_type yy_last_accepting_state;",
          "669:     char* yy_last_accepting_cpos;",
          "671:     int yylineno_r;",
          "672:     int yy_flex_debug_r;",
          "674:     yy_state_type *yy_state_buf;",
          "675:     yy_state_type *yy_state_ptr;",
          "676:     char *yy_full_match;",
          "677:     int yy_lp;",
          "681:     int yy_looking_for_trail_begin;",
          "682:     int yy_full_lp;",
          "683:     int *yy_full_state;",
          "685:     char *yytext_r;",
          "686:     int yy_more_flag;",
          "687:     int yy_more_len;",
          "689:     YYSTYPE * yylval_r;",
          "693: static int yy_init_globals (yyscan_t yyscanner );",
          "697:     #    define yylval yyg->yylval_r",
          "699: int yylex_init (yyscan_t* scanner);",
          "701: int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);",
          "706: int yylex_destroy (yyscan_t yyscanner );",
          "708: int yyget_debug (yyscan_t yyscanner );",
          "710: void yyset_debug (int debug_flag ,yyscan_t yyscanner );",
          "712: YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );",
          "714: void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );",
          "716: FILE *yyget_in (yyscan_t yyscanner );",
          "718: void yyset_in  (FILE * in_str ,yyscan_t yyscanner );",
          "720: FILE *yyget_out (yyscan_t yyscanner );",
          "722: void yyset_out  (FILE * out_str ,yyscan_t yyscanner );",
          "724: yy_size_t yyget_leng (yyscan_t yyscanner );",
          "726: char *yyget_text (yyscan_t yyscanner );",
          "728: int yyget_lineno (yyscan_t yyscanner );",
          "730: void yyset_lineno (int line_number ,yyscan_t yyscanner );",
          "732: int yyget_column  (yyscan_t yyscanner );",
          "734: void yyset_column (int column_no ,yyscan_t yyscanner );",
          "736: YYSTYPE * yyget_lval (yyscan_t yyscanner );",
          "738: void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );",
          "744: #ifndef YY_SKIP_YYWRAP",
          "745: #ifdef __cplusplus",
          "746: extern \"C\" int yywrap (yyscan_t yyscanner );",
          "747: #else",
          "748: extern int yywrap (yyscan_t yyscanner );",
          "749: #endif",
          "750: #endif",
          "752:     static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);",
          "754: #ifndef yytext_ptr",
          "755: static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);",
          "756: #endif",
          "758: #ifdef YY_NEED_STRLEN",
          "759: static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);",
          "760: #endif",
          "762: #ifndef YY_NO_INPUT",
          "764: #ifdef __cplusplus",
          "765: static int yyinput (yyscan_t yyscanner );",
          "766: #else",
          "767: static int input (yyscan_t yyscanner );",
          "768: #endif",
          "770: #endif",
          "773: #ifndef YY_READ_BUF_SIZE",
          "774: #define YY_READ_BUF_SIZE 8192",
          "775: #endif",
          "778: #ifndef ECHO",
          "782: #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)",
          "783: #endif",
          "788: #ifndef YY_INPUT",
          "789: #define YY_INPUT(buf,result,max_size) \\",
          "790:  if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \\",
          "791:   { \\",
          "792:   int c = '*'; \\",
          "793:   size_t n; \\",
          "794:   for ( n = 0; n < max_size && \\",
          "795:         (c = getc( yyin )) != EOF && c != '\\n'; ++n ) \\",
          "796:    buf[n] = (char) c; \\",
          "797:   if ( c == '\\n' ) \\",
          "798:    buf[n++] = (char) c; \\",
          "799:   if ( c == EOF && ferror( yyin ) ) \\",
          "800:    YY_FATAL_ERROR( \"input in flex scanner failed\" ); \\",
          "801:   result = n; \\",
          "802:   } \\",
          "803:  else \\",
          "804:   { \\",
          "805:   errno=0; \\",
          "806:   while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\",
          "807:    { \\",
          "808:    if( errno != EINTR) \\",
          "809:     { \\",
          "810:     YY_FATAL_ERROR( \"input in flex scanner failed\" ); \\",
          "811:     break; \\",
          "812:     } \\",
          "813:    errno=0; \\",
          "814:    clearerr(yyin); \\",
          "815:    } \\",
          "816:   }\\",
          "817: \\",
          "819: #endif",
          "825: #ifndef yyterminate",
          "826: #define yyterminate() return YY_NULL",
          "827: #endif",
          "830: #ifndef YY_START_STACK_INCR",
          "831: #define YY_START_STACK_INCR 25",
          "832: #endif",
          "835: #ifndef YY_FATAL_ERROR",
          "836: #define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)",
          "837: #endif",
          "844: #ifndef YY_DECL",
          "845: #define YY_DECL_IS_OURS 1",
          "847: extern int yylex \\",
          "848:                (YYSTYPE * yylval_param ,yyscan_t yyscanner);",
          "850: #define YY_DECL int yylex \\",
          "851:                (YYSTYPE * yylval_param , yyscan_t yyscanner)",
          "857: #ifndef YY_USER_ACTION",
          "858: #define YY_USER_ACTION",
          "859: #endif",
          "862: #ifndef YY_BREAK",
          "863: #define YY_BREAK break;",
          "864: #endif",
          "866: #define YY_RULE_SETUP \\",
          "867:  YY_USER_ACTION",
          "871: YY_DECL",
          "873:  register yy_state_type yy_current_state;",
          "874:  register char *yy_cp, *yy_bp;",
          "875:  register int yy_act;",
          "876:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "878: #line 44 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "881: #line 882 \"sapi/phpdbg/phpdbg_lexer.c\"",
          "883:     yylval = yylval_param;",
          "885:  if ( !yyg->yy_init )",
          "887:   yyg->yy_init = 1;",
          "889: #ifdef YY_USER_INIT",
          "890:   YY_USER_INIT;",
          "891: #endif",
          "894:         if ( ! yyg->yy_state_buf )",
          "895:             yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  ,yyscanner);",
          "896:             if ( ! yyg->yy_state_buf )",
          "897:                 YY_FATAL_ERROR( \"out of dynamic memory in yylex()\" );",
          "899:   if ( ! yyg->yy_start )",
          "902:   if ( ! yyin )",
          "903:    yyin = stdin;",
          "905:   if ( ! yyout )",
          "906:    yyout = stdout;",
          "908:   if ( ! YY_CURRENT_BUFFER ) {",
          "909:    yyensure_buffer_stack (yyscanner);",
          "910:    YY_CURRENT_BUFFER_LVALUE =",
          "911:     yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);",
          "914:   yy_load_buffer_state(yyscanner );",
          "919:   yy_cp = yyg->yy_c_buf_p;",
          "927:   yy_bp = yy_cp;",
          "929:   yy_current_state = yyg->yy_start;",
          "931:   yyg->yy_state_ptr = yyg->yy_state_buf;",
          "934: yy_match:",
          "935:   do",
          "936:    {",
          "937:    register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];",
          "938:    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )",
          "939:     {",
          "940:     yy_current_state = (int) yy_def[yy_current_state];",
          "941:     if ( yy_current_state >= 126 )",
          "942:      yy_c = yy_meta[(unsigned int) yy_c];",
          "944:    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "946:    ++yy_cp;",
          "948:   while ( yy_current_state != 125 );",
          "950: yy_find_action:",
          "951:   yy_current_state = *--yyg->yy_state_ptr;",
          "952:   yyg->yy_lp = yy_accept[yy_current_state];",
          "955:    {",
          "956:    if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )",
          "957:     {",
          "958:     yy_act = yy_acclist[yyg->yy_lp];",
          "959:      {",
          "960:      yyg->yy_full_match = yy_cp;",
          "961:      break;",
          "962:      }",
          "964:    --yy_cp;",
          "965:    yy_current_state = *--yyg->yy_state_ptr;",
          "966:    yyg->yy_lp = yy_accept[yy_current_state];",
          "969:   YY_DO_BEFORE_ACTION;",
          "973:   switch ( yy_act )",
          "976: case 1:",
          "977: YY_RULE_SETUP",
          "978: #line 47 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "979: {",
          "980:   BEGIN(RAW);",
          "981:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "982:   return T_EVAL;",
          "983:  }",
          "984:  YY_BREAK",
          "985: case 2:",
          "986: YY_RULE_SETUP",
          "987: #line 52 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "988: {",
          "989:   BEGIN(RAW);",
          "990:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "991:   return T_SHELL;",
          "992:  }",
          "993:  YY_BREAK",
          "994: case 3:",
          "995: YY_RULE_SETUP",
          "996: #line 57 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "997: {",
          "998:   BEGIN(RAW);",
          "999:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "1000:   return T_RUN;",
          "1001:  }",
          "1002:  YY_BREAK",
          "1003: case 4:",
          "1004: YY_RULE_SETUP",
          "1005: #line 63 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1006: {",
          "1007:   BEGIN(NORMAL);",
          "1008:   REJECT;",
          "1009:  }",
          "1010:  YY_BREAK",
          "1013: case 5:",
          "1014: YY_RULE_SETUP",
          "1015: #line 70 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1016: {",
          "1017:   BEGIN(RAW);",
          "1018:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "1019:   return T_IF;",
          "1020:  }",
          "1021:  YY_BREAK",
          "1024: case 6:",
          "1025: YY_RULE_SETUP",
          "1026: #line 78 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1027: {",
          "1028:   phpdbg_init_param(yylval, STR_PARAM);",
          "1029:   yylval->str = zend_strndup(yytext, yyleng);",
          "1030:   yylval->len = yyleng;",
          "1031:   return T_PROTO;",
          "1032:  }",
          "1033:  YY_BREAK",
          "1034: case 7:",
          "1035: YY_RULE_SETUP",
          "1036: #line 84 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1037: { return T_POUND;  }",
          "1038:  YY_BREAK",
          "1039: case 8:",
          "1040: YY_RULE_SETUP",
          "1041: #line 85 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1042: { return T_DCOLON; }",
          "1043:  YY_BREAK",
          "1044: case 9:",
          "1045: YY_RULE_SETUP",
          "1046: #line 86 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1047: { return T_COLON;  }",
          "1048:  YY_BREAK",
          "1049: case 10:",
          "1050: YY_RULE_SETUP",
          "1051: #line 88 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1052: {",
          "1053:   phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "1054:   yylval->num = 1;",
          "1055:   return T_TRUTHY;",
          "1056:  }",
          "1057:  YY_BREAK",
          "1058: case 11:",
          "1059: YY_RULE_SETUP",
          "1060: #line 93 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1061: {",
          "1062:   phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "1063:   yylval->num = 0;",
          "1064:   return T_FALSY;",
          "1065:  }",
          "1066:  YY_BREAK",
          "1067: case 12:",
          "1068: YY_RULE_SETUP",
          "1069: #line 98 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1070: {",
          "1071:   phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "1072:   yylval->num = atoi(yytext);",
          "1073:   return T_DIGITS;",
          "1074:  }",
          "1075:  YY_BREAK",
          "1076: case 13:",
          "1077: YY_RULE_SETUP",
          "1078: #line 103 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1079: {",
          "1080:   phpdbg_init_param(yylval, ADDR_PARAM);",
          "1081:   yylval->addr = strtoul(yytext, 0, 16);",
          "1082:   return T_ADDR;",
          "1083:  }",
          "1084:  YY_BREAK",
          "1085: case 14:",
          "1086: YY_RULE_SETUP",
          "1087: #line 108 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1088: {",
          "1089:   phpdbg_init_param(yylval, OP_PARAM);",
          "1090:   yylval->str = zend_strndup(yytext, yyleng);",
          "1091:   yylval->len = yyleng;",
          "1092:   return T_OPCODE;",
          "1093:  }",
          "1094:  YY_BREAK",
          "1095: case 15:",
          "1096: YY_RULE_SETUP",
          "1097: #line 114 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1098: {",
          "1099:   phpdbg_init_param(yylval, STR_PARAM);",
          "1100:   yylval->str = zend_strndup(yytext, yyleng);",
          "1101:   yylval->len = yyleng;",
          "1102:   return T_ID;",
          "1103:  }",
          "1104:  YY_BREAK",
          "1106: case 16:",
          "1107: YY_RULE_SETUP",
          "1108: #line 122 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1109: {",
          "1113:  BEGIN(INITIAL);",
          "1114:  return T_INPUT;",
          "1115: }",
          "1116:  YY_BREAK",
          "1117: case 17:",
          "1119: YY_RULE_SETUP",
          "1120: #line 130 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1121: { /* ignore whitespace */ }",
          "1122:  YY_BREAK",
          "1123: case 18:",
          "1124: YY_RULE_SETUP",
          "1125: #line 131 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "1126: YY_FATAL_ERROR( \"flex scanner jammed\" );",
          "1127:  YY_BREAK",
          "1128: #line 1129 \"sapi/phpdbg/phpdbg_lexer.c\"",
          "1129:    case YY_STATE_EOF(INITIAL):",
          "1130:    case YY_STATE_EOF(RAW):",
          "1131:    case YY_STATE_EOF(NORMAL):",
          "1132:     yyterminate();",
          "1134:  case YY_END_OF_BUFFER:",
          "1137:   int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;",
          "1141:   YY_RESTORE_YY_MORE_OFFSET",
          "1143:   if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )",
          "1144:    {",
          "1154:    yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;",
          "1155:    YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;",
          "1156:    YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;",
          "1166:   if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )",
          "1168:    yy_state_type yy_next_state;",
          "1170:    yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;",
          "1172:    yy_current_state = yy_get_previous_state( yyscanner );",
          "1183:    yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);",
          "1185:    yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;",
          "1187:    if ( yy_next_state )",
          "1188:     {",
          "1190:     yy_cp = ++yyg->yy_c_buf_p;",
          "1191:     yy_current_state = yy_next_state;",
          "1192:     goto yy_match;",
          "1193:     }",
          "1195:    else",
          "1196:     {",
          "1197:     yy_cp = yyg->yy_c_buf_p;",
          "1198:     goto yy_find_action;",
          "1199:     }",
          "1202:   else switch ( yy_get_next_buffer( yyscanner ) )",
          "1203:    {",
          "1204:    case EOB_ACT_END_OF_FILE:",
          "1205:     {",
          "1206:     yyg->yy_did_buffer_switch_on_eof = 0;",
          "1208:     if ( yywrap(yyscanner ) )",
          "1209:      {",
          "1219:      yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;",
          "1221:      yy_act = YY_STATE_EOF(YY_START);",
          "1222:      goto do_action;",
          "1223:      }",
          "1225:     else",
          "1226:      {",
          "1227:      if ( ! yyg->yy_did_buffer_switch_on_eof )",
          "1228:       YY_NEW_FILE;",
          "1229:      }",
          "1230:     break;",
          "1231:     }",
          "1233:    case EOB_ACT_CONTINUE_SCAN:",
          "1234:     yyg->yy_c_buf_p =",
          "1235:      yyg->yytext_ptr + yy_amount_of_matched_text;",
          "1237:     yy_current_state = yy_get_previous_state( yyscanner );",
          "1239:     yy_cp = yyg->yy_c_buf_p;",
          "1240:     yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;",
          "1241:     goto yy_match;",
          "1243:    case EOB_ACT_LAST_MATCH:",
          "1244:     yyg->yy_c_buf_p =",
          "1245:     &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];",
          "1247:     yy_current_state = yy_get_previous_state( yyscanner );",
          "1249:     yy_cp = yyg->yy_c_buf_p;",
          "1250:     yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;",
          "1251:     goto yy_find_action;",
          "1252:    }",
          "1253:   break;",
          "1256:  default:",
          "1257:   YY_FATAL_ERROR(",
          "1258:    \"fatal flex scanner internal error--no action found\" );",
          "1270: static int yy_get_next_buffer (yyscan_t yyscanner)",
          "1271: {",
          "1272:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1273:  register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;",
          "1274:  register char *source = yyg->yytext_ptr;",
          "1275:  register int number_to_move, i;",
          "1276:  int ret_val;",
          "1278:  if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )",
          "1279:   YY_FATAL_ERROR(",
          "1280:   \"fatal flex scanner internal error--end of buffer missed\" );",
          "1282:  if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )",
          "1284:   if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )",
          "1285:    {",
          "1289:    return EOB_ACT_END_OF_FILE;",
          "1292:   else",
          "1293:    {",
          "1297:    return EOB_ACT_LAST_MATCH;",
          "1304:  number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;",
          "1306:  for ( i = 0; i < number_to_move; ++i )",
          "1309:  if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )",
          "1313:   YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;",
          "1315:  else",
          "1317:    yy_size_t num_to_read =",
          "1318:    YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;",
          "1320:   while ( num_to_read <= 0 )",
          "1323:    YY_FATAL_ERROR(",
          "1324: \"input buffer overflow, can't enlarge buffer because scanner uses REJECT\" );",
          "1328:   if ( num_to_read > YY_READ_BUF_SIZE )",
          "1329:    num_to_read = YY_READ_BUF_SIZE;",
          "1332:   YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),",
          "1333:    yyg->yy_n_chars, num_to_read );",
          "1335:   YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;",
          "1338:  if ( yyg->yy_n_chars == 0 )",
          "1340:   if ( number_to_move == YY_MORE_ADJ )",
          "1341:    {",
          "1342:    ret_val = EOB_ACT_END_OF_FILE;",
          "1343:    yyrestart(yyin  ,yyscanner);",
          "1344:    }",
          "1346:   else",
          "1347:    {",
          "1348:    ret_val = EOB_ACT_LAST_MATCH;",
          "1349:    YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =",
          "1350:     YY_BUFFER_EOF_PENDING;",
          "1354:  else",
          "1355:   ret_val = EOB_ACT_CONTINUE_SCAN;",
          "1357:  if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {",
          "1359:   yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);",
          "1360:   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );",
          "1361:   if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )",
          "1362:    YY_FATAL_ERROR( \"out of dynamic memory in yy_get_next_buffer()\" );",
          "1363:  }",
          "1365:  yyg->yy_n_chars += number_to_move;",
          "1366:  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;",
          "1367:  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;",
          "1369:  yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];",
          "1371:  return ret_val;",
          "1372: }",
          "1376:     static yy_state_type yy_get_previous_state (yyscan_t yyscanner)",
          "1377: {",
          "1378:  register yy_state_type yy_current_state;",
          "1379:  register char *yy_cp;",
          "1380:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1382:  yy_current_state = yyg->yy_start;",
          "1384:  yyg->yy_state_ptr = yyg->yy_state_buf;",
          "1387:  for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )",
          "1389:   register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);",
          "1390:   while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )",
          "1391:    {",
          "1392:    yy_current_state = (int) yy_def[yy_current_state];",
          "1393:    if ( yy_current_state >= 126 )",
          "1394:     yy_c = yy_meta[(unsigned int) yy_c];",
          "1396:   yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "1400:  return yy_current_state;",
          "1401: }",
          "1408:     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)",
          "1409: {",
          "1410:  register int yy_is_jam;",
          "1413:  register YY_CHAR yy_c = 1;",
          "1414:  while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )",
          "1416:   yy_current_state = (int) yy_def[yy_current_state];",
          "1417:   if ( yy_current_state >= 126 )",
          "1418:    yy_c = yy_meta[(unsigned int) yy_c];",
          "1420:  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "1421:  yy_is_jam = (yy_current_state == 125);",
          "1422:  if ( ! yy_is_jam )",
          "1425:  (void)yyg;",
          "1426:  return yy_is_jam ? 0 : yy_current_state;",
          "1427: }",
          "1429:     static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)",
          "1430: {",
          "1431:  register char *yy_cp;",
          "1432:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1434:     yy_cp = yyg->yy_c_buf_p;",
          "1439:  if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )",
          "1442:   register yy_size_t number_to_move = yyg->yy_n_chars + 2;",
          "1443:   register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[",
          "1444:      YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];",
          "1445:   register char *source =",
          "1446:     &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];",
          "1448:   while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )",
          "1451:   yy_cp += (int) (dest - source);",
          "1452:   yy_bp += (int) (dest - source);",
          "1453:   YY_CURRENT_BUFFER_LVALUE->yy_n_chars =",
          "1454:    yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;",
          "1456:   if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )",
          "1457:    YY_FATAL_ERROR( \"flex scanner push-back overflow\" );",
          "1462:  yyg->yytext_ptr = yy_bp;",
          "1463:  yyg->yy_hold_char = *yy_cp;",
          "1464:  yyg->yy_c_buf_p = yy_cp;",
          "1465: }",
          "1467: #ifndef YY_NO_INPUT",
          "1468: #ifdef __cplusplus",
          "1469:     static int yyinput (yyscan_t yyscanner)",
          "1470: #else",
          "1471:     static int input  (yyscan_t yyscanner)",
          "1472: #endif",
          "1474: {",
          "1475:  int c;",
          "1476:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1480:  if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )",
          "1486:   if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )",
          "1490:   else",
          "1492:    yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;",
          "1493:    ++yyg->yy_c_buf_p;",
          "1495:    switch ( yy_get_next_buffer( yyscanner ) )",
          "1496:     {",
          "1497:     case EOB_ACT_LAST_MATCH:",
          "1509:      yyrestart(yyin ,yyscanner);",
          "1513:     case EOB_ACT_END_OF_FILE:",
          "1514:      {",
          "1515:      if ( yywrap(yyscanner ) )",
          "1516:       return EOF;",
          "1518:      if ( ! yyg->yy_did_buffer_switch_on_eof )",
          "1519:       YY_NEW_FILE;",
          "1520: #ifdef __cplusplus",
          "1521:      return yyinput(yyscanner);",
          "1522: #else",
          "1523:      return input(yyscanner);",
          "1524: #endif",
          "1525:      }",
          "1527:     case EOB_ACT_CONTINUE_SCAN:",
          "1528:      yyg->yy_c_buf_p = yyg->yytext_ptr + offset;",
          "1529:      break;",
          "1530:     }",
          "1536:  yyg->yy_hold_char = *++yyg->yy_c_buf_p;",
          "1538:  return c;",
          "1547:     void yyrestart  (FILE * input_file , yyscan_t yyscanner)",
          "1548: {",
          "1549:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1551:  if ( ! YY_CURRENT_BUFFER ){",
          "1552:         yyensure_buffer_stack (yyscanner);",
          "1553:   YY_CURRENT_BUFFER_LVALUE =",
          "1554:             yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);",
          "1557:  yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);",
          "1558:  yy_load_buffer_state(yyscanner );",
          "1559: }",
          "1565:     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)",
          "1566: {",
          "1567:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1574:  yyensure_buffer_stack (yyscanner);",
          "1575:  if ( YY_CURRENT_BUFFER == new_buffer )",
          "1576:   return;",
          "1578:  if ( YY_CURRENT_BUFFER )",
          "1579:   {",
          "1582:   YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;",
          "1583:   YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;",
          "1586:  YY_CURRENT_BUFFER_LVALUE = new_buffer;",
          "1587:  yy_load_buffer_state(yyscanner );",
          "1594:  yyg->yy_did_buffer_switch_on_eof = 1;",
          "1595: }",
          "1597: static void yy_load_buffer_state  (yyscan_t yyscanner)",
          "1598: {",
          "1599:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1600:  yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;",
          "1601:  yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;",
          "1602:  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;",
          "1603:  yyg->yy_hold_char = *yyg->yy_c_buf_p;",
          "1604: }",
          "1612:     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)",
          "1613: {",
          "1614:  YY_BUFFER_STATE b;",
          "1616:  b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );",
          "1617:  if ( ! b )",
          "1618:   YY_FATAL_ERROR( \"out of dynamic memory in yy_create_buffer()\" );",
          "1620:  b->yy_buf_size = size;",
          "1625:  b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );",
          "1626:  if ( ! b->yy_ch_buf )",
          "1627:   YY_FATAL_ERROR( \"out of dynamic memory in yy_create_buffer()\" );",
          "1629:  b->yy_is_our_buffer = 1;",
          "1631:  yy_init_buffer(b,file ,yyscanner);",
          "1633:  return b;",
          "1634: }",
          "1640:     void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)",
          "1641: {",
          "1642:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1644:  if ( ! b )",
          "1645:   return;",
          "1648:   YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;",
          "1650:  if ( b->yy_is_our_buffer )",
          "1651:   yyfree((void *) b->yy_ch_buf ,yyscanner );",
          "1653:  yyfree((void *) b ,yyscanner );",
          "1654: }",
          "1660:     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)",
          "1662: {",
          "1663:  int oerrno = errno;",
          "1664:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1666:  yy_flush_buffer(b ,yyscanner);",
          "1668:  b->yy_input_file = file;",
          "1669:  b->yy_fill_buffer = 1;",
          "1675:     if (b != YY_CURRENT_BUFFER){",
          "1676:         b->yy_bs_lineno = 1;",
          "1677:         b->yy_bs_column = 0;",
          "1678:     }",
          "1680:         b->yy_is_interactive = 0;",
          "1682:  errno = oerrno;",
          "1683: }",
          "1689:     void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)",
          "1690: {",
          "1691:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1692:  if ( ! b )",
          "1693:   return;",
          "1695:  b->yy_n_chars = 0;",
          "1701:  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;",
          "1702:  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;",
          "1704:  b->yy_buf_pos = &b->yy_ch_buf[0];",
          "1706:  b->yy_at_bol = 1;",
          "1707:  b->yy_buffer_status = YY_BUFFER_NEW;",
          "1709:  if ( b == YY_CURRENT_BUFFER )",
          "1710:   yy_load_buffer_state(yyscanner );",
          "1719: void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)",
          "1720: {",
          "1721:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1722:  if (new_buffer == NULL)",
          "1723:   return;",
          "1725:  yyensure_buffer_stack(yyscanner);",
          "1728:  if ( YY_CURRENT_BUFFER )",
          "1732:   YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;",
          "1733:   YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;",
          "1737:  if (YY_CURRENT_BUFFER)",
          "1738:   yyg->yy_buffer_stack_top++;",
          "1739:  YY_CURRENT_BUFFER_LVALUE = new_buffer;",
          "1742:  yy_load_buffer_state(yyscanner );",
          "1743:  yyg->yy_did_buffer_switch_on_eof = 1;",
          "1744: }",
          "1750: void yypop_buffer_state (yyscan_t yyscanner)",
          "1751: {",
          "1752:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1753:  if (!YY_CURRENT_BUFFER)",
          "1754:   return;",
          "1756:  yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);",
          "1757:  YY_CURRENT_BUFFER_LVALUE = NULL;",
          "1758:  if (yyg->yy_buffer_stack_top > 0)",
          "1759:   --yyg->yy_buffer_stack_top;",
          "1761:  if (YY_CURRENT_BUFFER) {",
          "1762:   yy_load_buffer_state(yyscanner );",
          "1763:   yyg->yy_did_buffer_switch_on_eof = 1;",
          "1764:  }",
          "1765: }",
          "1770: static void yyensure_buffer_stack (yyscan_t yyscanner)",
          "1771: {",
          "1772:  yy_size_t num_to_alloc;",
          "1773:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1775:  if (!yyg->yy_buffer_stack) {",
          "1781:   num_to_alloc = 1;",
          "1782:   yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc",
          "1783:         (num_to_alloc * sizeof(struct yy_buffer_state*)",
          "1784:         , yyscanner);",
          "1785:   if ( ! yyg->yy_buffer_stack )",
          "1786:    YY_FATAL_ERROR( \"out of dynamic memory in yyensure_buffer_stack()\" );",
          "1788:   memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));",
          "1790:   yyg->yy_buffer_stack_max = num_to_alloc;",
          "1791:   yyg->yy_buffer_stack_top = 0;",
          "1792:   return;",
          "1793:  }",
          "1795:  if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){",
          "1798:   int grow_size = 8 /* arbitrary grow size */;",
          "1800:   num_to_alloc = yyg->yy_buffer_stack_max + grow_size;",
          "1801:   yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc",
          "1802:         (yyg->yy_buffer_stack,",
          "1803:         num_to_alloc * sizeof(struct yy_buffer_state*)",
          "1804:         , yyscanner);",
          "1805:   if ( ! yyg->yy_buffer_stack )",
          "1806:    YY_FATAL_ERROR( \"out of dynamic memory in yyensure_buffer_stack()\" );",
          "1809:   memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));",
          "1810:   yyg->yy_buffer_stack_max = num_to_alloc;",
          "1811:  }",
          "1812: }",
          "1820: YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)",
          "1821: {",
          "1822:  YY_BUFFER_STATE b;",
          "1824:  if ( size < 2 ||",
          "1825:       base[size-2] != YY_END_OF_BUFFER_CHAR ||",
          "1826:       base[size-1] != YY_END_OF_BUFFER_CHAR )",
          "1828:   return 0;",
          "1830:  b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );",
          "1831:  if ( ! b )",
          "1832:   YY_FATAL_ERROR( \"out of dynamic memory in yy_scan_buffer()\" );",
          "1835:  b->yy_buf_pos = b->yy_ch_buf = base;",
          "1836:  b->yy_is_our_buffer = 0;",
          "1837:  b->yy_input_file = 0;",
          "1838:  b->yy_n_chars = b->yy_buf_size;",
          "1839:  b->yy_is_interactive = 0;",
          "1840:  b->yy_at_bol = 1;",
          "1841:  b->yy_fill_buffer = 0;",
          "1842:  b->yy_buffer_status = YY_BUFFER_NEW;",
          "1844:  yy_switch_to_buffer(b ,yyscanner );",
          "1846:  return b;",
          "1847: }",
          "1857: YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)",
          "1858: {",
          "1860:  return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);",
          "1861: }",
          "1870: YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)",
          "1871: {",
          "1872:  YY_BUFFER_STATE b;",
          "1873:  char *buf;",
          "1874:  yy_size_t n;",
          "1875:  yy_size_t i;",
          "1878:  n = _yybytes_len + 2;",
          "1879:  buf = (char *) yyalloc(n ,yyscanner );",
          "1880:  if ( ! buf )",
          "1881:   YY_FATAL_ERROR( \"out of dynamic memory in yy_scan_bytes()\" );",
          "1883:  for ( i = 0; i < _yybytes_len; ++i )",
          "1884:   buf[i] = yybytes[i];",
          "1886:  buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;",
          "1888:  b = yy_scan_buffer(buf,n ,yyscanner);",
          "1889:  if ( ! b )",
          "1890:   YY_FATAL_ERROR( \"bad buffer in yy_scan_bytes()\" );",
          "1895:  b->yy_is_our_buffer = 1;",
          "1897:  return b;",
          "1898: }",
          "1900: #ifndef YY_EXIT_FAILURE",
          "1901: #define YY_EXIT_FAILURE 2",
          "1902: #endif",
          "1904: static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)",
          "1905: {",
          "1906:      (void) fprintf( stderr, \"%s\\n\", msg );",
          "1907:  exit( YY_EXIT_FAILURE );",
          "1908: }",
          "1912: #undef yyless",
          "1913: #define yyless(n) \\",
          "1914:  do \\",
          "1915:   { \\",
          "1917:         int yyless_macro_arg = (n); \\",
          "1918:         YY_LESS_LINENO(yyless_macro_arg);\\",
          "1919:   yytext[yyleng] = yyg->yy_hold_char; \\",
          "1920:   yyg->yy_c_buf_p = yytext + yyless_macro_arg; \\",
          "1921:   yyg->yy_hold_char = *yyg->yy_c_buf_p; \\",
          "1923:   yyleng = yyless_macro_arg; \\",
          "1924:   } \\",
          "1925:  while ( 0 )",
          "1932: YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)",
          "1933: {",
          "1934:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1935:     return yyextra;",
          "1936: }",
          "1941: int yyget_lineno  (yyscan_t yyscanner)",
          "1942: {",
          "1943:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1945:         if (! YY_CURRENT_BUFFER)",
          "1946:             return 0;",
          "1948:     return yylineno;",
          "1949: }",
          "1954: int yyget_column  (yyscan_t yyscanner)",
          "1955: {",
          "1956:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1958:         if (! YY_CURRENT_BUFFER)",
          "1959:             return 0;",
          "1961:     return yycolumn;",
          "1962: }",
          "1967: FILE *yyget_in  (yyscan_t yyscanner)",
          "1968: {",
          "1969:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1970:     return yyin;",
          "1971: }",
          "1976: FILE *yyget_out  (yyscan_t yyscanner)",
          "1977: {",
          "1978:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1979:     return yyout;",
          "1980: }",
          "1985: yy_size_t yyget_leng  (yyscan_t yyscanner)",
          "1986: {",
          "1987:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1988:     return yyleng;",
          "1989: }",
          "1995: char *yyget_text  (yyscan_t yyscanner)",
          "1996: {",
          "1997:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1998:     return yytext;",
          "1999: }",
          "2005: void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)",
          "2006: {",
          "2007:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2008:     yyextra = user_defined ;",
          "2009: }",
          "2015: void yyset_lineno (int  line_number , yyscan_t yyscanner)",
          "2016: {",
          "2017:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2020:         if (! YY_CURRENT_BUFFER )",
          "2021:            YY_FATAL_ERROR( \"yyset_lineno called with no buffer\" );",
          "2023:     yylineno = line_number;",
          "2024: }",
          "2030: void yyset_column (int  column_no , yyscan_t yyscanner)",
          "2031: {",
          "2032:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2035:         if (! YY_CURRENT_BUFFER )",
          "2036:            YY_FATAL_ERROR( \"yyset_column called with no buffer\" );",
          "2038:     yycolumn = column_no;",
          "2039: }",
          "2047: void yyset_in (FILE *  in_str , yyscan_t yyscanner)",
          "2048: {",
          "2049:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2050:     yyin = in_str ;",
          "2051: }",
          "2053: void yyset_out (FILE *  out_str , yyscan_t yyscanner)",
          "2054: {",
          "2055:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2056:     yyout = out_str ;",
          "2057: }",
          "2059: int yyget_debug  (yyscan_t yyscanner)",
          "2060: {",
          "2061:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2062:     return yy_flex_debug;",
          "2063: }",
          "2065: void yyset_debug (int  bdebug , yyscan_t yyscanner)",
          "2066: {",
          "2067:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2068:     yy_flex_debug = bdebug ;",
          "2069: }",
          "2073: YYSTYPE * yyget_lval  (yyscan_t yyscanner)",
          "2074: {",
          "2075:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2076:     return yylval;",
          "2077: }",
          "2079: void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)",
          "2080: {",
          "2081:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2082:     yylval = yylval_param;",
          "2083: }",
          "2092: int yylex_init(yyscan_t* ptr_yy_globals)",
          "2094: {",
          "2095:     if (ptr_yy_globals == NULL){",
          "2096:         errno = EINVAL;",
          "2097:         return 1;",
          "2098:     }",
          "2102:     if (*ptr_yy_globals == NULL){",
          "2103:         errno = ENOMEM;",
          "2104:         return 1;",
          "2105:     }",
          "2108:     memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));",
          "2110:     return yy_init_globals ( *ptr_yy_globals );",
          "2111: }",
          "2121: int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )",
          "2123: {",
          "2124:     struct yyguts_t dummy_yyguts;",
          "2126:     yyset_extra (yy_user_defined, &dummy_yyguts);",
          "2128:     if (ptr_yy_globals == NULL){",
          "2129:         errno = EINVAL;",
          "2130:         return 1;",
          "2131:     }",
          "2135:     if (*ptr_yy_globals == NULL){",
          "2136:         errno = ENOMEM;",
          "2137:         return 1;",
          "2138:     }",
          "2142:     memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));",
          "2144:     yyset_extra (yy_user_defined, *ptr_yy_globals);",
          "2146:     return yy_init_globals ( *ptr_yy_globals );",
          "2147: }",
          "2149: static int yy_init_globals (yyscan_t yyscanner)",
          "2150: {",
          "2151:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2156:     yyg->yy_buffer_stack = 0;",
          "2157:     yyg->yy_buffer_stack_top = 0;",
          "2158:     yyg->yy_buffer_stack_max = 0;",
          "2159:     yyg->yy_c_buf_p = (char *) 0;",
          "2160:     yyg->yy_init = 0;",
          "2161:     yyg->yy_start = 0;",
          "2163:     yyg->yy_start_stack_ptr = 0;",
          "2164:     yyg->yy_start_stack_depth = 0;",
          "2165:     yyg->yy_start_stack =  NULL;",
          "2167:     yyg->yy_state_buf = 0;",
          "2168:     yyg->yy_state_ptr = 0;",
          "2169:     yyg->yy_full_match = 0;",
          "2170:     yyg->yy_lp = 0;",
          "2173: #ifdef YY_STDINIT",
          "2174:     yyin = stdin;",
          "2175:     yyout = stdout;",
          "2176: #else",
          "2177:     yyin = (FILE *) 0;",
          "2178:     yyout = (FILE *) 0;",
          "2179: #endif",
          "2184:     return 0;",
          "2188: int yylex_destroy  (yyscan_t yyscanner)",
          "2189: {",
          "2190:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2193:  while(YY_CURRENT_BUFFER){",
          "2194:   yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );",
          "2195:   YY_CURRENT_BUFFER_LVALUE = NULL;",
          "2196:   yypop_buffer_state(yyscanner);",
          "2200:  yyfree(yyg->yy_buffer_stack ,yyscanner);",
          "2201:  yyg->yy_buffer_stack = NULL;",
          "2204:         yyfree(yyg->yy_start_stack ,yyscanner );",
          "2205:         yyg->yy_start_stack = NULL;",
          "2207:     yyfree ( yyg->yy_state_buf , yyscanner);",
          "2208:     yyg->yy_state_buf  = NULL;",
          "2212:     yy_init_globals( yyscanner);",
          "2215:     yyfree ( yyscanner , yyscanner );",
          "2216:     yyscanner = NULL;",
          "2217:     return 0;",
          "2224: #ifndef yytext_ptr",
          "2225: static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)",
          "2226: {",
          "2227:  register int i;",
          "2228:  for ( i = 0; i < n; ++i )",
          "2229:   s1[i] = s2[i];",
          "2230: }",
          "2231: #endif",
          "2233: #ifdef YY_NEED_STRLEN",
          "2234: static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)",
          "2235: {",
          "2236:  register int n;",
          "2237:  for ( n = 0; s[n]; ++n )",
          "2238:   ;",
          "2240:  return n;",
          "2241: }",
          "2242: #endif",
          "2244: void *yyalloc (yy_size_t  size , yyscan_t yyscanner)",
          "2245: {",
          "2246:  return (void *) malloc( size );",
          "2247: }",
          "2249: void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)",
          "2250: {",
          "2258:  return (void *) realloc( (char *) ptr, size );",
          "2259: }",
          "2261: void yyfree (void * ptr , yyscan_t yyscanner)",
          "2262: {",
          "2266: #define YYTABLES_NAME \"yytables\"",
          "2268: #line 131 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "",
          "[Added Lines]",
          "2: #line 1 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "12: #define LEX(v) (PHPDBG_G(lexer).v)",
          "14: #define YYCTYPE unsigned char",
          "15: #define YYSETCONDITION(x) LEX(state) = x;",
          "16: #define YYGETCONDITION() LEX(state)",
          "17: #define YYCURSOR LEX(cursor)",
          "18: #define YYMARKER LEX(marker)",
          "19: #define yyleng LEX(len)",
          "20: #define yytext ((char*) LEX(text))",
          "21: #undef YYDEBUG",
          "22: #define YYDEBUG(a, b)",
          "23: #define YYFILL(n)",
          "25: #define NORMAL 0",
          "27: #define INITIAL 2",
          "29: ZEND_DECLARE_MODULE_GLOBALS(phpdbg);",
          "31: void phpdbg_init_lexer (phpdbg_param_t *stack, char *input TSRMLS_DC) {",
          "32:  PHPDBG_G(parser_stack) = stack;",
          "34:  YYSETCONDITION(INITIAL);",
          "36:  LEX(text) = YYCURSOR = (unsigned char *) input;",
          "37:  LEX(len) = strlen(input);",
          "38: }",
          "40: int phpdbg_lex (phpdbg_param_t* yylval) {",
          "43: restart:",
          "44:  LEX(text) = YYCURSOR;",
          "47: #line 48 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "49:  YYCTYPE yych;",
          "50:  unsigned int yyaccept = 0;",
          "51:  if (YYGETCONDITION() < 1) {",
          "52:   goto yyc_NORMAL;",
          "53:  } else {",
          "54:   if (YYGETCONDITION() < 2) {",
          "55:    goto yyc_RAW;",
          "56:   } else {",
          "57:    goto yyc_INITIAL;",
          "58:   }",
          "59:  }",
          "61: yyc_INITIAL:",
          "62:  {",
          "63:   static const unsigned char yybm[] = {",
          "64:      0,   0,   0,   0,   0,   0,   0,   0,",
          "65:      0, 128, 128,   0,   0, 128,   0,   0,",
          "66:      0,   0,   0,   0,   0,   0,   0,   0,",
          "67:      0,   0,   0,   0,   0,   0,   0,   0,",
          "68:    128,   0,   0,   0,   0,   0,   0,   0,",
          "69:      0,   0,   0,   0,   0,   0,   0,   0,",
          "70:      0,   0,   0,   0,   0,   0,   0,   0,",
          "71:      0,   0,   0,   0,   0,   0,   0,   0,",
          "72:      0,   0,   0,   0,   0,   0,   0,   0,",
          "73:      0,   0,   0,   0,   0,   0,   0,   0,",
          "74:      0,   0,   0,   0,   0,   0,   0,   0,",
          "75:      0,   0,   0,   0,   0,   0,   0,   0,",
          "76:      0,   0,   0,   0,   0,   0,   0,   0,",
          "77:      0,   0,   0,   0,   0,   0,   0,   0,",
          "78:      0,   0,   0,   0,   0,   0,   0,   0,",
          "79:      0,   0,   0,   0,   0,   0,   0,   0,",
          "80:      0,   0,   0,   0,   0,   0,   0,   0,",
          "81:      0,   0,   0,   0,   0,   0,   0,   0,",
          "82:      0,   0,   0,   0,   0,   0,   0,   0,",
          "83:      0,   0,   0,   0,   0,   0,   0,   0,",
          "84:      0,   0,   0,   0,   0,   0,   0,   0,",
          "85:      0,   0,   0,   0,   0,   0,   0,   0,",
          "86:      0,   0,   0,   0,   0,   0,   0,   0,",
          "87:      0,   0,   0,   0,   0,   0,   0,   0,",
          "88:      0,   0,   0,   0,   0,   0,   0,   0,",
          "89:      0,   0,   0,   0,   0,   0,   0,   0,",
          "90:      0,   0,   0,   0,   0,   0,   0,   0,",
          "91:      0,   0,   0,   0,   0,   0,   0,   0,",
          "92:      0,   0,   0,   0,   0,   0,   0,   0,",
          "93:      0,   0,   0,   0,   0,   0,   0,   0,",
          "94:      0,   0,   0,   0,   0,   0,   0,   0,",
          "95:      0,   0,   0,   0,   0,   0,   0,   0,",
          "96:   };",
          "98:   YYDEBUG(0, *YYCURSOR);",
          "99:   YYFILL(3);",
          "100:   yych = *YYCURSOR;",
          "101:   if (yych <= 0x1F) {",
          "102:    if (yych <= '\\n') {",
          "103:     if (yych <= 0x08) goto yy10;",
          "104:     if (yych >= '\\n') goto yy4;",
          "105:    } else {",
          "106:     if (yych != '\\r') goto yy10;",
          "107:    }",
          "108:   } else {",
          "109:    if (yych <= 'e') {",
          "110:     if (yych <= ' ') goto yy2;",
          "111:     if (yych <= 'd') goto yy10;",
          "112:     goto yy6;",
          "113:    } else {",
          "114:     if (yych <= 'q') goto yy10;",
          "115:     if (yych <= 'r') goto yy8;",
          "116:     if (yych <= 's') goto yy7;",
          "117:     goto yy10;",
          "118:    }",
          "119:   }",
          "120: yy2:",
          "121:   YYDEBUG(2, *YYCURSOR);",
          "122:   ++YYCURSOR;",
          "123:   if (yybm[0+(yych = *YYCURSOR)] & 128) {",
          "124:    goto yy18;",
          "125:   }",
          "126: yy3:",
          "127:   YYDEBUG(3, *YYCURSOR);",
          "128:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "129: #line 161 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "131:  YYSETCONDITION(NORMAL);",
          "133:  YYCURSOR = LEX(text);",
          "134:  goto restart;",
          "135: }",
          "136: #line 137 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "137: yy4:",
          "138:   YYDEBUG(4, *YYCURSOR);",
          "139:   ++YYCURSOR;",
          "140:   if (yybm[0+(yych = *YYCURSOR)] & 128) {",
          "141:    goto yy18;",
          "143:   YYDEBUG(5, *YYCURSOR);",
          "144:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "145: #line 68 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "146:   {",
          "147:  return 0;",
          "148: }",
          "149: #line 150 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "150: yy6:",
          "151:   YYDEBUG(6, *YYCURSOR);",
          "152:   yych = *++YYCURSOR;",
          "153:   if (yych == 'v') goto yy16;",
          "154:   goto yy3;",
          "155: yy7:",
          "156:   YYDEBUG(7, *YYCURSOR);",
          "157:   yych = *++YYCURSOR;",
          "158:   if (yych == 'h') goto yy14;",
          "159:   goto yy3;",
          "160: yy8:",
          "161:   YYDEBUG(8, *YYCURSOR);",
          "162:   yyaccept = 0;",
          "163:   yych = *(YYMARKER = ++YYCURSOR);",
          "164:   if (yych == 'u') goto yy11;",
          "165: yy9:",
          "166:   YYDEBUG(9, *YYCURSOR);",
          "167:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "168: #line 155 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "169:   {",
          "170:  YYSETCONDITION(RAW);",
          "171:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "172:  return T_RUN;",
          "173: }",
          "174: #line 175 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "175: yy10:",
          "176:   YYDEBUG(10, *YYCURSOR);",
          "177:   yych = *++YYCURSOR;",
          "178:   goto yy3;",
          "179: yy11:",
          "180:   YYDEBUG(11, *YYCURSOR);",
          "181:   yych = *++YYCURSOR;",
          "182:   if (yych == 'n') goto yy13;",
          "183:   YYDEBUG(12, *YYCURSOR);",
          "184:   YYCURSOR = YYMARKER;",
          "185:   goto yy9;",
          "186: yy13:",
          "187:   YYDEBUG(13, *YYCURSOR);",
          "188:   yych = *++YYCURSOR;",
          "189:   goto yy9;",
          "190: yy14:",
          "191:   YYDEBUG(14, *YYCURSOR);",
          "192:   ++YYCURSOR;",
          "193:   YYDEBUG(15, *YYCURSOR);",
          "194:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "195: #line 150 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "196:   {",
          "197:  YYSETCONDITION(RAW);",
          "198:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "199:  return T_SHELL;",
          "200: }",
          "201: #line 202 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "202: yy16:",
          "203:   YYDEBUG(16, *YYCURSOR);",
          "204:   ++YYCURSOR;",
          "205:   YYDEBUG(17, *YYCURSOR);",
          "206:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "207: #line 145 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "208:   {",
          "209:  YYSETCONDITION(RAW);",
          "210:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "211:  return T_EVAL;",
          "212: }",
          "213: #line 214 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "214: yy18:",
          "215:   YYDEBUG(18, *YYCURSOR);",
          "216:   ++YYCURSOR;",
          "217:   YYFILL(1);",
          "218:   yych = *YYCURSOR;",
          "219:   YYDEBUG(19, *YYCURSOR);",
          "220:   if (yybm[0+yych] & 128) {",
          "221:    goto yy18;",
          "223:   YYDEBUG(20, *YYCURSOR);",
          "224:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "225: #line 139 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "229:  goto restart;",
          "230: }",
          "231: #line 232 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "232:  }",
          "234: yyc_NORMAL:",
          "235:  {",
          "236:   static const unsigned char yybm[] = {",
          "237:     16,  16,  16,  16,  16,  16,  16,  16,",
          "238:     16,   8,   8,  16,  16,   8,  16,  16,",
          "239:     16,  16,  16,  16,  16,  16,  16,  16,",
          "240:     16,  16,  16,  16,  16,  16,  16,  16,",
          "241:      8,  16,  16,   0,  16,  16,  16,  16,",
          "242:     16,  16,  16,  16,  16,  16,  48,  16,",
          "243:    176, 176, 176, 176, 176, 176, 176, 176,",
          "244:    176, 176,   0,  16,  16,  16,  16,  16,",
          "245:     16, 208, 208, 208, 208, 208, 208,  80,",
          "246:     80,  80,  80,  80,  80,  80,  80,  80,",
          "247:     80,  80,  80,  80,  80,  80,  80,  80,",
          "248:     80,  80,  80,  16,  16,  16,  16,  16,",
          "249:     16, 208, 208, 208, 208, 208, 208,  80,",
          "250:     80,  80,  80,  80,  80,  80,  80,  80,",
          "251:     80,  80,  80,  80,  80,  80,  80,  80,",
          "252:     80,  80,  80,  16,  16,  16,  16,  16,",
          "253:     16,  16,  16,  16,  16,  16,  16,  16,",
          "254:     16,  16,  16,  16,  16,  16,  16,  16,",
          "255:     16,  16,  16,  16,  16,  16,  16,  16,",
          "256:     16,  16,  16,  16,  16,  16,  16,  16,",
          "257:     16,  16,  16,  16,  16,  16,  16,  16,",
          "258:     16,  16,  16,  16,  16,  16,  16,  16,",
          "259:     16,  16,  16,  16,  16,  16,  16,  16,",
          "260:     16,  16,  16,  16,  16,  16,  16,  16,",
          "261:     16,  16,  16,  16,  16,  16,  16,  16,",
          "262:     16,  16,  16,  16,  16,  16,  16,  16,",
          "263:     16,  16,  16,  16,  16,  16,  16,  16,",
          "264:     16,  16,  16,  16,  16,  16,  16,  16,",
          "265:     16,  16,  16,  16,  16,  16,  16,  16,",
          "266:     16,  16,  16,  16,  16,  16,  16,  16,",
          "267:     16,  16,  16,  16,  16,  16,  16,  16,",
          "268:     16,  16,  16,  16,  16,  16,  16,  16,",
          "269:   };",
          "270:   YYDEBUG(21, *YYCURSOR);",
          "271:   YYFILL(11);",
          "272:   yych = *YYCURSOR;",
          "273:   if (yych <= 'Y') {",
          "274:    if (yych <= '\"') {",
          "275:     if (yych <= '\\f') {",
          "276:      if (yych <= 0x08) goto yy30;",
          "277:      if (yych <= '\\t') goto yy23;",
          "278:      if (yych <= '\\n') goto yy26;",
          "279:      goto yy30;",
          "280:     } else {",
          "281:      if (yych <= '\\r') goto yy23;",
          "282:      if (yych != ' ') goto yy30;",
          "283:     }",
          "284:    } else {",
          "285:     if (yych <= '/') {",
          "286:      if (yych <= '#') goto yy45;",
          "287:      if (yych == '.') goto yy32;",
          "288:      goto yy30;",
          "289:     } else {",
          "290:      if (yych <= '0') goto yy35;",
          "291:      if (yych <= '9') goto yy32;",
          "292:      if (yych <= ':') goto yy47;",
          "293:      goto yy30;",
          "296:   } else {",
          "297:    if (yych <= 'm') {",
          "298:     if (yych <= 'e') {",
          "299:      if (yych <= 'Z') goto yy36;",
          "300:      if (yych <= 'c') goto yy30;",
          "301:      if (yych <= 'd') goto yy37;",
          "302:      goto yy38;",
          "303:     } else {",
          "304:      if (yych <= 'f') goto yy39;",
          "305:      if (yych == 'i') goto yy28;",
          "306:      goto yy30;",
          "307:     }",
          "308:    } else {",
          "309:     if (yych <= 't') {",
          "310:      if (yych <= 'n') goto yy40;",
          "311:      if (yych <= 'o') goto yy41;",
          "312:      if (yych <= 's') goto yy30;",
          "313:      goto yy42;",
          "314:     } else {",
          "315:      if (yych <= 'x') goto yy30;",
          "316:      if (yych <= 'y') goto yy43;",
          "317:      if (yych <= 'z') goto yy44;",
          "318:      goto yy30;",
          "321:   }",
          "322: yy23:",
          "323:   YYDEBUG(23, *YYCURSOR);",
          "324:   ++YYCURSOR;",
          "325:   YYFILL(1);",
          "326:   yych = *YYCURSOR;",
          "327:   YYDEBUG(24, *YYCURSOR);",
          "328:   if (yybm[0+yych] & 8) {",
          "329:    goto yy23;",
          "330:   }",
          "331:   YYDEBUG(25, *YYCURSOR);",
          "332:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "333: #line 139 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "334:   {",
          "337:  goto restart;",
          "338: }",
          "339: #line 340 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "340: yy26:",
          "341:   YYDEBUG(26, *YYCURSOR);",
          "342:   ++YYCURSOR;",
          "343:   if (yybm[0+(yych = *YYCURSOR)] & 8) {",
          "344:    goto yy23;",
          "345:   }",
          "346:   YYDEBUG(27, *YYCURSOR);",
          "347:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "348: #line 68 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "349:   {",
          "350:  return 0;",
          "351: }",
          "352: #line 353 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "353: yy28:",
          "354:   YYDEBUG(28, *YYCURSOR);",
          "355:   yyaccept = 0;",
          "356:   yych = *(YYMARKER = ++YYCURSOR);",
          "357:   if (yych == 'f') goto yy92;",
          "358:   goto yy31;",
          "359: yy29:",
          "360:   YYDEBUG(29, *YYCURSOR);",
          "361:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "362: #line 125 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "363:   {",
          "367:  return T_ID;",
          "368: }",
          "369: #line 370 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "370: yy30:",
          "371:   YYDEBUG(30, *YYCURSOR);",
          "372:   yyaccept = 0;",
          "373:   YYMARKER = ++YYCURSOR;",
          "374:   YYFILL(3);",
          "375:   yych = *YYCURSOR;",
          "376: yy31:",
          "377:   YYDEBUG(31, *YYCURSOR);",
          "378:   if (yybm[0+yych] & 16) {",
          "379:    goto yy30;",
          "380:   }",
          "381:   if (yych <= '9') goto yy29;",
          "382:   goto yy52;",
          "383: yy32:",
          "384:   YYDEBUG(32, *YYCURSOR);",
          "385:   yyaccept = 1;",
          "386:   YYMARKER = ++YYCURSOR;",
          "387:   YYFILL(3);",
          "388:   yych = *YYCURSOR;",
          "389:   YYDEBUG(33, *YYCURSOR);",
          "390:   if (yybm[0+yych] & 32) {",
          "391:    goto yy32;",
          "392:   }",
          "393:   if (yych <= 0x1F) {",
          "394:    if (yych <= '\\n') {",
          "395:     if (yych <= 0x08) goto yy30;",
          "396:    } else {",
          "397:     if (yych != '\\r') goto yy30;",
          "398:    }",
          "399:   } else {",
          "400:    if (yych <= '#') {",
          "401:     if (yych <= ' ') goto yy34;",
          "402:     if (yych <= '\"') goto yy30;",
          "403:    } else {",
          "404:     if (yych == ':') goto yy52;",
          "405:     goto yy30;",
          "406:    }",
          "407:   }",
          "408: yy34:",
          "409:   YYDEBUG(34, *YYCURSOR);",
          "410:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "411: #line 106 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "413:  phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "414:  yylval->num = atoi(yytext);",
          "415:  return T_DIGITS;",
          "416: }",
          "417: #line 418 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "418: yy35:",
          "419:   YYDEBUG(35, *YYCURSOR);",
          "420:   yyaccept = 1;",
          "421:   yych = *(YYMARKER = ++YYCURSOR);",
          "422:   if (yybm[0+yych] & 32) {",
          "423:    goto yy32;",
          "424:   }",
          "425:   if (yych <= 0x1F) {",
          "426:    if (yych <= '\\n') {",
          "427:     if (yych <= 0x08) goto yy31;",
          "428:     goto yy34;",
          "429:    } else {",
          "430:     if (yych == '\\r') goto yy34;",
          "431:     goto yy31;",
          "433:   } else {",
          "434:    if (yych <= '#') {",
          "435:     if (yych <= ' ') goto yy34;",
          "436:     if (yych <= '\"') goto yy31;",
          "437:     goto yy34;",
          "438:    } else {",
          "439:     if (yych == 'x') goto yy88;",
          "440:     goto yy31;",
          "443: yy36:",
          "444:   YYDEBUG(36, *YYCURSOR);",
          "445:   yyaccept = 0;",
          "446:   yych = *(YYMARKER = ++YYCURSOR);",
          "447:   if (yych == 'E') goto yy85;",
          "448:   goto yy31;",
          "449: yy37:",
          "450:   YYDEBUG(37, *YYCURSOR);",
          "451:   yyaccept = 0;",
          "452:   yych = *(YYMARKER = ++YYCURSOR);",
          "453:   if (yych == 'i') goto yy79;",
          "454:   goto yy31;",
          "455: yy38:",
          "456:   YYDEBUG(38, *YYCURSOR);",
          "457:   yyaccept = 0;",
          "458:   yych = *(YYMARKER = ++YYCURSOR);",
          "459:   if (yych == 'n') goto yy74;",
          "460:   goto yy31;",
          "461: yy39:",
          "462:   YYDEBUG(39, *YYCURSOR);",
          "463:   yyaccept = 0;",
          "464:   yych = *(YYMARKER = ++YYCURSOR);",
          "465:   if (yych == 'a') goto yy71;",
          "466:   goto yy31;",
          "467: yy40:",
          "468:   YYDEBUG(40, *YYCURSOR);",
          "469:   yyaccept = 0;",
          "470:   yych = *(YYMARKER = ++YYCURSOR);",
          "471:   if (yych == 'o') goto yy69;",
          "472:   goto yy31;",
          "473: yy41:",
          "474:   YYDEBUG(41, *YYCURSOR);",
          "475:   yyaccept = 0;",
          "476:   yych = *(YYMARKER = ++YYCURSOR);",
          "477:   if (yych == 'f') goto yy68;",
          "478:   if (yych == 'n') goto yy64;",
          "479:   goto yy31;",
          "480: yy42:",
          "481:   YYDEBUG(42, *YYCURSOR);",
          "482:   yyaccept = 0;",
          "483:   yych = *(YYMARKER = ++YYCURSOR);",
          "484:   if (yych == 'r') goto yy66;",
          "485:   goto yy31;",
          "486: yy43:",
          "487:   YYDEBUG(43, *YYCURSOR);",
          "488:   yyaccept = 0;",
          "489:   yych = *(YYMARKER = ++YYCURSOR);",
          "490:   if (yych == 'e') goto yy63;",
          "491:   goto yy31;",
          "492: yy44:",
          "493:   YYDEBUG(44, *YYCURSOR);",
          "494:   yyaccept = 0;",
          "495:   yych = *(YYMARKER = ++YYCURSOR);",
          "496:   if (yych == 'e') goto yy51;",
          "497:   goto yy31;",
          "498: yy45:",
          "499:   YYDEBUG(45, *YYCURSOR);",
          "500:   ++YYCURSOR;",
          "501:   YYDEBUG(46, *YYCURSOR);",
          "502:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "503: #line 84 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "504:   {",
          "505:  return T_POUND;",
          "506: }",
          "507: #line 508 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "508: yy47:",
          "509:   YYDEBUG(47, *YYCURSOR);",
          "510:   ++YYCURSOR;",
          "511:   if ((yych = *YYCURSOR) == ':') goto yy49;",
          "512:   YYDEBUG(48, *YYCURSOR);",
          "513:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "514: #line 90 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "515:   {",
          "516:  return T_COLON;",
          "517: }",
          "518: #line 519 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "519: yy49:",
          "520:   YYDEBUG(49, *YYCURSOR);",
          "521:   ++YYCURSOR;",
          "522:   YYDEBUG(50, *YYCURSOR);",
          "523:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "524: #line 87 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "525:   {",
          "526:  return T_DCOLON;",
          "527: }",
          "528: #line 529 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "529: yy51:",
          "530:   YYDEBUG(51, *YYCURSOR);",
          "531:   yyaccept = 0;",
          "532:   yych = *(YYMARKER = ++YYCURSOR);",
          "533:   if (yych == 'n') goto yy57;",
          "534:   goto yy31;",
          "535: yy52:",
          "536:   YYDEBUG(52, *YYCURSOR);",
          "537:   yych = *++YYCURSOR;",
          "538:   if (yych == '/') goto yy54;",
          "539: yy53:",
          "540:   YYDEBUG(53, *YYCURSOR);",
          "541:   YYCURSOR = YYMARKER;",
          "542:   if (yyaccept <= 3) {",
          "543:    if (yyaccept <= 1) {",
          "544:     if (yyaccept <= 0) {",
          "545:      goto yy29;",
          "546:     } else {",
          "547:      goto yy34;",
          "548:     }",
          "549:    } else {",
          "550:     if (yyaccept <= 2) {",
          "551:      goto yy62;",
          "552:     } else {",
          "553:      goto yy65;",
          "554:     }",
          "556:   } else {",
          "557:    if (yyaccept <= 5) {",
          "558:     if (yyaccept <= 4) {",
          "559:      goto yy70;",
          "560:     } else {",
          "561:      goto yy91;",
          "562:     }",
          "563:    } else {",
          "564:     goto yy93;",
          "567: yy54:",
          "568:   YYDEBUG(54, *YYCURSOR);",
          "569:   yych = *++YYCURSOR;",
          "570:   if (yych != '/') goto yy53;",
          "571:   YYDEBUG(55, *YYCURSOR);",
          "572:   ++YYCURSOR;",
          "573:   YYDEBUG(56, *YYCURSOR);",
          "574:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "575: #line 78 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "577:  phpdbg_init_param(yylval, STR_PARAM);",
          "578:  yylval->str = zend_strndup(yytext, yyleng);",
          "579:  yylval->len = yyleng;",
          "580:  return T_PROTO;",
          "581: }",
          "582: #line 583 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "583: yy57:",
          "584:   YYDEBUG(57, *YYCURSOR);",
          "585:   yyaccept = 0;",
          "586:   yych = *(YYMARKER = ++YYCURSOR);",
          "587:   if (yych != 'd') goto yy31;",
          "588:   YYDEBUG(58, *YYCURSOR);",
          "589:   yyaccept = 0;",
          "590:   yych = *(YYMARKER = ++YYCURSOR);",
          "591:   if (yych != '_') goto yy31;",
          "592: yy59:",
          "593:   YYDEBUG(59, *YYCURSOR);",
          "594:   yyaccept = 0;",
          "595:   yych = *(YYMARKER = ++YYCURSOR);",
          "596:   if (yybm[0+yych] & 64) {",
          "597:    goto yy60;",
          "598:   }",
          "599:   goto yy31;",
          "600: yy60:",
          "601:   YYDEBUG(60, *YYCURSOR);",
          "602:   yyaccept = 2;",
          "603:   YYMARKER = ++YYCURSOR;",
          "604:   YYFILL(3);",
          "605:   yych = *YYCURSOR;",
          "606:   YYDEBUG(61, *YYCURSOR);",
          "607:   if (yybm[0+yych] & 64) {",
          "608:    goto yy60;",
          "609:   }",
          "610:   if (yych <= 0x1F) {",
          "611:    if (yych <= '\\n') {",
          "612:     if (yych <= 0x08) goto yy30;",
          "613:    } else {",
          "614:     if (yych != '\\r') goto yy30;",
          "615:    }",
          "616:   } else {",
          "617:    if (yych <= '#') {",
          "618:     if (yych <= ' ') goto yy62;",
          "619:     if (yych <= '\"') goto yy30;",
          "620:    } else {",
          "621:     if (yych == ':') goto yy52;",
          "622:     goto yy30;",
          "625: yy62:",
          "626:   YYDEBUG(62, *YYCURSOR);",
          "627:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "628: #line 118 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "630:  phpdbg_init_param(yylval, OP_PARAM);",
          "631:  yylval->str = zend_strndup(yytext, yyleng);",
          "632:  yylval->len = yyleng;",
          "633:  return T_OPCODE;",
          "634: }",
          "635: #line 636 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "636: yy63:",
          "637:   YYDEBUG(63, *YYCURSOR);",
          "638:   yyaccept = 0;",
          "639:   yych = *(YYMARKER = ++YYCURSOR);",
          "640:   if (yych != 's') goto yy31;",
          "641: yy64:",
          "642:   YYDEBUG(64, *YYCURSOR);",
          "643:   yyaccept = 3;",
          "644:   yych = *(YYMARKER = ++YYCURSOR);",
          "645:   if (yych <= '\\r') {",
          "646:    if (yych <= 0x08) goto yy31;",
          "647:    if (yych <= '\\n') goto yy65;",
          "648:    if (yych <= '\\f') goto yy31;",
          "649:   } else {",
          "650:    if (yych <= ' ') {",
          "651:     if (yych <= 0x1F) goto yy31;",
          "652:    } else {",
          "653:     if (yych != '#') goto yy31;",
          "656: yy65:",
          "657:   YYDEBUG(65, *YYCURSOR);",
          "658:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "659: #line 94 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "661:  phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "662:  yylval->num = 1;",
          "663:  return T_TRUTHY;",
          "664: }",
          "665: #line 666 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "666: yy66:",
          "667:   YYDEBUG(66, *YYCURSOR);",
          "668:   yyaccept = 0;",
          "669:   yych = *(YYMARKER = ++YYCURSOR);",
          "670:   if (yych != 'u') goto yy31;",
          "671:   YYDEBUG(67, *YYCURSOR);",
          "672:   yyaccept = 0;",
          "673:   yych = *(YYMARKER = ++YYCURSOR);",
          "674:   if (yych == 'e') goto yy64;",
          "675:   goto yy31;",
          "676: yy68:",
          "677:   YYDEBUG(68, *YYCURSOR);",
          "678:   yyaccept = 0;",
          "679:   yych = *(YYMARKER = ++YYCURSOR);",
          "680:   if (yych != 'f') goto yy31;",
          "681: yy69:",
          "682:   YYDEBUG(69, *YYCURSOR);",
          "683:   yyaccept = 4;",
          "684:   yych = *(YYMARKER = ++YYCURSOR);",
          "685:   if (yych <= '\\r') {",
          "686:    if (yych <= 0x08) goto yy31;",
          "687:    if (yych <= '\\n') goto yy70;",
          "688:    if (yych <= '\\f') goto yy31;",
          "689:   } else {",
          "690:    if (yych <= ' ') {",
          "691:     if (yych <= 0x1F) goto yy31;",
          "692:    } else {",
          "693:     if (yych != '#') goto yy31;",
          "696: yy70:",
          "697:   YYDEBUG(70, *YYCURSOR);",
          "698:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "699: #line 100 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "701:  phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "702:  yylval->num = 0;",
          "703:  return T_FALSY;",
          "704: }",
          "705: #line 706 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "706: yy71:",
          "707:   YYDEBUG(71, *YYCURSOR);",
          "708:   yyaccept = 0;",
          "709:   yych = *(YYMARKER = ++YYCURSOR);",
          "710:   if (yych != 'l') goto yy31;",
          "711:   YYDEBUG(72, *YYCURSOR);",
          "712:   yyaccept = 0;",
          "713:   yych = *(YYMARKER = ++YYCURSOR);",
          "714:   if (yych != 's') goto yy31;",
          "715:   YYDEBUG(73, *YYCURSOR);",
          "716:   yyaccept = 0;",
          "717:   yych = *(YYMARKER = ++YYCURSOR);",
          "718:   if (yych == 'e') goto yy69;",
          "719:   goto yy31;",
          "720: yy74:",
          "721:   YYDEBUG(74, *YYCURSOR);",
          "722:   yyaccept = 0;",
          "723:   yych = *(YYMARKER = ++YYCURSOR);",
          "724:   if (yych != 'a') goto yy31;",
          "725:   YYDEBUG(75, *YYCURSOR);",
          "726:   yyaccept = 0;",
          "727:   yych = *(YYMARKER = ++YYCURSOR);",
          "728:   if (yych != 'b') goto yy31;",
          "729:   YYDEBUG(76, *YYCURSOR);",
          "730:   yyaccept = 0;",
          "731:   yych = *(YYMARKER = ++YYCURSOR);",
          "732:   if (yych != 'l') goto yy31;",
          "733:   YYDEBUG(77, *YYCURSOR);",
          "734:   yyaccept = 0;",
          "735:   yych = *(YYMARKER = ++YYCURSOR);",
          "736:   if (yych != 'e') goto yy31;",
          "737:   YYDEBUG(78, *YYCURSOR);",
          "738:   yyaccept = 0;",
          "739:   yych = *(YYMARKER = ++YYCURSOR);",
          "740:   if (yych == 'd') goto yy64;",
          "741:   goto yy31;",
          "742: yy79:",
          "743:   YYDEBUG(79, *YYCURSOR);",
          "744:   yyaccept = 0;",
          "745:   yych = *(YYMARKER = ++YYCURSOR);",
          "746:   if (yych != 's') goto yy31;",
          "747:   YYDEBUG(80, *YYCURSOR);",
          "748:   yyaccept = 0;",
          "749:   yych = *(YYMARKER = ++YYCURSOR);",
          "750:   if (yych != 'a') goto yy31;",
          "751:   YYDEBUG(81, *YYCURSOR);",
          "752:   yyaccept = 0;",
          "753:   yych = *(YYMARKER = ++YYCURSOR);",
          "754:   if (yych != 'b') goto yy31;",
          "755:   YYDEBUG(82, *YYCURSOR);",
          "756:   yyaccept = 0;",
          "757:   yych = *(YYMARKER = ++YYCURSOR);",
          "758:   if (yych != 'l') goto yy31;",
          "759:   YYDEBUG(83, *YYCURSOR);",
          "760:   yyaccept = 0;",
          "761:   yych = *(YYMARKER = ++YYCURSOR);",
          "762:   if (yych != 'e') goto yy31;",
          "763:   YYDEBUG(84, *YYCURSOR);",
          "764:   yyaccept = 0;",
          "765:   yych = *(YYMARKER = ++YYCURSOR);",
          "766:   if (yych == 'd') goto yy69;",
          "767:   goto yy31;",
          "768: yy85:",
          "769:   YYDEBUG(85, *YYCURSOR);",
          "770:   yyaccept = 0;",
          "771:   yych = *(YYMARKER = ++YYCURSOR);",
          "772:   if (yych != 'N') goto yy31;",
          "773:   YYDEBUG(86, *YYCURSOR);",
          "774:   yyaccept = 0;",
          "775:   yych = *(YYMARKER = ++YYCURSOR);",
          "776:   if (yych != 'D') goto yy31;",
          "777:   YYDEBUG(87, *YYCURSOR);",
          "778:   yyaccept = 0;",
          "779:   yych = *(YYMARKER = ++YYCURSOR);",
          "780:   if (yych == '_') goto yy59;",
          "781:   goto yy31;",
          "782: yy88:",
          "783:   YYDEBUG(88, *YYCURSOR);",
          "784:   yyaccept = 0;",
          "785:   yych = *(YYMARKER = ++YYCURSOR);",
          "786:   if (yybm[0+yych] & 128) {",
          "787:    goto yy89;",
          "789:   goto yy31;",
          "790: yy89:",
          "791:   YYDEBUG(89, *YYCURSOR);",
          "792:   yyaccept = 5;",
          "793:   YYMARKER = ++YYCURSOR;",
          "794:   YYFILL(3);",
          "795:   yych = *YYCURSOR;",
          "796:   YYDEBUG(90, *YYCURSOR);",
          "797:   if (yybm[0+yych] & 128) {",
          "798:    goto yy89;",
          "800:   if (yych <= 0x1F) {",
          "801:    if (yych <= '\\n') {",
          "802:     if (yych <= 0x08) goto yy30;",
          "803:    } else {",
          "804:     if (yych != '\\r') goto yy30;",
          "805:    }",
          "806:   } else {",
          "807:    if (yych <= '#') {",
          "808:     if (yych <= ' ') goto yy91;",
          "809:     if (yych <= '\"') goto yy30;",
          "810:    } else {",
          "811:     if (yych == ':') goto yy52;",
          "812:     goto yy30;",
          "813:    }",
          "814:   }",
          "815: yy91:",
          "816:   YYDEBUG(91, *YYCURSOR);",
          "817:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "818: #line 112 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "820:  phpdbg_init_param(yylval, ADDR_PARAM);",
          "821:  yylval->addr = strtoul(yytext, 0, 16);",
          "822:  return T_ADDR;",
          "823: }",
          "824: #line 825 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "825: yy92:",
          "826:   YYDEBUG(92, *YYCURSOR);",
          "827:   yyaccept = 6;",
          "828:   yych = *(YYMARKER = ++YYCURSOR);",
          "829:   if (yych <= '\\r') {",
          "830:    if (yych <= 0x08) goto yy31;",
          "831:    if (yych <= '\\n') goto yy93;",
          "832:    if (yych <= '\\f') goto yy31;",
          "833:   } else {",
          "834:    if (yych <= ' ') {",
          "835:     if (yych <= 0x1F) goto yy31;",
          "836:    } else {",
          "837:     if (yych != '#') goto yy31;",
          "840: yy93:",
          "841:   YYDEBUG(93, *YYCURSOR);",
          "842:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "843: #line 72 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "844:   {",
          "845:  YYSETCONDITION(RAW);",
          "846:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "847:  return T_IF;",
          "849: #line 850 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "852: yyc_RAW:",
          "853:  {",
          "854:   static const unsigned char yybm[] = {",
          "855:     64,  64,  64,  64,  64,  64,  64,  64,",
          "856:     64, 224, 128,  64,  64, 224,  64,  64,",
          "857:     64,  64,  64,  64,  64,  64,  64,  64,",
          "858:     64,  64,  64,  64,  64,  64,  64,  64,",
          "859:    224,  64,  64,  64,  64,  64,  64,  64,",
          "860:     64,  64,  64,  64,  64,  64,  64,  64,",
          "861:     64,  64,  64,  64,  64,  64,  64,  64,",
          "862:     64,  64,  64,  64,  64,  64,  64,  64,",
          "863:     64,  64,  64,  64,  64,  64,  64,  64,",
          "864:     64,  64,  64,  64,  64,  64,  64,  64,",
          "865:     64,  64,  64,  64,  64,  64,  64,  64,",
          "866:     64,  64,  64,  64,  64,  64,  64,  64,",
          "867:     64,  64,  64,  64,  64,  64,  64,  64,",
          "868:     64,  64,  64,  64,  64,  64,  64,  64,",
          "869:     64,  64,  64,  64,  64,  64,  64,  64,",
          "870:     64,  64,  64,  64,  64,  64,  64,  64,",
          "871:     64,  64,  64,  64,  64,  64,  64,  64,",
          "872:     64,  64,  64,  64,  64,  64,  64,  64,",
          "873:     64,  64,  64,  64,  64,  64,  64,  64,",
          "874:     64,  64,  64,  64,  64,  64,  64,  64,",
          "875:     64,  64,  64,  64,  64,  64,  64,  64,",
          "876:     64,  64,  64,  64,  64,  64,  64,  64,",
          "877:     64,  64,  64,  64,  64,  64,  64,  64,",
          "878:     64,  64,  64,  64,  64,  64,  64,  64,",
          "879:     64,  64,  64,  64,  64,  64,  64,  64,",
          "880:     64,  64,  64,  64,  64,  64,  64,  64,",
          "881:     64,  64,  64,  64,  64,  64,  64,  64,",
          "882:     64,  64,  64,  64,  64,  64,  64,  64,",
          "883:     64,  64,  64,  64,  64,  64,  64,  64,",
          "884:     64,  64,  64,  64,  64,  64,  64,  64,",
          "885:     64,  64,  64,  64,  64,  64,  64,  64,",
          "886:     64,  64,  64,  64,  64,  64,  64,  64,",
          "887:   };",
          "888:   YYDEBUG(94, *YYCURSOR);",
          "889:   YYFILL(2);",
          "890:   yych = *YYCURSOR;",
          "891:   if (yybm[0+yych] & 32) {",
          "892:    goto yy96;",
          "894:   if (yych == '\\n') goto yy99;",
          "895:   goto yy101;",
          "896: yy96:",
          "897:   YYDEBUG(96, *YYCURSOR);",
          "898:   ++YYCURSOR;",
          "899:   YYFILL(1);",
          "900:   yych = *YYCURSOR;",
          "901:   YYDEBUG(97, *YYCURSOR);",
          "902:   if (yybm[0+yych] & 32) {",
          "903:    goto yy96;",
          "904:   }",
          "905:   if (yych == '\\n') goto yy103;",
          "906:   goto yy101;",
          "907: yy98:",
          "908:   YYDEBUG(98, *YYCURSOR);",
          "909:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "910: #line 132 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "911:   {",
          "912:  phpdbg_init_param(yylval, STR_PARAM);",
          "913:  yylval->str = zend_strndup(yytext, yyleng);",
          "914:  yylval->len = yyleng;",
          "915:  return T_INPUT;",
          "917: #line 918 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "918: yy99:",
          "919:   YYDEBUG(99, *YYCURSOR);",
          "920:   ++YYCURSOR;",
          "921:   if (yybm[0+(yych = *YYCURSOR)] & 128) {",
          "922:    goto yy103;",
          "923:   }",
          "924:   YYDEBUG(100, *YYCURSOR);",
          "925:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "926: #line 68 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "928:  return 0;",
          "929: }",
          "930: #line 931 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "931: yy101:",
          "932:   YYDEBUG(101, *YYCURSOR);",
          "933:   ++YYCURSOR;",
          "934:   YYFILL(1);",
          "935:   yych = *YYCURSOR;",
          "936:   YYDEBUG(102, *YYCURSOR);",
          "937:   if (yybm[0+yych] & 64) {",
          "938:    goto yy101;",
          "940:   goto yy98;",
          "941: yy103:",
          "942:   YYDEBUG(103, *YYCURSOR);",
          "943:   ++YYCURSOR;",
          "944:   YYFILL(1);",
          "945:   yych = *YYCURSOR;",
          "946:   YYDEBUG(104, *YYCURSOR);",
          "947:   if (yybm[0+yych] & 128) {",
          "948:    goto yy103;",
          "949:   }",
          "950:   YYDEBUG(105, *YYCURSOR);",
          "951:   yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "952: #line 139 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "953:   {",
          "956:  goto restart;",
          "958: #line 959 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.c\"",
          "961: #line 168 \"/home/pi/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "",
          "---------------"
        ],
        "phpdbg_lexer.h||phpdbg_lexer.h": [
          "File: phpdbg_lexer.h -> phpdbg_lexer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: #endif",
          "",
          "[Removed Lines]",
          "1: #ifndef yyHEADER_H",
          "2: #define yyHEADER_H 1",
          "3: #define yyIN_HEADER 1",
          "5: #line 6 \"sapi/phpdbg/phpdbg_lexer.h\"",
          "7: #line 8 \"sapi/phpdbg/phpdbg_lexer.h\"",
          "9: #define  YY_INT_ALIGNED short int",
          "13: #define FLEX_SCANNER",
          "14: #define YY_FLEX_MAJOR_VERSION 2",
          "15: #define YY_FLEX_MINOR_VERSION 5",
          "16: #define YY_FLEX_SUBMINOR_VERSION 37",
          "17: #if YY_FLEX_SUBMINOR_VERSION > 0",
          "18: #define FLEX_BETA",
          "19: #endif",
          "24: #include <stdio.h>",
          "25: #include <string.h>",
          "26: #include <errno.h>",
          "27: #include <stdlib.h>",
          "33: #ifndef FLEXINT_H",
          "34: #define FLEXINT_H",
          "38: #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L",
          "43: #ifndef __STDC_LIMIT_MACROS",
          "44: #define __STDC_LIMIT_MACROS 1",
          "45: #endif",
          "47: #include <inttypes.h>",
          "48: typedef int8_t flex_int8_t;",
          "49: typedef uint8_t flex_uint8_t;",
          "50: typedef int16_t flex_int16_t;",
          "51: typedef uint16_t flex_uint16_t;",
          "52: typedef int32_t flex_int32_t;",
          "53: typedef uint32_t flex_uint32_t;",
          "54: #else",
          "55: typedef signed char flex_int8_t;",
          "56: typedef short int flex_int16_t;",
          "57: typedef int flex_int32_t;",
          "58: typedef unsigned char flex_uint8_t;",
          "59: typedef unsigned short int flex_uint16_t;",
          "60: typedef unsigned int flex_uint32_t;",
          "63: #ifndef INT8_MIN",
          "64: #define INT8_MIN               (-128)",
          "65: #endif",
          "66: #ifndef INT16_MIN",
          "67: #define INT16_MIN              (-32767-1)",
          "68: #endif",
          "69: #ifndef INT32_MIN",
          "70: #define INT32_MIN              (-2147483647-1)",
          "71: #endif",
          "72: #ifndef INT8_MAX",
          "73: #define INT8_MAX               (127)",
          "74: #endif",
          "75: #ifndef INT16_MAX",
          "76: #define INT16_MAX              (32767)",
          "77: #endif",
          "78: #ifndef INT32_MAX",
          "79: #define INT32_MAX              (2147483647)",
          "80: #endif",
          "81: #ifndef UINT8_MAX",
          "82: #define UINT8_MAX              (255U)",
          "83: #endif",
          "84: #ifndef UINT16_MAX",
          "85: #define UINT16_MAX             (65535U)",
          "86: #endif",
          "87: #ifndef UINT32_MAX",
          "88: #define UINT32_MAX             (4294967295U)",
          "89: #endif",
          "95: #ifdef __cplusplus",
          "98: #define YY_USE_CONST",
          "103: #if defined (__STDC__)",
          "105: #define YY_USE_CONST",
          "110: #ifdef YY_USE_CONST",
          "111: #define yyconst const",
          "112: #else",
          "113: #define yyconst",
          "114: #endif",
          "117: #ifndef YY_TYPEDEF_YY_SCANNER_T",
          "118: #define YY_TYPEDEF_YY_SCANNER_T",
          "119: typedef void* yyscan_t;",
          "120: #endif",
          "124: #define yyin yyg->yyin_r",
          "125: #define yyout yyg->yyout_r",
          "126: #define yyextra yyg->yyextra_r",
          "127: #define yyleng yyg->yyleng_r",
          "128: #define yytext yyg->yytext_r",
          "129: #define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)",
          "130: #define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)",
          "131: #define yy_flex_debug yyg->yy_flex_debug_r",
          "134: #ifndef YY_BUF_SIZE",
          "135: #define YY_BUF_SIZE 16384",
          "136: #endif",
          "138: #ifndef YY_TYPEDEF_YY_BUFFER_STATE",
          "139: #define YY_TYPEDEF_YY_BUFFER_STATE",
          "140: typedef struct yy_buffer_state *YY_BUFFER_STATE;",
          "141: #endif",
          "143: #ifndef YY_TYPEDEF_YY_SIZE_T",
          "144: #define YY_TYPEDEF_YY_SIZE_T",
          "145: typedef size_t yy_size_t;",
          "148: #ifndef YY_STRUCT_YY_BUFFER_STATE",
          "149: #define YY_STRUCT_YY_BUFFER_STATE",
          "150: struct yy_buffer_state",
          "151:  {",
          "152:  FILE *yy_input_file;",
          "160:  yy_size_t yy_buf_size;",
          "165:  yy_size_t yy_n_chars;",
          "171:  int yy_is_our_buffer;",
          "178:  int yy_is_interactive;",
          "184:  int yy_at_bol;",
          "192:  int yy_fill_buffer;",
          "194:  int yy_buffer_status;",
          "196:  };",
          "199: void yyrestart (FILE *input_file ,yyscan_t yyscanner );",
          "200: void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );",
          "201: YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );",
          "202: void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );",
          "203: void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );",
          "204: void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );",
          "205: void yypop_buffer_state (yyscan_t yyscanner );",
          "207: YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );",
          "208: YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );",
          "209: YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );",
          "211: void *yyalloc (yy_size_t ,yyscan_t yyscanner );",
          "212: void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );",
          "213: void yyfree (void * ,yyscan_t yyscanner );",
          "217: #define yywrap(yyscanner) 1",
          "218: #define YY_SKIP_YYWRAP",
          "220: #define yytext_ptr yytext_r",
          "222: #ifdef YY_HEADER_EXPORT_START_CONDITIONS",
          "223: #define INITIAL 0",
          "224: #define RAW 1",
          "225: #define NORMAL 2",
          "227: #endif",
          "229: #ifndef YY_NO_UNISTD_H",
          "234: #include <unistd.h>",
          "235: #endif",
          "237: #ifndef YY_EXTRA_TYPE",
          "238: #define YY_EXTRA_TYPE void *",
          "239: #endif",
          "241: int yylex_init (yyscan_t* scanner);",
          "243: int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);",
          "248: int yylex_destroy (yyscan_t yyscanner );",
          "250: int yyget_debug (yyscan_t yyscanner );",
          "252: void yyset_debug (int debug_flag ,yyscan_t yyscanner );",
          "254: YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );",
          "256: void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );",
          "258: FILE *yyget_in (yyscan_t yyscanner );",
          "260: void yyset_in  (FILE * in_str ,yyscan_t yyscanner );",
          "262: FILE *yyget_out (yyscan_t yyscanner );",
          "264: void yyset_out  (FILE * out_str ,yyscan_t yyscanner );",
          "266: yy_size_t yyget_leng (yyscan_t yyscanner );",
          "268: char *yyget_text (yyscan_t yyscanner );",
          "270: int yyget_lineno (yyscan_t yyscanner );",
          "272: void yyset_lineno (int line_number ,yyscan_t yyscanner );",
          "274: int yyget_column  (yyscan_t yyscanner );",
          "276: void yyset_column (int column_no ,yyscan_t yyscanner );",
          "278: YYSTYPE * yyget_lval (yyscan_t yyscanner );",
          "280: void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );",
          "286: #ifndef YY_SKIP_YYWRAP",
          "287: #ifdef __cplusplus",
          "288: extern \"C\" int yywrap (yyscan_t yyscanner );",
          "289: #else",
          "290: extern int yywrap (yyscan_t yyscanner );",
          "291: #endif",
          "292: #endif",
          "294: #ifndef yytext_ptr",
          "295: static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);",
          "296: #endif",
          "298: #ifdef YY_NEED_STRLEN",
          "299: static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);",
          "300: #endif",
          "302: #ifndef YY_NO_INPUT",
          "304: #endif",
          "307: #ifndef YY_READ_BUF_SIZE",
          "308: #define YY_READ_BUF_SIZE 8192",
          "309: #endif",
          "312: #ifndef YY_START_STACK_INCR",
          "313: #define YY_START_STACK_INCR 25",
          "314: #endif",
          "319: #ifndef YY_DECL",
          "320: #define YY_DECL_IS_OURS 1",
          "322: extern int yylex \\",
          "323:                (YYSTYPE * yylval_param ,yyscan_t yyscanner);",
          "325: #define YY_DECL int yylex \\",
          "326:                (YYSTYPE * yylval_param , yyscan_t yyscanner)",
          "331: #undef YY_NEW_FILE",
          "332: #undef YY_FLUSH_BUFFER",
          "333: #undef yy_set_bol",
          "334: #undef yy_new_buffer",
          "335: #undef yy_set_interactive",
          "336: #undef YY_DO_BEFORE_ACTION",
          "338: #ifdef YY_DECL_IS_OURS",
          "339: #undef YY_DECL_IS_OURS",
          "340: #undef YY_DECL",
          "341: #endif",
          "343: #line 131 \"/usr/src/php-src/sapi/phpdbg/phpdbg_lexer.l\"",
          "346: #line 347 \"sapi/phpdbg/phpdbg_lexer.h\"",
          "347: #undef yyIN_HEADER",
          "",
          "[Added Lines]",
          "2:    +----------------------------------------------------------------------+",
          "3:    | PHP Version 5                                                        |",
          "4:    +----------------------------------------------------------------------+",
          "5:    | Copyright (c) 1997-2014 The PHP Group                                |",
          "6:    +----------------------------------------------------------------------+",
          "7:    | This source file is subject to version 3.01 of the PHP license,      |",
          "8:    | that is bundled with this package in the file LICENSE, and is        |",
          "9:    | available through the world-wide-web at the following url:           |",
          "10:    | http://www.php.net/license/3_01.txt                                  |",
          "11:    | If you did not receive a copy of the PHP license and are unable to   |",
          "12:    | obtain it through the world-wide-web, please send a note to          |",
          "13:    | license@php.net so we can mail you a copy immediately.               |",
          "14:    +----------------------------------------------------------------------+",
          "15:    | Authors: Felipe Pena <felipe@php.net>                                |",
          "16:    | Authors: Joe Watkins <joe.watkins@live.co.uk>                        |",
          "17:    | Authors: Bob Weinand <bwoebi@php.net>                                |",
          "18:    +----------------------------------------------------------------------+",
          "21: #ifndef PHPDBG_LEXER_H",
          "22: #define PHPDBG_LEXER_H",
          "24: #include \"phpdbg_cmd.h\"",
          "26: typedef struct {",
          "27:         unsigned int len;",
          "28:         unsigned char *text;",
          "29:         unsigned char *cursor;",
          "30:         unsigned char *marker;",
          "31:         int state;",
          "32: } phpdbg_lexer_data;",
          "34: #define yyparse phpdbg_parse",
          "35: #define yylex phpdbg_lex",
          "37: void phpdbg_init_lexer (phpdbg_param_t *stack, char *input TSRMLS_DC);",
          "39: int phpdbg_lex (phpdbg_param_t* yylval);",
          "",
          "---------------"
        ],
        "phpdbg_lexer.l||phpdbg_lexer.l": [
          "File: phpdbg_lexer.l -> phpdbg_lexer.l",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"phpdbg.h\"",
          "8: #include \"phpdbg_cmd.h\"",
          "11: #include \"phpdbg_parser.h\"",
          "123:  phpdbg_init_param(yylval, STR_PARAM);",
          "124:  yylval->str = zend_strndup(yytext, yyleng);",
          "125:  yylval->len = yyleng;",
          "127:  return T_INPUT;",
          "128: }",
          "",
          "[Removed Lines]",
          "1: %{",
          "9: #define YYSTYPE phpdbg_param_t",
          "13: %}",
          "15: %s RAW",
          "16: %s NORMAL",
          "18: %option outfile=\"sapi/phpdbg/phpdbg_lexer.c\" header-file=\"sapi/phpdbg/phpdbg_lexer.h\"",
          "19: %option warn nodefault",
          "21: %option reentrant noyywrap never-interactive nounistd",
          "22: %option bison-bridge",
          "24: T_TRUE    \"true\"",
          "25: T_YES    \"yes\"",
          "26: T_ON    \"on\"",
          "27: T_ENABLED   \"enabled\"",
          "28: T_FALSE    \"false\"",
          "29: T_NO    \"no\"",
          "30: T_OFF    \"off\"",
          "31: T_DISABLED   \"disabled\"",
          "32: T_EVAL    \"ev\"",
          "33: T_SHELL    \"sh\"",
          "34: T_IF    \"if\"",
          "35: T_RUN    \"run\"",
          "36: T_RUN_SHORT   \"r\"",
          "38: WS            [ \\r\\n\\t]+",
          "39: DIGITS    [0-9\\.]+",
          "40: ID     [^ \\r\\n\\t:#]+",
          "41: ADDR    0x[a-fA-F0-9]+",
          "42: OPCODE    (ZEND_|zend_)([A-Za-z])+",
          "43: INPUT    [^\\n]+",
          "44: %%",
          "46: <INITIAL>{",
          "47:  {T_EVAL}  {",
          "48:   BEGIN(RAW);",
          "49:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "50:   return T_EVAL;",
          "51:  }",
          "52:  {T_SHELL}  {",
          "53:   BEGIN(RAW);",
          "54:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "55:   return T_SHELL;",
          "56:  }",
          "57:  {T_RUN}|{T_RUN_SHORT} {",
          "58:   BEGIN(RAW);",
          "59:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "60:   return T_RUN;",
          "61:  }",
          "63:  .+ {",
          "64:   BEGIN(NORMAL);",
          "65:   REJECT;",
          "66:  }",
          "67: }",
          "69: <NORMAL>{",
          "70:  {T_IF}   {",
          "71:   BEGIN(RAW);",
          "72:   phpdbg_init_param(yylval, EMPTY_PARAM);",
          "73:   return T_IF;",
          "74:  }",
          "75: }",
          "77: <INITIAL,NORMAL>{",
          "78:  {ID}[:]{1}[//]{2} {",
          "79:   phpdbg_init_param(yylval, STR_PARAM);",
          "80:   yylval->str = zend_strndup(yytext, yyleng);",
          "81:   yylval->len = yyleng;",
          "82:   return T_PROTO;",
          "83:  }",
          "84:  [#]{1}   { return T_POUND;  }",
          "85:  [:]{2}   { return T_DCOLON; }",
          "86:  [:]{1}   { return T_COLON;  }",
          "88:  {T_YES}|{T_ON}|{T_ENABLED}|{T_TRUE}  {",
          "89:   phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "90:   yylval->num = 1;",
          "91:   return T_TRUTHY;",
          "92:  }",
          "93:  {T_NO}|{T_OFF}|{T_DISABLED}|{T_FALSE} {",
          "94:   phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "95:   yylval->num = 0;",
          "96:   return T_FALSY;",
          "97:  }",
          "98:  {DIGITS}         {",
          "99:   phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "100:   yylval->num = atoi(yytext);",
          "101:   return T_DIGITS;",
          "102:  }",
          "103:  {ADDR}  {",
          "104:   phpdbg_init_param(yylval, ADDR_PARAM);",
          "105:   yylval->addr = strtoul(yytext, 0, 16);",
          "106:   return T_ADDR;",
          "107:  }",
          "108:  {OPCODE} {",
          "109:   phpdbg_init_param(yylval, OP_PARAM);",
          "110:   yylval->str = zend_strndup(yytext, yyleng);",
          "111:   yylval->len = yyleng;",
          "112:   return T_OPCODE;",
          "113:  }",
          "114:  {ID}   {",
          "115:   phpdbg_init_param(yylval, STR_PARAM);",
          "116:   yylval->str = zend_strndup(yytext, yyleng);",
          "117:   yylval->len = yyleng;",
          "118:   return T_ID;",
          "119:  }",
          "120: }",
          "122: <RAW>{INPUT}  {",
          "126:  BEGIN(INITIAL);",
          "130: {WS}          { /* ignore whitespace */ }",
          "131: %%",
          "",
          "[Added Lines]",
          "10: #define LEX(v) (PHPDBG_G(lexer).v)",
          "12: #define YYCTYPE unsigned char",
          "13: #define YYSETCONDITION(x) LEX(state) = x;",
          "14: #define YYGETCONDITION() LEX(state)",
          "15: #define YYCURSOR LEX(cursor)",
          "16: #define YYMARKER LEX(marker)",
          "17: #define yyleng LEX(len)",
          "18: #define yytext ((char*) LEX(text))",
          "19: #undef YYDEBUG",
          "20: #define YYDEBUG(a, b)",
          "21: #define YYFILL(n)",
          "23: #define NORMAL 0",
          "24: #define RAW 1",
          "25: #define INITIAL 2",
          "27: ZEND_DECLARE_MODULE_GLOBALS(phpdbg);",
          "29: void phpdbg_init_lexer (phpdbg_param_t *stack, char *input TSRMLS_DC) {",
          "30:  PHPDBG_G(parser_stack) = stack;",
          "32:  YYSETCONDITION(INITIAL);",
          "34:  LEX(text) = YYCURSOR = (unsigned char *) input;",
          "35:  LEX(len) = strlen(input);",
          "36: }",
          "38: int phpdbg_lex (phpdbg_param_t* yylval) {",
          "41: restart:",
          "42:  LEX(text) = YYCURSOR;",
          "45: re2c:yyfill:check = 0;",
          "46: T_TRUE      \"true\"",
          "47: T_YES       \"yes\"",
          "48: T_ON        \"on\"",
          "49: T_ENABLED   \"enabled\"",
          "50: T_FALSE     \"false\"",
          "51: T_NO        \"no\"",
          "52: T_OFF       \"off\"",
          "53: T_DISABLED  \"disabled\"",
          "54: T_EVAL      \"ev\"",
          "55: T_SHELL     \"sh\"",
          "56: T_IF        \"if\"",
          "57: T_RUN       \"run\"",
          "58: T_RUN_SHORT \"r\"",
          "59: WS          [ \\r\\n\\t]+",
          "60: DIGITS      [0-9\\.]+",
          "61: ID          [^ \\r\\n\\t:#]+",
          "62: ADDR        [0][x][a-fA-F0-9]+",
          "63: OPCODE      (ZEND_|zend_)([A-Za-z])+",
          "64: INPUT       [^\\n]+",
          "66: <!*> := yyleng = (size_t) YYCURSOR - (size_t) yytext;",
          "68: <*>\"\\n\" {",
          "69:  return 0;",
          "70: }",
          "72: <NORMAL>{T_IF} {",
          "73:  YYSETCONDITION(RAW);",
          "74:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "75:  return T_IF;",
          "76: }",
          "78: <NORMAL>{ID}[:]{1}[//]{2} {",
          "79:  phpdbg_init_param(yylval, STR_PARAM);",
          "80:  yylval->str = zend_strndup(yytext, yyleng);",
          "81:  yylval->len = yyleng;",
          "82:  return T_PROTO;",
          "83: }",
          "84: <NORMAL>[#]{1} {",
          "85:  return T_POUND;",
          "86: }",
          "87: <NORMAL>[:]{2} {",
          "88:  return T_DCOLON;",
          "89: }",
          "90: <NORMAL>[:]{1} {",
          "91:  return T_COLON;",
          "92: }",
          "94: <NORMAL>{T_YES}|{T_ON}|{T_ENABLED}|{T_TRUE} {",
          "95:  phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "96:  yylval->num = 1;",
          "97:  return T_TRUTHY;",
          "98: }",
          "100: <NORMAL>{T_NO}|{T_OFF}|{T_DISABLED}|{T_FALSE} {",
          "101:  phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "102:  yylval->num = 0;",
          "103:  return T_FALSY;",
          "104: }",
          "106: <NORMAL>{DIGITS} {",
          "107:  phpdbg_init_param(yylval, NUMERIC_PARAM);",
          "108:  yylval->num = atoi(yytext);",
          "109:  return T_DIGITS;",
          "110: }",
          "112: <NORMAL>{ADDR} {",
          "113:  phpdbg_init_param(yylval, ADDR_PARAM);",
          "114:  yylval->addr = strtoul(yytext, 0, 16);",
          "115:  return T_ADDR;",
          "116: }",
          "118: <NORMAL>{OPCODE} {",
          "119:  phpdbg_init_param(yylval, OP_PARAM);",
          "120:  yylval->str = zend_strndup(yytext, yyleng);",
          "121:  yylval->len = yyleng;",
          "122:  return T_OPCODE;",
          "123: }",
          "125: <NORMAL>{ID} {",
          "126:  phpdbg_init_param(yylval, STR_PARAM);",
          "127:  yylval->str = zend_strndup(yytext, yyleng);",
          "128:  yylval->len = yyleng;",
          "129:  return T_ID;",
          "130: }",
          "132: <RAW>{INPUT} {",
          "139: <*>{WS} {",
          "142:  goto restart;",
          "143: }",
          "145: <INITIAL>{T_EVAL} {",
          "146:  YYSETCONDITION(RAW);",
          "147:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "148:  return T_EVAL;",
          "149: }",
          "150: <INITIAL>{T_SHELL} {",
          "151:  YYSETCONDITION(RAW);",
          "152:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "153:  return T_SHELL;",
          "154: }",
          "155: <INITIAL>{T_RUN}|{T_RUN_SHORT} {",
          "156:  YYSETCONDITION(RAW);",
          "157:  phpdbg_init_param(yylval, EMPTY_PARAM);",
          "158:  return T_RUN;",
          "159: }",
          "161: <INITIAL>. {",
          "162:  YYSETCONDITION(NORMAL);",
          "164:  YYCURSOR = LEX(text);",
          "165:  goto restart;",
          "166: }",
          "169: }",
          "",
          "---------------"
        ],
        "phpdbg_parser.c||phpdbg_parser.c": [
          "File: phpdbg_parser.c -> phpdbg_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "5:       Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "5:       Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: #define YYBISON 1",
          "50: #define YYSKELETON_NAME \"yacc.c\"",
          "",
          "[Removed Lines]",
          "47: #define YYBISON_VERSION \"2.7\"",
          "",
          "[Added Lines]",
          "47: #define YYBISON_VERSION \"2.5\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59: #define YYPULL 1",
          "",
          "[Removed Lines]",
          "66: #line 2 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "62: #define YYLSP_NEEDED 0",
          "65: #define yyparse         phpdbg_parse",
          "66: #define yylex           phpdbg_lex",
          "67: #define yyerror         phpdbg_error",
          "68: #define yylval          phpdbg_lval",
          "69: #define yychar          phpdbg_char",
          "70: #define yydebug         phpdbg_debug",
          "71: #define yynerrs         phpdbg_nerrs",
          "77: #line 1 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: #include \"phpdbg_parser.h\"",
          "85: #include \"phpdbg_lexer.h\"",
          "87: ZEND_EXTERN_MODULE_GLOBALS(phpdbg);",
          "116: #ifdef YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "89: int yyerror(phpdbg_param_t *stack, yyscan_t scanner, const char *msg) {",
          "90:  TSRMLS_FETCH();",
          "91:     phpdbg_error(\"Parse Error: %s\", msg);",
          "92:     {",
          "93:      const phpdbg_param_t *top = stack;",
          "95:      while (top) {",
          "96:       phpdbg_param_debug(",
          "97:        top, \"--> \");",
          "98:       top = top->next;",
          "99:      }",
          "100:     }",
          "101:     return 0;",
          "102: }",
          "105: #line 106 \"sapi/phpdbg/phpdbg_parser.c\"",
          "107: # ifndef YY_NULL",
          "108: #  if defined __cplusplus && 201103L <= __cplusplus",
          "109: #   define YY_NULL nullptr",
          "110: #  else",
          "111: #   define YY_NULL 0",
          "112: #  endif",
          "113: # endif",
          "",
          "[Added Lines]",
          "98: #undef yyerror",
          "99: static int yyerror(const char *msg);",
          "106: #line 107 \"sapi/phpdbg/phpdbg_parser.c\"",
          "109: #ifndef YYDEBUG",
          "110: # define YYDEBUG 0",
          "111: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120: # define YYERROR_VERBOSE 1",
          "121: #endif",
          "133: #endif",
          "138: #include \"phpdbg.h\"",
          "139: #ifndef YY_TYPEDEF_YY_SCANNER_T",
          "",
          "[Removed Lines]",
          "125: #ifndef YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "126: # define YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "128: #ifndef YYDEBUG",
          "129: # define YYDEBUG 0",
          "130: #endif",
          "131: #if YYDEBUG",
          "132: extern int yydebug;",
          "136: #line 40 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "122: #ifndef YYTOKEN_TABLE",
          "123: # define YYTOKEN_TABLE 0",
          "129: #line 31 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "142: #endif",
          "149: #ifndef YYTOKENTYPE",
          "",
          "[Removed Lines]",
          "146: #line 147 \"sapi/phpdbg/phpdbg_parser.c\"",
          "",
          "[Added Lines]",
          "140: #line 141 \"sapi/phpdbg/phpdbg_parser.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "201: #endif",
          "225: #ifdef short",
          "226: # undef short",
          "",
          "[Removed Lines]",
          "204: #ifdef YYPARSE_PARAM",
          "205: #if defined __STDC__ || defined __cplusplus",
          "206: int yyparse (void *YYPARSE_PARAM);",
          "207: #else",
          "208: int yyparse ();",
          "209: #endif",
          "211: #if defined __STDC__ || defined __cplusplus",
          "212: int yyparse (phpdbg_param_t *stack, yyscan_t scanner);",
          "213: #else",
          "214: int yyparse ();",
          "215: #endif",
          "223: #line 224 \"sapi/phpdbg/phpdbg_parser.c\"",
          "",
          "[Added Lines]",
          "203: #line 204 \"sapi/phpdbg/phpdbg_parser.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "273: # if defined YYENABLE_NLS && YYENABLE_NLS",
          "274: #  if ENABLE_NLS",
          "277: #  endif",
          "278: # endif",
          "279: # ifndef YY_",
          "281: # endif",
          "282: #endif",
          "285: #if ! defined lint || defined __GNUC__",
          "287: #else",
          "289: #endif",
          "292: #ifndef lint",
          "294: #else",
          "295: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "296:      || defined __cplusplus || defined _MSC_VER)",
          "",
          "[Removed Lines]",
          "276: #   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)",
          "280: #  define YY_(Msgid) Msgid",
          "286: # define YYUSE(E) ((void) (E))",
          "293: # define YYID(N) (N)",
          "",
          "[Added Lines]",
          "256: #   define YY_(msgid) dgettext (\"bison-runtime\", msgid)",
          "260: #  define YY_(msgid) msgid",
          "266: # define YYUSE(e) ((void) (e))",
          "273: # define YYID(n) (n)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "418: #endif",
          "420: #if defined YYCOPY_NEEDED && YYCOPY_NEEDED",
          "423: # ifndef YYCOPY",
          "424: #  if defined __GNUC__ && 1 < __GNUC__",
          "427: #  else",
          "435:       while (YYID (0))",
          "436: #  endif",
          "437: # endif",
          "446: #define YYNTOKENS  21",
          "455: #define YYUNDEFTOK  2",
          "",
          "[Removed Lines]",
          "425: #   define YYCOPY(Dst, Src, Count) \\",
          "426:       __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))",
          "428: #   define YYCOPY(Dst, Src, Count)              \\",
          "429:       do                                        \\",
          "430:         {                                       \\",
          "431:           YYSIZE_T yyi;                         \\",
          "432:           for (yyi = 0; yyi < (Count); yyi++)   \\",
          "433:             (Dst)[yyi] = (Src)[yyi];            \\",
          "434:         }                                       \\",
          "441: #define YYFINAL  24",
          "443: #define YYLAST   33",
          "448: #define YYNNTS  4",
          "450: #define YYNRULES  24",
          "452: #define YYNSTATES  37",
          "",
          "[Added Lines]",
          "404: #   define YYCOPY(To, From, Count) \\",
          "405:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))",
          "407: #   define YYCOPY(To, From, Count)  \\",
          "408:       do     \\",
          "409:  {     \\",
          "410:    YYSIZE_T yyi;    \\",
          "411:    for (yyi = 0; yyi < (Count); yyi++) \\",
          "412:      (To)[yyi] = (From)[yyi];  \\",
          "413:  }     \\",
          "420: #define YYFINAL  25",
          "422: #define YYLAST   41",
          "427: #define YYNNTS  5",
          "429: #define YYNRULES  25",
          "431: #define YYNSTATES  38",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "497: static const yytype_uint8 yyprhs[] =",
          "498: {",
          "502: };",
          "505: static const yytype_int8 yyrhs[] =",
          "506: {",
          "515: };",
          "518: static const yytype_uint8 yyrline[] =",
          "519: {",
          "523: };",
          "524: #endif",
          "529: static const char *const yytname[] =",
          "",
          "[Removed Lines]",
          "499:        0,     0,     3,     5,     6,     8,    11,    15,    20,    25,",
          "500:       31,    35,    41,    45,    48,    51,    54,    56,    59,    61,",
          "501:       63,    65,    67,    69,    71",
          "507:       22,     0,    -1,    23,    -1,    -1,    24,    -1,    23,    24,",
          "508:       -1,    18,    10,    14,    -1,    18,    10,    12,    14,    -1,",
          "509:       13,    18,    10,    14,    -1,    13,    18,    10,    12,    14,",
          "510:       -1,    18,    11,    18,    -1,    18,    11,    18,    12,    14,",
          "511:       -1,    18,    12,    14,    -1,     6,    19,    -1,     3,    19,",
          "512:       -1,     5,    19,    -1,     4,    -1,     4,    19,    -1,    17,",
          "513:       -1,    16,    -1,    15,    -1,     7,    -1,     8,    -1,    14,",
          "514:       -1,    18,    -1",
          "520:        0,    76,    76,    77,    81,    82,    86,    91,    96,   107,",
          "521:      118,   123,   129,   135,   140,   145,   150,   154,   159,   160,",
          "522:      161,   162,   163,   164,   165",
          "526: #if YYDEBUG || YYERROR_VERBOSE || 1",
          "",
          "[Added Lines]",
          "478:        0,     0,     3,     5,     7,     8,    10,    13,    17,    22,",
          "479:       27,    33,    37,    43,    47,    49,    51,    53,    55,    57,",
          "480:       59,    61,    64,    67,    70,    72",
          "486:       22,     0,    -1,    23,    -1,    25,    -1,    -1,    24,    -1,",
          "487:       23,    24,    -1,    18,    10,    14,    -1,    18,    10,    12,",
          "488:       14,    -1,    13,    18,    10,    14,    -1,    13,    18,    10,",
          "489:       12,    14,    -1,    18,    11,    18,    -1,    18,    11,    18,",
          "490:       12,    14,    -1,    18,    12,    14,    -1,    17,    -1,    16,",
          "491:       -1,    15,    -1,     7,    -1,     8,    -1,    14,    -1,    18,",
          "492:       -1,     6,    19,    -1,     3,    19,    -1,     5,    19,    -1,",
          "493:        4,    -1,     4,    19,    -1",
          "499:        0,    64,    64,    65,    66,    70,    71,    75,    80,    85,",
          "500:       95,   105,   110,   116,   122,   123,   124,   125,   126,   127,",
          "501:      128,   132,   137,   142,   147,   151",
          "505: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "536:   \"\\\"digits (numbers)\\\"\", \"\\\"literal (string)\\\"\", \"\\\"address\\\"\",",
          "537:   \"\\\"opcode\\\"\", \"\\\"identifier (command or function name)\\\"\",",
          "538:   \"\\\"input (input string or data)\\\"\", \"\\\"input\\\"\", \"$accept\", \"input\",",
          "540: };",
          "541: #endif",
          "",
          "[Removed Lines]",
          "539:   \"parameters\", \"parameter\", YY_NULL",
          "",
          "[Added Lines]",
          "518:   \"parameters\", \"parameter\", \"full_expression\", 0",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "555: static const yytype_uint8 yyr1[] =",
          "556: {",
          "558:       24,    24,    24,    24,    24,    24,    24,    24,    24,    24,",
          "560: };",
          "563: static const yytype_uint8 yyr2[] =",
          "564: {",
          "568: };",
          "",
          "[Removed Lines]",
          "557:        0,    21,    22,    22,    23,    23,    24,    24,    24,    24,",
          "559:       24,    24,    24,    24,    24",
          "565:        0,     2,     1,     0,     1,     2,     3,     4,     4,     5,",
          "566:        3,     5,     3,     2,     2,     2,     1,     2,     1,     1,",
          "567:        1,     1,     1,     1,     1",
          "",
          "[Added Lines]",
          "536:        0,    21,    22,    22,    22,    23,    23,    24,    24,    24,",
          "538:       24,    25,    25,    25,    25,    25",
          "544:        0,     2,     1,     1,     0,     1,     2,     3,     4,     4,",
          "545:        5,     3,     5,     3,     1,     1,     1,     1,     1,     1,",
          "546:        1,     2,     2,     2,     1,     2",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "573: static const yytype_uint8 yydefact[] =",
          "574: {",
          "579: };",
          "582: static const yytype_int8 yydefgoto[] =",
          "583: {",
          "585: };",
          "",
          "[Removed Lines]",
          "575:        3,     0,    16,     0,     0,    21,    22,     0,    23,    20,",
          "576:       19,    18,    24,     0,     2,     4,    14,    17,    15,    13,",
          "577:        0,     0,     0,     0,     1,     5,     0,     0,     6,    10,",
          "578:       12,     0,     8,     7,     0,     9,    11",
          "584:       -1,    13,    14,    15",
          "",
          "[Added Lines]",
          "554:        4,     0,    24,     0,     0,    17,    18,     0,    19,    16,",
          "555:       15,    14,    20,     0,     2,     5,     3,    22,    25,    23,",
          "556:       21,     0,     0,     0,     0,     1,     6,     0,     0,     7,",
          "557:       11,    13,     0,     9,     8,     0,    10,    12",
          "563:       -1,    13,    14,    15,    16",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "589: #define YYPACT_NINF -11",
          "590: static const yytype_int8 yypact[] =",
          "591: {",
          "596: };",
          "599: static const yytype_int8 yypgoto[] =",
          "600: {",
          "602: };",
          "",
          "[Removed Lines]",
          "592:       -3,   -10,     1,     2,     3,   -11,   -11,     6,   -11,   -11,",
          "593:      -11,   -11,    -4,    23,    -3,   -11,   -11,   -11,   -11,   -11,",
          "594:       15,     4,     8,    13,   -11,   -11,     5,    14,   -11,    17,",
          "595:      -11,    16,   -11,   -11,    18,   -11,   -11",
          "601:      -11,   -11,   -11,    19",
          "",
          "[Added Lines]",
          "571:       -3,   -10,    10,    11,    12,   -11,   -11,    14,   -11,   -11,",
          "572:      -11,   -11,    -4,    28,     9,   -11,   -11,   -11,   -11,   -11,",
          "573:      -11,    23,     6,    16,    21,   -11,   -11,     7,    22,   -11,",
          "574:       25,   -11,    24,   -11,   -11,    26,   -11,   -11",
          "580:      -11,   -11,   -11,    27,   -11",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "607: #define YYTABLE_NINF -1",
          "608: static const yytype_uint8 yytable[] =",
          "609: {",
          "614: };",
          "620:   YYID (0)",
          "622: static const yytype_int8 yycheck[] =",
          "623: {",
          "624:        3,     4,     5,     6,     7,     8,    10,    11,    12,    19,",
          "628: };",
          "",
          "[Removed Lines]",
          "610:        1,     2,     3,     4,     5,     6,    21,    22,    23,    16,",
          "611:        7,     8,     9,    10,    11,    12,    27,    31,    28,    32,",
          "612:       17,    18,    19,    24,    20,    26,    29,    30,    33,    34,",
          "613:       35,     0,    36,    25",
          "616: #define yypact_value_is_default(Yystate) \\",
          "617:   (!!((Yystate) == (-11)))",
          "619: #define yytable_value_is_error(Yytable_value) \\",
          "625:       13,    14,    15,    16,    17,    18,    12,    12,    14,    14,",
          "626:       19,    19,    19,     0,    18,    10,    18,    14,    14,    12,",
          "627:       14,    -1,    14,    14",
          "",
          "[Added Lines]",
          "589:        1,     2,     3,     4,     5,     6,    22,    23,    24,    17,",
          "590:        7,     8,     9,    10,    11,    12,     5,     6,    28,    32,",
          "591:       29,    33,     7,     8,     9,    10,    11,    12,    25,    18,",
          "592:       19,    20,    21,    27,    30,    31,    34,    35,    36,     0,",
          "593:       37,    26",
          "596: #define yypact_value_is_default(yystate) \\",
          "597:   ((yystate) == (-11))",
          "599: #define yytable_value_is_error(yytable_value) \\",
          "605:       13,    14,    15,    16,    17,    18,     7,     8,    12,    12,",
          "606:       14,    14,    13,    14,    15,    16,    17,    18,     0,    19,",
          "607:       19,    19,    18,    10,    18,    14,    14,    12,    14,    -1,",
          "608:       14,    14",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "632: static const yytype_uint8 yystos[] =",
          "633: {",
          "634:        0,     3,     4,     5,     6,     7,     8,    13,    14,    15,",
          "638: };",
          "640: #define yyerrok  (yyerrstatus = 0)",
          "",
          "[Removed Lines]",
          "635:       16,    17,    18,    22,    23,    24,    19,    19,    19,    19,",
          "636:       18,    10,    11,    12,     0,    24,    10,    12,    14,    18,",
          "637:       14,    12,    14,    14,    12,    14,    14",
          "",
          "[Added Lines]",
          "616:       16,    17,    18,    22,    23,    24,    25,    19,    19,    19,",
          "617:       19,    18,    10,    11,    12,     0,    24,    10,    12,    14,",
          "618:       18,    14,    12,    14,    14,    12,    14,    14",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "665: #define YYRECOVERING()  (!!yyerrstatus)",
          "680:       YYERROR;       \\",
          "681:     }        \\",
          "682: while (YYID (0))",
          "685: #define YYTERROR 1",
          "686: #define YYERRCODE 256",
          "690: #ifndef YY_LOCATION_PRINT",
          "691: # define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "692: #endif",
          "696: #ifdef YYLEX_PARAM",
          "697: # define YYLEX yylex (&yylval, YYLEX_PARAM)",
          "698: #else",
          "700: #endif",
          "",
          "[Removed Lines]",
          "667: #define YYBACKUP(Token, Value)                                  \\",
          "668: do                                                              \\",
          "669:   if (yychar == YYEMPTY)                                        \\",
          "670:     {                                                           \\",
          "671:       yychar = (Token);                                         \\",
          "672:       yylval = (Value);                                         \\",
          "673:       YYPOPSTACK (yylen);                                       \\",
          "674:       yystate = *yyssp;                                         \\",
          "675:       goto yybackup;                                            \\",
          "676:     }                                                           \\",
          "677:   else                                                          \\",
          "678:     {                                                           \\",
          "679:       yyerror (stack, scanner, YY_(\"syntax error: cannot back up\")); \\",
          "699: # define YYLEX yylex (&yylval, scanner)",
          "",
          "[Added Lines]",
          "648: #define YYBACKUP(Token, Value)     \\",
          "649: do        \\",
          "650:   if (yychar == YYEMPTY && yylen == 1)    \\",
          "651:     {        \\",
          "652:       yychar = (Token);      \\",
          "653:       yylval = (Value);      \\",
          "654:       YYPOPSTACK (1);      \\",
          "655:       goto yybackup;      \\",
          "656:     }        \\",
          "657:   else        \\",
          "658:     {        \\",
          "659:       yyerror (YY_(\"syntax error: cannot back up\")); \\",
          "670:    If N is 0, then set CURRENT to the empty location which ends",
          "673: #define YYRHSLOC(Rhs, K) ((Rhs)[K])",
          "674: #ifndef YYLLOC_DEFAULT",
          "675: # define YYLLOC_DEFAULT(Current, Rhs, N)    \\",
          "676:     do         \\",
          "677:       if (YYID (N))                                                    \\",
          "678:  {        \\",
          "679:    (Current).first_line   = YYRHSLOC (Rhs, 1).first_line; \\",
          "680:    (Current).first_column = YYRHSLOC (Rhs, 1).first_column; \\",
          "681:    (Current).last_line    = YYRHSLOC (Rhs, N).last_line;  \\",
          "682:    (Current).last_column  = YYRHSLOC (Rhs, N).last_column; \\",
          "683:  }        \\",
          "684:       else        \\",
          "685:  {        \\",
          "686:    (Current).first_line   = (Current).last_line   =  \\",
          "687:      YYRHSLOC (Rhs, 0).last_line;    \\",
          "688:    (Current).first_column = (Current).last_column =  \\",
          "689:      YYRHSLOC (Rhs, 0).last_column;    \\",
          "690:  }        \\",
          "691:     while (YYID (0))",
          "692: #endif",
          "707: # define YYLEX yylex (&yylval)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "719:     {           \\",
          "720:       YYFPRINTF (stderr, \"%s \", Title);       \\",
          "721:       yy_symbol_print (stderr,        \\",
          "723:       YYFPRINTF (stderr, \"\\n\");        \\",
          "724:     }           \\",
          "725: } while (YYID (0))",
          "",
          "[Removed Lines]",
          "722:     Type, Value, stack, scanner); \\",
          "",
          "[Added Lines]",
          "730:     Type, Value); \\",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "733: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "734:      || defined __cplusplus || defined _MSC_VER)",
          "735: static void",
          "737: #else",
          "738: static void",
          "740:     FILE *yyoutput;",
          "741:     int yytype;",
          "742:     YYSTYPE const * const yyvaluep;",
          "745: #endif",
          "746: {",
          "749:   if (!yyvaluep)",
          "750:     return;",
          "753: # ifdef YYPRINT",
          "754:   if (yytype < YYNTOKENS)",
          "755:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);",
          "",
          "[Removed Lines]",
          "736: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, phpdbg_param_t *stack, yyscan_t scanner)",
          "739: yy_symbol_value_print (yyoutput, yytype, yyvaluep, stack, scanner)",
          "743:     phpdbg_param_t *stack;",
          "744:     yyscan_t scanner;",
          "747:   FILE *yyo = yyoutput;",
          "748:   YYUSE (yyo);",
          "751:   YYUSE (stack);",
          "752:   YYUSE (scanner);",
          "",
          "[Added Lines]",
          "744: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)",
          "747: yy_symbol_value_print (yyoutput, yytype, yyvaluep)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "759:   switch (yytype)",
          "760:     {",
          "761:       default:",
          "763:     }",
          "764: }",
          "",
          "[Removed Lines]",
          "762:         break;",
          "",
          "[Added Lines]",
          "764:  break;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "771: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "772:      || defined __cplusplus || defined _MSC_VER)",
          "773: static void",
          "775: #else",
          "776: static void",
          "778:     FILE *yyoutput;",
          "779:     int yytype;",
          "780:     YYSTYPE const * const yyvaluep;",
          "783: #endif",
          "784: {",
          "785:   if (yytype < YYNTOKENS)",
          "",
          "[Removed Lines]",
          "774: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, phpdbg_param_t *stack, yyscan_t scanner)",
          "777: yy_symbol_print (yyoutput, yytype, yyvaluep, stack, scanner)",
          "781:     phpdbg_param_t *stack;",
          "782:     yyscan_t scanner;",
          "",
          "[Added Lines]",
          "776: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)",
          "779: yy_symbol_print (yyoutput, yytype, yyvaluep)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "787:   else",
          "788:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);",
          "791:   YYFPRINTF (yyoutput, \")\");",
          "792: }",
          "",
          "[Removed Lines]",
          "790:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, stack, scanner);",
          "",
          "[Added Lines]",
          "790:   yy_symbol_value_print (yyoutput, yytype, yyvaluep);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "830: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "831:      || defined __cplusplus || defined _MSC_VER)",
          "832: static void",
          "834: #else",
          "835: static void",
          "837:     YYSTYPE *yyvsp;",
          "838:     int yyrule;",
          "841: #endif",
          "842: {",
          "843:   int yynrhs = yyr2[yyrule];",
          "",
          "[Removed Lines]",
          "833: yy_reduce_print (YYSTYPE *yyvsp, int yyrule, phpdbg_param_t *stack, yyscan_t scanner)",
          "836: yy_reduce_print (yyvsp, yyrule, stack, scanner)",
          "839:     phpdbg_param_t *stack;",
          "840:     yyscan_t scanner;",
          "",
          "[Added Lines]",
          "833: yy_reduce_print (YYSTYPE *yyvsp, int yyrule)",
          "836: yy_reduce_print (yyvsp, yyrule)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "851:       YYFPRINTF (stderr, \"   $%d = \", yyi + 1);",
          "852:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],",
          "853:          &(yyvsp[(yyi + 1) - (yynrhs)])",
          "855:       YYFPRINTF (stderr, \"\\n\");",
          "856:     }",
          "857: }",
          "",
          "[Removed Lines]",
          "854:                   , stack, scanner);",
          "",
          "[Added Lines]",
          "852:                   );",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "859: # define YY_REDUCE_PRINT(Rule)  \\",
          "860: do {     \\",
          "861:   if (yydebug)    \\",
          "863: } while (YYID (0))",
          "",
          "[Removed Lines]",
          "862:     yy_reduce_print (yyvsp, Rule, stack, scanner); \\",
          "",
          "[Added Lines]",
          "860:     yy_reduce_print (yyvsp, Rule); \\",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1003: yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,",
          "1004:                 yytype_int16 *yyssp, int yytoken)",
          "1005: {",
          "1007:   YYSIZE_T yysize = yysize0;",
          "1008:   enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "1012:   char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "",
          "[Removed Lines]",
          "1006:   YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);",
          "1010:   const char *yyformat = YY_NULL;",
          "",
          "[Added Lines]",
          "1004:   YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);",
          "1006:   YYSIZE_T yysize1;",
          "1009:   const char *yyformat = 0;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1067:                     break;",
          "1068:                   }",
          "1069:                 yyarg[yycount++] = yytname[yyx];",
          "1077:               }",
          "1078:         }",
          "1079:     }",
          "",
          "[Removed Lines]",
          "1070:                 {",
          "1071:                   YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);",
          "1072:                   if (! (yysize <= yysize1",
          "1073:                          && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1074:                     return 2;",
          "1075:                   yysize = yysize1;",
          "1076:                 }",
          "",
          "[Added Lines]",
          "1069:                 yysize1 = yysize + yytnamerr (0, yytname[yyx]);",
          "1070:                 if (! (yysize <= yysize1",
          "1071:                        && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1072:                   return 2;",
          "1073:                 yysize = yysize1;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1093: # undef YYCASE_",
          "1094:     }",
          "1103:   if (*yymsg_alloc < yysize)",
          "1104:     {",
          "",
          "[Removed Lines]",
          "1096:   {",
          "1097:     YYSIZE_T yysize1 = yysize + yystrlen (yyformat);",
          "1098:     if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1099:       return 2;",
          "1100:     yysize = yysize1;",
          "1101:   }",
          "",
          "[Added Lines]",
          "1093:   yysize1 = yysize + yystrlen (yyformat);",
          "1094:   if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1095:     return 2;",
          "1096:   yysize = yysize1;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1139: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1140:      || defined __cplusplus || defined _MSC_VER)",
          "1141: static void",
          "1143: #else",
          "1144: static void",
          "1146:     const char *yymsg;",
          "1147:     int yytype;",
          "1148:     YYSTYPE *yyvaluep;",
          "1151: #endif",
          "1152: {",
          "1153:   YYUSE (yyvaluep);",
          "1157:   if (!yymsg)",
          "1158:     yymsg = \"Deleting\";",
          "",
          "[Removed Lines]",
          "1142: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, phpdbg_param_t *stack, yyscan_t scanner)",
          "1145: yydestruct (yymsg, yytype, yyvaluep, stack, scanner)",
          "1149:     phpdbg_param_t *stack;",
          "1150:     yyscan_t scanner;",
          "1154:   YYUSE (stack);",
          "1155:   YYUSE (scanner);",
          "",
          "[Added Lines]",
          "1137: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)",
          "1140: yydestruct (yymsg, yytype, yyvaluep)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1162:     {",
          "1164:       default:",
          "1166:     }",
          "1167: }",
          "",
          "[Removed Lines]",
          "1165:         break;",
          "",
          "[Added Lines]",
          "1156:  break;",
          "1162: #ifdef YYPARSE_PARAM",
          "1163: #if defined __STDC__ || defined __cplusplus",
          "1164: int yyparse (void *YYPARSE_PARAM);",
          "1165: #else",
          "1166: int yyparse ();",
          "1167: #endif",
          "1169: #if defined __STDC__ || defined __cplusplus",
          "1170: int yyparse (void);",
          "1171: #else",
          "1172: int yyparse ();",
          "1173: #endif",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1187: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1188:      || defined __cplusplus || defined _MSC_VER)",
          "1189: int",
          "1191: #else",
          "1192: int",
          "1196: #endif",
          "1197: #endif",
          "1198: {",
          "1200: int yychar;",
          "1229:     int yynerrs;",
          "",
          "[Removed Lines]",
          "1190: yyparse (phpdbg_param_t *stack, yyscan_t scanner)",
          "1193: yyparse (stack, scanner)",
          "1194:     phpdbg_param_t *stack;",
          "1195:     yyscan_t scanner;",
          "1203: #if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__",
          "1205: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\",
          "1206:     _Pragma (\"GCC diagnostic push\") \\",
          "1207:     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\",
          "1208:     _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")",
          "1209: # define YY_IGNORE_MAYBE_UNINITIALIZED_END \\",
          "1210:     _Pragma (\"GCC diagnostic pop\")",
          "1211: #else",
          "1214: static YYSTYPE yyval_default;",
          "1215: # define YY_INITIAL_VALUE(Value) = Value",
          "1216: #endif",
          "1217: #ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1218: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1219: # define YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "1220: #endif",
          "1221: #ifndef YY_INITIAL_VALUE",
          "1223: #endif",
          "1226: YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);",
          "",
          "[Added Lines]",
          "1195: yyparse (void)",
          "1198: yyparse ()",
          "1207: YYSTYPE yylval;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1236:        `yyss': related to states.",
          "1237:        `yyvs': related to semantic values.",
          "",
          "[Removed Lines]",
          "1239:        Refer to the stacks through separate pointers, to allow yyoverflow",
          "",
          "[Added Lines]",
          "1220:        Refer to the stacks thru separate pointers, to allow yyoverflow",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1254:   int yyn;",
          "1255:   int yyresult;",
          "1260:   YYSTYPE yyval;",
          "",
          "[Removed Lines]",
          "1257:   int yytoken = 0;",
          "",
          "[Added Lines]",
          "1238:   int yytoken;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1273:   int yylen = 0;",
          "1277:   yystacksize = YYINITDEPTH;",
          "1279:   YYDPRINTF ((stderr, \"Starting parse\\n\"));",
          "",
          "[Removed Lines]",
          "1275:   yyssp = yyss = yyssa;",
          "1276:   yyvsp = yyvs = yyvsa;",
          "",
          "[Added Lines]",
          "1256:   yytoken = 0;",
          "1257:   yyss = yyssa;",
          "1258:   yyvs = yyvsa;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1282:   yyerrstatus = 0;",
          "1283:   yynerrs = 0;",
          "1285:   goto yysetstate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269:      Waste one element of value and location stack",
          "1270:      so that they stay on the same level as the state stack.",
          "1272:   yyssp = yyss;",
          "1273:   yyvsp = yyvs;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1422:   yychar = YYEMPTY;",
          "1424:   yystate = yyn;",
          "1429:   goto yynewstate;",
          "",
          "[Removed Lines]",
          "1425:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1427:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1460:   YY_REDUCE_PRINT (yyn);",
          "1461:   switch (yyn)",
          "1462:     {",
          "1467:     break;",
          "1469:   case 5:",
          "1473:     break;",
          "1475:   case 6:",
          "1478:     {",
          "1479:   (yyval).type = FILE_PARAM;",
          "1480:   (yyval).file.name = (yyvsp[(2) - (3)]).str;",
          "",
          "[Removed Lines]",
          "1463:         case 4:",
          "1465: #line 81 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1466:     { phpdbg_stack_push(stack, &(yyvsp[(1) - (1)])); }",
          "1471: #line 82 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1472:     { phpdbg_stack_push(stack, &(yyvsp[(2) - (2)])); }",
          "1477: #line 86 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "1451:         case 3:",
          "1454: #line 65 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1455:     { phpdbg_stack_push(PHPDBG_G(parser_stack), &(yyvsp[(1) - (1)])); }",
          "1461: #line 70 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1462:     { phpdbg_stack_push(PHPDBG_G(parser_stack), &(yyvsp[(1) - (1)])); }",
          "1468: #line 71 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1469:     { phpdbg_stack_push(PHPDBG_G(parser_stack), &(yyvsp[(2) - (2)])); }",
          "1470:     break;",
          "1472:   case 7:",
          "1475: #line 75 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1482:  }",
          "1483:     break;",
          "1488:     {",
          "1489:   (yyval).type = NUMERIC_FILE_PARAM;",
          "1490:   (yyval).file.name = (yyvsp[(1) - (4)]).str;",
          "",
          "[Removed Lines]",
          "1485:   case 7:",
          "1487: #line 91 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "1483:   case 8:",
          "1486: #line 80 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1492:  }",
          "1493:     break;",
          "1498:     {",
          "1499:   (yyval).type = FILE_PARAM;",
          "1502:   if ((yyval).file.name) {",
          "1503:    memcpy(&(yyval).file.name[0], (yyvsp[(1) - (4)]).str, (yyvsp[(1) - (4)]).len);",
          "1504:    memcpy(&(yyval).file.name[(yyvsp[(1) - (4)]).len], (yyvsp[(2) - (4)]).str, (yyvsp[(2) - (4)]).len);",
          "",
          "[Removed Lines]",
          "1495:   case 8:",
          "1497: #line 96 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1500:   (yyval).file.name = malloc((yyvsp[(1) - (4)]).len +",
          "1501:          (yyvsp[(2) - (4)]).len + 1);",
          "",
          "[Added Lines]",
          "1494:   case 9:",
          "1497: #line 85 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1500:   (yyval).file.name = malloc((yyvsp[(1) - (4)]).len + (yyvsp[(2) - (4)]).len + 1);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1508:  }",
          "1509:     break;",
          "1514:     {",
          "1515:   (yyval).type = NUMERIC_FILE_PARAM;",
          "1518:   if ((yyval).file.name) {",
          "1519:    memcpy(&(yyval).file.name[0], (yyvsp[(1) - (5)]).str, (yyvsp[(1) - (5)]).len);",
          "1520:    memcpy(&(yyval).file.name[(yyvsp[(1) - (5)]).len], (yyvsp[(2) - (5)]).str, (yyvsp[(2) - (5)]).len);",
          "",
          "[Removed Lines]",
          "1511:   case 9:",
          "1513: #line 107 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1516:   (yyval).file.name = malloc((yyvsp[(1) - (5)]).len +",
          "1517:          (yyvsp[(2) - (5)]).len + 1);",
          "",
          "[Added Lines]",
          "1510:   case 10:",
          "1513: #line 95 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1516:   (yyval).file.name = malloc((yyvsp[(1) - (5)]).len + (yyvsp[(2) - (5)]).len + 1);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1524:  }",
          "1525:     break;",
          "1530:     {",
          "1531:   (yyval).type = METHOD_PARAM;",
          "1532:   (yyval).method.class = (yyvsp[(1) - (3)]).str;",
          "",
          "[Removed Lines]",
          "1527:   case 10:",
          "1529: #line 118 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "1526:   case 11:",
          "1529: #line 105 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1534:  }",
          "1535:     break;",
          "1540:     {",
          "1541:   (yyval).type = NUMERIC_METHOD_PARAM;",
          "1542:   (yyval).method.class = (yyvsp[(1) - (5)]).str;",
          "",
          "[Removed Lines]",
          "1537:   case 11:",
          "1539: #line 123 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "1537:   case 12:",
          "1540: #line 110 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1545:  }",
          "1546:     break;",
          "1551:     {",
          "1552:   (yyval).type = NUMERIC_FUNCTION_PARAM;",
          "1553:   (yyval).str = (yyvsp[(1) - (3)]).str;",
          "",
          "[Removed Lines]",
          "1548:   case 12:",
          "1550: #line 129 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "1549:   case 13:",
          "1552: #line 116 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1556:  }",
          "1557:     break;",
          "1569:   case 14:",
          "1577:     break;",
          "1579:   case 15:",
          "1587:     break;",
          "1589:   case 16:",
          "1596:     break;",
          "1598:   case 17:",
          "1606:     break;",
          "1608:   case 18:",
          "1611:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1612:     break;",
          "1614:   case 19:",
          "1617:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1618:     break;",
          "1620:   case 20:",
          "1623:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1624:     break;",
          "1626:   case 21:",
          "1630:     break;",
          "1632:   case 22:",
          "1636:     break;",
          "1638:   case 23:",
          "1642:     break;",
          "1644:   case 24:",
          "1648:     break;",
          "1653:       default: break;",
          "1654:     }",
          "",
          "[Removed Lines]",
          "1559:   case 13:",
          "1561: #line 135 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1562:     {",
          "1563:   (yyval).type = COND_PARAM;",
          "1564:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1565:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1566:  }",
          "1567:     break;",
          "1571: #line 140 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1572:     {",
          "1573:   (yyval).type = EVAL_PARAM;",
          "1574:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1575:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1576:  }",
          "1581: #line 145 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1582:     {",
          "1583:   (yyval).type = SHELL_PARAM;",
          "1584:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1585:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1586:  }",
          "1591: #line 150 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1592:     {",
          "1593:   (yyval).type = RUN_PARAM;",
          "1594:   (yyval).len = 0;",
          "1595:  }",
          "1600: #line 154 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1601:     {",
          "1602:   (yyval).type = RUN_PARAM;",
          "1603:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1604:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1605:  }",
          "1610: #line 159 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1616: #line 160 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1622: #line 161 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1628: #line 162 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1629:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1634: #line 163 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1635:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1640: #line 164 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1641:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1646: #line 165 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1647:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1652: #line 1653 \"sapi/phpdbg/phpdbg_parser.c\"",
          "",
          "[Added Lines]",
          "1564: #line 122 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1565:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1571: #line 123 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1572:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1578: #line 124 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1579:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1585: #line 125 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1586:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1592: #line 126 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1599: #line 127 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1606: #line 128 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1613: #line 132 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1614:     {",
          "1615:   (yyval).type = COND_PARAM;",
          "1616:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1617:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1618:  }",
          "1624: #line 137 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1625:     {",
          "1626:   (yyval).type = EVAL_PARAM;",
          "1627:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1628:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1629:  }",
          "1635: #line 142 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1636:     {",
          "1637:   (yyval).type = SHELL_PARAM;",
          "1638:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1639:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1640:  }",
          "1646: #line 147 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1647:     {",
          "1648:   (yyval).type = RUN_PARAM;",
          "1649:   (yyval).len = 0;",
          "1650:  }",
          "1653:   case 25:",
          "1656: #line 151 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1657:     {",
          "1658:   (yyval).type = RUN_PARAM;",
          "1659:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1660:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1661:  }",
          "1662:     break;",
          "1667: #line 1668 \"sapi/phpdbg/phpdbg_parser.c\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1699:     {",
          "1700:       ++yynerrs;",
          "1701: #if ! YYERROR_VERBOSE",
          "1703: #else",
          "1704: # define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\",
          "1705:                                         yyssp, yytoken)",
          "",
          "[Removed Lines]",
          "1702:       yyerror (stack, scanner, YY_(\"syntax error\"));",
          "",
          "[Added Lines]",
          "1717:       yyerror (YY_(\"syntax error\"));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1726:                 yymsgp = yymsg;",
          "1727:               }",
          "1728:           }",
          "1730:         if (yysyntax_error_status == 2)",
          "1731:           goto yyexhaustedlab;",
          "1732:       }",
          "",
          "[Removed Lines]",
          "1729:         yyerror (stack, scanner, yymsgp);",
          "",
          "[Added Lines]",
          "1744:         yyerror (yymsgp);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1750:       else",
          "1751:  {",
          "1752:    yydestruct (\"Error: discarding\",",
          "1754:    yychar = YYEMPTY;",
          "1755:  }",
          "1756:     }",
          "",
          "[Removed Lines]",
          "1753:         yytoken, &yylval, stack, scanner);",
          "",
          "[Added Lines]",
          "1768:         yytoken, &yylval);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1808:       yydestruct (\"Error: popping\",",
          "1810:       YYPOPSTACK (1);",
          "1811:       yystate = *yyssp;",
          "1812:       YY_STACK_PRINT (yyss, yyssp);",
          "1813:     }",
          "",
          "[Removed Lines]",
          "1809:     yystos[yystate], yyvsp, stack, scanner);",
          "1815:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1817:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "[Added Lines]",
          "1824:     yystos[yystate], yyvsp);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1838:   yyresult = 1;",
          "1839:   goto yyreturn;",
          "1843: | yyexhaustedlab -- memory exhaustion comes here.  |",
          "1845: yyexhaustedlab:",
          "1847:   yyresult = 2;",
          "1849: #endif",
          "",
          "[Removed Lines]",
          "1841: #if !defined yyoverflow || YYERROR_VERBOSE",
          "1846:   yyerror (stack, scanner, YY_(\"memory exhausted\"));",
          "",
          "[Added Lines]",
          "1854: #if !defined(yyoverflow) || YYERROR_VERBOSE",
          "1859:   yyerror (YY_(\"memory exhausted\"));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1856:       yytoken = YYTRANSLATE (yychar);",
          "1857:       yydestruct (\"Cleanup: discarding lookahead\",",
          "1859:     }",
          "",
          "[Removed Lines]",
          "1858:                   yytoken, &yylval, stack, scanner);",
          "",
          "[Added Lines]",
          "1871:                   yytoken, &yylval);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1864:   while (yyssp != yyss)",
          "1865:     {",
          "1866:       yydestruct (\"Cleanup: popping\",",
          "1868:       YYPOPSTACK (1);",
          "1869:     }",
          "1870: #ifndef yyoverflow",
          "",
          "[Removed Lines]",
          "1867:     yystos[*yyssp], yyvsp, stack, scanner);",
          "",
          "[Added Lines]",
          "1880:     yystos[*yyssp], yyvsp);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1880: }",
          "",
          "[Removed Lines]",
          "1884: #line 168 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "1898: #line 158 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1901: static int yyerror(const char *msg) {",
          "1902:  TSRMLS_FETCH();",
          "1904:  phpdbg_error(\"Parse Error: %s\", msg);",
          "1906:  {",
          "1907:   const phpdbg_param_t *top = PHPDBG_G(parser_stack);",
          "1909:   while (top) {",
          "1910:    phpdbg_param_debug(top, \"--> \");",
          "1911:    top = top->next;",
          "1912:   }",
          "1913:  }",
          "1914:  return 0;",
          "1915: }",
          "1917: int phpdbg_do_parse(phpdbg_param_t *stack, char *input TSRMLS_DC) {",
          "1918:  phpdbg_init_lexer(stack, input TSRMLS_CC);",
          "1920:  return yyparse();",
          "1921: }",
          "",
          "---------------"
        ],
        "phpdbg_parser.h||phpdbg_parser.h": [
          "File: phpdbg_parser.h -> phpdbg_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "5:       Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "5:       Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:    This special exception was added by the Free Software Foundation in",
          "46: #include \"phpdbg.h\"",
          "47: #ifndef YY_TYPEDEF_YY_SCANNER_T",
          "",
          "[Removed Lines]",
          "33: #ifndef YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "34: # define YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int yydebug;",
          "41: #endif",
          "44: #line 40 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "[Added Lines]",
          "36: #line 31 \"/home/pi/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50: #endif",
          "57: #ifndef YYTOKENTYPE",
          "",
          "[Removed Lines]",
          "54: #line 55 \"sapi/phpdbg/phpdbg_parser.h\"",
          "",
          "[Added Lines]",
          "47: #line 48 \"sapi/phpdbg/phpdbg_parser.h\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109: #endif",
          "",
          "[Removed Lines]",
          "112: #ifdef YYPARSE_PARAM",
          "113: #if defined __STDC__ || defined __cplusplus",
          "114: int yyparse (void *YYPARSE_PARAM);",
          "115: #else",
          "116: int yyparse ();",
          "117: #endif",
          "119: #if defined __STDC__ || defined __cplusplus",
          "120: int yyparse (phpdbg_param_t *stack, yyscan_t scanner);",
          "121: #else",
          "122: int yyparse ();",
          "123: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "phpdbg_parser.y||phpdbg_parser.y": [
          "File: phpdbg_parser.y -> phpdbg_parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: %{",
          "",
          "[Removed Lines]",
          "1: %error-verbose",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: #include \"phpdbg_parser.h\"",
          "20: #include \"phpdbg_lexer.h\"",
          "22: ZEND_EXTERN_MODULE_GLOBALS(phpdbg);",
          "38: %}",
          "40: %code requires {",
          "41: #include \"phpdbg.h\"",
          "",
          "[Removed Lines]",
          "24: int yyerror(phpdbg_param_t *stack, yyscan_t scanner, const char *msg) {",
          "25:  TSRMLS_FETCH();",
          "26:     phpdbg_error(\"Parse Error: %s\", msg);",
          "27:     {",
          "28:      const phpdbg_param_t *top = stack;",
          "30:      while (top) {",
          "31:       phpdbg_param_debug(",
          "32:        top, \"--> \");",
          "33:       top = top->next;",
          "34:      }",
          "35:     }",
          "36:     return 0;",
          "37: }",
          "",
          "[Added Lines]",
          "21: #undef yyerror",
          "22: static int yyerror(const char *msg);",
          "28: %pure-parser",
          "29: %error-verbose",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: typedef void* yyscan_t;",
          "45: #endif",
          "46: }",
          "47: %output  \"sapi/phpdbg/phpdbg_parser.c\"",
          "48: %defines \"sapi/phpdbg/phpdbg_parser.h\"",
          "75: input",
          "80: parameters",
          "83:  ;",
          "85: parameter",
          "87:   $$.type = FILE_PARAM;",
          "88:   $$.file.name = $2.str;",
          "89:   $$.file.line = $3.num;",
          "90:  }",
          "92:   $$.type = NUMERIC_FILE_PARAM;",
          "93:   $$.file.name = $1.str;",
          "94:   $$.file.line = $4.num;",
          "95:  }",
          "97:   $$.type = FILE_PARAM;",
          "100:   if ($$.file.name) {",
          "101:    memcpy(&$$.file.name[0], $1.str, $1.len);",
          "102:    memcpy(&$$.file.name[$1.len], $2.str, $2.len);",
          "",
          "[Removed Lines]",
          "50: %define api.pure",
          "51: %lex-param   { yyscan_t scanner }",
          "52: %parse-param { phpdbg_param_t *stack }",
          "53: %parse-param { yyscan_t scanner }",
          "55: %token T_EVAL   \"eval\"",
          "56: %token T_RUN   \"run\"",
          "57: %token T_SHELL  \"shell\"",
          "58: %token T_IF   \"if (condition)\"",
          "59: %token T_TRUTHY  \"truthy (true, on, yes or enabled)\"",
          "60: %token T_FALSY  \"falsy (false, off, no or disabled)\"",
          "61: %token T_STRING  \"string (some input, perhaps)\"",
          "62: %token T_COLON  \": (colon)\"",
          "63: %token T_DCOLON  \":: (double colon)\"",
          "64: %token T_POUND  \"# (pound sign)\"",
          "65: %token T_PROTO  \"protocol (file://)\"",
          "66: %token T_DIGITS     \"digits (numbers)\"",
          "67: %token T_LITERAL    \"literal (string)\"",
          "68: %token T_ADDR     \"address\"",
          "69: %token T_OPCODE    \"opcode\"",
          "70: %token T_ID      \"identifier (command or function name)\"",
          "71: %token T_INPUT     \"input (input string or data)\"",
          "72: %token T_UNEXPECTED   \"input\"",
          "73: %%",
          "76:     : parameters",
          "78:     ;",
          "81:  : parameter        { phpdbg_stack_push(stack, &$1); }",
          "82:  | parameters parameter     { phpdbg_stack_push(stack, &$2); }",
          "86:  : T_ID T_COLON T_DIGITS     {",
          "91:  | T_ID T_COLON T_POUND T_DIGITS   {",
          "96:  | T_PROTO T_ID T_COLON T_DIGITS   {",
          "98:   $$.file.name = malloc($1.len +",
          "99:          $2.len + 1);",
          "",
          "[Added Lines]",
          "42: %token T_EVAL       \"eval\"",
          "43: %token T_RUN        \"run\"",
          "44: %token T_SHELL      \"shell\"",
          "45: %token T_IF         \"if (condition)\"",
          "46: %token T_TRUTHY     \"truthy (true, on, yes or enabled)\"",
          "47: %token T_FALSY      \"falsy (false, off, no or disabled)\"",
          "48: %token T_STRING     \"string (some input, perhaps)\"",
          "49: %token T_COLON      \": (colon)\"",
          "50: %token T_DCOLON     \":: (double colon)\"",
          "51: %token T_POUND      \"# (pound sign)\"",
          "52: %token T_PROTO      \"protocol (file://)\"",
          "53: %token T_DIGITS     \"digits (numbers)\"",
          "54: %token T_LITERAL    \"literal (string)\"",
          "55: %token T_ADDR       \"address\"",
          "56: %token T_OPCODE     \"opcode\"",
          "57: %token T_ID         \"identifier (command or function name)\"",
          "58: %token T_INPUT      \"input (input string or data)\"",
          "59: %token T_UNEXPECTED \"input\"",
          "64:  : parameters",
          "65:  | full_expression { phpdbg_stack_push(PHPDBG_G(parser_stack), &$1); }",
          "67:  ;",
          "70:  : parameter { phpdbg_stack_push(PHPDBG_G(parser_stack), &$1); }",
          "71:  | parameters parameter { phpdbg_stack_push(PHPDBG_G(parser_stack), &$2); }",
          "75:  : T_ID T_COLON T_DIGITS {",
          "80:  | T_ID T_COLON T_POUND T_DIGITS {",
          "85:  | T_PROTO T_ID T_COLON T_DIGITS {",
          "87:   $$.file.name = malloc($1.len + $2.len + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:   }",
          "105:   $$.file.line = $4.num;",
          "106:  }",
          "108:   $$.type = NUMERIC_FILE_PARAM;",
          "111:   if ($$.file.name) {",
          "112:    memcpy(&$$.file.name[0], $1.str, $1.len);",
          "113:    memcpy(&$$.file.name[$1.len], $2.str, $2.len);",
          "",
          "[Removed Lines]",
          "107:  | T_PROTO T_ID T_COLON T_POUND T_DIGITS   {",
          "109:   $$.file.name = malloc($1.len +",
          "110:          $2.len + 1);",
          "",
          "[Added Lines]",
          "95:  | T_PROTO T_ID T_COLON T_POUND T_DIGITS {",
          "97:   $$.file.name = malloc($1.len + $2.len + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:   }",
          "116:   $$.file.line = $5.num;",
          "117:  }",
          "119:   $$.type = METHOD_PARAM;",
          "120:   $$.method.class = $1.str;",
          "121:   $$.method.name = $3.str;",
          "122:  }",
          "124:   $$.type = NUMERIC_METHOD_PARAM;",
          "125:   $$.method.class = $1.str;",
          "126:   $$.method.name = $3.str;",
          "127:   $$.num = $5.num;",
          "128:  }",
          "130:   $$.type = NUMERIC_FUNCTION_PARAM;",
          "131:   $$.str = $1.str;",
          "132:   $$.len = $1.len;",
          "133:   $$.num = $3.num;",
          "134:  }",
          "136:   $$.type = COND_PARAM;",
          "137:   $$.str = $2.str;",
          "138:   $$.len = $2.len;",
          "139:  }",
          "141:   $$.type = EVAL_PARAM;",
          "142:   $$.str = $2.str;",
          "143:   $$.len = $2.len;",
          "144:  }",
          "146:   $$.type = SHELL_PARAM;",
          "147:   $$.str = $2.str;",
          "148:   $$.len = $2.len;",
          "149:  }",
          "151:   $$.type = RUN_PARAM;",
          "152:   $$.len = 0;",
          "153:  }",
          "155:   $$.type = RUN_PARAM;",
          "156:   $$.str = $2.str;",
          "157:   $$.len = $2.len;",
          "158:  }",
          "166:  ;",
          "168: %%",
          "",
          "[Removed Lines]",
          "118:  | T_ID T_DCOLON T_ID     {",
          "123:  | T_ID T_DCOLON T_ID T_POUND T_DIGITS {",
          "129:  | T_ID T_POUND T_DIGITS     {",
          "135:  | T_IF T_INPUT       {",
          "140:  | T_EVAL T_INPUT                        {",
          "145:  | T_SHELL T_INPUT      {",
          "150:  | T_RUN   {",
          "154:  | T_RUN T_INPUT      {",
          "159:  | T_OPCODE        { $$ = $1; }",
          "160:  | T_ADDR        { $$ = $1; }",
          "161:  | T_LITERAL        { $$ = $1; }",
          "162:  | T_TRUTHY        { $$ = $1; }",
          "163:  | T_FALSY        { $$ = $1; }",
          "164:  | T_DIGITS        { $$ = $1; }",
          "165:  | T_ID         { $$ = $1; }",
          "",
          "[Added Lines]",
          "105:  | T_ID T_DCOLON T_ID {",
          "110:  | T_ID T_DCOLON T_ID T_POUND T_DIGITS {",
          "116:  | T_ID T_POUND T_DIGITS {",
          "122:  | T_OPCODE { $$ = $1; }",
          "123:  | T_ADDR { $$ = $1; }",
          "124:  | T_LITERAL { $$ = $1; }",
          "125:  | T_TRUTHY { $$ = $1; }",
          "126:  | T_FALSY { $$ = $1; }",
          "127:  | T_DIGITS { $$ = $1; }",
          "128:  | T_ID { $$ = $1; }",
          "129:  ;",
          "131: full_expression",
          "132:  : T_IF T_INPUT {",
          "137:  | T_EVAL T_INPUT {",
          "142:  | T_SHELL T_INPUT {",
          "147:  | T_RUN {",
          "151:  | T_RUN T_INPUT {",
          "160: static int yyerror(const char *msg) {",
          "161:  TSRMLS_FETCH();",
          "163:  phpdbg_error(\"Parse Error: %s\", msg);",
          "165:  {",
          "166:   const phpdbg_param_t *top = PHPDBG_G(parser_stack);",
          "168:   while (top) {",
          "169:    phpdbg_param_debug(top, \"--> \");",
          "170:    top = top->next;",
          "171:   }",
          "172:  }",
          "173:  return 0;",
          "174: }",
          "176: int phpdbg_do_parse(phpdbg_param_t *stack, char *input TSRMLS_DC) {",
          "177:  phpdbg_init_lexer(stack, input TSRMLS_CC);",
          "179:  return yyparse();",
          "180: }",
          "",
          "---------------"
        ],
        "phpdbg_prompt.c||phpdbg_prompt.c": [
          "File: phpdbg_prompt.c -> phpdbg_prompt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:       char *why = NULL;",
          "249:       char *input = phpdbg_read_input(cmd TSRMLS_CC);",
          "250:       phpdbg_param_t stack;",
          "254:       phpdbg_init_param(&stack, STACK_PARAM);",
          "265:        switch (phpdbg_stack_execute(&stack, &why TSRMLS_CC)) {",
          "266:         case FAILURE:",
          "",
          "[Removed Lines]",
          "251:       yyscan_t scanner;",
          "252:       YY_BUFFER_STATE state;",
          "256:       if (yylex_init(&scanner)) {",
          "257:        phpdbg_error(",
          "258:         \"could not initialize scanner\");",
          "259:        break;",
          "260:       }",
          "262:       state = yy_scan_string(input, scanner);",
          "264:       if (yyparse(&stack, scanner) <= 0) {",
          "",
          "[Added Lines]",
          "254:       if (phpdbg_do_parse(&stack, input) <= 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:         break;",
          "275:        }",
          "276:       }",
          "278:       if (why) {",
          "279:        free(why);",
          "280:        why = NULL;",
          "281:       }",
          "286:       phpdbg_stack_free(&stack);",
          "287:       phpdbg_destroy_input(&input TSRMLS_CC);",
          "288:      }",
          "",
          "[Removed Lines]",
          "283:       yy_delete_buffer(state, scanner);",
          "284:       yylex_destroy(scanner);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1015:  if (input) {",
          "1016:   do {",
          "1020:    phpdbg_init_param(&stack, STACK_PARAM);",
          "1031:     switch (ret = phpdbg_stack_execute(&stack, &why TSRMLS_CC)) {",
          "1032:      case FAILURE:",
          "1033:       if (!(PHPDBG_G(flags) & PHPDBG_IS_QUITTING)) {",
          "",
          "[Removed Lines]",
          "1017:    yyscan_t scanner;",
          "1018:    YY_BUFFER_STATE state;",
          "1022:    if (yylex_init(&scanner)) {",
          "1023:     phpdbg_error(",
          "1024:      \"could not initialize scanner\");",
          "1025:     return FAILURE;",
          "1026:    }",
          "1028:    state = yy_scan_string(input, scanner);",
          "1030:    if (yyparse(&stack, scanner) <= 0) {",
          "",
          "[Added Lines]",
          "1006:    if (phpdbg_do_parse(&stack, input) <= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1061:     why = NULL;",
          "1062:    }",
          "1067:    phpdbg_stack_free(&stack);",
          "1068:    phpdbg_destroy_input(&input TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "1064:    yy_delete_buffer(state, scanner);",
          "1065:    yylex_destroy(scanner);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9c2e7d6e630ae660b6b5dc7269af58d4bf7bf54",
      "candidate_info": {
        "commit_hash": "e9c2e7d6e630ae660b6b5dc7269af58d4bf7bf54",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/e9c2e7d6e630ae660b6b5dc7269af58d4bf7bf54",
        "files": [
          "config.m4",
          "phpdbg_utils.c"
        ],
        "message": "fix bugsnet #67212: phpdbg uses non-standard TIOCGWINSZ",
        "before_after_code_files": [
          "config.m4||config.m4",
          "phpdbg_utils.c||phpdbg_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "config.m4||config.m4": [
          "File: config.m4 -> config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: [  --enable-phpdbg-debug   Build phpdbg in debug mode], no, no)",
          "11: if test \"$PHP_PHPDBG\" != \"no\"; then",
          "12:   AC_DEFINE(HAVE_PHPDBG, 1, [ ])",
          "14:   if test \"$PHP_PHPDBG_DEBUG\" != \"no\"; then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:   AC_HEADER_TIOCGWINSZ",
          "",
          "---------------"
        ],
        "phpdbg_utils.c||phpdbg_utils.c": [
          "File: phpdbg_utils.c -> phpdbg_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: # include \"win32/time.h\"",
          "33: #elif defined(HAVE_SYS_IOCTL_H)",
          "34: # include \"sys/ioctl.h\"",
          "35: #endif",
          "37: ZEND_EXTERN_MODULE_GLOBALS(phpdbg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: # ifndef GWINSZ_IN_SYS_IOCTL",
          "36: #  include <termios.h>",
          "37: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:  GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &csbi);",
          "439:  columns = csbi.srWindow.Right - csbi.srWindow.Left + 1;",
          "441:  struct winsize w;",
          "443:  columns = ioctl(fileno(stdout), TIOCGWINSZ, &w) == 0 ? w.ws_col : 80;",
          "",
          "[Removed Lines]",
          "440: #elif defined(HAVE_SYS_IOCTL_H)",
          "",
          "[Added Lines]",
          "443: #elif defined(HAVE_SYS_IOCTL_H) && defined (TIOCGWINSZ)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53158f2c32c71bddbfaa390c0c4758bc98540946",
      "candidate_info": {
        "commit_hash": "53158f2c32c71bddbfaa390c0c4758bc98540946",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/53158f2c32c71bddbfaa390c0c4758bc98540946",
        "files": [
          "Zend/tests/67468.phpt"
        ],
        "message": "testcase for 67468 (only for debug build, as I could not create a stable segfault without loading other exts like pgsql)",
        "before_after_code_files": [
          "Zend/tests/67468.phpt||Zend/tests/67468.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Zend/tests/67468.phpt||Zend/tests/67468.phpt": [
          "File: Zend/tests/67468.phpt -> Zend/tests/67468.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #67468 (Segfault in highlight_file()/highlight_string())",
          "3: --SKIPIF--",
          "4: <?php if(!function_exists(\"leak\")) print \"skip only for debug builds\"; ?>",
          "5: --FILE--",
          "6: <?php",
          "7: highlight_string(\"<?php __CLASS__;\", true);",
          "8: echo \"done\";",
          "9: ?>",
          "10: --EXPECT--",
          "11: done",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d391be2851fa38ac3eca001fb78ab3fa6bc591f",
      "candidate_info": {
        "commit_hash": "5d391be2851fa38ac3eca001fb78ab3fa6bc591f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/5d391be2851fa38ac3eca001fb78ab3fa6bc591f",
        "files": [
          "tests/basic/025.phpt"
        ],
        "message": "The test output is dependent on expose_php ini",
        "before_after_code_files": [
          "tests/basic/025.phpt||tests/basic/025.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/basic/025.phpt||tests/basic/025.phpt": [
          "File: tests/basic/025.phpt -> tests/basic/025.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: --INI--",
          "4: always_populate_raw_post_data=1",
          "5: post_max_size=1K",
          "6: --POST--",
          "7: a=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "8: --FILE--",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: expose_php=On",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfe06eb2b172ff54723a041001a47cf9a9f66153",
      "candidate_info": {
        "commit_hash": "cfe06eb2b172ff54723a041001a47cf9a9f66153",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/cfe06eb2b172ff54723a041001a47cf9a9f66153",
        "files": [
          "ext/standard/tests/serialize/bug67072_2.phpt"
        ],
        "message": "Better fix for bug #67072 with more BC provisions",
        "before_after_code_files": [
          "ext/standard/tests/serialize/bug67072_2.phpt||ext/standard/tests/serialize/bug67072_2.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/tests/serialize/bug67072_2.phpt||ext/standard/tests/serialize/bug67072_2.phpt": [
          "File: ext/standard/tests/serialize/bug67072_2.phpt -> ext/standard/tests/serialize/bug67072_2.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #67072 Echoing unserialized \"SplFileObject\" crash - BC break fixes",
          "3: --FILE--",
          "4: <?php",
          "5: class MySplFileObject extends SplFileObject {}",
          "6: class MyArrayObject extends ArrayObject{ var $a = 1; }",
          "7: echo unserialize('O:15:\"MySplFileObject\":1:{s:9:\"*filename\";s:15:\"/home/flag/flag\";}');",
          "9: function testClass($className)",
          "10: {",
          "12:     $object = unserialize(sprintf('O:%d:\"%s\":0:{}', strlen($className), $className));",
          "13:     return $object;",
          "14: }",
          "16: class MyClass {}",
          "17: class MyClassSer implements Serializable {",
          "18:         function serialize() { return \"\";}",
          "19:         function unserialize($data) { }",
          "20: }",
          "21: class MyClassSer2 extends MyClassSer {",
          "22: }",
          "24: $classes = array('stdClass', 'MyClass', 'MyClassSer', 'MyClassSer2', 'SplFileObject', 'MySplFileObject',",
          "25:                  'SplObjectStorage', 'FooBar', 'Closure', 'ArrayObject', 'MyArrayObject',",
          "26:                  'Directory'",
          "27:              );",
          "28: foreach($classes as $cl) {",
          "29:         var_dump(testClass($cl));",
          "30: }",
          "32: ?>",
          "33: ===DONE==",
          "34: --EXPECTF--",
          "35: Warning: Erroneous data format for unserializing 'MySplFileObject' in %s on line 4",
          "37: Notice: unserialize(): Error at offset 26 of 66 bytes in %s on line 4",
          "38: object(stdClass)#%d (0) {",
          "39: }",
          "40: object(MyClass)#%d (0) {",
          "41: }",
          "42: object(MyClassSer)#%d (0) {",
          "43: }",
          "44: object(MyClassSer2)#%d (0) {",
          "45: }",
          "47: Warning: Erroneous data format for unserializing 'SplFileObject' in %s on line 9",
          "49: Notice: unserialize(): Error at offset 24 of 25 bytes in %s on line 9",
          "50: bool(false)",
          "52: Warning: Erroneous data format for unserializing 'MySplFileObject' in %s on line 9",
          "54: Notice: unserialize(): Error at offset 26 of 27 bytes in %s on line 9",
          "55: bool(false)",
          "56: object(SplObjectStorage)#%d (1) {",
          "57:   [\"storage\":\"SplObjectStorage\":private]=>",
          "58:   array(0) {",
          "59:   }",
          "60: }",
          "61: object(__PHP_Incomplete_Class)#%d (1) {",
          "62:   [\"__PHP_Incomplete_Class_Name\"]=>",
          "63:   string(6) \"FooBar\"",
          "64: }",
          "66: Warning: Erroneous data format for unserializing 'Closure' in %s on line 9",
          "68: Notice: unserialize(): Error at offset 17 of 18 bytes in %s on line 9",
          "69: bool(false)",
          "70: object(ArrayObject)#%d (1) {",
          "71:   [\"storage\":\"ArrayObject\":private]=>",
          "72:   array(0) {",
          "73:   }",
          "74: }",
          "75: object(MyArrayObject)#1 (2) {",
          "76:   [\"a\"]=>",
          "77:   int(1)",
          "78:   [\"storage\":\"ArrayObject\":private]=>",
          "79:   array(0) {",
          "80:   }",
          "81: }",
          "82: object(Directory)#1 (0) {",
          "83: }",
          "84: ===DONE==",
          "",
          "---------------"
        ]
      }
    }
  ]
}