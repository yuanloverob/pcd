{
  "cve_id": "CVE-2015-7872",
  "cve_desc": "The key_gc_unused_keys function in security/keys/gc.c in the Linux kernel through 4.2.6 allows local users to cause a denial of service (OOPS) via crafted keyctl commands.",
  "repo": "torvalds/linux",
  "patch_hash": "f05819df10d7b09f6d1eb6f8534a8f68e5a4fe61",
  "patch_info": {
    "commit_hash": "f05819df10d7b09f6d1eb6f8534a8f68e5a4fe61",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f05819df10d7b09f6d1eb6f8534a8f68e5a4fe61",
    "files": [
      "security/keys/gc.c"
    ],
    "message": "KEYS: Fix crash when attempt to garbage collect an uninstantiated keyring\n\nThe following sequence of commands:\n\n    i=`keyctl add user a a @s`\n    keyctl request2 keyring foo bar @t\n    keyctl unlink $i @s\n\ntries to invoke an upcall to instantiate a keyring if one doesn't already\nexist by that name within the user's keyring set.  However, if the upcall\nfails, the code sets keyring->type_data.reject_error to -ENOKEY or some\nother error code.  When the key is garbage collected, the key destroy\nfunction is called unconditionally and keyring_destroy() uses list_empty()\non keyring->type_data.link - which is in a union with reject_error.\nSubsequently, the kernel tries to unlink the keyring from the keyring names\nlist - which oopses like this:\n\n\tBUG: unable to handle kernel paging request at 00000000ffffff8a\n\tIP: [<ffffffff8126e051>] keyring_destroy+0x3d/0x88\n\t...\n\tWorkqueue: events key_garbage_collector\n\t...\n\tRIP: 0010:[<ffffffff8126e051>] keyring_destroy+0x3d/0x88\n\tRSP: 0018:ffff88003e2f3d30  EFLAGS: 00010203\n\tRAX: 00000000ffffff82 RBX: ffff88003bf1a900 RCX: 0000000000000000\n\tRDX: 0000000000000000 RSI: 000000003bfc6901 RDI: ffffffff81a73a40\n\tRBP: ffff88003e2f3d38 R08: 0000000000000152 R09: 0000000000000000\n\tR10: ffff88003e2f3c18 R11: 000000000000865b R12: ffff88003bf1a900\n\tR13: 0000000000000000 R14: ffff88003bf1a908 R15: ffff88003e2f4000\n\t...\n\tCR2: 00000000ffffff8a CR3: 000000003e3ec000 CR4: 00000000000006f0\n\t...\n\tCall Trace:\n\t [<ffffffff8126c756>] key_gc_unused_keys.constprop.1+0x5d/0x10f\n\t [<ffffffff8126ca71>] key_garbage_collector+0x1fa/0x351\n\t [<ffffffff8105ec9b>] process_one_work+0x28e/0x547\n\t [<ffffffff8105fd17>] worker_thread+0x26e/0x361\n\t [<ffffffff8105faa9>] ? rescuer_thread+0x2a8/0x2a8\n\t [<ffffffff810648ad>] kthread+0xf3/0xfb\n\t [<ffffffff810647ba>] ? kthread_create_on_node+0x1c2/0x1c2\n\t [<ffffffff815f2ccf>] ret_from_fork+0x3f/0x70\n\t [<ffffffff810647ba>] ? kthread_create_on_node+0x1c2/0x1c2\n\nNote the value in RAX.  This is a 32-bit representation of -ENOKEY.\n\nThe solution is to only call ->destroy() if the key was successfully\ninstantiated.\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: David Howells <dhowells@redhat.com>\nTested-by: Dmitry Vyukov <dvyukov@google.com>",
    "before_after_code_files": [
      "security/keys/gc.c||security/keys/gc.c"
    ]
  },
  "patch_diff": {
    "security/keys/gc.c||security/keys/gc.c": [
      "File: security/keys/gc.c -> security/keys/gc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "134:   kdebug(\"- %u\", key->serial);",
      "135:   key_check(key);",
      "139:    key->type->destroy(key);",
      "141:   security_key_free(key);",
      "",
      "[Removed Lines]",
      "138:   if (key->type->destroy)",
      "",
      "[Added Lines]",
      "138:   if (test_bit(KEY_FLAG_INSTANTIATED, &key->flags) &&",
      "139:       !test_bit(KEY_FLAG_NEGATIVE, &key->flags) &&",
      "140:       key->type->destroy)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94c4554ba07adbdde396748ee7ae01e86cf2d8d7",
      "candidate_info": {
        "commit_hash": "94c4554ba07adbdde396748ee7ae01e86cf2d8d7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/94c4554ba07adbdde396748ee7ae01e86cf2d8d7",
        "files": [
          "security/keys/gc.c"
        ],
        "message": "KEYS: Fix race between key destruction and finding a keyring by name\n\nThere appears to be a race between:\n\n (1) key_gc_unused_keys() which frees key->security and then calls\n     keyring_destroy() to unlink the name from the name list\n\n (2) find_keyring_by_name() which calls key_permission(), thus accessing\n     key->security, on a key before checking to see whether the key usage is 0\n     (ie. the key is dead and might be cleaned up).\n\nFix this by calling ->destroy() before cleaning up the core key data -\nincluding key->security.\n\nReported-by: Petr Matousek <pmatouse@redhat.com>\nSigned-off-by: David Howells <dhowells@redhat.com>",
        "before_after_code_files": [
          "security/keys/gc.c||security/keys/gc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "security/keys/gc.c||security/keys/gc.c"
          ],
          "candidate": [
            "security/keys/gc.c||security/keys/gc.c"
          ]
        }
      },
      "candidate_diff": {
        "security/keys/gc.c||security/keys/gc.c": [
          "File: security/keys/gc.c -> security/keys/gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   kdebug(\"- %u\", key->serial);",
          "135:   key_check(key);",
          "137:   security_key_free(key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:   if (key->type->destroy)",
          "139:    key->type->destroy(key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   if (test_bit(KEY_FLAG_INSTANTIATED, &key->flags))",
          "149:    atomic_dec(&key->user->nikeys);",
          "155:   key_user_put(key->user);",
          "157:   kfree(key->description);",
          "",
          "[Removed Lines]",
          "152:   if (key->type->destroy)",
          "153:    key->type->destroy(key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}