{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "64697db1243ea8cac331d7fd6c9bd055b3102644",
      "candidate_info": {
        "commit_hash": "64697db1243ea8cac331d7fd6c9bd055b3102644",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/64697db1243ea8cac331d7fd6c9bd055b3102644",
        "files": [
          "Configurations/descrip.mms.tmpl"
        ],
        "message": "Port Ben's parallell Makefile hack to VMS\n\nAs far as I know, there is no MMS / MMK with parallellism today.\nHowever, it might be added in the future (perhaps in MMK at least), so\nwe may as well prepare for it now.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3282)\n(cherry picked from commit 757264207ad8650a89ea903d48ad89f61d56ea9c)",
        "before_after_code_files": [
          "Configurations/descrip.mms.tmpl||Configurations/descrip.mms.tmpl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/descrip.mms.tmpl||Configurations/descrip.mms.tmpl": [
          "File: Configurations/descrip.mms.tmpl -> Configurations/descrip.mms.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:           = qq(deassign statem",
          "85:         deassign record);",
          "86:   }",
          "87:   #use Data::Dumper;",
          "88:   #print STDERR \"DEBUG: before:\\n\", Dumper($unified_info{before});",
          "89:   #print STDERR \"DEBUG: after:\\n\", Dumper($unified_info{after});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   # This makes sure things get built in the order they need",
          "88:   # to. You're welcome.",
          "89:   sub dependmagic {",
          "90:       my $target = shift;",
          "92:       return \"$target : build_generated\\n\\t\\pipe $(MMS) depend && \\$(MMS) _$target\\n_$target\";",
          "93:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242: # The main targets ###################################################",
          "249: build_libs_nodep : $(LIBS), $(SHLIBS)",
          "251: build_engines_nodep : $(ENGINES)",
          "253: build_programs_nodep : $(PROGRAMS), $(SCRIPTS)",
          "257: # Kept around for backward compatibility",
          "258: build_apps build_tests : build_programs",
          "262:         @ ! {- output_off() if $disabled{tests}; \"\" -}",
          "263:         SET DEFAULT [.test]{- move(\"test\") -}",
          "264:         DEFINE SRCTOP {- sourcedir() -}",
          "",
          "[Removed Lines]",
          "244: all : build_generated, -",
          "245:       build_libs_nodep, build_engines_nodep, build_programs_nodep, -",
          "246:       depend",
          "248: build_libs : build_generated, build_libs_nodep, depend",
          "250: build_engines : build_generated, build_engines_nodep, depend",
          "252: build_programs : build_generated, build_programs_nodep, depend",
          "255: build_generated : $(GENERATED_MANDATORY)",
          "260: test tests : build_generated, build_programs_nodep, build_engines_nodep, -",
          "261:              depend",
          "",
          "[Added Lines]",
          "251: {- dependmagic('all'); -} : build_libs_nodep, build_engines_nodep, build_programs_nodep",
          "252: {- dependmagic('build_libs'); -} : build_libs_nodep",
          "253: {- dependmagic('build_engines'); -} : build_engines_nodep",
          "254: {- dependmagic('build_programs'); -} : build_programs_nodep",
          "256: build_generated : $(GENERATED_MANDATORY)",
          "264: test : tests",
          "265: {- dependmagic('tests'); -} : build_programs_nodep, build_engines_nodep",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c08ce19e7972d0e85833b257d74f1e460c4a8b8e",
      "candidate_info": {
        "commit_hash": "c08ce19e7972d0e85833b257d74f1e460c4a8b8e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c08ce19e7972d0e85833b257d74f1e460c4a8b8e",
        "files": [
          "crypto/x509v3/v3_utl.c"
        ],
        "message": "Missing free item on push failure\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1905)\n(cherry picked from commit 2d13250fd695eba777fe7e2af4beb1b7d356bd8f)",
        "before_after_code_files": [
          "crypto/x509v3/v3_utl.c||crypto/x509v3/v3_utl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509v3/v3_utl.c||crypto/x509v3/v3_utl.c": [
          "File: crypto/x509v3/v3_utl.c -> crypto/x509v3/v3_utl.c"
        ]
      }
    },
    {
      "candidate_hash": "3588a2bd1f5b11e259417829518917609a7d0031",
      "candidate_info": {
        "commit_hash": "3588a2bd1f5b11e259417829518917609a7d0031",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3588a2bd1f5b11e259417829518917609a7d0031",
        "files": [
          "util/libcrypto.num"
        ],
        "message": "Code health: make update\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2793)\n(cherry picked from commit 77baccd7fac7cf480e3a3981b7deae5ef3b812b9)",
        "before_after_code_files": [
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: X509_REVOKED_get_ext_count              154 1_1_0 EXIST::FUNCTION:",
          "154: BN_is_prime_fasttest_ex                 155 1_1_0 EXIST::FUNCTION:",
          "155: ERR_load_PKCS12_strings                 156 1_1_0 EXIST::FUNCTION:",
          "157: i2d_DHparams                            158 1_1_0 EXIST::FUNCTION:DH",
          "158: TS_VERIFY_CTX_set_store                 159 1_1_0 EXIST::FUNCTION:TS",
          "159: PKCS12_verify_mac                       160 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "156: EVP_sha384                              157 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "156: EVP_sha384                              157 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1420: SRP_Calc_server_key                     1409 1_1_0 EXIST::FUNCTION:SRP",
          "1421: BN_mod_exp_simple                       1410 1_1_0 EXIST::FUNCTION:",
          "1422: BIO_set_ex_data                         1411 1_1_0 EXIST::FUNCTION:",
          "1424: X509_STORE_CTX_get_explicit_policy      1413 1_1_0 EXIST::FUNCTION:",
          "1425: EVP_DecodeBlock                         1414 1_1_0 EXIST::FUNCTION:",
          "1426: OCSP_REQ_CTX_http                       1415 1_1_0 EXIST::FUNCTION:OCSP",
          "",
          "[Removed Lines]",
          "1423: SHA512                                  1412 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "1423: SHA512                                  1412 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1487: CRYPTO_mem_debug_free                   1475 1_1_0 EXIST::FUNCTION:CRYPTO_MDEBUG",
          "1488: d2i_OCSP_REQUEST                        1476 1_1_0 EXIST::FUNCTION:OCSP",
          "1489: ENGINE_get_cipher_engine                1477 1_1_0 EXIST::FUNCTION:ENGINE",
          "1491: TS_RESP_CTX_set_certs                   1479 1_1_0 EXIST::FUNCTION:TS",
          "1492: BN_MONT_CTX_free                        1480 1_1_0 EXIST::FUNCTION:",
          "1493: BN_GF2m_mod_solve_quad_arr              1481 1_1_0 EXIST::FUNCTION:EC2M",
          "",
          "[Removed Lines]",
          "1490: SHA384_Final                            1478 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "1490: SHA384_Final                            1478 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2829: X509_get_pubkey_parameters              2787 1_1_0 EXIST::FUNCTION:",
          "2830: PKCS12_setup_mac                        2788 1_1_0 EXIST::FUNCTION:",
          "2831: PEM_read_bio_PKCS7                      2789 1_1_0 EXIST::FUNCTION:",
          "2833: X509_VERIFY_PARAM_set1_host             2791 1_1_0 EXIST::FUNCTION:",
          "2834: OCSP_resp_find_status                   2792 1_1_0 EXIST::FUNCTION:OCSP",
          "2835: d2i_ASN1_T61STRING                      2793 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "2832: SHA512_Final                            2790 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "2832: SHA512_Final                            2790 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3010: ENGINE_get_finish_function              2965 1_1_0 EXIST::FUNCTION:ENGINE",
          "3011: EC_POINT_add                            2966 1_1_0 EXIST::FUNCTION:EC",
          "3012: EC_KEY_oct2key                          2967 1_1_0 EXIST::FUNCTION:EC",
          "3014: ASN1_UNIVERSALSTRING_new                2969 1_1_0 EXIST::FUNCTION:",
          "3015: EVP_PKEY_print_private                  2970 1_1_0 EXIST::FUNCTION:",
          "3016: ASN1_INTEGER_new                        2971 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3013: SHA384_Init                             2968 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "3013: SHA384_Init                             2968 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3038: EVP_PKEY_new                            2992 1_1_0 EXIST::FUNCTION:",
          "3039: i2d_POLICYINFO                          2993 1_1_0 EXIST::FUNCTION:",
          "3040: BN_get_flags                            2994 1_1_0 EXIST::FUNCTION:",
          "3042: NCONF_get_string                        2996 1_1_0 EXIST::FUNCTION:",
          "3043: d2i_PROXY_CERT_INFO_EXTENSION           2997 1_1_0 EXIST::FUNCTION:",
          "3044: EC_POINT_point2buf                      2998 1_1_0 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "3041: SHA384                                  2995 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "3041: SHA384                                  2995 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3093: EVP_DecryptUpdate                       3046 1_1_0 EXIST::FUNCTION:",
          "3094: CAST_cbc_encrypt                        3047 1_1_0 EXIST::FUNCTION:CAST",
          "3095: BN_BLINDING_invert                      3048 1_1_0 EXIST::FUNCTION:",
          "3097: ESS_ISSUER_SERIAL_new                   3050 1_1_0 EXIST::FUNCTION:TS",
          "3098: PKCS12_SAFEBAG_get0_pkcs8               3051 1_1_0 EXIST::FUNCTION:",
          "3099: X509_get_ext_by_NID                     3052 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3096: SHA512_Update                           3049 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "3096: SHA512_Update                           3049 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3337: EVP_PKEY_CTX_free                       3290 1_1_0 EXIST::FUNCTION:",
          "3338: PBEPARAM_free                           3291 1_1_0 EXIST::FUNCTION:",
          "3339: NETSCAPE_SPKI_set_pubkey                3292 1_1_0 EXIST::FUNCTION:",
          "3341: X509_CRL_match                          3294 1_1_0 EXIST::FUNCTION:",
          "3342: i2s_ASN1_IA5STRING                      3295 1_1_0 EXIST::FUNCTION:",
          "3343: EC_KEY_get_default_method               3296 1_1_0 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "3340: EVP_sha512                              3293 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "3340: EVP_sha512                              3293 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3444: X509_OBJECT_retrieve_match              3396 1_1_0 EXIST::FUNCTION:",
          "3445: EVP_aes_128_ctr                         3397 1_1_0 EXIST::FUNCTION:",
          "3446: EVP_PBE_find                            3398 1_1_0 EXIST::FUNCTION:",
          "3448: ERR_add_error_vdata                     3400 1_1_0 EXIST::FUNCTION:",
          "3449: OCSP_REQUEST_get_ext                    3401 1_1_0 EXIST::FUNCTION:OCSP",
          "3450: NETSCAPE_SPKAC_new                      3402 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3447: SHA512_Transform                        3399 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "3447: SHA512_Transform                        3399 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3676: TS_RESP_CTX_free                        3632 1_1_0 EXIST::FUNCTION:TS",
          "3677: d2i_PUBKEY                              3633 1_1_0 EXIST::FUNCTION:",
          "3678: ASYNC_cleanup_thread                    3634 1_1_0 EXIST::FUNCTION:",
          "3680: CRYPTO_cfb128_1_encrypt                 3636 1_1_0 EXIST::FUNCTION:",
          "3681: BIO_set_cipher                          3637 1_1_0 EXIST::FUNCTION:",
          "3682: PEM_read_PUBKEY                         3638 1_1_0 EXIST::FUNCTION:STDIO",
          "",
          "[Removed Lines]",
          "3679: SHA384_Update                           3635 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "3679: SHA384_Update                           3635 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3951: d2i_OCSP_SINGLERESP                     3900 1_1_0 EXIST::FUNCTION:OCSP",
          "3952: EVP_CIPHER_CTX_num                      3901 1_1_0 EXIST::FUNCTION:",
          "3953: EVP_PKEY_verify_recover_init            3902 1_1_0 EXIST::FUNCTION:",
          "3955: TS_MSG_IMPRINT_set_msg                  3904 1_1_0 EXIST::FUNCTION:TS",
          "3956: CMS_unsigned_add1_attr                  3905 1_1_0 EXIST::FUNCTION:CMS",
          "3957: OPENSSL_LH_doall                        3906 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3954: SHA512_Init                             3903 1_1_0 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Added Lines]",
          "3954: SHA512_Init                             3903 1_1_0 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c9e644192256001cc04f3faa1249313b5b1b481",
      "candidate_info": {
        "commit_hash": "3c9e644192256001cc04f3faa1249313b5b1b481",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3c9e644192256001cc04f3faa1249313b5b1b481",
        "files": [
          "engines/e_capi.c"
        ],
        "message": "engine/e_capi.c: more formatting and styling fixes.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 8f0e5888ea4c577c5a1f0d667786da6376099c86)",
        "before_after_code_files": [
          "engines/e_capi.c||engines/e_capi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_capi.c||engines/e_capi.c": [
          "File: engines/e_capi.c -> engines/e_capi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: static void capi_addlasterror(void);",
          "109: static void capi_adderror(DWORD err);",
          "119:                                      HCERTSTORE hstore);",
          "123: static EVP_PKEY *capi_load_privkey(ENGINE *eng, const char *key_id,",
          "124:                                    UI_METHOD *ui_method, void *callback_data);",
          "",
          "[Removed Lines]",
          "111: static void CAPI_trace(CAPI_CTX * ctx, char *format, ...);",
          "113: static int capi_list_providers(CAPI_CTX * ctx, BIO *out);",
          "114: static int capi_list_containers(CAPI_CTX * ctx, BIO *out);",
          "115: int capi_list_certs(CAPI_CTX * ctx, BIO *out, char *storename);",
          "116: void capi_free_key(CAPI_KEY * key);",
          "118: static PCCERT_CONTEXT capi_find_cert(CAPI_CTX * ctx, const char *id,",
          "121: CAPI_KEY *capi_find_key(CAPI_CTX * ctx, const char *id);",
          "",
          "[Added Lines]",
          "111: static void CAPI_trace(CAPI_CTX *ctx, char *format, ...);",
          "113: static int capi_list_providers(CAPI_CTX *ctx, BIO *out);",
          "114: static int capi_list_containers(CAPI_CTX *ctx, BIO *out);",
          "115: int capi_list_certs(CAPI_CTX *ctx, BIO *out, char *storename);",
          "116: void capi_free_key(CAPI_KEY *key);",
          "118: static PCCERT_CONTEXT capi_find_cert(CAPI_CTX *ctx, const char *id,",
          "121: CAPI_KEY *capi_find_key(CAPI_CTX *ctx, const char *id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: };",
          "195: static CAPI_CTX *capi_ctx_new(void);",
          "198:                                  int check);",
          "201: # define CAPI_CMD_LIST_CERTS             ENGINE_CMD_BASE",
          "202: # define CAPI_CMD_LOOKUP_CERT            (ENGINE_CMD_BASE + 1)",
          "",
          "[Removed Lines]",
          "196: static void capi_ctx_free(CAPI_CTX * ctx);",
          "197: static int capi_ctx_set_provname(CAPI_CTX * ctx, LPSTR pname, DWORD type,",
          "199: static int capi_ctx_set_provname_idx(CAPI_CTX * ctx, int idx);",
          "",
          "[Added Lines]",
          "196: static void capi_ctx_free(CAPI_CTX *ctx);",
          "197: static int capi_ctx_set_provname(CAPI_CTX *ctx, LPSTR pname, DWORD type,",
          "199: static int capi_ctx_set_provname_idx(CAPI_CTX *ctx, int idx);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "626: {",
          "627:     unsigned char *pubkey = NULL;",
          "628:     DWORD len;",
          "",
          "[Removed Lines]",
          "625: static EVP_PKEY *capi_get_pkey(ENGINE *eng, CAPI_KEY * key)",
          "",
          "[Added Lines]",
          "625: static EVP_PKEY *capi_get_pkey(ENGINE *eng, CAPI_KEY *key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1050: }",
          "1051: # endif",
          "1054:                         va_list argptr)",
          "1055: {",
          "1056:     BIO *out;",
          "",
          "[Removed Lines]",
          "1053: static void capi_vtrace(CAPI_CTX * ctx, int level, char *format,",
          "",
          "[Added Lines]",
          "1053: static void capi_vtrace(CAPI_CTX *ctx, int level, char *format,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1066:     BIO_free(out);",
          "1067: }",
          "1070: {",
          "1071:     va_list args;",
          "1072:     va_start(args, format);",
          "",
          "[Removed Lines]",
          "1069: static void CAPI_trace(CAPI_CTX * ctx, char *format, ...)",
          "",
          "[Added Lines]",
          "1069: static void CAPI_trace(CAPI_CTX *ctx, char *format, ...)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1112:     return str;",
          "1113: }",
          "1116:                              DWORD idx)",
          "1117: {",
          "1118:     DWORD len, err;",
          "",
          "[Removed Lines]",
          "1115: static int capi_get_provname(CAPI_CTX * ctx, LPSTR * pname, DWORD * ptype,",
          "",
          "[Added Lines]",
          "1115: static int capi_get_provname(CAPI_CTX *ctx, LPSTR *pname, DWORD *ptype,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1154:     return 1;",
          "1155: }",
          "1158: {",
          "1159:     DWORD idx, ptype;",
          "1160:     int ret;",
          "",
          "[Removed Lines]",
          "1157: static int capi_list_providers(CAPI_CTX * ctx, BIO *out)",
          "",
          "[Added Lines]",
          "1157: static int capi_list_providers(CAPI_CTX *ctx, BIO *out)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1173:     return 1;",
          "1174: }",
          "1177: {",
          "1178:     int ret = 1;",
          "1179:     HCRYPTPROV hprov;",
          "",
          "[Removed Lines]",
          "1176: static int capi_list_containers(CAPI_CTX * ctx, BIO *out)",
          "",
          "[Added Lines]",
          "1176: static int capi_list_containers(CAPI_CTX *ctx, BIO *out)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1257:     return ret;",
          "1258: }",
          "1261:                                                PCCERT_CONTEXT cert)",
          "1262: {",
          "1263:     DWORD len;",
          "",
          "[Removed Lines]",
          "1260: static CRYPT_KEY_PROV_INFO *capi_get_prov_info(CAPI_CTX * ctx,",
          "",
          "[Added Lines]",
          "1260: static CRYPT_KEY_PROV_INFO *capi_get_prov_info(CAPI_CTX *ctx,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1282:     return pinfo;",
          "1283: }",
          "1287: {",
          "1288:     char *provname = NULL, *contname = NULL;",
          "1289:     if (!pinfo) {",
          "",
          "[Removed Lines]",
          "1285: static void capi_dump_prov_info(CAPI_CTX * ctx, BIO *out,",
          "1286:                                 CRYPT_KEY_PROV_INFO * pinfo)",
          "",
          "[Added Lines]",
          "1285: static void capi_dump_prov_info(CAPI_CTX *ctx, BIO *out,",
          "1286:                                 CRYPT_KEY_PROV_INFO *pinfo)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1305:     OPENSSL_free(contname);",
          "1306: }",
          "1309: {",
          "1310:     LPWSTR wfname;",
          "1311:     DWORD dlen;",
          "",
          "[Removed Lines]",
          "1308: static char *capi_cert_get_fname(CAPI_CTX * ctx, PCCERT_CONTEXT cert)",
          "",
          "[Added Lines]",
          "1308: static char *capi_cert_get_fname(CAPI_CTX *ctx, PCCERT_CONTEXT cert)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1330:     return NULL;",
          "1331: }",
          "1334: {",
          "1335:     X509 *x;",
          "1336:     const unsigned char *p;",
          "",
          "[Removed Lines]",
          "1333: static void capi_dump_cert(CAPI_CTX * ctx, BIO *out, PCCERT_CONTEXT cert)",
          "",
          "[Added Lines]",
          "1333: static void capi_dump_cert(CAPI_CTX *ctx, BIO *out, PCCERT_CONTEXT cert)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1372:     X509_free(x);",
          "1373: }",
          "1376: {",
          "1377:     HCERTSTORE hstore;",
          "",
          "[Removed Lines]",
          "1375: static HCERTSTORE capi_open_store(CAPI_CTX * ctx, char *storename)",
          "",
          "[Added Lines]",
          "1375: static HCERTSTORE capi_open_store(CAPI_CTX *ctx, char *storename)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1391:     return hstore;",
          "1392: }",
          "1395: {",
          "1396:     char *storename;",
          "1397:     int idx;",
          "",
          "[Removed Lines]",
          "1394: int capi_list_certs(CAPI_CTX * ctx, BIO *out, char *id)",
          "",
          "[Added Lines]",
          "1394: int capi_list_certs(CAPI_CTX *ctx, BIO *out, char *id)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1429:     return ret;",
          "1430: }",
          "1433:                                      HCERTSTORE hstore)",
          "1434: {",
          "1435:     PCCERT_CONTEXT cert = NULL;",
          "",
          "[Removed Lines]",
          "1432: static PCCERT_CONTEXT capi_find_cert(CAPI_CTX * ctx, const char *id,",
          "",
          "[Added Lines]",
          "1432: static PCCERT_CONTEXT capi_find_cert(CAPI_CTX *ctx, const char *id,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1460:     }",
          "1461: }",
          "1464:                               TCHAR *provname, DWORD ptype, DWORD keyspec)",
          "1465: {",
          "1466:     DWORD dwFlags = 0;",
          "",
          "[Removed Lines]",
          "1463: static CAPI_KEY *capi_get_key(CAPI_CTX * ctx, const TCHAR *contname,",
          "",
          "[Added Lines]",
          "1463: static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const TCHAR *contname,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1508:     return NULL;",
          "1509: }",
          "1512: {",
          "1513:     CAPI_KEY *key = NULL;",
          "1514:     CRYPT_KEY_PROV_INFO *pinfo = NULL;",
          "",
          "[Removed Lines]",
          "1511: static CAPI_KEY *capi_get_cert_key(CAPI_CTX * ctx, PCCERT_CONTEXT cert)",
          "",
          "[Added Lines]",
          "1511: static CAPI_KEY *capi_get_cert_key(CAPI_CTX *ctx, PCCERT_CONTEXT cert)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1536:     return key;",
          "1537: }",
          "1540: {",
          "1541:     PCCERT_CONTEXT cert;",
          "1542:     HCERTSTORE hstore;",
          "",
          "[Removed Lines]",
          "1539: CAPI_KEY *capi_find_key(CAPI_CTX * ctx, const char *id)",
          "",
          "[Added Lines]",
          "1539: CAPI_KEY *capi_find_key(CAPI_CTX *ctx, const char *id)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1580:     return key;",
          "1581: }",
          "1584: {",
          "1585:     if (!key)",
          "1586:         return;",
          "",
          "[Removed Lines]",
          "1583: void capi_free_key(CAPI_KEY * key)",
          "",
          "[Added Lines]",
          "1583: void capi_free_key(CAPI_KEY *key)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1611:     return ctx;",
          "1612: }",
          "1615: {",
          "1616:     CAPI_trace(ctx, \"Calling capi_ctx_free with %lx\\n\", ctx);",
          "1617:     if (!ctx)",
          "",
          "[Removed Lines]",
          "1614: static void capi_ctx_free(CAPI_CTX * ctx)",
          "",
          "[Added Lines]",
          "1614: static void capi_ctx_free(CAPI_CTX *ctx)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1623:     OPENSSL_free(ctx);",
          "1624: }",
          "1627:                                  int check)",
          "1628: {",
          "1629:     LPSTR tmpcspname;",
          "",
          "[Removed Lines]",
          "1626: static int capi_ctx_set_provname(CAPI_CTX * ctx, LPSTR pname, DWORD type,",
          "",
          "[Added Lines]",
          "1626: static int capi_ctx_set_provname(CAPI_CTX *ctx, LPSTR pname, DWORD type,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1662:     return 1;",
          "1663: }",
          "1666: {",
          "1667:     LPSTR pname;",
          "1668:     DWORD type;",
          "",
          "[Removed Lines]",
          "1665: static int capi_ctx_set_provname_idx(CAPI_CTX * ctx, int idx)",
          "",
          "[Added Lines]",
          "1665: static int capi_ctx_set_provname_idx(CAPI_CTX *ctx, int idx)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87f7c47fdb56fd78823d50ee85095e6e0c17b117",
      "candidate_info": {
        "commit_hash": "87f7c47fdb56fd78823d50ee85095e6e0c17b117",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/87f7c47fdb56fd78823d50ee85095e6e0c17b117",
        "files": [
          "apps/openssl.c"
        ],
        "message": "Fix list -disabled for blake2 alg\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2241)\n(cherry picked from commit 487d3a726a1970e84853434561d88cb4ac212d15)",
        "before_after_code_files": [
          "apps/openssl.c||apps/openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/openssl.c||apps/openssl.c": [
          "File: apps/openssl.c -> apps/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "548: #ifdef OPENSSL_NO_BF",
          "549:     BIO_puts(bio_out, \"BF\\n\");",
          "550: #endif",
          "552:     BIO_puts(bio_out, \"BLAKE2\\n\");",
          "553: #endif",
          "554: #ifdef OPENSSL_NO_CAMELLIA",
          "",
          "[Removed Lines]",
          "551: #ifndef OPENSSL_NO_BLAKE2",
          "",
          "[Added Lines]",
          "551: #ifdef OPENSSL_NO_BLAKE2",
          "",
          "---------------"
        ]
      }
    }
  ]
}